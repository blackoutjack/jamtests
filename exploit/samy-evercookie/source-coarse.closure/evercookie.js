introspect(JAM.policy.pFull) {
function logIt(msg) {
  var elt$$1 = document.getElementById("display");
  if (elt$$1) {
    elt$$1.innerHTML = msg;
  } else {
    alert(msg);
  }
}
function doCookieSet() {
  var setkey = document.getElementById("setkey").value;
  var setval = document.getElementById("setval").value;
  var ec = new Evercookie;
  ec.set(setkey, setval);
}
function doCookieGet() {
  function getCookie(best_candidate, all_candidates) {
    var msg$$1 = "The retrieved cookie is: " + best_candidate;
    var item$$1;
    for (item$$1 in all_candidates) {
      var v = all_candidates[item$$1];
      if (typeof v === "string") {
        v = '"' + v + '"';
      }
      msg$$1 += "<br/>Storage mechanism " + item$$1 + " returned " + v;
    }
    logIt(msg$$1);
  }
  var getkey = document.getElementById("getkey").value;
  var ec$$1 = new Evercookie;
  ec$$1.get(getkey, getCookie);
}
try {
  (function(window$$1) {
    function newImage(src$$1) {
      var img$$2 = new Image$$1;
      img$$2.style.visibility = "hidden";
      img$$2.style.position = "absolute";
      img$$2.src = src$$1;
    }
    function idb() {
      if ("indexedDB" in window$$1) {
        return true;
      } else {
        if (window$$1.indexedDB = window$$1.indexedDB || window$$1.mozIndexedDB || window$$1.webkitIndexedDB || window$$1.msIndexedDB) {
          return true;
        } else {
          return false;
        }
      }
    }
    function _evercookie_flash_var(cookie) {
      _global_lso = cookie;
      var swf = document$$1.getElementById("myswf");
      if (swf && swf.parentNode) {
        swf.parentNode.removeChild(swf);
      }
    }
    function Evercookie$$1(options$$1) {
      options$$1 = options$$1 || {};
      var opts = {};
      var key$$15;
      for (key$$15 in defaultOptionMap) {
        var optValue = options$$1[key$$15];
        if (typeof optValue !== "undefined") {
          opts[key$$15] = optValue;
        } else {
          opts[key$$15] = defaultOptionMap[key$$15];
        }
      }
      if (typeof opts.domain === "function") {
        opts.domain = opts.domain(window$$1);
      }
      var _ec_history = opts.history;
      var _ec_java = opts.java;
      var _ec_tests = opts.tests;
      var _ec_baseurl = opts.baseurl;
      var _ec_asseturi = opts.asseturi;
      var _ec_phpuri = opts.phpuri;
      var _ec_domain = opts.domain;
      var self$$1 = this;
      this._ec = {};
      this.get = function(name$$30, cb, dont_reset) {
        self$$1._evercookie(name$$30, cb, undefined, undefined, dont_reset);
      };
      this.set = function(name$$31, value$$28) {
        self$$1._evercookie(name$$31, function() {
        }, value$$28);
      };
      this._evercookie = function(name$$32, cb$$1, value$$29, i$$1, dont_reset$$1) {
        if (self$$1._evercookie === undefined) {
          self$$1 = this;
        }
        if (i$$1 === undefined) {
          i$$1 = 0;
        }
        if (i$$1 === 0) {
          try {
            self$$1.evercookie_database_storage(name$$32, value$$29);
          } catch (ex) {
          }
          try {
            self$$1.evercookie_png(name$$32, value$$29);
          } catch (ex$$1) {
          }
          try {
            self$$1.evercookie_etag(name$$32, value$$29);
          } catch (ex$$2) {
          }
          try {
            self$$1.evercookie_cache(name$$32, value$$29);
          } catch (ex$$3) {
          }
          try {
            self$$1.evercookie_lso(name$$32, value$$29);
          } catch (ex$$4) {
          }
          if (opts.silverlight) {
            try {
              self$$1.evercookie_silverlight(name$$32, value$$29);
            } catch (ex$$5) {
            }
          }
          if (opts.authPath) {
            try {
              self$$1.evercookie_auth(name$$32, value$$29);
            } catch (ex$$6) {
            }
          }
          if (_ec_java) {
            try {
              self$$1.evercookie_java(name$$32, value$$29);
            } catch (ex$$7) {
            }
          }
          try {
            self$$1._ec.userData = self$$1.evercookie_userdata(name$$32, value$$29);
          } catch (ex$$8) {
          }
          try {
            self$$1._ec.cookieData = self$$1.evercookie_cookie(name$$32, value$$29);
          } catch (ex$$9) {
          }
          try {
            self$$1._ec.localData = self$$1.evercookie_local_storage(name$$32, value$$29);
          } catch (ex$$10) {
          }
          try {
            self$$1._ec.globalData = self$$1.evercookie_global_storage(name$$32, value$$29);
          } catch (ex$$11) {
          }
          try {
            self$$1._ec.sessionData = self$$1.evercookie_session_storage(name$$32, value$$29);
          } catch (ex$$12) {
          }
          try {
            self$$1._ec.windowData = self$$1.evercookie_window(name$$32, value$$29);
          } catch (ex$$13) {
          }
          if (_ec_history) {
            try {
              self$$1._ec.historyData = self$$1.evercookie_history(name$$32, value$$29);
            } catch (ex$$14) {
            }
          }
        }
        if (value$$29 !== undefined) {
          if ((typeof _global_lso === "undefined" || typeof _global_isolated === "undefined") && i$$1++ < _ec_tests) {
            setTimeout(function() {
              self$$1._evercookie(name$$32, cb$$1, value$$29, i$$1, dont_reset$$1);
            }, 300);
          }
        } else {
          if ((window$$1.openDatabase && typeof self$$1._ec.dbData === "undefined" || idb() && (typeof self$$1._ec.idbData === "undefined" || self$$1._ec.idbData === "") || typeof _global_lso === "undefined" || typeof self$$1._ec.etagData === "undefined" || typeof self$$1._ec.cacheData === "undefined" || typeof self$$1._ec.javaData === "undefined" || document$$1.createElement("canvas").getContext && (typeof self$$1._ec.pngData === "undefined" || self$$1._ec.pngData === "") || typeof _global_isolated === 
          "undefined") && i$$1++ < _ec_tests) {
            setTimeout(function() {
              self$$1._evercookie(name$$32, cb$$1, value$$29, i$$1, dont_reset$$1);
            }, 300);
          } else {
            self$$1._ec.lsoData = self$$1.getFromStr(name$$32, _global_lso);
            _global_lso = undefined;
            self$$1._ec.slData = self$$1.getFromStr(name$$32, _global_isolated);
            _global_isolated = undefined;
            var tmpec = self$$1._ec;
            var candidates = [];
            var bestnum = 0;
            var candidate;
            var item;
            self$$1._ec = {};
            for (item in tmpec) {
              if (tmpec[item] && tmpec[item] !== "null" && tmpec[item] !== "undefined") {
                candidates[tmpec[item]] = candidates[tmpec[item]] === undefined ? 1 : candidates[tmpec[item]] + 1;
              }
            }
            for (item in candidates) {
              if (candidates[item] > bestnum) {
                bestnum = candidates[item];
                candidate = item;
              }
            }
            if (candidate !== undefined && (dont_reset$$1 === undefined || dont_reset$$1 !== 1)) {
              self$$1.set(name$$32, candidate);
            }
            if (typeof cb$$1 === "function") {
              cb$$1(candidate, tmpec);
            }
          }
        }
      };
      this.evercookie_window = function(name$$33, value$$30) {
        try {
          if (value$$30 !== undefined) {
            var JSCompiler_inline_result$$0;
            JSCompiler_inline_label__ec_replace_7: {
              var str$$inline_1 = window$$1.name;
              var key$$inline_2 = name$$33;
              var value$$inline_3 = value$$30;
              if (str$$inline_1.indexOf("&" + key$$inline_2 + "=") > -1 || str$$inline_1.indexOf(key$$inline_2 + "=") === 0) {
                var idx$$inline_4 = str$$inline_1.indexOf("&" + key$$inline_2 + "=");
                var end$$inline_5;
                var newstr$$inline_6;
                if (idx$$inline_4 === -1) {
                  idx$$inline_4 = str$$inline_1.indexOf(key$$inline_2 + "=");
                }
                end$$inline_5 = str$$inline_1.indexOf("&", idx$$inline_4 + 1);
                if (end$$inline_5 !== -1) {
                  newstr$$inline_6 = str$$inline_1.substr(0, idx$$inline_4) + str$$inline_1.substr(end$$inline_5 + (idx$$inline_4 ? 0 : 1)) + "&" + key$$inline_2 + "=" + value$$inline_3;
                } else {
                  newstr$$inline_6 = str$$inline_1.substr(0, idx$$inline_4) + "&" + key$$inline_2 + "=" + value$$inline_3;
                }
                JSCompiler_inline_result$$0 = newstr$$inline_6;
              } else {
                JSCompiler_inline_result$$0 = str$$inline_1 + "&" + key$$inline_2 + "=" + value$$inline_3;
              }
            }
            window$$1.name = JSCompiler_inline_result$$0;
          } else {
            return this.getFromStr(name$$33, window$$1.name);
          }
        } catch (e$$4) {
        }
      };
      this.evercookie_userdata = function(name$$34, value$$31) {
        try {
          var elm = this.createElem("div", "userdata_el", 1);
          elm.style.behavior = "url(#default#userData)";
          if (value$$31 !== undefined) {
            elm.setAttribute(name$$34, value$$31);
            elm.save(name$$34);
          } else {
            elm.load(name$$34);
            return elm.getAttribute(name$$34);
          }
        } catch (e$$5) {
        }
      };
      this.ajax = function(settings) {
        var headers;
        var name$$35;
        var transports;
        var transport;
        var i$$2;
        var length$$11;
        headers = {"X-Requested-With":"XMLHttpRequest", "Accept":"text/javascript, text/html, application/xml, text/xml, */*"};
        transports = [function() {
          return new XMLHttpRequest;
        }, function() {
          return new ActiveXObject("Msxml2.XMLHTTP");
        }, function() {
          return new ActiveXObject("Microsoft.XMLHTTP");
        }];
        i$$2 = 0, length$$11 = transports.length;
        for (;i$$2 < length$$11;i$$2++) {
          transport = transports[i$$2];
          try {
            transport = transport();
            break;
          } catch (e$$6) {
          }
        }
        transport.onreadystatechange = function() {
          if (transport.readyState !== 4) {
            return;
          }
          settings.success(transport.responseText);
        };
        transport.open("get", settings.url, true);
        for (name$$35 in headers) {
          transport.setRequestHeader(name$$35, headers[name$$35]);
        }
        transport.send();
      };
      this.evercookie_cache = function(name$$36, value$$32) {
        if (value$$32 !== undefined) {
          document$$1.cookie = opts.cacheCookieName + "=" + value$$32 + "; path=/; domain=" + _ec_domain;
          self$$1.ajax({url:_ec_baseurl + _ec_phpuri + opts.cachePath + "?name=" + name$$36 + "&cookie=" + opts.cacheCookieName, success:function(data$$18) {
          }});
        } else {
          var origvalue = this.getFromStr(opts.cacheCookieName, document$$1.cookie);
          self$$1._ec.cacheData = undefined;
          document$$1.cookie = opts.cacheCookieName + "=; expires=Mon, 20 Sep 2010 00:00:00 UTC; path=/; domain=" + _ec_domain;
          self$$1.ajax({url:_ec_baseurl + _ec_phpuri + opts.cachePath + "?name=" + name$$36 + "&cookie=" + opts.cacheCookieName, success:function(data$$19) {
            document$$1.cookie = opts.cacheCookieName + "=" + origvalue + "; expires=Tue, 31 Dec 2030 00:00:00 UTC; path=/; domain=" + _ec_domain;
            self$$1._ec.cacheData = data$$19;
          }});
        }
      };
      this.evercookie_auth = function(name$$37, value$$33) {
        if (value$$33 !== undefined) {
          newImage("//" + value$$33 + "@" + location.host + _ec_baseurl + _ec_phpuri + opts.authPath + "?name=" + name$$37);
        } else {
          self$$1.ajax({url:_ec_baseurl + _ec_phpuri + opts.authPath + "?name=" + name$$37, success:function(data$$20) {
            self$$1._ec.authData = data$$20;
          }});
        }
      };
      this.evercookie_etag = function(name$$38, value$$34) {
        if (value$$34 !== undefined) {
          document$$1.cookie = opts.etagCookieName + "=" + value$$34 + "; path=/; domain=" + _ec_domain;
          self$$1.ajax({url:_ec_baseurl + _ec_phpuri + opts.etagPath + "?name=" + name$$38 + "&cookie=" + opts.etagCookieName, success:function(data$$21) {
          }});
        } else {
          var origvalue$$1 = this.getFromStr(opts.etagCookieName, document$$1.cookie);
          self$$1._ec.etagData = undefined;
          document$$1.cookie = opts.etagCookieName + "=; expires=Mon, 20 Sep 2010 00:00:00 UTC; path=/; domain=" + _ec_domain;
          self$$1.ajax({url:_ec_baseurl + _ec_phpuri + opts.etagPath + "?name=" + name$$38 + "&cookie=" + opts.etagCookieName, success:function(data$$22) {
            document$$1.cookie = opts.etagCookieName + "=" + origvalue$$1 + "; expires=Tue, 31 Dec 2030 00:00:00 UTC; path=/; domain=" + _ec_domain;
            self$$1._ec.etagData = data$$22;
          }});
        }
      };
      this.evercookie_java = function(name$$39, value$$35) {
        function doSetOrGet(appletId) {
          var applet = document$$1.getElementById(appletId);
          if (value$$35 !== undefined) {
            applet.set(name$$39, value$$35);
          } else {
            self$$1._ec.javaData = applet.get(name$$39);
          }
        }
        var div = document$$1.getElementById("ecAppletContainer");
        if (typeof dtjava === "undefined") {
          return;
        }
        if (div === null || div === undefined || !div.length) {
          div = document$$1.createElement("div");
          div.setAttribute("id", "ecAppletContainer");
          div.style.position = "absolute";
          div.style.top = "-3000px";
          div.style.left = "-3000px";
          div.style.width = "1px";
          div.style.height = "1px";
          document$$1.body.appendChild(div);
        }
        if (typeof ecApplet === "undefined") {
          dtjava.embed({id:"ecApplet", url:_ec_baseurl + _ec_asseturi + "/evercookie.jnlp", width:"1px", height:"1px", placeholder:"ecAppletContainer"}, {}, {onJavascriptReady:doSetOrGet});
        } else {
          doSetOrGet("ecApplet");
        }
      };
      this.evercookie_lso = function(name$$40, value$$36) {
        var div$$1 = document$$1.getElementById("swfcontainer");
        var flashvars = {};
        var params = {};
        var attributes = {};
        if (div$$1 === null || div$$1 === undefined || !div$$1.length) {
          div$$1 = document$$1.createElement("div");
          div$$1.setAttribute("id", "swfcontainer");
          document$$1.body.appendChild(div$$1);
        }
        if (value$$36 !== undefined) {
          flashvars.everdata = name$$40 + "=" + value$$36;
        }
        params.swliveconnect = "true";
        attributes.id = "myswf";
        attributes.name = "myswf";
        swfobject$$1.embedSWF(_ec_baseurl + _ec_asseturi + "/evercookie.swf", "swfcontainer", "1", "1", "9.0.0", false, flashvars, params, attributes);
      };
      this.evercookie_png = function(name$$41, value$$37) {
        var canvas = document$$1.createElement("canvas");
        var img$$3;
        var ctx;
        var origvalue$$2;
        canvas.style.visibility = "hidden";
        canvas.style.position = "absolute";
        canvas.width = 200;
        canvas.height = 1;
        if (canvas && canvas.getContext) {
          img$$3 = new Image$$1;
          img$$3.style.visibility = "hidden";
          img$$3.style.position = "absolute";
          if (value$$37 !== undefined) {
            document$$1.cookie = opts.pngCookieName + "=" + value$$37 + "; path=/; domain=" + _ec_domain;
          } else {
            self$$1._ec.pngData = undefined;
            ctx = canvas.getContext("2d");
            origvalue$$2 = this.getFromStr(opts.pngCookieName, document$$1.cookie);
            document$$1.cookie = opts.pngCookieName + "=; expires=Mon, 20 Sep 2010 00:00:00 UTC; path=/; domain=" + _ec_domain;
            img$$3.onload = function() {
              document$$1.cookie = opts.pngCookieName + "=" + origvalue$$2 + "; expires=Tue, 31 Dec 2030 00:00:00 UTC; path=/; domain=" + _ec_domain;
              self$$1._ec.pngData = "";
              ctx.drawImage(img$$3, 0, 0);
              var imgd = ctx.getImageData(0, 0, 200, 1);
              var pix = imgd.data;
              var i$$3;
              var n$$1;
              i$$3 = 0, n$$1 = pix.length;
              for (;i$$3 < n$$1;i$$3 += 4) {
                if (pix[i$$3] === 0) {
                  break;
                }
                self$$1._ec.pngData += String.fromCharCode(pix[i$$3]);
                if (pix[i$$3 + 1] === 0) {
                  break;
                }
                self$$1._ec.pngData += String.fromCharCode(pix[i$$3 + 1]);
                if (pix[i$$3 + 2] === 0) {
                  break;
                }
                self$$1._ec.pngData += String.fromCharCode(pix[i$$3 + 2]);
              }
            };
          }
          img$$3.src = _ec_baseurl + _ec_phpuri + opts.pngPath + "?name=" + name$$41 + "&cookie=" + opts.pngCookieName;
        }
      };
      this.evercookie_local_storage = function(name$$42, value$$38) {
        try {
          if (localStore) {
            if (value$$38 !== undefined) {
              localStore.setItem(name$$42, value$$38);
            } else {
              return localStore.getItem(name$$42);
            }
          }
        } catch (e$$7) {
        }
      };
      this.evercookie_database_storage = function(name$$43, value$$39) {
        try {
          if (window$$1.openDatabase) {
            var database = window$$1.openDatabase("sqlite_evercookie", "", "evercookie", 1024 * 1024);
            if (value$$39 !== undefined) {
              database.transaction(function(tx) {
                tx.executeSql("CREATE TABLE IF NOT EXISTS cache(" + "id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, " + "name TEXT NOT NULL, " + "value TEXT NOT NULL, " + "UNIQUE (name)" + ")", [], function(tx$$1, rs) {
                }, function(tx$$2, err) {
                });
                tx.executeSql("INSERT OR REPLACE INTO cache(name, value) " + "VALUES(?, ?)", [name$$43, value$$39], function(tx$$3, rs$$1) {
                }, function(tx$$4, err$$1) {
                });
              });
            } else {
              database.transaction(function(tx$$5) {
                tx$$5.executeSql("SELECT value FROM cache WHERE name=?", [name$$43], function(tx$$6, result1) {
                  if (result1.rows.length >= 1) {
                    self$$1._ec.dbData = result1.rows.item(0).value;
                  } else {
                    self$$1._ec.dbData = "";
                  }
                }, function(tx$$7, err$$2) {
                });
              });
            }
          }
        } catch (e$$8) {
        }
      };
      this.evercookie_indexdb_storage = function(name$$44, value$$40) {
        try {
          if (!("indexedDB" in window$$1)) {
            indexedDB = window$$1.indexedDB || window$$1.mozIndexedDB || window$$1.webkitIndexedDB || window$$1.msIndexedDB;
            IDBTransaction = window$$1.IDBTransaction || window$$1.webkitIDBTransaction || window$$1.msIDBTransaction;
            IDBKeyRange = window$$1.IDBKeyRange || window$$1.webkitIDBKeyRange || window$$1.msIDBKeyRange;
          }
          if (indexedDB) {
            var ver = 1;
            var request = indexedDB.open("idb_evercookie", ver);
            request.onerror = function(e$$9) {
            };
            request.onupgradeneeded = function(event$$1) {
              var db = event$$1.target.result;
              var store = db.createObjectStore("evercookie", {keyPath:"name", unique:false});
            };
            if (value$$40 !== undefined) {
              request.onsuccess = function(event$$2) {
                var idb$$1 = event$$2.target.result;
                if (idb$$1.objectStoreNames.contains("evercookie")) {
                  var tx$$8 = idb$$1.transaction(["evercookie"], "readwrite");
                  var objst = tx$$8.objectStore("evercookie");
                  var qr = objst.put({"name":name$$44, "value":value$$40});
                }
                idb$$1.close();
              };
            } else {
              request.onsuccess = function(event$$3) {
                var idb$$2 = event$$3.target.result;
                if (!idb$$2.objectStoreNames.contains("evercookie")) {
                  self$$1._ec.idbData = undefined;
                } else {
                  var tx$$9 = idb$$2.transaction(["evercookie"]);
                  var objst$$1 = tx$$9.objectStore("evercookie");
                  var qr$$1 = objst$$1.get(name$$44);
                  qr$$1.onsuccess = function(event$$4) {
                    if (qr$$1.result === undefined) {
                      self$$1._ec.idbData = undefined;
                    } else {
                      self$$1._ec.idbData = qr$$1.result.value;
                    }
                  };
                }
                idb$$2.close();
              };
            }
          }
        } catch (e$$10) {
        }
      };
      this.evercookie_session_storage = function(name$$45, value$$41) {
        try {
          if (sessionStorage) {
            if (value$$41 !== undefined) {
              sessionStorage.setItem(name$$45, value$$41);
            } else {
              return sessionStorage.getItem(name$$45);
            }
          }
        } catch (e$$11) {
        }
      };
      this.evercookie_global_storage = function(name$$46, value$$42) {
        if (globalStorage) {
          var host = this.getHost();
          try {
            if (value$$42 !== undefined) {
              globalStorage[host][name$$46] = value$$42;
            } else {
              return globalStorage[host][name$$46];
            }
          } catch (e$$12) {
          }
        }
      };
      this.evercookie_silverlight = function(name$$47, value$$43) {
        var source$$1 = _ec_baseurl + _ec_asseturi + "/evercookie.xap";
        var minver = "4.0.50401.0";
        var initParam = "";
        var html;
        if (value$$43 !== undefined) {
          initParam = '<param name="initParams" value="' + name$$47 + "=" + value$$43 + '" />';
        }
        html = '<object style="position:absolute;left:-500px;top:-500px" data="data:application/x-silverlight-2," type="application/x-silverlight-2" id="mysilverlight" width="0" height="0">' + initParam + '<param name="source" value="' + source$$1 + '"/>' + '<param name="onLoad" value="onSilverlightLoad"/>' + '<param name="onError" value="onSilverlightError"/>' + '<param name="background" value="Transparent"/>' + '<param name="windowless" value="true"/>' + '<param name="minRuntimeVersion" value="' + 
        minver + '"/>' + '<param name="autoUpgrade" value="false"/>' + '<a href="http://go.microsoft.com/fwlink/?LinkID=149156&v=' + minver + '" style="display:none">' + "Get Microsoft Silverlight" + "</a>" + "</object>";
        try {
          if (typeof jQuery === "undefined") {
            document$$1.body.appendChild(html);
          } else {
            $("body").append(html);
          }
        } catch (ex$$15) {
        }
      };
      this.encode = function(input) {
        var output = "";
        var chr1;
        var chr2;
        var chr3;
        var enc1;
        var enc2;
        var enc3;
        var enc4;
        var i$$4 = 0;
        input = this._utf8_encode(input);
        for (;i$$4 < input.length;) {
          chr1 = input.charCodeAt(i$$4++);
          chr2 = input.charCodeAt(i$$4++);
          chr3 = input.charCodeAt(i$$4++);
          enc1 = chr1 >> 2;
          enc2 = (chr1 & 3) << 4 | chr2 >> 4;
          enc3 = (chr2 & 15) << 2 | chr3 >> 6;
          enc4 = chr3 & 63;
          if (isNaN(chr2)) {
            enc3 = enc4 = 64;
          } else {
            if (isNaN(chr3)) {
              enc4 = 64;
            }
          }
          output = output + _baseKeyStr.charAt(enc1) + _baseKeyStr.charAt(enc2) + _baseKeyStr.charAt(enc3) + _baseKeyStr.charAt(enc4);
        }
        return output;
      };
      this.decode = function(input$$1) {
        var output$$1 = "";
        var chr1$$1;
        var chr2$$1;
        var chr3$$1;
        var enc1$$1;
        var enc2$$1;
        var enc3$$1;
        var enc4$$1;
        var i$$5 = 0;
        input$$1 = input$$1.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        for (;i$$5 < input$$1.length;) {
          enc1$$1 = _baseKeyStr.indexOf(input$$1.charAt(i$$5++));
          enc2$$1 = _baseKeyStr.indexOf(input$$1.charAt(i$$5++));
          enc3$$1 = _baseKeyStr.indexOf(input$$1.charAt(i$$5++));
          enc4$$1 = _baseKeyStr.indexOf(input$$1.charAt(i$$5++));
          chr1$$1 = enc1$$1 << 2 | enc2$$1 >> 4;
          chr2$$1 = (enc2$$1 & 15) << 4 | enc3$$1 >> 2;
          chr3$$1 = (enc3$$1 & 3) << 6 | enc4$$1;
          output$$1 = output$$1 + String.fromCharCode(chr1$$1);
          if (enc3$$1 !== 64) {
            output$$1 = output$$1 + String.fromCharCode(chr2$$1);
          }
          if (enc4$$1 !== 64) {
            output$$1 = output$$1 + String.fromCharCode(chr3$$1);
          }
        }
        output$$1 = this._utf8_decode(output$$1);
        return output$$1;
      };
      this._utf8_encode = function(str$$7) {
        str$$7 = str$$7.replace(/\r\n/g, "\n");
        var utftext = "";
        var i$$6 = 0;
        var n$$2 = str$$7.length;
        var c;
        for (;i$$6 < n$$2;i$$6++) {
          c = str$$7.charCodeAt(i$$6);
          if (c < 128) {
            utftext += String.fromCharCode(c);
          } else {
            if (c > 127 && c < 2048) {
              utftext += String.fromCharCode(c >> 6 | 192);
              utftext += String.fromCharCode(c & 63 | 128);
            } else {
              utftext += String.fromCharCode(c >> 12 | 224);
              utftext += String.fromCharCode(c >> 6 & 63 | 128);
              utftext += String.fromCharCode(c & 63 | 128);
            }
          }
        }
        return utftext;
      };
      this._utf8_decode = function(utftext$$1) {
        var str$$8 = "";
        var i$$7 = 0;
        var n$$3 = utftext$$1.length;
        var c$$1 = 0;
        var c1 = 0;
        var c2 = 0;
        var c3 = 0;
        for (;i$$7 < n$$3;) {
          c$$1 = utftext$$1.charCodeAt(i$$7);
          if (c$$1 < 128) {
            str$$8 += String.fromCharCode(c$$1);
            i$$7 += 1;
          } else {
            if (c$$1 > 191 && c$$1 < 224) {
              c2 = utftext$$1.charCodeAt(i$$7 + 1);
              str$$8 += String.fromCharCode((c$$1 & 31) << 6 | c2 & 63);
              i$$7 += 2;
            } else {
              c2 = utftext$$1.charCodeAt(i$$7 + 1);
              c3 = utftext$$1.charCodeAt(i$$7 + 2);
              str$$8 += String.fromCharCode((c$$1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
              i$$7 += 3;
            }
          }
        }
        return str$$8;
      };
      this.evercookie_history = function(name$$48, value$$44) {
        var baseElems = (_baseKeyStr + "-").split("");
        var url$$2 = "http://www.google.com/evercookie/cache/" + this.getHost() + "/" + name$$48;
        var i$$8;
        var base$$1;
        var letter = "";
        var val = "";
        var found = 1;
        if (value$$44 !== undefined) {
          if (this.hasVisited(url$$2)) {
            return;
          }
          this.createIframe(url$$2, "if");
          url$$2 = url$$2 + "/";
          base$$1 = this.encode(value$$44).split("");
          i$$8 = 0;
          for (;i$$8 < base$$1.length;i$$8++) {
            url$$2 = url$$2 + base$$1[i$$8];
            this.createIframe(url$$2, "if" + i$$8);
          }
          url$$2 = url$$2 + "-";
          this.createIframe(url$$2, "if_");
        } else {
          if (this.hasVisited(url$$2)) {
            url$$2 = url$$2 + "/";
            for (;letter !== "-" && found === 1;) {
              found = 0;
              i$$8 = 0;
              for (;i$$8 < baseElems.length;i$$8++) {
                if (this.hasVisited(url$$2 + baseElems[i$$8])) {
                  letter = baseElems[i$$8];
                  if (letter !== "-") {
                    val = val + letter;
                  }
                  url$$2 = url$$2 + letter;
                  found = 1;
                  break;
                }
              }
            }
            return this.decode(val);
          }
        }
      };
      this.createElem = function(type$$25, name$$49, append) {
        var el;
        if (name$$49 !== undefined && document$$1.getElementById(name$$49)) {
          el = document$$1.getElementById(name$$49);
        } else {
          el = document$$1.createElement(type$$25);
        }
        el.style.visibility = "hidden";
        el.style.position = "absolute";
        if (name$$49) {
          el.setAttribute("id", name$$49);
        }
        if (append) {
          document$$1.body.appendChild(el);
        }
        return el;
      };
      this.createIframe = function(url$$3, name$$50) {
        var el$$1 = this.createElem("iframe", name$$50, 1);
        el$$1.setAttribute("src", url$$3);
        return el$$1;
      };
      var waitForSwf = this.waitForSwf = function(i$$9) {
        if (i$$9 === undefined) {
          i$$9 = 0;
        } else {
          i$$9++;
        }
        if (i$$9 < _ec_tests && typeof swfobject$$1 === "undefined") {
          setTimeout(function() {
            waitForSwf(i$$9);
          }, 300);
        }
      };
      this.evercookie_cookie = function(name$$51, value$$45) {
        if (value$$45 !== undefined) {
          document$$1.cookie = name$$51 + "=; expires=Mon, 20 Sep 2010 00:00:00 UTC; path=/; domain=" + _ec_domain;
          document$$1.cookie = name$$51 + "=" + value$$45 + "; expires=Tue, 31 Dec 2030 00:00:00 UTC; path=/; domain=" + _ec_domain;
        } else {
          return this.getFromStr(name$$51, document$$1.cookie);
        }
      };
      this.getFromStr = function(name$$52, text$$7) {
        if (typeof text$$7 !== "string") {
          return;
        }
        var nameEQ = name$$52 + "=";
        var ca = text$$7.split(/[;&]/);
        var i$$10;
        var c$$2;
        i$$10 = 0;
        for (;i$$10 < ca.length;i$$10++) {
          c$$2 = ca[i$$10];
          for (;c$$2.charAt(0) === " ";) {
            c$$2 = c$$2.substring(1, c$$2.length);
          }
          if (c$$2.indexOf(nameEQ) === 0) {
            return c$$2.substring(nameEQ.length, c$$2.length);
          }
        }
      };
      this.getHost = function() {
        return window$$1.location.host.replace(/:\d+/, "");
      };
      this.toHex = function(str$$9) {
        var r = "";
        var e$$13 = str$$9.length;
        var c$$3 = 0;
        var h$$4;
        for (;c$$3 < e$$13;) {
          h$$4 = str$$9.charCodeAt(c$$3++).toString(16);
          for (;h$$4.length < 2;) {
            h$$4 = "0" + h$$4;
          }
          r += h$$4;
        }
        return r;
      };
      this.fromHex = function(str$$10) {
        var r$$1 = "";
        var e$$14 = str$$10.length;
        var s$$2;
        for (;e$$14 >= 0;) {
          s$$2 = e$$14 - 2;
          r$$1 = String.fromCharCode("0x" + str$$10.substring(s$$2, e$$14)) + r$$1;
          e$$14 = s$$2;
        }
        return r$$1;
      };
      this.hasVisited = function(url$$4) {
        if (this.no_color === -1) {
          var no_style = this._getRGB("http://samy-was-here-this-should-never-be-visited.com", -1);
          if (no_style === -1) {
            this.no_color = this._getRGB("http://samy-was-here-" + Math.floor(Math.random() * 9999999) + "rand.com");
          }
        }
        if (url$$4.indexOf("https:") === 0 || url$$4.indexOf("http:") === 0) {
          return this._testURL(url$$4, this.no_color);
        }
        return this._testURL("http://" + url$$4, this.no_color) || this._testURL("https://" + url$$4, this.no_color) || this._testURL("http://www." + url$$4, this.no_color) || this._testURL("https://www." + url$$4, this.no_color);
      };
      var _link = this.createElem("a", "_ec_rgb_link");
      var created_style;
      var _cssText = "#_ec_rgb_link:visited{display:none;color:#FF0000}";
      var style;
      try {
        created_style = 1;
        style = document$$1.createElement("style");
        if (style.styleSheet) {
          style.styleSheet.innerHTML = _cssText;
        } else {
          if (style.innerHTML) {
            style.innerHTML = _cssText;
          } else {
            style.appendChild(document$$1.createTextNode(_cssText));
          }
        }
      } catch (e$$15) {
        created_style = 0;
      }
      this._getRGB = function(u, test_color) {
        if (test_color && created_style === 0) {
          return-1;
        }
        _link.href = u;
        _link.innerHTML = u;
        document$$1.body.appendChild(style);
        document$$1.body.appendChild(_link);
        var color$$2;
        if (document$$1.defaultView) {
          if (document$$1.defaultView.getComputedStyle(_link, null) == null) {
            return-1;
          }
          color$$2 = document$$1.defaultView.getComputedStyle(_link, null).getPropertyValue("color");
        } else {
          color$$2 = _link.currentStyle.color;
        }
        return color$$2;
      };
      this._testURL = function(url$$5, no_color) {
        var color$$3 = this._getRGB(url$$5);
        if (color$$3 === "rgb(255, 0, 0)" || color$$3 === "#ff0000") {
          return 1;
        } else {
          if (no_color && color$$3 !== no_color) {
            return 1;
          }
        }
        return 0;
      };
    }
    var document$$1 = window$$1.document;
    var Image$$1 = window$$1.Image;
    var globalStorage = window$$1.globalStorage;
    var swfobject$$1 = window$$1.swfobject;
    try {
      var localStore = window$$1.localStorage;
    } catch (ex$$16) {
    }
    try {
      var sessionStorage = window$$1.sessionStorage;
    } catch (e$$16) {
    }
    var _global_lso;
    var _global_isolated;
    var defaultOptionMap = {history:true, java:true, tests:10, silverlight:true, domain:"." + window$$1.location.host.replace(/:\d+/, ""), baseurl:"evercookie", asseturi:"/assets", phpuri:"/php", authPath:false, pngCookieName:"evercookie_png", pngPath:"/evercookie_png.php", etagCookieName:"evercookie_etag", etagPath:"/evercookie_etag.php", cacheCookieName:"evercookie_cache", cachePath:"/evercookie_cache.php"};
    var _baseKeyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    window$$1._evercookie_flash_var = _evercookie_flash_var;
    window$$1["evercookie"] = window$$1.Evercookie = Evercookie$$1;
  })(window);
} catch (ex$$17) {
}
document.getElementById("setbtn").onclick = doCookieSet;
document.getElementById("getbtn").onclick = doCookieGet

}
