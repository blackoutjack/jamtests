
JAM.startProfile('load');
function Benchmark(name$$31, doWarmup, doDeterministic, deterministicIterations, run, setup, tearDown, rmsResult, minIterations) {
  this.name = name$$31;
  this.doWarmup = doWarmup;
  this.doDeterministic = doDeterministic;
  this.deterministicIterations = deterministicIterations;
  this.run = run;
  this.Setup = setup ? setup : function() {
  };
  this.TearDown = tearDown ? tearDown : function() {
  };
  this.rmsResult = rmsResult ? rmsResult : null;
  this.minIterations = minIterations ? minIterations : 32
}
function BenchmarkResult(benchmark, time, latency) {
  this.benchmark = benchmark;
  this.time = time;
  this.latency = latency
}
function BenchmarkSuite(name$$32, reference, benchmarks$$1) {
  this.name = name$$32;
  this.reference = reference;
  this.benchmarks = benchmarks$$1;
  BenchmarkSuite.suites.push(this)
}
function setupPdfJS() {
  if(!(typeof Uint8Array != "undefined" && typeof Float64Array != "undefined" && typeof(new Uint8Array(0)).subarray != "undefined")) {
    throw"TypedArrayUnsupported";
  }
  PdfJS_window.__resources__[pdf_file] = buffer(PdfJS_window.atob(getPDF()))
}
function runPdfJS() {
  PDFJS.getDocument(pdf_file).then(function(pdf) {
    function renderPages(i$$6, j) {
      if(i$$6 > j) {
        return
      }
      context.clearRect(0, 0, canvas.width, canvas.height);
      pdf.getPage(i$$6).then(function(page) {
        renderContext.viewport = page.getViewport(1);
        canvas.height = renderContext.viewport.height;
        canvas.width = renderContext.viewport.width;
        page.render(renderContext).then(renderPages.bind(null, i$$6 + 1, j))
      })
    }
    var canvas = PdfJS_window.document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var renderContext = {canvasContext:context};
    canvas_logs.push(context.__log__);
    renderPages(1, pdf.numPages)
  });
  PdfJS_window.flushTimeouts()
}
function tearDownPdfJS() {
  var i$$7 = 0;
  for(;i$$7 < canvas_logs.length;++i$$7) {
    var log_length = canvas_logs[i$$7].length;
    var log_hash = hash(canvas_logs[i$$7].join(" "));
    var expected_length = 36788;
    var expected_hash = 939524096;
    if(log_length !== expected_length || log_hash !== expected_hash) {
      var message$$10 = "PdfJS produced incorrect output: " + "expected " + expected_length + " " + expected_hash + ", " + "got " + log_length + " " + log_hash;
      console.log(message$$10 + "\n");
      throw message$$10;
    }
  }
  delete this.PDFJS;
  delete this.PdfJS_window
}
function buffer(s$$3) {
  var b = new ArrayBuffer(s$$3.length);
  var a = new Uint8Array(b);
  var i$$8 = 0;
  for(;i$$8 < s$$3.length;++i$$8) {
    a[i$$8] = s$$3.charCodeAt(i$$8)
  }
  return b
}
function hash(s$$4) {
  var up = Math.floor((s$$4.length + 3) / 4);
  var h$$4 = 0;
  var i$$9 = 0;
  for(;4 * i$$9 - 3 < s$$4.length;i$$9 += 4) {
    var j$$1 = 0;
    for(;j$$1 < 4 && i$$9 + j$$1 < s$$4.length;++j$$1) {
      h$$4 = h$$4 + s$$4.charCodeAt(i$$9 + j$$1) << 8 * j$$1 | 0
    }
  }
  return h$$4
}
function PdfJS_windowInstall(name$$33, x$$48) {
  Object.defineProperty(PdfJS_window, name$$33, {value:x$$48})
}
function getPDF() {
  return""
}
function ShowBox(name$$73) {
  var box = document.getElementById("Box-" + name$$73);
  box.style.visibility = "visible";
  var bar = document.getElementById("progress-bar").style.width = "" + ++completed / benchmarks * 100 + "%";
  latencyBenchmarks.forEach(function(entry$$4) {
    if(name$$73.valueOf() === entry$$4.valueOf()) {
      var box1 = document.getElementById("Box-" + name$$73 + "Latency");
      box1.style.visibility = "visible"
    }
  })
}
function AddResult(name$$74, result$$16) {
  console.log(name$$74 + ": " + result$$16);
  var box$$1 = document.getElementById("Result-" + name$$74);
  box$$1.innerHTML = result$$16
}
function AddError(name$$75, error$$7) {
  console.log(name$$75 + ": " + error$$7.message);
  if(error$$7 == "TypedArrayUnsupported") {
    AddResult(name$$75, "<b>Unsupported</b>")
  }else {
    if(error$$7 == "PerformanceNowUnsupported") {
      AddResult(name$$75, "<b>Timer error</b>")
    }else {
      AddResult(name$$75, "<b>Error</b>")
    }
  }
  success = false
}
function AddScore(score$$2) {
  var status = document.getElementById("main-banner");
  if(success) {
    status.innerHTML = "Octane Score: " + score$$2
  }else {
    status.innerHTML = "Octane Score (incomplete): " + score$$2
  }
  document.getElementById("progress-bar-container").style.visibility = "hidden";
  document.getElementById("bottom-text").style.visibility = "visible";
  document.getElementById("inside-anchor").removeChild(document.getElementById("bar-appendix"));
  document.getElementById("alertbox").style.visibility = "hidden"
}
function Run() {
  document.getElementById("main-banner").innerHTML = "Running Octane...";
  document.getElementById("bar-appendix").innerHTML = '<br/><div class="progress progress-striped" id="progress-bar-container" style="visibility:hidden"><div class="bar"style="width: 0%;" id="progress-bar"></div></div>';
  var anchor = document.getElementById("run-octane");
  var parent$$1 = document.getElementById("main-container");
  parent$$1.appendChild(document.getElementById("inside-anchor"));
  parent$$1.removeChild(anchor);
  document.getElementById("startup-text").innerHTML = "";
  document.getElementById("progress-bar-container").style.visibility = "visible";
  BenchmarkSuite.RunSuites({NotifyStart:ShowBox, NotifyError:AddError, NotifyResult:AddResult, NotifyScore:AddScore}, skipBenchmarks)
}
function CheckCompatibility() {
  var hasTypedArrays = typeof Uint8Array != "undefined" && typeof Float64Array != "undefined" && typeof(new Uint8Array(0)).subarray != "undefined";
  if(!hasTypedArrays) {
    console.log("Typed Arrays not supported");
    document.getElementById("alertbox").style.display = "block"
  }
  if(window.document.URL.indexOf("skip_zlib=1") >= 0) {
    skipBenchmarks.push("zlib")
  }
  if(window.document.URL.indexOf("auto=1") >= 0) {
    Run()
  }
}
function Load() {
  setTimeout(CheckCompatibility, 200)
}
var performance = performance || {};
performance.now = function() {
  return performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || Date.now
}();
BenchmarkResult.prototype.valueOf = function() {
  return this.time
};
BenchmarkSuite.suites = [];
BenchmarkSuite.version = "9";
BenchmarkSuite.config = {doWarmup:undefined, doDeterministic:undefined};
alert = function(s$$2) {
  throw"Alert called with argument: " + s$$2;
};
BenchmarkSuite.ResetRNG = function() {
  Math.random = function() {
    var seed = 49734321;
    return function() {
      seed = seed + 2127912214 + (seed << 12) & 4294967295;
      seed = (seed ^ 3345072700 ^ seed >>> 19) & 4294967295;
      seed = seed + 374761393 + (seed << 5) & 4294967295;
      seed = (seed + 3550635116 ^ seed << 9) & 4294967295;
      seed = seed + 4251993797 + (seed << 3) & 4294967295;
      seed = (seed ^ 3042594569 ^ seed >>> 16) & 4294967295;
      return(seed & 268435455) / 268435456
    }
  }()
};
BenchmarkSuite.RunSuites = function(runner, skipBenchmarks$$1) {
  function RunStep() {
    for(;continuation || index$$39 < length$$11;) {
      if(continuation) {
        continuation = continuation()
      }else {
        var suite = suites[index$$39++];
        if(runner.NotifyStart) {
          runner.NotifyStart(suite.name)
        }
        if(skipBenchmarks$$1.indexOf(suite.name) > -1) {
          suite.NotifySkipped(runner)
        }else {
          continuation = suite.RunStep(runner)
        }
      }
      if(continuation && typeof window != "undefined" && window.setTimeout) {
        window.setTimeout(RunStep, 25);
        return
      }
    }
    if(runner.NotifyScore) {
      var score = BenchmarkSuite.GeometricMean(BenchmarkSuite.scores);
      var formatted = BenchmarkSuite.FormatScore(100 * score);
      runner.NotifyScore(formatted)
    }
  }
  skipBenchmarks$$1 = typeof skipBenchmarks$$1 === "undefined" ? [] : skipBenchmarks$$1;
  var continuation = null;
  var suites = BenchmarkSuite.suites;
  var length$$11 = suites.length;
  BenchmarkSuite.scores = [];
  var index$$39 = 0;
  RunStep()
};
BenchmarkSuite.CountBenchmarks = function() {
  var result = 0;
  var suites$$1 = BenchmarkSuite.suites;
  var i$$1 = 0;
  for(;i$$1 < suites$$1.length;i$$1++) {
    result += suites$$1[i$$1].benchmarks.length
  }
  return result
};
BenchmarkSuite.GeometricMean = function(numbers) {
  var log = 0;
  var i$$2 = 0;
  for(;i$$2 < numbers.length;i$$2++) {
    log += Math.log(numbers[i$$2])
  }
  return Math.pow(Math.E, log / numbers.length)
};
BenchmarkSuite.GeometricMeanTime = function(measurements) {
  var log$$1 = 0;
  var i$$3 = 0;
  for(;i$$3 < measurements.length;i$$3++) {
    log$$1 += Math.log(measurements[i$$3].time)
  }
  return Math.pow(Math.E, log$$1 / measurements.length)
};
BenchmarkSuite.GeometricMeanLatency = function(measurements$$1) {
  var log$$2 = 0;
  var hasLatencyResult = false;
  var i$$4 = 0;
  for(;i$$4 < measurements$$1.length;i$$4++) {
    if(measurements$$1[i$$4].latency != 0) {
      log$$2 += Math.log(measurements$$1[i$$4].latency);
      hasLatencyResult = true
    }
  }
  if(hasLatencyResult) {
    return Math.pow(Math.E, log$$2 / measurements$$1.length)
  }else {
    return 0
  }
};
BenchmarkSuite.FormatScore = function(value$$29) {
  if(value$$29 > 100) {
    return value$$29.toFixed(0)
  }else {
    return value$$29.toPrecision(3)
  }
};
BenchmarkSuite.prototype.NotifyStep = function(result$$1) {
  this.results.push(result$$1);
  if(this.runner.NotifyStep) {
    this.runner.NotifyStep(result$$1.benchmark.name)
  }
};
BenchmarkSuite.prototype.NotifyResult = function() {
  var mean = BenchmarkSuite.GeometricMeanTime(this.results);
  var score$$1 = this.reference[0] / mean;
  BenchmarkSuite.scores.push(score$$1);
  if(this.runner.NotifyResult) {
    var formatted$$1 = BenchmarkSuite.FormatScore(100 * score$$1);
    this.runner.NotifyResult(this.name, formatted$$1)
  }
  if(this.reference.length == 2) {
    var meanLatency = BenchmarkSuite.GeometricMeanLatency(this.results);
    if(meanLatency != 0) {
      var scoreLatency = this.reference[1] / meanLatency;
      BenchmarkSuite.scores.push(scoreLatency);
      if(this.runner.NotifyResult) {
        var formattedLatency = BenchmarkSuite.FormatScore(100 * scoreLatency);
        this.runner.NotifyResult(this.name + "Latency", formattedLatency)
      }
    }
  }
};
BenchmarkSuite.prototype.NotifySkipped = function(runner$$1) {
  BenchmarkSuite.scores.push(1);
  if(runner$$1.NotifyResult) {
    runner$$1.NotifyResult(this.name, "Skipped")
  }
};
BenchmarkSuite.prototype.NotifyError = function(error$$2) {
  if(this.runner.NotifyError) {
    this.runner.NotifyError(this.name, error$$2)
  }
  if(this.runner.NotifyStep) {
    this.runner.NotifyStep(this.name)
  }
};
BenchmarkSuite.prototype.RunSingleBenchmark = function(benchmark$$1, data$$18) {
  function Measure(data$$19) {
    var elapsed = 0;
    var start$$4 = new Date;
    var i$$5 = 0;
    for(;doDeterministic$$1 ? i$$5 < benchmark$$1.deterministicIterations : elapsed < 1E3;i$$5++) {
      benchmark$$1.run();
      elapsed = new Date - start$$4
    }
    if(data$$19 != null) {
      data$$19.runs += i$$5;
      data$$19.elapsed += elapsed
    }
  }
  var config = BenchmarkSuite.config;
  var doWarmup$$1 = config.doWarmup !== undefined ? config.doWarmup : benchmark$$1.doWarmup;
  var doDeterministic$$1 = config.doDeterministic !== undefined ? config.doDeterministic : benchmark$$1.doDeterministic;
  if(!doWarmup$$1 && data$$18 == null) {
    data$$18 = {runs:0, elapsed:0}
  }
  if(data$$18 == null) {
    Measure(null);
    return{runs:0, elapsed:0}
  }else {
    Measure(data$$18);
    if(data$$18.runs < benchmark$$1.minIterations) {
      return data$$18
    }
    var usec = data$$18.elapsed * 1E3 / data$$18.runs;
    var rms = benchmark$$1.rmsResult != null ? benchmark$$1.rmsResult() : 0;
    this.NotifyStep(new BenchmarkResult(benchmark$$1, usec, rms));
    return null
  }
};
BenchmarkSuite.prototype.RunStep = function(runner$$2) {
  function RunNextSetup() {
    if(index$$40 < length$$12) {
      try {
        suite$$1.benchmarks[index$$40].Setup()
      }catch(e$$4) {
        suite$$1.NotifyError(e$$4);
        return null
      }
      return RunNextBenchmark
    }
    suite$$1.NotifyResult();
    return null
  }
  function RunNextBenchmark() {
    try {
      data$$20 = suite$$1.RunSingleBenchmark(suite$$1.benchmarks[index$$40], data$$20)
    }catch(e$$5) {
      suite$$1.NotifyError(e$$5);
      return null
    }
    return data$$20 == null ? RunNextTearDown : RunNextBenchmark()
  }
  function RunNextTearDown() {
    try {
      suite$$1.benchmarks[index$$40++].TearDown()
    }catch(e$$6) {
      suite$$1.NotifyError(e$$6);
      return null
    }
    return RunNextSetup
  }
  BenchmarkSuite.ResetRNG();
  this.results = [];
  this.runner = runner$$2;
  var length$$12 = this.benchmarks.length;
  var index$$40 = 0;
  var suite$$1 = this;
  var data$$20;
  return RunNextSetup()
};
var pdf_file = "test.pdf";
var canvas_logs = [];
var PdfJS = new BenchmarkSuite("PdfJS", [10124921], [new Benchmark("PdfJS", false, false, 24, runPdfJS, setupPdfJS, tearDownPdfJS, null, 4)]);
var PdfJS_window = Object.create(this);
PdfJS_windowInstall("setTimeout", function(cmd, delay$$3) {
  PdfJS_window.__timeouts__.push(cmd)
});
PdfJS_windowInstall("flushTimeouts", function() {
  for(;PdfJS_window.__timeouts__.length != 0;) {
    var next = PdfJS_window.__timeouts__.pop();
    if(typeof next === "function") {
      next({data:"{}"})
    }else {
      eval(next)
    }
  }
});
PdfJS_windowInstall("window", PdfJS_window);
PdfJS_window.__timeouts__ = [];
PdfJS_window.__resources__ = {};
PdfJS_window.__to64__ = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/", "="];
PdfJS_windowInstall("btoa", function(data$$21) {
  var result$$2 = "";
  if(data$$21.length > 0) {
    var i$$10 = 0;
    for(;i$$10 < data$$21.length;) {
      var b1 = data$$21.charCodeAt(i$$10++) & 255;
      var b2 = data$$21.charCodeAt(i$$10++ < data$$21.length ? i$$10 - 1 : 0) & 255;
      var b3 = data$$21.charCodeAt(i$$10++ < data$$21.length ? i$$10 - 1 : 0) & 255;
      result$$2 += PdfJS_window.__to64__[b1 >> 2];
      if(i$$10 === data$$21.length + 2) {
        result$$2 += PdfJS_window.__to64__[(b1 & 3) << 4] + "=="
      }else {
        result$$2 += PdfJS_window.__to64__[(b1 & 3) << 4 | b2 >> 4];
        if(i$$10 === data$$21.length + 1) {
          result$$2 += PdfJS_window.__to64__[(b2 & 15) << 2] + "="
        }else {
          result$$2 += PdfJS_window.__to64__[(b2 & 15) << 2 | b3 >> 6] + PdfJS_window.__to64__[b3 & 63]
        }
      }
    }
  }
  return result$$2
});
PdfJS_window.__from64__ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
PdfJS_windowInstall("atob", function(data$$22) {
  var result$$3 = "";
  var i$$11 = 0;
  for(;i$$11 < data$$22.length;) {
    var x1$$3 = PdfJS_window.__from64__.indexOf(data$$22.charAt(i$$11++));
    var x2$$1 = PdfJS_window.__from64__.indexOf(data$$22.charAt(i$$11++));
    var x3 = PdfJS_window.__from64__.indexOf(data$$22.charAt(i$$11++));
    var x4 = PdfJS_window.__from64__.indexOf(data$$22.charAt(i$$11++));
    result$$3 += String.fromCharCode(x1$$3 << 2 | x2$$1 >> 4);
    if(x3 != 64) {
      result$$3 += String.fromCharCode((x2$$1 & 15) << 4 | x3 >> 2);
      if(x4 != 64) {
        result$$3 += String.fromCharCode((x3 & 3) << 6 | x4)
      }
    }
  }
  return result$$3
});
PdfJS_windowInstall("XMLHttpRequest", function() {
  this.open = function(type$$25, url$$3, some_bool) {
    this.url = url$$3
  };
  this.overrideMimeType = function() {
  };
  this.send = function() {
    this.response = PdfJS_window.__resources__[this.url];
    this.readyState = 4;
    this.status = 0;
    this.onreadystatechange()
  }
});
PdfJS_windowInstall("console", this.console ? this.console : {log:function(s$$5) {
}});
PdfJS_windowInstall("location", {protocol:""});
PdfJS_windowInstall("Event", function() {
  this.initEvent = function(name$$34) {
    this.name = name$$34
  }
});
PdfJS_windowInstall("Element", function(type$$26) {
  this.__listeners__ = {};
  this.element_type = type$$26;
  this.insertBefore = function() {
  };
  this.addEventListener = function(name$$35, listener$$16) {
    this.__listeners__[name$$35] = listener$$16
  };
  this.removeEventListener = function(name$$36) {
    delete this.__listeners__[name$$36]
  };
  this.dispatchEvent = function(event$$1) {
    this.__listeners__[event$$1.name](event$$1)
  };
  this.getElementsByTagName = function(name$$37) {
    if(name$$37 === "head") {
      return[{appendChild:function() {
      }}]
    }
  };
  this.appendChild = function() {
  };
  this.setAttribute = function() {
  };
  this.sheet = {cssRules:[], insertRule:function() {
  }}
});
PdfJS_windowInstall("Context", function() {
  this.__log__ = [];
  this.save = function() {
    this.__log__.push("save", "\n")
  };
  this.restore = function() {
    this.__log__.push("restore", "\n")
  };
  this.transform = function(a$$1, b$$1, c, d, e$$7, f) {
    this.__log__.push("transform", a$$1, b$$1, c, d, e$$7, f, "\n")
  };
  this.translate = function(x$$49, y$$31) {
    this.__log__.push("translate", x$$49, y$$31, "\n")
  };
  this.scale = function(x$$50, y$$32) {
    this.__log__.push("scale", x$$50, y$$32, "\n")
  };
  this.rect = function(x$$51, y$$33, w$$5, h$$5) {
    this.__log__.push("rect", x$$51, y$$33, w$$5, h$$5, "\n")
  };
  this.clip = function() {
    this.__log__.push("clip", "\n")
  };
  this.fill = function() {
    this.__log__.push("fill", "\n")
  };
  this.stroke = function() {
    this.__log__.push("stroke", "\n")
  };
  this.beginPath = function() {
    this.__log__.push("beginPath", "\n")
  };
  this.closePath = function() {
    this.__log__.push("closePath", "\n")
  };
  this.moveTo = function(x$$52, y$$34) {
    this.__log__.push("moveTo", x$$52, y$$34, "\n")
  };
  this.lineTo = function(x$$53, y$$35) {
    this.__log__.push("lineTo", x$$53, y$$35, "\n")
  };
  this.fillRect = function(x$$54, y$$36, w$$6, h$$6) {
    this.__log__.push("fillRect", x$$54, y$$36, w$$6, h$$6, "\n")
  };
  this.fillText = function(s$$6, x$$55, y$$37, w$$7) {
    this.__log__.push("fillText", s$$6, x$$55, y$$37, "\n")
  };
  this.strokeText = function(s$$7, x$$56, y$$38, w$$8) {
    this.__log__.push("strokeText", s$$7, x$$56, y$$38, "\n")
  };
  this.getImageData = function(x$$57, y$$39, w$$9, h$$7) {
    this.__log__.push("getImageData", x$$57, y$$39, w$$9, h$$7, "\n");
    return{data:[]}
  };
  this.putImageData = function(data$$23, x$$58, y$$40) {
    this.__log__.push("putImageData", "{...}", x$$58, y$$40, "\n")
  };
  this.drawImage = function(image$$2, x$$59, y$$41) {
    this.__log__.push("drawImage", "<elem>", x$$59, y$$41, "\n")
  };
  this.getParameter = function(name$$38) {
    this.__log__.push("getParameter", name$$38, "\n");
    return null
  };
  this.enable = function() {
    this.__log__.push("enable", "\n")
  };
  this.disable = function() {
    this.__log__.push("disable", "\n")
  };
  this.depthFunc = function(param$$3) {
    this.__log__.push("depthFunc", param$$3, "\n")
  };
  this.clearColor = function(r, g, b$$2, a$$2) {
    this.__log__.push("clearColor", r, g, b$$2, a$$2, "\n")
  };
  this.clear = function(m) {
    this.__log__.push("clear", m, "\n")
  };
  this.clearRect = function(x$$60, y$$42, w$$10, h$$8) {
    this.__log__.push("createRect", x$$60, y$$42, w$$10, h$$8, "\n")
  }
});
PdfJS_windowInstall("Canvas", function() {
  this.getContext = function() {
    return new PdfJS_window.Context
  };
  this.width = 100;
  this.height = 100;
  this.style = {visibility:"visibile"}
});
PdfJS_windowInstall("document", {body:new PdfJS_window.Element("body"), documentElement:new PdfJS_window.Element("document"), createElement:function(element_type) {
  var element$$3;
  if(element_type === "canvas") {
    element$$3 = new PdfJS_window.Canvas
  }else {
    element$$3 = new PdfJS_window.Element(element_type)
  }
  element$$3.parentNode = new PdfJS_window.Element("dummy_parent");
  return element$$3
}, getElementById:function(name$$39) {
  if(name$$39 === "canvas") {
    return new PdfJS_window.Canvas
  }else {
    return undefined
  }
}, getElementsByTagName:function(element$$4) {
  if(element$$4 === "script") {
    return new Array(new this.createElement(element$$4))
  }
}, createEvent:function() {
  return new PdfJS_window.Event
}});
PdfJS_window.window.addEventListener = function(name$$40, listener$$17) {
  PdfJS_window.setTimeout(listener$$17)
};
PdfJS_windowInstall("Worker", undefined);
var PDFJS = {};
(function pdfjsWrapper() {
  function Type1Font(name$$59, file$$5, properties$$17) {
    var headerBlock = file$$5.getBytes(properties$$17.length1);
    type1Parser.extractFontHeader(headerBlock, properties$$17);
    var eexecBlock = file$$5.getBytes(properties$$17.length2);
    var data$$72 = type1Parser.extractFontProgram(eexecBlock);
    var info$$2;
    for(info$$2 in data$$72.properties) {
      properties$$17[info$$2] = data$$72.properties[info$$2]
    }
    var charstrings$$2 = this.getOrderedCharStrings(data$$72.charstrings, properties$$17);
    var type2Charstrings = this.getType2Charstrings(charstrings$$2);
    var subrs = this.getType2Subrs(data$$72.subrs);
    this.charstrings = charstrings$$2;
    this.data = this.wrap(name$$59, type2Charstrings, this.charstrings, subrs, properties$$17)
  }
  function Type1Parser() {
    function decrypt(stream$$16, key$$36, discardNumber) {
      var r$$8 = key$$36;
      var c1$$1 = 52845;
      var c2 = 22719;
      var decryptedString = [];
      var value$$51 = "";
      var count$$7 = stream$$16.length;
      var i$$102 = 0;
      for(;i$$102 < count$$7;i$$102++) {
        value$$51 = stream$$16[i$$102];
        decryptedString[i$$102] = value$$51 ^ r$$8 >> 8;
        r$$8 = (value$$51 + r$$8) * c1$$1 + c2 & (1 << 16) - 1
      }
      return decryptedString.slice(discardNumber)
    }
    function decodeCharString(array$$11) {
      var charstring$$2 = [];
      var lsb = 0;
      var width$$23 = 0;
      var flexState = 0;
      var value$$52 = "";
      var count$$8 = array$$11.length;
      var i$$103 = 0;
      for(;i$$103 < count$$8;i$$103++) {
        value$$52 = array$$11[i$$103];
        if(value$$52 < 32) {
          var command = null;
          if(value$$52 == kEscapeCommand) {
            var escape$$1 = array$$11[++i$$103];
            if(escape$$1 == 16) {
              var index$$47 = charstring$$2.pop();
              var argc = charstring$$2.pop();
              var j$$35 = 0;
              for(;j$$35 < argc;j$$35++) {
                charstring$$2.push("drop")
              }
              if(index$$47 < 3) {
                continue
              }
              if(index$$47 == 3) {
                charstring$$2.push(3);
                i$$103++;
                continue
              }
            }else {
              if(escape$$1 == 17 || escape$$1 == 33) {
                continue
              }else {
                if(!kHintingEnabled && (escape$$1 == 1 || escape$$1 == 2)) {
                  charstring$$2.push("drop", "drop", "drop", "drop", "drop", "drop");
                  continue
                }
              }
            }
            command = charStringDictionary["12"][escape$$1]
          }else {
            if(value$$52 == 13) {
              if(charstring$$2.length == 2) {
                lsb = charstring$$2[0];
                width$$23 = charstring$$2[1];
                charstring$$2.splice(0, 1)
              }else {
                if(charstring$$2.length == 4 && charstring$$2[3] == "div") {
                  lsb = charstring$$2[0];
                  width$$23 = charstring$$2[1] / charstring$$2[2];
                  charstring$$2.splice(0, 1)
                }else {
                  if(charstring$$2.length == 4 && charstring$$2[2] == "div") {
                    lsb = charstring$$2[0] / charstring$$2[1];
                    width$$23 = charstring$$2[3];
                    charstring$$2.splice(0, 3)
                  }else {
                    error$$3("Unsupported hsbw format: " + charstring$$2)
                  }
                }
              }
              charstring$$2.push(lsb, "hmoveto");
              continue
            }else {
              if(value$$52 == 10) {
                if(charstring$$2[charstring$$2.length - 1] < 3) {
                  var subrNumber = charstring$$2.pop();
                  switch(subrNumber) {
                    case 1:
                      flexState = 1;
                      break;
                    case 2:
                      flexState = 2;
                      break;
                    case 0:
                      charstring$$2.push("exch", "drop", "exch", "drop");
                      charstring$$2.push("flex");
                      flexState = 0
                  }
                  continue
                }
              }else {
                if(value$$52 == 21 && flexState > 0) {
                  if(flexState > 1) {
                    continue
                  }
                  value$$52 = 5
                }else {
                  if(!kHintingEnabled && (value$$52 == 1 || value$$52 == 3)) {
                    charstring$$2.push("drop", "drop");
                    continue
                  }
                }
              }
            }
            command = charStringDictionary[value$$52]
          }
          if(!command && i$$103 < count$$8) {
            continue
          }else {
            if(!command) {
              break
            }else {
              if(command == -1) {
                warn("Support for Type1 command " + value$$52 + " (" + escape$$1 + ") is not implemented in charstring: " + charstring$$2);
                if(value$$52 == 12) {
                  switch(escape$$1) {
                    case 7:
                      charstring$$2.push("drop", "drop", "drop", "drop");
                      continue;
                    case 8:
                      charstring$$2.push("drop");
                      continue
                  }
                }
              }
            }
          }
          value$$52 = command
        }else {
          if(value$$52 <= 246) {
            value$$52 = value$$52 - 139
          }else {
            if(value$$52 <= 250) {
              value$$52 = (value$$52 - 247) * 256 + array$$11[++i$$103] + 108
            }else {
              if(value$$52 <= 254) {
                value$$52 = -((value$$52 - 251) * 256) - array$$11[++i$$103] - 108
              }else {
                value$$52 = (array$$11[++i$$103] & 255) << 24 | (array$$11[++i$$103] & 255) << 16 | (array$$11[++i$$103] & 255) << 8 | (array$$11[++i$$103] & 255) << 0
              }
            }
          }
        }
        charstring$$2.push(value$$52)
      }
      return{charstring:charstring$$2, width:width$$23, lsb:lsb}
    }
    function readNumberArray(str$$23, index$$48) {
      var start$$11 = index$$48;
      for(;str$$23[index$$48++] != "[";) {
        start$$11++
      }
      start$$11++;
      var count$$9 = 0;
      for(;str$$23[index$$48++] != "]";) {
        count$$9++
      }
      str$$23 = str$$23.substr(start$$11, count$$9);
      str$$23 = str$$23.trim();
      str$$23 = str$$23.replace(/\s+/g, " ");
      var array$$12 = str$$23.split(" ");
      var i$$104 = 0;
      var ii$$39 = array$$12.length;
      for(;i$$104 < ii$$39;i$$104++) {
        array$$12[i$$104] = parseFloat(array$$12[i$$104] || 0)
      }
      return array$$12
    }
    function readNumber(str$$24, index$$49) {
      for(;str$$24[index$$49] == " ";) {
        index$$49++
      }
      var start$$12 = index$$49;
      var count$$10 = 0;
      for(;str$$24[index$$49++] != " ";) {
        count$$10++
      }
      return parseFloat(str$$24.substr(start$$12, count$$10) || 0)
    }
    function isSeparator(c$$14) {
      return c$$14 == " " || c$$14 == "\n" || c$$14 == "\r"
    }
    var kEexecEncryptionKey = 55665;
    var kCharStringsEncryptionKey = 4330;
    var charStringDictionary = {1:"hstem", 3:"vstem", 4:"vmoveto", 5:"rlineto", 6:"hlineto", 7:"vlineto", 8:"rrcurveto", 9:null, 10:"callsubr", 11:"return", 12:{0:null, 1:"vstem", 2:"hstem", 6:-1, 7:-1, 11:"sub", 12:"div", 16:"callothersubr", 17:"pop", 33:null}, 13:"hsbw", 14:"endchar", 21:"rmoveto", 22:"hmoveto", 30:"vhcurveto", 31:"hvcurveto"};
    var kEscapeCommand = 12;
    this.extractFontProgram = function Type1Parser_extractFontProgram(stream$$17) {
      var eexec = decrypt(stream$$17, kEexecEncryptionKey, 4);
      var eexecStr = "";
      var i$$105 = 0;
      var ii$$40 = eexec.length;
      for(;i$$105 < ii$$40;i$$105++) {
        eexecStr += String.fromCharCode(eexec[i$$105])
      }
      var glyphsSection = false;
      var subrsSection = false;
      var program$$16 = {subrs:[], charstrings:[], properties:{"privateData":{"lenIV":4}}};
      var glyph$$3 = "";
      var token$$7 = "";
      var length$$42 = 0;
      var c$$15 = "";
      var count$$11 = eexecStr.length;
      i$$105 = 0;
      for(;i$$105 < count$$11;i$$105++) {
        var getToken = function getToken$$1() {
          for(;i$$105 < count$$11 && isSeparator(eexecStr[i$$105]);) {
            ++i$$105
          }
          var token$$8 = "";
          for(;i$$105 < count$$11 && !isSeparator(eexecStr[i$$105]);) {
            token$$8 += eexecStr[i$$105++]
          }
          return token$$8
        };
        c$$15 = eexecStr[i$$105];
        if((glyphsSection || subrsSection) && (token$$7 == "RD" || token$$7 == "-|")) {
          i$$105++;
          var data$$71 = eexec.slice(i$$105, i$$105 + length$$42);
          var lenIV = program$$16.properties.privateData["lenIV"];
          var encoded = decrypt(data$$71, kCharStringsEncryptionKey, lenIV);
          var str$$25 = decodeCharString(encoded);
          if(glyphsSection) {
            program$$16.charstrings.push({glyph:glyph$$3, data:str$$25.charstring, lsb:str$$25.lsb, width:str$$25.width})
          }else {
            program$$16.subrs.push(str$$25.charstring)
          }
          i$$105 += length$$42;
          token$$7 = ""
        }else {
          if(isSeparator(c$$15)) {
            length$$42 = parseInt(token$$7, 10);
            token$$7 = ""
          }else {
            token$$7 += c$$15;
            if(!glyphsSection) {
              switch(token$$7) {
                case "/CharString":
                  glyphsSection = true;
                  break;
                case "/Subrs":
                  ++i$$105;
                  var num$$11 = parseInt(getToken(), 10);
                  getToken();
                  var j$$36 = 0;
                  for(;j$$36 < num$$11;++j$$36) {
                    var t$$2 = getToken();
                    if(t$$2 == "ND" || t$$2 == "|-" || t$$2 == "noaccess") {
                      break
                    }
                    var index$$50 = parseInt(getToken(), 10);
                    if(index$$50 > j$$36) {
                      j$$36 = index$$50
                    }
                    length$$42 = parseInt(getToken(), 10);
                    getToken();
                    data$$71 = eexec.slice(i$$105 + 1, i$$105 + 1 + length$$42);
                    lenIV = program$$16.properties.privateData["lenIV"];
                    encoded = decrypt(data$$71, kCharStringsEncryptionKey, lenIV);
                    str$$25 = decodeCharString(encoded);
                    i$$105 = i$$105 + 1 + length$$42;
                    t$$2 = getToken();
                    if(t$$2 == "noaccess") {
                      getToken()
                    }
                    program$$16.subrs[index$$50] = str$$25.charstring
                  }
                  break;
                case "/BlueValues":
                ;
                case "/OtherBlues":
                ;
                case "/FamilyBlues":
                ;
                case "/FamilyOtherBlues":
                ;
                case "/StemSnapH":
                ;
                case "/StemSnapV":
                  program$$16.properties.privateData[token$$7.substring(1)] = readNumberArray(eexecStr, i$$105 + 1);
                  break;
                case "/StdHW":
                ;
                case "/StdVW":
                  program$$16.properties.privateData[token$$7.substring(1)] = readNumberArray(eexecStr, i$$105 + 2)[0];
                  break;
                case "/BlueShift":
                ;
                case "/lenIV":
                ;
                case "/BlueFuzz":
                ;
                case "/BlueScale":
                ;
                case "/LanguageGroup":
                ;
                case "/ExpansionFactor":
                  program$$16.properties.privateData[token$$7.substring(1)] = readNumber(eexecStr, i$$105 + 1)
              }
            }else {
              if(c$$15 == "/") {
                token$$7 = glyph$$3 = "";
                for(;(c$$15 = eexecStr[++i$$105]) != " ";) {
                  glyph$$3 += c$$15
                }
              }
            }
          }
        }
      }
      return program$$16
    };
    this.extractFontHeader = function Type1Parser_extractFontHeader(stream$$18, properties$$16) {
      var headerString = "";
      var i$$106 = 0;
      var ii$$41 = stream$$18.length;
      for(;i$$106 < ii$$41;i$$106++) {
        headerString += String.fromCharCode(stream$$18[i$$106])
      }
      var token$$9 = "";
      var count$$12 = headerString.length;
      i$$106 = 0;
      for(;i$$106 < count$$12;i$$106++) {
        var getToken$$2 = function getToken$$3() {
          var character$$1 = headerString[i$$106];
          for(;i$$106 < count$$12 && (isSeparator(character$$1) || character$$1 == "/");) {
            character$$1 = headerString[++i$$106]
          }
          var token$$10 = "";
          for(;i$$106 < count$$12 && !(isSeparator(character$$1) || character$$1 == "/");) {
            token$$10 += character$$1;
            character$$1 = headerString[++i$$106]
          }
          return token$$10
        };
        var c$$16 = headerString[i$$106];
        if(isSeparator(c$$16)) {
          switch(token$$9) {
            case "/FontMatrix":
              var matrix$$2 = readNumberArray(headerString, i$$106 + 1);
              var j$$37 = 0;
              var jj$$8 = matrix$$2.length;
              for(;j$$37 < jj$$8;j$$37++) {
                matrix$$2[j$$37] *= 1E3
              }
              matrix$$2[2] *= -1;
              properties$$16.fontMatrix = matrix$$2;
              break;
            case "/Encoding":
              var encodingArg = getToken$$2();
              var encoding$$5;
              if(!/^\d+$/.test(encodingArg)) {
                encoding$$5 = Encodings[encodingArg]
              }else {
                encoding$$5 = [];
                var size$$9 = parseInt(encodingArg, 10);
                getToken$$2();
                j$$37 = 0;
                for(;j$$37 < size$$9;j$$37++) {
                  token$$9 = getToken$$2();
                  if(token$$9 == "dup") {
                    var index$$51 = parseInt(getToken$$2(), 10);
                    var glyph$$4 = getToken$$2();
                    encoding$$5[index$$51] = glyph$$4;
                    getToken$$2()
                  }
                }
              }
              if(!properties$$16.hasEncoding && encoding$$5) {
                properties$$16.baseEncoding = encoding$$5
              }
          }
          token$$9 = ""
        }else {
          token$$9 += c$$16
        }
      }
    }
  }
  var JSCompiler_object_inline_FILL_280;
  var JSCompiler_object_inline_STROKE_281;
  var JSCompiler_object_inline_FILL_STROKE_282;
  var JSCompiler_object_inline_INVISIBLE_283;
  var JSCompiler_object_inline_FILL_ADD_TO_PATH_284;
  var JSCompiler_object_inline_STROKE_ADD_TO_PATH_285;
  var JSCompiler_object_inline_FILL_STROKE_ADD_TO_PATH_286;
  var JSCompiler_object_inline_ADD_TO_PATH_287;
  function getPdf(arg$$5, callback$$25) {
    var params = arg$$5;
    if(typeof arg$$5 === "string") {
      params = {url:arg$$5}
    }
    var xhr = new PdfJS_window.XMLHttpRequest;
    xhr.open("GET", params.url);
    xhr.mozResponseType = xhr.responseType = "arraybuffer";
    var protocol$$1 = params.url.indexOf(":") < 0 ? PdfJS_window.window.location.protocol : params.url.substring(0, params.url.indexOf(":") + 1);
    xhr.expected = protocol$$1 === "http:" || protocol$$1 === "https:" ? 200 : 0;
    if("progress" in params) {
      xhr.onprogress = params.progress || undefined
    }
    if("error" in params) {
      xhr.onerror = params.error || undefined
    }
    xhr.onreadystatechange = function getPdfOnreadystatechange(e$$8) {
      if(xhr.readyState === 4) {
        if(xhr.status === xhr.expected) {
          var data$$24 = xhr.mozResponseArrayBuffer || xhr.mozResponse || xhr.responseArrayBuffer || xhr.response;
          callback$$25(data$$24)
        }else {
          if(params.error) {
            params.error(e$$8)
          }
        }
      }
    };
    xhr.send(null)
  }
  function log$$3(msg) {
    if(PdfJS_window.console && PdfJS_window.console.log) {
      PdfJS_window.console.log(msg)
    }else {
      if(print) {
        print(msg)
      }
    }
  }
  function warn(msg$$1) {
    if(verbosity >= WARNINGS) {
      log$$3("Warning: " + msg$$1)
    }
  }
  function error$$3(msg$$2) {
    log$$3("Error: " + msg$$2);
    var JSCompiler_inline_result$$6;
    JSCompiler_inline_label_backtrace_11: {
      try {
        throw new Error;
      }catch(e$$inline_10) {
        JSCompiler_inline_result$$6 = e$$inline_10.stack ? e$$inline_10.stack.split("\n").slice(2).join("\n") : ""
      }
    }
    log$$3(JSCompiler_inline_result$$6);
    throw new Error(msg$$2);
  }
  function TODO(what) {
    if(verbosity >= TODOS) {
      log$$3("TODO: " + what)
    }
  }
  function assertWellFormed(cond$$1, msg$$5) {
    if(!cond$$1) {
      error$$3("Malformed PDF: " + msg$$5)
    }
  }
  function shadow(obj$$16, prop$$4, value$$30) {
    Object.defineProperty(obj$$16, prop$$4, {value:value$$30, enumerable:true, configurable:true, writable:false});
    return value$$30
  }
  function bytesToString(bytes) {
    var str$$6 = "";
    var length$$13 = bytes.length;
    var n$$1 = 0;
    for(;n$$1 < length$$13;++n$$1) {
      str$$6 += String.fromCharCode(bytes[n$$1])
    }
    return str$$6
  }
  function stringToBytes(str$$7) {
    var length$$14 = str$$7.length;
    var bytes$$1 = new Uint8Array(length$$14);
    var n$$2 = 0;
    for(;n$$2 < length$$14;++n$$2) {
      bytes$$1[n$$2] = str$$7.charCodeAt(n$$2) & 255
    }
    return bytes$$1
  }
  function stringToPDFString(str$$8) {
    var i$$12;
    var n$$3 = str$$8.length;
    var str2 = "";
    if(str$$8[0] === "\u00fe" && str$$8[1] === "\u00ff") {
      i$$12 = 2;
      for(;i$$12 < n$$3;i$$12 += 2) {
        str2 += String.fromCharCode(str$$8.charCodeAt(i$$12) << 8 | str$$8.charCodeAt(i$$12 + 1))
      }
    }else {
      i$$12 = 0;
      for(;i$$12 < n$$3;++i$$12) {
        var code$$2 = PDFStringTranslateTable[str$$8.charCodeAt(i$$12)];
        str2 += code$$2 ? String.fromCharCode(code$$2) : str$$8.charAt(i$$12)
      }
    }
    return str2
  }
  function isBool(v) {
    return typeof v == "boolean"
  }
  function isInt(v$$1) {
    return typeof v$$1 == "number" && (v$$1 | 0) == v$$1
  }
  function isNum(v$$2) {
    return typeof v$$2 == "number"
  }
  function isString(v$$3) {
    return typeof v$$3 == "string"
  }
  function isName(v$$5) {
    return v$$5 instanceof Name
  }
  function isCmd(v$$6, cmd$$1) {
    return v$$6 instanceof Cmd && (!cmd$$1 || v$$6.cmd == cmd$$1)
  }
  function isDict(v$$7, type$$27) {
    return v$$7 instanceof Dict && (!type$$27 || v$$7.get("Type").name == type$$27)
  }
  function isArray(v$$8) {
    return v$$8 instanceof Array
  }
  function isStream(v$$9) {
    return typeof v$$9 == "object" && v$$9 != null && "getChar" in v$$9
  }
  function isRef(v$$11) {
    return v$$11 instanceof Ref
  }
  function createScratchCanvas(width$$9, height$$8) {
    var canvas$$2 = PdfJS_window.document.createElement("canvas");
    canvas$$2.width = width$$9;
    canvas$$2.height = height$$8;
    return canvas$$2
  }
  function addContextCurrentTransform(ctx$$1) {
    if(!ctx$$1.mozCurrentTransform) {
      ctx$$1._originalSave = ctx$$1.save;
      ctx$$1._originalRestore = ctx$$1.restore;
      ctx$$1._originalRotate = ctx$$1.rotate;
      ctx$$1._originalScale = ctx$$1.scale;
      ctx$$1._originalTranslate = ctx$$1.translate;
      ctx$$1._originalTransform = ctx$$1.transform;
      ctx$$1._transformMatrix = [1, 0, 0, 1, 0, 0];
      ctx$$1._transformStack = [];
      Object.defineProperty(ctx$$1, "mozCurrentTransform", {get:function getCurrentTransform() {
        return this._transformMatrix
      }});
      Object.defineProperty(ctx$$1, "mozCurrentTransformInverse", {get:function getCurrentTransformInverse() {
        var m$$1 = this._transformMatrix;
        var a$$3 = m$$1[0];
        var b$$3 = m$$1[1];
        var c$$1 = m$$1[2];
        var d$$1 = m$$1[3];
        var e$$10 = m$$1[4];
        var f$$1 = m$$1[5];
        var ad_bc = a$$3 * d$$1 - b$$3 * c$$1;
        var bc_ad = b$$3 * c$$1 - a$$3 * d$$1;
        return[d$$1 / ad_bc, b$$3 / bc_ad, c$$1 / bc_ad, a$$3 / ad_bc, (d$$1 * e$$10 - c$$1 * f$$1) / bc_ad, (b$$3 * e$$10 - a$$3 * f$$1) / ad_bc]
      }});
      ctx$$1.save = function ctxSave() {
        var old = this._transformMatrix;
        this._transformStack.push(old);
        this._transformMatrix = old.slice(0, 6);
        this._originalSave()
      };
      ctx$$1.restore = function ctxRestore() {
        var prev = this._transformStack.pop();
        if(prev) {
          this._transformMatrix = prev;
          this._originalRestore()
        }
      };
      ctx$$1.translate = function ctxTranslate(x$$61, y$$43) {
        var m$$2 = this._transformMatrix;
        m$$2[4] = m$$2[0] * x$$61 + m$$2[2] * y$$43 + m$$2[4];
        m$$2[5] = m$$2[1] * x$$61 + m$$2[3] * y$$43 + m$$2[5];
        this._originalTranslate(x$$61, y$$43)
      };
      ctx$$1.scale = function ctxScale(x$$62, y$$44) {
        var m$$3 = this._transformMatrix;
        m$$3[0] = m$$3[0] * x$$62;
        m$$3[1] = m$$3[1] * x$$62;
        m$$3[2] = m$$3[2] * y$$44;
        m$$3[3] = m$$3[3] * y$$44;
        this._originalScale(x$$62, y$$44)
      };
      ctx$$1.transform = function ctxTransform(a$$4, b$$4, c$$2, d$$2, e$$11, f$$2) {
        var m$$4 = this._transformMatrix;
        this._transformMatrix = [m$$4[0] * a$$4 + m$$4[2] * b$$4, m$$4[1] * a$$4 + m$$4[3] * b$$4, m$$4[0] * c$$2 + m$$4[2] * d$$2, m$$4[1] * c$$2 + m$$4[3] * d$$2, m$$4[0] * e$$11 + m$$4[2] * f$$2 + m$$4[4], m$$4[1] * e$$11 + m$$4[3] * f$$2 + m$$4[5]];
        ctx$$1._originalTransform(a$$4, b$$4, c$$2, d$$2, e$$11, f$$2)
      };
      ctx$$1.rotate = function ctxRotate(angle$$1) {
        var cosValue = Math.cos(angle$$1);
        var sinValue = Math.sin(angle$$1);
        var m$$5 = this._transformMatrix;
        this._transformMatrix = [m$$5[0] * cosValue + m$$5[2] * sinValue, m$$5[1] * cosValue + m$$5[3] * sinValue, m$$5[0] * -sinValue + m$$5[2] * cosValue, m$$5[1] * -sinValue + m$$5[3] * cosValue, m$$5[4], m$$5[5]];
        this._originalRotate(angle$$1)
      }
    }
  }
  function mapPrivateUseChars(code$$3) {
    switch(code$$3) {
      case 63721:
      ;
      case 63193:
        return 169;
      default:
        return code$$3
    }
  }
  function isSpecialUnicode(unicode) {
    return unicode <= 31 || unicode >= 127 && unicode < kSizeOfGlyphArea || unicode >= kCmapGlyphOffset && unicode < kCmapGlyphOffset + kSizeOfGlyphArea
  }
  function loadJpegStream(id, imageData, objs) {
    var img$$2 = new Image;
    img$$2.onload = function loadJpegStream_onloadClosure() {
      objs.resolve(id, img$$2)
    };
    img$$2.src = "data:image/jpeg;base64," + PdfJS_window.window.btoa(imageData)
  }
  function MessageHandler(name$$41, comObj) {
    this.name = name$$41;
    this.comObj = comObj;
    this.callbackIndex = 1;
    var callbacks = this.callbacks = {};
    var ah = this.actionHandler = {};
    ah["console_log"] = [function ahConsoleLog(data$$25) {
      PdfJS_window.console.log.apply(PdfJS_window.console, data$$25)
    }];
    ah["console_error"] = [function ahConsoleError(data$$26) {
      PdfJS_window.console.error.apply(PdfJS_window.console, data$$26)
    }];
    comObj.onmessage = function messageHandlerComObjOnMessage(event$$2) {
      var data$$27 = event$$2.data;
      if(data$$27.isReply) {
        var callbackId = data$$27.callbackId;
        if(data$$27.callbackId in callbacks) {
          var callback$$26 = callbacks[callbackId];
          delete callbacks[callbackId];
          callback$$26(data$$27.data)
        }else {
          error$$3("Cannot resolve callback " + callbackId)
        }
      }else {
        if(data$$27.action in ah) {
          var action = ah[data$$27.action];
          if(data$$27.callbackId) {
            var promise = new Promise;
            promise.then(function(resolvedData) {
              comObj.postMessage({isReply:true, callbackId:data$$27.callbackId, data:resolvedData})
            });
            action[0].call(action[1], data$$27.data, promise)
          }else {
            action[0].call(action[1], data$$27.data)
          }
        }else {
          error$$3("Unkown action from worker: " + data$$27.action)
        }
      }
    }
  }
  PDFJS.build = "3cc61f0";
  var globalScope = typeof PdfJS_window.window === "undefined" ? this : PdfJS_window.window;
  var isWorker = typeof PdfJS_window.window == "undefined";
  var ERRORS = 0;
  var WARNINGS = 1;
  var TODOS = 5;
  var verbosity = WARNINGS;
  if(!globalScope.PDFJS) {
    globalScope.PDFJS = {}
  }
  globalScope.PDFJS.getPdf = getPdf;
  globalScope.PDFJS.pdfBug = false;
  var Page = function PageClosure() {
    function Page$$1(xref, pageNumber, pageDict, ref$$2) {
      this.pageNumber = pageNumber;
      this.pageDict = pageDict;
      this.xref = xref;
      this.ref = ref$$2;
      this.displayReadyPromise = null
    }
    Page$$1.prototype = {getPageProp:function Page_getPageProp(key$$14) {
      return this.pageDict.get(key$$14)
    }, inheritPageProp:function Page_inheritPageProp(key$$15) {
      var dict = this.pageDict;
      var obj$$17 = dict.get(key$$15);
      for(;obj$$17 === undefined;) {
        dict = dict.get("Parent");
        if(!dict) {
          break
        }
        obj$$17 = dict.get(key$$15)
      }
      return obj$$17
    }, get content() {
      return shadow(this, "content", this.getPageProp("Contents"))
    }, get resources() {
      return shadow(this, "resources", this.inheritPageProp("Resources"))
    }, get mediaBox() {
      var obj$$18 = this.inheritPageProp("MediaBox");
      if(!isArray(obj$$18) || obj$$18.length !== 4) {
        obj$$18 = [0, 0, 612, 792]
      }
      return shadow(this, "mediaBox", obj$$18)
    }, get view() {
      var mediaBox = this.mediaBox;
      var cropBox = this.inheritPageProp("CropBox");
      if(!isArray(cropBox) || cropBox.length !== 4) {
        return shadow(this, "view", mediaBox)
      }
      cropBox = Util.intersect(cropBox, mediaBox);
      if(!cropBox) {
        return shadow(this, "view", mediaBox)
      }
      return shadow(this, "view", cropBox)
    }, get annotations() {
      return shadow(this, "annotations", this.inheritPageProp("Annots"))
    }, get rotate() {
      var rotate = this.inheritPageProp("Rotate") || 0;
      if(rotate % 90 != 0) {
        rotate = 0
      }else {
        if(rotate >= 360) {
          rotate = rotate % 360
        }else {
          if(rotate < 0) {
            rotate = (rotate % 360 + 360) % 360
          }
        }
      }
      return shadow(this, "rotate", rotate)
    }, getOperatorList:function Page_getOperatorList(handler$$4, dependency) {
      var xref$$1 = this.xref;
      var content = this.content;
      var resources = this.resources;
      if(isArray(content)) {
        var streams = [];
        var i$$14;
        var n$$4 = content.length;
        i$$14 = 0;
        for(;i$$14 < n$$4;++i$$14) {
          streams.push(xref$$1.fetchIfRef(content[i$$14]))
        }
        content = new StreamsSequenceStream(streams)
      }else {
        if(isStream(content)) {
          content.reset()
        }else {
          if(!content) {
            content = new Stream(new Uint8Array(0))
          }
        }
      }
      var pe = this.pe = new PartialEvaluator(xref$$1, handler$$4, "p" + this.pageNumber + "_");
      return pe.getOperatorList(content, resources, dependency)
    }, getLinks:function Page_getLinks() {
      var links = [];
      var annotations = pageGetAnnotations();
      var i$$15;
      var n$$5 = annotations.length;
      i$$15 = 0;
      for(;i$$15 < n$$5;++i$$15) {
        if(annotations[i$$15].type != "Link") {
          continue
        }
        links.push(annotations[i$$15])
      }
      return links
    }, getAnnotations:function Page_getAnnotations() {
      function getInheritableProperty(annotation$$1, name$$43) {
        var item$$1 = annotation$$1;
        for(;item$$1 && !item$$1.has(name$$43);) {
          item$$1 = item$$1.get("Parent")
        }
        if(!item$$1) {
          return null
        }
        return item$$1.get(name$$43)
      }
      function isValidUrl(url$$5) {
        if(!url$$5) {
          return false
        }
        var colon = url$$5.indexOf(":");
        if(colon < 0) {
          return false
        }
        var protocol$$2 = url$$5.substr(0, colon);
        switch(protocol$$2) {
          case "http":
          ;
          case "https":
          ;
          case "ftp":
          ;
          case "mailto":
            return true;
          default:
            return false
        }
      }
      var xref$$2 = this.xref;
      var annotations$$1 = this.annotations || [];
      var i$$16;
      var n$$6 = annotations$$1.length;
      var items = [];
      i$$16 = 0;
      for(;i$$16 < n$$6;++i$$16) {
        var annotationRef = annotations$$1[i$$16];
        var annotation = xref$$2.fetch(annotationRef);
        if(!isDict(annotation)) {
          continue
        }
        var subtype = annotation.get("Subtype");
        if(!isName(subtype)) {
          continue
        }
        var rect = annotation.get("Rect");
        var item = {};
        item.type = subtype.name;
        item.rect = rect;
        switch(subtype.name) {
          case "Link":
            var a$$5 = annotation.get("A");
            if(a$$5) {
              switch(a$$5.get("S").name) {
                case "URI":
                  var url$$4 = a$$5.get("URI");
                  if(!isValidUrl(url$$4)) {
                    url$$4 = ""
                  }
                  item.url = url$$4;
                  break;
                case "GoTo":
                  item.dest = a$$5.get("D");
                  break;
                default:
                  TODO("other link types")
              }
            }else {
              if(annotation.has("Dest")) {
                var dest = annotation.get("Dest");
                item.dest = isName(dest) ? dest.name : dest
              }
            }
            break;
          case "Widget":
            var fieldType = getInheritableProperty(annotation, "FT");
            if(!isName(fieldType)) {
              break
            }
            item.fieldType = fieldType.name;
            var fieldName = [];
            var namedItem = annotation;
            var ref$$3 = annotationRef;
            for(;namedItem;) {
              var parent = namedItem.get("Parent");
              var parentRef = namedItem.getRaw("Parent");
              var name$$42 = namedItem.get("T");
              if(name$$42) {
                fieldName.unshift(stringToPDFString(name$$42))
              }else {
                var kids = parent.get("Kids");
                var j$$2;
                var jj;
                j$$2 = 0, jj = kids.length;
                for(;j$$2 < jj;j$$2++) {
                  var kidRef = kids[j$$2];
                  if(kidRef.num == ref$$3.num && kidRef.gen == ref$$3.gen) {
                    break
                  }
                }
                fieldName.unshift("`" + j$$2)
              }
              namedItem = parent;
              ref$$3 = parentRef
            }
            item.fullName = fieldName.join(".");
            var alternativeText = stringToPDFString(annotation.get("TU") || "");
            item.alternativeText = alternativeText;
            var da = getInheritableProperty(annotation, "DA") || "";
            var m$$6 = /([\d\.]+)\sTf/.exec(da);
            if(m$$6) {
              item.fontSize = parseFloat(m$$6[1])
            }
            item.textAlignment = getInheritableProperty(annotation, "Q");
            item.flags = getInheritableProperty(annotation, "Ff") || 0;
            break;
          case "Text":
            var content$$1 = annotation.get("Contents");
            var title$$5 = annotation.get("T");
            item.content = stringToPDFString(content$$1 || "");
            item.title = stringToPDFString(title$$5 || "");
            item.name = !annotation.has("Name") ? "Note" : annotation.get("Name").name;
            break;
          default:
            TODO("unimplemented annotation type: " + subtype.name)
        }
        items.push(item)
      }
      return items
    }};
    return Page$$1
  }();
  var PDFDocument = function PDFDocumentClosure() {
    function PDFDocument$$1(arg$$6, callback$$27) {
      if(isStream(arg$$6)) {
        init.call(this, arg$$6)
      }else {
        if(typeof arg$$6 == "object" && arg$$6 != null && "byteLength" in arg$$6) {
          init.call(this, new Stream(arg$$6))
        }else {
          error$$3("PDFDocument: Unknown argument type")
        }
      }
    }
    function init(stream) {
      assertWellFormed(stream.length > 0, "stream must have data");
      this.stream = stream;
      this.setup();
      this.acroForm = this.catalog.catDict.get("AcroForm")
    }
    function find(stream$$1, needle, limit, backwards) {
      var pos = stream$$1.pos;
      var end$$1 = stream$$1.end;
      var str$$9 = "";
      if(pos + limit > end$$1) {
        limit = end$$1 - pos
      }
      var n$$7 = 0;
      for(;n$$7 < limit;++n$$7) {
        str$$9 += stream$$1.getChar()
      }
      stream$$1.pos = pos;
      var index$$41 = backwards ? str$$9.lastIndexOf(needle) : str$$9.indexOf(needle);
      if(index$$41 == -1) {
        return false
      }
      stream$$1.pos += index$$41;
      return true
    }
    PDFDocument$$1.prototype = {get linearization() {
      var length$$15 = this.stream.length;
      var linearization = false;
      if(length$$15) {
        linearization = new Linearization(this.stream);
        if(linearization.length != length$$15) {
          linearization = false
        }
      }
      return shadow(this, "linearization", linearization)
    }, get startXRef() {
      var stream$$2 = this.stream;
      var startXRef = 0;
      var linearization$$1 = this.linearization;
      if(linearization$$1) {
        stream$$2.reset();
        if(find(stream$$2, "endobj", 1024)) {
          startXRef = stream$$2.pos + 6
        }
      }else {
        var step = 1024;
        var found = false;
        var pos$$1 = stream$$2.end;
        for(;!found && pos$$1 > 0;) {
          pos$$1 -= step - "startxref".length;
          if(pos$$1 < 0) {
            pos$$1 = 0
          }
          stream$$2.pos = pos$$1;
          found = find(stream$$2, "startxref", step, true)
        }
        if(found) {
          stream$$2.skip(9);
          var ch;
          do {
            ch = stream$$2.getChar()
          }while(Lexer.isSpace(ch));
          var str$$10 = "";
          for(;ch - "0" <= 9;) {
            str$$10 += ch;
            ch = stream$$2.getChar()
          }
          startXRef = parseInt(str$$10, 10);
          if(isNaN(startXRef)) {
            startXRef = 0
          }
        }
      }
      return shadow(this, "startXRef", startXRef)
    }, get mainXRefEntriesOffset() {
      var mainXRefEntriesOffset = 0;
      var linearization$$2 = this.linearization;
      if(linearization$$2) {
        mainXRefEntriesOffset = linearization$$2.mainXRefEntriesOffset
      }
      return shadow(this, "mainXRefEntriesOffset", mainXRefEntriesOffset)
    }, checkHeader:function PDFDocument_checkHeader() {
      var stream$$3 = this.stream;
      stream$$3.reset();
      if(find(stream$$3, "%PDF-", 1024)) {
        stream$$3.moveStart()
      }
    }, setup:function PDFDocument_setup(ownerPassword, userPassword) {
      this.checkHeader();
      var xref$$3 = new XRef(this.stream, this.startXRef, this.mainXRefEntriesOffset);
      this.xref = xref$$3;
      this.catalog = new Catalog(xref$$3)
    }, get numPages() {
      var linearization$$3 = this.linearization;
      var num$$4 = linearization$$3 ? linearization$$3.numPages : this.catalog.numPages;
      return shadow(this, "numPages", num$$4)
    }, getDocumentInfo:function PDFDocument_getDocumentInfo() {
      var info;
      if(this.xref.trailer.has("Info")) {
        var infoDict = this.xref.trailer.get("Info");
        info = {};
        infoDict.forEach(function(key$$16, value$$33) {
          info[key$$16] = typeof value$$33 !== "string" ? value$$33 : stringToPDFString(value$$33)
        })
      }
      return shadow(this, "getDocumentInfo", info)
    }, getFingerprint:function PDFDocument_getFingerprint() {
      var xref$$4 = this.xref;
      var fileID;
      if(xref$$4.trailer.has("ID")) {
        fileID = "";
        var id$$1 = xref$$4.trailer.get("ID")[0];
        id$$1.split("").forEach(function(el) {
          fileID += Number(el.charCodeAt(0)).toString(16)
        })
      }else {
        var data$$28 = this.stream.bytes.subarray(0, 100);
        var hash$$1 = calculateMD5(data$$28, 0, data$$28.length);
        fileID = "";
        var i$$17 = 0;
        var length$$16 = hash$$1.length;
        for(;i$$17 < length$$16;i$$17++) {
          fileID += Number(hash$$1[i$$17]).toString(16)
        }
      }
      return shadow(this, "getFingerprint", fileID)
    }, getPage:function PDFDocument_getPage(n$$8) {
      return this.catalog.getPage(n$$8)
    }};
    return PDFDocument$$1
  }();
  var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
  var Util = PDFJS.Util = function UtilClosure() {
    function Util$$1() {
    }
    Util$$1.makeCssRgb = function Util_makeCssRgb(r$$1, g$$1, b$$5) {
      var ri = 255 * r$$1 | 0;
      var gi = 255 * g$$1 | 0;
      var bi = 255 * b$$5 | 0;
      return"rgb(" + ri + "," + gi + "," + bi + ")"
    };
    Util$$1.makeCssCmyk = function Util_makeCssCmyk(c$$3, m$$7, y$$45, k) {
      c$$3 = (new DeviceCmykCS).getRgb([c$$3, m$$7, y$$45, k]);
      var ri$$1 = 255 * c$$3[0] | 0;
      var gi$$1 = 255 * c$$3[1] | 0;
      var bi$$1 = 255 * c$$3[2] | 0;
      return"rgb(" + ri$$1 + "," + gi$$1 + "," + bi$$1 + ")"
    };
    Util$$1.applyTransform = function Util_applyTransform(p, m$$8) {
      var xt = p[0] * m$$8[0] + p[1] * m$$8[2] + m$$8[4];
      var yt = p[0] * m$$8[1] + p[1] * m$$8[3] + m$$8[5];
      return[xt, yt]
    };
    Util$$1.applyInverseTransform = function Util_applyInverseTransform(p$$1, m$$9) {
      var d$$3 = m$$9[0] * m$$9[3] - m$$9[1] * m$$9[2];
      var xt$$1 = (p$$1[0] * m$$9[3] - p$$1[1] * m$$9[2] + m$$9[2] * m$$9[5] - m$$9[4] * m$$9[3]) / d$$3;
      var yt$$1 = (-p$$1[0] * m$$9[1] + p$$1[1] * m$$9[0] + m$$9[4] * m$$9[1] - m$$9[5] * m$$9[0]) / d$$3;
      return[xt$$1, yt$$1]
    };
    Util$$1.inverseTransform = function Util_inverseTransform(m$$10) {
      var d$$4 = m$$10[0] * m$$10[3] - m$$10[1] * m$$10[2];
      return[m$$10[3] / d$$4, -m$$10[1] / d$$4, -m$$10[2] / d$$4, m$$10[0] / d$$4, (m$$10[2] * m$$10[5] - m$$10[4] * m$$10[3]) / d$$4, (m$$10[4] * m$$10[1] - m$$10[5] * m$$10[0]) / d$$4]
    };
    Util$$1.apply3dTransform = function Util_apply3dTransform(m$$11, v$$14) {
      return[m$$11[0] * v$$14[0] + m$$11[1] * v$$14[1] + m$$11[2] * v$$14[2], m$$11[3] * v$$14[0] + m$$11[4] * v$$14[1] + m$$11[5] * v$$14[2], m$$11[6] * v$$14[0] + m$$11[7] * v$$14[1] + m$$11[8] * v$$14[2]]
    };
    Util$$1.normalizeRect = function Util_normalizeRect(rect$$1) {
      var r$$2 = rect$$1.slice(0);
      if(rect$$1[0] > rect$$1[2]) {
        r$$2[0] = rect$$1[2];
        r$$2[2] = rect$$1[0]
      }
      if(rect$$1[1] > rect$$1[3]) {
        r$$2[1] = rect$$1[3];
        r$$2[3] = rect$$1[1]
      }
      return r$$2
    };
    Util$$1.intersect = function Util_intersect(rect1, rect2) {
      function compare(a$$6, b$$6) {
        return a$$6 - b$$6
      }
      var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);
      var orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);
      var result$$4 = [];
      rect1 = Util$$1.normalizeRect(rect1);
      rect2 = Util$$1.normalizeRect(rect2);
      if(orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
        result$$4[0] = orderedX[1];
        result$$4[2] = orderedX[2]
      }else {
        return false
      }
      if(orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
        result$$4[1] = orderedY[1];
        result$$4[3] = orderedY[2]
      }else {
        return false
      }
      return result$$4
    };
    Util$$1.sign = function Util_sign(num$$5) {
      return num$$5 < 0 ? -1 : 1
    };
    return Util$$1
  }();
  var PageViewport = PDFJS.PageViewport = function PageViewportClosure() {
    function PageViewport$$1(viewBox, scale, rotate$$1, offsetX, offsetY) {
      var centerX = (viewBox[2] + viewBox[0]) / 2;
      var centerY = (viewBox[3] + viewBox[1]) / 2;
      var rotateA;
      var rotateB;
      var rotateC;
      var rotateD;
      switch(rotate$$1) {
        case -180:
        ;
        case 180:
          rotateA = -1;
          rotateB = 0;
          rotateC = 0;
          rotateD = 1;
          break;
        case -270:
        ;
        case 90:
          rotateA = 0;
          rotateB = 1;
          rotateC = 1;
          rotateD = 0;
          break;
        case -90:
        ;
        case 270:
          rotateA = 0;
          rotateB = -1;
          rotateC = -1;
          rotateD = 0;
          break;
        case 360:
        ;
        case 0:
        ;
        default:
          rotateA = 1;
          rotateB = 0;
          rotateC = 0;
          rotateD = -1
      }
      var offsetCanvasX;
      var offsetCanvasY;
      var width$$10;
      var height$$9;
      if(rotateA == 0) {
        offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
        offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
        width$$10 = Math.abs(viewBox[3] - viewBox[1]) * scale;
        height$$9 = Math.abs(viewBox[2] - viewBox[0]) * scale
      }else {
        offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
        offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
        width$$10 = Math.abs(viewBox[2] - viewBox[0]) * scale;
        height$$9 = Math.abs(viewBox[3] - viewBox[1]) * scale
      }
      this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
      this.offsetX = offsetX;
      this.offsetY = offsetY;
      this.width = width$$10;
      this.height = height$$9;
      this.fontScale = scale
    }
    PageViewport$$1.prototype = {convertToViewportPoint:function PageViewport_convertToViewportPoint(x$$63, y$$46) {
      return Util.applyTransform([x$$63, y$$46], this.transform)
    }, convertToViewportRectangle:function PageViewport_convertToViewportRectangle(rect$$2) {
      var tl = Util.applyTransform([rect$$2[0], rect$$2[1]], this.transform);
      var br = Util.applyTransform([rect$$2[2], rect$$2[3]], this.transform);
      return[tl[0], tl[1], br[0], br[1]]
    }, convertToPdfPoint:function PageViewport_convertToPdfPoint(x$$64, y$$47) {
      return Util.applyInverseTransform([x$$64, y$$47], this.transform)
    }};
    return PageViewport$$1
  }();
  var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 
  8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364];
  var Promise = PDFJS.Promise = function PromiseClosure() {
    function Promise$$1(name$$44, data$$29) {
      this.name = name$$44;
      this.isRejected = false;
      this.error = null;
      if(data$$29 != null) {
        this.isResolved = true;
        this._data = data$$29;
        this.hasData = true
      }else {
        this.isResolved = false;
        this._data = EMPTY_PROMISE
      }
      this.callbacks = [];
      this.errbacks = [];
      this.progressbacks = []
    }
    var EMPTY_PROMISE = {};
    Promise$$1.all = function Promise_all(promises) {
      var deferred = new Promise$$1;
      var unresolved = promises.length;
      var results = [];
      if(unresolved === 0) {
        deferred.resolve(results);
        return deferred
      }
      var i$$18 = 0;
      var ii$$1 = promises.length;
      for(;i$$18 < ii$$1;++i$$18) {
        var promise$$1 = promises[i$$18];
        promise$$1.then(function(i$$19) {
          return function(value$$34) {
            results[i$$19] = value$$34;
            unresolved--;
            if(unresolved === 0) {
              deferred.resolve(results)
            }
          }
        }(i$$18))
      }
      return deferred
    };
    Promise$$1.prototype = {hasData:false, set data(value$$35) {
      if(value$$35 === undefined) {
        return
      }
      if(this._data !== EMPTY_PROMISE) {
        error$$3("Promise " + this.name + ": Cannot set the data of a promise twice")
      }
      this._data = value$$35;
      this.hasData = true;
      if(this.onDataCallback) {
        this.onDataCallback(value$$35)
      }
    }, get data() {
      if(this._data === EMPTY_PROMISE) {
        error$$3("Promise " + this.name + ": Cannot get data that isn't set")
      }
      return this._data
    }, onData:function Promise_onData(callback$$28) {
      if(this._data !== EMPTY_PROMISE) {
        callback$$28(this._data)
      }else {
        this.onDataCallback = callback$$28
      }
    }, resolve:function Promise_resolve(data$$30) {
      if(this.isResolved) {
        error$$3("A Promise can be resolved only once " + this.name)
      }
      if(this.isRejected) {
        error$$3("The Promise was already rejected " + this.name)
      }
      this.isResolved = true;
      this.data = data$$30 || null;
      var callbacks$$1 = this.callbacks;
      var i$$20 = 0;
      var ii$$2 = callbacks$$1.length;
      for(;i$$20 < ii$$2;i$$20++) {
        callbacks$$1[i$$20].call(null, data$$30)
      }
    }, progress:function Promise_progress(data$$31) {
      var callbacks$$2 = this.progressbacks;
      var i$$21 = 0;
      var ii$$3 = callbacks$$2.length;
      for(;i$$21 < ii$$3;i$$21++) {
        callbacks$$2[i$$21].call(null, data$$31)
      }
    }, reject:function Promise_reject(reason) {
      if(this.isRejected) {
        error$$3("A Promise can be rejected only once " + this.name)
      }
      if(this.isResolved) {
        error$$3("The Promise was already resolved " + this.name)
      }
      this.isRejected = true;
      this.error = reason || null;
      var errbacks = this.errbacks;
      var i$$22 = 0;
      var ii$$4 = errbacks.length;
      for(;i$$22 < ii$$4;i$$22++) {
        errbacks[i$$22].call(null, reason)
      }
    }, then:function Promise_then(callback$$29, errback, progressback) {
      if(!callback$$29) {
        error$$4("Requiring callback" + this.name)
      }
      if(this.isResolved) {
        var data$$32 = this.data;
        callback$$29.call(null, data$$32)
      }else {
        if(this.isRejected && errback) {
          var error$$4 = this.error;
          errback.call(null, error$$4)
        }else {
          this.callbacks.push(callback$$29);
          if(errback) {
            this.errbacks.push(errback)
          }
        }
      }
      if(progressback) {
        this.progressbacks.push(progressback)
      }
    }};
    return Promise$$1
  }();
  var StatTimer = function StatTimerClosure() {
    function StatTimer$$1() {
      this.started = {};
      this.times = [];
      this.enabled = true
    }
    StatTimer$$1.prototype = {time:function StatTimer_time(name$$45) {
      if(!this.enabled) {
        return
      }
      if(name$$45 in this.started) {
        throw"Timer is already running for " + name$$45;
      }
      this.started[name$$45] = Date.now()
    }, timeEnd:function StatTimer_timeEnd(name$$46) {
      if(!this.enabled) {
        return
      }
      if(!(name$$46 in this.started)) {
        throw"Timer has not been started for " + name$$46;
      }
      this.times.push({"name":name$$46, "start":this.started[name$$46], "end":Date.now()});
      delete this.started[name$$46]
    }, toString:function StatTimer_toString() {
      var times = this.times;
      var out = "";
      var longest = 0;
      var i$$23 = 0;
      var ii$$5 = times.length;
      for(;i$$23 < ii$$5;++i$$23) {
        var name$$47 = times[i$$23]["name"];
        if(name$$47.length > longest) {
          longest = name$$47.length
        }
      }
      i$$23 = 0;
      ii$$5 = times.length;
      for(;i$$23 < ii$$5;++i$$23) {
        var span = times[i$$23];
        var duration = span.end - span.start;
        var JSCompiler_temp_const$$0 = out;
        var JSCompiler_inline_result$$1;
        var str$$inline_14 = span["name"];
        for(;str$$inline_14.length < longest;) {
          str$$inline_14 += " "
        }
        JSCompiler_inline_result$$1 = str$$inline_14;
        out = JSCompiler_temp_const$$0 + (JSCompiler_inline_result$$1 + " " + duration + "ms\n")
      }
      return out
    }};
    return StatTimer$$1
  }();
  PDFJS.getDocument = function getDocument(source$$1) {
    var promise$$2 = new PDFJS.Promise;
    var transport = new WorkerTransport(promise$$2);
    if(typeof source$$1 === "string") {
      PDFJS.getPdf({url:source$$1, progress:function getPDFProgress(evt$$8) {
        if(evt$$8.lengthComputable) {
          promise$$2.progress({loaded:evt$$8.loaded, total:evt$$8.total})
        }
      }, error:function getPDFError(e$$12) {
        promise$$2.reject("Unexpected server response of " + e$$12.target.status + ".")
      }}, function getPDFLoad(data$$33) {
        transport.sendData(data$$33)
      })
    }else {
      transport.sendData(source$$1)
    }
    return promise$$2
  };
  var PDFDocumentProxy = function PDFDocumentProxyClosure() {
    function PDFDocumentProxy$$1(pdfInfo, transport$$1) {
      this.pdfInfo = pdfInfo;
      this.transport = transport$$1
    }
    PDFDocumentProxy$$1.prototype = {get numPages() {
      return this.pdfInfo.numPages
    }, get fingerprint() {
      return this.pdfInfo.fingerprint
    }, getPage:function PDFDocumentProxy_getPage(number) {
      return this.transport.getPage(number)
    }, getDestinations:function PDFDocumentProxy_getDestinations() {
      var promise$$3 = new PDFJS.Promise;
      var destinations = this.pdfInfo.destinations;
      promise$$3.resolve(destinations);
      return promise$$3
    }, getOutline:function PDFDocumentProxy_getOutline() {
      var promise$$4 = new PDFJS.Promise;
      var outline = this.pdfInfo.outline;
      promise$$4.resolve(outline);
      return promise$$4
    }, getMetadata:function PDFDocumentProxy_getMetadata() {
      var promise$$5 = new PDFJS.Promise;
      var info$$1 = this.pdfInfo.info;
      var metadata = this.pdfInfo.metadata;
      promise$$5.resolve({info:info$$1, metadata:metadata ? new PDFJS.Metadata(metadata) : null});
      return promise$$5
    }, destroy:function PDFDocumentProxy_destroy() {
      this.transport.destroy()
    }};
    return PDFDocumentProxy$$1
  }();
  var PDFPageProxy = function PDFPageProxyClosure() {
    function PDFPageProxy$$1(pageInfo, transport$$2) {
      this.pageInfo = pageInfo;
      this.transport = transport$$2;
      this.stats = new StatTimer;
      this.stats.enabled = !!globalScope.PDFJS.enableStats;
      this.objs = transport$$2.objs;
      this.renderInProgress = false
    }
    PDFPageProxy$$1.prototype = {get pageNumber() {
      return this.pageInfo.pageIndex + 1
    }, get rotate() {
      return this.pageInfo.rotate
    }, get ref() {
      return this.pageInfo.ref
    }, get view() {
      return this.pageInfo.view
    }, getViewport:function PDFPageProxy_getViewport(scale$$1, rotate$$2) {
      if(arguments.length < 2) {
        rotate$$2 = this.rotate
      }
      return new PDFJS.PageViewport(this.view, scale$$1, rotate$$2, 0, 0)
    }, getAnnotations:function PDFPageProxy_getAnnotations() {
      if(this.annotationsPromise) {
        return this.annotationsPromise
      }
      var promise$$6 = new PDFJS.Promise;
      this.annotationsPromise = promise$$6;
      this.transport.getAnnotations(this.pageInfo.pageIndex);
      return promise$$6
    }, render:function PDFPageProxy_render(params$$1) {
      function complete(error$$5) {
        self$$1.renderInProgress = false;
        if(self$$1.destroyed) {
          delete self$$1.operatorList;
          delete self$$1.displayReadyPromise
        }
        if(error$$5) {
          promise$$7.reject(error$$5)
        }else {
          promise$$7.resolve()
        }
      }
      this.renderInProgress = true;
      var promise$$7 = new Promise;
      var stats = this.stats;
      stats.time("Overall");
      if(!this.displayReadyPromise) {
        this.displayReadyPromise = new Promise;
        this.destroyed = false;
        this.stats.time("Page Request");
        this.transport.messageHandler.send("RenderPageRequest", {pageIndex:this.pageNumber - 1})
      }
      var self$$1 = this;
      this.displayReadyPromise.then(function pageDisplayReadyPromise() {
        if(self$$1.destroyed) {
          complete();
          return
        }
        var gfx = new CanvasGraphics(params$$1.canvasContext, this.objs, params$$1.textLayer);
        try {
          this.display(gfx, params$$1.viewport, complete)
        }catch(e$$13) {
          complete(e$$13)
        }
      }.bind(this), function pageDisplayReadPromiseError(reason$$1) {
        complete(reason$$1)
      });
      return promise$$7
    }, startRenderingFromOperatorList:function PDFPageProxy_startRenderingFromOperatorList(operatorList, fonts) {
      function displayContinuation() {
        PdfJS_window.setTimeout(function pageSetTimeout() {
          self$$2.displayReadyPromise.resolve()
        })
      }
      var self$$2 = this;
      this.operatorList = operatorList;
      this.ensureFonts(fonts, function pageStartRenderingFromOperatorListEnsureFonts() {
        displayContinuation()
      })
    }, ensureFonts:function PDFPageProxy_ensureFonts(fonts$$1, callback$$30) {
      this.stats.time("Font Loading");
      var i$$24 = 0;
      var ii$$6 = fonts$$1.length;
      for(;i$$24 < ii$$6;i$$24++) {
        fonts$$1[i$$24] = this.objs.objs[fonts$$1[i$$24]].data
      }
      FontLoader.bind(fonts$$1, function pageEnsureFontsFontObjs(fontObjs) {
        this.stats.timeEnd("Font Loading");
        callback$$30.call(this)
      }.bind(this))
    }, display:function PDFPageProxy_display(gfx$$1, viewport, callback$$31) {
      function next$$1() {
        startIdx = gfx$$1.executeOperatorList(operatorList$$1, startIdx, next$$1, stepper);
        if(startIdx == length$$18) {
          gfx$$1.endDrawing();
          stats$$1.timeEnd("Rendering");
          stats$$1.timeEnd("Overall");
          if(callback$$31) {
            callback$$31()
          }
        }
      }
      var stats$$1 = this.stats;
      stats$$1.time("Rendering");
      gfx$$1.beginDrawing(viewport);
      var startIdx = 0;
      var length$$18 = this.operatorList.fnArray.length;
      var operatorList$$1 = this.operatorList;
      var stepper = null;
      if(PDFJS.pdfBug && StepperManager.enabled) {
        stepper = StepperManager.create(this.pageNumber - 1);
        stepper.init(operatorList$$1);
        stepper.nextBreakPoint = stepper.getNextBreakPoint()
      }
      var self$$3 = this;
      next$$1()
    }, getTextContent:function PDFPageProxy_getTextContent() {
      var promise$$8 = new PDFJS.Promise;
      var textContent = "page text";
      promise$$8.resolve(textContent);
      return promise$$8
    }, getOperationList:function PDFPageProxy_getOperationList() {
      var promise$$9 = new PDFJS.Promise;
      var operationList = {dependencyFontsID:null, operatorList:null};
      promise$$9.resolve(operationList);
      return promise$$9
    }, destroy:function PDFPageProxy_destroy() {
      this.destroyed = true;
      if(!this.renderInProgress) {
        delete this.operatorList;
        delete this.displayReadyPromise
      }
    }};
    return PDFPageProxy$$1
  }();
  var WorkerTransport = function WorkerTransportClosure() {
    function WorkerTransport$$1(promise$$10) {
      this.workerReadyPromise = promise$$10;
      this.objs = new PDFObjects;
      this.pageCache = [];
      this.pagePromises = [];
      this.fontsLoading = {};
      if(!globalScope.PDFJS.disableWorker && typeof PdfJS_window.Worker !== "undefined") {
        var workerSrc = PDFJS.workerSrc;
        if(typeof workerSrc === "undefined") {
          error$$3("No PDFJS.workerSrc specified")
        }
        try {
          var worker;
          if(PDFJS.isFirefoxExtension) {
            var bb = new MozBlobBuilder;
            bb.append(PdfJS_window.document.querySelector("#PDFJS_SCRIPT_TAG").textContent);
            var blobUrl = PdfJS_window.window.URL.createObjectURL(bb.getBlob());
            worker = new Worker(blobUrl)
          }else {
            worker = new Worker(workerSrc)
          }
          var messageHandler = new MessageHandler("main", worker);
          this.messageHandler = messageHandler;
          messageHandler.on("test", function transportTest(supportTypedArray) {
            if(supportTypedArray) {
              this.worker = worker;
              this.setupMessageHandler(messageHandler)
            }else {
              globalScope.PDFJS.disableWorker = true;
              this.setupFakeWorker()
            }
          }.bind(this));
          var testObj = new Uint8Array(1);
          messageHandler.send("test", testObj);
          return
        }catch(e$$14) {
          warn("The worker has been disabled.")
        }
      }
      globalScope.PDFJS.disableWorker = true;
      this.setupFakeWorker()
    }
    WorkerTransport$$1.prototype = {destroy:function WorkerTransport_destroy() {
      if(this.worker) {
        this.worker.terminate()
      }
      this.pageCache = [];
      this.pagePromises = []
    }, setupFakeWorker:function WorkerTransport_setupFakeWorker() {
      var fakeWorker = {postMessage:function WorkerTransport_postMessage(obj$$19) {
        fakeWorker.onmessage({data:obj$$19})
      }, terminate:function WorkerTransport_terminate() {
      }};
      var messageHandler$$1 = new MessageHandler("main", fakeWorker);
      this.setupMessageHandler(messageHandler$$1);
      WorkerMessageHandler.setup(messageHandler$$1)
    }, setupMessageHandler:function WorkerTransport_setupMessageHandler(messageHandler$$2) {
      this.messageHandler = messageHandler$$2;
      messageHandler$$2.on("GetDoc", function transportDoc(data$$34) {
        var pdfInfo$$1 = data$$34.pdfInfo;
        var pdfDocument = new PDFDocumentProxy(pdfInfo$$1, this);
        this.pdfDocument = pdfDocument;
        this.workerReadyPromise.resolve(pdfDocument)
      }, this);
      messageHandler$$2.on("GetPage", function transportPage(data$$35) {
        var pageInfo$$1 = data$$35.pageInfo;
        var page$$1 = new PDFPageProxy(pageInfo$$1, this);
        this.pageCache[pageInfo$$1.pageIndex] = page$$1;
        var promise$$11 = this.pagePromises[pageInfo$$1.pageIndex];
        promise$$11.resolve(page$$1)
      }, this);
      messageHandler$$2.on("GetAnnotations", function transportAnnotations(data$$36) {
        var annotations$$2 = data$$36.annotations;
        var promise$$12 = this.pageCache[data$$36.pageIndex].annotationsPromise;
        promise$$12.resolve(annotations$$2)
      }, this);
      messageHandler$$2.on("RenderPage", function transportRender(data$$37) {
        var page$$2 = this.pageCache[data$$37.pageIndex];
        var depFonts = data$$37.depFonts;
        page$$2.stats.timeEnd("Page Request");
        page$$2.startRenderingFromOperatorList(data$$37.operatorList, depFonts)
      }, this);
      messageHandler$$2.on("obj", function transportObj(data$$38) {
        var id$$2 = data$$38[0];
        var type$$28 = data$$38[1];
        if(this.objs.hasData(id$$2)) {
          return
        }
        switch(type$$28) {
          case "JpegStream":
            var imageData$$1 = data$$38[2];
            loadJpegStream(id$$2, imageData$$1, this.objs);
            break;
          case "Image":
            imageData$$1 = data$$38[2];
            this.objs.resolve(id$$2, imageData$$1);
            break;
          case "Font":
            var name$$48 = data$$38[2];
            var file = data$$38[3];
            var properties = data$$38[4];
            if(file) {
              var fontFileDict = new Dict;
              file = new Stream(file, 0, file.length, fontFileDict)
            }
            var font = new Font(name$$48, file, properties);
            this.objs.resolve(id$$2, font);
            break;
          default:
            error$$3("Got unkown object type " + type$$28)
        }
      }, this);
      messageHandler$$2.on("PageError", function transportError(data$$39) {
        var page$$3 = this.pageCache[data$$39.pageNum - 1];
        if(page$$3.displayReadyPromise) {
          page$$3.displayReadyPromise.reject(data$$39.error)
        }else {
          error$$3(data$$39.error)
        }
      }, this);
      messageHandler$$2.on("JpegDecode", function(data$$40, promise$$13) {
        var imageData$$2 = data$$40[0];
        var components = data$$40[1];
        if(components != 3 && components != 1) {
          error$$3("Only 3 component or 1 component can be returned")
        }
        var img$$3 = new Image;
        img$$3.onload = function messageHandler_onloadClosure() {
          var width$$11 = img$$3.width;
          var height$$10 = img$$3.height;
          var size$$4 = width$$11 * height$$10;
          var rgbaLength = size$$4 * 4;
          var buf = new Uint8Array(size$$4 * components);
          var tmpCanvas = createScratchCanvas(width$$11, height$$10);
          var tmpCtx = tmpCanvas.getContext("2d");
          tmpCtx.drawImage(img$$3, 0, 0);
          var data$$41 = tmpCtx.getImageData(0, 0, width$$11, height$$10).data;
          if(components == 3) {
            var i$$25 = 0;
            var j$$3 = 0;
            for(;i$$25 < rgbaLength;i$$25 += 4, j$$3 += 3) {
              buf[j$$3] = data$$41[i$$25];
              buf[j$$3 + 1] = data$$41[i$$25 + 1];
              buf[j$$3 + 2] = data$$41[i$$25 + 2]
            }
          }else {
            if(components == 1) {
              i$$25 = 0;
              j$$3 = 0;
              for(;i$$25 < rgbaLength;i$$25 += 4, j$$3++) {
                buf[j$$3] = data$$41[i$$25]
              }
            }
          }
          promise$$13.resolve({data:buf, width:width$$11, height:height$$10})
        }.bind(this);
        var src$$1 = "data:image/jpeg;base64," + PdfJS_window.window.btoa(imageData$$2);
        img$$3.src = src$$1
      })
    }, sendData:function WorkerTransport_sendData(data$$42) {
      this.messageHandler.send("GetDocRequest", data$$42)
    }, getPage:function WorkerTransport_getPage(pageNumber$$1, promise$$14) {
      var pageIndex = pageNumber$$1 - 1;
      if(pageIndex in this.pagePromises) {
        return this.pagePromises[pageIndex]
      }
      promise$$14 = new PDFJS.Promise("Page " + pageNumber$$1);
      this.pagePromises[pageIndex] = promise$$14;
      this.messageHandler.send("GetPageRequest", {pageIndex:pageIndex});
      return promise$$14
    }, getAnnotations:function WorkerTransport_getAnnotations(pageIndex$$1) {
      this.messageHandler.send("GetAnnotationsRequest", {pageIndex:pageIndex$$1})
    }};
    return WorkerTransport$$1
  }();
  JSCompiler_object_inline_FILL_280 = 0, JSCompiler_object_inline_STROKE_281 = 1, JSCompiler_object_inline_FILL_STROKE_282 = 2, JSCompiler_object_inline_INVISIBLE_283 = 3, JSCompiler_object_inline_FILL_ADD_TO_PATH_284 = 4, JSCompiler_object_inline_STROKE_ADD_TO_PATH_285 = 5, JSCompiler_object_inline_FILL_STROKE_ADD_TO_PATH_286 = 6, JSCompiler_object_inline_ADD_TO_PATH_287 = 7, true;
  var MIN_FONT_SIZE = 1;
  var CanvasExtraState = function CanvasExtraStateClosure() {
    function CanvasExtraState$$1(old$$1) {
      this.alphaIsShape = false;
      this.fontSize = 0;
      this.fontSizeScale = 1;
      this.textMatrix = IDENTITY_MATRIX;
      this.fontMatrix = IDENTITY_MATRIX;
      this.leading = 0;
      this.x = 0;
      this.y = 0;
      this.lineX = 0;
      this.lineY = 0;
      this.charSpacing = 0;
      this.wordSpacing = 0;
      this.textHScale = 1;
      this.textRenderingMode = JSCompiler_object_inline_FILL_280;
      this.fillColorSpace = new DeviceGrayCS;
      this.fillColorSpaceObj = null;
      this.strokeColorSpace = new DeviceGrayCS;
      this.strokeColorSpaceObj = null;
      this.fillColorObj = null;
      this.strokeColorObj = null;
      this.fillColor = "#000000";
      this.strokeColor = "#000000";
      this.fillAlpha = 1;
      this.strokeAlpha = 1;
      this.lineWidth = 1;
      this.old = old$$1
    }
    CanvasExtraState$$1.prototype = {clone:function CanvasExtraState_clone() {
      return Object.create(this)
    }, setCurrentPoint:function CanvasExtraState_setCurrentPoint(x$$65, y$$48) {
      this.x = x$$65;
      this.y = y$$48
    }};
    return CanvasExtraState$$1
  }();
  var CanvasGraphics = function CanvasGraphicsClosure() {
    function CanvasGraphics$$1(canvasCtx, objs$$1, textLayer) {
      this.ctx = canvasCtx;
      this.current = new CanvasExtraState;
      this.stateStack = [];
      this.pendingClip = null;
      this.res = null;
      this.xobjs = null;
      this.objs = objs$$1;
      this.textLayer = textLayer;
      if(canvasCtx) {
        addContextCurrentTransform(canvasCtx)
      }
    }
    var kExecutionTime = 15;
    var LINE_CAP_STYLES = ["butt", "round", "square"];
    var LINE_JOIN_STYLES = ["miter", "round", "bevel"];
    var NORMAL_CLIP = {};
    var EO_CLIP = {};
    CanvasGraphics$$1.prototype = {slowCommands:{"stroke":true, "closeStroke":true, "fill":true, "eoFill":true, "fillStroke":true, "eoFillStroke":true, "closeFillStroke":true, "closeEOFillStroke":true, "showText":true, "showSpacedText":true, "setStrokeColorSpace":true, "setFillColorSpace":true, "setStrokeColor":true, "setStrokeColorN":true, "setFillColor":true, "setFillColorN":true, "setStrokeGray":true, "setFillGray":true, "setStrokeRGBColor":true, "setFillRGBColor":true, "setStrokeCMYKColor":true, 
    "setFillCMYKColor":true, "paintJpegXObject":true, "paintImageXObject":true, "paintImageMaskXObject":true, "shadingFill":true}, beginDrawing:function CanvasGraphics_beginDrawing(viewport$$1) {
      var transform = viewport$$1.transform;
      this.ctx.save();
      this.ctx.transform.apply(this.ctx, transform);
      if(this.textLayer) {
        this.textLayer.beginLayout()
      }
    }, executeOperatorList:function CanvasGraphics_executeOperatorList(operatorList$$2, executionStartIdx, continueCallback, stepper$$1) {
      var argsArray = operatorList$$2.argsArray;
      var fnArray = operatorList$$2.fnArray;
      var i$$26 = executionStartIdx || 0;
      var argsArrayLen = argsArray.length;
      if(argsArrayLen == i$$26) {
        return i$$26
      }
      var executionEndIdx;
      var endTime = Date.now() + kExecutionTime;
      var objs$$2 = this.objs;
      var fnName;
      var slowCommands = this.slowCommands;
      for(;true;) {
        if(stepper$$1 && i$$26 === stepper$$1.nextBreakPoint) {
          stepper$$1.breakIt(i$$26, continueCallback);
          return i$$26
        }
        fnName = fnArray[i$$26];
        if(fnName !== "dependency") {
          this[fnName].apply(this, argsArray[i$$26])
        }else {
          var deps = argsArray[i$$26];
          var n$$9 = 0;
          var nn = deps.length;
          for(;n$$9 < nn;n$$9++) {
            var depObjId = deps[n$$9];
            if(!objs$$2.isResolved(depObjId)) {
              objs$$2.get(depObjId, continueCallback);
              return i$$26
            }
          }
        }
        i$$26++;
        if(i$$26 == argsArrayLen) {
          return i$$26
        }
        if(continueCallback && slowCommands[fnName] && Date.now() > endTime) {
          PdfJS_window.setTimeout(continueCallback, 0);
          return i$$26
        }
      }
    }, endDrawing:function CanvasGraphics_endDrawing() {
      this.ctx.restore();
      if(this.textLayer) {
        this.textLayer.endLayout()
      }
    }, setLineWidth:function CanvasGraphics_setLineWidth(width$$12) {
      this.current.lineWidth = width$$12;
      this.ctx.lineWidth = width$$12
    }, setLineCap:function CanvasGraphics_setLineCap(style) {
      this.ctx.lineCap = LINE_CAP_STYLES[style]
    }, setLineJoin:function CanvasGraphics_setLineJoin(style$$1) {
      this.ctx.lineJoin = LINE_JOIN_STYLES[style$$1]
    }, setMiterLimit:function CanvasGraphics_setMiterLimit(limit$$1) {
      this.ctx.miterLimit = limit$$1
    }, setDash:function CanvasGraphics_setDash(dashArray, dashPhase) {
      this.ctx.mozDash = dashArray;
      this.ctx.mozDashOffset = dashPhase;
      this.ctx.webkitLineDash = dashArray;
      this.ctx.webkitLineDashOffset = dashPhase
    }, setRenderingIntent:function CanvasGraphics_setRenderingIntent(intent) {
      TODO("set rendering intent: " + intent)
    }, setFlatness:function CanvasGraphics_setFlatness(flatness) {
      TODO("set flatness: " + flatness)
    }, setGState:function CanvasGraphics_setGState(states) {
      var i$$27 = 0;
      var ii$$7 = states.length;
      for(;i$$27 < ii$$7;i$$27++) {
        var state = states[i$$27];
        var key$$17 = state[0];
        var value$$36 = state[1];
        switch(key$$17) {
          case "LW":
            this.setLineWidth(value$$36);
            break;
          case "LC":
            this.setLineCap(value$$36);
            break;
          case "LJ":
            this.setLineJoin(value$$36);
            break;
          case "ML":
            this.setMiterLimit(value$$36);
            break;
          case "D":
            this.setDash(value$$36[0], value$$36[1]);
            break;
          case "RI":
            this.setRenderingIntent(value$$36);
            break;
          case "FL":
            this.setFlatness(value$$36);
            break;
          case "Font":
            this.setFont(state[1], state[2]);
            break;
          case "CA":
            this.current.strokeAlpha = state[1];
            break;
          case "ca":
            this.current.fillAlpha = state[1];
            this.ctx.globalAlpha = state[1]
        }
      }
    }, save:function CanvasGraphics_save() {
      this.ctx.save();
      var old$$2 = this.current;
      this.stateStack.push(old$$2);
      this.current = old$$2.clone()
    }, restore:function CanvasGraphics_restore() {
      var prev$$1 = this.stateStack.pop();
      if(prev$$1) {
        this.current = prev$$1;
        this.ctx.restore()
      }
    }, transform:function CanvasGraphics_transform(a$$7, b$$7, c$$4, d$$5, e$$15, f$$3) {
      this.ctx.transform(a$$7, b$$7, c$$4, d$$5, e$$15, f$$3)
    }, moveTo:function CanvasGraphics_moveTo(x$$66, y$$49) {
      this.ctx.moveTo(x$$66, y$$49);
      this.current.setCurrentPoint(x$$66, y$$49)
    }, lineTo:function CanvasGraphics_lineTo(x$$67, y$$50) {
      this.ctx.lineTo(x$$67, y$$50);
      this.current.setCurrentPoint(x$$67, y$$50)
    }, curveTo:function CanvasGraphics_curveTo(x1$$4, y1$$3, x2$$2, y2$$1, x3$$1, y3) {
      this.ctx.bezierCurveTo(x1$$4, y1$$3, x2$$2, y2$$1, x3$$1, y3);
      this.current.setCurrentPoint(x3$$1, y3)
    }, curveTo2:function CanvasGraphics_curveTo2(x2$$3, y2$$2, x3$$2, y3$$1) {
      var current = this.current;
      this.ctx.bezierCurveTo(current.x, current.y, x2$$3, y2$$2, x3$$2, y3$$1);
      current.setCurrentPoint(x3$$2, y3$$1)
    }, curveTo3:function CanvasGraphics_curveTo3(x1$$5, y1$$4, x3$$3, y3$$2) {
      this.curveTo(x1$$5, y1$$4, x3$$3, y3$$2, x3$$3, y3$$2);
      this.current.setCurrentPoint(x3$$3, y3$$2)
    }, closePath:function CanvasGraphics_closePath() {
      this.ctx.closePath()
    }, rectangle:function CanvasGraphics_rectangle(x$$68, y$$51, width$$13, height$$11) {
      this.ctx.rect(x$$68, y$$51, width$$13, height$$11)
    }, stroke:function CanvasGraphics_stroke(consumePath) {
      consumePath = typeof consumePath !== "undefined" ? consumePath : true;
      var ctx$$2 = this.ctx;
      var strokeColor = this.current.strokeColor;
      if(this.current.lineWidth === 0) {
        ctx$$2.lineWidth = this.getSinglePixelWidth()
      }
      ctx$$2.globalAlpha = this.current.strokeAlpha;
      if(strokeColor && strokeColor.hasOwnProperty("type") && strokeColor.type === "Pattern") {
        ctx$$2.save();
        ctx$$2.strokeStyle = strokeColor.getPattern(ctx$$2);
        ctx$$2.stroke();
        ctx$$2.restore()
      }else {
        ctx$$2.stroke()
      }
      if(consumePath) {
        this.consumePath()
      }
      ctx$$2.globalAlpha = this.current.fillAlpha
    }, closeStroke:function CanvasGraphics_closeStroke() {
      this.closePath();
      this.stroke()
    }, fill:function CanvasGraphics_fill(consumePath$$1) {
      consumePath$$1 = typeof consumePath$$1 !== "undefined" ? consumePath$$1 : true;
      var ctx$$3 = this.ctx;
      var fillColor = this.current.fillColor;
      if(fillColor && fillColor.hasOwnProperty("type") && fillColor.type === "Pattern") {
        ctx$$3.save();
        ctx$$3.fillStyle = fillColor.getPattern(ctx$$3);
        ctx$$3.fill();
        ctx$$3.restore()
      }else {
        ctx$$3.fill()
      }
      if(consumePath$$1) {
        this.consumePath()
      }
    }, eoFill:function CanvasGraphics_eoFill() {
      var savedFillRule = this.setEOFillRule();
      this.fill();
      this.restoreFillRule(savedFillRule)
    }, fillStroke:function CanvasGraphics_fillStroke() {
      this.fill(false);
      this.stroke(false);
      this.consumePath()
    }, eoFillStroke:function CanvasGraphics_eoFillStroke() {
      var savedFillRule$$1 = this.setEOFillRule();
      this.fillStroke();
      this.restoreFillRule(savedFillRule$$1)
    }, closeFillStroke:function CanvasGraphics_closeFillStroke() {
      this.closePath();
      this.fillStroke()
    }, closeEOFillStroke:function CanvasGraphics_closeEOFillStroke() {
      var savedFillRule$$2 = this.setEOFillRule();
      this.closePath();
      this.fillStroke();
      this.restoreFillRule(savedFillRule$$2)
    }, endPath:function CanvasGraphics_endPath() {
      this.consumePath()
    }, clip:function CanvasGraphics_clip() {
      this.pendingClip = NORMAL_CLIP
    }, eoClip:function CanvasGraphics_eoClip() {
      this.pendingClip = EO_CLIP
    }, beginText:function CanvasGraphics_beginText() {
      this.current.textMatrix = IDENTITY_MATRIX;
      this.current.x = this.current.lineX = 0;
      this.current.y = this.current.lineY = 0
    }, endText:function CanvasGraphics_endText() {
    }, setCharSpacing:function CanvasGraphics_setCharSpacing(spacing) {
      this.current.charSpacing = spacing
    }, setWordSpacing:function CanvasGraphics_setWordSpacing(spacing$$1) {
      this.current.wordSpacing = spacing$$1
    }, setHScale:function CanvasGraphics_setHScale(scale$$2) {
      this.current.textHScale = scale$$2 / 100
    }, setLeading:function CanvasGraphics_setLeading(leading) {
      this.current.leading = -leading
    }, setFont:function CanvasGraphics_setFont(fontRefName, size$$5) {
      var fontObj = this.objs.get(fontRefName);
      var current$$1 = this.current;
      if(!fontObj) {
        error$$3("Can't find font for " + fontRefName)
      }
      if(fontObj.fontMatrix) {
        current$$1.fontMatrix = fontObj.fontMatrix.slice(0)
      }else {
        current$$1.fontMatrix = IDENTITY_MATRIX.slice(0)
      }
      if(current$$1.fontMatrix[0] === 0 || current$$1.fontMatrix[3] === 0) {
        warn("Invalid font matrix for font " + fontRefName)
      }
      if(size$$5 < 0) {
        size$$5 = -size$$5;
        current$$1.fontMatrix[0] *= -1;
        current$$1.fontMatrix[3] *= -1
      }
      this.current.font = fontObj;
      this.current.fontSize = size$$5;
      if(fontObj.coded) {
        return
      }
      var name$$49 = fontObj.loadedName || "sans-serif";
      var bold = fontObj.black ? fontObj.bold ? "bolder" : "bold" : fontObj.bold ? "bold" : "normal";
      var italic = fontObj.italic ? "italic" : "normal";
      var serif = fontObj.isSerifFont ? "serif" : "sans-serif";
      var typeface = '"' + name$$49 + '", ' + serif;
      var browserFontSize = size$$5 >= MIN_FONT_SIZE ? size$$5 : MIN_FONT_SIZE;
      this.current.fontSizeScale = browserFontSize != MIN_FONT_SIZE ? 1 : size$$5 / MIN_FONT_SIZE;
      var rule$$2 = italic + " " + bold + " " + browserFontSize + "px " + typeface;
      this.ctx.font = rule$$2
    }, setTextRenderingMode:function CanvasGraphics_setTextRenderingMode(mode$$8) {
      if(mode$$8 >= JSCompiler_object_inline_FILL_ADD_TO_PATH_284) {
        TODO("unsupported text rendering mode: " + mode$$8)
      }
      this.current.textRenderingMode = mode$$8
    }, setTextRise:function CanvasGraphics_setTextRise(rise) {
      TODO("text rise: " + rise)
    }, moveText:function CanvasGraphics_moveText(x$$69, y$$52) {
      this.current.x = this.current.lineX += x$$69;
      this.current.y = this.current.lineY += y$$52
    }, setLeadingMoveText:function CanvasGraphics_setLeadingMoveText(x$$70, y$$53) {
      this.setLeading(-y$$53);
      this.moveText(x$$70, y$$53)
    }, setTextMatrix:function CanvasGraphics_setTextMatrix(a$$8, b$$8, c$$5, d$$6, e$$16, f$$4) {
      this.current.textMatrix = [a$$8, b$$8, c$$5, d$$6, e$$16, f$$4];
      this.current.x = this.current.lineX = 0;
      this.current.y = this.current.lineY = 0
    }, nextLine:function CanvasGraphics_nextLine() {
      this.moveText(0, this.current.leading)
    }, applyTextTransforms:function CanvasGraphics_applyTextTransforms() {
      var ctx$$4 = this.ctx;
      var current$$2 = this.current;
      var textHScale = current$$2.textHScale;
      var fontMatrix = current$$2.fontMatrix || IDENTITY_MATRIX;
      ctx$$4.transform.apply(ctx$$4, current$$2.textMatrix);
      ctx$$4.scale(1, -1);
      ctx$$4.translate(current$$2.x, -1 * current$$2.y);
      ctx$$4.transform.apply(ctx$$4, fontMatrix);
      ctx$$4.scale(textHScale, 1)
    }, getTextGeometry:function CanvasGraphics_getTextGeometry() {
      var geometry = {};
      var ctx$$5 = this.ctx;
      var font$$1 = this.current.font;
      var ctxMatrix = ctx$$5.mozCurrentTransform;
      if(ctxMatrix) {
        var bl = Util.applyTransform([0, 0], ctxMatrix);
        var tr = Util.applyTransform([1, 1], ctxMatrix);
        geometry.x = bl[0];
        geometry.y = bl[1];
        geometry.hScale = tr[0] - bl[0];
        geometry.vScale = tr[1] - bl[1]
      }
      geometry.spaceWidth = font$$1.spaceWidth;
      return geometry
    }, showText:function CanvasGraphics_showText(str$$12, skipTextSelection) {
      var ctx$$6 = this.ctx;
      var current$$3 = this.current;
      var font$$2 = current$$3.font;
      var glyphs = font$$2.charsToGlyphs(str$$12);
      var fontSize = current$$3.fontSize;
      var fontSizeScale = current$$3.fontSizeScale;
      var charSpacing = current$$3.charSpacing;
      var wordSpacing = current$$3.wordSpacing;
      var textHScale$$1 = current$$3.textHScale;
      var fontMatrix$$1 = current$$3.fontMatrix || IDENTITY_MATRIX;
      var textHScale2 = textHScale$$1 * fontMatrix$$1[0];
      var glyphsLength = glyphs.length;
      var textLayer$$1 = this.textLayer;
      var text$$7 = {str:"", length:0, canvasWidth:0, geom:{}};
      var textSelection = textLayer$$1 && !skipTextSelection ? true : false;
      var textRenderingMode = current$$3.textRenderingMode;
      if(font$$2.coded) {
        ctx$$6.save();
        ctx$$6.transform.apply(ctx$$6, current$$3.textMatrix);
        ctx$$6.translate(current$$3.x, current$$3.y);
        ctx$$6.scale(textHScale$$1, 1);
        if(textSelection) {
          this.save();
          ctx$$6.scale(1, -1);
          text$$7.geom = this.getTextGeometry();
          this.restore()
        }
        var i$$28 = 0;
        for(;i$$28 < glyphsLength;++i$$28) {
          var glyph = glyphs[i$$28];
          if(glyph === null) {
            this.ctx.translate(wordSpacing, 0);
            continue
          }
          this.save();
          ctx$$6.scale(fontSize, fontSize);
          ctx$$6.transform.apply(ctx$$6, fontMatrix$$1);
          this.executeOperatorList(glyph.operatorList);
          this.restore();
          var transformed = Util.applyTransform([glyph.width, 0], fontMatrix$$1);
          var width$$14 = transformed[0] * fontSize + Util.sign(current$$3.fontMatrix[0]) * charSpacing;
          ctx$$6.translate(width$$14, 0);
          current$$3.x += width$$14 * textHScale$$1;
          text$$7.str += glyph.unicode;
          text$$7.length++;
          text$$7.canvasWidth += width$$14
        }
        ctx$$6.restore()
      }else {
        ctx$$6.save();
        this.applyTextTransforms();
        var lineWidth = current$$3.lineWidth;
        var scale$$3 = Math.abs(current$$3.textMatrix[0] * fontMatrix$$1[0]);
        if(scale$$3 == 0 || lineWidth == 0) {
          lineWidth = this.getSinglePixelWidth()
        }else {
          lineWidth /= scale$$3
        }
        if(textSelection) {
          text$$7.geom = this.getTextGeometry()
        }
        if(fontSizeScale != 1) {
          ctx$$6.scale(fontSizeScale, fontSizeScale);
          lineWidth /= fontSizeScale
        }
        ctx$$6.lineWidth = lineWidth;
        var x$$71 = 0;
        i$$28 = 0;
        for(;i$$28 < glyphsLength;++i$$28) {
          glyph = glyphs[i$$28];
          if(glyph === null) {
            x$$71 += Util.sign(current$$3.fontMatrix[0]) * wordSpacing;
            continue
          }
          var character = glyph.fontChar;
          var charWidth = glyph.width * fontSize * 0.001 + Util.sign(current$$3.fontMatrix[0]) * charSpacing;
          if(!glyph.disabled) {
            var scaledX = x$$71 / fontSizeScale;
            switch(textRenderingMode) {
              default:
              ;
              case JSCompiler_object_inline_FILL_280:
              ;
              case JSCompiler_object_inline_FILL_ADD_TO_PATH_284:
                ctx$$6.fillText(character, scaledX, 0);
                break;
              case JSCompiler_object_inline_STROKE_281:
              ;
              case JSCompiler_object_inline_STROKE_ADD_TO_PATH_285:
                ctx$$6.strokeText(character, scaledX, 0);
                break;
              case JSCompiler_object_inline_FILL_STROKE_282:
              ;
              case JSCompiler_object_inline_FILL_STROKE_ADD_TO_PATH_286:
                ctx$$6.fillText(character, scaledX, 0);
                ctx$$6.strokeText(character, scaledX, 0);
              case JSCompiler_object_inline_INVISIBLE_283:
            }
          }
          x$$71 += charWidth;
          var glyphUnicode = glyph.unicode === " " ? "\u00a0" : glyph.unicode;
          var glyphUnicodeLength = glyphUnicode.length;
          var JSCompiler_temp$$8;
          if(JSCompiler_temp$$8 = glyphUnicodeLength > 1) {
            JSCompiler_inline_label_isRTLRangeFor_20: {
              var value$$inline_18 = glyphUnicode.charCodeAt(0);
              var range$$inline_19 = UnicodeRanges[13];
              if(value$$inline_18 >= range$$inline_19.begin && value$$inline_18 < range$$inline_19.end) {
                JSCompiler_temp$$8 = true;
                break JSCompiler_inline_label_isRTLRangeFor_20
              }
              range$$inline_19 = UnicodeRanges[11];
              if(value$$inline_18 >= range$$inline_19.begin && value$$inline_18 < range$$inline_19.end) {
                JSCompiler_temp$$8 = true;
                break JSCompiler_inline_label_isRTLRangeFor_20
              }
              JSCompiler_temp$$8 = false
            }
          }
          if(JSCompiler_temp$$8) {
            var ii$$8 = glyphUnicodeLength - 1;
            for(;ii$$8 >= 0;ii$$8--) {
              text$$7.str += glyphUnicode[ii$$8]
            }
          }else {
            text$$7.str += glyphUnicode
          }
          text$$7.length += glyphUnicodeLength;
          text$$7.canvasWidth += charWidth
        }
        current$$3.x += x$$71 * textHScale2;
        ctx$$6.restore()
      }
      if(textSelection) {
        this.textLayer.appendText(text$$7, font$$2.loadedName, fontSize)
      }
      return text$$7
    }, showSpacedText:function CanvasGraphics_showSpacedText(arr$$10) {
      var ctx$$7 = this.ctx;
      var current$$4 = this.current;
      var font$$3 = current$$4.font;
      var fontSize$$1 = current$$4.fontSize;
      var textHScale$$2 = current$$4.textHScale;
      if(!font$$3.coded) {
        textHScale$$2 *= (current$$4.fontMatrix || IDENTITY_MATRIX)[0]
      }
      var arrLength = arr$$10.length;
      var textLayer$$2 = this.textLayer;
      var text$$8 = {str:"", length:0, canvasWidth:0, geom:{}};
      var textSelection$$1 = textLayer$$2 ? true : false;
      if(textSelection$$1) {
        ctx$$7.save();
        if(font$$3.coded) {
          ctx$$7.transform.apply(ctx$$7, current$$4.textMatrix);
          ctx$$7.scale(1, -1);
          ctx$$7.translate(current$$4.x, -1 * current$$4.y);
          ctx$$7.scale(textHScale$$2, 1)
        }else {
          this.applyTextTransforms()
        }
        text$$8.geom = this.getTextGeometry();
        ctx$$7.restore()
      }
      var i$$29 = 0;
      for(;i$$29 < arrLength;++i$$29) {
        var e$$17 = arr$$10[i$$29];
        if(isNum(e$$17)) {
          var spacingLength = -e$$17 * 0.001 * fontSize$$1 * textHScale$$2;
          current$$4.x += spacingLength;
          if(textSelection$$1) {
            text$$8.canvasWidth += spacingLength;
            if(e$$17 < 0 && text$$8.geom.spaceWidth > 0) {
              var numFakeSpaces = Math.round(-e$$17 / text$$8.geom.spaceWidth);
              if(numFakeSpaces > 0) {
                text$$8.str += "\u00a0";
                text$$8.length++
              }
            }
          }
        }else {
          if(isString(e$$17)) {
            var shownText = this.showText(e$$17, true);
            if(textSelection$$1) {
              if(shownText.str === " ") {
                text$$8.str += "\u00a0"
              }else {
                text$$8.str += shownText.str
              }
              text$$8.canvasWidth += shownText.canvasWidth;
              text$$8.length += shownText.length
            }
          }else {
            error$$3("Malformed PDF: " + ("TJ array element " + e$$17 + " is not string or num"))
          }
        }
      }
      if(textSelection$$1) {
        this.textLayer.appendText(text$$8, font$$3.loadedName, fontSize$$1)
      }
    }, nextLineShowText:function CanvasGraphics_nextLineShowText(text$$9) {
      this.nextLine();
      this.showText(text$$9)
    }, nextLineSetSpacingShowText:function CanvasGraphics_nextLineSetSpacingShowText(wordSpacing$$1, charSpacing$$1, text$$10) {
      this.setWordSpacing(wordSpacing$$1);
      this.setCharSpacing(charSpacing$$1);
      this.nextLineShowText(text$$10)
    }, setCharWidth:function CanvasGraphics_setCharWidth(xWidth, yWidth) {
    }, setCharWidthAndBounds:function CanvasGraphics_setCharWidthAndBounds(xWidth$$1, yWidth$$1, llx, lly, urx, ury) {
      this.rectangle(llx, lly, urx - llx, ury - lly);
      this.clip();
      this.endPath()
    }, setStrokeColorSpace:function CanvasGraphics_setStrokeColorSpace(raw) {
      this.current.strokeColorSpace = ColorSpace.fromIR(raw)
    }, setFillColorSpace:function CanvasGraphics_setFillColorSpace(raw$$1) {
      this.current.fillColorSpace = ColorSpace.fromIR(raw$$1)
    }, setStrokeColor:function CanvasGraphics_setStrokeColor() {
      var cs = this.current.strokeColorSpace;
      var rgbColor = cs.getRgb(arguments);
      var color$$2 = Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);
      this.ctx.strokeStyle = color$$2;
      this.current.strokeColor = color$$2
    }, getColorN_Pattern:function CanvasGraphics_getColorN_Pattern(IR, cs$$1) {
      if(IR[0] == "TilingPattern") {
        var args = IR[1];
        var base$$1 = cs$$1.base;
        var color$$3;
        if(base$$1) {
          var baseComps = base$$1.numComps;
          color$$3 = [];
          var i$$30 = 0;
          for(;i$$30 < baseComps;++i$$30) {
            color$$3.push(args[i$$30])
          }
          color$$3 = base$$1.getRgb(color$$3)
        }
        var pattern$$1 = new TilingPattern(IR, color$$3, this.ctx, this.objs)
      }else {
        if(IR[0] == "RadialAxial" || IR[0] == "Dummy") {
          pattern$$1 = Pattern.shadingFromIR(IR)
        }else {
          error$$3("Unkown IR type " + IR[0])
        }
      }
      return pattern$$1
    }, setStrokeColorN:function CanvasGraphics_setStrokeColorN() {
      var cs$$2 = this.current.strokeColorSpace;
      if(cs$$2.name == "Pattern") {
        this.current.strokeColor = this.getColorN_Pattern(arguments, cs$$2)
      }else {
        this.setStrokeColor.apply(this, arguments)
      }
    }, setFillColor:function CanvasGraphics_setFillColor() {
      var cs$$3 = this.current.fillColorSpace;
      var rgbColor$$1 = cs$$3.getRgb(arguments);
      var color$$4 = Util.makeCssRgb(rgbColor$$1[0], rgbColor$$1[1], rgbColor$$1[2]);
      this.ctx.fillStyle = color$$4;
      this.current.fillColor = color$$4
    }, setFillColorN:function CanvasGraphics_setFillColorN() {
      var cs$$4 = this.current.fillColorSpace;
      if(cs$$4.name == "Pattern") {
        this.current.fillColor = this.getColorN_Pattern(arguments, cs$$4)
      }else {
        this.setFillColor.apply(this, arguments)
      }
    }, setStrokeGray:function CanvasGraphics_setStrokeGray(gray) {
      if(!(this.current.strokeColorSpace instanceof DeviceGrayCS)) {
        this.current.strokeColorSpace = new DeviceGrayCS
      }
      var color$$5 = Util.makeCssRgb(gray, gray, gray);
      this.ctx.strokeStyle = color$$5;
      this.current.strokeColor = color$$5
    }, setFillGray:function CanvasGraphics_setFillGray(gray$$1) {
      if(!(this.current.fillColorSpace instanceof DeviceGrayCS)) {
        this.current.fillColorSpace = new DeviceGrayCS
      }
      var color$$6 = Util.makeCssRgb(gray$$1, gray$$1, gray$$1);
      this.ctx.fillStyle = color$$6;
      this.current.fillColor = color$$6
    }, setStrokeRGBColor:function CanvasGraphics_setStrokeRGBColor(r$$3, g$$2, b$$9) {
      if(!(this.current.strokeColorSpace instanceof DeviceRgbCS)) {
        this.current.strokeColorSpace = new DeviceRgbCS
      }
      var color$$7 = Util.makeCssRgb(r$$3, g$$2, b$$9);
      this.ctx.strokeStyle = color$$7;
      this.current.strokeColor = color$$7
    }, setFillRGBColor:function CanvasGraphics_setFillRGBColor(r$$4, g$$3, b$$10) {
      if(!(this.current.fillColorSpace instanceof DeviceRgbCS)) {
        this.current.fillColorSpace = new DeviceRgbCS
      }
      var color$$8 = Util.makeCssRgb(r$$4, g$$3, b$$10);
      this.ctx.fillStyle = color$$8;
      this.current.fillColor = color$$8
    }, setStrokeCMYKColor:function CanvasGraphics_setStrokeCMYKColor(c$$6, m$$12, y$$54, k$$1) {
      if(!(this.current.strokeColorSpace instanceof DeviceCmykCS)) {
        this.current.strokeColorSpace = new DeviceCmykCS
      }
      var color$$9 = Util.makeCssCmyk(c$$6, m$$12, y$$54, k$$1);
      this.ctx.strokeStyle = color$$9;
      this.current.strokeColor = color$$9
    }, setFillCMYKColor:function CanvasGraphics_setFillCMYKColor(c$$7, m$$13, y$$55, k$$2) {
      if(!(this.current.fillColorSpace instanceof DeviceCmykCS)) {
        this.current.fillColorSpace = new DeviceCmykCS
      }
      var color$$10 = Util.makeCssCmyk(c$$7, m$$13, y$$55, k$$2);
      this.ctx.fillStyle = color$$10;
      this.current.fillColor = color$$10
    }, shadingFill:function CanvasGraphics_shadingFill(patternIR) {
      var ctx$$8 = this.ctx;
      this.save();
      var pattern$$2 = Pattern.shadingFromIR(patternIR);
      ctx$$8.fillStyle = pattern$$2.getPattern(ctx$$8);
      var inv = ctx$$8.mozCurrentTransformInverse;
      if(inv) {
        var canvas$$3 = ctx$$8.canvas;
        var width$$15 = canvas$$3.width;
        var height$$12 = canvas$$3.height;
        var bl$$1 = Util.applyTransform([0, 0], inv);
        var br$$1 = Util.applyTransform([0, height$$12], inv);
        var ul = Util.applyTransform([width$$15, 0], inv);
        var ur = Util.applyTransform([width$$15, height$$12], inv);
        var x0$$2 = Math.min(bl$$1[0], br$$1[0], ul[0], ur[0]);
        var y0$$2 = Math.min(bl$$1[1], br$$1[1], ul[1], ur[1]);
        var x1$$6 = Math.max(bl$$1[0], br$$1[0], ul[0], ur[0]);
        var y1$$5 = Math.max(bl$$1[1], br$$1[1], ul[1], ur[1]);
        this.ctx.fillRect(x0$$2, y0$$2, x1$$6 - x0$$2, y1$$5 - y0$$2)
      }else {
        this.ctx.fillRect(-1E10, -1E10, 2E10, 2E10)
      }
      this.restore()
    }, beginInlineImage:function CanvasGraphics_beginInlineImage() {
      error$$3("Should not call beginInlineImage")
    }, beginImageData:function CanvasGraphics_beginImageData() {
      error$$3("Should not call beginImageData")
    }, paintFormXObjectBegin:function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {
      this.save();
      if(matrix && isArray(matrix) && 6 == matrix.length) {
        this.transform.apply(this, matrix)
      }
      if(bbox && isArray(bbox) && 4 == bbox.length) {
        var width$$16 = bbox[2] - bbox[0];
        var height$$13 = bbox[3] - bbox[1];
        this.rectangle(bbox[0], bbox[1], width$$16, height$$13);
        this.clip();
        this.endPath()
      }
    }, paintFormXObjectEnd:function CanvasGraphics_paintFormXObjectEnd() {
      this.restore()
    }, paintJpegXObject:function CanvasGraphics_paintJpegXObject(objId, w$$11, h$$9) {
      var domImage = this.objs.get(objId);
      if(!domImage) {
        error$$3("Dependent image isn't ready yet")
      }
      this.save();
      var ctx$$9 = this.ctx;
      ctx$$9.scale(1 / w$$11, -1 / h$$9);
      ctx$$9.drawImage(domImage, 0, 0, domImage.width, domImage.height, 0, -h$$9, w$$11, h$$9);
      this.restore()
    }, paintImageMaskXObject:function CanvasGraphics_paintImageMaskXObject(imgArray, inverseDecode, width$$17, height$$14) {
      this.save();
      var ctx$$10 = this.ctx;
      var w$$12 = width$$17;
      var h$$10 = height$$14;
      ctx$$10.scale(1 / w$$12, -1 / h$$10);
      var tmpCanvas$$1 = createScratchCanvas(w$$12, h$$10);
      var tmpCtx$$1 = tmpCanvas$$1.getContext("2d");
      var fillColor$$1 = this.current.fillColor;
      tmpCtx$$1.fillStyle = fillColor$$1 && fillColor$$1.hasOwnProperty("type") && fillColor$$1.type === "Pattern" ? fillColor$$1.getPattern(tmpCtx$$1) : fillColor$$1;
      tmpCtx$$1.fillRect(0, 0, w$$12, h$$10);
      var imgData = tmpCtx$$1.getImageData(0, 0, w$$12, h$$10);
      var pixels$$1 = imgData.data;
      var buffer$$inline_23 = pixels$$1;
      var inverseDecode$$inline_24 = inverseDecode;
      var imgArrayPos$$inline_25 = 0;
      var i$$inline_26;
      var j$$inline_27;
      var mask$$inline_28;
      var buf$$inline_29;
      var bufferPos$$inline_30 = 3;
      i$$inline_26 = 0;
      for(;i$$inline_26 < height$$14;i$$inline_26++) {
        mask$$inline_28 = 0;
        j$$inline_27 = 0;
        for(;j$$inline_27 < width$$17;j$$inline_27++) {
          if(!mask$$inline_28) {
            buf$$inline_29 = imgArray[imgArrayPos$$inline_25++];
            mask$$inline_28 = 128
          }
          if(!(buf$$inline_29 & mask$$inline_28) == inverseDecode$$inline_24) {
            buffer$$inline_23[bufferPos$$inline_30] = 0
          }
          bufferPos$$inline_30 += 4;
          mask$$inline_28 >>= 1
        }
      }
      tmpCtx$$1.putImageData(imgData, 0, 0);
      ctx$$10.drawImage(tmpCanvas$$1, 0, -h$$10);
      this.restore()
    }, paintImageXObject:function CanvasGraphics_paintImageXObject(objId$$1) {
      var imgData$$1 = this.objs.get(objId$$1);
      if(!imgData$$1) {
        error$$3("Dependent image isn't ready yet")
      }
      this.save();
      var ctx$$11 = this.ctx;
      var w$$13 = imgData$$1.width;
      var h$$11 = imgData$$1.height;
      ctx$$11.scale(1 / w$$13, -1 / h$$11);
      var tmpCanvas$$2 = createScratchCanvas(w$$13, h$$11);
      var tmpCtx$$2 = tmpCanvas$$2.getContext("2d");
      this.putBinaryImageData(tmpCtx$$2, imgData$$1, w$$13, h$$11);
      ctx$$11.drawImage(tmpCanvas$$2, 0, -h$$11);
      this.restore()
    }, putBinaryImageData:function CanvasGraphics_putBinaryImageData() {
    }, markPoint:function CanvasGraphics_markPoint(tag) {
      TODO("Marked content")
    }, markPointProps:function CanvasGraphics_markPointProps(tag$$1, properties$$1) {
      TODO("Marked content")
    }, beginMarkedContent:function CanvasGraphics_beginMarkedContent(tag$$2) {
      TODO("Marked content")
    }, beginMarkedContentProps:function CanvasGraphics_beginMarkedContentProps(tag$$3, properties$$2) {
      TODO("Marked content")
    }, endMarkedContent:function CanvasGraphics_endMarkedContent() {
      TODO("Marked content")
    }, beginCompat:function CanvasGraphics_beginCompat() {
      TODO("ignore undefined operators (should we do that anyway?)")
    }, endCompat:function CanvasGraphics_endCompat() {
      TODO("stop ignoring undefined operators")
    }, consumePath:function CanvasGraphics_consumePath() {
      if(this.pendingClip) {
        var savedFillRule$$3 = null;
        if(this.pendingClip == EO_CLIP) {
          savedFillRule$$3 = this.setEOFillRule()
        }
        this.ctx.clip();
        this.pendingClip = null;
        if(savedFillRule$$3 !== null) {
          this.restoreFillRule(savedFillRule$$3)
        }
      }
      this.ctx.beginPath()
    }, setEOFillRule:function CanvasGraphics_setEOFillRule() {
      var savedFillRule$$4 = this.ctx.mozFillRule;
      this.ctx.mozFillRule = "evenodd";
      return savedFillRule$$4
    }, restoreFillRule:function CanvasGraphics_restoreFillRule(rule$$3) {
      this.ctx.mozFillRule = rule$$3
    }, getSinglePixelWidth:function CanvasGraphics_getSinglePixelWidth(scale$$4) {
      var inverse = this.ctx.mozCurrentTransformInverse;
      return Math.abs(inverse[0] + inverse[2])
    }};
    return CanvasGraphics$$1
  }();
  if(!isWorker) {
    var canvas$$1 = PdfJS_window.document.createElement("canvas");
    canvas$$1.width = 1;
    canvas$$1.height = 1;
    var ctx = canvas$$1.getContext("2d");
    try {
      ctx.putImageData({width:1, height:1, data:new Uint8Array(4)}, 0, 0);
      CanvasGraphics.prototype.putBinaryImageData = function CanvasGraphicsPutBinaryImageDataNative(ctx$$12, imgData$$2) {
        ctx$$12.putImageData(imgData$$2, 0, 0)
      }
    }catch(e$$18) {
      CanvasGraphics.prototype.putBinaryImageData = function CanvasGraphicsPutBinaryImageDataShim(ctx$$13, imgData$$3, w$$14, h$$12) {
        var tmpImgData = ctx$$13.getImageData(0, 0, w$$14, h$$12);
        var tmpImgDataPixels = tmpImgData.data;
        var len = tmpImgDataPixels.length;
        for(;len--;) {
          tmpImgDataPixels[len] = imgData$$3.data[len]
        }
        ctx$$13.putImageData(tmpImgData, 0, 0)
      }
    }
  }
  var Name = function NameClosure() {
    function Name$$1(name$$50) {
      this.name = name$$50
    }
    Name$$1.prototype = {};
    return Name$$1
  }();
  var Cmd = function CmdClosure() {
    function Cmd$$1(cmd$$2) {
      this.cmd = cmd$$2
    }
    Cmd$$1.prototype = {};
    var cmdCache = {};
    Cmd$$1.get = function Cmd_get(cmd$$3) {
      var cmdValue = cmdCache[cmd$$3];
      if(cmdValue) {
        return cmdValue
      }
      return cmdCache[cmd$$3] = new Cmd$$1(cmd$$3)
    };
    return Cmd$$1
  }();
  var Dict = function DictClosure() {
    function Dict$$1(xref$$5) {
      var map = Object.create(null);
      this.assignXref = function Dict_assignXref(newXref) {
        xref$$5 = newXref
      };
      this.get = function Dict_get(key1, key2, key3) {
        var value$$37;
        if(typeof(value$$37 = map[key1]) != "undefined" || key1 in map || typeof key2 == "undefined") {
          return xref$$5 ? xref$$5.fetchIfRef(value$$37) : value$$37
        }
        if(typeof(value$$37 = map[key2]) != "undefined" || key2 in map || typeof key3 == "undefined") {
          return xref$$5 ? xref$$5.fetchIfRef(value$$37) : value$$37
        }
        value$$37 = map[key3] || null;
        return xref$$5 ? xref$$5.fetchIfRef(value$$37) : value$$37
      };
      this.getRaw = function Dict_getRaw(key$$18) {
        return map[key$$18]
      };
      this.getAll = function Dict_getAll() {
        var all = {};
        var key$$19;
        for(key$$19 in map) {
          var obj$$20 = this.get(key$$19);
          all[key$$19] = obj$$20 instanceof Dict$$1 ? obj$$20.getAll() : obj$$20
        }
        return all
      };
      this.set = function Dict_set(key$$20, value$$38) {
        map[key$$20] = value$$38
      };
      this.has = function Dict_has(key$$21) {
        return key$$21 in map
      };
      this.forEach = function Dict_forEach(callback$$32) {
        var key$$22;
        for(key$$22 in map) {
          callback$$32(key$$22, this.get(key$$22))
        }
      }
    }
    return Dict$$1
  }();
  var Ref = function RefClosure() {
    function Ref$$1(num$$6, gen) {
      this.num = num$$6;
      this.gen = gen
    }
    Ref$$1.prototype = {};
    return Ref$$1
  }();
  var RefSet = function RefSetClosure() {
    function RefSet$$1() {
      this.dict = {}
    }
    RefSet$$1.prototype = {has:function RefSet_has(ref$$4) {
      return!!this.dict["R" + ref$$4.num + "." + ref$$4.gen]
    }, put:function RefSet_put(ref$$5) {
      this.dict["R" + ref$$5.num + "." + ref$$5.gen] = ref$$5
    }};
    return RefSet$$1
  }();
  var Catalog = function CatalogClosure() {
    function Catalog$$1(xref$$6) {
      this.xref = xref$$6;
      var obj$$21 = xref$$6.root;
      assertWellFormed(isDict(obj$$21), "catalog object is not a dictionary");
      this.catDict = obj$$21
    }
    Catalog$$1.prototype = {get metadata() {
      var stream$$4 = this.catDict.get("Metadata");
      var metadata$$1;
      if(stream$$4 && isDict(stream$$4.dict)) {
        var type$$29 = stream$$4.dict.get("Type");
        var subtype$$1 = stream$$4.dict.get("Subtype");
        if(isName(type$$29) && isName(subtype$$1) && type$$29.name === "Metadata" && subtype$$1.name === "XML") {
          metadata$$1 = stringToPDFString(bytesToString(stream$$4.getBytes()))
        }
      }
      return shadow(this, "metadata", metadata$$1)
    }, get toplevelPagesDict() {
      var pagesObj = this.catDict.get("Pages");
      assertWellFormed(isDict(pagesObj), "invalid top-level pages dictionary");
      return shadow(this, "toplevelPagesDict", pagesObj)
    }, get documentOutline() {
      var xref$$7 = this.xref;
      var obj$$22 = this.catDict.get("Outlines");
      var root = {items:[]};
      if(isDict(obj$$22)) {
        obj$$22 = obj$$22.getRaw("First");
        var processed = new RefSet;
        if(isRef(obj$$22)) {
          var queue = [{obj:obj$$22, parent:root}];
          processed.put(obj$$22);
          for(;queue.length > 0;) {
            var i$$32 = queue.shift();
            var outlineDict = xref$$7.fetchIfRef(i$$32.obj);
            if(outlineDict === null) {
              continue
            }
            if(!outlineDict.has("Title")) {
              error$$3("Invalid outline item")
            }
            var dest$$1 = outlineDict.get("A");
            if(dest$$1) {
              dest$$1 = dest$$1.get("D")
            }else {
              if(outlineDict.has("Dest")) {
                dest$$1 = outlineDict.getRaw("Dest");
                if(isName(dest$$1)) {
                  dest$$1 = dest$$1.name
                }
              }
            }
            var title$$6 = outlineDict.get("Title");
            var outlineItem = {dest:dest$$1, title:stringToPDFString(title$$6), color:outlineDict.get("C") || [0, 0, 0], count:outlineDict.get("Count"), bold:!!(outlineDict.get("F") & 2), italic:!!(outlineDict.get("F") & 1), items:[]};
            i$$32.parent.items.push(outlineItem);
            obj$$22 = outlineDict.getRaw("First");
            if(isRef(obj$$22) && !processed.has(obj$$22)) {
              queue.push({obj:obj$$22, parent:outlineItem});
              processed.put(obj$$22)
            }
            obj$$22 = outlineDict.getRaw("Next");
            if(isRef(obj$$22) && !processed.has(obj$$22)) {
              queue.push({obj:obj$$22, parent:i$$32.parent});
              processed.put(obj$$22)
            }
          }
        }
      }
      obj$$22 = root.items.length > 0 ? root.items : null;
      return shadow(this, "documentOutline", obj$$22)
    }, get numPages() {
      var obj$$23 = this.toplevelPagesDict.get("Count");
      assertWellFormed(isInt(obj$$23), "page count in top level pages object is not an integer");
      return shadow(this, "num", obj$$23)
    }, traverseKids:function Catalog_traverseKids(pagesDict) {
      var pageCache = this.pageCache;
      var kids$$1 = pagesDict.get("Kids");
      assertWellFormed(isArray(kids$$1), "page dictionary kids object is not an array");
      var i$$33 = 0;
      var ii$$9 = kids$$1.length;
      for(;i$$33 < ii$$9;++i$$33) {
        var kid = kids$$1[i$$33];
        assertWellFormed(isRef(kid), "page dictionary kid is not a reference");
        var obj$$24 = this.xref.fetch(kid);
        if(isDict(obj$$24, "Page") || isDict(obj$$24) && !obj$$24.has("Kids")) {
          pageCache.push(new Page(this.xref, pageCache.length, obj$$24, kid))
        }else {
          assertWellFormed(isDict(obj$$24), "page dictionary kid reference points to wrong type of object");
          this.traverseKids(obj$$24)
        }
      }
    }, get destinations() {
      function fetchDestination(dest$$2) {
        return isDict(dest$$2) ? dest$$2.get("D") : dest$$2
      }
      var xref$$8 = this.xref;
      var dests = {};
      var nameTreeRef;
      var nameDictionaryRef;
      var obj$$25 = this.catDict.get("Names");
      if(obj$$25) {
        nameTreeRef = obj$$25.getRaw("Dests")
      }else {
        if(this.catDict.has("Dests")) {
          nameDictionaryRef = this.catDict.get("Dests")
        }
      }
      if(nameDictionaryRef) {
        obj$$25 = nameDictionaryRef;
        obj$$25.forEach(function catalogForEach(key$$23, value$$39) {
          if(!value$$39) {
            return
          }
          dests[key$$23] = fetchDestination(value$$39)
        })
      }
      if(nameTreeRef) {
        var processed$$1 = new RefSet;
        processed$$1.put(nameTreeRef);
        var queue$$1 = [nameTreeRef];
        for(;queue$$1.length > 0;) {
          var i$$34;
          var n$$10;
          obj$$25 = xref$$8.fetch(queue$$1.shift());
          if(obj$$25.has("Kids")) {
            var kids$$2 = obj$$25.get("Kids");
            i$$34 = 0, n$$10 = kids$$2.length;
            for(;i$$34 < n$$10;i$$34++) {
              var kid$$1 = kids$$2[i$$34];
              if(processed$$1.has(kid$$1)) {
                error$$3("invalid destinations")
              }
              queue$$1.push(kid$$1);
              processed$$1.put(kid$$1)
            }
            continue
          }
          var names = obj$$25.get("Names");
          i$$34 = 0, n$$10 = names.length;
          for(;i$$34 < n$$10;i$$34 += 2) {
            dests[names[i$$34]] = fetchDestination(xref$$8.fetchIfRef(names[i$$34 + 1]))
          }
        }
      }
      return shadow(this, "destinations", dests)
    }, getPage:function Catalog_getPage(n$$11) {
      var pageCache$$1 = this.pageCache;
      if(!pageCache$$1) {
        pageCache$$1 = this.pageCache = [];
        this.traverseKids(this.toplevelPagesDict)
      }
      return this.pageCache[n$$11 - 1]
    }};
    return Catalog$$1
  }();
  var XRef = function XRefClosure() {
    function XRef$$1(stream$$5, startXRef$$1, mainXRefEntriesOffset$$1) {
      this.stream = stream$$5;
      this.entries = [];
      this.xrefstms = {};
      var trailerDict = this.readXRef(startXRef$$1);
      trailerDict.assignXref(this);
      this.trailer = trailerDict;
      this.cache = [];
      var encrypt = trailerDict.get("Encrypt");
      if(encrypt) {
        var fileId = trailerDict.get("ID");
        this.encrypt = new CipherTransformFactory(encrypt, fileId[0])
      }
      if(!(this.root = trailerDict.get("Root"))) {
        error$$3("Invalid root reference")
      }
    }
    XRef$$1.prototype = {readXRefTable:function XRef_readXRefTable(parser) {
      var obj$$26;
      for(;!isCmd(obj$$26 = parser.getObj(), "trailer");) {
        var first$$1 = obj$$26;
        var count$$6 = parser.getObj();
        if(!isInt(first$$1) || !isInt(count$$6)) {
          error$$3("Invalid XRef table: wrong types in subsection header")
        }
        var i$$35 = 0;
        for(;i$$35 < count$$6;i$$35++) {
          var entry = {};
          entry.offset = parser.getObj();
          entry.gen = parser.getObj();
          var type$$30 = parser.getObj();
          if(isCmd(type$$30, "f")) {
            entry.free = true
          }else {
            if(isCmd(type$$30, "n")) {
              entry.uncompressed = true
            }
          }
          if(!isInt(entry.offset) || !isInt(entry.gen) || !(entry.free || entry.uncompressed)) {
            error$$3("Invalid entry in XRef subsection: " + first$$1 + ", " + count$$6)
          }
          if(!this.entries[i$$35 + first$$1]) {
            this.entries[i$$35 + first$$1] = entry
          }
        }
      }
      if(this.entries[0] && !this.entries[0].free) {
        error$$3("Invalid XRef table: unexpected first object")
      }
      if(!isCmd(obj$$26, "trailer")) {
        error$$3("Invalid XRef table: could not find trailer dictionary")
      }
      var dict$$1 = parser.getObj();
      if(!isDict(dict$$1)) {
        error$$3("Invalid XRef table: could not parse trailer dictionary")
      }
      return dict$$1
    }, readXRefStream:function XRef_readXRefStream(stream$$6) {
      var streamParameters = stream$$6.parameters;
      var byteWidths = streamParameters.get("W");
      var range$$7 = streamParameters.get("Index");
      if(!range$$7) {
        range$$7 = [0, streamParameters.get("Size")]
      }
      var i$$36;
      var j$$5;
      for(;range$$7.length > 0;) {
        var first$$2 = range$$7[0];
        var n$$12 = range$$7[1];
        if(!isInt(first$$2) || !isInt(n$$12)) {
          error$$3("Invalid XRef range fields: " + first$$2 + ", " + n$$12)
        }
        var typeFieldWidth = byteWidths[0];
        var offsetFieldWidth = byteWidths[1];
        var generationFieldWidth = byteWidths[2];
        if(!isInt(typeFieldWidth) || !isInt(offsetFieldWidth) || !isInt(generationFieldWidth)) {
          error$$3("Invalid XRef entry fields length: " + first$$2 + ", " + n$$12)
        }
        i$$36 = 0;
        for(;i$$36 < n$$12;++i$$36) {
          var type$$31 = 0;
          var offset$$12 = 0;
          var generation = 0;
          j$$5 = 0;
          for(;j$$5 < typeFieldWidth;++j$$5) {
            type$$31 = type$$31 << 8 | stream$$6.getByte()
          }
          if(typeFieldWidth == 0) {
            type$$31 = 1
          }
          j$$5 = 0;
          for(;j$$5 < offsetFieldWidth;++j$$5) {
            offset$$12 = offset$$12 << 8 | stream$$6.getByte()
          }
          j$$5 = 0;
          for(;j$$5 < generationFieldWidth;++j$$5) {
            generation = generation << 8 | stream$$6.getByte()
          }
          var entry$$1 = {};
          entry$$1.offset = offset$$12;
          entry$$1.gen = generation;
          switch(type$$31) {
            case 0:
              entry$$1.free = true;
              break;
            case 1:
              entry$$1.uncompressed = true;
              break;
            case 2:
              break;
            default:
              error$$3("Invalid XRef entry type: " + type$$31)
          }
          if(!this.entries[first$$2 + i$$36]) {
            this.entries[first$$2 + i$$36] = entry$$1
          }
        }
        range$$7.splice(0, 2)
      }
      return streamParameters
    }, indexObjects:function XRef_indexObjects() {
      function readToken(data$$43, offset$$13) {
        var token$$5 = "";
        var ch$$2 = data$$43[offset$$13];
        for(;ch$$2 !== 13 && ch$$2 !== 10;) {
          if(++offset$$13 >= data$$43.length) {
            break
          }
          token$$5 += String.fromCharCode(ch$$2);
          ch$$2 = data$$43[offset$$13]
        }
        return token$$5
      }
      function skipUntil(data$$44, offset$$14, what$$1) {
        var length$$20 = what$$1.length;
        var dataLength = data$$44.length;
        var skipped = 0;
        for(;offset$$14 < dataLength;) {
          var i$$38 = 0;
          for(;i$$38 < length$$20 && data$$44[offset$$14 + i$$38] == what$$1[i$$38];) {
            ++i$$38
          }
          if(i$$38 >= length$$20) {
            break
          }
          offset$$14++;
          skipped++
        }
        return skipped
      }
      var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);
      var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);
      var endobjBytes = new Uint8Array([101, 110, 100, 111, 98, 106]);
      var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);
      var stream$$7 = this.stream;
      stream$$7.pos = 0;
      var buffer$$10 = stream$$7.getBytes();
      var position = stream$$7.start;
      var length$$19 = buffer$$10.length;
      var trailers = [];
      var xrefStms = [];
      var state$$1 = 0;
      var currentToken;
      for(;position < length$$19;) {
        var ch$$1 = buffer$$10[position];
        if(ch$$1 === 32 || ch$$1 === 9 || ch$$1 === 13 || ch$$1 === 10) {
          ++position;
          continue
        }
        if(ch$$1 === 37) {
          do {
            ++position;
            ch$$1 = buffer$$10[position]
          }while(ch$$1 !== 13 && ch$$1 !== 10);
          continue
        }
        var token$$4 = readToken(buffer$$10, position);
        var m$$14;
        if(token$$4 === "xref") {
          position += skipUntil(buffer$$10, position, trailerBytes);
          trailers.push(position);
          position += skipUntil(buffer$$10, position, startxrefBytes)
        }else {
          if(m$$14 = /^(\d+)\s+(\d+)\s+obj\b/.exec(token$$4)) {
            this.entries[m$$14[1]] = {offset:position, gen:m$$14[2] | 0, uncompressed:true};
            var contentLength = skipUntil(buffer$$10, position, endobjBytes) + 7;
            var content$$2 = buffer$$10.subarray(position, position + contentLength);
            var xrefTagOffset = skipUntil(content$$2, 0, xrefBytes);
            if(xrefTagOffset < contentLength && content$$2[xrefTagOffset + 5] < 64) {
              xrefStms.push(position);
              this.xrefstms[position] = 1
            }
            position += contentLength
          }else {
            position += token$$4.length + 1
          }
        }
      }
      var i$$37 = 0;
      var ii$$10 = xrefStms.length;
      for(;i$$37 < ii$$10;++i$$37) {
        this.readXRef(xrefStms[i$$37], true)
      }
      var dict$$2;
      i$$37 = 0;
      ii$$10 = trailers.length;
      for(;i$$37 < ii$$10;++i$$37) {
        stream$$7.pos = trailers[i$$37];
        var parser$$1 = new Parser(new Lexer(stream$$7), true, null);
        var obj$$27 = parser$$1.getObj();
        if(!isCmd(obj$$27, "trailer")) {
          continue
        }
        if(!isDict(dict$$2 = parser$$1.getObj())) {
          continue
        }
        if(dict$$2.has("ID")) {
          return dict$$2
        }
      }
      if(dict$$2) {
        return dict$$2
      }
      error$$3("Invalid PDF structure")
    }, readXRef:function XRef_readXRef(startXRef$$2, recoveryMode) {
      var stream$$8 = this.stream;
      stream$$8.pos = startXRef$$2;
      try {
        var parser$$2 = new Parser(new Lexer(stream$$8), true, null);
        var obj$$28 = parser$$2.getObj();
        var dict$$3;
        if(isCmd(obj$$28, "xref")) {
          dict$$3 = this.readXRefTable(parser$$2);
          obj$$28 = dict$$3.get("XRefStm");
          if(isInt(obj$$28)) {
            var pos$$2 = obj$$28;
            if(!(pos$$2 in this.xrefstms)) {
              this.xrefstms[pos$$2] = 1;
              this.readXRef(pos$$2)
            }
          }
        }else {
          if(isInt(obj$$28)) {
            if(!isInt(parser$$2.getObj()) || !isCmd(parser$$2.getObj(), "obj") || !isStream(obj$$28 = parser$$2.getObj())) {
              error$$3("Invalid XRef stream")
            }
            dict$$3 = this.readXRefStream(obj$$28);
            if(!dict$$3) {
              error$$3("Failed to read XRef stream")
            }
          }
        }
        obj$$28 = dict$$3.get("Prev");
        if(isInt(obj$$28)) {
          this.readXRef(obj$$28, recoveryMode)
        }else {
          if(isRef(obj$$28)) {
            this.readXRef(obj$$28.num, recoveryMode)
          }
        }
        return dict$$3
      }catch(e$$19) {
        log$$3("(while reading XRef): " + e$$19)
      }
      if(recoveryMode) {
        return
      }
      warn("Indexing all PDF objects");
      return this.indexObjects()
    }, getEntry:function XRef_getEntry(i$$39) {
      var e$$20 = this.entries[i$$39];
      if(e$$20 === null) {
        return null
      }
      return e$$20.free ? null : e$$20
    }, fetchIfRef:function XRef_fetchIfRef(obj$$29) {
      if(!isRef(obj$$29)) {
        return obj$$29
      }
      return this.fetch(obj$$29)
    }, fetch:function XRef_fetch(ref$$6, suppressEncryption) {
      assertWellFormed(isRef(ref$$6), "ref object is not a reference");
      var num$$7 = ref$$6.num;
      if(num$$7 in this.cache) {
        return this.cache[num$$7]
      }
      var e$$21 = this.getEntry(num$$7);
      if(e$$21 === null) {
        return this.cache[num$$7] = e$$21
      }
      var gen$$1 = ref$$6.gen;
      var stream$$9;
      var parser$$3;
      if(e$$21.uncompressed) {
        if(e$$21.gen != gen$$1) {
          error$$3("inconsistent generation in XRef")
        }
        stream$$9 = this.stream.makeSubStream(e$$21.offset);
        parser$$3 = new Parser(new Lexer(stream$$9), true, this);
        var obj1 = parser$$3.getObj();
        var obj2 = parser$$3.getObj();
        var obj3 = parser$$3.getObj();
        if(!isInt(obj1) || obj1 != num$$7 || !isInt(obj2) || obj2 != gen$$1 || !isCmd(obj3)) {
          error$$3("bad XRef entry")
        }
        if(!isCmd(obj3, "obj")) {
          if(obj3.cmd.indexOf("obj") == 0) {
            num$$7 = parseInt(obj3.cmd.substring(3), 10);
            if(!isNaN(num$$7)) {
              return num$$7
            }
          }
          error$$3("bad XRef entry")
        }
        if(this.encrypt && !suppressEncryption) {
          try {
            e$$21 = parser$$3.getObj(this.encrypt.createCipherTransform(num$$7, gen$$1))
          }catch(ex) {
            return this.fetch(ref$$6, true)
          }
        }else {
          e$$21 = parser$$3.getObj()
        }
        if(!isStream(e$$21) || e$$21 instanceof JpegStream) {
          this.cache[num$$7] = e$$21
        }
        return e$$21
      }
      stream$$9 = this.fetch(new Ref(e$$21.offset, 0));
      if(!isStream(stream$$9)) {
        error$$3("bad ObjStm stream")
      }
      var first$$3 = stream$$9.parameters.get("First");
      var n$$13 = stream$$9.parameters.get("N");
      if(!isInt(first$$3) || !isInt(n$$13)) {
        error$$3("invalid first and n parameters for ObjStm stream")
      }
      parser$$3 = new Parser(new Lexer(stream$$9), false, this);
      var i$$40;
      var entries = [];
      var nums = [];
      i$$40 = 0;
      for(;i$$40 < n$$13;++i$$40) {
        num$$7 = parser$$3.getObj();
        if(!isInt(num$$7)) {
          error$$3("invalid object number in the ObjStm stream: " + num$$7)
        }
        nums.push(num$$7);
        var offset$$15 = parser$$3.getObj();
        if(!isInt(offset$$15)) {
          error$$3("invalid object offset in the ObjStm stream: " + offset$$15)
        }
      }
      i$$40 = 0;
      for(;i$$40 < n$$13;++i$$40) {
        entries.push(parser$$3.getObj());
        this.cache[nums[i$$40]] = entries[i$$40]
      }
      e$$21 = entries[e$$21.gen];
      if(!e$$21) {
        error$$3("bad XRef entry for compressed object")
      }
      return e$$21
    }, getCatalogObj:function XRef_getCatalogObj() {
      return this.root
    }};
    return XRef$$1
  }();
  var PDFObjects = function PDFObjectsClosure() {
    function PDFObjects$$1() {
      this.objs = {}
    }
    PDFObjects$$1.prototype = {objs:null, ensureObj:function PDFObjects_ensureObj(objId$$2, data$$45) {
      if(this.objs[objId$$2]) {
        return this.objs[objId$$2]
      }
      return this.objs[objId$$2] = new Promise(objId$$2, data$$45)
    }, get:function PDFObjects_get(objId$$3, callback$$33) {
      if(callback$$33) {
        this.ensureObj(objId$$3).then(callback$$33);
        return null
      }
      var obj$$30 = this.objs[objId$$3];
      if(!obj$$30 || !obj$$30.isResolved) {
        error$$3("Requesting object that isn't resolved yet " + objId$$3)
      }
      return obj$$30.data
    }, resolve:function PDFObjects_resolve(objId$$4, data$$46) {
      var objs$$3 = this.objs;
      if(objs$$3[objId$$4]) {
        objs$$3[objId$$4].resolve(data$$46)
      }else {
        this.ensureObj(objId$$4, data$$46)
      }
    }, onData:function PDFObjects_onData(objId$$5, callback$$34) {
      this.ensureObj(objId$$5).onData(callback$$34)
    }, isResolved:function PDFObjects_isResolved(objId$$6) {
      var objs$$4 = this.objs;
      if(!objs$$4[objId$$6]) {
        return false
      }else {
        return objs$$4[objId$$6].isResolved
      }
    }, hasData:function PDFObjects_hasData(objId$$7) {
      var objs$$5 = this.objs;
      if(!objs$$5[objId$$7]) {
        return false
      }else {
        return objs$$5[objId$$7].hasData
      }
    }, setData:function PDFObjects_setData(objId$$8, data$$47) {
      this.ensureObj(objId$$8).data = data$$47
    }};
    return PDFObjects$$1
  }();
  var PDFFunction = function PDFFunctionClosure() {
    var CONSTRUCT_SAMPLED = 0;
    var CONSTRUCT_INTERPOLATED = 2;
    var CONSTRUCT_STICHED = 3;
    var CONSTRUCT_POSTSCRIPT = 4;
    return{getSampleArray:function PDFFunction_getSampleArray(size$$6, outputSize, bps, str$$13) {
      var length$$21 = 1;
      var i$$41 = 0;
      var ii$$11 = size$$6.length;
      for(;i$$41 < ii$$11;i$$41++) {
        length$$21 *= size$$6[i$$41]
      }
      length$$21 *= outputSize;
      var array$$9 = [];
      var codeSize = 0;
      var codeBuf = 0;
      var sampleMul = 1 / (Math.pow(2, bps) - 1);
      var strBytes = str$$13.getBytes((length$$21 * bps + 7) / 8);
      var strIdx = 0;
      i$$41 = 0;
      for(;i$$41 < length$$21;i$$41++) {
        for(;codeSize < bps;) {
          codeBuf <<= 8;
          codeBuf |= strBytes[strIdx++];
          codeSize += 8
        }
        codeSize -= bps;
        array$$9.push((codeBuf >> codeSize) * sampleMul);
        codeBuf &= (1 << codeSize) - 1
      }
      return array$$9
    }, getIR:function PDFFunction_getIR(xref$$9, fn) {
      var dict$$4 = fn.dict;
      if(!dict$$4) {
        dict$$4 = fn
      }
      var types = [this.constructSampled, null, this.constructInterpolated, this.constructStiched, this.constructPostScript];
      var typeNum = dict$$4.get("FunctionType");
      var typeFn = types[typeNum];
      if(!typeFn) {
        error$$3("Unknown type of function")
      }
      return typeFn.call(this, fn, dict$$4, xref$$9)
    }, fromIR:function PDFFunction_fromIR(IR$$1) {
      var type$$32 = IR$$1[0];
      switch(type$$32) {
        case CONSTRUCT_SAMPLED:
          return this.constructSampledFromIR(IR$$1);
        case CONSTRUCT_INTERPOLATED:
          return this.constructInterpolatedFromIR(IR$$1);
        case CONSTRUCT_STICHED:
          return this.constructStichedFromIR(IR$$1);
        case CONSTRUCT_POSTSCRIPT:
        ;
        default:
          return this.constructPostScriptFromIR(IR$$1)
      }
    }, parse:function PDFFunction_parse(xref$$10, fn$$1) {
      var IR$$2 = this.getIR(xref$$10, fn$$1);
      return this.fromIR(IR$$2)
    }, constructSampled:function PDFFunction_constructSampled(str$$14, dict$$5) {
      function toMultiArray(arr$$11) {
        var inputLength = arr$$11.length;
        var outputLength = arr$$11.length / 2;
        var out$$1 = [];
        var index$$42 = 0;
        var i$$43 = 0;
        for(;i$$43 < inputLength;i$$43 += 2) {
          out$$1[index$$42] = [arr$$11[i$$43], arr$$11[i$$43 + 1]];
          ++index$$42
        }
        return out$$1
      }
      var domain = dict$$5.get("Domain");
      var range$$8 = dict$$5.get("Range");
      if(!domain || !range$$8) {
        error$$3("No domain or range")
      }
      var inputSize$$1 = domain.length / 2;
      var outputSize$$1 = range$$8.length / 2;
      domain = toMultiArray(domain);
      range$$8 = toMultiArray(range$$8);
      var size$$7 = dict$$5.get("Size");
      var bps$$1 = dict$$5.get("BitsPerSample");
      var order = dict$$5.get("Order");
      if(!order) {
        order = 1
      }
      if(order !== 1) {
        error$$3("No support for cubic spline interpolation: " + order)
      }
      var encode = dict$$5.get("Encode");
      if(!encode) {
        encode = [];
        var i$$42 = 0;
        for(;i$$42 < inputSize$$1;++i$$42) {
          encode.push(0);
          encode.push(size$$7[i$$42] - 1)
        }
      }
      encode = toMultiArray(encode);
      var decode = dict$$5.get("Decode");
      if(!decode) {
        decode = range$$8
      }else {
        decode = toMultiArray(decode)
      }
      var samples = this.getSampleArray(size$$7, outputSize$$1, bps$$1, str$$14);
      return[CONSTRUCT_SAMPLED, inputSize$$1, domain, encode, decode, samples, size$$7, outputSize$$1, Math.pow(2, bps$$1) - 1, range$$8]
    }, constructSampledFromIR:function PDFFunction_constructSampledFromIR(IR$$3) {
      return function constructSampledFromIRResult(args$$1) {
        var m$$15 = IR$$3[1];
        var domain$$1 = IR$$3[2];
        var encode$$1 = IR$$3[3];
        var decode$$1 = IR$$3[4];
        var samples$$1 = IR$$3[5];
        var size$$8 = IR$$3[6];
        var n$$14 = IR$$3[7];
        var mask$$6 = IR$$3[8];
        var range$$9 = IR$$3[9];
        if(m$$15 != args$$1.length) {
          error$$3("Incorrect number of arguments: " + inputSize + " != " + args$$1.length)
        }
        var x$$73 = args$$1;
        var cubeVertices = 1 << m$$15;
        var cubeN = new Float64Array(cubeVertices);
        var cubeVertex = new Uint32Array(cubeVertices);
        var j$$6 = 0;
        for(;j$$6 < cubeVertices;j$$6++) {
          cubeN[j$$6] = 1
        }
        var k$$3 = n$$14;
        var pos$$3 = 1;
        var i$$44 = 0;
        for(;i$$44 < m$$15;++i$$44) {
          var domain_2i = domain$$1[i$$44][0];
          var domain_2i_1 = domain$$1[i$$44][1];
          var xi = Math.min(Math.max(x$$73[i$$44], domain_2i), domain_2i_1);
          var e$$22 = encode$$1[i$$44][0] + (xi - domain_2i) * ((encode$$1[i$$44][1] - encode$$1[i$$44][0]) / (domain_2i_1 - domain_2i));
          var size_i = size$$8[i$$44];
          e$$22 = Math.min(Math.max(e$$22, 0), size_i - 1);
          var e0 = e$$22 < size_i - 1 ? Math.floor(e$$22) : e$$22 - 1;
          var n0 = e0 + 1 - e$$22;
          var n1 = e$$22 - e0;
          var offset0 = e0 * k$$3;
          var offset1 = offset0 + k$$3;
          j$$6 = 0;
          for(;j$$6 < cubeVertices;j$$6++) {
            if(j$$6 & pos$$3) {
              cubeN[j$$6] *= n1;
              cubeVertex[j$$6] += offset1
            }else {
              cubeN[j$$6] *= n0;
              cubeVertex[j$$6] += offset0
            }
          }
          k$$3 *= size_i;
          pos$$3 <<= 1
        }
        var y$$56 = new Float64Array(n$$14);
        j$$6 = 0;
        for(;j$$6 < n$$14;++j$$6) {
          var rj = 0;
          i$$44 = 0;
          for(;i$$44 < cubeVertices;i$$44++) {
            rj += samples$$1[cubeVertex[i$$44] + j$$6] * cubeN[i$$44]
          }
          rj = decode$$1[j$$6][0] + (rj - 0) * ((decode$$1[j$$6][1] - decode$$1[j$$6][0]) / (1 - 0));
          y$$56[j$$6] = Math.min(Math.max(rj, range$$9[j$$6][0]), range$$9[j$$6][1])
        }
        return y$$56
      }
    }, constructInterpolated:function PDFFunction_constructInterpolated(str$$15, dict$$6) {
      var c0 = dict$$6.get("C0") || [0];
      var c1 = dict$$6.get("C1") || [1];
      var n$$15 = dict$$6.get("N");
      if(!isArray(c0) || !isArray(c1)) {
        error$$3("Illegal dictionary for interpolated function")
      }
      var length$$22 = c0.length;
      var diff = [];
      var i$$45 = 0;
      for(;i$$45 < length$$22;++i$$45) {
        diff.push(c1[i$$45] - c0[i$$45])
      }
      return[CONSTRUCT_INTERPOLATED, c0, diff, n$$15]
    }, constructInterpolatedFromIR:function PDFFunction_constructInterpolatedFromIR(IR$$4) {
      var c0$$1 = IR$$4[1];
      var diff$$1 = IR$$4[2];
      var n$$16 = IR$$4[3];
      var length$$23 = diff$$1.length;
      return function constructInterpolatedFromIRResult(args$$2) {
        var x$$74 = n$$16 == 1 ? args$$2[0] : Math.pow(args$$2[0], n$$16);
        var out$$2 = [];
        var j$$7 = 0;
        for(;j$$7 < length$$23;++j$$7) {
          out$$2.push(c0$$1[j$$7] + x$$74 * diff$$1[j$$7])
        }
        return out$$2
      }
    }, constructStiched:function PDFFunction_constructStiched(fn$$2, dict$$7, xref$$11) {
      var domain$$2 = dict$$7.get("Domain");
      if(!domain$$2) {
        error$$3("No domain")
      }
      var inputSize$$2 = domain$$2.length / 2;
      if(inputSize$$2 != 1) {
        error$$3("Bad domain for stiched function")
      }
      var fnRefs = dict$$7.get("Functions");
      var fns = [];
      var i$$46 = 0;
      var ii$$12 = fnRefs.length;
      for(;i$$46 < ii$$12;++i$$46) {
        fns.push(PDFFunction.getIR(xref$$11, xref$$11.fetchIfRef(fnRefs[i$$46])))
      }
      var bounds = dict$$7.get("Bounds");
      var encode$$2 = dict$$7.get("Encode");
      return[CONSTRUCT_STICHED, domain$$2, bounds, encode$$2, fns]
    }, constructStichedFromIR:function PDFFunction_constructStichedFromIR(IR$$5) {
      var domain$$3 = IR$$5[1];
      var bounds$$1 = IR$$5[2];
      var encode$$3 = IR$$5[3];
      var fnsIR = IR$$5[4];
      var fns$$1 = [];
      var i$$47 = 0;
      var ii$$13 = fnsIR.length;
      for(;i$$47 < ii$$13;i$$47++) {
        fns$$1.push(PDFFunction.fromIR(fnsIR[i$$47]))
      }
      return function constructStichedFromIRResult(args$$3) {
        var v$$15;
        var v$$inline_32 = args$$3[0];
        var min$$inline_33 = domain$$3[0];
        var max$$inline_34 = domain$$3[1];
        if(v$$inline_32 > max$$inline_34) {
          v$$inline_32 = max$$inline_34
        }else {
          if(v$$inline_32 < min$$inline_33) {
            v$$inline_32 = min$$inline_33
          }
        }
        v$$15 = v$$inline_32;
        var i$$48 = 0;
        var ii$$14 = bounds$$1.length;
        for(;i$$48 < ii$$14;++i$$48) {
          if(v$$15 < bounds$$1[i$$48]) {
            break
          }
        }
        var dmin = domain$$3[0];
        if(i$$48 > 0) {
          dmin = bounds$$1[i$$48 - 1]
        }
        var dmax = domain$$3[1];
        if(i$$48 < bounds$$1.length) {
          dmax = bounds$$1[i$$48]
        }
        var rmin = encode$$3[2 * i$$48];
        var rmax = encode$$3[2 * i$$48 + 1];
        var v2 = rmin + (v$$15 - dmin) * (rmax - rmin) / (dmax - dmin);
        return fns$$1[i$$48]([v2])
      }
    }, constructPostScript:function PDFFunction_constructPostScript(fn$$3, dict$$8, xref$$12) {
      var domain$$4 = dict$$8.get("Domain");
      var range$$10 = dict$$8.get("Range");
      if(!domain$$4) {
        error$$3("No domain.")
      }
      if(!range$$10) {
        error$$3("No range.")
      }
      var lexer = new PostScriptLexer(fn$$3);
      var parser$$4 = new PostScriptParser(lexer);
      var code$$4 = parser$$4.parse();
      return[CONSTRUCT_POSTSCRIPT, domain$$4, range$$10, code$$4]
    }, constructPostScriptFromIR:function PDFFunction_constructPostScriptFromIR(IR$$6) {
      var domain$$5 = IR$$6[1];
      var range$$11 = IR$$6[2];
      var code$$5 = IR$$6[3];
      var numOutputs = range$$11.length / 2;
      var evaluator = new PostScriptEvaluator(code$$5);
      var cache = new FunctionCache;
      return function constructPostScriptFromIRResult(args$$4) {
        var initialStack = [];
        var i$$49 = 0;
        var ii$$15 = domain$$5.length / 2;
        for(;i$$49 < ii$$15;++i$$49) {
          initialStack.push(args$$4[i$$49])
        }
        var key$$24 = initialStack.join("_");
        if(cache.has(key$$24)) {
          return cache.get(key$$24)
        }
        var stack = evaluator.execute(initialStack);
        var transformed$$1 = [];
        i$$49 = numOutputs - 1;
        for(;i$$49 >= 0;--i$$49) {
          var out$$3 = stack.pop();
          var rangeIndex = 2 * i$$49;
          if(out$$3 < range$$11[rangeIndex]) {
            out$$3 = range$$11[rangeIndex]
          }else {
            if(out$$3 > range$$11[rangeIndex + 1]) {
              out$$3 = range$$11[rangeIndex + 1]
            }
          }
          transformed$$1[i$$49] = out$$3
        }
        cache.set(key$$24, transformed$$1);
        return transformed$$1
      }
    }}
  }();
  var FunctionCache = function FunctionCacheClosure() {
    function FunctionCache$$1() {
      this.cache = {};
      this.total = 0
    }
    var MAX_CACHE_SIZE = 1024;
    FunctionCache$$1.prototype = {has:function FunctionCache_has(key$$25) {
      return key$$25 in this.cache
    }, get:function FunctionCache_get(key$$26) {
      return this.cache[key$$26]
    }, set:function FunctionCache_set(key$$27, value$$40) {
      if(this.total < MAX_CACHE_SIZE) {
        this.cache[key$$27] = value$$40;
        this.total++
      }
    }};
    return FunctionCache$$1
  }();
  var PostScriptStack = function PostScriptStackClosure() {
    function PostScriptStack$$1(initialStack$$1) {
      this.stack = initialStack$$1 || []
    }
    var MAX_STACK_SIZE = 100;
    PostScriptStack$$1.prototype = {push:function PostScriptStack_push(value$$41) {
      if(this.stack.length >= MAX_STACK_SIZE) {
        error$$3("PostScript function stack overflow.")
      }
      this.stack.push(value$$41)
    }, pop:function PostScriptStack_pop() {
      if(this.stack.length <= 0) {
        error$$3("PostScript function stack underflow.")
      }
      return this.stack.pop()
    }, copy:function PostScriptStack_copy(n$$17) {
      if(this.stack.length + n$$17 >= MAX_STACK_SIZE) {
        error$$3("PostScript function stack overflow.")
      }
      var stack$$1 = this.stack;
      var i$$50 = stack$$1.length - n$$17;
      var j$$8 = n$$17 - 1;
      for(;j$$8 >= 0;j$$8--, i$$50++) {
        stack$$1.push(stack$$1[i$$50])
      }
    }, index:function PostScriptStack_index(n$$18) {
      this.push(this.stack[this.stack.length - n$$18 - 1])
    }, roll:function PostScriptStack_roll(n$$19, p$$2) {
      var stack$$2 = this.stack;
      var l = stack$$2.length - n$$19;
      var r$$5 = stack$$2.length - 1;
      var c$$8 = l + (p$$2 - Math.floor(p$$2 / n$$19) * n$$19);
      var i$$51;
      var j$$9;
      var t;
      i$$51 = l, j$$9 = r$$5;
      for(;i$$51 < j$$9;i$$51++, j$$9--) {
        t = stack$$2[i$$51];
        stack$$2[i$$51] = stack$$2[j$$9];
        stack$$2[j$$9] = t
      }
      i$$51 = l, j$$9 = c$$8 - 1;
      for(;i$$51 < j$$9;i$$51++, j$$9--) {
        t = stack$$2[i$$51];
        stack$$2[i$$51] = stack$$2[j$$9];
        stack$$2[j$$9] = t
      }
      i$$51 = c$$8, j$$9 = r$$5;
      for(;i$$51 < j$$9;i$$51++, j$$9--) {
        t = stack$$2[i$$51];
        stack$$2[i$$51] = stack$$2[j$$9];
        stack$$2[j$$9] = t
      }
    }};
    return PostScriptStack$$1
  }();
  var PostScriptEvaluator = function PostScriptEvaluatorClosure() {
    function PostScriptEvaluator$$1(operators, operands) {
      this.operators = operators;
      this.operands = operands
    }
    PostScriptEvaluator$$1.prototype = {execute:function PostScriptEvaluator_execute(initialStack$$2) {
      var stack$$3 = new PostScriptStack(initialStack$$2);
      var counter = 0;
      var operators$$1 = this.operators;
      var length$$24 = operators$$1.length;
      var operator;
      var a$$9;
      var b$$11;
      for(;counter < length$$24;) {
        operator = operators$$1[counter++];
        if(typeof operator == "number") {
          stack$$3.push(operator);
          continue
        }
        switch(operator) {
          case "jz":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            if(!a$$9) {
              counter = b$$11
            }
            break;
          case "j":
            a$$9 = stack$$3.pop();
            counter = a$$9;
            break;
          case "abs":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.abs(a$$9));
            break;
          case "add":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 + b$$11);
            break;
          case "and":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            if(isBool(a$$9) && isBool(b$$11)) {
              stack$$3.push(a$$9 && b$$11)
            }else {
              stack$$3.push(a$$9 & b$$11)
            }
            break;
          case "atan":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.atan(a$$9));
            break;
          case "bitshift":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            if(a$$9 > 0) {
              stack$$3.push(a$$9 << b$$11)
            }else {
              stack$$3.push(a$$9 >> b$$11)
            }
            break;
          case "ceiling":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.ceil(a$$9));
            break;
          case "copy":
            a$$9 = stack$$3.pop();
            stack$$3.copy(a$$9);
            break;
          case "cos":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.cos(a$$9));
            break;
          case "cvi":
            a$$9 = stack$$3.pop() | 0;
            stack$$3.push(a$$9);
            break;
          case "cvr":
            break;
          case "div":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 / b$$11);
            break;
          case "dup":
            stack$$3.copy(1);
            break;
          case "eq":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 == b$$11);
            break;
          case "exch":
            stack$$3.roll(2, 1);
            break;
          case "exp":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.pow(a$$9, b$$11));
            break;
          case "false":
            stack$$3.push(false);
            break;
          case "floor":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.floor(a$$9));
            break;
          case "ge":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 >= b$$11);
            break;
          case "gt":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 > b$$11);
            break;
          case "idiv":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 / b$$11 | 0);
            break;
          case "index":
            a$$9 = stack$$3.pop();
            stack$$3.index(a$$9);
            break;
          case "le":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 <= b$$11);
            break;
          case "ln":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.log(a$$9));
            break;
          case "log":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.log(a$$9) / Math.LN10);
            break;
          case "lt":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 < b$$11);
            break;
          case "mod":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 % b$$11);
            break;
          case "mul":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 * b$$11);
            break;
          case "ne":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 != b$$11);
            break;
          case "neg":
            a$$9 = stack$$3.pop();
            stack$$3.push(-b$$11);
            break;
          case "not":
            a$$9 = stack$$3.pop();
            if(isBool(a$$9) && isBool(b$$11)) {
              stack$$3.push(a$$9 && b$$11)
            }else {
              stack$$3.push(a$$9 & b$$11)
            }
            break;
          case "or":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            if(isBool(a$$9) && isBool(b$$11)) {
              stack$$3.push(a$$9 || b$$11)
            }else {
              stack$$3.push(a$$9 | b$$11)
            }
            break;
          case "pop":
            stack$$3.pop();
            break;
          case "roll":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.roll(a$$9, b$$11);
            break;
          case "round":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.round(a$$9));
            break;
          case "sin":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.sin(a$$9));
            break;
          case "sqrt":
            a$$9 = stack$$3.pop();
            stack$$3.push(Math.sqrt(a$$9));
            break;
          case "sub":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            stack$$3.push(a$$9 - b$$11);
            break;
          case "true":
            stack$$3.push(true);
            break;
          case "truncate":
            a$$9 = stack$$3.pop();
            a$$9 = a$$9 < 0 ? Math.ceil(a$$9) : Math.floor(a$$9);
            stack$$3.push(a$$9);
            break;
          case "xor":
            b$$11 = stack$$3.pop();
            a$$9 = stack$$3.pop();
            if(isBool(a$$9) && isBool(b$$11)) {
              stack$$3.push(a$$9 != b$$11)
            }else {
              stack$$3.push(a$$9 ^ b$$11)
            }
            break;
          default:
            error$$3("Unknown operator " + operator)
        }
      }
      return stack$$3.stack
    }};
    return PostScriptEvaluator$$1
  }();
  var PostScriptParser = function PostScriptParserClosure() {
    function PostScriptParser$$1(lexer$$1) {
      this.lexer = lexer$$1;
      this.operators = []
    }
    PostScriptParser$$1.prototype = {nextToken:function PostScriptParser_nextToken() {
      this.prev = this.token;
      this.token = this.lexer.getToken()
    }, accept:function PostScriptParser_accept(type$$33) {
      if(this.token.type == type$$33) {
        this.nextToken();
        return true
      }
      return false
    }, expect:function PostScriptParser_expect(type$$34) {
      if(this.accept(type$$34)) {
        return true
      }
      error$$3("Unexpected symbol: found " + this.token.type + " expected " + type$$34 + ".")
    }, parse:function PostScriptParser_parse() {
      this.nextToken();
      this.expect(PostScriptTokenTypes.LBRACE);
      this.parseBlock();
      this.expect(PostScriptTokenTypes.RBRACE);
      return this.operators
    }, parseBlock:function PostScriptParser_parseBlock() {
      for(;true;) {
        if(this.accept(PostScriptTokenTypes.NUMBER)) {
          this.operators.push(this.prev.value)
        }else {
          if(this.accept(PostScriptTokenTypes.OPERATOR)) {
            this.operators.push(this.prev.value)
          }else {
            if(this.accept(PostScriptTokenTypes.LBRACE)) {
              this.parseCondition()
            }else {
              return
            }
          }
        }
      }
    }, parseCondition:function PostScriptParser_parseCondition() {
      var conditionLocation = this.operators.length;
      this.operators.push(null, null);
      this.parseBlock();
      this.expect(PostScriptTokenTypes.RBRACE);
      if(this.accept(PostScriptTokenTypes.IF)) {
        this.operators[conditionLocation] = this.operators.length;
        this.operators[conditionLocation + 1] = "jz"
      }else {
        if(this.accept(PostScriptTokenTypes.LBRACE)) {
          var jumpLocation = this.operators.length;
          this.operators.push(null, null);
          var endOfTrue = this.operators.length;
          this.parseBlock();
          this.expect(PostScriptTokenTypes.RBRACE);
          this.expect(PostScriptTokenTypes.IFELSE);
          this.operators[jumpLocation] = this.operators.length;
          this.operators[jumpLocation + 1] = "j";
          this.operators[conditionLocation] = endOfTrue;
          this.operators[conditionLocation + 1] = "jz"
        }else {
          error$$3("PS Function: error parsing conditional.")
        }
      }
    }};
    return PostScriptParser$$1
  }();
  var PostScriptTokenTypes = {LBRACE:0, RBRACE:1, NUMBER:2, OPERATOR:3, IF:4, IFELSE:5};
  var PostScriptToken = function PostScriptTokenClosure() {
    function PostScriptToken$$1(type$$35, value$$42) {
      this.type = type$$35;
      this.value = value$$42
    }
    var opCache = {};
    PostScriptToken$$1.getOperator = function PostScriptToken_getOperator(op) {
      var opValue = opCache[op];
      if(opValue) {
        return opValue
      }
      return opCache[op] = new PostScriptToken$$1(PostScriptTokenTypes.OPERATOR, op)
    };
    PostScriptToken$$1.LBRACE = new PostScriptToken$$1(PostScriptTokenTypes.LBRACE, "{");
    PostScriptToken$$1.RBRACE = new PostScriptToken$$1(PostScriptTokenTypes.RBRACE, "}");
    PostScriptToken$$1.IF = new PostScriptToken$$1(PostScriptTokenTypes.IF, "IF");
    PostScriptToken$$1.IFELSE = new PostScriptToken$$1(PostScriptTokenTypes.IFELSE, "IFELSE");
    return PostScriptToken$$1
  }();
  var PostScriptLexer = function PostScriptLexerClosure() {
    function PostScriptLexer$$1(stream$$10) {
      this.stream = stream$$10
    }
    PostScriptLexer$$1.prototype = {getToken:function PostScriptLexer_getToken() {
      var s$$8 = "";
      var ch$$3;
      var comment = false;
      var stream$$11 = this.stream;
      for(;true;) {
        if(!(ch$$3 = stream$$11.getChar())) {
          return EOF
        }
        if(comment) {
          if(ch$$3 == "\n" || ch$$3 == "\r") {
            comment = false
          }
        }else {
          if(ch$$3 == "%") {
            comment = true
          }else {
            if(!Lexer.isSpace(ch$$3)) {
              break
            }
          }
        }
      }
      switch(ch$$3) {
        case "0":
        ;
        case "1":
        ;
        case "2":
        ;
        case "3":
        ;
        case "4":
        ;
        case "5":
        ;
        case "6":
        ;
        case "7":
        ;
        case "8":
        ;
        case "9":
        ;
        case "+":
        ;
        case "-":
        ;
        case ".":
          return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber(ch$$3));
        case "{":
          return PostScriptToken.LBRACE;
        case "}":
          return PostScriptToken.RBRACE
      }
      var str$$16 = ch$$3.toLowerCase();
      for(;true;) {
        ch$$3 = stream$$11.lookChar();
        if(ch$$3 === null) {
          break
        }
        ch$$3 = ch$$3.toLowerCase();
        if(ch$$3 >= "a" && ch$$3 <= "z") {
          str$$16 += ch$$3
        }else {
          break
        }
        stream$$11.skip()
      }
      switch(str$$16) {
        case "if":
          return PostScriptToken.IF;
        case "ifelse":
          return PostScriptToken.IFELSE;
        default:
          return PostScriptToken.getOperator(str$$16)
      }
    }, getNumber:function PostScriptLexer_getNumber(ch$$4) {
      var str$$17 = ch$$4;
      var stream$$12 = this.stream;
      for(;true;) {
        ch$$4 = stream$$12.lookChar();
        if(ch$$4 >= "0" && ch$$4 <= "9" || ch$$4 == "-" || ch$$4 == ".") {
          str$$17 += ch$$4
        }else {
          break
        }
        stream$$12.skip()
      }
      var value$$43 = parseFloat(str$$17);
      if(isNaN(value$$43)) {
        error$$3("Invalid floating point number: " + value$$43)
      }
      return value$$43
    }};
    return PostScriptLexer$$1
  }();
  var ISOAdobeCharset = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", 
  "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", 
  "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", 
  "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", 
  "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron"];
  var ExpertCharset = [".notdef", "space", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", 
  "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", 
  "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", 
  "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", 
  "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"];
  var ExpertSubsetCharset = [".notdef", "space", "dollaroldstyle", "dollarsuperior", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", 
  "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "hyphensuperior", "colonmonetary", "onefitted", "rupiah", "centoldstyle", "figuredash", "hypheninferior", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", 
  "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior"];
  var CIDToUnicodeMaps = {"Adobe-Japan1":[[32, 160], {f:12, c:33}, [45, 8209], {f:46, c:46}, 165, {f:2, c:93}, [95, 818], [96, 768], {f:27, c:97}, 166, 125, [732, 771], [700, 8217], 92, [699, 8216], 124, [126, 8764], {f:3, c:161}, 8260, 402, 0, 164, 8220, 171, {f:2, c:8249}, {f:2, c:64257}, [8210, 8211], 0, 0, [183, 8729], 0, 8226, 8218, 8222, 8221, 187, 0, 0, 191, {f:2, c:769}, [175, 772], {f:3, c:774}, 778, [184, 807], 779, 808, 780, [822, 8212], 198, 170, 321, 216, 338, 186, 230, 305, 322, 248, 
  339, 223, 173, 169, 172, 174, 0, 0, {f:2, c:178}, 181, 185, {f:3, c:188}, {f:6, c:192}, {f:16, c:199}, 0, {f:6, c:217}, {f:6, c:224}, {f:16, c:231}, 0, {f:7, c:249}, 352, 376, 381, [773, 8254], 353, 8482, 382, 0, 8194, {s:91}, 65512, {s:3}, {f:63, c:65377}, {s:243}, [8195, 12288], {f:2, c:12289}, 65292, 65294, 12539, {f:2, c:65306}, 65311, 65281, {f:2, c:12443}, 180, 65344, 168, 65342, 65507, 65343, {f:2, c:12541}, {f:2, c:12445}, 12291, 20189, {f:3, c:12293}, 12540, 8213, 8208, 65295, 65340, [12316, 
  65374], 8214, 65372, 8230, 8229, {s:4}, {f:2, c:65288}, {f:2, c:12308}, 65339, 65341, 65371, 65373, {f:10, c:12296}, 65291, [8722, 65293], 177, 215, 247, 65309, 8800, 65308, 65310, {f:2, c:8806}, 8734, 8756, 9794, 9792, 176, {f:2, c:8242}, 8451, 65509, 65284, {f:2, c:65504}, 65285, 65283, 65286, 65290, 65312, 167, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 9661, 9660, 8251, 12306, 8594, {f:2, c:8592}, 8595, 12307, 8712, 8715, {f:2, c:8838}, {f:2, c:8834}, 8746, 8745, {f:2, 
  c:8743}, 65506, 8658, 8660, 8704, 8707, 8736, 8869, 8978, 8706, 8711, 8801, 8786, {f:2, c:8810}, 8730, 8765, 8733, 8757, {f:2, c:8747}, 8491, 8240, 9839, 9837, 9834, {f:2, c:8224}, 182, 9711, {f:10, c:65296}, {f:26, c:65313}, {f:26, c:65345}, {f:83, c:12353}, {f:86, c:12449}, {f:17, c:913}, {f:7, c:931}, {f:17, c:945}, {f:7, c:963}, {f:6, c:1040}, 1025, {f:32, c:1046}, 1105, {f:26, c:1078}, 20124, 21782, 23043, 38463, 21696, 24859, 25384, 23030, 36898, 33909, 33564, 31312, 24746, 25569, 28197, 
  26093, 33894, 33446, 39925, 26771, 22311, 26017, 25201, 23451, 22992, 34427, 39156, 32098, 32190, 39822, 25110, 31903, 34999, 23433, 24245, 25353, 26263, 26696, 38343, 38797, 26447, 20197, 20234, 20301, 20381, 20553, 22258, 22839, 22996, 23041, 23561, 24799, 24847, 24944, 26131, 26885, 28858, 30031, 30064, 31227, 32173, 32239, 32963, 33806, [12176, 34915], 35586, 36949, 36986, 21307, 20117, 20133, 22495, 32946, 37057, 30959, [12032, 19968], 22769, 28322, 36920, 31282, 33576, 33419, 39983, 20801, 
  21360, 21693, 21729, 22240, 23035, 24341, 39154, 28139, 32996, 34093, 38498, 38512, 38560, 38907, 21515, 21491, 23431, 28879, [12155, 32701], 36802, [12204, 38632], 21359, 40284, 31418, 19985, 30867, [12165, 33276], 28198, 22040, 21764, 27421, 34074, 39995, 23013, 21417, 28006, [12128, 29916], 38287, 22082, 20113, 36939, 38642, 33615, 39180, 21473, 21942, 23344, 24433, 26144, 26355, 26628, 27704, 27891, 27945, 29787, 30408, 31310, 38964, 33521, 34907, 35424, 37613, 28082, 30123, 30410, 39365, 24742, 
  35585, 36234, 38322, 27022, 21421, 20870, 22290, 22576, 22852, 23476, 24310, 24616, 25513, 25588, 27839, 28436, 28814, 28948, 29017, 29141, 29503, 32257, 33398, 33489, 34199, 36960, 37467, 40219, 22633, 26044, 27738, 29989, 20985, 22830, 22885, 24448, 24540, 25276, 26106, 27178, 27431, 27572, 29579, 32705, 35158, 40236, 40206, [12009, 40644], 23713, 27798, 33659, 20740, 23627, 25014, 33222, 26742, 29281, [12036, 20057], 20474, 21368, 24681, 28201, 31311, [12211, 38899], 19979, 21270, 20206, 20309, 
  20285, 20385, 20339, 21152, 21487, 22025, 22799, 23233, 23478, 23521, 31185, 26247, 26524, 26550, 27468, 27827, [12117, 28779], 29634, 31117, [12146, 31166], 31292, 31623, 33457, 33499, 33540, 33655, 33775, 33747, 34662, 35506, 22057, 36008, 36838, 36942, 38686, 34442, 20420, 23784, 25105, [12123, 29273], 30011, 33253, 33469, 34558, 36032, 38597, 39187, 39381, 20171, 20250, 35299, 22238, 22602, 22730, 24315, 24555, 24618, 24724, 24674, 25040, 25106, 25296, 25913, 39745, 26214, 26800, 28023, 28784, 
  30028, 30342, 32117, 33445, 34809, 38283, 38542, [12185, 35997], 20977, 21182, 22806, 21683, 23475, 23830, 24936, 27010, 28079, 30861, 33995, 34903, 35442, 37799, 39608, 28012, 39336, 34521, 22435, 26623, 34510, 37390, 21123, 22151, 21508, 24275, 25313, 25785, 26684, 26680, 27579, 29554, 30906, 31339, 35226, [12179, 35282], 36203, 36611, 37101, 38307, 38548, [12208, 38761], 23398, 23731, 27005, {f:2, c:38989}, 25499, 31520, 27179, 27263, 26806, 39949, 28511, 21106, 21917, 24688, 25324, 27963, 28167, 
  28369, 33883, 35088, 36676, 19988, 39993, 21494, 26907, 27194, 38788, 26666, 20828, 31427, 33970, 37340, 37772, 22107, 40232, 26658, 33541, 33841, 31909, 21E3, 33477, [12129, 29926], 20094, 20355, 20896, 23506, 21002, 21208, 21223, 24059, 21914, 22570, 23014, 23436, 23448, 23515, [12082, 24178], 24185, 24739, 24863, 24931, 25022, 25563, 25954, 26577, 26707, 26874, 27454, 27475, 27735, 28450, 28567, 28485, 29872, [12130, 29976], 30435, 30475, 31487, 31649, 31777, 32233, [12152, 32566], 32752, 32925, 
  33382, 33694, 35251, 35532, 36011, 36996, 37969, 38291, 38289, 38306, 38501, 38867, 39208, 33304, 20024, 21547, 23736, 24012, 29609, 30284, 30524, 23721, 32747, 36107, 38593, 38929, 38996, 39E3, 20225, 20238, 21361, 21916, 22120, 22522, 22855, 23305, 23492, 23696, 24076, 24190, 24524, 25582, 26426, 26071, 26082, 26399, 26827, 26820, 27231, 24112, 27589, 27671, 27773, 30079, 31048, 23395, 31232, 32E3, 24509, 35215, 35352, 36020, 36215, 36556, 36637, 39138, 39438, [12004, 12225, 39740], [12018, 20096], 
  20605, 20736, 22931, 23452, 25135, 25216, 25836, 27450, 29344, 30097, 31047, 32681, 34811, 35516, 35696, 25516, 33738, 38816, 21513, 21507, 21931, 26708, 27224, 35440, 30759, 26485, [12233, 40653], 21364, 23458, 33050, 34384, 36870, 19992, 20037, 20167, 20241, 21450, 21560, 23470, [12088, 24339], 24613, 25937, 26429, 27714, 27762, 27875, 28792, 29699, 31350, 31406, 31496, 32026, 31998, 32102, 26087, [12124, 29275], 21435, 23621, 24040, 25298, 25312, 25369, 28192, 34394, 35377, 36317, 37624, 28417, 
  31142, [12226, 39770], 20136, {f:2, c:20139}, 20379, 20384, 20689, 20807, 31478, 20849, 20982, 21332, 21281, 21375, 21483, 21932, 22659, 23777, 24375, 24394, 24623, 24656, 24685, 25375, 25945, 27211, 27841, 29378, 29421, 30703, 33016, 33029, 33288, 34126, 37111, 37857, 38911, 39255, 39514, 20208, 20957, 23597, 26241, 26989, 23616, 26354, 26997, [12127, 29577], 26704, 31873, 20677, 21220, 22343, [12081, 24062], 37670, [12100, 26020], 27427, 27453, 29748, 31105, 31165, 31563, 32202, 33465, 33740, 
  34943, 35167, 35641, 36817, [12198, 37329], 21535, 37504, 20061, 20534, 21477, 21306, 29399, 29590, 30697, 33510, 36527, 39366, 39368, 39378, 20855, 24858, 34398, 21936, 31354, 20598, 23507, 36935, 38533, 20018, 27355, 37351, 23633, 23624, 25496, 31391, 27795, 38772, 36705, 31402, 29066, 38536, 31874, 26647, 32368, 26705, 37740, 21234, 21531, 34219, 35347, 32676, 36557, 37089, 21350, 34952, 31041, 20418, 20670, 21009, 20804, 21843, 22317, 29674, 22411, 22865, 24418, 24452, 24693, 24950, 24935, 
  25001, 25522, 25658, 25964, 26223, 26690, 28179, 30054, 31293, 31995, 32076, 32153, 32331, 32619, 33550, 33610, 34509, 35336, 35427, 35686, 36605, 38938, 40335, 33464, 36814, 39912, 21127, 25119, 25731, 28608, 38553, 26689, 20625, [12107, 27424], 27770, 28500, [12147, 31348], 32080, [12174, 34880], 35363, [12105, 26376], 20214, 20537, 20518, 20581, 20860, 21048, 21091, 21927, 22287, 22533, 23244, 24314, 25010, 25080, 25331, 25458, 26908, 27177, 29309, [12125, 29356], 29486, 30740, 30831, 32121, 
  30476, 32937, [12178, 35211], 35609, 36066, 36562, 36963, 37749, 38522, 38997, 39443, 40568, 20803, 21407, 21427, 24187, 24358, 28187, 28304, [12126, 29572], 29694, 32067, 33335, [12180, 35328], 35578, 38480, 20046, 20491, 21476, 21628, 22266, 22993, 23396, [12080, 24049], 24235, 24359, [12094, 25144], 25925, 26543, 28246, 29392, 31946, 34996, 32929, 32993, 33776, [11969, 34382], 35463, 36328, 37431, 38599, 39015, [12238, 40723], 20116, 20114, 20237, 21320, 21577, 21566, 23087, 24460, 24481, 24735, 
  26791, 27278, 29786, 30849, 35486, 35492, 35703, 37264, 20062, 39881, 20132, 20348, 20399, 20505, 20502, 20809, 20844, 21151, 21177, 21246, 21402, [12061, 21475], 21521, 21518, 21897, 22353, 22434, 22909, 23380, 23389, 23439, [12079, 24037], 24039, 24055, 24184, 24195, 24218, 24247, 24344, 24658, 24908, 25239, 25304, 25511, 25915, 26114, 26179, 26356, 26477, 26657, 26775, 27083, 27743, 27946, 28009, 28207, 28317, 30002, 30343, 30828, 31295, 31968, 32005, 32024, 32094, 32177, 32789, 32771, 32943, 
  32945, 33108, 33167, 33322, 33618, [12175, 34892], 34913, 35611, 36002, 36092, 37066, 37237, 37489, 30783, 37628, 38308, 38477, 38917, [12217, 39321], [12220, 39640], 40251, 21083, 21163, 21495, 21512, 22741, 25335, 28640, 35946, 36703, 40633, 20811, 21051, 21578, 22269, 31296, 37239, 40288, [12234, 40658], 29508, 28425, 33136, 29969, 24573, 24794, [12219, 39592], 29403, 36796, 27492, 38915, 20170, 22256, 22372, 22718, 23130, 24680, 25031, 26127, 26118, 26681, 26801, 28151, 30165, 32058, [12169, 
  33390], 39746, 20123, 20304, 21449, 21766, 23919, 24038, 24046, 26619, 27801, 29811, 30722, 35408, 37782, 35039, 22352, 24231, 25387, 20661, 20652, 20877, 26368, 21705, 22622, 22971, 23472, 24425, 25165, 25505, 26685, 27507, 28168, 28797, 37319, 29312, 30741, 30758, 31085, 25998, 32048, 33756, 35009, 36617, 38555, 21092, 22312, 26448, 32618, 36001, 20916, 22338, 38442, 22586, 27018, 32948, 21682, 23822, 22524, 30869, 40442, 20316, 21066, 21643, 25662, 26152, 26388, 26613, 31364, 31574, 32034, 37679, 
  26716, 39853, 31545, 21273, 20874, 21047, 23519, 25334, 25774, 25830, 26413, 27578, 34217, 38609, 30352, 39894, 25420, 37638, 39851, [12139, 30399], 26194, 19977, 20632, 21442, [12077, 23665], 24808, 25746, 25955, 26719, 29158, 29642, 29987, 31639, 32386, 34453, 35715, 36059, 37240, 39184, 26028, 26283, 27531, 20181, 20180, 20282, 20351, 21050, 21496, 21490, 21987, 22235, [12064, 22763], 22987, 22985, 23039, [12070, 23376], 23629, 24066, 24107, 24535, 24605, 25351, [12096, 25903], 23388, 26031, 
  26045, 26088, 26525, [12108, 27490], 27515, [12114, 27663], 29509, 31049, 31169, [12151, 31992], 32025, 32043, 32930, 33026, [12164, 33267], 35222, 35422, 35433, 35430, 35468, 35566, 36039, 36060, 38604, 39164, [12013, 27503], 20107, 20284, 20365, 20816, 23383, 23546, 24904, 25345, 26178, 27425, 28363, 27835, 29246, 29885, 30164, 30913, [12144, 31034], [12157, 32780], [12159, 32819], [12163, 33258], 33940, 36766, 27728, [12229, 40575], 24335, 35672, 40235, 31482, 36600, 23437, 38635, 19971, 21489, 
  22519, 22833, 23241, 23460, 24713, 28287, 28422, 30142, 36074, 23455, 34048, 31712, 20594, 26612, 33437, 23649, 34122, 32286, 33294, 20889, 23556, 25448, 36198, 26012, 29038, 31038, 32023, 32773, 35613, [12190, 36554], 36974, 34503, 37034, 20511, 21242, 23610, 26451, 28796, 29237, 37196, 37320, 37675, 33509, 23490, 24369, 24825, 20027, 21462, 23432, [12095, 25163], 26417, 27530, 29417, 29664, 31278, 33131, 36259, 37202, [12216, 39318], 20754, 21463, 21610, 23551, 25480, 27193, 32172, 38656, 22234, 
  21454, 21608, 23447, 23601, 24030, 20462, 24833, 25342, 27954, 31168, 31179, 32066, 32333, 32722, 33261, [12168, 33311], 33936, 34886, 35186, 35728, 36468, 36655, 36913, 37195, 37228, 38598, 37276, 20160, 20303, 20805, [12055, 21313], 24467, 25102, 26580, 27713, 28171, 29539, 32294, 37325, 37507, 21460, 22809, 23487, 28113, 31069, 32302, 31899, 22654, 29087, 20986, 34899, 36848, 20426, 23803, 26149, 30636, 31459, 33308, 39423, 20934, 24490, 26092, 26991, 27529, 28147, 28310, 28516, 30462, 32020, 
  24033, 36981, 37255, 38918, 20966, 21021, 25152, 26257, 26329, 28186, 24246, 32210, 32626, 26360, 34223, 34295, 35576, 21161, 21465, [12069, 22899], 24207, 24464, 24661, 37604, 38500, 20663, 20767, 21213, 21280, 21319, 21484, 21736, 21830, 21809, 22039, 22888, 22974, 23100, 23477, 23558, [12073, 23567], 23569, 23578, 24196, 24202, 24288, 24432, 25215, 25220, 25307, 25484, 25463, 26119, 26124, 26157, 26230, 26494, 26786, 27167, 27189, 27836, 28040, 28169, 28248, 28988, 28966, 29031, 30151, 30465, 
  30813, 30977, 31077, 31216, 31456, 31505, 31911, 32057, 32918, 33750, 33931, 34121, 34909, 35059, 35359, 35388, 35412, 35443, 35937, 36062, 37284, 37478, 37758, 37912, 38556, 38808, 19978, 19976, 19998, 20055, 20887, 21104, 22478, 22580, 22732, 23330, 24120, 24773, 25854, 26465, 26454, 27972, 29366, 30067, 31331, 33976, 35698, 37304, 37664, 22065, 22516, 39166, 25325, 26893, 27542, 29165, 32340, 32887, [12170, 33394], 35302, [12215, 39135], 34645, 36785, 23611, 20280, 20449, 20405, 21767, 23072, 
  23517, 23529, [12092, 24515], 24910, 25391, 26032, 26187, 26862, 27035, 28024, 28145, 30003, 30137, 30495, 31070, 31206, 32051, [12162, 33251], 33455, 34218, 35242, 35386, [12189, 36523], [12191, 36763], 36914, 37341, 38663, [12040, 20154], 20161, 20995, 22645, 22764, 23563, 29978, 23613, 33102, 35338, 36805, 38499, 38765, 31525, 35535, 38920, 37218, 22259, 21416, 36887, 21561, 22402, 24101, 25512, [12116, 27700], 28810, 30561, 31883, 32736, 34928, 36930, 37204, 37648, 37656, 38543, 29790, 39620, 
  23815, 23913, 25968, 26530, 36264, 38619, 25454, 26441, 26905, 33733, 38935, 38592, 35070, 28548, 25722, [12072, 23544], 19990, 28716, 30045, 26159, 20932, 21046, 21218, 22995, 24449, 24615, 25104, 25919, 25972, 26143, 26228, 26866, 26646, 27491, 28165, 29298, [12131, 29983], 30427, 31934, 32854, 22768, 35069, [11972, 35199], 35488, 35475, 35531, 36893, 37266, [11992, 38738], 38745, [12011, 25993], 31246, 33030, 38587, 24109, 24796, 25114, 26021, 26132, 26512, [12143, 30707], 31309, 31821, 32318, 
  33034, 36012, [12186, 36196], 36321, 36447, 30889, 20999, 25305, 25509, 25666, 25240, 35373, 31363, 31680, 35500, 38634, 32118, [12166, 33292], 34633, 20185, 20808, 21315, 21344, 23459, 23554, 23574, 24029, 25126, 25159, 25776, 26643, 26676, 27849, 27973, 27927, 26579, 28508, 29006, 29053, 26059, 31359, 31661, 32218, 32330, 32680, 33146, [12167, 33307], 33337, 34214, 35438, 36046, 36341, 36984, 36983, 37549, 37521, 38275, 39854, 21069, 21892, 28472, 28982, 20840, 31109, 32341, 33203, 31950, 22092, 
  22609, 23720, 25514, 26366, 26365, 26970, 29401, 30095, 30094, 30990, 31062, 31199, 31895, 32032, 32068, 34311, 35380, 38459, 36961, [12239, 40736], 20711, 21109, 21452, 21474, 20489, 21930, 22766, 22863, 29245, 23435, 23652, 21277, 24803, 24819, 25436, 25475, 25407, 25531, 25805, 26089, 26361, 24035, 27085, 27133, 28437, 29157, 20105, 30185, 30456, 31379, 31967, 32207, 32156, 32865, 33609, 33624, 33900, 33980, 34299, 35013, [12187, 36208], 36865, 36973, 37783, 38684, 39442, 20687, 22679, 24974, 
  33235, 34101, 36104, 36896, 20419, 20596, 21063, 21363, 24687, 25417, 26463, 28204, [12188, 36275], 36895, 20439, 23646, 36042, 26063, 32154, 21330, 34966, 20854, 25539, 23384, 23403, 23562, 25613, 26449, 36956, 20182, 22810, 22826, 27760, 35409, 21822, 22549, 22949, 24816, 25171, 26561, 33333, 26965, 38464, 39364, 39464, 20307, 22534, 23550, 32784, 23729, 24111, 24453, 24608, 24907, 25140, 26367, 27888, 28382, 32974, 33151, 33492, 34955, 36024, 36864, 36910, 38538, 40667, 39899, 20195, 21488, 
  [12068, 22823], 31532, 37261, 38988, 40441, 28381, 28711, 21331, 21828, 23429, 25176, 25246, 25299, 27810, 28655, 29730, 35351, 37944, 28609, 35582, 33592, 20967, 34552, 21482, 21481, 20294, 36948, [12192, 36784], 22890, 33073, 24061, 31466, 36799, 26842, [12181, 35895], 29432, 40008, 27197, 35504, 20025, 21336, 22022, 22374, 25285, 25506, 26086, 27470, 28129, 28251, 28845, 30701, 31471, 31658, 32187, 32829, 32966, 34507, 35477, 37723, 22243, 22727, 24382, 26029, 26262, 27264, 27573, 30007, 35527, 
  20516, 30693, 22320, 24347, 24677, 26234, 27744, 30196, 31258, 32622, 33268, 34584, 36933, 39347, 31689, 30044, [12149, 31481], 31569, 33988, 36880, 31209, 31378, 33590, 23265, 30528, 20013, 20210, 23449, 24544, 25277, 26172, 26609, 27880, [12173, 34411], 34935, 35387, 37198, 37619, 39376, 27159, 28710, 29482, 33511, 33879, 36015, 19969, 20806, 20939, 21899, 23541, 24086, 24115, 24193, 24340, 24373, 24427, 24500, 25074, 25361, 26274, 26397, 28526, 29266, 30010, 30522, 32884, 33081, 33144, 34678, 
  35519, 35548, 36229, 36339, 37530, [11985, 12199, 38263], 38914, [12227, 40165], 21189, 25431, 30452, 26389, 27784, 29645, 36035, 37806, 38515, 27941, 22684, 26894, 27084, 36861, 37786, 30171, 36890, 22618, 26626, 25524, 27131, 20291, 28460, 26584, 36795, 34086, 32180, 37716, 26943, 28528, 22378, 22775, 23340, 32044, [12118, 29226], 21514, 37347, 40372, 20141, 20302, 20572, 20597, 21059, 35998, 21576, 22564, 23450, 24093, 24213, 24237, 24311, 24351, 24716, 25269, 25402, 25552, 26799, 27712, 30855, 
  31118, 31243, 32224, 33351, 35330, 35558, 36420, 36883, 37048, 37165, 37336, [12237, 40718], 27877, 25688, 25826, 25973, 28404, 30340, 31515, 36969, 37841, 28346, 21746, 24505, 25764, 36685, 36845, 37444, 20856, 22635, 22825, 23637, 24215, 28155, 32399, 29980, 36028, 36578, 39003, 28857, 20253, 27583, 28593, [12133, 3E4], 38651, 20814, 21520, 22581, 22615, 22956, 23648, 24466, [12099, 26007], 26460, 28193, 30331, 33759, 36077, 36884, 37117, 37709, 30757, 30778, 21162, 24230, [12063, 22303], 22900, 
  24594, 20498, 20826, 20908, 20941, [12049, 20992], 21776, 22612, 22616, 22871, 23445, 23798, 23947, 24764, 25237, 25645, 26481, 26691, 26812, 26847, 30423, 28120, 28271, 28059, 28783, 29128, 24403, 30168, 31095, 31561, 31572, 31570, 31958, 32113, 21040, 33891, 34153, 34276, 35342, 35588, [12182, 35910], 36367, 36867, 36879, 37913, 38518, 38957, 39472, 38360, 20685, 21205, 21516, 22530, 23566, 24999, 25758, 27934, 30643, 31461, 33012, 33796, 36947, 37509, 23776, 40199, 21311, 24471, 24499, 28060, 
  29305, 30563, 31167, 31716, 27602, 29420, 35501, 26627, 27233, 20984, 31361, 26932, 23626, 40182, 33515, 23493, [12195, 37193], 28702, 22136, 23663, 24775, 25958, 27788, 35930, 36929, 38931, 21585, 26311, 37389, 22856, 37027, 20869, 20045, 20970, 34201, 35598, 28760, 25466, 37707, 26978, 39348, 32260, 30071, 21335, 26976, 36575, 38627, 27741, [12038, 20108], 23612, 24336, 36841, 21250, 36049, [12161, 32905], 34425, 24319, [12103, 26085], 20083, [12042, 20837], 22914, 23615, 38894, 20219, 22922, 
  24525, 35469, 28641, 31152, 31074, 23527, 33905, 29483, 29105, 24180, 24565, 25467, 25754, 29123, 31896, 20035, 24316, 20043, 22492, 22178, 24745, 28611, 32013, 33021, 33075, 33215, 36786, 35223, 34468, 24052, 25226, 25773, 35207, 26487, 27874, 27966, 29750, 30772, 23110, 32629, 33453, [12218, 39340], 20467, 24259, 25309, 25490, 25943, 26479, 30403, 29260, 32972, 32954, 36649, 37197, 20493, 22521, 23186, 26757, 26995, 29028, 29437, 36023, 22770, 36064, 38506, 36889, 34687, 31204, 30695, 33833, 
  20271, 21093, 21338, 25293, 26575, 27850, [12137, 30333], 31636, 31893, 33334, 34180, 36843, 26333, 28448, 29190, 32283, 33707, 39361, [12008, 40614], 20989, 31665, 30834, 31672, 32903, 31560, 27368, 24161, 32908, 30033, 30048, [12043, 20843], 37474, 28300, 30330, 37271, 39658, 20240, 32624, 25244, 31567, 38309, 40169, 22138, 22617, 34532, 38588, 20276, 21028, 21322, 21453, 21467, 24070, 25644, 26001, 26495, 27710, 27726, 29256, 29359, 29677, 30036, 32321, 33324, 34281, 36009, 31684, [12196, 37318], 
  29033, 38930, 39151, 25405, 26217, 30058, 30436, 30928, 34115, 34542, 21290, 21329, 21542, 22915, 24199, 24444, 24754, 25161, 25209, 25259, 26E3, [12112, 27604], 27852, 30130, [12138, 30382], 30865, 31192, 32203, 32631, 32933, 34987, 35513, 36027, 36991, [12206, 38750], [12214, 39131], 27147, 31800, 20633, 23614, 24494, 26503, 27608, 29749, 30473, 32654, [12240, 40763], 26570, 31255, 21305, [12134, 30091], 39661, 24422, 33181, 33777, 32920, 24380, 24517, 30050, 31558, 36924, 26727, 23019, 23195, 
  32016, 30334, 35628, 20469, 24426, 27161, 27703, 28418, 29922, 31080, 34920, 35413, 35961, 24287, 25551, 30149, 31186, 33495, 37672, 37618, 33948, 34541, 39981, 21697, 24428, 25996, 27996, 28693, 36007, 36051, 38971, 25935, 29942, 19981, 20184, 22496, 22827, 23142, 23500, 20904, 24067, 24220, 24598, 25206, 25975, 26023, 26222, 28014, [12119, 29238], 31526, 33104, 33178, 33433, 35676, 36E3, 36070, 36212, [12201, 38428], 38468, 20398, 25771, 27494, 33310, 33889, 34154, 37096, 23553, 26963, [12213, 
  39080], 33914, 34135, 20239, 21103, 24489, 24133, 26381, 31119, 33145, 35079, 35206, 28149, 24343, 25173, 27832, 20175, 29289, 39826, 20998, 21563, 22132, 22707, 24996, 25198, 28954, 22894, 31881, 31966, 32027, 38640, [12098, 25991], 32862, 19993, 20341, 20853, 22592, 24163, 24179, 24330, 26564, 20006, 34109, 38281, 38491, [12150, 31859], [12212, 38913], 20731, 22721, 30294, 30887, 21029, 30629, 34065, 31622, 20559, 22793, [12122, 29255], 31687, 32232, 36794, 36820, 36941, 20415, 21193, 23081, 
  24321, 38829, 20445, 33303, 37610, 22275, 25429, 27497, 29995, 35036, 36628, 31298, 21215, 22675, 24917, 25098, 26286, [11935, 27597], 31807, 33769, 20515, 20472, 21253, 21574, 22577, 22857, 23453, 23792, 23791, 23849, 24214, 25265, 25447, 25918, [12101, 26041], 26379, 27861, 27873, 28921, 30770, 32299, 32990, 33459, 33804, 34028, 34562, 35090, 35370, 35914, 37030, 37586, 39165, 40179, 40300, 20047, 20129, 20621, 21078, 22346, 22952, 24125, {f:2, c:24536}, 25151, 26292, 26395, 26576, 26834, 20882, 
  32033, 32938, 33192, 35584, 35980, 36031, 37502, 38450, 21536, 38956, 21271, 20693, [12056, 21340], 22696, 25778, 26420, 29287, 30566, 31302, 37350, 21187, 27809, 27526, 22528, 24140, 22868, 26412, 32763, 20961, 30406, 25705, 30952, 39764, [12231, 40635], 22475, 22969, 26151, 26522, 27598, 21737, 27097, 24149, 33180, 26517, 39850, 26622, 40018, 26717, 20134, 20451, [12060, 21448], 25273, 26411, 27819, 36804, 20397, 32365, 40639, 19975, 24930, 28288, 28459, 34067, 21619, 26410, 39749, [11922, 24051], 
  31637, 23724, 23494, 34588, 28234, 34001, 31252, 33032, 22937, 31885, [11936, 27665], 30496, 21209, 22818, 28961, 29279, [12141, 30683], 38695, 40289, 26891, 23167, 23064, 20901, 21517, 21629, 26126, 30431, 36855, 37528, 40180, 23018, 29277, 28357, 20813, 26825, 32191, 32236, [12207, 38754], 40634, 25720, 27169, 33538, 22916, 23391, [12113, 27611], 29467, 30450, 32178, 32791, 33945, 20786, [12106, 26408], 40665, [12140, 30446], 26466, 21247, 39173, 23588, 25147, 31870, 36016, 21839, 24758, 32011, 
  [12200, 38272], 21249, 20063, 20918, 22812, 29242, 32822, 37326, 24357, [12142, 30690], 21380, 24441, 32004, 34220, 35379, 36493, 38742, 26611, 34222, 37971, 24841, 24840, 27833, 30290, 35565, 36664, 21807, 20305, 20778, 21191, 21451, 23461, 24189, 24736, 24962, 25558, 26377, 26586, 28263, 28044, {f:2, c:29494}, 30001, 31056, 35029, 35480, 36938, [12194, 37009], 37109, 38596, 34701, [12067, 22805], 20104, 20313, 19982, 35465, 36671, 38928, 20653, 24188, 22934, 23481, 24248, 25562, 25594, 25793, 
  26332, 26954, 27096, 27915, 28342, 29076, [12132, 29992], 31407, [12154, 32650], 32768, 33865, 33993, 35201, 35617, 36362, 36965, 38525, 39178, 24958, 25233, 27442, 27779, 28020, 32716, 32764, 28096, 32645, 34746, 35064, 26469, 33713, 38972, 38647, 27931, 32097, 33853, 37226, 20081, 21365, 23888, 27396, 28651, 34253, 34349, 35239, 21033, 21519, 23653, 26446, 26792, 29702, 29827, 30178, 35023, 35041, [12197, 37324], 38626, 38520, 24459, 29575, [12148, 31435], 33870, 25504, 30053, 21129, 27969, 28316, 
  29705, 30041, 30827, 31890, 38534, [12015, 31452], [12243, 40845], 20406, 24942, 26053, 34396, 20102, 20142, 20698, 20001, 20940, 23534, 26009, 26753, 28092, 29471, 30274, 30637, 31260, 31975, 33391, 35538, 36988, 37327, 38517, 38936, [12050, 21147], 32209, 20523, 21400, 26519, 28107, 29136, 29747, 33256, 36650, 38563, 40023, 40607, 29792, 22593, 28057, 32047, 39006, 20196, 20278, 20363, 20919, 21169, 23994, 24604, 29618, 31036, 33491, 37428, 38583, 38646, 38666, 40599, 40802, 26278, 27508, 21015, 
  21155, 28872, 35010, 24265, 24651, 24976, 28451, 29001, 31806, 32244, 32879, 34030, 36899, 37676, 21570, 39791, 27347, 28809, 36034, 36335, 38706, 21172, 23105, 24266, 24324, 26391, 27004, 27028, 28010, 28431, 29282, 29436, 31725, [12156, 32769], 32894, 34635, 37070, 20845, 40595, 31108, 32907, 37682, 35542, 20525, 21644, 35441, 27498, 36036, 33031, 24785, 26528, 40434, 20121, 20120, 39952, 35435, 34241, 34152, 26880, 28286, 30871, 33109, 24332, 19984, 19989, 20010, 20017, [12034, 20022], 20028, 
  [12035, 20031], 20034, 20054, 20056, 20098, [12037, 20101], 35947, 20106, 33298, 24333, 20110, {f:2, c:20126}, [12039, 20128], 20130, 20144, 20147, 20150, 20174, 20173, 20164, 20166, 20162, 20183, 20190, 20205, 20191, 20215, 20233, 20314, 20272, 20315, 20317, 20311, 20295, 20342, 20360, 20367, 20376, 20347, 20329, 20336, 20369, 20335, 20358, 20374, 20760, 20436, 20447, 20430, 20440, 20443, 20433, 20442, 20432, {f:2, c:20452}, 20506, 20520, 20500, 20522, 20517, 20485, 20252, 20470, 20513, 20521, 
  20524, 20478, 20463, 20497, 20486, 20547, 20551, 26371, 20565, 20560, 20552, 20570, 20566, 20588, 20600, 20608, 20634, 20613, 20660, 20658, {f:2, c:20681}, 20659, 20674, 20694, 20702, 20709, 20717, 20707, 20718, 20729, 20725, 20745, {f:2, c:20737}, 20758, 20757, 20756, 20762, 20769, 20794, 20791, 20796, 20795, [12041, 20799], [11918, 20800], 20818, 20812, 20820, 20834, 31480, {f:2, c:20841}, 20846, 20864, [12044, 20866], 22232, 20876, 20873, 20879, 20881, 20883, 20885, [12045, 20886], 20900, 20902, 
  20898, {f:2, c:20905}, [12046, 20907], 20915, {f:2, c:20913}, 20912, 20917, 20925, 20933, 20937, 20955, [12047, 20960], 34389, 20969, 20973, 20976, [12048, 20981], 20990, 20996, 21003, 21012, 21006, 21031, 21034, 21038, 21043, 21049, 21071, 21060, {f:2, c:21067}, 21086, 21076, 21098, 21108, 21097, 21107, 21119, 21117, 21133, 21140, 21138, 21105, 21128, 21137, 36776, 36775, {f:2, c:21164}, 21180, 21173, 21185, 21197, 21207, 21214, 21219, 21222, 39149, 21216, 21235, 21237, 21240, [12051, 21241], 
  21254, 21256, 30008, 21261, 21264, 21263, [12052, 21269], [12053, 21274], 21283, 21295, 21297, 21299, [12054, 21304], 21312, 21318, 21317, 19991, 21321, 21325, 20950, 21342, [12057, 21353], 21358, 22808, 21371, 21367, [12058, 21378], 21398, 21408, 21414, 21413, 21422, 21424, [12059, 21430], 21443, 31762, 38617, 21471, 26364, 29166, 21486, 21480, 21485, 21498, 21505, 21565, 21568, {f:2, c:21548}, 21564, 21550, 21558, 21545, 21533, 21582, 21647, 21621, 21646, 21599, 21617, 21623, 21616, 21650, 21627, 
  21632, 21622, 21636, 21648, 21638, 21703, 21666, 21688, 21669, 21676, 21700, 21704, 21672, 21675, 21698, 21668, 21694, 21692, 21720, {f:2, c:21733}, 21775, 21780, 21757, 21742, 21741, 21754, 21730, 21817, 21824, 21859, 21836, 21806, 21852, 21829, {f:2, c:21846}, 21816, 21811, 21853, 21913, 21888, 21679, 21898, 21919, 21883, 21886, 21912, 21918, 21934, 21884, 21891, 21929, 21895, 21928, 21978, 21957, 21983, 21956, 21980, 21988, 21972, 22036, 22007, 22038, 22014, 22013, 22043, 22009, 22094, 22096, 
  29151, 22068, 22070, 22066, 22072, 22123, 22116, 22063, 22124, 22122, 22150, 22144, 22154, 22176, 22164, 22159, 22181, 22190, 22198, 22196, 22210, 22204, 22209, 22211, 22208, 22216, 22222, 22225, 22227, [12062, 22231], 22254, 22265, 22272, 22271, 22276, 22281, 22280, 22283, 22285, 22291, 22296, 22294, 21959, 22300, 22310, {f:2, c:22327}, 22350, 22331, 22336, 22351, 22377, 22464, 22408, 22369, 22399, 22409, 22419, 22432, 22451, 22436, 22442, 22448, 22467, 22470, 22484, {f:2, c:22482}, 22538, 22486, 
  22499, 22539, 22553, 22557, 22642, 22561, 22626, 22603, 22640, 27584, 22610, 22589, 22649, 22661, 22713, 22687, 22699, 22714, 22750, 22715, 22712, 22702, 22725, 22739, 22737, 22743, 22745, 22744, 22757, 22748, 22756, 22751, 22767, 22778, 22777, {f:3, c:22779}, [12065, 22786], [12066, 22794], 22800, 22811, 26790, 22821, {f:2, c:22828}, 22834, 22840, 22846, 31442, 22869, 22864, 22862, 22874, 22872, 22882, 22880, 22887, 22892, 22889, 22904, 22913, 22941, 20318, 20395, 22947, 22962, 22982, 23016, 23004, 
  22925, {f:2, c:23001}, 23077, 23071, 23057, 23068, 23049, 23066, 23104, 23148, 23113, {f:2, c:23093}, 23138, 23146, 23194, 23228, 23230, 23243, 23234, 23229, 23267, 23255, 23270, 23273, 23254, {f:2, c:23290}, 23308, 23307, 23318, 23346, 23248, 23338, 23350, 23358, 23363, 23365, 23360, 23377, 23381, {f:2, c:23386}, 23397, 23401, 23408, 23411, 23413, 23416, 25992, 23418, [12071, 23424], 23427, 23462, 23480, 23491, 23495, 23497, 23508, 23504, 23524, 23526, 23522, 23518, 23525, 23531, 23536, 23542, 
  23539, 23557, {f:2, c:23559}, 23565, 23571, 23584, [11920, 12074, 23586], 23592, [12075, 23608], 23609, 23617, 23622, 23630, 23635, 23632, 23631, 23409, 23660, [12076, 23662], 20066, 23670, 23673, 23692, 23697, 23700, 22939, 23723, 23739, 23734, 23740, 23735, 23749, 23742, 23751, 23769, 23785, 23805, 23802, 23789, 23948, 23786, 23819, 23829, 23831, 23900, 23839, 23835, 23825, 23828, 23842, 23834, 23833, 23832, 23884, 23890, 23886, 23883, 23916, 23923, 23926, 23943, 23940, 23938, 23970, 23965, 23980, 
  23982, 23997, 23952, 23991, 23996, 24009, 24013, 24019, 24018, 24022, [12078, 24027], 24043, 24050, 24053, 24075, 24090, 24089, 24081, 24091, {f:2, c:24118}, 24132, 24131, 24128, 24142, 24151, 24148, 24159, 24162, 24164, 24135, {f:2, c:24181}, [11923, 12083, 24186], 40636, [12084, 24191], 24224, {f:2, c:24257}, 24264, 24272, 24271, 24278, 24291, 24285, {f:2, c:24282}, 24290, 24289, {f:2, c:24296}, 24300, 24305, 24307, 24304, [12085, 24308], 24312, [12086, 24318], 24323, 24329, 24413, 24412, [12087, 
  24331], 24337, 24342, 24361, 24365, 24376, 24385, 24392, 24396, 24398, 24367, [11924, 24401], {f:2, c:24406}, 24409, [12090, 24417], 24429, [12091, 24435], 24439, 24451, 24450, 24447, 24458, 24456, 24465, 24455, 24478, 24473, 24472, 24480, 24488, 24493, 24508, 24534, 24571, 24548, 24568, 24561, 24541, 24755, 24575, 24609, 24672, 24601, 24592, 24617, 24590, 24625, 24603, 24597, 24619, 24614, 24591, 24634, 24666, 24641, 24682, 24695, 24671, 24650, 24646, 24653, 24675, 24643, 24676, 24642, 24684, 
  24683, 24665, 24705, 24717, 24807, 24707, 24730, 24708, 24731, {f:2, c:24726}, 24722, 24743, 24715, 24801, 24760, 24800, 24787, 24756, 24560, 24765, 24774, 24757, 24792, 24909, 24853, 24838, {f:2, c:24822}, 24832, 24820, 24826, 24835, 24865, 24827, 24817, {f:2, c:24845}, 24903, 24894, 24872, 24871, 24906, 24895, 24892, 24876, 24884, 24893, 24898, 24900, 24947, 24951, {f:3, c:24920}, 24939, 24948, 24943, 24933, 24945, 24927, 24925, 24915, 24949, 24985, 24982, 24967, 25004, 24980, 24986, 24970, 24977, 
  25003, 25006, 25036, 25034, 25033, 25079, 25032, 25027, 25030, 25018, 25035, 32633, 25037, 25062, 25059, 25078, 25082, 25076, 25087, 25085, 25084, 25086, 25088, [12093, 25096], 25097, 25101, 25100, 25108, 25115, 25118, 25121, 25130, 25134, 25136, {f:2, c:25138}, 25153, 25166, 25182, 25187, 25179, 25184, 25192, 25212, 25218, 25225, 25214, {f:2, c:25234}, 25238, 25300, 25219, 25236, 25303, 25297, 25275, 25295, 25343, 25286, 25812, 25288, 25308, 25292, 25290, 25282, 25287, 25243, 25289, 25356, 25326, 
  25329, 25383, 25346, 25352, 25327, 25333, 25424, 25406, 25421, 25628, 25423, 25494, 25486, 25472, 25515, 25462, 25507, 25487, 25481, 25503, 25525, 25451, 25449, 25534, 25577, 25536, 25542, 25571, 25545, 25554, 25590, 25540, 25622, 25652, 25606, 25619, 25638, 25654, 25885, 25623, 25640, 25615, 25703, 25711, 25718, 25678, 25898, 25749, 25747, 25765, 25769, 25736, 25788, 25818, 25810, 25797, 25799, 25787, 25816, 25794, 25841, 25831, 33289, {f:2, c:25824}, 25260, 25827, 25839, 25900, 25846, 25844, 
  25842, 25850, 25856, 25853, 25880, 25884, 25861, 25892, 25891, 25899, [12097, 25908], [11929, 25909], 25911, 25910, 25912, 30027, 25928, 25942, 25941, 25933, 25944, 25950, 25949, 25970, 25976, {f:2, c:25986}, 35722, 26011, 26015, 26027, 26039, 26051, 26054, 26049, 26052, 26060, 26066, 26075, 26073, [12102, 26080], [11931, 26081], 26097, 26482, 26122, 26115, 26107, 26483, {f:2, c:26165}, 26164, 26140, 26191, 26180, 26185, 26177, 26206, 26205, 26212, {f:2, c:26215}, 26207, 26210, 26224, 26243, 26248, 
  26254, 26249, 26244, 26264, 26269, 26305, 26297, 26313, 26302, 26300, 26308, 26296, 26326, 26330, 26336, 26175, 26342, 26345, [12104, 26352], 26357, 26359, 26383, 26390, 26398, {f:2, c:26406}, 38712, 26414, 26431, 26422, 26433, 26424, 26423, 26438, 26462, 26464, 26457, {f:2, c:26467}, 26505, 26480, 26537, 26492, 26474, 26508, 26507, 26534, 26529, 26501, 26551, 26607, 26548, 26604, 26547, 26601, 26552, 26596, 26590, 26589, 26594, 26606, 26553, 26574, 26566, 26599, 27292, 26654, 26694, 26665, 26688, 
  26701, 26674, 26702, 26803, 26667, 26713, 26723, 26743, 26751, 26783, 26767, 26797, 26772, 26781, 26779, 26755, 27310, 26809, 26740, 26805, 26784, 26810, 26895, 26765, 26750, 26881, 26826, 26888, 26840, 26914, 26918, 26849, 26892, 26829, 26836, 26855, 26837, 26934, 26898, 26884, 26839, 26851, 26917, 26873, 26848, 26863, 26920, 26922, 26906, 26915, 26913, 26822, 27001, 26999, 26972, 27E3, 26987, 26964, 27006, 26990, 26937, 26996, 26941, 26969, 26928, 26977, 26974, 26973, 27009, 26986, 27058, 27054, 
  27088, 27071, 27073, 27091, 27070, 27086, 23528, 27082, 27101, 27067, 27075, 27047, 27182, 27025, 27040, 27036, 27029, 27060, 27102, 27112, 27138, 27163, 27135, 27402, 27129, 27122, 27111, 27141, 27057, 27166, 27117, 27156, 27115, 27146, 27154, 27329, 27171, 27155, 27204, 27148, 27250, 27190, 27256, 27207, 27234, 27225, 27238, 27208, 27192, 27170, 27280, 27277, 27296, 27268, {f:2, c:27298}, 27287, 34327, 27323, 27331, 27330, 27320, 27315, 27308, 27358, 27345, 27359, 27306, 27354, 27370, 27387, 
  27397, 34326, 27386, 27410, 27414, 39729, 27423, 27448, 27447, 30428, 27449, 39150, 27463, 27459, 27465, 27472, 27481, 27476, 27483, 27487, 27489, 27512, [12109, 27513], {f:2, c:27519}, 27524, 27523, 27533, 27544, 27541, 27550, 27556, {f:2, c:27562}, 27567, 27570, 27569, [12110, 27571], 27575, 27580, 27590, [12111, 27595], 27603, 27615, 27628, 27627, 27635, 27631, 40638, 27656, 27667, [12115, 27668], 27675, 27684, 27683, 27742, 27733, 27746, 27754, 27778, 27789, 27802, 27777, 27803, 27774, 27752, 
  27763, 27794, 27792, 27844, 27889, 27859, 27837, 27863, 27845, 27869, 27822, 27825, 27838, 27834, 27867, 27887, 27865, 27882, 27935, 34893, 27958, 27947, 27965, 27960, 27929, 27957, 27955, 27922, 27916, 28003, 28051, 28004, 27994, 28025, 27993, 28046, 28053, 28644, 28037, 28153, 28181, 28170, 28085, 28103, 28134, 28088, 28102, 28140, 28126, 28108, 28136, 28114, 28101, 28154, 28121, 28132, 28117, 28138, 28142, 28205, 28270, 28206, 28185, 28274, 28255, 28222, 28195, 28267, 28203, 28278, 28237, 28191, 
  28227, 28218, 28238, 28196, 28415, 28189, 28216, 28290, 28330, 28312, 28361, 28343, 28371, 28349, 28335, 28356, 28338, {f:2, c:28372}, 28303, 28325, 28354, 28319, 28481, 28433, 28748, 28396, 28408, 28414, 28479, 28402, 28465, 28399, 28466, 28364, 28478, 28435, 28407, 28550, 28538, 28536, 28545, 28544, 28527, 28507, 28659, 28525, 28546, 28540, 28504, 28558, 28561, 28610, 28518, 28595, 28579, 28577, 28580, 28601, 28614, 28586, 28639, 28629, 28652, 28628, 28632, 28657, 28654, 28635, 28681, 28683, 
  28666, 28689, 28673, 28687, 28670, 28699, 28698, 28532, 28701, 28696, 28703, 28720, 28734, 28722, 28753, 28771, 28825, 28818, 28847, 28913, 28844, 28856, 28851, 28846, 28895, 28875, 28893, 28889, 28937, 28925, 28956, 28953, 29029, 29013, 29064, 29030, 29026, 29004, 29014, 29036, 29071, 29179, 29060, 29077, 29096, 29100, 29143, 29113, 29118, 29138, 29129, 29140, 29134, 29152, 29164, 29159, 29173, 29180, 29177, 29183, 29197, 29200, 29211, 29224, 29229, 29228, 29232, 29234, [12120, 29243], 29244, 
  [12121, 29247], 29248, 29254, 29259, 29272, 29300, 29310, 29314, 29313, 29319, 29330, 29334, 29346, 29351, 29369, 29362, 29379, 29382, 29380, 29390, 29394, 29410, {f:2, c:29408}, 29433, 29431, 20495, 29463, 29450, 29468, 29462, 29469, 29492, 29487, 29481, 29477, 29502, {f:2, c:29518}, 40664, 29527, 29546, 29544, 29552, 29560, 29557, 29563, 29562, 29640, 29619, 29646, 29627, 29632, 29669, 29678, 29662, 29858, 29701, 29807, 29733, 29688, 29746, 29754, 29781, 29759, 29791, 29785, 29761, 29788, 29801, 
  29808, 29795, 29802, 29814, 29822, 29835, 29854, 29863, 29898, 29903, 29908, 29681, 29920, 29923, 29927, 29929, 29934, 29938, {f:2, c:29936}, 29944, 29943, 29956, 29955, 29957, 29964, 29966, 29965, 29973, 29971, 29982, 29990, 29996, 30012, 30020, 30029, 30026, 30025, 30043, 30022, 30042, 30057, 30052, 30055, 30059, 30061, 30072, 30070, {f:2, c:30086}, 30068, 30090, 30089, 30082, 30100, 30106, 30109, 30117, 30115, 30146, 30131, 30147, 30133, 30141, 30136, 30140, 30129, 30157, 30154, 30162, 30169, 
  30179, 30174, {f:2, c:30206}, 30204, 30209, 30192, 30202, {f:2, c:30194}, 30219, 30221, 30217, 30239, 30247, {f:3, c:30240}, 30244, 30260, 30256, 30267, {f:2, c:30279}, 30278, 30300, 30296, {f:2, c:30305}, {f:3, c:30312}, 30311, 30316, 30320, 30322, [12136, 30326], 30328, 30332, 30336, 30339, 30344, 30347, 30350, 30358, 30355, {f:2, c:30361}, 30384, 30388, {f:3, c:30392}, 30402, 30413, 30422, 30418, 30430, 30433, 30437, 30439, 30442, 34351, 30459, 30472, 30471, 30468, 30505, 30500, 30494, {f:2, 
  c:30501}, 30491, {f:2, c:30519}, 30535, 30554, 30568, 30571, 30555, 30565, 30591, 30590, 30585, 30606, 30603, 30609, 30624, 30622, 30640, 30646, 30649, 30655, {f:2, c:30652}, 30651, 30663, 30669, 30679, 30682, 30684, 30691, 30702, 30716, 30732, 30738, 31014, 30752, 31018, 30789, 30862, 30836, 30854, 30844, 30874, 30860, 30883, 30901, 30890, 30895, 30929, 30918, 30923, 30932, 30910, 30908, 30917, 30922, 30956, 30951, 30938, 30973, 30964, 30983, 30994, 30993, 31001, 31020, 31019, 31040, 31072, 31063, 
  31071, 31066, 31061, 31059, 31098, 31103, 31114, 31133, 31143, 40779, 31146, 31150, 31155, {f:2, c:31161}, 31177, 31189, 31207, 31212, 31201, 31203, 31240, 31245, {f:2, c:31256}, 31264, 31263, 31104, 31281, 31291, 31294, 31287, 31299, 31319, 31305, {f:2, c:31329}, 31337, 40861, 31344, 31353, 31357, 31368, 31383, 31381, 31384, 31382, 31401, 31432, 31408, 31414, 31429, 31428, 31423, 36995, 31431, 31434, 31437, 31439, 31445, 31443, {f:2, c:31449}, 31453, {f:2, c:31457}, 31462, 31469, 31472, 31490, 
  31503, 31498, 31494, 31539, {f:2, c:31512}, 31518, 31541, 31528, 31542, 31568, 31610, 31492, 31565, 31499, 31564, 31557, 31605, 31589, 31604, 31591, {f:2, c:31600}, 31596, 31598, 31645, 31640, 31647, 31629, 31644, 31642, 31627, 31634, 31631, 31581, 31641, 31691, 31681, 31692, 31695, 31668, 31686, 31709, 31721, 31761, 31764, 31718, 31717, 31840, 31744, 31751, 31763, 31731, 31735, 31767, 31757, 31734, 31779, 31783, 31786, 31775, 31799, 31787, 31805, 31820, 31811, 31828, 31823, 31808, 31824, 31832, 
  31839, 31844, 31830, 31845, 31852, 31861, 31875, 31888, 31908, 31917, 31906, 31915, 31905, 31912, 31923, 31922, 31921, 31918, 31929, 31933, 31936, 31941, 31938, 31960, 31954, 31964, 31970, 39739, 31983, 31986, 31988, 31990, 31994, 32006, 32002, 32028, 32021, 32010, 32069, 32075, 32046, 32050, 32063, 32053, 32070, 32115, 32086, 32078, 32114, 32104, 32110, 32079, 32099, 32147, 32137, 32091, 32143, 32125, 32155, 32186, 32174, 32163, 32181, 32199, 32189, 32171, 32317, 32162, 32175, 32220, 32184, 32159, 
  32176, 32216, 32221, 32228, 32222, 32251, 32242, 32225, 32261, 32266, 32291, 32289, 32274, 32305, 32287, 32265, 32267, 32290, 32326, 32358, 32315, 32309, 32313, 32323, 32311, 32306, 32314, 32359, 32349, 32342, 32350, {f:2, c:32345}, 32377, 32362, 32361, 32380, 32379, 32387, 32213, 32381, 36782, 32383, {f:2, c:32392}, 32396, 32402, 32400, {f:2, c:32403}, 32406, 32398, {f:2, c:32411}, 32568, 32570, 32581, {f:3, c:32588}, 32592, [12153, 32593], 32597, 32596, 32600, {f:2, c:32607}, {f:2, c:32616}, 
  32615, 32632, 32642, 32646, 32643, 32648, 32647, 32652, 32660, 32670, 32669, 32666, 32675, 32687, 32690, 32697, 32686, 32694, 32696, 35697, {f:2, c:32709}, 32714, 32725, 32724, 32737, 32742, 32745, 32755, 32761, 39132, 32774, 32772, 32779, [12158, 32786], {f:2, c:32792}, 32796, 32801, 32808, 32831, 32827, 32842, 32838, 32850, 32856, 32858, 32863, 32866, 32872, 32883, 32882, 32880, 32886, 32889, 32893, [12160, 32895], 32900, 32902, 32901, 32923, 32915, 32922, 32941, 20880, 32940, 32987, 32997, 32985, 
  32989, 32964, 32986, 32982, 33033, 33007, 33009, 33051, 33065, 33059, 33071, 33099, 38539, 33094, 33086, 33107, 33105, 33020, 33137, 33134, {f:2, c:33125}, 33140, 33155, 33160, 33162, 33152, 33154, 33184, 33173, 33188, 33187, 33119, 33171, 33193, 33200, 33205, 33214, 33208, 33213, 33216, 33218, 33210, 33225, 33229, 33233, 33241, 33240, 33224, 33242, {f:2, c:33247}, 33255, {f:2, c:33274}, 33278, {f:2, c:33281}, 33285, 33287, 33290, 33293, 33296, 33302, 33321, 33323, 33336, 33331, 33344, 33369, 33368, 
  33373, 33370, 33375, 33380, 33378, 33384, {f:2, c:33386}, 33326, 33393, 33399, [12171, 33400], 33406, 33421, 33426, 33451, 33439, 33467, 33452, 33505, 33507, 33503, 33490, 33524, 33523, 33530, 33683, 33539, 33531, 33529, 33502, 33542, 33500, 33545, 33497, 33589, 33588, 33558, 33586, 33585, 33600, 33593, 33616, 33605, 33583, 33579, {f:2, c:33559}, 33669, 33690, 33706, 33695, 33698, 33686, 33571, 33678, 33671, 33674, 33660, 33717, 33651, 33653, 33696, 33673, 33704, 33780, 33811, 33771, 33742, 33789, 
  33795, 33752, 33803, 33729, 33783, 33799, 33760, 33778, 33805, 33826, 33824, 33725, 33848, 34054, 33787, 33901, 33834, 33852, 34138, 33924, 33911, 33899, 33965, 33902, 33922, 33897, 33862, 33836, 33903, 33913, 33845, 33994, 33890, 33977, 33983, 33951, 34009, 33997, 33979, 34010, 34E3, 33985, 33990, 34006, 33953, 34081, 34047, 34036, {f:2, c:34071}, 34092, 34079, 34069, 34068, 34044, 34112, 34147, 34136, 34120, 34113, 34306, 34123, 34133, 34176, 34212, 34184, 34193, 34186, 34216, 34157, 34196, 34203, 
  34282, 34183, 34204, 34167, 34174, 34192, 34249, 34234, 34255, 34233, 34256, 34261, 34269, 34277, 34268, 34297, 34314, 34323, 34315, 34302, 34298, 34310, 34338, 34330, 34352, 34367, [12172, 34381], 20053, 34388, 34399, 34407, 34417, 34451, 34467, {f:2, c:34473}, {f:2, c:34443}, 34486, 34479, 34500, 34502, 34480, 34505, 34851, 34475, 34516, 34526, 34537, 34540, 34527, 34523, 34543, 34578, 34566, 34568, 34560, 34563, 34555, 34577, 34569, 34573, 34553, 34570, 34612, 34623, 34615, 34619, 34597, 34601, 
  34586, 34656, 34655, 34680, 34636, 34638, 34676, 34647, 34664, 34670, 34649, 34643, 34659, 34666, 34821, 34722, 34719, 34690, 34735, 34763, 34749, 34752, 34768, 38614, 34731, 34756, 34739, 34759, 34758, 34747, 34799, 34802, 34784, 34831, 34829, 34814, {f:2, c:34806}, 34830, 34770, 34833, 34838, 34837, 34850, 34849, 34865, 34870, 34873, 34855, 34875, 34884, 34882, 34898, 34905, 34910, 34914, 34923, 34945, 34942, 34974, 34933, 34941, 34997, 34930, 34946, 34967, 34962, 34990, 34969, 34978, 34957, 
  34980, 34992, 35007, 34993, {f:2, c:35011}, 35028, {f:2, c:35032}, 35037, 35065, 35074, 35068, 35060, 35048, 35058, 35076, 35084, 35082, 35091, 35139, 35102, 35109, {f:2, c:35114}, 35137, 35140, 35131, 35126, 35128, 35148, 35101, 35168, 35166, 35174, 35172, 35181, 35178, 35183, 35188, 35191, [12177, 35198], 35203, 35208, 35210, 35219, 35224, 35233, 35241, 35238, 35244, 35247, 35250, 35258, 35261, {f:2, c:35263}, 35290, {f:2, c:35292}, 35303, 35316, 35320, 35331, 35350, 35344, 35340, 35355, 35357, 
  35365, 35382, 35393, 35419, 35410, 35398, 35400, 35452, 35437, 35436, 35426, 35461, 35458, 35460, 35496, 35489, 35473, {f:2, c:35493}, 35482, 35491, 35524, 35533, 35522, 35546, 35563, 35571, 35559, 35556, 35569, 35604, 35552, 35554, 35575, 35550, 35547, 35596, 35591, 35610, 35553, 35606, 35600, 35607, 35616, 35635, 38827, 35622, 35627, 35646, 35624, 35649, 35660, 35663, 35662, 35657, 35670, 35675, 35674, 35691, 35679, 35692, 35695, 35700, 35709, 35712, 35724, 35726, {f:2, c:35730}, 35734, {f:2, 
  c:35737}, 35898, 35905, 35903, 35912, 35916, 35918, 35920, [12183, 35925], 35938, 35948, [12184, 35960], 35962, 35970, 35977, 35973, 35978, {f:2, c:35981}, 35988, 35964, 35992, 25117, 36013, 36010, 36029, {f:2, c:36018}, 36014, 36022, 36040, 36033, 36068, 36067, 36058, 36093, {f:2, c:36090}, {f:2, c:36100}, 36106, 36103, 36111, 36109, 36112, 40782, 36115, 36045, 36116, 36118, 36199, 36205, 36209, 36211, 36225, 36249, 36290, 36286, 36282, 36303, 36314, 36310, 36300, 36315, 36299, {f:2, c:36330}, 
  36319, 36323, 36348, {f:2, c:36360}, 36351, {f:2, c:36381}, 36368, 36383, 36418, 36405, 36400, 36404, 36426, 36423, 36425, 36428, 36432, 36424, 36441, 36452, 36448, 36394, 36451, 36437, 36470, 36466, 36476, 36481, 36487, 36485, 36484, 36491, 36490, 36499, 36497, 36500, 36505, 36522, 36513, 36524, 36528, 36550, 36529, 36542, 36549, 36552, 36555, 36571, 36579, 36604, 36603, 36587, 36606, 36618, 36613, 36629, 36626, 36633, 36627, 36636, 36639, 36635, 36620, 36646, 36659, 36667, 36665, 36677, 36674, 
  36670, 36684, 36681, 36678, 36686, 36695, 36700, {f:3, c:36706}, 36764, 36767, 36771, 36781, 36783, 36791, 36826, 36837, 36834, 36842, 36847, 36999, 36852, 36869, {f:2, c:36857}, 36881, 36885, 36897, 36877, 36894, 36886, 36875, 36903, 36918, 36917, 36921, 36856, {f:4, c:36943}, 36878, 36937, 36926, 36950, 36952, 36958, 36968, 36975, 36982, 38568, 36978, 36994, 36989, 36993, 36992, 37002, 37001, 37007, 37032, 37039, 37041, 37045, 37090, 37092, 25160, 37083, 37122, 37138, 37145, 37170, 37168, 37194, 
  37206, 37208, 37219, 37221, 37225, 37235, 37234, 37259, 37257, 37250, 37282, 37291, 37295, 37290, 37301, 37300, 37306, {f:2, c:37312}, 37321, 37323, 37328, 37334, 37343, 37345, 37339, 37372, {f:2, c:37365}, 37406, 37375, 37396, 37420, 37397, 37393, 37470, 37463, 37445, 37449, 37476, 37448, 37525, 37439, 37451, 37456, 37532, 37526, 37523, 37531, 37466, 37583, 37561, 37559, 37609, 37647, 37626, 37700, 37678, 37657, 37666, 37658, 37667, 37690, 37685, 37691, 37724, 37728, 37756, 37742, 37718, 37808, 
  {f:2, c:37804}, 37780, 37817, {f:2, c:37846}, 37864, 37861, 37848, 37827, 37853, 37840, 37832, 37860, 37914, 37908, 37907, 37891, 37895, 37904, 37942, 37931, 37941, 37921, 37946, 37953, 37970, 37956, 37979, 37984, 37986, 37982, 37994, 37417, 38E3, 38005, 38007, 38013, 37978, 38012, 38014, 38017, 38015, 38274, 38279, 38282, 38292, 38294, {f:2, c:38296}, 38304, 38312, 38311, 38317, 38332, 38331, 38329, 38334, 38346, 28662, 38339, 38349, 38348, 38357, 38356, 38358, 38364, 38369, 38373, 38370, 38433, 
  38440, {f:2, c:38446}, 38466, 38476, 38479, 38475, 38519, 38492, 38494, 38493, 38495, 38502, 38514, 38508, 38541, 38552, 38549, 38551, 38570, 38567, {f:2, c:38577}, 38576, 38580, [12202, 38582], 38584, [12203, 38585], 38606, 38603, 38601, 38605, 35149, 38620, 38669, 38613, 38649, 38660, 38662, 38664, 38675, 38670, 38673, 38671, 38678, 38681, 38692, 38698, 38704, 38713, {f:2, c:38717}, 38724, 38726, 38728, 38722, 38729, 38748, 38752, 38756, 38758, 38760, 21202, 38763, 38769, 38777, 38789, 38780, 
  38785, 38778, 38790, 38795, {f:2, c:38799}, 38812, 38824, 38822, 38819, {f:2, c:38835}, 38851, 38854, 38856, [12209, 38859], 38876, [12210, 38893], 40783, 38898, 31455, 38902, 38901, 38927, 38924, 38968, 38948, 38945, 38967, 38973, 38982, 38991, 38987, 39019, {f:3, c:39023}, 39028, 39027, 39082, 39087, 39089, 39094, 39108, 39107, 39110, 39145, 39147, 39171, 39177, 39186, 39188, 39192, 39201, {f:2, c:39197}, 39204, 39200, 39212, 39214, {f:2, c:39229}, 39234, 39241, 39237, 39248, 39243, {f:2, c:39249}, 
  39244, 39253, {f:2, c:39319}, 39333, {f:2, c:39341}, 39356, 39391, 39387, 39389, 39384, 39377, {f:2, c:39405}, {f:2, c:39409}, 39419, 39416, 39425, 39439, 39429, 39394, 39449, 39467, 39479, 39493, 39490, 39488, 39491, 39486, 39509, 39501, 39515, 39511, 39519, 39522, 39525, 39524, 39529, 39531, 39530, 39597, 39600, 39612, 39616, 39631, 39633, {f:2, c:39635}, 39646, [12221, 39647], {f:2, c:39650}, 39654, 39663, 39659, 39662, 39668, 39665, 39671, 39675, 39686, 39704, 39706, 39711, {f:2, c:39714}, 
  [12222, 39717], {f:4, c:39719}, 39726, [12223, 39727], [12224, 39730], 39748, 39747, 39759, {f:2, c:39757}, 39761, 39768, 39796, 39827, 39811, 39825, {f:2, c:39830}, {f:2, c:39839}, 39848, 39860, 39872, 39882, 39865, 39878, 39887, {f:2, c:39889}, 39907, 39906, 39908, 39892, 39905, 39994, 39922, 39921, 39920, 39957, 39956, 39945, 39955, 39948, 39942, 39944, 39954, 39946, 39940, 39982, 39963, 39973, 39972, 39969, 39984, 40007, 39986, 40006, 39998, 40026, 40032, 40039, 40054, 40056, 40167, 40172, 
  40176, 40201, 40200, 40171, 40195, 40198, 40234, 40230, 40367, 40227, 40223, 40260, 40213, 40210, 40257, 40255, 40254, 40262, 40264, {f:2, c:40285}, 40292, 40273, 40272, 40281, 40306, 40329, 40327, 40363, 40303, 40314, 40346, 40356, 40361, 40370, 40388, 40385, 40379, 40376, 40378, 40390, 40399, 40386, 40409, 40403, 40440, 40422, 40429, 40431, 40445, {f:2, c:40474}, 40478, [12228, 40565], 40569, 40573, 40577, 40584, {f:2, c:40587}, 40594, 40597, 40593, 40605, [12230, 40613], 40617, 40632, 40618, 
  40621, 38753, 40652, {f:3, c:40654}, 40660, 40668, 40670, 40669, 40672, 40677, 40680, 40687, 40692, {f:2, c:40694}, [12235, 40697], {f:2, c:40699}, [12236, 40701], {f:2, c:40711}, 30391, 40725, 40737, 40748, 40766, [12241, 40778], [12242, 40786], 40788, 40803, {f:3, c:40799}, {f:2, c:40806}, 40812, 40810, 40823, 40818, 40822, 40853, [12244, 40860], [12245, 40864], 22575, 27079, 36953, 29796, 0, {f:76, c:9472}, {f:20, c:9312}, {f:10, c:8544}, 13129, 13076, 0, 13133, 0, 13095, 0, 13110, 13137, 0, 
  13069, 13094, 0, 13099, 13130, 0, {f:3, c:13212}, {f:2, c:13198}, 13252, 13217, 12317, 12319, 8470, 13261, 0, {f:5, c:12964}, {f:2, c:12849}, 12857, 13182, 13181, 13180, 8750, 8721, {s:3}, 8735, 8895, 0, 0, 21854, {s:7}, 167133, 0, 0, 28976, 0, 40407, {s:4}, 64054, 0, 0, 22169, 15694, {s:4}, 20448, 0, 0, 36544, 0, 194797, {s:4}, 153716, 32363, 33606, 167670, {s:3}, 40572, 0, 0, 26171, 0, 40628, {s:4}, 26629, {s:5}, 23650, 0, 194780, 0, 32353, 0, 0, 64070, {s:5}, 34083, 37292, {s:7}, 34796, {s:8}, 
  25620, 0, 0, 39506, {s:4}, 64074, 0, 194692, {s:4}, 31774, {s:6}, 64016, 25681, 0, 0, 63980, 22625, 39002, 0, 194679, {s:3}, 31153, 0, 28678, {s:9}, 22218, {s:3}, 21085, 0, 28497, 37297, {s:10}, 64106, {s:6}, 38960, 0, 40629, {s:9}, 33802, 63939, {f:2, c:63890}, 63897, 0, 34847, 194575, 0, 194771, 194584, {s:7}, 137754, 23643, {s:4}, 25890, 0, 0, 26618, 0, 26766, 0, 148432, 194848, {s:21}, 34110, {s:15}, 30562, {s:12}, 65075, 0, {f:2, c:65073}, {s:4}, 65072, {f:2, c:65077}, {f:2, c:65081}, 0, 0, 
  {f:2, c:65079}, {f:2, c:65087}, {f:2, c:65085}, {f:4, c:65089}, {f:2, c:65083}, {s:41}, {f:3, c:12436}, 0, 0, 22099, {s:41}, 65508, 65287, 65282, 0, 9665, 9655, 8681, 8679, 8678, 8680, 9634, 9831, 9825, 9828, 9826, 13216, 13218, {f:2, c:13220}, 13207, 8467, 13208, 13235, 13234, 13233, 13232, {f:3, c:13189}, 13259, 13200, 13268, 13206, 13090, 13078, 13080, 13077, 13059, 13091, 13143, 13122, 13113, 13115, 13056, 13105, 13127, 13086, 13098, 0, 13183, 8481, 9742, 12342, 12320, {s:3}, {f:9, c:9352}, 
  {f:20, c:9332}, 12881, {f:10, c:8560}, {f:10, c:12882}, {f:26, c:9372}, 12867, 12861, 12863, 12852, 12856, 12851, 12860, 12866, 12862, 12854, 12853, 12859, 12864, 12858, 12976, 12973, 12969, 12975, 12948, 12970, 12952, 12971, 12946, 12945, 12947, 12972, 12974, 12950, {s:8}, {f:3, c:9131}, 0, {f:3, c:9127}, 0, 13260, 13061, 0, 0, 13215, 13219, 13222, 0, 0, 12958, {f:2, c:13192}, 13256, 8749, 0, 12848, {f:6, c:12842}, 12855, 12865, 10145, {s:3}, 9673, 9824, 9829, 9827, 9830, {f:4, c:9728}, 9758, 
  {f:2, c:9756}, 9759, 12953, 9450, {f:2, c:8554}, {s:3}, {f:8, c:9601}, 9615, 9614, 9613, 9612, 9611, 9610, 9609, {f:2, c:9620}, {f:2, c:9581}, 9584, 9583, 9552, 9566, 9578, 9569, {f:2, c:9698}, 9701, 9700, 0, 0, {f:3, c:9585}, {s:20}, 20956, 29081, {f:9, c:10102}, {s:3}, {f:2, c:8570}, {s:3}, 8575, 8458, 8457, 0, 0, 12292, 8646, {f:2, c:8644}, 0, {f:4, c:12535}, 0, 0, 12957, {s:3}, 13179, {s:3}, 13107, 13134, {s:30}, 32394, 35100, 37704, 37512, 34012, 20425, 28859, 26161, 26824, 37625, 26363, 24389, 
  [12033, 20008], 20193, 20220, 20224, 20227, 20281, 20310, 20370, 20362, 20378, 20372, 20429, 20544, 20514, 20479, 20510, 20550, 20592, 20546, 20628, 20724, 20696, 20810, 20836, 20893, 20926, 20972, 21013, 21148, 21158, 21184, 21211, 21248, 0, 21284, 21362, 21395, 21426, 21469, 64014, 21660, 21642, 21673, 21759, 21894, 22361, 22373, 22444, 22472, 22471, 64015, 0, 22686, 22706, 22795, 22867, 22875, 22877, 22883, 22948, 22970, 23382, 23488, 29999, 23512, 0, 23582, 23718, 23738, 23797, 23847, 23891, 
  0, 23874, 23917, {f:2, c:23992}, 24016, 24353, 24372, 24423, 24503, 24542, 24669, 24709, 24714, 24798, 24789, 24864, 24818, 24849, 24887, 24880, 24984, 25107, 25254, 25589, 25696, 25757, 25806, 25934, 26112, 26133, 26121, 26158, 0, 26148, 26213, 26199, 26201, 64018, 26227, 26265, 26272, 26290, 26303, 26362, 26382, 0, 26470, 26555, 26706, 26560, 0, 26692, 26831, 64019, 26984, 64020, 27032, 27106, 27184, 27243, 27206, 27251, 27262, 27362, 27364, 27606, 27711, 27740, 27782, 27759, 27866, 27908, 28039, 
  28015, 28054, 28076, 28111, 28152, 28146, 28156, 28217, 28252, 28199, 28220, 28351, 28552, 28597, 28661, 28677, 28679, 28712, 28805, 28843, 28943, 28932, 29020, {f:2, c:28998}, 0, 29121, 29182, 29361, 29374, 29476, 64022, 29559, 29629, 29641, 29654, 29667, 29650, 29703, 29685, 29734, 29738, 29737, 29742, 0, 29833, 29855, 29953, 30063, 30338, 30364, 30366, 30363, 30374, 64023, 30534, 21167, 30753, 30798, 30820, 30842, 31024, {f:3, c:64024}, 31124, 64027, 31131, 31441, 31463, 64028, 31467, 31646, 
  64029, 32072, 0, 32183, 32160, 32214, 32338, 32583, 32673, 64030, 33537, 33634, 33663, 33735, 33782, 33864, 33972, 34131, 34137, 34155, 64031, 34224, {f:2, c:64032}, 34823, 35061, 35346, 35383, 35449, 35495, 35518, 35551, 64034, 35574, 35667, 35711, 36080, 36084, 36114, 36214, 64035, 36559, 0, 64037, 36967, 37086, 64038, 37141, 37159, 37338, 37335, 37342, {f:2, c:37357}, {f:2, c:37348}, 37382, 37392, 37386, 37434, 37440, 37436, 37454, 37465, 37457, 37433, 37479, 37543, {f:2, c:37495}, 37607, 37591, 
  37593, 37584, 64039, 37589, 37600, 37587, 37669, 37665, 37627, 64040, 37662, 37631, 37661, 37634, 37744, 37719, 37796, 37830, 37854, 37880, 37937, 37957, 37960, 38290, 0, 64041, 38557, 38575, 38707, 38715, 38723, 38733, 38735, [12205, 38737], 0, 38999, 39013, {f:2, c:64042}, 39207, 64044, 39326, 39502, 39641, 39644, 39797, 39794, 39823, 39857, 39867, 39936, 40304, 40299, 64045, 40473, 40657, {s:636}, 8364, 8486, 0, 0, 64256, {f:2, c:64259}, 257, 299, 363, 275, 333, 256, 298, 362, 274, 332, {f:4, 
  c:8539}, {f:2, c:8531}, 8304, {f:6, c:8308}, {f:10, c:8320}, 461, 282, 0, 7868, 463, 0, 296, 465, 0, 467, 366, 360, 462, 283, 0, 7869, 464, 0, 297, 466, 0, 468, 367, 361, 593, 8049, 8048, 509, 0, 596, 0, 0, 601, 0, 0, 602, 0, 0, 603, 8051, 8050, 0, 331, 629, 652, 0, 0, 658, 643, 720, {s:682}, {f:10, c:12832}, {s:108}, {f:4, c:12892}, {f:15, c:12977}, {s:50}, {f:26, c:9424}, {f:26, c:9398}, {s:48}, {f:47, c:13008}, 0, {f:10, c:12928}, 12944, {f:6, c:12938}, 0, 12959, {s:6}, {f:2, c:12960}, 12955, 
  12954, 12963, 12962, 12951, 0, 12956, 12949, {s:6}, 9676, {s:11}, 10111, {f:10, c:9451}, {s:510}, 8414, {s:815}, 13274, {s:3}, 8448, 13250, 0, 0, 8453, 0, 13169, 0, 0, 13197, 13211, {s:3}, {f:2, c:13271}, {s:3}, {f:2, c:13057}, 13060, 13062, 0, 13064, 0, 13063, 13066, 0, 13065, 0, 13067, 0, 13068, {f:6, c:13070}, 0, 13079, 0, 13081, 0, {f:4, c:13082}, {f:3, c:13087}, 13092, 0, 13093, 0, 0, {f:2, c:13096}, 0, 13101, 0, 0, {f:3, c:13102}, 13106, 0, 0, {f:2, c:13108}, 13116, {s:3}, 13111, 0, 13112, 
  13114, 13117, 13121, {f:3, c:13118}, {f:4, c:13123}, 13128, {f:2, c:13131}, {f:2, c:13135}, 0, 0, 13138, 13140, 0, 0, 13139, {f:2, c:13141}, {s:132}, 8501, 976, 8714, 8463, 0, 981, 987, 977, 0, {f:2, c:9832}, 9836, {s:5}, 12347, 0, {f:3, c:12339}, 8252, 8265, {s:5}, 8723, 0, 8771, {f:2, c:8818}, {s:6}, {f:2, c:12312}, {f:2, c:65375}, {s:10}, 9115, {f:2, c:9117}, 9120, {s:4}, 9121, {f:2, c:9123}, 9126, {s:12}, [9116, 9119, 9122, 9125, 9130], {s:8}, 9986, 0, 0, 12349, 0, 12447, 0, 0, 8709, 8864, 
  8854, 8856, 8853, 8855, {s:4}, 9664, 9654, {s:4}, 8656, 8596, {f:2, c:8600}, {f:2, c:8598}, 8652, 8651, {s:10}, 12336, 8967, {s:8}, 10048, 10047, {s:7}, 9643, 0, 9642, 0, 10010, {s:12}, 9702, {s:4}, 10070, {s:379}, {f:2, c:65093}, {s:679}, 64103, 64098, 32227, [12232, 40643], 28331, 64082, 64061, 64069, 64062, 27114, 28212, 64096, 64071, 64056, 64066, 64078, 34395, 64105, 64052, 64099, 25581, 25802, 30799, 64084, 63856, 64077, 64097, 64072, 64076, {f:2, c:64091}, 64081, 64067, 64090, 28041, 29376, 
  0, 194885, 64086, 64080, 64049, 64059, 24034, 64063, 64101, 21373, 64055, 64095, 24501, 64064, 0, 64083, 0, 64085, 64104, 64068, 64089, 26202, 64053, 64075, 64100, 64065, 64048, 0, 64057, 64051, 27493, 64058, 27599, 64050, 25150, 64079, 63773, 63964, 63798, 28122, 63952, 26310, 27511, 64087, 37706, 0, 37636, {s:120}, 133390, {s:120}, 35999, 11991, [11965, 158033], {s:5}, 37555, 38321, 0, 0, 194812, {s:13}, 194965, {s:8}, 194794, 0, 26478, 11974, 0, 194594, {s:13}, 13314, 0, 0, 26083, {s:4}, 134071, 
  {s:10}, 171339, 0, 194611, 24378, {s:8}, 11945, 0, 20465, {s:7}, 63753, {s:7}, 11964, 0, 0, 194732, 26435, {s:3}, 133732, 35329, 25142, 0, 0, 21555, 23067, {s:3}, 25221, 0, 0, 194819, {s:6}, 21567, {s:9}, 27506, {s:4}, 29986, 19256, 0, 0, 24063, {s:6}, 194827, 29626, 134047, {s:3}, 194600, 0, 194849, {s:5}, 194623, {s:16}, 194675, {f:2, c:11916}, 23577, {s:3}, 131083, 23426, 194642, {s:5}, 11997, [11999, 39136], [11998, 169599], 14221, 0, [11927, 14586], 0, 194887, 0, [11909, 20155], 131490, {s:7}, 
  13599, 0, 194738, 0, 0, [11971, 35200], {s:4}, 31237, {s:4}, 35498, 0, 32085, 0, 28568, {s:7}, 25591, 30246, {s:4}, [11978, 163767], {s:5}, 146686, {s:5}, 13351, 0, 0, 33067, 0, 0, 194842, {s:5}, 11950, {s:5}, 194714, {s:3}, 194831, {s:19}, 22305, 135741, 194586, 0, 64003, {s:7}, 21534, 15240, 20839, {s:4}, 63839, {s:9}, 20023, {s:13}, [11946, 150804], 24421, 23020, 194658, 0, 24217, {s:46}, 13416, {s:8}, 21200, {s:9}, 26625, 0, 195024, 195039, {s:5}, 153215, 0, 0, 11959, {s:4}, 36534, 63775, {s:3}, 
  63875, {s:5}, 31867, 63906, 0, 63898, 0, [11961, 32770], 157360, {s:4}, [11911, 132648], 0, 0, 131210, 194604, [11915, 13630], {s:4}, 21589, 0, 22841, 0, 0, 23414, 194669, 23572, 14306, 23782, 0, 20040, 0, 0, 194742, {s:4}, 158105, 25371, 0, 0, 26211, 0, 194779, 0, 0, 27126, 27014, {s:3}, 27596, 0, 28183, 0, 0, 27818, {s:3}, [11942, 20012], 0, 0, 29935, 30069, 30188, 30286, 16305, 30570, 30633, {s:6}, 31571, 0, 0, 16996, {s:3}, 194924, 0, 0, 32328, {s:5}, 11955, {s:4}, 33089, 17491, 0, [11966, 
  33401], [11967, 64094], [11968, 64093], 0, 20857, 33626, {s:3}, 17701, 0, 34292, 131248, {s:4}, 34429, 0, 13358, 35014, {s:6}, 18406, {s:8}, 36808, {s:19}, 166279, 0, 0, 167447, 0, 0, 38969, {s:6}, 39432, {s:4}, 39903, {s:10}, 148206, {s:5}, 21385, 0, 64017, 194785, 0, 146622, 132625, 0, {f:2, c:19972}, 19999, 20011, {f:2, c:20015}, {f:2, c:20032}, 20036, [11907, 20058], 20095, 20109, 20118, 20153, 20176, 20192, 20221, 20223, 20235, 20245, 20320, 20283, 20297, 20308, 20346, {f:2, c:20349}, 20375, 
  20414, 20431, 20477, {f:2, c:20480}, 20496, 20507, 20519, 20526, 20567, 20582, 20586, 20539, 20623, 20630, 20636, 20684, 20710, 20713, 20719, 20744, 20747, 20752, 20763, 20766, 20831, 20897, 20924, 0, 20974, 20980, 20993, [11913, 20994], 21011, 21065, 21089, 21094, 21139, 21192, 21232, {f:2, c:21258}, 21310, 21324, 21323, 21345, 21356, 21419, 21466, 21478, 21493, 21543, 21581, 21606, 21611, 21620, 21645, 21654, 21665, 21677, 21689, 21695, 21702, 21709, 21774, 21803, 21813, 21834, 21856, 0, 21896, 
  21902, 22024, {f:2, c:22030}, 22071, 22079, 22089, 22091, 22095, 22118, 22121, 22127, {f:2, c:22129}, 22165, 22170, {f:2, c:22188}, 22193, 22217, 22237, 22244, 22282, 22293, 22307, 22319, {f:2, c:22323}, 22348, 22384, 22412, 22428, 22456, 22502, 22509, {f:2, c:22517}, 22527, 22537, 22560, 22578, 22652, 22656, 22697, 22734, 22736, 22740, 22746, 22761, 22796, 22820, 22831, 22881, 22893, 22986, 22994, 23005, {f:2, c:23011}, 23044, 23052, 23075, 23111, 23125, 23139, 23149, 23166, 23198, 23207, 23212, 
  23219, 23264, 23296, 23321, 23333, 23341, 23361, 23420, {f:2, c:23422}, 23434, [11919, 23587], 23595, 23600, 23651, 23657, 23676, 23755, 23762, 23796, 23844, 23846, 23875, 23878, 23882, 23954, 23956, 23961, 23968, 24024, 24032, 24056, 24064, 24082, {f:2, c:24084}, 24088, 24110, 24152, {f:2, c:24171}, 24232, 24234, {f:2, c:24254}, 0, 24274, 24327, 24334, {f:2, c:24348}, 24354, 24360, 24374, 24379, 24384, [12089, 24400], 24408, 24420, 24457, 24476, 24487, 24484, 24495, 24504, [11926, 24516], 24521, 
  24545, 24553, 24557, 24572, 24599, 24602, 24627, 24673, 24703, 24734, 24740, 24752, 24779, 24795, 24824, {f:3, c:24850}, 24860, 24956, 24973, 24991, 25E3, 25026, 25055, 25109, 25129, 25155, 25158, [11928, 25164], 25169, 25174, 25284, 25340, 25354, 25357, 25368, 25401, {f:2, c:25410}, 25445, 25460, 25469, 25476, 25479, 25488, 25502, 25553, 25564, 25609, 25616, 25634, 25684, 25691, 25709, 25723, {f:2, c:25790}, 25829, 25847, 25851, 25860, 25878, 25881, 25927, 25959, 25985, 25989, 26050, 26096, 26098, 
  26156, 26188, {f:2, c:26203}, 26209, 26219, 0, 26276, 26312, 26348, 26373, 26387, 26419, 26440, 26444, 26486, 26491, 26544, 26546, 26617, 26583, 26585, 26608, 26668, {f:2, c:26672}, 26715, 26738, 26741, 26746, 26756, 26789, 26802, 26832, 26838, 26856, 26861, {f:2, c:26864}, 26876, 26897, 26899, 26933, 26939, 26967, 26979, 26994, {f:2, c:27007}, 27046, 27053, 27063, {f:2, c:27094}, 27137, 27151, 27157, 27176, 27188, 27198, 27205, {f:2, c:27216}, 27222, 27227, 27267, 27273, 27281, {f:3, c:27293}, 
  27356, 27367, 27372, 27422, 27428, 27445, 27462, 27478, 27488, 27522, 27582, 27617, 27633, 27664, 27699, [11937, 27701], 11938, 27737, 27766, 27771, 27781, 27797, 27804, 27856, 27860, 27862, 27872, {f:2, c:27883}, 27886, 27914, 27918, 27921, 27950, 27991, 27998, 28005, 28034, 28095, 28100, 28106, 28118, 28137, 28194, 28241, 28359, 28362, 28366, 28413, 28442, 28458, 28463, 28467, 28506, 28510, 28514, 28541, 28555, 28557, 28562, 28564, 28570, {f:2, c:28583}, 28598, 28634, 28638, 0, 28729, 28732, 
  0, 28756, {f:2, c:28765}, 28772, [11939, 28780], 28798, 28801, 28821, 28855, {f:2, c:28883}, 28888, 28892, 28935, 28960, 28977, 29002, 29010, 29024, 29049, 29074, 0, 29131, 29139, 29142, 29184, 29213, 29227, 29240, 29249, 29267, {f:2, c:29269}, 29276, 29325, [11944, 29357], 29364, 29383, 29435, {f:2, c:29444}, 29480, 29489, 29507, 29548, 29564, 29571, {f:2, c:29573}, 29589, {f:3, c:29598}, 29606, 29611, 29621, 29623, 29628, 29647, 29657, 29673, 29684, 29693, 29700, 29706, {f:2, c:29722}, 29732, 
  29736, 29740, {f:3, c:29743}, 29753, 29764, 29767, 29771, 29773, 29777, 29783, 29798, 29803, 29809, 29824, {f:3, c:29829}, 29840, 29848, 29852, 29856, 29859, 29864, 29867, 29877, 29887, 29896, 29914, 29918, 30030, 30073, 30081, 30096, [12135, 30098], 30099, 30132, 30180, 30201, 30208, 30218, {f:2, c:30229}, 30233, 30238, 30253, 30261, 30275, 30283, 30309, 30317, 30319, 30321, 30324, {f:2, c:30372}, 30405, 30412, 30444, 30460, 30516, 30518, 30556, {f:2, c:30559}, 30578, 30589, 30613, 30634, 30694, 
  30704, 30708, 30726, 30754, {f:2, c:30765}, 30768, 30773, 30824, 30878, 30920, 30924, 30926, 30948, {f:2, c:30944}, 30962, 30967, 30971, 31025, 0, [11949, 31035], 31037, 31045, {f:2, c:31067}, 31115, 31126, 31128, [12145, 31160], 31163, 31178, 31194, 31235, 31241, 31249, 31262, 31277, 31289, 31301, 31308, 31325, 0, 31341, 31352, 31392, 31395, 31411, {f:2, c:31419}, 31430, 31495, 31508, 31527, 31537, 31559, 31566, 31584, 31593, 31597, 31602, 31633, 31663, 31703, 31705, 31755, 31759, 31776, 31782, 
  31793, 31798, 31825, 31833, 31847, 31854, 31856, 31932, 31935, {f:2, c:31944}, 31959, 31961, 31965, 31979, {f:3, c:32007}, 32019, 32029, 32035, 32065, 32083, 32089, 32093, 32122, 32134, {f:2, c:32139}, 32204, 32235, 32241, 32249, 32264, 32273, 32277, 32288, 32327, 32354, 32366, 32371, 32397, 32401, 32408, 32580, 32591, [11947, 11954, 32594], [11953, 32595], 32609, 32657, 32703, 32718, 32735, 32741, 32748, {f:2, c:32750}, 32762, 32782, 32785, 32788, 32804, 32806, 32826, 32828, 32864, 32881, 32885, 
  32926, 32934, 32939, {f:2, c:32983}, 33046, 33048, 33082, 33098, 33100, 33153, 33156, 33204, 33231, 33273, 33283, 33313, 33330, 33332, 33350, 33355, 33359, 33422, 33454, 33463, 33470, 33478, 33534, 33603, 33617, 33621, 33670, 33677, 33682, 33688, 33705, {f:2, c:33727}, 33770, 33807, 33809, 33866, 33910, 33960, 33967, 33984, 33986, 34032, 34045, 34060, 34100, 34142, 34191, 34231, 34254, 34221, 34322, 34345, 34386, 34403, 34412, 34415, 34426, 34445, 34449, 34456, {f:2, c:34471}, 34554, 34557, 34571, 
  34579, 34585, 34590, 34600, 34622, 34673, 34696, 34713, {f:2, c:34732}, 34741, 34774, 34795, 34797, 34817, 0, 34822, 34827, 34836, 34844, 34902, 34911, [11970, 34916], 34968, 34986, {f:2, c:35005}, 35018, 35026, 35035, {f:2, c:35056}, 35078, {f:3, c:35096}, 35111, 35120, 35134, 35195, 35284, 35286, 35301, 35313, 35335, 35343, 35349, 35362, 35406, 35455, 35572, 35615, 35639, {f:2, c:35651}, 35668, 35740, 35742, 35911, 35924, 35955, 36004, 36057, 36065, 36088, 36094, 36123, 36201, 36204, 36228, 36237, 
  36245, 36262, 36294, 36302, 36324, 36332, 36384, 36427, 36460, 36464, 36474, 36498, 36526, 36531, 36561, 36564, 36601, 36631, 36662, 36774, [12193, 36789], [11981, 36790], 0, 36832, 36836, 36854, 36866, 36908, 36932, 37E3, 37013, 37017, 37019, 37026, 37044, 37079, 37085, 37108, 37143, 37148, 37169, 37178, 37181, 37192, 37211, 37217, 37220, 37262, 37278, 37288, {f:2, c:37293}, 37298, 37308, 37360, 37367, 37371, 37383, 37416, 37427, 37432, 37443, 37447, 37455, 37472, 37570, {f:2, c:37579}, 37599, 
  37645, 37653, 37663, 37671, 37703, 37714, 0, 37738, 37741, 37787, 37818, 37801, 37825, 37834, 37858, 37882, 37885, 37903, 37940, 37951, 37973, 37995, 38002, [11986, 38264], 38310, 38313, 0, 38324, 38333, 38362, [11983, 11990, 38429], 38465, 38488, 38532, 38564, 38569, 38610, 195060, 38622, 38633, 38641, 38658, 38665, 38746, 38755, 38766, 38771, 38810, 38818, {f:2, c:38837}, 38873, 38878, 38900, 38922, 38926, 38942, 38947, 38955, 38974, {f:2, c:38994}, 39001, 39020, 39096, 39098, 39103, 39112, 39141, 
  {f:2, c:39218}, 39232, 39245, 39260, 39263, 39345, {f:2, c:39353}, 39369, 39426, 39446, 39460, 39463, {f:2, c:39469}, 39478, 39480, 39498, 39510, {f:2, c:39605}, 39673, 39683, 39712, {f:2, c:39731}, 39795, 39801, 39847, 39873, 39879, 39895, 39911, 39915, 39927, 39930, 39933, 39947, 39975, 39978, 39990, 40001, 40019, 40035, 40048, 40055, 40194, 40258, 40263, 40291, 40297, 40316, 40318, 40333, 40369, 40387, 40391, 40406, 40415, 40427, 40436, 40469, 40477, 40612, 40616, 40620, 40679, 40686, 40720, 
  40722, 40727, 40729, 40751, 40759, 40761, 40769, 40773, 40791, 40808, 40817, 40821, 40848, 40852, 40866, 0, 13317, 194564, 22048, 24267, 11925, 0, 144954, 0, 28665, 28390, 29107, [11940, 64073], {s:4}, [11980, 64102], 0, 23986, 0, 20435, 20697, 20720, 20931, 22134, 27220, 27905, 28112, 28226, 28377, 29668, 29729, 30060, 30801, 34805, 144382, 29608, 15091, 13531, 17420, 16010, 0, 0, 19432, 0, 16090, 15138, 0, 17786, 16531, 0, 18021, 16643, 17043, 18094, 13448, 140809, {f:3, c:63584}, 63610, 63615, 
  {s:23}, {f:2, c:8836}, {f:2, c:8842}, 8713, 0, {f:2, c:8965}, {s:9}, {f:2, c:8741}, {s:14}, 8802, 0, 8773, 8776, {f:2, c:8822}, {s:4}, 8487, {s:209}, {f:2, c:8922}, 8533, 8984, {f:2, c:7742}, {f:2, c:504}, 470, 472, 474, 476, 260, 728, 317, 346, 350, 356, 377, 379, 261, 731, 318, 347, 711, 351, 357, 378, 733, 380, 340, 258, 313, 262, 268, 280, 270, 323, 327, 336, 344, 368, 354, 341, 259, 314, 263, 269, 281, 271, 273, 324, 328, 337, 345, 369, 355, 729, 264, 284, 292, 308, 348, 364, 265, 285, 293, 
  309, 349, 365, 625, 651, 638, 620, 622, 633, 648, 598, 627, 637, 642, 656, 635, 621, 607, 626, 669, 654, 609, 624, 641, 295, 661, 660, 614, 664, 450, 595, 599, 644, 608, 403, 616, 649, 600, 604, 606, 592, 623, 650, 612, 594, 653, 613, 674, 673, 597, 657, 634, 615, 865, 712, 716, 721, 8255, 783, {f:5, c:741}, 0, 0, 805, 812, 825, 796, {f:2, c:799}, 829, 809, 815, 734, 804, 816, 828, 820, {f:2, c:797}, {f:2, c:792}, 810, {f:2, c:826}, 794, {s:3}, {f:2, c:610}, 618, 628, 630, 632, 640, 655, 665, 668, 
  671, 688, 690, 695, 704, {f:2, c:736}, {s:6}, 8862, {s:287}, 12348, 12543, 0, {f:2, c:12310}, 9838, 9835, {f:2, c:10548}, 10687, 0, 12448, 0, {f:2, c:10746}, {s:13}, 962, {f:10, c:9461}, {f:2, c:9750}, 9649, {f:10, c:12784}, 0, {f:6, c:12794}, {f:15, c:9150}, 0, 0, 10003, 0, 9251, 9166, {f:4, c:9680}, {f:2, c:8263}, 0, 8273, 8258, {f:16, c:12688}, {s:13}, {f:2, c:9136}, {f:12, c:9842}, {f:2, c:12441}, 8413, {s:450}, 20296, 20319, 20330, 20332, 20494, 20504, 20545, 20722, 20688, 20742, 20739, 20789, 
  20821, 20823, 13493, 20938, 20962, 21079, 21196, 21206, 21243, 21276, 21347, 21405, 21522, 21631, 21640, 21840, 21889, 21933, 21966, 22075, 22174, 22185, 22195, 22391, 22396, 135963, 22479, 22500, 22628, 22665, 136302, 22738, 22752, 34369, 22923, 22930, 22979, 23059, 23143, 23159, 23172, 23236, 137405, 23421, 23443, 23570, 64060, 136884, 23674, 23695, 23711, 23715, 23722, 23760, 138804, 23821, 23879, 23937, 23972, 23975, 24011, 24158, 24313, 24320, 24322, 24355, 24381, 24404, 24445, 24589, 24596, 
  24600, 24629, 24647, 24733, 24788, 24797, 24875, 25020, 25017, 25122, 25178, 25199, 25302, 25468, 25573, 25721, 25796, 25808, 25897, 26013, 26170, 26146, 26155, 26160, 26163, 26184, 143812, {f:2, c:26231}, 26253, 26299, 26331, 26344, 26439, 26497, 26515, 26520, 26523, 26620, 26653, 26787, 26890, 26953, 144836, 26946, 26980, 27045, 27087, 15286, 15299, 27113, 27125, 145215, 27195, 145251, 27284, 27301, 15375, 27419, 27436, 27495, 27561, 27565, 27607, 27647, 27653, 27764, 27800, 27899, 27846, 27953, 
  27961, 27967, 27992, 28052, 28074, 28123, 28125, 28228, 28254, 28337, 28353, 28432, 28505, 28513, 28542, 28556, 28576, 28604, 28615, 28618, 28656, 28750, 28789, 28836, 28900, 28971, 28958, 28974, 29009, 29032, 29061, 29063, 29114, 29124, 29205, 15935, 29339, 149489, 29479, 29520, 29542, 29602, 29739, 29766, 29794, 29805, 29862, 29865, 29897, 29951, 29975, 16242, 30158, 30210, 30216, 30308, 30337, 30365, 30378, 30390, 30414, 30420, 30438, 30449, 30474, 30489, {f:2, c:30541}, 30586, 30592, 30612, 
  30688, 152718, 30787, 30830, 30896, 152846, 30893, 30976, 31004, 31022, 31028, 31046, 31097, 31176, 153457, 31188, 31198, 31211, 31213, 31365, 154052, 31438, 31485, 31506, 31533, 31547, 31599, 31745, 31795, 155041, 31853, 31865, 31887, 31892, 31904, 31957, 32049, 32092, 32131, 32166, 32194, 32296, 32663, 32731, 32821, 32823, 32970, 32992, 33011, 33120, {f:2, c:33127}, 33133, 33211, 33226, 33239, 17499, 33376, 33396, 158463, 33441, {f:2, c:33443}, 33449, 33471, 33493, 33533, 33536, 33570, 33581, 
  33594, 33607, 33661, 33703, 33743, 33745, 33761, 33793, 33798, 33887, 33904, 33907, 33925, 33950, 33978, 159296, 34098, 34078, 34095, 34148, 34170, 34188, 34210, 34251, 34285, 34303, {f:2, c:34308}, 34320, 159988, 34328, 34360, 34391, 34402, 17821, 34421, 34488, 34556, 34695, 17898, 34826, 34832, 35022, 161412, 35122, 35129, 35136, 35220, 35318, 35399, 35421, 35425, 35445, 35536, 35654, 35673, 35689, 35741, 35913, 35944, 36271, 36305, 36311, 36387, 36413, 36475, 164471, 18500, 36602, 36638, 36653, 
  36692, 164813, 36840, 36846, 36872, 36909, 37015, 37043, 37054, {f:2, c:37060}, 37063, 37103, 37140, 37142, {f:2, c:37154}, 37167, 37172, 37251, 37361, 37705, {f:2, c:37732}, 37795, 37855, 37892, 37939, 37962, 37987, 38001, 38286, 38303, 38316, 38326, 38347, 38352, 38355, 18864, 38366, 38565, 38639, 38734, 38805, 38830, 38842, 38849, 38857, 38875, 38998, 39143, 39256, 39427, 39617, 39619, 39630, 39638, 39682, 39688, 19479, 39725, 39774, 39782, 39812, 39818, 39838, 39886, 39909, 39928, 39971, {f:2, 
  c:40015}, 40037, {f:2, c:40221}, 40259, 40274, 40330, 40342, 40384, 40364, 40380, 172432, 40423, 40455, 40606, 40623, 40855, 131209, 19970, 19983, 19986, 20009, 20014, 20039, 131234, 20049, 13318, 131236, 20073, 20125, 13356, 20156, 20163, 20168, 20203, 20186, 20209, 20213, 20246, 20324, 20279, 20286, 20312, 131603, {f:2, c:20343}, 20354, 20357, 20454, 20402, 20421, 20427, 20434, 13418, 20466, 20499, 20508, 20558, 20563, 20579, 20643, 20616, {f:2, c:20626}, 20629, 20650, 131883, 20657, {f:2, c:20666}, 
  20676, 20679, 20723, 131969, 20686, 131953, 20692, 20705, 13458, 132089, 20759, 132170, 20832, 132361, 20851, 20867, 20875, 13500, 20888, 20899, 20909, 13511, 132566, 20979, 21010, 21014, 132943, 21077, 21084, 21100, 21111, 21124, 21122, 133127, 21144, 133178, 21156, {f:2, c:21178}, 21194, 21201, 133305, 21239, 21301, 21314, 133500, 133533, 21351, 21370, 21412, 21428, 133843, 21431, 21440, 133917, {f:2, c:13661}, 21461, 13667, 21492, 21540, 21544, 13678, 21571, 21602, 21612, 21653, 21664, 21670, 
  21678, 21687, 21690, 21699, 134469, 21740, 21743, 21745, 21747, {f:2, c:21760}, 21769, 21820, 21825, 13734, 21831, 13736, 21860, 134625, 21885, 21890, 21905, 13765, 21970, 134805, 134765, 21951, 21961, 21964, 21969, 21981, 13786, 21986, 134756, 21993, 22056, 135007, 22023, 22032, 22064, 13812, 22077, 22080, 22087, 22110, 22112, 22125, 13829, 22152, 22156, 22173, 22184, 22194, 22213, 22221, 22239, 22248, {f:2, c:22262}, 135681, 135765, 22313, 135803, {f:2, c:22341}, 22349, 135796, 22376, 22383, 
  {f:3, c:22387}, 22395, 135908, 135895, 22426, {f:2, c:22429}, 22440, 22487, 135933, 22476, 135990, 136004, 22494, 22512, 13898, 22520, 22523, 22525, 22532, 22558, 22567, 22585, 136132, 22601, 22604, 22631, {f:2, c:22666}, 22669, {f:2, c:22671}, 22676, 22685, 22698, 22705, 136301, 22723, 22733, 22754, {f:2, c:22771}, {f:2, c:22789}, 22797, 22804, 136663, 13969, 22845, 13977, 22854, 13974, 158761, 22879, 136775, {f:2, c:22901}, 22908, 22943, 22958, 22972, 22984, 22989, 23006, 23015, 23022, 136966, 
  137026, 14031, 23053, 23063, 23079, 23085, 23141, 23162, 23179, 23196, {f:2, c:23199}, 23202, 23217, 23221, 23226, 23231, 23258, 23260, 23269, 23280, 23278, 23285, 23304, 23319, 23348, 23372, 23378, 23400, 23407, 23425, 23428, 137667, 23446, 23468, {f:2, c:14177}, 23502, 23510, 14188, 14187, 23537, 23549, 14197, 23555, 23593, 138326, 23647, {f:2, c:23655}, 23664, 138541, 138565, 138616, 138594, 23688, 23690, 14273, 138657, 138652, 23712, 23714, 23719, 138642, 23725, 23733, 138679, 23753, 138720, 
  138803, 23814, 23824, 23851, 23837, 23840, 23857, 23865, 14312, 23905, 23914, 14324, 23920, 139038, 14333, 23944, 14336, 23959, 23984, 23988, 139126, 24017, 24023, 139258, 24036, 24041, 14383, 14390, 14400, 24095, 24126, 24137, 14428, 24150, 14433, {f:2, c:24173}, 139643, 24229, 24236, 24249, 24262, 24281, 140062, 24317, 24328, 140205, 24350, 24391, 24419, 24434, 24446, 24463, 24482, 24519, 24523, {f:3, c:24530}, 24546, {f:2, c:24558}, 24563, 14615, 24610, 24612, 14618, 24652, 24725, 24744, 141043, 
  24753, 24766, 24776, 24793, 24814, 24821, 24848, 24857, 24862, 24890, 14703, 24897, 24902, 24928, 141403, {f:2, c:24978}, 24983, 24997, 25005, 141483, 25045, 25053, 25077, 141711, 25123, 25170, 25185, 25188, 25211, 25197, 25203, 25241, 25301, 142008, 25341, 25347, 25360, {f:2, c:142159}, 25394, 25397, {f:2, c:25403}, 25409, 25412, 25422, 142150, 25433, 142365, 142246, 25452, 25497, 142372, 25492, 25533, {f:2, c:25556}, 25568, {f:2, c:25579}, 25586, 25630, 25637, 25641, 25647, 25690, 25693, 25715, 
  25725, 25735, 25745, 25759, {f:2, c:25803}, 25813, 25815, 142817, 25828, 25855, 14958, 25871, 25876, 14963, 25886, 25906, 25924, 25940, 25963, 25978, 25988, 25994, 26034, 26037, 26040, 26047, 26057, 26068, 15062, 26105, 26108, 26116, 26120, 26145, 26154, 26181, 26193, 26190, 15082, 143811, 143861, 143798, 26218, {f:2, c:26220}, 26235, 26240, 26256, 26258, 15118, 26285, 26289, 26293, 15130, 15132, 15063, 26369, 26386, 144242, 26393, 144339, 144338, 26445, 26452, 26461, 144336, 144356, 144341, 26484, 
  144346, 26514, 144351, 33635, 26640, 26563, 26568, 26578, 26587, 26615, 144458, 144465, 144459, 26648, 26655, 26669, 144485, 26675, 26683, 26686, 26693, 26697, 26700, 26709, 26711, 15223, 26731, 26734, 26748, 26754, 26768, 26774, 15213, {f:3, c:26776}, 26780, {f:2, c:26794}, 26804, 26811, 26875, 144612, 144730, 26819, 26821, 26828, 26841, {f:2, c:26852}, 26860, 26871, 26883, 26887, 15239, 144788, 15245, 26950, 26985, 26988, 27002, 27026, 15268, 27030, 27056, 27066, 27068, 27072, 27089, 144953, 
  144967, 144952, 27107, {f:2, c:27118}, 27123, 15309, 27124, 27134, 27153, 27162, 27165, 145180, {f:2, c:27186}, 27199, 27209, 27258, 27214, 27218, 27236, 145164, 27275, 15344, 27297, 145252, 27307, 27325, 27334, 27348, 27344, 27357, 145407, 145383, {f:3, c:27377}, 27389, 145444, 27403, {f:3, c:27407}, 145469, 27415, 15398, 27439, 27466, 27480, 27500, 27509, [11934, 27514], 27521, 27547, 27566, 146072, 27581, {f:3, c:27591}, 27610, {f:2, c:27622}, 27630, 27650, 27658, 27662, 27702, 146559, 27725, 
  27739, 27757, 27780, 27785, 15555, 27796, 27799, 27821, 27842, 15570, 27868, 27881, 27885, 146688, 27904, 27940, {f:2, c:27942}, 27751, 27951, 27964, 27995, 28E3, 28016, {f:2, c:28032}, 28042, 28045, 28049, 28056, 146752, 146938, 146937, 146899, 28075, 28078, 28084, 28098, 27956, 28104, 28110, 28127, 28150, 28214, 28190, 15633, 28210, {f:2, c:28232}, {f:2, c:28235}, 28239, {f:2, c:28243}, 28247, 28259, 15646, 28307, 28327, 28340, 28355, 28469, 28395, 28409, 28411, 28426, 28428, 28440, 28453, 28470, 
  28476, 147326, 28498, 28503, 28512, 28520, 28560, 28566, 28606, 28575, 28581, 28591, 15716, {f:2, c:28616}, 28649, 147606, 28668, 28672, 28682, 28707, 147715, 28730, 28739, 28743, 28747, 15770, 28773, 28777, 28782, 28790, 28806, 28823, 147910, 28831, 28849, 147966, 28908, 28874, 28881, 28931, 28934, 28936, 28940, 15808, 28975, 29008, 29011, 29022, 15828, 29078, 29056, 29083, 29088, 29090, {f:2, c:29102}, 148412, 29145, 29148, 29191, 15877, 29236, 29241, 29250, 29271, 29283, 149033, {f:2, c:29294}, 
  29304, 29311, 29326, 149157, 29358, 29360, 29377, 15968, 29388, 15974, 15976, 29427, 29434, 29447, 29458, {f:2, c:29464}, 16003, 29497, 29484, 29491, 29501, 29522, 16020, 29547, 149654, {f:2, c:29550}, 29553, 29569, 29578, 29588, 29592, 29596, 29605, 29625, 29631, 29637, 29643, 29665, 29671, 29689, 29715, 29690, 29697, 29779, 29760, 29763, 29778, 29789, 29825, 29832, 150093, 29842, 29847, 29849, 29857, 29861, 29866, 29881, 29883, 29882, 29910, 29912, 29931, 150358, 29946, 150383, 29984, 29988, 
  29994, 16215, 150550, {f:2, c:30013}, 30016, 30024, 30032, 30034, 30066, 30065, 30074, {f:2, c:30077}, 30092, 16245, 30114, 16247, 30128, 30135, {f:2, c:30143}, 30150, 30159, 30163, 30173, {f:2, c:30175}, 30183, 30190, 30193, 30211, 30232, 30215, 30223, 16302, 151054, 30227, {f:2, c:30235}, 151095, 30245, 30248, 30268, 30259, 151146, 16329, 30273, 151179, 30281, 30293, 16343, 30318, 30357, 30369, 30368, {f:2, c:30375}, 30383, 151626, 30409, 151637, 30440, 151842, 30487, 30490, 30509, 30517, 151977, 
  16441, 152037, 152013, 30552, 152094, 30588, 152140, 16472, 30618, 30623, 30626, 30628, {f:2, c:30686}, 30692, 30698, 30700, 30715, 152622, 30725, 30729, 30733, 30745, 30764, 30791, 30826, 152793, 30858, 30868, 30884, 30877, 30879, 30907, 30933, 30950, {f:2, c:30969}, 30974, 152999, 30992, 31003, 31013, 31050, 31064, 16645, 31079, 31090, 31125, 31137, 31145, 31156, 31170, 31175, {f:2, c:31180}, 31190, 16712, 153513, 153524, 16719, 31242, 31253, 31259, 16739, 31288, 31303, 31318, 31321, 31324, 31327, 
  31335, 31338, 31349, 31362, 31370, 31376, 31404, 154068, 16820, 31417, 31422, 16831, 31436, 31464, 31476, 154340, 154339, 154353, 31549, 31530, {f:2, c:31534}, 16870, 16883, 31615, 31553, 16878, 31573, 31609, 31588, 31590, 31603, 154546, 16903, 31632, 31643, 16910, 31669, 31676, 31685, 31690, 154699, 154724, 31700, 31702, 31706, 31722, 31728, 31747, 31758, 31813, 31818, 31831, 31838, 31841, 31849, 31855, 155182, 155222, 155237, 31910, 155234, {f:2, c:31926}, 155352, 31940, 155330, 31949, 155368, 
  155427, 31974, 155484, 31989, 32003, 17094, 32018, 32030, 155616, 155604, {f:2, c:32061}, 32064, 32071, 155660, 155643, 17110, 32090, 32106, 32112, 17117, 32127, 155671, 32136, 32151, 155744, 32157, 32167, 32170, 32182, 32192, 32215, 32217, 32230, 17154, 155885, 64088, 32272, 32279, 32285, 32295, 32300, 32325, 32373, 32382, {f:2, c:32390}, 17195, 32410, 17219, 32572, 32571, 32574, 32579, 13505, 156272, 156294, {f:2, c:32611}, 32621, {f:2, c:32637}, 32656, 20859, 146702, 32662, 32668, 32685, 156674, 
  32707, 32719, 32739, 32754, 32778, 32776, 32790, 32812, 32816, 32835, 32870, 32891, 32921, 32924, 32932, 32935, 32952, 157310, 32965, 32981, 32998, 33037, 33013, 33019, 17390, 33077, 33054, 17392, 33060, 33063, 33068, 157469, 33085, 17416, 33129, 17431, 17436, 33157, 17442, 33176, 33202, 33217, 33219, 33238, 33243, 157917, 33252, 157930, 33260, 33277, 33279, 158063, 33284, 158173, 33305, 33314, 158238, 33340, 33353, 33349, 158296, 17526, 17530, 33367, 158348, 33372, 33379, 158391, 17553, 33405, 
  33407, 33411, 33418, 33427, {f:2, c:33447}, 33458, 33460, 33466, 33468, 33506, 33512, 33527, {f:2, c:33543}, 33548, 33620, 33563, 33565, 33584, 33596, 33604, 33623, 17598, 17620, 17587, {f:2, c:33684}, 33691, 33693, 33737, 33744, 33748, 33757, 33765, 33785, 33813, 158835, 33815, 33849, 33871, {f:2, c:33873}, {f:2, c:33881}, 33884, 158941, 33893, 33912, 33916, 33921, 17677, 33943, 33958, 33982, 17672, {f:2, c:33998}, 34003, 159333, 34023, 34026, 34031, 34033, 34042, 34075, {f:2, c:34084}, 34091, 
  34127, 34159, 17731, 34129, {f:2, c:34145}, 159636, 34171, 34173, 34175, 34177, 34182, 34195, 34205, 34207, 159736, {f:2, c:159734}, 34236, 34247, 34250, {f:2, c:34264}, 34271, 34273, 34278, 34294, 34304, 34321, 34334, 34337, 34340, 34343, 160013, 34361, 34364, 160057, 34368, 34387, 34390, 34423, 34439, 34441, {f:2, c:34460}, 34481, 34483, 34497, 34499, 34513, 34517, 34519, 34531, 34534, 17848, 34565, 34567, 34574, 34576, 34591, 34593, 34595, 34609, 34618, 34624, 34627, 34641, 34648, {f:2, c:34660}, 
  34674, 34684, 160731, 160730, 34727, 34697, 34699, 34707, 34720, 160766, 17893, 34750, 160784, 34753, 34766, 34783, 160841, 34787, {f:2, c:34789}, 34794, 34835, 34856, 34862, 34866, 34876, 17935, 34890, 34904, 161301, 161300, 34921, 161329, 34927, 34976, 35004, 35008, 161427, 35025, 35027, 17985, 35073, 161550, 35127, 161571, 35138, 35141, 35145, 161618, 35170, 35209, 35216, 35231, 35248, 35255, 35288, 35307, 18081, 35315, 35325, 35327, 18095, 35345, 35348, 162181, 35361, 35381, 35390, 35397, 35405, 
  35416, 35502, 35472, 35511, 35543, 35580, 162436, 35594, 35589, 35597, 35612, 35629, 18188, 35665, 35678, 35702, 35713, 35723, {f:2, c:35732}, 35897, 162739, 35901, 162750, 162759, 35909, 35919, 35927, 35945, 35949, 163E3, 35987, 35986, 35993, 18276, 35995, 36054, 36053, 163232, 36081, 163344, 36105, 36110, 36296, 36313, 36364, 18429, 36349, 36358, 163978, 36372, 36374, {f:2, c:36385}, 36391, 164027, 18454, 36406, 36409, 36436, 36450, 36461, 36463, 36504, 36510, 36533, 36539, 164482, 18510, 164595, 
  36608, 36616, 36651, 36672, 36682, 36696, 164876, 36772, 36788, 164949, 36801, 36806, 64036, 36810, 36813, 36819, 36821, 36849, 36853, 36859, 36876, 36919, 165227, 36931, 36957, {f:2, c:165320}, 36997, 37004, 37008, 37025, 18613, 37040, 37046, 37059, 37064, 165591, 37084, 37087, 165626, 37110, 37106, 37120, 37099, {f:2, c:37118}, 37124, 37126, 37144, 37150, 37175, 37177, {f:2, c:37190}, 37207, 37209, 37236, 37241, 37253, 37299, 37302, {f:2, c:37315}, 166217, 166214, 37356, 37377, {f:2, c:37398}, 
  166251, 37442, 37450, 37462, 37473, 37477, 37480, 166280, {f:2, c:37500}, 37503, 37513, 37517, 37527, 37529, 37535, 37547, {f:2, c:166330}, 37554, {f:2, c:37567}, 37574, 37582, 37605, 37649, 166430, 166441, 37623, 37673, 166513, 166467, 37713, 37722, 37739, 37745, 37747, 37793, 166553, 166605, 37768, 37771, 37775, 37790, 37877, 166628, 166621, 37873, 37831, 37852, 37863, 37897, {f:2, c:37910}, 37883, 37938, 37947, 166849, 166895, 37997, 37999, 38265, 38278, {f:2, c:38284}, 167184, 167281, 38344, 
  167419, 167455, 38444, {f:2, c:38451}, 167478, 38460, 38497, 167561, 38530, 167659, 38554, 167730, 18919, 38579, 38586, 38589, 18938, 167928, 38616, 38618, 38621, 18948, 38676, 38691, 18985, 38710, 38721, 38727, 38743, 38747, 38762, 168608, 168625, 38806, 38814, {f:2, c:38833}, 38846, 38860, 38865, 38868, 38872, 38881, 38897, 38916, 38925, 38932, 38934, 19132, 169104, {f:2, c:38962}, 38949, 38983, 39014, 39083, 39085, 39088, 169423, 39095, {f:2, c:39099}, 39106, 39111, 39115, 39137, 39139, 39146, 
  {f:2, c:39152}, 39155, 39176, 19259, 169712, {f:2, c:39190}, 169753, {f:3, c:39194}, 169808, 39217, {f:3, c:39226}, 39233, 39238, 39246, 39264, 39331, 39334, 39357, 39359, 39363, 39380, 39385, 39390, 170182, 39408, 39417, 39420, 39434, 39441, 39450, 39456, 39473, 39492, 39500, 39512, 19394, 39599, 19402, 39607, 19410, 39609, 170610, 39622, 39632, 39634, 39637, 39648, 39653, 39657, 39692, 39696, 39698, 39702, 39708, 39723, 39741, 19488, 39755, 39779, 39781, {f:2, c:39787}, {f:2, c:39798}, 39846, 
  39852, 171483, 39858, 39864, 39870, 39923, 39896, 39901, 39914, 39919, 39918, 171541, 171658, 171593, 39958, {f:3, c:39960}, 39965, 39970, 39977, 171716, 39985, 39991, 40005, 40028, 171753, {f:2, c:40009}, 171739, 40020, 40024, 40027, 40029, 40031, {f:3, c:40041}, {f:2, c:40045}, 40050, 40053, 40058, 40166, 40178, 40203, [171982, 171991], 40209, {f:2, c:40215}, 172079, 19652, 172058, 40242, 19665, 40266, 40287, 40290, 172281, 172162, 40307, {f:2, c:40310}, 40324, 40345, 40353, 40383, 40373, 40377, 
  40381, 40393, 40410, 40416, 40419, 19719, 40458, 40450, 40461, 40476, 40571, 139800, 40576, 40581, 40603, 172940, 40637, 173111, 40671, 40703, 40706, 19831, 40707, 40762, 40765, 40774, 40787, 40789, 40792, 173553, 40797, 173570, 40809, 40813, 40816, 173746, 11948, 13844, 14509, 15820, 16348, 17854, 17936, 19326, 19512, 19681, 19980, {f:2, c:20003}, 20089, 20211, 20236, 20249, 20267, 20270, 20273, 20356, 20382, 20407, 20484, 20492, 20556, 20575, 20578, 20599, 20622, 20638, 20642, 20675, 20712, 20721, 
  20734, 20743, {f:3, c:20748}, 20787, 20792, 20852, 20868, 20920, 20922, 20936, 20943, 20945, {f:2, c:20947}, 20952, 20959, 20997, 21030, 21032, 21035, {f:2, c:21041}, 21045, 21052, 21082, 21088, 21102, {f:2, c:21112}, 21130, 21132, 21217, 21225, 21233, 21251, 21265, 21279, 21293, 21298, 21309, 21349, 21357, 21369, 21374, 21396, 21401, 21418, 21423, 21434, 21441, {f:2, c:21444}, 21472, 21523, 21546, 21553, {f:2, c:21556}, 21580, 21671, 21674, 21681, 21691, 21710, 21738, 21756, 21765, 21768, 21781, 
  21799, 21802, 21814, 21841, 21862, 21903, 21906, 21908, 21924, 21938, 21955, 21958, 21971, 21979, 21996, 21998, 22001, 22006, 22008, 22021, 22029, {f:2, c:22033}, 22060, 22069, 22073, 22093, 22100, 22149, 22175, 22182, 22199, 22220, 22223, 22233, 22241, 22251, 22253, 22257, 22279, 22284, {f:2, c:22298}, 22301, 22316, 22318, {f:2, c:22333}, 22367, 22379, 22381, 22394, 22403, 22423, 22446, 22485, 22503, 22541, 22566, 22605, 22607, 22623, 22637, 22655, 22657, 22680, 22716, 22815, 22819, 22873, 22905, 
  22935, 22959, 22963, 23007, 23025, 23032, 23218, 23224, 23274, 23286, 23323, 23325, 23329, 23352, 23479, 23511, 23520, 23583, 23594, 23596, 23606, 23641, 23644, 23661, 23773, 23809, 23860, 23869, 23897, 23934, 23939, 24007, 24057, 24104, 24114, 24117, 24155, 24168, 24170, 24183, 24192, 24203, 24243, 24253, 24273, {f:2, c:24276}, 24397, 24492, 24554, 24583, 24649, 24660, 24679, 24763, 24772, 24829, 24842, 24854, 24874, 24886, 24926, 24932, 24955, 24957, 24959, 24989, 25016, 25052, 25058, 25061, 
  25064, 25092, 25095, 25137, 25145, 25149, 25210, 25232, 25256, 25306, 25332, 25366, 25386, 25398, 25414, 25419, 25427, 25457, 25461, 25471, 25474, 25482, {f:2, c:25518}, 25578, {f:2, c:25592}, 25618, 25624, 25632, 25636, 25642, 25653, 25661, 25663, 25682, 25695, 25716, 25744, {f:2, c:25752}, 25772, 25779, 25837, 25840, 25883, 25887, 25902, 25929, 25952, 26002, 26005, 26036, 26046, 26056, 26062, 26064, 26079, 26238, {f:2, c:26251}, 26291, 26304, 26319, 26405, 26421, 26453, 26496, 26511, 26513, 26532, 
  26545, 26549, 26558, 26664, 26758, 26859, 26869, 26903, 26931, 26936, 26971, 26981, 27048, 27051, 27055, 27109, 27121, 27210, 27221, 27239, 27249, 27311, {f:2, c:27336}, 27395, 27451, 27455, {f:2, c:27517}, 27568, 27639, 27641, 27652, 27657, 27661, 27692, 27722, 27730, 27732, 27769, 27820, 27828, 27858, 28001, 28028, 28089, 28144, 28229, 28275, 28283, 28285, 28297, 28348, {f:2, c:28378}, 28454, 28457, 28464, 28551, 28573, 28590, 28599, 28685, 28704, 28745, 28824, 28848, {f:2, c:28885}, 28997, 29106, 
  29172, 29207, 29215, 29251, {f:2, c:29263}, 29274, 29280, 29288, 29303, 29316, 29385, 29413, 29428, 29442, 29451, 29470, 29474, {f:2, c:29498}, 29517, 29528, 29543, 29810, 29871, 29919, 29924, 29940, 29947, 29974, 29985, 30015, 30046, 30105, 30116, 30145, 30148, 30156, 30167, 30172, 30177, 30191, 30212, 30220, 30237, 30258, 30264, 30277, 30282, 30303, 30381, 30397, 30425, 30443, 30448, 30457, 30464, 30478, 30498, 30504, 30511, 30521, 30526, 30533, 30538, 30543, 30558, 30564, 30567, 30572, 30596, 
  {f:2, c:30604}, 30614, 30631, 30639, 30647, 30654, 30665, 30673, 30681, 30705, 30775, 30812, 30846, 30872, 30881, 30897, 30899, 30921, 30931, 30988, 31007, {f:2, c:31015}, 31039, 31042, 31060, 31083, 31100, 31147, 31172, 31210, 31234, 31244, 31280, 31290, 31300, 31360, 31366, 31380, 31413, 31421, 31486, 31531, 31607, 31648, 31660, 31664, 31720, 31730, 31736, 31740, 31742, 31753, 31784, 31791, 31810, {f:2, c:31826}, {f:3, c:31835}, 31858, 31869, 31879, 31902, 31930, 31943, 31955, 31962, 32060, 32077, 
  32130, 32133, 32141, 32145, 32158, 32179, 32185, 32208, 32229, {f:2, c:32245}, 32303, 32310, 32324, 32367, 32376, 32385, 32573, 32603, 32605, 32613, 32625, {f:2, c:32639}, 32651, 32674, {f:3, c:32765}, 32775, 32781, 32798, 32825, 32904, 32910, 32975, 32980, 33005, 33008, 33015, 33018, 33022, 33027, 33047, 33072, 33111, 33135, 33139, 33163, 33168, 33179, 33182, 33227, 33237, {f:2, c:33245}, 33249, 33263, 33270, 33280, 33291, {f:2, c:33299}, 33306, 33338, 33348, 33389, 33412, 33417, 33425, 33450, 
  33456, 33488, 33514, 33519, 33526, 33622, 33656, 33784, 33788, 33880, 33939, 33969, 33981, 34043, 34118, 34134, 34141, 34181, 34200, 34370, 34374, 34496, 34580, 34594, 34606, 34617, 34653, 34683, 34700, 34702, {f:2, c:34711}, 34718, 34723, 34734, 34751, 34761, 34778, 34840, 34843, 34861, 34874, 34885, 34891, 34894, 34901, 34906, 34926, {f:3, c:34970}, 35021, 35040, 35055, {f:2, c:35086}, 35110, 35125, 35162, 35164, 35179, 35184, 35196, 35237, 35253, 35260, 35285, 35401, 35415, 35431, 35454, 35462, 
  35478, 35510, 35529, 35537, 35549, 35564, 35573, 35590, 35599, 35601, 35653, 35666, 35693, 35704, 35708, 35710, 35717, 35743, 35915, 35923, 35963, 36026, 36037, 36041, 36050, 36076, 36085, 36087, 36097, 36099, 36119, 36124, 36206, 36241, 36255, 36267, 36274, 36309, 36327, {f:2, c:36337}, 36340, 36353, 36363, 36390, 36401, {f:2, c:36416}, 36429, 36431, 36444, 36449, 36457, 36465, 36469, 36471, 36489, 36496, 36501, 36506, 36519, 36521, 36525, 36584, 36592, 36615, 36632, 36645, 36647, 36652, 36661, 
  36666, 36675, 36679, 36689, 36693, {f:3, c:36768}, 36773, 36868, 36891, 36911, 36940, 36955, 36976, 36980, 36985, 37003, 37016, 37024, 37042, 37053, 37065, 37104, 37125, 37157, 37210, 37223, 37242, 37258, 37265, 37269, 37296, 37307, 37309, 37314, 37317, 37376, 37385, 37411, 37494, 37518, 37551, {f:2, c:37563}, 37569, 37571, 37573, 37576, 37652, 37683, 37686, 37720, 37759, 37762, 37770, 37819, 37836, 37862, 37881, 37890, {f:2, c:37901}, 37934, 37964, 38280, 38305, 38335, 38342, 38345, {f:2, c:38353}, 
  38368, 38372, 38374, 38436, 38449, 38456, 38461, 38484, 38516, 38523, 38527, 38529, 38531, 38537, 38550, 38574, 38659, 38683, {f:2, c:38689}, 38696, 38705, 38759, 38774, 38781, 38783, 38809, 38815, 38828, 38841, 38861, 38880, 38895, 38919, 38950, 38958, {f:2, c:39010}, 39092, 39109, 39170, 39185, 39189, 39221, 39240, 39252, 39262, 39393, 39436, 39440, 39459, 39489, 39505, {f:2, c:39613}, 39681, 39689, 39691, {f:2, c:39693}, 39705, 39733, 39752, 39765, 39784, 39808, 39814, 39824, 39837, 39856, 39871, 
  39880, 39935, 39938, 39964, 39989, 40004, 40022, 40033, 40040, 40240, 40253, 40298, 40315, 40421, 40425, 40435, 40570, {f:3, c:40578}, 40624, 40676, 40688, 40690, 40713, 40719, 40724, 40731, 40738, 40742, {f:2, c:40746}, 40756, 40794, 40815, 40862, 40869, 131317, 151044, 151538, 163187, 194581, 194630, 194713, 194726, 194789, 195038, 13790, {s:4}, 172722, 0, 0, 131416, {s:4}, 132529, 0, 0, 132844, {s:6}, 134488, {s:21}, 154060, {s:9}, 14756, 14776, 142914, 0, 0, 14940, 0, 0, 143339, 0, 0, 162228, 
  0, 15044, 15051, {s:5}, 14981, {s:8}, 15347, 27384, {s:5}, 15665, {s:9}, 147531, 0, 15936, 14497, {s:34}, 158878, {s:12}, 18207, 162876, {s:4}, 18462, {s:71}, 39709, 39724, 20482, 20958, 21255, 23532, 63784, 26142, 63785, 28746, 64021, 21857, 27706, 31328, 156492, 34819, 38315, 38741, 171581, 173594], "Adobe-Korea1":[{f:95, c:32}, 8361, 8208, 169, 0, 0, [12288, 12644], {f:2, c:12289}, 12539, 8229, [8230, 8943], 168, 12291, {f:2, c:8211}, 8214, 65340, 65374, {f:2, c:8216}, {f:2, c:8220}, {f:2, c:12308}, 
  {f:10, c:12296}, 177, 215, 247, 8800, {f:2, c:8804}, 8734, 8756, 176, {f:2, c:8242}, 8451, 8491, {f:2, c:65504}, 65509, 9794, 9792, 8736, 8869, 8978, 8706, 8711, 8801, 8786, 167, 8251, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 9661, 9660, 8594, {f:2, c:8592}, {f:2, c:8595}, 12307, 171, 187, 8730, 8765, 8733, 8757, {f:2, c:8747}, 8712, 8715, {f:2, c:8838}, {f:2, c:8834}, 8746, 8745, {f:2, c:8743}, 65506, 8658, 8660, 8704, 8707, 180, 732, 711, 728, 733, 730, 729, 184, 731, 
  161, 191, 8758, 8750, 8721, 8719, 164, 8457, 8240, 9665, 9664, 9655, 9654, 9828, {f:2, c:9824}, 9829, 9831, 9827, 9673, 9672, 9635, {f:2, c:9680}, 9618, {f:2, c:9636}, 9640, 9639, 9638, 9641, 9832, 9743, 9742, 9756, 9758, 182, {f:2, c:8224}, 8597, 8599, 8601, 8598, 8600, 9837, {f:2, c:9833}, 9836, 12927, 12828, 8470, 13255, 8482, 13250, 13272, 8481, {f:59, c:65281}, 65510, {f:33, c:65341}, 65507, {f:51, c:12593}, {f:42, c:12645}, {f:10, c:8560}, {f:10, c:8544}, {f:17, c:913}, {f:7, c:931}, {f:17, 
  c:945}, {f:7, c:963}, 9472, 9474, 9484, 9488, 9496, 9492, 9500, 9516, 9508, 9524, 9532, 9473, 9475, 9487, 9491, 9499, 9495, 9507, 9523, 9515, 9531, 9547, 9504, 9519, 9512, 9527, 9535, 9501, 9520, 9509, 9528, 9538, 9490, 9489, 9498, 9497, 9494, 9493, 9486, 9485, {f:2, c:9502}, {f:2, c:9505}, {f:2, c:9510}, {f:2, c:9513}, {f:2, c:9517}, {f:2, c:9521}, {f:2, c:9525}, {f:2, c:9529}, {f:2, c:9533}, {f:2, c:9536}, {f:8, c:9539}, {f:3, c:13205}, 8467, 13208, 13252, {f:4, c:13219}, {f:10, c:13209}, 13258, 
  {f:3, c:13197}, 13263, {f:2, c:13192}, 13256, {f:2, c:13223}, {f:10, c:13232}, {f:5, c:13184}, {f:6, c:13242}, {f:5, c:13200}, 8486, {f:2, c:13248}, {f:3, c:13194}, 13270, 13253, {f:3, c:13229}, 13275, {f:4, c:13225}, 13277, 13264, 13267, 13251, 13257, 13276, 13254, 198, 208, 170, 294, 306, 319, 321, 216, 338, 186, 222, 358, 330, {f:28, c:12896}, {f:26, c:9424}, {f:15, c:9312}, 189, {f:2, c:8531}, 188, 190, {f:4, c:8539}, 230, 273, 240, 295, 305, 307, 312, 320, 322, 248, 339, 223, 254, 359, 331, 
  329, {f:28, c:12800}, {f:26, c:9372}, {f:15, c:9332}, 185, {f:2, c:178}, 8308, 8319, {f:4, c:8321}, {f:83, c:12353}, {f:86, c:12449}, {f:6, c:1040}, 1025, {f:32, c:1046}, 1105, {f:26, c:1078}, {f:2, c:44032}, 44036, {f:4, c:44039}, {f:8, c:44048}, {f:5, c:44057}, 44064, 44068, {f:2, c:44076}, {f:3, c:44079}, {f:2, c:44088}, 44092, 44096, 44107, 44109, 44116, 44120, 44124, {f:2, c:44144}, 44148, {f:2, c:44151}, 44154, {f:2, c:44160}, {f:4, c:44163}, {f:4, c:44169}, 44176, 44180, {f:2, c:44188}, 
  {f:3, c:44191}, {f:3, c:44200}, 44204, {f:2, c:44207}, {f:2, c:44216}, {f:3, c:44219}, 44225, 44228, 44232, 44236, 44245, 44247, {f:2, c:44256}, 44260, {f:2, c:44263}, 44266, 44268, {f:3, c:44271}, 44275, {f:2, c:44277}, {f:2, c:44284}, 44288, 44292, 44294, {f:2, c:44300}, 44303, 44305, 44312, 44316, 44320, 44329, {f:2, c:44332}, {f:2, c:44340}, 44344, 44348, {f:2, c:44356}, 44359, 44361, 44368, 44372, 44376, 44385, 44387, {f:2, c:44396}, 44400, {f:4, c:44403}, {f:3, c:44411}, 44415, {f:2, c:44417}, 
  {f:2, c:44424}, 44428, 44432, {f:2, c:44444}, 44452, 44471, {f:2, c:44480}, 44484, 44488, {f:2, c:44496}, 44499, 44508, 44512, 44516, {f:2, c:44536}, 44540, {f:3, c:44543}, {f:2, c:44552}, 44555, 44557, 44564, {f:2, c:44592}, 44596, {f:2, c:44599}, 44602, {f:2, c:44608}, 44611, {f:2, c:44613}, 44618, {f:3, c:44620}, 44624, 44628, 44630, {f:2, c:44636}, {f:3, c:44639}, 44645, {f:2, c:44648}, 44652, 44656, {f:2, c:44664}, {f:3, c:44667}, {f:2, c:44676}, 44684, {f:3, c:44732}, 44736, 44740, {f:2, 
  c:44748}, {f:3, c:44751}, {f:2, c:44760}, 44764, 44776, 44779, 44781, 44788, 44792, 44796, {f:2, c:44807}, 44813, 44816, {f:2, c:44844}, 44848, 44850, 44852, {f:2, c:44860}, 44863, {f:3, c:44865}, {f:2, c:44872}, 44880, {f:2, c:44892}, {f:2, c:44900}, 44921, 44928, 44932, 44936, {f:2, c:44944}, 44949, 44956, {f:2, c:44984}, 44988, 44992, {f:3, c:44999}, 45003, {f:2, c:45005}, 45012, 45020, {f:2, c:45032}, {f:2, c:45040}, 45044, 45048, {f:2, c:45056}, 45060, 45068, 45072, 45076, {f:2, c:45084}, 
  45096, {f:2, c:45124}, 45128, 45130, 45132, 45134, {f:3, c:45139}, 45143, 45145, 45149, {f:2, c:45180}, 45184, 45188, {f:2, c:45196}, 45199, 45201, {f:3, c:45208}, 45212, {f:4, c:45215}, {f:2, c:45224}, {f:5, c:45227}, 45233, {f:3, c:45235}, 45240, 45244, {f:2, c:45252}, {f:3, c:45255}, {f:2, c:45264}, 45268, 45272, 45280, 45285, {f:2, c:45320}, {f:2, c:45323}, 45328, {f:2, c:45330}, {f:2, c:45336}, {f:3, c:45339}, {f:3, c:45347}, 45352, 45356, {f:2, c:45364}, {f:3, c:45367}, {f:2, c:45376}, 45380, 
  45384, {f:2, c:45392}, {f:2, c:45396}, 45400, 45404, 45408, {f:2, c:45432}, 45436, 45440, 45442, {f:2, c:45448}, 45451, 45453, {f:3, c:45458}, 45464, 45468, 45480, 45516, 45520, 45524, {f:2, c:45532}, 45535, {f:2, c:45544}, 45548, 45552, 45561, 45563, 45565, {f:2, c:45572}, 45576, {f:2, c:45579}, {f:2, c:45588}, 45591, 45593, 45600, 45620, 45628, 45656, 45660, 45664, {f:2, c:45672}, {f:2, c:45684}, 45692, {f:2, c:45700}, 45705, {f:2, c:45712}, 45716, {f:3, c:45720}, {f:2, c:45728}, 45731, {f:2, 
  c:45733}, 45738, 45740, 45744, 45748, {f:2, c:45768}, 45772, 45776, 45778, {f:2, c:45784}, 45787, 45789, 45794, {f:3, c:45796}, 45800, {f:5, c:45803}, {f:3, c:45811}, {f:5, c:45815}, {f:3, c:45823}, 45828, 45832, {f:2, c:45840}, {f:3, c:45843}, 45852, {f:3, c:45908}, 45912, {f:2, c:45915}, {f:2, c:45918}, {f:2, c:45924}, 45927, 45929, 45931, 45934, {f:2, c:45936}, 45940, 45944, {f:2, c:45952}, {f:3, c:45955}, 45964, 45968, 45972, {f:2, c:45984}, 45992, 45996, {f:2, c:46020}, 46024, {f:2, c:46027}, 
  46030, 46032, {f:2, c:46036}, 46039, 46041, 46043, 46045, 46048, 46052, 46056, 46076, 46096, 46104, 46108, 46112, {f:2, c:46120}, 46123, 46132, {f:2, c:46160}, 46164, 46168, {f:2, c:46176}, 46179, 46181, 46188, 46208, 46216, 46237, 46244, 46248, 46252, 46261, 46263, 46265, 46272, 46276, 46280, 46288, 46293, {f:2, c:46300}, 46304, {f:2, c:46307}, 46310, {f:2, c:46316}, 46319, 46321, 46328, {f:2, c:46356}, 46360, {f:2, c:46363}, {f:2, c:46372}, {f:4, c:46375}, {f:2, c:46384}, 46388, 46392, {f:2, 
  c:46400}, {f:3, c:46403}, {f:3, c:46411}, 46416, 46420, {f:2, c:46428}, {f:3, c:46431}, {f:2, c:46496}, 46500, 46504, {f:2, c:46506}, {f:2, c:46512}, {f:3, c:46515}, {f:3, c:46523}, 46528, 46532, {f:2, c:46540}, {f:3, c:46543}, 46552, 46572, {f:2, c:46608}, 46612, 46616, 46629, 46636, 46644, 46664, 46692, 46696, {f:2, c:46748}, 46752, 46756, {f:2, c:46763}, 46769, 46804, 46832, 46836, 46840, {f:2, c:46848}, 46853, {f:2, c:46888}, 46892, {f:2, c:46895}, {f:2, c:46904}, 46907, 46916, 46920, 46924, 
  {f:2, c:46932}, 46944, 46948, 46952, {f:2, c:46960}, 46963, 46965, {f:2, c:46972}, 46976, 46980, {f:2, c:46988}, {f:4, c:46991}, {f:4, c:46998}, 47004, 47008, {f:2, c:47016}, {f:3, c:47019}, {f:2, c:47028}, 47032, 47047, 47049, {f:2, c:47084}, 47088, 47092, {f:2, c:47100}, {f:3, c:47103}, {f:3, c:47111}, 47116, 47120, {f:2, c:47128}, 47131, 47133, {f:2, c:47140}, 47144, 47148, {f:2, c:47156}, {f:3, c:47159}, 47168, 47172, 47185, 47187, {f:2, c:47196}, 47200, 47204, {f:2, c:47212}, 47215, 47217, 
  47224, 47228, 47245, 47272, 47280, 47284, 47288, {f:2, c:47296}, 47299, 47301, 47308, 47312, 47316, 47325, 47327, 47329, {f:2, c:47336}, 47340, 47344, {f:2, c:47352}, 47355, 47357, 47364, 47384, 47392, {f:2, c:47420}, 47424, 47428, 47436, 47439, 47441, {f:2, c:47448}, 47452, 47456, {f:2, c:47464}, 47467, 47469, {f:2, c:47476}, 47480, 47484, {f:2, c:47492}, 47495, {f:2, c:47497}, {f:2, c:47501}, {f:2, c:47532}, 47536, 47540, {f:2, c:47548}, 47551, 47553, {f:2, c:47560}, 47564, {f:5, c:47566}, {f:2, 
  c:47576}, 47579, {f:2, c:47581}, 47585, {f:3, c:47587}, 47592, 47596, {f:2, c:47604}, {f:4, c:47607}, {f:2, c:47616}, 47624, 47637, {f:2, c:47672}, 47676, 47680, 47682, {f:2, c:47688}, 47691, {f:2, c:47693}, {f:3, c:47699}, 47704, 47708, {f:2, c:47716}, {f:3, c:47719}, {f:2, c:47728}, 47732, 47736, {f:3, c:47747}, 47751, 47756, {f:2, c:47784}, {f:2, c:47787}, 47792, 47794, {f:2, c:47800}, 47803, 47805, 47812, 47816, {f:2, c:47832}, 47868, 47872, 47876, 47885, 47887, 47889, 47896, 47900, 47904, 
  47913, 47915, {f:3, c:47924}, 47928, {f:4, c:47931}, {f:2, c:47940}, 47943, 47945, 47949, {f:2, c:47951}, 47956, 47960, 47969, 47971, 47980, 48008, 48012, 48016, 48036, 48040, 48044, 48052, 48055, 48064, 48068, 48072, 48080, 48083, {f:2, c:48120}, 48124, {f:2, c:48127}, 48130, {f:2, c:48136}, {f:3, c:48139}, 48143, 48145, {f:5, c:48148}, {f:5, c:48155}, {f:2, c:48164}, 48167, 48169, 48173, {f:2, c:48176}, 48180, 48184, {f:2, c:48192}, {f:3, c:48195}, 48201, {f:2, c:48204}, 48208, 48221, {f:2, c:48260}, 
  48264, {f:2, c:48267}, 48270, {f:2, c:48276}, 48279, {f:2, c:48281}, {f:2, c:48288}, 48292, {f:2, c:48295}, {f:2, c:48304}, {f:3, c:48307}, {f:2, c:48316}, 48320, 48324, 48333, {f:3, c:48335}, 48341, 48344, 48348, {f:3, c:48372}, 48376, 48380, {f:2, c:48388}, 48391, 48393, 48400, 48404, 48420, 48428, 48448, {f:2, c:48456}, 48460, 48464, {f:2, c:48472}, 48484, 48488, {f:2, c:48512}, 48516, {f:4, c:48519}, {f:2, c:48528}, 48531, 48533, {f:2, c:48537}, 48540, 48548, 48560, 48568, {f:2, c:48596}, 48600, 
  48604, 48617, 48624, 48628, 48632, 48640, 48643, 48645, {f:2, c:48652}, 48656, 48660, {f:2, c:48668}, 48671, {f:2, c:48708}, 48712, 48716, 48718, {f:2, c:48724}, 48727, {f:3, c:48729}, {f:2, c:48736}, 48740, 48744, 48746, {f:2, c:48752}, {f:3, c:48755}, {f:3, c:48763}, 48768, 48772, {f:2, c:48780}, {f:3, c:48783}, {f:2, c:48792}, 48808, {f:2, c:48848}, 48852, {f:2, c:48855}, 48864, {f:3, c:48867}, 48876, 48897, {f:2, c:48904}, {f:2, c:48920}, {f:3, c:48923}, {f:2, c:48960}, 48964, 48968, {f:2, 
  c:48976}, 48981, 49044, 49072, 49093, {f:2, c:49100}, 49104, 49108, 49116, 49119, 49121, 49212, 49233, 49240, 49244, 49248, {f:2, c:49256}, {f:2, c:49296}, 49300, 49304, {f:2, c:49312}, 49315, 49317, {f:2, c:49324}, {f:2, c:49327}, {f:4, c:49331}, {f:2, c:49340}, {f:3, c:49343}, 49349, {f:2, c:49352}, 49356, 49360, {f:2, c:49368}, {f:3, c:49371}, {f:2, c:49380}, 49384, 49388, {f:2, c:49396}, 49399, 49401, 49408, 49412, 49416, 49424, 49429, {f:5, c:49436}, {f:2, c:49443}, {f:2, c:49446}, {f:2, c:49452}, 
  {f:3, c:49455}, 49462, {f:2, c:49464}, 49468, 49472, {f:2, c:49480}, {f:3, c:49483}, {f:2, c:49492}, 49496, 49500, {f:2, c:49508}, {f:3, c:49511}, 49520, 49524, 49528, 49541, {f:3, c:49548}, 49552, 49556, 49558, {f:2, c:49564}, 49567, 49569, 49573, {f:2, c:49576}, 49580, 49584, 49597, 49604, 49608, 49612, 49620, {f:2, c:49623}, 49632, 49636, 49640, {f:2, c:49648}, 49651, {f:2, c:49660}, 49664, 49668, {f:2, c:49676}, 49679, 49681, {f:2, c:49688}, 49692, {f:2, c:49695}, {f:2, c:49704}, 49707, 49709, 
  49711, {f:2, c:49713}, 49716, 49736, {f:2, c:49744}, 49748, 49752, 49760, 49765, {f:2, c:49772}, 49776, 49780, {f:2, c:49788}, 49791, 49793, {f:2, c:49800}, 49808, 49816, 49819, 49821, {f:2, c:49828}, 49832, {f:2, c:49836}, {f:2, c:49844}, 49847, 49849, {f:2, c:49884}, 49888, {f:2, c:49891}, {f:3, c:49899}, 49903, 49905, 49910, {f:2, c:49912}, {f:2, c:49915}, 49920, {f:2, c:49928}, {f:2, c:49932}, {f:3, c:49939}, 49944, 49948, {f:2, c:49956}, {f:2, c:49960}, 49989, {f:2, c:50024}, 50028, 50032, 
  50034, {f:2, c:50040}, {f:2, c:50044}, 50052, 50056, 50060, 50112, {f:2, c:50136}, 50140, {f:2, c:50143}, 50146, {f:2, c:50152}, 50157, {f:2, c:50164}, 50168, 50184, 50192, 50212, 50220, 50224, 50228, {f:2, c:50236}, 50248, {f:2, c:50276}, 50280, 50284, {f:2, c:50292}, 50297, 50304, 50324, 50332, 50360, 50364, 50409, {f:2, c:50416}, 50420, 50424, 50426, {f:3, c:50431}, 50444, 50448, 50452, 50460, {f:2, c:50472}, 50476, 50480, {f:2, c:50488}, 50491, 50493, {f:2, c:50500}, {f:3, c:50504}, {f:3, c:50508}, 
  {f:3, c:50515}, {f:3, c:50519}, {f:2, c:50525}, {f:2, c:50528}, 50532, 50536, {f:2, c:50544}, {f:3, c:50547}, {f:2, c:50556}, 50560, 50564, 50567, {f:2, c:50572}, 50575, 50577, 50581, {f:2, c:50583}, 50588, 50592, 50601, {f:2, c:50612}, {f:2, c:50616}, {f:4, c:50619}, {f:7, c:50628}, 50636, 50638, {f:2, c:50640}, 50644, 50648, {f:2, c:50656}, 50659, 50661, {f:3, c:50668}, 50672, 50676, {f:2, c:50678}, {f:6, c:50684}, {f:4, c:50693}, 50700, 50704, {f:2, c:50712}, {f:2, c:50715}, {f:2, c:50724}, 
  50728, {f:3, c:50732}, 50736, {f:3, c:50739}, 50743, 50745, 50747, {f:2, c:50752}, 50756, 50760, {f:2, c:50768}, {f:3, c:50771}, {f:2, c:50780}, 50784, 50796, 50799, 50801, {f:2, c:50808}, 50812, 50816, {f:2, c:50824}, 50827, 50829, {f:2, c:50836}, 50840, 50844, {f:2, c:50852}, 50855, 50857, {f:2, c:50864}, 50868, {f:3, c:50872}, {f:2, c:50880}, 50883, 50885, {f:2, c:50892}, 50896, 50900, {f:2, c:50908}, {f:2, c:50912}, {f:2, c:50920}, 50924, 50928, {f:2, c:50936}, 50941, {f:2, c:50948}, 50952, 
  50956, {f:2, c:50964}, 50967, 50969, {f:2, c:50976}, 50980, 50984, {f:2, c:50992}, 50995, 50997, 50999, {f:2, c:51004}, 51008, 51012, 51018, {f:2, c:51020}, 51023, {f:8, c:51025}, 51036, 51040, 51048, 51051, {f:2, c:51060}, 51064, {f:3, c:51068}, {f:3, c:51075}, {f:4, c:51079}, 51086, {f:2, c:51088}, 51092, {f:3, c:51094}, 51098, {f:2, c:51104}, {f:4, c:51107}, {f:2, c:51116}, 51120, 51124, {f:2, c:51132}, {f:3, c:51135}, {f:2, c:51144}, 51148, 51150, 51152, 51160, 51165, 51172, 51176, 51180, {f:2, 
  c:51200}, 51204, 51208, 51210, {f:2, c:51216}, 51219, {f:2, c:51221}, {f:2, c:51228}, 51232, 51236, {f:2, c:51244}, 51247, 51249, 51256, 51260, 51264, {f:2, c:51272}, {f:2, c:51276}, 51284, {f:2, c:51312}, 51316, 51320, 51322, {f:2, c:51328}, 51331, {f:3, c:51333}, {f:3, c:51339}, 51348, 51357, 51359, 51361, 51368, {f:2, c:51388}, 51396, 51400, 51404, {f:2, c:51412}, 51415, 51417, {f:2, c:51424}, 51428, 51445, {f:2, c:51452}, 51456, {f:3, c:51460}, {f:2, c:51468}, 51471, 51473, 51480, 51500, 51508, 
  {f:2, c:51536}, 51540, 51544, {f:2, c:51552}, 51555, 51564, 51568, 51572, 51580, {f:2, c:51592}, 51596, 51600, {f:2, c:51608}, 51611, 51613, {f:2, c:51648}, 51652, {f:2, c:51655}, 51658, {f:2, c:51664}, 51667, {f:2, c:51669}, {f:2, c:51673}, {f:2, c:51676}, 51680, 51682, 51684, 51687, {f:2, c:51692}, {f:3, c:51695}, {f:2, c:51704}, 51708, 51712, {f:2, c:51720}, {f:3, c:51723}, 51732, 51736, 51753, {f:2, c:51788}, 51792, 51796, {f:2, c:51804}, {f:3, c:51807}, 51816, 51837, 51844, 51864, {f:2, c:51900}, 
  51904, 51908, {f:2, c:51916}, 51919, 51921, 51923, {f:2, c:51928}, 51936, 51948, 51956, 51976, 51984, 51988, 51992, {f:2, c:52E3}, 52033, {f:2, c:52040}, 52044, 52048, {f:2, c:52056}, 52061, 52068, {f:2, c:52088}, 52124, 52152, 52180, 52196, 52199, 52201, {f:2, c:52236}, 52240, 52244, {f:2, c:52252}, {f:2, c:52257}, {f:3, c:52263}, 52268, 52270, 52272, {f:2, c:52280}, {f:4, c:52283}, {f:2, c:52292}, 52296, 52300, {f:2, c:52308}, {f:3, c:52311}, 52320, 52324, 52326, 52328, 52336, 52341, {f:2, c:52376}, 
  52380, 52384, {f:2, c:52392}, {f:3, c:52395}, {f:2, c:52404}, 52408, 52412, {f:2, c:52420}, 52423, 52425, 52432, 52436, 52452, 52460, 52464, 52481, {f:2, c:52488}, 52492, 52496, {f:2, c:52504}, 52507, 52509, 52516, 52520, 52524, 52537, 52572, 52576, 52580, {f:2, c:52588}, 52591, 52593, 52600, 52616, {f:2, c:52628}, 52632, 52636, {f:2, c:52644}, 52647, 52649, 52656, 52676, 52684, 52688, 52712, 52716, 52720, {f:2, c:52728}, 52731, 52733, 52740, 52744, 52748, 52756, 52761, {f:2, c:52768}, 52772, 52776, 
  {f:2, c:52784}, 52787, 52789, {f:2, c:52824}, 52828, {f:3, c:52831}, {f:2, c:52840}, 52843, 52845, {f:2, c:52852}, 52856, 52860, {f:2, c:52868}, 52871, 52873, {f:2, c:52880}, 52884, 52888, {f:2, c:52896}, {f:3, c:52899}, {f:2, c:52908}, 52929, {f:2, c:52964}, 52968, {f:2, c:52971}, {f:2, c:52980}, {f:3, c:52983}, {f:2, c:52992}, 52996, 53E3, {f:2, c:53008}, 53011, 53013, 53020, 53024, 53028, {f:2, c:53036}, {f:3, c:53039}, 53048, {f:2, c:53076}, 53080, 53084, {f:2, c:53092}, 53095, 53097, {f:2, 
  c:53104}, 53108, 53112, 53120, 53125, 53132, 53153, 53160, 53168, 53188, {f:2, c:53216}, 53220, 53224, {f:2, c:53232}, 53235, 53237, 53244, 53248, 53252, 53265, 53272, 53293, {f:2, c:53300}, 53304, 53308, {f:2, c:53316}, 53319, 53321, 53328, 53332, 53336, 53344, {f:2, c:53356}, 53360, 53364, {f:2, c:53372}, 53377, {f:2, c:53412}, 53416, 53420, {f:2, c:53428}, 53431, 53433, {f:2, c:53440}, 53444, {f:2, c:53448}, {f:2, c:53456}, {f:3, c:53459}, {f:2, c:53468}, 53472, 53476, {f:2, c:53484}, {f:3, 
  c:53487}, 53496, 53517, {f:2, c:53552}, 53556, 53560, 53562, {f:2, c:53568}, {f:3, c:53571}, {f:2, c:53580}, 53584, 53588, {f:2, c:53596}, 53599, 53601, 53608, 53612, 53628, 53636, 53640, {f:2, c:53664}, 53668, 53672, {f:2, c:53680}, 53683, 53685, 53690, 53692, 53696, 53720, 53748, 53752, 53767, 53769, 53776, {f:2, c:53804}, 53808, 53812, {f:2, c:53820}, 53823, 53825, 53832, 53852, 53860, {f:2, c:53888}, 53892, 53896, {f:2, c:53904}, 53909, 53916, 53920, 53924, 53932, 53937, {f:2, c:53944}, 53948, 
  {f:2, c:53951}, 53954, {f:2, c:53960}, 53963, 53972, 53976, 53980, {f:2, c:53988}, {f:2, c:54E3}, 54004, 54008, {f:2, c:54016}, 54019, 54021, {f:3, c:54028}, 54032, 54036, 54038, {f:2, c:54044}, {f:3, c:54047}, 54053, {f:2, c:54056}, 54060, 54064, {f:2, c:54072}, {f:3, c:54075}, {f:2, c:54084}, {f:2, c:54140}, 54144, 54148, {f:2, c:54156}, {f:3, c:54159}, {f:2, c:54168}, 54172, 54176, {f:2, c:54184}, 54187, 54189, 54196, 54200, 54204, {f:2, c:54212}, {f:2, c:54216}, 54224, 54232, 54241, 54243, 
  {f:2, c:54252}, 54256, 54260, {f:2, c:54268}, 54271, 54273, 54280, 54301, 54336, 54340, 54364, 54368, 54372, 54381, 54383, {f:2, c:54392}, 54396, {f:2, c:54399}, 54402, {f:2, c:54408}, 54411, 54413, 54420, 54441, 54476, 54480, 54484, 54492, 54495, 54504, 54508, 54512, 54520, 54523, 54525, 54532, 54536, 54540, {f:2, c:54548}, 54551, {f:2, c:54588}, 54592, 54596, {f:2, c:54604}, 54607, 54609, {f:2, c:54616}, 54620, 54624, 54629, {f:2, c:54632}, 54635, 54637, {f:2, c:54644}, 54648, 54652, {f:2, c:54660}, 
  {f:3, c:54663}, 54672, 54693, {f:2, c:54728}, 54732, 54736, 54738, {f:2, c:54744}, 54747, 54749, {f:2, c:54756}, 54760, 54764, {f:2, c:54772}, 54775, 54777, {f:2, c:54784}, 54788, 54792, {f:2, c:54800}, {f:3, c:54803}, 54812, 54816, 54820, 54829, {f:2, c:54840}, 54844, 54848, 54853, {f:2, c:54856}, 54859, 54861, 54865, {f:2, c:54868}, 54872, 54876, 54887, 54889, {f:2, c:54896}, 54900, 54915, 54917, {f:2, c:54924}, 54928, 54932, 54941, 54943, 54945, 54952, 54956, 54960, 54969, 54971, {f:2, c:54980}, 
  54984, 54988, 54993, 54996, 54999, 55001, 55008, 55012, 55016, 55024, 55029, {f:2, c:55036}, 55040, 55044, 55057, {f:2, c:55064}, 55068, 55072, {f:2, c:55080}, 55083, 55085, {f:2, c:55092}, 55096, 55100, 55108, 55111, 55113, {f:2, c:55120}, 55124, {f:4, c:55126}, {f:2, c:55136}, 55139, 55141, 55145, 55148, 55152, 55156, {f:2, c:55164}, 55169, {f:2, c:55176}, 55180, 55184, {f:2, c:55192}, 55195, 55197, 20285, 20339, 20551, 20729, 21152, 21487, 21621, 21733, 22025, 23233, 23478, 26247, {f:2, c:26550}, 
  26607, 27468, 29634, 30146, 31292, 33499, 33540, 34903, 34952, 35382, [36040, 63747], 36303, 36603, 36838, 39381, 21051, 21364, 21508, 24682, 24932, 27580, 29647, 33050, 35258, [12179, 35282], 38307, 20355, 21002, 22718, 22904, 23014, [12082, 24178], 24185, 25031, 25536, 26438, 26604, 26751, 28567, 30286, 30475, 30965, 31240, 31487, 31777, 32925, [12169, 33390], 33393, 35563, 38291, 20075, 21917, 26359, 28212, 30883, 31469, 33883, 35088, 34638, 38824, 21208, 22350, 22570, 23884, 24863, 25022, 25121, 
  25954, 26577, 27204, 28187, [12130, 29976], 30131, 30435, 30640, 32058, 37039, {f:2, c:37969}, 40853, 21283, 23724, 30002, 32987, 37440, 38296, 21083, 22536, 23004, 23713, 23831, 24247, 24378, 24394, 24951, 27743, 30074, 30086, 31968, 32115, 32177, 32652, 33108, 33313, 34193, 35137, 35611, 37628, [38477, 64009], 40007, 20171, 20215, 20491, 20977, 22607, 24887, 24894, 24936, 25913, 27114, 28433, 30117, 30342, 30422, 31623, 33445, 33995, 37799, 38283, 21888, 23458, 22353, 31923, 32697, 37301, 20520, 
  21435, 23621, 24040, 25298, 25454, 25818, 25831, 28192, 28844, 31067, 36317, 36382, 36989, 37445, 37624, 20094, 20214, 20581, [12081, 24062], 24314, 24838, 26967, 33137, 34388, 36423, 37749, 39467, 20062, 20625, 26480, 26688, 20745, 21133, 21138, 27298, 30652, 37392, 40660, 21163, 24623, 36850, 20552, 25001, 25581, 25802, 26684, 27268, 28608, 33160, 35233, 38548, 22533, 29309, [12125, 29356], 29956, 32121, 32365, 32937, [12178, 35211, 64010], 35700, 36963, 40273, 25225, 27770, 28500, 32080, 32570, 
  35363, 20860, 24906, 31645, 35609, 37463, 37772, 20140, 20435, 20510, 20670, 20742, 21185, 21197, 21375, 22384, 22659, 24218, 24465, 24950, 25004, 25806, 25964, 26223, 26299, [26356, 63745], 26775, 28039, 28805, 28913, 29855, 29861, 29898, 30169, 30828, 30956, 31455, 31478, 32069, 32147, 32789, 32831, 33051, 33686, 35686, 36629, 36885, 37857, 38915, 38968, 39514, 39912, 20418, 21843, 22586, [22865, 63753], 23395, 23622, 24760, 25106, 26690, 26800, 26856, 28330, 30028, 30328, 30926, 31293, 31995, 
  32363, 32380, 35336, 35489, 35903, 38542, 40388, 21476, 21481, 21578, 21617, 22266, 22993, 23396, 23611, 24235, 25335, 25911, 25925, 25970, 26272, 26543, 27073, 27837, 30204, 30352, 30590, 31295, 32660, 32771, 32929, 33167, 33510, 33533, 33776, 34241, 34865, 34996, 35493, 36764, 37678, 38599, 39015, [12220, 39640], [12238, 40723], 21741, 26011, 26354, 26767, 31296, [12181, 35895], 40288, 22256, 22372, 23825, 26118, 26801, 26829, 28414, 29736, 34974, 39908, 27752, [12219, 39592], 20379, 20844, 20849, 
  21151, 23380, [12079, 24037], 24656, 24685, 25329, 25511, 25915, 29657, 31354, 34467, 36002, 38799, [20018, 63749], 23521, [12093, 25096], 26524, [12128, 29916], 31185, 33747, 35463, 35506, 36328, 36942, 37707, 38982, [24275, 64011], 27112, 34303, 37101, 20896, 23448, 23532, 24931, 26874, 27454, 28748, 29743, 29912, 31649, 32592, 33733, 35264, 36011, 38364, 39208, 21038, 24669, 25324, 36866, 20362, 20809, 21281, 22745, 24291, 26336, 27960, 28826, 29378, 29654, 31568, 33009, 37979, 21350, 25499, 
  32619, 20054, 20608, 22602, 22750, 24618, 24871, 25296, 27088, 39745, 23439, 32024, 32945, 36703, 20132, 20689, 21676, 21932, 23308, 23968, 24039, 25898, 25934, 26657, 27211, 29409, 30350, 30703, 32094, 32761, 33184, 34126, 34527, 36611, 36686, 37066, 39171, 39509, 39851, 19992, 20037, 20061, 20167, 20465, 20855, 21246, 21312, [12061, 21475], [21477, 63750], 21646, 22036, 22389, 22434, 23495, 23943, 24272, 25084, 25304, 25937, 26552, 26601, 27083, 27472, 27590, 27628, 27714, 28317, 28792, 29399, 
  29590, 29699, 30655, 30697, 31350, 32127, 32777, [12165, 33276], 33285, 33290, 33503, 34914, 35635, 36092, 36544, 36881, 37041, 37476, 37558, 39378, 39493, 40169, 40407, [12244, 40860, 63751, 63752], 22283, 23616, 33738, 38816, 38827, 40628, 21531, 31384, 32676, 35033, 36557, 37089, 22528, 23624, 25496, 31391, 23470, [12088, 24339], 31353, 31406, 33422, 36524, 20518, 21048, 21240, 21367, 22280, 25331, 25458, 27402, 28099, 30519, 21413, 29527, 34152, 36470, 38357, 26426, 27331, 28528, 35437, 36556, 
  39243, 26231, 27512, 36020, [12225, 39740], 21483, 22317, 22862, 25542, 27131, 29674, 30789, 31418, 31429, 31998, 33909, 35215, 36211, 36917, 38312, 21243, 22343, 30023, 31584, 33740, 37406, 27224, 20811, 21067, 21127, 25119, 26840, 26997, 38553, 20677, 21156, 21220, 25027, [12100, 26020], 26681, 27135, 29822, 31563, 33465, 33771, 35250, 35641, 36817, 39241, 20170, 22935, 25810, 26129, 27278, 29748, 31105, 31165, 33449, {f:2, c:34942}, 35167, 37670, 20235, 21450, 24613, 25201, 27762, 32026, 32102, 
  20120, 20834, 30684, 32943, 20225, 20238, 20854, 20864, 21980, 22120, 22331, 22522, 22524, 22804, 22855, 22931, 23492, 23696, 23822, [12080, 24049], 24190, 24524, 25216, 26071, 26083, {f:2, c:26398}, 26462, 26827, 26820, 27231, 27450, 27683, 27773, 27778, 28103, 29592, 29734, 29738, 29826, 29859, 30072, 30079, 30849, 30959, 31041, {f:2, c:31047}, 31098, 31637, 32E3, 32186, 32648, 32774, 32813, 32908, 35352, 35663, [35912, 63744], 36215, 37665, 37668, 39138, 39249, {f:2, c:39438}, 39525, 40594, 
  32202, 20342, 21513, 25326, 26708, [12198, 37329, 63754], 21931, 20794, 23068, 25062, [25295, 63835], 25343, 37027, [35582, 63837], 26262, 29014, 38627, 25423, 25466, 21335, 26511, 26976, 28275, 30007, 32013, 34930, 22218, 23064, 20035, 20839, [22856, 63756], 26608, 32784, [12069, 22899, 63873], [24180, 63886], [25754, 63889], [31178, 63893], [24565, 63907], 24684, 25288, [25467, 63908], [23527, 63839, 63914], 23511, 21162, 22900, 24361, [24594, 63840], 29785, 39377, 28611, 33215, 36786, 24817, 
  33126, [23615, 63933], 23273, 35365, [26491, 63944], [32016, 63951], 33021, 23612, [27877, 63971], [21311, 63979], [28346, 63980], 22810, [33590, 63998], [20025, 63838], 20150, 20294, 21934, 22296, 22727, 24406, 26039, 26086, 27264, 27573, 28237, 30701, 31471, 31774, 32222, 34507, 34962, 37170, 37723, 25787, 28606, 29562, 30136, 36948, 21846, 22349, 25018, 25812, 26311, 28129, 28251, 28525, 28601, 30192, 32835, 33213, 34113, 35203, 35527, 35674, 37663, 27795, 30035, 31572, 36367, 36957, 21776, 
  22530, 22616, 24162, 25095, 25758, 26848, 30070, [31958, 64003], 34739, 40680, 20195, 22408, 22382, [12068, 22823], 23565, 23729, 24118, 24453, 25140, 25825, 29619, 33274, 34955, 36024, 38538, 40667, [23429, 64004], 24503, 24755, 20498, [12049, 20992], 21040, 22294, 22581, 22615, 23566, 23648, 23798, 23947, [24230, 64001], 24466, 24764, 25361, 25481, 25623, 26691, 26873, 27330, 28120, 28193, 28372, 28644, 29182, 30428, 30585, 31153, 31291, 33796, 35241, 36077, 36339, 36424, 36867, 36884, 36947, 
  37117, 37709, 38518, 38876, 27602, 28678, 29272, 29346, 29544, 30563, 31167, 31716, 32411, [35712, 63834], 22697, 24775, 25958, 26109, 26302, 27788, 28958, 29129, 35930, 38931, 20077, 31361, 20189, 20908, 20941, 21205, 21516, 24999, 26481, 26704, 26847, [27934, 64005], 28540, 30140, 30643, 31461, 33012, 33891, 37509, 20828, [12099, 26007], 26460, 26515, 30168, 31431, 33651, [12182, 35910], 36887, 38957, 23663, 33216, 33434, 36929, 36975, 37389, 24471, 23965, 27225, 29128, 30331, 31561, 34276, 35588, 
  37159, 39472, [21895, 63755], [25078, 63757], [30313, 63758], [32645, 63759], [34367, 63760], [34746, 63761], [35064, 63762], [37007, 63763], [27931, 63765], [28889, 63766], [29662, 63767], 32097, [33853, 63768], [37226, 63769], [39409, 63770], [20098, 63771], [21365, 63772], [27396, 63773], 27410, 28734, [29211, 63774], [34349, 63775], [40478, 63776], 21068, 36771, [23888, 63777], 25829, 25900, 27414, [28651, 63778], 31811, 32412, [34253, 63779], [35172, 63780], 35261, [25289, 63781], [33240, 
  63782], [34847, 63783], [24266, 63784], [26391, 63785], [28010, 63786], [29436, 63787], 29701, 29807, 34690, [37086, 63788], [20358, 63789], 23821, 24480, 33802, [20919, 63790], [25504, 63861], [30053, 63862], [20142, 63863], 20486, [20841, 63864], [20937, 63865], [26753, 63866], 27153, 31918, 31921, [31975, 63867], [33391, 63868], [35538, 63869], 36635, [37327, 63870], 20406, 20791, [21237, 63871], [21570, 63872], [24300, 63874], 24942, 25150, [26053, 63875], 27354, [28670, 63876], [31018, 63877], 
  34268, 34851, [38317, 63878], 39522, [39530, 63879], [40599, 63880], [40654, 63881], [12050, 21147, 63882], [26310, 63883], [27511, 63884], 28701, 31019, [36706, 63885], 38722, [24976, 63887], [25088, 63888], 25891, [28451, 63890], [29001, 63891], [29833, 63892], [32244, 63894], [32879, 63895], [34030, 63897], [36646, 63896], [36899, 63898], [37706, 63899], 20925, [21015, 63900], [21155, 63901], 27916, [28872, 63903], [35010, 63904], [24265, 63906], 25986, [27566, 63909], 28610, [31806, 63910], 
  [29557, 63911], [20196, 63912], 20278, [22265, 63913], 23738, [23994, 63915], [24604, 63916], [29618, 63917], 31533, [32666, 63919], 32718, [32838, 63920], 36894, [37428, 63921], [38646, 63922], [38728, 63923], [38936, 63924], 40801, [20363, 63925], 28583, [31150, 63926], [37300, 63927], [38583, 63928], [21214, 63791], 25736, [25796, 63792], [27347, 63793], 28510, 28696, [29200, 63794], [30439, 63795], [12156, 32769, 63796], [34310, 63797], [34396, 63798], [36335, 63799], 36613, [38706, 63800], 
  [39791, 63801], [40442, 63802], [12228, 40565], [30860, 63803], [31103, 63804], [32160, 63805], [33737, 63806], [37636, 63807], [12229, 40575, 63808], 40595, [35542, 63809], [22751, 63810], [24324, 63811], 26407, 28711, 29903, [31840, 63812], [32894, 63813], 20769, 28712, [29282, 63814], [30922, 63815], [36034, 63816], 36058, 36084, [38647, 63817], [20102, 63930], [20698, 63931], [23534, 63932], 24278, [26009, 63934], [29134, 63936], [30274, 63937], 30637, 32842, [34044, 63938], [36988, 63939], 
  39719, [12243, 40845, 63940], [22744, 63818], 23105, [23650, 63819], [27155, 63820], [28122, 63821], [28431, 63822], 30267, [32047, 63823], [32311, 63824], 34078, 35128, 37860, [38475, 63825], [21129, 63943], 26066, [26611, 63945], 27060, [27969, 63946], [28316, 63947], 28687, [29705, 63948], 29792, [30041, 63949], 30244, [30827, 63950], 35628, [39006, 63952], [20845, 63953], [25134, 63954], [38520, 63955], 20374, [20523, 63956], [23833, 63957], [28138, 63958], 32184, [36650, 63959], [24459, 63960], 
  [24900, 63961], [26647, 63962], [38534, 63964], [21202, 63826], [32907, 63827], [20956, 63828], [20940, 63829], 26974, [31260, 63830], [32190, 63831], [33777, 63832], [38517, 63833], 20442, [21033, 63965], 21400, [21519, 63966], 21774, [23653, 63967], 24743, [26446, 63969], [26792, 63970], 28012, 29313, 29432, [29702, 63972], 29827, [30178, 63973], 31852, [32633, 63974], 32696, 33673, [35023, 63975], [35041, 63976], [12197, 37324, 63977], 37328, [38626, 63978], 39881, [21533, 63981], 28542, [29136, 
  63982], [29848, 63983], [34298, 63984], 36522, [38563, 63985], [40023, 63986], [40607, 63987], [26519, 63988], [28107, 63989], 29747, [33256, 63990], 38678, 30764, [12148, 31435, 63991], [31520, 63992], [31890, 63993], 25705, 29802, 30194, 30908, 30952, [12218, 39340], 39764, [12231, 40635], 23518, 24149, 28448, 33180, 33707, 37E3, 19975, 21325, 23081, 24018, 24398, 24930, 25405, 26217, 26364, 28415, 28459, 28771, 30622, 33836, 34067, 34875, 36627, 39237, 39995, 21788, 25273, 26411, 27819, 33545, 
  35178, 38778, 20129, 22916, {f:2, c:24536}, 26395, 32178, 32596, 33426, 33579, 33725, 36638, 37017, 22475, 22969, 23186, 23504, 26151, 26522, 26757, 27599, 29028, 32629, 36023, 36067, 36993, 39749, 33032, 35978, 38476, 39488, [12230, 40613], 23391, 27667, 29467, 30450, 30431, 33804, 20906, 35219, 20813, 20885, 21193, 26825, 27796, 30468, 30496, 32191, 32236, [12207, 38754], 40629, 28357, 34065, 20901, 21517, 21629, 26126, 26269, 26919, 28319, [12139, 30399], 30609, 33559, 33986, 34719, 37225, 37528, 
  40180, 34946, 20398, 20882, 21215, 22982, 24125, 24917, {f:2, c:25720}, 26286, 26576, 27169, 27597, [12113, 27611], 29279, 29281, 29761, 30520, [12141, 30683], 32791, 33468, 33541, 35584, 35624, 35980, [12106, 26408], 27792, 29287, [12140, 30446], 30566, 31302, 40361, 27519, 27794, 22818, 26406, 33945, 21359, 22675, 22937, 24287, 25551, 26164, 26483, 28218, 29483, 31447, 33495, 37672, 21209, 24043, 25006, 25035, 25098, 25287, 25771, [12102, 26080], 26969, 27494, [12111, 27595], 28961, 29687, 30045, 
  32326, 33310, 33538, 34154, 35491, 36031, 38695, 40289, 22696, 40664, 20497, 21006, 21563, 21839, [12098, 25991], 27766, {f:2, c:32010}, 32862, 34442, [12200, 38272], 38639, 21247, 27797, 29289, 21619, 23194, 23614, 23883, 24396, 24494, 26410, 26806, 26979, 28220, 28228, 30473, [12150, 31859], 32654, 34183, 35598, 36855, 38753, 40692, 23735, 24758, 24845, 25003, 25935, {f:2, c:26107}, 27665, 27887, 29599, 29641, 32225, 38292, 23494, 34588, 35600, 21085, 21338, 25293, 25615, 25778, 26420, 27192, 
  27850, 29632, 29854, 31636, 31893, 32283, 33162, 33334, 34180, 36843, 38649, 39361, 20276, 21322, 21453, 21467, 25292, 25644, 25856, 26001, 27075, 27886, 28504, 29677, 30036, 30242, 30436, 30460, 30928, [30971, 63844], 31020, 32070, 33324, 34784, 36820, 38930, 39151, 21187, 25300, 25765, 28196, 28497, 30332, 36299, 37297, 37474, 39662, 39747, 20515, 20621, 22346, 22952, 23592, 24135, 24439, 25151, 25918, [12101, 26041], 26049, 26121, 26507, 27036, 28354, 30917, 32033, 32938, 33152, 33323, 33459, 
  33953, 34444, 35370, 35607, 37030, 38450, 40848, 20493, 20467, 22521, 24472, 25308, 25490, 26479, 28227, 28953, 30403, 32972, 32986, {f:2, c:35060}, 35097, 36064, 36649, 37197, 38506, 20271, 20336, 24091, 26575, 26658, [12137, 30333], 30334, 39748, 24161, 27146, 29033, 29140, 30058, 32321, 34115, 34281, 39132, 20240, 31567, 32624, 38309, 20961, 24070, 26805, 27710, 27726, 27867, 29359, 31684, 33539, 27861, 29754, 20731, 21128, 22721, 25816, 27287, 29863, 30294, 30887, 34327, 38370, 38713, 21342, 
  24321, 35722, 36776, 36783, 37002, 21029, 30629, 40009, 40712, 19993, 20482, 20853, 23643, 24183, 26142, 26170, 26564, 26821, 28851, 29953, 30149, 31177, 31453, 36647, 39200, 39432, 20445, 22561, 22577, 23542, 26222, 27493, 27921, 28282, 28541, 29668, 29995, 33769, 35036, 35091, 35676, 36628, 20239, 20693, 21264, [12056, 21340], 23443, [24489, 63846], 26381, 31119, 33145, 33583, 34068, 35079, 35206, 36665, [36667, 64007], 39333, 39954, 26412, 20086, 20472, 22857, 23553, {f:2, c:23791}, 25447, 26834, 
  28925, 29090, 29739, 32299, 34028, 34562, 36898, 37586, 40179, [19981, 63847], 20184, 20463, 20613, 21078, 21103, 21542, 21648, 22496, 22827, 23142, 23386, 23413, 23500, 24220, 25206, 25975, 26023, 28014, 28325, [12119, 29238], 31526, 31807, [12152, 32566], {f:2, c:33104}, 33178, 33344, 33433, 33705, 35331, 36E3, 36070, 36091, 36212, 36282, 37096, 37340, [12201, 38428], 38468, 39385, 40167, [21271, 63843], 20998, 21545, 22132, 22707, 22868, 22894, 24575, 24996, 25198, 26128, 27774, 28954, 30406, 
  31881, 31966, 32027, 33452, 36033, 38640, 20315, 24343, 24447, 25282, 23849, 26379, 26842, 30844, 32323, 40300, 19989, 20633, [12052, 21269], 21290, 21329, 22915, 23138, 24199, 24754, 24970, 25161, 25209, 26E3, 26503, 27047, [12112, 27604], {f:3, c:27606}, 27832, 29749, 30202, 30738, 30865, 31189, 31192, 31875, 32203, 32737, 32933, 33086, 33218, 33778, 34586, 35048, 35513, 35692, 36027, 37145, [12206, 38750], [12214, 39131], [12240, 40763], 22188, 23338, 24428, 25996, 27315, 27567, 27996, 28657, 
  28693, 29277, 29613, 36007, 36051, 38971, 24977, 27703, 32856, 39425, 20045, 20107, 20123, 20181, 20282, 20284, 20351, 20447, 20735, 21490, 21496, 21766, 21987, 22235, [12064, 22763], 22882, 23057, 23531, 23546, 23556, 24051, 24107, 24473, 24605, 25448, 26012, 26031, 26614, 26619, 26797, 27515, 27801, 27863, 28195, 28681, 29509, 30722, 31038, 31040, 31072, 31169, 31721, 32023, 32114, 32902, 33293, 33678, 34001, 34503, 35039, 35408, 35422, 35613, 36060, 36198, 36781, 37034, 39164, 39391, 40605, 
  21066, 26388, 20632, 21034, [12077, 23665], 25955, 27733, 29642, 29987, 30109, 31639, 33948, 37240, 38704, 20087, 25746, [27578, 63856], 29022, 34217, 19977, 26441, 26862, 28183, 33439, 34072, 34923, 25591, 28545, 37394, 39087, 19978, 20663, 20687, 20767, 21830, 21930, 22039, 23360, 23577, 23776, 24120, 24202, 24224, 24258, 24819, 26705, 27233, 28248, 29245, 29248, [29376, 63994], 30456, 31077, 31665, 32724, 35059, 35316, 35443, 35937, 36062, 38684, [22622, 63852], 29885, 36093, 21959, 31329, [32034, 
  63850], [12170, 33394], 29298, [12131, 29983], 29989, 31513, 22661, 22779, 23996, 24207, 24246, 24464, 24661, 25234, 25471, 25933, 26257, 26329, 26360, 26646, 26866, 29312, 29790, 31598, 32110, 32214, 32626, 32997, 33298, 34223, 35199, 35475, 36893, 37604, [12233, 40653], [12239, 40736], [12067, 22805], 22893, 24109, 24796, 26132, 26227, 26512, 27728, 28101, 28511, [12143, 30707], 30889, 33990, 37323, 37675, 20185, 20682, 20808, 21892, 23307, 23459, 25159, 25982, 26059, 28210, 29053, 29697, 29764, 
  29831, 29887, 30316, 31146, 32218, 32341, 32680, 33146, 33203, 33337, 34330, 34796, 35445, 36323, 36984, 37521, 37925, 39245, 39854, 21352, 23633, 26964, 27844, 27945, 28203, [12166, 33292], 34203, 35131, 35373, [35498, 63855, 63905], 38634, 40807, 21089, 26297, 27570, 32406, 34814, 36109, 38275, 38493, 25885, 28041, 29166, 22478, 22995, 23468, 24615, 24826, 25104, 26143, 26207, 29481, 29689, 30427, [30465, 63853], 31596, 32854, 32882, 33125, 35488, 37266, 19990, 21218, 27506, 27927, 31237, 31545, 
  32048, 36016, 21484, 22063, 22609, 23477, [12073, 23567], 23569, 24034, 25152, 25475, 25620, 26157, 26803, 27836, 28040, 28335, 28703, 28836, 29138, 29990, 30095, 30094, 30233, 31505, 31712, 31787, 32032, 32057, 34092, 34157, 34311, 35380, 36877, 36961, 37045, 37559, 38902, 39479, 20439, 23660, 26463, 28049, 31903, 32396, 35606, 36118, 36895, 23403, 24061, 25613, 33984, 36956, 39137, [29575, 63841, 63963], 23435, 24730, 26494, 28126, 35359, 35494, 36865, 38924, 21047, 28753, 30862, 37782, 34928, 
  37335, 20462, 21463, 22013, 22234, 22402, 22781, 23234, 23432, 23723, 23744, 24101, 24833, 25101, [12095, 25163], 25480, 25628, 25910, [25976, 63849], 27193, 27530, [12116, 27700], 27929, 28465, 29159, 29417, 29560, 29703, 29874, 30246, 30561, 31168, 31319, 31466, 31929, 32143, 32172, 32353, 32670, 33065, 33585, 33936, 34010, 34282, 34966, 35504, 35728, 36664, 36930, 36995, 37228, 37526, 37561, 38539, {f:2, c:38567}, 38614, 38656, 38920, [12216, 39318], 39635, 39706, 21460, 22654, 22809, 23408, 
  23487, 28113, 28506, 29087, 29729, 29881, 32901, 33789, 24033, 24455, 24490, 24642, 26092, 26642, 26991, 27219, 27529, 27957, 28147, 29667, 30462, 30636, 31565, 32020, 33059, 33308, 33600, 34036, 34147, 35426, 35524, 37255, 37662, 38918, 39348, 25100, 34899, 36848, 37477, 23815, 23847, 23913, 29791, 33181, 34664, 28629, [25342, 63859], 32722, 35126, 35186, 19998, 20056, 20711, 21213, 21319, 25215, 26119, 32361, 34821, 38494, 20365, 21273, 22070, 22987, 23204, [12075, 23608], 23630, 23629, 24066, 
  24337, 24643, 26045, 26159, 26178, 26558, 26612, 29468, [12142, 30690], [12144, 31034], 32709, 33940, 33997, 35222, 35430, 35433, 35553, [12183, 35925], 35962, 22516, 23508, 24335, 24687, 25325, 26893, 27542, 28252, 29060, 31698, 34645, [35672, 63996], 36606, [12215, 39135], 39166, 20280, 20353, 20449, 21627, 23072, 23480, 24892, 26032, 26216, 29180, 30003, 31070, 32051, 33102, [12162, 33251], 33688, 34218, 34254, 34563, 35338, [12189, 36523], [12191, 36763], 36805, 22833, 23460, 23526, 24713, 
  23529, 23563, [12092, 24515], 27777, 28145, 28683, 29978, 33455, 35574, [20160, 63997], [12055, 21313], 38617, [12114, 27663], 20126, 20420, 20818, 21854, 23077, 23784, 25105, [12123, 29273], 33469, 33706, 34558, 34905, 35357, 38463, 38597, 39187, 40201, 40285, 22538, 23731, 23997, 24132, [24801, 63929], 24853, 25569, [27138, 63764, 63836, 63935], 28197, 37122, 37716, 38990, 39952, 40823, 23433, 23736, 25353, 26191, 26696, 30524, 38593, 38797, 38996, 39839, 26017, 35585, 36555, 38332, 21813, 23721, 
  24022, 24245, 26263, 30284, 33780, 38343, 22739, 25276, 29390, 40232, 20208, 22830, 24591, 26171, 27523, 31207, 40230, 21395, 21696, 22467, 23830, 24859, 26326, 28079, 30861, 33406, 38552, 38724, 21380, 25212, 25494, 28082, 32266, 33099, 38989, 27387, 32588, 40367, 40474, 20063, 20539, 20918, 22812, 24825, 25590, 26928, 29242, 32822, 37326, 24369, 32004, [33509, 63860], 33903, 33979, 34277, 36493, 20335, 22756, 23363, 24665, 25562, 25880, 25965, 26264, 26954, 27171, 27915, 28673, 29036, 30162, 
  30221, 31155, 31344, [12154, 32650], 35140, 35731, 37312, 38525, 39178, 22276, 24481, 26044, 28417, 30208, 31142, 35486, 39341, [12226, 39770], 40812, 20740, 25014, 25233, 27277, 33222, 20547, 22576, 24422, 28937, [12180, 35328], 35578, 23420, 34326, 20474, 20796, 22196, 22852, 25513, 28153, 23978, 26989, 20870, 20104, 20313, 22914, 27487, 27741, 29877, 30998, 33287, 33349, 33593, 36671, 36701, 39192, 20134, 22495, 24441, [26131, 63968], 30123, 32377, 35695, 36870, 39515, 22181, 22567, 23032, 23071, 
  23476, 24310, 25424, 25403, 26941, 27783, 27839, 28046, 28051, 28149, 28436, 28895, 28982, 29017, 29123, 29141, 30799, 30831, 31605, 32227, 32303, 34893, 36575, 37467, 40182, 24709, 28037, 29105, 38321, 21421, 26579, 28814, 28976, 29744, 33398, 33490, 38331, 39653, 40573, 26308, 29121, [33865, 63854], 22603, 23992, 24433, 26144, 26254, 27001, 27054, 27704, 27891, 28214, 28481, 28634, 28699, 28719, 29008, 29151, 29552, 29787, 29908, 30408, 31310, 32403, 33521, 35424, 36814, 37704, 38681, 20034, 
  20522, 21E3, 21473, 26355, 27757, 28618, 29450, 30591, 31330, 33454, 34269, 34306, 35028, 35427, 35709, 35947, 37555, 38675, 38928, 20116, 20237, 20425, 20658, 21320, 21566, 21555, 21978, 22626, 22714, 22887, 23067, 23524, 24735, 25034, 25942, 26111, 26212, 26791, 27738, 28595, 28879, 29100, 29522, 31613, 34568, 35492, 39986, 40711, 23627, 27779, 29508, [12127, 29577], 37434, 28331, 29797, 30239, 31337, 32277, 34314, 20800, 22725, 25793, 29934, 29973, 30320, 32705, 37013, 38605, 39252, 28198, [12129, 
  29926], {f:2, c:31401}, 33253, 34521, 34680, 35355, 23113, 23436, 23451, 26785, 26880, 28003, 29609, 29715, 29740, 30871, 32233, 32747, 33048, 33109, 33694, 35916, [38446, 63942], 38929, [12104, 26352], 24448, 26106, 26505, 27754, 29579, 20525, 23043, 27498, 30702, 22806, 23916, 24013, 29477, 30031, 20709, 20985, 22575, 22829, 22934, 23002, 23525, 23970, 25303, 25622, 25747, 25854, 26332, 27208, 29183, 29796, 31368, 31407, 32327, 32350, 32768, 33136, 34799, 35201, 35616, 36953, 36992, 39250, 24958, 
  27442, 28020, 32287, 35109, 36785, 20433, 20653, 20887, 21191, 22471, 22665, 23481, 24248, 24898, 27029, 28044, 28263, 28342, 29076, 29794, [12132, 29992], 29996, 32883, 33592, 33993, 36362, 37780, 37854, 20110, 20305, 20598, 20778, [12060, 21448], 21451, 21491, 23431, 23507, 23588, 24858, 24962, 26100, [12124, 29275], 29591, 29760, 30402, 31056, 31121, 31161, 32006, [12155, 32701], 33419, 34261, 34398, 36802, 36935, 37109, 37354, 38533, [12204, 38632], 38633, 21206, 24423, 26093, 26161, 26671, 
  29020, 31286, 37057, 38922, 20113, 27218, 27550, 28560, 29065, 32792, 33464, 34131, 36939, 38549, 38642, 38907, 34074, 39729, 20112, 29066, 38596, 20803, 21407, 21729, 22291, 22290, 22435, 23195, 23236, 23491, 24616, 24895, 25588, 27781, 27961, 28274, 28304, 29232, 29503, 29783, 33489, 34945, 36677, 36960, 38498, 39E3, 40219, [12105, 26376], 36234, 37470, 20301, 20553, 20702, 21361, 22285, 22996, 23041, 23561, 24944, 26256, 28205, 29234, 29771, 32239, 32963, 33806, 33894, 34111, 34655, 34907, 35096, 
  35586, 36949, [12209, 38859], 39759, 20083, 20369, 20754, 20842, 21807, 21929, 23418, 23461, {f:2, c:24188}, 24254, 24736, 24799, {f:2, c:24840}, 25540, 25912, 26377, 26580, 26586, {f:2, c:26977}, 27833, 27943, 28216, 28641, {f:2, c:29494}, 29788, 30001, 30290, 32173, 33278, 33848, 35029, 35480, 35547, 35565, 36400, 36418, 36938, 36926, 36986, [12195, 37193], 37321, 37742, 22537, 27603, [12161, 32905], 32946, 20801, 22891, 23609, 28516, 29607, 32996, 36103, 37399, 38287, [12160, 32895], 25102, 
  28700, 32104, 34701, 22432, 24681, 24903, 27575, 35518, 37504, 38577, [12036, 20057], 21535, 28139, 34093, 38512, [12211, 38899], 39150, 25558, 27875, [12194, 37009], 20957, 25033, 33210, 40441, 20381, 20506, 20736, 23452, 24847, 25087, 25836, 26885, 27589, 30097, 30691, 32681, 33380, 34191, 34811, [12176, 34915], 35516, 35696, 37291, [12038, 20108], 20197, 20234, 22839, 23016, 24050, 24347, 24411, 24609, 29246, 29669, [30064, 63842], 30157, 31227, [12157, 32780], [12159, 32819], 32900, 33505, 
  33617, 36029, 36019, 36999, 39156, 39180, 28727, 30410, 32714, 32716, 32764, 35610, [12040, 20154], 20161, 20995, 21360, [21693, 63902], 22240, 23035, 23493, 24341, 24525, 28270, 32106, 33589, 34451, 35469, 38765, 38775, [12032, 19968], 20314, 20350, 22777, [12103, 26085], 28322, 36920, 37808, 39353, 20219, 22764, 22922, 23001, 24641, 31252, 33615, 36035, [12042, 20837], 21316, 20173, 21097, 23381, 33471, 20180, [21050, 63999], 21672, 22985, 23039, [12070, 23376], 23383, 23388, 24675, 24904, 28363, 
  [28825, 63995], 29038, 29574, 29943, 30133, 30913, 32043, 32773, [12163, 33258], 33576, 34071, 34249, 35566, 36039, 38604, 20316, 21242, 22204, 26027, 26152, 28796, 28856, 29237, 32189, 33421, 37196, 38592, 40306, 23409, 26855, 27544, 28538, 30430, 23697, 26283, 28507, 31668, 31786, 34870, 38620, 19976, 20183, 21280, 22580, 22715, 22767, 22892, 23559, 24115, 24196, 24373, 25484, 26290, 26454, 27167, 27299, 27404, 28479, 29254, 29520, 29835, 31456, 31911, 33144, 33247, 33255, 33674, 33900, 34083, 
  34196, 34255, 35037, 36115, 37292, [12199, 38263], 38556, 20877, 21705, 22312, 23472, 25165, 26448, 26685, 26771, 28221, 28371, 28797, 32289, 35009, 36001, 36617, 40779, 40782, 29229, 31631, 35533, 37658, 20295, 20302, 20786, 21632, 22992, 24213, 25269, 26485, 26990, 27159, 27822, 28186, 29401, 29482, 30141, 31672, 32053, 33511, 33785, 33879, 34295, 35419, 36015, 36487, 36889, 37048, 38606, 40799, 21219, 21514, 23265, 23490, 25688, 25973, 28404, 29380, 30340, 31309, 31515, 31821, 32318, 32735, 
  33659, 35627, 36042, [12186, 36196], 36321, 36447, 36842, 36857, 36969, 37841, 20291, 20346, 20659, 20840, 20856, 21069, 21098, 22625, 22652, 22880, 23560, 23637, 24283, 24731, 25136, 26643, 27583, 27656, 28593, 29006, 29728, [12133, 3E4], 30008, 30033, 30322, 31564, 31627, 31661, 31686, 32399, 35438, 36670, 36681, 37439, 37523, 37666, 37931, 38651, 39002, 39019, 39198, [20999, 64E3], 25130, 25240, 27993, 30308, 31434, 31680, 32118, 21344, 23742, 24215, 28472, 28857, 31896, 38673, 39822, 40670, 
  25509, 25722, 34678, 19969, 20117, 20141, 20572, 20597, 21576, 22979, 23450, 24128, 24237, 24311, 24449, 24773, 25402, 25919, 25972, 26060, 26230, 26232, 26622, 26984, 27273, 27491, 27712, 28096, 28136, 28191, 28254, 28702, 28833, 29582, 29693, 30010, 30555, 30855, 31118, 31243, 31357, 31934, 32142, 33351, 35330, 35562, 35998, 37165, 37194, 37336, 37478, 37580, 37664, 38662, 38742, 38748, 38914, [12237, 40718], 21046, 21137, 21884, 22564, 24093, 24351, 24716, 25552, 26799, 28639, 31085, 31532, 
  33229, 34234, 35069, 35576, 36420, 37261, 38500, 38555, 38717, 38988, [12241, 40778], 20430, 20806, 20939, 21161, 22066, 24340, 24427, 25514, 25805, 26089, 26177, 26362, 26361, 26397, 26781, 26839, 27133, 28437, 28526, 29031, 29157, [12118, 29226], 29866, 30522, 31062, 31066, 31199, 31264, 31381, 31895, 31967, 32068, 32368, 32903, 34299, 34468, 35412, 35519, 36249, 36481, 36896, 36973, 37347, 38459, 38613, [12227, 40165], 26063, 31751, [12188, 36275], 37827, 23384, 23562, 21330, 25305, 29469, 20519, 
  23447, 24478, 24752, 24939, 26837, 28121, 29742, 31278, 32066, 32156, 32305, 33131, 36394, 36405, 37758, 37912, 20304, 22352, 24038, 24231, 25387, 32618, 20027, 20303, 20367, 20570, 23005, 32964, 21610, 21608, 22014, 22863, 23449, 24030, 24282, 26205, 26417, 26609, 26666, 27880, 27954, 28234, 28557, 28855, 29664, 30087, 31820, 32002, 32044, 32162, [12168, 33311], 34523, 35387, 35461, [12187, 36208], 36490, 36659, 36913, 37198, 37202, 37956, 39376, [12149, 31481], 31909, 20426, 20737, 20934, 22472, 
  23535, 23803, 26201, 27197, 27994, 28310, 28652, 28940, 30063, 31459, 34850, 36897, 36981, 38603, 39423, 33537, 20013, 20210, 34886, 37325, 21373, 27355, 26987, 27713, 33914, 22686, 24974, 26366, 25327, 28893, 29969, 30151, 32338, 33976, 35657, 36104, 20043, 21482, 21675, 22320, 22336, 24535, 25345, 25351, 25711, [12096, 25903], 26088, 26234, 26525, 26547, [12108, 27490], 27744, 27802, 28460, 30693, 30757, 31049, 31063, 32025, 32930, 33026, [12164, 33267], 33437, 33463, 34584, 35468, 36100, 36286, 
  36978, 30452, 31257, 31287, 32340, 32887, 21767, 21972, 22645, 25391, 25634, 26185, 26187, 26733, 27035, 27524, 27941, 28337, 29645, 29800, 29857, 30043, 30137, 30433, 30494, 30603, 31206, 32265, 32285, 33275, 34095, 34967, 35386, 36049, 36587, [12192, 36784, 63857], 36914, 37805, 38499, 38515, 38663, 20356, 21489, 23018, 23241, 24089, 26702, 29894, 30142, 31209, 31378, 33187, 34541, 36074, 36300, 36845, 26015, 26389, 22519, 28503, 32221, 36655, 37878, 38598, 24501, 25074, 28548, 19988, 20376, 
  20511, 21449, 21983, 23919, 24046, 27425, 27492, 30923, 31642, 36425, [12190, 36554, 63746], 36974, 25417, 25662, 30528, 31364, 37679, 38015, 40810, 25776, 28591, 29158, 29864, 29914, 31428, 31762, 32386, 31922, 32408, 35738, 36106, 38013, 39184, 39244, 21049, 23519, 25830, 26413, 32046, 20717, [21443, 63851], 22649, {f:2, c:24920}, 25082, 26028, 31449, 35730, 35734, 20489, 20513, 21109, 21809, 23100, 24288, 24432, 24884, 25950, 26124, 26166, 26274, 27085, 28356, 28466, 29462, 30241, 31379, 33081, 
  33369, 33750, 33980, 20661, 22512, 23488, 23528, 24425, 25505, 30758, 32181, 33756, 34081, 37319, 37365, 20874, 26613, 31574, 36012, 20932, 22971, 24765, 34389, 20508, 21076, 23610, 24957, 25114, [25299, 64002], 25842, 26021, 28364, 30240, 33034, 36448, 38495, 38587, 20191, 21315, 21912, 22825, 24029, 25797, 27849, 28154, 29588, 31359, [12167, 33307], 34214, 36068, 36368, 36983, 37351, 38369, 38433, 38854, 20984, 21746, 21894, 24505, 25764, 28552, 32180, 36639, 36685, 37941, 20681, 23574, 27838, 
  28155, 29979, 30651, 31805, 31844, 35449, 35522, 22558, 22974, 24086, 25463, 29266, 30090, 30571, 35548, 36028, 36626, 24307, 26228, 28152, 32893, 33729, 35531, [12205, 38737], 39894, 21059, 26367, 28053, 28399, 32224, 35558, 36910, 36958, 39636, 21021, 21119, 21736, 24980, 25220, 25307, 26786, 26898, 26970, 27189, 28818, 28966, 30813, 30977, 30990, 31186, 31245, 32918, [12171, 33400], 33493, 33609, 34121, 35970, 36229, 37218, 37259, 37294, 20419, 22225, 29165, 30679, 34560, 35320, [12072, 23544], 
  24534, 26449, 37032, 21474, 22618, 23541, 24740, 24961, 25696, 32317, 32880, 34085, 37507, 25774, 20652, 23828, 26368, 22684, 25277, 25512, 26894, 27E3, 27166, 28267, 30394, 31179, 33467, 33833, 35535, 36264, 36861, 37138, 37195, 37276, 37648, 37656, 37786, 38619, 39478, 39949, 19985, 30044, 31069, 31482, 31569, 31689, 32302, 33988, 36441, 36468, 36600, 36880, 26149, 26943, 29763, 20986, 26414, 40668, 20805, 24544, 27798, 34802, 34909, 34935, 24756, 33205, 33795, 36101, 21462, 21561, 22068, 23094, 
  23601, 28810, 32736, 32858, 33030, 33261, 36259, 37257, 39519, 40434, 20596, 20164, 21408, 24827, 28204, 23652, 20360, 20516, 21988, 23769, 24159, 24677, 26772, 27835, 28100, 29118, 30164, 30196, 30305, 31258, 31305, 32199, 32251, 32622, 33268, 34473, 36636, 38601, 39347, [12242, 40786], 21063, 21189, 39149, 35242, 19971, 26578, 28422, 20405, 23522, 26517, [27784, 63858], 28024, 29723, 30759, 37341, 37756, 34756, 31204, 31281, 24555, 20182, 21668, 21822, 22702, 22949, 24816, 25171, 25302, 26422, 
  26965, 33333, 38464, 39345, 39389, 20524, 21331, 21828, 22396, 25176, 25826, 26219, 26589, 28609, 28655, 29730, 29752, 35351, 37944, 21585, 22022, 22374, 24392, 24986, 27470, 28760, 28845, 32187, 35477, 22890, 33067, 25506, 30472, 32829, 36010, 22612, 25645, 27067, 23445, 24081, 28271, 34153, 20812, 21488, 22826, 24608, 24907, 27526, 27760, 27888, 31518, 32974, 33492, 36294, 37040, 39089, 25799, 28580, 25745, 25860, 20814, 21520, [12063, 22303], 35342, 24927, 26742, 30171, 31570, 32113, 36890, 
  22534, 27084, 33151, 35114, 36864, 38969, 20600, 22871, 22956, 25237, 36879, 39722, 24925, 29305, 38358, 22369, 23110, 24052, 25226, 25773, 25850, 26487, 27874, 27966, 29228, 29750, 30772, 32631, 33453, 36315, 38935, 21028, 22338, 26495, 29256, 29923, 36009, 36774, 37393, 38442, [12043, 20843], 21485, 25420, 20329, 21764, 24726, 25943, 27803, 28031, 29260, 29437, 31255, 35207, [12185, 35997], 24429, 28558, 28921, 33192, 24846, [20415, 63845], 20559, 25153, [12122, 29255], 31687, 32232, 32745, 36941, 
  38829, 39449, 36022, 22378, 24179, 26544, 33805, 35413, 21536, 23318, 24163, 24290, 24330, 25987, 32954, 34109, 38281, 38491, 20296, 21253, 21261, 21263, 21638, 21754, 22275, 24067, 24598, 25243, 25265, 25429, 27873, 28006, 30129, 30770, 32990, 33071, 33502, 33889, 33970, 34957, 35090, 36875, 37610, 39165, 39825, 24133, [26292, 64006], 26333, 28689, 29190, 20469, 21117, 24426, 24915, 26451, 27161, 28418, 29922, 31080, 34920, 35961, 39111, 39108, 39491, 21697, 31263, 26963, 35575, 35914, [12213, 
  39080], 39342, 24444, 25259, 30130, [12138, 30382], 34987, 36991, 38466, 21305, 24380, 24517, [27852, 63848], 29644, 30050, [12134, 30091], 31558, 33534, 39325, 20047, 36924, 19979, 20309, 21414, 22799, 24264, 26160, 27827, 29781, 33655, 34662, 36032, 36944, 38686, 39957, 22737, 23416, 34384, 35604, 40372, 23506, 24680, 24717, 26097, 27735, 28450, 28579, 28698, 32597, 32752, {f:2, c:38289}, 38480, 38867, 21106, 36676, 20989, 21547, 21688, 21859, 21898, 27323, 28085, 32216, 33382, 37532, 38519, 
  40569, 21512, 21704, 30418, 34532, 38308, 38356, 38492, 20130, 20233, 23022, 23270, 24055, 24658, 25239, 26477, 26689, 27782, 28207, 32568, 32923, 33322, 38917, 20133, 20565, 21683, 22419, 22874, 23401, 23475, 25032, 26999, 28023, 28707, 34809, 35299, 35442, 35559, 36994, 39405, 39608, 21182, 26680, 20502, 24184, 26447, 33607, [12175, 34892, 64008], 20139, 21521, 22190, 29670, 37141, 38911, 39177, 39255, [12217, 39321], 22099, 22687, 34395, 35377, 25010, 27382, 29563, 36562, 27463, 38570, 39511, 
  22869, 29184, 36203, [12208, 38761], 20436, 23796, 24358, 25080, 26203, 27883, 28843, [12126, 29572], 29625, 29694, 30505, 30541, 32067, 32098, 32291, 33335, 34898, 36066, 37449, 39023, 23377, [12147, 31348], [12174, 34880], [12212, 38913], 23244, 20448, 21332, 22846, 23805, 25406, 28025, 29433, 33029, 33031, 33698, 37583, 38960, 20136, 20804, 21009, 22411, 24418, 27842, 28366, 28677, 28752, 28847, 29074, 29673, [29801, 63918], 33610, 34722, 34913, 36872, 37026, 37795, 39336, 20846, 24407, 24800, 
  24935, 26291, 34137, 36426, 37295, 38795, 20046, 20114, 21628, 22741, 22778, 22909, 23733, 24359, [12094, 25142], 25160, 26122, 26215, 27627, 28009, 28111, 28246, 28408, 28564, 28640, 28649, 28765, 29392, 29733, 29786, 29920, 30355, 31068, 31946, 32286, 32993, 33446, 33899, 33983, 34382, 34399, 34676, 35703, 35946, 37804, 38912, 39013, 24785, 25110, 37239, 23130, 26127, 28151, 28222, 29759, 39746, 24573, 24794, 31503, 21700, 24344, 27742, 27859, 27946, 28888, 32005, 34425, 35340, 40251, 21270, 
  21644, 23301, 27194, [12117, 28779], 30069, 31117, [12146, 31166], 33457, 33775, 35441, 35649, 36008, 38772, 25844, 25899, {f:2, c:30906}, 31339, 20024, 21914, 22864, 23462, 24187, 24739, 25563, 27489, 26213, 26707, 28185, 29029, 29872, 32008, 36996, 39529, 39973, 27963, [28369, 63748], 29502, 35905, 38346, 20976, 24140, 24488, 24653, 24822, 24880, 24908, {f:2, c:26179}, 27045, 27841, 28255, 28361, 28514, 29004, 29852, 30343, 31681, 31783, 33618, 34647, 36945, 38541, [12232, 40643], 21295, 22238, 
  24315, 24458, 24674, 24724, 25079, 26214, 26371, 27292, 28142, 28590, 28784, 29546, 32362, 33214, 33588, 34516, 35496, 36036, 21123, 29554, 23446, 27243, 37892, 21742, 22150, 23389, 25928, 25989, 26313, 26783, 28045, 28102, [12120, 29243], 32948, 37237, 39501, 20399, 20505, 21402, 21518, 21564, 21897, 21957, 24127, 24460, 26429, 29030, 29661, 36869, 21211, 21235, 22628, 22734, 28932, 29071, 29179, 34224, 35347, [26248, 63941], 34216, 21927, 26244, 29002, 33841, 21321, 21913, 27585, 24409, 24509, 
  25582, 26249, 28999, 35569, 36637, 40638, 20241, 25658, 28875, 30054, 34407, 24676, 35662, 40440, 20807, 20982, 21256, 27958, 33016, [12234, 40657], 26133, 27427, 28824, 30165, 21507, 23673, 32007, 35350, [12107, 27424], 27453, 27462, 21560, 24688, 27965, 32725, 33288, 20694, 20958, 21916, 22123, 22221, 23020, 23305, 24076, 24985, 24984, 25137, 26206, 26342, 29081, {f:2, c:29113}, 29351, 31143, 31232, 32690, 35440, {s:163}, {f:4, c:12310}, {s:14}, 8223, 8219, {f:2, c:8314}, {s:7}, 8316, 0, {f:2, 
  c:8317}, {s:23}, 700, {s:44}, 8942, 8759, {s:20}, {f:10, c:10122}, {s:36}, {f:26, c:9398}, {s:61}, {f:2, c:8826}, {f:2, c:8910}, {f:2, c:8832}, {f:4, c:8816}, 0, 8842, 0, 8843, {f:2, c:8822}, 8825, {f:2, c:8922}, {s:5}, 8773, 8771, 8776, 0, 8868, {s:78}, 8244, {s:11}, 9839, {s:4}, 8258, {s:4}, 10045, 0, 0, 8226, {s:4}, {f:2, c:8249}, {s:16}, 10010, 10006, 0, 9711, {s:3}, 10070, 0, 9676, {s:24}, 9775, {s:6}, 12320, 0, {f:10, c:10102}, {s:17}, 12306, 12342, {s:13}, 8710, 0, 8735, 0, {f:2, c:8741}, 
  0, 8787, 8785, {f:2, c:8806}, 8723, {f:3, c:8853}, 0, 8980, 0, 0, 8802, 0, 9649, 0, 8738, 8784, 0, 0, 8867, 0, 0, {f:2, c:8814}, 8837, 8836, 8713, 8716, {f:2, c:8891}, 8794, 8966, {s:6}, 12958, 0, 8252, {s:11}, 9702, {s:3}, 9663, 9653, 9657, 9667, {s:4}, 9674, 12849, 12857, 13259, {f:5, c:9327}, {s:18}, 8656, 8655, 8653, {s:37}, 8657, 8659, {s:8}, 8626, 8625, 0, 8628, 8624, 8627, {s:14}, 8636, 8640, {s:10}, {f:2, c:8644}, {s:144}, {f:5, c:9347}, {s:33}, 12948, {s:15}, 12965, {s:93}, 8672, 8674, 
  8673, 8675, {s:4}, 8678, 8680, 8679, 8681, {s:20}, 9757, 9759, {s:76}, 12944, {f:6, c:12938}, {s:15}, {f:2, c:12318}, 8246, 0, 8245, {s:3}, 12540, 0, 0, {f:2, c:44034}, {f:2, c:44037}, {f:5, c:44043}, 44056, {f:2, c:44062}, {f:3, c:44065}, {f:7, c:44069}, 44078, {f:6, c:44082}, {f:2, c:44090}, {f:3, c:44093}, {f:10, c:44097}, 44108, {f:6, c:44110}, {f:3, c:44117}, {f:3, c:44121}, {f:19, c:44125}, {f:2, c:44146}, {f:2, c:44149}, 44153, {f:5, c:44155}, 44162, {f:2, c:44167}, {f:3, c:44173}, {f:3, 
  c:44177}, {f:7, c:44181}, 44190, {f:6, c:44194}, 44203, {f:2, c:44205}, {f:7, c:44209}, 44218, {f:3, c:44222}, {f:2, c:44226}, {f:3, c:44229}, {f:3, c:44233}, {f:8, c:44237}, 44246, {f:8, c:44248}, {f:2, c:44258}, {f:2, c:44261}, 44265, 44267, {f:2, c:44269}, 44274, 44276, {f:5, c:44279}, {f:2, c:44286}, {f:3, c:44289}, 44293, {f:5, c:44295}, 44302, 44304, {f:6, c:44306}, {f:3, c:44313}, {f:3, c:44317}, {f:8, c:44321}, {f:2, c:44330}, {f:6, c:44334}, {f:2, c:44342}, {f:3, c:44345}, {f:7, c:44349}, 
  44358, 44360, {f:6, c:44362}, {f:3, c:44369}, {f:3, c:44373}, {f:8, c:44377}, 44386, {f:8, c:44388}, {f:2, c:44398}, {f:2, c:44401}, {f:4, c:44407}, 44414, 44416, {f:5, c:44419}, {f:2, c:44426}, {f:3, c:44429}, {f:11, c:44433}, {f:6, c:44446}, {f:18, c:44453}, {f:8, c:44472}, {f:2, c:44482}, {f:3, c:44485}, {f:7, c:44489}, 44498, {f:8, c:44500}, {f:3, c:44509}, {f:3, c:44513}, {f:19, c:44517}, {f:2, c:44538}, {f:2, c:44541}, {f:6, c:44546}, 44554, 44556, {f:6, c:44558}, {f:27, c:44565}, {f:2, c:44594}, 
  {f:2, c:44597}, 44601, {f:5, c:44603}, 44610, 44612, {f:3, c:44615}, 44619, 44623, {f:3, c:44625}, 44629, {f:5, c:44631}, 44638, {f:3, c:44642}, {f:2, c:44646}, {f:2, c:44650}, {f:3, c:44653}, {f:7, c:44657}, 44666, {f:6, c:44670}, {f:6, c:44678}, {f:47, c:44685}, 44735, {f:3, c:44737}, {f:7, c:44741}, 44750, {f:6, c:44754}, {f:2, c:44762}, {f:11, c:44765}, {f:2, c:44777}, 44780, {f:6, c:44782}, {f:3, c:44789}, {f:3, c:44793}, {f:10, c:44797}, {f:4, c:44809}, {f:2, c:44814}, {f:27, c:44817}, {f:2, 
  c:44846}, 44849, 44851, {f:7, c:44853}, 44862, 44864, {f:4, c:44868}, {f:6, c:44874}, {f:11, c:44881}, {f:6, c:44894}, {f:19, c:44902}, {f:6, c:44922}, {f:3, c:44929}, {f:3, c:44933}, {f:7, c:44937}, {f:3, c:44946}, {f:6, c:44950}, {f:27, c:44957}, {f:2, c:44986}, {f:3, c:44989}, {f:6, c:44993}, 45002, 45004, {f:5, c:45007}, {f:7, c:45013}, {f:11, c:45021}, {f:6, c:45034}, {f:2, c:45042}, {f:3, c:45045}, {f:7, c:45049}, {f:2, c:45058}, {f:7, c:45061}, {f:3, c:45069}, {f:3, c:45073}, {f:7, c:45077}, 
  {f:10, c:45086}, {f:27, c:45097}, {f:2, c:45126}, 45129, 45131, 45133, {f:4, c:45135}, 45142, 45144, {f:3, c:45146}, {f:30, c:45150}, {f:2, c:45182}, {f:3, c:45185}, {f:7, c:45189}, 45198, 45200, {f:6, c:45202}, 45211, {f:2, c:45213}, {f:5, c:45219}, 45226, 45232, 45234, {f:2, c:45238}, {f:3, c:45241}, {f:7, c:45245}, 45254, {f:6, c:45258}, {f:2, c:45266}, {f:3, c:45269}, {f:7, c:45273}, {f:4, c:45281}, {f:34, c:45286}, 45322, {f:3, c:45325}, 45329, {f:4, c:45332}, 45338, {f:5, c:45342}, {f:2, 
  c:45350}, {f:3, c:45353}, {f:7, c:45357}, 45366, {f:6, c:45370}, {f:2, c:45378}, {f:3, c:45381}, {f:7, c:45385}, {f:2, c:45394}, {f:2, c:45398}, {f:3, c:45401}, {f:3, c:45405}, {f:23, c:45409}, {f:2, c:45434}, {f:3, c:45437}, 45441, {f:5, c:45443}, 45450, 45452, {f:4, c:45454}, {f:3, c:45461}, {f:3, c:45465}, {f:11, c:45469}, {f:35, c:45481}, {f:3, c:45517}, {f:3, c:45521}, {f:7, c:45525}, 45534, {f:8, c:45536}, {f:2, c:45546}, {f:3, c:45549}, {f:8, c:45553}, 45562, 45564, {f:6, c:45566}, {f:2, 
  c:45574}, {f:2, c:45577}, {f:7, c:45581}, 45590, 45592, {f:6, c:45594}, {f:19, c:45601}, {f:7, c:45621}, {f:27, c:45629}, {f:3, c:45657}, {f:3, c:45661}, {f:7, c:45665}, {f:10, c:45674}, {f:6, c:45686}, {f:7, c:45693}, {f:3, c:45702}, {f:6, c:45706}, {f:2, c:45714}, {f:3, c:45717}, {f:5, c:45723}, 45730, 45732, {f:3, c:45735}, 45739, {f:3, c:45741}, {f:3, c:45745}, {f:19, c:45749}, {f:2, c:45770}, {f:3, c:45773}, 45777, {f:5, c:45779}, 45786, 45788, {f:4, c:45790}, 45795, 45799, {f:2, c:45801}, 
  {f:3, c:45808}, 45814, {f:3, c:45820}, {f:2, c:45826}, {f:3, c:45829}, {f:7, c:45833}, 45842, {f:6, c:45846}, {f:55, c:45853}, 45911, {f:2, c:45913}, 45917, {f:4, c:45920}, 45926, 45928, 45930, {f:2, c:45932}, 45935, {f:2, c:45938}, {f:3, c:45941}, {f:7, c:45945}, 45954, {f:6, c:45958}, {f:3, c:45965}, {f:3, c:45969}, {f:11, c:45973}, {f:6, c:45986}, {f:3, c:45993}, {f:23, c:45997}, {f:2, c:46022}, {f:2, c:46025}, 46029, 46031, {f:3, c:46033}, 46038, 46040, 46042, 46044, {f:2, c:46046}, {f:3, c:46049}, 
  {f:3, c:46053}, {f:19, c:46057}, {f:19, c:46077}, {f:7, c:46097}, {f:3, c:46105}, {f:3, c:46109}, {f:7, c:46113}, 46122, {f:8, c:46124}, {f:27, c:46133}, {f:2, c:46162}, {f:3, c:46165}, {f:7, c:46169}, 46178, 46180, {f:6, c:46182}, {f:19, c:46189}, {f:7, c:46209}, {f:20, c:46217}, {f:6, c:46238}, {f:3, c:46245}, {f:3, c:46249}, {f:8, c:46253}, 46262, 46264, {f:6, c:46266}, {f:3, c:46273}, {f:3, c:46277}, {f:7, c:46281}, {f:4, c:46289}, {f:6, c:46294}, {f:2, c:46302}, {f:2, c:46305}, 46309, {f:5, 
  c:46311}, 46318, 46320, {f:6, c:46322}, {f:27, c:46329}, {f:2, c:46358}, {f:2, c:46361}, {f:7, c:46365}, 46374, {f:5, c:46379}, {f:2, c:46386}, {f:3, c:46389}, {f:7, c:46393}, 46402, {f:5, c:46406}, {f:2, c:46414}, {f:3, c:46417}, {f:7, c:46421}, 46430, {f:62, c:46434}, {f:2, c:46498}, {f:3, c:46501}, 46505, {f:4, c:46508}, 46514, {f:5, c:46518}, {f:2, c:46526}, {f:3, c:46529}, {f:7, c:46533}, 46542, {f:6, c:46546}, {f:19, c:46553}, {f:35, c:46573}, {f:2, c:46610}, {f:3, c:46613}, {f:12, c:46617}, 
  {f:6, c:46630}, {f:7, c:46637}, {f:19, c:46645}, {f:27, c:46665}, {f:3, c:46693}, {f:51, c:46697}, {f:2, c:46750}, {f:3, c:46753}, {f:6, c:46757}, {f:4, c:46765}, {f:34, c:46770}, {f:27, c:46805}, {f:3, c:46833}, {f:3, c:46837}, {f:7, c:46841}, {f:3, c:46850}, {f:34, c:46854}, {f:2, c:46890}, {f:2, c:46893}, {f:7, c:46897}, 46906, {f:8, c:46908}, {f:3, c:46917}, {f:3, c:46921}, {f:7, c:46925}, {f:10, c:46934}, {f:3, c:46945}, {f:3, c:46949}, {f:7, c:46953}, 46962, 46964, {f:6, c:46966}, {f:2, c:46974}, 
  {f:3, c:46977}, {f:7, c:46981}, 46990, {f:3, c:46995}, {f:2, c:47002}, {f:3, c:47005}, {f:7, c:47009}, 47018, {f:6, c:47022}, {f:2, c:47030}, {f:14, c:47033}, 47048, {f:34, c:47050}, {f:2, c:47086}, {f:3, c:47089}, {f:7, c:47093}, 47102, {f:5, c:47106}, {f:2, c:47114}, {f:3, c:47117}, {f:7, c:47121}, 47130, 47132, {f:6, c:47134}, {f:2, c:47142}, {f:3, c:47145}, {f:7, c:47149}, 47158, {f:6, c:47162}, {f:3, c:47169}, {f:12, c:47173}, 47186, {f:8, c:47188}, {f:2, c:47198}, {f:3, c:47201}, {f:7, c:47205}, 
  47214, 47216, {f:6, c:47218}, {f:3, c:47225}, {f:16, c:47229}, {f:26, c:47246}, {f:7, c:47273}, {f:3, c:47281}, {f:3, c:47285}, {f:7, c:47289}, 47298, 47300, {f:6, c:47302}, {f:3, c:47309}, {f:3, c:47313}, {f:8, c:47317}, 47326, 47328, {f:6, c:47330}, {f:2, c:47338}, {f:3, c:47341}, {f:7, c:47345}, 47354, 47356, {f:6, c:47358}, {f:19, c:47365}, {f:7, c:47385}, {f:27, c:47393}, {f:2, c:47422}, {f:3, c:47425}, {f:7, c:47429}, {f:2, c:47437}, 47440, {f:6, c:47442}, {f:2, c:47450}, {f:3, c:47453}, 
  {f:7, c:47457}, 47466, 47468, {f:6, c:47470}, {f:2, c:47478}, {f:3, c:47481}, {f:7, c:47485}, 47494, 47496, {f:2, c:47499}, {f:29, c:47503}, {f:2, c:47534}, {f:3, c:47537}, {f:7, c:47541}, 47550, 47552, {f:6, c:47554}, {f:2, c:47562}, 47565, {f:5, c:47571}, 47578, 47580, {f:2, c:47583}, 47586, {f:2, c:47590}, {f:3, c:47593}, {f:7, c:47597}, 47606, {f:5, c:47611}, {f:6, c:47618}, {f:12, c:47625}, {f:34, c:47638}, {f:2, c:47674}, {f:3, c:47677}, 47681, {f:5, c:47683}, 47690, 47692, {f:4, c:47695}, 
  {f:2, c:47702}, {f:3, c:47705}, {f:7, c:47709}, 47718, {f:6, c:47722}, {f:2, c:47730}, {f:3, c:47733}, {f:10, c:47737}, 47750, {f:4, c:47752}, {f:27, c:47757}, 47786, {f:3, c:47789}, 47793, {f:5, c:47795}, 47802, 47804, {f:6, c:47806}, {f:3, c:47813}, {f:15, c:47817}, {f:34, c:47834}, {f:3, c:47869}, {f:3, c:47873}, {f:8, c:47877}, 47886, 47888, {f:6, c:47890}, {f:3, c:47897}, {f:3, c:47901}, {f:8, c:47905}, 47914, {f:8, c:47916}, 47927, {f:2, c:47929}, {f:5, c:47935}, 47942, 47944, {f:3, c:47946}, 
  47950, {f:3, c:47953}, {f:3, c:47957}, {f:8, c:47961}, 47970, {f:8, c:47972}, {f:27, c:47981}, {f:3, c:48009}, {f:3, c:48013}, {f:19, c:48017}, {f:3, c:48037}, {f:3, c:48041}, {f:7, c:48045}, {f:2, c:48053}, {f:8, c:48056}, {f:3, c:48065}, {f:3, c:48069}, {f:7, c:48073}, {f:2, c:48081}, {f:36, c:48084}, {f:2, c:48122}, {f:2, c:48125}, 48129, {f:5, c:48131}, 48138, 48142, 48144, {f:2, c:48146}, {f:2, c:48153}, {f:4, c:48160}, 48166, 48168, {f:3, c:48170}, {f:2, c:48174}, {f:2, c:48178}, {f:3, c:48181}, 
  {f:7, c:48185}, 48194, {f:3, c:48198}, {f:2, c:48202}, {f:2, c:48206}, {f:12, c:48209}, {f:38, c:48222}, {f:2, c:48262}, {f:2, c:48265}, 48269, {f:5, c:48271}, 48278, 48280, {f:5, c:48283}, {f:2, c:48290}, {f:2, c:48293}, {f:7, c:48297}, 48306, {f:6, c:48310}, {f:2, c:48318}, {f:3, c:48321}, {f:8, c:48325}, 48334, {f:3, c:48338}, {f:2, c:48342}, {f:3, c:48345}, {f:23, c:48349}, 48375, {f:3, c:48377}, {f:7, c:48381}, 48390, 48392, {f:6, c:48394}, {f:3, c:48401}, {f:15, c:48405}, {f:7, c:48421}, 
  {f:19, c:48429}, {f:7, c:48449}, {f:2, c:48458}, {f:3, c:48461}, {f:7, c:48465}, {f:10, c:48474}, {f:3, c:48485}, {f:23, c:48489}, {f:2, c:48514}, {f:2, c:48517}, {f:5, c:48523}, 48530, 48532, {f:3, c:48534}, 48539, {f:7, c:48541}, {f:11, c:48549}, {f:7, c:48561}, {f:27, c:48569}, {f:2, c:48598}, {f:3, c:48601}, {f:12, c:48605}, {f:6, c:48618}, {f:3, c:48625}, {f:3, c:48629}, {f:7, c:48633}, {f:2, c:48641}, 48644, {f:6, c:48646}, {f:2, c:48654}, {f:3, c:48657}, {f:7, c:48661}, 48670, {f:36, c:48672}, 
  {f:2, c:48710}, {f:3, c:48713}, 48717, {f:5, c:48719}, 48726, 48728, {f:4, c:48732}, {f:2, c:48738}, {f:3, c:48741}, 48745, {f:5, c:48747}, 48754, {f:5, c:48758}, {f:2, c:48766}, {f:3, c:48769}, {f:7, c:48773}, 48782, {f:6, c:48786}, {f:14, c:48794}, {f:39, c:48809}, {f:2, c:48850}, {f:2, c:48853}, {f:7, c:48857}, {f:2, c:48865}, {f:6, c:48870}, {f:20, c:48877}, {f:6, c:48898}, {f:14, c:48906}, 48922, {f:34, c:48926}, {f:2, c:48962}, {f:3, c:48965}, {f:7, c:48969}, {f:3, c:48978}, {f:62, c:48982}, 
  {f:27, c:49045}, {f:20, c:49073}, {f:6, c:49094}, {f:2, c:49102}, {f:3, c:49105}, {f:7, c:49109}, {f:2, c:49117}, 49120, {f:90, c:49122}, {f:20, c:49213}, {f:6, c:49234}, {f:3, c:49241}, {f:3, c:49245}, {f:7, c:49249}, {f:38, c:49258}, {f:2, c:49298}, {f:3, c:49301}, {f:7, c:49305}, 49314, 49316, {f:6, c:49318}, 49326, {f:2, c:49329}, {f:5, c:49335}, 49342, {f:3, c:49346}, {f:2, c:49350}, {f:2, c:49354}, {f:3, c:49357}, {f:7, c:49361}, 49370, {f:6, c:49374}, {f:2, c:49382}, {f:3, c:49385}, {f:7, 
  c:49389}, 49398, 49400, {f:6, c:49402}, {f:3, c:49409}, {f:3, c:49413}, {f:7, c:49417}, {f:4, c:49425}, {f:6, c:49430}, {f:2, c:49441}, 49445, {f:4, c:49448}, 49454, {f:4, c:49458}, 49463, {f:2, c:49466}, {f:3, c:49469}, {f:7, c:49473}, 49482, {f:6, c:49486}, {f:2, c:49494}, {f:3, c:49497}, {f:7, c:49501}, 49510, {f:6, c:49514}, {f:3, c:49521}, {f:3, c:49525}, {f:12, c:49529}, {f:6, c:49542}, 49551, {f:3, c:49553}, 49557, {f:5, c:49559}, 49566, 49568, {f:3, c:49570}, {f:2, c:49574}, {f:2, c:49578}, 
  {f:3, c:49581}, {f:12, c:49585}, {f:6, c:49598}, {f:3, c:49605}, {f:3, c:49609}, {f:7, c:49613}, {f:2, c:49621}, {f:7, c:49625}, {f:3, c:49633}, {f:3, c:49637}, {f:7, c:49641}, 49650, {f:8, c:49652}, {f:2, c:49662}, {f:3, c:49665}, {f:7, c:49669}, 49678, 49680, {f:6, c:49682}, {f:2, c:49690}, {f:2, c:49693}, {f:7, c:49697}, 49706, 49708, 49710, 49712, 49715, {f:19, c:49717}, {f:7, c:49737}, {f:2, c:49746}, {f:3, c:49749}, {f:7, c:49753}, {f:4, c:49761}, {f:6, c:49766}, {f:2, c:49774}, {f:3, c:49777}, 
  {f:7, c:49781}, 49790, 49792, {f:6, c:49794}, {f:6, c:49802}, {f:7, c:49809}, {f:2, c:49817}, 49820, {f:6, c:49822}, {f:2, c:49830}, {f:3, c:49833}, {f:6, c:49838}, 49846, 49848, {f:34, c:49850}, {f:2, c:49886}, {f:2, c:49889}, {f:6, c:49893}, 49902, 49904, {f:4, c:49906}, 49911, 49914, {f:3, c:49917}, {f:7, c:49921}, {f:2, c:49930}, {f:5, c:49934}, {f:2, c:49942}, {f:3, c:49945}, {f:7, c:49949}, {f:2, c:49958}, {f:27, c:49962}, {f:34, c:49990}, {f:2, c:50026}, {f:3, c:50029}, 50033, {f:5, c:50035}, 
  {f:2, c:50042}, {f:6, c:50046}, {f:3, c:50053}, {f:3, c:50057}, {f:51, c:50061}, {f:23, c:50113}, {f:2, c:50138}, {f:2, c:50141}, 50145, {f:5, c:50147}, {f:3, c:50154}, {f:6, c:50158}, {f:2, c:50166}, {f:15, c:50169}, {f:7, c:50185}, {f:19, c:50193}, {f:7, c:50213}, {f:3, c:50221}, {f:3, c:50225}, {f:7, c:50229}, {f:10, c:50238}, {f:27, c:50249}, {f:2, c:50278}, {f:3, c:50281}, {f:7, c:50285}, {f:3, c:50294}, {f:6, c:50298}, {f:19, c:50305}, {f:7, c:50325}, {f:27, c:50333}, {f:3, c:50361}, {f:44, 
  c:50365}, {f:6, c:50410}, {f:2, c:50418}, {f:3, c:50421}, 50425, {f:4, c:50427}, {f:10, c:50434}, {f:3, c:50445}, {f:3, c:50449}, {f:7, c:50453}, {f:11, c:50461}, {f:2, c:50474}, {f:3, c:50477}, {f:7, c:50481}, 50490, 50492, {f:6, c:50494}, {f:2, c:50502}, 50507, {f:4, c:50511}, 50518, {f:3, c:50522}, 50527, {f:2, c:50530}, {f:3, c:50533}, {f:7, c:50537}, 50546, {f:6, c:50550}, {f:2, c:50558}, {f:3, c:50561}, {f:2, c:50565}, {f:4, c:50568}, 50574, 50576, {f:3, c:50578}, 50582, {f:3, c:50585}, {f:3, 
  c:50589}, {f:8, c:50593}, {f:10, c:50602}, {f:2, c:50614}, 50618, {f:5, c:50623}, 50635, 50637, 50639, {f:2, c:50642}, {f:3, c:50645}, {f:7, c:50649}, 50658, 50660, {f:6, c:50662}, 50671, {f:3, c:50673}, 50677, {f:4, c:50680}, {f:3, c:50690}, {f:3, c:50697}, {f:3, c:50701}, {f:7, c:50705}, 50714, {f:7, c:50717}, {f:2, c:50726}, {f:3, c:50729}, 50735, {f:2, c:50737}, 50742, 50744, 50746, {f:4, c:50748}, {f:2, c:50754}, {f:3, c:50757}, {f:7, c:50761}, 50770, {f:6, c:50774}, {f:2, c:50782}, {f:11, 
  c:50785}, {f:2, c:50797}, 50800, {f:6, c:50802}, {f:2, c:50810}, {f:3, c:50813}, {f:7, c:50817}, 50826, 50828, {f:6, c:50830}, {f:2, c:50838}, {f:3, c:50841}, {f:7, c:50845}, 50854, 50856, {f:6, c:50858}, {f:2, c:50866}, {f:3, c:50869}, {f:5, c:50875}, 50882, 50884, {f:6, c:50886}, {f:2, c:50894}, {f:3, c:50897}, {f:7, c:50901}, {f:2, c:50910}, {f:6, c:50914}, {f:2, c:50922}, {f:3, c:50925}, {f:7, c:50929}, {f:3, c:50938}, {f:6, c:50942}, {f:2, c:50950}, {f:3, c:50953}, {f:7, c:50957}, 50966, 50968, 
  {f:6, c:50970}, {f:2, c:50978}, {f:3, c:50981}, {f:7, c:50985}, 50994, 50996, 50998, {f:4, c:51E3}, {f:2, c:51006}, {f:3, c:51009}, {f:5, c:51013}, 51019, 51022, 51024, {f:3, c:51033}, {f:3, c:51037}, {f:7, c:51041}, {f:2, c:51049}, {f:8, c:51052}, {f:2, c:51062}, {f:3, c:51065}, {f:4, c:51071}, 51078, {f:3, c:51083}, 51087, {f:2, c:51090}, 51093, 51097, {f:5, c:51099}, 51106, {f:5, c:51111}, {f:2, c:51118}, {f:3, c:51121}, {f:7, c:51125}, 51134, {f:6, c:51138}, {f:2, c:51146}, 51149, 51151, {f:7, 
  c:51153}, {f:4, c:51161}, {f:6, c:51166}, {f:3, c:51173}, {f:3, c:51177}, {f:19, c:51181}, {f:2, c:51202}, {f:3, c:51205}, 51209, {f:5, c:51211}, 51218, 51220, {f:5, c:51223}, {f:2, c:51230}, {f:3, c:51233}, {f:7, c:51237}, 51246, 51248, {f:6, c:51250}, {f:3, c:51257}, {f:3, c:51261}, {f:7, c:51265}, {f:2, c:51274}, {f:6, c:51278}, {f:27, c:51285}, {f:2, c:51314}, {f:3, c:51317}, 51321, {f:5, c:51323}, 51330, 51332, {f:3, c:51336}, {f:6, c:51342}, {f:8, c:51349}, 51358, 51360, {f:6, c:51362}, {f:19, 
  c:51369}, {f:6, c:51390}, {f:3, c:51397}, {f:3, c:51401}, {f:7, c:51405}, 51414, 51416, {f:6, c:51418}, {f:2, c:51426}, {f:16, c:51429}, {f:6, c:51446}, {f:2, c:51454}, {f:3, c:51457}, {f:5, c:51463}, 51470, 51472, {f:6, c:51474}, {f:19, c:51481}, {f:7, c:51501}, {f:27, c:51509}, {f:2, c:51538}, {f:3, c:51541}, {f:7, c:51545}, 51554, {f:8, c:51556}, {f:3, c:51565}, {f:3, c:51569}, {f:7, c:51573}, {f:11, c:51581}, {f:2, c:51594}, {f:3, c:51597}, {f:7, c:51601}, 51610, 51612, {f:34, c:51614}, {f:2, 
  c:51650}, {f:2, c:51653}, 51657, {f:5, c:51659}, 51666, 51668, {f:2, c:51671}, 51675, {f:2, c:51678}, 51681, 51683, {f:2, c:51685}, {f:4, c:51688}, 51694, {f:6, c:51698}, {f:2, c:51706}, {f:3, c:51709}, {f:7, c:51713}, 51722, {f:6, c:51726}, {f:3, c:51733}, {f:16, c:51737}, {f:34, c:51754}, {f:2, c:51790}, {f:3, c:51793}, {f:7, c:51797}, 51806, {f:6, c:51810}, {f:20, c:51817}, {f:6, c:51838}, {f:19, c:51845}, {f:35, c:51865}, {f:2, c:51902}, {f:3, c:51905}, {f:7, c:51909}, 51918, 51920, 51922, 
  {f:4, c:51924}, {f:6, c:51930}, {f:11, c:51937}, {f:7, c:51949}, {f:19, c:51957}, {f:7, c:51977}, {f:3, c:51985}, {f:3, c:51989}, {f:7, c:51993}, {f:31, c:52002}, {f:6, c:52034}, {f:2, c:52042}, {f:3, c:52045}, {f:7, c:52049}, {f:3, c:52058}, {f:6, c:52062}, {f:19, c:52069}, {f:34, c:52090}, {f:27, c:52125}, {f:27, c:52153}, {f:15, c:52181}, {f:2, c:52197}, 52200, {f:34, c:52202}, {f:2, c:52238}, {f:3, c:52241}, {f:7, c:52245}, {f:3, c:52254}, {f:4, c:52259}, {f:2, c:52266}, 52269, 52271, {f:7, 
  c:52273}, 52282, {f:5, c:52287}, {f:2, c:52294}, {f:3, c:52297}, {f:7, c:52301}, 52310, {f:6, c:52314}, {f:3, c:52321}, 52325, 52327, {f:7, c:52329}, {f:4, c:52337}, {f:34, c:52342}, {f:2, c:52378}, {f:3, c:52381}, {f:7, c:52385}, 52394, {f:6, c:52398}, {f:2, c:52406}, {f:3, c:52409}, {f:7, c:52413}, 52422, 52424, {f:6, c:52426}, {f:3, c:52433}, {f:15, c:52437}, {f:7, c:52453}, {f:3, c:52461}, {f:16, c:52465}, {f:6, c:52482}, {f:2, c:52490}, {f:3, c:52493}, {f:7, c:52497}, 52506, 52508, {f:6, c:52510}, 
  {f:3, c:52517}, {f:3, c:52521}, {f:12, c:52525}, {f:34, c:52538}, {f:3, c:52573}, {f:3, c:52577}, {f:7, c:52581}, 52590, 52592, {f:6, c:52594}, {f:15, c:52601}, {f:11, c:52617}, {f:2, c:52630}, {f:3, c:52633}, {f:7, c:52637}, 52646, 52648, {f:6, c:52650}, {f:19, c:52657}, {f:7, c:52677}, {f:3, c:52685}, {f:23, c:52689}, {f:3, c:52713}, {f:3, c:52717}, {f:7, c:52721}, 52730, 52732, {f:6, c:52734}, {f:3, c:52741}, {f:3, c:52745}, {f:7, c:52749}, {f:4, c:52757}, {f:6, c:52762}, {f:2, c:52770}, {f:3, 
  c:52773}, {f:7, c:52777}, 52786, 52788, {f:34, c:52790}, {f:2, c:52826}, {f:2, c:52829}, {f:6, c:52834}, 52842, 52844, {f:6, c:52846}, {f:2, c:52854}, {f:3, c:52857}, {f:7, c:52861}, 52870, 52872, {f:6, c:52874}, {f:2, c:52882}, {f:3, c:52885}, {f:7, c:52889}, 52898, {f:6, c:52902}, {f:19, c:52910}, {f:34, c:52930}, {f:2, c:52966}, {f:2, c:52969}, {f:7, c:52973}, 52982, {f:6, c:52986}, {f:2, c:52994}, {f:3, c:52997}, {f:7, c:53001}, 53010, 53012, {f:6, c:53014}, {f:3, c:53021}, {f:3, c:53025}, 
  {f:7, c:53029}, 53038, {f:6, c:53042}, {f:27, c:53049}, {f:2, c:53078}, {f:3, c:53081}, {f:7, c:53085}, 53094, 53096, {f:6, c:53098}, {f:2, c:53106}, {f:3, c:53109}, {f:7, c:53113}, {f:4, c:53121}, {f:6, c:53126}, {f:20, c:53133}, {f:6, c:53154}, {f:7, c:53161}, {f:19, c:53169}, {f:27, c:53189}, {f:2, c:53218}, {f:3, c:53221}, {f:7, c:53225}, 53234, 53236, {f:6, c:53238}, {f:3, c:53245}, {f:3, c:53249}, {f:12, c:53253}, {f:6, c:53266}, {f:20, c:53273}, {f:6, c:53294}, {f:2, c:53302}, {f:3, c:53305}, 
  {f:7, c:53309}, 53318, 53320, {f:6, c:53322}, {f:3, c:53329}, {f:3, c:53333}, {f:7, c:53337}, {f:11, c:53345}, {f:2, c:53358}, {f:3, c:53361}, {f:7, c:53365}, {f:3, c:53374}, {f:34, c:53378}, {f:2, c:53414}, {f:3, c:53417}, {f:7, c:53421}, 53430, 53432, {f:6, c:53434}, {f:2, c:53442}, {f:3, c:53445}, {f:6, c:53450}, 53458, {f:6, c:53462}, {f:2, c:53470}, {f:3, c:53473}, {f:7, c:53477}, 53486, {f:6, c:53490}, {f:20, c:53497}, {f:34, c:53518}, {f:2, c:53554}, {f:3, c:53557}, 53561, {f:5, c:53563}, 
  53570, {f:6, c:53574}, {f:2, c:53582}, {f:3, c:53585}, {f:7, c:53589}, 53598, 53600, {f:6, c:53602}, {f:3, c:53609}, {f:15, c:53613}, {f:7, c:53629}, {f:3, c:53637}, {f:23, c:53641}, {f:2, c:53666}, {f:3, c:53669}, {f:7, c:53673}, 53682, 53684, {f:4, c:53686}, 53691, {f:3, c:53693}, {f:23, c:53697}, {f:27, c:53721}, {f:3, c:53749}, {f:14, c:53753}, 53768, {f:6, c:53770}, {f:27, c:53777}, {f:2, c:53806}, {f:3, c:53809}, {f:7, c:53813}, 53822, 53824, {f:6, c:53826}, {f:19, c:53833}, {f:7, c:53853}, 
  {f:27, c:53861}, {f:2, c:53890}, {f:3, c:53893}, {f:7, c:53897}, {f:3, c:53906}, {f:6, c:53910}, {f:3, c:53917}, {f:3, c:53921}, {f:7, c:53925}, {f:4, c:53933}, {f:6, c:53938}, {f:2, c:53946}, {f:2, c:53949}, 53953, {f:5, c:53955}, 53962, {f:8, c:53964}, {f:3, c:53973}, {f:3, c:53977}, {f:7, c:53981}, {f:10, c:53990}, {f:2, c:54002}, {f:3, c:54005}, {f:7, c:54009}, 54018, 54020, {f:6, c:54022}, 54031, {f:3, c:54033}, 54037, {f:5, c:54039}, 54046, {f:3, c:54050}, {f:2, c:54054}, {f:2, c:54058}, 
  {f:3, c:54061}, {f:7, c:54065}, 54074, {f:6, c:54078}, {f:54, c:54086}, {f:2, c:54142}, {f:3, c:54145}, {f:7, c:54149}, 54158, {f:6, c:54162}, {f:2, c:54170}, {f:3, c:54173}, {f:7, c:54177}, 54186, 54188, {f:6, c:54190}, {f:3, c:54197}, {f:3, c:54201}, {f:7, c:54205}, {f:2, c:54214}, {f:6, c:54218}, {f:7, c:54225}, {f:8, c:54233}, 54242, {f:8, c:54244}, {f:2, c:54254}, {f:3, c:54257}, {f:7, c:54261}, 54270, 54272, {f:6, c:54274}, {f:20, c:54281}, {f:34, c:54302}, {f:3, c:54337}, {f:23, c:54341}, 
  {f:3, c:54365}, {f:3, c:54369}, {f:8, c:54373}, 54382, {f:8, c:54384}, {f:2, c:54394}, {f:2, c:54397}, 54401, {f:5, c:54403}, 54410, 54412, {f:6, c:54414}, {f:20, c:54421}, {f:34, c:54442}, {f:3, c:54477}, {f:3, c:54481}, {f:7, c:54485}, {f:2, c:54493}, {f:8, c:54496}, {f:3, c:54505}, {f:3, c:54509}, {f:7, c:54513}, {f:2, c:54521}, 54524, {f:6, c:54526}, {f:3, c:54533}, {f:3, c:54537}, {f:7, c:54541}, 54550, {f:36, c:54552}, {f:2, c:54590}, {f:3, c:54593}, {f:7, c:54597}, 54606, 54608, {f:6, c:54610}, 
  {f:2, c:54618}, {f:3, c:54621}, {f:4, c:54625}, {f:2, c:54630}, 54634, 54636, {f:6, c:54638}, {f:2, c:54646}, {f:3, c:54649}, {f:7, c:54653}, 54662, {f:6, c:54666}, {f:20, c:54673}, {f:34, c:54694}, {f:2, c:54730}, {f:3, c:54733}, 54737, {f:5, c:54739}, 54746, 54748, {f:6, c:54750}, {f:2, c:54758}, {f:3, c:54761}, {f:7, c:54765}, 54774, 54776, {f:6, c:54778}, {f:2, c:54786}, {f:3, c:54789}, {f:7, c:54793}, 54802, {f:6, c:54806}, {f:3, c:54813}, {f:3, c:54817}, {f:8, c:54821}, {f:10, c:54830}, {f:2, 
  c:54842}, {f:3, c:54845}, {f:4, c:54849}, {f:2, c:54854}, 54858, 54860, {f:3, c:54862}, {f:2, c:54866}, {f:2, c:54870}, {f:3, c:54873}, {f:10, c:54877}, 54888, {f:6, c:54890}, {f:2, c:54898}, {f:14, c:54901}, 54916, {f:6, c:54918}, {f:2, c:54926}, {f:3, c:54929}, {f:8, c:54933}, 54942, 54944, {f:6, c:54946}, {f:3, c:54953}, {f:3, c:54957}, {f:8, c:54961}, 54970, {f:8, c:54972}, {f:2, c:54982}, {f:3, c:54985}, {f:4, c:54989}, {f:2, c:54994}, {f:2, c:54997}, 55E3, {f:6, c:55002}, {f:3, c:55009}, 
  {f:3, c:55013}, {f:7, c:55017}, {f:4, c:55025}, {f:6, c:55030}, {f:2, c:55038}, {f:3, c:55041}, {f:12, c:55045}, {f:6, c:55058}, {f:2, c:55066}, {f:3, c:55069}, {f:7, c:55073}, 55082, 55084, {f:6, c:55086}, {f:2, c:55094}, {f:3, c:55097}, {f:7, c:55101}, {f:2, c:55109}, 55112, {f:6, c:55114}, {f:2, c:55122}, 55125, {f:6, c:55130}, 55138, 55140, {f:3, c:55142}, {f:2, c:55146}, {f:3, c:55149}, {f:3, c:55153}, {f:7, c:55157}, {f:3, c:55166}, {f:6, c:55170}, {f:2, c:55178}, {f:3, c:55181}, {f:7, c:55185}, 
  55194, 55196, {f:6, c:55198}], "Adobe-CNS1":[{f:95, c:32}, {s:3}, 12288, 65292, {f:2, c:12289}, 65294, 8226, 65307, 65306, 65311, 65281, 65072, 8230, 8229, 65104, 65380, 65106, 183, {f:4, c:65108}, 65372, 8211, 65073, 8212, {s:4}, {f:2, c:65288}, {f:2, c:65077}, 65371, 65373, {f:2, c:65079}, {f:2, c:12308}, {f:2, c:65081}, {f:2, c:12304}, {f:2, c:65083}, {f:2, c:12298}, {f:2, c:65085}, {f:2, c:12296}, {f:2, c:65087}, {f:2, c:12300}, {f:2, c:65089}, {f:2, c:12302}, {f:2, c:65091}, {f:6, c:65113}, 
  {f:2, c:8216}, {f:2, c:8220}, {f:2, c:12317}, 8245, 8242, 65283, 65286, 65290, 8251, 167, 12291, 9675, 9679, 9651, 9650, 9678, 9734, 9733, 9671, 9670, 9633, 9632, 9661, 9660, 12963, 8453, 8254, 0, 65343, 0, {f:2, c:65097}, {f:2, c:65101}, {f:2, c:65099}, {f:3, c:65119}, 65291, 65293, 215, 247, 177, 8730, 65308, 65310, 65309, {f:2, c:8806}, 8800, 8734, 8786, 8801, {f:5, c:65122}, 8764, {f:2, c:8745}, 8869, 8736, 8735, 8895, 13266, 13265, 8747, 8750, 8757, 8756, 9792, 9794, 9793, 9737, 8593, 8595, 
  8594, 8592, {f:2, c:8598}, 8601, 8600, 8741, 8739, 0, 0, 65295, 65340, 65284, 165, 12306, {f:2, c:162}, 65285, 65312, 8451, 8457, {f:3, c:65129}, 13269, {f:3, c:13212}, 13262, 13217, {f:2, c:13198}, 13252, 176, [20825, 58834], [20827, 58835], [20830, 58837], [20829, 58836], 20833, 20835, 21991, [29929, 58044], [31950, 58191], {f:8, c:9601}, 9615, 9614, 9613, 9612, 9611, 9610, 9609, 9532, 9524, 9516, 9508, 9500, 9620, 9472, 9474, 9621, 9484, 9488, 9492, 9496, {f:2, c:9581}, 9584, 9583, 9552, 9566, 
  9578, 9569, {f:2, c:9698}, 9701, 9700, {f:3, c:9585}, {f:10, c:65296}, {f:10, c:8544}, {f:9, c:12321}, 0, [21316, 57443], 0, {f:26, c:65313}, {f:26, c:65345}, {f:17, c:913}, {f:7, c:931}, {f:17, c:945}, {f:7, c:963}, {f:37, c:12549}, 729, 714, 711, 715, [9312, 63153], [9313, 63154], [9314, 63155], [9315, 63156], [9316, 63157], [9317, 63158], [9318, 63159], [9319, 63160], [9320, 63161], [9321, 63162], [9332, 63163], [9333, 63164], [9334, 63165], [9335, 63166], [9336, 63167], [9337, 63168], [9338, 
  63169], [9339, 63170], [9340, 63171], [9341, 63172], [8560, 63173], [8561, 63174], [8562, 63175], [8563, 63176], [8564, 63177], [8565, 63178], [8566, 63179], [8567, 63180], [8568, 63181], [8569, 63182], [12033, 20008], [12034, 20022, 63183], [12035, 20031, 63184], [12037, 20101, 63185], [12039, 20128, 63186], [12044, 20866, 63187], [12045, 20886, 63188], [12046, 20907, 63189], [12051, 21241, 63190], [12054, 21304, 63191], [12057, 21353, 63192], [12059, 21430, 63193], [12065, 12066, 22786, 22794, 
  63194], [12071, 23424, 63195], [12078, 24027, 63196], [12083, 24186, 63197], [12084, 24191, 63198], [12085, 24308], [12089, 24400, 63200], [12090, 24417, 63201], [12097, 25908, 63202], [12102, 26080], [12135, 30098, 63204], [12136, 30326], [12193, 36789, 63206], [12202, 38582], {f:32, c:9216}, 9249, [12032, 19968], [12036, 20057], 19969, 19971, 20035, 20061, 20102, [12038, 20108], [12040, 20154], [12041, 20799], [12042, 20837], [12043, 20843], [12047, 20960], [12049, 20992], 20993, [12050, 21147], 
  [12052, 21269], [12055, 21313], [12056, 21340], [12060, 21448], 19977, 19979, 19976, 19978, 20011, 20024, 20961, 20037, 20040, 20063, 20062, 20110, 20129, [20800, 64012], 20995, 21242, 21315, 21449, [12061, 21475], [12063, 22303], [12064, 22763], [12067, 22805], [12068, 22823], [12069, 22899], [12070, 23376], 23377, 23379, [12072, 23544], [12073, 23567], [12074, 23586], [12075, 23608], [12077, 23665], 24029, [12079, 24037], [12080, 24049], {f:2, c:24050}, [12081, 24062], [12082, 24178], [12086, 
  24318], [12087, 24331], [12088, 24339], 25165, 19985, 19984, 19981, 20013, 20016, 20025, 20043, 23609, 20104, 20113, 20117, 20114, 20116, 20130, 20161, 20160, 20163, {f:2, c:20166}, 20173, {f:2, c:20170}, 20164, 20803, 20801, 20839, {f:2, c:20845}, 20844, 20887, 20982, {f:3, c:20998}, 21243, {f:2, c:21246}, 21270, 21305, 21320, 21319, 21317, 21342, 21380, 21451, 21450, 21453, 22764, 22825, 22827, 22826, 22829, 23380, 23569, 23588, 23610, 23663, 24052, 24187, 24319, {f:2, c:24340}, [12092, 24515], 
  [12093, 25096], [12094, 25142], [12095, 25163], 25166, [12096, 25903], [12098, 25991], [12099, 26007], [12100, 26020], [12101, 26041], [12103, 26085], [12104, 26352], [12105, 26376], [12106, 26408], [12107, 27424], [12108, 27490], [12109, 27513], [12111, 27595], [12112, 27604], [12113, 27611], [12114, 27663], [12116, 27700], [12117, 28779], [12118, 29226], [12119, 29238], [12120, 29243], [12122, 29255], [12123, 29273], [12124, 29275], [12125, 29356], 29579, 19993, 19990, 19989, 19988, 19992, 20027, 
  20045, 20047, 20046, 20197, 20184, {f:4, c:20180}, {f:2, c:20195}, 20185, 20190, 20805, 20804, {f:2, c:20873}, 20908, {f:2, c:20985}, 20984, 21002, 21152, 21151, [21253, 57435], 21254, 21271, 21277, 20191, 21322, 21321, 21345, 21344, 21359, 21358, 21435, 21487, 21476, 21491, 21484, 21486, 21481, 21480, 21500, 21496, 21493, 21483, 21478, 21482, 21490, 21489, 21488, 21477, 21485, 21499, 22235, 22234, 22806, 22830, 22833, 22900, 22902, 23381, 23427, 23612, 24040, 24039, 24038, {f:2, c:24066}, 24179, 
  24188, 24321, 24344, 24343, 24517, 25098, {f:2, c:25171}, 25170, 25169, 26021, 26086, 26414, 26412, {f:2, c:26410}, 26413, 27491, 27597, 27665, 27664, 27704, 27713, 27712, 27710, 29359, [12126, 29572], [12127, 29577], [12128, 29916], [12129, 29926], [12130, 29976], [12131, 29983], [12132, 29992], 29993, [12133, 3E4], {f:3, c:30001}, [12134, 30091], [12137, 30333], [12138, 30382], [12139, 30399], [12140, 30446], [12141, 30683], [12142, 30690], [12143, 30707], [12144, 31034], [12146, 31166], [12147, 
  31348], [12148, 31435], {f:2, c:19998}, {f:2, c:20050}, 20073, 20121, 20132, 20134, 20133, 20223, 20233, 20249, 20234, 20245, 20237, {f:2, c:20240}, 20239, 20210, 20214, 20219, 20208, 20211, 20221, 20225, 20235, 20809, 20807, 20806, 20808, 20840, 20849, 20877, 20912, 21015, {f:2, c:21009}, 21006, 21014, 21155, 21256, 21281, 21280, {f:2, c:21360}, 21513, 21519, 21516, 21514, 21520, 21505, 21515, 21508, 21521, 21517, 21512, 21507, 21518, 21510, 21522, 22240, 22238, 22237, 22323, 22320, 22312, 22317, 
  22316, 22319, 22313, {f:2, c:22809}, {f:2, c:22839}, 22916, 22904, 22915, 22909, 22905, 22914, 22913, {f:2, c:23383}, {f:2, c:23431}, 23429, 23433, 23546, 23574, 23673, 24030, 24070, 24182, 24180, 24335, 24347, 24537, 24534, 25102, {f:2, c:25100}, 25104, 25187, 25179, 25176, 25910, 26089, 26088, {f:2, c:26092}, {f:2, c:26354}, 26377, 26429, 26420, 26417, 26421, 27425, 27492, 27515, 27670, 27741, 27735, 27737, {f:2, c:27743}, 27728, 27733, 27745, 27739, {f:2, c:27725}, 28784, 29279, 29277, 30334, 
  [12149, 31481], [12150, 31859], [12151, 31992], [12152, 32566], [12154, 32650], [12155, 32701], [12156, 32769], 32771, [12157, 32780], [12158, 32786], [12159, 32819], [12160, 32895], [12161, 32905], {f:2, c:32907}, [12162, 33251], [12163, 33258], [12164, 33267], [12165, 33276], [12166, 33292], [12167, 33307], [12168, 33311], [12169, 33390], [12170, 33394], 33406, [12173, 34411], [12174, 34880], [12175, 34892], [12176, 34915], 35199, 38433, 20018, 20136, 20301, 20303, 20295, 20311, 20318, 20276, 
  20315, 20309, 20272, {f:2, c:20304}, 20285, 20282, 20280, 20291, 20308, 20284, 20294, 20323, 20316, 20320, 20271, 20302, 20278, 20313, 20317, 20296, 20314, 20812, 20811, 20813, 20853, {f:2, c:20918}, 21029, 21028, {f:2, c:21033}, 21032, 21163, {f:2, c:21161}, 21164, 21283, 21363, 21365, 21533, 21549, 21534, 21566, 21542, 21582, 21543, 21574, 21571, 21555, 21576, 21570, 21531, 21545, 21578, 21561, 21563, 21560, 21550, {f:2, c:21557}, 21536, 21564, 21568, 21553, 21547, 21535, 21548, 22250, 22256, 
  22244, 22251, 22346, 22353, 22336, 22349, 22343, 22350, 22334, 22352, 22351, 22331, 22767, 22846, 22941, 22930, 22952, 22942, 22947, 22937, 22934, 22925, 22948, 22931, 22922, 22949, 23389, 23388, {f:2, c:23386}, 23436, 23435, 23439, 23596, {f:2, c:23616}, 23615, 23614, {f:2, c:23696}, 23700, 23692, 24043, 24076, 24207, 24199, 24202, 24311, 24324, 24351, 24420, 24418, 24439, 24441, 24536, 24524, 24535, 24525, 24561, 24555, 24568, 24554, 25106, 25105, 25220, 25239, 25238, 25216, 25206, 25225, 25197, 
  25226, 25212, 25214, 25209, 25203, 25234, 25199, 25240, 25198, 25237, 25235, 25233, 25222, 25913, 25915, 25912, 26097, 26356, 26463, {f:4, c:26446}, 26460, 26454, [26462, 57801], 26441, 26438, 26464, 26451, 26455, 27493, 27599, 27714, 27742, 27801, 27777, {f:2, c:27784}, 27781, 27803, 27754, 27770, 27792, 27760, 27788, 27752, 27798, 27794, 27773, 27779, 27762, 27774, 27764, 27782, 27766, 27789, 27796, 27800, 27778, 28790, {f:2, c:28796}, 28792, 29282, 29281, 29280, 29380, 29378, 29590, 29996, 29995, 
  {f:2, c:30007}, 30338, 30447, 30691, 31169, 31168, 31167, 31350, 31995, 32597, 32918, 32915, 32925, 32920, 32923, 32922, 32946, 33391, 33426, 33419, 33421, [12178, 35211], [12179, 35282], [12180, 35328], [12181, 35895], [12182, 35910], [12183, 35925], [12185, 35997], [12186, 36196], [12187, 36208], [12188, 36275], [12189, 36523], [12190, 36554], [12191, 36763], [12192, 36784], 36802, 36806, 36805, 36804, 24033, [12194, 37009], 37026, 37034, 37030, 37027, [12195, 37193], [12196, 37318], [12197, 
  37324], 38450, 38446, 38449, 38442, 38444, 20006, 20054, 20083, 20107, 20123, 20126, {f:2, c:20139}, 20335, 20381, 20365, 20339, 20351, 20332, 20379, 20363, 20358, 20355, 20336, 20341, 20360, 20329, 20347, 20374, 20350, 20367, 20369, 20346, 20820, 20818, 20821, 20841, 20855, 20854, 20856, 20925, 20989, 21051, 21048, 21047, 21050, 21040, 21038, 21046, 21057, 21182, 21179, 21330, 21332, 21331, 21329, 21350, {f:3, c:21367}, 21462, 21460, 21463, 21619, 21621, 21654, 21624, 21653, 21632, 21627, 21623, 
  21636, 21650, 21638, 21628, 21648, 21617, 21622, 21644, 21658, 21602, 21608, 21643, 21629, 21646, 22266, 22403, 22391, 22378, 22377, 22369, 22374, 22372, 22396, 22812, 22857, {f:2, c:22855}, 22852, 22868, 22974, 22971, 22996, 22969, 22958, 22993, 22982, 22992, 22989, 22987, 22995, 22986, 22959, 22963, 22994, 22981, 23391, 23396, 23395, 23447, 23450, 23448, 23452, 23449, 23451, 23578, 23624, {f:2, c:23621}, 23735, 23713, 23736, 23721, 23723, 23729, 23731, 24088, 24090, 24086, 24085, 24091, 24081, 
  24184, 24218, 24215, 24220, {f:2, c:24213}, 24310, {f:2, c:24358}, 24361, {f:2, c:24448}, 24447, 24444, 24541, 24544, 24573, 24565, 24575, 24591, 24596, 24623, 24629, 24598, 24618, 24597, 24609, 24615, 24617, 24619, 24603, 25110, 25109, 25151, 25150, 25152, 25215, 25289, 25292, 25284, 25279, 25282, 25273, 25298, 25307, 25259, {f:2, c:25299}, 25291, 25288, 25256, 25277, 25276, [25296, 60582], 25305, 25287, 25293, 25269, 25306, 25265, 25304, {f:2, c:25302}, 25286, 25260, [25294, 61010], 25918, 26023, 
  26044, 26106, 26132, 26131, 26124, 26118, 26114, 26126, 26112, 26127, 26133, 26122, 26119, 26381, 26379, 26477, 26507, 26517, 26481, 26524, 26483, 26487, 26503, 26525, 26519, {f:2, c:26479}, 26495, 26505, 26494, 26512, 26485, 26522, 26515, 26492, 26474, 26482, 27427, {f:2, c:27494}, 27519, 27667, 27675, 27875, 27880, 27891, 27825, 27852, 27877, 27827, {f:2, c:27837}, 27836, 27874, 27819, 27861, 27859, 27832, 27844, 27833, 27841, 27822, 27863, 27845, 27889, 27839, 27835, 27873, 27867, 27850, 27820, 
  27887, 27868, 27862, 27872, 28821, 28814, 28818, 28810, 28825, {f:2, c:29228}, 29240, 29256, 29287, 29289, 29376, 29390, 29401, 29399, 29392, 29609, 29608, 29599, 29611, 29605, 30013, 30109, {f:2, c:30105}, 30340, 30402, 30450, 30452, 30693, 30717, 31038, {f:2, c:31040}, 31177, 31176, 31354, 31353, 31482, 31998, 32596, 32652, 32651, [32773, 58236], 32954, 32933, 32930, 32945, 32929, 32939, 32937, 32948, 32938, 32943, 33253, 33278, 33293, 33459, 33437, 33433, 33453, 33469, 33439, 33465, 33457, 33452, 
  33445, 33455, 33464, 33443, 33456, 33470, 33463, 34382, 34417, 21021, 34920, 36555, 36814, 36820, 36817, 37045, 37048, 37041, 37046, 37319, [12198, 37329], [12199, 38263], [12200, 38272], [12201, 38428], 38464, 38463, 38459, 38468, 38466, [12203, 38585], [12204, 38632], 38738, [12206, 38750], 20127, {f:2, c:20141}, 20449, 20405, 20399, 20415, 20448, 20433, 20431, 20445, 20419, 20406, 20440, 20447, 20426, 20439, 20398, 20432, 20420, 20418, 20442, 20430, 20446, 20407, 20823, 20882, 20881, 20896, 
  21070, 21059, 21066, 21069, 21068, 21067, 21063, 21191, 21193, 21187, 21185, 21261, 21335, 21371, 21402, 21467, 21676, 21696, 21672, 21710, 21705, 21688, 21670, 21683, 21703, 21698, 21693, 21674, 21697, 21700, 21704, 21679, 21675, 21681, 21691, 21673, 21671, 21695, 22271, 22402, 22411, 22432, 22435, 22434, 22478, 22446, 22419, 22869, 22865, 22863, 22862, 22864, 23004, 23E3, 23039, 23011, 23016, 23043, 23013, 23018, 23002, 23014, 23041, 23035, 23401, 23459, 23462, 23460, 23458, 23461, 23553, {f:2, 
  c:23630}, 23629, 23627, 23769, 23762, 24055, 24093, 24101, 24095, 24189, 24224, 24230, 24314, 24328, 24365, 24421, 24456, 24453, {f:2, c:24458}, 24455, 24460, 24457, 24594, 24605, 24608, 24613, 24590, 24616, 24653, 24688, 24680, [24674, 60712], 24646, 24643, 24684, 24683, 24682, 24676, 25153, 25308, 25366, 25353, 25340, 25325, 25345, 25326, 25341, 25351, 25329, 25335, 25327, 25324, 25342, 25332, 25361, 25346, 25919, 25925, 26027, 26045, 26082, 26149, 26157, 26144, 26151, 26159, 26143, 26152, 26161, 
  26148, 26359, 26623, 26579, 26609, 26580, 26576, 26604, 26550, 26543, 26613, 26601, 26607, 26564, 26577, 26548, 26586, 26597, 26552, 26575, 26590, 26611, 26544, 26585, 26594, 26589, 26578, 27498, 27523, 27526, 27573, 27602, 27607, 27679, 27849, 27915, 27954, 27946, 27969, 27941, 27916, 27953, 27934, 27927, 27963, {f:2, c:27965}, 27958, 27931, 27893, 27961, 27943, 27960, 27945, 27950, 27957, 27918, 27947, 28843, 28858, 28851, 28844, 28847, 28845, 28856, 28846, 28836, 29232, 29298, 29295, 29300, 
  29417, {f:2, c:29408}, 29623, 29642, 29627, 29618, 29645, 29632, 29619, 29978, 29997, 30031, 30028, 30030, 30027, 30123, {f:2, c:30116}, {f:2, c:30114}, 30328, {f:3, c:30342}, 30408, 30406, 30403, 30405, 30465, 30457, 30456, 30473, 30475, 30462, 30460, 30471, 30684, 30722, 30740, {f:2, c:30732}, 31046, 31049, 31048, 31047, {f:2, c:31161}, {f:2, c:31185}, 31179, 31359, 31361, 31487, 31485, 31869, 32002, 32005, 32E3, 32009, 32007, 32004, 32006, 32568, 32654, 32703, 32784, 32781, 32785, 32822, 32982, 
  32997, 32986, {f:2, c:32963}, 32972, 32993, 32987, 32974, 32990, 32996, 32989, 33268, 33314, 33511, 33539, 33541, 33507, 33499, 33510, 33540, 33509, 33538, 33545, 33490, 33495, 33521, 33537, 33500, 33492, 33489, 33502, 33491, 33503, 33519, 33542, 34384, 34425, 34427, 34426, 34893, 34923, 35201, 35284, 35336, {f:2, c:35330}, 35998, 36E3, 36212, 36211, 36276, 36557, 36556, 36848, 36838, 36834, 36842, 36837, 36845, 36843, 36836, 36840, 37066, 37070, 37057, 37059, 37195, 37194, 37325, 38274, 38480, 
  {f:3, c:38475}, [12207, 38754], [12208, 38761], [12209, 38859], [12210, 38893], [12211, 38899], [12212, 38913], [12213, 39080], [12214, 39131], [12215, 39135], [12216, 39318], [12217, 39321], 20056, 20147, {f:2, c:20492}, 20515, 20463, 20518, 20517, 20472, [20521, 57375], 20502, 20486, 20540, 20511, 20506, 20498, 20497, 20474, 20480, 20500, 20520, 20465, 20513, 20491, 20505, 20504, 20467, 20462, 20525, 20522, 20478, 20523, 20489, 20860, {f:2, c:20900}, 20898, 20941, 20940, 20934, 20939, 21078, 
  21084, 21076, 21083, 21085, 21290, [21375, 57459], 21407, 21405, 21471, 21736, 21776, 21761, 21815, 21756, 21733, 21746, 21766, 21754, 21780, 21737, 21741, 21729, 21769, 21742, 21738, 21734, 21799, 21767, 21757, 21775, {f:2, c:22275}, 22466, 22484, 22475, 22467, 22537, 22799, {f:2, c:22871}, 22874, 23057, 23064, 23068, 23071, 23067, 23059, 23020, 23072, 23075, 23081, 23077, 23052, 23049, 23403, 23640, 23472, 23475, 23478, 23476, 23470, 23477, 23481, 23480, 23556, 23633, 23637, 23632, 23789, 23805, 
  23803, 23786, 23784, 23792, 23798, 23809, 23796, 24046, 24109, 24107, 24235, 24237, 24231, 24369, 24466, 24465, 24464, 24665, 24675, 24677, 24656, 24661, 24685, 24681, 24687, 24708, 24735, 24730, 24717, 24724, 24716, 24709, 24726, 25159, 25331, 25352, 25343, 25422, 25406, 25391, 25429, 25410, 25414, 25423, 25417, 25402, 25424, 25405, {f:2, c:25386}, 25384, 25421, 25420, {f:2, c:25928}, 26009, 26049, 26053, 26178, 26185, 26191, 26179, 26194, 26188, 26181, 26177, 26360, {f:2, c:26388}, 26391, 26657, 
  26680, 26696, 26694, 26707, 26681, 26690, 26708, 26665, 26803, 26647, 26700, 26705, 26685, 26612, 26704, 26688, 26684, 26691, 26666, 26693, 26643, 26648, 26689, 27530, 27529, 27575, 27683, {f:2, c:27687}, 27686, 27684, 27888, 28010, 28053, 28040, 28039, 28006, 28024, 28023, 27993, 28051, 28012, 28041, 28014, 27994, 28020, 28009, 28044, 28042, 28025, 28037, 28005, 28052, 28874, 28888, 28900, 28889, 28872, 28879, 29241, 29305, 29436, 29433, 29437, 29432, 29431, 29574, 29677, 29705, 29678, 29664, 
  29674, 29662, 30036, 30045, 30044, 30042, 30041, 30142, 30149, 30151, {f:2, c:30130}, 30141, 30140, 30137, 30146, 30136, 30347, 30384, 30410, {f:2, c:30413}, 30505, {f:2, c:30495}, 30504, 30697, 30768, 30759, 30776, 30749, 30772, 30775, 30757, 30765, 30752, 30751, 30770, 31061, 31056, 31072, 31071, 31062, 31070, 31069, 31063, 31066, 31204, [31203, 60418], 31207, 31199, 31206, 31209, 31192, 31364, 31368, 31449, 31494, 31505, 31881, 32033, 32023, 32011, 32010, 32032, 32034, 32020, 32016, 32021, 32026, 
  32028, 32013, 32025, 32027, 32570, 32607, 32660, 32709, 32705, 32774, 32772, 32792, 32789, 32793, 32791, 32829, 32831, 33009, 33026, 33008, 33029, 33005, 33012, 33030, 33016, 33011, 33032, 33021, 33034, 33020, 33007, 33261, 33260, 33280, 33296, {f:2, c:33322}, 33320, 33324, 33467, 33579, 33618, 33620, 33610, 33592, 33616, 33609, 33589, 33588, 33615, 33586, 33593, 33590, 33559, 33600, 33585, 33576, 33603, 34388, 34442, 34474, 34451, 34468, 34473, 34444, 34467, 34460, 34928, 34935, {f:2, c:34945}, 
  34941, 34937, 35352, 35344, 35342, 35340, 35349, 35338, 35351, 35347, 35350, 35343, 35345, 35912, 35962, 35961, {f:2, c:36001}, [36215, 58442], 36524, 36562, 36564, 36559, 36785, 36865, 36870, 36855, 36864, 36858, 36852, 36867, 36861, 36869, 36856, 37013, 37089, 37085, 37090, 37202, 37197, 37196, 37336, 37341, 37335, 37340, 37337, 38275, {f:2, c:38498}, 38497, 38491, 38493, 38500, 38488, 38494, 38587, 39138, [12218, 39340], [12219, 39592], [12220, 39640], [12222, 39717], [12224, 39730], [12225, 
  39740], 20094, 20602, [20605, 57382], 20572, 20551, 20547, 20556, 20570, 20553, 20581, 20598, 20558, 20565, 20597, 20596, 20599, 20559, 20495, 20591, 20589, 20828, 20885, 20976, 21098, 21103, 21202, 21209, 21208, 21205, 21264, 21263, 21273, {f:2, c:21311}, 21310, 21443, 26364, 21830, 21866, 21862, 21828, 21854, 21857, 21827, 21834, 21809, 21846, 21839, 21845, 21807, 21860, 21816, 21806, 21852, 21804, 21859, 21811, 21825, 21847, 22280, 22283, 22281, 22495, 22533, 22538, 22534, 22496, 22500, 22522, 
  22530, 22581, 22519, 22521, 22816, 22882, 23094, 23105, 23113, 23142, 23146, 23104, 23100, 23138, 23130, 23110, 23114, 23408, 23495, 23493, 23492, 23490, 23487, 23494, 23561, 23560, 23559, 23648, {f:2, c:23644}, 23815, 23814, 23822, 23835, 23830, 23842, 23825, 23849, 23828, 23833, 23844, 23847, 23831, 24034, 24120, 24118, 24115, 24119, {f:2, c:24247}, 24246, 24245, 24254, 24373, 24375, 24407, 24428, 24425, 24427, 24471, 24473, 24478, 24472, 24481, 24480, 24476, 24703, 24739, 24713, 24736, 24744, 
  24779, 24756, 24806, 24765, 24773, 24763, 24757, 24796, 24764, 24792, 24789, 24774, 24799, 24760, 24794, 24775, {f:2, c:25114}, 25160, 25504, 25511, 25458, 25494, 25506, 25509, 25463, 25447, 25496, 25514, 25457, 25513, 25481, 25475, 25499, 25451, 25512, 25476, 25480, 25497, 25505, 25516, 25490, 25487, 25472, 25467, 25449, 25448, 25466, 25949, 25942, 25937, 25945, 25943, 21855, 25935, 25944, 25941, 25940, 26012, 26011, 26028, 26063, {f:2, c:26059}, 26062, 26205, 26202, 26212, 26216, 26214, 26206, 
  26361, 21207, 26395, 26753, 26799, 26786, 26771, 26805, 26751, 26742, 26801, 26791, 26775, 26800, 26755, 26820, 26797, 26758, 26757, 26772, 26781, 26792, 26783, 26785, 26754, 27442, 27578, {f:2, c:27627}, 27691, 28046, 28092, 28147, 28121, 28082, 28129, 28108, 28132, 28155, 28154, 28165, 28103, 28107, 28079, 28113, 28078, 28126, 28153, 28088, 28151, 28149, 28101, 28114, 28186, 28085, 28122, 28139, 28120, 28138, 28145, 28142, 28136, 28102, 28100, 28074, 28140, 28095, 28134, 28921, {f:2, c:28937}, 
  28925, 28911, 29245, 29309, 29313, 29468, 29467, 29462, 29459, 29465, 29575, 29701, 29706, 29699, 29702, 29694, 29709, 29920, {f:2, c:29942}, 29980, 29986, {f:2, c:30053}, 30050, 30064, 30095, {f:2, c:30164}, 30133, 30154, 30157, 30350, 30420, 30418, 30427, 30519, 30526, 30524, 30518, 30520, 30522, 30827, 30787, 30798, 31077, 31080, 31085, 31227, 31378, 31381, 31520, 31528, 31515, 31532, 31526, 31513, 31518, 31534, 31890, 31895, 31893, 32070, 32067, 32113, 32046, 32057, 32060, 32064, 32048, 32051, 
  32068, 32047, 32066, 32050, 32049, 32573, 32670, 32666, 32716, 32718, 32722, 32796, 32842, 32838, 33071, 33046, 33059, 33067, 33065, 33072, 33060, 33282, 33333, 33335, 33334, 33337, 33678, 33694, 33688, 33656, 33698, 33686, 33725, 33707, 33682, 33674, 33683, 33673, 33696, 33655, {f:2, c:33659}, 33670, 33703, 34389, 24426, 34503, 34496, 34486, 34500, 34485, 34502, 34507, 34481, 34479, 34505, 34899, 34974, 34952, 34987, 34962, 34966, 34957, 34955, 35219, 35215, 35370, 35357, 35363, 35365, 35377, 
  35373, 35359, 35355, 35362, 35913, 35930, 36009, 36012, 36011, 36008, 36010, 36007, 36199, 36198, 36286, 36282, 36571, 36575, 36889, 36877, 36890, 36887, 36899, 36895, 36893, 36880, 36885, 36894, 36896, 36879, 36898, 36886, 36891, 36884, 37096, 37101, [37117, 58488], 37207, 37326, 37365, 37350, 37347, 37351, 37357, 37353, 38281, 38506, 38517, 38515, 38520, 38512, 38516, {f:2, c:38518}, 38508, 38592, 38634, 38633, 31456, 31455, {f:2, c:38914}, [12226, 39770], [12227, 40165], [12228, 40565], [12229, 
  40575], [12230, 40613], [12231, 40635], 20642, 20621, 20613, 20633, 20625, 20608, 20630, 20632, 20634, 26368, 20977, 21106, {f:2, c:21108}, 21097, 21214, 21213, 21211, 21338, 21413, 21883, 21888, 21927, 21884, 21898, 21917, 21912, 21890, 21916, 21930, 21908, 21895, 21899, 21891, 21939, 21934, 21919, 21822, 21938, 21914, 21947, 21932, 21937, 21886, 21897, 21931, 21913, 22285, 22575, 22570, 22580, 22564, {f:2, c:22576}, 22561, 22557, 22560, {f:2, c:22777}, 22880, [23159, 57587], 23194, 23167, 23186, 
  23195, 23207, 23411, 23409, 23506, 23500, 23507, 23504, {f:2, c:23562}, 23601, 23884, 23888, 23860, 23879, 24061, 24133, 24125, 24128, 24131, 24190, 24266, {f:2, c:24257}, 24260, 24380, 24429, {f:2, c:24489}, 24488, 24785, 24801, 24754, 24758, 24800, 24860, 24867, 24826, 24853, 24816, 24827, 24820, 24936, 24817, 24846, 24822, 24841, 24832, 24850, 25119, 25161, 25507, 25484, 25551, 25536, 25577, 25545, 25542, 25549, 25554, 25571, 25552, 25569, 25558, {f:2, c:25581}, 25462, 25588, 25578, 25563, 25682, 
  25562, 25593, 25950, 25958, {f:2, c:25954}, 26001, 26E3, 26031, 26222, 26224, [26228, 57786], 26230, 26223, 26257, 26234, 26238, 26231, {f:2, c:26366}, 26399, 26397, 26874, 26837, 26848, 26840, 26839, 26885, 26847, 26869, 26862, 26855, 26873, 26834, 26866, 26851, 26827, 26829, 26893, 26898, 26894, 26825, 26842, 26990, 26875, 27454, 27450, 27453, 27544, 27542, 27580, 27631, {f:2, c:27694}, 27692, [28207, 57904], 28216, 28244, 28193, 28210, 28263, 28234, 28192, 28197, 28195, 28187, 28251, 28248, 
  28196, 28246, 28270, 28205, 28198, 28271, 28212, 28237, 28218, 28204, 28227, [28189, 57901], 28222, 28363, 28297, 28185, 28238, 28259, 28228, 28274, 28265, 28255, {f:2, c:28953}, 28966, 28976, 28961, 28982, [29038, 57958], 28956, 29260, 29316, 29312, 29494, 29477, 29492, 29481, 29754, 29738, 29747, 29730, 29733, {f:2, c:29749}, 29748, 29743, 29723, 29734, 29736, {f:2, c:29989}, 30059, 30058, 30178, 30171, 30179, 30169, 30168, 30174, 30176, {f:2, c:30331}, 30358, 30355, 30388, 30428, 30543, 30701, 
  30813, 30828, 30831, 31245, 31240, 31243, 31237, 31232, 31384, 31383, 31382, 31461, 31459, 31561, 31574, 31558, 31568, 31570, 31572, 31565, 31563, 31567, [31569, 60510], 31903, 31909, 32094, 32080, 32104, 32085, 32043, 32110, 32114, 32097, 32102, 32098, 32112, 32115, 21892, {f:2, c:32724}, 32779, 32850, 32901, 33109, 33108, 33099, 33105, 33102, 33081, 33094, 33086, 33100, 33107, 33140, 33298, 33308, 33769, 33795, 33784, 33805, 33760, 33733, 33803, [33729, 58309], 33775, 33777, 33780, 33879, 33802, 
  33776, 33804, 33740, 33789, 33778, 33738, 33848, 33806, 33796, 33756, 33799, 33748, 33759, 34395, 34527, 34521, 34541, 34516, 34523, 34532, 34512, 34526, 34903, {f:2, c:35009}, 34993, 35203, 35222, 35387, 35424, 35413, 35422, 35388, 35393, 35412, 35419, 35408, 35398, 35380, 35386, 35382, 35414, 35937, 35970, 36015, 36028, 36019, 36029, 36033, 36027, 36032, 36020, 36023, 36022, 36031, 36024, 36234, 36229, 36225, 36302, 36317, 36299, 36314, 36305, 36300, 36315, 36294, 36603, 36600, 36604, 36764, 
  36910, 36917, 36913, 36920, 36914, 36918, 37122, 37109, 37129, 37118, 37219, 37221, 37327, {f:2, c:37396}, 37411, 37385, 37406, 37389, 37392, 37383, 37393, 38292, 38287, 38283, 38289, 38291, 38290, 38286, 38538, 38542, 38539, 38525, {f:2, c:38533}, 38541, 38514, 38532, 38593, 38597, 38596, {f:2, c:38598}, 38639, 38642, 38860, {f:2, c:38917}, 38920, 39143, 39146, 39151, 39145, 39154, 39149, 39342, 39341, [12232, 40643], [12233, 40653], [12234, 40657], 20098, 20653, 20661, {f:2, c:20658}, 20677, 
  20670, 20652, 20663, 20667, 20655, 20679, 21119, 21111, 21117, 21215, 21222, 21220, {f:2, c:21218}, 21295, 21983, 21992, 21971, 21990, 21966, 21980, 21959, 21969, {f:2, c:21987}, 21999, 21978, 21985, {f:2, c:21957}, 21989, 21961, {f:2, c:22290}, 22622, 22609, 22616, 22615, 22618, 22612, 22635, 22604, 22637, 22602, 22626, 22610, 22603, 22887, 23233, 23241, 23244, 23230, 23229, 23228, 23219, 23234, 23218, 23913, 23919, 24140, 24185, 24265, 24264, 24338, 24409, 24492, 24494, 24858, 24847, 24904, 24863, 
  24819, 24859, 24825, 24833, 24840, 24910, 24908, 24900, 24909, 24894, 24884, 24871, 24845, 24838, 24887, {f:2, c:25121}, 25619, 25662, 25630, 25642, 25645, 25661, 25644, 25615, 25628, 25620, 25613, 25654, {f:2, c:25622}, 25606, 25964, 26015, 26032, 26263, 26249, {f:2, c:26247}, 26262, 26244, 26264, 26253, 26371, 27028, 26989, 26970, 26999, 26976, 26964, 26997, 26928, 27010, 26954, 26984, 26987, 26974, 26963, 27001, 27014, 26973, 26979, 26971, 27463, 27506, 27584, 27583, 27603, 27645, 28322, 28335, 
  28371, 28342, 28354, 28304, 28317, 28359, 28357, 28325, 28312, 28348, 28346, 28331, 28369, 28310, 28316, 28356, 28372, 28330, 28327, 28340, 29006, 29017, 29033, 29028, 29001, 29031, 29020, 29036, 29030, 29004, 29029, 29022, 28998, 29032, 29014, 29242, 29266, 29495, 29509, 29503, 29502, 29807, 29786, 29781, 29791, 29790, 29761, 29759, 29785, 29787, [29788, 58019], 30070, 30072, 30208, 30192, 30209, 30194, 30193, 30202, 30207, 30196, 30195, {f:2, c:30430}, 30555, 30571, 30566, 30558, 30563, 30585, 
  30570, 30572, 30556, 30565, 30568, 30562, 30702, 30862, 30896, {f:2, c:30871}, 30860, 30857, 30844, 30865, 30867, 30847, 31098, 31103, 31105, 33836, 31165, 31260, 31258, 31264, 31252, 31263, 31262, {f:2, c:31391}, 31607, 31680, 31584, 31598, 31591, 31921, 31923, 31925, 32147, 32121, 32145, 32129, 32143, 32091, 32622, {f:2, c:32617}, 32626, 32681, 32680, 32676, 32854, 32856, 32902, 32900, 33137, 33136, 33144, 33125, 33134, 33139, 33131, {f:2, c:33145}, 33126, 33285, 33351, 33922, 33911, 33853, 33841, 
  33909, 33894, 33899, 33865, 33900, 33883, 33852, 33845, 33889, 33891, 33897, 33901, 33862, 34398, 34396, 34399, 34553, 34579, 34568, 34567, 34560, 34558, 34555, {f:2, c:34562}, 34566, 34570, 34905, 35039, 35028, 35033, 35036, 35032, 35037, 35041, 35018, 35029, 35026, 35228, 35299, 35435, {f:2, c:35442}, 35430, 35433, 35440, 35463, 35452, 35427, 35488, 35441, 35461, 35437, 35426, 35438, 35436, 35449, 35451, 35390, 35432, 35938, 35978, 35977, 36042, {f:2, c:36039}, 36036, 36018, 36035, 36034, 36037, 
  36321, 36319, 36328, 36335, 36339, 36346, 36330, 36324, 36326, 36530, 36611, 36617, 36606, 36618, 36767, 36786, 36939, 36938, 36947, 36930, 36948, 36924, 36949, 36944, 36935, 36943, 36942, 36941, 36945, 36926, 36929, 37138, 37143, 37228, 37226, 37225, 37321, 37431, 37463, 37432, 37437, 37440, 37438, 37467, 37451, 37476, 37457, 37428, 37449, 37453, 37445, 37433, 37439, 37466, 38296, 38552, {f:2, c:38548}, 38605, 38603, {f:2, c:38601}, 38647, 38651, 38649, 38646, 38742, 38772, 38774, {f:2, c:38928}, 
  38931, 38922, 38930, 38924, 39164, 39156, {f:2, c:39165}, 39347, 39345, 39348, 39649, 40169, 40578, [12237, 40718], [12238, 40723], [12239, 40736], 20711, 20718, 20709, 20694, [20717, 60903], 20698, 20693, 20687, 20689, 20721, 20686, 20713, 20834, 20979, 21123, 21122, 21297, 21421, 22014, 22016, 22043, 22039, 22013, 22036, 22022, 22025, {f:2, c:22029}, 22007, 22038, 22047, 22024, 22032, 22006, 22296, 22294, 22645, 22654, 22659, 22675, 22666, 22649, 22661, 22653, 22781, 22821, 22818, 22820, 22890, 
  22889, 23265, 23270, 23273, 23255, 23254, 23256, 23267, 23413, 23518, 23527, 23521, {f:2, c:23525}, 23528, 23522, 23524, 23519, 23565, 23650, 23940, 23943, 24155, 24163, 24149, 24151, 24148, 24275, 24278, 24330, 24390, 24432, 24505, 24903, 24895, 24907, 24951, {f:2, c:24930}, 24927, 24922, 24920, 24949, 25130, 25735, 25688, 25684, 25764, 25720, 25695, 25722, 25681, 25703, 25652, 25709, 25723, 25970, 26017, 26071, 26070, 26274, 26280, 26269, 27036, 27048, 27029, 27073, 27054, 27091, 27083, 27035, 
  27063, 27067, 27051, 27060, 27088, 27085, 27053, 27084, 27046, 27075, 27043, 27465, 27468, 27699, 28467, 28436, 28414, 28435, 28404, 28457, 28478, 28448, 28460, 28431, 28418, 28450, 28415, 28399, 28422, 28465, 28472, 28466, 28451, 28437, 28459, 28463, 28552, 28458, 28396, 28417, 28402, 28364, 28407, 29076, 29081, 29053, 29066, 29060, 29074, 29246, 29330, 29334, 29508, 29520, 29796, 29795, 29802, 29808, 29805, 29956, 30097, 30247, 30221, 30219, 30217, 30227, 30433, 30435, 30596, 30589, 30591, 30561, 
  30913, 30879, 30887, 30899, 30889, 30883, {f:2, c:31118}, 31117, 31278, 31281, 31402, 31401, 31469, 31471, 31649, 31637, 31627, 31605, 31639, 31645, 31636, 31631, [31672, 58170], 31623, 31620, 31929, {f:2, c:31933}, 32187, 32176, 32156, {f:2, c:32189}, 32160, 32202, 32180, 32178, 32177, 32186, 32162, 32191, 32181, 32184, 32173, [32210, 58202], 32199, 32172, 32624, {f:2, c:32736}, 32735, 32862, 32858, 32903, 33104, 33152, 33167, 33160, 33162, 33151, 33154, 33255, 33274, 33287, 33300, 33310, 33355, 
  33993, 33983, 33990, 33988, 33945, 33950, 33970, 33948, 33995, 33976, 33984, 34003, 33936, 33980, 34001, 33994, 34623, 34588, 34619, 34594, 34597, 34612, 34584, 34645, 34615, 34601, 35059, 35074, 35060, 35065, 35064, 35069, 35048, 35098, 35055, 35494, 35468, 35486, 35491, 35469, 35489, 35475, 35492, 35498, 35493, 35496, 35480, 35473, 35482, 35495, 35946, 35981, 35980, 36051, {f:2, c:36049}, 36203, 36249, 36245, 36348, 36628, 36626, 36629, 36627, 36771, 36960, 36952, 36956, 36963, 36953, 36958, 
  36962, 36957, 36955, 37145, 37144, 37150, 37237, 37240, 37239, 37236, 37496, 37548, 37504, 37509, 37528, 37526, 37499, 37523, 37532, 37544, 37500, 37521, 38305, {f:2, c:38312}, 38307, 38309, 38308, 38553, 38556, 38555, 38604, 38610, 38656, 38780, 38789, 38902, {f:2, c:38935}, 39087, 39089, 39171, 39173, 39180, 39177, 39361, {f:2, c:39599}, 39654, {f:2, c:39745}, 40180, 40182, 40179, 40636, [12240, 40763], [12241, 40778], 20740, 20736, 20731, 20725, 20729, 20738, {f:2, c:20744}, 20741, 20956, {f:3, 
  c:21127}, 21133, 21130, 21232, 21426, 22062, 22075, 22073, 22066, 22079, 22068, 22057, 22099, 22094, 22103, 22132, 22070, {f:2, c:22063}, 22656, 22687, 22686, 22707, 22684, 22702, 22697, 22694, 22893, 23305, 23291, 23307, 23285, 23308, 23304, 23534, 23532, 23529, 23531, {f:2, c:23652}, 23965, 23956, 24162, 24159, 24161, 24290, 24282, 24287, 24285, 24291, 24288, 24392, 24433, 24503, 24501, 24950, 24935, 24942, 24925, 24917, 24962, 24956, 24944, 24939, 24958, 24999, 24976, 25003, 24974, 25004, 24986, 
  24996, 24980, 25006, 25134, 25705, 25711, 25721, 25758, 25778, 25736, [25744, 57745], 25776, 25765, 25747, 25749, 25769, 25746, 25774, 25773, 25771, 25754, 25772, 25753, 25762, 25779, 25973, {f:2, c:25975}, 26286, 26283, 26292, 26289, 27171, 27167, 27112, 27137, 27166, 27161, 27133, 27169, 27155, 27146, 27123, 27138, 27141, 27117, 27153, 27472, 27470, 27556, {f:2, c:27589}, 28479, 28540, 28548, 28497, 28518, 28500, 28550, 28525, 28507, 28536, 28526, 28558, 28538, 28528, 28516, 28567, 28504, 28373, 
  28527, 28512, 28511, 29087, 29100, 29105, 29096, 29270, 29339, 29518, 29527, 29801, 29835, 29827, 29822, 29824, 30079, 30240, 30249, 30239, 30244, 30246, {f:2, c:30241}, 30362, 30394, 30436, 30606, 30599, 30604, 30609, 30603, 30923, 30917, 30906, 30922, 30910, 30933, 30908, 30928, 31295, 31292, 31296, 31293, 31287, 31291, 31407, 31406, 31661, 31665, 31684, 31668, {f:2, c:31686}, 31681, 31648, 31692, 31946, 32224, 32244, 32239, 32251, 32216, 32236, 32221, 32232, 32227, 32218, 32222, 32233, 32158, 
  32217, 32242, 32249, 32629, 32631, 32687, 32745, 32806, {f:3, c:33179}, 33184, 33178, 33176, 34071, 34109, 34074, 34030, {f:2, c:34092}, 34067, 34065, 34083, 34081, 34068, 34028, 34085, 34047, 34054, 34690, 34676, 34678, 34656, 34662, 34680, 34664, 34649, 34647, 34636, 34643, 34907, 34909, 35088, 35079, {f:2, c:35090}, 35093, 35082, 35516, 35538, 35527, 35524, 35477, 35531, 35576, 35506, 35529, 35522, 35519, 35504, 35542, 35533, 35510, 35513, 35547, 35916, 35918, 35948, 36064, 36062, 36070, 36068, 
  {f:2, c:36076}, {f:2, c:36066}, 36060, 36074, 36065, 36205, 36255, 36259, 36395, 36368, 36381, 36386, 36367, 36393, 36383, 36385, 36382, 36538, 36637, 36635, 36639, 36649, 36646, 36650, 36636, 36638, 36645, 36969, 36974, 36968, 36973, 36983, 37168, 37165, 37159, 37169, 37255, 37257, 37259, 37251, 37573, 37563, 37559, 37610, 37604, 37569, 37555, 37564, 37586, 37575, 37616, 37554, 38317, 38321, 38660, {f:2, c:38662}, 38665, 38752, 38797, 38795, 38799, 38945, 38955, 38940, 39091, 39178, 39187, 39186, 
  39192, 39389, 39376, 39391, 39387, 39377, 39381, 39378, 39385, 39607, {f:2, c:39662}, 39719, 39749, 39748, 39799, 39791, 40198, 40201, 40195, 40617, 40638, 40654, 22696, [12242, 40786], 20754, 20760, 20756, 20752, 20757, 20864, 20906, 20957, 21137, 21139, 21235, 22105, 22123, 22137, 22121, 22116, 22136, 22122, 22120, 22117, 22129, 22127, 22124, 22114, 22134, 22721, 22718, 22727, 22725, 22894, 23325, 23348, 23416, 23536, 23566, 24394, 25010, 24977, 25001, 24970, 25037, 25014, 25022, 25034, 25032, 
  25136, 25797, 25793, 25803, {f:2, c:25787}, 25818, 25796, 25799, 25794, 25805, 25791, 25810, 25812, 25790, 25972, 26310, 26313, 26297, 26308, 26311, 26296, 27197, 27192, 27194, 27225, 27243, 27224, 27193, 27204, 27234, 27233, 27211, 27207, 27189, 27231, 27208, 27481, 27511, 27653, 28610, 28593, 28577, 28611, 28580, 28609, 28583, 28595, 28608, 28601, [28598, 60318], 28582, 28576, 28596, 29118, 29129, 29136, 29138, 29128, 29141, 29113, 29134, 29145, 29148, {f:2, c:29123}, 29544, 29852, 29859, 29848, 
  29855, 29854, 29922, {f:2, c:29964}, 30260, 30264, 30266, 30439, 30437, 30624, {f:2, c:30622}, 30629, 30952, 30938, 30956, 30951, 31142, {f:2, c:31309}, 31302, 31308, 31307, 31418, 31705, 31761, 31689, 31716, 31707, 31713, 31721, 31718, {f:2, c:31957}, 32266, 32273, 32264, 32283, 32291, 32286, [32285, 58211], 32265, 32272, 32633, 32690, {f:2, c:32752}, 32750, [32808, 58239], 33203, 33193, 33192, 33275, 33288, {f:2, c:33368}, 34122, 34137, 34120, {f:2, c:34152}, 34115, 34121, 34157, 34154, 34142, 
  34691, 34719, 34718, 34722, 34701, 34913, 35114, 35122, 35109, 35115, 35105, 35242, [35238, 58391], 35558, 35578, 35563, 35569, 35584, 35548, 35559, 35566, 35582, {f:2, c:35585}, 35575, 35565, 35571, 35574, 35580, 35947, 35949, 35987, 36084, 36420, 36401, 36404, 36418, 36409, 36405, 36667, 36655, 36664, 36659, 36776, 36774, 36981, 36980, 36984, 36978, 36988, 36986, 37172, 37266, 37664, 37686, 37624, 37683, 37679, 37666, 37628, 37675, 37636, 37658, 37648, 37670, 37665, 37653, 37678, 37657, 38331, 
  {f:2, c:38567}, 38570, 38613, 38670, 38673, 38678, 38669, 38675, 38671, 38747, [38748, 58565], 38758, 38808, 38960, 38968, 38971, 38967, 38957, 38969, 38948, 39184, 39208, 39198, 39195, 39201, 39194, 39405, 39394, 39409, 39608, 39612, 39675, 39661, 39720, 39825, 40213, 40227, 40230, 40232, 40210, 40219, 40664, 40660, [12243, 40845], [12244, 40860], 20778, 20767, 20769, 20786, 21237, 22158, 22144, 22160, 22149, 22151, 22159, 22741, 22739, 22737, 22734, 23344, 23338, 23332, 23418, 23607, 23656, 23996, 
  23994, 23997, 23992, 24171, 24396, 24509, 25033, 25026, 25031, 25062, 25035, 25138, 25140, 25806, 25802, 25816, 25824, 25840, 25830, 25836, 25841, 25826, 25837, {f:2, c:25986}, 26329, 26326, 27264, 27284, 27268, 27298, 27292, 27355, 27299, 27262, 27287, 27280, 27296, 27484, 27566, 27610, 27656, 28632, 28657, {f:2, c:28639}, 28635, 28644, 28651, 28655, 28544, 28652, 28641, 28649, 28629, 28654, 28656, 29159, [29151, 60361], 29166, 29158, 29157, 29165, 29164, 29172, 29152, 29237, 29254, 29552, 29554, 
  29865, 29872, 29862, 29864, 30278, 30274, 30284, 30442, 30643, 30634, 30640, 30636, 30631, 30637, 30703, 30967, 30970, 30964, 30959, 30977, 31143, 31146, 31319, 31423, 31751, 31757, 31742, 31735, 31756, 31712, 31968, 31964, 31966, 31970, 31967, 31961, 31965, 32302, 32318, 32326, 32311, 32306, 32323, 32299, 32317, 32305, 32325, 32321, 32308, 32313, 32328, 32309, 32319, 32303, 32580, 32755, 32764, {f:2, c:32881}, 32880, 32879, 32883, 33222, 33219, 33210, 33218, 33216, 33215, 33213, 33225, 33214, 
  33256, 33289, 33393, 34218, 34180, 34174, 34204, 34193, 34196, 34223, 34203, 34183, 34216, 34186, 34214, 34407, 34752, 34769, 34739, 34770, 34758, 34731, 34747, 34746, 34760, 34763, 35131, 35126, 35140, 35128, 35133, 35244, 35598, 35607, 35609, 35611, 35594, 35616, 35613, 35588, 35600, 35905, 35903, 35955, 36090, 36093, 36092, 36088, 36091, 36264, 36425, 36427, 36424, 36426, 36676, 36670, 36674, 36677, 36671, 36991, 36989, 36996, {f:2, c:36993}, 36992, 37177, 37283, 37278, 37276, 37709, 37762, 
  37672, 37749, 37706, 37733, 37707, 37656, 37758, 37740, 37723, 37744, 37722, 37716, {f:3, c:38346}, 38344, 38342, 38577, 38584, 38614, 38684, 38686, 38816, 38867, 38982, 39094, 39221, 39425, 39423, 39854, 39851, 39850, 39853, 40251, 40255, 40587, 40655, 40670, {f:2, c:40668}, 40667, 40766, 40779, 21474, 22165, 22190, 22745, 22744, 23352, 24413, 25059, 25139, 25844, 25842, 25854, 25862, {f:2, c:25850}, 25847, 26039, 26332, 26406, 27315, 27308, 27331, 27323, 27320, 27330, {f:2, c:27310}, 27487, 27512, 
  27567, 28681, 28683, 28670, 28678, 28666, 28689, 28687, {f:2, c:29179}, 29182, 29176, 29559, 29557, 29863, 29887, 29973, 30294, 30296, 30290, 30653, 30655, {f:2, c:30651}, 30990, 31150, {f:2, c:31329}, 31328, {f:2, c:31428}, 31787, 31783, 31786, 31774, 31779, 31777, 31975, {f:2, c:32340}, 32350, 32346, 32353, 32338, 32345, 32584, 32761, 32763, 32887, 32886, 33229, 33231, 33290, 34255, 34217, 34253, 34256, 34249, 34224, 34234, 34233, 34799, 34796, 34802, 34784, 35206, 35250, 35316, 35624, 35641, 
  35628, 35627, 35920, 36101, 36441, 36451, 36454, 36452, 36447, 36437, 36544, 36681, 36685, 36999, 36995, 37E3, {f:2, c:37291}, 37328, 37780, 37770, 37782, 37794, 37811, 37806, 37804, 37808, 37784, 37786, 37783, 38356, 38358, 38352, 38357, 38626, 38620, 38617, 38619, 38622, 38692, 38819, 38822, 38829, 38905, 38989, 38991, 38988, 38990, 38995, 39098, {f:2, c:39230}, 39229, 39214, 39333, 39438, 39617, 39683, 39686, 39759, 39758, 39757, 39882, 39881, 39933, 39880, 39872, 40273, 40285, 40288, 40672, 
  40725, 40748, 20787, 22181, 22184, {f:2, c:22750}, 22754, 23541, 40848, 24300, 25074, 25079, 25078, 25077, 25856, 25871, 26336, 26333, 27365, 27357, 27354, 27347, 28699, 28703, 28712, 28698, 28701, 28693, 28696, 29190, 29197, 29272, 29346, 29560, 29562, 29885, 29898, 29923, 30087, 30086, 30303, 30305, 30663, 31001, 31153, 31339, 31337, {f:2, c:31806}, 31800, 31805, 31799, 31808, 32363, 32365, 32377, {f:2, c:32361}, 32371, 32645, 32694, 32697, 32696, 33240, 34281, 34269, 34282, 34261, {f:2, c:34276}, 
  34295, 34811, 34821, 34829, 34809, 34814, 35168, 35167, 35158, 35166, 35649, 35676, 35672, 35657, 35674, {f:2, c:35662}, 35654, 35673, 36104, 36106, 36476, 36466, 36487, 36470, 36460, 36474, 36468, 36692, 36686, 36781, {f:2, c:37002}, 37297, 37294, 37857, 37841, 37855, 37827, 37832, {f:2, c:37852}, 37846, 37858, 37837, 37848, 37860, 37847, 37864, 38364, 38580, 38627, 38698, 38695, 38753, 38876, 38907, 39006, 39E3, 39003, 39100, 39237, 39241, 39446, 39449, 39693, 39912, 39911, 39894, 39899, 40329, 
  40289, 40306, 40298, 40300, 40594, 40599, 40595, 40628, 21240, 22199, 22198, 22196, 22204, 22756, 23360, 23363, 23421, 23542, 24009, 25080, 25082, 25880, 25876, 25881, 26342, 26407, 27372, 28734, 28720, 28722, 29200, 29563, 29903, 30306, 30309, 31014, 31018, 31020, 31019, 31431, 31478, 31820, 31811, 31821, {f:2, c:31983}, 36782, 32381, 32380, 32386, 32588, 32768, 33242, 33382, 34299, 34297, 34321, 34298, 34310, 34315, 34311, 34314, {f:2, c:34836}, 35172, 35258, 35320, 35696, 35692, 35686, 35695, 
  35679, 35691, 36111, 36109, 36489, 36481, 36485, 36482, 37300, 37323, 37912, 37891, 37885, 38369, 38704, 39108, 39250, 39249, 39336, 39467, 39472, 39479, 39477, 39955, 39949, 40569, 40629, 40680, 40751, 40799, 40803, 40801, {f:2, c:20791}, 22209, 22208, 22210, 22804, 23660, 24013, 25084, 25086, 25885, 25884, 26005, 26345, 27387, 27396, 27386, 27570, 28748, 29211, 29351, 29910, 29908, 30313, 30675, 31824, 32399, 32396, 32700, 34327, 34349, 34330, 34851, 34850, 34849, 34847, 35178, 35180, 35261, 
  35700, 35703, 35709, 36115, 36490, 36493, 36491, 36703, 36783, 37306, 37934, 37939, 37941, 37946, 37944, 37938, 37931, 38370, {f:2, c:38712}, 38706, [38911, 58586], 39015, 39013, 39255, 39493, 39491, 39488, 39486, 39631, 39764, 39761, 39981, 39973, 40367, 40372, 40386, 40376, 40605, 40687, 40729, 40796, {f:2, c:40806}, 20796, 20795, 22216, 22218, 22217, 23423, 24020, 24018, 24398, 25087, 25892, 27402, 27489, 28753, 28760, 29568, 29924, 30090, 30318, 30316, 31155, 31840, 31839, 32894, 32893, 33247, 
  35186, 35183, 35324, 35712, {f:2, c:36118}, 36497, 36499, 36705, 37192, 37956, {f:2, c:37969}, {f:2, c:38717}, 38851, 38849, 39019, 39253, 39509, 39501, 39634, 39706, 40009, 39985, 39998, 39995, 40403, 40407, 40756, 40812, 40810, 40852, 22220, 24022, 25088, 25891, 25899, 25898, 26348, 27408, 29914, 31434, 31844, 31843, 31845, 32403, 32406, 32404, 33250, 34360, 34367, 34865, 35722, 37008, 37007, 37987, 37984, 37988, 38760, 39023, 39260, {f:2, c:39514}, 39511, {f:2, c:39635}, 39633, 40020, 40023, 
  40022, 40421, 40607, 40692, 22225, 22761, 25900, 28766, {f:2, c:30321}, [30679, 60226], 32592, 32648, 34870, 34873, 34914, 35731, 35730, 35734, 33399, 36123, 37312, 37994, 38722, 38728, 38724, 38854, 39024, 39519, 39714, 39768, 40031, {f:2, c:40441}, {f:2, c:40572}, 40711, 40823, 40818, 24307, 27414, 28771, 31852, 31854, 34875, 35264, 36513, 37313, 38002, 38E3, 39025, 39262, 39638, 39715, 40652, 28772, 30682, 35738, 38007, 38857, 39522, 39525, 32412, 35740, 36522, 37317, {f:2, c:38013}, 38012, 
  {f:2, c:40055}, 40695, 35924, 38015, 40474, 29224, 39530, 39729, 40475, 40478, 31858, 20034, 20060, [12048, 20981], [12053, 21274], [12058, 21378], 19975, 19980, 20039, 20109, [12062, 22231], [12076, 23662], [12091, 24435], 19983, 20871, 19982, 20014, 20115, 20162, 20169, 20168, 20888, 21244, 21356, 21433, 22304, 22787, 22828, [23568, 60417], 24063, 26081, [12110, 27571], 27596, [12115, 27668], [12121, 29247], 20017, 20028, 20200, 20188, 20201, 20193, 20189, 20186, 21004, 21001, 21276, 21324, {f:2, 
  c:22306}, 22807, 22831, 23425, 23428, 23570, 23611, 23668, 23667, 24068, 24192, 24194, 24521, 25097, 25168, 27669, 27702, 27715, 27711, 27707, 29358, 29360, 29578, [12145, 31160], 32906, 38430, 20238, 20248, 20268, 20213, 20244, 20209, 20224, 20215, 20232, 20253, 20226, 20229, 20258, 20243, 20228, 20212, 20242, 20913, 21011, 21008, 21158, 21282, 21279, 21325, 21386, 21511, 22241, 22239, 22318, 22314, 22324, 22844, 22912, 22908, 22917, 22907, 22910, 22903, 22911, 23382, 23573, 23589, 23676, {f:2, 
  c:23674}, 23678, 24031, [24181, 57646], 24196, 24322, 24346, 24436, 24533, 24532, 24527, 25180, 25182, 25188, 25185, 25190, 25186, 25177, 25184, 25178, 25189, 25911, 26095, 26094, 26430, 26425, 26424, 26427, 26426, 26431, 26428, 26419, 27672, 27718, 27730, 27740, 27727, [27722, 60796], 27732, {f:2, c:27723}, 28785, 29278, {f:2, c:29364}, 29582, 29994, 30335, 31349, [12153, 32593], [12171, 33400], 33404, 33408, 33405, 33407, [12172, 34381], [12177, 35198], 37017, [37015, 59347], 37016, 37019, 37012, 
  38434, 38436, 38432, 38435, 20310, 20283, 20322, 20297, 20307, 20324, 20286, 20327, 20306, 20319, 20289, 20312, 20269, 20275, 20287, 20321, 20879, 20921, 21020, 21022, 21025, {f:2, c:21165}, 21257, 21347, 21362, {f:2, c:21390}, 21552, 21559, 21546, 21588, 21573, 21529, 21532, 21541, 21528, 21565, 21583, 21569, 21544, 21540, 21575, 22254, 22247, 22245, 22337, 22341, 22348, 22345, 22347, 22354, 22790, 22848, 22950, 22936, 22944, 22935, 22926, 22946, 22928, 22927, 22951, 22945, 23438, 23442, 23592, 
  23594, 23693, 23695, 23688, 23691, 23689, 23698, 23690, 23686, 23699, 23701, 24032, 24074, 24078, 24203, 24201, 24204, 24200, 24205, 24325, 24349, 24440, 24438, 24530, 24529, 24528, 24557, 24552, 24558, 24563, 24545, 24548, 24547, 24570, 24559, 24567, 24571, 24576, 24564, 25146, 25219, 25228, {f:2, c:25230}, 25236, 25223, 25201, 25211, 25210, 25200, 25217, 25224, 25207, 25213, 25202, 25204, 26096, 26100, 26099, 26098, 26101, 26437, 26439, 26457, 26453, 26444, 26440, 26461, 26445, 26458, 26443, 
  27600, {f:2, c:27673}, 27768, 27751, 27755, 27780, 27787, 27791, 27761, 27759, 27753, 27802, 27757, 27783, 27797, [27804, 57900], 27750, 27763, 27749, 27771, 27790, 28788, 28794, 29283, 29375, 29373, 29379, 29382, 29377, 29370, 29381, 29589, 29591, {f:2, c:29587}, 29586, 30010, 30009, {f:2, c:30100}, 30337, 31037, 32820, 32917, 32921, 32912, 32914, 32924, 33424, 33423, 33413, 33422, 33425, 33427, 33418, {f:2, c:33411}, [12184, 35960], 36809, 36799, 37023, 37025, 37029, 37022, 37031, 37024, 38448, 
  38440, 38447, 38445, 20019, 20376, 20348, 20357, 20349, 20352, 20359, 20342, 20340, 20361, 20356, 20343, 20300, 20375, 20330, 20378, 20345, 20353, 20344, 20368, 20380, 20372, 20382, 20370, 20354, 20373, 20331, 20334, 20894, 20924, 20926, 21045, {f:2, c:21042}, 21062, 21041, 21180, {f:2, c:21258}, 21308, 21394, 21396, 21639, 21631, 21633, 21649, 21634, 21640, 21611, 21626, 21630, 21605, 21612, 21620, 21606, 21645, 21615, 21601, 21600, 21656, 21603, 21607, 21604, 22263, 22265, 22383, 22386, 22381, 
  22379, 22385, 22384, 22390, 22400, 22389, 22395, {f:2, c:22387}, 22370, 22376, 22397, 22796, 22853, 22965, 22970, 22991, 22990, 22962, 22988, 22977, 22966, 22972, 22979, 22998, 22961, 22973, 22976, 22984, 22964, 22983, 23394, 23397, 23443, 23445, 23620, 23623, 23726, 23716, 23712, 23733, 23727, 23720, 23724, 23711, 23715, 23725, 23714, 23722, 23719, 23709, 23717, 23734, 23728, 23718, 24087, 24084, 24089, 24360, {f:3, c:24354}, 24404, 24450, 24446, 24445, 24542, 24549, 24621, 24614, 24601, 24626, 
  24587, 24628, 24586, 24599, 24627, 24602, 24606, 24620, 24610, 24589, 24592, 24622, 24595, 24593, 24588, 24585, 24604, 25108, 25149, 25261, 25268, 25297, 25278, 25258, 25270, 25290, 25262, 25267, 25263, 25275, 25257, 25264, 25272, 25917, 26024, 26043, 26121, 26108, 26116, 26130, 26120, 26107, 26115, 26123, 26125, 26117, 26109, 26129, 26128, 26358, 26378, 26501, 26476, 26510, 26514, 26486, 26491, 26520, 26502, 26500, 26484, 26509, 26508, 26490, 26527, 26513, 26521, 26499, 26493, 26497, {f:2, c:26488}, 
  26516, 27429, 27520, 27518, 27614, 27677, 27795, 27884, 27883, 27886, 27865, 27830, 27860, 27821, 27879, 27831, 27856, 27842, 27834, 27843, 27846, 27885, 27890, 27858, 27869, 27828, 27786, 27805, 27776, 27870, 27840, 27952, 27853, 27847, 27824, 27897, 27855, 27881, 27857, 28820, 28824, 28805, 28819, 28806, 28804, 28817, 28822, 28802, 28826, 28803, 29290, 29398, 29387, 29400, 29385, 29404, 29394, 29396, 29402, 29388, 29393, 29604, 29601, 29613, 29606, 29602, 29600, 29612, 29597, 29917, 29928, {f:2, 
  c:30015}, 30014, 30092, 30104, 30383, 30451, 30449, 30448, 30453, 30712, 30716, 30713, 30715, 30714, 30711, 31042, 31039, 31173, 31352, 31355, 31483, 31861, 31997, 32821, 32911, 32942, 32931, 32952, 32949, 32941, 33312, 33440, 33472, 33451, 33434, 33432, 33435, 33461, 33447, 33454, 33468, 33438, 33466, 33460, 33448, 33441, 33449, 33474, 33444, 33475, 33462, 33442, 34416, 34415, {f:2, c:34413}, 35926, 36818, 36811, 36819, 36813, 36822, 36821, 36823, 37042, 37044, 37039, 37043, 37040, 38457, 38461, 
  38460, 38458, 38467, 20429, 20421, 20435, 20402, 20425, 20427, 20417, 20436, 20444, 20441, [20411, 60346], 20403, 20443, 20423, 20438, 20410, 20416, 20409, 20460, 21060, 21065, 21184, 21186, 21309, 21372, 21399, 21398, 21401, 21400, 21690, 21665, 21677, 21669, 21711, 21699, 33549, 21687, 21678, 21718, 21686, {f:2, c:21701}, 21664, 21616, 21692, 21666, 21694, 21618, 21726, 21680, 22453, {f:2, c:22430}, 22436, 22412, 22423, 22429, 22427, 22420, 22424, 22415, 22425, 22437, 22426, 22421, 22772, 22797, 
  22867, 23009, 23006, 23022, 23040, 23025, 23005, 23034, 23037, 23036, 23030, 23012, 23026, 23031, 23003, 23017, 23027, 23029, 23008, 23038, 23028, 23021, 23464, 23628, 23760, 23768, 23756, 23767, 23755, 23771, 23774, 23770, 23753, 23751, 23754, 23766, {f:2, c:23763}, 23759, 23752, 23750, 23758, 23775, 23800, 24057, {f:3, c:24097}, 24096, 24100, 24240, 24228, 24226, 24219, 24227, 24229, 24327, 24366, 24406, 24454, 24631, 24633, 24660, 24690, 24670, 24645, 24659, 24647, 24649, 24667, 24652, 24640, 
  24642, 24671, 24612, 24644, 24664, 24678, 24686, {f:2, c:25154}, 25295, 25357, 25355, 25333, 25358, 25347, 25323, 25337, 25359, 25356, 25336, 25334, 25344, {f:2, c:25363}, 25338, 25365, 25339, 25328, 25921, 25923, 26026, 26047, 26166, 26145, 26162, 26165, 26140, 26150, 26146, 26163, 26155, 26170, 26141, 26164, 26169, 26158, {f:2, c:26383}, 26561, 26610, 26568, 26554, 26588, 26555, 26616, 26584, 26560, 26551, 26565, 26603, 26596, 26591, 26549, 26573, 26547, 26615, 26614, 26606, 26595, 26562, 26553, 
  26574, 26599, 26608, 26546, 26620, 26566, 26605, 26572, 26542, 26598, 26587, 26618, {f:2, c:26569}, 26563, 26602, 26571, 27432, 27522, 27524, 27574, 27606, 27608, 27616, {f:2, c:27680}, 27944, 27956, 27949, 27935, 27964, 27967, 27922, 27914, 27866, 27955, 27908, 27929, 27962, 27930, 27921, 27904, 27933, 27970, 27905, 27928, 27959, 27907, 27919, 27968, 27911, 27936, 27948, 27912, 27938, 27913, 27920, 28855, 28831, 28862, 28849, 28848, 28833, {f:2, c:28852}, 28841, 29249, {f:2, c:29257}, 29292, 29296, 
  29299, 29294, 29386, 29412, 29416, 29419, 29407, 29418, 29414, 29411, 29573, 29644, 29634, 29640, 29637, 29625, 29622, 29621, 29620, 29675, 29631, 29639, 29630, 29635, 29638, 29624, 29643, 29932, 29934, 29998, {f:2, c:30023}, 30119, 30122, 30329, 30404, 30472, {f:3, c:30467}, 30474, 30455, 30459, 30458, {f:2, c:30695}, 30726, {f:2, c:30737}, 30725, 30736, 30735, 30734, [30729, 58095], 30723, 30739, 31050, 31052, 31051, 31045, 31044, 31189, 31181, 31183, 31190, 31182, 31360, 31358, 31441, {f:2, 
  c:31488}, 31866, {f:2, c:31864}, {f:3, c:31871}, 32003, 32008, 32001, 32600, 32657, 32653, 32702, 32775, {f:2, c:32782}, 32788, 32823, 32984, 32967, 32992, 32977, 32968, 32962, 32976, 32965, 32995, 32985, 32988, 32970, 32981, 32969, 32975, 32983, 32998, 32973, 33279, 33313, 33428, 33497, 33534, 33529, 33543, 33512, 33536, 33493, 33594, 33515, 33494, 33524, 33516, 33505, 33522, 33525, 33548, 33531, 33526, 33520, 33514, 33508, 33504, 33530, 33523, 33517, 34423, 34420, 34428, 34419, 34881, 34894, 
  34919, 34922, 34921, 35283, 35332, 35335, 36210, 36835, 36833, 36846, 36832, 37105, 37053, 37055, 37077, 37061, 37054, 37063, 37067, 37064, [37332, 60294], 37331, 38484, 38479, 38481, 38483, 38474, 38478, 20510, 20485, 20487, 20499, 20514, 20528, 20507, 20469, 20468, 20531, 20535, 20524, {f:2, c:20470}, 20503, 20508, 20512, 20519, 20533, 20527, 20529, 20494, 20826, 20884, 20883, 20938, {f:2, c:20932}, 20936, 20942, 21089, 21082, 21074, {f:2, c:21086}, 21077, 21090, 21197, 21262, 21406, 21798, 21730, 
  21783, 21778, 21735, 21747, 21732, 21786, 21759, 21764, 21768, 21739, 21777, 21765, 21745, 21770, 21755, {f:2, c:21751}, 21728, 21774, 21763, 21771, {f:2, c:22273}, 22476, 22578, 22485, 22482, 22458, 22470, 22461, 22460, 22456, 22454, 22463, 22471, 22480, 22457, 22465, 22798, 22858, 23065, 23062, {f:2, c:23085}, 23061, 23055, 23063, 23050, 23070, 23091, 23404, 23463, 23469, 23468, 23555, 23638, 23636, 23788, 23807, 23790, 23793, 23799, 23808, 23801, 24105, 24104, 24232, 24238, 24234, 24236, 24371, 
  24368, 24423, 24669, 24666, 24679, 24641, 24738, 24712, 24704, 24722, 24705, 24733, 24707, 24725, 24731, 24727, 24711, 24732, 24718, 25113, 25158, 25330, 25360, 25430, 25388, {f:2, c:25412}, 25398, 25411, 25572, 25401, 25419, 25418, 25404, 25385, 25409, 25396, 25432, 25428, 25433, 25389, 25415, 25395, 25434, 25425, 25400, 25431, 25408, 25416, 25930, 25926, 26054, {f:2, c:26051}, 26050, 26186, 26207, 26183, 26193, {f:2, c:26386}, 26655, 26650, 26697, {f:2, c:26674}, 26683, 26699, 26703, 26646, 26673, 
  26652, 26677, 26667, 26669, 26671, 26702, 26692, 26676, 26653, 26642, 26644, 26662, 26664, 26670, 26701, 26682, 26661, 26656, 27436, 27439, 27437, 27441, 27444, 27501, 32898, 27528, 27622, 27620, 27624, 27619, 27618, 27623, 27685, 28026, {f:2, c:28003}, 28022, 27917, 28001, 28050, 27992, 28002, 28013, 28015, 28049, 28045, 28143, 28031, 28038, 27998, [28007, 59078], 28E3, 28055, 28016, 28028, 27999, 28034, 28056, 27951, 28008, 28043, 28030, 28032, 28036, 27926, 28035, 28027, 28029, 28021, 28048, 
  28892, 28883, 28881, 28893, 28875, 32569, 28898, 28887, 28882, 28894, 28896, 28884, 28877, {f:3, c:28869}, 28890, 28878, 28897, 29250, 29304, 29303, 29302, 29440, 29434, 29428, 29438, 29430, 29427, 29435, 29441, 29651, 29657, 29669, 29654, 29628, 29671, 29667, 29673, 29660, 29650, 29659, 29652, 29661, 29658, {f:2, c:29655}, 29672, {f:2, c:29918}, {f:2, c:29940}, 29985, 30043, 30047, 30128, 30145, 30139, 30148, 30144, 30143, 30134, 30138, 30346, 30409, 30493, 30491, 30480, 30483, 30482, 30499, 30481, 
  30485, {f:2, c:30489}, 30498, 30503, 30755, 30764, 30754, 30773, 30767, 30760, 30766, 30763, 30753, 30761, 30771, 30762, 30769, 31060, 31067, 31055, 31068, 31059, 31058, 31057, {f:2, c:31211}, 31200, 31214, 31213, 31210, 31196, 31198, 31197, 31366, 31369, 31365, {f:2, c:31371}, 31370, 31367, 31448, 31504, 31492, 31507, 31493, 31503, 31496, 31498, 31502, 31497, 31506, 31876, 31889, 31882, 31884, 31880, 31885, 31877, 32030, 32029, 32017, 32014, 32024, 32022, 32019, 32031, 32018, 32015, 32012, 32604, 
  32609, 32606, 32608, 32605, 32603, 32662, 32658, 32707, 32706, 32704, 32790, 32830, 32825, 33018, 33010, 33017, 33013, 33025, 33019, 33024, 33281, 33327, 33317, 33587, 33581, 33604, 33561, 33617, 33573, 33622, 33599, 33601, 33574, 33564, 33570, 33602, 33614, 33563, 33578, 33544, 33596, 33613, 33558, 33572, 33568, 33591, 33583, 33577, 33607, 33605, 33612, 33619, 33566, 33580, 33611, 33575, 33608, 34387, 34386, 34466, 34472, 34454, 34445, 34449, 34462, 34439, 34455, 34438, 34443, 34458, 34437, 34469, 
  34457, 34465, 34471, 34453, 34456, 34446, 34461, 34448, 34452, {f:2, c:34883}, 34925, {f:2, c:34933}, 34930, 34944, 34929, 34943, 34927, 34947, 34942, 34932, 34940, 35346, 35911, 35927, 35963, 36004, 36003, 36214, 36216, 36277, 36279, 36278, 36561, 36563, 36862, 36853, 36866, 36863, 36859, 36868, 36860, 36854, 37078, 37088, {f:2, c:37081}, 37091, 37087, 37093, 37080, 37083, 37079, 37084, 37092, 37200, {f:2, c:37198}, 37333, 37346, 37338, 38492, 38495, 38588, 39139, [12221, 39647], [12223, 39727], 
  20095, 20592, 20586, 20577, 20574, 20576, 20563, 20555, 20573, 20594, 20552, 20557, 20545, 20571, 20554, 20578, 20501, 20549, 20575, 20585, 20587, {f:2, c:20579}, 20550, 20544, 20590, 20595, 20567, 20561, 20944, 21099, 21101, 21100, 21102, 21206, 21203, 21293, 21404, {f:2, c:21877}, 21820, 21837, 21840, 21812, 21802, 21841, 21858, 21814, 21813, 21808, 21842, 21829, 21772, 21810, 21861, 21838, 21817, 21832, 21805, 21819, 21824, 21835, 22282, 22279, 22523, 22548, 22498, 22518, 22492, 22516, 22528, 
  22509, 22525, 22536, 22520, 22539, 22515, 22479, 22535, 22510, 22499, 22514, 22501, 22508, 22497, 22542, 22524, 22544, 22503, 22529, 22540, 22513, 22505, 22512, 22541, 22532, 22876, 23136, 23128, 23125, [23143, 60437], 23134, 23096, 23093, 23149, 23120, 23135, 23141, 23148, 23123, 23140, 23127, 23107, 23133, 23122, 23108, 23131, 23112, 23182, 23102, 23117, 23097, 23116, 23152, 23145, 23111, 23121, 23126, 23106, 23132, 23410, 23406, 23489, 23488, 23641, 23838, 23819, 23837, 23834, 23840, 23820, 
  23848, 23821, 23846, 23845, 23823, 23856, 23826, 23843, 23839, 23854, 24126, 24116, 24241, 24244, 24249, {f:2, c:24242}, 24374, 24376, 24475, 24470, 24479, 24714, 24720, 24710, 24766, 24752, 24762, {f:2, c:24787}, 24783, 24804, 24793, 24797, 24776, 24753, 24795, 24759, 24778, 24767, 24771, 24781, 24768, 25394, 25445, 25482, 25474, 25469, 25533, 25502, 25517, 25501, 25495, 25515, 25486, 25455, 25479, 25488, 25454, 25519, 25461, 25500, 25453, 25518, 25468, 25508, 25403, 25503, 25464, 25477, 25473, 
  25489, 25485, 25456, 25939, 26061, 26213, 26209, 26203, 26201, 26204, 26210, 26392, 26745, 26759, 26768, 26780, {f:2, c:26733}, 26798, 26795, 26966, 26735, 26787, 26796, 26793, 26741, 26740, 26802, 26767, 26743, 26770, 26748, 26731, 26738, 26794, 26752, 26737, 26750, 26779, 26774, 26763, 26784, 26761, 26788, 26744, 26747, 26769, 26764, 26762, 26749, 27446, 27443, {f:2, c:27447}, 27537, 27535, {f:2, c:27533}, 27532, 27690, 28096, 28075, 28084, 28083, 28276, 28076, 28137, 28130, 28087, 28150, 28116, 
  28160, 28104, 28128, 28127, 28118, 28094, 28133, {f:2, c:28124}, 28123, 28148, 28106, 28093, 28141, 28144, 28090, 28117, 28098, 28111, 28105, 28112, 28146, 28115, 28157, 28119, 28109, 28131, 28091, 28922, 28941, 28919, 28951, 28916, 28940, 28912, 28932, 28915, 28944, 28924, 28927, 28934, 28947, 28928, 28920, 28918, 28939, 28930, 28942, 29310, {f:2, c:29307}, 29311, 29469, 29463, 29447, 29457, 29464, 29450, 29448, 29439, 29455, 29470, 29576, 29686, 29688, 29685, 29700, 29697, 29693, 29703, 29696, 
  29690, 29692, 29695, 29708, 29707, 29684, 29704, 30052, 30051, 30158, 30162, 30159, {f:2, c:30155}, 30161, 30160, 30351, 30345, 30419, 30521, 30511, 30509, {f:2, c:30513}, 30516, 30515, 30525, 30501, 30523, 30517, 30792, 30802, 30793, 30797, 30794, 30796, 30758, 30789, 30800, 31076, 31079, {f:2, c:31081}, 31075, 31083, 31073, 31163, 31226, 31224, {f:2, c:31222}, 31375, 31380, 31376, 31541, 31547, 31540, 31525, 31536, 31522, 31524, 31539, 31512, 31530, 31517, 31537, 31531, 31533, 31535, 31538, 31544, 
  31514, 31523, 31892, 31896, 31894, 31907, 32053, 32061, 32056, 32054, 32058, 32069, 32044, 32041, 32065, 32071, {f:2, c:32062}, 32074, 32059, 32040, 32611, 32661, {f:2, c:32668}, 32667, {f:2, c:32714}, 32717, {f:2, c:32720}, 32711, 32719, 32713, 32799, 32798, 32795, 32839, 32835, 32840, 33048, 33061, 33049, 33051, 33069, 33055, 33068, 33054, 33057, 33045, 33063, 33053, 33058, 33297, 33336, 33331, 33338, 33332, 33330, 33396, 33680, 33699, 33704, 33677, 33658, 33651, 33700, 33652, 33679, 33665, 33685, 
  33689, 33653, 33684, 33705, 33661, 33667, 33676, 33693, 33691, 33706, 33675, 33662, 33701, 33711, 33672, 33687, 33712, 33663, 33702, 33671, 33710, 33654, 34393, 34390, 34495, 34487, 34498, 34497, 34501, 34490, 34480, 34504, 34489, 34483, 34488, 34508, 34484, {f:2, c:34491}, 34499, {f:2, c:34493}, 34898, 34953, 34965, 34984, 34978, 34986, 34970, 34961, 34977, 34975, 34968, 34983, 34969, 34971, 34967, 34980, 34988, 34956, 34963, 34958, 35202, 35286, 35289, 35285, 35376, 35367, 35372, 35358, 35897, 
  35899, {f:2, c:35932}, 35965, 36005, 36221, 36219, 36217, 36284, 36290, 36281, 36287, 36289, 36568, 36574, 36573, 36572, 36567, {f:2, c:36576}, 36900, 36875, 36881, 36892, 36876, 36897, 37103, 37098, 37104, 37108, {f:2, c:37106}, 37076, {f:2, c:37099}, 37097, 37206, 37208, 37210, 37203, 37205, 37356, 37364, 37361, 37363, 37368, 37348, 37369, {f:2, c:37354}, 37367, 37352, 37358, 38266, 38278, 38280, 38524, 38509, 38507, 38513, 38511, 38591, 38762, 38916, 39141, 39319, 20635, 20629, 20628, 20638, 
  20619, 20643, 20611, 20620, 20622, 20637, 20584, 20636, 20626, 20610, 20615, 20831, 20948, 21266, 21265, 21412, 21415, 21905, 21928, 21925, 21933, 21879, 22085, 21922, 21907, 21896, 21903, 21941, 21889, 21923, 21906, 21924, 21885, 21900, 21926, 21887, 21909, 21921, 21902, 22284, 22569, 22583, 22553, 22558, 22567, 22563, 22568, 22517, 22600, 22565, 22556, 22555, 22579, 22591, 22582, 22574, 22585, 22584, 22573, 22572, 22587, 22881, 23215, 23188, 23199, 23162, 23202, 23198, 23160, 23206, 23164, 23205, 
  23212, 23189, 23214, 23095, 23172, 23178, 23191, 23171, 23179, 23209, 23163, 23165, 23180, 23196, 23183, 23187, 23197, 23530, 23501, 23499, 23508, 23505, 23498, 23502, 23564, 23600, 23863, 23875, 23915, 23873, 23883, 23871, 23861, 23889, 23886, 23893, 23859, 23866, 23890, 23869, 23857, 23897, 23874, 23865, 23881, 23864, 23868, 23858, 23862, 23872, 23877, 24132, 24129, [24408, 57673], 24486, 24485, 24491, 24777, 24761, 24780, 24802, 24782, 24772, 24852, 24818, 24842, 24854, 24837, 24821, 24851, 
  24824, 24828, 24830, 24769, 24835, 24856, 24861, 24848, 24831, 24836, 24843, 25162, 25492, 25521, 25520, 25550, 25573, 25576, 25583, 25539, 25757, 25587, 25546, 25568, 25590, 25557, 25586, 25589, 25697, 25567, 25534, 25565, 25564, 25540, 25560, 25555, 25538, 25543, 25548, 25547, 25544, 25584, 25559, 25561, 25906, 25959, 25962, 25956, 25948, 25960, 25957, 25996, {f:2, c:26013}, 26030, 26064, 26066, 26236, 26220, 26235, 26240, 26225, 26233, 26218, 26226, 26369, 26892, 26835, 26884, 26844, 26922, 
  26860, 26858, 26865, 26895, 26838, 26871, 26859, 26852, 26870, 26899, 26896, 26867, 26849, 26887, 26828, 26888, 26992, 26804, 26897, 26863, 26822, 26900, 26872, 26832, 26877, 26876, 26856, 26891, 26890, 26903, 26830, 26824, {f:2, c:26845}, 26854, 26868, 26833, 26886, 26836, 26857, 26901, 26917, 26823, 27449, 27451, 27455, 27452, 27540, 27543, 27545, 27541, 27581, 27632, {f:2, c:27634}, 27696, 28156, {f:2, c:28230}, 28191, 28233, 28296, {f:2, c:28220}, 28229, 28258, 28203, 28223, 28225, 28253, 28275, 
  28188, 28211, 28235, 28224, 28241, 28219, 28163, 28206, 28254, 28264, 28252, 28257, 28209, 28200, 28256, 28273, 28267, 28217, 28194, 28208, 28243, 28261, 28199, 28280, 28260, 28279, 28245, 28281, 28242, 28262, {f:2, c:28213}, 28250, 28960, 28958, 28975, 28923, 28974, 28977, 28963, 28965, 28962, 28978, 28959, 28968, 28986, 28955, 29259, 29274, {f:2, c:29320}, 29318, 29317, 29323, 29458, 29451, 29488, 29474, 29489, 29491, 29479, 29490, 29485, 29478, 29475, 29493, 29452, 29742, 29740, 29744, 29739, 
  29718, 29722, 29729, 29741, 29745, 29732, 29731, 29725, 29737, 29728, 29746, 29947, 29999, 30063, 30060, 30183, 30170, 30177, 30182, 30173, 30175, 30180, 30167, 30357, 30354, 30426, {f:2, c:30534}, 30532, 30541, 30533, 30538, 30542, {f:2, c:30539}, 30686, 30700, 30816, {f:2, c:30820}, 30812, 30829, 30833, 30826, 30830, 30832, 30825, 30824, 30814, 30818, 31092, 31091, 31090, 31088, 31234, 31242, 31235, 31244, 31236, 31385, 31462, 31460, 31562, 31559, 31556, 31560, 31564, 31566, 31552, 31576, 31557, 
  31906, 31902, 31912, 31905, 32088, 32111, 32099, 32083, 32086, 32103, 32106, 32079, 32109, 32092, 32107, 32082, 32084, 32105, 32081, 32095, 32078, {f:2, c:32574}, {f:2, c:32613}, 32674, {f:2, c:32672}, 32727, 32849, {f:2, c:32847}, 33022, 32980, 33091, 33098, 33106, 33103, 33095, 33085, 33101, 33082, 33254, 33262, {f:3, c:33271}, 33284, {f:2, c:33340}, 33343, 33397, 33595, [33743, 60382], 33785, 33827, 33728, 33768, 33810, 33767, 33764, 33788, 33782, 33808, 33734, 33736, 33771, 33763, 33727, 33793, 
  33757, 33765, 33752, 33791, 33761, 33739, 33742, 33750, 33781, 33737, 33801, [33807, 58332], 33758, 33809, 33798, 33730, 33779, 33749, 33786, 33735, 33745, 33770, 33811, 33690, 33731, 33772, 33774, 33732, 33787, 33751, 33762, 33819, 33755, 33790, 34520, 34530, 34534, 34515, 34531, 34522, 34538, 34525, 34539, 34524, 34540, 34537, 34519, 34536, 34513, 34888, 34902, 34901, 35002, 35031, 35001, 35E3, 35008, 35006, 34998, 35004, 34999, 35005, 34994, 35073, 35017, 35221, 35224, 35223, 35293, {f:2, c:35290}, 
  35406, 35405, 35385, 35417, 35392, {f:2, c:35415}, {f:2, c:35396}, 35410, 35400, 35409, 35402, 35404, 35407, 35935, 35969, 35968, 36026, 36030, 36016, 36025, 36021, 36228, 36224, 36233, 36312, 36307, 36301, 36295, 36310, 36316, 36303, 36309, 36313, 36296, 36311, 36293, 36591, 36599, 36602, 36601, 36582, 36590, 36581, 36597, {f:2, c:36583}, 36598, 36587, 36593, 36588, 36596, 36585, 36909, 36916, 36911, 37126, 37164, [37124, 60367], 37119, 37116, 37128, 37113, 37115, 37121, 37120, 37127, 37125, 37123, 
  37217, 37220, 37215, 37218, 37216, 37377, 37386, 37413, 37379, 37402, 37414, 37391, 37388, 37376, 37394, 37375, 37373, 37382, 37380, 37415, 37378, 37404, 37412, 37401, 37399, 37381, 37398, 38267, 38285, 38284, 38288, 38535, 38526, {f:2, c:38536}, 38531, 38528, 38594, 38600, 38595, 38641, 38640, 38764, 38768, 38766, 38919, 39081, 39147, 40166, [12235, 40697], {f:2, c:20099}, 20150, 20669, 20671, 20678, 20654, 20676, 20682, 20660, 20680, 20674, 20656, 20673, 20666, 20657, 20683, 20681, 20662, 20664, 
  20951, 21114, 21112, {f:2, c:21115}, 21955, 21979, 21964, 21968, 21963, 21962, 21981, [21952, 64013], 21972, 21956, 21993, 21951, 21970, 21901, 21967, 21973, 21986, 21974, 21960, 22002, 21965, 21977, 21954, 22292, 22611, 22632, 22628, 22607, 22605, 22601, 22639, 22613, 22606, 22621, 22617, 22629, 22619, 22589, 22627, 22641, 22780, 23239, 23236, 23243, 23226, 23224, 23217, 23221, 23216, 23231, 23240, 23227, 23238, 23223, 23232, 23242, 23220, 23222, 23245, 23225, 23184, 23510, {f:2, c:23512}, 23583, 
  23603, 23921, 23907, 23882, 23909, 23922, 23916, 23902, 23912, 23911, 23906, 24048, 24143, 24142, 24138, 24141, 24139, 24261, 24268, 24262, 24267, 24263, 24384, 24495, 24493, 24823, {f:2, c:24905}, 24875, 24901, 24886, 24882, 24878, 24902, 24879, 24911, 24873, 24896, 25120, 37224, 25123, 25125, 25124, 25541, 25585, 25579, 25616, 25618, 25609, 25632, 25636, 25651, 25667, 25631, 25621, 25624, 25657, 25655, {f:2, c:25634}, 25612, 25638, 25648, 25640, 25665, 25653, 25647, 25610, 25626, 25664, 25637, 
  25639, 25611, 25575, 25627, 25646, 25633, 25614, 25967, 26002, 26067, 26246, 26252, 26261, 26256, 26251, 26250, 26265, 26260, 26232, 26400, 26982, 26975, 26936, 26958, 26978, 26993, 26943, 26949, 26986, 26937, 26946, 26967, 26969, 27002, {f:2, c:26952}, 26933, 26988, 26931, 26941, 26981, 26864, 27E3, 26932, 26985, 26944, 26991, 26948, 26998, 26968, 26945, 26996, 26956, 26939, 26955, 26935, 26972, 26959, 26961, 26930, 26962, 26927, 27003, 26940, 27462, 27461, 27459, 27458, 27464, 27457, 27547, {f:2, 
  c:27643}, 27641, {f:2, c:27639}, 28315, 28374, 28360, 28303, 28352, 28319, {f:2, c:28307}, 28320, 28337, 28345, 28358, 28370, 28349, 28353, 28318, 28361, 28343, 28336, 28365, 28326, 28367, 28338, 28350, 28355, 28380, 28376, 28313, 28306, 28302, 28301, 28324, 28321, 28351, 28339, 28368, 28362, 28311, 28334, 28323, 28999, 29012, 29010, 29027, 29024, 28993, 29021, [29026, 61080], 29042, 29048, 29034, 29025, 28994, 29016, 28995, 29003, 29040, 29023, 29008, 29011, 28996, 29005, 29018, 29263, 29325, 
  29324, 29329, 29328, 29326, 29500, 29506, 29499, 29498, 29504, 29514, 29513, 29764, {f:2, c:29770}, 29778, 29777, 29783, 29760, {f:2, c:29775}, 29774, 29762, 29766, 29773, 29780, 29921, 29951, 29950, 29949, 29981, 30073, 30071, 27011, 30191, 30223, 30211, 30199, 30206, 30204, [30201, 60782], 30200, 30224, 30203, 30198, 30189, 30197, 30205, 30361, 30389, 30429, 30549, {f:2, c:30559}, 30546, 30550, 30554, 30569, 30567, 30548, 30553, 30573, 30688, 30855, 30874, 30868, 30863, 30852, 30869, {f:2, c:30853}, 
  30881, 30851, 30841, 30873, 30848, 30870, 30843, 31100, 31106, 31101, 31097, 31249, {f:2, c:31256}, 31250, 31255, 31253, 31266, 31251, 31259, 31248, 31395, 31394, 31390, 31467, 31590, 31588, 31597, 31604, 31593, 31602, 31589, 31603, 31601, 31600, 31585, 31608, 31606, 31587, 31922, 31924, 31919, 32136, 32134, 32128, 32141, 32127, 32133, 32122, 32142, 32123, 32131, 32124, 32140, 32148, 32132, 32125, 32146, 32621, 32619, {f:2, c:32615}, 32620, 32678, 32677, 32679, {f:2, c:32731}, 32801, 33124, 33120, 
  33143, 33116, 33129, 33115, 33122, 33138, 26401, 33118, 33142, 33127, 33135, 33092, 33121, 33309, 33353, 33348, 33344, 33346, 33349, 34033, 33855, 33878, 33910, 33913, 33935, 33933, 33893, 33873, 33856, 33926, 33895, 33840, 33869, 33917, 33882, 33881, 33908, 33907, 33885, 34055, 33886, 33847, 33850, 33844, 33914, 33859, 33912, 33842, 33861, 33833, 33753, 33867, 33839, 33858, 33837, 33887, 33904, 33849, 33870, 33868, 33874, 33903, 33989, 33934, 33851, 33863, 33846, 33843, 33896, 33918, 33860, 33835, 
  33888, 33876, 33902, 33872, 34571, 34564, 34551, 34572, 34554, 34518, 34549, 34637, 34552, 34574, 34569, 34561, 34550, 34573, 34565, 35030, 35019, {f:2, c:35021}, 35038, 35035, 35034, 35020, 35024, 35205, 35227, 35295, 35301, 35300, 35297, 35296, 35298, 35292, 35302, 35446, 35462, 35455, 35425, 35391, 35447, 35458, 35460, 35445, 35459, 35457, 35444, 35450, 35900, 35915, 35914, 35941, 35940, 35942, 35974, {f:2, c:35972}, 36044, {f:2, c:36200}, 36241, 36236, {f:2, c:36238}, 36237, {f:2, c:36243}, 
  36240, 36242, 36336, 36320, 36332, 36337, 36334, 36304, 36329, 36323, 36322, 36327, 36338, 36331, 36340, 36614, 36607, 36609, 36608, 36613, {f:2, c:36615}, 36610, [36619, 60507], 36946, 36927, 36932, 36937, 36925, 37136, 37133, 37135, 37137, 37142, 37140, 37131, 37134, {f:2, c:37230}, 37448, 37458, 37424, 37434, 37478, 37427, 37477, 37470, 37507, 37422, 37450, 37446, 37485, 37484, 37455, 37472, 37479, 37487, 37430, 37473, 37488, 37425, 37460, 37475, 37456, 37490, 37454, 37459, 37452, 37462, 37426, 
  38303, 38300, 38302, 38299, {f:2, c:38546}, 38545, 38551, 38606, 38650, 38653, 38648, 38645, 38771, {f:2, c:38775}, 38770, 38927, {f:2, c:38925}, 39084, 39158, 39161, 39343, 39346, 39344, 39349, 39597, 39595, 39771, 40170, 40173, 40167, 40576, [12236, 40701], 20710, 20692, 20695, 20712, 20723, 20699, 20714, 20701, 20708, 20691, 20716, 20720, 20719, 20707, 20704, 20952, {f:2, c:21120}, 21225, 21227, 21296, 21420, 22055, 22037, 22028, 22034, 22012, 22031, 22044, 22017, 22035, 22018, 22010, 22045, 
  22020, 22015, 22009, 22665, 22652, 22672, 22680, 22662, 22657, 22655, 22644, 22667, 22650, 22663, 22673, 22670, 22646, 22658, 22664, 22651, 22676, 22671, 22782, 22891, 23260, 23278, 23269, 23253, 23274, 23258, 23277, 23275, 23283, 23266, 23264, 23259, 23276, 23262, 23261, 23257, 23272, 23263, 23415, 23520, 23523, 23651, 23938, 23936, 23933, 23942, 23930, 23937, 23927, 23946, 23945, 23944, 23934, 23932, 23949, 23929, 23935, {f:2, c:24152}, 24147, 24280, 24273, 24279, 24270, 24284, 24277, 24281, 
  24274, 24276, 24388, 24387, 24431, 24502, 24876, 24872, 24897, 24926, 24945, 24947, {f:2, c:24914}, 24946, 24940, 24960, 24948, 24916, 24954, 24923, 24933, 24891, 24938, 24929, 24918, 25129, 25127, 25131, 25643, 25677, 25691, 25693, 25716, 25718, {f:2, c:25714}, 25725, 25717, 25702, 25766, 25678, 25730, 25694, 25692, 25675, 25683, 25696, 25680, 25727, 25663, 25708, 25707, 25689, 25701, 25719, 25971, 26016, 26273, 26272, 26271, 26373, 26372, 26402, 27057, 27062, 27081, 27040, 27086, 27030, 27056, 
  27052, 27068, 27025, 27033, 27022, 27047, 27021, 27049, 27070, 27055, 27071, 27076, 27069, 27044, 27092, 27065, 27082, 27034, 27087, 27059, 27027, 27050, 27041, 27038, 27097, 27031, 27024, 27074, 27061, 27045, 27078, 27466, 27469, 27467, {f:3, c:27550}, {f:2, c:27587}, 27646, 28366, 28405, 28401, 28419, 28453, 28408, 28471, 28411, 28462, 28425, 28494, {f:2, c:28441}, 28455, 28440, 28475, 28434, 28397, 28426, 28470, 28531, 28409, 28398, 28461, 28480, 28464, 28476, 28469, 28395, 28423, 28430, 28483, 
  28421, 28413, 28406, 28473, 28444, 28412, 28474, 28447, 28429, 28446, 28424, 28449, 29063, 29072, 29065, 29056, 29061, 29058, 29071, 29051, 29062, 29057, 29079, 29252, 29267, 29335, 29333, 29331, 29507, 29517, 29521, 29516, 29794, 29811, 29809, 29813, 29810, 29799, 29806, 29952, {f:2, c:29954}, 30077, 30096, 30230, 30216, 30220, 30229, 30225, 30218, 30228, 30392, 30593, 30588, 30597, 30594, 30574, 30592, 30575, 30590, 30595, 30898, 30890, 30900, 30893, 30888, 30846, 30891, 30878, 30885, 30880, 
  30892, 30882, 30884, 31128, {f:2, c:31114}, 31126, 31125, 31124, 31123, 31127, 31112, 31122, 31120, 31275, 31306, 31280, 31279, 31272, 31270, 31400, {f:2, c:31403}, 31470, 31624, 31644, 31626, 31633, 31632, 31638, 31629, 31628, 31643, 31630, 31621, 31640, 21124, 31641, 31652, 31618, 31931, 31935, 31932, 31930, 32167, 32183, 32194, 32163, 32170, 32193, 32192, 32197, 32157, 32206, 32196, 32198, {f:2, c:32203}, 32175, 32185, 32150, 32188, 32159, 32166, 32174, 32169, 32161, 32201, 32627, {f:2, c:32738}, 
  32741, 32734, 32804, 32861, 32860, 33161, 33158, 33155, 33159, 33165, 33164, 33163, 33301, 33943, 33956, 33953, 33951, 33978, 33998, 33986, 33964, 33966, 33963, 33977, 33972, 33985, 33997, 33962, 33946, 33969, 34E3, 33949, 33959, 33979, 33954, 33940, 33991, 33996, 33947, 33961, 33967, [33960, 58327], 34006, 33944, 33974, 33999, 33952, 34007, 34004, 34002, 34011, 33968, 33937, 34401, 34611, 34595, 34600, 34667, 34624, 34606, 34590, 34593, 34585, 34587, 34627, 34604, 34625, 34622, 34630, 34592, 34610, 
  34602, 34605, 34620, 34578, 34618, 34609, 34613, 34626, {f:2, c:34598}, 34616, 34596, 34586, 34608, 34577, 35063, 35047, {f:2, c:35057}, 35066, 35070, 35054, 35068, 35062, 35067, 35056, 35052, 35051, 35229, 35233, 35231, 35230, 35305, 35307, 35304, 35499, 35481, 35467, 35474, 35471, 35478, 35901, {f:2, c:35944}, 36053, 36047, 36055, 36246, 36361, 36354, 36351, 36365, 36349, 36362, 36355, 36359, 36358, 36357, 36350, 36352, 36356, {f:2, c:36624}, 36622, 36621, 37155, 37148, 37152, 37154, 37151, 37149, 
  37146, 37156, 37153, 37147, 37242, 37234, 37241, 37235, 37541, 37540, 37494, 37531, 37498, 37536, 37524, 37546, 37517, 37542, 37530, 37547, 37497, 37527, 37503, 37539, 37614, 37518, 37506, 37525, 37538, 37501, 37512, 37537, 37514, 37510, 37516, 37529, 37543, 37502, 37511, 37545, 37533, 37515, 37421, 38558, 38561, 38655, 38744, 38781, 38778, 38782, 38787, 38784, 38786, 38779, 38788, 38785, 38783, 38862, 38861, 38934, {f:2, c:39085}, 39170, 39168, 39175, 39325, 39324, 39363, 39353, 39355, 39354, 
  39362, 39357, 39367, 39601, 39651, 39655, {f:2, c:39742}, {f:2, c:39776}, 39775, {f:2, c:40177}, 40181, 40615, 20735, 20739, 20784, 20728, {f:2, c:20742}, 20726, 20734, {f:2, c:20747}, 20733, 20746, {f:2, c:21131}, 21233, 21231, 22088, 22082, 22092, 22069, 22081, 22090, 22089, 22086, 22104, 22106, 22080, 22067, 22077, 22060, 22078, 22072, 22058, 22074, 22298, 22699, 22685, 22705, 22688, 22691, 22703, 22700, 22693, 22689, 22783, 23295, 23284, 23293, 23287, 23286, 23299, 23288, 23298, 23289, 23297, 
  23303, 23301, 23311, 23655, 23961, 23959, 23967, 23954, 23970, 23955, 23957, 23968, 23964, 23969, 23962, 23966, 24169, 24157, 24160, 24156, 32243, 24283, 24286, 24289, 24393, 24498, 24971, 24963, 24953, 25009, 25008, 24994, 24969, 24987, 24979, 25007, 25005, 24991, 24978, 25002, 24993, 24973, 24934, 25011, 25133, 25710, 25712, 25750, 25760, 25733, 25751, 25756, 25743, 25739, 25738, 25740, 25763, 25759, 25704, 25777, 25752, 25974, 25978, 25977, 25979, {f:2, c:26034}, 26293, 26288, 26281, 26290, 
  26295, 26282, 26287, 27136, 27142, 27159, 27109, 27128, 27157, 27121, 27108, 27168, 27135, 27116, 27106, 27163, 27165, 27134, 27175, 27122, 27118, 27156, 27127, 27111, 27200, 27144, 27110, 27131, 27149, 27132, 27115, 27145, 27140, 27160, 27173, 27151, 27126, 27174, 27143, 27124, 27158, 27473, 27557, 27555, 27554, 27558, 27649, 27648, 27647, 27650, 28481, 28454, 28542, 28551, 28614, 28562, 28557, 28553, 28556, 28514, 28495, 28549, 28506, 28566, 28534, 28524, 28546, 28501, 28530, 28498, 28496, 28503, 
  28564, 28563, 28509, 28416, 28513, 28523, 28541, 28519, 28560, 28499, 28555, 28521, 28543, 28565, 28515, 28535, 28522, 28539, 29106, 29103, 29083, 29104, 29088, 29082, 29097, 29109, 29085, 29093, 29086, 29092, 29089, 29098, 29084, 29095, 29107, 29336, 29338, 29528, 29522, {f:3, c:29534}, 29533, 29531, 29537, 29530, 29529, 29538, 29831, {f:2, c:29833}, 29830, 29825, 29821, 29829, 29832, 29820, [29817, 58868], 29960, 29959, 30078, 30245, 30238, 30233, 30237, 30236, 30243, 30234, 30248, 30235, {f:3, 
  c:30364}, 30363, 30605, 30607, 30601, 30600, 30925, 30907, 30927, 30924, 30929, 30926, 30932, 30920, {f:2, c:30915}, 30921, 31130, 31137, 31136, 31132, 31138, [31131, 59175], 27510, 31289, 31410, 31412, 31411, 31671, 31691, 31678, 31660, 31694, 31663, 31673, 31690, 31669, 31941, 31944, 31948, 31947, 32247, 32219, 32234, 32231, 32215, 32225, 32259, 32250, 32230, 32246, 32241, 32240, 32238, 32223, 32630, 32684, 32688, 32685, 32749, 32747, 32746, 32748, 32742, 32744, 32868, 32871, 33187, 33183, 33182, 
  33173, 33186, 33177, 33175, 33302, 33359, 33363, 33362, 33360, 33358, 33361, 34084, 34107, 34063, 34048, 34089, 34062, 34057, 34061, 34079, 34058, 34087, 34076, 34043, 34091, 34042, 34056, 34060, 34036, 34090, 34034, 34069, 34039, 34027, 34035, 34044, 34066, 34026, 34025, 34070, 34046, 34088, 34077, 34094, 34050, 34045, 34078, 34038, 34097, 34086, {f:2, c:34023}, 34032, 34031, 34041, 34072, 34080, 34096, 34059, 34073, 34095, 34402, 34646, {f:2, c:34659}, 34679, 34785, 34675, 34648, 34644, 34651, 
  34642, 34657, 34650, 34641, 34654, 34669, 34666, 34640, 34638, 34655, 34653, 34671, 34668, 34682, 34670, 34652, 34661, 34639, 34683, 34677, 34658, 34663, 34665, 34906, 35077, 35084, 35092, 35083, {f:3, c:35095}, 35078, 35094, 35089, 35086, 35081, 35234, 35236, 35235, 35309, 35312, 35308, 35535, 35526, 35512, 35539, 35537, {f:2, c:35540}, 35515, 35543, 35518, 35520, 35525, 35544, 35523, 35514, 35517, 35545, 35902, 35917, 35983, 36069, 36063, 36057, 36072, 36058, 36061, 36071, 36256, 36252, 36257, 
  36251, 36384, 36387, 36389, 36388, 36398, 36373, 36379, 36374, 36369, 36377, {f:2, c:36390}, 36372, 36370, 36376, 36371, 36380, 36375, 36378, 36652, 36644, 36632, 36634, 36640, 36643, {f:2, c:36630}, 36979, 36976, 36975, 36967, 36971, 37167, 37163, {f:2, c:37161}, 37170, 37158, 37166, {f:2, c:37253}, 37258, {f:2, c:37249}, 37252, 37248, 37584, {f:2, c:37571}, 37568, 37593, 37558, 37583, 37617, 37599, 37592, 37609, 37591, 37597, 37580, 37615, 37570, 37608, 37578, 37576, 37582, 37606, 37581, 37589, 
  37577, 37600, 37598, 37607, 37585, 37587, 37557, 37601, 37669, 37574, 37556, 38268, 38316, 38315, 38318, 38320, 38564, 38562, 38611, 38661, 38664, 38658, 38746, 38794, 38798, 38792, 38864, 38863, 38942, 38941, 38950, 38953, 38952, 38944, 38939, 38951, 39090, 39176, 39162, 39185, 39188, {f:2, c:39190}, 39189, 39388, 39373, 39375, {f:2, c:39379}, 39374, 39369, [39382, 60270], 39384, 39371, 39383, 39372, 39603, 39660, 39659, 39667, 39666, 39665, 39750, 39747, 39783, 39796, 39793, 39782, 39798, 39797, 
  39792, 39784, 39780, 39788, 40188, 40186, 40189, 40191, 40183, 40199, 40192, 40185, 40187, 40200, 40197, 40196, 40579, 40659, {f:2, c:40719}, 20764, 20755, 20759, 20762, 20753, 20958, 21300, 21473, 22128, 22112, 22126, 22131, 22118, 22115, 22125, 22130, 22110, 22135, 22300, 22299, 22728, 22717, 22729, 22719, 22714, 22722, 22716, 22726, 23319, 23321, 23323, 23329, 23316, 23315, 23312, 23318, [23336, 59539], 23322, 23328, 23326, 23535, 23980, 23985, 23977, 23975, 23989, 23984, 23982, 23978, 23976, 
  23986, 23981, 23983, 23988, {f:2, c:24167}, 24166, 24175, 24297, 24295, 24294, 24296, 24293, 24395, 24508, 24507, 24989, 25E3, 24982, 25029, 25012, 25030, 25025, 25036, 25018, 25023, 25016, 24972, 25815, 25814, 25808, 25807, 25801, 25789, 25737, 25795, 25819, 25843, 25817, 25907, 25983, 25980, 26018, 26312, 26302, 26304, {f:2, c:26314}, 26319, 26301, 26299, 26298, 26316, 26403, 27188, 27238, 27209, 27239, 27186, 27240, 27198, 27229, 27245, 27254, 27227, 27217, 27176, 27226, 27195, 27199, 27201, 
  27242, 27236, 27216, 27215, 27220, 27247, 27241, 27232, 27196, 27230, 27222, 27221, {f:2, c:27213}, 27206, 27477, 27476, 27478, 27559, {f:2, c:27562}, 27592, 27591, 27652, 27651, 27654, 28589, 28619, 28579, 28615, 28604, 28622, 28616, 28510, 28612, 28605, 28574, 28618, 28584, 28676, 28581, 28590, 28602, 28588, 28586, 28623, 28607, 28600, 28578, 28617, 28587, 28621, 28591, 28594, 28592, 29125, 29122, 29119, 29112, 29142, {f:2, c:29120}, 29131, 29140, 29130, 29127, 29135, 29117, 29144, 29116, 29126, 
  {f:2, c:29146}, {f:2, c:29341}, 29545, {f:2, c:29542}, 29548, 29541, 29547, 29546, 29823, 29850, 29856, 29844, 29842, 29845, 29857, 29963, 30080, 30255, 30253, 30257, 30269, 30259, 30268, 30261, 30258, 30256, 30395, 30438, 30618, 30621, 30625, 30620, 30619, {f:2, c:30626}, 30613, 30617, 30615, 30941, 30953, 30949, 30954, 30942, 30947, 30939, {f:2, c:30945}, 30957, {f:2, c:30943}, 31140, 31300, 31304, 31303, 31414, 31416, 31413, 31409, 31415, 31710, 31715, 31719, 31709, 31701, 31717, 31706, 31720, 
  31737, 31700, 31722, 31714, 31708, 31723, 31704, 31711, 31954, 31956, 31959, {f:2, c:31952}, 32274, 32289, 32279, 32268, {f:2, c:32287}, 32275, 32270, 32284, 32277, 32282, 32290, 32267, 32271, 32278, 32269, 32276, 32293, 32292, 32579, {f:2, c:32635}, 32634, 32689, 32751, 32810, 32809, 32876, 33201, 33190, 33198, 33209, 33205, 33195, 33200, 33196, 33204, 33202, 33207, 33191, 33266, {f:3, c:33365}, 34134, 34117, 34155, 34125, 34131, 34145, 34136, 34112, 34118, 34148, 34113, 34146, 34116, 34129, 34119, 
  34147, 34110, 34139, 34161, 34126, 34158, 34165, 34133, 34151, 34144, 34188, 34150, 34141, 34132, 34149, 34156, 34403, 34405, 34404, 34724, 34715, 34703, 34711, 34707, 34706, 34696, 34689, 34710, 34712, 34681, 34695, 34723, 34693, {f:2, c:34704}, 34717, 34692, 34708, 34716, 34714, 34697, 35102, 35110, 35120, {f:2, c:35117}, 35111, 35121, 35106, 35113, 35107, 35119, 35116, 35103, 35313, 35552, 35554, 35570, {f:2, c:35572}, 35549, 35604, 35556, 35551, 35568, 35528, 35550, 35553, 35560, 35583, 35567, 
  35579, {f:2, c:35985}, 35984, 36085, 36078, 36081, 36080, 36083, 36204, 36206, 36261, 36263, 36403, 36414, 36408, 36416, 36421, 36406, {f:2, c:36412}, 36417, 36400, 36415, 36541, [36662, 60329], 36654, 36661, 36658, 36665, 36663, 36660, 36982, 36985, 36987, 36998, 37114, 37171, {f:2, c:37173}, 37267, {f:2, c:37264}, 37261, 37263, 37671, 37662, 37640, 37663, 37638, 37647, 37754, 37688, 37692, 37659, 37667, 37650, 37633, 37702, 37677, 37646, 37645, 37579, 37661, 37626, 37651, 37625, 37623, 37684, 
  37634, 37668, 37631, 37673, 37689, 37685, 37674, 37652, 37644, 37643, 37630, 37641, 37632, 37627, 37654, 38332, 38349, 38334, {f:2, c:38329}, 38326, 38335, 38325, 38333, 38569, 38612, 38667, 38674, 38672, 38809, 38807, 38804, 38896, 38904, 38965, 38959, 38962, 39204, 39199, 39207, 39209, 39326, 39406, 39404, 39397, 39396, 39408, 39395, 39402, 39401, 39399, 39609, 39615, 39604, 39611, 39670, 39674, 39673, 39671, 39731, 39808, 39813, 39815, 39804, 39806, 39803, 39810, 39827, 39826, 39824, 39802, 
  39829, 39805, 39816, 40229, 40215, 40224, 40222, 40212, 40233, 40221, 40216, 40226, 40208, 40217, 40223, 40584, {f:2, c:40582}, 40622, 40621, {f:2, c:40661}, 40698, 40722, 40765, 20774, 20773, 20770, 20772, 20768, 20777, 21236, 22163, {f:2, c:22156}, 22150, 22148, 22147, 22142, 22146, 22143, 22145, 22742, 22740, 22735, 22738, 23341, 23333, 23346, 23331, 23340, 23335, 23334, 23343, 23342, 23419, {f:2, c:23537}, 23991, 24172, 24170, 24510, 25027, 25013, 25020, 25063, 25056, 25061, 25060, 25064, 25054, 
  25839, 25833, 25827, 25835, 25828, 25832, 25985, 25984, 26038, 26074, 26322, 27277, 27286, 27265, 27301, 27273, 27295, 27291, 27297, 27294, 27271, 27283, 27278, 27285, 27267, 27304, 27300, 27281, 27263, 27302, 27290, 27269, 27276, 27282, 27483, 27565, 27657, 28620, 28585, 28660, 28628, 28643, 28636, 28653, 28647, 28646, 28638, 28658, 28637, 28642, 28648, 29153, 29169, 29160, 29170, 29156, 29168, 29154, 29555, {f:2, c:29550}, 29847, 29874, 29867, 29840, 29866, 29869, 29873, 29861, 29871, {f:3, c:29968}, 
  29967, 30084, 30275, {f:2, c:30280}, 30279, 30372, 30441, 30645, 30635, 30642, 30647, 30646, 30644, 30641, 30632, 30704, 30963, 30973, 30978, {f:2, c:30971}, 30975, 30962, 30981, 30969, 30974, 30980, 31147, 31144, 31324, 31323, 31318, 31320, 31316, 31322, 31422, {f:2, c:31424}, 31749, 31759, 31730, 31744, 31743, 31739, 31758, 31732, 31755, 31731, 31746, 31753, 31747, 31745, 31736, 31741, [31750, 58176], {f:2, c:31728}, 31760, 31754, 31976, 32301, 32316, 32322, 32307, 38984, 32312, 32298, 32329, 
  32320, 32327, 32297, 32332, 32304, 32315, 32310, 32324, 32314, 32581, 32639, 32638, 32637, 32756, 32754, 32812, 33211, 33220, 33228, 33226, 33221, 33223, 33212, 33257, 33371, 33370, 33372, 34179, 34176, 34191, 34215, 34197, 34208, 34187, 34211, 34171, 34212, 34202, 34206, 34167, 34172, 34185, 34209, 34170, 34168, 34135, 34190, 34198, 34182, 34189, 34201, 34205, 34177, 34210, 34178, 34184, 34181, 34169, 34166, 34200, 34192, 34207, 34408, 34750, 34730, 34733, 34757, 34736, 34732, 34745, 34741, 34748, 
  34734, 34761, 34755, 34754, 34764, 34743, 34735, 34756, 34762, 34740, 34742, 34751, 34744, 34749, 34782, 34738, 35125, 35123, 35132, 35134, 35137, 35154, 35127, 35138, 35245, 35247, 35246, {f:2, c:35314}, 35614, 35608, 35606, 35601, 35589, 35595, 35618, 35599, 35602, 35605, 35591, 35597, 35592, 35590, 35612, 35603, 35610, 35919, 35952, 35954, 35953, 35951, 35989, 35988, 36089, 36207, 36430, 36429, 36435, 36432, 36428, 36423, 36675, 36672, 36997, 36990, 37176, 37274, 37282, 37275, 37273, 37279, 
  37281, 37277, 37280, 37793, 37763, 37807, 37732, 37718, 37703, 37756, 37720, 37724, 37750, 37705, {f:2, c:37712}, 37728, 37741, 37775, 37708, 37738, 37753, 37719, 37717, 37714, 37711, 37745, 37751, 37755, 37729, 37726, 37731, 37735, 37710, 37721, 38343, 38336, 38345, 38339, 38341, 38327, 38574, 38576, 38572, 38688, 38687, 38680, 38685, 38681, 38810, 38817, 38812, 38814, 38813, 38869, 38868, 38897, 38977, 38980, 38986, 38985, 38981, 38979, 39205, {f:2, c:39211}, 39210, 39219, 39218, 39215, 39213, 
  39217, 39216, 39320, 39331, 39329, 39426, 39418, 39412, 39415, 39417, 39416, 39414, 39419, {f:2, c:39421}, 39420, 39427, 39614, 39678, 39677, 39681, 39676, 39752, 39834, 39848, 39838, 39835, 39846, 39841, 39845, 39844, 39814, 39842, 39840, 39855, 40243, 40257, 40295, 40246, {f:2, c:40238}, 40241, 40248, 40240, 40261, {f:2, c:40258}, 40254, 40247, 40256, 40253, 32757, 40237, 40586, 40585, 40589, 40624, 40648, 40666, 40699, 40703, 40740, 40739, 40738, 40788, [12245, 40864], 20785, {f:2, c:20781}, 
  22168, 22172, 22167, 22170, 22173, 22169, 22896, 23356, {f:2, c:23657}, 24E3, {f:2, c:24173}, 25048, 25055, {f:2, c:25069}, 25073, 25066, 25072, 25067, 25046, 25065, 25855, 25860, 25853, 25848, 25857, 25859, 25852, 26004, 26075, {f:2, c:26330}, 26328, 27333, 27321, 27325, 27361, 27334, 27322, {f:2, c:27318}, 27335, 27316, 27309, 27486, 27593, 27659, 28679, {f:2, c:28684}, 28673, 28677, 28692, 28686, {f:2, c:28671}, 28667, 28710, 28668, 28663, 28682, [29185, 60224], 29183, 29177, 29187, 29181, 29558, 
  29880, 29888, 29877, 29889, 29886, 29878, 29883, 29890, 29972, 29971, 30300, 30308, 30297, 30288, 30291, 30295, 30298, 30374, 30397, 30444, 30658, 30650, 30988, {f:2, c:30995}, 30985, 30992, 30994, 30993, 31149, 31148, 31327, 31772, 31785, 31769, 31776, 31775, 31789, 31773, 31782, 31784, 31778, 31781, 31792, 32348, 32336, 32342, 32355, 32344, 32354, 32351, 32337, 32352, 32343, 32339, 32693, 32691, {f:2, c:32759}, 32885, {f:2, c:33233}, 33232, 33375, 33374, 34228, 34246, 34240, 34243, 34242, 34227, 
  34229, 34237, 34247, 34244, 34239, 34251, 34254, 34248, 34245, 34225, 34230, 34258, 34340, 34232, 34231, 34238, 34409, 34791, 34790, 34786, 34779, 34795, 34794, 34789, 34783, 34803, 34788, 34772, 34780, 34771, 34797, 34776, 34787, 34775, 34777, 34817, 34804, 34792, 34781, 35155, 35147, 35151, 35148, 35142, {f:2, c:35152}, 35145, 35626, 35623, 35619, 35635, 35632, 35637, 35655, 35631, 35644, 35646, 35633, 35621, 35639, 35622, 35638, 35630, 35620, 35643, 35645, 35642, 35906, 35957, 35993, 35992, 
  35991, 36094, 36100, 36098, 36096, 36444, 36450, 36448, 36439, 36438, 36446, 36453, 36455, 36443, 36442, 36449, 36445, 36457, 36436, {f:3, c:36678}, 36683, 37160, {f:2, c:37178}, 37182, 37288, 37285, 37287, 37295, 37290, 37813, 37772, 37778, 37815, 37787, 37789, 37769, 37799, 37774, 37802, 37790, 37798, 37781, 37768, 37785, 37791, 37760, 37773, 37809, 37777, 37810, 37796, 37800, 37812, 37795, {f:2, c:38354}, 38353, 38579, 38615, 38618, 24002, 38623, 38616, 38621, 38691, 38690, 38693, 38828, 38830, 
  38824, 38827, 38820, 38826, 38818, 38821, 38871, 38873, 38870, 38872, 38906, {f:3, c:38992}, 39096, 39233, 39228, 39226, 39439, 39435, 39433, 39437, 39428, 39441, 39434, 39429, 39431, 39430, 39616, 39644, 39688, {f:2, c:39684}, 39721, 39733, 39754, 39756, 39755, 39879, 39878, 39875, 39871, 39873, 39861, 39864, 39891, 39862, 39876, 39865, 39869, 40284, 40275, 40271, 40266, 40283, 40267, 40281, 40278, 40268, 40279, 40274, 40276, 40287, 40280, 40282, 40590, 40588, 40671, 40705, 40704, [40726, 58693], 
  40741, 40747, 40746, 40745, 40744, 40780, 40789, {f:2, c:20788}, 21142, 21239, 21428, 22187, 22189, {f:2, c:22182}, 22186, 22188, 22746, 22749, 22747, 22802, {f:3, c:23357}, 24003, 24176, 24511, 25083, 25863, 25872, 25869, 25865, 25868, 25870, 25988, 26078, 26077, 26334, 27367, 27360, 27340, 27345, 27353, 27339, 27359, 27356, 27344, 27371, 27343, 27341, 27358, 27488, 27568, 27660, 28697, 28711, 28704, 28694, 28715, {f:3, c:28705}, 28713, 28695, 28708, 28700, 29196, 29194, 29191, 29186, 29189, {f:2, 
  c:29349}, 29348, 29347, 29345, 29899, 29893, 29879, 29891, 29974, 30304, {f:2, c:30665}, 30660, 30705, 31005, 31003, 31009, 31004, 30999, 31006, 31152, {f:2, c:31335}, 31795, 31804, 31801, 31788, 31803, 31980, 31978, 32374, 32373, 32376, 32368, 32375, 32367, 32378, 32370, 32372, 32360, 32587, 32586, 32643, 32646, 32695, {f:2, c:32765}, 32888, 33239, 33237, 33291, 33380, 33377, 33379, 34283, 34289, 34285, 34265, 34273, 34280, 34266, 34263, 34284, 34290, 34296, 34264, 34271, 34275, 34268, 34257, 
  34288, 34278, 34287, 34270, 34274, 34816, 34810, 34819, {f:2, c:34806}, 34825, 34828, 34827, 34822, 34812, 34824, 34815, 34826, 34818, 35170, {f:2, c:35162}, 35159, 35169, 35164, 35160, 35165, 35161, 35208, 35255, 35254, 35318, 35664, 35656, 35658, 35648, 35667, 35670, 35668, 35659, 35669, 35665, 35650, 35666, 35671, 35907, 35959, 35958, 35994, {f:2, c:36102}, 36105, 36268, 36266, 36269, 36267, 36461, 36472, 36467, 36458, 36463, 36475, 36546, 36690, 36689, {f:2, c:36687}, 36691, 36788, 37184, 37183, 
  37296, 37293, 37854, 37831, 37839, 37826, 37850, 37840, 37881, 37868, 37836, 37849, 37801, 37862, 37834, 37844, 37870, 37859, 37845, 37828, 37838, 37824, 37842, 37797, 37863, 38269, {f:2, c:38362}, 38625, 38697, {f:2, c:38699}, 38696, 38694, 38835, 38839, 38838, {f:3, c:38877}, 39004, 39001, 39005, 38999, 39103, 39101, 39099, 39102, 39240, 39239, 39235, {f:2, c:39334}, 39450, 39445, 39461, 39453, 39460, 39451, 39458, 39456, 39463, 39459, 39454, 39452, 39444, 39618, 39691, 39690, 39694, 39692, 39735, 
  {f:2, c:39914}, 39904, 39902, 39908, 39910, 39906, 39920, 39892, 39895, 39916, 39900, 39897, 39909, 39893, 39905, 39898, 40311, 40321, 40330, 40324, 40328, 40305, 40320, 40312, 40326, {f:2, c:40331}, 40317, 40299, {f:2, c:40308}, 40304, 40297, 40325, 40307, 40315, 40322, 40303, 40313, 40319, 40327, 40296, 40596, 40593, 40640, 40700, 40749, {f:2, c:40768}, 40781, {f:3, c:40790}, 21303, 22194, 22197, 22195, 22755, 23365, {f:2, c:24006}, {f:2, c:24302}, {f:2, c:24512}, 25081, 25879, 25878, 25877, 
  25875, 26079, 26344, {f:2, c:26339}, 27379, 27376, 27370, 27368, 27385, 27377, {f:2, c:27374}, 28732, 28725, 28719, 28727, 28724, 28721, 28738, 28728, 28735, 28730, 28729, 28714, 28736, 28731, 28723, 28737, {f:2, c:29203}, 29352, 29565, 29564, 29882, 30379, 30378, 30398, 30445, 30668, {f:2, c:30670}, 30669, 30706, 31013, 31011, {f:2, c:31015}, 31012, 31017, 31154, 31342, {f:2, c:31340}, 31479, 31817, 31816, 31818, 31815, 31813, 31982, 32379, 32382, 32385, 32384, 32698, 32767, 32889, 33243, 33241, 
  {f:2, c:33384}, 34338, 34303, 34305, 34302, 34331, 34304, 34294, 34308, 34313, 34309, 34316, 34301, 34841, {f:2, c:34832}, 34839, 34835, 34838, 35171, 35174, 35257, 35319, 35680, 35690, 35677, 35688, 35683, 35685, 35687, 35693, 36270, 36486, 36488, 36484, 36697, {f:2, c:36694}, 36693, 36696, 36698, 37005, 37187, 37185, 37303, 37301, {f:2, c:37298}, 37899, 37907, 37883, 37920, 37903, 37908, 37886, 37909, 37904, 37928, 37913, 37901, 37877, 37888, 37879, 37895, 37902, 37910, 37906, 37882, 37897, 37880, 
  37948, 37898, 37887, 37884, 37900, 37878, 37905, 37894, 38366, 38368, 38367, {f:2, c:38702}, 38841, 38843, {f:2, c:38909}, 39008, {f:2, c:39010}, 39007, {f:2, c:39105}, 39248, 39246, 39257, 39244, 39243, 39251, 39474, 39476, 39473, 39468, 39466, 39478, 39465, 39470, 39480, 39469, 39623, 39626, 39622, 39696, 39698, 39697, 39947, 39944, 39927, 39941, 39954, 39928, 4E4, 39943, 39950, 39942, 39959, 39956, 39945, 40351, 40345, 40356, 40349, 40338, 40344, 40336, 40347, 40352, 40340, 40348, 40362, 40343, 
  40353, 40346, 40354, 40360, 40350, 40355, 40383, 40361, 40342, {f:2, c:40358}, 40601, 40603, 40602, 40677, 40676, 40679, 40678, 40752, 40750, 40795, 40800, 40798, 40797, 40793, 40849, 20794, 20793, 21144, 21143, 22211, {f:2, c:22205}, 23368, 23367, 24011, 24015, 24305, 25085, 25883, 27394, 27388, 27395, 27384, 27392, {f:2, c:28739}, 28746, {f:2, c:28744}, {f:2, c:28741}, 29213, 29210, 29209, 29566, 29975, 30314, 30672, 31021, 31025, 31023, 31828, 31827, 31986, 32394, [32391, 60229], 32392, 32395, 
  32390, 32397, 32589, 32699, 32816, 33245, 34328, 34346, 34342, 34335, 34339, 34332, 34329, 34343, 34350, 34337, 34336, 34345, 34334, 34341, 34857, 34845, 34843, 34848, 34852, 34844, 34859, 34890, 35181, 35177, 35182, 35179, 35322, 35705, 35704, 35653, {f:2, c:35706}, 36112, 36116, 36271, 36494, 36492, 36702, 36699, 36701, 37190, {f:2, c:37188}, 37305, 37951, 37947, 37942, 37929, 37949, 37936, 37945, 37930, 37943, 37932, 37952, 37937, 38373, 38372, 38371, 38709, 38714, 38847, 38881, 39012, 39113, 
  39110, 39104, 39256, 39254, 39481, 39485, 39494, 39492, 39490, 39489, 39482, 39487, 39629, 39701, {f:2, c:39703}, 39702, 39738, 39762, 39979, 39965, 39964, 39980, 39971, {f:2, c:39976}, 39972, 39969, 40375, 40374, 40380, 40385, 40391, 40394, 40399, 40382, 40389, 40387, 40379, 40373, 40398, {f:2, c:40377}, 40364, 40392, 40369, 40365, 40396, 40371, 40397, 40370, 40570, 40604, 40683, 40686, 40685, 40731, 40728, 40730, 40753, 40782, 40805, 40804, 40850, 20153, 22214, 22213, 22219, 22897, {f:2, c:23371}, 
  24021, 24017, 24306, 25889, 25888, 25894, 25890, 27403, {f:2, c:27400}, 27661, {f:3, c:28757}, 28754, {f:2, c:29214}, 29353, 29567, 29912, 29909, 29913, 29911, 30317, 30381, 31029, 31156, {f:2, c:31344}, 31831, 31836, 31833, 31835, 31834, 31988, 31985, 32401, 32591, 32647, 33246, 33387, {f:2, c:34356}, 34355, 34348, 34354, 34358, 34860, 34856, 34854, 34858, 34853, 35185, 35263, 35262, 35323, 35710, 35716, 35714, 35718, 35717, 35711, 36117, 36501, 36500, 36506, 36498, 36496, {f:2, c:36502}, 36704, 
  36706, 37191, 37964, 37968, {f:2, c:37962}, 37967, 37959, 37957, {f:2, c:37960}, 37958, 38719, 38883, 39018, 39017, 39115, 39252, 39259, 39502, {f:2, c:39507}, 39500, 39503, 39496, 39498, 39497, 39506, 39504, 39632, 39705, 39723, 39739, 39766, 39765, 40006, 40008, 39999, 40004, 39993, 39987, 40001, 39996, 39991, 39988, 39986, 39997, 39990, 40411, 40402, 40414, 40410, 40395, 40400, 40412, 40401, 40415, 40425, 40409, 40408, 40406, 40437, 40405, 40413, 40630, 40688, 40757, 40755, 40754, 40770, 40811, 
  40853, 40866, 20797, 21145, 22760, 22759, 22898, 23373, 24024, 34863, 24399, 25089, {f:2, c:25091}, 25897, 25893, 26006, 26347, {f:2, c:27409}, 27407, 27594, 28763, 28762, 29218, 29570, 29569, 29571, 30320, 30676, 31847, 31846, 32405, 33388, 34362, 34368, 34361, 34364, 34353, 34363, 34366, 34864, 34866, 34862, 34867, 35190, 35188, 35187, 35326, 35724, 35726, 35723, 35720, 35909, 36121, 36504, 36708, 36707, 37308, 37986, 37973, 37981, 37975, 37982, {f:2, c:38852}, 38912, 39510, 39513, {f:3, c:39710}, 
  40018, 40024, 40016, 40010, 40013, 40011, 40021, 40025, 40012, 40014, 40443, 40439, 40431, 40419, 40427, 40440, 40420, 40438, 40417, 40430, 40422, 40434, [40432, 60370], 40418, 40428, 40436, 40435, 40424, 40429, 40642, 40656, {f:2, c:40690}, 40710, 40732, 40760, 40759, 40758, 40771, 40783, 40817, 40816, {f:2, c:40814}, 22227, 22221, 23374, 23661, 25901, {f:2, c:26349}, 27411, 28767, 28769, 28765, 28768, 29219, 29915, 29925, 30677, 31032, 31159, 31158, 31850, 32407, 32649, 33389, 34371, 34872, 34871, 
  34869, 34891, {f:2, c:35732}, {f:3, c:36510}, 36509, 37310, 37309, 37314, 37995, {f:2, c:37992}, 38629, 38726, 38723, 38727, 38855, 38885, 39518, 39637, 39769, 40035, 40039, 40038, 40034, 40030, 40032, 40450, 40446, 40455, 40451, 40454, 40453, {f:2, c:40448}, 40457, 40447, 40445, 40452, 40608, 40734, 40774, {f:3, c:40820}, 22228, 25902, 26040, {f:2, c:27416}, 27415, 27418, 28770, 29222, 29354, {f:2, c:30680}, 31033, 31849, 31851, 31990, 32410, 32408, 32411, 32409, {f:2, c:33248}, {f:3, c:34374}, 
  {f:2, c:35193}, 35196, 35195, 35327, {f:2, c:35736}, 36517, 36516, 36515, 37998, 37997, 37999, 38001, 38003, 38729, 39026, 39263, 40040, 40046, 40045, 40459, 40461, 40464, 40463, 40466, 40465, 40609, 40693, 40713, 40775, 40824, 40827, 40826, 40825, 22302, 28774, 31855, 34876, 36274, 36518, 37315, 38004, 38008, 38006, 38005, 39520, [39726, 60830], 40052, 40051, 40049, 40053, 40468, 40467, 40694, 40714, 40868, 28776, 28773, 31991, 34410, 34878, 34877, 34879, 35742, 35996, 36521, 36553, 38731, {f:2, 
  c:39027}, 39116, 39265, 39339, 39524, {f:2, c:39526}, 39716, 40469, 40471, 40776, 25095, 27422, 29223, 34380, 36520, 38018, {f:2, c:38016}, 39529, 39528, 40473, 34379, 35743, 38019, 40057, 40631, 30325, 39531, 40058, 40477, {f:2, c:28777}, 29225, 40612, 40830, 40777, 40856, {s:97}, 65075, 0, 65076, 65103, [168, 776, 63208], [710, 63209, 65342], [12541, 63210], [12542, 63211], [12445, 63212], [12446, 63213], 0, [12293, 63216], [12294, 63217], [12295, 63218], [12540, 63219], [63220, 65339], [63221, 
  65341], [10045, 63222], [12353, 63223], [12354, 63224], [12355, 63225], [12356, 63226], [12357, 63227], [12358, 63228], [12359, 63229], [12360, 63230], [12361, 63231], [12362, 63232], [12363, 63233], [12364, 63234], [12365, 63235], [12366, 63236], [12367, 63237], [12368, 63238], [12369, 63239], [12370, 63240], [12371, 63241], [12372, 63242], [12373, 63243], [12374, 63244], [12375, 63245], [12376, 63246], [12377, 63247], [12378, 63248], [12379, 63249], [12380, 63250], [12381, 63251], [12382, 63252], 
  [12383, 63253], [12384, 63254], [12385, 63255], [12386, 63256], [12387, 63257], [12388, 63258], [12389, 63259], [12390, 63260], [12391, 63261], [12392, 63262], [12393, 63263], [12394, 63264], [12395, 63265], [12396, 63266], [12397, 63267], [12398, 63268], [12399, 63269], [12400, 63270], [12401, 63271], [12402, 63272], [12403, 63273], [12404, 63274], [12405, 63275], [12406, 63276], [12407, 63277], [12408, 63278], [12409, 63279], [12410, 63280], [12411, 63281], [12412, 63282], [12413, 63283], [12414, 
  63284], [12415, 63285], [12416, 63286], [12417, 63287], [12418, 63288], [12419, 63289], [12420, 63290], [12421, 63291], [12422, 63292], [12423, 63293], [12424, 63294], [12425, 63295], [12426, 63296], [12427, 63297], [12428, 63298], [12429, 63299], [12430, 63300], [12431, 63301], [12432, 63302], [12433, 63303], [12434, 63304], [12435, 63305], [12449, 63306], [12450, 63307], [12451, 63308], [12452, 63309], [12453, 63310], [12454, 63311], [12455, 63312], [12456, 63313], [12457, 63314], [12458, 63315], 
  [12459, 63316], [12460, 63317], [12461, 63318], [12462, 63319], [12463, 63320], [12464, 63321], [12465, 63322], [12466, 63323], [12467, 63324], [12468, 63325], [12469, 63326], [12470, 63327], [12471, 63328], [12472, 63329], [12473, 63330], [12474, 63331], [12475, 63332], [12476, 63333], [12477, 63334], [12478, 63335], [12479, 63336], [12480, 63337], [12481, 63338], [12482, 63339], [12483, 63340], [12484, 63341], [12485, 63342], [12486, 63343], [12487, 63344], [12488, 63345], [12489, 63346], [12490, 
  63347], [12491, 63348], [12492, 63349], [12493, 63350], [12494, 63351], [12495, 63352], [12496, 63353], [12497, 63354], [12498, 63355], [12499, 63356], [12500, 63357], [12501, 63358], [12502, 63359], [12503, 63360], [12504, 63361], [12505, 63362], [12506, 63363], [12507, 63364], [12508, 63365], [12509, 63366], [12510, 63367], [12511, 63368], [12512, 63369], [12513, 63370], [12514, 63371], [12515, 63372], [12516, 63373], [12517, 63374], [12518, 63375], [12519, 63376], [12520, 63377], [12521, 63378], 
  [12522, 63379], [12523, 63380], [12524, 63381], [12525, 63382], [12526, 63383], [12527, 63384], [12528, 63385], [12529, 63386], [12530, 63387], [12531, 63388], [12532, 63389], [12533, 63390], [12534, 63391], [1040, 63392], [1041, 63393], [1042, 63394], [1043, 63395], [1044, 63396], [1045, 63397], [1025, 63398], [1046, 63399], [1047, 63400], [1048, 63401], [1049, 63402], [1050, 63403], [1051, 63404], [1052, 63405], [1053, 63406], [1054, 63407], [1055, 63408], [1056, 63409], [1057, 63410], [1058, 
  63411], [1059, 63412], [1060, 63413], [1061, 63414], [1062, 63415], [1063, 63416], [1064, 63417], [1065, 63418], [1066, 63419], [1067, 63420], [1068, 63421], [1069, 63422], [1070, 63423], [1071, 63424], [1072, 63425], [1073, 63426], [1074, 63427], [1075, 63428], [1076, 63429], [1077, 63430], [1105, 63431], [1078, 63432], [1079, 63433], [1080, 63434], [1081, 63435], [1082, 63436], [1083, 63437], [1084, 63438], [1085, 63439], [1086, 63440], [1087, 63441], [1088, 63442], [1089, 63443], [1090, 63444], 
  [1091, 63445], [1092, 63446], [1093, 63447], [1094, 63448], [1095, 63449], [1096, 63450], [1097, 63451], [1098, 63452], [1099, 63453], [1100, 63454], [1101, 63455], [1102, 63456], [1103, 63457], [8679, 63458], [8632, 63459], [8633, 63460], [20033, 63461], [63462, 131276], [20058, 63463], [63464, 131210], [20994, 63465], [17553, 63466], 63467, [20872, 63468], [13853, 63469], [63470, 161287], {s:40}, [172, 63511, 65506], [63512, 65508], [63513, 65287], [63514, 65282], [12849, 63515], [8470, 63516], 
  [8481, 63517], 30849, [37561, 58501], 35023, 22715, 24658, 31911, 23290, 9556, 9574, 9559, 9568, 9580, 9571, 9562, 9577, 9565, 9554, 9572, 9557, {s:3}, 9560, 9575, 9563, 9555, 9573, 9558, 9567, 9579, 9570, 9561, 9576, 9564, 9553, {s:5}, 9619, {s:26}, [58129, 147159], [22462, 58130], [58131, 159443], [28990, 58132], [58133, 153568], [27042, 58135], [58136, 166889], [23412, 58137], [31305, 58138], [58139, 153825], [58140, 169177], [31333, 58141], [31357, 58142], [58143, 154028], [31419, 58144], [31408, 
  58145], [31426, 58146], [31427, 58147], [29137, 58148], [58149, 156813], [16842, 58150], [31450, 58151], [31453, 58152], [31466, 58153], [16879, 58154], [21682, 58155], [58156, 154625], [31499, 58157], [31573, 58158], [31529, 58159], [58160, 152334], [58161, 154878], [31650, 58162], [31599, 58163], [33692, 58164], [58165, 154548], [58166, 158847], [31696, 58167], [33825, 58168], [31634, 58169], 0, [58171, 154912], 0, [33938, 58174], [31738, 58175], 0, [31797, 58177], [58178, 154817], [31812, 58179], 
  [31875, 58180], [58181, 149634], [31910, 58182], [58184, 148856], [31945, 58185], [31943, 58186], [31974, 58187], 0, [31987, 58189], [31989, 58190], [32359, 58192], [17693, 58193], [58194, 159300], [32093, 58195], [58196, 159446], [32137, 58198], [32171, 58199], [28981, 58200], [32179, 58201], 32214, [58203, 147543], [58204, 155689], [32228, 58205], [15635, 58206], [32245, 58207], [58208, 137209], [32229, 58209], [58210, 164717], 0, [58212, 155937], [58213, 155994], [32366, 58214], 0, [17195, 58216], 
  [37996, 58217], [32295, 58218], [32576, 58219], [32577, 58220], [32583, 58221], [31030, 58222], [58223, 156368], [39393, 58224], [32663, 58225], [58226, 156497], [32675, 58227], [58228, 136801], [58229, 131176], [17756, 58230], [58231, 145254], [58233, 164666], [32762, 58234], [58235, 156809], 0, [32776, 58237], [32797, 58238], 0, [32815, 58240], [58241, 172167], [58242, 158915], [32827, 58243], [32828, 58244], [32865, 58245], [58246, 141076], [18825, 58247], [58248, 157222], [58249, 146915], [58250, 
  157416], [26405, 58251], [32935, 58252], [58253, 166472], [33031, 58254], [33050, 58255], [22704, 58256], [58257, 141046], [27775, 58258], [58259, 156824], [25831, 58261], [58262, 136330], [33304, 58263], [58264, 137310], [27219, 58265], [58266, 150117], [58267, 150165], [17530, 58268], [33321, 58269], [58271, 158290], [58272, 146814], [20473, 58273], [58274, 136445], [34018, 58275], [33634, 58276], 0, [58278, 149927], [58279, 144688], [58280, 137075], [58281, 146936], [33450, 58282], [26907, 58283], 
  [58284, 194964], [16859, 58285], [34123, 58286], [33488, 58287], [33562, 58288], [58289, 134678], [58290, 137140], [14017, 58291], [58292, 143741], [58293, 144730], [33403, 58294], [33506, 58295], [33560, 58296], [58297, 147083], [58298, 159139], [58299, 158469], [58300, 158615], [58301, 144846], [15807, 58302], [33565, 58303], [21996, 58304], [33669, 58305], [17675, 58306], [58307, 159141], [33708, 58308], 0, [33747, 58310], [58312, 159444], [27223, 58313], [34138, 58314], [13462, 58315], [58316, 
  159298], [33880, 58318], [58319, 154596], [33905, 58320], [15827, 58321], [17636, 58322], [27303, 58323], [33866, 58324], [31064, 58326], 0, [58328, 158614], [58329, 159351], [58330, 159299], [34014, 58331], 0, [33681, 58333], [17568, 58334], [33939, 58335], [34020, 58336], [58337, 154769], [16960, 58338], [58339, 154816], [17731, 58340], [34100, 58341], [23282, 58342], 0, [17703, 58344], [34163, 58345], [17686, 58346], [26559, 58347], [34326, 58348], [58349, 165413], [58350, 165435], [34241, 58351], 
  [58352, 159880], [34306, 58353], [58354, 136578], [58355, 159949], [58356, 194994], [17770, 58357], [34344, 58358], [13896, 58359], [58360, 137378], [21495, 58361], [58362, 160666], [34430, 58363], 0, [58365, 172280], [34798, 58366], [58367, 142375], [34737, 58368], [34778, 58369], [34831, 58370, 60990], [22113, 58371], [34412, 58372], [26710, 58373], [17935, 58374], [34885, 58375], [34886, 58376], [58377, 161248], [58378, 146873], [58379, 161252], [34910, 58380], [34972, 58381], [18011, 58382], 
  [34996, 58383], [34997, 58384], [35013, 58386], [58388, 161551], [35207, 58389], {s:3}, [35239, 58393], [35260, 58394], [58395, 166437], [35303, 58396], [58397, 162084], [58398, 162493], [35484, 58399], [30611, 58400], [37374, 58401], [35472, 58402], [58403, 162393], [31465, 58404], [58405, 162618], [18195, 58407], [58408, 162616], [29052, 58409], [35596, 58410], [35615, 58411], [58412, 152624], [58413, 152933], [35647, 58414], 0, [35661, 58416], [35497, 58417], [58418, 150138], [35728, 58419], 
  [35739, 58420], [35503, 58421], [58422, 136927], [17941, 58423], [34895, 58424], [35995, 58425], [58426, 163156], [58427, 163215], [58428, 195028], [14117, 58429], [58430, 163155], [36054, 58431], [58432, 163224], [58433, 163261], [36114, 58434], [36099, 58435], [58436, 137488], [36059, 58437], [28764, 58438], [36113, 58439], [16080, 58441], 0, [36265, 58443], [58444, 163842], [58445, 135188], [58446, 149898], [15228, 58447], [58448, 164284], [58449, 160012], [31463, 58450], [36525, 58451], [36534, 
  58452], [36547, 58453], [37588, 58454], [36633, 58455], [36653, 58456], [58457, 164709], [58458, 164882], [36773, 58459], [37635, 58460], [58461, 172703], [58462, 133712], [36787, 58463], 0, [58465, 166366], [58466, 165181], [58467, 146875], [24312, 58468], [58469, 143970], [36857, 58470], 0, [58474, 140069], [14720, 58475], [58476, 159447], [36919, 58477], [58478, 165180], [58479, 162494], [36961, 58480], [58481, 165228], [58482, 165387], [37032, 58483], [58484, 165651], [37060, 58485], [58486, 
  165606], [37038, 58487], 0, [37223, 58489], [37289, 58491], [37316, 58492], [31916, 58493], [58494, 166195], [58495, 138889], [37390, 58496], [27807, 58497], [37441, 58498], [37474, 58499], [58500, 153017], [58502, 166598], [58503, 146587], [58504, 166668], [58505, 153051], [58506, 134449], [37676, 58507], [37739, 58508], [58509, 166625], [58510, 166891], [23235, 58512], [58513, 166626], [58514, 166629], [18789, 58515], [37444, 58516], [58517, 166892], [58518, 166969], [58519, 166911], [37747, 
  58520], [37979, 58521], [36540, 58522], [38277, 58523], [38310, 58524], [37926, 58525], [38304, 58526], [28662, 58527], [17081, 58528], [58530, 165592], [58531, 135804], [58532, 146990], [18911, 58533], [27676, 58534], [38523, 58535], [38550, 58536], [16748, 58537], [38563, 58538], [58539, 159445], [25050, 58540], 58541, [30965, 58542], [58543, 166624], [38589, 58544], [21452, 58545], [18849, 58546], [58547, 158904], [58548, 131700], [58549, 156688], [58550, 168111], [58551, 168165], [58552, 150225], 
  [58553, 137493], [58554, 144138], [38705, 58555], [34370, 58556], [38710, 58557], [18959, 58558], [17725, 58559], [17797, 58560], [58561, 150249], [28789, 58562], [23361, 58563], [38683, 58564], 0, [58566, 168405], [38743, 58567], [23370, 58568], [58569, 168427], [38751, 58570], [37925, 58571], [20688, 58572], [58573, 143543], [58574, 143548], [38793, 58575], [38815, 58576], [38833, 58577], [38846, 58578], [38848, 58579], [38866, 58580], [38880, 58581], [58582, 152684], [38894, 58583], [29724, 
  58584], [58585, 169011], 0, [38901, 58587], [58588, 168989], [58589, 162170], [19153, 58590], [38964, 58591], [38963, 58592], [38987, 58593], [39014, 58594], [15118, 58595], [58596, 160117], [15697, 58597], [58598, 132656], [58599, 147804], [58600, 153350], [39114, 58601], [39095, 58602], [39112, 58603], [39111, 58604], [19199, 58605], [58606, 159015], [58607, 136915], [21936, 58608], [39137, 58609], [39142, 58610], [39148, 58611], [37752, 58612], [39225, 58613], [58614, 150057], [19314, 58615], 
  [58616, 170071], [58617, 170245], [39413, 58618], [39436, 58619], [39483, 58620], [39440, 58621], [39512, 58622], [58623, 153381], [14020, 58624], [58625, 168113], [58626, 170965], [39648, 58627], [39650, 58628], [58629, 170757], [39668, 58630], [19470, 58631], [39700, 58632], [39725, 58633], [58634, 165376], [20532, 58635], [39732, 58636], [14531, 58638], [58639, 143485], [39760, 58640], [39744, 58641], [58642, 171326], [23109, 58643], [58644, 137315], [39822, 58645], [39938, 58647], [39935, 58648], 
  [39948, 58649], [58650, 171624], [40404, 58651], [58652, 171959], [58653, 172434], [58654, 172459], [58655, 172257], [58656, 172323], [58657, 172511], [40318, 58658], [40323, 58659], [58660, 172340], [40462, 58661], [40388, 58663], [58665, 172435], [58666, 172576], [58667, 137531], [58668, 172595], [40249, 58669], [58670, 172217], [58671, 172724], [40592, 58672], [40597, 58673], [40606, 58674], [40610, 58675], [19764, 58676], [40618, 58677], [40623, 58678], [58679, 148324], [40641, 58680], [15200, 
  58681], [14821, 58682], [15645, 58683], [20274, 58684], [14270, 58685], [58686, 166955], [40706, 58687], [40712, 58688], [19350, 58689], [37924, 58690], [58691, 159138], [40727, 58692, 60836], 0, [40761, 58694], [22175, 58695], [22154, 58696], [40773, 58697], [39352, 58698], [58699, 168075], [38898, 58700], [33919, 58701], 0, [40809, 58703], [31452, 58704], [40846, 58705], [29206, 58706], [19390, 58707], [58708, 149877], [58709, 149947], [29047, 58710], [58711, 150008], [58712, 148296], [58713, 
  150097], [29598, 58714], [58715, 166874], [58716, 137466], [31135, 58717], [58718, 166270], [58719, 167478], [37737, 58720], [37875, 58721], [58722, 166468], [37612, 58723], [37761, 58724], [37835, 58725], [58726, 166252], [58727, 148665], [29207, 58728], [16107, 58729], [30578, 58730], [31299, 58731], [28880, 58732], [58733, 148595], [58734, 148472], [29054, 58735], [58736, 137199], [28835, 58737], [58738, 137406], [58739, 144793], [16071, 58740], [58741, 137349], [58742, 152623], [58743, 137208], 
  [14114, 58744], [58745, 136955], [58746, 137273], [14049, 58747], [58748, 137076], [58749, 137425], [58750, 155467], [14115, 58751], [58752, 136896], [22363, 58753], [58754, 150053], [58755, 136190], [58756, 135848], [58757, 136134], [58758, 136374], [34051, 58759, 58761], [58760, 145062], 0, [33877, 58762], [58763, 149908], [58764, 160101], [58765, 146993], [58766, 152924], [58767, 147195], [58768, 159826], [17652, 58769], [58770, 145134], [58771, 170397], [58772, 159526], [26617, 58773], [14131, 
  58774], [15381, 58775], [15847, 58776], [22636, 58777], [58778, 137506], [26640, 58779], [16471, 58780], [58781, 145215], [58782, 147681], [58783, 147595], [58784, 147727], [58785, 158753], [21707, 58786], [22174, 58787], [58788, 157361], [22162, 58789], [58790, 135135], [58791, 134056], [58792, 134669], 0, [58794, 166675], [37788, 58795], [20216, 58796], [20779, 58797], [14361, 58798], [58799, 148534], [20156, 58800], [58801, 132197], 0, [20299, 58803], [20362, 58804], [58805, 153169], [23144, 
  58806], [58807, 131499], [58808, 132043], [14745, 58809], [58810, 131850], [58811, 132116], [13365, 58812], [20265, 58813], [58814, 131776], [58815, 167603], [58816, 131701], [35546, 58817], [58818, 131596], [20120, 58819], [20685, 58820], [20749, 58821], [20386, 58822], [20227, 58823], [58824, 150030], [58825, 147082], [20290, 58826], [20526, 58827], [20588, 58828], [20609, 58829], [20428, 58830], [20453, 58831], [20568, 58832], [20732, 58833], [28278, 58838], [58839, 144789], [58840, 147001], 
  [58841, 147135], [28018, 58842], [58843, 137348], [58844, 147081], [20904, 58845], [20931, 58846], [58847, 132576], [17629, 58848], [58849, 132259], [58850, 132242], [58851, 132241], [36218, 58852], [58853, 166556], [58854, 132878], [21081, 58855], [21156, 58856], [58857, 133235], [21217, 58858], 0, [18042, 58860], [29068, 58861], [58862, 148364], [58863, 134176], [58864, 149932], [58865, 135396], [27089, 58866], [58867, 134685], 0, [16094, 58869], [29849, 58870], [29716, 58871], [29782, 58872], 
  [29592, 58873], [19342, 58874], [58875, 150204], [58876, 147597], [21456, 58877], [13700, 58878], [29199, 58879], [58880, 147657], [21940, 58881], [58882, 131909], [21709, 58883], [58884, 134086], [22301, 58885], [37469, 58886], [38644, 58887], [22493, 58889], [22413, 58890], [22399, 58891], [13886, 58892], [22731, 58893], [23193, 58894], [58895, 166470], [58896, 136954], [58897, 137071], [58898, 136976], [23084, 58899], [22968, 58900], [23166, 58902], [23247, 58903], [23058, 58904], [58905, 153926], 
  [58906, 137715], [58907, 137313], [58908, 148117], [14069, 58909], [27909, 58910], [29763, 58911], [23073, 58912], [58913, 155267], [23169, 58914], [58915, 166871], [58916, 132115], [37856, 58917], [29836, 58918], [58919, 135939], [28933, 58920], [18802, 58921], [37896, 58922], [58923, 166395], [37821, 58924], [14240, 58925], [23582, 58926], [23710, 58927], [24158, 58928], [24136, 58929], [58930, 137622], [58931, 137596], [58932, 146158], [24269, 58933], [23375, 58934], [58935, 137475], [58936, 
  137476], [14081, 58937], [58938, 137376], [14045, 58939], [58940, 136958], [14035, 58941], [33066, 58942], [58943, 166471], [58944, 138682], [58945, 144498], [58946, 166312], [24332, 58947, 60916], [24334, 58948], [58949, 137511], [58950, 137131], [23147, 58951], [58952, 137019], [23364, 58953], [58955, 161277], [34912, 58956], [24702, 58957], [58958, 141408], [58959, 140843], [24539, 58960], [16056, 58961], [58962, 140719], [58963, 140734], [58964, 168072], [58965, 159603], [25024, 58966], [58967, 
  131134], [58968, 131142], [58969, 140827], [24985, 58970], [24984, 58971], [24693, 58972], [58973, 142491], [58974, 142599], [58975, 149204], [58976, 168269], [25713, 58977], [58978, 149093], [58979, 142186], [14889, 58980], [58981, 142114], [58982, 144464], [58983, 170218], [58984, 142968], [25399, 58985], [25782, 58987], [25393, 58988], [25553, 58989], [58990, 149987], [58991, 142695], [25252, 58992], [58993, 142497], [25659, 58994], [25963, 58995], [26994, 58996], [15348, 58997], [58998, 143502], 
  [58999, 144045], [59E3, 149897], [59001, 144043], [21773, 59002], [59003, 144096], [59004, 137433], [59005, 169023], [26318, 59006], [59007, 144009], [59008, 143795], [15072, 59009], [59011, 152964], [59012, 166690], [59013, 152975], [59014, 136956], [59015, 152923], [59016, 152613], [30958, 59017], [59018, 143619], [59019, 137258], [59020, 143924], [13412, 59021], [59022, 143887], [59023, 143746], [59024, 148169], [26254, 59025], [59026, 159012], [26219, 59027], [19347, 59028], [26160, 59029], 
  [59030, 161904], [59031, 138731], [26211, 59032], [59033, 144082], [59034, 144097], [26142, 59035], [59036, 153714], [14545, 59037], [59038, 145466], [59039, 145340], [15257, 59040], [59041, 145314], [59042, 144382], [29904, 59043], [15254, 59044], [59046, 149034], [26806, 59047], 0, [15300, 59049], [27326, 59050], [59052, 145365], [59053, 148615], [27187, 59054], [27218, 59055], [27337, 59056], [27397, 59057], [59058, 137490], [25873, 59059], [26776, 59060], [27212, 59061], [15319, 59062], [27258, 
  59063], [27479, 59064], [59065, 147392], [59066, 146586], [37792, 59067], [37618, 59068], [59069, 166890], [59070, 166603], [37513, 59071], [59072, 163870], [59073, 166364], [37991, 59074], [28069, 59075], [28427, 59076], 0, [59079, 147327], [15759, 59080], [28164, 59081], [59082, 147516], [23101, 59083], [28170, 59084], [22599, 59085], [27940, 59086], [30786, 59087], [28987, 59088], [59089, 148250], [59090, 148086], [28913, 59091], [29264, 59092, 61085], [29319, 59093], [29332, 59094], [59095, 
  149391], [59096, 149285], [20857, 59097], [59098, 150180], [59099, 132587], [29818, 59100], [59101, 147192], [59102, 144991], [59103, 150090], [59104, 149783], [59105, 155617], [16134, 59106], [16049, 59107], [59108, 150239], [59109, 166947], [59110, 147253], [24743, 59111], [16115, 59112], [29900, 59113], [29756, 59114], [37767, 59115], [29751, 59116], [17567, 59117], [59118, 159210], [17745, 59119], [30083, 59120], [16227, 59121], [59122, 150745], [59123, 150790], [16216, 59124], [30037, 59125], 
  [30323, 59126], [59127, 173510], 0, [29800, 59129, 61070], [59130, 166604], [59131, 149931], [59132, 149902], [15099, 59133], [15821, 59134], [59135, 150094], [16127, 59136], [59137, 149957], [59138, 149747], [37370, 59139], [22322, 59140], [37698, 59141], [59142, 166627], [59143, 137316], [20703, 59144], [59145, 152097], [59146, 152039], [30584, 59147], [59148, 143922], [30478, 59149], [30479, 59150], [30587, 59151], [59152, 149143], [59153, 145281], [14942, 59154], [59155, 149744], [29752, 59156], 
  [29851, 59157], [16063, 59158], [59159, 150202], [59160, 150215], [16584, 59161], [59162, 150166], [59163, 156078], [37639, 59164], [59165, 152961], [30750, 59166], [30861, 59167], [30856, 59168], [30930, 59169], [29648, 59170], [31065, 59171], [59172, 161601], [59173, 153315], [16654, 59174], 0, 0, [31141, 59177], [27181, 59178], [59179, 147194], [31290, 59180], [31220, 59181], [16750, 59182], [59183, 136934], [16690, 59184], [37429, 59185], [31217, 59186], [59187, 134476], [59188, 149900], [59189, 
  131737], [59190, 146874], [59191, 137070], [13719, 59192], [21867, 59193], [13680, 59194], [13994, 59195], [59196, 131540], [59197, 134157], [31458, 59198], [23129, 59199], [59200, 141045], [59201, 154287], [59202, 154268], [23053, 59203], [59204, 131675], [30960, 59205], [23082, 59206], [59207, 154566], [31486, 59208], [16889, 59209], [31837, 59210], [31853, 59211], [16913, 59212], [59213, 154547], [59214, 155324], [59215, 155302], [31949, 59216], [59217, 150009], [59218, 137136], [31886, 59219], 
  [31868, 59220], [31918, 59221], [27314, 59222], [32220, 59223], [32263, 59224], [32211, 59225], [32590, 59226], [59227, 156257], [59228, 155996], [59229, 162632], [32151, 59230], [59231, 155266], [17002, 59232], [59233, 158581], [59234, 133398], [26582, 59235], [59236, 131150], [59237, 144847], [22468, 59238], [59239, 156690], [59240, 156664], [32733, 59242], [31527, 59243], [59244, 133164], [59245, 154345], [59246, 154947], [31500, 59247], [59248, 155150], [39398, 59249], [34373, 59250], [39523, 
  59251], [27164, 59252], [59253, 144447], [59255, 150007], [59256, 157101], [39455, 59257], [59258, 157088], 0, [59260, 160039], [59261, 158929], [17642, 59262], [33079, 59263], [17410, 59264], [32966, 59265], [33033, 59266], [33090, 59267], [59268, 157620], [39107, 59269], [59270, 158274], [33378, 59271], [33381, 59272], [59273, 158289], [33875, 59274], [59275, 159143], [34320, 59276], [59277, 160283], [23174, 59278], [16767, 59279], [59280, 137280], [23339, 59281], [59282, 137377], [23268, 59283], 
  [59284, 137432], [34464, 59285], [59286, 195004], [59287, 146831], [34861, 59288], [59289, 160802], [23042, 59290], [34926, 59291], [20293, 59292], [34951, 59293], [35007, 59294], [35046, 59295], [35173, 59296], [35149, 59297], [59298, 153219], [35156, 59299], [59300, 161669], [59301, 161668], [59302, 166901], [59303, 166873], [59304, 166812], [59305, 166393], [16045, 59306], [33955, 59307], [18165, 59308], [18127, 59309], [14322, 59310], [35389, 59311], [35356, 59312], [59313, 169032], [24397, 
  59314], [37419, 59315], [59316, 148100], [26068, 59317], [28969, 59318], [28868, 59319], [59320, 137285], [40301, 59321], [35999, 59322], [36073, 59323], [59324, 163292], [22938, 59325], [30659, 59326], [23024, 59327], [14036, 59329], [36394, 59330], [36519, 59331], [59332, 150537], [36656, 59333], [36682, 59334], [17140, 59335], [27736, 59336], [28603, 59337], [59338, 140065], [18587, 59339], [28537, 59340], [28299, 59341], [59342, 137178], [39913, 59343], [14005, 59344], [59345, 149807], [37051, 
  59346], 0, [21873, 59348], [18694, 59349], [37307, 59350], [37892, 59351], [59352, 166475], [16482, 59353], [59354, 166652], [37927, 59355], [59356, 166941], [59357, 166971], [34021, 59358], [35371, 59359], [38297, 59360], [38311, 59361], [38295, 59362], [38294, 59363], [59364, 167220], [29765, 59365], [16066, 59366], [59367, 149759], [59368, 150082], [59369, 148458], [16103, 59370], [59371, 143909], [38543, 59372], [59373, 167655], [59374, 167526], [59375, 167525], [16076, 59376], [59377, 149997], 
  [59378, 150136], [59379, 147438], [29714, 59380], [29803, 59381], [16124, 59382], [38721, 59383], [59384, 168112], [26695, 59385], [18973, 59386], [59387, 168083], [59388, 153567], 0, [37736, 59390], [59391, 166281], [59392, 166950], [59393, 166703], [59394, 156606], [37562, 59395], [23313, 59396], [35689, 59397], [18748, 59398], [29689, 59399], [59400, 147995], [38811, 59401], 0, [39224, 59403], [59404, 134950], [24001, 59405], [59406, 166853], [59407, 150194], [38943, 59408], [59409, 169178], 
  [37622, 59410], [59411, 169431], [37349, 59412], [17600, 59413], [59414, 166736], [59415, 150119], [59416, 166756], [39132, 59417], [59418, 166469], [16128, 59419], [37418, 59420], [18725, 59421], [33812, 59422], [39227, 59423], [39245, 59424], [59425, 162566], [15869, 59426], 0, [19311, 59428], [39338, 59429], [39516, 59430], [59431, 166757], [59432, 153800], [27279, 59433], [39457, 59434], [23294, 59435], [39471, 59436], [59437, 170225], [19344, 59438], [59439, 170312], [39356, 59440], [19389, 
  59441], [19351, 59442], [37757, 59443], [22642, 59444], [59445, 135938], [22562, 59446], [59447, 149944], [59448, 136424], [30788, 59449], [59450, 141087], [59451, 146872], [26821, 59452], [15741, 59453], [37976, 59454], [14631, 59455], [24912, 59456], [59457, 141185], [59458, 141675], [24839, 59459], [40015, 59460], [40019, 59461], [40059, 59462], [39989, 59463], [39952, 59464], [39807, 59465], [39887, 59466], [59467, 171565], [39839, 59468], [59469, 172533], [59470, 172286], [40225, 59471], [19630, 
  59472], [59473, 147716], [40472, 59474], [19632, 59475], [40204, 59476], [59477, 172468], [59478, 172269], [59479, 172275], [59480, 170287], [40357, 59481], [33981, 59482], [59483, 159250], [59484, 159711], [59485, 158594], [34300, 59486], [17715, 59487], [59488, 159140], [59489, 159364], [59490, 159216], [33824, 59491], [34286, 59492], [59493, 159232], [59494, 145367], [59495, 155748], [31202, 59496], [59497, 144796], [59498, 144960], [59500, 149982], [15714, 59501], [37851, 59502], [37566, 59503], 
  [37704, 59504], [59505, 131775], [30905, 59506], [37495, 59507], [37965, 59508], [20452, 59509], [13376, 59510], [36964, 59511], [59512, 152925], [30781, 59513], [30804, 59514], [30902, 59515], [30795, 59516], [59517, 137047], [59518, 143817], [59519, 149825], [13978, 59520], [20338, 59521], [28634, 59522], [28633, 59523], 0, [28702, 59524, 59525], [21524, 59526], [59527, 147893], [22459, 59528], [22771, 59529], [22410, 59530], [40214, 59531], [22487, 59532], [28980, 59533], [13487, 59534], [59535, 
  147884], [29163, 59536], [59537, 158784], [59538, 151447], 0, [59540, 137141], [59541, 166473], [24844, 59542], [23246, 59543], [23051, 59544], [17084, 59545], [59546, 148616], [14124, 59547], [19323, 59548], [59549, 166396], [37819, 59550], [37816, 59551], [59552, 137430], [59553, 134941], [33906, 59554], [59555, 158912], [59556, 136211], [59557, 148218], [59558, 142374], [59559, 148417], [22932, 59560], [59561, 146871], [59562, 157505], [32168, 59563], [59564, 155995], [59565, 155812], [59566, 
  149945], [59567, 149899], [59568, 166394], [37605, 59569], [29666, 59570], [16105, 59571], [29876, 59572], [59573, 166755], [59574, 137375], [16097, 59575], [59576, 150195], [27352, 59577], [29683, 59578], [29691, 59579], [16086, 59580], [59581, 150078], [59582, 150164], [59583, 137177], [59584, 150118], [59585, 132007], [59586, 136228], [59587, 149989], [29768, 59588], [59589, 149782], [28837, 59590], [59591, 149878], [37508, 59592], [29670, 59593], [37727, 59594], [59595, 132350], [37681, 59596], 
  [59597, 166606], [59598, 166422], [37766, 59599], [59600, 166887], [59601, 153045], [18741, 59602], [59603, 166530], [29035, 59604], [59605, 149827], [59606, 134399], [22180, 59607], [59608, 132634], [59609, 134123], [59610, 134328], [21762, 59611], [31172, 59612], [59613, 137210], [32254, 59614], [59615, 136898], [59616, 150096], [59617, 137298], [17710, 59618], [37889, 59619], [14090, 59620], [59621, 166592], [59622, 149933], [22960, 59623], [59624, 137407], [59625, 137347], [59626, 160900], 
  [23201, 59627], [14050, 59628], [59629, 146779], [14E3, 59630], [37471, 59631], [23161, 59632], [59633, 166529], [59634, 137314], [37748, 59635], [15565, 59636], [59637, 133812], [19094, 59638], [14730, 59639], [20724, 59640], [15721, 59641], [15692, 59642], [59643, 136092], [29045, 59644], [17147, 59645], [59646, 164376], [28175, 59647], [59648, 168164], [17643, 59649], [27991, 59650], [59651, 163407], [28775, 59652], [27823, 59653], [15574, 59654], [59655, 147437], [59656, 146989], [28162, 59657], 
  [28428, 59658], [15727, 59659], [59660, 132085], [30033, 59661], [14012, 59662], [13512, 59663], [18048, 59664], [16090, 59665], [18545, 59666], [22980, 59667], [37486, 59668], [18750, 59669], [36673, 59670], [59671, 166940], [59672, 158656], [22546, 59673], [22472, 59674], [14038, 59675], [59676, 136274], [28926, 59677], [59678, 148322], [59679, 150129], [59680, 143331], [59681, 135856], [59682, 140221], [26809, 59683], [26983, 59684], [59685, 136088], [59686, 144613], [59687, 162804], [59688, 
  145119], [59689, 166531], [59690, 145366], [59691, 144378], [59692, 150687], [27162, 59693], [59694, 145069], [59695, 158903], [33854, 59696], [17631, 59697], [17614, 59698], [59699, 159014], [59700, 159057], [59701, 158850], [59702, 159710], 0, 0, [33597, 59705], [59706, 137018], [33773, 59707], [59708, 158848], [59709, 159827], [59710, 137179], [22921, 59711], [23170, 59712], [59713, 137139], [23137, 59714], [23153, 59715], [59716, 137477], [59717, 147964], [14125, 59718], [23023, 59719], [59720, 
  137020], [14023, 59721], [29070, 59722], [37776, 59723], [26266, 59724], [59725, 148133], [23150, 59726], [23083, 59727], [59728, 148115], [27179, 59729], [59730, 147193], [59731, 161590], [59732, 148571], [59733, 148170], [28957, 59734], [59735, 148057], [59736, 166369], [20400, 59737], [59738, 159016], [23746, 59739], [59740, 148686], [59741, 163405], [59742, 148413], [27148, 59743], [59744, 148054], [59745, 135940], 0, [28979, 59747], [59748, 148457], [15781, 59749], [27871, 59750], [59751, 
  194597], [23019, 59754], [24412, 59757], [59764, 144128], [31955, 59776], [59783, 162548], [59786, 153334], [59790, 162584], [36972, 59791], [33270, 59795], [30476, 59797], [27810, 59799], [22269, 59800], [22633, 59828], [26465, 59832], [23646, 59838], [22770, 59841], [28857, 59843], [26627, 59853], [36795, 59859], [36796, 59861], [20001, 59871], [31545, 59898], [15820, 59902], [29482, 57990, 59909], [30048, 59912], [22586, 59920], [33446, 59932], [27018, 59940], [24803, 59944], [20206, 59984], 
  [39364, 60002], [40639, 60023], [21249, 60025], [26528, 60038], [24808, 60046], [20916, 60053], [31363, 60064], [39994, 60075], [31432, 60093], [26906, 60098], [22956, 60100], [22592, 60102], [21610, 60114], [24807, 60123], [22138, 60125], [26965, 60132], [39983, 60133], [34725, 60134], [23584, 60141], [24075, 60143], [26398, 60147], [33965, 60157], [35713, 60161], [20088, 60166], [25283, 60176], [26709, 60180], 0, [33533, 60190], [35237, 60194], [36768, 60196], [38840, 60198], [38983, 60200], 
  [39613, 60201], [24497, 60218], [26184, 60219], [26303, 60220], [60221, 162425], 0, [60225, 149946], 0, 0, [60230, 131910], [26382, 60232], [26904, 60233], [60235, 161367], [60236, 155618], [60239, 161278], [60240, 139418], [18640, 60241], [19128, 60242], [60244, 166554], [60247, 147515], [60250, 150085], [60251, 132554], [20946, 60252], [60253, 132625], [22943, 60254], [60255, 138920], [15294, 60256], [60257, 146687], [14747, 60262], [60264, 165352], [60265, 170441], [14178, 60266], [60267, 139715], 
  [35678, 60268], [60269, 166734], 0, [29193, 60274], [60276, 134264], [60280, 132985], [36570, 60281], [21135, 60283], [29041, 60285], [60288, 147274], [60289, 150183], [21948, 60290], [60293, 158546], [13427, 60295], [60297, 161330], [18200, 60299], [60303, 149823], [20582, 60305], [13563, 60306], [60307, 144332], 0, [18300, 60310], [60311, 166216], [60315, 138640], 0, [60320, 162834], [36950, 60321], [60323, 151450], [35682, 60324], [23899, 60327], [60328, 158711], 0, [60331, 137500], [35562, 
  60332], [60333, 150006], [60335, 147439], [19392, 60337], [60340, 141083], [37989, 60341], [60342, 153569], [24981, 60343], [23079, 60344], [60345, 194765], 0, [60348, 148769], [20074, 60350], [60351, 149812], [38486, 60352], [28047, 60353], [60354, 158909], [35191, 60356], [60359, 156689], 0, [31554, 60363], [60364, 168128], [60365, 133649], 0, [31301, 60369], [39462, 60372], [13919, 60374], [60375, 156777], [60376, 131105], [31107, 60377], [23852, 60380], [60381, 144665], 0, [18128, 60384], [30011, 
  60386], [34917, 60387], [22710, 60389], [14108, 60390], [60391, 140685], [15444, 60394], [37505, 60397], [60398, 139642], [37680, 60400], [60402, 149968], [27705, 60403], [60406, 134904], [34855, 60407], [35061, 60408], [60409, 141606], [60410, 164979], [60411, 137137], [28344, 60412], [60413, 150058], [60414, 137248], [14756, 60415], 0, 0, [17727, 60419], [26294, 60420], [60421, 171181], [60422, 170148], [35139, 60423], [16607, 60427], [60428, 136714], [14753, 60429], [60430, 145199], [60431, 
  164072], [60432, 136133], [29101, 60433], [33638, 60434], [60436, 168360], 0, [19639, 60438], [60439, 159919], [60440, 166315], [60445, 147834], [31555, 60446], [31102, 60447], [28597, 60449], [60450, 172767], [27139, 60451], [60452, 164632], [21410, 60453], [60454, 159239], [37823, 60455], [26678, 60456], [38749, 59389, 60457], [60458, 164207], [60460, 158133], [60461, 136173], [60462, 143919], [23941, 60464], [60465, 166960], [22293, 60467], [38947, 60468], [60469, 166217], [23979, 60470], [60471, 
  149896], [26046, 60472], [27093, 60473], [21458, 60474], [60475, 150181], [60476, 147329], [15377, 60477], [26422, 60478], [60482, 139169], [13770, 60490], [18682, 60493], 0, [30728, 60496], [37461, 60497], [17394, 60499], [17375, 60501], [23032, 60505], 0, [22155, 60518], [60520, 169449], [36882, 60541], [21953, 60546], [17673, 60551], [32383, 60552], [28502, 60553], [27313, 60554], [13540, 60556], [60558, 161949], [14138, 60559], 0, [60562, 163876], [60565, 162366], [15851, 60567], [60569, 146615], 
  [60574, 156248], [22207, 60575], [36366, 60577], [23405, 60578], [25566, 60581], 0, [25904, 60585], [22061, 60586], [21530, 60588], [60591, 171416], [19581, 60592], [22050, 60593], [22046, 60594], [32585, 60595], [22901, 60597], [60598, 146752], [34672, 60599], [33047, 60604], [40286, 60605], [36120, 60606], [30267, 60607], [40005, 60608], [30286, 60609], [30649, 60610], [37701, 60611], [21554, 60612], [33096, 60613], [33527, 60614], [22053, 60615], [33074, 60616], [33816, 60617], [32957, 60618], 
  [21994, 60619], [31074, 60620], [22083, 60621], [21526, 60622], [60623, 134813], [13774, 60624], [22021, 57509, 60625], [22001, 60626], [26353, 60627], [60628, 164578], [13869, 60629], [30004, 60630], [22E3, 60631], [21946, 60632], [21655, 60633], [21874, 60634], [60635, 134209], [60636, 134294], [24272, 57652, 60637], [60639, 134774], [60640, 142434], [60641, 134818], [40619, 60642], [32090, 60643], 0, [60645, 135285], [25245, 60646], [38765, 60647], [21652, 60648], [36045, 60649], [29174, 60650], 
  [37238, 60651], [25596, 60652], [25529, 60653], [25598, 60654], [21865, 60655], [60656, 142147], [40050, 60657], [60658, 143027], [20890, 60659], [13535, 60660], [60661, 134567], [20903, 60662], [21581, 60663], [21790, 60664], [21779, 60665], [30310, 60666], [36397, 60667], [60668, 157834], [30129, 60669], [32950, 60670], [34820, 60671], 0, [35015, 60673], [33206, 60674], [33820, 60675], [17644, 60677], [29444, 60678], [33547, 60681], [22139, 60683], [37232, 60690], [37384, 60692], [60696, 134905], 
  [29286, 60697], [18254, 60699], [60701, 163833], [16634, 60703], [40029, 60704], [25887, 60705], [18675, 60707], [60708, 149472], [60709, 171388], 0, [60713, 161187], 60715, [60716, 155720], [29091, 60718], [32398, 60719], [40272, 60720], [13687, 60723], [27826, 60725], [21351, 60726], [14812, 60728], [60731, 149016], [33325, 60734], [21579, 60735], 60739, [14930, 60740], [29556, 60742], [60743, 171692], [19721, 60744], [39917, 60745], 0, [19547, 60748], [60751, 171998], [33884, 60752], [60754, 
  160434], [25390, 60757], [32037, 60758], [14890, 60761], [36872, 60762], [21196, 60763], [15988, 60764], [13946, 60765], [17897, 60766], [60767, 132238], [30272, 60768], [23280, 60769], [60770, 134838], [30842, 60771], [18358, 60772], [22695, 60773], [16575, 60774], [22140, 60775], [39819, 60776], [23924, 60777], [30292, 60778], [60779, 173108], [40581, 60780], [19681, 60781], 0, [14331, 60783], [24857, 60784], [60786, 148466], 60787, [22109, 60788], [60792, 171526], [21044, 60793], [13741, 60795], 
  0, [40316, 60797], [31830, 60798], [39737, 60799], [22494, 60800], [23635, 60802], [25811, 60803], [60804, 169168], [60805, 156469], [34477, 60807], [60808, 134440], [60811, 134513], 60812, [20990, 60813], [60814, 139023], [23950, 60815], [38659, 60816], [60817, 138705], [40577, 60818], [36940, 60819], [31519, 60820], [39682, 60821], [23761, 60822], [31651, 60823], [25192, 60824], [25397, 60825], [39679, 60826], [31695, 60827], [39722, 60828], [31870, 60829], 0, [31810, 60831], [31878, 60832], 
  [39957, 60833], [31740, 60834], [39689, 60835], 0, 39982, [40794, 60839], [21875, 60840], [23491, 60841], [20477, 60842], [40600, 60843], [20466, 60844], [21088, 60845], [21201, 60847], [22375, 60848], [20566, 60849], [22967, 60850], [24082, 60851], [38856, 60852], [40363, 60853], [36700, 60854], [21609, 60855], [38836, 60856], [39232, 60857], [38842, 60858], [21292, 60859], [24880, 60860], [26924, 60861], [21466, 60862], [39946, 60863], [40194, 60864], [19515, 60865], [38465, 60866], [27008, 60867], 
  [20646, 60868], [30022, 60869], [60870, 137069], [39386, 60871], [21107, 60872], 60873, [37209, 60874], [38529, 60875], [37212, 60876], 60877, [37201, 60878], [60879, 167575], [25471, 60880], [27338, 60882], [22033, 60883], [37262, 60884], [30074, 60885], [25221, 60886], [29519, 60888], [31856, 60889], [60890, 154657], 60892, [30422, 60894], [39837, 60895], [20010, 60896], [60897, 134356], [33726, 60898], [34882, 60899], 60900, [23626, 60901], [27072, 60902], 0, 0, [21023, 60905], [24053, 60906], 
  [20174, 60907], [27697, 60908], [60909, 131570], [20281, 60910], [21660, 60911], 0, [21146, 60913], [36226, 60914], [13822, 60915], 0, [13811, 60917], 60918, [27474, 60919], [37244, 60920], [40869, 60921], [39831, 60922], [38958, 60923], [39092, 60924], [39610, 60925], [40616, 60926], [40580, 60927], [31508, 60929], 60930, [27642, 60931], [34840, 60932], [32632, 60933], 60934, [22048, 60935], [60936, 173642], [36471, 60937], [40787, 60938], 60939, [36308, 60940], [36431, 60941], [40476, 60942], 
  [36353, 60943], [25218, 60944], [60945, 164733], [36392, 60946], [36469, 60947], [31443, 60948], [31294, 60950], [30936, 60951], [27882, 60952], [35431, 60953], [30215, 60954], [40742, 60956], [27854, 60957], [34774, 60958], [30147, 60959], [60960, 172722], [30803, 60961], [36108, 60963], [29410, 60964], [29553, 60965], [35629, 60966], [29442, 60967], [29937, 60968], [36075, 60969], [60970, 150203], [34351, 60971], [24506, 60972], [34976, 60973], [17591, 60974], 60975, [60977, 159237], 60978, [35454, 
  60979], [60980, 140571], 60981, [24829, 60982], [30311, 60983], [39639, 60984], [40260, 60985], [37742, 58859, 60986], [39823, 60987], [34805, 60988], 60989, 0, [36087, 60991], [29484, 60992], [38689, 60993], [39856, 60994], [13782, 60995], [29362, 60996], [19463, 60997], [31825, 60998], [39242, 60999], [24921, 61001], [19460, 61002], [40598, 61003], [24957, 61004], 61005, [22367, 61006], [24943, 61007], [25254, 61008], [25145, 61009], 0, [14940, 61011], [25058, 61012], [21418, 61013], [25444, 
  61015], [26626, 61016], [13778, 61017], [23895, 61018], [36826, 61020], [61021, 167481], 61022, [20697, 61023], [30982, 61025], [21298, 61026], [38456, 61027], [61028, 134971], [16485, 61029], 61030, [30718, 61031], 61032, [31938, 61033], [61034, 155418], [31962, 61035], [31277, 61036], [32870, 61037], [32867, 61038], [32077, 61039], [29957, 61040], [29938, 61041], [35220, 61042], [33306, 61043], [26380, 61044], [32866, 61045], [61046, 160902], [32859, 61047], [29936, 61048], [33027, 61049], [30500, 
  61050], [35209, 61051], [61052, 157644], [30035, 61053], [34729, 61055], [34766, 61056], [33224, 61057], [34700, 61058], [35401, 61059], [36013, 61060], [35651, 61061], [30507, 61062], [29944, 61063], [34010, 61064], [27058, 61066], [36262, 61067], 61068, [35241, 58392, 61069], 0, [28089, 61071], [34753, 61072], [61073, 147473], [29927, 61074], [15835, 61075], [29046, 61076], [24740, 57702, 61077], [24988, 61078], [15569, 61079], 0, [24695, 61081], 61082, [32625, 61083], 0, [24809, 61086], [19326, 
  61087], [57344, 132423], [37595, 57345], [57346, 132575], [57347, 147397], [34124, 57348], [17077, 57349], [29679, 57350], [20917, 57351], [13897, 57352], [57353, 149826], [57354, 166372], [37700, 57355], [57356, 137691], [33518, 57357], [57358, 146632], [30780, 57359], [26436, 57360], [25311, 57361], [57362, 149811], [57363, 166314], [57364, 131744], [57365, 158643], [57366, 135941], [20395, 57367], [57368, 140525], [20488, 57369], [57370, 159017], [57371, 162436], [57372, 144896], [57373, 150193], 
  [57374, 140563], 0, [57376, 131966], [24484, 57377], [57378, 131968], [57379, 131911], [28379, 57380], [57381, 132127], 20702, [20737, 57383], [13434, 57384], [20750, 57385], [39020, 57386], [14147, 57387], [33814, 57388], [57389, 149924], [57390, 132231], [20832, 57391], [57392, 144308], [20842, 57393], [57394, 134143], [57395, 139516], [57396, 131813], [57397, 140592], [57398, 132494], [57399, 143923], [57400, 137603], [23426, 57401], [34685, 57402], [57403, 132531], [57404, 146585], [20914, 
  57405], [20920, 57406], [40244, 57407], [20937, 57408], [20943, 57409], [20945, 57410], [15580, 57411], [20947, 57412], [57413, 150182], [20915, 57414], 0, 0, [20973, 57417], [33741, 57418], [26942, 57419], [57420, 145197], [24443, 57421], [21003, 57422], [21030, 57423], [21052, 57424], [21173, 57425], [21079, 57426], [21140, 57427], [21177, 57428], [21189, 57429], [31765, 57430], [34114, 57431], [21216, 57432], [34317, 57433], [57434, 158483], 0, [57436, 166622], [21833, 57437], [28377, 57438], 
  [57439, 147328], [57440, 133460], [57441, 147436], [21299, 57442], 0, [57444, 134114], [27851, 57445], [57446, 136998], [26651, 57447], [29653, 57448], [24650, 57449], [16042, 57450], [14540, 57451], [57452, 136936], [29149, 57453], [17570, 57454], [21357, 57455], [21364, 57456], [57457, 165547], [21374, 57458], 0, [57460, 136598], [57461, 136723], [30694, 57462], [21395, 57463], [57464, 166555], [21408, 57465], [21419, 57466], [21422, 57467], [29607, 57468], [57469, 153458], [16217, 57470], [29596, 
  57471], [21441, 57472], [21445, 57473], [27721, 57474], [20041, 57475], [22526, 57476], [21465, 57477], [15019, 57478], [57479, 134031], [21472, 57480], [57481, 147435], [57482, 142755], [21494, 57483], [57484, 134263], [21523, 57485], [28793, 57486], [21803, 57487], [26199, 57488], [27995, 57489], [21613, 57490], [57491, 158547], [57492, 134516], [21853, 57493], [21647, 57494], [21668, 57495], [18342, 57496], [57497, 136973], [57498, 134877], [15796, 57499], [57500, 134477], [57501, 166332], [57502, 
  140952], [21831, 57503], [19693, 57504], [21551, 57505], [29719, 57506], [21894, 57507], [21929, 57508], 0, [57510, 137431], [57511, 147514], [17746, 57512], [57513, 148533], [26291, 57514], [57515, 135348], [22071, 57516], [26317, 57517], [57518, 144010], [26276, 57519], 0, [22093, 57521], [22095, 57522], [30961, 57523], [22257, 57524], [38791, 57525], [21502, 57526], [22272, 57527], [22255, 57528], [22253, 57529], [57530, 166758], [13859, 57531], [57532, 135759], [22342, 57533], [57534, 147877], 
  [27758, 57535], [28811, 57536], [22338, 57537], [14001, 57538], [57539, 158846], [22502, 57540], [57541, 136214], [22531, 57542], [57543, 136276], [57544, 148323], [22566, 57545], [57546, 150517], 0, [22698, 57548], [13665, 57549], [22752, 57550], [22748, 57551], [57552, 135740], [22779, 57553], [23551, 57554], [22339, 57555], [57556, 172368], [57557, 148088], [37843, 57558], [13729, 57559], [22815, 57560], [26790, 57561], [14019, 57562], [28249, 57563], [57564, 136766], [23076, 57565], 0, [57567, 
  136850], [34053, 57568], [22985, 57569], [57570, 134478], [57571, 158849], [57572, 159018], [57573, 137180], [23001, 57574], [57575, 137211], [57576, 137138], [57577, 159142], [28017, 57578], [57579, 137256], [57580, 136917], [23033, 57581], [57582, 159301], [23211, 57583], [23139, 57584], [14054, 57585], [57586, 149929], 0, [14088, 57588], [23190, 57589], [29797, 57590], [23251, 57591], [57592, 159649], [57593, 140628], [57595, 137489], [14130, 57596], [57597, 136888], [24195, 57598], [21200, 
  57599], [23414, 57600], [25992, 57601], [23420, 57602], [57603, 162318], [16388, 57604], [18525, 57605], [57606, 131588], [23509, 57607], [57609, 137780], [57610, 154060], [57611, 132517], [23539, 57612], [23453, 57613], [19728, 57614], [23557, 57615], [57616, 138052], [23571, 57617], [29646, 57618], [23572, 57619], [57620, 138405], [57621, 158504], [23625, 57622], [18653, 57623], [23685, 57624], [23785, 57625], [23791, 57626], [23947, 57627], [57628, 138745], [57629, 138807], [23824, 57630], [23832, 
  57631], [23878, 57632], [57633, 138916], [23738, 57634], [24023, 57635], [33532, 57636], [14381, 57637], [57638, 149761], [57639, 139337], [57640, 139635], [33415, 57641], [14390, 57642], [15298, 57643], [24110, 57644], [27274, 57645], 0, 57647, [57648, 148668], [57649, 134355], [21414, 57650], [20151, 57651], 0, [21416, 57653], [57654, 137073], [24073, 57655], 57656, [57657, 164994], [24313, 57658], [24315, 57659], [14496, 57660], [24316, 57661], [26686, 57662], [37915, 57663], [24333, 57664], 
  [57665, 131521], [57666, 194708], [15070, 57667], [57669, 135994], [24378, 57670], [57671, 157832], [57672, 140240], [57674, 140401], [24419, 57675], [57677, 159342], [24434, 57678], [37696, 57679], [57680, 166454], [24487, 57681], [23990, 57682], [15711, 57683], [57684, 152144], [57685, 139114], [57686, 159992], [57687, 140904], [37334, 57688], [57689, 131742], [57690, 166441], [24625, 57691], [26245, 57692], [14691, 57694], [15815, 57695], [13881, 57696], [22416, 57697], [57698, 141236], [31089, 
  57699], [15936, 57700], [24734, 57701], 0, 0, [57704, 149890], [57705, 149903], [57706, 162387], [29860, 57707], [20705, 57708], [23200, 57709], [24932, 57710], [24898, 57712], [57713, 194726], [57714, 159442], [24961, 57715], [20980, 57716], [57717, 132694], [24967, 57718], [23466, 57719], [57720, 147383], [57721, 141407], [25043, 57722], [57723, 166813], [57724, 170333], [25040, 57725], [14642, 57726], [57727, 141696], [57728, 141505], [24611, 57729], [24924, 57730], [25886, 57731], [25483, 57732], 
  [57733, 131352], [25285, 57734], [57735, 137072], [25301, 57736], [57737, 142861], [25452, 57738], [57739, 149983], [14871, 57740], [25656, 57741], [25592, 57742], [57743, 136078], [57744, 137212], [28554, 57746], [57747, 142902], 0, [57750, 153373], [25825, 57751], [25829, 57752], [38011, 57753], [14950, 57754], [25658, 57755], [14935, 57756], [25933, 57757], [28438, 57758], [57759, 150056], [57760, 150051], [25989, 57761], [25965, 57762], [25951, 57763], 0, [26037, 57765], [57766, 149824], [19255, 
  57767], [26065, 57768], [16600, 57769], [57770, 137257], 57771, [26083, 57772], [24543, 57773], [57774, 144384], [26136, 57775], [57776, 143863], [57777, 143864], [26180, 57778], [57779, 143780], [57780, 143781], [26187, 57781], [57782, 134773], [26215, 57783], [57784, 152038], [26227, 57785], 0, [57788, 143921], [57789, 165364], [57790, 143816], [57791, 152339], [30661, 57792], [57793, 141559], [39332, 57794], [26370, 57795], [57796, 148380], [57797, 150049], [27130, 57799], [57800, 145346], 0, 
  [26471, 57802], [26466, 57803], [57804, 147917], [57805, 168173], [26583, 57806], [17641, 57807], [26658, 57808], [28240, 57809], [37436, 57810], [26625, 57811], [57812, 144358], [57813, 159136], [26717, 57814], [57815, 144495], [27105, 57816], [27147, 57817], [57818, 166623], [26995, 57819], [26819, 57820], [57821, 144845], [26881, 57822], [26880, 57823], [14849, 57825], [57826, 144956], [15232, 57827], [26540, 57828], [26977, 57829], [57830, 166474], [17148, 57831], [26934, 57832], [27032, 57833], 
  [15265, 57834], [57835, 132041], [33635, 57836], [20624, 57837], [27129, 57838], [57839, 144985], [57840, 139562], [27205, 57841], [57842, 145155], [27293, 57843], [15347, 57844], [26545, 57845], [27336, 57846], [57847, 168348], [15373, 57848], [27421, 57849], [57850, 133411], [24798, 57851, 60308], [27445, 57852], [27508, 57853], [57854, 141261], [28341, 57855], [57856, 146139], 0, [57858, 137560], [14144, 57859], [21537, 57860], [57861, 146266], [27617, 57862], [57863, 147196], [27612, 57864], 
  [27703, 57865], [57866, 140427], [57867, 149745], [57868, 158545], [27738, 57869], [33318, 57870], [27769, 57871], [57872, 146876], [17605, 57873], [57874, 146877], [57875, 147876], [57876, 149772], [57877, 149760], [57878, 146633], [14053, 57879], [15595, 57880], [57881, 134450], [39811, 57882], [57883, 143865], [57884, 140433], [32655, 57885], [26679, 57886], [57887, 159013], [57888, 159137], [57889, 159211], [28054, 57890], [27996, 57891], [28284, 57892], [28420, 57893], [57894, 149887], [57895, 
  147589], [57896, 159346], [34099, 57897], [57898, 159604], [20935, 57899], 0, 0, [33838, 57902], [57903, 166689], 0, [57905, 146991], [29779, 57906], [57907, 147330], [31180, 57908], [28239, 57909], [23185, 57910], [57911, 143435], [28664, 57912], [14093, 57913], [28573, 57914], [57915, 146992], [28410, 57916], [57917, 136343], [57918, 147517], [17749, 57919], [37872, 57920], [28484, 57921], [28508, 57922], [15694, 57923], [28532, 57924], [57925, 168304], [15675, 57926], [28575, 57927], [57928, 
  147780], [28627, 57929], [57930, 147601], [57931, 147797], [57932, 147513], [57933, 147440], [57934, 147380], [57935, 147775], [20959, 57936], [57937, 147798], [57938, 147799], [57939, 147776], [57940, 156125], [28747, 57941], [28798, 57942], [28839, 57943], 0, [28876, 57945], [28885, 57946], [28886, 57947], [28895, 57948], [16644, 57949], [15848, 57950], [29108, 57951], [29078, 57952], [57953, 148087], [28971, 57954], [28997, 57955], [23176, 57956], [29002, 57957], 0, [57960, 148325], [29007, 
  57961], [37730, 57962], [57963, 148161], [28972, 57964], [57965, 148570], [57966, 150055], [57967, 150050], [29114, 57968], [57969, 166888], [28861, 57970], [29198, 57971], [37954, 57972], [29205, 57973], [22801, 57974], [37955, 57975], [29220, 57976], [37697, 57977], [57978, 153093], [29230, 57979], [29248, 57980], [57981, 149876], [26813, 57982], [29269, 57983], [29271, 57984], [15957, 57985], [57986, 143428], [26637, 57987], [28477, 57988], [29314, 57989], 0, [29483, 57991], [57992, 149539], 
  [57993, 165931], [18669, 57994], [57995, 165892], [29480, 57996], [29486, 57997], [29647, 57998], [29610, 57999], [58E3, 134202], [58001, 158254], [29641, 58002], [29769, 58003], [58004, 147938], [58005, 136935], [58006, 150052], [26147, 58007], [14021, 58008], [58009, 149943], [58010, 149901], [58011, 150011], [29687, 58012], [29717, 58013], [26883, 58014], [58015, 150054], [29753, 58016], [16087, 58018], 0, [58020, 141485], [29792, 58021], [58022, 167602], [29767, 58023], [29668, 58024], [29814, 
  58025], [33721, 58026], [29804, 58027], [29812, 58029], [37873, 58030], [27180, 58031], [29826, 58032], [18771, 58033], [58034, 150156], [58035, 147807], [58036, 150137], [58037, 166799], [23366, 58038], [58039, 166915], [58040, 137374], [29896, 58041], [58042, 137608], [29966, 58043], [29982, 58045], [58046, 167641], [58047, 137803], [23511, 58048], [58049, 167596], [37765, 58050], [30029, 58051], [30026, 58052], [30055, 58053], [30062, 58054], [58055, 151426], [16132, 58056], [58057, 150803], 
  [30094, 58058], [29789, 58059], [30110, 58060], [30132, 58061], [30210, 58062], [30252, 58063], [30289, 58064], [30287, 58065], [30319, 58066], 58067, [58068, 156661], [30352, 58069], [33263, 58070], [14328, 58071], [58072, 157969], [58073, 157966], [30369, 58074], [30373, 58075], [30391, 58076], [30412, 58077], [58078, 159647], [33890, 58079], [58080, 151709], [58081, 151933], [58082, 138780], [30494, 58083], [30502, 58084], [30528, 58085], [25775, 58086], [58087, 152096], [30552, 58088], [58089, 
  144044], [30639, 58090], [58091, 166244], [58092, 166248], [58093, 136897], [30708, 58094], 0, [26826, 58098], [30895, 58099], [30919, 58100], [30931, 58101], [38565, 58102], [31022, 58103], [58104, 153056], [30935, 58105], [31028, 58106], [30897, 58107], [58108, 161292], [36792, 58109], [34948, 58110], [58113, 140828], [31110, 58114], [35072, 58115], [26882, 58116], [31104, 58117], [58118, 153687], [31133, 58119], [58120, 162617], [31036, 58121], [31145, 58122], [28202, 58123], [58124, 160038], 
  [16040, 58125], [31174, 58126], [58127, 168205], [31188, 58128], 0, [21797, 62526], 0, [62528, 134210], [62529, 134421], [62530, 151851], [21904, 62531], [62532, 142534], [14828, 62533], [62534, 131905], [36422, 62535], [62536, 150968], [62537, 169189], 0, [62539, 164030], [30586, 62540], [62541, 142392], [14900, 62542], [18389, 62543], [62544, 164189], [62545, 158194], [62546, 151018], [25821, 62547], [62548, 134524], [62549, 135092], [62550, 134357], 0, [25741, 62552], [36478, 62553], [62554, 
  134806], 0, [62556, 135012], [62557, 142505], [62558, 164438], [62559, 148691], 0, [62561, 134470], [62562, 170573], [62563, 164073], [18420, 62564], [62565, 151207], [62566, 142530], [39602, 62567], [14951, 62568], [62569, 169460], [16365, 62570], [13574, 62571], [62572, 152263], [62573, 169940], 0, [62575, 142660], [40302, 62576], [38933, 62577], 0, [17369, 62579], 0, [25780, 62581], [21731, 62582], 0, [62584, 142282], 0, [14843, 62586], 0, [62588, 157402], [62589, 157462], [62590, 162208], [25834, 
  62591], [62592, 151634], [62593, 134211], [36456, 62594], 0, [62596, 166732], [62597, 132913], 0, [18443, 62599], [62600, 131497], [16378, 62601], [22643, 62602], [62603, 142733], 0, [62605, 148936], [62606, 132348], [62607, 155799], [62608, 134988], 0, [21881, 62610], 0, [17338, 62612], 0, [19124, 62614], [62615, 141926], [62616, 135325], [33194, 62617], [39157, 62618], [62619, 134556], [25465, 62620], [14846, 62621], [62622, 141173], [36288, 62623], [22177, 62624], [25724, 62625], [15939, 62626], 
  0, [62628, 173569], [62629, 134665], [62630, 142031], 0, 0, [62633, 135368], [62634, 145858], [14738, 62635], [14854, 62636], [62637, 164507], [13688, 62638], [62639, 155209], [62640, 139463], 0, 0, [62643, 142514], [62644, 169760], [13500, 62645], [27709, 62646], [62647, 151099], 0, 0, [62650, 161140], [62651, 142987], [62652, 139784], [62653, 173659], [62654, 167117], [62655, 134778], [62656, 134196], [62683, 161337], [62684, 142286], [62687, 142417], [14872, 62689], [62691, 135367], [62693, 
  173618], [62695, 167122], [62696, 167321], [62697, 167114], [38314, 62698], 0, [62706, 161630], [28992, 62708], 0, [20822, 62385], 0, [20616, 62487], 0, [13459, 62489], [20870, 62491], [24130, 63037], [20997, 62495], [21031, 62436], [21113, 62497], 0, [13651, 62504], [21442, 62505], [21343, 62715], 0, [21823, 62520], 0, [21976, 59986], [13789, 62722], [22049, 63067], 0, [22100, 60044], [60148, 135291], 0, [60153, 135379], 0, [61095, 135934], 0, 0, [14265, 60104], [23745, 61099], [23829, 63066], 
  [23894, 63030], [14392, 63036], [20097, 62477], [24253, 63038], [14612, 63042], [25017, 63050], [25232, 63054], [25368, 63056], [25690, 63063], [25745, 62381], [33133, 62709], [33156, 59922], [33171, 59924], [26624, 63080], [15292, 63093], [29327, 60517], [29389, 59781], 0, [29497, 59785], [30018, 59811], [30172, 59817], [16320, 59818], [60278, 151205], [16343, 59820], 0, 30336, [30348, 59824, 151388], [16552, 59845], [30777, 59846], [16643, 59855], [31377, 59863], [31771, 59876], [31981, 59884], 
  [32659, 62658], [32686, 59892], 0, [33535, 59936], [22623, 59981], [34482, 59960], 0, [34699, 59963], [35143, 59969], 0, [35369, 59972], 0, [36465, 59988], [60484, 164233], [36528, 59990], 0, [37214, 62443], [37260, 62441], [39182, 60051], [39196, 60054], 0, 0, [39809, 60066], [40384, 60080], [40339, 60078], [40620, 60085], [19857, 60540], 0, 37818, [40571, 60084], [28809, 63148], [29512, 59788], 0, [31129, 59858], [36791, 59997], 0, [39234, 60056], {s:193}, 8364, {s:4}, [12443, 63518], [12444, 
  63519], [11904, 63520], {f:5, c:62211}, [62216, 131340], 62217, [62218, 131281], [62219, 131277], {f:2, c:62220}, [62222, 131275], [62223, 139240], 62224, [62225, 131274], {f:4, c:62226}, [62230, 131342], {f:2, c:62231}, {f:2, c:62776}, [62778, 138177], [62779, 194680], [12205, 38737, 62780], [62781, 131206], [20059, 62782], [20155, 62783], [13630, 62784], [23587, 62785], [24401, 62786], [24516, 62787], [14586, 62788], [25164, 62789], [25909, 62790], [27514, 62791], [27701, 62792], [27706, 62793], 
  [28780, 62794], [29227, 62795], [20012, 62796], [29357, 62797], [62798, 149737], [32594, 62799], [31035, 62800], [31993, 62801], [32595, 62802], [62803, 156266], [13505, 62804], [62806, 156491], [32770, 62807], [32896, 62808], [62809, 157202], [62810, 158033], [21341, 62811], [34916, 62812], [35265, 62813], [62814, 161970], [35744, 62815], [36125, 62816], [38021, 62817], [38264, 62818], [38271, 62819], [38376, 62820], [62821, 167439], [38886, 62822], [39029, 62823], [39118, 62824], [39134, 62825], 
  [39267, 62826], [62827, 17E4], [40060, 62828], [40479, 62829], [40644, 62830], [27503, 62831], [62832, 63751], [20023, 62833], [62834, 131207], [38429, 62835], [25143, 62836], [38050, 62837], [11908, 63521], [11910, 63522], [11911, 63523], [11912, 63524], [11914, 63525], [11916, 63526], [11917, 63527], [11925, 63528], [11932, 63529], [11941, 63531], [11943, 63532], [11946, 63533], [11948, 63534], [11950, 63535], [11958, 63536], [11964, 63537], [11966, 63538], [11978, 63540], [11980, 63541], [11981, 
  63542], [11983, 63543], [11990, 63544], [11991, 63545], [11998, 63546], [62368, 172969], [62369, 135493], [25866, 62371], [20029, 62374], [28381, 62375], [40270, 62376], [37343, 62377], [62380, 161589], [20250, 62382], [20264, 62383], [20392, 62384], [20852, 62386], [20892, 62387], [20964, 62388], [21153, 62389], [21160, 62390], [21307, 62391], [21326, 62392], [21457, 62393], [21464, 62394], [22242, 62395], [22768, 62396], [22788, 62397], [22791, 62398], [22834, 62399], [22836, 62400], [23398, 
  62401], [23454, 62402], [23455, 62403], [23706, 62404], [24198, 62405], [24635, 62406], [25993, 62407], [26622, 62408], [26628, 62409], [26725, 62410], [27982, 62411], [28860, 62412], [30005, 62413], [32420, 62414], [32428, 62415], [32442, 62416], [32455, 62417], [32463, 62418], [32479, 62419], [32518, 62420], [32567, 62421], [33402, 62422], [33487, 62423], [33647, 62424], [35270, 62425], [35774, 62426], [35810, 62427], [36710, 62428], [36711, 62429], [36718, 62430], [29713, 62431], [31996, 62432], 
  [32205, 62433], [26950, 62434], [31433, 62435], [30904, 62442], [32956, 62444], [36107, 62446], [33014, 62447], [62448, 133607], [32927, 62451], [40647, 62452], [19661, 62453], [40393, 62454], [40460, 62455], [19518, 62456], [62457, 171510], [62458, 159758], [40458, 62459], [62460, 172339], [13761, 62461], [28314, 62463], [33342, 62464], [29977, 62465], [18705, 62467], [39532, 62468], [39567, 62469], [40857, 62470], [31111, 62471], [62472, 164972], [62473, 138698], [62474, 132560], [62475, 142054], 
  [20004, 62476], [20096, 62478], [20103, 62479], [20159, 62480], [20203, 62481], [20279, 62482], [13388, 62483], [20413, 62484], [15944, 62485], [20483, 62486], [13437, 62488], [13477, 62490], [22789, 62492], [20955, 62493], [20988, 62494], [20105, 62496], [21136, 62498], [21287, 62499], [13767, 62500], [21417, 62501], [13649, 62502], [21424, 62503], [21539, 62506], [13677, 62507], [13682, 62508], [13953, 62509], [21651, 62510], [21667, 62511], [21684, 62512], [21689, 62513], [21712, 62514], [21743, 
  62515], [21784, 62516], [21795, 62517], [21800, 62518], [13720, 62519], [13733, 62521], [13759, 62522], [21975, 62523], [13765, 62524], [62525, 163204], [16467, 62538], [62551, 135412], [62555, 134155], [62574, 161992], [62580, 155813], [62583, 142668], [62585, 135287], [62587, 135279], [62595, 139681], [62609, 134550], [16571, 62611], [62631, 142537], [22098, 62641], [62642, 134961], [62657, 157724], [62659, 135375], [62660, 141315], [62661, 141625], [13819, 62662], [62663, 152035], [62664, 134796], 
  [62665, 135053], [62666, 134826], [16275, 62667], [62668, 134960], [62669, 134471], [62670, 135503], [62671, 134732], [62673, 134827], [62674, 134057], [62675, 134472], [62676, 135360], [62677, 135485], [16377, 62678], [62679, 140950], [25650, 62680], [62681, 135085], [62682, 144372], [62685, 134526], [62686, 134527], [62688, 142421], [62690, 134808], [62692, 134958], [62694, 158544], [21708, 62699], [33476, 62700], [21945, 62701], [62703, 171715], [39974, 62704], [39606, 62705], [62707, 142830], 
  [33004, 62710], [23580, 62711], [62712, 157042], [33076, 62713], [14231, 62714], [62716, 164029], [37302, 62717], [62718, 134906], [62719, 134671], [62720, 134775], [62721, 134907], [62723, 151019], [13833, 62724], [62725, 134358], [22191, 62726], [62727, 141237], [62728, 135369], [62729, 134672], [62730, 134776], [62731, 135288], [62732, 135496], [62733, 164359], [62734, 136277], [62735, 134777], [62736, 151120], [62737, 142756], [23124, 62738], [62739, 135197], [62740, 135198], [62741, 135413], 
  [62742, 135414], [22428, 62743], [62744, 134673], [62745, 161428], [62746, 164557], [62747, 135093], [62748, 134779], [62749, 151934], [14083, 62750], [62751, 135094], [62752, 135552], [62753, 152280], [62754, 172733], [62755, 149978], [62756, 137274], [62757, 147831], [62758, 164476], [22681, 62759], [21096, 62760], [13850, 62761], [62762, 153405], [31666, 62763], [23400, 62764], [18432, 62765], [19244, 62766], [40743, 62767], [18919, 62768], [39967, 62769], [39821, 62770], [62771, 154484], [62772, 
  143677], [22011, 62773], [13810, 62774], [22153, 62775], [23870, 63028], [23880, 63029], [15868, 63031], [14351, 63032], [23972, 63033], [23993, 63034], [14368, 63035], [24357, 63039], [24451, 63040], [14600, 63041], [14655, 63043], [14669, 63044], [24791, 63045], [24893, 63046], [23781, 63047], [14729, 63048], [25015, 63049], [25039, 63051], [14776, 63052], [25132, 63053], [25317, 63055], [14840, 63057], [22193, 63058], [14851, 63059], [25570, 63060], [25595, 63061], [25607, 63062], [14923, 63064], 
  [25792, 63065], [40863, 63068], [14999, 63069], [25990, 63070], [15037, 63071], [26111, 63072], [26195, 63073], [15090, 63074], [26258, 63075], [15138, 63076], [26390, 63077], [15170, 63078], [26532, 63079], [15192, 63081], [26698, 63082], [26756, 63083], [15218, 63084], [15217, 63085], [15227, 63086], [26889, 63087], [26947, 63088], [29276, 63089], [26980, 63090], [27039, 63091], [27013, 63092], [27094, 63094], [15325, 63095], [27237, 63096], [27252, 63097], [27249, 63098], [27266, 63099], [15340, 
  63100], [27289, 63101], [15346, 63102], [27307, 63103], [27317, 63104], [27348, 63105], [27382, 63106], [27521, 63107], [27585, 63108], [27626, 63109], [27765, 63110], [27818, 63111], [15563, 63112], [27906, 63113], [27910, 63114], [27942, 63115], [28033, 63116], [15599, 63117], [28068, 63118], [28081, 63119], [28181, 63120], [28184, 63121], [28201, 63122], [28294, 63123], [63124, 166336], [28347, 63125], [28386, 63126], [28378, 63127], [40831, 63128], [28392, 63129], [28393, 63130], [28452, 63131], 
  [28468, 63132], [15686, 63133], [63134, 147265], [28545, 63135], [28606, 63136], [15722, 63137], [15733, 63138], [29111, 63139], [23705, 63140], [15754, 63141], [28716, 63142], [15761, 63143], [28752, 63144], [28756, 63145], [28783, 63146], [28799, 63147], [63149, 131877], [17345, 63150], [13809, 63151], [63152, 134872], [13902, 58134], [15789, 58172], [58173, 154725], [26237, 58183], [31860, 58188], [29837, 58197], [32402, 58215], [17667, 58232], [58260, 151480], [58270, 133901], [58277, 158474], 
  [13438, 58311], [58317, 143087], [58325, 146613], [58343, 159385], [34673, 58364], [25537, 58385], [30583, 58387], [35210, 58390], [58406, 147343], [35660, 58415], [58440, 150729], [18730, 58464], [58471, 172052], [58472, 165564], [58473, 165121], [15088, 58490], [28815, 58511], [58529, 140922], [58637, 158120], [58646, 148043], [26760, 58662], [58664, 139611], [40802, 58702], [37830, 58793], [58802, 131967], [37734, 58888], [37519, 58901], [34324, 58954], [58986, 173147], [16784, 59010], [26511, 
  59045], [26654, 59048], [14435, 59051], [59077, 149996], [15129, 59128], [33942, 59176], [59241, 149858], [14818, 59254], [33920, 59259], [17262, 59328], [38769, 59402], [39323, 59427], [18733, 59499], [28439, 59703], [59704, 160009], [28838, 59746], [59752, 150095], [32357, 59753], [23855, 59755], [15859, 59756], [59758, 150109], [59759, 137183], [32164, 59760], [33830, 59761], [21637, 59762], [59763, 146170], [59765, 131604], [22398, 59766], [59767, 133333], [59768, 132633], [16357, 59769], [59770, 
  139166], [59771, 172726], [28675, 59772], [59773, 168283], [23920, 59774], [29583, 59775], [59777, 166489], [59778, 168992], [20424, 59779], [32743, 59780], [29456, 59782], [29496, 59784], [29505, 59787], [16041, 59789], [29173, 59792], [59793, 149746], [29665, 59794], [16074, 59796], [16081, 59798], [29721, 59801], [29726, 59802], [29727, 59803], [16098, 59804], [16112, 59805], [16116, 59806], [16122, 59807], [29907, 59808], [16142, 59809], [16211, 59810], [30061, 59812], [30066, 59813], [30093, 
  59814], [16252, 59815], [30152, 59816], [30285, 59819], [30324, 59821], [16348, 59822], [30330, 59823], [29064, 59825], [22051, 59826], [35200, 59827], [16413, 59829], [30531, 59830], [16441, 59831], [16453, 59833], [13787, 59834], [30616, 59835], [16490, 59836], [16495, 59837], [30654, 59839], [30667, 59840], [30744, 59842], [30748, 59844], [30791, 59847], [30801, 59848], [30822, 59849], [33864, 59850], [59851, 152885], [31027, 59852], [31026, 59854], [16649, 59856], [31121, 59857], [31238, 59860], 
  [16743, 59862], [16818, 59864], [31420, 59865], [33401, 59866], [16836, 59867], [31439, 59868], [31451, 59869], [16847, 59870], [31586, 59872], [31596, 59873], [31611, 59874], [31762, 59875], [16992, 59877], [17018, 59878], [31867, 59879], [31900, 59880], [17036, 59881], [31928, 59882], [17044, 59883], [36755, 59885], [28864, 59886], [59887, 134351], [32207, 59888], [32212, 59889], [32208, 59890], [32253, 59891], [32692, 59893], [29343, 59894], [17303, 59895], [32800, 59896], [32805, 59897], [32814, 
  59899], [32817, 59900], [32852, 59901], [22452, 59903], [28832, 59904], [32951, 59905], [33001, 59906], [17389, 59907], [33036, 59908], [33038, 59910], [33042, 59911], [33044, 59913], [17409, 59914], [15161, 59915], [33110, 59916], [33113, 59917], [33114, 59918], [17427, 59919], [33148, 59921], [17445, 59923], [17453, 59925], [33189, 59926], [22511, 59927], [33217, 59928], [33252, 59929], [33364, 59930], [17551, 59931], [33398, 59933], [33482, 59934], [33496, 59935], [17584, 59937], [33623, 59938], 
  [38505, 59939], [33797, 59941], [28917, 59942], [33892, 59943], [33928, 59945], [17668, 59946], [33982, 59947], [34017, 59948], [34040, 59949], [34064, 59950], [34104, 59951], [34130, 59952], [17723, 59953], [34159, 59954], [34160, 59955], [34272, 59956], [17783, 59957], [34418, 59958], [34450, 59959], [34543, 59961], [38469, 59962], [17926, 59964], [17943, 59965], [34990, 59966], [35071, 59967], [35108, 59968], [35217, 59970], [59971, 162151], [35384, 59973], [35476, 59974], [35508, 59975], [35921, 
  59976], [36052, 59977], [36082, 59978], [36124, 59979], [18328, 59980], [36291, 59982], [18413, 59983], [36410, 59985], [22356, 59987], [22005, 59989], [18487, 59991], [36558, 59992], [36578, 59993], [36580, 59994], [36589, 59995], [36594, 59996], [36801, 59998], [36810, 59999], [36812, 6E4], [36915, 60001], [18605, 60003], [39136, 60004], [37395, 60005], [18718, 60006], [37416, 60007], [37464, 60008], [37483, 60009], [37553, 60010], [37550, 60011], [37567, 60012], [37603, 60013], [37611, 60014], 
  [37619, 60015], [37620, 60016], [37629, 60017], [37699, 60018], [37764, 60019], [37805, 60020], [18757, 60021], [18769, 60022], [37911, 60024], [37917, 60026], [37933, 60027], [37950, 60028], [18794, 60029], [37972, 60030], [38009, 60031], [38189, 60032], [38306, 60033], [18855, 60034], [38388, 60035], [38451, 60036], [18917, 60037], [18980, 60039], [38720, 60040], [18997, 60041], [38834, 60042], [38850, 60043], [19172, 60045], [39097, 60047], [19225, 60048], [39153, 60049], [22596, 60050], [39193, 
  60052], [39223, 60055], [39261, 60057], [39266, 60058], [19312, 60059], [39365, 60060], [19357, 60061], [39484, 60062], [39695, 60063], [39785, 60065], [39901, 60067], [39921, 60068], [39924, 60069], [19565, 60070], [39968, 60071], [14191, 60072], [60073, 138178], [40265, 60074], [40702, 60076], [22096, 60077], [40381, 60079], [40444, 60081], [38134, 60082], [36790, 60083], [40625, 60086], [40637, 60087], [40646, 60088], [38108, 60089], [40674, 60090], [40689, 60091], [40696, 60092], [40772, 60094], 
  [60095, 131220], [60096, 131767], [60097, 132E3], [38083, 60099], [60101, 132311], [38081, 60103], [60105, 132565], [60106, 132629], [60107, 132726], [60108, 136890], [22359, 60109], [29043, 60110], [60111, 133826], [60112, 133837], [60113, 134079], [60115, 194619], [60116, 134091], [21662, 60117], [60118, 134139], [60119, 134203], [60120, 134227], [60121, 134245], [60122, 134268], [60124, 134285], [60126, 134325], [60127, 134365], [60128, 134381], [60129, 134511], [60130, 134578], [60131, 134600], 
  [60135, 134660], [60136, 134670], [60137, 134871], [60138, 135056], [60139, 134957], [60140, 134771], [60142, 135100], [60144, 135260], [60145, 135247], [60146, 135286], [60149, 135304], [60150, 135318], [13895, 60151], [60152, 135359], [60154, 135471], [60155, 135483], [21348, 60156], [60158, 135907], [60159, 136053], [60160, 135990], [60162, 136567], [60163, 136729], [60164, 137155], [60165, 137159], [28859, 60167], [60168, 137261], [60169, 137578], [60170, 137773], [60171, 137797], [60172, 138282], 
  [60173, 138352], [60174, 138412], [60175, 138952], [60177, 138965], [60178, 139029], [29080, 60179], [60181, 139333], [27113, 60182], [14024, 60183], [60184, 139900], [60185, 140247], [60186, 140282], [60187, 141098], [60188, 141425], [60189, 141647], [60191, 141671], [60192, 141715], [60193, 142037], [60195, 142056], [60197, 142094], [60199, 142143], [60202, 142412], [60204, 142472], [60205, 142519], [60206, 154600], [60207, 142600], [60208, 142610], [60209, 142775], [60210, 142741], [60211, 142914], 
  [60212, 143220], [60213, 143308], [60214, 143411], [60215, 143462], [60216, 144159], [60217, 144350], [60222, 144743], [60223, 144883], [60227, 144922], [60228, 145174], [22709, 60231], [60234, 146087], [60237, 146961], [60238, 147129], [60243, 147737], [60245, 148206], [60246, 148237], [60248, 148276], [60249, 148374], [60258, 148484], [60259, 148694], [22408, 60260], [60261, 149108], [60263, 149295], [60271, 149522], [60272, 149755], [60273, 150037], [60275, 150208], [22885, 60277], [60279, 151430], 
  [60282, 151596], [22335, 60284], [60286, 152217], [60287, 152601], [60291, 152646], [60292, 152686], [60296, 152895], [60298, 152926], [60300, 152930], [60301, 152934], [60302, 153543], [60304, 153693], [60309, 153859], [60312, 154286], [60313, 154505], [60314, 154630], [22433, 60316], [29009, 60317], [60319, 155906], [60322, 156082], [60325, 156674], [60326, 156746], [60330, 156804], [60334, 156808], [60336, 156946], [60338, 157119], [60339, 157365], [22201, 60347], [60349, 157436], [13848, 60355], 
  [60357, 157593], [60358, 157806], [60360, 157790], [60362, 157895], [60366, 157990], [60368, 158009], [60371, 158202], [60373, 158253], [60378, 158260], [60379, 158555], [60383, 158621], [60385, 158884], [60388, 159150], [60392, 159819], [60393, 160205], [60395, 160384], [60396, 160389], [60399, 160395], [60401, 160486], [38047, 60404], [60405, 160848], [14009, 60416], [60424, 161740], [60425, 161880], [22230, 60426], [60435, 162269], [60441, 162301], [60442, 162314], [60443, 162571], [60444, 163174], 
  [60448, 163849], [60459, 163875], [60463, 163912], [60466, 163971], [60479, 163984], [60480, 164084], [60481, 164142], [60483, 164175], [60485, 164271], [60486, 164378], [60487, 164614], [60488, 164655], [60489, 164746], [60491, 164968], [60492, 165546], [25574, 60494], [60495, 166230], [60498, 166328], [60500, 166375], [60502, 166376], [60503, 166726], [60504, 166868], [60506, 166921], [60508, 167877], [60509, 168172], [60511, 168208], [60512, 168252], [15863, 60513], [60514, 168286], [60515, 
  150218], [36816, 60516], [60519, 169191], [60521, 169392], [60522, 169400], [60523, 169778], [60524, 170193], [60525, 170313], [60526, 170346], [60527, 170435], [60528, 170536], [60529, 170766], [60530, 171354], [60531, 171419], [32415, 60532], [60533, 171768], [60534, 171811], [19620, 60535], [38215, 60536], [60537, 172691], [29090, 60538], [60539, 172799], [60542, 173515], [19868, 60543], [60544, 134300], [36798, 60545], [36794, 60547], [60548, 140464], [36793, 60549], [60550, 150163], [20202, 
  60555], [60557, 166700], [36480, 60560], [60561, 137205], [60563, 166764], [60564, 166809], [60566, 157359], [60568, 161365], [60570, 153141], [60571, 153942], [20122, 60572], [60573, 155265], [60576, 134765], [60579, 147080], [60580, 150686], [60583, 137206], [60584, 137339], [60587, 154698], [60589, 152337], [15814, 60590], [60596, 155352], [19996, 60600], [60601, 135146], [60602, 134473], [60603, 145082], [60638, 151880], [21982, 60644], [34694, 60672], [60676, 135361], [60679, 149254], [23440, 
  60680], [60682, 157843], [60684, 141044], [60685, 163119], [60686, 147875], [60687, 163187], [60688, 159440], [60689, 160438], [60691, 135641], [60693, 146684], [60694, 173737], [60695, 134828], [60698, 138402], [60700, 151490], [60702, 135147], [60706, 142752], [60710, 135148], [60711, 134666], [60714, 135149], [60717, 135559], [19994, 60721], [19972, 60722], [23309, 60724], [13996, 60727], [21373, 60729], [13989, 60730], [22682, 60732], [60733, 150382], [22442, 60736], [60737, 154261], [60738, 
  133497], [60741, 140389], [60746, 146686], [60747, 171824], [60749, 151465], [60750, 169374], [60753, 146870], [60755, 157619], [60756, 145184], [60759, 147191], [60760, 146988], [60785, 143578], [60789, 135849], [22439, 60790], [60791, 149859], [60794, 159918], [60801, 137068], [60806, 160100], [60809, 159010], [60810, 150242], [39963, 60837], [60838, 149822], [15878, 60846], [60881, 159011], [60887, 132092], [60891, 146685], [60893, 149785], [22394, 60904], [21722, 60912], [29050, 60928], [60949, 
  150135], [60955, 166490], [60962, 194624], [60976, 137275], [61E3, 155993], [61014, 144373], [61019, 166850], [61024, 138566], [61054, 159441], [13877, 61065], [61084, 166701], [21024, 61088], [15384, 61089], [61090, 146631], [61091, 155351], [61092, 161366], [61093, 152881], [61094, 137540], [61096, 170243], [61097, 159196], [61098, 159917], [61100, 156077], [61101, 166415], [61102, 145015], [61103, 131310], [61104, 157766], [61105, 151310], [17762, 61106], [23327, 61107], [61108, 156492], [40784, 
  61109], [40614, 61110], [61111, 156267], [20962, 57415], [21314, 57416], [26285, 57520], [22620, 57547], [21843, 57566], [15749, 57594], [24928, 57608], [18606, 57668], [38845, 57676], [57693, 137335], [24755, 57703], [33828, 57711], [38932, 57748], [57749, 147596], [57764, 143486], [57787, 138813], [15147, 57798], [15666, 57824], [57857, 132021], [28801, 57944], [23708, 57959], [58017, 132547], [14128, 58028], [58096, 136054], [58097, 150034], [58111, 166699], [58112, 155779], [256, 62233], [193, 
  62234], [461, 62235], [192, 62236], [274, 62237], [201, 62238], [282, 62239], [200, 62240], [332, 62241], [211, 62242], [465, 62243], [210, 62244], 62245, [7870, 62246], 62247, [7872, 62248], [202, 62249], [257, 62250], [225, 62251], [462, 62252], [224, 62253], [593, 62254], [275, 62255], [233, 62256], [283, 62257], [232, 62258], [299, 62259], [237, 62260], [464, 62261], [236, 62262], [333, 62263], [243, 62264], [466, 62265], [242, 62266], [363, 62267], [250, 62268], [468, 62269], [249, 62270], 
  [470, 62271], [472, 62272], [474, 62273], [476, 62274], [252, 62275], 62276, [7871, 62277], 62278, [7873, 62279], [234, 62280], [609, 62281], [643, 63551], [592, 63552], [603, 63553], [596, 63554], [629, 63555], [339, 63556], [248, 63557], [331, 63558], [650, 63559], [618, 63560], {f:2, c:62282}, [11933, 63530], [11974, 63539], [12003, 63547], 20539, 28158, [62841, 171123], 62842, [15817, 62843], 34959, [62845, 147790], 28791, 23797, [19232, 62848], [62849, 152013], [13657, 62850], [62851, 154928], 
  24866, [62853, 166450], 36775, 37366, 29073, 26393, 29626, [62859, 144001], [62860, 172295], [15499, 62861], [62862, 137600], [19216, 62863], 30948, 29698, 20910, [62867, 165647], [16393, 62868], 27235, [62870, 172730], [16931, 62871], 34319, 31274, [62875, 170311], [62876, 166634], 38741, 28749, 21284, [62880, 139390], 37876, 30425, [62883, 166371], 62884, 30685, 20131, 20464, 20668, 20015, 20247, 62891, 21556, 32139, 22674, 22736, [62896, 138678], 24210, 24217, 24514, [62900, 141074], 25995, 
  [62902, 144377], 26905, 27203, [62905, 146531], 27903, 29184, [62909, 148741], 29580, [16091, 62911], [62912, 150035], 23317, 29881, 35715, [62916, 154788], [62917, 153237], 31379, 31724, 31939, 32364, 33528, 34199, 62924, 34960, 62926, 36537, 62928, 36815, 34143, 39392, 37409, 62933, [62934, 167353], [62935, 136255], [16497, 62936], [17058, 62937], 23066, 39016, 26475, [17014, 62944], 22333, 34262, [62948, 149883], 33471, [62950, 160013], [19585, 62951], [62952, 159092], 23931, [62954, 158485], 
  [62955, 159678], {f:2, c:62956}, 23446, 62959, 32347], "Adobe-GB1":[{f:95, c:32}, {f:3, c:12288}, [183, 12539], 713, 711, 168, 12291, 12293, 8212, 65374, 8214, [8230, 8943], {f:2, c:8216}, {f:2, c:8220}, {f:2, c:12308}, {f:8, c:12296}, {f:2, c:12310}, {f:2, c:12304}, 177, 215, 247, 8758, {f:2, c:8743}, 8721, 8719, 8746, 8745, 8712, 8759, 8730, 8869, 8741, 8736, 8978, 8857, 8747, 8750, 8801, 8780, 8776, 8765, 8733, 8800, {f:2, c:8814}, {f:2, c:8804}, 8734, 8757, 8756, 9794, 9792, 176, {f:2, c:8242}, 
  8451, 65284, 164, {f:2, c:65504}, 8240, 167, 8470, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 8251, 8594, {f:2, c:8592}, 8595, 12307, {f:20, c:9352}, {f:20, c:9332}, {f:10, c:9312}, {f:10, c:12832}, {f:12, c:8544}, {f:3, c:65281}, 65509, {f:89, c:65285}, 65507, {f:83, c:12353}, {f:86, c:12449}, {f:17, c:913}, {f:7, c:931}, {f:17, c:945}, {f:7, c:963}, {f:7, c:59277}, {f:2, c:65077}, {f:2, c:65081}, {f:2, c:65087}, {f:2, c:65085}, {f:4, c:65089}, {f:2, c:59284}, {f:2, c:65083}, 
  {f:2, c:65079}, 65073, 59286, {f:2, c:65075}, {f:6, c:1040}, 1025, {f:32, c:1046}, 1105, {f:26, c:1078}, 257, 225, 462, 224, 275, 233, 283, 232, 299, 237, 464, 236, 333, 243, 466, 242, 363, 250, 468, 249, 470, 472, 474, 476, 252, 234, 593, 7743, 324, 328, 505, 609, {f:37, c:12549}, 0, {f:76, c:9472}, {s:126}, 21834, 38463, 22467, 25384, 21710, 21769, 21696, 30353, 30284, 34108, 30702, 33406, 30861, 29233, 38552, 38797, 27688, 23433, 20474, 25353, 26263, 23736, 33018, 26696, 32942, 26114, 30414, 
  20985, 25942, 29100, 32753, 34948, 20658, 22885, 25034, 28595, 33453, 25420, 25170, 21485, 21543, 31494, [12043, 20843], 30116, 24052, 25300, 36299, 38774, 25226, 32793, 22365, 38712, 32610, 29240, [12137, 30333], 26575, 30334, 25670, 20336, 36133, 25308, 31255, 26001, 29677, 25644, 25203, 33324, 39041, 26495, 29256, 25198, 25292, 20276, 29923, 21322, 21150, 32458, 37030, 24110, 26758, 27036, 33152, 32465, 26834, 30917, 34444, 38225, 20621, 35876, 33502, 32990, 21253, 35090, 21093, 34180, 38649, 
  20445, 22561, 39281, 23453, 25265, 25253, 26292, 35961, 40077, 29190, 26479, 30865, 24754, 21329, 21271, 36744, 32972, 36125, 38049, 20493, 29384, 22791, 24811, 28953, 34987, 22868, 33519, 26412, 31528, 23849, 32503, 29997, 27893, 36454, 36856, 36924, [12240, 40763], [12112, 27604], 37145, 31508, 24444, 30887, 34006, 34109, 27605, 27609, 27606, 24065, 24199, 30201, 38381, 25949, 24330, 24517, 36767, 22721, 33218, 36991, 38491, 38829, 36793, 32534, 36140, 25153, 20415, 21464, 21342, {f:2, c:36776}, 
  36779, 36941, 26631, 24426, 33176, 34920, 40150, 24971, 21035, 30250, 24428, 25996, 28626, 28392, 23486, 25672, 20853, 20912, 26564, 19993, 31177, 39292, 28851, 30149, 24182, 29627, 33760, 25773, 25320, 38069, 27874, 21338, 21187, 25615, 38082, 31636, 20271, 24091, 33334, 33046, 33162, 28196, 27850, 39539, 25429, [12056, 21340], 21754, 34917, 22496, 19981, 24067, 27493, 31807, 37096, 24598, 25830, 29468, 35009, 26448, 25165, 36130, 30572, 36393, 37319, 24425, 33756, 34081, 39184, 21442, 34453, 
  27531, 24813, 24808, 28799, 33485, 33329, 20179, 27815, 34255, 25805, 31961, 27133, 26361, 33609, 21397, 31574, 20391, 20876, 27979, 23618, 36461, 25554, 21449, 33580, 33590, 26597, 30900, 25661, 23519, 23700, 24046, 35815, 25286, 26612, 35962, 25600, 25530, 34633, 39307, 35863, 32544, 38130, 20135, 38416, 39076, 26124, 29462, 22330, 23581, 24120, 38271, 20607, 32928, [12058, 21378], 25950, 30021, 21809, 20513, 36229, 25220, 38046, 26397, 22066, 28526, 24034, 21557, 28818, 36710, 25199, 25764, 
  25507, 24443, 28552, 37108, [12162, 33251], [12192, 36784], 23576, 26216, 24561, 27785, 38472, 36225, 34924, 25745, 31216, 22478, 27225, 25104, 21576, 20056, 31243, 24809, 28548, 35802, 25215, 36894, 39563, 31204, 21507, 30196, 25345, 21273, 27744, 36831, 24347, 39536, 32827, 40831, 20360, 23610, [12186, 36196], 32709, 26021, 28861, 20805, 20914, [12173, 34411], 23815, 23456, 25277, 37228, 30068, 36364, 31264, 24833, 31609, 20167, 32504, 30597, 19985, 33261, 21021, 20986, 27249, 21416, 36487, 38148, 
  38607, 28353, 38500, 26970, 30784, 20648, 30679, 25616, 35302, 22788, 25571, 24029, 31359, 26941, 20256, 33337, 21912, 20018, 30126, 31383, 24162, 24202, 38383, 21019, 21561, 28810, 25462, 38180, 22402, 26149, 26943, 37255, 21767, 28147, 32431, 34850, 25139, 32496, 30133, 33576, 30913, 38604, 36766, 24904, 29943, 35789, 27492, 21050, 36176, 27425, 32874, 33905, 22257, 21254, 20174, 19995, 20945, 31895, 37259, 31751, 20419, 36479, 31713, 31388, 25703, 23828, 20652, 33030, 30209, 31929, 28140, 32736, 
  26449, 23384, [12072, 23544], 30923, 25774, 25619, 25514, 25387, 38169, 25645, 36798, 31572, 30249, 25171, [12068, 22823], 21574, [12109, 27513], 20643, 25140, 24102, 27526, 20195, 36151, 34955, 24453, 36910, 24608, 32829, 25285, 20025, 21333, 37112, 25528, 32966, 26086, 27694, 20294, 24814, 28129, 35806, 24377, 34507, 24403, 25377, 20826, 33633, 26723, [12049, 20992], 25443, 36424, 20498, 23707, 31095, 23548, 21040, 31291, 24764, 36947, 30423, 24503, 24471, 30340, 36460, 28783, 30331, 31561, 30634, 
  20979, 37011, 22564, 20302, 28404, 36842, 25932, 31515, 29380, 28068, 32735, 23265, 25269, 24213, 22320, 33922, 31532, 24093, 24351, 36882, 32532, 39072, 25474, 28359, 30872, 28857, 20856, 38747, 22443, 30005, 20291, 30008, 24215, 24806, 22880, 28096, 27583, 30857, 21500, 38613, 20939, 20993, 25481, 21514, 38035, 35843, 36300, 29241, 30879, 34678, 36845, 35853, 21472, 19969, 30447, 21486, 38025, 39030, [12237, 40718], 38189, 23450, 35746, 20002, 19996, 20908, 33891, 25026, 21160, 26635, 20375, 
  24683, 20923, 27934, 20828, 25238, [12099, 26007], 38497, [12182, 35910], 36887, 30168, 37117, 30563, 27602, 29322, 29420, 35835, 22581, 30585, 36172, 26460, 38208, 32922, 24230, 28193, 22930, 31471, 30701, 38203, 27573, 26029, 32526, 22534, 20817, 38431, 23545, 22697, 21544, 36466, 25958, 39039, 22244, 38045, 30462, 36929, 25479, 21702, 22810, 22842, 22427, 36530, 26421, 36346, 33333, 21057, 24816, 22549, 34558, 23784, 40517, 20420, 39069, 35769, 23077, 24694, 21380, 25212, 36943, 37122, 39295, 
  24681, [12157, 32780], [12041, 20799], [12159, 32819], 23572, 39285, 27953, [12038, 20108], 36144, 21457, 32602, 31567, 20240, 20047, 38400, 27861, 29648, 34281, 24070, 30058, 32763, 27146, 30718, 38034, 32321, 20961, 28902, 21453, 36820, 33539, 36137, 29359, 39277, 27867, 22346, 33459, [12101, 26041], 32938, 25151, 38450, 22952, 20223, 35775, 32442, 25918, 33778, [12206, 38750], 21857, 39134, 32933, 21290, 35837, 21536, 32954, 24223, 27832, 36153, 33452, 37210, 21545, 27675, 20998, 32439, 22367, 
  28954, 27774, 31881, 22859, 20221, 24575, 24868, 31914, 20016, 23553, 26539, 34562, 23792, 38155, 39118, 30127, 28925, 36898, 20911, 32541, 35773, 22857, 20964, 20315, 21542, 22827, 25975, 32932, 23413, 25206, 25282, 36752, 24133, 27679, 31526, 20239, 20440, 26381, 28014, 28074, 31119, 34993, 24343, 29995, 25242, 36741, 20463, 37340, 26023, 33071, 33105, 24220, 33104, 36212, 21103, 35206, 36171, 22797, 20613, 20184, [12201, 38428], [12119, 29238], 33145, 36127, 23500, 35747, 38468, 22919, 32538, 
  21648, 22134, 22030, 35813, 25913, 27010, 38041, 30422, 28297, [12082, 24178], [12130, 29976], 26438, 26577, 31487, 32925, 36214, 24863, 31174, 25954, 36195, 20872, 21018, 38050, 32568, 32923, 32434, 23703, 28207, 26464, 31705, 30347, [12220, 39640], 33167, 32660, 31957, 25630, 38224, 31295, 21578, 21733, 27468, 25601, [12093, 25096], 40509, 33011, 30105, 21106, [12208, 38761], 33883, 26684, 34532, 38401, 38548, 38124, 20010, 21508, 32473, 26681, 36319, 32789, 26356, 24218, 32697, 22466, 32831, 
  26775, [12079, 24037], 25915, 21151, 24685, 40858, 20379, 36524, 20844, 23467, [12088, 24339], 24041, 27742, 25329, 36129, 20849, 38057, 21246, 27807, 33503, 29399, 22434, 26500, 36141, 22815, 36764, 33735, 21653, 31629, 20272, 27837, 23396, 22993, [12238, 40723], 21476, 34506, [12219, 39592], [12181, 35895], 32929, 25925, 39038, 22266, 38599, 21038, [12128, 29916], 21072, 23521, 25346, 35074, 20054, 25296, 24618, 26874, 20851, 23448, 20896, 35266, 31649, 39302, 32592, 24815, 28748, 36143, 20809, 
  [12084, 24191], 36891, 29808, 35268, 22317, 30789, 24402, 40863, 38394, 36712, [12225, 39740], 35809, 30328, 26690, 26588, 36330, 36149, 21053, 36746, 28378, 26829, 38149, 37101, 22269, 26524, 35065, 36807, 21704, 39608, 23401, 28023, 27686, 20133, 23475, 39559, 37219, 25E3, 37039, 38889, 21547, 28085, 23506, 20989, 21898, 32597, 32752, 25788, 25421, 26097, 25022, 24717, 28938, 27735, 27721, 22831, 26477, 33322, 22741, 22158, 35946, 27627, 37085, 22909, 32791, 21495, 28009, 21621, 21917, 33655, 
  33743, 26680, [12146, 31166], 21644, 20309, 21512, 30418, 35977, 38402, 27827, 28088, 36203, 35088, 40548, 36154, 22079, [12234, 40657], 30165, 24456, 29408, 24680, 21756, 20136, 27178, 34913, 24658, 36720, 21700, 28888, 34425, 40511, 27946, 23439, 24344, 32418, 21897, 20399, 29492, 21564, 21402, 20505, 21518, 21628, 20046, 24573, 29786, 22774, 33899, 32993, 34676, 29392, 31946, 28246, 24359, 34382, 21804, 25252, 20114, 27818, 25143, 33457, 21719, 21326, 29502, 28369, 30011, 21010, 21270, 35805, 
  27088, 24458, 24576, 28142, 22351, 27426, 29615, 26707, 36824, 32531, 25442, 24739, 21796, 30186, 35938, 28949, 28067, 23462, 24187, 33618, 24908, 40644, 30970, 34647, 31783, 30343, 20976, 24822, 29004, 26179, 24140, 24653, 35854, 28784, 25381, 36745, 24509, 24674, 34516, 22238, 27585, 24724, 24935, 21321, 24800, 26214, 36159, 31229, 20250, 28905, 27719, 35763, 35826, 32472, 33636, 26127, 23130, 39746, 27985, 28151, 35905, 27963, 20249, [12117, 28779], 33719, 25110, 24785, 38669, 36135, 31096, 
  20987, 22334, 22522, 26426, 30072, 31293, 31215, 31637, 32908, 39269, 36857, 28608, 35749, 40481, 23020, 32489, 32521, 21513, 26497, 26840, 36753, 31821, 38598, 21450, 24613, 30142, 27762, 21363, 23241, 32423, 25380, [12047, 20960], 33034, [12080, 24049], 34015, 25216, 20864, 23395, 20238, 31085, 21058, 24760, 27982, 23492, 23490, 35745, 35760, 26082, 24524, 38469, 22931, 32487, 32426, 22025, 26551, 22841, 20339, 23478, 21152, 33626, 39050, 36158, 30002, 38078, 20551, 31292, 20215, 26550, 39550, 
  23233, 27516, 30417, 22362, 23574, 31546, 38388, 29006, 20860, 32937, 33392, 22904, 32516, 33575, 26816, 26604, 30897, 30839, 25315, 25441, 31616, 20461, 21098, 20943, 33616, 27099, 37492, 36341, 36145, 35265, 38190, 31661, 20214, 20581, 33328, 21073, 39279, 28176, 28293, 28071, 24314, 20725, 23004, 23558, 27974, 27743, 30086, 33931, 26728, 22870, 35762, 21280, 37233, 38477, 34121, 26898, 30977, 28966, 33014, 20132, 37066, 27975, 39556, 23047, 22204, 25605, 38128, 30699, 20389, 33050, 29409, [12179, 
  35282], 39290, 32564, 32478, 21119, 25945, 37237, 36735, 36739, 21483, 31382, 25581, 25509, 30342, 31224, 34903, 38454, 25130, 21163, 33410, 26708, 26480, 25463, 30571, 31469, 27905, 32467, 35299, 22992, 25106, 34249, 33445, 30028, 20511, 20171, 30117, 35819, 23626, [12081, 24062], 31563, [12100, 26020], [12198, 37329], 20170, 27941, 35167, 32039, 38182, 20165, 35880, 36827, 38771, 26187, 31105, 36817, 28908, 28024, 23613, 21170, 33606, 20834, 33550, 30555, 26230, 40120, 20140, 24778, 31934, 31923, 
  32463, 20117, 35686, 26223, 39048, 38745, 22659, 25964, 38236, 24452, 30153, 38742, 31455, 31454, 20928, 28847, 31384, 25578, 31350, 32416, 29590, [12210, 38893], 20037, 28792, 20061, 37202, 21417, 25937, 26087, [12165, 33276], 33285, 21646, 23601, 30106, 38816, 25304, 29401, 30141, 23621, 39545, 33738, 23616, 21632, 30697, 20030, 27822, 32858, 25298, 25454, 24040, 20855, 36317, 36382, 38191, 20465, 21477, 24807, 28844, 21095, 25424, 40515, 23071, 20518, 30519, 21367, 32482, 25733, 25899, 25225, 
  25496, 20500, 29237, 35273, 20915, 35776, 32477, 22343, 33740, 38055, 20891, 21531, 23803, 20426, 31459, 27994, 37089, 39567, 21888, 21654, 21345, 21679, 24320, 25577, 26999, 20975, 24936, 21002, 22570, 21208, 22350, 30733, 30475, 24247, 24951, 31968, 25179, 25239, 20130, 28821, 32771, 25335, 28900, 38752, 22391, 33499, 26607, 26869, 30933, 39063, 31185, 22771, 21683, 21487, 28212, 20811, 21051, 23458, 35838, 32943, 21827, 22438, 24691, 22353, 21549, 31354, 24656, 23380, 25511, 25248, [12061, 21475], 
  25187, 23495, 26543, 21741, 31391, 33510, 37239, 24211, 35044, 22840, 22446, 25358, 36328, 33007, 22359, 31607, 20393, 24555, 23485, 27454, 21281, 31568, 29378, 26694, 30719, 30518, 26103, 20917, 20111, 30420, 23743, 31397, 33909, 22862, 39745, 20608, 39304, 24871, 28291, 22372, 26118, 25414, 22256, 25324, 25193, 24275, 38420, 22403, 25289, 21895, 34593, 33098, 36771, 21862, 33713, 26469, 36182, 34013, 23146, 26639, 25318, 31726, 38417, 20848, 28572, 35888, 25597, 35272, 25042, 32518, 28866, 28389, 
  29701, 27028, 29436, 24266, 37070, 26391, 28010, 25438, 21171, 29282, [12156, 32769], 20332, 23013, 37226, 28889, 28061, 21202, 20048, 38647, 38253, 34174, 30922, 32047, 20769, 22418, 25794, 32907, 31867, 27882, 26865, 26974, 20919, 21400, 26792, 29313, 40654, 31729, 29432, 31163, 28435, 29702, 26446, [12197, 37324], 40100, 31036, 33673, 33620, 21519, 26647, 20029, 21385, 21169, 30782, 21382, 21033, 20616, 20363, 20432, 30178, [12148, 31435], 31890, 27813, [12202, 38582], [12050, 21147], 29827, 
  21737, 20457, 32852, 33714, 36830, 38256, 24265, 24604, 28063, 24088, 25947, 33080, 38142, 24651, 28860, 32451, 31918, 20937, 26753, 31921, 33391, 20004, 36742, 37327, 26238, 20142, 35845, 25769, 32842, 20698, 30103, 29134, 23525, 36797, 28518, 20102, 25730, 38243, 24278, 26009, 21015, 35010, 28872, 21155, 29454, 29747, 26519, 30967, 38678, 20020, 37051, 40158, 28107, 20955, 36161, 21533, 25294, 29618, 33777, 38646, 40836, 38083, 20278, 32666, 20940, 28789, 38517, 23725, 39046, 21478, 20196, 28316, 
  29705, 27060, 30827, 39311, 30041, 21016, 30244, 27969, 26611, 20845, 40857, 32843, 21657, 31548, 31423, 38534, 22404, 25314, 38471, 27004, 23044, 25602, 31699, 28431, 38475, 33446, 21346, 39045, 24208, 28809, 25523, 21348, 34383, 40065, 40595, 30860, 38706, 36335, 36162, [12229, 40575], 28510, 31108, 24405, 38470, 25134, 39540, 21525, 38109, 20387, 26053, 23653, 23649, 32533, 34385, 27695, 24459, 29575, 28388, 32511, 23782, 25371, 23402, 28390, 21365, 20081, 25504, 30053, 25249, 36718, 20262, 
  20177, 27814, 32438, 35770, 33821, 34746, 32599, 36923, 38179, 31657, 39585, 35064, 33853, 27931, 39558, 32476, 22920, [12231, 40635], 29595, 30721, 34434, 39532, 39554, 22043, 21527, 22475, 20080, 40614, 21334, 36808, 33033, 30610, 39314, 34542, 28385, 34067, 26364, 24930, 28459, 35881, 33426, 33579, 30450, 27667, 24537, 33725, 29483, 33541, 38170, [12113, 27611], [12141, 30683], 38086, 21359, 33538, 20882, 24125, 35980, 36152, 20040, 29611, 26522, 26757, 37238, 38665, 29028, 27809, 30473, 23186, 
  38209, 27599, 32654, 26151, 23504, 22969, 23194, 38376, 38391, 20204, 33804, 33945, 27308, 30431, 38192, 29467, 26790, 23391, 30511, 37274, 38753, 31964, 36855, 35868, 24357, [12150, 31859], 31192, 35269, 27852, 34588, 23494, 24130, 26825, 30496, 32501, 20885, 20813, 21193, 23081, 32517, [12207, 38754], 33495, 25551, 30596, 34256, 31186, 28218, 24217, 22937, 34065, 28781, 27665, 25279, [12139, 30399], 25935, 24751, 38397, 26126, 34719, 40483, 38125, 21517, 21629, 35884, {f:2, c:25720}, 34321, 27169, 
  33180, 30952, 25705, 39764, 25273, 26411, 33707, 22696, 40664, 27819, 28448, 23518, 38476, 35851, 29279, 26576, 25287, 29281, 20137, 22982, 27597, 22675, 26286, 24149, 21215, 24917, [12106, 26408], [12140, 30446], 30566, 29287, 31302, 25343, 21738, 21584, 38048, 37027, 23068, 32435, 27670, 20035, 22902, 32784, 22856, 21335, 30007, 38590, 22218, 25376, 33041, 24700, 38393, 28118, 21602, 39297, 20869, 23273, 33021, 22958, 38675, 20522, 27877, 23612, 25311, 20320, 21311, 33147, 36870, 28346, 34091, 
  25288, 24180, 30910, 25781, 25467, 24565, 23064, 37247, 40479, 23615, 25423, 32834, 23421, 21870, 38218, 38221, 28037, 24744, 26592, 29406, 20957, 23425, 25319, 27870, [12124, 29275], 25197, 38062, 32445, 33043, 27987, 20892, 24324, 22900, 21162, 24594, [12069, 22899], 26262, 34384, 30111, 25386, 25062, 31983, 35834, 21734, 27431, 40485, 27572, 34261, 21589, 20598, 27812, 21866, 36276, 29228, 24085, 24597, 29750, 25293, 25490, 29260, 24472, 28227, 27966, 25856, 28504, 30424, 30928, 30460, 30036, 
  21028, 21467, 20051, 24222, 26049, 32810, 32982, 25243, 21638, 21032, 28846, 34957, 36305, 27873, 21624, 32986, 22521, 35060, 36180, 38506, 37197, 20329, 27803, 21943, 30406, 30768, 25256, 28921, 28558, 24429, 34028, 26842, 30844, 31735, 33192, 26379, 40527, 25447, 30896, 22383, 30738, 38713, 25209, 25259, 21128, 29749, 27607, 21860, 33086, 30130, [12138, 30382], 21305, 30174, 20731, 23617, 35692, 31687, 20559, [12122, 29255], 39575, 39128, 28418, 29922, 31080, 25735, 30629, 25340, 39057, 36139, 
  21697, 32856, 20050, 22378, 33529, 33805, 24179, 20973, 29942, 35780, 23631, 22369, 27900, 39047, 23110, 30772, 39748, 36843, 31893, 21078, 25169, 38138, 20166, 33670, 33889, 33769, 33970, 22484, 26420, 22275, 26222, 28006, 35889, 26333, 28689, 26399, 27450, 26646, 25114, 22971, 19971, 20932, 28422, 26578, 27791, 20854, 26827, 22855, 27495, 30054, 23822, 33040, 40784, 26071, 31048, 31041, 39569, 36215, 23682, 20062, 20225, 21551, 22865, 30732, 22120, [12115, 27668], 36804, 24323, 27773, 27875, 
  35755, 25488, 24688, 27965, 29301, 25190, 38030, 38085, 21315, 36801, 31614, 20191, 35878, 20094, 40660, 38065, 38067, 21069, 28508, 36963, 27973, 35892, 22545, 23884, [12107, 27424], 27465, 26538, 21595, 33108, 32652, 22681, 34103, 24378, 25250, 27207, 38201, 25970, 24708, 26725, 30631, 20052, 20392, 24039, 38808, 25772, 32728, 23789, 20431, 31373, 20999, 33540, 19988, 24623, 31363, 38054, 20405, 20146, 31206, 29748, 21220, 33465, 25810, 31165, 23517, 27777, 38738, 36731, 27682, 20542, 21375, 
  28165, 25806, 26228, 27696, 24773, 39031, 35831, 24198, 29756, 31351, 31179, 19992, 37041, 29699, 27714, 22234, 37195, 27845, 36235, 21306, 34502, 26354, 36527, 23624, 39537, 28192, 21462, 23094, 40843, 36259, 21435, 22280, 39079, 26435, 37275, 27849, 20840, 30154, 25331, [12125, 29356], 21048, 21149, 32570, 28820, 30264, 21364, 40522, 27063, 30830, 38592, 35033, 32676, 28982, 29123, 20873, 26579, 29924, 22756, 25880, 22199, 35753, 39286, 25200, 32469, 24825, 28909, 22764, 20161, [12040, 20154], 
  24525, 38887, 20219, 35748, 20995, 22922, 32427, 25172, 20173, [12103, 26085], 25102, 33592, 33993, 33635, 34701, 29076, 28342, 23481, 32466, 20887, 25545, 26580, [12161, 32905], 33593, 34837, 20754, 23418, 22914, 36785, 20083, 27741, [12042, 20837], 35109, 36719, 38446, 34122, 29790, 38160, 38384, 28070, 33509, 24369, 25746, 27922, 33832, 33134, 40131, 22622, 36187, 19977, 21441, 20254, 25955, 26705, 21971, 20007, 25620, 39578, 25195, 23234, 29791, [12170, 33394], 28073, 26862, 20711, 33678, 30722, 
  26432, 21049, 27801, 32433, 20667, 21861, 29022, 31579, 26194, 29642, 33515, 26441, [12077, 23665], 21024, 29053, 34923, 38378, 38485, 25797, 36193, 33203, 21892, 27733, 25159, 32558, 22674, 20260, 21830, 36175, 26188, 19978, 23578, 35059, 26786, 25422, 31245, 28903, 33421, 21242, 38902, 23569, 21736, 37045, 32461, 22882, 36170, 34503, [12166, 33292], 33293, 36198, 25668, 23556, 24913, 28041, 31038, 35774, 30775, 30003, 21627, 20280, [12189, 36523], 28145, 23072, 32453, 31070, 27784, 23457, 23158, 
  29978, 32958, 24910, 28183, 22768, [12131, 29983], 29989, 29298, 21319, 32499, 30465, 30427, 21097, 32988, 22307, 24072, 22833, 29422, 26045, 28287, 35799, [12075, 23608], 34417, [12055, 21313], [12143, 30707], 25342, 26102, 20160, [12215, 39135], 34432, 23454, 35782, 21490, [12142, 30690], 20351, 23630, 39542, 22987, 24335, [12144, 31034], [12064, 22763], 19990, 26623, 20107, 25325, 35475, 36893, 21183, 26159, 21980, 22124, 36866, 20181, 20365, 37322, 39280, [12114, 27663], 24066, 24643, 23460, 
  35270, 35797, 25910, [12095, 25163], [12216, 39318], 23432, 23551, 25480, 21806, 21463, 30246, 20861, 34092, 26530, 26803, 27530, 25234, 36755, 21460, 33298, 28113, 30095, 20070, 36174, 23408, 29087, 34223, 26257, 26329, 32626, 34560, [12233, 40653], [12239, 40736], 23646, 26415, 36848, 26641, 26463, 25101, 31446, 22661, 24246, 25968, 28465, 24661, 21047, 32781, 25684, 34928, 29993, 24069, 26643, 25332, 38684, 21452, 29245, 35841, [12116, 27700], 30561, 31246, 21550, 30636, 39034, 33308, 35828, 
  30805, 26388, 28865, 26031, 25749, 22070, 24605, 31169, 21496, 19997, 27515, 32902, 23546, 21987, 22235, 20282, 20284, 39282, 24051, 26494, 32824, 24578, 39042, 36865, 23435, 35772, 35829, 25628, 33368, 25822, 22013, 33487, 37221, 20439, 32032, 36895, 31903, 20723, 22609, 28335, 23487, 35785, 32899, 37240, 33948, 31639, 34429, 38539, 38543, 32485, 39635, 30862, 23681, 31319, 36930, 38567, 31071, 23385, 25439, 31499, 34001, 26797, 21766, 32553, 29712, 32034, 38145, 25152, 22604, 20182, 23427, 22905, 
  22612, 29549, 25374, 36427, 36367, 32974, 33492, 25260, 21488, 27888, 37214, 22826, 24577, 27760, 22349, 25674, 36138, 30251, 28393, 22363, 27264, 30192, 28525, 35885, 35848, 22374, 27631, 34962, 30899, 25506, 21497, 28845, 27748, 22616, 25642, 22530, 26848, 33179, 21776, 31958, 20504, 36538, 28108, 36255, 28907, 25487, 28059, 28372, 32486, 33796, 26691, 36867, 28120, 38518, 35752, 22871, 29305, 34276, 33150, 30140, 35466, 26799, 21076, 36386, 38161, 25552, 39064, 36420, 21884, 20307, 26367, 22159, 
  24789, 28053, 21059, 23625, 22825, 28155, 22635, [12133, 3E4], 29980, 24684, 33300, 33094, 25361, 26465, 36834, 30522, 36339, 36148, 38081, 24086, 21381, 21548, 28867, 27712, 24311, 20572, 20141, 24237, 25402, 33351, 36890, 26704, 37230, 30643, 21516, 38108, 24420, 31461, 26742, 25413, 31570, 32479, 30171, 20599, 25237, 22836, 36879, 20984, 31171, 31361, 22270, 24466, 36884, 28034, 23648, [12063, 22303], 21520, 20820, 28237, 22242, 25512, 39059, 33151, 34581, 35114, 36864, 21534, 23663, 33216, 
  25302, 25176, 33073, 40501, 38464, 39534, 39548, 26925, 22949, 25299, 21822, 25366, 21703, 34521, 27964, 23043, [12129, 29926], 34972, 27498, 22806, 35916, 24367, 28286, 29609, 39037, 20024, 28919, 23436, 30871, 25405, 26202, 30358, 24779, 23451, 23113, 19975, 33109, 27754, 29579, 20129, 26505, [12153, 32593], 24448, 26106, 26395, 24536, 22916, 23041, 24013, 24494, 21361, 38886, 36829, 26693, 22260, 21807, 24799, 20026, 28493, 32500, 33479, 33806, 22996, 20255, 20266, 23614, 32428, 26410, 34074, 
  21619, 30031, 32963, 21890, 39759, 20301, 28205, 35859, 23561, 24944, 21355, 30239, 28201, 34442, [12098, 25991], 38395, 32441, 21563, 31283, 32010, 38382, 21985, 32705, 29934, 25373, 34583, 28065, 31389, 25105, 26017, 21351, 25569, 27779, 24043, 21596, 38056, 20044, 27745, 35820, 23627, [12102, 26080], 33436, 26791, 21566, 21556, [12111, 27595], 27494, 20116, 25410, 21320, 33310, 20237, 20398, 22366, 25098, 38654, 26212, 29289, 21247, 21153, 24735, 35823, 26132, 29081, 26512, 35199, 30802, 30717, 
  26224, 22075, 21560, 38177, 29306, 31232, 24687, 24076, 24713, 33181, [12067, 22805], 24796, 29060, 28911, 28330, 27728, 29312, 27268, 34989, 24109, 20064, 23219, 21916, 38115, 27927, 31995, 38553, 25103, 32454, 30606, 34430, 21283, 38686, 36758, 26247, 23777, 20384, 29421, 19979, 21414, 22799, 21523, 25472, 38184, 20808, 20185, 40092, 32420, 21688, 36132, 34900, 33335, 38386, 28046, 24358, 23244, 26174, 38505, 29616, 29486, 21439, 33146, 39301, 32673, 23466, 38519, 38480, 32447, 30456, 21410, 
  38262, [12217, 39321], 31665, 35140, 28248, 20065, 32724, 31077, 35814, 24819, 21709, 20139, 39033, 24055, 27233, 20687, 21521, 35937, 33831, 30813, 38660, 21066, 21742, 22179, 38144, 28040, 23477, 28102, 26195, [12073, 23567], 23389, 26657, 32918, 21880, 31505, 25928, 26964, 20123, 27463, 34638, 38795, 21327, 25375, 25658, 37034, 26012, 32961, 35856, 20889, 26800, 21368, 34809, 25032, 27844, 27899, 35874, 23633, 34218, 33455, 38156, 27427, [12191, 36763], 26032, 24571, [12092, 24515], 20449, 34885, 
  26143, 33125, 29481, 24826, 20852, 21009, 22411, 24418, 37026, [12175, 34892], 37266, 24184, 26447, 24615, 22995, 20804, 20982, 33016, 21256, 27769, 38596, 29066, 20241, 20462, 32670, 26429, 21957, 38152, 31168, 34966, 32483, 22687, 25100, 38656, 34394, 22040, 39035, 24464, 35768, 33988, 37207, 21465, 26093, 24207, 30044, 24676, 32110, 23167, 32490, 32493, 36713, 21927, 23459, 24748, 26059, [12126, 29572], 36873, 30307, 30505, 32474, 38772, 34203, 23398, [12147, 31348], 38634, [12174, 34880], 21195, 
  29071, 24490, 26092, 35810, 23547, 39535, 24033, 27529, 27739, 35757, 35759, 36874, 36805, 21387, 25276, 40486, 40493, 21568, 20011, 33469, [12123, 29273], 34460, 23830, 34905, 28079, 38597, 21713, 20122, 35766, 28937, 21693, 38409, 28895, 28153, 30416, 20005, 30740, 34578, 23721, 24310, [12180, 35328], 39068, 38414, 28814, 27839, 22852, 25513, 30524, 34893, 28436, 33395, 22576, 29141, 21388, 30746, 38593, 21761, 24422, 28976, 23476, 35866, 39564, 27523, 22830, 40495, 31207, 26472, 25196, 20335, 
  30113, [12154, 32650], 27915, 38451, 27687, 20208, 30162, 20859, 26679, 28478, 36992, 33136, 22934, 29814, 25671, 23591, 36965, 31377, 35875, 23002, 21676, 33280, 33647, 35201, 32768, 26928, 22094, 32822, 29239, 37326, 20918, 20063, 39029, 25494, 19994, 21494, 26355, 33099, 22812, 28082, [12032, 19968], 22777, 21307, 25558, 38129, 20381, 20234, [12176, 34915], 39056, 22839, 36951, 31227, 20202, 33008, 30097, 27778, 23452, 23016, 24413, 26885, 34433, 20506, 24050, [12036, 20057], 30691, 20197, 33402, 
  25233, 26131, [12194, 37009], 23673, 20159, 24441, 33222, 36920, 32900, 30123, 20134, 35028, 24847, 27589, 24518, 20041, 30410, 28322, 35811, 35758, 35850, 35793, 24322, 32764, 32716, 32462, 33589, 33643, 22240, 27575, [12211, 38899], 38452, 23035, 21535, 38134, 28139, 23493, 39278, 23609, 24341, 38544, 21360, 33521, 27185, 23156, 40560, 24212, 32552, 33721, {f:2, c:33828}, 33639, 34631, 36814, 36194, 30408, 24433, 39062, 30828, 26144, 21727, 25317, 20323, 33219, 30152, 24248, 38605, 36362, 34553, 
  21647, 27891, 28044, 27704, 24703, 21191, [12132, 29992], 24189, 20248, 24736, 24551, 23588, 30001, 37038, 38080, 29369, 27833, 28216, [12195, 37193], 26377, 21451, 21491, 20305, 37321, 35825, [12060, 21448], 24188, 36802, 28132, 20110, 30402, 27014, 34398, 24858, 33286, 20313, 20446, 36926, 40060, 24841, 28189, 28180, 38533, 20104, 23089, [12204, 38632], 19982, 23679, 31161, 23431, 35821, [12155, 32701], [12127, 29577], 22495, 33419, 37057, 21505, 36935, 21947, 23786, 24481, 24840, 27442, 29425, 
  32946, 35465, 28020, 23507, 35029, 39044, 35947, 39533, 40499, 28170, 20900, 20803, 22435, 34945, 21407, 25588, 36757, 22253, 21592, 22278, 29503, 28304, 32536, 36828, 33489, 24895, 24616, 38498, [12104, 26352], 32422, 36234, 36291, 38053, 23731, 31908, [12105, 26376], 24742, 38405, 32792, 20113, 37095, 21248, 38504, 20801, 36816, 34164, 37213, 26197, 38901, 23381, 21277, 30776, 26434, 26685, 21705, 28798, 23472, 36733, 20877, 22312, 21681, 25874, 26242, 36190, 36163, 33039, 33900, 36973, 31967, 
  20991, 34299, 26531, 26089, 28577, 34468, 36481, 22122, 36896, 30338, 28790, 29157, 36131, 25321, 21017, 27901, 36156, 24590, 22686, 24974, 26366, 36192, 25166, 21939, 28195, 26413, 36711, 38113, 38392, 30504, 26629, 27048, 21643, 20045, 28856, 35784, 25688, 25995, 23429, 31364, 20538, 23528, 30651, 27617, 35449, 31896, 27838, 30415, 26025, 36759, 23853, 23637, 34360, 26632, 21344, 25112, 31449, 28251, 32509, 27167, 31456, 24432, 28467, 24352, 25484, 28072, 26454, 19976, 24080, 36134, 20183, 32960, 
  30260, 38556, 25307, 26157, 25214, 27836, 36213, 29031, 32617, 20806, 32903, 21484, 36974, 25240, 21746, 34544, 36761, 32773, 38167, 34071, 36825, 27993, 29645, 26015, 30495, 29956, 30759, 33275, 36126, 38024, 20390, 26517, 30137, 35786, 38663, 25391, 38215, 38453, 33976, 25379, 30529, 24449, 29424, 20105, 24596, 25972, 25327, 27491, 25919, 24103, 30151, 37073, 35777, 33437, 26525, [12096, 25903], 21553, 34584, 30693, 32930, 33026, 27713, 20043, 32455, 32844, 30452, 26893, 27542, 25191, 20540, 
  20356, 22336, 25351, [12108, 27490], 36286, 21482, 26088, 32440, 24535, 25370, 25527, [12164, 33267], 33268, 32622, 24092, 23769, 21046, 26234, 31209, 31258, 36136, 28825, 30164, 28382, 27835, 31378, 20013, 30405, 24544, 38047, 34935, 32456, 31181, 32959, 37325, 20210, 20247, [12168, 33311], 21608, 24030, 27954, 35788, 31909, 36724, 32920, 24090, 21650, 30385, 23449, 26172, 39588, 29664, 26666, 34523, 26417, 29482, 35832, 35803, 36880, [12149, 31481], 28891, 29038, 25284, 30633, 22065, 20027, 33879, 
  26609, 21161, 34496, 36142, 38136, 31569, 20303, 27880, 31069, 39547, 25235, [12118, 29226], 25341, 19987, 30742, 36716, 25776, 36186, 31686, 26729, 24196, 35013, 22918, 25758, 22766, 29366, 26894, 38181, 36861, 36184, 22368, 32512, 35846, 20934, 25417, 25305, 21331, 26700, 29730, 33537, 37196, 21828, 30528, 28796, 27978, 20857, 21672, 36164, 23039, 28363, 28100, 23388, 32043, 20180, 31869, 28371, [12070, 23376], [12163, 33258], 28173, 23383, 39683, 26837, 36394, 23447, 32508, 24635, 32437, 37049, 
  [12187, 36208], 22863, 25549, 31199, [12188, 36275], 21330, 26063, 31062, 35781, 38459, 32452, 38075, 32386, 22068, 37257, 26368, 32618, 23562, 36981, 26152, 24038, 20304, 26590, 20570, 20316, 22352, 24231, 20109, 19980, 20800, 19984, 24319, 21317, 19989, 20120, 19998, [12224, 39730], 23404, 22121, [12033, 20008], 31162, [12035, 20031], [12052, 21269], 20039, 22829, [12120, 29243], 21358, 27664, 22239, 32996, 39319, 27603, 30590, 40727, [12034, 20022], 20127, 40720, 20060, 20073, 20115, 33416, 
  23387, 21868, 22031, 20164, 21389, 21405, 21411, 21413, 21422, 38757, 36189, [12053, 21274], 21493, 21286, 21294, 21310, 36188, 21350, 21347, 20994, 21E3, 21006, 21037, 21043, {f:2, c:21055}, 21068, 21086, 21089, 21084, 33967, 21117, 21122, 21121, 21136, 21139, [12044, 20866], 32596, 20155, 20163, 20169, 20162, 20200, 20193, 20203, 20190, 20251, 20211, 20258, 20324, 20213, 20261, 20263, 20233, 20267, 20318, 20327, 25912, 20314, 20317, 20319, 20311, 20274, 20285, 20342, 20340, 20369, 20361, 20355, 
  20367, 20350, 20347, 20394, 20348, 20396, 20372, 20454, 20456, 20458, 20421, 20442, 20451, 20444, 20433, 20447, 20472, 20521, 20556, 20467, 20524, 20495, 20526, 20525, 20478, 20508, 20492, 20517, 20520, 20606, 20547, 20565, 20552, 20558, 20588, 20603, 20645, 20647, 20649, 20666, 20694, 20742, 20717, 20716, 20710, 20718, 20743, 20747, 20189, 27709, 20312, 20325, 20430, [12245, 40864], 27718, 31860, 20846, 24061, 40649, 39320, 20865, 22804, [12051, 21241], 21261, 35335, 21264, 20971, 22809, 20821, 
  [12039, 20128], 20822, 20147, 34926, 34980, 20149, 33044, 35026, 31104, 23348, 34819, 32696, [12046, 20907], 20913, 20925, 20924, 20935, [12045, 20886], 20898, 20901, 35744, {f:2, c:35750}, 35754, {f:2, c:35764}, 35767, {f:2, c:35778}, 35787, 35791, 35790, {f:3, c:35794}, 35798, {f:2, c:35800}, 35804, {f:2, c:35807}, 35812, {f:2, c:35816}, 35822, 35824, 35827, 35830, 35833, 35836, {f:2, c:35839}, 35842, 35844, 35847, 35852, 35855, {f:2, c:35857}, {f:3, c:35860}, 35865, 35867, 35864, 35869, {f:3, 
  c:35871}, 35877, 35879, {f:2, c:35882}, {f:2, c:35886}, {f:2, c:35890}, {f:2, c:35893}, [12057, 21353], 21370, 38429, 38434, 38433, 38449, 38442, 38461, 38460, 38466, 38473, 38484, 38495, 38503, 38508, 38514, 38516, 38536, 38541, 38551, 38576, 37015, 37019, 37021, 37017, 37036, 37025, 37044, 37043, 37046, 37050, 37048, 37040, 37071, 37061, 37054, 37072, 37060, 37063, 37075, 37094, 37090, 37084, 37079, 37083, 37099, 37103, 37118, 37124, 37154, 37150, 37155, 37169, 37167, 37177, 37187, 37190, 21005, 
  22850, 21154, {f:2, c:21164}, 21182, 21759, 21200, 21206, 21232, 21471, 29166, 30669, [12085, 24308], [12048, 20981], 20988, [12223, 39727], [12059, 21430], 24321, 30042, 24047, 22348, 22441, 22433, 22654, 22716, 22725, 22737, 22313, 22316, 22314, 22323, 22329, {f:2, c:22318}, 22364, 22331, 22338, 22377, 22405, 22379, 22406, 22396, 22395, 22376, 22381, 22390, 22387, 22445, 22436, 22412, 22450, 22479, 22439, 22452, 22419, 22432, 22485, 22488, 22490, 22489, 22482, 22456, 22516, 22511, 22520, 22500, 
  22493, 22539, 22541, 22525, 22509, 22528, 22558, 22553, 22596, 22560, 22629, 22636, 22657, 22665, 22682, 22656, 39336, 40729, 25087, 33401, 33405, 33407, 33423, 33418, 33448, 33412, 33422, 33425, 33431, 33433, 33451, 33464, 33470, 33456, 33480, 33482, 33507, 33432, 33463, 33454, {f:2, c:33483}, 33473, 33449, 33460, 33441, 33450, 33439, 33476, 33486, 33444, 33505, 33545, 33527, 33508, 33551, 33543, 33500, 33524, 33490, 33496, 33548, 33531, 33491, 33553, 33562, 33542, {f:2, c:33556}, 33504, 33493, 
  33564, 33617, {f:2, c:33627}, 33544, 33682, 33596, 33588, 33585, 33691, 33630, 33583, 33615, 33607, 33603, 33631, 33600, 33559, 33632, 33581, 33594, 33587, 33638, 33637, 33640, 33563, 33641, 33644, 33642, {f:2, c:33645}, 33712, 33656, {f:2, c:33715}, 33696, 33706, 33683, 33692, 33669, 33660, 33718, 33705, 33661, 33720, 33659, 33688, 33694, 33704, 33722, 33724, 33729, 33793, 33765, 33752, 22535, 33816, 33803, 33757, 33789, 33750, 33820, 33848, 33809, 33798, 33748, 33759, 33807, 33795, {f:2, c:33784}, 
  33770, 33733, 33728, 33830, 33776, 33761, 33884, 33873, 33882, 33881, 33907, {f:2, c:33927}, 33914, 33929, 33912, 33852, 33862, 33897, 33910, 33932, 33934, 33841, 33901, 33985, 33997, 34E3, 34022, 33981, 34003, 33994, 33983, 33978, 34016, 33953, 33977, 33972, 33943, 34021, 34019, 34060, 29965, 34104, 34032, 34105, 34079, 34106, 34134, 34107, 34047, 34044, 34137, 34120, 34152, 34148, 34142, 34170, 30626, 34115, 34162, 34171, 34212, 34216, 34183, 34191, 34169, 34222, 34204, 34181, 34233, 34231, 34224, 
  34259, 34241, 34268, 34303, 34343, 34309, 34345, 34326, 34364, [12086, 24318], 24328, 22844, 22849, 32823, 22869, 22874, 22872, 21263, [12074, 23586], 23589, 23596, 23604, 25164, 25194, 25247, 25275, 25290, 25306, 25303, 25326, 25378, 25334, 25401, 25419, 25411, 25517, 25590, 25457, 25466, 25486, 25524, 25453, 25516, 25482, 25449, 25518, 25532, 25586, 25592, 25568, 25599, 25540, 25566, 25550, 25682, 25542, 25534, 25669, 25665, 25611, 25627, 25632, 25612, 25638, 25633, 25694, 25732, 25709, 25750, 
  25722, {f:2, c:25783}, 25753, 25786, 25792, 25808, 25815, 25828, 25826, 25865, 25893, 25902, [12087, 24331], 24530, 29977, 24337, 21343, 21489, 21501, 21481, 21480, 21499, 21522, 21526, 21510, 21579, {f:3, c:21586}, 21590, 21571, 21537, 21591, 21593, 21539, 21554, 21634, 21652, 21623, 21617, 21604, {f:2, c:21658}, 21636, 21622, 21606, 21661, 21712, 21677, 21698, 21684, 21714, 21671, 21670, {f:2, c:21715}, 21618, 21667, 21717, 21691, 21695, 21708, {f:2, c:21721}, 21724, {f:2, c:21673}, 21668, 21725, 
  21711, 21726, 21787, 21735, 21792, 21757, 21780, 21747, {f:2, c:21794}, 21775, 21777, 21799, 21802, 21863, 21903, 21941, 21833, 21869, 21825, 21845, 21823, 21840, 21820, 21815, 21846, {f:3, c:21877}, 21811, 21808, 21852, 21899, 21970, 21891, 21937, 21945, 21896, 21889, 21919, 21886, 21974, 21905, 21883, 21983, {f:2, c:21949}, 21908, 21913, 21994, 22007, 21961, 22047, 21969, {f:2, c:21995}, 21972, 21990, 21981, 21956, 21999, 21989, {f:2, c:22002}, {f:2, c:21964}, 21992, 22005, 21988, 36756, 22046, 
  22024, 22028, 22017, 22052, 22051, 22014, 22016, 22055, 22061, 22104, 22073, 22103, 22060, 22093, 22114, 22105, 22108, 22092, 22100, 22150, 22116, 22129, 22123, {f:2, c:22139}, 22149, 22163, 22191, 22228, [12062, 22231], 22237, 22241, 22261, 22251, 22265, 22271, 22276, 22282, 22281, 22300, 24079, 24089, 24084, 24081, 24113, {f:2, c:24123}, 24119, 24132, 24148, 24155, 24158, 24161, 23692, 23674, 23693, 23696, 23702, 23688, {f:2, c:23704}, 23697, 23706, 23708, 23733, 23714, 23741, 23724, 23723, 23729, 
  23715, 23745, 23735, 23748, 23762, 23780, 23755, 23781, {f:2, c:23810}, 23847, 23846, 23854, 23844, 23838, 23814, 23835, 23896, 23870, 23860, 23869, 23916, 23899, 23919, 23901, 23915, 23883, 23882, 23913, 23924, 23938, 23961, 23965, 35955, 23991, 24005, [12091, 24435], 24439, 24450, 24455, 24457, 24460, 24469, 24473, 24476, 24488, 24493, 24501, 24508, 34914, [12090, 24417], 29357, 29360, 29364, {f:2, c:29367}, 29379, 29377, 29390, 29389, 29394, 29416, 29423, 29417, 29426, 29428, 29431, 29441, 29427, 
  29443, {f:2, c:29434}, 29463, 29459, 29473, 29450, 29470, 29469, 29461, 29474, 29497, 29477, 29484, 29496, 29489, 29520, 29517, 29527, 29536, 29548, 29551, 29566, [12167, 33307], 22821, 39143, 22820, [12065, 22786], 39267, {f:6, c:39271}, 39284, 39287, 39293, 39296, 39300, 39303, 39306, 39309, {f:2, c:39312}, {f:3, c:39315}, 24192, 24209, 24203, 24214, 24229, 24224, 24249, 24245, 24254, 24243, 36179, 24274, 24273, 24283, 24296, 24298, 33210, 24516, 24521, 24534, 24527, 24579, 24558, 24580, 24545, 
  24548, 24574, {f:2, c:24581}, 24554, 24557, 24568, 24601, 24629, 24614, 24603, 24591, 24589, 24617, 24619, 24586, 24639, 24609, {f:2, c:24696}, 24699, 24698, 24642, 24682, 24701, 24726, 24730, 24749, 24733, 24707, 24722, 24716, 24731, 24812, 24763, 24753, 24797, 24792, 24774, 24794, 24756, 24864, 24870, 24853, 24867, 24820, 24832, 24846, 24875, 24906, 24949, 25004, 24980, 24999, 25015, 25044, 25077, 24541, 38579, 38377, 38379, 38385, 38387, {f:2, c:38389}, 38396, 38398, {f:2, c:38403}, 38406, 38408, 
  {f:4, c:38410}, 38415, 38418, {f:3, c:38421}, {f:2, c:38425}, 20012, [12121, 29247], 25109, 27701, 27732, 27740, 27722, 27811, 27781, 27792, 27796, 27788, {f:2, c:27752}, 27764, 27766, 27782, 27817, 27856, 27860, 27821, {f:2, c:27895}, 27889, 27863, 27826, 27872, 27862, 27898, 27883, 27886, 27825, 27859, 27887, 27902, 27961, 27943, 27916, 27971, 27976, 27911, 27908, 27929, 27918, 27947, 27981, 27950, 27957, 27930, 27983, 27986, 27988, 27955, 28049, 28015, 28062, 28064, 27998, {f:2, c:28051}, 27996, 
  28E3, 28028, 28003, 28186, 28103, 28101, 28126, 28174, 28095, 28128, 28177, 28134, 28125, 28121, 28182, 28075, 28172, 28078, 28203, 28270, 28238, 28267, 28338, 28255, 28294, {f:2, c:28243}, 28210, 28197, 28228, 28383, 28337, 28312, 28384, 28461, 28386, 28325, 28327, 28349, 28347, 28343, 28375, 28340, 28367, 28303, 28354, 28319, 28514, {f:2, c:28486}, 28452, 28437, 28409, 28463, 28470, 28491, 28532, 28458, 28425, 28457, 28553, 28557, 28556, 28536, 28530, 28540, 28538, 28625, 28617, 28583, 28601, 
  28598, 28610, 28641, 28654, 28638, 28640, 28655, 28698, 28707, 28699, 28729, 28725, 28751, 28766, [12071, 23424], 23428, 23445, 23443, 23461, 23480, 29999, 39582, 25652, 23524, 23534, 35120, 23536, 36423, 35591, 36790, 36819, 36821, 36837, 36846, 36836, 36841, 36838, 36851, 36840, 36869, 36868, 36875, 36902, 36881, 36877, 36886, 36897, {f:2, c:36917}, 36909, 36911, 36932, {f:2, c:36945}, 36944, 36968, 36952, 36962, 36955, 26297, 36980, 36989, 36994, 37E3, 36995, 37003, [12089, 24400], 24407, 24406, 
  24408, 23611, 21675, 23632, 23641, 23409, 23651, 23654, 32700, 24362, 24361, 24365, 33396, 24380, 39739, [12076, 23662], 22913, 22915, 22925, {f:2, c:22953}, 22947, 22935, 22986, 22955, 22942, 22948, 22994, 22962, 22959, 22999, 22974, {f:2, c:23045}, 23005, 23048, 23011, 23E3, 23033, 23052, 23049, 23090, 23092, 23057, 23075, 23059, 23104, 23143, 23114, 23125, 23100, 23138, 23157, 33004, 23210, 23195, 23159, 23162, 23230, 23275, 23218, 23250, 23252, 23224, 23264, 23267, 23281, 23254, 23270, 23256, 
  23260, 23305, 23319, 23318, 23346, 23351, 23360, 23573, 23580, 23386, 23397, 23411, 23377, 23379, 23394, 39541, {f:2, c:39543}, 39546, 39551, 39549, {f:2, c:39552}, 39557, 39560, 39562, 39568, {f:2, c:39570}, 39574, 39576, {f:3, c:39579}, {f:2, c:39583}, {f:2, c:39586}, 39589, 39591, 32415, 32417, 32419, 32421, {f:2, c:32424}, 32429, 32432, 32446, {f:3, c:32448}, 32457, {f:2, c:32459}, 32464, 32468, 32471, 32475, {f:2, c:32480}, 32488, 32491, {f:2, c:32494}, {f:2, c:32497}, 32525, 32502, {f:2, 
  c:32506}, 32510, {f:3, c:32513}, {f:2, c:32519}, {f:2, c:32523}, 32527, {f:2, c:32529}, 32535, 32537, 32540, 32539, 32543, {f:7, c:32545}, {f:4, c:32554}, {f:5, c:32559}, 32565, [12083, 24186], 30079, [12078, 24027], 30014, 37013, 29582, 29585, 29614, 29602, 29599, 29647, 29634, 29649, 29623, 29619, 29632, 29641, 29640, 29669, 29657, 39036, 29706, 29673, 29671, 29662, 29626, 29682, 29711, 29738, 29787, 29734, 29733, 29736, 29744, 29742, 29740, 29723, 29722, 29761, 29788, 29783, 29781, 29785, 29815, 
  29805, 29822, 29852, 29838, {f:2, c:29824}, 29831, 29835, 29854, {f:2, c:29864}, 29840, 29863, 29906, 29882, {f:3, c:38890}, 26444, 26451, 26462, 26440, 26473, 26533, 26503, 26474, 26483, 26520, 26535, 26485, 26536, 26526, 26541, 26507, 26487, 26492, 26608, 26633, 26584, 26634, 26601, 26544, 26636, 26585, 26549, 26586, 26547, 26589, 26624, 26563, 26552, 26594, 26638, 26561, 26621, {f:2, c:26674}, {f:2, c:26720}, 26702, 26722, 26692, 26724, 26755, 26653, 26709, 26726, 26689, 26727, 26688, 26686, 
  26698, 26697, 26665, 26805, 26767, 26740, 26743, 26771, 26731, 26818, 26990, 26876, {f:2, c:26911}, 26873, 26916, 26864, 26891, 26881, 26967, 26851, 26896, 26993, 26937, 26976, 26946, 26973, 27012, 26987, 27008, 27032, 27E3, 26932, 27084, {f:2, c:27015}, 27086, 27017, 26982, 26979, 27001, 27035, 27047, 27067, 27051, 27053, 27092, 27057, 27073, 27082, 27103, 27029, 27104, 27021, 27135, 27183, 27117, {f:2, c:27159}, 27237, 27122, 27204, 27198, 27296, 27216, 27227, 27189, 27278, 27257, 27197, 27176, 
  27224, 27260, 27281, 27280, 27305, 27287, 27307, 29495, 29522, {f:2, c:27521}, 27527, 27524, {f:2, c:27538}, 27533, {f:2, c:27546}, 27553, 27562, 36715, 36717, {f:3, c:36721}, {f:2, c:36725}, 36728, 36727, {f:2, c:36729}, 36732, 36734, {f:2, c:36737}, 36740, 36743, 36747, {f:3, c:36749}, 36760, 36762, 36558, 25099, 25111, 25115, 25119, 25122, 25121, 25125, 25124, 25132, 33255, 29935, 29940, 29951, 29967, 29969, 29971, [12097, 25908], {f:3, c:26094}, 26122, 26137, 26482, 26115, 26133, 26112, 28805, 
  26359, 26141, 26164, 26161, 26166, 26165, 32774, 26207, 26196, 26177, 26191, 26198, 26209, 26199, 26231, 26244, 26252, 26279, 26269, 26302, {f:2, c:26331}, 26342, 26345, {f:2, c:36146}, 36150, 36155, 36157, 36160, {f:2, c:36165}, {f:2, c:36168}, 36167, 36173, 36181, 36185, 35271, {f:3, c:35274}, {f:4, c:35278}, 29294, 29343, 29277, 29286, 29295, {f:2, c:29310}, 29316, 29323, 29325, 29327, 29330, 25352, 25394, 25520, 25663, 25816, 32772, 27626, 27635, 27645, 27637, 27641, 27653, 27655, 27654, 27661, 
  27669, {f:3, c:27672}, 27681, 27689, 27684, 27690, 27698, 25909, 25941, 25963, 29261, 29266, 29270, 29232, 34402, 21014, 32927, 32924, 32915, 32956, 26378, 32957, 32945, 32939, 32941, 32948, 32951, {f:4, c:32999}, 32987, 32962, 32964, 32985, 32973, 32983, 26384, 32989, 33003, 33009, 33012, 33005, {f:2, c:33037}, 33010, 33020, 26389, 33042, 35930, 33078, 33054, 33068, 33048, 33074, 33096, 33100, 33107, 33140, {f:2, c:33113}, 33137, 33120, 33129, {f:2, c:33148}, 33133, 33127, 22605, 23221, 33160, 
  33154, 33169, 28373, 33187, 33194, 33228, 26406, 33226, 33211, 33217, 33190, 27428, 27447, 27449, 27459, 27462, 27481, {f:3, c:39121}, 39125, {f:2, c:39129}, [12110, 27571], 24384, 27586, 35315, 26E3, 40785, 26003, 26044, 26054, 26052, 26051, 26060, 26062, 26066, 26070, 28800, 28828, 28822, 28829, 28859, 28864, 28855, 28843, 28849, 28904, 28874, 28944, 28947, 28950, 28975, 28977, 29043, 29020, 29032, 28997, 29042, 29002, 29048, 29050, 29080, 29107, 29109, 29096, 29088, 29152, 29140, 29159, 29177, 
  29213, 29224, 28780, 28952, 29030, 29113, 25150, 25149, 25155, {f:2, c:25160}, 31035, 31040, 31046, 31049, {f:2, c:31067}, 31059, 31066, 31074, 31063, 31072, 31087, 31079, 31098, 31109, 31114, 31130, 31143, 31155, 24529, 24528, 24636, 24669, 24666, 24679, 24641, 24665, 24675, 24747, 24838, 24845, 24925, 25001, 24989, 25035, 25041, 25094, 32896, [12160, 32895], 27795, 27894, 28156, 30710, 30712, 30720, 30729, {f:2, c:30743}, 30737, 26027, 30765, {f:2, c:30748}, {f:3, c:30777}, 30751, 30780, 30757, 
  30764, 30755, 30761, 30798, 30829, {f:2, c:30806}, 30758, 30800, 30791, 30796, 30826, 30875, 30867, 30874, 30855, 30876, 30881, 30883, 30898, 30905, 30885, 30932, 30937, 30921, 30956, 30962, 30981, 30964, 30995, 31012, 31006, 31028, 40859, [12235, 40697], {f:2, c:40699}, 30449, 30468, 30477, 30457, {f:2, c:30471}, 30490, 30498, 30489, 30509, 30502, 30517, 30520, {f:2, c:30544}, 30535, 30531, 30554, 30568, 30562, 30565, 30591, 30605, 30589, 30592, 30604, 30609, {f:2, c:30623}, 30640, 30645, 30653, 
  30010, 30016, 30030, 30027, 30024, 30043, 30066, 30073, 30083, 32600, 32609, 32607, 35400, 32616, 32628, 32625, 32633, 32641, 32638, 30413, 30437, 34866, {f:3, c:38021}, 38027, 38026, {f:2, c:38028}, {f:2, c:38031}, 38036, 38039, 38037, {f:3, c:38042}, {f:2, c:38051}, 38059, 38058, 38061, 38060, {f:2, c:38063}, 38066, 38068, {f:5, c:38070}, {f:2, c:38076}, 38079, 38084, {f:7, c:38088}, {f:3, c:38096}, {f:3, c:38101}, 38105, 38104, 38107, {f:3, c:38110}, 38114, {f:2, c:38116}, {f:2, c:38119}, 38122, 
  38121, 38123, {f:2, c:38126}, {f:3, c:38131}, 38135, 38137, {f:2, c:38140}, 38143, 38147, 38146, {f:2, c:38150}, {f:2, c:38153}, {f:3, c:38157}, {f:5, c:38162}, 38168, 38171, {f:3, c:38173}, 38178, {f:2, c:38186}, 38185, 38188, {f:2, c:38193}, 38196, {f:3, c:38198}, 38204, {f:2, c:38206}, 38210, 38197, {f:3, c:38212}, 38217, 38220, {f:2, c:38222}, {f:3, c:38226}, {f:4, c:38230}, 38235, {f:2, c:38238}, 38237, {f:2, c:38241}, {f:9, c:38244}, 38255, {f:3, c:38257}, 38202, 30695, 30700, 38601, 31189, 
  31213, 31203, 31211, 31238, 23879, 31235, 31234, 31262, 31252, 31289, 31287, 31313, 40655, 39333, 31344, 30344, 30350, 30355, 30361, 30372, 29918, 29920, 29996, 40480, 40482, {f:5, c:40488}, 40498, 40497, 40502, 40504, 40503, {f:2, c:40505}, 40510, {f:2, c:40513}, 40516, {f:4, c:40518}, {f:2, c:40523}, 40526, 40529, 40533, 40535, {f:3, c:40538}, 40542, 40547, {f:7, c:40550}, 40561, 40557, 40563, [12135, 30098], 30100, 30102, 30112, 30109, 30124, 30115, {f:2, c:30131}, 30136, 30148, 30129, 30128, 
  30147, 30146, 30166, 30157, 30179, 30184, 30182, 30180, 30187, 30183, 30211, 30193, 30204, 30207, 30224, 30208, 30213, 30220, 30231, 30218, 30245, 30232, 30229, 30233, 30235, 30268, 30242, 30240, 30272, 30253, 30256, 30271, 30261, 30275, 30270, 30259, 30285, 30302, 30292, 30300, 30294, 30315, 30319, 32714, 31462, {f:2, c:31352}, 31360, 31366, 31368, 31381, 31398, 31392, 31404, 31400, 31405, 31411, 34916, 34921, 34930, 34941, 34943, 34946, 34978, 35014, 34999, 35004, 35017, 35042, 35022, 35043, 
  35045, 35057, 35098, 35068, 35048, 35070, 35056, 35105, 35097, 35091, 35099, 35082, 35124, 35115, 35126, 35137, 35174, 35195, [12134, 30091], 32997, 30386, 30388, 30684, [12158, 32786], 32788, 32790, 32796, 32800, 32802, {f:3, c:32805}, 32809, 32808, 32817, 32779, 32821, 32835, 32838, 32845, 32850, 32873, 32881, 35203, 39032, 39040, 39043, 39049, {f:2, c:39052}, 39055, 39060, {f:2, c:39066}, {f:2, c:39070}, {f:2, c:39073}, {f:2, c:39077}, [12172, 34381], 34388, 34412, 34414, 34431, 34426, 34428, 
  34427, 34472, 34445, 34443, 34476, 34461, 34471, 34467, 34474, 34451, 34473, 34486, 34500, 34485, 34510, 34480, 34490, 34481, 34479, 34505, 34511, 34484, 34537, {f:2, c:34545}, 34541, 34547, 34512, 34579, 34526, 34548, 34527, 34520, 34513, 34563, 34567, 34552, 34568, 34570, 34573, 34569, 34595, 34619, 34590, 34597, 34606, 34586, 34622, 34632, 34612, 34609, 34601, 34615, 34623, 34690, 34594, {f:2, c:34685}, 34683, 34656, 34672, 34636, 34670, 34699, 34643, 34659, 34684, 34660, 34649, 34661, 34707, 
  34735, 34728, 34770, 34758, 34696, 34693, 34733, 34711, 34691, 34731, 34789, 34732, 34741, 34739, 34763, 34771, 34749, 34769, 34752, 34762, 34779, 34794, 34784, 34798, 34838, 34835, 34814, 34826, 34843, 34849, 34873, 34876, [12152, 32566], 32578, {f:2, c:32580}, 33296, 31482, 31485, 31496, {f:2, c:31491}, 31509, 31498, 31531, 31503, 31559, 31544, 31530, 31513, 31534, 31537, 31520, 31525, 31524, 31539, 31550, 31518, 31576, 31578, 31557, 31605, 31564, 31581, 31584, 31598, 31611, 31586, 31602, 31601, 
  31632, {f:2, c:31654}, 31672, 31660, 31645, 31656, 31621, 31658, 31644, 31650, 31659, 31668, 31697, 31681, 31692, 31709, 31706, {f:2, c:31717}, 31722, 31756, 31742, 31740, 31759, 31766, 31755, 31775, 31786, 31782, 31800, 31809, 31808, 33278, {f:2, c:33281}, 33284, 33260, 34884, {f:3, c:33313}, 33325, 33327, 33320, 33323, 33336, 33339, {f:2, c:33331}, 33342, 33348, 33353, 33355, 33359, 33370, 33375, 33384, 34942, 34949, 34952, 35032, 35039, 35166, 32669, 32671, 32679, {f:2, c:32687}, 32690, 31868, 
  25929, 31889, 31901, 31900, 31902, 31906, 31922, {f:2, c:31932}, 31937, 31943, {f:2, c:31948}, 31944, 31941, 31959, 31976, [12169, 33390], 26280, 32703, 32718, 32725, 32741, 32737, 32742, 32745, 32750, 32755, [12151, 31992], 32119, 32166, 32174, 32327, 32411, 40632, 40628, 36211, 36228, 36244, 36241, 36273, 36199, 36205, 35911, 35913, 37194, 37200, {f:2, c:37198}, 37220, 37218, 37217, 37232, 37225, 37231, {f:2, c:37245}, 37234, 37236, 37241, 37260, 37253, 37264, 37261, 37265, {f:2, c:37282}, 37290, 
  {f:3, c:37293}, 37301, 37300, 37306, [12183, 35925], 40574, 36280, 36331, 36357, 36441, 36457, 36277, 36287, 36284, 36282, 36292, {f:2, c:36310}, 36314, 36318, {f:2, c:36302}, 36315, 36294, 36332, {f:2, c:36343}, 36323, 36345, 36347, 36324, 36361, 36349, 36372, 36381, 36383, 36396, 36398, 36387, 36399, 36410, 36416, 36409, 36405, 36413, 36401, 36425, {f:2, c:36417}, {f:2, c:36433}, 36426, 36464, 36470, 36476, 36463, 36468, 36485, 36495, 36500, 36496, 36508, 36510, [12184, 35960], 35970, 35978, 
  35973, 35992, 35988, 26011, 35286, 35294, 35290, 35292, 35301, 35307, 35311, 35390, 35622, 38739, 38633, 38643, 38639, 38662, 38657, 38664, 38671, 38670, 38698, 38701, 38704, 38718, 40832, 40835, {f:6, c:40837}, 40844, 40702, 40715, 40717, [12203, 38585], {f:2, c:38588}, 38606, 38610, 30655, 38624, 37518, 37550, 37576, 37694, 37738, 37834, 37775, 37950, 37995, 40063, 40066, {f:4, c:40069}, 31267, 40075, 40078, {f:3, c:40080}, {f:2, c:40084}, {f:2, c:40090}, {f:6, c:40094}, {f:5, c:40101}, 40107, 
  {f:2, c:40109}, {f:8, c:40112}, {f:4, c:40122}, {f:4, c:40132}, {f:7, c:40138}, {f:3, c:40147}, {f:3, c:40151}, {f:2, c:40156}, 40159, 40162, 38780, 38789, {f:2, c:38801}, 38804, 38831, 38827, 38819, 38834, 38836, 39601, 39600, 39607, 40536, 39606, 39610, 39612, 39617, 39616, 39621, 39618, {f:2, c:39627}, 39633, 39749, 39747, 39751, 39753, 39752, 39757, 39761, 39144, 39181, 39214, 39253, 39252, [12221, 39647], 39649, 39654, 39663, 39659, 39675, 39661, 39673, 39688, 39695, 39699, 39711, 39715, {f:2, 
  c:40637}, 32315, 40578, {f:2, c:40583}, 40587, 40594, 37846, 40605, 40607, {f:3, c:40667}, 40672, 40671, 40674, 40681, 40679, 40677, 40682, 40687, 40738, 40748, 40751, 40761, 40759, {f:2, c:40765}, 40772, 12295, {s:13}, 30362, 34297, 31001, 24859, 39599, 35158, 22761, 32631, 25850, 25943, 38930, 36774, 32070, 24171, 32129, 37770, 35607, 39165, 23542, 22577, 39825, 36649, [12185, 35997], 37575, 29437, 20633, 24970, 32179, 31558, 30050, 25987, 24163, 38281, 37002, 32232, 36022, 35722, 36783, 36782, 
  27161, 40009, 30303, 28693, 28657, 36051, 25839, 39173, 25765, 37474, 37457, 39361, 35036, 36001, 21443, 34870, 27544, 24922, 24920, 29158, 33980, 33369, 20489, 28356, 21408, 20596, 28204, 23652, 35435, 25881, 25723, 34796, 39262, 35730, 32399, 37855, 29987, 38369, 39019, 22580, 22039, [12199, 38263], 20767, 33144, 24288, 26274, 37396, [12190, 36554], 24505, 22645, 38515, 35183, 31281, 25074, 35488, 39425, 36978, 39347, [12242, 40786], 29118, 34909, 34802, 23541, 30087, 36490, 31820, 32162, 37276, 
  37604, 38619, 30990, 20786, 35320, 34389, 20659, 30241, 38358, 21109, 37656, 32020, 32189, 36781, 35422, 36060, 32880, 24478, 21474, 36517, 31428, 37679, 36948, 24118, 36024, 25812, 21934, 37170, 25763, 33213, 24986, 35477, 24392, 30070, 25803, 40680, 34153, 27284, 25623, 23798, 31153, 23566, 29128, 37159, 25973, 28364, 36958, 32224, 39003, 40670, 22666, 38651, 28593, 37347, 35519, 35548, 37336, 38914, 37664, 35330, 26481, 21205, 26847, 20941, [12222, 39717], 29346, 29544, 35712, 36077, 37709, 
  37723, 26039, 32222, 38538, 23565, 22136, 38931, 37389, 22890, 22702, 40285, 38989, 35355, 24801, 39187, 20818, 29246, 39180, 36019, 30332, 32624, 38309, 31020, 37353, 29033, 31684, 36009, 39151, 35370, 32033, [12214, 39131], 35513, 24290, 36027, 32027, 22707, 22894, 24996, 31966, 35920, 26963, 37586, [12213, 39080], 30219, 39342, 32299, 35575, 40179, 33178, 36667, 25771, 36628, 36070, 24489, 36E3, 35331, 23142, 32283, 35442, 37411, 33995, 24185, 36245, 36123, 23713, 21083, 37628, 32177, 23831, 
  37804, 25841, 40255, 38307, 37499, 20491, 32102, 40852, 38799, 36002, 37390, 28317, 27083, 36092, 34865, 39015, 21102, 38364, 35264, 39208, 24931, 36011, 24291, 35215, 27512, [12244, 40860], 38312, 36556, 35437, 27331, 36020, 21130, 36645, 37707, 22283, 36942, 39405, 38867, 28450, 34399, 38305, 40372, 36032, 36703, 40251, 32005, 22778, 35703, 28396, 22057, 33775, 30059, 21123, 35441, 25079, 22750, 27489, 29872, 36996, 32233, 35594, 25582, 36637, 36036, 31330, 26371, 29172, 21295, 35569, 35496, 
  32362, 33911, 28222, 29554, 36008, 31117, 25802, 27231, 31309, 39249, 35663, 40388, 32318, 32221, 26997, 36655, 32026, 25824, 24190, 34186, 21137, 28639, 35336, 35352, 38555, 32380, 32E3, 22846, 33698, 38960, 36040, 37440, 20729, 39381, 27570, 30435, 22533, 31627, 38291, 33393, 32216, 32365, 27298, 40572, 25536, 25791, 31777, 20745, 34214, 27323, 37970, 36368, 36068, [12178, 35211], 37749, 33382, 21133, 39198, 28472, 28666, 28567, 23559, 28479, 34083, 27123, 22892, 35611, 37292, 33184, 28550, 39509, 
  23308, 25898, 37496, 30703, 20709, 39171, 32371, 32094, 36686, 36611, 38542, 31680, 28500, 32080, 35489, 32202, 37670, 20677, 35641, 36914, 29180, 30433, 21185, 33686, 39912, 39514, 32147, 38968, 37857, 24465, 30169, 31478, 31998, 33290, 39378, 33289, 25818, 37624, 25084, 21127, 40273, 32121, 35258, 35363, 32118, 37406, 36557, 39423, 38283, 20977, 38982, 27579, 35506, 22718, 25031, 25715, 24235, 35122, 35463, 22602, 20744, 23532, 31014, 26336, 34407, 24011, 31418, 39243, 28528, 25844, 38346, 34847, 
  33240, 33802, 20358, 36084, 34253, 27396, 25876, 31811, 38348, 34349, 28734, 35733, 25900, 35261, 25078, 32412, 29211, 28651, 25736, 21214, 28551, 27138, 37939, 22744, 39006, 31852, 38626, 28757, 35023, 39881, 31150, 40599, 21426, 21237, 31019, 27511, 28701, 38584, 20486, 32879, 34030, 36899, 37934, 24976, 28451, 31806, 25986, 33225, 37832, 25088, 29001, 32244, 31975, 20841, 36635, 35538, 30274, 36988, 37904, 29557, 33256, 37168, 40023, 36035, 40801, 37428, 38728, 23994, 38936, 39230, 21129, [12243, 
  40845], 32894, 22184, 31840, 22751, 25871, 38580, 27155, 23105, 25695, 31757, 34310, 30439, 39025, 24300, 29200, 25796, 28407, 34396, 39791, 36034, 37682, 38520, 39522, 37569, 23650, 32311, 24942, 28670, 32209, 24018, 25891, 23423, 28772, 20098, 25476, 36650, 20523, 20374, 28138, 32184, 35542, 34367, 32645, 37007, 38012, 31854, 39486, 39409, 32097, 23229, 29802, 30908, 34718, [12218, 39340], 39393, 21966, 36023, [12230, 40613], 36067, 36993, 30622, 39237, 34875, 28415, 35646, 37672, 37466, 36031, 
  37762, [12200, 38272], 24758, 20497, 37683, 22818, 35598, 24396, 35219, 32191, 32236, 24287, 28357, 25003, 38313, 40180, 37528, 35628, 35584, 30045, 37385, 32013, 38627, 25747, 33126, 24817, 39719, 39186, 25836, 33193, 25862, 37312, [12227, 40165], 32886, 22169, 38007, 37811, 27320, 29552, 23527, 25840, 28632, 37397, 32016, 33215, 28611, 36786, 30247, 35582, 27472, 40407, 27590, 22036, 28442, 30436, 40848, 36064, 22132, 40300, 39449, 39108, 38971, 36007, 34315, 24977, 35413, 28497, 38935, 25778, 
  37610, 20693, 27192, 35676, 33229, [12241, 40778], 39438, 35912, 21843, 27683, 35350, 29309, 37370, 37467, 36983, 31805, 35609, 37666, 37463, 28154, 35700, 22649, 27085, 21958, 22715, 34196, 25654, 37740, 27211, 21932, 20689, 32761, 31429, 31434, 27453, 35242, 23522, 36629, 27691, 20670, 38915, 35531, 24950, 29898, 31406, 36264, 21312, 36544, 39493, 40818, 39028, 27402, 21240, 40306, 30906, 35731, 39250, 25854, 32350, 29105, 38860, 35469, 32009, 27054, 32104, 36575, 37613, 38287, 28516, 28753, 
  34217, 39955, 36093, 20632, 21930, 39479, 25475, 28544, 27578, 32023, 31721, 26348, 38275, 38493, 36109, 32341, 20663, 36062, 29138, 32057, 36050, 25448, 25885, 25086, 35373, 32051, 23529, 23352, 33102, 28402, 32882, 32361, 21213, 32854, 24107, 29509, 28629, 35433, 26178, 34645, 23526, 35672, 39387, 21218, 36969, 37323, 39166, 35222, 35430, 22781, 29560, 27166, 36664, 26360, 36118, 23660, 34899, 27193, 31466, 25976, 24101, 38617, 35504, 38918, 35500, 30889, 29197, 32114, 39164, 39686, 32883, 24939, 
  38924, 35359, 35494, 25851, 34311, 35380, 32901, 38614, 38568, 32143, 27506, 23403, 25613, 32302, 29795, 37782, 29562, 25787, 33274, 24907, 25892, 36010, 30321, 28760, 22727, 35674, 35527, 22022, 28271, 29145, 28644, 32295, 35342, 39472, 35588, 37563, 38988, 39636, 26781, 36028, 37941, 24307, 32893, 28916, 37509, 32113, 38957, 22294, 22615, 22296, 38973, 40213, 39345, 39389, 27234, 31402, 35178, 24398, 28771, 38929, 33836, 32178, [12209, 38859], 36949, 22285, 29234, 28656, 32173, 33894, 20553, 
  20702, 32239, 35586, 34907, 32862, 32011, 31337, 21839, 25790, 34680, 28198, 31401, 21978, 37794, 28879, 35491, 28961, 34154, 22626, 38695, 21209, 35492, 37675, 29351, 35186, 32722, 37521, 25138, 32048, 34662, 36676, 23805, 20448, 29433, 22151, 37697, 39854, 32406, 36066, 37532, 38289, 39023, 38570, 29694, 29563, 32291, 39201, 25010, 32171, 38002, 37129, 35443, 38911, 38917, 34157, 22210, 37559, 26313, 22063, 21332, 25406, 33029, 35559, 23531, 28681, 35613, 37573, 37313, 33288, 37561, 32137, 38920, 
  35377, 32210, 32396, 36562, 25080, 36984, 30316, 32098, 23416, 21211, 35426, 23563, 39348, 35347, 35338, 36956, 22739, 40201, 40232, 21854, 20126, 35357, 38329, 40573, 22196, 38996, 38331, 33399, 21421, 30831, 35578, 39511, 40230, 26954, 25562, 30221, 38525, 30306, 39178, 27171, 22575, 35617, 34277, 29242, [12212, 38913], 26989, 33865, 37291, 37541, 38948, 36986, 20736, 34811, 34269, 20740, 25014, 32681, 35427, 35696, 35516, 35695, 32377, 34093, 38512, 37504, 39154, 38577, 27387, 23344, 40441, 
  25033, 32403, 29801, 34722, 29151, 29074, 34821, 36111, 31310, 21938, 25793, 20653, 30320, 36404, 20778, 24962, 37109, 37438, 29494, 35480, 36671, 39192, [12226, 39770], 28417, 33287, 23996, 35486, 39729, 29508, 35709, 38928, 39341, 40219, 28149, 36677, 22290, 21729, 22291, 32227, 36960, 39E3, 32004, 36493, 38E3, 38322, 38642, 37142, 38549, 36939, 34292, 37270, 26248, 38620, 36617, 25890, 26283, 36106, 36124, 33247, 38015, 26839, 31432, 36012, 25799, 21063, 28580, 36042, 36104, 36555, 37720, 38296, 
  35408, 40779, 20661, 27656, 30430, 26028, 36670, 23940, 26855, 25136, 32187, 24373, 28466, 24115, 36076, 33081, 36249, 34756, 36685, 37754, 36889, 35998, 37341, 20597, 35386, 37806, 38499, 24128, 30309, 37165, 35657, 32340, 32887, 22519, 34937, 32025, 25711, 25842, 24159, 36074, 28399, 37912, 32066, 31278, 33131, 34886, 35589, 36600, 30394, 26205, 39519, 35576, 35461, 29165, 30682, 22225, 36015, 37956, 31689, 39376, 23560, 30938, 36681, 36090, 27137, 33674, 35037, 22941, 22767, 29376, 37648, 36101, 
  22684, 32180, 35524, 28310, 28609, 36039, 28460, 32156, 32317, 32305, 37138, 35419, 32068, 38013, 21959, 21401, 21428, 38760, 36107, 21293, 21297, 36094, 21060, 21132, 21108, 20660, 20480, 20630, 20757, 20738, 20756, 20796, 20791, 20712, 20674, 20795, 20752, 20794, 20681, 31988, 40652, 22213, 40172, 35131, 33248, 35329, 35344, 35340, 35349, 35635, 35406, 35365, 35393, 35382, 35398, 35412, 35416, 35410, 35462, 35460, 35455, 35440, 35452, 35445, 35436, 35438, 35533, 35554, 35425, 35482, 35493, {f:2, 
  c:35473}, 35535, 35537, 35529, 35547, 35543, 35522, 35510, 35574, 35563, 35604, 35585, 35556, 35565, 35580, 35571, 35558, 35566, 35550, 35624, 35740, 35606, 35610, 35600, 35627, 35629, 35670, 35673, 35662, 35742, 35691, 35734, 38488, 37178, 37140, 37172, 37087, 37174, 37126, 37192, 33467, 21233, 24048, 22538, 22745, 22754, 22752, 22746, 22497, 22607, 22550, 22610, 22557, 22628, 34188, 34131, 34294, 33703, 33799, 34031, 33511, 34338, 34086, 22603, 29026, 34136, 34045, 34126, 34184, 34234, 29334, 
  28366, 34113, 34254, 34130, 33984, 33874, 33892, 33940, 33845, 34207, 34133, 40367, 33939, 32264, 34118, 34146, 34078, 39488, 34362, 37795, 34167, 34334, 34298, 34308, 34282, 34330, 22889, 23607, 25451, 25718, 25759, 25681, 25692, 25779, 25860, 25878, 25847, 25852, 25883, 22064, 22072, 22216, 22182, 21764, 21692, 22144, 22109, 22112, 22069, 22006, 22118, 22130, 22156, 22117, 22044, 22062, 21993, 22038, 22208, 22029, 22195, 22209, 22127, 36705, 22198, 22165, 22279, 24131, 24172, 24152, 24151, 23943, 
  23796, 23888, 23852, 23975, 23968, 23959, 23821, 23992, 23937, 24020, 24480, 29559, 29505, 29546, 29499, 29547, 29568, 29564, 39136, 39219, 39145, 39228, {f:2, c:39146}, 39149, 39156, 39177, 39185, 39195, 39223, 39231, 39235, {f:3, c:39240}, 39244, 39266, 24289, 36065, 25082, 25006, 24938, 24894, 24757, 24884, 25036, 24927, 25064, 24827, 24887, 24818, 24947, 24860, 24978, 38274, 38278, 38344, 38286, 38292, 38284, 38373, 38317, 38315, 39726, 38316, 38334, 38326, 39721, 38335, 38333, 38332, 38339, 
  38347, 38356, 38352, 38357, 38366, 28739, 28505, 28711, 28696, 28668, 28039, 28025, 28254, 28590, 28687, 28408, 28527, 28150, 28543, 28678, 28576, 28683, 28775, 28740, 28677, 28535, 28704, 28703, 28722, 28712, 28765, 39467, 36999, 36885, 37008, 23656, 24371, 23285, 23255, 23296, 23149, 23304, 23372, 23207, 23291, 23307, 23329, 23338, 23321, 39380, 39391, 39385, 39478, 39515, 39377, 39384, 39501, 39498, 39394, 39530, 39439, 39437, 39429, 39490, 39469, 39446, 39489, 39470, 39480, {f:2, c:39491}, 
  39503, 39525, 39524, 31993, 32006, 32002, {f:2, c:32007}, 32394, 32028, 32021, 32019, 32058, 32050, 32049, 32272, 32060, 32064, 32063, 32093, 32078, 32115, 32134, 32131, 32136, 32190, 32186, 32203, 32212, 32196, 32158, 32172, 32185, 32163, 32176, 32199, 32217, 32215, 32249, 32242, 32354, 32230, 32246, 32241, 32267, 32225, 32265, 32285, 32287, 32286, 32301, 32266, 32273, 32381, 32313, 32309, 32306, 32326, 32325, 32392, 32346, 32338, 32366, 32382, 32368, 32367, 32408, 29859, 29771, 29903, 38922, 
  29885, 29759, 29833, 29862, 29908, 29914, 38873, 38878, 38876, 27050, 27370, 26776, 26838, 27141, 26783, 27355, 27379, 27368, 27359, 27273, 26895, 27208, 26984, 27071, 27194, 27292, 27410, 27422, 27357, 27111, 27407, 27414, 27372, 27354, 27384, 27315, 27367, 27299, 27347, 27358, 27556, 27550, 27566, 27563, 27567, 36564, 36571, 36594, 36603, 36708, 36601, 36604, 36587, 36580, 36706, 36602, 36606, 36618, 36615, 36613, 36626, 36646, {f:2, c:36638}, 36636, 36659, 36678, 36692, 25108, 25127, 29964, 
  26311, 26308, 26249, 26326, 36033, 36016, 36026, 36029, 36100, 36018, 36037, 36112, 36049, 36058, 36053, 36075, 36071, 36091, 35224, 35244, 35233, 35263, 35238, 35247, 35250, 35255, 27647, 27660, 27692, 29272, 26407, 33110, 33242, 33051, 33214, 33121, 33231, 27487, {f:2, c:39086}, 39094, 39100, 39110, 39112, 36674, 40783, 26005, 29036, 29010, 29079, 29121, 29148, 29182, 31152, 31118, 31146, 25055, 24932, 25059, 25095, 28585, 30959, 30893, 30824, 30904, 31018, 31025, 30820, 30973, 30951, 30947, 
  40853, 30616, 30558, 30652, 32646, 32648, {f:3, c:37330}, 37337, 37335, 37333, 37367, 37351, 37348, 37702, 37365, 37369, 37384, 37414, 37445, 37393, 37392, 37377, 37415, 37380, 37413, 37376, 37434, 37478, 37431, 37427, 37461, 37437, 37432, 37470, {f:2, c:37484}, 37439, 37984, 37424, 37449, 37448, 37453, 37422, 37433, 37944, 37548, 37536, 37498, 37546, 37614, 37583, 37891, 37603, 37946, 37553, 37542, 37799, 37526, 37580, 37545, 37877, 37523, 37503, 37801, 37530, 37658, 37547, 37507, 37899, 37544, 
  37539, 37906, 37688, 37617, 37847, 37605, 37616, 37615, 37608, 37564, 37597, 37622, {f:2, c:37926}, 37571, 37599, 37606, 37650, 37638, 37737, 37659, 37696, 37633, 37653, 37678, 37699, {f:2, c:37639}, 37663, 37657, 37733, 37703, 37750, 37716, 37732, 37802, 37744, 37764, 37860, 37848, 37928, 37767, 37836, 37784, 37816, 37823, 37798, 37808, 37813, 37964, 37858, {f:2, c:37852}, 37837, 37854, 37827, 37831, 37841, 37908, 37917, 37879, 37989, 37907, 37997, 37920, 38009, 37881, 37913, 37962, 37938, 37951, 
  37972, 37987, 37758, 31329, 40169, 40182, 40199, 40198, 40227, 40327, 40469, 40221, 40223, 40421, 40239, 40409, 40240, 40258, 40478, 40275, 40477, 40288, 40274, 40435, 40284, 40289, 40339, 40298, 40303, 40329, 40344, 40346, 40384, 40357, 40361, 40386, 40380, 40474, 40403, 40410, 40431, 40422, 40434, 40440, 40460, 40442, 40475, 30308, 30296, 30311, 30210, {f:2, c:30278}, 30281, 30238, 30267, {f:2, c:30317}, 30313, 30322, 31431, 31414, 35168, 35123, 35165, 35143, 35128, 35172, 30392, 32814, 32812, 
  32889, 32885, 38919, {f:2, c:38926}, 38945, 38940, 28481, 38950, 38967, 38990, 38995, 39027, 39010, 39001, 39013, 39020, 39024, 34787, 34822, 34566, 34851, 34806, 34554, 34799, 34692, 34832, 34760, 34833, 34747, 34766, 32588, 31716, 31591, 31849, 31731, 31744, 31691, 31836, 31774, 31787, 31779, 31850, 31839, 33380, 33387, 35018, 32677, 31986, 31990, 31965, 32310, 40617, 36274, 37317, 37315, 40570, 36489, 36428, 36498, 36474, 36437, 36506, 36491, 36499, 36497, 36513, 36451, 36522, 36518, 35316, 
  35318, 38746, 38722, 38717, 38724, 40788, 40799, 40793, 40800, 40796, 40806, 40812, 40810, 40823, [12236, 40701], 40703, 40713, 35726, 38014, 37864, 39799, 39796, 39809, 39811, 39822, 40056, 31308, 39826, 40031, 39824, 39853, 39834, 39850, 39838, 40045, 39851, 39837, 40024, 39873, 40058, 39985, 39993, 39971, 39991, 39872, 39882, 39879, 39933, 39894, {f:2, c:39914}, 39905, 39908, 39911, 39901, 39906, 39920, 39899, 39924, 39892, 40029, 39944, 39952, 39949, 39954, 39945, 39935, 39968, 39986, 39981, 
  39976, 39973, 39977, 39987, 39998, 40008, 39995, 39989, 40005, 40022, 40020, 40018, 40039, 38851, 38845, 38857, 40379, 39631, 39638, 39637, 39768, 39758, 39255, 39260, 39714, 40695, 40690, 35180, 38342, 37686, 24390, 34068, 32404, 40803, 22137, 40725, 22081, 39662, 35079, 31296, 39091, 38308, 39693, 36852, 24409, 31339, 39138, 20642, 34193, 20760, 25458, 21067, 30543, 32397, 26310, 30637, [12228, 40565], 22217, 40692, 28635, 25054, 30663, 28720, 40629, 34890, 38370, 38854, 31844, 32308, 38822, 
  40623, 22220, 39089, 27311, 32590, 31984, 20418, 32363, 40569, 22190, 39706, 33903, 31142, 31858, 39634, 38587, 32251, 35069, 30787, {f:10, c:8560}, {f:2, c:714}, 729, 8211, 8213, 8229, 8245, 8453, 8457, {f:4, c:8598}, 8725, 8735, 8739, 8786, {f:2, c:8806}, 8895, {f:36, c:9552}, {f:15, c:9601}, {f:3, c:9619}, {f:2, c:9660}, {f:4, c:9698}, 9737, 8853, 12306, {f:2, c:12317}, {f:9, c:12321}, 12963, {f:2, c:13198}, {f:3, c:13212}, 13217, 13252, 13262, {f:2, c:13265}, 13269, 65072, 65506, 65508, 8481, 
  12849, 8208, 12540, {f:2, c:12443}, {f:2, c:12541}, 12294, {f:2, c:12445}, {f:10, c:65097}, {f:4, c:65108}, {f:14, c:65113}, {f:4, c:65128}, 12350, {f:12, c:12272}, 19970, {f:3, c:19972}, 19983, 19986, 19991, {f:3, c:19999}, 20003, 20006, 20009, {f:2, c:20014}, 20017, 20019, 20021, 20023, 20028, {f:3, c:20032}, 20036, 20038, 20042, 20049, 20053, 20055, {f:2, c:20058}, {f:4, c:20066}, {f:2, c:20071}, {f:6, c:20074}, 20082, {f:10, c:20084}, {f:3, c:20095}, {f:2, c:20099}, [12037, 20101], 20103, 20106, 
  20112, {f:2, c:20118}, 20121, {f:2, c:20124}, 20131, 20138, {f:3, c:20143}, 20148, {f:4, c:20150}, {f:3, c:20156}, 20168, 20172, {f:2, c:20175}, 20178, {f:3, c:20186}, 20192, 20194, {f:2, c:20198}, 20201, {f:3, c:20205}, 20209, 20212, {f:3, c:20216}, 20220, 20222, 20224, {f:7, c:20226}, {f:2, c:20235}, {f:5, c:20242}, {f:2, c:20252}, 20257, 20259, {f:2, c:20264}, {f:3, c:20268}, 20273, 20275, 20277, 20279, 20281, 20283, {f:5, c:20286}, {f:2, c:20292}, {f:6, c:20295}, 20306, 20308, 20310, {f:2, 
  c:20321}, 20326, 20328, {f:2, c:20330}, {f:2, c:20333}, {f:2, c:20337}, 20341, {f:4, c:20343}, 20349, {f:3, c:20352}, 20357, 20359, 20362, 20364, 20366, 20368, {f:2, c:20370}, 20373, {f:3, c:20376}, 20380, {f:2, c:20382}, {f:2, c:20385}, 20388, 20395, 20397, {f:5, c:20400}, {f:9, c:20406}, {f:2, c:20416}, {f:4, c:20422}, {f:3, c:20427}, {f:5, c:20434}, 20441, 20443, 20450, {f:2, c:20452}, 20455, {f:2, c:20459}, 20464, 20466, {f:4, c:20468}, 20473, {f:3, c:20475}, 20479, {f:5, c:20481}, {f:2, c:20487}, 
  20490, 20494, 20496, 20499, {f:3, c:20501}, 20507, {f:2, c:20509}, 20512, {f:3, c:20514}, 20519, {f:11, c:20527}, 20539, 20541, {f:4, c:20543}, {f:3, c:20548}, {f:2, c:20554}, 20557, {f:5, c:20560}, {f:4, c:20566}, 20571, {f:8, c:20573}, {f:6, c:20582}, {f:7, c:20589}, {f:3, c:20600}, {f:2, c:20604}, {f:4, c:20609}, {f:2, c:20614}, {f:4, c:20617}, {f:8, c:20622}, 20631, {f:8, c:20634}, 20644, 20646, {f:2, c:20650}, {f:4, c:20654}, 20662, {f:2, c:20664}, {f:2, c:20668}, {f:3, c:20671}, {f:2, c:20675}, 
  {f:3, c:20678}, {f:5, c:20682}, 20688, {f:3, c:20690}, {f:3, c:20695}, {f:3, c:20699}, {f:6, c:20703}, {f:3, c:20713}, {f:4, c:20719}, 20724, {f:3, c:20726}, 20730, {f:4, c:20732}, 20737, 20739, 20741, 20746, {f:4, c:20748}, 20753, 20755, {f:2, c:20758}, {f:6, c:20761}, 20768, {f:8, c:20770}, {f:7, c:20779}, {f:4, c:20787}, {f:2, c:20792}, {f:2, c:20797}, 20802, 20807, 20810, 20812, {f:3, c:20814}, 20819, {f:3, c:20823}, 20827, {f:5, c:20829}, {f:2, c:20835}, {f:2, c:20838}, 20842, 20847, 20850, 
  20858, {f:2, c:20862}, {f:2, c:20867}, {f:2, c:20870}, {f:2, c:20874}, {f:4, c:20878}, {f:2, c:20883}, 20888, 20890, {f:3, c:20893}, 20897, 20899, {f:5, c:20902}, {f:2, c:20909}, 20916, {f:3, c:20920}, {f:2, c:20926}, {f:3, c:20929}, 20933, 20936, 20938, 20942, 20944, {f:9, c:20946}, 20956, {f:2, c:20958}, {f:2, c:20962}, {f:6, c:20965}, 20972, 20974, 20978, 20980, 20983, 20990, {f:2, c:20996}, 21001, {f:2, c:21003}, {f:2, c:21007}, {f:3, c:21011}, 21020, {f:2, c:21022}, {f:3, c:21025}, {f:3, c:21029}, 
  21034, 21036, 21039, {f:2, c:21041}, {f:2, c:21044}, 21052, 21054, {f:2, c:21061}, {f:2, c:21064}, {f:2, c:21070}, {f:2, c:21074}, 21077, {f:4, c:21079}, 21085, {f:2, c:21087}, {f:3, c:21090}, 21094, 21096, {f:3, c:21099}, {f:2, c:21104}, 21107, {f:7, c:21110}, 21118, 21120, {f:3, c:21124}, 21131, {f:2, c:21134}, 21138, {f:7, c:21140}, 21148, {f:4, c:21156}, {f:3, c:21166}, {f:10, c:21172}, 21184, 21186, {f:3, c:21188}, 21192, 21194, {f:4, c:21196}, 21201, {f:2, c:21203}, 21207, 21210, 21212, {f:2, 
  c:21216}, 21219, {f:11, c:21221}, {f:3, c:21234}, {f:2, c:21238}, {f:3, c:21243}, {f:4, c:21249}, 21255, {f:4, c:21257}, 21262, {f:4, c:21265}, 21272, {f:2, c:21275}, {f:2, c:21278}, 21282, {f:2, c:21284}, {f:3, c:21287}, {f:2, c:21291}, 21296, {f:6, c:21298}, [12054, 21304], {f:2, c:21308}, 21314, 21316, 21318, {f:3, c:21323}, 21328, {f:2, c:21336}, 21339, 21341, 21349, 21352, 21354, {f:2, c:21356}, 21362, 21366, 21369, {f:4, c:21371}, {f:2, c:21376}, 21379, {f:2, c:21383}, 21386, {f:7, c:21390}, 
  {f:2, c:21398}, {f:2, c:21403}, 21406, 21409, 21412, 21415, {f:3, c:21418}, {f:3, c:21423}, 21427, 21429, {f:4, c:21431}, {f:3, c:21436}, 21440, {f:4, c:21444}, {f:3, c:21454}, {f:2, c:21458}, 21461, 21466, {f:3, c:21468}, 21473, 21479, 21492, 21498, {f:3, c:21502}, 21506, 21509, 21511, 21515, 21524, {f:3, c:21528}, 21532, 21538, {f:2, c:21540}, 21546, 21552, 21555, {f:2, c:21558}, 21562, 21565, 21567, {f:2, c:21569}, {f:2, c:21572}, 21575, 21577, {f:4, c:21580}, 21585, 21594, {f:5, c:21597}, 21603, 
  21605, 21607, {f:8, c:21609}, 21620, {f:2, c:21625}, {f:2, c:21630}, 21633, 21635, 21637, {f:4, c:21639}, 21645, 21649, 21651, {f:2, c:21655}, 21660, {f:5, c:21662}, 21669, 21678, 21680, 21682, {f:3, c:21685}, {f:2, c:21689}, 21694, 21699, 21701, {f:2, c:21706}, 21718, 21720, 21723, 21728, {f:3, c:21730}, {f:2, c:21739}, {f:3, c:21743}, {f:6, c:21748}, 21755, 21758, 21760, {f:2, c:21762}, 21765, 21768, {f:5, c:21770}, {f:2, c:21778}, {f:6, c:21781}, {f:4, c:21788}, 21793, {f:2, c:21797}, {f:2, 
  c:21800}, 21803, 21805, 21810, {f:3, c:21812}, {f:4, c:21816}, 21821, 21824, 21826, 21829, {f:2, c:21831}, {f:4, c:21835}, {f:2, c:21841}, 21844, {f:5, c:21847}, 21853, {f:2, c:21855}, {f:2, c:21858}, {f:2, c:21864}, 21867, {f:6, c:21871}, {f:2, c:21881}, 21885, 21887, {f:2, c:21893}, {f:3, c:21900}, 21904, {f:2, c:21906}, {f:3, c:21909}, {f:2, c:21914}, 21918, {f:7, c:21920}, {f:2, c:21928}, 21931, 21933, {f:2, c:21935}, 21940, 21942, 21944, 21946, 21948, {f:5, c:21951}, 21960, {f:2, c:21962}, 
  {f:2, c:21967}, 21973, {f:3, c:21975}, 21979, 21982, 21984, 21986, 21991, {f:2, c:21997}, {f:2, c:22E3}, 22004, {f:5, c:22008}, 22015, {f:4, c:22018}, 22023, {f:2, c:22026}, {f:4, c:22032}, 22037, {f:2, c:22041}, 22045, {f:3, c:22048}, {f:2, c:22053}, 22056, {f:2, c:22058}, 22067, 22071, 22074, {f:3, c:22076}, 22080, {f:10, c:22082}, {f:5, c:22095}, {f:2, c:22101}, {f:2, c:22106}, {f:2, c:22110}, 22113, 22115, 22119, {f:2, c:22125}, 22128, 22131, 22133, 22135, 22138, {f:3, c:22141}, {f:4, c:22145}, 
  {f:4, c:22152}, 22157, {f:3, c:22160}, 22164, {f:3, c:22166}, {f:9, c:22170}, {f:2, c:22180}, 22183, {f:5, c:22185}, {f:3, c:22192}, 22197, {f:4, c:22200}, {f:3, c:22205}, {f:2, c:22211}, {f:2, c:22214}, 22219, {f:4, c:22221}, {f:2, c:22226}, {f:2, c:22229}, {f:2, c:22232}, 22236, 22243, {f:6, c:22245}, 22252, {f:2, c:22254}, {f:2, c:22258}, {f:3, c:22262}, {f:2, c:22267}, {f:3, c:22272}, 22277, 22284, {f:4, c:22286}, {f:2, c:22292}, 22295, {f:3, c:22297}, {f:2, c:22301}, {f:3, c:22304}, {f:4, 
  c:22308}, 22315, {f:2, c:22321}, {f:5, c:22324}, {f:2, c:22332}, 22335, 22337, {f:4, c:22339}, {f:2, c:22344}, 22347, {f:5, c:22354}, {f:2, c:22360}, {f:2, c:22370}, 22373, 22375, 22380, 22382, {f:3, c:22384}, {f:2, c:22388}, {f:3, c:22392}, {f:5, c:22397}, {f:4, c:22407}, {f:5, c:22413}, {f:7, c:22420}, {f:4, c:22428}, 22437, 22440, 22442, 22444, {f:3, c:22447}, 22451, {f:3, c:22453}, {f:9, c:22457}, {f:7, c:22468}, {f:2, c:22476}, {f:2, c:22480}, 22483, {f:2, c:22486}, {f:2, c:22491}, 22494, 
  {f:2, c:22498}, {f:8, c:22501}, 22510, {f:4, c:22512}, {f:2, c:22517}, {f:2, c:22523}, {f:2, c:22526}, 22529, {f:2, c:22531}, {f:2, c:22536}, 22540, {f:3, c:22542}, {f:3, c:22546}, {f:2, c:22551}, {f:3, c:22554}, 22559, {f:2, c:22562}, {f:5, c:22565}, {f:4, c:22571}, {f:2, c:22578}, {f:14, c:22582}, {f:5, c:22597}, 22606, 22608, 22611, {f:2, c:22613}, {f:5, c:22617}, {f:3, c:22623}, 22627, {f:5, c:22630}, {f:8, c:22637}, {f:3, c:22646}, {f:4, c:22650}, 22655, 22658, 22660, {f:3, c:22662}, {f:7, 
  c:22667}, {f:5, c:22676}, 22683, 22685, {f:8, c:22688}, {f:4, c:22698}, {f:4, c:22703}, {f:7, c:22708}, 22717, {f:2, c:22719}, {f:3, c:22722}, 22726, {f:9, c:22728}, 22738, 22740, {f:2, c:22742}, {f:3, c:22747}, 22753, 22755, {f:4, c:22757}, 22762, 22765, {f:2, c:22769}, {f:2, c:22772}, {f:2, c:22775}, {f:2, c:22779}, {f:4, c:22782}, 22787, {f:2, c:22789}, {f:2, c:22792}, [12066, 22794], {f:2, c:22795}, 22798, {f:4, c:22800}, {f:2, c:22807}, 22811, {f:2, c:22813}, {f:2, c:22816}, 22819, 22822, 
  22824, 22828, 22832, {f:2, c:22834}, {f:2, c:22837}, 22843, 22845, {f:2, c:22847}, 22851, {f:2, c:22853}, 22858, {f:2, c:22860}, 22864, {f:2, c:22866}, 22873, {f:5, c:22875}, 22881, {f:2, c:22883}, {f:3, c:22886}, 22891, 22893, {f:4, c:22895}, 22901, 22903, {f:3, c:22906}, {f:3, c:22910}, 22917, 22921, {f:2, c:22923}, {f:4, c:22926}, {f:2, c:22932}, 22936, {f:3, c:22938}, {f:4, c:22943}, {f:2, c:22950}, {f:2, c:22956}, {f:2, c:22960}, {f:6, c:22963}, 22970, {f:2, c:22972}, {f:7, c:22975}, {f:3, 
  c:22983}, {f:4, c:22988}, {f:2, c:22997}, 23001, 23003, {f:5, c:23006}, 23012, {f:2, c:23014}, {f:3, c:23017}, {f:12, c:23021}, 23034, {f:3, c:23036}, 23040, 23042, {f:2, c:23050}, {f:4, c:23053}, 23058, {f:4, c:23060}, {f:3, c:23065}, {f:2, c:23069}, {f:2, c:23073}, 23076, {f:3, c:23078}, {f:7, c:23082}, 23091, 23093, {f:5, c:23095}, {f:3, c:23101}, {f:4, c:23106}, {f:2, c:23111}, {f:10, c:23115}, {f:4, c:23126}, {f:7, c:23131}, {f:3, c:23139}, {f:2, c:23144}, {f:2, c:23147}, {f:6, c:23150}, {f:2, 
  c:23160}, {f:4, c:23163}, {f:18, c:23168}, {f:7, c:23187}, {f:11, c:23196}, {f:2, c:23208}, {f:7, c:23211}, 23220, {f:2, c:23222}, {f:4, c:23225}, {f:2, c:23231}, {f:6, c:23235}, {f:2, c:23242}, {f:5, c:23245}, 23251, 23253, {f:3, c:23257}, {f:3, c:23261}, 23266, {f:2, c:23268}, {f:2, c:23271}, 23274, {f:5, c:23276}, {f:3, c:23282}, {f:5, c:23286}, {f:4, c:23292}, {f:7, c:23297}, 23306, {f:9, c:23309}, 23320, {f:7, c:23322}, {f:8, c:23330}, {f:5, c:23339}, 23345, 23347, {f:2, c:23349}, {f:7, c:23353}, 
  {f:11, c:23361}, {f:3, c:23373}, 23378, 23382, 23390, {f:2, c:23392}, {f:2, c:23399}, {f:3, c:23405}, 23410, 23412, {f:2, c:23414}, 23417, {f:2, c:23419}, 23422, 23426, 23430, 23434, {f:2, c:23437}, {f:3, c:23440}, 23444, 23446, 23455, {f:3, c:23463}, {f:4, c:23468}, {f:2, c:23473}, 23479, {f:3, c:23482}, {f:2, c:23488}, 23491, {f:4, c:23496}, {f:3, c:23501}, 23505, {f:9, c:23508}, 23520, 23523, 23530, 23533, 23535, {f:4, c:23537}, 23543, {f:2, c:23549}, 23552, {f:2, c:23554}, 23557, 23564, 23568, 
  {f:2, c:23570}, 23575, 23577, 23579, {f:4, c:23582}, 23587, 23590, {f:4, c:23592}, {f:4, c:23597}, {f:2, c:23602}, {f:2, c:23605}, {f:2, c:23619}, {f:2, c:23622}, {f:2, c:23628}, {f:3, c:23634}, {f:3, c:23638}, {f:4, c:23642}, 23647, 23655, {f:3, c:23657}, 23661, 23664, {f:7, c:23666}, {f:4, c:23675}, 23680, {f:5, c:23683}, {f:3, c:23689}, {f:2, c:23694}, {f:2, c:23698}, 23701, {f:4, c:23709}, {f:5, c:23716}, 23722, {f:3, c:23726}, 23730, 23732, 23734, {f:4, c:23737}, 23742, 23744, {f:2, c:23746}, 
  {f:6, c:23749}, {f:6, c:23756}, {f:6, c:23763}, {f:7, c:23770}, {f:2, c:23778}, 23783, 23785, {f:2, c:23787}, {f:2, c:23790}, {f:3, c:23793}, 23797, {f:4, c:23799}, 23804, {f:4, c:23806}, {f:2, c:23812}, {f:5, c:23816}, {f:5, c:23823}, 23829, {f:3, c:23832}, {f:2, c:23836}, {f:5, c:23839}, 23845, 23848, {f:2, c:23850}, {f:5, c:23855}, {f:8, c:23861}, {f:8, c:23871}, {f:2, c:23880}, {f:3, c:23885}, {f:7, c:23889}, {f:2, c:23897}, 23900, {f:11, c:23902}, 23914, {f:2, c:23917}, {f:4, c:23920}, {f:12, 
  c:23925}, 23939, {f:2, c:23941}, {f:15, c:23944}, 23960, {f:3, c:23962}, {f:2, c:23966}, {f:6, c:23969}, {f:15, c:23976}, 23993, 23995, {f:8, c:23997}, {f:5, c:24006}, 24012, {f:4, c:24014}, 24019, {f:6, c:24021}, 24028, {f:2, c:24031}, {f:2, c:24035}, 24042, {f:2, c:24044}, {f:2, c:24053}, {f:5, c:24056}, {f:2, c:24063}, 24068, 24071, {f:3, c:24073}, {f:2, c:24077}, {f:2, c:24082}, 24087, {f:7, c:24094}, {f:3, c:24104}, 24108, {f:2, c:24111}, 24114, {f:2, c:24116}, {f:2, c:24121}, {f:2, c:24126}, 
  24129, {f:6, c:24134}, {f:7, c:24141}, 24150, {f:2, c:24153}, {f:2, c:24156}, 24160, {f:7, c:24164}, {f:5, c:24173}, 24181, 24183, {f:3, c:24193}, 24197, {f:2, c:24200}, {f:3, c:24204}, 24210, 24216, 24219, 24221, {f:4, c:24225}, {f:3, c:24232}, 24236, {f:5, c:24238}, 24244, {f:4, c:24250}, {f:10, c:24255}, {f:6, c:24267}, {f:2, c:24276}, {f:4, c:24279}, {f:3, c:24284}, {f:4, c:24292}, 24297, 24299, {f:6, c:24301}, 24309, {f:2, c:24312}, {f:3, c:24315}, {f:3, c:24325}, 24329, {f:3, c:24332}, 24336, 
  24338, 24340, 24342, {f:2, c:24345}, {f:3, c:24348}, {f:4, c:24353}, 24360, {f:2, c:24363}, 24366, 24368, 24370, 24372, {f:3, c:24374}, 24379, {f:3, c:24381}, {f:5, c:24385}, 24391, {f:3, c:24393}, 24397, 24399, 24401, 24404, {f:3, c:24410}, {f:3, c:24414}, 24419, 24421, {f:2, c:24423}, 24427, {f:2, c:24430}, 24434, {f:3, c:24436}, 24440, 24442, {f:3, c:24445}, 24451, 24454, {f:3, c:24461}, {f:2, c:24467}, 24470, {f:2, c:24474}, 24477, 24479, {f:6, c:24482}, {f:2, c:24491}, {f:6, c:24495}, 24502, 
  24504, {f:2, c:24506}, {f:5, c:24510}, {f:2, c:24519}, {f:2, c:24522}, 24526, {f:3, c:24531}, {f:3, c:24538}, {f:2, c:24542}, {f:2, c:24546}, {f:2, c:24549}, {f:2, c:24552}, 24556, {f:2, c:24559}, {f:3, c:24562}, {f:2, c:24566}, {f:2, c:24569}, 24572, {f:3, c:24583}, {f:2, c:24587}, {f:2, c:24592}, 24595, {f:2, c:24599}, 24602, {f:2, c:24606}, {f:3, c:24610}, {f:3, c:24620}, {f:5, c:24624}, {f:5, c:24630}, {f:2, c:24637}, 24640, {f:7, c:24644}, 24652, {f:2, c:24654}, 24657, {f:2, c:24659}, {f:3, 
  c:24662}, {f:2, c:24667}, {f:4, c:24670}, {f:2, c:24677}, 24686, {f:2, c:24689}, {f:2, c:24692}, 24695, 24702, {f:3, c:24704}, {f:4, c:24709}, {f:2, c:24714}, {f:4, c:24718}, 24723, 24725, {f:3, c:24727}, 24732, 24734, {f:2, c:24737}, {f:2, c:24740}, 24743, {f:2, c:24745}, 24750, 24752, 24755, 24759, {f:2, c:24761}, {f:8, c:24765}, {f:3, c:24775}, {f:5, c:24780}, {f:3, c:24786}, {f:2, c:24790}, 24793, 24795, 24798, {f:4, c:24802}, 24810, 24821, {f:2, c:24823}, {f:4, c:24828}, {f:4, c:24834}, 24839, 
  {f:3, c:24842}, {f:5, c:24848}, {f:4, c:24854}, {f:2, c:24861}, {f:2, c:24865}, 24869, {f:3, c:24872}, {f:8, c:24876}, {f:2, c:24885}, {f:6, c:24888}, {f:8, c:24896}, 24905, 24909, {f:2, c:24911}, {f:3, c:24914}, {f:2, c:24918}, 24921, {f:2, c:24923}, 24926, {f:2, c:24928}, {f:2, c:24933}, 24937, {f:2, c:24940}, 24943, {f:2, c:24945}, 24948, {f:10, c:24952}, {f:7, c:24963}, {f:2, c:24972}, 24975, 24979, {f:5, c:24981}, {f:2, c:24987}, {f:6, c:24990}, {f:2, c:24997}, 25002, 25005, {f:3, c:25007}, 
  {f:3, c:25011}, {f:6, c:25016}, {f:3, c:25023}, {f:4, c:25027}, {f:4, c:25037}, 25043, {f:9, c:25045}, {f:3, c:25056}, {f:2, c:25060}, 25063, {f:9, c:25065}, {f:2, c:25075}, 25081, 25083, 25085, {f:5, c:25089}, 25097, 25107, 25113, {f:3, c:25116}, 25120, 25123, 25126, {f:2, c:25128}, 25131, 25133, 25135, 25137, 25141, [12094, 25142], {f:5, c:25144}, 25154, {f:3, c:25156}, 25162, {f:2, c:25167}, {f:3, c:25173}, {f:2, c:25177}, {f:7, c:25180}, {f:2, c:25188}, 25192, {f:2, c:25201}, {f:2, c:25204}, 
  {f:2, c:25207}, {f:2, c:25210}, 25213, {f:3, c:25217}, {f:4, c:25221}, {f:6, c:25227}, 25236, 25241, {f:3, c:25244}, 25251, {f:2, c:25254}, {f:2, c:25257}, {f:4, c:25261}, {f:3, c:25266}, {f:3, c:25270}, 25274, 25278, {f:2, c:25280}, 25283, 25291, 25295, 25297, 25301, {f:2, c:25309}, {f:2, c:25312}, 25316, {f:2, c:25322}, 25328, 25330, 25333, {f:4, c:25336}, 25344, {f:4, c:25347}, {f:4, c:25354}, {f:2, c:25359}, {f:4, c:25362}, {f:3, c:25367}, 25372, {f:2, c:25382}, 25385, {f:3, c:25388}, {f:2, 
  c:25392}, {f:6, c:25395}, {f:2, c:25403}, {f:3, c:25407}, 25412, {f:2, c:25415}, 25418, {f:4, c:25425}, {f:8, c:25430}, 25440, {f:3, c:25444}, 25450, 25452, {f:2, c:25455}, {f:3, c:25459}, {f:2, c:25464}, {f:4, c:25468}, 25473, {f:2, c:25477}, 25483, 25485, 25489, {f:3, c:25491}, 25495, {f:7, c:25497}, 25505, 25508, 25510, 25515, 25519, {f:2, c:25521}, {f:2, c:25525}, 25529, 25531, 25533, 25535, {f:3, c:25537}, 25541, {f:2, c:25543}, {f:3, c:25546}, 25553, {f:3, c:25555}, {f:3, c:25559}, {f:3, 
  c:25563}, 25567, 25570, {f:5, c:25572}, {f:2, c:25579}, {f:3, c:25583}, 25587, 25589, 25591, {f:4, c:25593}, 25598, {f:2, c:25603}, {f:5, c:25606}, 25614, {f:2, c:25617}, {f:2, c:25621}, {f:3, c:25624}, 25629, 25631, {f:4, c:25634}, {f:3, c:25639}, 25643, {f:6, c:25646}, 25653, {f:3, c:25655}, {f:2, c:25659}, 25662, 25664, {f:2, c:25666}, 25673, {f:6, c:25675}, 25683, {f:3, c:25685}, {f:3, c:25689}, 25693, {f:7, c:25696}, 25704, {f:3, c:25706}, 25710, {f:3, c:25712}, {f:2, c:25716}, 25719, {f:6, 
  c:25724}, 25731, 25734, {f:8, c:25737}, 25748, {f:2, c:25751}, {f:4, c:25754}, {f:3, c:25760}, {f:3, c:25766}, 25770, 25775, 25777, 25780, 25782, 25785, 25789, 25795, 25798, {f:2, c:25800}, 25804, 25807, 25809, 25811, {f:2, c:25813}, 25817, {f:3, c:25819}, 25823, 25825, 25827, 25829, {f:5, c:25831}, {f:2, c:25837}, 25843, {f:2, c:25845}, {f:2, c:25848}, 25853, 25855, {f:3, c:25857}, 25861, {f:2, c:25863}, {f:5, c:25866}, {f:2, c:25872}, 25875, 25877, 25879, 25882, 25884, {f:4, c:25886}, {f:4, c:25894}, 
  25901, {f:4, c:25904}, 25911, 25914, {f:2, c:25916}, {f:5, c:25920}, {f:2, c:25926}, {f:2, c:25930}, {f:2, c:25933}, 25936, {f:3, c:25938}, 25944, 25946, 25948, {f:3, c:25951}, {f:2, c:25956}, {f:4, c:25959}, {f:3, c:25965}, 25969, 25971, 25974, {f:9, c:25977}, {f:3, c:25988}, {f:3, c:25992}, {f:3, c:25997}, 26002, 26004, 26006, 26008, 26010, {f:2, c:26013}, 26016, {f:2, c:26018}, 26022, 26024, 26026, 26030, {f:6, c:26033}, 26040, {f:2, c:26042}, {f:3, c:26046}, 26050, {f:4, c:26055}, 26061, {f:2, 
  c:26064}, {f:3, c:26067}, {f:8, c:26072}, 26081, {f:2, c:26083}, {f:2, c:26090}, {f:4, c:26098}, {f:2, c:26104}, {f:5, c:26107}, 26113, {f:2, c:26116}, {f:3, c:26119}, 26123, 26125, {f:3, c:26128}, {f:3, c:26134}, {f:3, c:26138}, 26142, {f:4, c:26145}, 26150, {f:4, c:26153}, 26158, 26160, {f:2, c:26162}, {f:5, c:26167}, 26173, {f:2, c:26175}, {f:7, c:26180}, {f:2, c:26189}, {f:2, c:26192}, {f:2, c:26200}, {f:2, c:26203}, 26206, 26208, {f:2, c:26210}, 26213, 26215, {f:5, c:26217}, {f:3, c:26225}, 
  26229, {f:2, c:26232}, {f:3, c:26235}, {f:3, c:26239}, 26243, {f:2, c:26245}, {f:2, c:26250}, {f:4, c:26253}, {f:4, c:26258}, {f:5, c:26264}, {f:4, c:26270}, {f:4, c:26275}, {f:2, c:26281}, {f:2, c:26284}, {f:5, c:26287}, {f:4, c:26293}, {f:4, c:26298}, {f:5, c:26303}, 26309, 26312, {f:12, c:26314}, {f:2, c:26327}, 26330, {f:2, c:26334}, {f:5, c:26337}, {f:2, c:26343}, {f:2, c:26346}, {f:3, c:26349}, 26353, {f:2, c:26357}, {f:2, c:26362}, 26365, {f:2, c:26369}, {f:4, c:26372}, 26380, {f:2, c:26382}, 
  {f:3, c:26385}, 26390, {f:3, c:26392}, 26396, 26398, {f:6, c:26400}, 26409, 26414, 26416, {f:2, c:26418}, {f:4, c:26422}, {f:2, c:26427}, {f:2, c:26430}, 26433, {f:2, c:26436}, 26439, {f:2, c:26442}, 26445, 26450, {f:2, c:26452}, {f:5, c:26455}, 26461, {f:3, c:26466}, {f:2, c:26470}, {f:2, c:26475}, 26478, 26484, 26486, {f:4, c:26488}, 26493, 26496, {f:2, c:26498}, {f:2, c:26501}, 26504, 26506, {f:4, c:26508}, {f:4, c:26513}, 26518, 26521, 26523, {f:3, c:26527}, 26532, 26534, 26537, 26540, 26542, 
  {f:2, c:26545}, 26548, {f:8, c:26553}, 26562, {f:10, c:26565}, {f:3, c:26581}, 26587, 26591, 26593, {f:2, c:26595}, {f:3, c:26598}, {f:2, c:26602}, {f:2, c:26605}, 26610, {f:8, c:26613}, 26622, {f:4, c:26625}, 26630, 26637, 26640, 26642, {f:2, c:26644}, {f:5, c:26648}, {f:3, c:26654}, {f:7, c:26658}, {f:7, c:26667}, {f:3, c:26676}, {f:2, c:26682}, 26687, 26695, 26699, 26701, 26703, 26706, {f:10, c:26710}, 26730, {f:8, c:26732}, 26741, {f:9, c:26744}, 26754, 26756, {f:8, c:26759}, {f:3, c:26768}, 
  {f:3, c:26772}, {f:4, c:26777}, 26782, {f:2, c:26784}, {f:3, c:26787}, {f:4, c:26793}, 26798, {f:2, c:26801}, 26804, {f:10, c:26806}, 26817, {f:6, c:26819}, 26826, 26828, {f:4, c:26830}, {f:2, c:26835}, 26841, {f:4, c:26843}, {f:2, c:26849}, {f:3, c:26852}, {f:6, c:26856}, 26863, {f:3, c:26866}, {f:3, c:26870}, 26875, {f:4, c:26877}, {f:3, c:26882}, {f:5, c:26886}, 26892, 26897, {f:12, c:26899}, {f:3, c:26913}, {f:8, c:26917}, {f:2, c:26926}, {f:3, c:26929}, {f:4, c:26933}, {f:3, c:26938}, 26942, 
  {f:2, c:26944}, {f:7, c:26947}, {f:8, c:26955}, {f:2, c:26965}, {f:2, c:26968}, {f:2, c:26971}, 26975, {f:2, c:26977}, {f:2, c:26980}, 26983, {f:2, c:26985}, 26988, {f:2, c:26991}, {f:3, c:26994}, 26998, {f:2, c:27002}, {f:3, c:27005}, 27009, 27011, 27013, {f:3, c:27018}, {f:6, c:27022}, {f:2, c:27030}, {f:2, c:27033}, {f:10, c:27037}, 27049, 27052, {f:2, c:27055}, {f:2, c:27058}, {f:2, c:27061}, {f:3, c:27064}, {f:3, c:27068}, 27072, {f:8, c:27074}, 27087, {f:3, c:27089}, {f:6, c:27093}, {f:3, 
  c:27100}, {f:6, c:27105}, {f:5, c:27112}, {f:4, c:27118}, {f:9, c:27124}, 27134, 27136, {f:2, c:27139}, {f:4, c:27142}, {f:8, c:27147}, {f:3, c:27156}, {f:4, c:27162}, 27168, 27170, {f:4, c:27172}, 27177, {f:4, c:27179}, 27184, {f:3, c:27186}, {f:2, c:27190}, {f:2, c:27195}, {f:5, c:27199}, {f:2, c:27205}, {f:2, c:27209}, {f:4, c:27212}, {f:7, c:27217}, 27226, {f:3, c:27228}, 27232, {f:2, c:27235}, {f:11, c:27238}, {f:7, c:27250}, {f:2, c:27258}, {f:3, c:27261}, {f:3, c:27265}, {f:4, c:27269}, 
  {f:4, c:27274}, 27279, {f:2, c:27282}, {f:2, c:27285}, {f:4, c:27288}, {f:3, c:27293}, 27297, {f:5, c:27300}, 27306, {f:2, c:27309}, {f:3, c:27312}, {f:4, c:27316}, {f:2, c:27321}, {f:7, c:27324}, {f:15, c:27332}, {f:6, c:27348}, 27356, {f:7, c:27360}, 27369, 27371, {f:6, c:27373}, {f:4, c:27380}, {f:2, c:27385}, {f:8, c:27388}, {f:5, c:27397}, {f:4, c:27403}, {f:2, c:27408}, {f:3, c:27411}, {f:7, c:27415}, 27423, {f:2, c:27429}, {f:10, c:27432}, {f:4, c:27443}, 27448, {f:2, c:27451}, {f:4, c:27455}, 
  {f:2, c:27460}, 27464, {f:2, c:27466}, {f:3, c:27469}, {f:8, c:27473}, {f:5, c:27482}, 27488, {f:2, c:27496}, {f:7, c:27499}, {f:4, c:27507}, 27514, {f:4, c:27517}, 27525, 27528, 27532, {f:4, c:27534}, {f:2, c:27540}, 27543, 27545, {f:2, c:27548}, {f:2, c:27551}, {f:2, c:27554}, {f:5, c:27557}, {f:2, c:27564}, {f:2, c:27568}, 27574, {f:2, c:27576}, {f:3, c:27580}, 27584, {f:2, c:27587}, {f:4, c:27591}, 27596, 27598, {f:2, c:27600}, 27608, 27610, {f:5, c:27612}, {f:8, c:27618}, {f:3, c:27628}, {f:3, 
  c:27632}, 27636, {f:3, c:27638}, {f:3, c:27642}, 27646, {f:5, c:27648}, {f:3, c:27657}, 27662, 27666, 27671, {f:3, c:27676}, 27680, 27685, 27693, 27697, 27699, {f:2, c:27702}, {f:4, c:27705}, {f:2, c:27710}, {f:3, c:27715}, 27720, {f:5, c:27723}, {f:3, c:27729}, 27734, {f:3, c:27736}, {f:2, c:27746}, {f:3, c:27749}, {f:5, c:27755}, 27761, 27763, 27765, {f:2, c:27767}, {f:3, c:27770}, {f:2, c:27775}, 27780, 27783, {f:2, c:27786}, {f:2, c:27789}, {f:2, c:27793}, {f:4, c:27797}, 27802, {f:3, c:27804}, 
  27808, 27810, 27816, 27820, {f:2, c:27823}, {f:4, c:27828}, 27834, {f:4, c:27840}, {f:3, c:27846}, 27851, {f:3, c:27853}, {f:2, c:27857}, {f:3, c:27864}, {f:2, c:27868}, 27871, 27876, {f:2, c:27878}, 27881, {f:2, c:27884}, 27890, 27892, 27897, {f:2, c:27903}, {f:2, c:27906}, {f:2, c:27909}, {f:3, c:27912}, 27917, {f:3, c:27919}, {f:4, c:27923}, 27928, {f:2, c:27932}, {f:6, c:27935}, 27942, {f:2, c:27944}, {f:2, c:27948}, {f:2, c:27951}, 27956, {f:3, c:27958}, 27962, {f:2, c:27967}, 27970, 27972, 
  27977, 27980, 27984, {f:4, c:27989}, 27995, 27997, 27999, {f:2, c:28001}, {f:2, c:28004}, {f:2, c:28007}, {f:3, c:28011}, {f:4, c:28016}, {f:2, c:28021}, {f:2, c:28026}, {f:5, c:28029}, {f:2, c:28035}, 28038, {f:2, c:28042}, 28045, {f:2, c:28047}, 28050, {f:5, c:28054}, 28060, 28066, 28069, {f:2, c:28076}, {f:2, c:28080}, {f:2, c:28083}, {f:2, c:28086}, {f:6, c:28089}, {f:3, c:28097}, {f:3, c:28104}, {f:4, c:28109}, {f:4, c:28114}, 28119, {f:3, c:28122}, 28127, {f:2, c:28130}, 28133, {f:3, c:28135}, 
  28141, {f:2, c:28143}, 28146, 28148, 28152, {f:8, c:28157}, {f:4, c:28166}, 28171, 28175, {f:2, c:28178}, 28181, {f:2, c:28184}, {f:2, c:28187}, {f:2, c:28190}, 28194, {f:2, c:28199}, 28202, 28206, {f:2, c:28208}, 28211, {f:3, c:28213}, 28217, {f:3, c:28219}, {f:4, c:28223}, {f:8, c:28229}, {f:4, c:28239}, 28245, 28247, {f:2, c:28249}, {f:2, c:28252}, {f:11, c:28256}, {f:2, c:28268}, {f:14, c:28272}, {f:3, c:28288}, 28292, {f:2, c:28295}, {f:5, c:28298}, {f:5, c:28305}, 28311, {f:3, c:28313}, 28318, 
  {f:2, c:28320}, {f:2, c:28323}, 28326, {f:2, c:28328}, {f:4, c:28331}, 28336, 28339, 28341, {f:2, c:28344}, 28348, {f:3, c:28350}, 28355, 28358, {f:3, c:28360}, 28365, 28368, 28370, 28374, {f:2, c:28376}, {f:3, c:28379}, 28387, 28391, {f:2, c:28394}, {f:2, c:28397}, {f:2, c:28400}, 28403, {f:2, c:28405}, {f:5, c:28410}, 28416, {f:3, c:28419}, {f:2, c:28423}, {f:5, c:28426}, {f:3, c:28432}, {f:4, c:28438}, {f:5, c:28443}, 28449, {f:4, c:28453}, 28462, 28464, {f:2, c:28468}, 28471, {f:5, c:28473}, 
  28480, {f:4, c:28482}, {f:3, c:28488}, 28492, {f:3, c:28494}, {f:2, c:28498}, {f:3, c:28501}, {f:2, c:28506}, 28509, {f:3, c:28511}, 28515, 28517, {f:6, c:28519}, 28529, 28531, {f:2, c:28533}, 28537, 28539, {f:2, c:28541}, {f:3, c:28545}, 28549, {f:2, c:28554}, {f:8, c:28559}, {f:4, c:28568}, {f:3, c:28573}, {f:2, c:28578}, {f:2, c:28581}, 28584, {f:4, c:28586}, {f:2, c:28591}, 28594, {f:2, c:28596}, {f:2, c:28599}, {f:6, c:28602}, {f:5, c:28612}, {f:7, c:28618}, {f:2, c:28627}, {f:2, c:28630}, 
  {f:2, c:28633}, {f:2, c:28636}, {f:2, c:28642}, {f:6, c:28645}, {f:2, c:28652}, {f:8, c:28658}, 28667, 28669, {f:6, c:28671}, {f:2, c:28679}, 28682, {f:3, c:28684}, 28688, {f:3, c:28690}, {f:2, c:28694}, 28697, 28700, 28702, {f:2, c:28705}, {f:3, c:28708}, {f:7, c:28713}, 28721, {f:2, c:28723}, {f:3, c:28726}, {f:4, c:28730}, {f:4, c:28735}, {f:7, c:28741}, {f:2, c:28749}, 28752, {f:3, c:28754}, {f:2, c:28758}, {f:4, c:28761}, {f:4, c:28767}, {f:2, c:28773}, {f:3, c:28776}, 28782, {f:4, c:28785}, 
  28791, {f:3, c:28793}, 28797, {f:4, c:28801}, {f:3, c:28806}, {f:3, c:28811}, {f:3, c:28815}, 28819, {f:2, c:28823}, {f:2, c:28826}, {f:13, c:28830}, 28848, 28850, {f:3, c:28852}, 28858, {f:2, c:28862}, {f:4, c:28868}, 28873, {f:4, c:28875}, {f:8, c:28880}, 28890, {f:3, c:28892}, {f:4, c:28896}, 28901, 28906, 28910, {f:4, c:28912}, {f:2, c:28917}, 28920, {f:3, c:28922}, {f:11, c:28926}, {f:5, c:28939}, {f:2, c:28945}, 28948, 28951, {f:6, c:28955}, {f:4, c:28962}, {f:8, c:28967}, {f:4, c:28978}, 
  {f:14, c:28983}, {f:3, c:28998}, 29003, 29005, {f:3, c:29007}, {f:9, c:29011}, 29021, {f:3, c:29023}, 29027, 29029, {f:2, c:29034}, 29037, {f:3, c:29039}, {f:4, c:29044}, 29049, {f:2, c:29051}, {f:6, c:29054}, {f:5, c:29061}, {f:4, c:29067}, {f:2, c:29072}, 29075, {f:2, c:29077}, {f:5, c:29082}, {f:7, c:29089}, {f:3, c:29097}, {f:4, c:29101}, 29106, 29108, {f:3, c:29110}, {f:4, c:29114}, {f:2, c:29119}, 29122, {f:4, c:29124}, {f:5, c:29129}, {f:3, c:29135}, 29139, {f:3, c:29142}, {f:2, c:29146}, 
  {f:2, c:29149}, {f:4, c:29153}, {f:5, c:29160}, {f:5, c:29167}, {f:4, c:29173}, {f:2, c:29178}, 29181, {f:7, c:29183}, {f:6, c:29191}, {f:2, c:29198}, {f:10, c:29201}, 29212, {f:10, c:29214}, 29225, 29227, {f:3, c:29229}, {f:2, c:29235}, 29244, {f:7, c:29248}, {f:3, c:29257}, {f:4, c:29262}, {f:3, c:29267}, 29271, 29274, 29276, 29278, 29280, {f:3, c:29283}, 29288, {f:4, c:29290}, {f:2, c:29296}, {f:2, c:29299}, {f:3, c:29302}, {f:2, c:29307}, {f:2, c:29314}, {f:5, c:29317}, 29324, 29326, {f:2, 
  c:29328}, {f:3, c:29331}, {f:8, c:29335}, {f:2, c:29344}, {f:4, c:29347}, {f:4, c:29352}, 29358, {f:3, c:29361}, 29365, {f:6, c:29370}, {f:3, c:29381}, {f:4, c:29385}, 29391, 29393, {f:4, c:29395}, 29400, {f:4, c:29402}, 29407, {f:6, c:29410}, {f:2, c:29418}, {f:2, c:29429}, {f:3, c:29438}, 29442, {f:6, c:29444}, {f:3, c:29451}, {f:4, c:29455}, 29460, {f:3, c:29464}, {f:2, c:29471}, {f:2, c:29475}, {f:3, c:29478}, 29485, {f:2, c:29487}, {f:2, c:29490}, 29493, 29498, {f:2, c:29500}, 29504, {f:2, 
  c:29506}, {f:7, c:29510}, {f:2, c:29518}, 29521, {f:4, c:29523}, {f:8, c:29528}, {f:7, c:29537}, 29545, 29550, 29553, {f:2, c:29555}, 29558, 29561, 29565, 29567, {f:3, c:29569}, {f:2, c:29573}, 29576, 29578, {f:2, c:29580}, {f:2, c:29583}, {f:4, c:29586}, {f:4, c:29591}, {f:3, c:29596}, {f:2, c:29600}, {f:6, c:29603}, 29610, {f:2, c:29612}, 29617, {f:3, c:29620}, {f:2, c:29624}, {f:4, c:29628}, 29633, {f:5, c:29635}, {f:2, c:29643}, 29646, {f:7, c:29650}, {f:4, c:29658}, 29663, {f:4, c:29665}, 
  29670, 29672, {f:3, c:29674}, {f:4, c:29678}, {f:11, c:29683}, {f:4, c:29695}, 29700, {f:2, c:29703}, {f:4, c:29707}, {f:9, c:29713}, {f:6, c:29724}, {f:2, c:29731}, 29735, 29737, 29739, 29741, 29743, {f:2, c:29745}, {f:5, c:29751}, {f:2, c:29757}, 29760, {f:9, c:29762}, {f:9, c:29772}, 29782, 29784, 29789, {f:3, c:29792}, {f:5, c:29796}, {f:2, c:29803}, {f:2, c:29806}, {f:5, c:29809}, {f:6, c:29816}, 29823, 29826, {f:3, c:29828}, 29832, 29834, {f:2, c:29836}, 29839, {f:11, c:29841}, 29853, {f:4, 
  c:29855}, {f:2, c:29860}, {f:6, c:29866}, {f:9, c:29873}, {f:2, c:29883}, {f:12, c:29886}, {f:4, c:29899}, {f:2, c:29904}, 29907, {f:5, c:29909}, 29915, 29917, 29919, 29921, 29925, {f:7, c:29927}, {f:4, c:29936}, 29941, {f:7, c:29944}, {f:4, c:29952}, {f:7, c:29957}, 29966, 29968, 29970, {f:4, c:29972}, 29979, {f:2, c:29981}, {f:3, c:29984}, 29988, {f:2, c:29990}, 29994, 29998, 30004, 30006, 30009, {f:2, c:30012}, 30015, {f:4, c:30017}, {f:2, c:30022}, {f:2, c:30025}, 30029, {f:4, c:30032}, {f:4, 
  c:30037}, {f:4, c:30046}, {f:2, c:30051}, {f:3, c:30055}, {f:6, c:30060}, 30067, 30069, 30071, {f:5, c:30074}, {f:3, c:30080}, {f:2, c:30084}, {f:3, c:30088}, {f:3, c:30092}, 30096, 30099, 30101, 30104, {f:2, c:30107}, 30110, 30114, {f:5, c:30118}, 30125, {f:2, c:30134}, {f:2, c:30138}, {f:3, c:30143}, 30150, {f:2, c:30155}, {f:4, c:30158}, 30163, 30167, 30170, {f:2, c:30172}, {f:3, c:30175}, 30181, 30185, {f:4, c:30188}, {f:2, c:30194}, {f:4, c:30197}, {f:2, c:30202}, {f:2, c:30205}, 30212, {f:4, 
  c:30214}, {f:2, c:30222}, {f:4, c:30225}, 30230, 30234, {f:2, c:30236}, 30243, 30248, 30252, {f:2, c:30254}, {f:2, c:30257}, {f:2, c:30262}, {f:2, c:30265}, 30269, 30273, {f:2, c:30276}, 30280, {f:2, c:30282}, {f:6, c:30286}, 30293, 30295, {f:3, c:30297}, 30301, {f:2, c:30304}, 30310, 30312, 30314, {f:3, c:30323}, [12136, 30326], 30327, {f:2, c:30329}, {f:3, c:30335}, 30339, 30341, {f:2, c:30345}, {f:2, c:30348}, {f:2, c:30351}, 30354, {f:2, c:30356}, {f:2, c:30359}, {f:9, c:30363}, {f:9, c:30373}, 
  {f:2, c:30383}, 30387, {f:3, c:30389}, 30393, {f:4, c:30395}, {f:2, c:30400}, {f:2, c:30403}, 30407, 30409, {f:2, c:30411}, 30419, 30421, {f:2, c:30425}, {f:2, c:30428}, 30432, 30434, 30438, {f:6, c:30440}, 30448, 30451, {f:3, c:30453}, {f:2, c:30458}, 30461, {f:2, c:30463}, {f:2, c:30466}, {f:2, c:30469}, 30474, 30476, {f:11, c:30478}, {f:4, c:30491}, 30497, {f:3, c:30499}, 30503, {f:3, c:30506}, 30510, {f:5, c:30512}, 30521, 30523, {f:3, c:30525}, 30530, {f:3, c:30532}, {f:7, c:30536}, {f:8, 
  c:30546}, {f:2, c:30556}, {f:2, c:30559}, 30564, 30567, {f:2, c:30569}, {f:12, c:30573}, {f:3, c:30586}, {f:3, c:30593}, {f:6, c:30598}, {f:2, c:30607}, {f:5, c:30611}, {f:5, c:30617}, 30625, {f:2, c:30627}, 30630, 30632, 30635, {f:2, c:30638}, {f:2, c:30641}, 30644, {f:5, c:30646}, 30654, {f:7, c:30656}, {f:5, c:30664}, {f:9, c:30670}, {f:2, c:30680}, {f:5, c:30685}, 30692, 30694, 30696, 30698, {f:3, c:30704}, {f:2, c:30708}, 30711, {f:4, c:30713}, {f:6, c:30723}, {f:2, c:30730}, {f:3, c:30734}, 
  30739, 30741, 30745, 30747, 30750, {f:3, c:30752}, 30756, 30760, {f:2, c:30762}, {f:2, c:30766}, {f:3, c:30769}, {f:2, c:30773}, 30781, 30783, {f:2, c:30785}, 30788, 30790, {f:4, c:30792}, 30797, 30799, 30801, {f:2, c:30803}, {f:5, c:30808}, {f:6, c:30814}, {f:3, c:30821}, 30825, {f:7, c:30832}, {f:4, c:30840}, {f:10, c:30845}, 30856, {f:2, c:30858}, {f:2, c:30863}, 30866, {f:3, c:30868}, 30873, {f:2, c:30877}, 30880, 30882, 30884, 30886, 30888, {f:3, c:30890}, {f:2, c:30894}, {f:3, c:30901}, 30907, 
  30909, {f:2, c:30911}, {f:3, c:30914}, {f:3, c:30918}, {f:4, c:30924}, {f:3, c:30929}, {f:3, c:30934}, {f:8, c:30939}, {f:3, c:30948}, {f:3, c:30953}, {f:2, c:30957}, {f:2, c:30960}, 30963, {f:2, c:30965}, {f:2, c:30968}, {f:2, c:30971}, {f:3, c:30974}, {f:3, c:30978}, {f:8, c:30982}, {f:4, c:30991}, {f:5, c:30996}, {f:4, c:31002}, {f:5, c:31007}, 31013, {f:3, c:31015}, {f:4, c:31021}, {f:2, c:31026}, {f:5, c:31029}, 31037, 31039, {f:4, c:31042}, 31047, {f:9, c:31050}, {f:2, c:31060}, {f:2, c:31064}, 
  31073, {f:2, c:31075}, 31078, {f:4, c:31081}, 31086, {f:7, c:31088}, 31097, {f:5, c:31099}, {f:2, c:31106}, {f:4, c:31110}, {f:2, c:31115}, {f:10, c:31120}, {f:11, c:31131}, {f:2, c:31144}, {f:3, c:31147}, 31151, 31154, {f:4, c:31156}, [12145, 31160], 31164, 31167, 31170, {f:2, c:31172}, {f:2, c:31175}, 31178, 31180, {f:3, c:31182}, {f:2, c:31187}, {f:2, c:31190}, {f:6, c:31193}, {f:3, c:31200}, 31205, 31208, 31210, 31212, 31214, {f:7, c:31217}, {f:2, c:31225}, 31228, {f:2, c:31230}, 31233, {f:2, 
  c:31236}, {f:4, c:31239}, 31244, {f:5, c:31247}, {f:2, c:31253}, {f:2, c:31256}, {f:3, c:31259}, 31263, {f:2, c:31265}, {f:10, c:31268}, {f:2, c:31279}, 31282, {f:3, c:31284}, 31288, 31290, 31294, {f:5, c:31297}, {f:5, c:31303}, {f:2, c:31311}, {f:5, c:31314}, {f:9, c:31320}, {f:6, c:31331}, 31338, {f:4, c:31340}, {f:3, c:31345}, 31349, {f:4, c:31355}, 31362, 31365, 31367, {f:4, c:31369}, {f:3, c:31374}, {f:2, c:31379}, {f:3, c:31385}, 31390, {f:4, c:31393}, 31399, 31403, {f:4, c:31407}, {f:2, 
  c:31412}, {f:3, c:31415}, {f:4, c:31419}, {f:4, c:31424}, 31430, 31433, {f:10, c:31436}, {f:2, c:31447}, {f:4, c:31450}, {f:2, c:31457}, 31460, {f:3, c:31463}, {f:2, c:31467}, 31470, {f:6, c:31472}, {f:2, c:31479}, {f:2, c:31483}, 31486, {f:3, c:31488}, 31493, 31495, 31497, {f:3, c:31500}, 31504, {f:2, c:31506}, {f:3, c:31510}, 31514, {f:2, c:31516}, 31519, {f:3, c:31521}, 31527, 31529, 31533, {f:2, c:31535}, 31538, {f:4, c:31540}, 31545, 31547, 31549, {f:6, c:31551}, 31560, 31562, {f:2, c:31565}, 
  31571, 31573, 31575, 31577, 31580, {f:2, c:31582}, 31585, {f:4, c:31587}, {f:6, c:31592}, {f:2, c:31599}, {f:2, c:31603}, 31606, 31608, 31610, {f:2, c:31612}, 31615, {f:4, c:31617}, {f:5, c:31622}, 31628, {f:2, c:31630}, {f:3, c:31633}, 31638, {f:4, c:31640}, {f:3, c:31646}, {f:3, c:31651}, {f:3, c:31662}, {f:2, c:31666}, {f:3, c:31669}, {f:7, c:31673}, {f:2, c:31682}, 31685, 31688, 31690, {f:4, c:31693}, 31698, {f:5, c:31700}, {f:2, c:31707}, {f:3, c:31710}, {f:2, c:31714}, {f:2, c:31719}, {f:3, 
  c:31723}, {f:2, c:31727}, 31730, {f:3, c:31732}, {f:4, c:31736}, 31741, 31743, {f:6, c:31745}, {f:3, c:31752}, 31758, {f:6, c:31760}, {f:7, c:31767}, 31776, 31778, {f:2, c:31780}, {f:2, c:31784}, {f:12, c:31788}, {f:4, c:31801}, 31810, {f:8, c:31812}, {f:14, c:31822}, {f:2, c:31837}, {f:3, c:31841}, {f:4, c:31845}, 31851, 31853, {f:3, c:31855}, {f:6, c:31861}, {f:11, c:31870}, {f:7, c:31882}, {f:2, c:31891}, 31894, {f:3, c:31897}, {f:2, c:31904}, 31907, {f:4, c:31910}, {f:3, c:31915}, {f:2, c:31919}, 
  {f:5, c:31924}, {f:2, c:31930}, {f:2, c:31935}, {f:3, c:31938}, 31942, 31945, 31947, {f:7, c:31950}, 31960, {f:2, c:31962}, {f:6, c:31969}, {f:6, c:31977}, 31985, 31987, 31989, 31991, 31994, {f:2, c:31996}, 31999, 32001, 32003, 32012, {f:2, c:32014}, {f:2, c:32017}, 32022, 32024, {f:3, c:32029}, {f:4, c:32035}, {f:3, c:32040}, {f:3, c:32044}, {f:5, c:32052}, 32059, {f:2, c:32061}, 32065, 32067, 32069, {f:7, c:32071}, 32079, {f:12, c:32081}, {f:2, c:32095}, {f:3, c:32099}, 32103, {f:5, c:32105}, 
  {f:2, c:32111}, {f:2, c:32116}, 32120, {f:7, c:32122}, 32130, {f:2, c:32132}, 32135, {f:5, c:32138}, {f:3, c:32144}, {f:8, c:32148}, 32157, {f:3, c:32159}, {f:2, c:32164}, {f:4, c:32167}, 32175, {f:3, c:32181}, 32188, {f:4, c:32192}, {f:2, c:32197}, {f:2, c:32200}, {f:5, c:32204}, 32211, {f:2, c:32213}, {f:3, c:32218}, 32223, 32226, {f:2, c:32228}, 32231, {f:2, c:32234}, {f:2, c:32237}, 32240, 32243, 32245, {f:2, c:32247}, 32250, {f:12, c:32252}, {f:4, c:32268}, {f:9, c:32274}, 32284, {f:3, c:32288}, 
  {f:3, c:32292}, {f:3, c:32296}, 32300, {f:2, c:32303}, 32307, 32312, 32314, 32316, {f:2, c:32319}, {f:3, c:32322}, {f:10, c:32328}, 32339, {f:4, c:32342}, {f:3, c:32347}, {f:3, c:32351}, {f:6, c:32355}, 32364, {f:2, c:32369}, {f:5, c:32372}, {f:2, c:32378}, {f:3, c:32383}, {f:5, c:32387}, 32393, 32395, 32398, {f:3, c:32400}, 32405, 32407, {f:2, c:32409}, {f:2, c:32413}, 32430, 32436, {f:2, c:32443}, 32470, 32484, 32492, 32505, 32522, 32528, 32542, 32567, 32569, {f:7, c:32571}, 32579, {f:6, c:32582}, 
  32589, 32591, {f:2, c:32594}, 32598, 32601, {f:4, c:32603}, 32608, {f:5, c:32611}, {f:3, c:32619}, 32623, 32627, {f:2, c:32629}, 32632, {f:4, c:32634}, {f:2, c:32639}, {f:3, c:32642}, 32647, 32649, 32651, 32653, {f:5, c:32655}, {f:5, c:32661}, {f:2, c:32667}, 32672, {f:2, c:32674}, 32678, 32680, {f:5, c:32682}, 32689, {f:5, c:32691}, {f:2, c:32698}, 32702, 32704, {f:3, c:32706}, {f:4, c:32710}, 32715, 32717, {f:3, c:32719}, 32723, {f:2, c:32726}, {f:6, c:32729}, {f:3, c:32738}, {f:2, c:32743}, 
  {f:4, c:32746}, 32751, 32754, {f:5, c:32756}, 32762, {f:3, c:32765}, 32770, {f:4, c:32775}, {f:2, c:32782}, 32785, 32787, {f:2, c:32794}, {f:3, c:32797}, 32801, {f:2, c:32803}, 32811, 32813, {f:2, c:32815}, 32818, 32820, {f:2, c:32825}, 32828, 32830, {f:2, c:32832}, {f:2, c:32836}, {f:3, c:32839}, {f:4, c:32846}, 32851, 32853, 32855, 32857, {f:3, c:32859}, {f:10, c:32863}, {f:4, c:32875}, 32884, 32888, {f:3, c:32890}, {f:2, c:32897}, 32904, 32906, {f:6, c:32909}, {f:2, c:32916}, 32919, 32921, 32926, 
  32931, {f:3, c:32934}, 32940, 32944, 32947, {f:2, c:32949}, {f:2, c:32952}, 32955, 32965, {f:5, c:32967}, {f:7, c:32975}, 32984, {f:2, c:32991}, {f:2, c:32994}, 32998, 33006, 33013, 33015, 33017, 33019, {f:4, c:33022}, {f:2, c:33027}, {f:2, c:33031}, {f:2, c:33035}, 33045, 33047, 33049, {f:2, c:33052}, {f:13, c:33055}, {f:2, c:33069}, 33072, {f:3, c:33075}, 33079, {f:4, c:33082}, {f:7, c:33087}, 33095, 33097, 33101, 33103, 33106, {f:2, c:33111}, {f:5, c:33115}, {f:3, c:33122}, 33128, 33130, 33132, 
  33135, {f:2, c:33138}, {f:3, c:33141}, 33153, {f:5, c:33155}, 33161, {f:4, c:33163}, 33168, {f:6, c:33170}, 33177, {f:2, c:33182}, {f:2, c:33185}, {f:2, c:33188}, 33191, {f:8, c:33195}, {f:6, c:33204}, 33212, {f:2, c:33220}, {f:2, c:33223}, 33227, 33230, {f:8, c:33232}, 33241, {f:4, c:33243}, {f:2, c:33249}, {f:3, c:33252}, 33257, 33259, {f:5, c:33262}, {f:5, c:33269}, 33277, 33279, 33283, 33291, {f:2, c:33294}, 33297, 33299, {f:6, c:33301}, 33309, 33312, {f:4, c:33316}, 33321, 33326, 33330, 33338, 
  {f:2, c:33340}, {f:5, c:33343}, {f:2, c:33349}, 33352, 33354, {f:3, c:33356}, {f:8, c:33360}, {f:4, c:33371}, {f:4, c:33376}, 33381, 33383, {f:2, c:33385}, {f:2, c:33388}, {f:2, c:33397}, [12171, 33400], {f:2, c:33403}, {f:2, c:33408}, 33411, {f:3, c:33413}, 33417, 33420, 33424, {f:4, c:33427}, {f:2, c:33434}, 33438, 33440, {f:2, c:33442}, 33447, 33458, {f:2, c:33461}, 33466, 33468, {f:2, c:33471}, {f:2, c:33474}, {f:2, c:33477}, 33481, 33488, 33494, {f:2, c:33497}, 33501, 33506, {f:3, c:33512}, 
  {f:3, c:33516}, 33520, {f:2, c:33522}, {f:2, c:33525}, 33528, 33530, {f:5, c:33532}, {f:2, c:33546}, 33549, 33552, {f:2, c:33554}, 33558, {f:2, c:33560}, {f:10, c:33565}, {f:2, c:33577}, 33582, 33584, 33586, 33591, 33595, {f:3, c:33597}, {f:2, c:33601}, {f:2, c:33604}, 33608, {f:5, c:33610}, 33619, {f:5, c:33621}, 33629, 33634, {f:7, c:33648}, {f:2, c:33657}, {f:7, c:33662}, {f:2, c:33671}, {f:3, c:33675}, {f:3, c:33679}, {f:2, c:33684}, 33687, {f:2, c:33689}, 33693, 33695, 33697, {f:4, c:33699}, 
  {f:4, c:33708}, 33717, 33723, {f:2, c:33726}, {f:3, c:33730}, 33734, {f:2, c:33736}, 33739, {f:2, c:33741}, {f:4, c:33744}, 33749, 33751, {f:3, c:33753}, 33758, {f:3, c:33762}, {f:3, c:33766}, {f:4, c:33771}, {f:5, c:33779}, {f:3, c:33786}, {f:3, c:33790}, 33794, 33797, {f:2, c:33800}, 33808, {f:6, c:33810}, {f:3, c:33817}, {f:6, c:33822}, {f:3, c:33833}, {f:4, c:33837}, {f:3, c:33842}, {f:2, c:33846}, {f:3, c:33849}, {f:8, c:33854}, {f:2, c:33863}, {f:7, c:33866}, {f:4, c:33875}, 33880, {f:4, 
  c:33885}, 33890, 33893, {f:2, c:33895}, 33898, 33902, 33904, 33906, 33908, 33913, {f:7, c:33915}, {f:4, c:33923}, 33930, 33933, {f:4, c:33935}, {f:2, c:33941}, 33944, {f:2, c:33946}, {f:4, c:33949}, {f:13, c:33954}, {f:2, c:33968}, 33971, {f:3, c:33973}, 33979, 33982, {f:2, c:33986}, {f:4, c:33989}, 33996, {f:2, c:33998}, 34002, {f:2, c:34004}, {f:6, c:34007}, 34014, {f:2, c:34017}, 34020, {f:5, c:34023}, 34029, {f:11, c:34033}, 34046, {f:12, c:34048}, {f:4, c:34061}, 34066, {f:2, c:34069}, {f:2, 
  c:34072}, {f:3, c:34075}, 34080, 34082, {f:2, c:34084}, {f:4, c:34087}, {f:9, c:34094}, {f:3, c:34110}, 34114, {f:2, c:34116}, 34119, {f:3, c:34123}, {f:3, c:34127}, 34132, 34135, {f:4, c:34138}, {f:3, c:34143}, 34147, {f:3, c:34149}, {f:2, c:34155}, {f:4, c:34158}, 34163, {f:2, c:34165}, 34168, {f:2, c:34172}, {f:5, c:34175}, 34182, 34185, 34187, {f:2, c:34189}, 34192, {f:2, c:34194}, {f:6, c:34197}, {f:2, c:34205}, {f:4, c:34208}, 34213, 34215, {f:3, c:34219}, {f:6, c:34225}, 34232, {f:6, c:34235}, 
  {f:7, c:34242}, {f:3, c:34250}, {f:2, c:34257}, 34260, {f:6, c:34262}, {f:6, c:34270}, {f:3, c:34278}, {f:9, c:34283}, 34293, {f:2, c:34295}, {f:3, c:34300}, {f:4, c:34304}, {f:3, c:34312}, {f:5, c:34316}, {f:4, c:34322}, {f:3, c:34327}, {f:3, c:34331}, {f:3, c:34335}, {f:4, c:34339}, 34344, {f:3, c:34346}, {f:10, c:34350}, 34361, 34363, {f:2, c:34365}, {f:13, c:34368}, {f:2, c:34386}, {f:4, c:34390}, 34395, 34397, {f:2, c:34400}, {f:4, c:34403}, {f:3, c:34408}, 34413, {f:2, c:34415}, {f:7, c:34418}, 
  {f:7, c:34435}, {f:5, c:34446}, 34452, {f:6, c:34454}, {f:5, c:34462}, {f:2, c:34469}, 34475, {f:2, c:34477}, {f:2, c:34482}, {f:3, c:34487}, {f:5, c:34491}, {f:3, c:34497}, 34501, 34504, {f:2, c:34508}, {f:2, c:34514}, {f:3, c:34517}, 34522, {f:2, c:34524}, {f:4, c:34528}, {f:4, c:34533}, {f:3, c:34538}, 34543, {f:3, c:34549}, {f:3, c:34555}, 34559, 34561, {f:2, c:34564}, {f:2, c:34571}, {f:4, c:34574}, 34580, 34582, 34585, 34587, 34589, {f:2, c:34591}, 34596, {f:3, c:34598}, {f:4, c:34602}, {f:2, 
  c:34607}, {f:2, c:34610}, {f:2, c:34613}, {f:3, c:34616}, {f:2, c:34620}, {f:7, c:34624}, {f:2, c:34634}, 34637, {f:4, c:34639}, 34644, 34646, 34648, {f:6, c:34650}, {f:2, c:34657}, {f:7, c:34663}, 34671, {f:3, c:34673}, 34677, 34679, {f:2, c:34681}, {f:3, c:34687}, {f:2, c:34694}, {f:2, c:34697}, 34700, {f:5, c:34702}, {f:3, c:34708}, {f:6, c:34712}, {f:2, c:34720}, {f:5, c:34723}, {f:2, c:34729}, 34734, {f:3, c:34736}, 34740, {f:4, c:34742}, 34748, {f:2, c:34750}, {f:3, c:34753}, 34757, 34759, 
  34761, {f:2, c:34764}, {f:2, c:34767}, {f:7, c:34772}, {f:4, c:34780}, {f:2, c:34785}, 34788, {f:4, c:34790}, 34795, 34797, {f:2, c:34800}, {f:3, c:34803}, {f:2, c:34807}, 34810, {f:2, c:34812}, {f:4, c:34815}, 34820, {f:3, c:34823}, {f:5, c:34827}, 34834, 34836, {f:4, c:34839}, {f:3, c:34844}, 34848, {f:13, c:34852}, {f:3, c:34867}, {f:2, c:34871}, 34874, {f:3, c:34877}, {f:3, c:34881}, {f:3, c:34887}, 34891, {f:5, c:34894}, {f:2, c:34901}, 34904, 34906, 34908, {f:3, c:34910}, {f:2, c:34918}, 
  34922, 34925, 34927, 34929, {f:4, c:34931}, 34936, {f:3, c:34938}, 34944, 34947, {f:2, c:34950}, {f:2, c:34953}, 34956, {f:4, c:34958}, {f:3, c:34963}, {f:5, c:34967}, {f:5, c:34973}, 34979, {f:6, c:34981}, 34988, {f:3, c:34990}, {f:5, c:34994}, {f:4, c:35E3}, {f:4, c:35005}, {f:2, c:35011}, {f:2, c:35015}, {f:3, c:35019}, {f:2, c:35024}, 35027, {f:2, c:35030}, {f:2, c:35034}, 35038, {f:2, c:35040}, {f:2, c:35046}, {f:7, c:35049}, 35058, {f:3, c:35061}, {f:2, c:35066}, {f:3, c:35071}, {f:4, c:35075}, 
  {f:2, c:35080}, {f:5, c:35083}, 35089, {f:5, c:35092}, {f:5, c:35100}, {f:3, c:35106}, {f:4, c:35110}, {f:4, c:35116}, 35121, 35125, 35127, {f:2, c:35129}, {f:5, c:35132}, {f:2, c:35138}, {f:2, c:35141}, {f:14, c:35144}, {f:6, c:35159}, {f:3, c:35169}, 35173, {f:3, c:35175}, 35179, {f:2, c:35181}, {f:2, c:35184}, {f:8, c:35187}, {f:2, c:35196}, [12177, 35198], 35200, 35202, {f:2, c:35204}, {f:4, c:35207}, {f:3, c:35212}, {f:3, c:35216}, {f:2, c:35220}, 35223, {f:8, c:35225}, {f:4, c:35234}, {f:3, 
  c:35239}, 35243, {f:2, c:35245}, {f:2, c:35248}, {f:4, c:35251}, {f:2, c:35256}, {f:2, c:35259}, 35262, 35267, 35277, {f:3, c:35283}, {f:3, c:35287}, 35291, 35293, {f:4, c:35295}, 35300, {f:4, c:35303}, {f:3, c:35308}, {f:3, c:35312}, 35317, 35319, {f:7, c:35321}, {f:3, c:35332}, 35337, 35339, 35341, 35343, {f:2, c:35345}, 35348, 35351, {f:2, c:35353}, 35356, 35358, {f:3, c:35360}, 35364, {f:4, c:35366}, {f:2, c:35371}, {f:3, c:35374}, {f:2, c:35378}, 35381, {f:3, c:35383}, {f:3, c:35387}, {f:2, 
  c:35391}, {f:4, c:35394}, 35399, {f:5, c:35401}, 35407, 35409, 35411, {f:2, c:35414}, {f:2, c:35417}, {f:2, c:35420}, {f:2, c:35423}, {f:2, c:35428}, {f:2, c:35431}, 35434, 35439, 35444, {f:3, c:35446}, {f:2, c:35450}, {f:2, c:35453}, {f:4, c:35456}, 35464, {f:2, c:35467}, {f:3, c:35470}, 35476, {f:2, c:35478}, 35481, {f:3, c:35483}, 35487, 35490, 35495, {f:3, c:35497}, {f:3, c:35501}, 35505, {f:3, c:35507}, {f:2, c:35511}, {f:2, c:35514}, {f:2, c:35517}, {f:2, c:35520}, 35523, {f:2, c:35525}, 
  35528, 35530, 35532, 35534, 35536, {f:3, c:35539}, {f:3, c:35544}, 35549, {f:3, c:35551}, 35555, 35557, {f:3, c:35560}, 35564, {f:2, c:35567}, 35570, {f:2, c:35572}, 35577, 35579, 35581, 35583, 35587, 35590, {f:2, c:35592}, {f:3, c:35595}, 35599, {f:3, c:35601}, 35605, 35608, 35612, {f:3, c:35614}, {f:4, c:35618}, 35623, {f:2, c:35625}, {f:5, c:35630}, {f:5, c:35636}, {f:4, c:35642}, {f:10, c:35647}, {f:4, c:35658}, {f:6, c:35664}, 35671, 35675, {f:9, c:35677}, {f:4, c:35687}, {f:2, c:35693}, {f:3, 
  c:35697}, {f:2, c:35701}, {f:5, c:35704}, {f:2, c:35710}, {f:9, c:35713}, {f:3, c:35723}, {f:3, c:35727}, 35732, {f:5, c:35735}, 35741, 35743, 35756, 35761, 35771, 35783, 35792, 35818, 35849, 35870, {f:9, c:35896}, {f:4, c:35906}, {f:2, c:35914}, {f:3, c:35917}, {f:4, c:35921}, {f:4, c:35926}, {f:6, c:35931}, {f:7, c:35939}, {f:7, c:35948}, {f:4, c:35956}, {f:7, c:35963}, {f:2, c:35971}, {f:3, c:35974}, 35979, {f:7, c:35981}, {f:3, c:35989}, {f:4, c:35993}, 35999, {f:4, c:36003}, {f:2, c:36013}, 
  36017, 36021, 36025, 36030, 36038, 36041, {f:6, c:36043}, 36052, {f:4, c:36054}, 36059, 36061, 36063, 36069, {f:2, c:36072}, {f:6, c:36078}, {f:5, c:36085}, {f:5, c:36095}, {f:2, c:36102}, 36105, 36108, 36110, {f:5, c:36113}, {f:4, c:36119}, 36128, {f:2, c:36177}, 36183, 36191, 36197, {f:3, c:36200}, 36204, {f:2, c:36206}, {f:2, c:36209}, {f:9, c:36216}, {f:2, c:36226}, {f:4, c:36230}, {f:5, c:36236}, {f:2, c:36242}, {f:3, c:36246}, {f:5, c:36250}, {f:3, c:36256}, {f:4, c:36260}, {f:8, c:36265}, 
  {f:2, c:36278}, 36281, 36283, 36285, {f:3, c:36288}, 36293, {f:4, c:36295}, 36301, 36304, {f:4, c:36306}, {f:2, c:36312}, 36316, {f:3, c:36320}, {f:3, c:36325}, 36329, {f:2, c:36333}, {f:3, c:36336}, 36340, 36342, 36348, {f:7, c:36350}, {f:3, c:36358}, 36363, {f:2, c:36365}, {f:3, c:36369}, {f:8, c:36373}, {f:2, c:36384}, {f:5, c:36388}, 36395, 36397, 36400, {f:2, c:36402}, {f:3, c:36406}, {f:2, c:36411}, {f:2, c:36414}, 36419, {f:2, c:36421}, {f:4, c:36429}, {f:2, c:36435}, {f:3, c:36438}, {f:9, 
  c:36442}, {f:2, c:36452}, {f:2, c:36455}, {f:2, c:36458}, 36462, 36465, 36467, 36469, {f:3, c:36471}, 36475, {f:2, c:36477}, 36480, {f:3, c:36482}, 36486, 36488, 36492, 36494, {f:5, c:36501}, 36507, 36509, {f:2, c:36511}, {f:3, c:36514}, {f:3, c:36519}, {f:2, c:36525}, {f:2, c:36528}, {f:7, c:36531}, {f:5, c:36539}, {f:9, c:36545}, {f:3, c:36559}, 36563, {f:6, c:36565}, {f:3, c:36572}, {f:4, c:36576}, {f:6, c:36581}, {f:6, c:36588}, {f:5, c:36595}, 36605, {f:4, c:36607}, 36612, 36614, 36616, {f:7, 
  c:36619}, 36627, {f:5, c:36630}, {f:5, c:36640}, {f:2, c:36647}, {f:4, c:36651}, {f:3, c:36656}, {f:4, c:36660}, {f:2, c:36665}, {f:2, c:36668}, {f:2, c:36672}, 36675, {f:2, c:36679}, {f:3, c:36682}, {f:5, c:36687}, {f:10, c:36693}, 36704, 36707, 36709, 36714, 36736, 36748, 36754, 36765, {f:3, c:36768}, {f:2, c:36772}, 36775, 36778, 36780, {f:2, c:36787}, [12193, 36789], {f:2, c:36791}, {f:3, c:36794}, {f:2, c:36799}, 36803, 36806, {f:5, c:36809}, 36815, 36818, {f:2, c:36822}, 36826, {f:2, c:36832}, 
  36835, 36839, 36844, 36847, {f:2, c:36849}, {f:2, c:36853}, {f:3, c:36858}, {f:2, c:36862}, {f:2, c:36871}, 36876, 36878, 36883, 36888, 36892, {f:2, c:36900}, {f:6, c:36903}, {f:2, c:36912}, {f:2, c:36915}, 36919, {f:2, c:36921}, 36925, {f:2, c:36927}, 36931, {f:2, c:36933}, {f:3, c:36936}, 36940, 36950, {f:2, c:36953}, 36957, 36959, 36961, 36964, {f:2, c:36966}, {f:3, c:36970}, {f:3, c:36975}, 36979, 36982, 36985, 36987, 36990, {f:2, c:36997}, 37001, {f:3, c:37004}, 37010, 37012, 37014, 37016, 
  37018, 37020, {f:3, c:37022}, {f:2, c:37028}, {f:3, c:37031}, 37035, 37037, 37042, 37047, {f:2, c:37052}, {f:2, c:37055}, {f:2, c:37058}, 37062, {f:2, c:37064}, {f:3, c:37067}, 37074, {f:3, c:37076}, {f:3, c:37080}, 37086, 37088, {f:3, c:37091}, {f:2, c:37097}, 37100, 37102, {f:4, c:37104}, {f:2, c:37110}, {f:4, c:37113}, {f:3, c:37119}, 37123, 37125, {f:2, c:37127}, {f:8, c:37130}, 37139, 37141, {f:2, c:37143}, {f:4, c:37146}, {f:3, c:37151}, {f:3, c:37156}, {f:5, c:37160}, 37166, 37171, 37173, 
  {f:2, c:37175}, {f:8, c:37179}, {f:2, c:37188}, 37191, 37201, {f:4, c:37203}, {f:2, c:37208}, {f:2, c:37211}, {f:2, c:37215}, {f:3, c:37222}, 37227, 37229, 37235, {f:3, c:37242}, {f:5, c:37248}, 37254, 37256, 37258, {f:2, c:37262}, {f:3, c:37267}, {f:3, c:37271}, {f:5, c:37277}, {f:6, c:37284}, {f:4, c:37296}, {f:4, c:37302}, {f:5, c:37307}, 37314, 37316, [12196, 37318], 37320, 37328, 37334, {f:2, c:37338}, {f:5, c:37342}, {f:2, c:37349}, 37352, {f:11, c:37354}, 37366, 37368, {f:5, c:37371}, {f:2, 
  c:37378}, {f:3, c:37381}, {f:3, c:37386}, 37391, {f:2, c:37394}, {f:8, c:37398}, {f:4, c:37407}, 37412, {f:6, c:37416}, 37423, {f:2, c:37425}, {f:2, c:37429}, {f:2, c:37435}, {f:4, c:37441}, {f:2, c:37446}, {f:3, c:37450}, {f:3, c:37454}, {f:3, c:37458}, 37462, {f:2, c:37464}, {f:2, c:37468}, {f:3, c:37471}, {f:3, c:37475}, {f:5, c:37479}, {f:6, c:37486}, {f:3, c:37493}, 37497, {f:3, c:37500}, {f:2, c:37505}, 37508, {f:8, c:37510}, {f:2, c:37519}, 37522, {f:2, c:37524}, 37527, 37529, 37531, {f:3, 
  c:37533}, {f:2, c:37537}, 37540, 37543, 37549, {f:2, c:37551}, {f:5, c:37554}, 37560, 37562, {f:4, c:37565}, 37570, 37572, 37574, {f:3, c:37577}, {f:2, c:37581}, {f:2, c:37584}, {f:10, c:37587}, 37598, {f:3, c:37600}, 37607, 37609, {f:2, c:37611}, {f:4, c:37618}, 37623, {f:3, c:37625}, {f:4, c:37629}, {f:4, c:37634}, {f:7, c:37641}, 37649, {f:2, c:37651}, {f:2, c:37654}, {f:3, c:37660}, 37665, {f:3, c:37667}, 37671, {f:2, c:37673}, {f:2, c:37676}, {f:2, c:37680}, {f:2, c:37684}, 37687, {f:5, c:37689}, 
  37695, 37698, {f:2, c:37700}, {f:3, c:37704}, 37708, {f:6, c:37710}, {f:3, c:37717}, {f:2, c:37721}, {f:8, c:37724}, {f:3, c:37734}, 37739, {f:3, c:37741}, {f:4, c:37745}, {f:3, c:37751}, {f:3, c:37755}, {f:3, c:37759}, 37763, {f:2, c:37765}, {f:2, c:37768}, {f:4, c:37771}, {f:6, c:37776}, 37783, {f:9, c:37785}, {f:2, c:37796}, 37800, 37803, 37805, 37807, {f:2, c:37809}, 37812, {f:2, c:37814}, {f:6, c:37817}, {f:3, c:37824}, {f:3, c:37828}, 37833, 37835, {f:3, c:37838}, {f:4, c:37842}, {f:3, c:37849}, 
  37856, 37859, {f:3, c:37861}, {f:12, c:37865}, 37878, 37880, {f:9, c:37882}, {f:7, c:37892}, {f:4, c:37900}, 37905, {f:3, c:37909}, {f:3, c:37914}, {f:2, c:37918}, {f:5, c:37921}, {f:5, c:37929}, {f:3, c:37935}, 37940, {f:2, c:37942}, 37945, {f:3, c:37947}, {f:4, c:37952}, {f:5, c:37957}, 37963, {f:5, c:37965}, 37971, {f:11, c:37973}, {f:2, c:37985}, 37988, {f:5, c:37990}, 37996, {f:2, c:37998}, 38001, {f:4, c:38003}, 38008, {f:2, c:38010}, {f:5, c:38016}, 38033, 38038, 38040, 38087, 38095, {f:2, 
  c:38099}, 38106, 38118, 38139, 38172, 38176, 38183, 38195, 38205, 38211, 38216, 38219, 38229, 38234, 38240, 38254, {f:2, c:38260}, {f:7, c:38264}, 38273, {f:2, c:38276}, {f:2, c:38279}, 38282, 38285, 38288, 38290, {f:3, c:38293}, {f:8, c:38297}, 38306, {f:2, c:38310}, 38314, {f:4, c:38318}, {f:3, c:38323}, {f:2, c:38327}, 38330, {f:3, c:38336}, {f:2, c:38340}, 38343, 38345, {f:3, c:38349}, {f:3, c:38353}, {f:5, c:38359}, 38365, {f:2, c:38367}, {f:2, c:38371}, {f:2, c:38374}, 38380, 38399, 38407, 
  38419, 38424, 38427, 38430, 38432, {f:7, c:38435}, {f:3, c:38443}, {f:2, c:38447}, {f:4, c:38455}, 38462, 38465, 38467, 38474, {f:2, c:38478}, {f:3, c:38481}, {f:2, c:38486}, {f:2, c:38489}, 38492, 38494, 38496, {f:2, c:38501}, 38507, {f:3, c:38509}, 38513, {f:4, c:38521}, {f:7, c:38526}, 38535, 38537, 38540, {f:3, c:38545}, 38550, 38554, {f:10, c:38557}, 38569, {f:5, c:38571}, 38578, 38581, 38583, 38586, 38591, {f:2, c:38594}, 38600, {f:2, c:38602}, {f:2, c:38608}, {f:2, c:38611}, {f:2, c:38615}, 
  38618, {f:3, c:38621}, 38625, {f:4, c:38628}, {f:4, c:38635}, {f:2, c:38640}, {f:2, c:38644}, 38648, 38650, {f:2, c:38652}, 38655, {f:2, c:38658}, 38661, {f:3, c:38666}, {f:3, c:38672}, {f:2, c:38676}, {f:5, c:38679}, 38685, {f:8, c:38687}, {f:2, c:38696}, {f:2, c:38699}, {f:2, c:38702}, 38705, {f:5, c:38707}, {f:3, c:38714}, {f:3, c:38719}, 38723, {f:3, c:38725}, {f:8, c:38729}, [12205, 38737], {f:2, c:38740}, {f:2, c:38743}, {f:2, c:38748}, 38751, {f:2, c:38755}, {f:2, c:38758}, {f:9, c:38762}, 
  38773, {f:5, c:38775}, {f:8, c:38781}, {f:5, c:38790}, 38796, 38798, 38800, 38803, {f:3, c:38805}, {f:7, c:38809}, {f:2, c:38817}, {f:2, c:38820}, {f:4, c:38823}, 38828, 38830, {f:2, c:38832}, 38835, {f:8, c:38837}, {f:5, c:38846}, {f:2, c:38852}, {f:2, c:38855}, 38858, {f:6, c:38861}, {f:5, c:38868}, {f:2, c:38874}, 38877, {f:7, c:38879}, 38888, {f:5, c:38894}, 38900, {f:8, c:38903}, 38912, 38916, 38921, 38923, 38925, {f:3, c:38932}, {f:3, c:38937}, {f:4, c:38941}, {f:2, c:38946}, 38949, {f:6, 
  c:38951}, {f:2, c:38958}, {f:6, c:38961}, {f:2, c:38969}, 38972, {f:8, c:38974}, {f:5, c:38983}, {f:4, c:38991}, {f:3, c:38997}, 39002, {f:2, c:39004}, {f:3, c:39007}, {f:2, c:39011}, 39014, {f:3, c:39016}, {f:2, c:39021}, 39026, 39051, 39054, 39058, 39061, 39065, 39075, {f:5, c:39081}, 39088, 39090, {f:2, c:39092}, {f:5, c:39095}, {f:7, c:39101}, 39109, 39111, {f:5, c:39113}, {f:2, c:39119}, 39124, {f:2, c:39126}, {f:2, c:39132}, 39137, {f:4, c:39139}, 39148, 39150, {f:2, c:39152}, 39155, {f:7, 
  c:39157}, {f:4, c:39167}, 39172, {f:3, c:39174}, 39179, {f:2, c:39182}, {f:4, c:39188}, {f:2, c:39193}, {f:2, c:39196}, {f:2, c:39199}, {f:6, c:39202}, {f:5, c:39209}, {f:4, c:39215}, {f:3, c:39220}, {f:4, c:39224}, 39229, {f:3, c:39232}, 39236, {f:2, c:39238}, {f:4, c:39245}, 39251, 39254, {f:4, c:39256}, 39261, {f:3, c:39263}, 39268, 39270, 39283, {f:2, c:39288}, 39291, 39294, {f:2, c:39298}, 39305, 39308, 39310, {f:11, c:39322}, {f:2, c:39334}, {f:3, c:39337}, {f:2, c:39343}, 39346, {f:12, c:39349}, 
  {f:14, c:39362}, 39379, {f:2, c:39382}, 39386, 39388, 39390, 39392, {f:10, c:39395}, {f:3, c:39406}, {f:13, c:39410}, 39424, {f:3, c:39426}, {f:7, c:39430}, {f:6, c:39440}, {f:2, c:39447}, {f:17, c:39450}, 39468, 39471, {f:5, c:39473}, {f:5, c:39481}, 39487, {f:4, c:39494}, {f:2, c:39499}, 39502, {f:5, c:39504}, 39510, {f:2, c:39512}, {f:3, c:39516}, {f:2, c:39520}, 39523, {f:4, c:39526}, 39531, 39538, 39555, 39561, {f:2, c:39565}, {f:2, c:39572}, 39577, 39590, {f:6, c:39593}, {f:4, c:39602}, 39609, 
  39611, {f:3, c:39613}, {f:2, c:39619}, {f:5, c:39622}, {f:2, c:39629}, 39632, 39639, {f:6, c:39641}, 39648, {f:4, c:39650}, {f:4, c:39655}, 39660, {f:9, c:39664}, 39674, {f:7, c:39676}, {f:2, c:39684}, 39687, {f:4, c:39689}, 39694, {f:3, c:39696}, {f:6, c:39700}, {f:4, c:39707}, {f:2, c:39712}, 39716, 39718, 39720, {f:4, c:39722}, 39728, {f:8, c:39731}, {f:4, c:39741}, 39750, {f:3, c:39754}, 39760, {f:2, c:39762}, {f:3, c:39765}, 39769, {f:20, c:39771}, {f:4, c:39792}, {f:2, c:39797}, {f:9, c:39800}, 
  39810, {f:10, c:39812}, 39823, {f:7, c:39827}, {f:2, c:39835}, {f:11, c:39839}, 39852, {f:17, c:39855}, {f:5, c:39874}, 39880, {f:9, c:39883}, 39893, {f:4, c:39895}, 39900, {f:3, c:39902}, 39907, {f:2, c:39909}, 39913, {f:4, c:39916}, {f:3, c:39921}, {f:8, c:39925}, 39934, {f:8, c:39936}, {f:3, c:39946}, {f:2, c:39950}, 39953, {f:12, c:39956}, {f:2, c:39969}, 39972, {f:2, c:39974}, {f:3, c:39978}, {f:3, c:39982}, 39988, 39990, 39992, 39994, {f:2, c:39996}, {f:6, c:39999}, {f:2, c:40006}, {f:8, 
  c:40010}, 40019, 40021, {f:4, c:40025}, 40030, {f:7, c:40032}, {f:5, c:40040}, {f:10, c:40046}, 40057, 40059, {f:2, c:40061}, 40064, {f:2, c:40067}, {f:2, c:40073}, 40076, 40079, 40083, {f:4, c:40086}, 40093, 40106, 40108, 40111, 40121, {f:5, c:40126}, {f:2, c:40136}, {f:2, c:40145}, {f:2, c:40154}, {f:2, c:40160}, {f:2, c:40163}, {f:3, c:40166}, {f:2, c:40170}, {f:6, c:40173}, 40181, {f:15, c:40183}, 40200, {f:11, c:40202}, {f:5, c:40214}, 40220, 40222, {f:3, c:40224}, {f:2, c:40228}, 40231, {f:6, 
  c:40233}, {f:10, c:40241}, {f:3, c:40252}, {f:2, c:40256}, {f:14, c:40259}, {f:8, c:40276}, {f:2, c:40286}, {f:8, c:40290}, 40299, {f:2, c:40301}, {f:2, c:40304}, {f:20, c:40307}, 40328, {f:9, c:40330}, {f:4, c:40340}, 40345, {f:10, c:40347}, {f:3, c:40358}, {f:5, c:40362}, {f:4, c:40368}, {f:6, c:40373}, {f:3, c:40381}, 40385, 40387, {f:14, c:40389}, {f:3, c:40404}, 40408, {f:10, c:40411}, {f:8, c:40423}, {f:2, c:40432}, {f:4, c:40436}, {f:17, c:40443}, {f:8, c:40461}, {f:4, c:40470}, 40476, 40484, 
  40487, 40494, 40496, 40500, {f:2, c:40507}, 40512, 40525, 40528, {f:3, c:40530}, 40534, 40537, 40541, {f:4, c:40543}, 40549, {f:2, c:40558}, 40562, 40564, {f:3, c:40566}, 40571, {f:2, c:40576}, {f:4, c:40579}, {f:2, c:40585}, {f:6, c:40588}, {f:3, c:40596}, {f:5, c:40600}, 40606, {f:5, c:40608}, {f:2, c:40615}, {f:5, c:40618}, {f:4, c:40624}, {f:2, c:40630}, {f:2, c:40633}, 40636, {f:4, c:40639}, [12232, 40643], {f:4, c:40645}, {f:2, c:40650}, 40656, {f:2, c:40658}, {f:3, c:40661}, {f:2, c:40665}, 
  40673, {f:2, c:40675}, 40678, {f:4, c:40683}, {f:2, c:40688}, 40691, {f:2, c:40693}, 40696, 40698, {f:9, c:40704}, 40714, 40716, 40719, {f:2, c:40721}, 40724, 40726, 40728, {f:6, c:40730}, 40737, {f:9, c:40739}, {f:2, c:40749}, {f:7, c:40752}, 40760, 40762, 40764, {f:5, c:40767}, {f:5, c:40773}, {f:3, c:40780}, 40787, {f:4, c:40789}, {f:2, c:40794}, {f:2, c:40797}, 40802, {f:2, c:40804}, {f:3, c:40807}, 40811, {f:5, c:40813}, {f:4, c:40819}, {f:7, c:40824}, {f:2, c:40833}, {f:2, c:40846}, {f:3, 
  c:40849}, {f:3, c:40854}, {f:2, c:40861}, {f:5, c:40865}, 63788, {f:3, c:64013}, 64017, {f:2, c:64019}, 64024, {f:3, c:64031}, {f:2, c:64035}, {f:3, c:64039}, 11905, [59414, 131207], [59415, 131209], [59416, 131276], 11908, 13427, 13383, 11912, 11915, 59422, 13726, 13850, 13838, 11916, 11927, 14702, 14616, 59430, 14799, 14815, 14963, 14800, {f:2, c:59435}, 15182, 15470, 15584, 11943, [59441, 136663], 59442, 11946, 16470, 16735, 11950, 17207, 11955, {f:2, c:11958}, [59451, 141711], 17329, 17324, 
  11963, 17373, 17622, 18017, 17996, [59459, 132361], 18211, 18217, 18300, 18317, 11978, 18759, 18810, 18813, {f:2, c:18818}, {f:2, c:18821}, 18847, 18843, 18871, 18870, [59476, 133533], [59477, 147966], 19619, {f:3, c:19615}, 19575, 19618, {f:7, c:19731}, 19886, 59492, {s:226}, 8364, 165, 0, 0, 12351, {s:17}, 12436, {s:14}, 12535, 12537, 12536, 12538, 0, {f:3, c:12339}, {f:3, c:12344}, {f:3, c:12586}, {f:24, c:12704}, 11904, {f:2, c:11906}, {f:3, c:11909}, {f:2, c:11913}, {f:10, c:11917}, {f:2, 
  c:11928}, {f:12, c:11931}, {f:2, c:11944}, {f:3, c:11947}, {f:4, c:11951}, {f:2, c:11956}, {f:3, c:11960}, {f:14, c:11964}, {f:41, c:11979}, {f:71, c:13312}, {f:43, c:13384}, {f:298, c:13428}, {f:111, c:13727}, {f:11, c:13839}, {f:765, c:13851}, {f:85, c:14617}, {f:96, c:14703}, {f:14, c:14801}, {f:147, c:14816}, {f:218, c:14964}, {f:287, c:15183}, {f:113, c:15471}, {f:885, c:15585}, {f:264, c:16471}, {f:471, c:16736}, {f:116, c:17208}, {f:4, c:17325}, {f:43, c:17330}, {f:248, c:17374}, {f:373, 
  c:17623}, {f:20, c:17997}, {f:193, c:18018}, {f:5, c:18212}, {f:82, c:18218}, {f:16, c:18301}, {f:441, c:18318}, {f:50, c:18760}, {f:2, c:18811}, {f:4, c:18814}, 18820, {f:20, c:18823}, {f:3, c:18844}, {f:22, c:18848}, {f:703, c:18872}, {f:39, c:19576}, {f:111, c:19620}, {f:148, c:19738}, {f:7, c:19887}]};
  var ColorSpace = function ColorSpaceClosure() {
    function ColorSpace$$1() {
      error$$3("should not call ColorSpace constructor")
    }
    ColorSpace$$1.prototype = {getRgb:function ColorSpace_getRgb(color$$11) {
      error$$3("Should not call ColorSpace.getRgb: " + color$$11)
    }, getRgbBuffer:function ColorSpace_getRgbBuffer(input) {
      error$$3("Should not call ColorSpace.getRgbBuffer: " + input)
    }};
    ColorSpace$$1.parse = function ColorSpace_parse(cs$$5, xref$$13, res) {
      var IR$$7 = ColorSpace$$1.parseToIR(cs$$5, xref$$13, res);
      if(IR$$7 instanceof AlternateCS) {
        return IR$$7
      }
      return ColorSpace$$1.fromIR(IR$$7)
    };
    ColorSpace$$1.fromIR = function ColorSpace_fromIR(IR$$8) {
      var name$$51 = isArray(IR$$8) ? IR$$8[0] : IR$$8;
      switch(name$$51) {
        case "DeviceGrayCS":
          return new DeviceGrayCS;
        case "DeviceRgbCS":
          return new DeviceRgbCS;
        case "DeviceCmykCS":
          return new DeviceCmykCS;
        case "PatternCS":
          var basePatternCS = IR$$8[1];
          if(basePatternCS) {
            basePatternCS = ColorSpace$$1.fromIR(basePatternCS)
          }
          return new PatternCS(basePatternCS);
        case "IndexedCS":
          var baseIndexedCS = IR$$8[1];
          var hiVal = IR$$8[2];
          var lookup = IR$$8[3];
          return new IndexedCS(ColorSpace$$1.fromIR(baseIndexedCS), hiVal, lookup);
        case "AlternateCS":
          var numComps = IR$$8[1];
          var alt = IR$$8[2];
          var tintFnIR = IR$$8[3];
          return new AlternateCS(numComps, ColorSpace$$1.fromIR(alt), PDFFunction.fromIR(tintFnIR));
        case "LabCS":
          var whitePoint = IR$$8[1].WhitePoint;
          var blackPoint = IR$$8[1].BlackPoint;
          var range$$12 = IR$$8[1].Range;
          return new LabCS(whitePoint, blackPoint, range$$12);
        default:
          error$$3("Unkown name " + name$$51)
      }
      return null
    };
    ColorSpace$$1.parseToIR = function ColorSpace_parseToIR(cs$$6, xref$$14, res$$1) {
      if(isName(cs$$6)) {
        var colorSpaces = res$$1.get("ColorSpace");
        if(isDict(colorSpaces)) {
          var refcs = colorSpaces.get(cs$$6.name);
          if(refcs) {
            cs$$6 = refcs
          }
        }
      }
      cs$$6 = xref$$14.fetchIfRef(cs$$6);
      var mode$$9;
      if(isName(cs$$6)) {
        mode$$9 = cs$$6.name;
        this.mode = mode$$9;
        switch(mode$$9) {
          case "DeviceGray":
          ;
          case "G":
            return"DeviceGrayCS";
          case "DeviceRGB":
          ;
          case "RGB":
            return"DeviceRgbCS";
          case "DeviceCMYK":
          ;
          case "CMYK":
            return"DeviceCmykCS";
          case "Pattern":
            return["PatternCS", null];
          default:
            error$$3("unrecognized colorspace " + mode$$9)
        }
      }else {
        if(isArray(cs$$6)) {
          mode$$9 = cs$$6[0].name;
          this.mode = mode$$9;
          switch(mode$$9) {
            case "DeviceGray":
            ;
            case "G":
              return"DeviceGrayCS";
            case "DeviceRGB":
            ;
            case "RGB":
              return"DeviceRgbCS";
            case "DeviceCMYK":
            ;
            case "CMYK":
              return"DeviceCmykCS";
            case "CalGray":
              return"DeviceGrayCS";
            case "CalRGB":
              return"DeviceRgbCS";
            case "ICCBased":
              var stream$$13 = xref$$14.fetchIfRef(cs$$6[1]);
              var dict$$9 = stream$$13.dict;
              var numComps$$1 = dict$$9.get("N");
              if(numComps$$1 == 1) {
                return"DeviceGrayCS"
              }
              if(numComps$$1 == 3) {
                return"DeviceRgbCS"
              }
              if(numComps$$1 == 4) {
                return"DeviceCmykCS"
              }
              break;
            case "Pattern":
              var basePatternCS$$1 = cs$$6[1];
              if(basePatternCS$$1) {
                basePatternCS$$1 = ColorSpace$$1.parseToIR(basePatternCS$$1, xref$$14, res$$1)
              }
              return["PatternCS", basePatternCS$$1];
            case "Indexed":
            ;
            case "I":
              var baseIndexedCS$$1 = ColorSpace$$1.parseToIR(cs$$6[1], xref$$14, res$$1);
              var hiVal$$1 = cs$$6[2] + 1;
              var lookup$$1 = xref$$14.fetchIfRef(cs$$6[3]);
              return["IndexedCS", baseIndexedCS$$1, hiVal$$1, lookup$$1];
            case "Separation":
            ;
            case "DeviceN":
              var name$$52 = cs$$6[1];
              numComps$$1 = 1;
              if(isName(name$$52)) {
                numComps$$1 = 1
              }else {
                if(isArray(name$$52)) {
                  numComps$$1 = name$$52.length
                }
              }
              var alt$$1 = ColorSpace$$1.parseToIR(cs$$6[2], xref$$14, res$$1);
              var tintFnIR$$1 = PDFFunction.getIR(xref$$14, xref$$14.fetchIfRef(cs$$6[3]));
              return["AlternateCS", numComps$$1, alt$$1, tintFnIR$$1];
            case "Lab":
              var params$$2 = cs$$6[1].getAll();
              return["LabCS", params$$2];
            default:
              error$$3('unimplemented color space object "' + mode$$9 + '"')
          }
        }else {
          error$$3('unrecognized color space object: "' + cs$$6 + '"')
        }
      }
      return null
    };
    ColorSpace$$1.isDefaultDecode = function ColorSpace_isDefaultDecode(decode$$2, n$$20) {
      if(!decode$$2) {
        return true
      }
      if(n$$20 * 2 !== decode$$2.length) {
        warning("The decode map is not the correct length");
        return true
      }
      var i$$52 = 0;
      var ii$$16 = decode$$2.length;
      for(;i$$52 < ii$$16;i$$52 += 2) {
        if(decode$$2[i$$52] != 0 || decode$$2[i$$52 + 1] != 1) {
          return false
        }
      }
      return true
    };
    return ColorSpace$$1
  }();
  var AlternateCS = function AlternateCSClosure() {
    function AlternateCS$$1(numComps$$2, base$$2, tintFn) {
      this.name = "Alternate";
      this.numComps = numComps$$2;
      this.defaultColor = [];
      var i$$53 = 0;
      for(;i$$53 < numComps$$2;++i$$53) {
        this.defaultColor.push(1)
      }
      this.base = base$$2;
      this.tintFn = tintFn
    }
    AlternateCS$$1.prototype = {getRgb:function AlternateCS_getRgb(color$$12) {
      var tinted = this.tintFn(color$$12);
      return this.base.getRgb(tinted)
    }, getRgbBuffer:function AlternateCS_getRgbBuffer(input$$1, bits) {
      var tintFn$$1 = this.tintFn;
      var base$$3 = this.base;
      var scale$$5 = 1 / ((1 << bits) - 1);
      var length$$25 = input$$1.length;
      var pos$$4 = 0;
      var baseNumComps = base$$3.numComps;
      var baseBuf = new Uint8Array(baseNumComps * length$$25);
      var numComps$$3 = this.numComps;
      var scaled = [];
      var i$$54 = 0;
      for(;i$$54 < length$$25;i$$54 += numComps$$3) {
        var z$$2 = 0;
        for(;z$$2 < numComps$$3;++z$$2) {
          scaled[z$$2] = input$$1[i$$54 + z$$2] * scale$$5
        }
        var tinted$$1 = tintFn$$1(scaled);
        var j$$10 = 0;
        for(;j$$10 < baseNumComps;++j$$10) {
          baseBuf[pos$$4++] = 255 * tinted$$1[j$$10]
        }
      }
      return base$$3.getRgbBuffer(baseBuf, 8)
    }, isDefaultDecode:function AlternateCS_isDefaultDecode(decodeMap) {
      return ColorSpace.isDefaultDecode(decodeMap, this.numComps)
    }};
    return AlternateCS$$1
  }();
  var PatternCS = function PatternCSClosure() {
    function PatternCS$$1(baseCS) {
      this.name = "Pattern";
      this.base = baseCS
    }
    PatternCS$$1.prototype = {};
    return PatternCS$$1
  }();
  var IndexedCS = function IndexedCSClosure() {
    function IndexedCS$$1(base$$4, highVal, lookup$$2) {
      this.name = "Indexed";
      this.numComps = 1;
      this.defaultColor = [0];
      this.base = base$$4;
      this.highVal = highVal;
      var baseNumComps$$1 = base$$4.numComps;
      var length$$26 = baseNumComps$$1 * highVal;
      var lookupArray = new Uint8Array(length$$26);
      if(isStream(lookup$$2)) {
        var bytes$$2 = lookup$$2.getBytes(length$$26);
        lookupArray.set(bytes$$2)
      }else {
        if(isString(lookup$$2)) {
          var i$$55 = 0;
          for(;i$$55 < length$$26;++i$$55) {
            lookupArray[i$$55] = lookup$$2.charCodeAt(i$$55)
          }
        }else {
          error$$3("Unrecognized lookup table: " + lookup$$2)
        }
      }
      this.lookup = lookupArray
    }
    IndexedCS$$1.prototype = {getRgb:function IndexedCS_getRgb(color$$13) {
      var numComps$$4 = this.base.numComps;
      var start$$5 = color$$13[0] * numComps$$4;
      var c$$9 = [];
      var i$$56 = start$$5;
      var ii$$17 = start$$5 + numComps$$4;
      for(;i$$56 < ii$$17;++i$$56) {
        c$$9.push(this.lookup[i$$56])
      }
      return this.base.getRgb(c$$9)
    }, getRgbBuffer:function IndexedCS_getRgbBuffer(input$$2) {
      var base$$5 = this.base;
      var numComps$$5 = base$$5.numComps;
      var lookup$$3 = this.lookup;
      var length$$27 = input$$2.length;
      var baseBuf$$1 = new Uint8Array(length$$27 * numComps$$5);
      var baseBufPos = 0;
      var i$$57 = 0;
      for(;i$$57 < length$$27;++i$$57) {
        var lookupPos = input$$2[i$$57] * numComps$$5;
        var j$$11 = 0;
        for(;j$$11 < numComps$$5;++j$$11) {
          baseBuf$$1[baseBufPos++] = lookup$$3[lookupPos + j$$11]
        }
      }
      return base$$5.getRgbBuffer(baseBuf$$1, 8)
    }, isDefaultDecode:function IndexedCS_isDefaultDecode(decodeMap$$1) {
      return true
    }};
    return IndexedCS$$1
  }();
  var DeviceGrayCS = function DeviceGrayCSClosure() {
    function DeviceGrayCS$$1() {
      this.name = "DeviceGray";
      this.numComps = 1;
      this.defaultColor = [0]
    }
    DeviceGrayCS$$1.prototype = {getRgb:function DeviceGrayCS_getRgb(color$$14) {
      var c$$10 = color$$14[0];
      return[c$$10, c$$10, c$$10]
    }, getRgbBuffer:function DeviceGrayCS_getRgbBuffer(input$$3, bits$$1) {
      var scale$$6 = 255 / ((1 << bits$$1) - 1);
      var length$$28 = input$$3.length;
      var rgbBuf = new Uint8Array(length$$28 * 3);
      var i$$58 = 0;
      var j$$12 = 0;
      for(;i$$58 < length$$28;++i$$58) {
        var c$$11 = scale$$6 * input$$3[i$$58] | 0;
        rgbBuf[j$$12++] = c$$11;
        rgbBuf[j$$12++] = c$$11;
        rgbBuf[j$$12++] = c$$11
      }
      return rgbBuf
    }, isDefaultDecode:function DeviceGrayCS_isDefaultDecode(decodeMap$$2) {
      return ColorSpace.isDefaultDecode(decodeMap$$2, this.numComps)
    }};
    return DeviceGrayCS$$1
  }();
  var DeviceRgbCS = function DeviceRgbCSClosure() {
    function DeviceRgbCS$$1() {
      this.name = "DeviceRGB";
      this.numComps = 3;
      this.defaultColor = [0, 0, 0]
    }
    DeviceRgbCS$$1.prototype = {getRgb:function DeviceRgbCS_getRgb(color$$15) {
      return color$$15
    }, getRgbBuffer:function DeviceRgbCS_getRgbBuffer(input$$4, bits$$2) {
      if(bits$$2 == 8) {
        return input$$4
      }
      var scale$$7 = 255 / ((1 << bits$$2) - 1);
      var i$$59;
      var length$$29 = input$$4.length;
      var rgbBuf$$1 = new Uint8Array(length$$29);
      i$$59 = 0;
      for(;i$$59 < length$$29;++i$$59) {
        rgbBuf$$1[i$$59] = scale$$7 * input$$4[i$$59] | 0
      }
      return rgbBuf$$1
    }, isDefaultDecode:function DeviceRgbCS_isDefaultDecode(decodeMap$$3) {
      return ColorSpace.isDefaultDecode(decodeMap$$3, this.numComps)
    }};
    return DeviceRgbCS$$1
  }();
  var DeviceCmykCS = function DeviceCmykCSClosure() {
    function DeviceCmykCS$$1() {
      this.name = "DeviceCMYK";
      this.numComps = 4;
      this.defaultColor = [0, 0, 0, 1]
    }
    DeviceCmykCS$$1.prototype = {getRgb:function DeviceCmykCS_getRgb(color$$16) {
      var c$$12 = color$$16[0];
      var m$$16 = color$$16[1];
      var y$$57 = color$$16[2];
      var k$$4 = color$$16[3];
      c$$12 = c$$12 * (1 - k$$4) + k$$4;
      m$$16 = m$$16 * (1 - k$$4) + k$$4;
      y$$57 = y$$57 * (1 - k$$4) + k$$4;
      var r$$6 = 1 - c$$12;
      var g$$4 = 1 - m$$16;
      var b$$12 = 1 - y$$57;
      return[r$$6, g$$4, b$$12]
    }, getRgbBuffer:function DeviceCmykCS_getRgbBuffer(colorBuf, bits$$3) {
      var scale$$8 = 1 / ((1 << bits$$3) - 1);
      var length$$30 = colorBuf.length / 4;
      var rgbBuf$$2 = new Uint8Array(length$$30 * 3);
      var rgbBufPos = 0;
      var colorBufPos = 0;
      var i$$60 = 0;
      for(;i$$60 < length$$30;i$$60++) {
        var cmyk = [];
        var j$$13 = 0;
        for(;j$$13 < 4;++j$$13) {
          cmyk.push(scale$$8 * colorBuf[colorBufPos++])
        }
        var rgb = this.getRgb(cmyk);
        j$$13 = 0;
        for(;j$$13 < 3;++j$$13) {
          rgbBuf$$2[rgbBufPos++] = Math.round(rgb[j$$13] * 255)
        }
      }
      return rgbBuf$$2
    }, isDefaultDecode:function DeviceCmykCS_isDefaultDecode(decodeMap$$4) {
      return ColorSpace.isDefaultDecode(decodeMap$$4, this.numComps)
    }};
    return DeviceCmykCS$$1
  }();
  var LabCS = function LabCSClosure() {
    function LabCS$$1(whitePoint$$1, blackPoint$$1, range$$13) {
      this.name = "Lab";
      this.numComps = 3;
      this.defaultColor = [0, 0, 0];
      if(!whitePoint$$1) {
        error$$3("WhitePoint missing - required for color space Lab")
      }
      blackPoint$$1 = blackPoint$$1 || [0, 0, 0];
      range$$13 = range$$13 || [-100, 100, -100, 100];
      this.XW = whitePoint$$1[0];
      this.YW = whitePoint$$1[1];
      this.ZW = whitePoint$$1[2];
      this.amin = range$$13[0];
      this.amax = range$$13[1];
      this.bmin = range$$13[2];
      this.bmax = range$$13[3];
      this.XB = blackPoint$$1[0];
      this.YB = blackPoint$$1[1];
      this.ZB = blackPoint$$1[2];
      if(this.XW < 0 || this.ZW < 0 || this.YW !== 1) {
        error$$3("Invalid WhitePoint components, no fallback available")
      }
      if(this.XB < 0 || this.YB < 0 || this.ZB < 0) {
        warn("Invalid BlackPoint, falling back to default");
        this.XB = this.YB = this.ZB = 0
      }
      if(this.amin > this.amax || this.bmin > this.bmax) {
        warn("Invalid Range, falling back to defaults");
        this.amin = -100;
        this.amax = 100;
        this.bmin = -100;
        this.bmax = 100
      }
    }
    function g$$5(x$$75) {
      if(x$$75 >= 6 / 29) {
        return x$$75 * x$$75 * x$$75
      }else {
        return 108 / 841 * (x$$75 - 4 / 29)
      }
    }
    LabCS$$1.prototype = {getRgb:function LabCS_getRgb(color$$17) {
      var Ls = color$$17[0];
      var as = color$$17[1];
      var bs = color$$17[2];
      as = as > this.amax ? this.amax : as;
      as = as < this.amin ? this.amin : as;
      bs = bs > this.bmax ? this.bmax : bs;
      bs = bs < this.bmin ? this.bmin : bs;
      var M = (Ls + 16) / 116;
      var L = M + as / 500;
      var N = M - bs / 200;
      var X = this.XW * g$$5(L);
      var Y = this.YW * g$$5(M);
      var Z = this.ZW * g$$5(N);
      var XYZtoRGB = [3.240479, -1.53715, -0.498535, -0.969256, 1.875992, 0.041556, 0.055648, -0.204043, 1.057311];
      return Util.apply3dTransform(XYZtoRGB, [X, Y, Z])
    }, getRgbBuffer:function LabCS_getRgbBuffer(input$$5, bits$$4) {
      if(bits$$4 == 8) {
        return input$$5
      }
      var scale$$9 = 255 / ((1 << bits$$4) - 1);
      var i$$61;
      var length$$31 = input$$5.length / 3;
      var rgbBuf$$3 = new Uint8Array(length$$31);
      var j$$14 = 0;
      i$$61 = 0;
      for(;i$$61 < length$$31;++i$$61) {
        var rgb$$1 = this.getRgb([input$$5[i$$61], input$$5[i$$61 + 1], input$$5[i$$61 + 2]]);
        rgbBuf$$3[j$$14++] = rgb$$1[0];
        rgbBuf$$3[j$$14++] = rgb$$1[1];
        rgbBuf$$3[j$$14++] = rgb$$1[2]
      }
      return rgbBuf$$3
    }, isDefaultDecode:function LabCS_isDefaultDecode(decodeMap$$5) {
      if(decodeMap$$5[0] === 0 && decodeMap$$5[1] === 100 && decodeMap$$5[2] === this.amin && decodeMap$$5[3] === this.amax && decodeMap$$5[4] === this.bmin && decodeMap$$5[5] === this.bmax) {
        return true
      }else {
        return false
      }
    }};
    return LabCS$$1
  }();
  var ARCFourCipher = function ARCFourCipherClosure() {
    function ARCFourCipher$$1(key$$28) {
      this.a = 0;
      this.b = 0;
      var s$$9 = new Uint8Array(256);
      var i$$62;
      var j$$15 = 0;
      var tmp;
      var keyLength = key$$28.length;
      i$$62 = 0;
      for(;i$$62 < 256;++i$$62) {
        s$$9[i$$62] = i$$62
      }
      i$$62 = 0;
      for(;i$$62 < 256;++i$$62) {
        tmp = s$$9[i$$62];
        j$$15 = j$$15 + tmp + key$$28[i$$62 % keyLength] & 255;
        s$$9[i$$62] = s$$9[j$$15];
        s$$9[j$$15] = tmp
      }
      this.s = s$$9
    }
    ARCFourCipher$$1.prototype = {encryptBlock:function ARCFourCipher_encryptBlock(data$$48) {
      var i$$63;
      var n$$21 = data$$48.length;
      var tmp$$1;
      var tmp2;
      var a$$10 = this.a;
      var b$$13 = this.b;
      var s$$10 = this.s;
      var output = new Uint8Array(n$$21);
      i$$63 = 0;
      for(;i$$63 < n$$21;++i$$63) {
        a$$10 = a$$10 + 1 & 255;
        tmp$$1 = s$$10[a$$10];
        b$$13 = b$$13 + tmp$$1 & 255;
        tmp2 = s$$10[b$$13];
        s$$10[a$$10] = tmp2;
        s$$10[b$$13] = tmp$$1;
        output[i$$63] = data$$48[i$$63] ^ s$$10[tmp$$1 + tmp2 & 255]
      }
      this.a = a$$10;
      this.b = b$$13;
      return output
    }};
    ARCFourCipher$$1.prototype.decryptBlock = ARCFourCipher$$1.prototype.encryptBlock;
    return ARCFourCipher$$1
  }();
  var calculateMD5 = function calculateMD5Closure() {
    function hash$$2(data$$49, offset$$16, length$$32) {
      var h0 = 1732584193;
      var h1 = -271733879;
      var h2 = -1732584194;
      var h3 = 271733878;
      var paddedLength = length$$32 + 72 & ~63;
      var padded = new Uint8Array(paddedLength);
      var i$$64;
      var j$$16;
      var n$$22;
      i$$64 = 0;
      for(;i$$64 < length$$32;++i$$64) {
        padded[i$$64] = data$$49[offset$$16++]
      }
      padded[i$$64++] = 128;
      n$$22 = paddedLength - 8;
      for(;i$$64 < n$$22;) {
        padded[i$$64++] = 0
      }
      padded[i$$64++] = length$$32 << 3 & 255;
      padded[i$$64++] = length$$32 >> 5 & 255;
      padded[i$$64++] = length$$32 >> 13 & 255;
      padded[i$$64++] = length$$32 >> 21 & 255;
      padded[i$$64++] = length$$32 >>> 29 & 255;
      padded[i$$64++] = 0;
      padded[i$$64++] = 0;
      padded[i$$64++] = 0;
      var w$$15 = new Int32Array(16);
      i$$64 = 0;
      for(;i$$64 < paddedLength;) {
        j$$16 = 0;
        for(;j$$16 < 16;++j$$16, i$$64 += 4) {
          w$$15[j$$16] = padded[i$$64] | padded[i$$64 + 1] << 8 | padded[i$$64 + 2] << 16 | padded[i$$64 + 3] << 24
        }
        var a$$11 = h0;
        var b$$14 = h1;
        var c$$13 = h2;
        var d$$7 = h3;
        var f$$5;
        var g$$6;
        j$$16 = 0;
        for(;j$$16 < 64;++j$$16) {
          if(j$$16 < 16) {
            f$$5 = b$$14 & c$$13 | ~b$$14 & d$$7;
            g$$6 = j$$16
          }else {
            if(j$$16 < 32) {
              f$$5 = d$$7 & b$$14 | ~d$$7 & c$$13;
              g$$6 = 5 * j$$16 + 1 & 15
            }else {
              if(j$$16 < 48) {
                f$$5 = b$$14 ^ c$$13 ^ d$$7;
                g$$6 = 3 * j$$16 + 5 & 15
              }else {
                f$$5 = c$$13 ^ (b$$14 | ~d$$7);
                g$$6 = 7 * j$$16 & 15
              }
            }
          }
          var tmp$$2 = d$$7;
          var rotateArg = a$$11 + f$$5 + k$$5[j$$16] + w$$15[g$$6] | 0;
          var rotate$$3 = r$$7[j$$16];
          d$$7 = c$$13;
          c$$13 = b$$14;
          b$$14 = b$$14 + (rotateArg << rotate$$3 | rotateArg >>> 32 - rotate$$3) | 0;
          a$$11 = tmp$$2
        }
        h0 = h0 + a$$11 | 0;
        h1 = h1 + b$$14 | 0;
        h2 = h2 + c$$13 | 0;
        h3 = h3 + d$$7 | 0
      }
      return new Uint8Array([h0 & 255, h0 >> 8 & 255, h0 >> 16 & 255, h0 >>> 24 & 255, h1 & 255, h1 >> 8 & 255, h1 >> 16 & 255, h1 >>> 24 & 255, h2 & 255, h2 >> 8 & 255, h2 >> 16 & 255, h2 >>> 24 & 255, h3 & 255, h3 >> 8 & 255, h3 >> 16 & 255, h3 >>> 24 & 255])
    }
    var r$$7 = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);
    var k$$5 = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 
    681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);
    return hash$$2
  }();
  var NullCipher = function NullCipherClosure() {
    function NullCipher$$1() {
    }
    NullCipher$$1.prototype = {decryptBlock:function NullCipher_decryptBlock(data$$50) {
      return data$$50
    }};
    return NullCipher$$1
  }();
  var AES128Cipher = function AES128CipherClosure() {
    function AES128Cipher$$1(key$$30) {
      var JSCompiler_inline_result$$2;
      var cipherKey$$inline_36 = key$$30;
      var b$$inline_37 = 176;
      var result$$inline_38 = new Uint8Array(b$$inline_37);
      result$$inline_38.set(cipherKey$$inline_36);
      var j$$inline_39 = 16;
      var i$$inline_40 = 1;
      for(;j$$inline_39 < b$$inline_37;++i$$inline_40) {
        var t1$$inline_41 = result$$inline_38[j$$inline_39 - 3];
        var t2$$inline_42 = result$$inline_38[j$$inline_39 - 2];
        var t3$$inline_43 = result$$inline_38[j$$inline_39 - 1];
        var t4$$inline_44 = result$$inline_38[j$$inline_39 - 4];
        t1$$inline_41 = s$$11[t1$$inline_41];
        t2$$inline_42 = s$$11[t2$$inline_42];
        t3$$inline_43 = s$$11[t3$$inline_43];
        t4$$inline_44 = s$$11[t4$$inline_44];
        t1$$inline_41 = t1$$inline_41 ^ rcon[i$$inline_40];
        var n$$inline_45 = 0;
        for(;n$$inline_45 < 4;++n$$inline_45) {
          result$$inline_38[j$$inline_39] = t1$$inline_41 ^= result$$inline_38[j$$inline_39 - 16];
          j$$inline_39++;
          result$$inline_38[j$$inline_39] = t2$$inline_42 ^= result$$inline_38[j$$inline_39 - 16];
          j$$inline_39++;
          result$$inline_38[j$$inline_39] = t3$$inline_43 ^= result$$inline_38[j$$inline_39 - 16];
          j$$inline_39++;
          result$$inline_38[j$$inline_39] = t4$$inline_44 ^= result$$inline_38[j$$inline_39 - 16];
          j$$inline_39++
        }
      }
      JSCompiler_inline_result$$2 = result$$inline_38;
      this.key = JSCompiler_inline_result$$2;
      this.buffer = new Uint8Array(16);
      this.bufferPosition = 0
    }
    function decryptBlock2(data$$51) {
      var i$$67;
      var j$$19;
      var ii$$18;
      var sourceLength = data$$51.length;
      var buffer$$11 = this.buffer;
      var bufferLength = this.bufferPosition;
      var result$$6 = [];
      var iv = this.iv;
      i$$67 = 0;
      for(;i$$67 < sourceLength;++i$$67) {
        buffer$$11[bufferLength] = data$$51[i$$67];
        ++bufferLength;
        if(bufferLength < 16) {
          continue
        }
        var plain;
        var input$$inline_47 = buffer$$11;
        var key$$inline_48 = this.key;
        var state$$inline_49 = new Uint8Array(16);
        state$$inline_49.set(input$$inline_47);
        var i$$inline_50 = void 0;
        var j$$inline_51 = void 0;
        var k$$inline_52 = void 0;
        var t$$inline_53 = void 0;
        var u$$inline_54 = void 0;
        var v$$inline_55 = void 0;
        j$$inline_51 = 0, k$$inline_52 = 160;
        for(;j$$inline_51 < 16;++j$$inline_51, ++k$$inline_52) {
          state$$inline_49[j$$inline_51] ^= key$$inline_48[k$$inline_52]
        }
        i$$inline_50 = 9;
        for(;i$$inline_50 >= 1;--i$$inline_50) {
          t$$inline_53 = state$$inline_49[13];
          state$$inline_49[13] = state$$inline_49[9];
          state$$inline_49[9] = state$$inline_49[5];
          state$$inline_49[5] = state$$inline_49[1];
          state$$inline_49[1] = t$$inline_53;
          t$$inline_53 = state$$inline_49[14];
          u$$inline_54 = state$$inline_49[10];
          state$$inline_49[14] = state$$inline_49[6];
          state$$inline_49[10] = state$$inline_49[2];
          state$$inline_49[6] = t$$inline_53;
          state$$inline_49[2] = u$$inline_54;
          t$$inline_53 = state$$inline_49[15];
          u$$inline_54 = state$$inline_49[11];
          v$$inline_55 = state$$inline_49[7];
          state$$inline_49[15] = state$$inline_49[3];
          state$$inline_49[11] = t$$inline_53;
          state$$inline_49[7] = u$$inline_54;
          state$$inline_49[3] = v$$inline_55;
          j$$inline_51 = 0;
          for(;j$$inline_51 < 16;++j$$inline_51) {
            state$$inline_49[j$$inline_51] = inv_s[state$$inline_49[j$$inline_51]]
          }
          j$$inline_51 = 0, k$$inline_52 = i$$inline_50 * 16;
          for(;j$$inline_51 < 16;++j$$inline_51, ++k$$inline_52) {
            state$$inline_49[j$$inline_51] ^= key$$inline_48[k$$inline_52]
          }
          j$$inline_51 = 0;
          for(;j$$inline_51 < 16;j$$inline_51 += 4) {
            var s0$$inline_56 = mix[state$$inline_49[j$$inline_51]];
            var s1$$inline_57 = mix[state$$inline_49[j$$inline_51 + 1]];
            var s2$$inline_58 = mix[state$$inline_49[j$$inline_51 + 2]];
            var s3$$inline_59 = mix[state$$inline_49[j$$inline_51 + 3]];
            t$$inline_53 = s0$$inline_56 ^ s1$$inline_57 >>> 8 ^ s1$$inline_57 << 24 ^ s2$$inline_58 >>> 16 ^ s2$$inline_58 << 16 ^ s3$$inline_59 >>> 24 ^ s3$$inline_59 << 8;
            state$$inline_49[j$$inline_51] = t$$inline_53 >>> 24 & 255;
            state$$inline_49[j$$inline_51 + 1] = t$$inline_53 >> 16 & 255;
            state$$inline_49[j$$inline_51 + 2] = t$$inline_53 >> 8 & 255;
            state$$inline_49[j$$inline_51 + 3] = t$$inline_53 & 255
          }
        }
        t$$inline_53 = state$$inline_49[13];
        state$$inline_49[13] = state$$inline_49[9];
        state$$inline_49[9] = state$$inline_49[5];
        state$$inline_49[5] = state$$inline_49[1];
        state$$inline_49[1] = t$$inline_53;
        t$$inline_53 = state$$inline_49[14];
        u$$inline_54 = state$$inline_49[10];
        state$$inline_49[14] = state$$inline_49[6];
        state$$inline_49[10] = state$$inline_49[2];
        state$$inline_49[6] = t$$inline_53;
        state$$inline_49[2] = u$$inline_54;
        t$$inline_53 = state$$inline_49[15];
        u$$inline_54 = state$$inline_49[11];
        v$$inline_55 = state$$inline_49[7];
        state$$inline_49[15] = state$$inline_49[3];
        state$$inline_49[11] = t$$inline_53;
        state$$inline_49[7] = u$$inline_54;
        state$$inline_49[3] = v$$inline_55;
        j$$inline_51 = 0;
        for(;j$$inline_51 < 16;++j$$inline_51) {
          state$$inline_49[j$$inline_51] = inv_s[state$$inline_49[j$$inline_51]];
          state$$inline_49[j$$inline_51] ^= key$$inline_48[j$$inline_51]
        }
        plain = state$$inline_49;
        j$$19 = 0;
        for(;j$$19 < 16;++j$$19) {
          plain[j$$19] ^= iv[j$$19]
        }
        iv = buffer$$11;
        result$$6.push(plain);
        buffer$$11 = new Uint8Array(16);
        bufferLength = 0
      }
      this.buffer = buffer$$11;
      this.bufferLength = bufferLength;
      this.iv = iv;
      if(result$$6.length == 0) {
        return new Uint8Array([])
      }
      if(result$$6.length == 1) {
        return result$$6[0]
      }
      var output$$1 = new Uint8Array(16 * result$$6.length);
      i$$67 = 0, j$$19 = 0, ii$$18 = result$$6.length;
      for(;i$$67 < ii$$18;++i$$67, j$$19 += 16) {
        output$$1.set(result$$6[i$$67], j$$19)
      }
      return output$$1
    }
    var rcon = new Uint8Array([141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 
    4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 
    171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141]);
    var s$$11 = new Uint8Array([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 
    133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 
    72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]);
    var inv_s = new Uint8Array([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 
    211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 
    25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]);
    var mix = new Uint32Array([0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 
    2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 
    1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 
    3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 
    3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 
    875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 
    2370213795]);
    AES128Cipher$$1.prototype = {decryptBlock:function AES128Cipher_decryptBlock(data$$52) {
      var i$$68;
      var sourceLength$$1 = data$$52.length;
      var buffer$$12 = this.buffer;
      var bufferLength$$1 = this.bufferPosition;
      i$$68 = 0;
      for(;bufferLength$$1 < 16 && i$$68 < sourceLength$$1;++i$$68, ++bufferLength$$1) {
        buffer$$12[bufferLength$$1] = data$$52[i$$68]
      }
      if(bufferLength$$1 < 16) {
        this.bufferLength = bufferLength$$1;
        return new Uint8Array([])
      }
      this.iv = buffer$$12;
      this.buffer = new Uint8Array(16);
      this.bufferLength = 0;
      this.decryptBlock = decryptBlock2;
      return this.decryptBlock(data$$52.subarray(16))
    }};
    return AES128Cipher$$1
  }();
  var CipherTransform = function CipherTransformClosure() {
    function CipherTransform$$1(stringCipherConstructor, streamCipherConstructor) {
      this.stringCipherConstructor = stringCipherConstructor;
      this.streamCipherConstructor = streamCipherConstructor
    }
    CipherTransform$$1.prototype = {createStream:function CipherTransform_createStream(stream$$14) {
      var cipher = new this.streamCipherConstructor;
      return new DecryptStream(stream$$14, function cipherTransformDecryptStream(data$$53) {
        return cipher.decryptBlock(data$$53)
      })
    }, decryptString:function CipherTransform_decryptString(s$$12) {
      var cipher$$1 = new this.stringCipherConstructor;
      var data$$54 = stringToBytes(s$$12);
      data$$54 = cipher$$1.decryptBlock(data$$54);
      return bytesToString(data$$54)
    }};
    return CipherTransform$$1
  }();
  var CipherTransformFactory = function CipherTransformFactoryClosure() {
    function CipherTransformFactory$$1(dict$$10, fileId$$2, password$$1) {
      var filter = dict$$10.get("Filter");
      if(!isName(filter) || filter.name != "Standard") {
        error$$3("unknown encryption method")
      }
      this.dict = dict$$10;
      var algorithm = dict$$10.get("V");
      if(!isInt(algorithm) || algorithm != 1 && algorithm != 2 && algorithm != 4) {
        error$$3("unsupported encryption algorithm")
      }
      this.algorithm = algorithm;
      var keyLength$$2 = dict$$10.get("Length") || 40;
      if(!isInt(keyLength$$2) || keyLength$$2 < 40 || keyLength$$2 % 8 != 0) {
        error$$3("invalid key length")
      }
      var ownerPassword$$2 = stringToBytes(dict$$10.get("O"));
      var userPassword$$2 = stringToBytes(dict$$10.get("U"));
      var flags$$2 = dict$$10.get("P");
      var revision$$1 = dict$$10.get("R");
      var encryptMetadata$$1 = dict$$10.get("EncryptMetadata") !== false;
      var fileIdBytes = stringToBytes(fileId$$2);
      var passwordBytes;
      if(password$$1) {
        passwordBytes = stringToBytes(password$$1)
      }
      var JSCompiler_inline_result$$5;
      var fileId$$inline_61 = fileIdBytes;
      var password$$inline_62 = passwordBytes;
      var ownerPassword$$inline_63 = ownerPassword$$2;
      var userPassword$$inline_64 = userPassword$$2;
      var flags$$inline_65 = flags$$2;
      var revision$$inline_66 = revision$$1;
      var keyLength$$inline_67 = keyLength$$2;
      var encryptMetadata$$inline_68 = encryptMetadata$$1;
      var defaultPasswordBytes$$inline_69 = new Uint8Array([40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8, 46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105, 122]);
      var hashData$$inline_70 = new Uint8Array(100);
      var i$$inline_71 = 0;
      var j$$inline_72;
      var n$$inline_73;
      if(password$$inline_62) {
        n$$inline_73 = Math.min(32, password$$inline_62.length);
        for(;i$$inline_71 < n$$inline_73;++i$$inline_71) {
          hashData$$inline_70[i$$inline_71] = password$$inline_62[i$$inline_71]
        }
      }
      j$$inline_72 = 0;
      for(;i$$inline_71 < 32;) {
        hashData$$inline_70[i$$inline_71++] = defaultPasswordBytes$$inline_69[j$$inline_72++]
      }
      j$$inline_72 = 0, n$$inline_73 = ownerPassword$$inline_63.length;
      for(;j$$inline_72 < n$$inline_73;++j$$inline_72) {
        hashData$$inline_70[i$$inline_71++] = ownerPassword$$inline_63[j$$inline_72]
      }
      hashData$$inline_70[i$$inline_71++] = flags$$inline_65 & 255;
      hashData$$inline_70[i$$inline_71++] = flags$$inline_65 >> 8 & 255;
      hashData$$inline_70[i$$inline_71++] = flags$$inline_65 >> 16 & 255;
      hashData$$inline_70[i$$inline_71++] = flags$$inline_65 >>> 24 & 255;
      j$$inline_72 = 0, n$$inline_73 = fileId$$inline_61.length;
      for(;j$$inline_72 < n$$inline_73;++j$$inline_72) {
        hashData$$inline_70[i$$inline_71++] = fileId$$inline_61[j$$inline_72]
      }
      if(revision$$inline_66 >= 4 && !encryptMetadata$$inline_68) {
        hashData$$inline_70[i$$inline_71++] = 255;
        hashData$$inline_70[i$$inline_71++] = 255;
        hashData$$inline_70[i$$inline_71++] = 255;
        hashData$$inline_70[i$$inline_71++] = 255
      }
      var hash$$inline_74 = calculateMD5(hashData$$inline_70, 0, i$$inline_71);
      var keyLengthInBytes$$inline_75 = keyLength$$inline_67 >> 3;
      if(revision$$inline_66 >= 3) {
        j$$inline_72 = 0;
        for(;j$$inline_72 < 50;++j$$inline_72) {
          hash$$inline_74 = calculateMD5(hash$$inline_74, 0, keyLengthInBytes$$inline_75)
        }
      }
      var encryptionKey$$inline_76 = hash$$inline_74.subarray(0, keyLengthInBytes$$inline_75);
      var cipher$$inline_77;
      var checkData$$inline_78;
      if(revision$$inline_66 >= 3) {
        i$$inline_71 = 32;
        j$$inline_72 = 0, n$$inline_73 = fileId$$inline_61.length;
        for(;j$$inline_72 < n$$inline_73;++j$$inline_72) {
          hashData$$inline_70[i$$inline_71++] = fileId$$inline_61[j$$inline_72]
        }
        cipher$$inline_77 = new ARCFourCipher(encryptionKey$$inline_76);
        checkData$$inline_78 = cipher$$inline_77.encryptBlock(calculateMD5(hashData$$inline_70, 0, i$$inline_71));
        n$$inline_73 = encryptionKey$$inline_76.length;
        var derivedKey$$inline_79 = new Uint8Array(n$$inline_73);
        var k$$inline_80;
        j$$inline_72 = 1;
        for(;j$$inline_72 <= 19;++j$$inline_72) {
          k$$inline_80 = 0;
          for(;k$$inline_80 < n$$inline_73;++k$$inline_80) {
            derivedKey$$inline_79[k$$inline_80] = encryptionKey$$inline_76[k$$inline_80] ^ j$$inline_72
          }
          cipher$$inline_77 = new ARCFourCipher(derivedKey$$inline_79);
          checkData$$inline_78 = cipher$$inline_77.encryptBlock(checkData$$inline_78)
        }
      }else {
        cipher$$inline_77 = new ARCFourCipher(encryptionKey$$inline_76);
        checkData$$inline_78 = cipher$$inline_77.encryptBlock(hashData$$inline_70.subarray(0, 32))
      }
      j$$inline_72 = 0, n$$inline_73 = checkData$$inline_78.length;
      for(;j$$inline_72 < n$$inline_73;++j$$inline_72) {
        if(userPassword$$inline_64[j$$inline_72] != checkData$$inline_78[j$$inline_72]) {
          error$$3("incorrect password")
        }
      }
      JSCompiler_inline_result$$5 = encryptionKey$$inline_76;
      this.encryptionKey = JSCompiler_inline_result$$5;
      if(algorithm == 4) {
        this.cf = dict$$10.get("CF");
        this.stmf = dict$$10.get("StmF") || identityName;
        this.strf = dict$$10.get("StrF") || identityName;
        this.eff = dict$$10.get("EFF") || this.strf
      }
    }
    function buildObjectKey(num$$8, gen$$2, encryptionKey$$1, isAes) {
      var key$$31 = new Uint8Array(encryptionKey$$1.length + 9);
      var i$$70;
      var n$$25;
      i$$70 = 0, n$$25 = encryptionKey$$1.length;
      for(;i$$70 < n$$25;++i$$70) {
        key$$31[i$$70] = encryptionKey$$1[i$$70]
      }
      key$$31[i$$70++] = num$$8 & 255;
      key$$31[i$$70++] = num$$8 >> 8 & 255;
      key$$31[i$$70++] = num$$8 >> 16 & 255;
      key$$31[i$$70++] = gen$$2 & 255;
      key$$31[i$$70++] = gen$$2 >> 8 & 255;
      if(isAes) {
        key$$31[i$$70++] = 115;
        key$$31[i$$70++] = 65;
        key$$31[i$$70++] = 108;
        key$$31[i$$70++] = 84
      }
      var hash$$4 = calculateMD5(key$$31, 0, i$$70);
      return hash$$4.subarray(0, Math.min(encryptionKey$$1.length + 5, 16))
    }
    function buildCipherConstructor(cf, name$$53, num$$9, gen$$3, key$$32) {
      var cryptFilter = cf.get(name$$53.name);
      var cfm;
      if(cryptFilter != null) {
        cfm = cryptFilter.get("CFM")
      }
      if(!cfm || cfm.name == "None") {
        return function cipherTransformFactoryBuildCipherConstructorNone() {
          return new NullCipher
        }
      }
      if("V2" == cfm.name) {
        return function cipherTransformFactoryBuildCipherConstructorV2() {
          return new ARCFourCipher(buildObjectKey(num$$9, gen$$3, key$$32, false))
        }
      }
      if("AESV2" == cfm.name) {
        return function cipherTransformFactoryBuildCipherConstructorAESV2() {
          return new AES128Cipher(buildObjectKey(num$$9, gen$$3, key$$32, true))
        }
      }
      error$$3("Unknown crypto method")
    }
    var identityName = new Name("Identity");
    CipherTransformFactory$$1.prototype = {createCipherTransform:function CipherTransformFactory_createCipherTransform(num$$10, gen$$4) {
      function cipherConstructor() {
        return new ARCFourCipher(key$$33)
      }
      if(this.algorithm == 4) {
        return new CipherTransform(buildCipherConstructor(this.cf, this.stmf, num$$10, gen$$4, this.encryptionKey), buildCipherConstructor(this.cf, this.strf, num$$10, gen$$4, this.encryptionKey))
      }
      var key$$33 = buildObjectKey(num$$10, gen$$4, this.encryptionKey, false);
      return new CipherTransform(cipherConstructor, cipherConstructor)
    }};
    return CipherTransformFactory$$1
  }();
  var PartialEvaluator = function PartialEvaluatorClosure() {
    function PartialEvaluator$$1(xref$$15, handler$$5, uniquePrefix) {
      this.state = new EvalState;
      this.stateStack = [];
      this.xref = xref$$15;
      this.handler = handler$$5;
      this.uniquePrefix = uniquePrefix;
      this.objIdCounter = 0
    }
    function splitCombinedOperations(operations) {
      var i$$71 = operations.length - 1;
      for(;i$$71 > 0;i$$71--) {
        var op1 = operations.substring(0, i$$71);
        var op2 = operations.substring(i$$71);
        if(op1 in OP_MAP && op2 in OP_MAP) {
          return[op1, op2]
        }
      }
      return null
    }
    var OP_MAP = {w:"setLineWidth", J:"setLineCap", j:"setLineJoin", M:"setMiterLimit", d:"setDash", ri:"setRenderingIntent", i:"setFlatness", gs:"setGState", q:"save", Q:"restore", cm:"transform", m:"moveTo", l:"lineTo", c:"curveTo", v:"curveTo2", y:"curveTo3", h:"closePath", re:"rectangle", S:"stroke", s:"closeStroke", f:"fill", F:"fill", "f*":"eoFill", B:"fillStroke", "B*":"eoFillStroke", b:"closeFillStroke", "b*":"closeEOFillStroke", n:"endPath", W:"clip", "W*":"eoClip", BT:"beginText", ET:"endText", 
    Tc:"setCharSpacing", Tw:"setWordSpacing", Tz:"setHScale", TL:"setLeading", Tf:"setFont", Tr:"setTextRenderingMode", Ts:"setTextRise", Td:"moveText", TD:"setLeadingMoveText", Tm:"setTextMatrix", "T*":"nextLine", Tj:"showText", TJ:"showSpacedText", "'":"nextLineShowText", '"':"nextLineSetSpacingShowText", d0:"setCharWidth", d1:"setCharWidthAndBounds", CS:"setStrokeColorSpace", cs:"setFillColorSpace", SC:"setStrokeColor", SCN:"setStrokeColorN", sc:"setFillColor", scn:"setFillColorN", G:"setStrokeGray", 
    g:"setFillGray", RG:"setStrokeRGBColor", rg:"setFillRGBColor", K:"setStrokeCMYKColor", k:"setFillCMYKColor", sh:"shadingFill", BI:"beginInlineImage", ID:"beginImageData", EI:"endInlineImage", Do:"paintXObject", MP:"markPoint", DP:"markPointProps", BMC:"beginMarkedContent", BDC:"beginMarkedContentProps", EMC:"endMarkedContent", BX:"beginCompat", EX:"endCompat"};
    PartialEvaluator$$1.prototype = {getOperatorList:function PartialEvaluator_getOperatorList(stream$$15, resources$$1, dependency$$1, queue$$2) {
      function insertDependency(depList) {
        fnArray$$1.push("dependency");
        argsArray$$1.push(depList);
        var i$$72 = 0;
        var ii$$19 = depList.length;
        for(;i$$72 < ii$$19;i$$72++) {
          var dep = depList[i$$72];
          if(dependency$$1.indexOf(dep) == -1) {
            dependency$$1.push(depList[i$$72])
          }
        }
      }
      function handleSetFont(fontName, font$$4) {
        var loadedName = null;
        var fontRes = resources$$1.get("Font");
        if(!fontRes) {
          error$$3("fontRes not available")
        }
        font$$4 = xref$$16.fetchIfRef(font$$4) || fontRes.get(fontName);
        assertWellFormed(isDict(font$$4));
        ++self$$4.objIdCounter;
        if(!font$$4.translated) {
          font$$4.translated = self$$4.translateFont(font$$4, xref$$16, resources$$1, dependency$$1);
          if(font$$4.translated) {
            loadedName = "font_" + uniquePrefix$$1 + self$$4.objIdCounter;
            font$$4.translated.properties.loadedName = loadedName;
            font$$4.loadedName = loadedName;
            var translated = font$$4.translated;
            if(translated.file) {
              translated.file = translated.file.getBytes()
            }
            if(translated.properties.file) {
              translated.properties.file = translated.properties.file.getBytes()
            }
            handler$$6.send("obj", [loadedName, "Font", translated.name, translated.file, translated.properties])
          }
        }
        loadedName = loadedName || font$$4.loadedName;
        insertDependency([loadedName]);
        return loadedName
      }
      function buildPaintImageXObject(image$$3, inline) {
        var dict$$12 = image$$3.dict;
        var w$$16 = dict$$12.get("Width", "W");
        var h$$13 = dict$$12.get("Height", "H");
        var imageMask = dict$$12.get("ImageMask", "IM") || false;
        if(imageMask) {
          var width$$18 = dict$$12.get("Width", "W");
          var height$$15 = dict$$12.get("Height", "H");
          var bitStrideLength = width$$18 + 7 >> 3;
          var imgArray$$1 = image$$3.getBytes(bitStrideLength * height$$15);
          var decode$$3 = dict$$12.get("Decode", "D");
          var inverseDecode$$2 = !!decode$$3 && decode$$3[0] > 0;
          fn$$4 = "paintImageMaskXObject";
          args$$5 = [imgArray$$1, inverseDecode$$2, width$$18, height$$15];
          return
        }
        var objId$$9 = "img_" + uniquePrefix$$1 + ++self$$4.objIdCounter;
        insertDependency([objId$$9]);
        args$$5 = [objId$$9, w$$16, h$$13];
        var softMask = dict$$12.get("SMask", "IM") || false;
        if(!softMask && image$$3 instanceof JpegStream && image$$3.isNativelySupported(xref$$16, resources$$1)) {
          fn$$4 = "paintJpegXObject";
          handler$$6.send("obj", [objId$$9, "JpegStream", image$$3.getIR()]);
          return
        }
        fn$$4 = "paintImageXObject";
        PDFImage.buildImage(function(imageObj) {
          var drawWidth = imageObj.drawWidth;
          var drawHeight = imageObj.drawHeight;
          var imgData$$4 = {width:drawWidth, height:drawHeight, data:new Uint8Array(drawWidth * drawHeight * 4)};
          var pixels$$2 = imgData$$4.data;
          imageObj.fillRgbaBuffer(pixels$$2, drawWidth, drawHeight);
          handler$$6.send("obj", [objId$$9, "Image", imgData$$4])
        }, handler$$6, xref$$16, resources$$1, image$$3, inline)
      }
      var self$$4 = this;
      var xref$$16 = this.xref;
      var handler$$6 = this.handler;
      var uniquePrefix$$1 = this.uniquePrefix || "";
      if(!queue$$2) {
        queue$$2 = {}
      }
      if(!queue$$2.argsArray) {
        queue$$2.argsArray = []
      }
      if(!queue$$2.fnArray) {
        queue$$2.fnArray = []
      }
      var fnArray$$1 = queue$$2.fnArray;
      var argsArray$$1 = queue$$2.argsArray;
      var dependencyArray = dependency$$1 || [];
      resources$$1 = resources$$1 || new Dict;
      var xobjs = resources$$1.get("XObject") || new Dict;
      var patterns = resources$$1.get("Pattern") || new Dict;
      var parser$$5 = new Parser(new Lexer(stream$$15), false, xref$$16);
      var res$$2 = resources$$1;
      var hasNextObj = false;
      var nextObj;
      var args$$5 = [];
      var obj$$31;
      var TILING_PATTERN = 1;
      var SHADING_PATTERN = 2;
      for(;true;) {
        if(hasNextObj) {
          obj$$31 = nextObj;
          hasNextObj = false
        }else {
          obj$$31 = parser$$5.getObj();
          if(obj$$31 == EOF) {
            break
          }
        }
        if(isCmd(obj$$31)) {
          var cmd$$4 = obj$$31.cmd;
          var fn$$4 = OP_MAP[cmd$$4];
          if(!fn$$4) {
            var cmds = splitCombinedOperations(cmd$$4);
            if(cmds) {
              cmd$$4 = cmds[0];
              fn$$4 = OP_MAP[cmd$$4];
              hasNextObj = true;
              nextObj = Cmd.get(cmds[1])
            }
          }
          assertWellFormed(fn$$4, 'Unknown command "' + cmd$$4 + '"');
          if((cmd$$4 == "SCN" || cmd$$4 == "scn") && !args$$5[args$$5.length - 1].code) {
            var patternName = args$$5[args$$5.length - 1];
            if(isName(patternName)) {
              var pattern$$3 = patterns.get(patternName.name);
              if(pattern$$3) {
                var dict$$11 = isStream(pattern$$3) ? pattern$$3.dict : pattern$$3;
                var typeNum$$1 = dict$$11.get("PatternType");
                if(typeNum$$1 == TILING_PATTERN) {
                  var depIdx = dependencyArray.length;
                  var operatorList$$3 = this.getOperatorList(pattern$$3, dict$$11.get("Resources") || resources$$1, dependencyArray);
                  insertDependency(dependencyArray.slice(depIdx));
                  args$$5 = TilingPattern.getIR(operatorList$$3, dict$$11, args$$5)
                }else {
                  if(typeNum$$1 == SHADING_PATTERN) {
                    var shading = dict$$11.get("Shading");
                    var matrix$$1 = dict$$11.get("Matrix");
                    pattern$$3 = Pattern.parseShading(shading, matrix$$1, xref$$16, res$$2);
                    args$$5 = pattern$$3.getIR()
                  }else {
                    error$$3("Unkown PatternType " + typeNum$$1)
                  }
                }
              }
            }
          }else {
            if(cmd$$4 == "Do" && !args$$5[0].code) {
              var name$$54 = args$$5[0].name;
              var xobj = xobjs.get(name$$54);
              if(xobj) {
                assertWellFormed(isStream(xobj), "XObject should be a stream");
                var type$$36 = xobj.dict.get("Subtype");
                assertWellFormed(isName(type$$36), "XObject should have a Name subtype");
                if("Form" == type$$36.name) {
                  matrix$$1 = xobj.dict.get("Matrix");
                  var bbox$$1 = xobj.dict.get("BBox");
                  fnArray$$1.push("paintFormXObjectBegin");
                  argsArray$$1.push([matrix$$1, bbox$$1]);
                  depIdx = dependencyArray.length;
                  this.getOperatorList(xobj, xobj.dict.get("Resources") || resources$$1, dependencyArray, queue$$2);
                  insertDependency(dependencyArray.slice(depIdx));
                  fn$$4 = "paintFormXObjectEnd";
                  args$$5 = []
                }else {
                  if("Image" == type$$36.name) {
                    buildPaintImageXObject(xobj, false)
                  }else {
                    error$$3("Unhandled XObject subtype " + type$$36.name)
                  }
                }
              }
            }else {
              if(cmd$$4 == "Tf") {
                args$$5[0] = handleSetFont(args$$5[0].name)
              }else {
                if(cmd$$4 == "EI") {
                  buildPaintImageXObject(args$$5[0], true)
                }
              }
            }
          }
          switch(fn$$4) {
            case "setFillColorSpace":
            ;
            case "setStrokeColorSpace":
              args$$5 = [ColorSpace.parseToIR(args$$5[0], xref$$16, resources$$1)];
              break;
            case "shadingFill":
              var shadingRes = res$$2.get("Shading");
              if(!shadingRes) {
                error$$3("No shading resource found")
              }
              shading = shadingRes.get(args$$5[0].name);
              if(!shading) {
                error$$3("No shading object found")
              }
              var shadingFill = Pattern.parseShading(shading, null, xref$$16, res$$2);
              var patternIR$$1 = shadingFill.getIR();
              args$$5 = [patternIR$$1];
              fn$$4 = "shadingFill";
              break;
            case "setGState":
              var dictName = args$$5[0];
              var extGState = resources$$1.get("ExtGState");
              if(!isDict(extGState) || !extGState.has(dictName.name)) {
                break
              }
              var gsState = extGState.get(dictName.name);
              var gsStateObj = [];
              gsState.forEach(function canvasGraphicsSetGStateForEach(key$$34, value$$44) {
                switch(key$$34) {
                  case "Type":
                    break;
                  case "LW":
                  ;
                  case "LC":
                  ;
                  case "LJ":
                  ;
                  case "ML":
                  ;
                  case "D":
                  ;
                  case "RI":
                  ;
                  case "FL":
                  ;
                  case "CA":
                  ;
                  case "ca":
                    gsStateObj.push([key$$34, value$$44]);
                    break;
                  case "Font":
                    gsStateObj.push(["Font", handleSetFont(null, value$$44[0]), value$$44[1]]);
                    break;
                  case "OP":
                  ;
                  case "op":
                  ;
                  case "OPM":
                  ;
                  case "BG":
                  ;
                  case "BG2":
                  ;
                  case "UCR":
                  ;
                  case "UCR2":
                  ;
                  case "TR":
                  ;
                  case "TR2":
                  ;
                  case "HT":
                  ;
                  case "SM":
                  ;
                  case "SA":
                  ;
                  case "BM":
                  ;
                  case "SMask":
                  ;
                  case "AIS":
                  ;
                  case "TK":
                    TODO("graphic state operator " + key$$34);
                    break;
                  default:
                    warn("Unknown graphic state operator " + key$$34)
                }
              });
              args$$5 = [gsStateObj]
          }
          fnArray$$1.push(fn$$4);
          argsArray$$1.push(args$$5);
          args$$5 = []
        }else {
          if(obj$$31 != null) {
            assertWellFormed(args$$5.length <= 33, "Too many arguments");
            args$$5.push(obj$$31 instanceof Dict ? obj$$31.getAll() : obj$$31)
          }
        }
      }
      return queue$$2
    }, extractDataStructures:function partialEvaluatorExtractDataStructures(dict$$13, baseDict, xref$$17, properties$$3) {
      var toUnicode = dict$$13.get("ToUnicode") || baseDict.get("ToUnicode");
      if(toUnicode) {
        properties$$3.toUnicode = this.readToUnicode(toUnicode, xref$$17, properties$$3)
      }
      if(properties$$3.composite) {
        var cidSystemInfo = dict$$13.get("CIDSystemInfo");
        if(isDict(cidSystemInfo)) {
          properties$$3.cidSystemInfo = {registry:cidSystemInfo.get("Registry"), ordering:cidSystemInfo.get("Ordering"), supplement:cidSystemInfo.get("Supplement")}
        }
        var cidToGidMap = dict$$13.get("CIDToGIDMap");
        if(isStream(cidToGidMap)) {
          properties$$3.cidToGidMap = this.readCidToGidMap(cidToGidMap)
        }
      }
      var flags$$3 = properties$$3.flags;
      var differences = [];
      var baseEncoding = !!(flags$$3 & FontFlags.Symbolic) ? Encodings.symbolsEncoding : Encodings.StandardEncoding;
      var hasEncoding = dict$$13.has("Encoding");
      if(hasEncoding) {
        var encoding$$1 = dict$$13.get("Encoding");
        if(isDict(encoding$$1)) {
          var baseName = encoding$$1.get("BaseEncoding");
          if(baseName) {
            baseEncoding = Encodings[baseName.name]
          }else {
            hasEncoding = false
          }
          if(encoding$$1.has("Differences")) {
            var diffEncoding = encoding$$1.get("Differences");
            var index$$43 = 0;
            var j$$21 = 0;
            var jj$$1 = diffEncoding.length;
            for(;j$$21 < jj$$1;j$$21++) {
              var data$$55 = diffEncoding[j$$21];
              if(isNum(data$$55)) {
                index$$43 = data$$55
              }else {
                differences[index$$43++] = data$$55.name
              }
            }
          }
        }else {
          if(isName(encoding$$1)) {
            baseEncoding = Encodings[encoding$$1.name]
          }else {
            error$$3("Encoding is not a Name nor a Dict")
          }
        }
      }
      properties$$3.differences = differences;
      properties$$3.baseEncoding = baseEncoding;
      properties$$3.hasEncoding = hasEncoding
    }, readToUnicode:function PartialEvaluator_readToUnicode(toUnicode$$1, xref$$18, properties$$4) {
      var cmapObj = toUnicode$$1;
      var charToUnicode = [];
      if(isName(cmapObj)) {
        var isIdentityMap = cmapObj.name.substr(0, 9) == "Identity-";
        if(!isIdentityMap) {
          error$$3("ToUnicode file cmap translation not implemented")
        }
      }else {
        if(isStream(cmapObj)) {
          var tokens = [];
          var token$$6 = "";
          var beginArrayToken = {};
          var cmap = cmapObj.getBytes(cmapObj.length);
          var i$$73 = 0;
          var ii$$20 = cmap.length;
          for(;i$$73 < ii$$20;i$$73++) {
            var octet = cmap[i$$73];
            if(octet == 32 || octet == 13 || octet == 10 || octet == 60 || octet == 91 || octet == 93) {
              switch(token$$6) {
                case "usecmap":
                  error$$3("usecmap is not implemented");
                  break;
                case "beginbfchar":
                ;
                case "beginbfrange":
                ;
                case "begincidchar":
                ;
                case "begincidrange":
                  token$$6 = "";
                  tokens = [];
                  break;
                case "endcidrange":
                ;
                case "endbfrange":
                  var j$$22 = 0;
                  var jj$$2 = tokens.length;
                  for(;j$$22 < jj$$2;j$$22 += 3) {
                    var startRange = tokens[j$$22];
                    var endRange = tokens[j$$22 + 1];
                    var code$$6 = tokens[j$$22 + 2];
                    if(code$$6 == 65535) {
                      code$$6 = startRange
                    }
                    if(isArray(code$$6)) {
                      var codeindex = 0;
                      for(;startRange <= endRange;) {
                        charToUnicode[startRange] = code$$6[codeindex++];
                        ++startRange
                      }
                    }else {
                      for(;startRange <= endRange;) {
                        charToUnicode[startRange] = code$$6++;
                        ++startRange
                      }
                    }
                  }
                  break;
                case "endcidchar":
                ;
                case "endbfchar":
                  j$$22 = 0;
                  jj$$2 = tokens.length;
                  for(;j$$22 < jj$$2;j$$22 += 2) {
                    var index$$44 = tokens[j$$22];
                    code$$6 = tokens[j$$22 + 1];
                    charToUnicode[index$$44] = code$$6
                  }
                  break;
                case "":
                  break;
                default:
                  if(token$$6[0] >= "0" && token$$6[0] <= "9") {
                    token$$6 = parseInt(token$$6, 10)
                  }
                  tokens.push(token$$6);
                  token$$6 = ""
              }
              switch(octet) {
                case 91:
                  tokens.push(beginArrayToken);
                  break;
                case 93:
                  var items$$1 = [];
                  var item$$2;
                  for(;tokens.length && (item$$2 = tokens.pop()) != beginArrayToken;) {
                    items$$1.unshift(item$$2)
                  }
                  tokens.push(items$$1)
              }
            }else {
              if(octet == 62) {
                if(token$$6.length) {
                  if(token$$6.length <= 2 && properties$$4.composite) {
                    properties$$4.wideChars = false
                  }
                  if(token$$6.length <= 4) {
                    tokens.push(parseInt(token$$6, 16));
                    token$$6 = ""
                  }else {
                    var str$$18 = [];
                    var k$$8 = 0;
                    var kk = token$$6.length;
                    for(;k$$8 < kk;k$$8 += 4) {
                      var b$$16 = parseInt(token$$6.substr(k$$8, 4), 16);
                      if(b$$16 <= 16) {
                        k$$8 += 4;
                        b$$16 = b$$16 << 16 | parseInt(token$$6.substr(k$$8, 4), 16);
                        b$$16 -= 65536;
                        str$$18.push(55296 | b$$16 >> 10);
                        str$$18.push(56320 | b$$16 & 1023);
                        break
                      }
                      str$$18.push(b$$16)
                    }
                    tokens.push(String.fromCharCode.apply(String, str$$18));
                    token$$6 = ""
                  }
                }
              }else {
                token$$6 += String.fromCharCode(octet)
              }
            }
          }
        }
      }
      return charToUnicode
    }, readCidToGidMap:function PartialEvaluator_readCidToGidMap(cidToGidStream) {
      var glyphsData = cidToGidStream.getBytes();
      var result$$7 = [];
      var j$$23 = 0;
      var jj$$3 = glyphsData.length;
      for(;j$$23 < jj$$3;j$$23++) {
        var glyphID = glyphsData[j$$23++] << 8 | glyphsData[j$$23];
        if(glyphID == 0) {
          continue
        }
        var code$$7 = j$$23 >> 1;
        result$$7[code$$7] = glyphID
      }
      return result$$7
    }, extractWidths:function PartialEvaluator_extractWidths(dict$$14, xref$$19, descriptor$$1, properties$$5) {
      var glyphsWidths = [];
      var defaultWidth = 0;
      if(properties$$5.composite) {
        defaultWidth = dict$$14.get("DW") || 1E3;
        var widths = dict$$14.get("W");
        if(widths) {
          var start$$6 = 0;
          var end$$2 = 0;
          var i$$74 = 0;
          var ii$$21 = widths.length;
          for(;i$$74 < ii$$21;i$$74++) {
            var code$$8 = widths[i$$74];
            if(isArray(code$$8)) {
              var j$$24 = 0;
              var jj$$4 = code$$8.length;
              for(;j$$24 < jj$$4;j$$24++) {
                glyphsWidths[start$$6++] = code$$8[j$$24]
              }
              start$$6 = 0
            }else {
              if(start$$6) {
                var width$$19 = widths[++i$$74];
                j$$24 = start$$6;
                for(;j$$24 <= code$$8;j$$24++) {
                  glyphsWidths[j$$24] = width$$19
                }
                start$$6 = 0
              }else {
                start$$6 = code$$8
              }
            }
          }
        }
      }else {
        var firstChar = properties$$5.firstChar;
        widths = dict$$14.get("Widths");
        if(widths) {
          j$$24 = firstChar;
          i$$74 = 0;
          ii$$21 = widths.length;
          for(;i$$74 < ii$$21;i$$74++) {
            glyphsWidths[j$$24++] = widths[i$$74]
          }
          defaultWidth = parseFloat(descriptor$$1.get("MissingWidth")) || 0
        }else {
          var baseFontName = dict$$14.get("BaseFont");
          if(isName(baseFontName)) {
            var metrics = this.getBaseFontMetrics(baseFontName.name);
            glyphsWidths = metrics.widths;
            defaultWidth = metrics.defaultWidth
          }
        }
      }
      properties$$5.defaultWidth = defaultWidth;
      properties$$5.widths = glyphsWidths
    }, getBaseFontMetrics:function PartialEvaluator_getBaseFontMetrics(name$$55) {
      var defaultWidth$$1 = 0;
      var widths$$1 = [];
      var glyphWidths = Metrics[stdFontMap[name$$55] || name$$55];
      if(isNum(glyphWidths)) {
        defaultWidth$$1 = glyphWidths
      }else {
        widths$$1 = glyphWidths
      }
      return{defaultWidth:defaultWidth$$1, widths:widths$$1}
    }, translateFont:function PartialEvaluator_translateFont(dict$$15, xref$$20, resources$$2, dependency$$2) {
      var baseDict$$1 = dict$$15;
      var type$$37 = dict$$15.get("Subtype");
      assertWellFormed(isName(type$$37), "invalid font Subtype");
      var composite = false;
      if(type$$37.name == "Type0") {
        var df = dict$$15.get("DescendantFonts");
        if(!df) {
          return null
        }
        dict$$15 = isArray(df) ? xref$$20.fetchIfRef(df[0]) : df;
        type$$37 = dict$$15.get("Subtype");
        assertWellFormed(isName(type$$37), "invalid font Subtype");
        composite = true
      }
      var maxCharIndex = composite ? 65535 : 255;
      var descriptor$$2 = dict$$15.get("FontDescriptor");
      if(!descriptor$$2) {
        if(type$$37.name == "Type3") {
          descriptor$$2 = new Dict;
          descriptor$$2.set("FontName", new Name(type$$37.name))
        }else {
          var baseFontName$$1 = dict$$15.get("BaseFont");
          if(!isName(baseFontName$$1)) {
            return null
          }
          baseFontName$$1 = baseFontName$$1.name.replace(/[,_]/g, "-");
          var metrics$$1 = this.getBaseFontMetrics(baseFontName$$1);
          var fontNameWoStyle = baseFontName$$1.split("-")[0];
          var flags$$4 = (serifFonts[fontNameWoStyle] || fontNameWoStyle.search(/serif/gi) != -1 ? FontFlags.Serif : 0) | (symbolsFonts[fontNameWoStyle] ? FontFlags.Symbolic : FontFlags.Nonsymbolic);
          var properties$$6 = {type:type$$37.name, widths:metrics$$1.widths, defaultWidth:metrics$$1.defaultWidth, flags:flags$$4, firstChar:0, lastChar:maxCharIndex};
          this.extractDataStructures(dict$$15, dict$$15, xref$$20, properties$$6);
          return{name:baseFontName$$1, dict:baseDict$$1, properties:properties$$6}
        }
      }
      var firstChar$$1 = dict$$15.get("FirstChar") || 0;
      var lastChar = dict$$15.get("LastChar") || maxCharIndex;
      var fontName$$1 = descriptor$$2.get("FontName");
      if(isString(fontName$$1)) {
        fontName$$1 = new Name(fontName$$1)
      }
      assertWellFormed(isName(fontName$$1), "invalid font name");
      var fontFile = descriptor$$2.get("FontFile", "FontFile2", "FontFile3");
      if(fontFile) {
        if(fontFile.dict) {
          var subtype$$2 = fontFile.dict.get("Subtype");
          if(subtype$$2) {
            subtype$$2 = subtype$$2.name
          }
          var length1 = fontFile.dict.get("Length1");
          var length2 = fontFile.dict.get("Length2")
        }
      }
      properties$$6 = {type:type$$37.name, subtype:subtype$$2, file:fontFile, length1:length1, length2:length2, composite:composite, wideChars:composite, fixedPitch:false, fontMatrix:dict$$15.get("FontMatrix") || IDENTITY_MATRIX, firstChar:firstChar$$1 || 0, lastChar:lastChar || maxCharIndex, bbox:descriptor$$2.get("FontBBox"), ascent:descriptor$$2.get("Ascent"), descent:descriptor$$2.get("Descent"), xHeight:descriptor$$2.get("XHeight"), capHeight:descriptor$$2.get("CapHeight"), flags:descriptor$$2.get("Flags"), 
      italicAngle:descriptor$$2.get("ItalicAngle"), coded:false};
      this.extractWidths(dict$$15, xref$$20, descriptor$$2, properties$$6);
      this.extractDataStructures(dict$$15, baseDict$$1, xref$$20, properties$$6);
      if(type$$37.name === "Type3") {
        properties$$6.coded = true;
        var charProcs = dict$$15.get("CharProcs").getAll();
        var fontResources = dict$$15.get("Resources") || resources$$2;
        properties$$6.charProcOperatorList = {};
        var key$$35;
        for(key$$35 in charProcs) {
          var glyphStream = charProcs[key$$35];
          properties$$6.charProcOperatorList[key$$35] = this.getOperatorList(glyphStream, fontResources, dependency$$2)
        }
      }
      return{name:fontName$$1.name, dict:baseDict$$1, file:fontFile, properties:properties$$6}
    }};
    return PartialEvaluator$$1
  }();
  var EvalState = function EvalStateClosure() {
    function EvalState$$1() {
      this.alphaIsShape = false;
      this.fontSize = 0;
      this.textMatrix = IDENTITY_MATRIX;
      this.leading = 0;
      this.lineX = 0;
      this.lineY = 0;
      this.charSpacing = 0;
      this.wordSpacing = 0;
      this.textHScale = 1;
      this.fillColorSpace = null;
      this.strokeColorSpace = null
    }
    EvalState$$1.prototype = {};
    return EvalState$$1
  }();
  var kMaxWaitForFontFace = 1E3;
  var kCmapGlyphOffset = 57344;
  var kSizeOfGlyphArea = 6400;
  var kSymbolicFontGlyphOffset = 61440;
  var kPDFGlyphSpaceUnits = 1E3;
  var kHintingEnabled = false;
  var FontFlags = {FixedPitch:1, Serif:2, Symbolic:4, Script:8, Nonsymbolic:32, Italic:64, AllCap:65536, SmallCap:131072, ForceBold:262144};
  var Encodings = {ExpertEncoding:["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", 
  "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", 
  "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", 
  "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", 
  "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", 
  "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"], MacExpertEncoding:["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "centoldstyle", "dollaroldstyle", "dollarsuperior", "ampersandsmall", 
  "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "", "threequartersemdash", "", "questionsmall", "", "", "", "", "Ethsmall", "", "", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", 
  "onethird", "twothirds", "", "", "", "", "", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hypheninferior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", 
  "asuperior", "centsuperior", "", "", "", "", "Aacutesmall", "Agravesmall", "Acircumflexsmall", "Adieresissmall", "Atildesmall", "Aringsmall", "Ccedillasmall", "Eacutesmall", "Egravesmall", "Ecircumflexsmall", "Edieresissmall", "Iacutesmall", "Igravesmall", "Icircumflexsmall", "Idieresissmall", "Ntildesmall", "Oacutesmall", "Ogravesmall", "Ocircumflexsmall", "Odieresissmall", "Otildesmall", "Uacutesmall", "Ugravesmall", "Ucircumflexsmall", "Udieresissmall", "", "eightsuperior", "fourinferior", "threeinferior", 
  "sixinferior", "eightinferior", "seveninferior", "Scaronsmall", "", "centinferior", "twoinferior", "", "Dieresissmall", "", "Caronsmall", "osuperior", "fiveinferior", "", "commainferior", "periodinferior", "Yacutesmall", "", "dollarinferior", "", "Thornsmall", "", "nineinferior", "zeroinferior", "Zcaronsmall", "AEsmall", "Oslashsmall", "questiondownsmall", "oneinferior", "Lslashsmall", "", "", "", "", "", "", "Cedillasmall", "", "", "", "", "", "OEsmall", "figuredash", "hyphensuperior", "", "", 
  "", "", "exclamdownsmall", "", "Ydieresissmall", "", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "ninesuperior", "zerosuperior", "", "esuperior", "rsuperior", "tsuperior", "", "", "isuperior", "ssuperior", "dsuperior", "", "", "", "", "", "lsuperior", "Ogoneksmall", "Brevesmall", "Macronsmall", "bsuperior", "nsuperior", "msuperior", "commasuperior", "periodsuperior", "Dotaccentsmall", "Ringsmall"], MacRomanEncoding:["", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", 
  "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", 
  "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", 
  "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", 
  "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron"], StandardEncoding:["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", 
  "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", 
  "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", 
  "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", 
  "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls"], WinAnsiEncoding:["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", 
  "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "bullet", "Euro", "bullet", "quotesinglbase", 
  "florin", "quotedblbase", "ellipsis", "dagger", "daggerdbl", "circumflex", "perthousand", "Scaron", "guilsinglleft", "OE", "bullet", "Zcaron", "bullet", "bullet", "quoteleft", "quoteright", "quotedblleft", "quotedblright", "bullet", "endash", "emdash", "tilde", "trademark", "scaron", "guilsinglright", "oe", "bullet", "zcaron", "Ydieresis", "", "exclamdown", "cent", "sterling", "currency", "yen", "brokenbar", "section", "dieresis", "copyright", "ordfeminine", "guillemotleft", "logicalnot", "hyphen", 
  "registered", "macron", "degree", "plusminus", "twosuperior", "threesuperior", "acute", "mu", "paragraph", "periodcentered", "cedilla", "onesuperior", "ordmasculine", "guillemotright", "onequarter", "onehalf", "threequarters", "questiondown", "Agrave", "Aacute", "Acircumflex", "Atilde", "Adieresis", "Aring", "AE", "Ccedilla", "Egrave", "Eacute", "Ecircumflex", "Edieresis", "Igrave", "Iacute", "Icircumflex", "Idieresis", "Eth", "Ntilde", "Ograve", "Oacute", "Ocircumflex", "Otilde", "Odieresis", 
  "multiply", "Oslash", "Ugrave", "Uacute", "Ucircumflex", "Udieresis", "Yacute", "Thorn", "germandbls", "agrave", "aacute", "acircumflex", "atilde", "adieresis", "aring", "ae", "ccedilla", "egrave", "eacute", "ecircumflex", "edieresis", "igrave", "iacute", "icircumflex", "idieresis", "eth", "ntilde", "ograve", "oacute", "ocircumflex", "otilde", "odieresis", "divide", "oslash", "ugrave", "uacute", "ucircumflex", "udieresis", "yacute", "thorn", "ydieresis"], symbolsEncoding:["", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "universal", "numbersign", "existential", "percent", "ampersand", "suchthat", "parenleft", "parenright", "asteriskmath", "plus", "comma", "minus", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "congruent", "Alpha", "Beta", "Chi", "Delta", "Epsilon", "Phi", "Gamma", 
  "Eta", "Iota", "theta1", "Kappa", "Lambda", "Mu", "Nu", "Omicron", "Pi", "Theta", "Rho", "Sigma", "Tau", "Upsilon", "sigma1", "Omega", "Xi", "Psi", "Zeta", "bracketleft", "therefore", "bracketright", "perpendicular", "underscore", "radicalex", "alpha", "beta", "chi", "delta", "epsilon", "phi", "gamma", "eta", "iota", "phi1", "kappa", "lambda", "mu", "nu", "omicron", "pi", "theta", "rho", "sigma", "tau", "upsilon", "omega1", "omega", "xi", "psi", "zeta", "braceleft", "bar", "braceright", "similar", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Euro", "Upsilon1", "minute", "lessequal", "fraction", "infinity", "florin", "club", "diamond", "heart", "spade", "arrowboth", "arrowleft", "arrowup", "arrowright", "arrowdown", "degree", "plusminus", "second", "greaterequal", "multiply", "proportional", "partialdiff", "bullet", "divide", "notequal", "equivalence", "approxequal", "ellipsis", "arrowvertex", "arrowhorizex", 
  "carriagereturn", "aleph", "Ifraktur", "Rfraktur", "weierstrass", "circlemultiply", "circleplus", "emptyset", "intersection", "union", "propersuperset", "reflexsuperset", "notsubset", "propersubset", "reflexsubset", "element", "notelement", "angle", "gradient", "registerserif", "copyrightserif", "trademarkserif", "product", "radical", "dotmath", "logicalnot", "logicaland", "logicalor", "arrowdblboth", "arrowdblleft", "arrowdblup", "arrowdblright", "arrowdbldown", "lozenge", "angleleft", "registersans", 
  "copyrightsans", "trademarksans", "summation", "parenlefttp", "parenleftex", "parenleftbt", "bracketlefttp", "bracketleftex", "bracketleftbt", "bracelefttp", "braceleftmid", "braceleftbt", "braceex", "", "angleright", "integral", "integraltp", "integralex", "integralbt", "parenrighttp", "parenrightex", "parenrightbt", "bracketrighttp", "bracketrightex", "bracketrightbt", "bracerighttp", "bracerightmid", "bracerightbt"], zapfDingbatsEncoding:["", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "a1", "a2", "a202", "a3", "a4", "a5", "a119", "a118", "a117", "a11", "a12", "a13", "a14", "a15", "a16", "a105", "a17", "a18", "a19", "a20", "a21", "a22", "a23", "a24", "a25", "a26", "a27", "a28", "a6", "a7", "a8", "a9", "a10", "a29", "a30", "a31", "a32", "a33", "a34", "a35", "a36", "a37", "a38", "a39", "a40", "a41", "a42", "a43", "a44", "a45", "a46", "a47", "a48", "a49", "a50", "a51", "a52", "a53", "a54", "a55", "a56", 
  "a57", "a58", "a59", "a60", "a61", "a62", "a63", "a64", "a65", "a66", "a67", "a68", "a69", "a70", "a71", "a72", "a73", "a74", "a203", "a75", "a204", "a76", "a77", "a78", "a79", "a81", "a82", "a83", "a84", "a97", "a98", "a99", "a100", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "a101", "a102", "a103", "a104", "a106", "a107", "a108", "a112", "a111", "a110", "a109", "a120", "a121", "a122", "a123", "a124", "a125", 
  "a126", "a127", "a128", "a129", "a130", "a131", "a132", "a133", "a134", "a135", "a136", "a137", "a138", "a139", "a140", "a141", "a142", "a143", "a144", "a145", "a146", "a147", "a148", "a149", "a150", "a151", "a152", "a153", "a154", "a155", "a156", "a157", "a158", "a159", "a160", "a161", "a163", "a164", "a196", "a165", "a192", "a166", "a167", "a168", "a169", "a170", "a171", "a172", "a173", "a162", "a174", "a175", "a176", "a177", "a178", "a179", "a193", "a180", "a199", "a181", "a200", "a182", "", 
  "a201", "a183", "a184", "a197", "a185", "a194", "a198", "a186", "a195", "a187", "a188", "a189", "a190", "a191"]};
  var stdFontMap = {"ArialNarrow":"Helvetica", "ArialNarrow-Bold":"Helvetica-Bold", "ArialNarrow-BoldItalic":"Helvetica-BoldOblique", "ArialNarrow-Italic":"Helvetica-Oblique", "ArialBlack":"Helvetica", "ArialBlack-Bold":"Helvetica-Bold", "ArialBlack-BoldItalic":"Helvetica-BoldOblique", "ArialBlack-Italic":"Helvetica-Oblique", "Arial":"Helvetica", "Arial-Bold":"Helvetica-Bold", "Arial-BoldItalic":"Helvetica-BoldOblique", "Arial-Italic":"Helvetica-Oblique", "Arial-BoldItalicMT":"Helvetica-BoldOblique", 
  "Arial-BoldMT":"Helvetica-Bold", "Arial-ItalicMT":"Helvetica-Oblique", "ArialMT":"Helvetica", "Courier-Bold":"Courier-Bold", "Courier-BoldItalic":"Courier-BoldOblique", "Courier-Italic":"Courier-Oblique", "CourierNew":"Courier", "CourierNew-Bold":"Courier-Bold", "CourierNew-BoldItalic":"Courier-BoldOblique", "CourierNew-Italic":"Courier-Oblique", "CourierNewPS-BoldItalicMT":"Courier-BoldOblique", "CourierNewPS-BoldMT":"Courier-Bold", "CourierNewPS-ItalicMT":"Courier-Oblique", "CourierNewPSMT":"Courier", 
  "Helvetica-Bold":"Helvetica-Bold", "Helvetica-BoldItalic":"Helvetica-BoldOblique", "Helvetica-Italic":"Helvetica-Oblique", "Symbol-Bold":"Symbol", "Symbol-BoldItalic":"Symbol", "Symbol-Italic":"Symbol", "TimesNewRoman":"Times-Roman", "TimesNewRoman-Bold":"Times-Bold", "TimesNewRoman-BoldItalic":"Times-BoldItalic", "TimesNewRoman-Italic":"Times-Italic", "TimesNewRomanPS":"Times-Roman", "TimesNewRomanPS-Bold":"Times-Bold", "TimesNewRomanPS-BoldItalic":"Times-BoldItalic", "TimesNewRomanPS-BoldItalicMT":"Times-BoldItalic", 
  "TimesNewRomanPS-BoldMT":"Times-Bold", "TimesNewRomanPS-Italic":"Times-Italic", "TimesNewRomanPS-ItalicMT":"Times-Italic", "TimesNewRomanPSMT":"Times-Roman", "TimesNewRomanPSMT-Bold":"Times-Bold", "TimesNewRomanPSMT-BoldItalic":"Times-BoldItalic", "TimesNewRomanPSMT-Italic":"Times-Italic"};
  var nonStdFontMap = {"ComicSansMS":"Comic Sans MS", "ComicSansMS-Bold":"Comic Sans MS-Bold", "ComicSansMS-BoldItalic":"Comic Sans MS-BoldItalic", "ComicSansMS-Italic":"Comic Sans MS-Italic", "LucidaConsole":"Courier", "LucidaConsole-Bold":"Courier-Bold", "LucidaConsole-BoldItalic":"Courier-BoldOblique", "LucidaConsole-Italic":"Courier-Oblique"};
  var serifFonts = {"Adobe Jenson":true, "Adobe Text":true, "Albertus":true, "Aldus":true, "Alexandria":true, "Algerian":true, "American Typewriter":true, "Antiqua":true, "Apex":true, "Arno":true, "Aster":true, "Aurora":true, "Baskerville":true, "Bell":true, "Bembo":true, "Bembo Schoolbook":true, "Benguiat":true, "Berkeley Old Style":true, "Bernhard Modern":true, "Berthold City":true, "Bodoni":true, "Bauer Bodoni":true, "Book Antiqua":true, "Bookman":true, "Bordeaux Roman":true, "Californian FB":true, 
  "Calisto":true, "Calvert":true, "Capitals":true, "Cambria":true, "Cartier":true, "Caslon":true, "Catull":true, "Centaur":true, "Century Old Style":true, "Century Schoolbook":true, "Chaparral":true, "Charis SIL":true, "Cheltenham":true, "Cholla Slab":true, "Clarendon":true, "Clearface":true, "Cochin":true, "Colonna":true, "Computer Modern":true, "Concrete Roman":true, "Constantia":true, "Cooper Black":true, "Corona":true, "Ecotype":true, "Egyptienne":true, "Elephant":true, "Excelsior":true, "Fairfield":true, 
  "FF Scala":true, "Folkard":true, "Footlight":true, "FreeSerif":true, "Friz Quadrata":true, "Garamond":true, "Gentium":true, "Georgia":true, "Gloucester":true, "Goudy Old Style":true, "Goudy Schoolbook":true, "Goudy Pro Font":true, "Granjon":true, "Guardian Egyptian":true, "Heather":true, "Hercules":true, "High Tower Text":true, "Hiroshige":true, "Hoefler Text":true, "Humana Serif":true, "Imprint":true, "Ionic No. 5":true, "Janson":true, "Joanna":true, "Korinna":true, "Lexicon":true, "Liberation Serif":true, 
  "Linux Libertine":true, "Literaturnaya":true, "Lucida":true, "Lucida Bright":true, "Melior":true, "Memphis":true, "Miller":true, "Minion":true, "Modern":true, "Mona Lisa":true, "Mrs Eaves":true, "MS Serif":true, "Museo Slab":true, "New York":true, "Nimbus Roman":true, "NPS Rawlinson Roadway":true, "Palatino":true, "Perpetua":true, "Plantin":true, "Plantin Schoolbook":true, "Playbill":true, "Poor Richard":true, "Rawlinson Roadway":true, "Renault":true, "Requiem":true, "Rockwell":true, "Roman":true, 
  "Rotis Serif":true, "Sabon":true, "Scala":true, "Seagull":true, "Sistina":true, "Souvenir":true, "STIX":true, "Stone Informal":true, "Stone Serif":true, "Sylfaen":true, "Times":true, "Trajan":true, "Trinit\u00e9":true, "Trump Mediaeval":true, "Utopia":true, "Vale Type":true, "Bitstream Vera":true, "Vera Serif":true, "Versailles":true, "Wanted":true, "Weiss":true, "Wide Latin":true, "Windsor":true, "XITS":true};
  var symbolsFonts = {"Dingbats":true, "Symbol":true, "ZapfDingbats":true};
  var FontLoader = {listeningForFontLoad:false, bind:function fontLoaderBind(fonts$$2, callback$$35) {
    function checkFontsLoaded() {
      var i$$76 = 0;
      var ii$$23 = fonts$$2.length;
      for(;i$$76 < ii$$23;i$$76++) {
        var fontObj$$1 = fonts$$2[i$$76];
        if(fontObj$$1.loading) {
          return false
        }
      }
      PdfJS_window.document.documentElement.removeEventListener("pdfjsFontLoad", checkFontsLoaded, false);
      callback$$35();
      return true
    }
    var rules = [];
    var names$$1 = [];
    var fontsToLoad = [];
    var fontCreateTimer = 0;
    var i$$75 = 0;
    var ii$$22 = fonts$$2.length;
    for(;i$$75 < ii$$22;i$$75++) {
      var font$$5 = fonts$$2[i$$75];
      if(font$$5.attached || font$$5.loading == false) {
        continue
      }
      font$$5.attached = true;
      fontsToLoad.push(font$$5);
      var str$$19 = "";
      var data$$56 = font$$5.data;
      if(data$$56) {
        var length$$33 = data$$56.length;
        var j$$25 = 0;
        for(;j$$25 < length$$33;j$$25++) {
          str$$19 += String.fromCharCode(data$$56[j$$25])
        }
        var rule$$4 = font$$5.bindDOM(str$$19);
        if(rule$$4) {
          rules.push(rule$$4);
          names$$1.push(font$$5.loadedName)
        }
      }
    }
    this.listeningForFontLoad = false;
    if(!isWorker && rules.length) {
      FontLoader.prepareFontLoadEvent(rules, names$$1, fontsToLoad)
    }
    if(!checkFontsLoaded()) {
      PdfJS_window.document.documentElement.addEventListener("pdfjsFontLoad", checkFontsLoaded, false)
    }
  }, prepareFontLoadEvent:function fontLoaderPrepareFontLoadEvent(rules$$1, names$$2, fonts$$3) {
    if(!/^\w+$/.test(names$$2.join(""))) {
      error$$3("Invalid font name(s): " + names$$2.join());
      return
    }
    var div = PdfJS_window.document.createElement("div");
    div.setAttribute("style", "visibility: hidden;" + "width: 10px; height: 10px;" + "position: absolute; top: 0px; left: 0px;");
    var html = "";
    var i$$77 = 0;
    var ii$$24 = names$$2.length;
    for(;i$$77 < ii$$24;++i$$77) {
      html += '<span style="font-family:' + names$$2[i$$77] + '">Hi</span>'
    }
    div.innerHTML = html;
    PdfJS_window.document.body.appendChild(div);
    if(!this.listeningForFontLoad) {
      PdfJS_window.window.addEventListener("message", function fontLoaderMessage(e$$23) {
        var fontNames = JSON.parse(e$$23.data);
        var i$$78 = 0;
        var ii$$25 = fonts$$3.length;
        for(;i$$78 < ii$$25;++i$$78) {
          var font$$6 = fonts$$3[i$$78];
          font$$6.loading = false
        }
        var evt$$9 = PdfJS_window.document.createEvent("Events");
        evt$$9.initEvent("pdfjsFontLoad", true, false);
        PdfJS_window.document.documentElement.dispatchEvent(evt$$9)
      }, false);
      this.listeningForFontLoad = true
    }
    var src$$2 = "<!DOCTYPE HTML><html><head>";
    src$$2 += '<style type="text/css">';
    i$$77 = 0;
    ii$$24 = rules$$1.length;
    for(;i$$77 < ii$$24;++i$$77) {
      src$$2 += rules$$1[i$$77]
    }
    src$$2 += "</style>";
    src$$2 += '<script type="application/javascript">';
    var fontNamesArray = "";
    i$$77 = 0;
    ii$$24 = names$$2.length;
    for(;i$$77 < ii$$24;++i$$77) {
      fontNamesArray += '"' + names$$2[i$$77] + '", '
    }
    src$$2 += "  var fontNames=[" + fontNamesArray + "];\n";
    src$$2 += "  PdfJS_window.window.onload = function fontLoaderOnload() {\n";
    src$$2 += '    parent.postMessage(JSON.stringify(fontNames), "*");\n';
    src$$2 += "  }";
    src$$2 += "</scr" + "ipt></head><body>";
    i$$77 = 0;
    ii$$24 = names$$2.length;
    for(;i$$77 < ii$$24;++i$$77) {
      src$$2 += "<p style=\"font-family:'" + names$$2[i$$77] + "'\">Hi</p>"
    }
    src$$2 += "</body></html>";
    var frame = PdfJS_window.document.createElement("iframe");
    frame.src = "data:text/html," + src$$2;
    frame.setAttribute("style", "visibility: hidden;" + "width: 10px; height: 10px;" + "position: absolute; top: 0px; left: 0px;");
    PdfJS_window.document.body.appendChild(frame)
  }};
  var UnicodeRanges = [{"begin":0, "end":127}, {"begin":128, "end":255}, {"begin":256, "end":383}, {"begin":384, "end":591}, {"begin":592, "end":687}, {"begin":688, "end":767}, {"begin":768, "end":879}, {"begin":880, "end":1023}, {"begin":11392, "end":11519}, {"begin":1024, "end":1279}, {"begin":1328, "end":1423}, {"begin":1424, "end":1535}, {"begin":42240, "end":42559}, {"begin":1536, "end":1791}, {"begin":1984, "end":2047}, {"begin":2304, "end":2431}, {"begin":2432, "end":2559}, {"begin":2560, 
  "end":2687}, {"begin":2688, "end":2815}, {"begin":2816, "end":2943}, {"begin":2944, "end":3071}, {"begin":3072, "end":3199}, {"begin":3200, "end":3327}, {"begin":3328, "end":3455}, {"begin":3584, "end":3711}, {"begin":3712, "end":3839}, {"begin":4256, "end":4351}, {"begin":6912, "end":7039}, {"begin":4352, "end":4607}, {"begin":7680, "end":7935}, {"begin":7936, "end":8191}, {"begin":8192, "end":8303}, {"begin":8304, "end":8351}, {"begin":8352, "end":8399}, {"begin":8400, "end":8447}, {"begin":8448, 
  "end":8527}, {"begin":8528, "end":8591}, {"begin":8592, "end":8703}, {"begin":8704, "end":8959}, {"begin":8960, "end":9215}, {"begin":9216, "end":9279}, {"begin":9280, "end":9311}, {"begin":9312, "end":9471}, {"begin":9472, "end":9599}, {"begin":9600, "end":9631}, {"begin":9632, "end":9727}, {"begin":9728, "end":9983}, {"begin":9984, "end":10175}, {"begin":12288, "end":12351}, {"begin":12352, "end":12447}, {"begin":12448, "end":12543}, {"begin":12544, "end":12591}, {"begin":12592, "end":12687}, 
  {"begin":43072, "end":43135}, {"begin":12800, "end":13055}, {"begin":13056, "end":13311}, {"begin":44032, "end":55215}, {"begin":55296, "end":57343}, {"begin":67840, "end":67871}, {"begin":19968, "end":40959}, {"begin":57344, "end":63743}, {"begin":12736, "end":12783}, {"begin":64256, "end":64335}, {"begin":64336, "end":65023}, {"begin":65056, "end":65071}, {"begin":65040, "end":65055}, {"begin":65104, "end":65135}, {"begin":65136, "end":65279}, {"begin":65280, "end":65519}, {"begin":65520, "end":65535}, 
  {"begin":3840, "end":4095}, {"begin":1792, "end":1871}, {"begin":1920, "end":1983}, {"begin":3456, "end":3583}, {"begin":4096, "end":4255}, {"begin":4608, "end":4991}, {"begin":5024, "end":5119}, {"begin":5120, "end":5759}, {"begin":5760, "end":5791}, {"begin":5792, "end":5887}, {"begin":6016, "end":6143}, {"begin":6144, "end":6319}, {"begin":10240, "end":10495}, {"begin":40960, "end":42127}, {"begin":5888, "end":5919}, {"begin":66304, "end":66351}, {"begin":66352, "end":66383}, {"begin":66560, 
  "end":66639}, {"begin":118784, "end":119039}, {"begin":119808, "end":120831}, {"begin":1044480, "end":1048573}, {"begin":65024, "end":65039}, {"begin":917504, "end":917631}, {"begin":6400, "end":6479}, {"begin":6480, "end":6527}, {"begin":6528, "end":6623}, {"begin":6656, "end":6687}, {"begin":11264, "end":11359}, {"begin":11568, "end":11647}, {"begin":19904, "end":19967}, {"begin":43008, "end":43055}, {"begin":65536, "end":65663}, {"begin":65856, "end":65935}, {"begin":66432, "end":66463}, {"begin":66464, 
  "end":66527}, {"begin":66640, "end":66687}, {"begin":66688, "end":66735}, {"begin":67584, "end":67647}, {"begin":68096, "end":68191}, {"begin":119552, "end":119647}, {"begin":73728, "end":74751}, {"begin":119648, "end":119679}, {"begin":7040, "end":7103}, {"begin":7168, "end":7247}, {"begin":7248, "end":7295}, {"begin":43136, "end":43231}, {"begin":43264, "end":43311}, {"begin":43312, "end":43359}, {"begin":43520, "end":43615}, {"begin":65936, "end":65999}, {"begin":66E3, "end":66047}, {"begin":66208, 
  "end":66271}, {"begin":127024, "end":127135}];
  var MacStandardGlyphOrdering = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", 
  "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", 
  "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", 
  "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", 
  "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", 
  "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];
  var Font = function FontClosure() {
    function Font$$1(name$$56, file$$1, properties$$7) {
      this.name = name$$56;
      this.coded = properties$$7.coded;
      this.charProcOperatorList = properties$$7.charProcOperatorList;
      this.sizes = [];
      var names$$3 = name$$56.split("+");
      names$$3 = names$$3.length > 1 ? names$$3[1] : names$$3[0];
      names$$3 = names$$3.split(/[-,_]/g)[0];
      this.isSerifFont = !!(properties$$7.flags & FontFlags.Serif);
      this.isSymbolicFont = !!(properties$$7.flags & FontFlags.Symbolic);
      var type$$38 = properties$$7.type;
      this.type = type$$38;
      if(properties$$7.ignore) {
        this.loadedName = this.isSerifFont ? "serif" : "sans-serif";
        this.loading = false;
        return
      }
      this.differences = properties$$7.differences;
      this.widths = properties$$7.widths;
      this.defaultWidth = properties$$7.defaultWidth;
      this.composite = properties$$7.composite;
      this.wideChars = properties$$7.wideChars;
      this.hasEncoding = properties$$7.hasEncoding;
      this.fontMatrix = properties$$7.fontMatrix;
      this.widthMultiplier = 1;
      if(properties$$7.type == "Type3") {
        this.encoding = properties$$7.baseEncoding;
        return
      }
      this.loadCidToUnicode(properties$$7);
      if(properties$$7.toUnicode) {
        this.toUnicode = properties$$7.toUnicode
      }else {
        this.rebuildToUnicode(properties$$7)
      }
      this.toFontChar = this.buildToFontChar(this.toUnicode);
      if(!file$$1) {
        var fontName$$2 = name$$56.replace(/[,_]/g, "-");
        fontName$$2 = stdFontMap[fontName$$2] || nonStdFontMap[fontName$$2] || fontName$$2;
        this.bold = fontName$$2.search(/bold/gi) != -1;
        this.italic = fontName$$2.search(/oblique/gi) != -1 || fontName$$2.search(/italic/gi) != -1;
        this.black = name$$56.search(/Black/g) != -1;
        this.encoding = properties$$7.baseEncoding;
        this.noUnicodeAdaptation = true;
        this.loadedName = fontName$$2.split("-")[0];
        this.loading = false;
        return
      }
      var data$$57;
      switch(type$$38) {
        case "Type1":
        ;
        case "CIDFontType0":
          this.mimetype = "font/opentype";
          var subtype$$3 = properties$$7.subtype;
          var cff = subtype$$3 == "Type1C" || subtype$$3 == "CIDFontType0C" ? new CFFFont(file$$1, properties$$7) : new Type1Font(name$$56, file$$1, properties$$7);
          data$$57 = this.convert(name$$56, cff, properties$$7);
          break;
        case "TrueType":
        ;
        case "CIDFontType2":
          this.mimetype = "font/opentype";
          data$$57 = this.checkAndRepair(name$$56, file$$1, properties$$7);
          break;
        default:
          warn("Font " + properties$$7.type + " is not supported")
      }
      this.data = data$$57;
      this.fontMatrix = properties$$7.fontMatrix;
      this.widthMultiplier = !properties$$7.fontMatrix ? 1 : 1 / properties$$7.fontMatrix[0];
      this.encoding = properties$$7.baseEncoding;
      this.loadedName = properties$$7.loadedName;
      this.loading = true
    }
    function stringToArray(str$$20) {
      var array$$10 = [];
      var i$$79 = 0;
      var ii$$26 = str$$20.length;
      for(;i$$79 < ii$$26;++i$$79) {
        array$$10[i$$79] = str$$20.charCodeAt(i$$79)
      }
      return array$$10
    }
    function arrayToString(arr$$12) {
      var str$$21 = "";
      var i$$80 = 0;
      var ii$$27 = arr$$12.length;
      for(;i$$80 < ii$$27;++i$$80) {
        str$$21 += String.fromCharCode(arr$$12[i$$80])
      }
      return str$$21
    }
    function int16(bytes$$3) {
      return(bytes$$3[0] << 8) + (bytes$$3[1] & 255)
    }
    function int32(bytes$$4) {
      return(bytes$$4[0] << 24) + (bytes$$4[1] << 16) + (bytes$$4[2] << 8) + (bytes$$4[3] & 255)
    }
    function getMaxPower2(number$$1) {
      var maxPower = 0;
      var value$$45 = number$$1;
      for(;value$$45 >= 2;) {
        value$$45 /= 2;
        maxPower++
      }
      value$$45 = 2;
      var i$$81 = 1;
      for(;i$$81 < maxPower;i$$81++) {
        value$$45 *= 2
      }
      return value$$45
    }
    function string16(value$$46) {
      return String.fromCharCode(value$$46 >> 8 & 255) + String.fromCharCode(value$$46 & 255)
    }
    function safeString16(value$$47) {
      value$$47 = value$$47 > 32767 ? 32767 : value$$47 < -32768 ? -32768 : value$$47;
      return String.fromCharCode(value$$47 >> 8 & 255) + String.fromCharCode(value$$47 & 255)
    }
    function string32(value$$48) {
      return String.fromCharCode(value$$48 >> 24 & 255) + String.fromCharCode(value$$48 >> 16 & 255) + String.fromCharCode(value$$48 >> 8 & 255) + String.fromCharCode(value$$48 & 255)
    }
    function createOpenTypeHeader(sfnt, file$$2, numTables) {
      if(sfnt == "true") {
        sfnt = string32(65536)
      }
      var header$$2 = sfnt;
      header$$2 += string16(numTables);
      var tablesMaxPower2 = getMaxPower2(numTables);
      var searchRange = tablesMaxPower2 * 16;
      header$$2 += string16(searchRange);
      header$$2 += string16(Math.log(tablesMaxPower2) / Math.log(2));
      header$$2 += string16(numTables * 16 - searchRange);
      file$$2.file += header$$2;
      file$$2.virtualOffset += header$$2.length
    }
    function createTableEntry(file$$3, tag$$4, data$$58) {
      var offset$$17 = file$$3.virtualOffset;
      var length$$34 = data$$58.length;
      for(;data$$58.length & 3;) {
        data$$58.push(0)
      }
      for(;file$$3.virtualOffset & 3;) {
        file$$3.virtualOffset++
      }
      var checksum = 0;
      var n$$26 = data$$58.length;
      var i$$82 = 0;
      for(;i$$82 < n$$26;i$$82 += 4) {
        checksum = checksum + int32([data$$58[i$$82], data$$58[i$$82 + 1], data$$58[i$$82 + 2], data$$58[i$$82 + 3]]) | 0
      }
      var tableEntry = tag$$4 + string32(checksum) + string32(offset$$17) + string32(length$$34);
      file$$3.file += tableEntry;
      file$$3.virtualOffset += data$$58.length
    }
    function getRanges(glyphs$$1) {
      var codes = [];
      var length$$35 = glyphs$$1.length;
      var n$$27 = 0;
      for(;n$$27 < length$$35;++n$$27) {
        codes.push({unicode:glyphs$$1[n$$27].unicode, code:n$$27})
      }
      codes.sort(function fontGetRangesSort(a$$12, b$$17) {
        return a$$12.unicode - b$$17.unicode
      });
      var ranges = [];
      n$$27 = 0;
      for(;n$$27 < length$$35;) {
        var start$$7 = codes[n$$27].unicode;
        var codeIndices = [codes[n$$27].code];
        ++n$$27;
        var end$$3 = start$$7;
        for(;n$$27 < length$$35 && end$$3 + 1 == codes[n$$27].unicode;) {
          codeIndices.push(codes[n$$27].code);
          ++end$$3;
          ++n$$27
        }
        ranges.push([start$$7, end$$3, codeIndices])
      }
      return ranges
    }
    function createCMapTable(glyphs$$2, deltas) {
      var ranges$$1 = getRanges(glyphs$$2);
      var numTables$$1 = 1;
      var cmap$$1 = "\x00\x00" + string16(numTables$$1) + "\x00\u0003" + "\x00\u0001" + string32(4 + numTables$$1 * 8);
      var segCount = ranges$$1.length + 1;
      var segCount2 = segCount * 2;
      var searchRange$$1 = getMaxPower2(segCount) * 2;
      var searchEntry = Math.log(segCount) / Math.log(2);
      var rangeShift = 2 * segCount - searchRange$$1;
      var startCount = "";
      var endCount = "";
      var idDeltas = "";
      var idRangeOffsets = "";
      var glyphsIds = "";
      var bias = 0;
      if(deltas) {
        var i$$83 = 0;
        for(;i$$83 < segCount - 1;i$$83++) {
          var range$$14 = ranges$$1[i$$83];
          var start$$8 = range$$14[0];
          var end$$4 = range$$14[1];
          var offset$$18 = (segCount - i$$83) * 2 + bias * 2;
          bias += end$$4 - start$$8 + 1;
          startCount += string16(start$$8);
          endCount += string16(end$$4);
          idDeltas += string16(0);
          idRangeOffsets += string16(offset$$18);
          var codes$$1 = range$$14[2];
          var j$$26 = 0;
          var jj$$5 = codes$$1.length;
          for(;j$$26 < jj$$5;++j$$26) {
            glyphsIds += string16(deltas[codes$$1[j$$26]])
          }
        }
      }else {
        i$$83 = 0;
        for(;i$$83 < segCount - 1;i$$83++) {
          range$$14 = ranges$$1[i$$83];
          start$$8 = range$$14[0];
          end$$4 = range$$14[1];
          var startCode = range$$14[2][0];
          startCount += string16(start$$8);
          endCount += string16(end$$4);
          idDeltas += string16(startCode - start$$8 + 1 & 65535);
          idRangeOffsets += string16(0)
        }
      }
      endCount += "\u00ff\u00ff";
      startCount += "\u00ff\u00ff";
      idDeltas += "\x00\u0001";
      idRangeOffsets += "\x00\x00";
      var format314 = "\x00\x00" + string16(segCount2) + string16(searchRange$$1) + string16(searchEntry) + string16(rangeShift) + endCount + "\x00\x00" + startCount + idDeltas + idRangeOffsets + glyphsIds;
      return stringToArray(cmap$$1 + "\x00\u0004" + string16(format314.length + 4) + format314)
    }
    function createOS2Table(properties$$8, charstrings, override) {
      override = override || {unitsPerEm:0, yMax:0, yMin:0, ascent:0, descent:0};
      var ulUnicodeRange1 = 0;
      var ulUnicodeRange2 = 0;
      var ulUnicodeRange3 = 0;
      var ulUnicodeRange4 = 0;
      var firstCharIndex = null;
      var lastCharIndex = 0;
      if(charstrings) {
        var i$$84 = 0;
        for(;i$$84 < charstrings.length;++i$$84) {
          var code$$9 = charstrings[i$$84].unicode;
          if(firstCharIndex > code$$9 || !firstCharIndex) {
            firstCharIndex = code$$9
          }
          if(lastCharIndex < code$$9) {
            lastCharIndex = code$$9
          }
          var position$$1;
          JSCompiler_inline_label_getUnicodeRangeFor_89: {
            var i$$inline_86 = 0;
            var ii$$inline_87 = UnicodeRanges.length;
            for(;i$$inline_86 < ii$$inline_87;i$$inline_86++) {
              var range$$inline_88 = UnicodeRanges[i$$inline_86];
              if(code$$9 >= range$$inline_88.begin && code$$9 < range$$inline_88.end) {
                position$$1 = i$$inline_86;
                break JSCompiler_inline_label_getUnicodeRangeFor_89
              }
            }
            position$$1 = -1
          }
          if(position$$1 < 32) {
            ulUnicodeRange1 |= 1 << position$$1
          }else {
            if(position$$1 < 64) {
              ulUnicodeRange2 |= 1 << position$$1 - 32
            }else {
              if(position$$1 < 96) {
                ulUnicodeRange3 |= 1 << position$$1 - 64
              }else {
                if(position$$1 < 123) {
                  ulUnicodeRange4 |= 1 << position$$1 - 96
                }else {
                  error$$3("Unicode ranges Bits > 123 are reserved for internal usage")
                }
              }
            }
          }
        }
      }else {
        firstCharIndex = 0;
        lastCharIndex = 255
      }
      var unitsPerEm = override.unitsPerEm || kPDFGlyphSpaceUnits;
      var typoAscent = override.ascent || properties$$8.ascent;
      var typoDescent = override.descent || properties$$8.descent;
      var winAscent = override.yMax || typoAscent;
      var winDescent = -override.yMin || -typoDescent;
      if(unitsPerEm != kPDFGlyphSpaceUnits && "undefined" == typeof override.ascent) {
        typoAscent = Math.round(typoAscent * unitsPerEm / kPDFGlyphSpaceUnits);
        typoDescent = Math.round(typoDescent * unitsPerEm / kPDFGlyphSpaceUnits);
        winAscent = typoAscent;
        winDescent = -typoDescent
      }
      return"\x00\u0003" + "\u0002$" + "\u0001\u00f4" + "\x00\u0005" + "\x00\x00" + "\u0002\u008a" + "\u0002\u00bb" + "\x00\x00" + "\x00\u008c" + "\u0002\u008a" + "\u0002\u00bb" + "\x00\x00" + "\u0001\u00df" + "\x001" + "\u0001\u0002" + "\x00\x00" + "\x00\x00\u0006" + String.fromCharCode(properties$$8.fixedPitch ? 9 : 0) + "\x00\x00\x00\x00\x00\x00" + string32(ulUnicodeRange1) + string32(ulUnicodeRange2) + string32(ulUnicodeRange3) + string32(ulUnicodeRange4) + "*21*" + string16(properties$$8.italicAngle ? 
      1 : 0) + string16(firstCharIndex || properties$$8.firstChar) + string16(lastCharIndex || properties$$8.lastChar) + string16(typoAscent) + string16(typoDescent) + "\x00d" + string16(winAscent) + string16(winDescent) + "\x00\x00\x00\x00" + "\x00\x00\x00\x00" + string16(properties$$8.xHeight) + string16(properties$$8.capHeight) + string16(0) + string16(firstCharIndex || properties$$8.firstChar) + "\x00\u0003"
    }
    function createPostTable(properties$$9) {
      var angle$$2 = Math.floor(properties$$9.italicAngle * Math.pow(2, 16));
      return"\x00\u0003\x00\x00" + string32(angle$$2) + "\x00\x00" + "\x00\x00" + string32(properties$$9.fixedPitch) + "\x00\x00\x00\x00" + "\x00\x00\x00\x00" + "\x00\x00\x00\x00" + "\x00\x00\x00\x00"
    }
    function createNameTable(name$$57) {
      var strings = ["Original licence", name$$57, "Unknown", "uniqueID", name$$57, "Version 0.11", "", "Unknown", "Unknown", "Unknown"];
      var stringsUnicode = [];
      var i$$85 = 0;
      var ii$$28 = strings.length;
      for(;i$$85 < ii$$28;i$$85++) {
        var str$$22 = strings[i$$85];
        var strUnicode = "";
        var j$$27 = 0;
        var jj$$6 = str$$22.length;
        for(;j$$27 < jj$$6;j$$27++) {
          strUnicode += string16(str$$22.charCodeAt(j$$27))
        }
        stringsUnicode.push(strUnicode)
      }
      var names$$4 = [strings, stringsUnicode];
      var platforms = ["\x00\u0001", "\x00\u0003"];
      var encodings = ["\x00\x00", "\x00\u0001"];
      var languages = ["\x00\x00", "\u0004\t"];
      var namesRecordCount = strings.length * platforms.length;
      var nameTable = "\x00\x00" + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);
      var strOffset = 0;
      i$$85 = 0;
      ii$$28 = platforms.length;
      for(;i$$85 < ii$$28;i$$85++) {
        var strs = names$$4[i$$85];
        j$$27 = 0;
        jj$$6 = strs.length;
        for(;j$$27 < jj$$6;j$$27++) {
          str$$22 = strs[j$$27];
          var nameRecord = platforms[i$$85] + encodings[i$$85] + languages[i$$85] + string16(j$$27) + string16(str$$22.length) + string16(strOffset);
          nameTable += nameRecord;
          strOffset += str$$22.length
        }
      }
      nameTable += strings.join("") + stringsUnicode.join("");
      return nameTable
    }
    var numFonts = 0;
    Font$$1.prototype = {name:null, font:null, mimetype:null, encoding:null, checkAndRepair:function Font_checkAndRepair(name$$58, font$$7, properties$$10) {
      function readTableEntry(file$$4) {
        var tag$$5 = file$$4.getBytes(4);
        tag$$5 = String.fromCharCode(tag$$5[0]) + String.fromCharCode(tag$$5[1]) + String.fromCharCode(tag$$5[2]) + String.fromCharCode(tag$$5[3]);
        var checksum$$1 = int32(file$$4.getBytes(4));
        var offset$$19 = int32(file$$4.getBytes(4));
        var length$$36 = int32(file$$4.getBytes(4));
        var previousPosition = file$$4.pos;
        file$$4.pos = file$$4.start ? file$$4.start : 0;
        file$$4.skip(offset$$19);
        var data$$60 = file$$4.getBytes(length$$36);
        file$$4.pos = previousPosition;
        if(tag$$5 == "head") {
          data$$60[8] = data$$60[9] = data$$60[10] = data$$60[11] = 0;
          data$$60[17] |= 32
        }
        return{tag:tag$$5, checksum:checksum$$1, length:length$$36, offset:offset$$19, data:data$$60}
      }
      function createGlyphNameMap(glyphs$$4, ids$$1, properties$$11) {
        var glyphNames$$1 = properties$$11.glyphNames;
        if(!glyphNames$$1) {
          properties$$11.glyphNameMap = {};
          return
        }
        var glyphsLength$$1 = glyphs$$4.length;
        var glyphNameMap = {};
        var encoding$$3 = [];
        var i$$87 = 0;
        for(;i$$87 < glyphsLength$$1;++i$$87) {
          var glyphName$$1 = glyphNames$$1[ids$$1[i$$87]];
          if(!glyphName$$1) {
            continue
          }
          var unicode$$2 = glyphs$$4[i$$87].unicode;
          glyphNameMap[glyphName$$1] = unicode$$2;
          var code$$11 = glyphs$$4[i$$87].code;
          encoding$$3[code$$11] = glyphName$$1
        }
        properties$$11.glyphNameMap = glyphNameMap;
        if(!properties$$11.hasEncoding) {
          properties$$11.baseEncoding = encoding$$3
        }
      }
      function readCMapTable(cmap$$3, font$$8) {
        var start$$9 = (font$$8.start ? font$$8.start : 0) + cmap$$3.offset;
        font$$8.pos = start$$9;
        var version$$6 = int16(font$$8.getBytes(2));
        var numRecords = int16(font$$8.getBytes(2));
        var records = [];
        var i$$88 = 0;
        for(;i$$88 < numRecords;i$$88++) {
          records.push({platformID:int16(font$$8.getBytes(2)), encodingID:int16(font$$8.getBytes(2)), offset:int32(font$$8.getBytes(4))})
        }
        records.sort(function fontReadCMapTableSort(a$$13, b$$18) {
          return(a$$13.platformID << 16) + a$$13.encodingID - ((b$$18.platformID << 16) + b$$18.encodingID)
        });
        var tables$$1 = [records[0]];
        i$$88 = 1;
        for(;i$$88 < numRecords;i$$88++) {
          var current$$5 = records[i$$88];
          var previous = records[i$$88 - 1];
          if((current$$5.platformID << 16) + current$$5.encodingID <= (previous.platformID << 16) + previous.encodingID) {
            continue
          }
          tables$$1.push(current$$5)
        }
        var missing = numRecords - tables$$1.length;
        if(missing) {
          numRecords = tables$$1.length;
          var data$$61 = string16(version$$6) + string16(numRecords);
          i$$88 = 0;
          for(;i$$88 < numRecords;i$$88++) {
            var table$$1 = tables$$1[i$$88];
            data$$61 += string16(table$$1.platformID) + string16(table$$1.encodingID) + string32(table$$1.offset)
          }
          i$$88 = 0;
          var ii$$30 = data$$61.length;
          for(;i$$88 < ii$$30;i$$88++) {
            cmap$$3.data[i$$88] = data$$61.charCodeAt(i$$88)
          }
        }
        i$$88 = 0;
        for(;i$$88 < numRecords;i$$88++) {
          table$$1 = tables$$1[i$$88];
          font$$8.pos = start$$9 + table$$1.offset;
          var format$$7 = int16(font$$8.getBytes(2));
          var length$$37 = int16(font$$8.getBytes(2));
          var language = int16(font$$8.getBytes(2));
          if(format$$7 == 0) {
            var glyphs$$5 = [];
            var ids$$2 = [];
            var j$$29 = 0;
            for(;j$$29 < 256;j$$29++) {
              var index$$46 = font$$8.getByte();
              if(index$$46) {
                glyphs$$5.push({unicode:j$$29, code:j$$29});
                ids$$2.push(index$$46)
              }
            }
            return{glyphs:glyphs$$5, ids:ids$$2, hasShortCmap:true}
          }else {
            if(format$$7 == 4) {
              var segCount$$1 = int16(font$$8.getBytes(2)) >> 1;
              font$$8.getBytes(6);
              var segIndex;
              var segments = [];
              segIndex = 0;
              for(;segIndex < segCount$$1;segIndex++) {
                segments.push({end:int16(font$$8.getBytes(2))})
              }
              font$$8.getBytes(2);
              segIndex = 0;
              for(;segIndex < segCount$$1;segIndex++) {
                segments[segIndex].start = int16(font$$8.getBytes(2))
              }
              segIndex = 0;
              for(;segIndex < segCount$$1;segIndex++) {
                segments[segIndex].delta = int16(font$$8.getBytes(2))
              }
              var offsetsCount = 0;
              segIndex = 0;
              for(;segIndex < segCount$$1;segIndex++) {
                var segment = segments[segIndex];
                var rangeOffset = int16(font$$8.getBytes(2));
                if(!rangeOffset) {
                  segment.offsetIndex = -1;
                  continue
                }
                var offsetIndex = (rangeOffset >> 1) - (segCount$$1 - segIndex);
                segment.offsetIndex = offsetIndex;
                offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1)
              }
              var offsets = [];
              j$$29 = 0;
              for(;j$$29 < offsetsCount;j$$29++) {
                offsets.push(int16(font$$8.getBytes(2)))
              }
              glyphs$$5 = [];
              ids$$2 = [];
              segIndex = 0;
              for(;segIndex < segCount$$1;segIndex++) {
                segment = segments[segIndex];
                start$$9 = segment.start;
                var end$$5 = segment.end;
                var delta$$1 = segment.delta;
                offsetIndex = segment.offsetIndex;
                j$$29 = start$$9;
                for(;j$$29 <= end$$5;j$$29++) {
                  if(j$$29 == 65535) {
                    continue
                  }
                  var glyphCode = offsetIndex < 0 ? j$$29 : offsets[offsetIndex + j$$29 - start$$9];
                  glyphCode = glyphCode + delta$$1 & 65535;
                  if(glyphCode == 0) {
                    continue
                  }
                  glyphs$$5.push({unicode:j$$29, code:j$$29});
                  ids$$2.push(glyphCode)
                }
              }
              return{glyphs:glyphs$$5, ids:ids$$2}
            }else {
              if(format$$7 == 6) {
                var firstCode = int16(font$$8.getBytes(2));
                var entryCount = int16(font$$8.getBytes(2));
                glyphs$$5 = [];
                ids$$2 = [];
                j$$29 = 0;
                for(;j$$29 < entryCount;j$$29++) {
                  glyphCode = int16(font$$8.getBytes(2));
                  var code$$12 = firstCode + j$$29;
                  glyphs$$5.push({unicode:code$$12, code:code$$12});
                  ids$$2.push(glyphCode)
                }
                return{glyphs:glyphs$$5, ids:ids$$2}
              }
            }
          }
        }
        error$$3("Unsupported cmap table format")
      }
      function sanitizeMetrics(font$$9, header$$4, metrics$$2, numGlyphs$$1) {
        if(!header$$4 && !metrics$$2) {
          return
        }
        if(!header$$4 && metrics$$2) {
          metrics$$2.data = null;
          return
        }
        font$$9.pos = (font$$9.start ? font$$9.start : 0) + header$$4.offset;
        font$$9.pos += header$$4.length - 2;
        var numOfMetrics = int16(font$$9.getBytes(2));
        var numOfSidebearings = numGlyphs$$1 - numOfMetrics;
        var numMissing = numOfSidebearings - (hmtx.length - numOfMetrics * 4 >> 1);
        if(numMissing > 0) {
          font$$9.pos = (font$$9.start ? font$$9.start : 0) + metrics$$2.offset;
          var entries$$1 = "";
          var i$$89 = 0;
          var ii$$31 = hmtx.length;
          for(;i$$89 < ii$$31;i$$89++) {
            entries$$1 += String.fromCharCode(font$$9.getByte())
          }
          i$$89 = 0;
          for(;i$$89 < numMissing;i$$89++) {
            entries$$1 += "\x00\x00"
          }
          metrics$$2.data = stringToArray(entries$$1)
        }
      }
      function sanitizeGlyph(source$$2, sourceStart, sourceEnd, dest$$3, destStart) {
        if(sourceEnd - sourceStart <= 12) {
          return 0
        }
        var glyf$$1 = source$$2.subarray(sourceStart, sourceEnd);
        var contoursCount = glyf$$1[0] << 8 | glyf$$1[1];
        if(contoursCount & 32768) {
          dest$$3.set(glyf$$1, destStart);
          return glyf$$1.length
        }
        var j$$30 = 10;
        var flagsCount = 0;
        var i$$90 = 0;
        for(;i$$90 < contoursCount;i$$90++) {
          var endPoint = glyf$$1[j$$30] << 8 | glyf$$1[j$$30 + 1];
          flagsCount = endPoint + 1;
          j$$30 += 2
        }
        var instructionsLength = glyf$$1[j$$30] << 8 | glyf$$1[j$$30 + 1];
        j$$30 += 2 + instructionsLength;
        var coordinatesLength = 0;
        i$$90 = 0;
        for(;i$$90 < flagsCount;i$$90++) {
          var flag$$1 = glyf$$1[j$$30++];
          if(flag$$1 & 192) {
            return 0
          }
          var xyLength = (flag$$1 & 2 ? 1 : flag$$1 & 16 ? 0 : 2) + (flag$$1 & 4 ? 1 : flag$$1 & 32 ? 0 : 2);
          coordinatesLength += xyLength;
          if(flag$$1 & 8) {
            var repeat = glyf$$1[j$$30++];
            i$$90 += repeat;
            coordinatesLength += repeat * xyLength
          }
        }
        var glyphDataLength = j$$30 + coordinatesLength;
        if(glyphDataLength > glyf$$1.length) {
          return 0
        }
        if(glyf$$1.length - glyphDataLength > 3) {
          glyphDataLength = glyphDataLength + 3 & ~3;
          dest$$3.set(glyf$$1.subarray(0, glyphDataLength), destStart);
          return glyphDataLength
        }
        dest$$3.set(glyf$$1, destStart);
        return glyf$$1.length
      }
      function sanitizeGlyphLocations(loca$$1, glyf$$2, numGlyphs$$2, isGlyphLocationsLong$$1) {
        var itemSize;
        var itemDecode;
        var itemEncode;
        if(isGlyphLocationsLong$$1) {
          itemSize = 4;
          itemDecode = function fontItemDecodeLong(data$$62, offset$$20) {
            return data$$62[offset$$20] << 24 | data$$62[offset$$20 + 1] << 16 | data$$62[offset$$20 + 2] << 8 | data$$62[offset$$20 + 3]
          };
          itemEncode = function fontItemEncodeLong(data$$63, offset$$21, value$$49) {
            data$$63[offset$$21] = value$$49 >>> 24 & 255;
            data$$63[offset$$21 + 1] = value$$49 >> 16 & 255;
            data$$63[offset$$21 + 2] = value$$49 >> 8 & 255;
            data$$63[offset$$21 + 3] = value$$49 & 255
          }
        }else {
          itemSize = 2;
          itemDecode = function fontItemDecode(data$$64, offset$$22) {
            return data$$64[offset$$22] << 9 | data$$64[offset$$22 + 1] << 1
          };
          itemEncode = function fontItemEncode(data$$65, offset$$23, value$$50) {
            data$$65[offset$$23] = value$$50 >> 9 & 255;
            data$$65[offset$$23 + 1] = value$$50 >> 1 & 255
          }
        }
        var locaData = loca$$1.data;
        var oldGlyfData = glyf$$2.data;
        var oldGlyfDataLength = oldGlyfData.length;
        var newGlyfData = new Uint8Array(oldGlyfDataLength);
        var startOffset = itemDecode(locaData, 0);
        var writeOffset = 0;
        itemEncode(locaData, 0, writeOffset);
        var i$$91 = 0;
        var j$$31 = itemSize;
        for(;i$$91 < numGlyphs$$2;i$$91++, j$$31 += itemSize) {
          var endOffset = itemDecode(locaData, j$$31);
          if(endOffset > oldGlyfDataLength) {
            itemEncode(locaData, j$$31, writeOffset);
            startOffset = endOffset;
            continue
          }
          var newLength = sanitizeGlyph(oldGlyfData, startOffset, endOffset, newGlyfData, writeOffset);
          writeOffset += newLength;
          itemEncode(locaData, j$$31, writeOffset);
          startOffset = endOffset
        }
        if(writeOffset == 0) {
          var simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);
          i$$91 = 0;
          j$$31 = itemSize;
          for(;i$$91 < numGlyphs$$2;i$$91++, j$$31 += itemSize) {
            itemEncode(locaData, j$$31, simpleGlyph.length)
          }
          glyf$$2.data = simpleGlyph;
          return
        }
        glyf$$2.data = newGlyfData.subarray(0, writeOffset)
      }
      function findEmptyGlyphs(locaTable, isGlyphLocationsLong$$2, emptyGlyphIds$$1) {
        var itemSize$$1;
        var itemDecode$$1;
        if(isGlyphLocationsLong$$2) {
          itemSize$$1 = 4;
          itemDecode$$1 = function fontItemDecodeLong$$1(data$$67, offset$$25) {
            return data$$67[offset$$25] << 24 | data$$67[offset$$25 + 1] << 16 | data$$67[offset$$25 + 2] << 8 | data$$67[offset$$25 + 3]
          }
        }else {
          itemSize$$1 = 2;
          itemDecode$$1 = function fontItemDecode$$1(data$$68, offset$$26) {
            return data$$68[offset$$26] << 9 | data$$68[offset$$26 + 1] << 1
          }
        }
        var data$$66 = locaTable.data;
        var length$$38 = data$$66.length;
        var lastOffset = itemDecode$$1(data$$66, 0);
        var i$$92 = itemSize$$1;
        var j$$32 = 0;
        for(;i$$92 < length$$38;i$$92 += itemSize$$1, j$$32++) {
          var offset$$24 = itemDecode$$1(data$$66, i$$92);
          if(offset$$24 == lastOffset) {
            emptyGlyphIds$$1[j$$32] = true
          }
          lastOffset = offset$$24
        }
      }
      function readGlyphNameMap(post$$1, properties$$12) {
        var start$$10 = (font$$7.start ? font$$7.start : 0) + post$$1.offset;
        font$$7.pos = start$$10;
        var length$$39 = post$$1.length;
        var end$$6 = start$$10 + length$$39;
        var version$$7 = int32(font$$7.getBytes(4));
        font$$7.getBytes(28);
        var glyphNames$$2;
        switch(version$$7) {
          case 65536:
            glyphNames$$2 = MacStandardGlyphOrdering;
            break;
          case 131072:
            var numGlyphs$$3 = int16(font$$7.getBytes(2));
            var glyphNameIndexes = [];
            var i$$93 = 0;
            for(;i$$93 < numGlyphs$$3;++i$$93) {
              glyphNameIndexes.push(int16(font$$7.getBytes(2)))
            }
            var customNames = [];
            for(;font$$7.pos < end$$6;) {
              var stringLength = font$$7.getByte();
              var string = "";
              i$$93 = 0;
              for(;i$$93 < stringLength;++i$$93) {
                string += font$$7.getChar()
              }
              customNames.push(string)
            }
            glyphNames$$2 = [];
            i$$93 = 0;
            for(;i$$93 < numGlyphs$$3;++i$$93) {
              var j$$33 = glyphNameIndexes[i$$93];
              if(j$$33 < 258) {
                glyphNames$$2.push(MacStandardGlyphOrdering[j$$33]);
                continue
              }
              glyphNames$$2.push(customNames[j$$33 - 258])
            }
            break;
          case 196608:
            break;
          default:
            warn("Unknown/unsupported post table version " + version$$7)
        }
        properties$$12.glyphNames = glyphNames$$2
      }
      function isOS2Valid(os2Table) {
        var data$$69 = os2Table.data;
        var usWinAscent = data$$69[74] << 8 | data$$69[75];
        if(usWinAscent == 0) {
          return false
        }
        return true
      }
      var requiredTables = ["OS/2", "cmap", "head", "hhea", "hmtx", "maxp", "name", "post"];
      var JSCompiler_object_inline_version_275 = arrayToString(font$$7.getBytes(4));
      var JSCompiler_object_inline_numTables_276 = int16(font$$7.getBytes(2));
      var JSCompiler_object_inline_searchRange_277 = int16(font$$7.getBytes(2));
      var JSCompiler_object_inline_entrySelector_278 = int16(font$$7.getBytes(2));
      var JSCompiler_object_inline_rangeShift_279 = int16(font$$7.getBytes(2));
      var numTables$$2 = JSCompiler_object_inline_numTables_276;
      var cmap$$2;
      var post;
      var maxp;
      var hhea;
      var hmtx;
      var vhea;
      var vmtx;
      var head;
      var loca;
      var glyf;
      var os2;
      var tables = [];
      var i$$86 = 0;
      for(;i$$86 < numTables$$2;i$$86++) {
        var table = readTableEntry(font$$7);
        var index$$45 = requiredTables.indexOf(table.tag);
        if(index$$45 != -1) {
          if(table.tag == "cmap") {
            cmap$$2 = table
          }else {
            if(table.tag == "post") {
              post = table
            }else {
              if(table.tag == "maxp") {
                maxp = table
              }else {
                if(table.tag == "hhea") {
                  hhea = table
                }else {
                  if(table.tag == "hmtx") {
                    hmtx = table
                  }else {
                    if(table.tag == "head") {
                      head = table
                    }else {
                      if(table.tag == "OS/2") {
                        os2 = table
                      }
                    }
                  }
                }
              }
            }
          }
          requiredTables.splice(index$$45, 1)
        }else {
          if(table.tag == "vmtx") {
            vmtx = table
          }else {
            if(table.tag == "vhea") {
              vhea = table
            }else {
              if(table.tag == "loca") {
                loca = table
              }else {
                if(table.tag == "glyf") {
                  glyf = table
                }
              }
            }
          }
        }
        tables.push(table)
      }
      numTables$$2 = tables.length + requiredTables.length;
      var ttf = {file:"", virtualOffset:numTables$$2 * 4 * 4};
      createOpenTypeHeader(JSCompiler_object_inline_version_275, ttf, numTables$$2);
      if(os2 && !isOS2Valid(os2)) {
        tables.splice(tables.indexOf(os2), 1);
        os2 = null
      }
      font$$7.pos = (font$$7.start || 0) + maxp.offset;
      var version$$5 = int16(font$$7.getBytes(4));
      var numGlyphs = int16(font$$7.getBytes(2));
      sanitizeMetrics(font$$7, hhea, hmtx, numGlyphs);
      sanitizeMetrics(font$$7, vhea, vmtx, numGlyphs);
      var isGlyphLocationsLong = int16([head.data[50], head.data[51]]);
      if(head && loca && glyf) {
        sanitizeGlyphLocations(loca, glyf, numGlyphs, isGlyphLocationsLong)
      }
      var emptyGlyphIds = [];
      if(glyf) {
        findEmptyGlyphs(loca, isGlyphLocationsLong, emptyGlyphIds)
      }
      if(hhea.data[10] == 0 && hhea.data[11] == 0) {
        hhea.data[10] = 255;
        hhea.data[11] = 255
      }
      if(post) {
        readGlyphNameMap(post, properties$$10)
      }
      var glyphs$$3;
      var ids;
      if(properties$$10.type == "CIDFontType2") {
        if(!cmap$$2) {
          cmap$$2 = {tag:"cmap", data:null};
          tables.push(cmap$$2)
        }
        var cidToGidMap$$1 = properties$$10.cidToGidMap || [];
        var gidToCidMap = [0];
        if(cidToGidMap$$1.length > 0) {
          var j$$28 = cidToGidMap$$1.length - 1;
          for(;j$$28 >= 0;j$$28--) {
            var gid = cidToGidMap$$1[j$$28];
            if(gid) {
              gidToCidMap[gid] = j$$28
            }
          }
          var nextCid = cidToGidMap$$1.length;
          i$$86 = 1;
          for(;i$$86 < numGlyphs;i$$86++) {
            if(!gidToCidMap[i$$86]) {
              gidToCidMap[i$$86] = nextCid++
            }
          }
        }
        glyphs$$3 = [];
        ids = [];
        var usedUnicodes = [];
        var unassignedUnicodeItems = [];
        i$$86 = 1;
        for(;i$$86 < numGlyphs;i$$86++) {
          var cid = gidToCidMap[i$$86] || i$$86;
          var unicode$$1 = this.toFontChar[cid];
          if(!unicode$$1 || typeof unicode$$1 !== "number" || isSpecialUnicode(unicode$$1) || unicode$$1 in usedUnicodes) {
            unassignedUnicodeItems.push(i$$86);
            continue
          }
          usedUnicodes[unicode$$1] = true;
          glyphs$$3.push({unicode:unicode$$1, code:cid});
          ids.push(i$$86)
        }
        var unusedUnicode = kCmapGlyphOffset;
        j$$28 = 0;
        var jj$$7 = unassignedUnicodeItems.length;
        for(;j$$28 < jj$$7;j$$28++) {
          i$$86 = unassignedUnicodeItems[j$$28];
          cid = gidToCidMap[i$$86] || i$$86;
          for(;unusedUnicode in usedUnicodes;) {
            unusedUnicode++
          }
          if(unusedUnicode >= kCmapGlyphOffset + kSizeOfGlyphArea) {
            break
          }
          unicode$$1 = unusedUnicode++;
          this.toFontChar[cid] = unicode$$1;
          usedUnicodes[unicode$$1] = true;
          glyphs$$3.push({unicode:unicode$$1, code:cid});
          ids.push(i$$86)
        }
      }else {
        var cmapTable = readCMapTable(cmap$$2, font$$7);
        glyphs$$3 = cmapTable.glyphs;
        ids = cmapTable.ids;
        var hasShortCmap = !!cmapTable.hasShortCmap;
        var toFontChar = this.toFontChar;
        if(hasShortCmap && ids.length == numGlyphs) {
          i$$86 = 0;
          var ii$$29 = ids.length;
          for(;i$$86 < ii$$29;i$$86++) {
            ids[i$$86] = i$$86
          }
        }
        unusedUnicode = kCmapGlyphOffset;
        var glyphNames = properties$$10.glyphNames || [];
        var encoding$$2 = properties$$10.baseEncoding;
        var differences$$1 = properties$$10.differences;
        if(toFontChar && toFontChar.length > 0) {
          var isIdentity = true;
          i$$86 = 0;
          ii$$29 = glyphs$$3.length;
          for(;i$$86 < ii$$29;i$$86++) {
            if(glyphs$$3[i$$86].unicode != i$$86 + 1) {
              isIdentity = false;
              break
            }
          }
          if(isIdentity && !this.isSymbolicFont) {
            usedUnicodes = [];
            unassignedUnicodeItems = [];
            i$$86 = 0;
            ii$$29 = glyphs$$3.length;
            for(;i$$86 < ii$$29;i$$86++) {
              unicode$$1 = toFontChar[i$$86 + 1];
              if(!unicode$$1 || typeof unicode$$1 !== "number" || unicode$$1 in usedUnicodes) {
                unassignedUnicodeItems.push(i$$86);
                continue
              }
              glyphs$$3[i$$86].unicode = unicode$$1;
              usedUnicodes[unicode$$1] = true
            }
            j$$28 = 0;
            jj$$7 = unassignedUnicodeItems.length;
            for(;j$$28 < jj$$7;j$$28++) {
              i$$86 = unassignedUnicodeItems[j$$28];
              for(;unusedUnicode in usedUnicodes;) {
                unusedUnicode++
              }
              cid = i$$86 + 1;
              if(!(cid in toFontChar)) {
                toFontChar[cid] = unusedUnicode
              }
              glyphs$$3[i$$86].unicode = unusedUnicode++
            }
            this.useToFontChar = true
          }
        }
        var glyphsRemoved = 0;
        i$$86 = ids.length - 1;
        for(;i$$86 >= 0;i$$86--) {
          if(ids[i$$86] < numGlyphs && (!emptyGlyphIds[ids[i$$86]] || this.isSymbolicFont)) {
            continue
          }
          ids.splice(i$$86, 1);
          glyphs$$3.splice(i$$86, 1);
          glyphsRemoved++
        }
        if(this.isSymbolicFont) {
          var minUnicode = 65535;
          var maxUnicode = 0;
          i$$86 = 0;
          ii$$29 = glyphs$$3.length;
          for(;i$$86 < ii$$29;i$$86++) {
            unicode$$1 = glyphs$$3[i$$86].unicode;
            minUnicode = Math.min(minUnicode, unicode$$1);
            maxUnicode = Math.max(maxUnicode, unicode$$1)
          }
          if((maxUnicode & 65280) != (minUnicode & 65280)) {
            this.isSymbolicFont = false
          }
        }
        if(glyphsRemoved > 2) {
          warn("Switching TrueType encoding to MacRomanEncoding for " + this.name + " font");
          encoding$$2 = Encodings.MacRomanEncoding
        }
        if(hasShortCmap && this.hasEncoding && !this.isSymbolicFont) {
          usedUnicodes = [];
          i$$86 = 0;
          ii$$29 = glyphs$$3.length;
          for(;i$$86 < ii$$29;i$$86++) {
            var code$$10 = glyphs$$3[i$$86].unicode;
            gid = ids[i$$86];
            glyphs$$3[i$$86].unicode += kCmapGlyphOffset;
            toFontChar[code$$10] = glyphs$$3[i$$86].unicode;
            var glyphName = glyphNames[gid] || encoding$$2[code$$10];
            if(glyphName in GlyphsUnicode) {
              unicode$$1 = GlyphsUnicode[glyphName];
              if(unicode$$1 in usedUnicodes) {
                continue
              }
              usedUnicodes[unicode$$1] = true;
              glyphs$$3.push({unicode:unicode$$1, code:glyphs$$3[i$$86].code});
              ids.push(gid);
              toFontChar[code$$10] = unicode$$1
            }
          }
          this.useToFontChar = true
        }else {
          if(!this.isSymbolicFont && (this.hasEncoding || properties$$10.glyphNames || differences$$1.length > 0)) {
            var reverseMap = [];
            i$$86 = 0;
            ii$$29 = glyphs$$3.length;
            for(;i$$86 < ii$$29;i$$86++) {
              reverseMap[glyphs$$3[i$$86].unicode] = i$$86
            }
            var newGlyphUnicodes = [];
            i$$86 = 0;
            ii$$29 = glyphs$$3.length;
            for(;i$$86 < ii$$29;i$$86++) {
              code$$10 = glyphs$$3[i$$86].unicode;
              var changeCode = false;
              gid = ids[i$$86];
              glyphName = glyphNames[gid];
              if(!glyphName) {
                glyphName = differences$$1[code$$10] || encoding$$2[code$$10];
                changeCode = true
              }
              if(glyphName in GlyphsUnicode) {
                unicode$$1 = GlyphsUnicode[glyphName];
                if(!unicode$$1 || reverseMap[unicode$$1] === i$$86) {
                  continue
                }
                newGlyphUnicodes[i$$86] = unicode$$1;
                if(changeCode) {
                  toFontChar[code$$10] = unicode$$1
                }
                delete reverseMap[code$$10]
              }
            }
            for(index$$45 in newGlyphUnicodes) {
              unicode$$1 = newGlyphUnicodes[index$$45];
              if(reverseMap[unicode$$1]) {
                glyphs$$3[index$$45].unicode = unusedUnicode++;
                continue
              }
              glyphs$$3[index$$45].unicode = unicode$$1;
              reverseMap[unicode$$1] = index$$45
            }
            this.useToFontChar = true
          }
        }
        if(this.isSymbolicFont) {
          i$$86 = 0;
          ii$$29 = glyphs$$3.length;
          for(;i$$86 < ii$$29;i$$86++) {
            code$$10 = glyphs$$3[i$$86].unicode & 255;
            var fontCharCode = kSymbolicFontGlyphOffset | code$$10;
            glyphs$$3[i$$86].unicode = toFontChar[code$$10] = fontCharCode
          }
          this.useToFontChar = true
        }
        createGlyphNameMap(glyphs$$3, ids, properties$$10);
        this.glyphNameMap = properties$$10.glyphNameMap
      }
      cmap$$2.data = createCMapTable(glyphs$$3, ids);
      var unicodeIsEnabled = [];
      i$$86 = 0;
      ii$$29 = glyphs$$3.length;
      for(;i$$86 < ii$$29;i$$86++) {
        unicodeIsEnabled[glyphs$$3[i$$86].unicode] = true
      }
      this.unicodeIsEnabled = unicodeIsEnabled;
      if(!os2) {
        var override$$1 = {unitsPerEm:int16([head.data[18], head.data[19]]), yMax:int16([head.data[42], head.data[43]]), yMin:int16([head.data[38], head.data[39]]) - 65536, ascent:int16([hhea.data[4], hhea.data[5]]), descent:int16([hhea.data[6], hhea.data[7]]) - 65536};
        tables.push({tag:"OS/2", data:stringToArray(createOS2Table(properties$$10, glyphs$$3, override$$1))})
      }
      if(requiredTables.indexOf("post") != -1) {
        tables.push({tag:"post", data:stringToArray(createPostTable(properties$$10))})
      }
      if(requiredTables.indexOf("name") != -1) {
        tables.push({tag:"name", data:stringToArray(createNameTable(this.name))})
      }
      tables.sort(function tables_sort(a$$14, b$$19) {
        return(a$$14.tag > b$$19.tag) - (a$$14.tag < b$$19.tag)
      });
      i$$86 = 0;
      ii$$29 = tables.length;
      for(;i$$86 < ii$$29;i$$86++) {
        table = tables[i$$86];
        var data$$59 = [];
        var tableData = table.data;
        j$$28 = 0;
        jj$$7 = tableData.length;
        for(;j$$28 < jj$$7;j$$28++) {
          data$$59.push(tableData[j$$28])
        }
        createTableEntry(ttf, table.tag, data$$59)
      }
      i$$86 = 0;
      ii$$29 = tables.length;
      for(;i$$86 < ii$$29;i$$86++) {
        table = tables[i$$86];
        tableData = table.data;
        ttf.file += arrayToString(tableData);
        for(;ttf.file.length & 3;) {
          ttf.file += String.fromCharCode(0)
        }
      }
      return stringToArray(ttf.file)
    }, convert:function Font_convert(fontName$$3, font$$10, properties$$13) {
      function isFixedPitch(glyphs$$6) {
        var i$$95 = 0;
        var ii$$32 = glyphs$$6.length - 1;
        for(;i$$95 < ii$$32;i$$95++) {
          if(glyphs$$6[i$$95] != glyphs$$6[i$$95 + 1]) {
            return false
          }
        }
        return true
      }
      var kRequiredTablesCount = 9;
      var otf = {file:"", virtualOffset:9 * 4 * 4};
      createOpenTypeHeader("OTTO", otf, 9);
      var charstrings$$1 = font$$10.charstrings;
      properties$$13.fixedPitch = isFixedPitch(charstrings$$1);
      var glyphNameMap$$1 = {};
      var i$$94 = 0;
      for(;i$$94 < charstrings$$1.length;++i$$94) {
        var charstring = charstrings$$1[i$$94];
        glyphNameMap$$1[charstring.glyph] = charstring.unicode
      }
      this.glyphNameMap = glyphNameMap$$1;
      if(!properties$$13.hasEncoding && (properties$$13.subtype == "Type1C" || properties$$13.subtype == "CIDFontType0C")) {
        var encoding$$4 = [];
        i$$94 = 0;
        for(;i$$94 < charstrings$$1.length;++i$$94) {
          charstring = charstrings$$1[i$$94];
          encoding$$4[charstring.code] = charstring.glyph
        }
        properties$$13.baseEncoding = encoding$$4
      }
      if(properties$$13.subtype == "CIDFontType0C") {
        var toFontChar$$1 = [];
        i$$94 = 0;
        for(;i$$94 < charstrings$$1.length;++i$$94) {
          charstring = charstrings$$1[i$$94];
          toFontChar$$1[charstring.code] = charstring.unicode
        }
        this.toFontChar = toFontChar$$1
      }
      var fields = {"CFF ":font$$10.data, "OS/2":stringToArray(createOS2Table(properties$$13, charstrings$$1)), "cmap":createCMapTable(charstrings$$1.slice(), "glyphIds" in font$$10 ? font$$10.glyphIds : null), "head":stringToArray("\x00\u0001\x00\x00" + "\x00\x00\u0010\x00" + "\x00\x00\x00\x00" + "_\u000f<\u00f5" + "\x00\x00" + "\u0003\u00e8" + "\x00\x00\x00\x00\u009e\x0B~'" + "\x00\x00\x00\x00\u009e\x0B~'" + "\x00\x00" + safeString16(properties$$13.descent) + "\u000f\u00ff" + safeString16(properties$$13.ascent) + 
      string16(properties$$13.italicAngle ? 2 : 0) + "\x00\u0011" + "\x00\x00" + "\x00\x00" + "\x00\x00"), "hhea":stringToArray("\x00\u0001\x00\x00" + safeString16(properties$$13.ascent) + safeString16(properties$$13.descent) + "\x00\x00" + "\u00ff\u00ff" + "\x00\x00" + "\x00\x00" + "\x00\x00" + safeString16(properties$$13.capHeight) + safeString16(Math.tan(properties$$13.italicAngle) * properties$$13.xHeight) + "\x00\x00" + "\x00\x00" + "\x00\x00" + "\x00\x00" + "\x00\x00" + "\x00\x00" + string16(charstrings$$1.length + 
      1)), "hmtx":function fontFieldsHmtx() {
        var hmtx$$1 = "\x00\x00\x00\x00";
        var i$$96 = 0;
        var ii$$33 = charstrings$$1.length;
        for(;i$$96 < ii$$33;i$$96++) {
          var charstring$$1 = charstrings$$1[i$$96];
          var width$$20 = "width" in charstring$$1 ? charstring$$1.width : 0;
          hmtx$$1 += string16(width$$20) + string16(0)
        }
        return stringToArray(hmtx$$1)
      }(), "maxp":stringToArray("\x00\x00P\x00" + string16(charstrings$$1.length + 1)), "name":stringToArray(createNameTable(fontName$$3)), "post":stringToArray(createPostTable(properties$$13))};
      var field;
      for(field in fields) {
        createTableEntry(otf, field, fields[field])
      }
      for(field in fields) {
        var table$$2 = fields[field];
        otf.file += arrayToString(table$$2)
      }
      return stringToArray(otf.file)
    }, buildToFontChar:function Font_buildToFontChar(toUnicode$$2) {
      var result$$8 = [];
      var unusedUnicode$$1 = kCmapGlyphOffset;
      var i$$97 = 0;
      var ii$$34 = toUnicode$$2.length;
      for(;i$$97 < ii$$34;i$$97++) {
        var unicode$$3 = toUnicode$$2[i$$97];
        var fontCharCode$$1 = typeof unicode$$3 === "object" ? unusedUnicode$$1++ : unicode$$3;
        if(typeof unicode$$3 !== "undefined") {
          result$$8[i$$97] = fontCharCode$$1
        }
      }
      return result$$8
    }, rebuildToUnicode:function Font_rebuildToUnicode(properties$$14) {
      var firstChar$$2 = properties$$14.firstChar;
      var lastChar$$1 = properties$$14.lastChar;
      var map$$1 = [];
      if(properties$$14.composite) {
        var isIdentityMap$$1 = this.cidToUnicode.length == 0;
        var i$$98 = firstChar$$2;
        var ii$$35 = lastChar$$1;
        for(;i$$98 <= ii$$35;i$$98++) {
          var cid$$1 = i$$98;
          map$$1[i$$98] = isIdentityMap$$1 ? cid$$1 : this.cidToUnicode[cid$$1]
        }
      }else {
        i$$98 = firstChar$$2;
        ii$$35 = lastChar$$1;
        for(;i$$98 <= ii$$35;i$$98++) {
          var glyph$$1 = properties$$14.differences[i$$98];
          if(!glyph$$1) {
            glyph$$1 = properties$$14.baseEncoding[i$$98]
          }
          if(!!glyph$$1 && glyph$$1 in GlyphsUnicode) {
            map$$1[i$$98] = GlyphsUnicode[glyph$$1]
          }
        }
      }
      this.toUnicode = map$$1
    }, loadCidToUnicode:function Font_loadCidToUnicode(properties$$15) {
      if(!properties$$15.cidSystemInfo) {
        return
      }
      var cidToUnicodeMap = [];
      var unicodeToCIDMap = [];
      this.cidToUnicode = cidToUnicodeMap;
      this.unicodeToCID = unicodeToCIDMap;
      var cidSystemInfo$$1 = properties$$15.cidSystemInfo;
      var cidToUnicode;
      if(cidSystemInfo$$1) {
        cidToUnicode = CIDToUnicodeMaps[cidSystemInfo$$1.registry + "-" + cidSystemInfo$$1.ordering]
      }
      if(!cidToUnicode) {
        return
      }
      var cid$$2 = 1;
      var i$$99;
      var j$$34;
      var k$$9;
      var ii$$36;
      i$$99 = 0, ii$$36 = cidToUnicode.length;
      for(;i$$99 < ii$$36;++i$$99) {
        var unicode$$4 = cidToUnicode[i$$99];
        if(isArray(unicode$$4)) {
          var length$$40 = unicode$$4.length;
          j$$34 = 0;
          for(;j$$34 < length$$40;j$$34++) {
            cidToUnicodeMap[cid$$2] = unicode$$4[j$$34];
            unicodeToCIDMap[unicode$$4[j$$34]] = cid$$2
          }
          cid$$2++
        }else {
          if(typeof unicode$$4 === "object") {
            var fillLength = unicode$$4.f;
            if(fillLength) {
              k$$9 = unicode$$4.c;
              j$$34 = 0;
              for(;j$$34 < fillLength;++j$$34) {
                cidToUnicodeMap[cid$$2] = k$$9;
                unicodeToCIDMap[k$$9] = cid$$2;
                cid$$2++;
                k$$9++
              }
            }else {
              cid$$2 += unicode$$4.s
            }
          }else {
            if(unicode$$4) {
              cidToUnicodeMap[cid$$2] = unicode$$4;
              unicodeToCIDMap[unicode$$4] = cid$$2;
              cid$$2++
            }else {
              cid$$2++
            }
          }
        }
      }
    }, bindDOM:function Font_bindDOM(data$$70) {
      var fontName$$4 = this.loadedName;
      var url$$6 = "url(data:" + this.mimetype + ";base64," + PdfJS_window.window.btoa(data$$70) + ");";
      var rule$$5 = "@font-face { font-family:'" + fontName$$4 + "';src:" + url$$6 + "}";
      var styleElement = PdfJS_window.document.createElement("style");
      PdfJS_window.document.documentElement.getElementsByTagName("head")[0].appendChild(styleElement);
      var styleSheet = styleElement.sheet;
      styleSheet.insertRule(rule$$5, styleSheet.cssRules.length);
      if(PDFJS.pdfBug && FontInspector.enabled) {
        FontInspector.fontAdded(this, url$$6)
      }
      return rule$$5
    }, get spaceWidth() {
      var possibleSpaceReplacements = ["space", "minus", "one", "i"];
      var width$$21;
      var i$$100 = 0;
      var ii$$37 = possibleSpaceReplacements.length;
      for(;i$$100 < ii$$37;i$$100++) {
        var glyphName$$2 = possibleSpaceReplacements[i$$100];
        if(glyphName$$2 in this.widths) {
          width$$21 = this.widths[glyphName$$2];
          break
        }
        var glyphUnicode$$1 = GlyphsUnicode[glyphName$$2];
        var charcode = 0;
        if(this.composite) {
          charcode = this.unicodeToCID[glyphUnicode$$1]
        }
        if(!charcode && "toUnicode" in this) {
          charcode = this.toUnicode.indexOf(glyphUnicode$$1)
        }
        if(!(charcode > 0)) {
          charcode = glyphUnicode$$1
        }
        width$$21 = this.widths[charcode];
        if(width$$21) {
          break
        }
      }
      width$$21 = (width$$21 || this.defaultWidth) * this.widthMultiplier;
      return shadow(this, "spaceWidth", width$$21)
    }, charToGlyph:function Font_charToGlyph(charcode$$1) {
      var fontCharCode$$2;
      var width$$22;
      var operatorList$$4;
      var disabled;
      width$$22 = this.widths[charcode$$1];
      switch(this.type) {
        case "CIDFontType0":
          if(this.noUnicodeAdaptation) {
            width$$22 = this.widths[this.unicodeToCID[charcode$$1] || charcode$$1];
            fontCharCode$$2 = mapPrivateUseChars(charcode$$1);
            break
          }
          fontCharCode$$2 = this.toFontChar[charcode$$1] || charcode$$1;
          break;
        case "CIDFontType2":
          if(this.noUnicodeAdaptation) {
            width$$22 = this.widths[this.unicodeToCID[charcode$$1] || charcode$$1];
            fontCharCode$$2 = mapPrivateUseChars(charcode$$1);
            break
          }
          fontCharCode$$2 = this.toFontChar[charcode$$1] || charcode$$1;
          break;
        case "Type1":
          var glyphName$$3 = this.differences[charcode$$1] || this.encoding[charcode$$1];
          if(!isNum(width$$22)) {
            width$$22 = this.widths[glyphName$$3]
          }
          if(this.noUnicodeAdaptation) {
            fontCharCode$$2 = mapPrivateUseChars(GlyphsUnicode[glyphName$$3] || charcode$$1);
            break
          }
          fontCharCode$$2 = this.glyphNameMap[glyphName$$3] || GlyphsUnicode[glyphName$$3] || charcode$$1;
          break;
        case "Type3":
          glyphName$$3 = this.differences[charcode$$1] || this.encoding[charcode$$1];
          operatorList$$4 = this.charProcOperatorList[glyphName$$3];
          fontCharCode$$2 = charcode$$1;
          break;
        case "TrueType":
          if(this.useToFontChar) {
            fontCharCode$$2 = this.toFontChar[charcode$$1] || charcode$$1;
            break
          }
          glyphName$$3 = this.differences[charcode$$1] || this.encoding[charcode$$1];
          if(!glyphName$$3) {
            glyphName$$3 = Encodings.StandardEncoding[charcode$$1]
          }
          if(!isNum(width$$22)) {
            width$$22 = this.widths[glyphName$$3]
          }
          if(this.noUnicodeAdaptation) {
            fontCharCode$$2 = GlyphsUnicode[glyphName$$3] || charcode$$1;
            break
          }
          if(!this.hasEncoding || this.isSymbolicFont) {
            fontCharCode$$2 = this.useToFontChar ? this.toFontChar[charcode$$1] : charcode$$1;
            break
          }
          fontCharCode$$2 = glyphName$$3 in this.glyphNameMap ? this.glyphNameMap[glyphName$$3] : GlyphsUnicode[glyphName$$3];
          break;
        default:
          warn("Unsupported font type: " + this.type)
      }
      var unicodeChars = !("toUnicode" in this) ? charcode$$1 : this.toUnicode[charcode$$1] || charcode$$1;
      if(typeof unicodeChars === "number") {
        unicodeChars = String.fromCharCode(unicodeChars)
      }
      width$$22 = (isNum(width$$22) ? width$$22 : this.defaultWidth) * this.widthMultiplier;
      disabled = this.unicodeIsEnabled ? !this.unicodeIsEnabled[fontCharCode$$2] : false;
      return{fontChar:String.fromCharCode(fontCharCode$$2), unicode:unicodeChars, width:width$$22, disabled:disabled, operatorList:operatorList$$4}
    }, charsToGlyphs:function Font_charsToGlyphs(chars) {
      var charsCache = this.charsCache;
      var glyphs$$7;
      if(charsCache) {
        glyphs$$7 = charsCache[chars];
        if(glyphs$$7) {
          return glyphs$$7
        }
      }
      if(!charsCache) {
        charsCache = this.charsCache = Object.create(null)
      }
      glyphs$$7 = [];
      if(this.wideChars) {
        var length$$41 = chars.length - 1;
        var i$$101 = 0;
        for(;i$$101 < length$$41;i$$101++) {
          var charcode$$2 = int16([chars.charCodeAt(i$$101++), chars.charCodeAt(i$$101)]);
          var glyph$$2 = this.charToGlyph(charcode$$2);
          glyphs$$7.push(glyph$$2);
          if(charcode$$2 == 32) {
            glyphs$$7.push(null)
          }
        }
      }else {
        i$$101 = 0;
        var ii$$38 = chars.length;
        for(;i$$101 < ii$$38;++i$$101) {
          charcode$$2 = chars.charCodeAt(i$$101);
          glyph$$2 = this.charToGlyph(charcode$$2);
          glyphs$$7.push(glyph$$2);
          if(charcode$$2 == 32) {
            glyphs$$7.push(null)
          }
        }
      }
      return charsCache[chars] = glyphs$$7
    }};
    return Font$$1
  }();
  var CFFStandardStrings = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", 
  "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", 
  "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", 
  "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", 
  "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "266 ff", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", 
  "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", 
  "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", 
  "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", 
  "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", 
  "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];
  var type1Parser = new Type1Parser;
  Type1Font.prototype = {createCFFIndexHeader:function Type1Font_createCFFIndexHeader(objects, isByte) {
    var count$$13 = objects.length;
    if(count$$13 == 0) {
      return"\x00\x00\x00"
    }
    var data$$73 = String.fromCharCode(count$$13 >> 8 & 255, count$$13 & 255);
    data$$73 += "\u0004";
    var relativeOffset = 1;
    var i$$107 = 0;
    for(;i$$107 < count$$13 + 1;i$$107++) {
      data$$73 += String.fromCharCode(relativeOffset >>> 24 & 255, relativeOffset >> 16 & 255, relativeOffset >> 8 & 255, relativeOffset & 255);
      if(objects[i$$107]) {
        relativeOffset += objects[i$$107].length
      }
    }
    i$$107 = 0;
    for(;i$$107 < count$$13;i$$107++) {
      var j$$38 = 0;
      var jj$$9 = objects[i$$107].length;
      for(;j$$38 < jj$$9;j$$38++) {
        data$$73 += isByte ? String.fromCharCode(objects[i$$107][j$$38] & 255) : objects[i$$107][j$$38]
      }
    }
    return data$$73
  }, encodeNumber:function Type1Font_encodeNumber(value$$53) {
    value$$53 |= 0;
    if(value$$53 >= -32768 && value$$53 <= 32767) {
      return"\u001c" + String.fromCharCode(value$$53 >> 8 & 255) + String.fromCharCode(value$$53 & 255)
    }else {
      return"\u001d" + String.fromCharCode(value$$53 >> 24 & 255) + String.fromCharCode(value$$53 >> 16 & 255) + String.fromCharCode(value$$53 >> 8 & 255) + String.fromCharCode(value$$53 & 255)
    }
  }, getOrderedCharStrings:function Type1Font_getOrderedCharStrings(glyphs$$8, properties$$18) {
    var charstrings$$3 = [];
    var i$$108;
    var length$$43;
    var glyphName$$4;
    var unusedUnicode$$2 = kCmapGlyphOffset;
    i$$108 = 0, length$$43 = glyphs$$8.length;
    for(;i$$108 < length$$43;i$$108++) {
      var item$$3 = glyphs$$8[i$$108];
      glyphName$$4 = item$$3.glyph;
      var unicode$$5 = glyphName$$4 in GlyphsUnicode ? GlyphsUnicode[glyphName$$4] : unusedUnicode$$2++;
      charstrings$$3.push({glyph:glyphName$$4, unicode:unicode$$5, gid:i$$108, charstring:item$$3.data, width:item$$3.width, lsb:item$$3.lsb})
    }
    charstrings$$3.sort(function charstrings_sort(a$$15, b$$20) {
      return a$$15.unicode - b$$20.unicode
    });
    return charstrings$$3
  }, getType2Charstrings:function Type1Font_getType2Charstrings(type1Charstrings) {
    var type2Charstrings$$1 = [];
    var count$$14 = type1Charstrings.length;
    var i$$109 = 0;
    for(;i$$109 < count$$14;i$$109++) {
      var charstring$$3 = type1Charstrings[i$$109].charstring;
      type2Charstrings$$1.push(this.flattenCharstring(charstring$$3.slice(), this.commandsMap))
    }
    return type2Charstrings$$1
  }, getType2Subrs:function Type1Font_getType2Subrs(type1Subrs) {
    var bias$$1 = 0;
    var count$$15 = type1Subrs.length;
    if(count$$15 < 1240) {
      bias$$1 = 107
    }else {
      if(count$$15 < 33900) {
        bias$$1 = 1131
      }else {
        bias$$1 = 32768
      }
    }
    var type2Subrs = [];
    var i$$110 = 0;
    for(;i$$110 < bias$$1;i$$110++) {
      type2Subrs.push([11])
    }
    i$$110 = 0;
    for(;i$$110 < count$$15;i$$110++) {
      var subr = type1Subrs[i$$110];
      if(!subr) {
        subr = [11]
      }
      type2Subrs.push(this.flattenCharstring(subr, this.commandsMap))
    }
    return type2Subrs
  }, commandsMap:{"hstem":1, "vstem":3, "vmoveto":4, "rlineto":5, "hlineto":6, "vlineto":7, "rrcurveto":8, "callsubr":10, "return":11, "sub":[12, 11], "div":[12, 12], "exch":[12, 28], "flex":[12, 35], "drop":[12, 18], "endchar":14, "rmoveto":21, "hmoveto":22, "vhcurveto":30, "hvcurveto":31}, flattenCharstring:function Type1Font_flattenCharstring(charstring$$4, map$$2) {
    var i$$111 = 0;
    for(;i$$111 < charstring$$4.length;i$$111++) {
      var command$$1 = charstring$$4[i$$111];
      if(command$$1.charAt) {
        var cmd$$5 = map$$2[command$$1];
        if(!cmd$$5) {
          error$$3("Unknow command: " + command$$1)
        }
        if(isArray(cmd$$5)) {
          charstring$$4.splice(i$$111++, 1, cmd$$5[0], cmd$$5[1])
        }else {
          charstring$$4[i$$111] = cmd$$5
        }
      }else {
        if(command$$1 > 32E3) {
          var divisor = charstring$$4[i$$111 + 1];
          command$$1 /= divisor;
          charstring$$4.splice(i$$111, 3, 28, command$$1 >> 8, command$$1 & 255)
        }else {
          charstring$$4.splice(i$$111, 1, 28, command$$1 >> 8, command$$1 & 255)
        }
        i$$111 += 2
      }
    }
    return charstring$$4
  }, wrap:function Type1Font_wrap(name$$60, glyphs$$9, charstrings$$4, subrs$$1, properties$$19) {
    var fields$$1 = {"header":"\u0001\x00\u0004\u0004", "names":this.createCFFIndexHeader([name$$60]), "topDict":function topDict(self$$5) {
      return function cffWrapTopDict() {
        var header$$5 = "\x00\u0001\u0001\u0001";
        var dict$$16 = "\u00f8\u001b\x00" + "\u00f8\u001c\u0001" + "\u00f8\u001d\u0002" + "\u00f8\u001e\u0003" + "\u00f8\u001f\u0004" + "\u001c\x00\x00\u0010";
        var boundingBox = properties$$19.bbox;
        var i$$113 = 0;
        var ii$$43 = boundingBox.length;
        for(;i$$113 < ii$$43;i$$113++) {
          dict$$16 += self$$5.encodeNumber(boundingBox[i$$113])
        }
        dict$$16 += "\u0005";
        var offset$$27 = fields$$1.header.length + fields$$1.names.length + (header$$5.length + 1) + (dict$$16.length + (4 + 4)) + fields$$1.strings.length + fields$$1.globalSubrs.length;
        if(offset$$27 + fields$$1.charstrings.length > 32767) {
          offset$$27 += 9
        }else {
          offset$$27 += 7
        }
        dict$$16 += self$$5.encodeNumber(offset$$27) + "\u000f";
        offset$$27 = offset$$27 + glyphs$$9.length * 2 + 1;
        dict$$16 += self$$5.encodeNumber(offset$$27) + "\u0011";
        offset$$27 = offset$$27 + fields$$1.charstrings.length;
        dict$$16 += self$$5.encodeNumber(fields$$1.privateData.length);
        dict$$16 += self$$5.encodeNumber(offset$$27) + "\u0012";
        return header$$5 + String.fromCharCode(dict$$16.length + 1) + dict$$16
      }
    }(this), "strings":function strings$$1(self$$6) {
      var strings$$2 = ["Version 0.11", "See original notice", name$$60, name$$60, "Medium"];
      return self$$6.createCFFIndexHeader(strings$$2)
    }(this), "globalSubrs":this.createCFFIndexHeader([]), "charset":function charset(self$$7) {
      var charsetString = "\x00";
      var count$$16 = glyphs$$9.length;
      var i$$114 = 0;
      for(;i$$114 < count$$16;i$$114++) {
        var index$$53 = CFFStandardStrings.indexOf(charstrings$$4[i$$114].glyph);
        if(index$$53 == -1) {
          index$$53 = 0
        }
        charsetString += String.fromCharCode(index$$53 >> 8, index$$53 & 255)
      }
      return charsetString
    }(this), "charstrings":this.createCFFIndexHeader([[139, 14]].concat(glyphs$$9), true), "privateData":function cffWrapPrivate(self$$8) {
      var data$$74 = "\u008b\u0014" + "\u008b\u0015";
      var fieldMap = {BlueValues:"\u0006", OtherBlues:"\u0007", FamilyBlues:"\b", FamilyOtherBlues:"\t", StemSnapH:"\f\f", StemSnapV:"\f\r", BlueShift:"\f\n", BlueFuzz:"\f\x0B", BlueScale:"\f\t", LanguageGroup:"\f\u0011", ExpansionFactor:"\f\u0018"};
      var field$$2;
      for(field$$2 in fieldMap) {
        if(!properties$$19.privateData.hasOwnProperty(field$$2)) {
          continue
        }
        var value$$54 = properties$$19.privateData[field$$2];
        if(isArray(value$$54)) {
          data$$74 += self$$8.encodeNumber(value$$54[0]);
          var i$$115 = 1;
          var ii$$44 = value$$54.length;
          for(;i$$115 < ii$$44;i$$115++) {
            data$$74 += self$$8.encodeNumber(value$$54[i$$115] - value$$54[i$$115 - 1])
          }
        }else {
          data$$74 += self$$8.encodeNumber(value$$54)
        }
        data$$74 += fieldMap[field$$2]
      }
      data$$74 += self$$8.encodeNumber(data$$74.length + 4) + "\u0013";
      return data$$74
    }(this), "localSubrs":this.createCFFIndexHeader(subrs$$1, true)};
    fields$$1.topDict = fields$$1.topDict();
    var cff$$1 = [];
    var index$$52;
    for(index$$52 in fields$$1) {
      var field$$1 = fields$$1[index$$52];
      var i$$112 = 0;
      var ii$$42 = field$$1.length;
      for(;i$$112 < ii$$42;i$$112++) {
        cff$$1.push(field$$1.charCodeAt(i$$112))
      }
    }
    return cff$$1
  }};
  var CFFFont = function CFFFontClosure() {
    function CFFFont$$1(file$$6, properties$$20) {
      this.properties = properties$$20;
      var parser$$6 = new CFFParser(file$$6, properties$$20);
      var cff$$2 = parser$$6.parse();
      var compiler = new CFFCompiler(cff$$2);
      this.readExtra(cff$$2);
      try {
        this.data = compiler.compile()
      }catch(e$$24) {
        warn("Failed to compile font " + properties$$20.loadedName);
        this.data = file$$6
      }
    }
    CFFFont$$1.prototype = {readExtra:function CFFFont_readExtra(cff$$3) {
      var charset$$1 = cff$$3.charset.charset;
      var encoding$$6 = cff$$3.encoding ? cff$$3.encoding.encoding : null;
      var charstrings$$5 = this.getCharStrings(charset$$1, encoding$$6);
      var glyphIds = [];
      var i$$116 = 0;
      var ii$$45 = charstrings$$5.length;
      for(;i$$116 < ii$$45;i$$116++) {
        glyphIds.push(charstrings$$5[i$$116].gid)
      }
      this.charstrings = charstrings$$5;
      this.glyphIds = glyphIds
    }, getCharStrings:function CFFFont_getCharStrings(charsets, encoding$$7) {
      var charstrings$$6 = [];
      var unicodeUsed = [];
      var unassignedUnicodeItems$$1 = [];
      var inverseEncoding = [];
      if(encoding$$7 !== null) {
        var charcode$$3;
        for(charcode$$3 in encoding$$7) {
          inverseEncoding[encoding$$7[charcode$$3]] = charcode$$3 | 0
        }
      }else {
        inverseEncoding = charsets
      }
      var i$$117 = 0;
      var ii$$46 = charsets.length;
      for(;i$$117 < ii$$46;i$$117++) {
        var glyph$$5 = charsets[i$$117];
        if(glyph$$5 == ".notdef") {
          continue
        }
        var code$$13 = inverseEncoding[i$$117];
        if(!code$$13 || isSpecialUnicode(code$$13)) {
          unassignedUnicodeItems$$1.push(i$$117);
          continue
        }
        charstrings$$6.push({unicode:code$$13, code:code$$13, gid:i$$117, glyph:glyph$$5});
        unicodeUsed[code$$13] = true
      }
      var nextUnusedUnicode = kCmapGlyphOffset;
      var j$$39 = 0;
      var jj$$10 = unassignedUnicodeItems$$1.length;
      for(;j$$39 < jj$$10;++j$$39) {
        i$$117 = unassignedUnicodeItems$$1[j$$39];
        for(;nextUnusedUnicode in unicodeUsed;) {
          nextUnusedUnicode++
        }
        var unicode$$6 = nextUnusedUnicode++;
        charstrings$$6.push({unicode:unicode$$6, code:inverseEncoding[i$$117] || 0, gid:i$$117, glyph:charsets[i$$117]})
      }
      charstrings$$6.sort(function getCharStringsSort(a$$16, b$$21) {
        return a$$16.unicode - b$$21.unicode
      });
      return charstrings$$6
    }};
    return CFFFont$$1
  }();
  var CFFParser = function CFFParserClosure() {
    function CFFParser$$1(file$$7, properties$$21) {
      this.bytes = file$$7.getBytes();
      this.properties = properties$$21
    }
    CFFParser$$1.prototype = {parse:function CFFParser_parse() {
      var properties$$22 = this.properties;
      var cff$$4 = new CFF;
      this.cff = cff$$4;
      var header$$6 = this.parseHeader();
      var nameIndex = this.parseIndex(header$$6.endPos);
      var topDictIndex = this.parseIndex(nameIndex.endPos);
      var stringIndex = this.parseIndex(topDictIndex.endPos);
      var globalSubrIndex = this.parseIndex(stringIndex.endPos);
      var topDictParsed = this.parseDict(topDictIndex.obj.get(0));
      var topDict$$1 = this.createDict(CFFTopDict, topDictParsed, cff$$4.strings);
      cff$$4.header = header$$6.obj;
      cff$$4.names = this.parseNameIndex(nameIndex.obj);
      cff$$4.strings = this.parseStringIndex(stringIndex.obj);
      cff$$4.topDict = topDict$$1;
      cff$$4.globalSubrIndex = globalSubrIndex.obj;
      this.parsePrivateDict(cff$$4.topDict);
      cff$$4.isCIDFont = topDict$$1.hasName("ROS");
      var charStringOffset = topDict$$1.getByName("CharStrings");
      cff$$4.charStrings = this.parseCharStrings(charStringOffset);
      var charset$$2;
      var encoding$$8;
      if(cff$$4.isCIDFont) {
        var fdArrayIndex = this.parseIndex(topDict$$1.getByName("FDArray")).obj;
        var i$$118 = 0;
        var ii$$47 = fdArrayIndex.count;
        for(;i$$118 < ii$$47;++i$$118) {
          var dictRaw = fdArrayIndex.get(i$$118);
          var fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff$$4.strings);
          this.parsePrivateDict(fontDict);
          cff$$4.fdArray.push(fontDict)
        }
        encoding$$8 = null;
        charset$$2 = this.parseCharsets(topDict$$1.getByName("charset"), cff$$4.charStrings.count, cff$$4.strings, true);
        cff$$4.fdSelect = this.parseFDSelect(topDict$$1.getByName("FDSelect"), cff$$4.charStrings.count)
      }else {
        charset$$2 = this.parseCharsets(topDict$$1.getByName("charset"), cff$$4.charStrings.count, cff$$4.strings, false);
        encoding$$8 = this.parseEncoding(topDict$$1.getByName("Encoding"), properties$$22, cff$$4.strings, charset$$2.charset)
      }
      cff$$4.charset = charset$$2;
      cff$$4.encoding = encoding$$8;
      return cff$$4
    }, parseHeader:function CFFParser_parseHeader() {
      var bytes$$5 = this.bytes;
      var offset$$28 = 0;
      for(;bytes$$5[offset$$28] != 1;) {
        ++offset$$28
      }
      if(offset$$28 != 0) {
        warn("cff data is shifted");
        bytes$$5 = bytes$$5.subarray(offset$$28);
        this.bytes = bytes$$5
      }
      var major = bytes$$5[0];
      var minor = bytes$$5[1];
      var hdrSize = bytes$$5[2];
      var offSize = bytes$$5[3];
      var header$$7 = new CFFHeader(major, minor, hdrSize, offSize);
      return{obj:header$$7, endPos:hdrSize}
    }, parseDict:function CFFParser_parseDict(dict$$17) {
      function parseOperand() {
        var value$$55 = dict$$17[pos$$5++];
        if(value$$55 === 30) {
          var JSCompiler_inline_result$$7;
          var str$$inline_93 = "";
          var eof$$inline_94 = 15;
          var lookup$$inline_95 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];
          var length$$inline_96 = dict$$17.length;
          for(;pos$$5 < length$$inline_96;) {
            var b$$inline_97 = dict$$17[pos$$5++];
            var b1$$inline_98 = b$$inline_97 >> 4;
            var b2$$inline_99 = b$$inline_97 & 15;
            if(b1$$inline_98 == eof$$inline_94) {
              break
            }
            str$$inline_93 += lookup$$inline_95[b1$$inline_98];
            if(b2$$inline_99 == eof$$inline_94) {
              break
            }
            str$$inline_93 += lookup$$inline_95[b2$$inline_99]
          }
          JSCompiler_inline_result$$7 = parseFloat(str$$inline_93);
          return JSCompiler_inline_result$$7
        }else {
          if(value$$55 === 28) {
            value$$55 = dict$$17[pos$$5++];
            value$$55 = value$$55 << 8 | dict$$17[pos$$5++];
            return value$$55
          }else {
            if(value$$55 === 29) {
              value$$55 = dict$$17[pos$$5++];
              value$$55 = value$$55 << 8 | dict$$17[pos$$5++];
              value$$55 = value$$55 << 8 | dict$$17[pos$$5++];
              value$$55 = value$$55 << 8 | dict$$17[pos$$5++];
              return value$$55
            }else {
              if(value$$55 >= 32 && value$$55 <= 246) {
                return value$$55 - 139
              }else {
                if(value$$55 >= 247 && value$$55 <= 250) {
                  return(value$$55 - 247) * 256 + dict$$17[pos$$5++] + 108
                }else {
                  if(value$$55 >= 251 && value$$55 <= 254) {
                    return-((value$$55 - 251) * 256) - dict$$17[pos$$5++] - 108
                  }else {
                    error$$3("255 is not a valid DICT command")
                  }
                }
              }
            }
          }
        }
        return-1
      }
      var pos$$5 = 0;
      var operands$$1 = [];
      var entries$$2 = [];
      pos$$5 = 0;
      var end$$7 = dict$$17.length;
      for(;pos$$5 < end$$7;) {
        var b$$22 = dict$$17[pos$$5];
        if(b$$22 <= 21) {
          if(b$$22 === 12) {
            b$$22 = b$$22 << 8 | dict$$17[++pos$$5]
          }
          entries$$2.push([b$$22, operands$$1]);
          operands$$1 = [];
          ++pos$$5
        }else {
          operands$$1.push(parseOperand())
        }
      }
      return entries$$2
    }, parseIndex:function CFFParser_parseIndex(pos$$6) {
      var cffIndex = new CFFIndex;
      var bytes$$6 = this.bytes;
      var count$$17 = bytes$$6[pos$$6++] << 8 | bytes$$6[pos$$6++];
      var offsets$$1 = [];
      var start$$13 = pos$$6;
      var end$$8 = pos$$6;
      if(count$$17 != 0) {
        var offsetSize = bytes$$6[pos$$6++];
        var startPos = pos$$6 + (count$$17 + 1) * offsetSize - 1;
        var i$$119 = 0;
        var ii$$48 = count$$17 + 1;
        for(;i$$119 < ii$$48;++i$$119) {
          var offset$$29 = 0;
          var j$$40 = 0;
          for(;j$$40 < offsetSize;++j$$40) {
            offset$$29 <<= 8;
            offset$$29 += bytes$$6[pos$$6++]
          }
          offsets$$1.push(startPos + offset$$29)
        }
        end$$8 = offsets$$1[count$$17]
      }
      i$$119 = 0;
      ii$$48 = offsets$$1.length - 1;
      for(;i$$119 < ii$$48;++i$$119) {
        var offsetStart = offsets$$1[i$$119];
        var offsetEnd = offsets$$1[i$$119 + 1];
        cffIndex.add(bytes$$6.subarray(offsetStart, offsetEnd))
      }
      return{obj:cffIndex, endPos:end$$8}
    }, parseNameIndex:function CFFParser_parseNameIndex(index$$54) {
      var names$$5 = [];
      var i$$120 = 0;
      var ii$$49 = index$$54.count;
      for(;i$$120 < ii$$49;++i$$120) {
        var name$$61 = index$$54.get(i$$120);
        var length$$45 = Math.min(name$$61.length, 127);
        var data$$75 = [];
        var j$$41 = 0;
        for(;j$$41 < length$$45;++j$$41) {
          var c$$17 = name$$61[j$$41];
          if(j$$41 === 0 && c$$17 === 0) {
            data$$75[j$$41] = c$$17;
            continue
          }
          if(c$$17 < 33 || c$$17 > 126 || c$$17 === 91 || c$$17 === 93 || c$$17 === 40 || c$$17 === 41 || c$$17 === 123 || c$$17 === 125 || c$$17 === 60 || c$$17 === 62 || c$$17 === 47 || c$$17 === 37) {
            data$$75[j$$41] = 95;
            continue
          }
          data$$75[j$$41] = c$$17
        }
        names$$5.push(String.fromCharCode.apply(null, data$$75))
      }
      return names$$5
    }, parseStringIndex:function CFFParser_parseStringIndex(index$$55) {
      var strings$$3 = new CFFStrings;
      var i$$121 = 0;
      var ii$$50 = index$$55.count;
      for(;i$$121 < ii$$50;++i$$121) {
        var data$$76 = index$$55.get(i$$121);
        strings$$3.add(String.fromCharCode.apply(null, data$$76))
      }
      return strings$$3
    }, createDict:function CFFParser_createDict(type$$39, dict$$18, strings$$4) {
      var cffDict = new type$$39(strings$$4);
      var types$$1 = cffDict.types;
      var i$$122 = 0;
      var ii$$51 = dict$$18.length;
      for(;i$$122 < ii$$51;++i$$122) {
        var pair = dict$$18[i$$122];
        var key$$37 = pair[0];
        var value$$56 = pair[1];
        cffDict.setByKey(key$$37, value$$56)
      }
      return cffDict
    }, parseCharStrings:function CFFParser_parseCharStrings(charStringOffset$$1) {
      var charStrings = this.parseIndex(charStringOffset$$1).obj;
      var count$$18 = charStrings.count;
      var i$$123 = 0;
      for(;i$$123 < count$$18;i$$123++) {
        var charstring$$5 = charStrings.get(i$$123);
        var data$$77 = charstring$$5;
        var length$$46 = data$$77.length;
        var j$$42 = 0;
        for(;j$$42 <= length$$46;) {
          var value$$57 = data$$77[j$$42++];
          if(value$$57 == 12 && data$$77[j$$42++] == 0) {
            data$$77[j$$42 - 2] = 139;
            data$$77[j$$42 - 1] = 22
          }else {
            if(value$$57 === 28) {
              j$$42 += 2
            }else {
              if(value$$57 >= 247 && value$$57 <= 254) {
                j$$42++
              }else {
                if(value$$57 == 255) {
                  j$$42 += 4
                }
              }
            }
          }
        }
      }
      return charStrings
    }, parsePrivateDict:function CFFParser_parsePrivateDict(parentDict) {
      if(!parentDict.hasName("Private")) {
        return
      }
      var privateOffset = parentDict.getByName("Private");
      if(!isArray(privateOffset) || privateOffset.length !== 2) {
        parentDict.removeByName("Private");
        return
      }
      var size$$10 = privateOffset[0];
      var offset$$30 = privateOffset[1];
      if(size$$10 === 0 || offset$$30 >= this.bytes.length) {
        parentDict.removeByName("Private");
        return
      }
      var privateDictEnd = offset$$30 + size$$10;
      var dictData = this.bytes.subarray(offset$$30, privateDictEnd);
      var dict$$19 = this.parseDict(dictData);
      var privateDict = this.createDict(CFFPrivateDict, dict$$19, parentDict.strings);
      parentDict.privateDict = privateDict;
      if(!privateDict.getByName("Subrs")) {
        return
      }
      var subrsOffset = privateDict.getByName("Subrs");
      var relativeOffset$$1 = offset$$30 + subrsOffset;
      if(subrsOffset === 0 || relativeOffset$$1 >= this.bytes.length) {
        privateDict.removeByName("Subrs");
        return
      }
      var subrsIndex = this.parseIndex(relativeOffset$$1);
      privateDict.subrsIndex = subrsIndex.obj
    }, parseCharsets:function CFFParser_parseCharsets(pos$$7, length$$47, strings$$5, cid$$3) {
      if(pos$$7 == 0) {
        return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, ISOAdobeCharset)
      }else {
        if(pos$$7 == 1) {
          return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, ExpertCharset)
        }else {
          if(pos$$7 == 2) {
            return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, ExpertSubsetCharset)
          }
        }
      }
      var bytes$$7 = this.bytes;
      var start$$14 = pos$$7;
      var format$$8 = bytes$$7[pos$$7++];
      var charset$$3 = [".notdef"];
      length$$47 -= 1;
      switch(format$$8) {
        case 0:
          var i$$124 = 0;
          for(;i$$124 < length$$47;i$$124++) {
            var id$$3 = bytes$$7[pos$$7++] << 8 | bytes$$7[pos$$7++];
            charset$$3.push(cid$$3 ? id$$3 : strings$$5.get(id$$3))
          }
          break;
        case 1:
          for(;charset$$3.length <= length$$47;) {
            id$$3 = bytes$$7[pos$$7++] << 8 | bytes$$7[pos$$7++];
            var count$$19 = bytes$$7[pos$$7++];
            i$$124 = 0;
            for(;i$$124 <= count$$19;i$$124++) {
              charset$$3.push(cid$$3 ? id$$3++ : strings$$5.get(id$$3++))
            }
          }
          break;
        case 2:
          for(;charset$$3.length <= length$$47;) {
            id$$3 = bytes$$7[pos$$7++] << 8 | bytes$$7[pos$$7++];
            count$$19 = bytes$$7[pos$$7++] << 8 | bytes$$7[pos$$7++];
            i$$124 = 0;
            for(;i$$124 <= count$$19;i$$124++) {
              charset$$3.push(cid$$3 ? id$$3++ : strings$$5.get(id$$3++))
            }
          }
          break;
        default:
          error$$3("Unknown charset format")
      }
      var end$$9 = pos$$7;
      var raw$$2 = bytes$$7.subarray(start$$14, end$$9);
      return new CFFCharset(false, format$$8, charset$$3, raw$$2)
    }, parseEncoding:function CFFParser_parseEncoding(pos$$8, properties$$23, strings$$6, charset$$4) {
      var encoding$$9 = {};
      var bytes$$8 = this.bytes;
      var predefined = false;
      var hasSupplement = false;
      var format$$9;
      var raw$$3 = null;
      if(pos$$8 == 0 || pos$$8 == 1) {
        predefined = true;
        format$$9 = pos$$8;
        var gid$$1 = 1;
        var baseEncoding$$1 = pos$$8 ? Encodings.ExpertEncoding : Encodings.StandardEncoding;
        var i$$125 = 0;
        var ii$$52 = charset$$4.length;
        for(;i$$125 < ii$$52;i$$125++) {
          var index$$56 = baseEncoding$$1.indexOf(charset$$4[i$$125]);
          if(index$$56 != -1) {
            encoding$$9[index$$56] = gid$$1++
          }
        }
      }else {
        var dataStart = pos$$8;
        format$$9 = bytes$$8[pos$$8++];
        switch(format$$9 & 127) {
          case 0:
            var glyphsCount = bytes$$8[pos$$8++];
            i$$125 = 1;
            for(;i$$125 <= glyphsCount;i$$125++) {
              encoding$$9[bytes$$8[pos$$8++]] = i$$125
            }
            break;
          case 1:
            var rangesCount = bytes$$8[pos$$8++];
            gid$$1 = 1;
            i$$125 = 0;
            for(;i$$125 < rangesCount;i$$125++) {
              var start$$15 = bytes$$8[pos$$8++];
              var left$$2 = bytes$$8[pos$$8++];
              var j$$43 = start$$15;
              for(;j$$43 <= start$$15 + left$$2;j$$43++) {
                encoding$$9[j$$43] = gid$$1++
              }
            }
            break;
          default:
            error$$3("Unknow encoding format: " + format$$9 + " in CFF")
        }
        var dataEnd = pos$$8;
        if(format$$9 & 128) {
          bytes$$8[dataStart] &= 127;
          var supplementsCount$$inline_102 = bytes$$8[pos$$8++];
          var i$$inline_103 = 0;
          for(;i$$inline_103 < supplementsCount$$inline_102;i$$inline_103++) {
            var code$$inline_104 = bytes$$8[pos$$8++];
            var sid$$inline_105 = (bytes$$8[pos$$8++] << 8) + (bytes$$8[pos$$8++] & 255);
            encoding$$9[code$$inline_104] = properties$$23.differences.indexOf(strings$$6.get(sid$$inline_105))
          }
          hasSupplement = true
        }
        raw$$3 = bytes$$8.subarray(dataStart, dataEnd)
      }
      format$$9 = format$$9 & 127;
      return new CFFEncoding(predefined, format$$9, encoding$$9, raw$$3)
    }, parseFDSelect:function CFFParser_parseFDSelect(pos$$9, length$$48) {
      var start$$16 = pos$$9;
      var bytes$$9 = this.bytes;
      var format$$10 = bytes$$9[pos$$9++];
      var fdSelect = [];
      switch(format$$10) {
        case 0:
          var i$$127 = 0;
          for(;i$$127 < length$$48;++i$$127) {
            var id$$4 = bytes$$9[pos$$9++];
            fdSelect.push(id$$4)
          }
          break;
        case 3:
          var rangesCount$$1 = bytes$$9[pos$$9++] << 8 | bytes$$9[pos$$9++];
          i$$127 = 0;
          for(;i$$127 < rangesCount$$1;++i$$127) {
            var first$$4 = bytes$$9[pos$$9++] << 8 | bytes$$9[pos$$9++];
            var fdIndex = bytes$$9[pos$$9++];
            var next$$2 = bytes$$9[pos$$9] << 8 | bytes$$9[pos$$9 + 1];
            var j$$44 = first$$4;
            for(;j$$44 < next$$2;++j$$44) {
              fdSelect.push(fdIndex)
            }
          }
          pos$$9 += 2;
          break;
        default:
          error$$3("Unknown fdselect format " + format$$10)
      }
      var end$$10 = pos$$9;
      return new CFFFDSelect(fdSelect, bytes$$9.subarray(start$$16, end$$10))
    }};
    return CFFParser$$1
  }();
  var CFF = function CFFClosure() {
    function CFF$$1() {
      this.header = null;
      this.names = [];
      this.topDict = null;
      this.strings = new CFFStrings;
      this.globalSubrIndex = null;
      this.encoding = null;
      this.charset = null;
      this.charStrings = null;
      this.fdArray = [];
      this.fdSelect = null;
      this.isCIDFont = false
    }
    return CFF$$1
  }();
  var CFFHeader = function CFFHeaderClosure() {
    function CFFHeader$$1(major$$1, minor$$1, hdrSize$$1, offSize$$1) {
      this.major = major$$1;
      this.minor = minor$$1;
      this.hdrSize = hdrSize$$1;
      this.offSize = offSize$$1
    }
    return CFFHeader$$1
  }();
  var CFFStrings = function CFFStringsClosure() {
    function CFFStrings$$1() {
      this.strings = []
    }
    CFFStrings$$1.prototype = {get:function CFFStrings_get(index$$57) {
      if(index$$57 >= 0 && index$$57 <= 390) {
        return CFFStandardStrings[index$$57]
      }
      if(index$$57 - 391 <= this.strings.length) {
        return this.strings[index$$57 - 391]
      }
      return CFFStandardStrings[0]
    }, add:function CFFStrings_add(value$$58) {
      this.strings.push(value$$58)
    }, get count() {
      return this.strings.length
    }};
    return CFFStrings$$1
  }();
  var CFFIndex = function CFFIndexClosure() {
    function CFFIndex$$1() {
      this.objects = [];
      this.length = 0
    }
    CFFIndex$$1.prototype = {add:function CFFIndex_add(data$$78) {
      this.length += data$$78.length;
      this.objects.push(data$$78)
    }, get:function CFFIndex_get(index$$58) {
      return this.objects[index$$58]
    }, get count() {
      return this.objects.length
    }};
    return CFFIndex$$1
  }();
  var CFFDict = function CFFDictClosure() {
    function CFFDict$$1(tables$$2, strings$$7) {
      this.keyToNameMap = tables$$2.keyToNameMap;
      this.nameToKeyMap = tables$$2.nameToKeyMap;
      this.defaults = tables$$2.defaults;
      this.types = tables$$2.types;
      this.opcodes = tables$$2.opcodes;
      this.order = tables$$2.order;
      this.strings = strings$$7;
      this.values = {}
    }
    CFFDict$$1.prototype = {setByKey:function CFFDict_setByKey(key$$38, value$$59) {
      if(!(key$$38 in this.keyToNameMap)) {
        return false
      }
      if(value$$59.length === 0) {
        return true
      }
      var type$$40 = this.types[key$$38];
      if(type$$40 === "num" || type$$40 === "sid" || type$$40 === "offset") {
        value$$59 = value$$59[0]
      }
      this.values[key$$38] = value$$59;
      return true
    }, hasName:function CFFDict_hasName(name$$62) {
      return this.nameToKeyMap[name$$62] in this.values
    }, getByName:function CFFDict_getByName(name$$63) {
      if(!(name$$63 in this.nameToKeyMap)) {
        error$$3('Invalid dictionary name "' + name$$63 + '"')
      }
      var key$$39 = this.nameToKeyMap[name$$63];
      if(!(key$$39 in this.values)) {
        return this.defaults[key$$39]
      }
      return this.values[key$$39]
    }, removeByName:function CFFDict_removeByName(name$$64) {
      delete this.values[this.nameToKeyMap[name$$64]]
    }};
    CFFDict$$1.createTables = function CFFDict_createTables(layout) {
      var tables$$3 = {keyToNameMap:{}, nameToKeyMap:{}, defaults:{}, types:{}, opcodes:{}, order:[]};
      var i$$128 = 0;
      var ii$$53 = layout.length;
      for(;i$$128 < ii$$53;++i$$128) {
        var entry$$2 = layout[i$$128];
        var key$$40 = isArray(entry$$2[0]) ? (entry$$2[0][0] << 8) + entry$$2[0][1] : entry$$2[0];
        tables$$3.keyToNameMap[key$$40] = entry$$2[1];
        tables$$3.nameToKeyMap[entry$$2[1]] = key$$40;
        tables$$3.types[key$$40] = entry$$2[2];
        tables$$3.defaults[key$$40] = entry$$2[3];
        tables$$3.opcodes[key$$40] = isArray(entry$$2[0]) ? entry$$2[0] : [entry$$2[0]];
        tables$$3.order.push(key$$40)
      }
      return tables$$3
    };
    return CFFDict$$1
  }();
  var CFFTopDict = function CFFTopDictClosure() {
    function CFFTopDict$$1(strings$$8) {
      if(tables$$4 === null) {
        tables$$4 = CFFDict.createTables(layout$$1)
      }
      CFFDict.call(this, tables$$4, strings$$8);
      this.privateDict = null
    }
    var layout$$1 = [[[12, 30], "ROS", ["sid", "sid", "num"], null], [[12, 20], "SyntheticBase", "num", null], [0, "version", "sid", null], [1, "Notice", "sid", null], [[12, 0], "Copyright", "sid", null], [2, "FullName", "sid", null], [3, "FamilyName", "sid", null], [4, "Weight", "sid", null], [[12, 1], "isFixedPitch", "num", 0], [[12, 2], "ItalicAngle", "num", 0], [[12, 3], "UnderlinePosition", "num", -100], [[12, 4], "UnderlineThickness", "num", 50], [[12, 5], "PaintType", "num", 0], [[12, 6], 
    "CharstringType", "num", 2], [[12, 7], "FontMatrix", ["num", "num", "num", "num", "num", "num"], [0.001, 0, 0, 0.001, 0, 0]], [13, "UniqueID", "num", null], [5, "FontBBox", ["num", "num", "num", "num"], [0, 0, 0, 0]], [[12, 8], "StrokeWidth", "num", 0], [14, "XUID", "array", null], [15, "charset", "offset", 0], [16, "Encoding", "offset", 0], [17, "CharStrings", "offset", 0], [18, "Private", ["offset", "offset"], null], [[12, 21], "PostScript", "sid", null], [[12, 22], "BaseFontName", "sid", null], 
    [[12, 23], "BaseFontBlend", "delta", null], [[12, 31], "CIDFontVersion", "num", 0], [[12, 32], "CIDFontRevision", "num", 0], [[12, 33], "CIDFontType", "num", 0], [[12, 34], "CIDCount", "num", 8720], [[12, 35], "UIDBase", "num", null], [[12, 36], "FDArray", "offset", null], [[12, 37], "FDSelect", "offset", null], [[12, 38], "FontName", "sid", null]];
    var tables$$4 = null;
    CFFTopDict$$1.prototype = Object.create(CFFDict.prototype);
    return CFFTopDict$$1
  }();
  var CFFPrivateDict = function CFFPrivateDictClosure() {
    function CFFPrivateDict$$1(strings$$9) {
      if(tables$$5 === null) {
        tables$$5 = CFFDict.createTables(layout$$2)
      }
      CFFDict.call(this, tables$$5, strings$$9);
      this.subrsIndex = null
    }
    var layout$$2 = [[6, "BlueValues", "delta", null], [7, "OtherBlues", "delta", null], [8, "FamilyBlues", "delta", null], [9, "FamilyOtherBlues", "delta", null], [[12, 9], "BlueScale", "num", 0.039625], [[12, 10], "BlueShift", "num", 7], [[12, 11], "BlueFuzz", "num", 1], [10, "StdHW", "num", null], [11, "StdVW", "num", null], [[12, 12], "StemSnapH", "delta", null], [[12, 13], "StemSnapV", "delta", null], [[12, 14], "ForceBold", "num", 0], [[12, 17], "LanguageGroup", "num", 0], [[12, 18], "ExpansionFactor", 
    "num", 0.06], [[12, 19], "initialRandomSeed", "num", 0], [19, "Subrs", "offset", null], [20, "defaultWidthX", "num", 0], [21, "nominalWidthX", "num", 0]];
    var tables$$5 = null;
    CFFPrivateDict$$1.prototype = Object.create(CFFDict.prototype);
    return CFFPrivateDict$$1
  }();
  var CFFCharsetPredefinedTypes = {ISO_ADOBE:0, EXPERT:1, EXPERT_SUBSET:2};
  var JSCompiler_object_inline_FORMAT0_288 = 0;
  var JSCompiler_object_inline_FORMAT1_289 = 1;
  var JSCompiler_object_inline_FORMAT2_290 = 2;
  var CFFCharset = function CFFCharsetClosure() {
    function CFFCharset$$1(predefined$$1, format$$11, charset$$5, raw$$4) {
      this.predefined = predefined$$1;
      this.format = format$$11;
      this.charset = charset$$5;
      this.raw = raw$$4
    }
    return CFFCharset$$1
  }();
  var JSCompiler_object_inline_STANDARD_291 = 0;
  var JSCompiler_object_inline_EXPERT_292 = 1;
  JSCompiler_object_inline_FORMAT0_288 = 0, JSCompiler_object_inline_FORMAT1_289 = 1, JSCompiler_object_inline_FORMAT2_290 = void 0, true;
  var CFFEncoding = function CFFEncodingClosure() {
    function CFFEncoding$$1(predefined$$2, format$$12, encoding$$10, raw$$5) {
      this.predefined = predefined$$2;
      this.format = format$$12;
      this.encoding = encoding$$10;
      this.raw = raw$$5
    }
    return CFFEncoding$$1
  }();
  var CFFFDSelect = function CFFFDSelectClosure() {
    function CFFFDSelect$$1(fdSelect$$1, raw$$6) {
      this.fdSelect = fdSelect$$1;
      this.raw = raw$$6
    }
    return CFFFDSelect$$1
  }();
  var CFFOffsetTracker = function CFFOffsetTrackerClosure() {
    function CFFOffsetTracker$$1() {
      this.offsets = {}
    }
    CFFOffsetTracker$$1.prototype = {isTracking:function CFFOffsetTracker_isTracking(key$$41) {
      return key$$41 in this.offsets
    }, track:function CFFOffsetTracker_track(key$$42, location$$21) {
      if(key$$42 in this.offsets) {
        error$$3("Already tracking location of " + key$$42)
      }
      this.offsets[key$$42] = location$$21
    }, offset:function CFFOffsetTracker_offset(value$$60) {
      var key$$43;
      for(key$$43 in this.offsets) {
        this.offsets[key$$43] += value$$60
      }
    }, setEntryLocation:function CFFOffsetTracker_setEntryLocation(key$$44, values$$4, output$$2) {
      if(!(key$$44 in this.offsets)) {
        error$$3("Not tracking location of " + key$$44)
      }
      var data$$79 = output$$2.data;
      var dataOffset = this.offsets[key$$44];
      var size$$11 = 5;
      var i$$129 = 0;
      var ii$$54 = values$$4.length;
      for(;i$$129 < ii$$54;++i$$129) {
        var offset0$$1 = i$$129 * size$$11 + dataOffset;
        var offset1$$1 = offset0$$1 + 1;
        var offset2 = offset0$$1 + 2;
        var offset3 = offset0$$1 + 3;
        var offset4 = offset0$$1 + 4;
        if(data$$79[offset0$$1] !== 29 || data$$79[offset1$$1] !== 0 || data$$79[offset2] !== 0 || data$$79[offset3] !== 0 || data$$79[offset4] !== 0) {
          error$$3("writing to an offset that is not empty")
        }
        var value$$61 = values$$4[i$$129];
        data$$79[offset0$$1] = 29;
        data$$79[offset1$$1] = value$$61 >> 24 & 255;
        data$$79[offset2] = value$$61 >> 16 & 255;
        data$$79[offset3] = value$$61 >> 8 & 255;
        data$$79[offset4] = value$$61 & 255
      }
    }};
    return CFFOffsetTracker$$1
  }();
  var CFFCompiler = function CFFCompilerClosure() {
    function stringToArray$$1(str$$27) {
      var array$$13 = [];
      var i$$130 = 0;
      var ii$$55 = str$$27.length;
      for(;i$$130 < ii$$55;++i$$130) {
        array$$13[i$$130] = str$$27.charCodeAt(i$$130)
      }
      return array$$13
    }
    function CFFCompiler$$1(cff$$5) {
      this.cff = cff$$5
    }
    CFFCompiler$$1.prototype = {compile:function CFFCompiler_compile() {
      var cff$$6 = this.cff;
      var output$$3 = {data:[], length:0, add:function CFFCompiler_add(data$$80) {
        this.data = this.data.concat(data$$80);
        this.length = this.data.length
      }};
      var header$$8 = this.compileHeader(cff$$6.header);
      output$$3.add(header$$8);
      var nameIndex$$1 = this.compileNameIndex(cff$$6.names);
      output$$3.add(nameIndex$$1);
      var compiled = this.compileTopDicts([cff$$6.topDict], output$$3.length);
      output$$3.add(compiled.output);
      var topDictTracker = compiled.trackers[0];
      var stringIndex$$1 = this.compileStringIndex(cff$$6.strings.strings);
      output$$3.add(stringIndex$$1);
      var globalSubrIndex$$1 = this.compileIndex(cff$$6.globalSubrIndex);
      output$$3.add(globalSubrIndex$$1);
      if(cff$$6.encoding && cff$$6.topDict.hasName("Encoding")) {
        if(cff$$6.encoding.predefined) {
          topDictTracker.setEntryLocation("Encoding", [cff$$6.encoding.format], output$$3)
        }else {
          var encoding$$11 = this.compileEncoding(cff$$6.encoding);
          topDictTracker.setEntryLocation("Encoding", [output$$3.length], output$$3);
          output$$3.add(encoding$$11)
        }
      }
      if(cff$$6.charset && cff$$6.topDict.hasName("charset")) {
        if(cff$$6.charset.predefined) {
          topDictTracker.setEntryLocation("charset", [cff$$6.charset.format], output$$3)
        }else {
          var charset$$6 = this.compileCharset(cff$$6.charset);
          topDictTracker.setEntryLocation("charset", [output$$3.length], output$$3);
          output$$3.add(charset$$6)
        }
      }
      var charStrings$$1 = this.compileCharStrings(cff$$6.charStrings);
      topDictTracker.setEntryLocation("CharStrings", [output$$3.length], output$$3);
      output$$3.add(charStrings$$1);
      if(cff$$6.isCIDFont) {
        topDictTracker.setEntryLocation("FDSelect", [output$$3.length], output$$3);
        var fdSelect$$2 = this.compileFDSelect(cff$$6.fdSelect.raw);
        output$$3.add(fdSelect$$2);
        compiled = this.compileTopDicts(cff$$6.fdArray, output$$3.length);
        topDictTracker.setEntryLocation("FDArray", [output$$3.length], output$$3);
        output$$3.add(compiled.output);
        var fontDictTrackers = compiled.trackers;
        this.compilePrivateDicts(cff$$6.fdArray, fontDictTrackers, output$$3)
      }
      this.compilePrivateDicts([cff$$6.topDict], [topDictTracker], output$$3);
      return output$$3.data
    }, encodeNumber:function CFFCompiler_encodeNumber(value$$62) {
      if(parseFloat(value$$62) == parseInt(value$$62) && !isNaN(value$$62)) {
        return this.encodeInteger(value$$62)
      }else {
        return this.encodeFloat(value$$62)
      }
    }, encodeFloat:function CFFCompiler_encodeFloat(value$$63) {
      value$$63 = value$$63.toString();
      if(value$$63.substr(0, 2) === "0.") {
        value$$63 = value$$63.substr(1)
      }else {
        if(value$$63.substr(0, 3) === "-0.") {
          value$$63 = "-" + value$$63.substr(2)
        }
      }
      var nibbles = [];
      var i$$131 = 0;
      var ii$$56 = value$$63.length;
      for(;i$$131 < ii$$56;++i$$131) {
        var a$$17 = value$$63.charAt(i$$131);
        var b$$24 = value$$63.charAt(i$$131 + 1);
        var nibble;
        if(a$$17 === "e" && b$$24 === "-") {
          nibble = 12;
          ++i$$131
        }else {
          if(a$$17 === ".") {
            nibble = 10
          }else {
            if(a$$17 === "E") {
              nibble = 11
            }else {
              if(a$$17 === "-") {
                nibble = 14
              }else {
                nibble = a$$17
              }
            }
          }
        }
        nibbles.push(nibble)
      }
      nibbles.push(15);
      if(nibbles.length % 2) {
        nibbles.push(15)
      }
      var out$$4 = [30];
      i$$131 = 0;
      ii$$56 = nibbles.length;
      for(;i$$131 < ii$$56;i$$131 += 2) {
        out$$4.push(nibbles[i$$131] << 4 | nibbles[i$$131 + 1])
      }
      return out$$4
    }, encodeInteger:function CFFCompiler_encodeInteger(value$$64) {
      var code$$15;
      if(value$$64 >= -107 && value$$64 <= 107) {
        code$$15 = [value$$64 + 139]
      }else {
        if(value$$64 >= 108 && value$$64 <= 1131) {
          value$$64 = [value$$64 - 108];
          code$$15 = [(value$$64 >> 8) + 247, value$$64 & 255]
        }else {
          if(value$$64 >= -1131 && value$$64 <= -108) {
            value$$64 = -value$$64 - 108;
            code$$15 = [(value$$64 >> 8) + 251, value$$64 & 255]
          }else {
            if(value$$64 >= -32768 && value$$64 <= 32767) {
              code$$15 = [28, value$$64 >> 8 & 255, value$$64 & 255]
            }else {
              code$$15 = [29, value$$64 >> 24 & 255, value$$64 >> 16 & 255, value$$64 >> 8 & 255, value$$64 & 255]
            }
          }
        }
      }
      return code$$15
    }, compileHeader:function CFFCompiler_compileHeader(header$$9) {
      return[header$$9.major, header$$9.minor, header$$9.hdrSize, header$$9.offSize]
    }, compileNameIndex:function CFFCompiler_compileNameIndex(names$$6) {
      var nameIndex$$2 = new CFFIndex;
      var i$$132 = 0;
      var ii$$57 = names$$6.length;
      for(;i$$132 < ii$$57;++i$$132) {
        nameIndex$$2.add(stringToArray$$1(names$$6[i$$132]))
      }
      return this.compileIndex(nameIndex$$2)
    }, compileTopDicts:function CFFCompiler_compileTopDicts(dicts, length$$49) {
      var fontDictTrackers$$1 = [];
      var fdArrayIndex$$1 = new CFFIndex;
      var i$$133 = 0;
      var ii$$58 = dicts.length;
      for(;i$$133 < ii$$58;++i$$133) {
        var fontDict$$1 = dicts[i$$133];
        var fontDictTracker = new CFFOffsetTracker;
        var fontDictData = this.compileDict(fontDict$$1, fontDictTracker);
        fontDictTrackers$$1.push(fontDictTracker);
        fdArrayIndex$$1.add(fontDictData);
        fontDictTracker.offset(length$$49)
      }
      fdArrayIndex$$1 = this.compileIndex(fdArrayIndex$$1, fontDictTrackers$$1);
      return{trackers:fontDictTrackers$$1, output:fdArrayIndex$$1}
    }, compilePrivateDicts:function CFFCompiler_compilePrivateDicts(dicts$$1, trackers, output$$4) {
      var i$$134 = 0;
      var ii$$59 = dicts$$1.length;
      for(;i$$134 < ii$$59;++i$$134) {
        var fontDict$$2 = dicts$$1[i$$134];
        if(!fontDict$$2.privateDict || !fontDict$$2.hasName("Private")) {
          continue
        }
        var privateDict$$1 = fontDict$$2.privateDict;
        var privateDictTracker = new CFFOffsetTracker;
        var privateDictData = this.compileDict(privateDict$$1, privateDictTracker);
        privateDictTracker.offset(output$$4.length);
        trackers[i$$134].setEntryLocation("Private", [privateDictData.length, output$$4.length], output$$4);
        output$$4.add(privateDictData);
        if(privateDict$$1.subrsIndex && privateDict$$1.hasName("Subrs")) {
          var subrs$$2 = this.compileIndex(privateDict$$1.subrsIndex);
          privateDictTracker.setEntryLocation("Subrs", [privateDictData.length], output$$4);
          output$$4.add(subrs$$2)
        }
      }
    }, compileDict:function CFFCompiler_compileDict(dict$$20, offsetTracker) {
      var out$$5 = [];
      var order$$1 = dict$$20.order;
      var i$$135 = 0;
      for(;i$$135 < order$$1.length;++i$$135) {
        var key$$45 = order$$1[i$$135];
        if(!(key$$45 in dict$$20.values)) {
          continue
        }
        var values$$5 = dict$$20.values[key$$45];
        var types$$2 = dict$$20.types[key$$45];
        if(!isArray(types$$2)) {
          types$$2 = [types$$2]
        }
        if(!isArray(values$$5)) {
          values$$5 = [values$$5]
        }
        if(values$$5.length === 0) {
          continue
        }
        var j$$45 = 0;
        var jj$$11 = types$$2.length;
        for(;j$$45 < jj$$11;++j$$45) {
          var type$$41 = types$$2[j$$45];
          var value$$65 = values$$5[j$$45];
          switch(type$$41) {
            case "num":
            ;
            case "sid":
              out$$5 = out$$5.concat(this.encodeNumber(value$$65));
              break;
            case "offset":
              var name$$65 = dict$$20.keyToNameMap[key$$45];
              if(!offsetTracker.isTracking(name$$65)) {
                offsetTracker.track(name$$65, out$$5.length)
              }
              out$$5 = out$$5.concat([29, 0, 0, 0, 0]);
              break;
            case "array":
            ;
            case "delta":
              out$$5 = out$$5.concat(this.encodeNumber(value$$65));
              var k$$10 = 1;
              var kk$$1 = values$$5.length;
              for(;k$$10 < kk$$1;++k$$10) {
                out$$5 = out$$5.concat(this.encodeNumber(values$$5[k$$10]))
              }
              break;
            default:
              error$$3("Unknown data type of " + type$$41)
          }
        }
        out$$5 = out$$5.concat(dict$$20.opcodes[key$$45])
      }
      return out$$5
    }, compileStringIndex:function CFFCompiler_compileStringIndex(strings$$10) {
      var stringIndex$$2 = new CFFIndex;
      var i$$136 = 0;
      var ii$$60 = strings$$10.length;
      for(;i$$136 < ii$$60;++i$$136) {
        stringIndex$$2.add(stringToArray$$1(strings$$10[i$$136]))
      }
      return this.compileIndex(stringIndex$$2)
    }, compileGlobalSubrIndex:function CFFCompiler_compileGlobalSubrIndex() {
      var globalSubrIndex$$2 = this.cff.globalSubrIndex;
      this.out.writeByteArray(this.compileIndex(globalSubrIndex$$2))
    }, compileCharStrings:function CFFCompiler_compileCharStrings(charStrings$$2) {
      return this.compileIndex(charStrings$$2)
    }, compileCharset:function CFFCompiler_compileCharset(charset$$7) {
      return this.compileTypedArray(charset$$7.raw)
    }, compileEncoding:function CFFCompiler_compileEncoding(encoding$$12) {
      return this.compileTypedArray(encoding$$12.raw)
    }, compileFDSelect:function CFFCompiler_compileFDSelect(fdSelect$$3) {
      return this.compileTypedArray(fdSelect$$3)
    }, compileTypedArray:function CFFCompiler_compileTypedArray(data$$81) {
      var out$$6 = [];
      var i$$137 = 0;
      var ii$$61 = data$$81.length;
      for(;i$$137 < ii$$61;++i$$137) {
        out$$6[i$$137] = data$$81[i$$137]
      }
      return out$$6
    }, compileIndex:function CFFCompiler_compileIndex(index$$59, trackers$$1) {
      trackers$$1 = trackers$$1 || [];
      var objects$$1 = index$$59.objects;
      var count$$20 = objects$$1.length;
      if(count$$20 == 0) {
        return[0, 0, 0]
      }
      var data$$82 = [count$$20 >> 8 & 255, count$$20 & 255];
      var lastOffset$$1 = 1;
      var i$$138 = 0;
      for(;i$$138 < count$$20;++i$$138) {
        lastOffset$$1 += objects$$1[i$$138].length
      }
      var offsetSize$$1;
      if(lastOffset$$1 < 256) {
        offsetSize$$1 = 1
      }else {
        if(lastOffset$$1 < 65536) {
          offsetSize$$1 = 2
        }else {
          if(lastOffset$$1 < 16777216) {
            offsetSize$$1 = 3
          }else {
            offsetSize$$1 = 4
          }
        }
      }
      data$$82.push(offsetSize$$1);
      var relativeOffset$$2 = 1;
      i$$138 = 0;
      for(;i$$138 < count$$20 + 1;i$$138++) {
        if(offsetSize$$1 === 1) {
          data$$82.push(relativeOffset$$2 & 255)
        }else {
          if(offsetSize$$1 === 2) {
            data$$82.push(relativeOffset$$2 >> 8 & 255, relativeOffset$$2 & 255)
          }else {
            if(offsetSize$$1 === 3) {
              data$$82.push(relativeOffset$$2 >> 16 & 255, relativeOffset$$2 >> 8 & 255, relativeOffset$$2 & 255)
            }else {
              data$$82.push(relativeOffset$$2 >>> 24 & 255, relativeOffset$$2 >> 16 & 255, relativeOffset$$2 >> 8 & 255, relativeOffset$$2 & 255)
            }
          }
        }
        if(objects$$1[i$$138]) {
          relativeOffset$$2 += objects$$1[i$$138].length
        }
      }
      var offset$$31 = data$$82.length;
      i$$138 = 0;
      for(;i$$138 < count$$20;i$$138++) {
        if(trackers$$1[i$$138]) {
          trackers$$1[i$$138].offset(data$$82.length)
        }
        var j$$46 = 0;
        var jj$$12 = objects$$1[i$$138].length;
        for(;j$$46 < jj$$12;j$$46++) {
          data$$82.push(objects$$1[i$$138][j$$46])
        }
      }
      return data$$82
    }};
    return CFFCompiler$$1
  }();
  var GlyphsUnicode = {A:65, AE:198, AEacute:508, AEmacron:482, AEsmall:63462, Aacute:193, Aacutesmall:63457, Abreve:258, Abreveacute:7854, Abrevecyrillic:1232, Abrevedotbelow:7862, Abrevegrave:7856, Abrevehookabove:7858, Abrevetilde:7860, Acaron:461, Acircle:9398, Acircumflex:194, Acircumflexacute:7844, Acircumflexdotbelow:7852, Acircumflexgrave:7846, Acircumflexhookabove:7848, Acircumflexsmall:63458, Acircumflextilde:7850, Acute:63177, Acutesmall:63412, Acyrillic:1040, Adblgrave:512, Adieresis:196, 
  Adieresiscyrillic:1234, Adieresismacron:478, Adieresissmall:63460, Adotbelow:7840, Adotmacron:480, Agrave:192, Agravesmall:63456, Ahookabove:7842, Aiecyrillic:1236, Ainvertedbreve:514, Alpha:913, Alphatonos:902, Amacron:256, Amonospace:65313, Aogonek:260, Aring:197, Aringacute:506, Aringbelow:7680, Aringsmall:63461, Asmall:63329, Atilde:195, Atildesmall:63459, Aybarmenian:1329, B:66, Bcircle:9399, Bdotaccent:7682, Bdotbelow:7684, Becyrillic:1041, Benarmenian:1330, Beta:914, Bhook:385, Blinebelow:7686, 
  Bmonospace:65314, Brevesmall:63220, Bsmall:63330, Btopbar:386, C:67, Caarmenian:1342, Cacute:262, Caron:63178, Caronsmall:63221, Ccaron:268, Ccedilla:199, Ccedillaacute:7688, Ccedillasmall:63463, Ccircle:9400, Ccircumflex:264, Cdot:266, Cdotaccent:266, Cedillasmall:63416, Chaarmenian:1353, Cheabkhasiancyrillic:1212, Checyrillic:1063, Chedescenderabkhasiancyrillic:1214, Chedescendercyrillic:1206, Chedieresiscyrillic:1268, Cheharmenian:1347, Chekhakassiancyrillic:1227, Cheverticalstrokecyrillic:1208, 
  Chi:935, Chook:391, Circumflexsmall:63222, Cmonospace:65315, Coarmenian:1361, Csmall:63331, D:68, DZ:497, DZcaron:452, Daarmenian:1332, Dafrican:393, Dcaron:270, Dcedilla:7696, Dcircle:9401, Dcircumflexbelow:7698, Dcroat:272, Ddotaccent:7690, Ddotbelow:7692, Decyrillic:1044, Deicoptic:1006, Delta:8710, Deltagreek:916, Dhook:394, Dieresis:63179, DieresisAcute:63180, DieresisGrave:63181, Dieresissmall:63400, Digammagreek:988, Djecyrillic:1026, Dlinebelow:7694, Dmonospace:65316, Dotaccentsmall:63223, 
  Dslash:272, Dsmall:63332, Dtopbar:395, Dz:498, Dzcaron:453, Dzeabkhasiancyrillic:1248, Dzecyrillic:1029, Dzhecyrillic:1039, E:69, Eacute:201, Eacutesmall:63465, Ebreve:276, Ecaron:282, Ecedillabreve:7708, Echarmenian:1333, Ecircle:9402, Ecircumflex:202, Ecircumflexacute:7870, Ecircumflexbelow:7704, Ecircumflexdotbelow:7878, Ecircumflexgrave:7872, Ecircumflexhookabove:7874, Ecircumflexsmall:63466, Ecircumflextilde:7876, Ecyrillic:1028, Edblgrave:516, Edieresis:203, Edieresissmall:63467, Edot:278, 
  Edotaccent:278, Edotbelow:7864, Efcyrillic:1060, Egrave:200, Egravesmall:63464, Eharmenian:1335, Ehookabove:7866, Eightroman:8551, Einvertedbreve:518, Eiotifiedcyrillic:1124, Elcyrillic:1051, Elevenroman:8554, Emacron:274, Emacronacute:7702, Emacrongrave:7700, Emcyrillic:1052, Emonospace:65317, Encyrillic:1053, Endescendercyrillic:1186, Eng:330, Enghecyrillic:1188, Enhookcyrillic:1223, Eogonek:280, Eopen:400, Epsilon:917, Epsilontonos:904, Ercyrillic:1056, Ereversed:398, Ereversedcyrillic:1069, 
  Escyrillic:1057, Esdescendercyrillic:1194, Esh:425, Esmall:63333, Eta:919, Etarmenian:1336, Etatonos:905, Eth:208, Ethsmall:63472, Etilde:7868, Etildebelow:7706, Euro:8364, Ezh:439, Ezhcaron:494, Ezhreversed:440, F:70, Fcircle:9403, Fdotaccent:7710, Feharmenian:1366, Feicoptic:996, Fhook:401, Fitacyrillic:1138, Fiveroman:8548, Fmonospace:65318, Fourroman:8547, Fsmall:63334, G:71, GBsquare:13191, Gacute:500, Gamma:915, Gammaafrican:404, Gangiacoptic:1002, Gbreve:286, Gcaron:486, Gcedilla:290, Gcircle:9404, 
  Gcircumflex:284, Gcommaaccent:290, Gdot:288, Gdotaccent:288, Gecyrillic:1043, Ghadarmenian:1346, Ghemiddlehookcyrillic:1172, Ghestrokecyrillic:1170, Gheupturncyrillic:1168, Ghook:403, Gimarmenian:1331, Gjecyrillic:1027, Gmacron:7712, Gmonospace:65319, Grave:63182, Gravesmall:63328, Gsmall:63335, Gsmallhook:667, Gstroke:484, H:72, H18533:9679, H18543:9642, H18551:9643, H22073:9633, HPsquare:13259, Haabkhasiancyrillic:1192, Hadescendercyrillic:1202, Hardsigncyrillic:1066, Hbar:294, Hbrevebelow:7722, 
  Hcedilla:7720, Hcircle:9405, Hcircumflex:292, Hdieresis:7718, Hdotaccent:7714, Hdotbelow:7716, Hmonospace:65320, Hoarmenian:1344, Horicoptic:1E3, Hsmall:63336, Hungarumlaut:63183, Hungarumlautsmall:63224, Hzsquare:13200, I:73, IAcyrillic:1071, IJ:306, IUcyrillic:1070, Iacute:205, Iacutesmall:63469, Ibreve:300, Icaron:463, Icircle:9406, Icircumflex:206, Icircumflexsmall:63470, Icyrillic:1030, Idblgrave:520, Idieresis:207, Idieresisacute:7726, Idieresiscyrillic:1252, Idieresissmall:63471, Idot:304, 
  Idotaccent:304, Idotbelow:7882, Iebrevecyrillic:1238, Iecyrillic:1045, Ifraktur:8465, Igrave:204, Igravesmall:63468, Ihookabove:7880, Iicyrillic:1048, Iinvertedbreve:522, Iishortcyrillic:1049, Imacron:298, Imacroncyrillic:1250, Imonospace:65321, Iniarmenian:1339, Iocyrillic:1025, Iogonek:302, Iota:921, Iotaafrican:406, Iotadieresis:938, Iotatonos:906, Ismall:63337, Istroke:407, Itilde:296, Itildebelow:7724, Izhitsacyrillic:1140, Izhitsadblgravecyrillic:1142, J:74, Jaarmenian:1345, Jcircle:9407, 
  Jcircumflex:308, Jecyrillic:1032, Jheharmenian:1355, Jmonospace:65322, Jsmall:63338, K:75, KBsquare:13189, KKsquare:13261, Kabashkircyrillic:1184, Kacute:7728, Kacyrillic:1050, Kadescendercyrillic:1178, Kahookcyrillic:1219, Kappa:922, Kastrokecyrillic:1182, Kaverticalstrokecyrillic:1180, Kcaron:488, Kcedilla:310, Kcircle:9408, Kcommaaccent:310, Kdotbelow:7730, Keharmenian:1364, Kenarmenian:1343, Khacyrillic:1061, Kheicoptic:998, Khook:408, Kjecyrillic:1036, Klinebelow:7732, Kmonospace:65323, Koppacyrillic:1152, 
  Koppagreek:990, Ksicyrillic:1134, Ksmall:63339, L:76, LJ:455, LL:63167, Lacute:313, Lambda:923, Lcaron:317, Lcedilla:315, Lcircle:9409, Lcircumflexbelow:7740, Lcommaaccent:315, Ldot:319, Ldotaccent:319, Ldotbelow:7734, Ldotbelowmacron:7736, Liwnarmenian:1340, Lj:456, Ljecyrillic:1033, Llinebelow:7738, Lmonospace:65324, Lslash:321, Lslashsmall:63225, Lsmall:63340, M:77, MBsquare:13190, Macron:63184, Macronsmall:63407, Macute:7742, Mcircle:9410, Mdotaccent:7744, Mdotbelow:7746, Menarmenian:1348, 
  Mmonospace:65325, Msmall:63341, Mturned:412, Mu:924, N:78, NJ:458, Nacute:323, Ncaron:327, Ncedilla:325, Ncircle:9411, Ncircumflexbelow:7754, Ncommaaccent:325, Ndotaccent:7748, Ndotbelow:7750, Nhookleft:413, Nineroman:8552, Nj:459, Njecyrillic:1034, Nlinebelow:7752, Nmonospace:65326, Nowarmenian:1350, Nsmall:63342, Ntilde:209, Ntildesmall:63473, Nu:925, O:79, OE:338, OEsmall:63226, Oacute:211, Oacutesmall:63475, Obarredcyrillic:1256, Obarreddieresiscyrillic:1258, Obreve:334, Ocaron:465, Ocenteredtilde:415, 
  Ocircle:9412, Ocircumflex:212, Ocircumflexacute:7888, Ocircumflexdotbelow:7896, Ocircumflexgrave:7890, Ocircumflexhookabove:7892, Ocircumflexsmall:63476, Ocircumflextilde:7894, Ocyrillic:1054, Odblacute:336, Odblgrave:524, Odieresis:214, Odieresiscyrillic:1254, Odieresissmall:63478, Odotbelow:7884, Ogoneksmall:63227, Ograve:210, Ogravesmall:63474, Oharmenian:1365, Ohm:8486, Ohookabove:7886, Ohorn:416, Ohornacute:7898, Ohorndotbelow:7906, Ohorngrave:7900, Ohornhookabove:7902, Ohorntilde:7904, Ohungarumlaut:336, 
  Oi:418, Oinvertedbreve:526, Omacron:332, Omacronacute:7762, Omacrongrave:7760, Omega:8486, Omegacyrillic:1120, Omegagreek:937, Omegaroundcyrillic:1146, Omegatitlocyrillic:1148, Omegatonos:911, Omicron:927, Omicrontonos:908, Omonospace:65327, Oneroman:8544, Oogonek:490, Oogonekmacron:492, Oopen:390, Oslash:216, Oslashacute:510, Oslashsmall:63480, Osmall:63343, Ostrokeacute:510, Otcyrillic:1150, Otilde:213, Otildeacute:7756, Otildedieresis:7758, Otildesmall:63477, P:80, Pacute:7764, Pcircle:9413, 
  Pdotaccent:7766, Pecyrillic:1055, Peharmenian:1354, Pemiddlehookcyrillic:1190, Phi:934, Phook:420, Pi:928, Piwrarmenian:1363, Pmonospace:65328, Psi:936, Psicyrillic:1136, Psmall:63344, Q:81, Qcircle:9414, Qmonospace:65329, Qsmall:63345, R:82, Raarmenian:1356, Racute:340, Rcaron:344, Rcedilla:342, Rcircle:9415, Rcommaaccent:342, Rdblgrave:528, Rdotaccent:7768, Rdotbelow:7770, Rdotbelowmacron:7772, Reharmenian:1360, Rfraktur:8476, Rho:929, Ringsmall:63228, Rinvertedbreve:530, Rlinebelow:7774, Rmonospace:65330, 
  Rsmall:63346, Rsmallinverted:641, Rsmallinvertedsuperior:694, S:83, SF010000:9484, SF020000:9492, SF030000:9488, SF040000:9496, SF050000:9532, SF060000:9516, SF070000:9524, SF080000:9500, SF090000:9508, SF100000:9472, SF110000:9474, SF190000:9569, SF200000:9570, SF210000:9558, SF220000:9557, SF230000:9571, SF240000:9553, SF250000:9559, SF260000:9565, SF270000:9564, SF280000:9563, SF360000:9566, SF370000:9567, SF380000:9562, SF390000:9556, SF400000:9577, SF410000:9574, SF420000:9568, SF430000:9552, 
  SF440000:9580, SF450000:9575, SF460000:9576, SF470000:9572, SF480000:9573, SF490000:9561, SF500000:9560, SF510000:9554, SF520000:9555, SF530000:9579, SF540000:9578, Sacute:346, Sacutedotaccent:7780, Sampigreek:992, Scaron:352, Scarondotaccent:7782, Scaronsmall:63229, Scedilla:350, Schwa:399, Schwacyrillic:1240, Schwadieresiscyrillic:1242, Scircle:9416, Scircumflex:348, Scommaaccent:536, Sdotaccent:7776, Sdotbelow:7778, Sdotbelowdotaccent:7784, Seharmenian:1357, Sevenroman:8550, Shaarmenian:1351, 
  Shacyrillic:1064, Shchacyrillic:1065, Sheicoptic:994, Shhacyrillic:1210, Shimacoptic:1004, Sigma:931, Sixroman:8549, Smonospace:65331, Softsigncyrillic:1068, Ssmall:63347, Stigmagreek:986, T:84, Tau:932, Tbar:358, Tcaron:356, Tcedilla:354, Tcircle:9417, Tcircumflexbelow:7792, Tcommaaccent:354, Tdotaccent:7786, Tdotbelow:7788, Tecyrillic:1058, Tedescendercyrillic:1196, Tenroman:8553, Tetsecyrillic:1204, Theta:920, Thook:428, Thorn:222, Thornsmall:63486, Threeroman:8546, Tildesmall:63230, Tiwnarmenian:1359, 
  Tlinebelow:7790, Tmonospace:65332, Toarmenian:1337, Tonefive:444, Tonesix:388, Tonetwo:423, Tretroflexhook:430, Tsecyrillic:1062, Tshecyrillic:1035, Tsmall:63348, Twelveroman:8555, Tworoman:8545, U:85, Uacute:218, Uacutesmall:63482, Ubreve:364, Ucaron:467, Ucircle:9418, Ucircumflex:219, Ucircumflexbelow:7798, Ucircumflexsmall:63483, Ucyrillic:1059, Udblacute:368, Udblgrave:532, Udieresis:220, Udieresisacute:471, Udieresisbelow:7794, Udieresiscaron:473, Udieresiscyrillic:1264, Udieresisgrave:475, 
  Udieresismacron:469, Udieresissmall:63484, Udotbelow:7908, Ugrave:217, Ugravesmall:63481, Uhookabove:7910, Uhorn:431, Uhornacute:7912, Uhorndotbelow:7920, Uhorngrave:7914, Uhornhookabove:7916, Uhorntilde:7918, Uhungarumlaut:368, Uhungarumlautcyrillic:1266, Uinvertedbreve:534, Ukcyrillic:1144, Umacron:362, Umacroncyrillic:1262, Umacrondieresis:7802, Umonospace:65333, Uogonek:370, Upsilon:933, Upsilon1:978, Upsilonacutehooksymbolgreek:979, Upsilonafrican:433, Upsilondieresis:939, Upsilondieresishooksymbolgreek:980, 
  Upsilonhooksymbol:978, Upsilontonos:910, Uring:366, Ushortcyrillic:1038, Usmall:63349, Ustraightcyrillic:1198, Ustraightstrokecyrillic:1200, Utilde:360, Utildeacute:7800, Utildebelow:7796, V:86, Vcircle:9419, Vdotbelow:7806, Vecyrillic:1042, Vewarmenian:1358, Vhook:434, Vmonospace:65334, Voarmenian:1352, Vsmall:63350, Vtilde:7804, W:87, Wacute:7810, Wcircle:9420, Wcircumflex:372, Wdieresis:7812, Wdotaccent:7814, Wdotbelow:7816, Wgrave:7808, Wmonospace:65335, Wsmall:63351, X:88, Xcircle:9421, Xdieresis:7820, 
  Xdotaccent:7818, Xeharmenian:1341, Xi:926, Xmonospace:65336, Xsmall:63352, Y:89, Yacute:221, Yacutesmall:63485, Yatcyrillic:1122, Ycircle:9422, Ycircumflex:374, Ydieresis:376, Ydieresissmall:63487, Ydotaccent:7822, Ydotbelow:7924, Yericyrillic:1067, Yerudieresiscyrillic:1272, Ygrave:7922, Yhook:435, Yhookabove:7926, Yiarmenian:1349, Yicyrillic:1031, Yiwnarmenian:1362, Ymonospace:65337, Ysmall:63353, Ytilde:7928, Yusbigcyrillic:1130, Yusbigiotifiedcyrillic:1132, Yuslittlecyrillic:1126, Yuslittleiotifiedcyrillic:1128, 
  Z:90, Zaarmenian:1334, Zacute:377, Zcaron:381, Zcaronsmall:63231, Zcircle:9423, Zcircumflex:7824, Zdot:379, Zdotaccent:379, Zdotbelow:7826, Zecyrillic:1047, Zedescendercyrillic:1176, Zedieresiscyrillic:1246, Zeta:918, Zhearmenian:1338, Zhebrevecyrillic:1217, Zhecyrillic:1046, Zhedescendercyrillic:1174, Zhedieresiscyrillic:1244, Zlinebelow:7828, Zmonospace:65338, Zsmall:63354, Zstroke:437, a:97, aabengali:2438, aacute:225, aadeva:2310, aagujarati:2694, aagurmukhi:2566, aamatragurmukhi:2622, aarusquare:13059, 
  aavowelsignbengali:2494, aavowelsigndeva:2366, aavowelsigngujarati:2750, abbreviationmarkarmenian:1375, abbreviationsigndeva:2416, abengali:2437, abopomofo:12570, abreve:259, abreveacute:7855, abrevecyrillic:1233, abrevedotbelow:7863, abrevegrave:7857, abrevehookabove:7859, abrevetilde:7861, acaron:462, acircle:9424, acircumflex:226, acircumflexacute:7845, acircumflexdotbelow:7853, acircumflexgrave:7847, acircumflexhookabove:7849, acircumflextilde:7851, acute:180, acutebelowcmb:791, acutecmb:769, 
  acutecomb:769, acutedeva:2388, acutelowmod:719, acutetonecmb:833, acyrillic:1072, adblgrave:513, addakgurmukhi:2673, adeva:2309, adieresis:228, adieresiscyrillic:1235, adieresismacron:479, adotbelow:7841, adotmacron:481, ae:230, aeacute:509, aekorean:12624, aemacron:483, afii00208:8213, afii08941:8356, afii10017:1040, afii10018:1041, afii10019:1042, afii10020:1043, afii10021:1044, afii10022:1045, afii10023:1025, afii10024:1046, afii10025:1047, afii10026:1048, afii10027:1049, afii10028:1050, afii10029:1051, 
  afii10030:1052, afii10031:1053, afii10032:1054, afii10033:1055, afii10034:1056, afii10035:1057, afii10036:1058, afii10037:1059, afii10038:1060, afii10039:1061, afii10040:1062, afii10041:1063, afii10042:1064, afii10043:1065, afii10044:1066, afii10045:1067, afii10046:1068, afii10047:1069, afii10048:1070, afii10049:1071, afii10050:1168, afii10051:1026, afii10052:1027, afii10053:1028, afii10054:1029, afii10055:1030, afii10056:1031, afii10057:1032, afii10058:1033, afii10059:1034, afii10060:1035, afii10061:1036, 
  afii10062:1038, afii10063:63172, afii10064:63173, afii10065:1072, afii10066:1073, afii10067:1074, afii10068:1075, afii10069:1076, afii10070:1077, afii10071:1105, afii10072:1078, afii10073:1079, afii10074:1080, afii10075:1081, afii10076:1082, afii10077:1083, afii10078:1084, afii10079:1085, afii10080:1086, afii10081:1087, afii10082:1088, afii10083:1089, afii10084:1090, afii10085:1091, afii10086:1092, afii10087:1093, afii10088:1094, afii10089:1095, afii10090:1096, afii10091:1097, afii10092:1098, afii10093:1099, 
  afii10094:1100, afii10095:1101, afii10096:1102, afii10097:1103, afii10098:1169, afii10099:1106, afii10100:1107, afii10101:1108, afii10102:1109, afii10103:1110, afii10104:1111, afii10105:1112, afii10106:1113, afii10107:1114, afii10108:1115, afii10109:1116, afii10110:1118, afii10145:1039, afii10146:1122, afii10147:1138, afii10148:1140, afii10192:63174, afii10193:1119, afii10194:1123, afii10195:1139, afii10196:1141, afii10831:63175, afii10832:63176, afii10846:1241, afii299:8206, afii300:8207, afii301:8205, 
  afii57381:1642, afii57388:1548, afii57392:1632, afii57393:1633, afii57394:1634, afii57395:1635, afii57396:1636, afii57397:1637, afii57398:1638, afii57399:1639, afii57400:1640, afii57401:1641, afii57403:1563, afii57407:1567, afii57409:1569, afii57410:1570, afii57411:1571, afii57412:1572, afii57413:1573, afii57414:1574, afii57415:1575, afii57416:1576, afii57417:1577, afii57418:1578, afii57419:1579, afii57420:1580, afii57421:1581, afii57422:1582, afii57423:1583, afii57424:1584, afii57425:1585, afii57426:1586, 
  afii57427:1587, afii57428:1588, afii57429:1589, afii57430:1590, afii57431:1591, afii57432:1592, afii57433:1593, afii57434:1594, afii57440:1600, afii57441:1601, afii57442:1602, afii57443:1603, afii57444:1604, afii57445:1605, afii57446:1606, afii57448:1608, afii57449:1609, afii57450:1610, afii57451:1611, afii57452:1612, afii57453:1613, afii57454:1614, afii57455:1615, afii57456:1616, afii57457:1617, afii57458:1618, afii57470:1607, afii57505:1700, afii57506:1662, afii57507:1670, afii57508:1688, afii57509:1711, 
  afii57511:1657, afii57512:1672, afii57513:1681, afii57514:1722, afii57519:1746, afii57534:1749, afii57636:8362, afii57645:1470, afii57658:1475, afii57664:1488, afii57665:1489, afii57666:1490, afii57667:1491, afii57668:1492, afii57669:1493, afii57670:1494, afii57671:1495, afii57672:1496, afii57673:1497, afii57674:1498, afii57675:1499, afii57676:1500, afii57677:1501, afii57678:1502, afii57679:1503, afii57680:1504, afii57681:1505, afii57682:1506, afii57683:1507, afii57684:1508, afii57685:1509, afii57686:1510, 
  afii57687:1511, afii57688:1512, afii57689:1513, afii57690:1514, afii57694:64298, afii57695:64299, afii57700:64331, afii57705:64287, afii57716:1520, afii57717:1521, afii57718:1522, afii57723:64309, afii57793:1460, afii57794:1461, afii57795:1462, afii57796:1467, afii57797:1464, afii57798:1463, afii57799:1456, afii57800:1458, afii57801:1457, afii57802:1459, afii57803:1474, afii57804:1473, afii57806:1465, afii57807:1468, afii57839:1469, afii57841:1471, afii57842:1472, afii57929:700, afii61248:8453, 
  afii61289:8467, afii61352:8470, afii61573:8236, afii61574:8237, afii61575:8238, afii61664:8204, afii63167:1645, afii64937:701, agrave:224, agujarati:2693, agurmukhi:2565, ahiragana:12354, ahookabove:7843, aibengali:2448, aibopomofo:12574, aideva:2320, aiecyrillic:1237, aigujarati:2704, aigurmukhi:2576, aimatragurmukhi:2632, ainarabic:1593, ainfinalarabic:65226, aininitialarabic:65227, ainmedialarabic:65228, ainvertedbreve:515, aivowelsignbengali:2504, aivowelsigndeva:2376, aivowelsigngujarati:2760, 
  akatakana:12450, akatakanahalfwidth:65393, akorean:12623, alef:1488, alefarabic:1575, alefdageshhebrew:64304, aleffinalarabic:65166, alefhamzaabovearabic:1571, alefhamzaabovefinalarabic:65156, alefhamzabelowarabic:1573, alefhamzabelowfinalarabic:65160, alefhebrew:1488, aleflamedhebrew:64335, alefmaddaabovearabic:1570, alefmaddaabovefinalarabic:65154, alefmaksuraarabic:1609, alefmaksurafinalarabic:65264, alefmaksurainitialarabic:65267, alefmaksuramedialarabic:65268, alefpatahhebrew:64302, alefqamatshebrew:64303, 
  aleph:8501, allequal:8780, alpha:945, alphatonos:940, amacron:257, amonospace:65345, ampersand:38, ampersandmonospace:65286, ampersandsmall:63270, amsquare:13250, anbopomofo:12578, angbopomofo:12580, angbracketleft:12296, angbracketright:12297, angkhankhuthai:3674, angle:8736, anglebracketleft:12296, anglebracketleftvertical:65087, anglebracketright:12297, anglebracketrightvertical:65088, angleleft:9001, angleright:9002, angstrom:8491, anoteleia:903, anudattadeva:2386, anusvarabengali:2434, anusvaradeva:2306, 
  anusvaragujarati:2690, aogonek:261, apaatosquare:13056, aparen:9372, apostrophearmenian:1370, apostrophemod:700, apple:63743, approaches:8784, approxequal:8776, approxequalorimage:8786, approximatelyequal:8773, araeaekorean:12686, araeakorean:12685, arc:8978, arighthalfring:7834, aring:229, aringacute:507, aringbelow:7681, arrowboth:8596, arrowdashdown:8675, arrowdashleft:8672, arrowdashright:8674, arrowdashup:8673, arrowdblboth:8660, arrowdbldown:8659, arrowdblleft:8656, arrowdblright:8658, arrowdblup:8657, 
  arrowdown:8595, arrowdownleft:8601, arrowdownright:8600, arrowdownwhite:8681, arrowheaddownmod:709, arrowheadleftmod:706, arrowheadrightmod:707, arrowheadupmod:708, arrowhorizex:63719, arrowleft:8592, arrowleftdbl:8656, arrowleftdblstroke:8653, arrowleftoverright:8646, arrowleftwhite:8678, arrowright:8594, arrowrightdblstroke:8655, arrowrightheavy:10142, arrowrightoverleft:8644, arrowrightwhite:8680, arrowtableft:8676, arrowtabright:8677, arrowup:8593, arrowupdn:8597, arrowupdnbse:8616, arrowupdownbase:8616, 
  arrowupleft:8598, arrowupleftofdown:8645, arrowupright:8599, arrowupwhite:8679, arrowvertex:63718, asciicircum:94, asciicircummonospace:65342, asciitilde:126, asciitildemonospace:65374, ascript:593, ascriptturned:594, asmallhiragana:12353, asmallkatakana:12449, asmallkatakanahalfwidth:65383, asterisk:42, asteriskaltonearabic:1645, asteriskarabic:1645, asteriskmath:8727, asteriskmonospace:65290, asterisksmall:65121, asterism:8258, asuperior:63209, asymptoticallyequal:8771, at:64, atilde:227, atmonospace:65312, 
  atsmall:65131, aturned:592, aubengali:2452, aubopomofo:12576, audeva:2324, augujarati:2708, augurmukhi:2580, aulengthmarkbengali:2519, aumatragurmukhi:2636, auvowelsignbengali:2508, auvowelsigndeva:2380, auvowelsigngujarati:2764, avagrahadeva:2365, aybarmenian:1377, ayin:1506, ayinaltonehebrew:64288, ayinhebrew:1506, b:98, babengali:2476, backslash:92, backslashmonospace:65340, badeva:2348, bagujarati:2732, bagurmukhi:2604, bahiragana:12400, bahtthai:3647, bakatakana:12496, bar:124, barmonospace:65372, 
  bbopomofo:12549, bcircle:9425, bdotaccent:7683, bdotbelow:7685, beamedsixteenthnotes:9836, because:8757, becyrillic:1073, beharabic:1576, behfinalarabic:65168, behinitialarabic:65169, behiragana:12409, behmedialarabic:65170, behmeeminitialarabic:64671, behmeemisolatedarabic:64520, behnoonfinalarabic:64621, bekatakana:12505, benarmenian:1378, bet:1489, beta:946, betasymbolgreek:976, betdagesh:64305, betdageshhebrew:64305, bethebrew:1489, betrafehebrew:64332, bhabengali:2477, bhadeva:2349, bhagujarati:2733, 
  bhagurmukhi:2605, bhook:595, bihiragana:12403, bikatakana:12499, bilabialclick:664, bindigurmukhi:2562, birusquare:13105, blackcircle:9679, blackdiamond:9670, blackdownpointingtriangle:9660, blackleftpointingpointer:9668, blackleftpointingtriangle:9664, blacklenticularbracketleft:12304, blacklenticularbracketleftvertical:65083, blacklenticularbracketright:12305, blacklenticularbracketrightvertical:65084, blacklowerlefttriangle:9699, blacklowerrighttriangle:9698, blackrectangle:9644, blackrightpointingpointer:9658, 
  blackrightpointingtriangle:9654, blacksmallsquare:9642, blacksmilingface:9787, blacksquare:9632, blackstar:9733, blackupperlefttriangle:9700, blackupperrighttriangle:9701, blackuppointingsmalltriangle:9652, blackuppointingtriangle:9650, blank:9251, blinebelow:7687, block:9608, bmonospace:65346, bobaimaithai:3610, bohiragana:12412, bokatakana:12508, bparen:9373, bqsquare:13251, braceex:63732, braceleft:123, braceleftbt:63731, braceleftmid:63730, braceleftmonospace:65371, braceleftsmall:65115, bracelefttp:63729, 
  braceleftvertical:65079, braceright:125, bracerightbt:63742, bracerightmid:63741, bracerightmonospace:65373, bracerightsmall:65116, bracerighttp:63740, bracerightvertical:65080, bracketleft:91, bracketleftbt:63728, bracketleftex:63727, bracketleftmonospace:65339, bracketlefttp:63726, bracketright:93, bracketrightbt:63739, bracketrightex:63738, bracketrightmonospace:65341, bracketrighttp:63737, breve:728, brevebelowcmb:814, brevecmb:774, breveinvertedbelowcmb:815, breveinvertedcmb:785, breveinverteddoublecmb:865, 
  bridgebelowcmb:810, bridgeinvertedbelowcmb:826, brokenbar:166, bstroke:384, bsuperior:63210, btopbar:387, buhiragana:12406, bukatakana:12502, bullet:8226, bulletinverse:9688, bulletoperator:8729, bullseye:9678, c:99, caarmenian:1390, cabengali:2458, cacute:263, cadeva:2330, cagujarati:2714, cagurmukhi:2586, calsquare:13192, candrabindubengali:2433, candrabinducmb:784, candrabindudeva:2305, candrabindugujarati:2689, capslock:8682, careof:8453, caron:711, caronbelowcmb:812, caroncmb:780, carriagereturn:8629, 
  cbopomofo:12568, ccaron:269, ccedilla:231, ccedillaacute:7689, ccircle:9426, ccircumflex:265, ccurl:597, cdot:267, cdotaccent:267, cdsquare:13253, cedilla:184, cedillacmb:807, cent:162, centigrade:8451, centinferior:63199, centmonospace:65504, centoldstyle:63394, centsuperior:63200, chaarmenian:1401, chabengali:2459, chadeva:2331, chagujarati:2715, chagurmukhi:2587, chbopomofo:12564, cheabkhasiancyrillic:1213, checkmark:10003, checyrillic:1095, chedescenderabkhasiancyrillic:1215, chedescendercyrillic:1207, 
  chedieresiscyrillic:1269, cheharmenian:1395, chekhakassiancyrillic:1228, cheverticalstrokecyrillic:1209, chi:967, chieuchacirclekorean:12919, chieuchaparenkorean:12823, chieuchcirclekorean:12905, chieuchkorean:12618, chieuchparenkorean:12809, chochangthai:3594, chochanthai:3592, chochingthai:3593, chochoethai:3596, chook:392, cieucacirclekorean:12918, cieucaparenkorean:12822, cieuccirclekorean:12904, cieuckorean:12616, cieucparenkorean:12808, cieucuparenkorean:12828, circle:9675, circlecopyrt:169, 
  circlemultiply:8855, circleot:8857, circleplus:8853, circlepostalmark:12342, circlewithlefthalfblack:9680, circlewithrighthalfblack:9681, circumflex:710, circumflexbelowcmb:813, circumflexcmb:770, clear:8999, clickalveolar:450, clickdental:448, clicklateral:449, clickretroflex:451, club:9827, clubsuitblack:9827, clubsuitwhite:9831, cmcubedsquare:13220, cmonospace:65347, cmsquaredsquare:13216, coarmenian:1409, colon:58, colonmonetary:8353, colonmonospace:65306, colonsign:8353, colonsmall:65109, 
  colontriangularhalfmod:721, colontriangularmod:720, comma:44, commaabovecmb:787, commaaboverightcmb:789, commaaccent:63171, commaarabic:1548, commaarmenian:1373, commainferior:63201, commamonospace:65292, commareversedabovecmb:788, commareversedmod:701, commasmall:65104, commasuperior:63202, commaturnedabovecmb:786, commaturnedmod:699, compass:9788, congruent:8773, contourintegral:8750, control:8963, controlACK:6, controlBEL:7, controlBS:8, controlCAN:24, controlCR:13, controlDC1:17, controlDC2:18, 
  controlDC3:19, controlDC4:20, controlDEL:127, controlDLE:16, controlEM:25, controlENQ:5, controlEOT:4, controlESC:27, controlETB:23, controlETX:3, controlFF:12, controlFS:28, controlGS:29, controlHT:9, controlLF:10, controlNAK:21, controlRS:30, controlSI:15, controlSO:14, controlSOT:2, controlSTX:1, controlSUB:26, controlSYN:22, controlUS:31, controlVT:11, copyright:169, copyrightsans:63721, copyrightserif:63193, cornerbracketleft:12300, cornerbracketlefthalfwidth:65378, cornerbracketleftvertical:65089, 
  cornerbracketright:12301, cornerbracketrighthalfwidth:65379, cornerbracketrightvertical:65090, corporationsquare:13183, cosquare:13255, coverkgsquare:13254, cparen:9374, cruzeiro:8354, cstretched:663, curlyand:8911, curlyor:8910, currency:164, cyrBreve:63185, cyrFlex:63186, cyrbreve:63188, cyrflex:63189, d:100, daarmenian:1380, dabengali:2470, dadarabic:1590, dadeva:2342, dadfinalarabic:65214, dadinitialarabic:65215, dadmedialarabic:65216, dagesh:1468, dageshhebrew:1468, dagger:8224, daggerdbl:8225, 
  dagujarati:2726, dagurmukhi:2598, dahiragana:12384, dakatakana:12480, dalarabic:1583, dalet:1491, daletdagesh:64307, daletdageshhebrew:64307, dalethebrew:1491, dalfinalarabic:65194, dammaarabic:1615, dammalowarabic:1615, dammatanaltonearabic:1612, dammatanarabic:1612, danda:2404, dargahebrew:1447, dargalefthebrew:1447, dasiapneumatacyrilliccmb:1157, dblGrave:63187, dblanglebracketleft:12298, dblanglebracketleftvertical:65085, dblanglebracketright:12299, dblanglebracketrightvertical:65086, dblarchinvertedbelowcmb:811, 
  dblarrowleft:8660, dblarrowright:8658, dbldanda:2405, dblgrave:63190, dblgravecmb:783, dblintegral:8748, dbllowline:8215, dbllowlinecmb:819, dbloverlinecmb:831, dblprimemod:698, dblverticalbar:8214, dblverticallineabovecmb:782, dbopomofo:12553, dbsquare:13256, dcaron:271, dcedilla:7697, dcircle:9427, dcircumflexbelow:7699, dcroat:273, ddabengali:2465, ddadeva:2337, ddagujarati:2721, ddagurmukhi:2593, ddalarabic:1672, ddalfinalarabic:64393, dddhadeva:2396, ddhabengali:2466, ddhadeva:2338, ddhagujarati:2722, 
  ddhagurmukhi:2594, ddotaccent:7691, ddotbelow:7693, decimalseparatorarabic:1643, decimalseparatorpersian:1643, decyrillic:1076, degree:176, dehihebrew:1453, dehiragana:12391, deicoptic:1007, dekatakana:12487, deleteleft:9003, deleteright:8998, delta:948, deltaturned:397, denominatorminusonenumeratorbengali:2552, dezh:676, dhabengali:2471, dhadeva:2343, dhagujarati:2727, dhagurmukhi:2599, dhook:599, dialytikatonos:901, dialytikatonoscmb:836, diamond:9830, diamondsuitwhite:9826, dieresis:168, dieresisacute:63191, 
  dieresisbelowcmb:804, dieresiscmb:776, dieresisgrave:63192, dieresistonos:901, dihiragana:12386, dikatakana:12482, dittomark:12291, divide:247, divides:8739, divisionslash:8725, djecyrillic:1106, dkshade:9619, dlinebelow:7695, dlsquare:13207, dmacron:273, dmonospace:65348, dnblock:9604, dochadathai:3598, dodekthai:3604, dohiragana:12393, dokatakana:12489, dollar:36, dollarinferior:63203, dollarmonospace:65284, dollaroldstyle:63268, dollarsmall:65129, dollarsuperior:63204, dong:8363, dorusquare:13094, 
  dotaccent:729, dotaccentcmb:775, dotbelowcmb:803, dotbelowcomb:803, dotkatakana:12539, dotlessi:305, dotlessj:63166, dotlessjstrokehook:644, dotmath:8901, dottedcircle:9676, doubleyodpatah:64287, doubleyodpatahhebrew:64287, downtackbelowcmb:798, downtackmod:725, dparen:9375, dsuperior:63211, dtail:598, dtopbar:396, duhiragana:12389, dukatakana:12485, dz:499, dzaltone:675, dzcaron:454, dzcurl:677, dzeabkhasiancyrillic:1249, dzecyrillic:1109, dzhecyrillic:1119, e:101, eacute:233, earth:9793, ebengali:2447, 
  ebopomofo:12572, ebreve:277, ecandradeva:2317, ecandragujarati:2701, ecandravowelsigndeva:2373, ecandravowelsigngujarati:2757, ecaron:283, ecedillabreve:7709, echarmenian:1381, echyiwnarmenian:1415, ecircle:9428, ecircumflex:234, ecircumflexacute:7871, ecircumflexbelow:7705, ecircumflexdotbelow:7879, ecircumflexgrave:7873, ecircumflexhookabove:7875, ecircumflextilde:7877, ecyrillic:1108, edblgrave:517, edeva:2319, edieresis:235, edot:279, edotaccent:279, edotbelow:7865, eegurmukhi:2575, eematragurmukhi:2631, 
  efcyrillic:1092, egrave:232, egujarati:2703, eharmenian:1383, ehbopomofo:12573, ehiragana:12360, ehookabove:7867, eibopomofo:12575, eight:56, eightarabic:1640, eightbengali:2542, eightcircle:9319, eightcircleinversesansserif:10129, eightdeva:2414, eighteencircle:9329, eighteenparen:9349, eighteenperiod:9369, eightgujarati:2798, eightgurmukhi:2670, eighthackarabic:1640, eighthangzhou:12328, eighthnotebeamed:9835, eightideographicparen:12839, eightinferior:8328, eightmonospace:65304, eightoldstyle:63288, 
  eightparen:9339, eightperiod:9359, eightpersian:1784, eightroman:8567, eightsuperior:8312, eightthai:3672, einvertedbreve:519, eiotifiedcyrillic:1125, ekatakana:12456, ekatakanahalfwidth:65396, ekonkargurmukhi:2676, ekorean:12628, elcyrillic:1083, element:8712, elevencircle:9322, elevenparen:9342, elevenperiod:9362, elevenroman:8570, ellipsis:8230, ellipsisvertical:8942, emacron:275, emacronacute:7703, emacrongrave:7701, emcyrillic:1084, emdash:8212, emdashvertical:65073, emonospace:65349, emphasismarkarmenian:1371, 
  emptyset:8709, enbopomofo:12579, encyrillic:1085, endash:8211, endashvertical:65074, endescendercyrillic:1187, eng:331, engbopomofo:12581, enghecyrillic:1189, enhookcyrillic:1224, enspace:8194, eogonek:281, eokorean:12627, eopen:603, eopenclosed:666, eopenreversed:604, eopenreversedclosed:606, eopenreversedhook:605, eparen:9376, epsilon:949, epsilontonos:941, equal:61, equalmonospace:65309, equalsmall:65126, equalsuperior:8316, equivalence:8801, erbopomofo:12582, ercyrillic:1088, ereversed:600, 
  ereversedcyrillic:1101, escyrillic:1089, esdescendercyrillic:1195, esh:643, eshcurl:646, eshortdeva:2318, eshortvowelsigndeva:2374, eshreversedloop:426, eshsquatreversed:645, esmallhiragana:12359, esmallkatakana:12455, esmallkatakanahalfwidth:65386, estimated:8494, esuperior:63212, eta:951, etarmenian:1384, etatonos:942, eth:240, etilde:7869, etildebelow:7707, etnahtafoukhhebrew:1425, etnahtafoukhlefthebrew:1425, etnahtahebrew:1425, etnahtalefthebrew:1425, eturned:477, eukorean:12641, euro:8364, 
  evowelsignbengali:2503, evowelsigndeva:2375, evowelsigngujarati:2759, exclam:33, exclamarmenian:1372, exclamdbl:8252, exclamdown:161, exclamdownsmall:63393, exclammonospace:65281, exclamsmall:63265, existential:8707, ezh:658, ezhcaron:495, ezhcurl:659, ezhreversed:441, ezhtail:442, f:102, fadeva:2398, fagurmukhi:2654, fahrenheit:8457, fathaarabic:1614, fathalowarabic:1614, fathatanarabic:1611, fbopomofo:12552, fcircle:9429, fdotaccent:7711, feharabic:1601, feharmenian:1414, fehfinalarabic:65234, 
  fehinitialarabic:65235, fehmedialarabic:65236, feicoptic:997, female:9792, ff:64256, ffi:64259, ffl:64260, fi:64257, fifteencircle:9326, fifteenparen:9346, fifteenperiod:9366, figuredash:8210, filledbox:9632, filledrect:9644, finalkaf:1498, finalkafdagesh:64314, finalkafdageshhebrew:64314, finalkafhebrew:1498, finalmem:1501, finalmemhebrew:1501, finalnun:1503, finalnunhebrew:1503, finalpe:1507, finalpehebrew:1507, finaltsadi:1509, finaltsadihebrew:1509, firsttonechinese:713, fisheye:9673, fitacyrillic:1139, 
  five:53, fivearabic:1637, fivebengali:2539, fivecircle:9316, fivecircleinversesansserif:10126, fivedeva:2411, fiveeighths:8541, fivegujarati:2795, fivegurmukhi:2667, fivehackarabic:1637, fivehangzhou:12325, fiveideographicparen:12836, fiveinferior:8325, fivemonospace:65301, fiveoldstyle:63285, fiveparen:9336, fiveperiod:9356, fivepersian:1781, fiveroman:8564, fivesuperior:8309, fivethai:3669, fl:64258, florin:402, fmonospace:65350, fmsquare:13209, fofanthai:3615, fofathai:3613, fongmanthai:3663, 
  forall:8704, four:52, fourarabic:1636, fourbengali:2538, fourcircle:9315, fourcircleinversesansserif:10125, fourdeva:2410, fourgujarati:2794, fourgurmukhi:2666, fourhackarabic:1636, fourhangzhou:12324, fourideographicparen:12835, fourinferior:8324, fourmonospace:65300, fournumeratorbengali:2551, fouroldstyle:63284, fourparen:9335, fourperiod:9355, fourpersian:1780, fourroman:8563, foursuperior:8308, fourteencircle:9325, fourteenparen:9345, fourteenperiod:9365, fourthai:3668, fourthtonechinese:715, 
  fparen:9377, fraction:8260, franc:8355, g:103, gabengali:2455, gacute:501, gadeva:2327, gafarabic:1711, gaffinalarabic:64403, gafinitialarabic:64404, gafmedialarabic:64405, gagujarati:2711, gagurmukhi:2583, gahiragana:12364, gakatakana:12460, gamma:947, gammalatinsmall:611, gammasuperior:736, gangiacoptic:1003, gbopomofo:12557, gbreve:287, gcaron:487, gcedilla:291, gcircle:9430, gcircumflex:285, gcommaaccent:291, gdot:289, gdotaccent:289, gecyrillic:1075, gehiragana:12370, gekatakana:12466, geometricallyequal:8785, 
  gereshaccenthebrew:1436, gereshhebrew:1523, gereshmuqdamhebrew:1437, germandbls:223, gershayimaccenthebrew:1438, gershayimhebrew:1524, getamark:12307, ghabengali:2456, ghadarmenian:1394, ghadeva:2328, ghagujarati:2712, ghagurmukhi:2584, ghainarabic:1594, ghainfinalarabic:65230, ghaininitialarabic:65231, ghainmedialarabic:65232, ghemiddlehookcyrillic:1173, ghestrokecyrillic:1171, gheupturncyrillic:1169, ghhadeva:2394, ghhagurmukhi:2650, ghook:608, ghzsquare:13203, gihiragana:12366, gikatakana:12462, 
  gimarmenian:1379, gimel:1490, gimeldagesh:64306, gimeldageshhebrew:64306, gimelhebrew:1490, gjecyrillic:1107, glottalinvertedstroke:446, glottalstop:660, glottalstopinverted:662, glottalstopmod:704, glottalstopreversed:661, glottalstopreversedmod:705, glottalstopreversedsuperior:740, glottalstopstroke:673, glottalstopstrokereversed:674, gmacron:7713, gmonospace:65351, gohiragana:12372, gokatakana:12468, gparen:9378, gpasquare:13228, gradient:8711, grave:96, gravebelowcmb:790, gravecmb:768, gravecomb:768, 
  gravedeva:2387, gravelowmod:718, gravemonospace:65344, gravetonecmb:832, greater:62, greaterequal:8805, greaterequalorless:8923, greatermonospace:65310, greaterorequivalent:8819, greaterorless:8823, greateroverequal:8807, greatersmall:65125, gscript:609, gstroke:485, guhiragana:12368, guillemotleft:171, guillemotright:187, guilsinglleft:8249, guilsinglright:8250, gukatakana:12464, guramusquare:13080, gysquare:13257, h:104, haabkhasiancyrillic:1193, haaltonearabic:1729, habengali:2489, hadescendercyrillic:1203, 
  hadeva:2361, hagujarati:2745, hagurmukhi:2617, haharabic:1581, hahfinalarabic:65186, hahinitialarabic:65187, hahiragana:12399, hahmedialarabic:65188, haitusquare:13098, hakatakana:12495, hakatakanahalfwidth:65418, halantgurmukhi:2637, hamzaarabic:1569, hamzalowarabic:1569, hangulfiller:12644, hardsigncyrillic:1098, harpoonleftbarbup:8636, harpoonrightbarbup:8640, hasquare:13258, hatafpatah:1458, hatafpatah16:1458, hatafpatah23:1458, hatafpatah2f:1458, hatafpatahhebrew:1458, hatafpatahnarrowhebrew:1458, 
  hatafpatahquarterhebrew:1458, hatafpatahwidehebrew:1458, hatafqamats:1459, hatafqamats1b:1459, hatafqamats28:1459, hatafqamats34:1459, hatafqamatshebrew:1459, hatafqamatsnarrowhebrew:1459, hatafqamatsquarterhebrew:1459, hatafqamatswidehebrew:1459, hatafsegol:1457, hatafsegol17:1457, hatafsegol24:1457, hatafsegol30:1457, hatafsegolhebrew:1457, hatafsegolnarrowhebrew:1457, hatafsegolquarterhebrew:1457, hatafsegolwidehebrew:1457, hbar:295, hbopomofo:12559, hbrevebelow:7723, hcedilla:7721, hcircle:9431, 
  hcircumflex:293, hdieresis:7719, hdotaccent:7715, hdotbelow:7717, he:1492, heart:9829, heartsuitblack:9829, heartsuitwhite:9825, hedagesh:64308, hedageshhebrew:64308, hehaltonearabic:1729, heharabic:1607, hehebrew:1492, hehfinalaltonearabic:64423, hehfinalalttwoarabic:65258, hehfinalarabic:65258, hehhamzaabovefinalarabic:64421, hehhamzaaboveisolatedarabic:64420, hehinitialaltonearabic:64424, hehinitialarabic:65259, hehiragana:12408, hehmedialaltonearabic:64425, hehmedialarabic:65260, heiseierasquare:13179, 
  hekatakana:12504, hekatakanahalfwidth:65421, hekutaarusquare:13110, henghook:615, herutusquare:13113, het:1495, hethebrew:1495, hhook:614, hhooksuperior:689, hieuhacirclekorean:12923, hieuhaparenkorean:12827, hieuhcirclekorean:12909, hieuhkorean:12622, hieuhparenkorean:12813, hihiragana:12402, hikatakana:12498, hikatakanahalfwidth:65419, hiriq:1460, hiriq14:1460, hiriq21:1460, hiriq2d:1460, hiriqhebrew:1460, hiriqnarrowhebrew:1460, hiriqquarterhebrew:1460, hiriqwidehebrew:1460, hlinebelow:7830, 
  hmonospace:65352, hoarmenian:1392, hohipthai:3627, hohiragana:12411, hokatakana:12507, hokatakanahalfwidth:65422, holam:1465, holam19:1465, holam26:1465, holam32:1465, holamhebrew:1465, holamnarrowhebrew:1465, holamquarterhebrew:1465, holamwidehebrew:1465, honokhukthai:3630, hookabovecomb:777, hookcmb:777, hookpalatalizedbelowcmb:801, hookretroflexbelowcmb:802, hoonsquare:13122, horicoptic:1001, horizontalbar:8213, horncmb:795, hotsprings:9832, house:8962, hparen:9379, hsuperior:688, hturned:613, 
  huhiragana:12405, huiitosquare:13107, hukatakana:12501, hukatakanahalfwidth:65420, hungarumlaut:733, hungarumlautcmb:779, hv:405, hyphen:45, hypheninferior:63205, hyphenmonospace:65293, hyphensmall:65123, hyphensuperior:63206, hyphentwo:8208, i:105, iacute:237, iacyrillic:1103, ibengali:2439, ibopomofo:12583, ibreve:301, icaron:464, icircle:9432, icircumflex:238, icyrillic:1110, idblgrave:521, ideographearthcircle:12943, ideographfirecircle:12939, ideographicallianceparen:12863, ideographiccallparen:12858, 
  ideographiccentrecircle:12965, ideographicclose:12294, ideographiccomma:12289, ideographiccommaleft:65380, ideographiccongratulationparen:12855, ideographiccorrectcircle:12963, ideographicearthparen:12847, ideographicenterpriseparen:12861, ideographicexcellentcircle:12957, ideographicfestivalparen:12864, ideographicfinancialcircle:12950, ideographicfinancialparen:12854, ideographicfireparen:12843, ideographichaveparen:12850, ideographichighcircle:12964, ideographiciterationmark:12293, ideographiclaborcircle:12952, 
  ideographiclaborparen:12856, ideographicleftcircle:12967, ideographiclowcircle:12966, ideographicmedicinecircle:12969, ideographicmetalparen:12846, ideographicmoonparen:12842, ideographicnameparen:12852, ideographicperiod:12290, ideographicprintcircle:12958, ideographicreachparen:12867, ideographicrepresentparen:12857, ideographicresourceparen:12862, ideographicrightcircle:12968, ideographicsecretcircle:12953, ideographicselfparen:12866, ideographicsocietyparen:12851, ideographicspace:12288, ideographicspecialparen:12853, 
  ideographicstockparen:12849, ideographicstudyparen:12859, ideographicsunparen:12848, ideographicsuperviseparen:12860, ideographicwaterparen:12844, ideographicwoodparen:12845, ideographiczero:12295, ideographmetalcircle:12942, ideographmooncircle:12938, ideographnamecircle:12948, ideographsuncircle:12944, ideographwatercircle:12940, ideographwoodcircle:12941, ideva:2311, idieresis:239, idieresisacute:7727, idieresiscyrillic:1253, idotbelow:7883, iebrevecyrillic:1239, iecyrillic:1077, ieungacirclekorean:12917, 
  ieungaparenkorean:12821, ieungcirclekorean:12903, ieungkorean:12615, ieungparenkorean:12807, igrave:236, igujarati:2695, igurmukhi:2567, ihiragana:12356, ihookabove:7881, iibengali:2440, iicyrillic:1080, iideva:2312, iigujarati:2696, iigurmukhi:2568, iimatragurmukhi:2624, iinvertedbreve:523, iishortcyrillic:1081, iivowelsignbengali:2496, iivowelsigndeva:2368, iivowelsigngujarati:2752, ij:307, ikatakana:12452, ikatakanahalfwidth:65394, ikorean:12643, ilde:732, iluyhebrew:1452, imacron:299, imacroncyrillic:1251, 
  imageorapproximatelyequal:8787, imatragurmukhi:2623, imonospace:65353, increment:8710, infinity:8734, iniarmenian:1387, integral:8747, integralbottom:8993, integralbt:8993, integralex:63733, integraltop:8992, integraltp:8992, intersection:8745, intisquare:13061, invbullet:9688, invcircle:9689, invsmileface:9787, iocyrillic:1105, iogonek:303, iota:953, iotadieresis:970, iotadieresistonos:912, iotalatin:617, iotatonos:943, iparen:9380, irigurmukhi:2674, ismallhiragana:12355, ismallkatakana:12451, 
  ismallkatakanahalfwidth:65384, issharbengali:2554, istroke:616, isuperior:63213, iterationhiragana:12445, iterationkatakana:12541, itilde:297, itildebelow:7725, iubopomofo:12585, iucyrillic:1102, ivowelsignbengali:2495, ivowelsigndeva:2367, ivowelsigngujarati:2751, izhitsacyrillic:1141, izhitsadblgravecyrillic:1143, j:106, jaarmenian:1393, jabengali:2460, jadeva:2332, jagujarati:2716, jagurmukhi:2588, jbopomofo:12560, jcaron:496, jcircle:9433, jcircumflex:309, jcrossedtail:669, jdotlessstroke:607, 
  jecyrillic:1112, jeemarabic:1580, jeemfinalarabic:65182, jeeminitialarabic:65183, jeemmedialarabic:65184, jeharabic:1688, jehfinalarabic:64395, jhabengali:2461, jhadeva:2333, jhagujarati:2717, jhagurmukhi:2589, jheharmenian:1403, jis:12292, jmonospace:65354, jparen:9381, jsuperior:690, k:107, kabashkircyrillic:1185, kabengali:2453, kacute:7729, kacyrillic:1082, kadescendercyrillic:1179, kadeva:2325, kaf:1499, kafarabic:1603, kafdagesh:64315, kafdageshhebrew:64315, kaffinalarabic:65242, kafhebrew:1499, 
  kafinitialarabic:65243, kafmedialarabic:65244, kafrafehebrew:64333, kagujarati:2709, kagurmukhi:2581, kahiragana:12363, kahookcyrillic:1220, kakatakana:12459, kakatakanahalfwidth:65398, kappa:954, kappasymbolgreek:1008, kapyeounmieumkorean:12657, kapyeounphieuphkorean:12676, kapyeounpieupkorean:12664, kapyeounssangpieupkorean:12665, karoriisquare:13069, kashidaautoarabic:1600, kashidaautonosidebearingarabic:1600, kasmallkatakana:12533, kasquare:13188, kasraarabic:1616, kasratanarabic:1613, kastrokecyrillic:1183, 
  katahiraprolongmarkhalfwidth:65392, kaverticalstrokecyrillic:1181, kbopomofo:12558, kcalsquare:13193, kcaron:489, kcedilla:311, kcircle:9434, kcommaaccent:311, kdotbelow:7731, keharmenian:1412, kehiragana:12369, kekatakana:12465, kekatakanahalfwidth:65401, kenarmenian:1391, kesmallkatakana:12534, kgreenlandic:312, khabengali:2454, khacyrillic:1093, khadeva:2326, khagujarati:2710, khagurmukhi:2582, khaharabic:1582, khahfinalarabic:65190, khahinitialarabic:65191, khahmedialarabic:65192, kheicoptic:999, 
  khhadeva:2393, khhagurmukhi:2649, khieukhacirclekorean:12920, khieukhaparenkorean:12824, khieukhcirclekorean:12906, khieukhkorean:12619, khieukhparenkorean:12810, khokhaithai:3586, khokhonthai:3589, khokhuatthai:3587, khokhwaithai:3588, khomutthai:3675, khook:409, khorakhangthai:3590, khzsquare:13201, kihiragana:12365, kikatakana:12461, kikatakanahalfwidth:65399, kiroguramusquare:13077, kiromeetorusquare:13078, kirosquare:13076, kiyeokacirclekorean:12910, kiyeokaparenkorean:12814, kiyeokcirclekorean:12896, 
  kiyeokkorean:12593, kiyeokparenkorean:12800, kiyeoksioskorean:12595, kjecyrillic:1116, klinebelow:7733, klsquare:13208, kmcubedsquare:13222, kmonospace:65355, kmsquaredsquare:13218, kohiragana:12371, kohmsquare:13248, kokaithai:3585, kokatakana:12467, kokatakanahalfwidth:65402, kooposquare:13086, koppacyrillic:1153, koreanstandardsymbol:12927, koroniscmb:835, kparen:9382, kpasquare:13226, ksicyrillic:1135, ktsquare:13263, kturned:670, kuhiragana:12367, kukatakana:12463, kukatakanahalfwidth:65400, 
  kvsquare:13240, kwsquare:13246, l:108, labengali:2482, lacute:314, ladeva:2354, lagujarati:2738, lagurmukhi:2610, lakkhangyaothai:3653, lamaleffinalarabic:65276, lamalefhamzaabovefinalarabic:65272, lamalefhamzaaboveisolatedarabic:65271, lamalefhamzabelowfinalarabic:65274, lamalefhamzabelowisolatedarabic:65273, lamalefisolatedarabic:65275, lamalefmaddaabovefinalarabic:65270, lamalefmaddaaboveisolatedarabic:65269, lamarabic:1604, lambda:955, lambdastroke:411, lamed:1500, lameddagesh:64316, lameddageshhebrew:64316, 
  lamedhebrew:1500, lamfinalarabic:65246, lamhahinitialarabic:64714, laminitialarabic:65247, lamjeeminitialarabic:64713, lamkhahinitialarabic:64715, lamlamhehisolatedarabic:65010, lammedialarabic:65248, lammeemhahinitialarabic:64904, lammeeminitialarabic:64716, largecircle:9711, lbar:410, lbelt:620, lbopomofo:12556, lcaron:318, lcedilla:316, lcircle:9435, lcircumflexbelow:7741, lcommaaccent:316, ldot:320, ldotaccent:320, ldotbelow:7735, ldotbelowmacron:7737, leftangleabovecmb:794, lefttackbelowcmb:792, 
  less:60, lessequal:8804, lessequalorgreater:8922, lessmonospace:65308, lessorequivalent:8818, lessorgreater:8822, lessoverequal:8806, lesssmall:65124, lezh:622, lfblock:9612, lhookretroflex:621, lira:8356, liwnarmenian:1388, lj:457, ljecyrillic:1113, ll:63168, lladeva:2355, llagujarati:2739, llinebelow:7739, llladeva:2356, llvocalicbengali:2529, llvocalicdeva:2401, llvocalicvowelsignbengali:2531, llvocalicvowelsigndeva:2403, lmiddletilde:619, lmonospace:65356, lmsquare:13264, lochulathai:3628, 
  logicaland:8743, logicalnot:172, logicalnotreversed:8976, logicalor:8744, lolingthai:3621, longs:383, lowlinecenterline:65102, lowlinecmb:818, lowlinedashed:65101, lozenge:9674, lparen:9383, lslash:322, lsquare:8467, lsuperior:63214, ltshade:9617, luthai:3622, lvocalicbengali:2444, lvocalicdeva:2316, lvocalicvowelsignbengali:2530, lvocalicvowelsigndeva:2402, lxsquare:13267, m:109, mabengali:2478, macron:175, macronbelowcmb:817, macroncmb:772, macronlowmod:717, macronmonospace:65507, macute:7743, 
  madeva:2350, magujarati:2734, magurmukhi:2606, mahapakhhebrew:1444, mahapakhlefthebrew:1444, mahiragana:12414, maichattawalowleftthai:63637, maichattawalowrightthai:63636, maichattawathai:3659, maichattawaupperleftthai:63635, maieklowleftthai:63628, maieklowrightthai:63627, maiekthai:3656, maiekupperleftthai:63626, maihanakatleftthai:63620, maihanakatthai:3633, maitaikhuleftthai:63625, maitaikhuthai:3655, maitholowleftthai:63631, maitholowrightthai:63630, maithothai:3657, maithoupperleftthai:63629, 
  maitrilowleftthai:63634, maitrilowrightthai:63633, maitrithai:3658, maitriupperleftthai:63632, maiyamokthai:3654, makatakana:12510, makatakanahalfwidth:65423, male:9794, mansyonsquare:13127, maqafhebrew:1470, mars:9794, masoracirclehebrew:1455, masquare:13187, mbopomofo:12551, mbsquare:13268, mcircle:9436, mcubedsquare:13221, mdotaccent:7745, mdotbelow:7747, meemarabic:1605, meemfinalarabic:65250, meeminitialarabic:65251, meemmedialarabic:65252, meemmeeminitialarabic:64721, meemmeemisolatedarabic:64584, 
  meetorusquare:13133, mehiragana:12417, meizierasquare:13182, mekatakana:12513, mekatakanahalfwidth:65426, mem:1502, memdagesh:64318, memdageshhebrew:64318, memhebrew:1502, menarmenian:1396, merkhahebrew:1445, merkhakefulahebrew:1446, merkhakefulalefthebrew:1446, merkhalefthebrew:1445, mhook:625, mhzsquare:13202, middledotkatakanahalfwidth:65381, middot:183, mieumacirclekorean:12914, mieumaparenkorean:12818, mieumcirclekorean:12900, mieumkorean:12609, mieumpansioskorean:12656, mieumparenkorean:12804, 
  mieumpieupkorean:12654, mieumsioskorean:12655, mihiragana:12415, mikatakana:12511, mikatakanahalfwidth:65424, minus:8722, minusbelowcmb:800, minuscircle:8854, minusmod:727, minusplus:8723, minute:8242, miribaarusquare:13130, mirisquare:13129, mlonglegturned:624, mlsquare:13206, mmcubedsquare:13219, mmonospace:65357, mmsquaredsquare:13215, mohiragana:12418, mohmsquare:13249, mokatakana:12514, mokatakanahalfwidth:65427, molsquare:13270, momathai:3617, moverssquare:13223, moverssquaredsquare:13224, 
  mparen:9384, mpasquare:13227, mssquare:13235, msuperior:63215, mturned:623, mu:181, mu1:181, muasquare:13186, muchgreater:8811, muchless:8810, mufsquare:13196, mugreek:956, mugsquare:13197, muhiragana:12416, mukatakana:12512, mukatakanahalfwidth:65425, mulsquare:13205, multiply:215, mumsquare:13211, munahhebrew:1443, munahlefthebrew:1443, musicalnote:9834, musicalnotedbl:9835, musicflatsign:9837, musicsharpsign:9839, mussquare:13234, muvsquare:13238, muwsquare:13244, mvmegasquare:13241, mvsquare:13239, 
  mwmegasquare:13247, mwsquare:13245, n:110, nabengali:2472, nabla:8711, nacute:324, nadeva:2344, nagujarati:2728, nagurmukhi:2600, nahiragana:12394, nakatakana:12490, nakatakanahalfwidth:65413, napostrophe:329, nasquare:13185, nbopomofo:12555, nbspace:160, ncaron:328, ncedilla:326, ncircle:9437, ncircumflexbelow:7755, ncommaaccent:326, ndotaccent:7749, ndotbelow:7751, nehiragana:12397, nekatakana:12493, nekatakanahalfwidth:65416, newsheqelsign:8362, nfsquare:13195, ngabengali:2457, ngadeva:2329, 
  ngagujarati:2713, ngagurmukhi:2585, ngonguthai:3591, nhiragana:12435, nhookleft:626, nhookretroflex:627, nieunacirclekorean:12911, nieunaparenkorean:12815, nieuncieuckorean:12597, nieuncirclekorean:12897, nieunhieuhkorean:12598, nieunkorean:12596, nieunpansioskorean:12648, nieunparenkorean:12801, nieunsioskorean:12647, nieuntikeutkorean:12646, nihiragana:12395, nikatakana:12491, nikatakanahalfwidth:65414, nikhahitleftthai:63641, nikhahitthai:3661, nine:57, ninearabic:1641, ninebengali:2543, ninecircle:9320, 
  ninecircleinversesansserif:10130, ninedeva:2415, ninegujarati:2799, ninegurmukhi:2671, ninehackarabic:1641, ninehangzhou:12329, nineideographicparen:12840, nineinferior:8329, ninemonospace:65305, nineoldstyle:63289, nineparen:9340, nineperiod:9360, ninepersian:1785, nineroman:8568, ninesuperior:8313, nineteencircle:9330, nineteenparen:9350, nineteenperiod:9370, ninethai:3673, nj:460, njecyrillic:1114, nkatakana:12531, nkatakanahalfwidth:65437, nlegrightlong:414, nlinebelow:7753, nmonospace:65358, 
  nmsquare:13210, nnabengali:2467, nnadeva:2339, nnagujarati:2723, nnagurmukhi:2595, nnnadeva:2345, nohiragana:12398, nokatakana:12494, nokatakanahalfwidth:65417, nonbreakingspace:160, nonenthai:3603, nonuthai:3609, noonarabic:1606, noonfinalarabic:65254, noonghunnaarabic:1722, noonghunnafinalarabic:64415, nooninitialarabic:65255, noonjeeminitialarabic:64722, noonjeemisolatedarabic:64587, noonmedialarabic:65256, noonmeeminitialarabic:64725, noonmeemisolatedarabic:64590, noonnoonfinalarabic:64653, 
  notcontains:8716, notelement:8713, notelementof:8713, notequal:8800, notgreater:8815, notgreaternorequal:8817, notgreaternorless:8825, notidentical:8802, notless:8814, notlessnorequal:8816, notparallel:8742, notprecedes:8832, notsubset:8836, notsucceeds:8833, notsuperset:8837, nowarmenian:1398, nparen:9385, nssquare:13233, nsuperior:8319, ntilde:241, nu:957, nuhiragana:12396, nukatakana:12492, nukatakanahalfwidth:65415, nuktabengali:2492, nuktadeva:2364, nuktagujarati:2748, nuktagurmukhi:2620, 
  numbersign:35, numbersignmonospace:65283, numbersignsmall:65119, numeralsigngreek:884, numeralsignlowergreek:885, numero:8470, nun:1504, nundagesh:64320, nundageshhebrew:64320, nunhebrew:1504, nvsquare:13237, nwsquare:13243, nyabengali:2462, nyadeva:2334, nyagujarati:2718, nyagurmukhi:2590, o:111, oacute:243, oangthai:3629, obarred:629, obarredcyrillic:1257, obarreddieresiscyrillic:1259, obengali:2451, obopomofo:12571, obreve:335, ocandradeva:2321, ocandragujarati:2705, ocandravowelsigndeva:2377, 
  ocandravowelsigngujarati:2761, ocaron:466, ocircle:9438, ocircumflex:244, ocircumflexacute:7889, ocircumflexdotbelow:7897, ocircumflexgrave:7891, ocircumflexhookabove:7893, ocircumflextilde:7895, ocyrillic:1086, odblacute:337, odblgrave:525, odeva:2323, odieresis:246, odieresiscyrillic:1255, odotbelow:7885, oe:339, oekorean:12634, ogonek:731, ogonekcmb:808, ograve:242, ogujarati:2707, oharmenian:1413, ohiragana:12362, ohookabove:7887, ohorn:417, ohornacute:7899, ohorndotbelow:7907, ohorngrave:7901, 
  ohornhookabove:7903, ohorntilde:7905, ohungarumlaut:337, oi:419, oinvertedbreve:527, okatakana:12458, okatakanahalfwidth:65397, okorean:12631, olehebrew:1451, omacron:333, omacronacute:7763, omacrongrave:7761, omdeva:2384, omega:969, omega1:982, omegacyrillic:1121, omegalatinclosed:631, omegaroundcyrillic:1147, omegatitlocyrillic:1149, omegatonos:974, omgujarati:2768, omicron:959, omicrontonos:972, omonospace:65359, one:49, onearabic:1633, onebengali:2535, onecircle:9312, onecircleinversesansserif:10122, 
  onedeva:2407, onedotenleader:8228, oneeighth:8539, onefitted:63196, onegujarati:2791, onegurmukhi:2663, onehackarabic:1633, onehalf:189, onehangzhou:12321, oneideographicparen:12832, oneinferior:8321, onemonospace:65297, onenumeratorbengali:2548, oneoldstyle:63281, oneparen:9332, oneperiod:9352, onepersian:1777, onequarter:188, oneroman:8560, onesuperior:185, onethai:3665, onethird:8531, oogonek:491, oogonekmacron:493, oogurmukhi:2579, oomatragurmukhi:2635, oopen:596, oparen:9386, openbullet:9702, 
  option:8997, ordfeminine:170, ordmasculine:186, orthogonal:8735, oshortdeva:2322, oshortvowelsigndeva:2378, oslash:248, oslashacute:511, osmallhiragana:12361, osmallkatakana:12457, osmallkatakanahalfwidth:65387, ostrokeacute:511, osuperior:63216, otcyrillic:1151, otilde:245, otildeacute:7757, otildedieresis:7759, oubopomofo:12577, overline:8254, overlinecenterline:65098, overlinecmb:773, overlinedashed:65097, overlinedblwavy:65100, overlinewavy:65099, overscore:175, ovowelsignbengali:2507, ovowelsigndeva:2379, 
  ovowelsigngujarati:2763, p:112, paampssquare:13184, paasentosquare:13099, pabengali:2474, pacute:7765, padeva:2346, pagedown:8671, pageup:8670, pagujarati:2730, pagurmukhi:2602, pahiragana:12401, paiyannoithai:3631, pakatakana:12497, palatalizationcyrilliccmb:1156, palochkacyrillic:1216, pansioskorean:12671, paragraph:182, parallel:8741, parenleft:40, parenleftaltonearabic:64830, parenleftbt:63725, parenleftex:63724, parenleftinferior:8333, parenleftmonospace:65288, parenleftsmall:65113, parenleftsuperior:8317, 
  parenlefttp:63723, parenleftvertical:65077, parenright:41, parenrightaltonearabic:64831, parenrightbt:63736, parenrightex:63735, parenrightinferior:8334, parenrightmonospace:65289, parenrightsmall:65114, parenrightsuperior:8318, parenrighttp:63734, parenrightvertical:65078, partialdiff:8706, paseqhebrew:1472, pashtahebrew:1433, pasquare:13225, patah:1463, patah11:1463, patah1d:1463, patah2a:1463, patahhebrew:1463, patahnarrowhebrew:1463, patahquarterhebrew:1463, patahwidehebrew:1463, pazerhebrew:1441, 
  pbopomofo:12550, pcircle:9439, pdotaccent:7767, pe:1508, pecyrillic:1087, pedagesh:64324, pedageshhebrew:64324, peezisquare:13115, pefinaldageshhebrew:64323, peharabic:1662, peharmenian:1402, pehebrew:1508, pehfinalarabic:64343, pehinitialarabic:64344, pehiragana:12410, pehmedialarabic:64345, pekatakana:12506, pemiddlehookcyrillic:1191, perafehebrew:64334, percent:37, percentarabic:1642, percentmonospace:65285, percentsmall:65130, period:46, periodarmenian:1417, periodcentered:183, periodhalfwidth:65377, 
  periodinferior:63207, periodmonospace:65294, periodsmall:65106, periodsuperior:63208, perispomenigreekcmb:834, perpendicular:8869, perthousand:8240, peseta:8359, pfsquare:13194, phabengali:2475, phadeva:2347, phagujarati:2731, phagurmukhi:2603, phi:966, phi1:981, phieuphacirclekorean:12922, phieuphaparenkorean:12826, phieuphcirclekorean:12908, phieuphkorean:12621, phieuphparenkorean:12812, philatin:632, phinthuthai:3642, phisymbolgreek:981, phook:421, phophanthai:3614, phophungthai:3612, phosamphaothai:3616, 
  pi:960, pieupacirclekorean:12915, pieupaparenkorean:12819, pieupcieuckorean:12662, pieupcirclekorean:12901, pieupkiyeokkorean:12658, pieupkorean:12610, pieupparenkorean:12805, pieupsioskiyeokkorean:12660, pieupsioskorean:12612, pieupsiostikeutkorean:12661, pieupthieuthkorean:12663, pieuptikeutkorean:12659, pihiragana:12404, pikatakana:12500, pisymbolgreek:982, piwrarmenian:1411, plus:43, plusbelowcmb:799, pluscircle:8853, plusminus:177, plusmod:726, plusmonospace:65291, plussmall:65122, plussuperior:8314, 
  pmonospace:65360, pmsquare:13272, pohiragana:12413, pointingindexdownwhite:9759, pointingindexleftwhite:9756, pointingindexrightwhite:9758, pointingindexupwhite:9757, pokatakana:12509, poplathai:3611, postalmark:12306, postalmarkface:12320, pparen:9387, precedes:8826, prescription:8478, primemod:697, primereversed:8245, product:8719, projective:8965, prolongedkana:12540, propellor:8984, propersubset:8834, propersuperset:8835, proportion:8759, proportional:8733, psi:968, psicyrillic:1137, psilipneumatacyrilliccmb:1158, 
  pssquare:13232, puhiragana:12407, pukatakana:12503, pvsquare:13236, pwsquare:13242, q:113, qadeva:2392, qadmahebrew:1448, qafarabic:1602, qaffinalarabic:65238, qafinitialarabic:65239, qafmedialarabic:65240, qamats:1464, qamats10:1464, qamats1a:1464, qamats1c:1464, qamats27:1464, qamats29:1464, qamats33:1464, qamatsde:1464, qamatshebrew:1464, qamatsnarrowhebrew:1464, qamatsqatanhebrew:1464, qamatsqatannarrowhebrew:1464, qamatsqatanquarterhebrew:1464, qamatsqatanwidehebrew:1464, qamatsquarterhebrew:1464, 
  qamatswidehebrew:1464, qarneyparahebrew:1439, qbopomofo:12561, qcircle:9440, qhook:672, qmonospace:65361, qof:1511, qofdagesh:64327, qofdageshhebrew:64327, qofhebrew:1511, qparen:9388, quarternote:9833, qubuts:1467, qubuts18:1467, qubuts25:1467, qubuts31:1467, qubutshebrew:1467, qubutsnarrowhebrew:1467, qubutsquarterhebrew:1467, qubutswidehebrew:1467, question:63, questionarabic:1567, questionarmenian:1374, questiondown:191, questiondownsmall:63423, questiongreek:894, questionmonospace:65311, questionsmall:63295, 
  quotedbl:34, quotedblbase:8222, quotedblleft:8220, quotedblmonospace:65282, quotedblprime:12318, quotedblprimereversed:12317, quotedblright:8221, quoteleft:8216, quoteleftreversed:8219, quotereversed:8219, quoteright:8217, quoterightn:329, quotesinglbase:8218, quotesingle:39, quotesinglemonospace:65287, r:114, raarmenian:1404, rabengali:2480, racute:341, radeva:2352, radical:8730, radicalex:63717, radoverssquare:13230, radoverssquaredsquare:13231, radsquare:13229, rafe:1471, rafehebrew:1471, ragujarati:2736, 
  ragurmukhi:2608, rahiragana:12425, rakatakana:12521, rakatakanahalfwidth:65431, ralowerdiagonalbengali:2545, ramiddlediagonalbengali:2544, ramshorn:612, ratio:8758, rbopomofo:12566, rcaron:345, rcedilla:343, rcircle:9441, rcommaaccent:343, rdblgrave:529, rdotaccent:7769, rdotbelow:7771, rdotbelowmacron:7773, referencemark:8251, reflexsubset:8838, reflexsuperset:8839, registered:174, registersans:63720, registerserif:63194, reharabic:1585, reharmenian:1408, rehfinalarabic:65198, rehiragana:12428, 
  rekatakana:12524, rekatakanahalfwidth:65434, resh:1512, reshdageshhebrew:64328, reshhebrew:1512, reversedtilde:8765, reviahebrew:1431, reviamugrashhebrew:1431, revlogicalnot:8976, rfishhook:638, rfishhookreversed:639, rhabengali:2525, rhadeva:2397, rho:961, rhook:637, rhookturned:635, rhookturnedsuperior:693, rhosymbolgreek:1009, rhotichookmod:734, rieulacirclekorean:12913, rieulaparenkorean:12817, rieulcirclekorean:12899, rieulhieuhkorean:12608, rieulkiyeokkorean:12602, rieulkiyeoksioskorean:12649, 
  rieulkorean:12601, rieulmieumkorean:12603, rieulpansioskorean:12652, rieulparenkorean:12803, rieulphieuphkorean:12607, rieulpieupkorean:12604, rieulpieupsioskorean:12651, rieulsioskorean:12605, rieulthieuthkorean:12606, rieultikeutkorean:12650, rieulyeorinhieuhkorean:12653, rightangle:8735, righttackbelowcmb:793, righttriangle:8895, rihiragana:12426, rikatakana:12522, rikatakanahalfwidth:65432, ring:730, ringbelowcmb:805, ringcmb:778, ringhalfleft:703, ringhalfleftarmenian:1369, ringhalfleftbelowcmb:796, 
  ringhalfleftcentered:723, ringhalfright:702, ringhalfrightbelowcmb:825, ringhalfrightcentered:722, rinvertedbreve:531, rittorusquare:13137, rlinebelow:7775, rlongleg:636, rlonglegturned:634, rmonospace:65362, rohiragana:12429, rokatakana:12525, rokatakanahalfwidth:65435, roruathai:3619, rparen:9389, rrabengali:2524, rradeva:2353, rragurmukhi:2652, rreharabic:1681, rrehfinalarabic:64397, rrvocalicbengali:2528, rrvocalicdeva:2400, rrvocalicgujarati:2784, rrvocalicvowelsignbengali:2500, rrvocalicvowelsigndeva:2372, 
  rrvocalicvowelsigngujarati:2756, rsuperior:63217, rtblock:9616, rturned:633, rturnedsuperior:692, ruhiragana:12427, rukatakana:12523, rukatakanahalfwidth:65433, rupeemarkbengali:2546, rupeesignbengali:2547, rupiah:63197, ruthai:3620, rvocalicbengali:2443, rvocalicdeva:2315, rvocalicgujarati:2699, rvocalicvowelsignbengali:2499, rvocalicvowelsigndeva:2371, rvocalicvowelsigngujarati:2755, s:115, sabengali:2488, sacute:347, sacutedotaccent:7781, sadarabic:1589, sadeva:2360, sadfinalarabic:65210, sadinitialarabic:65211, 
  sadmedialarabic:65212, sagujarati:2744, sagurmukhi:2616, sahiragana:12373, sakatakana:12469, sakatakanahalfwidth:65403, sallallahoualayhewasallamarabic:65018, samekh:1505, samekhdagesh:64321, samekhdageshhebrew:64321, samekhhebrew:1505, saraaathai:3634, saraaethai:3649, saraaimaimalaithai:3652, saraaimaimuanthai:3651, saraamthai:3635, saraathai:3632, saraethai:3648, saraiileftthai:63622, saraiithai:3637, saraileftthai:63621, saraithai:3636, saraothai:3650, saraueeleftthai:63624, saraueethai:3639, 
  saraueleftthai:63623, sarauethai:3638, sarauthai:3640, sarauuthai:3641, sbopomofo:12569, scaron:353, scarondotaccent:7783, scedilla:351, schwa:601, schwacyrillic:1241, schwadieresiscyrillic:1243, schwahook:602, scircle:9442, scircumflex:349, scommaaccent:537, sdotaccent:7777, sdotbelow:7779, sdotbelowdotaccent:7785, seagullbelowcmb:828, second:8243, secondtonechinese:714, section:167, seenarabic:1587, seenfinalarabic:65202, seeninitialarabic:65203, seenmedialarabic:65204, segol:1462, segol13:1462, 
  segol1f:1462, segol2c:1462, segolhebrew:1462, segolnarrowhebrew:1462, segolquarterhebrew:1462, segoltahebrew:1426, segolwidehebrew:1462, seharmenian:1405, sehiragana:12379, sekatakana:12475, sekatakanahalfwidth:65406, semicolon:59, semicolonarabic:1563, semicolonmonospace:65307, semicolonsmall:65108, semivoicedmarkkana:12444, semivoicedmarkkanahalfwidth:65439, sentisquare:13090, sentosquare:13091, seven:55, sevenarabic:1639, sevenbengali:2541, sevencircle:9318, sevencircleinversesansserif:10128, 
  sevendeva:2413, seveneighths:8542, sevengujarati:2797, sevengurmukhi:2669, sevenhackarabic:1639, sevenhangzhou:12327, sevenideographicparen:12838, seveninferior:8327, sevenmonospace:65303, sevenoldstyle:63287, sevenparen:9338, sevenperiod:9358, sevenpersian:1783, sevenroman:8566, sevensuperior:8311, seventeencircle:9328, seventeenparen:9348, seventeenperiod:9368, seventhai:3671, sfthyphen:173, shaarmenian:1399, shabengali:2486, shacyrillic:1096, shaddaarabic:1617, shaddadammaarabic:64609, shaddadammatanarabic:64606, 
  shaddafathaarabic:64608, shaddakasraarabic:64610, shaddakasratanarabic:64607, shade:9618, shadedark:9619, shadelight:9617, shademedium:9618, shadeva:2358, shagujarati:2742, shagurmukhi:2614, shalshelethebrew:1427, shbopomofo:12565, shchacyrillic:1097, sheenarabic:1588, sheenfinalarabic:65206, sheeninitialarabic:65207, sheenmedialarabic:65208, sheicoptic:995, sheqel:8362, sheqelhebrew:8362, sheva:1456, sheva115:1456, sheva15:1456, sheva22:1456, sheva2e:1456, shevahebrew:1456, shevanarrowhebrew:1456, 
  shevaquarterhebrew:1456, shevawidehebrew:1456, shhacyrillic:1211, shimacoptic:1005, shin:1513, shindagesh:64329, shindageshhebrew:64329, shindageshshindot:64300, shindageshshindothebrew:64300, shindageshsindot:64301, shindageshsindothebrew:64301, shindothebrew:1473, shinhebrew:1513, shinshindot:64298, shinshindothebrew:64298, shinsindot:64299, shinsindothebrew:64299, shook:642, sigma:963, sigma1:962, sigmafinal:962, sigmalunatesymbolgreek:1010, sihiragana:12375, sikatakana:12471, sikatakanahalfwidth:65404, 
  siluqhebrew:1469, siluqlefthebrew:1469, similar:8764, sindothebrew:1474, siosacirclekorean:12916, siosaparenkorean:12820, sioscieuckorean:12670, sioscirclekorean:12902, sioskiyeokkorean:12666, sioskorean:12613, siosnieunkorean:12667, siosparenkorean:12806, siospieupkorean:12669, siostikeutkorean:12668, six:54, sixarabic:1638, sixbengali:2540, sixcircle:9317, sixcircleinversesansserif:10127, sixdeva:2412, sixgujarati:2796, sixgurmukhi:2668, sixhackarabic:1638, sixhangzhou:12326, sixideographicparen:12837, 
  sixinferior:8326, sixmonospace:65302, sixoldstyle:63286, sixparen:9337, sixperiod:9357, sixpersian:1782, sixroman:8565, sixsuperior:8310, sixteencircle:9327, sixteencurrencydenominatorbengali:2553, sixteenparen:9347, sixteenperiod:9367, sixthai:3670, slash:47, slashmonospace:65295, slong:383, slongdotaccent:7835, smileface:9786, smonospace:65363, sofpasuqhebrew:1475, softhyphen:173, softsigncyrillic:1100, sohiragana:12381, sokatakana:12477, sokatakanahalfwidth:65407, soliduslongoverlaycmb:824, 
  solidusshortoverlaycmb:823, sorusithai:3625, sosalathai:3624, sosothai:3595, sosuathai:3626, space:32, spacehackarabic:32, spade:9824, spadesuitblack:9824, spadesuitwhite:9828, sparen:9390, squarebelowcmb:827, squarecc:13252, squarecm:13213, squarediagonalcrosshatchfill:9641, squarehorizontalfill:9636, squarekg:13199, squarekm:13214, squarekmcapital:13262, squareln:13265, squarelog:13266, squaremg:13198, squaremil:13269, squaremm:13212, squaremsquared:13217, squareorthogonalcrosshatchfill:9638, 
  squareupperlefttolowerrightfill:9639, squareupperrighttolowerleftfill:9640, squareverticalfill:9637, squarewhitewithsmallblack:9635, srsquare:13275, ssabengali:2487, ssadeva:2359, ssagujarati:2743, ssangcieuckorean:12617, ssanghieuhkorean:12677, ssangieungkorean:12672, ssangkiyeokkorean:12594, ssangnieunkorean:12645, ssangpieupkorean:12611, ssangsioskorean:12614, ssangtikeutkorean:12600, ssuperior:63218, sterling:163, sterlingmonospace:65505, strokelongoverlaycmb:822, strokeshortoverlaycmb:821, 
  subset:8834, subsetnotequal:8842, subsetorequal:8838, succeeds:8827, suchthat:8715, suhiragana:12377, sukatakana:12473, sukatakanahalfwidth:65405, sukunarabic:1618, summation:8721, sun:9788, superset:8835, supersetnotequal:8843, supersetorequal:8839, svsquare:13276, syouwaerasquare:13180, t:116, tabengali:2468, tackdown:8868, tackleft:8867, tadeva:2340, tagujarati:2724, tagurmukhi:2596, taharabic:1591, tahfinalarabic:65218, tahinitialarabic:65219, tahiragana:12383, tahmedialarabic:65220, taisyouerasquare:13181, 
  takatakana:12479, takatakanahalfwidth:65408, tatweelarabic:1600, tau:964, tav:1514, tavdages:64330, tavdagesh:64330, tavdageshhebrew:64330, tavhebrew:1514, tbar:359, tbopomofo:12554, tcaron:357, tccurl:680, tcedilla:355, tcheharabic:1670, tchehfinalarabic:64379, tchehinitialarabic:64380, tchehmedialarabic:64381, tcircle:9443, tcircumflexbelow:7793, tcommaaccent:355, tdieresis:7831, tdotaccent:7787, tdotbelow:7789, tecyrillic:1090, tedescendercyrillic:1197, teharabic:1578, tehfinalarabic:65174, 
  tehhahinitialarabic:64674, tehhahisolatedarabic:64524, tehinitialarabic:65175, tehiragana:12390, tehjeeminitialarabic:64673, tehjeemisolatedarabic:64523, tehmarbutaarabic:1577, tehmarbutafinalarabic:65172, tehmedialarabic:65176, tehmeeminitialarabic:64676, tehmeemisolatedarabic:64526, tehnoonfinalarabic:64627, tekatakana:12486, tekatakanahalfwidth:65411, telephone:8481, telephoneblack:9742, telishagedolahebrew:1440, telishaqetanahebrew:1449, tencircle:9321, tenideographicparen:12841, tenparen:9341, 
  tenperiod:9361, tenroman:8569, tesh:679, tet:1496, tetdagesh:64312, tetdageshhebrew:64312, tethebrew:1496, tetsecyrillic:1205, tevirhebrew:1435, tevirlefthebrew:1435, thabengali:2469, thadeva:2341, thagujarati:2725, thagurmukhi:2597, thalarabic:1584, thalfinalarabic:65196, thanthakhatlowleftthai:63640, thanthakhatlowrightthai:63639, thanthakhatthai:3660, thanthakhatupperleftthai:63638, theharabic:1579, thehfinalarabic:65178, thehinitialarabic:65179, thehmedialarabic:65180, thereexists:8707, therefore:8756, 
  theta:952, theta1:977, thetasymbolgreek:977, thieuthacirclekorean:12921, thieuthaparenkorean:12825, thieuthcirclekorean:12907, thieuthkorean:12620, thieuthparenkorean:12811, thirteencircle:9324, thirteenparen:9344, thirteenperiod:9364, thonangmonthothai:3601, thook:429, thophuthaothai:3602, thorn:254, thothahanthai:3607, thothanthai:3600, thothongthai:3608, thothungthai:3606, thousandcyrillic:1154, thousandsseparatorarabic:1644, thousandsseparatorpersian:1644, three:51, threearabic:1635, threebengali:2537, 
  threecircle:9314, threecircleinversesansserif:10124, threedeva:2409, threeeighths:8540, threegujarati:2793, threegurmukhi:2665, threehackarabic:1635, threehangzhou:12323, threeideographicparen:12834, threeinferior:8323, threemonospace:65299, threenumeratorbengali:2550, threeoldstyle:63283, threeparen:9334, threeperiod:9354, threepersian:1779, threequarters:190, threequartersemdash:63198, threeroman:8562, threesuperior:179, threethai:3667, thzsquare:13204, tihiragana:12385, tikatakana:12481, tikatakanahalfwidth:65409, 
  tikeutacirclekorean:12912, tikeutaparenkorean:12816, tikeutcirclekorean:12898, tikeutkorean:12599, tikeutparenkorean:12802, tilde:732, tildebelowcmb:816, tildecmb:771, tildecomb:771, tildedoublecmb:864, tildeoperator:8764, tildeoverlaycmb:820, tildeverticalcmb:830, timescircle:8855, tipehahebrew:1430, tipehalefthebrew:1430, tippigurmukhi:2672, titlocyrilliccmb:1155, tiwnarmenian:1407, tlinebelow:7791, tmonospace:65364, toarmenian:1385, tohiragana:12392, tokatakana:12488, tokatakanahalfwidth:65412, 
  tonebarextrahighmod:741, tonebarextralowmod:745, tonebarhighmod:742, tonebarlowmod:744, tonebarmidmod:743, tonefive:445, tonesix:389, tonetwo:424, tonos:900, tonsquare:13095, topatakthai:3599, tortoiseshellbracketleft:12308, tortoiseshellbracketleftsmall:65117, tortoiseshellbracketleftvertical:65081, tortoiseshellbracketright:12309, tortoiseshellbracketrightsmall:65118, tortoiseshellbracketrightvertical:65082, totaothai:3605, tpalatalhook:427, tparen:9391, trademark:8482, trademarksans:63722, trademarkserif:63195, 
  tretroflexhook:648, triagdn:9660, triaglf:9668, triagrt:9658, triagup:9650, ts:678, tsadi:1510, tsadidagesh:64326, tsadidageshhebrew:64326, tsadihebrew:1510, tsecyrillic:1094, tsere:1461, tsere12:1461, tsere1e:1461, tsere2b:1461, tserehebrew:1461, tserenarrowhebrew:1461, tserequarterhebrew:1461, tserewidehebrew:1461, tshecyrillic:1115, tsuperior:63219, ttabengali:2463, ttadeva:2335, ttagujarati:2719, ttagurmukhi:2591, tteharabic:1657, ttehfinalarabic:64359, ttehinitialarabic:64360, ttehmedialarabic:64361, 
  tthabengali:2464, tthadeva:2336, tthagujarati:2720, tthagurmukhi:2592, tturned:647, tuhiragana:12388, tukatakana:12484, tukatakanahalfwidth:65410, tusmallhiragana:12387, tusmallkatakana:12483, tusmallkatakanahalfwidth:65391, twelvecircle:9323, twelveparen:9343, twelveperiod:9363, twelveroman:8571, twentycircle:9331, twentyhangzhou:21316, twentyparen:9351, twentyperiod:9371, two:50, twoarabic:1634, twobengali:2536, twocircle:9313, twocircleinversesansserif:10123, twodeva:2408, twodotenleader:8229, 
  twodotleader:8229, twodotleadervertical:65072, twogujarati:2792, twogurmukhi:2664, twohackarabic:1634, twohangzhou:12322, twoideographicparen:12833, twoinferior:8322, twomonospace:65298, twonumeratorbengali:2549, twooldstyle:63282, twoparen:9333, twoperiod:9353, twopersian:1778, tworoman:8561, twostroke:443, twosuperior:178, twothai:3666, twothirds:8532, u:117, uacute:250, ubar:649, ubengali:2441, ubopomofo:12584, ubreve:365, ucaron:468, ucircle:9444, ucircumflex:251, ucircumflexbelow:7799, ucyrillic:1091, 
  udattadeva:2385, udblacute:369, udblgrave:533, udeva:2313, udieresis:252, udieresisacute:472, udieresisbelow:7795, udieresiscaron:474, udieresiscyrillic:1265, udieresisgrave:476, udieresismacron:470, udotbelow:7909, ugrave:249, ugujarati:2697, ugurmukhi:2569, uhiragana:12358, uhookabove:7911, uhorn:432, uhornacute:7913, uhorndotbelow:7921, uhorngrave:7915, uhornhookabove:7917, uhorntilde:7919, uhungarumlaut:369, uhungarumlautcyrillic:1267, uinvertedbreve:535, ukatakana:12454, ukatakanahalfwidth:65395, 
  ukcyrillic:1145, ukorean:12636, umacron:363, umacroncyrillic:1263, umacrondieresis:7803, umatragurmukhi:2625, umonospace:65365, underscore:95, underscoredbl:8215, underscoremonospace:65343, underscorevertical:65075, underscorewavy:65103, union:8746, universal:8704, uogonek:371, uparen:9392, upblock:9600, upperdothebrew:1476, upsilon:965, upsilondieresis:971, upsilondieresistonos:944, upsilonlatin:650, upsilontonos:973, uptackbelowcmb:797, uptackmod:724, uragurmukhi:2675, uring:367, ushortcyrillic:1118, 
  usmallhiragana:12357, usmallkatakana:12453, usmallkatakanahalfwidth:65385, ustraightcyrillic:1199, ustraightstrokecyrillic:1201, utilde:361, utildeacute:7801, utildebelow:7797, uubengali:2442, uudeva:2314, uugujarati:2698, uugurmukhi:2570, uumatragurmukhi:2626, uuvowelsignbengali:2498, uuvowelsigndeva:2370, uuvowelsigngujarati:2754, uvowelsignbengali:2497, uvowelsigndeva:2369, uvowelsigngujarati:2753, v:118, vadeva:2357, vagujarati:2741, vagurmukhi:2613, vakatakana:12535, vav:1493, vavdagesh:64309, 
  vavdagesh65:64309, vavdageshhebrew:64309, vavhebrew:1493, vavholam:64331, vavholamhebrew:64331, vavvavhebrew:1520, vavyodhebrew:1521, vcircle:9445, vdotbelow:7807, vecyrillic:1074, veharabic:1700, vehfinalarabic:64363, vehinitialarabic:64364, vehmedialarabic:64365, vekatakana:12537, venus:9792, verticalbar:124, verticallineabovecmb:781, verticallinebelowcmb:809, verticallinelowmod:716, verticallinemod:712, vewarmenian:1406, vhook:651, vikatakana:12536, viramabengali:2509, viramadeva:2381, viramagujarati:2765, 
  visargabengali:2435, visargadeva:2307, visargagujarati:2691, vmonospace:65366, voarmenian:1400, voicediterationhiragana:12446, voicediterationkatakana:12542, voicedmarkkana:12443, voicedmarkkanahalfwidth:65438, vokatakana:12538, vparen:9393, vtilde:7805, vturned:652, vuhiragana:12436, vukatakana:12532, w:119, wacute:7811, waekorean:12633, wahiragana:12431, wakatakana:12527, wakatakanahalfwidth:65436, wakorean:12632, wasmallhiragana:12430, wasmallkatakana:12526, wattosquare:13143, wavedash:12316, 
  wavyunderscorevertical:65076, wawarabic:1608, wawfinalarabic:65262, wawhamzaabovearabic:1572, wawhamzaabovefinalarabic:65158, wbsquare:13277, wcircle:9446, wcircumflex:373, wdieresis:7813, wdotaccent:7815, wdotbelow:7817, wehiragana:12433, weierstrass:8472, wekatakana:12529, wekorean:12638, weokorean:12637, wgrave:7809, whitebullet:9702, whitecircle:9675, whitecircleinverse:9689, whitecornerbracketleft:12302, whitecornerbracketleftvertical:65091, whitecornerbracketright:12303, whitecornerbracketrightvertical:65092, 
  whitediamond:9671, whitediamondcontainingblacksmalldiamond:9672, whitedownpointingsmalltriangle:9663, whitedownpointingtriangle:9661, whiteleftpointingsmalltriangle:9667, whiteleftpointingtriangle:9665, whitelenticularbracketleft:12310, whitelenticularbracketright:12311, whiterightpointingsmalltriangle:9657, whiterightpointingtriangle:9655, whitesmallsquare:9643, whitesmilingface:9786, whitesquare:9633, whitestar:9734, whitetelephone:9743, whitetortoiseshellbracketleft:12312, whitetortoiseshellbracketright:12313, 
  whiteuppointingsmalltriangle:9653, whiteuppointingtriangle:9651, wihiragana:12432, wikatakana:12528, wikorean:12639, wmonospace:65367, wohiragana:12434, wokatakana:12530, wokatakanahalfwidth:65382, won:8361, wonmonospace:65510, wowaenthai:3623, wparen:9394, wring:7832, wsuperior:695, wturned:653, wynn:447, x:120, xabovecmb:829, xbopomofo:12562, xcircle:9447, xdieresis:7821, xdotaccent:7819, xeharmenian:1389, xi:958, xmonospace:65368, xparen:9395, xsuperior:739, y:121, yaadosquare:13134, yabengali:2479, 
  yacute:253, yadeva:2351, yaekorean:12626, yagujarati:2735, yagurmukhi:2607, yahiragana:12420, yakatakana:12516, yakatakanahalfwidth:65428, yakorean:12625, yamakkanthai:3662, yasmallhiragana:12419, yasmallkatakana:12515, yasmallkatakanahalfwidth:65388, yatcyrillic:1123, ycircle:9448, ycircumflex:375, ydieresis:255, ydotaccent:7823, ydotbelow:7925, yeharabic:1610, yehbarreearabic:1746, yehbarreefinalarabic:64431, yehfinalarabic:65266, yehhamzaabovearabic:1574, yehhamzaabovefinalarabic:65162, yehhamzaaboveinitialarabic:65163, 
  yehhamzaabovemedialarabic:65164, yehinitialarabic:65267, yehmedialarabic:65268, yehmeeminitialarabic:64733, yehmeemisolatedarabic:64600, yehnoonfinalarabic:64660, yehthreedotsbelowarabic:1745, yekorean:12630, yen:165, yenmonospace:65509, yeokorean:12629, yeorinhieuhkorean:12678, yerahbenyomohebrew:1450, yerahbenyomolefthebrew:1450, yericyrillic:1099, yerudieresiscyrillic:1273, yesieungkorean:12673, yesieungpansioskorean:12675, yesieungsioskorean:12674, yetivhebrew:1434, ygrave:7923, yhook:436, 
  yhookabove:7927, yiarmenian:1397, yicyrillic:1111, yikorean:12642, yinyang:9775, yiwnarmenian:1410, ymonospace:65369, yod:1497, yoddagesh:64313, yoddageshhebrew:64313, yodhebrew:1497, yodyodhebrew:1522, yodyodpatahhebrew:64287, yohiragana:12424, yoikorean:12681, yokatakana:12520, yokatakanahalfwidth:65430, yokorean:12635, yosmallhiragana:12423, yosmallkatakana:12519, yosmallkatakanahalfwidth:65390, yotgreek:1011, yoyaekorean:12680, yoyakorean:12679, yoyakthai:3618, yoyingthai:3597, yparen:9396, 
  ypogegrammeni:890, ypogegrammenigreekcmb:837, yr:422, yring:7833, ysuperior:696, ytilde:7929, yturned:654, yuhiragana:12422, yuikorean:12684, yukatakana:12518, yukatakanahalfwidth:65429, yukorean:12640, yusbigcyrillic:1131, yusbigiotifiedcyrillic:1133, yuslittlecyrillic:1127, yuslittleiotifiedcyrillic:1129, yusmallhiragana:12421, yusmallkatakana:12517, yusmallkatakanahalfwidth:65389, yuyekorean:12683, yuyeokorean:12682, yyabengali:2527, yyadeva:2399, z:122, zaarmenian:1382, zacute:378, zadeva:2395, 
  zagurmukhi:2651, zaharabic:1592, zahfinalarabic:65222, zahinitialarabic:65223, zahiragana:12374, zahmedialarabic:65224, zainarabic:1586, zainfinalarabic:65200, zakatakana:12470, zaqefgadolhebrew:1429, zaqefqatanhebrew:1428, zarqahebrew:1432, zayin:1494, zayindagesh:64310, zayindageshhebrew:64310, zayinhebrew:1494, zbopomofo:12567, zcaron:382, zcircle:9449, zcircumflex:7825, zcurl:657, zdot:380, zdotaccent:380, zdotbelow:7827, zecyrillic:1079, zedescendercyrillic:1177, zedieresiscyrillic:1247, zehiragana:12380, 
  zekatakana:12476, zero:48, zeroarabic:1632, zerobengali:2534, zerodeva:2406, zerogujarati:2790, zerogurmukhi:2662, zerohackarabic:1632, zeroinferior:8320, zeromonospace:65296, zerooldstyle:63280, zeropersian:1776, zerosuperior:8304, zerothai:3664, zerowidthjoiner:65279, zerowidthnonjoiner:8204, zerowidthspace:8203, zeta:950, zhbopomofo:12563, zhearmenian:1386, zhebrevecyrillic:1218, zhecyrillic:1078, zhedescendercyrillic:1175, zhedieresiscyrillic:1245, zihiragana:12376, zikatakana:12472, zinorhebrew:1454, 
  zlinebelow:7829, zmonospace:65370, zohiragana:12382, zokatakana:12478, zparen:9397, zretroflexhook:656, zstroke:438, zuhiragana:12378, zukatakana:12474, ".notdef":0};
  var PDFImage = function PDFImageClosure() {
    function handleImageData(handler$$7, xref$$21, res$$3, image$$4, promise$$15) {
      if(image$$4 instanceof JpegStream && image$$4.isNativelyDecodable(xref$$21, res$$3)) {
        var dict$$21 = image$$4.dict;
        var colorSpace = dict$$21.get("ColorSpace", "CS");
        colorSpace = ColorSpace.parse(colorSpace, xref$$21, res$$3);
        var numComps$$6 = colorSpace.numComps;
        handler$$7.send("JpegDecode", [image$$4.getIR(), numComps$$6], function(message$$11) {
          var data$$83 = message$$11.data;
          var stream$$19 = new Stream(data$$83, 0, data$$83.length, image$$4.dict);
          promise$$15.resolve(stream$$19)
        })
      }else {
        promise$$15.resolve(image$$4)
      }
    }
    function PDFImage$$1(xref$$22, res$$4, image$$5, inline$$1, smask) {
      this.image = image$$5;
      if(image$$5.getParams) {
        TODO("get params from actual stream")
      }
      var dict$$22 = image$$5.dict;
      this.width = dict$$22.get("Width", "W");
      this.height = dict$$22.get("Height", "H");
      if(this.width < 1 || this.height < 1) {
        error$$3("Invalid image width: " + this.width + " or height: " + this.height)
      }
      this.interpolate = dict$$22.get("Interpolate", "I") || false;
      this.imageMask = dict$$22.get("ImageMask", "IM") || false;
      var bitsPerComponent = image$$5.bitsPerComponent;
      if(!bitsPerComponent) {
        bitsPerComponent = dict$$22.get("BitsPerComponent", "BPC");
        if(!bitsPerComponent) {
          if(this.imageMask) {
            bitsPerComponent = 1
          }else {
            error$$3("Bits per component missing in image: " + this.imageMask)
          }
        }
      }
      this.bpc = bitsPerComponent;
      if(!this.imageMask) {
        var colorSpace$$1 = dict$$22.get("ColorSpace", "CS");
        if(!colorSpace$$1) {
          TODO('JPX images (which don"t require color spaces');
          colorSpace$$1 = new Name("DeviceRGB")
        }
        this.colorSpace = ColorSpace.parse(colorSpace$$1, xref$$22, res$$4);
        this.numComps = this.colorSpace.numComps
      }
      this.decode = dict$$22.get("Decode", "D");
      this.needsDecode = false;
      if(this.decode && this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode)) {
        this.needsDecode = true;
        var max$$2 = (1 << bitsPerComponent) - 1;
        this.decodeCoefficients = [];
        this.decodeAddends = [];
        var i$$139 = 0;
        var j$$47 = 0;
        for(;i$$139 < this.decode.length;i$$139 += 2, ++j$$47) {
          var dmin$$1 = this.decode[i$$139];
          var dmax$$1 = this.decode[i$$139 + 1];
          this.decodeCoefficients[j$$47] = dmax$$1 - dmin$$1;
          this.decodeAddends[j$$47] = max$$2 * dmin$$1
        }
      }
      var mask$$7 = dict$$22.get("Mask");
      if(mask$$7) {
        TODO("masked images")
      }else {
        if(smask) {
          this.smask = new PDFImage$$1(xref$$22, res$$4, smask, false)
        }
      }
    }
    PDFImage$$1.buildImage = function PDFImage_buildImage(callback$$36, handler$$8, xref$$23, res$$5, image$$6, inline$$2) {
      var imageDataPromise = new Promise;
      var smaskPromise = new Promise;
      Promise.all([imageDataPromise, smaskPromise]).then(function(results$$1) {
        var imageData$$3 = results$$1[0];
        var smaskData = results$$1[1];
        var image$$7 = new PDFImage$$1(xref$$23, res$$5, imageData$$3, inline$$2, smaskData);
        callback$$36(image$$7)
      });
      handleImageData(handler$$8, xref$$23, res$$5, image$$6, imageDataPromise);
      var smask$$1 = image$$6.dict.get("SMask");
      if(smask$$1) {
        handleImageData(handler$$8, xref$$23, res$$5, smask$$1, smaskPromise)
      }else {
        smaskPromise.resolve(null)
      }
    };
    PDFImage$$1.resize = function PDFImage_resize(pixels$$3, bpc, components$$1, w1, h1$$1, w2, h2$$1) {
      var length$$50 = w2 * h2$$1 * components$$1;
      var temp = bpc <= 8 ? new Uint8Array(length$$50) : bpc <= 16 ? new Uint16Array(length$$50) : new Uint32Array(length$$50);
      var xRatio = w1 / w2;
      var yRatio = h1$$1 / h2$$1;
      var px;
      var py;
      var newIndex;
      var oldIndex;
      var i$$140 = 0;
      for(;i$$140 < h2$$1;i$$140++) {
        var j$$48 = 0;
        for(;j$$48 < w2;j$$48++) {
          px = Math.floor(j$$48 * xRatio);
          py = Math.floor(i$$140 * yRatio);
          newIndex = i$$140 * w2 + j$$48;
          oldIndex = py * w1 + px;
          if(components$$1 === 1) {
            temp[newIndex] = pixels$$3[oldIndex]
          }else {
            if(components$$1 === 3) {
              newIndex *= 3;
              oldIndex *= 3;
              temp[newIndex] = pixels$$3[oldIndex];
              temp[newIndex + 1] = pixels$$3[oldIndex + 1];
              temp[newIndex + 2] = pixels$$3[oldIndex + 2]
            }
          }
        }
      }
      return temp
    };
    PDFImage$$1.prototype = {get drawWidth() {
      if(!this.smask) {
        return this.width
      }
      return Math.max(this.width, this.smask.width)
    }, get drawHeight() {
      if(!this.smask) {
        return this.height
      }
      return Math.max(this.height, this.smask.height)
    }, getComponents:function PDFImage_getComponents(buffer$$13) {
      var bpc$$1 = this.bpc;
      var needsDecode = this.needsDecode;
      var decodeMap$$6 = this.decode;
      if(bpc$$1 == 8 && !needsDecode) {
        return buffer$$13
      }
      var bufferLength$$2 = buffer$$13.length;
      var width$$24 = this.width;
      var height$$16 = this.height;
      var numComps$$7 = this.numComps;
      var length$$51 = width$$24 * height$$16 * numComps$$7;
      var bufferPos$$1 = 0;
      var output$$5 = bpc$$1 <= 8 ? new Uint8Array(length$$51) : bpc$$1 <= 16 ? new Uint16Array(length$$51) : new Uint32Array(length$$51);
      var rowComps = width$$24 * numComps$$7;
      var decodeAddends;
      var decodeCoefficients;
      if(needsDecode) {
        decodeAddends = this.decodeAddends;
        decodeCoefficients = this.decodeCoefficients
      }
      var max$$3 = (1 << bpc$$1) - 1;
      if(bpc$$1 == 8) {
        var i$$141 = 0;
        var ii$$62 = length$$51;
        for(;i$$141 < ii$$62;++i$$141) {
          var compIndex = i$$141 % numComps$$7;
          var value$$67 = buffer$$13[i$$141];
          var value$$inline_107 = value$$67;
          value$$inline_107 = decodeAddends[compIndex] + value$$inline_107 * decodeCoefficients[compIndex];
          value$$67 = value$$inline_107 < 0 ? 0 : value$$inline_107 > max$$3 ? max$$3 : value$$inline_107;
          output$$5[i$$141] = value$$67
        }
      }else {
        if(bpc$$1 == 1) {
          var valueZero = 0;
          var valueOne = 1;
          if(decodeMap$$6) {
            valueZero = decodeMap$$6[0] ? 1 : 0;
            valueOne = decodeMap$$6[1] ? 1 : 0
          }
          var mask$$8 = 0;
          var buf$$2 = 0;
          i$$141 = 0;
          ii$$62 = length$$51;
          for(;i$$141 < ii$$62;++i$$141) {
            if(i$$141 % rowComps == 0) {
              mask$$8 = 0;
              buf$$2 = 0
            }else {
              mask$$8 >>= 1
            }
            if(mask$$8 <= 0) {
              buf$$2 = buffer$$13[bufferPos$$1++];
              mask$$8 = 128
            }
            output$$5[i$$141] = !(buf$$2 & mask$$8) ? valueZero : valueOne
          }
        }else {
          var bits$$5 = 0;
          buf$$2 = 0;
          i$$141 = 0;
          ii$$62 = length$$51;
          for(;i$$141 < ii$$62;++i$$141) {
            if(i$$141 % rowComps == 0) {
              buf$$2 = 0;
              bits$$5 = 0
            }
            for(;bits$$5 < bpc$$1;) {
              buf$$2 = buf$$2 << 8 | buffer$$13[bufferPos$$1++];
              bits$$5 += 8
            }
            var remainingBits = bits$$5 - bpc$$1;
            value$$67 = buf$$2 >> remainingBits;
            if(needsDecode) {
              compIndex = i$$141 % numComps$$7;
              var value$$inline_112 = value$$67;
              value$$inline_112 = decodeAddends[compIndex] + value$$inline_112 * decodeCoefficients[compIndex];
              value$$67 = value$$inline_112 < 0 ? 0 : value$$inline_112 > max$$3 ? max$$3 : value$$inline_112
            }
            output$$5[i$$141] = value$$67;
            buf$$2 = buf$$2 & (1 << remainingBits) - 1;
            bits$$5 = remainingBits
          }
        }
      }
      return output$$5
    }, getOpacity:function PDFImage_getOpacity(width$$25, height$$17) {
      var smask$$2 = this.smask;
      var originalWidth = this.width;
      var originalHeight = this.height;
      var buf$$3;
      if(smask$$2) {
        var sw$$2 = smask$$2.width;
        var sh$$2 = smask$$2.height;
        buf$$3 = new Uint8Array(sw$$2 * sh$$2);
        smask$$2.fillGrayBuffer(buf$$3);
        if(sw$$2 != width$$25 || sh$$2 != height$$17) {
          buf$$3 = PDFImage$$1.resize(buf$$3, smask$$2.bps, 1, sw$$2, sh$$2, width$$25, height$$17)
        }
      }else {
        buf$$3 = new Uint8Array(width$$25 * height$$17);
        var i$$142 = 0;
        var ii$$63 = width$$25 * height$$17;
        for(;i$$142 < ii$$63;++i$$142) {
          buf$$3[i$$142] = 255
        }
      }
      return buf$$3
    }, applyStencilMask:function PDFImage_applyStencilMask(buffer$$14, inverseDecode$$3) {
      var width$$26 = this.width;
      var height$$18 = this.height;
      var bitStrideLength$$1 = width$$26 + 7 >> 3;
      var imgArray$$2 = this.getImageBytes(bitStrideLength$$1 * height$$18);
      var imgArrayPos$$1 = 0;
      var i$$143;
      var j$$49;
      var mask$$9;
      var buf$$4;
      var bufferPos$$2 = 3;
      i$$143 = 0;
      for(;i$$143 < height$$18;i$$143++) {
        mask$$9 = 0;
        j$$49 = 0;
        for(;j$$49 < width$$26;j$$49++) {
          if(!mask$$9) {
            buf$$4 = imgArray$$2[imgArrayPos$$1++];
            mask$$9 = 128
          }
          if(!(buf$$4 & mask$$9) == inverseDecode$$3) {
            buffer$$14[bufferPos$$2] = 0
          }
          bufferPos$$2 += 4;
          mask$$9 >>= 1
        }
      }
    }, fillRgbaBuffer:function PDFImage_fillRgbaBuffer(buffer$$15, width$$27, height$$19) {
      var numComps$$8 = this.numComps;
      var originalWidth$$1 = this.width;
      var originalHeight$$1 = this.height;
      var bpc$$2 = this.bpc;
      var rowBytes = originalWidth$$1 * numComps$$8 * bpc$$2 + 7 >> 3;
      var imgArray$$3 = this.getImageBytes(originalHeight$$1 * rowBytes);
      var comps = this.colorSpace.getRgbBuffer(this.getComponents(imgArray$$3), bpc$$2);
      if(originalWidth$$1 != width$$27 || originalHeight$$1 != height$$19) {
        comps = PDFImage$$1.resize(comps, this.bpc, 3, originalWidth$$1, originalHeight$$1, width$$27, height$$19)
      }
      var compsPos = 0;
      var opacity = this.getOpacity(width$$27, height$$19);
      var opacityPos = 0;
      var length$$52 = width$$27 * height$$19 * 4;
      var i$$144 = 0;
      for(;i$$144 < length$$52;i$$144 += 4) {
        buffer$$15[i$$144] = comps[compsPos++];
        buffer$$15[i$$144 + 1] = comps[compsPos++];
        buffer$$15[i$$144 + 2] = comps[compsPos++];
        buffer$$15[i$$144 + 3] = opacity[opacityPos++]
      }
    }, fillGrayBuffer:function PDFImage_fillGrayBuffer(buffer$$16) {
      var numComps$$9 = this.numComps;
      if(numComps$$9 != 1) {
        error$$3("Reading gray scale from a color image: " + numComps$$9)
      }
      var width$$28 = this.width;
      var height$$20 = this.height;
      var bpc$$3 = this.bpc;
      var rowBytes$$1 = width$$28 * numComps$$9 * bpc$$3 + 7 >> 3;
      var imgArray$$4 = this.getImageBytes(height$$20 * rowBytes$$1);
      var comps$$1 = this.getComponents(imgArray$$4);
      var length$$53 = width$$28 * height$$20;
      var scale$$10 = 255 / ((1 << bpc$$3) - 1);
      var i$$145 = 0;
      for(;i$$145 < length$$53;++i$$145) {
        buffer$$16[i$$145] = scale$$10 * comps$$1[i$$145] | 0
      }
    }, getImageBytes:function PDFImage_getImageBytes(length$$54) {
      this.image.reset();
      return this.image.getBytes(length$$54)
    }};
    return PDFImage$$1
  }();
  var Metrics = {"Courier":600, "Courier-Bold":600, "Courier-BoldOblique":600, "Courier-Oblique":600, "Helvetica":{"space":278, "exclam":278, "quotedbl":355, "numbersign":556, "dollar":556, "percent":889, "ampersand":667, "quoteright":222, "parenleft":333, "parenright":333, "asterisk":389, "plus":584, "comma":278, "hyphen":333, "period":278, "slash":278, "zero":556, "one":556, "two":556, "three":556, "four":556, "five":556, "six":556, "seven":556, "eight":556, "nine":556, "colon":278, "semicolon":278, 
  "less":584, "equal":584, "greater":584, "question":556, "at":1015, "A":667, "B":667, "C":722, "D":722, "E":667, "F":611, "G":778, "H":722, "I":278, "J":500, "K":667, "L":556, "M":833, "N":722, "O":778, "P":667, "Q":778, "R":722, "S":667, "T":611, "U":722, "V":667, "W":944, "X":667, "Y":667, "Z":611, "bracketleft":278, "backslash":278, "bracketright":278, "asciicircum":469, "underscore":556, "quoteleft":222, "a":556, "b":556, "c":500, "d":556, "e":556, "f":278, "g":556, "h":556, "i":222, "j":222, 
  "k":500, "l":222, "m":833, "n":556, "o":556, "p":556, "q":556, "r":333, "s":500, "t":278, "u":556, "v":500, "w":722, "x":500, "y":500, "z":500, "braceleft":334, "bar":260, "braceright":334, "asciitilde":584, "exclamdown":333, "cent":556, "sterling":556, "fraction":167, "yen":556, "florin":556, "section":556, "currency":556, "quotesingle":191, "quotedblleft":333, "guillemotleft":556, "guilsinglleft":333, "guilsinglright":333, "fi":500, "fl":500, "endash":556, "dagger":556, "daggerdbl":556, "periodcentered":278, 
  "paragraph":537, "bullet":350, "quotesinglbase":222, "quotedblbase":333, "quotedblright":333, "guillemotright":556, "ellipsis":1E3, "perthousand":1E3, "questiondown":611, "grave":333, "acute":333, "circumflex":333, "tilde":333, "macron":333, "breve":333, "dotaccent":333, "dieresis":333, "ring":333, "cedilla":333, "hungarumlaut":333, "ogonek":333, "caron":333, "emdash":1E3, "AE":1E3, "ordfeminine":370, "Lslash":556, "Oslash":778, "OE":1E3, "ordmasculine":365, "ae":889, "dotlessi":278, "lslash":222, 
  "oslash":611, "oe":944, "germandbls":611, "Idieresis":278, "eacute":556, "abreve":556, "uhungarumlaut":556, "ecaron":556, "Ydieresis":667, "divide":584, "Yacute":667, "Acircumflex":667, "aacute":556, "Ucircumflex":722, "yacute":500, "scommaaccent":500, "ecircumflex":556, "Uring":722, "Udieresis":722, "aogonek":556, "Uacute":722, "uogonek":556, "Edieresis":667, "Dcroat":722, "commaaccent":250, "copyright":737, "Emacron":667, "ccaron":500, "aring":556, "Ncommaaccent":722, "lacute":222, "agrave":556, 
  "Tcommaaccent":611, "Cacute":722, "atilde":556, "Edotaccent":667, "scaron":500, "scedilla":500, "iacute":278, "lozenge":471, "Rcaron":722, "Gcommaaccent":778, "ucircumflex":556, "acircumflex":556, "Amacron":667, "rcaron":333, "ccedilla":500, "Zdotaccent":611, "Thorn":667, "Omacron":778, "Racute":722, "Sacute":667, "dcaron":643, "Umacron":722, "uring":556, "threesuperior":333, "Ograve":778, "Agrave":667, "Abreve":667, "multiply":584, "uacute":556, "Tcaron":611, "partialdiff":476, "ydieresis":500, 
  "Nacute":722, "icircumflex":278, "Ecircumflex":667, "adieresis":556, "edieresis":556, "cacute":500, "nacute":556, "umacron":556, "Ncaron":722, "Iacute":278, "plusminus":584, "brokenbar":260, "registered":737, "Gbreve":778, "Idotaccent":278, "summation":600, "Egrave":667, "racute":333, "omacron":556, "Zacute":611, "Zcaron":611, "greaterequal":549, "Eth":722, "Ccedilla":722, "lcommaaccent":222, "tcaron":317, "eogonek":556, "Uogonek":722, "Aacute":667, "Adieresis":667, "egrave":556, "zacute":500, 
  "iogonek":222, "Oacute":778, "oacute":556, "amacron":556, "sacute":500, "idieresis":278, "Ocircumflex":778, "Ugrave":722, "Delta":612, "thorn":556, "twosuperior":333, "Odieresis":778, "mu":556, "igrave":278, "ohungarumlaut":556, "Eogonek":667, "dcroat":556, "threequarters":834, "Scedilla":667, "lcaron":299, "Kcommaaccent":667, "Lacute":556, "trademark":1E3, "edotaccent":556, "Igrave":278, "Imacron":278, "Lcaron":556, "onehalf":834, "lessequal":549, "ocircumflex":556, "ntilde":556, "Uhungarumlaut":722, 
  "Eacute":667, "emacron":556, "gbreve":556, "onequarter":834, "Scaron":667, "Scommaaccent":667, "Ohungarumlaut":778, "degree":400, "ograve":556, "Ccaron":722, "ugrave":556, "radical":453, "Dcaron":722, "rcommaaccent":333, "Ntilde":722, "otilde":556, "Rcommaaccent":722, "Lcommaaccent":556, "Atilde":667, "Aogonek":667, "Aring":667, "Otilde":778, "zdotaccent":500, "Ecaron":667, "Iogonek":278, "kcommaaccent":500, "minus":584, "Icircumflex":278, "ncaron":556, "tcommaaccent":278, "logicalnot":584, "odieresis":556, 
  "udieresis":556, "notequal":549, "gcommaaccent":556, "eth":556, "zcaron":500, "ncommaaccent":556, "onesuperior":333, "imacron":278, "Euro":556}, "Helvetica-Bold":{"space":278, "exclam":333, "quotedbl":474, "numbersign":556, "dollar":556, "percent":889, "ampersand":722, "quoteright":278, "parenleft":333, "parenright":333, "asterisk":389, "plus":584, "comma":278, "hyphen":333, "period":278, "slash":278, "zero":556, "one":556, "two":556, "three":556, "four":556, "five":556, "six":556, "seven":556, 
  "eight":556, "nine":556, "colon":333, "semicolon":333, "less":584, "equal":584, "greater":584, "question":611, "at":975, "A":722, "B":722, "C":722, "D":722, "E":667, "F":611, "G":778, "H":722, "I":278, "J":556, "K":722, "L":611, "M":833, "N":722, "O":778, "P":667, "Q":778, "R":722, "S":667, "T":611, "U":722, "V":667, "W":944, "X":667, "Y":667, "Z":611, "bracketleft":333, "backslash":278, "bracketright":333, "asciicircum":584, "underscore":556, "quoteleft":278, "a":556, "b":611, "c":556, "d":611, 
  "e":556, "f":333, "g":611, "h":611, "i":278, "j":278, "k":556, "l":278, "m":889, "n":611, "o":611, "p":611, "q":611, "r":389, "s":556, "t":333, "u":611, "v":556, "w":778, "x":556, "y":556, "z":500, "braceleft":389, "bar":280, "braceright":389, "asciitilde":584, "exclamdown":333, "cent":556, "sterling":556, "fraction":167, "yen":556, "florin":556, "section":556, "currency":556, "quotesingle":238, "quotedblleft":500, "guillemotleft":556, "guilsinglleft":333, "guilsinglright":333, "fi":611, "fl":611, 
  "endash":556, "dagger":556, "daggerdbl":556, "periodcentered":278, "paragraph":556, "bullet":350, "quotesinglbase":278, "quotedblbase":500, "quotedblright":500, "guillemotright":556, "ellipsis":1E3, "perthousand":1E3, "questiondown":611, "grave":333, "acute":333, "circumflex":333, "tilde":333, "macron":333, "breve":333, "dotaccent":333, "dieresis":333, "ring":333, "cedilla":333, "hungarumlaut":333, "ogonek":333, "caron":333, "emdash":1E3, "AE":1E3, "ordfeminine":370, "Lslash":611, "Oslash":778, 
  "OE":1E3, "ordmasculine":365, "ae":889, "dotlessi":278, "lslash":278, "oslash":611, "oe":944, "germandbls":611, "Idieresis":278, "eacute":556, "abreve":556, "uhungarumlaut":611, "ecaron":556, "Ydieresis":667, "divide":584, "Yacute":667, "Acircumflex":722, "aacute":556, "Ucircumflex":722, "yacute":556, "scommaaccent":556, "ecircumflex":556, "Uring":722, "Udieresis":722, "aogonek":556, "Uacute":722, "uogonek":611, "Edieresis":667, "Dcroat":722, "commaaccent":250, "copyright":737, "Emacron":667, "ccaron":556, 
  "aring":556, "Ncommaaccent":722, "lacute":278, "agrave":556, "Tcommaaccent":611, "Cacute":722, "atilde":556, "Edotaccent":667, "scaron":556, "scedilla":556, "iacute":278, "lozenge":494, "Rcaron":722, "Gcommaaccent":778, "ucircumflex":611, "acircumflex":556, "Amacron":722, "rcaron":389, "ccedilla":556, "Zdotaccent":611, "Thorn":667, "Omacron":778, "Racute":722, "Sacute":667, "dcaron":743, "Umacron":722, "uring":611, "threesuperior":333, "Ograve":778, "Agrave":722, "Abreve":722, "multiply":584, "uacute":611, 
  "Tcaron":611, "partialdiff":494, "ydieresis":556, "Nacute":722, "icircumflex":278, "Ecircumflex":667, "adieresis":556, "edieresis":556, "cacute":556, "nacute":611, "umacron":611, "Ncaron":722, "Iacute":278, "plusminus":584, "brokenbar":280, "registered":737, "Gbreve":778, "Idotaccent":278, "summation":600, "Egrave":667, "racute":389, "omacron":611, "Zacute":611, "Zcaron":611, "greaterequal":549, "Eth":722, "Ccedilla":722, "lcommaaccent":278, "tcaron":389, "eogonek":556, "Uogonek":722, "Aacute":722, 
  "Adieresis":722, "egrave":556, "zacute":500, "iogonek":278, "Oacute":778, "oacute":611, "amacron":556, "sacute":556, "idieresis":278, "Ocircumflex":778, "Ugrave":722, "Delta":612, "thorn":611, "twosuperior":333, "Odieresis":778, "mu":611, "igrave":278, "ohungarumlaut":611, "Eogonek":667, "dcroat":611, "threequarters":834, "Scedilla":667, "lcaron":400, "Kcommaaccent":722, "Lacute":611, "trademark":1E3, "edotaccent":556, "Igrave":278, "Imacron":278, "Lcaron":611, "onehalf":834, "lessequal":549, "ocircumflex":611, 
  "ntilde":611, "Uhungarumlaut":722, "Eacute":667, "emacron":556, "gbreve":611, "onequarter":834, "Scaron":667, "Scommaaccent":667, "Ohungarumlaut":778, "degree":400, "ograve":611, "Ccaron":722, "ugrave":611, "radical":549, "Dcaron":722, "rcommaaccent":389, "Ntilde":722, "otilde":611, "Rcommaaccent":722, "Lcommaaccent":611, "Atilde":722, "Aogonek":722, "Aring":722, "Otilde":778, "zdotaccent":500, "Ecaron":667, "Iogonek":278, "kcommaaccent":556, "minus":584, "Icircumflex":278, "ncaron":611, "tcommaaccent":333, 
  "logicalnot":584, "odieresis":611, "udieresis":611, "notequal":549, "gcommaaccent":611, "eth":611, "zcaron":500, "ncommaaccent":611, "onesuperior":333, "imacron":278, "Euro":556}, "Helvetica-BoldOblique":{"space":278, "exclam":333, "quotedbl":474, "numbersign":556, "dollar":556, "percent":889, "ampersand":722, "quoteright":278, "parenleft":333, "parenright":333, "asterisk":389, "plus":584, "comma":278, "hyphen":333, "period":278, "slash":278, "zero":556, "one":556, "two":556, "three":556, "four":556, 
  "five":556, "six":556, "seven":556, "eight":556, "nine":556, "colon":333, "semicolon":333, "less":584, "equal":584, "greater":584, "question":611, "at":975, "A":722, "B":722, "C":722, "D":722, "E":667, "F":611, "G":778, "H":722, "I":278, "J":556, "K":722, "L":611, "M":833, "N":722, "O":778, "P":667, "Q":778, "R":722, "S":667, "T":611, "U":722, "V":667, "W":944, "X":667, "Y":667, "Z":611, "bracketleft":333, "backslash":278, "bracketright":333, "asciicircum":584, "underscore":556, "quoteleft":278, 
  "a":556, "b":611, "c":556, "d":611, "e":556, "f":333, "g":611, "h":611, "i":278, "j":278, "k":556, "l":278, "m":889, "n":611, "o":611, "p":611, "q":611, "r":389, "s":556, "t":333, "u":611, "v":556, "w":778, "x":556, "y":556, "z":500, "braceleft":389, "bar":280, "braceright":389, "asciitilde":584, "exclamdown":333, "cent":556, "sterling":556, "fraction":167, "yen":556, "florin":556, "section":556, "currency":556, "quotesingle":238, "quotedblleft":500, "guillemotleft":556, "guilsinglleft":333, "guilsinglright":333, 
  "fi":611, "fl":611, "endash":556, "dagger":556, "daggerdbl":556, "periodcentered":278, "paragraph":556, "bullet":350, "quotesinglbase":278, "quotedblbase":500, "quotedblright":500, "guillemotright":556, "ellipsis":1E3, "perthousand":1E3, "questiondown":611, "grave":333, "acute":333, "circumflex":333, "tilde":333, "macron":333, "breve":333, "dotaccent":333, "dieresis":333, "ring":333, "cedilla":333, "hungarumlaut":333, "ogonek":333, "caron":333, "emdash":1E3, "AE":1E3, "ordfeminine":370, "Lslash":611, 
  "Oslash":778, "OE":1E3, "ordmasculine":365, "ae":889, "dotlessi":278, "lslash":278, "oslash":611, "oe":944, "germandbls":611, "Idieresis":278, "eacute":556, "abreve":556, "uhungarumlaut":611, "ecaron":556, "Ydieresis":667, "divide":584, "Yacute":667, "Acircumflex":722, "aacute":556, "Ucircumflex":722, "yacute":556, "scommaaccent":556, "ecircumflex":556, "Uring":722, "Udieresis":722, "aogonek":556, "Uacute":722, "uogonek":611, "Edieresis":667, "Dcroat":722, "commaaccent":250, "copyright":737, "Emacron":667, 
  "ccaron":556, "aring":556, "Ncommaaccent":722, "lacute":278, "agrave":556, "Tcommaaccent":611, "Cacute":722, "atilde":556, "Edotaccent":667, "scaron":556, "scedilla":556, "iacute":278, "lozenge":494, "Rcaron":722, "Gcommaaccent":778, "ucircumflex":611, "acircumflex":556, "Amacron":722, "rcaron":389, "ccedilla":556, "Zdotaccent":611, "Thorn":667, "Omacron":778, "Racute":722, "Sacute":667, "dcaron":743, "Umacron":722, "uring":611, "threesuperior":333, "Ograve":778, "Agrave":722, "Abreve":722, "multiply":584, 
  "uacute":611, "Tcaron":611, "partialdiff":494, "ydieresis":556, "Nacute":722, "icircumflex":278, "Ecircumflex":667, "adieresis":556, "edieresis":556, "cacute":556, "nacute":611, "umacron":611, "Ncaron":722, "Iacute":278, "plusminus":584, "brokenbar":280, "registered":737, "Gbreve":778, "Idotaccent":278, "summation":600, "Egrave":667, "racute":389, "omacron":611, "Zacute":611, "Zcaron":611, "greaterequal":549, "Eth":722, "Ccedilla":722, "lcommaaccent":278, "tcaron":389, "eogonek":556, "Uogonek":722, 
  "Aacute":722, "Adieresis":722, "egrave":556, "zacute":500, "iogonek":278, "Oacute":778, "oacute":611, "amacron":556, "sacute":556, "idieresis":278, "Ocircumflex":778, "Ugrave":722, "Delta":612, "thorn":611, "twosuperior":333, "Odieresis":778, "mu":611, "igrave":278, "ohungarumlaut":611, "Eogonek":667, "dcroat":611, "threequarters":834, "Scedilla":667, "lcaron":400, "Kcommaaccent":722, "Lacute":611, "trademark":1E3, "edotaccent":556, "Igrave":278, "Imacron":278, "Lcaron":611, "onehalf":834, "lessequal":549, 
  "ocircumflex":611, "ntilde":611, "Uhungarumlaut":722, "Eacute":667, "emacron":556, "gbreve":611, "onequarter":834, "Scaron":667, "Scommaaccent":667, "Ohungarumlaut":778, "degree":400, "ograve":611, "Ccaron":722, "ugrave":611, "radical":549, "Dcaron":722, "rcommaaccent":389, "Ntilde":722, "otilde":611, "Rcommaaccent":722, "Lcommaaccent":611, "Atilde":722, "Aogonek":722, "Aring":722, "Otilde":778, "zdotaccent":500, "Ecaron":667, "Iogonek":278, "kcommaaccent":556, "minus":584, "Icircumflex":278, "ncaron":611, 
  "tcommaaccent":333, "logicalnot":584, "odieresis":611, "udieresis":611, "notequal":549, "gcommaaccent":611, "eth":611, "zcaron":500, "ncommaaccent":611, "onesuperior":333, "imacron":278, "Euro":556}, "Helvetica-Oblique":{"space":278, "exclam":278, "quotedbl":355, "numbersign":556, "dollar":556, "percent":889, "ampersand":667, "quoteright":222, "parenleft":333, "parenright":333, "asterisk":389, "plus":584, "comma":278, "hyphen":333, "period":278, "slash":278, "zero":556, "one":556, "two":556, "three":556, 
  "four":556, "five":556, "six":556, "seven":556, "eight":556, "nine":556, "colon":278, "semicolon":278, "less":584, "equal":584, "greater":584, "question":556, "at":1015, "A":667, "B":667, "C":722, "D":722, "E":667, "F":611, "G":778, "H":722, "I":278, "J":500, "K":667, "L":556, "M":833, "N":722, "O":778, "P":667, "Q":778, "R":722, "S":667, "T":611, "U":722, "V":667, "W":944, "X":667, "Y":667, "Z":611, "bracketleft":278, "backslash":278, "bracketright":278, "asciicircum":469, "underscore":556, "quoteleft":222, 
  "a":556, "b":556, "c":500, "d":556, "e":556, "f":278, "g":556, "h":556, "i":222, "j":222, "k":500, "l":222, "m":833, "n":556, "o":556, "p":556, "q":556, "r":333, "s":500, "t":278, "u":556, "v":500, "w":722, "x":500, "y":500, "z":500, "braceleft":334, "bar":260, "braceright":334, "asciitilde":584, "exclamdown":333, "cent":556, "sterling":556, "fraction":167, "yen":556, "florin":556, "section":556, "currency":556, "quotesingle":191, "quotedblleft":333, "guillemotleft":556, "guilsinglleft":333, "guilsinglright":333, 
  "fi":500, "fl":500, "endash":556, "dagger":556, "daggerdbl":556, "periodcentered":278, "paragraph":537, "bullet":350, "quotesinglbase":222, "quotedblbase":333, "quotedblright":333, "guillemotright":556, "ellipsis":1E3, "perthousand":1E3, "questiondown":611, "grave":333, "acute":333, "circumflex":333, "tilde":333, "macron":333, "breve":333, "dotaccent":333, "dieresis":333, "ring":333, "cedilla":333, "hungarumlaut":333, "ogonek":333, "caron":333, "emdash":1E3, "AE":1E3, "ordfeminine":370, "Lslash":556, 
  "Oslash":778, "OE":1E3, "ordmasculine":365, "ae":889, "dotlessi":278, "lslash":222, "oslash":611, "oe":944, "germandbls":611, "Idieresis":278, "eacute":556, "abreve":556, "uhungarumlaut":556, "ecaron":556, "Ydieresis":667, "divide":584, "Yacute":667, "Acircumflex":667, "aacute":556, "Ucircumflex":722, "yacute":500, "scommaaccent":500, "ecircumflex":556, "Uring":722, "Udieresis":722, "aogonek":556, "Uacute":722, "uogonek":556, "Edieresis":667, "Dcroat":722, "commaaccent":250, "copyright":737, "Emacron":667, 
  "ccaron":500, "aring":556, "Ncommaaccent":722, "lacute":222, "agrave":556, "Tcommaaccent":611, "Cacute":722, "atilde":556, "Edotaccent":667, "scaron":500, "scedilla":500, "iacute":278, "lozenge":471, "Rcaron":722, "Gcommaaccent":778, "ucircumflex":556, "acircumflex":556, "Amacron":667, "rcaron":333, "ccedilla":500, "Zdotaccent":611, "Thorn":667, "Omacron":778, "Racute":722, "Sacute":667, "dcaron":643, "Umacron":722, "uring":556, "threesuperior":333, "Ograve":778, "Agrave":667, "Abreve":667, "multiply":584, 
  "uacute":556, "Tcaron":611, "partialdiff":476, "ydieresis":500, "Nacute":722, "icircumflex":278, "Ecircumflex":667, "adieresis":556, "edieresis":556, "cacute":500, "nacute":556, "umacron":556, "Ncaron":722, "Iacute":278, "plusminus":584, "brokenbar":260, "registered":737, "Gbreve":778, "Idotaccent":278, "summation":600, "Egrave":667, "racute":333, "omacron":556, "Zacute":611, "Zcaron":611, "greaterequal":549, "Eth":722, "Ccedilla":722, "lcommaaccent":222, "tcaron":317, "eogonek":556, "Uogonek":722, 
  "Aacute":667, "Adieresis":667, "egrave":556, "zacute":500, "iogonek":222, "Oacute":778, "oacute":556, "amacron":556, "sacute":500, "idieresis":278, "Ocircumflex":778, "Ugrave":722, "Delta":612, "thorn":556, "twosuperior":333, "Odieresis":778, "mu":556, "igrave":278, "ohungarumlaut":556, "Eogonek":667, "dcroat":556, "threequarters":834, "Scedilla":667, "lcaron":299, "Kcommaaccent":667, "Lacute":556, "trademark":1E3, "edotaccent":556, "Igrave":278, "Imacron":278, "Lcaron":556, "onehalf":834, "lessequal":549, 
  "ocircumflex":556, "ntilde":556, "Uhungarumlaut":722, "Eacute":667, "emacron":556, "gbreve":556, "onequarter":834, "Scaron":667, "Scommaaccent":667, "Ohungarumlaut":778, "degree":400, "ograve":556, "Ccaron":722, "ugrave":556, "radical":453, "Dcaron":722, "rcommaaccent":333, "Ntilde":722, "otilde":556, "Rcommaaccent":722, "Lcommaaccent":556, "Atilde":667, "Aogonek":667, "Aring":667, "Otilde":778, "zdotaccent":500, "Ecaron":667, "Iogonek":278, "kcommaaccent":500, "minus":584, "Icircumflex":278, "ncaron":556, 
  "tcommaaccent":278, "logicalnot":584, "odieresis":556, "udieresis":556, "notequal":549, "gcommaaccent":556, "eth":556, "zcaron":500, "ncommaaccent":556, "onesuperior":333, "imacron":278, "Euro":556}, "Symbol":{"space":250, "exclam":333, "universal":713, "numbersign":500, "existential":549, "percent":833, "ampersand":778, "suchthat":439, "parenleft":333, "parenright":333, "asteriskmath":500, "plus":549, "comma":250, "minus":549, "period":250, "slash":278, "zero":500, "one":500, "two":500, "three":500, 
  "four":500, "five":500, "six":500, "seven":500, "eight":500, "nine":500, "colon":278, "semicolon":278, "less":549, "equal":549, "greater":549, "question":444, "congruent":549, "Alpha":722, "Beta":667, "Chi":722, "Delta":612, "Epsilon":611, "Phi":763, "Gamma":603, "Eta":722, "Iota":333, "theta1":631, "Kappa":722, "Lambda":686, "Mu":889, "Nu":722, "Omicron":722, "Pi":768, "Theta":741, "Rho":556, "Sigma":592, "Tau":611, "Upsilon":690, "sigma1":439, "Omega":768, "Xi":645, "Psi":795, "Zeta":611, "bracketleft":333, 
  "therefore":863, "bracketright":333, "perpendicular":658, "underscore":500, "radicalex":500, "alpha":631, "beta":549, "chi":549, "delta":494, "epsilon":439, "phi":521, "gamma":411, "eta":603, "iota":329, "phi1":603, "kappa":549, "lambda":549, "mu":576, "nu":521, "omicron":549, "pi":549, "theta":521, "rho":549, "sigma":603, "tau":439, "upsilon":576, "omega1":713, "omega":686, "xi":493, "psi":686, "zeta":494, "braceleft":480, "bar":200, "braceright":480, "similar":549, "Euro":750, "Upsilon1":620, 
  "minute":247, "lessequal":549, "fraction":167, "infinity":713, "florin":500, "club":753, "diamond":753, "heart":753, "spade":753, "arrowboth":1042, "arrowleft":987, "arrowup":603, "arrowright":987, "arrowdown":603, "degree":400, "plusminus":549, "second":411, "greaterequal":549, "multiply":549, "proportional":713, "partialdiff":494, "bullet":460, "divide":549, "notequal":549, "equivalence":549, "approxequal":549, "ellipsis":1E3, "arrowvertex":603, "arrowhorizex":1E3, "carriagereturn":658, "aleph":823, 
  "Ifraktur":686, "Rfraktur":795, "weierstrass":987, "circlemultiply":768, "circleplus":768, "emptyset":823, "intersection":768, "union":768, "propersuperset":713, "reflexsuperset":713, "notsubset":713, "propersubset":713, "reflexsubset":713, "element":713, "notelement":713, "angle":768, "gradient":713, "registerserif":790, "copyrightserif":790, "trademarkserif":890, "product":823, "radical":549, "dotmath":250, "logicalnot":713, "logicaland":603, "logicalor":603, "arrowdblboth":1042, "arrowdblleft":987, 
  "arrowdblup":603, "arrowdblright":987, "arrowdbldown":603, "lozenge":494, "angleleft":329, "registersans":790, "copyrightsans":790, "trademarksans":786, "summation":713, "parenlefttp":384, "parenleftex":384, "parenleftbt":384, "bracketlefttp":384, "bracketleftex":384, "bracketleftbt":384, "bracelefttp":494, "braceleftmid":494, "braceleftbt":494, "braceex":494, "angleright":329, "integral":274, "integraltp":686, "integralex":686, "integralbt":686, "parenrighttp":384, "parenrightex":384, "parenrightbt":384, 
  "bracketrighttp":384, "bracketrightex":384, "bracketrightbt":384, "bracerighttp":494, "bracerightmid":494, "bracerightbt":494, "apple":790}, "Times-Roman":{"space":250, "exclam":333, "quotedbl":408, "numbersign":500, "dollar":500, "percent":833, "ampersand":778, "quoteright":333, "parenleft":333, "parenright":333, "asterisk":500, "plus":564, "comma":250, "hyphen":333, "period":250, "slash":278, "zero":500, "one":500, "two":500, "three":500, "four":500, "five":500, "six":500, "seven":500, "eight":500, 
  "nine":500, "colon":278, "semicolon":278, "less":564, "equal":564, "greater":564, "question":444, "at":921, "A":722, "B":667, "C":667, "D":722, "E":611, "F":556, "G":722, "H":722, "I":333, "J":389, "K":722, "L":611, "M":889, "N":722, "O":722, "P":556, "Q":722, "R":667, "S":556, "T":611, "U":722, "V":722, "W":944, "X":722, "Y":722, "Z":611, "bracketleft":333, "backslash":278, "bracketright":333, "asciicircum":469, "underscore":500, "quoteleft":333, "a":444, "b":500, "c":444, "d":500, "e":444, "f":333, 
  "g":500, "h":500, "i":278, "j":278, "k":500, "l":278, "m":778, "n":500, "o":500, "p":500, "q":500, "r":333, "s":389, "t":278, "u":500, "v":500, "w":722, "x":500, "y":500, "z":444, "braceleft":480, "bar":200, "braceright":480, "asciitilde":541, "exclamdown":333, "cent":500, "sterling":500, "fraction":167, "yen":500, "florin":500, "section":500, "currency":500, "quotesingle":180, "quotedblleft":444, "guillemotleft":500, "guilsinglleft":333, "guilsinglright":333, "fi":556, "fl":556, "endash":500, 
  "dagger":500, "daggerdbl":500, "periodcentered":250, "paragraph":453, "bullet":350, "quotesinglbase":333, "quotedblbase":444, "quotedblright":444, "guillemotright":500, "ellipsis":1E3, "perthousand":1E3, "questiondown":444, "grave":333, "acute":333, "circumflex":333, "tilde":333, "macron":333, "breve":333, "dotaccent":333, "dieresis":333, "ring":333, "cedilla":333, "hungarumlaut":333, "ogonek":333, "caron":333, "emdash":1E3, "AE":889, "ordfeminine":276, "Lslash":611, "Oslash":722, "OE":889, "ordmasculine":310, 
  "ae":667, "dotlessi":278, "lslash":278, "oslash":500, "oe":722, "germandbls":500, "Idieresis":333, "eacute":444, "abreve":444, "uhungarumlaut":500, "ecaron":444, "Ydieresis":722, "divide":564, "Yacute":722, "Acircumflex":722, "aacute":444, "Ucircumflex":722, "yacute":500, "scommaaccent":389, "ecircumflex":444, "Uring":722, "Udieresis":722, "aogonek":444, "Uacute":722, "uogonek":500, "Edieresis":611, "Dcroat":722, "commaaccent":250, "copyright":760, "Emacron":611, "ccaron":444, "aring":444, "Ncommaaccent":722, 
  "lacute":278, "agrave":444, "Tcommaaccent":611, "Cacute":667, "atilde":444, "Edotaccent":611, "scaron":389, "scedilla":389, "iacute":278, "lozenge":471, "Rcaron":667, "Gcommaaccent":722, "ucircumflex":500, "acircumflex":444, "Amacron":722, "rcaron":333, "ccedilla":444, "Zdotaccent":611, "Thorn":556, "Omacron":722, "Racute":667, "Sacute":556, "dcaron":588, "Umacron":722, "uring":500, "threesuperior":300, "Ograve":722, "Agrave":722, "Abreve":722, "multiply":564, "uacute":500, "Tcaron":611, "partialdiff":476, 
  "ydieresis":500, "Nacute":722, "icircumflex":278, "Ecircumflex":611, "adieresis":444, "edieresis":444, "cacute":444, "nacute":500, "umacron":500, "Ncaron":722, "Iacute":333, "plusminus":564, "brokenbar":200, "registered":760, "Gbreve":722, "Idotaccent":333, "summation":600, "Egrave":611, "racute":333, "omacron":500, "Zacute":611, "Zcaron":611, "greaterequal":549, "Eth":722, "Ccedilla":667, "lcommaaccent":278, "tcaron":326, "eogonek":444, "Uogonek":722, "Aacute":722, "Adieresis":722, "egrave":444, 
  "zacute":444, "iogonek":278, "Oacute":722, "oacute":500, "amacron":444, "sacute":389, "idieresis":278, "Ocircumflex":722, "Ugrave":722, "Delta":612, "thorn":500, "twosuperior":300, "Odieresis":722, "mu":500, "igrave":278, "ohungarumlaut":500, "Eogonek":611, "dcroat":500, "threequarters":750, "Scedilla":556, "lcaron":344, "Kcommaaccent":722, "Lacute":611, "trademark":980, "edotaccent":444, "Igrave":333, "Imacron":333, "Lcaron":611, "onehalf":750, "lessequal":549, "ocircumflex":500, "ntilde":500, 
  "Uhungarumlaut":722, "Eacute":611, "emacron":444, "gbreve":500, "onequarter":750, "Scaron":556, "Scommaaccent":556, "Ohungarumlaut":722, "degree":400, "ograve":500, "Ccaron":667, "ugrave":500, "radical":453, "Dcaron":722, "rcommaaccent":333, "Ntilde":722, "otilde":500, "Rcommaaccent":667, "Lcommaaccent":611, "Atilde":722, "Aogonek":722, "Aring":722, "Otilde":722, "zdotaccent":444, "Ecaron":611, "Iogonek":333, "kcommaaccent":500, "minus":564, "Icircumflex":333, "ncaron":500, "tcommaaccent":278, 
  "logicalnot":564, "odieresis":500, "udieresis":500, "notequal":549, "gcommaaccent":500, "eth":500, "zcaron":444, "ncommaaccent":500, "onesuperior":300, "imacron":278, "Euro":500}, "Times-Bold":{"space":250, "exclam":333, "quotedbl":555, "numbersign":500, "dollar":500, "percent":1E3, "ampersand":833, "quoteright":333, "parenleft":333, "parenright":333, "asterisk":500, "plus":570, "comma":250, "hyphen":333, "period":250, "slash":278, "zero":500, "one":500, "two":500, "three":500, "four":500, "five":500, 
  "six":500, "seven":500, "eight":500, "nine":500, "colon":333, "semicolon":333, "less":570, "equal":570, "greater":570, "question":500, "at":930, "A":722, "B":667, "C":722, "D":722, "E":667, "F":611, "G":778, "H":778, "I":389, "J":500, "K":778, "L":667, "M":944, "N":722, "O":778, "P":611, "Q":778, "R":722, "S":556, "T":667, "U":722, "V":722, "W":1E3, "X":722, "Y":722, "Z":667, "bracketleft":333, "backslash":278, "bracketright":333, "asciicircum":581, "underscore":500, "quoteleft":333, "a":500, "b":556, 
  "c":444, "d":556, "e":444, "f":333, "g":500, "h":556, "i":278, "j":333, "k":556, "l":278, "m":833, "n":556, "o":500, "p":556, "q":556, "r":444, "s":389, "t":333, "u":556, "v":500, "w":722, "x":500, "y":500, "z":444, "braceleft":394, "bar":220, "braceright":394, "asciitilde":520, "exclamdown":333, "cent":500, "sterling":500, "fraction":167, "yen":500, "florin":500, "section":500, "currency":500, "quotesingle":278, "quotedblleft":500, "guillemotleft":500, "guilsinglleft":333, "guilsinglright":333, 
  "fi":556, "fl":556, "endash":500, "dagger":500, "daggerdbl":500, "periodcentered":250, "paragraph":540, "bullet":350, "quotesinglbase":333, "quotedblbase":500, "quotedblright":500, "guillemotright":500, "ellipsis":1E3, "perthousand":1E3, "questiondown":500, "grave":333, "acute":333, "circumflex":333, "tilde":333, "macron":333, "breve":333, "dotaccent":333, "dieresis":333, "ring":333, "cedilla":333, "hungarumlaut":333, "ogonek":333, "caron":333, "emdash":1E3, "AE":1E3, "ordfeminine":300, "Lslash":667, 
  "Oslash":778, "OE":1E3, "ordmasculine":330, "ae":722, "dotlessi":278, "lslash":278, "oslash":500, "oe":722, "germandbls":556, "Idieresis":389, "eacute":444, "abreve":500, "uhungarumlaut":556, "ecaron":444, "Ydieresis":722, "divide":570, "Yacute":722, "Acircumflex":722, "aacute":500, "Ucircumflex":722, "yacute":500, "scommaaccent":389, "ecircumflex":444, "Uring":722, "Udieresis":722, "aogonek":500, "Uacute":722, "uogonek":556, "Edieresis":667, "Dcroat":722, "commaaccent":250, "copyright":747, "Emacron":667, 
  "ccaron":444, "aring":500, "Ncommaaccent":722, "lacute":278, "agrave":500, "Tcommaaccent":667, "Cacute":722, "atilde":500, "Edotaccent":667, "scaron":389, "scedilla":389, "iacute":278, "lozenge":494, "Rcaron":722, "Gcommaaccent":778, "ucircumflex":556, "acircumflex":500, "Amacron":722, "rcaron":444, "ccedilla":444, "Zdotaccent":667, "Thorn":611, "Omacron":778, "Racute":722, "Sacute":556, "dcaron":672, "Umacron":722, "uring":556, "threesuperior":300, "Ograve":778, "Agrave":722, "Abreve":722, "multiply":570, 
  "uacute":556, "Tcaron":667, "partialdiff":494, "ydieresis":500, "Nacute":722, "icircumflex":278, "Ecircumflex":667, "adieresis":500, "edieresis":444, "cacute":444, "nacute":556, "umacron":556, "Ncaron":722, "Iacute":389, "plusminus":570, "brokenbar":220, "registered":747, "Gbreve":778, "Idotaccent":389, "summation":600, "Egrave":667, "racute":444, "omacron":500, "Zacute":667, "Zcaron":667, "greaterequal":549, "Eth":722, "Ccedilla":722, "lcommaaccent":278, "tcaron":416, "eogonek":444, "Uogonek":722, 
  "Aacute":722, "Adieresis":722, "egrave":444, "zacute":444, "iogonek":278, "Oacute":778, "oacute":500, "amacron":500, "sacute":389, "idieresis":278, "Ocircumflex":778, "Ugrave":722, "Delta":612, "thorn":556, "twosuperior":300, "Odieresis":778, "mu":556, "igrave":278, "ohungarumlaut":500, "Eogonek":667, "dcroat":556, "threequarters":750, "Scedilla":556, "lcaron":394, "Kcommaaccent":778, "Lacute":667, "trademark":1E3, "edotaccent":444, "Igrave":389, "Imacron":389, "Lcaron":667, "onehalf":750, "lessequal":549, 
  "ocircumflex":500, "ntilde":556, "Uhungarumlaut":722, "Eacute":667, "emacron":444, "gbreve":500, "onequarter":750, "Scaron":556, "Scommaaccent":556, "Ohungarumlaut":778, "degree":400, "ograve":500, "Ccaron":722, "ugrave":556, "radical":549, "Dcaron":722, "rcommaaccent":444, "Ntilde":722, "otilde":500, "Rcommaaccent":722, "Lcommaaccent":667, "Atilde":722, "Aogonek":722, "Aring":722, "Otilde":778, "zdotaccent":444, "Ecaron":667, "Iogonek":389, "kcommaaccent":556, "minus":570, "Icircumflex":389, "ncaron":556, 
  "tcommaaccent":333, "logicalnot":570, "odieresis":500, "udieresis":556, "notequal":549, "gcommaaccent":500, "eth":500, "zcaron":444, "ncommaaccent":556, "onesuperior":300, "imacron":278, "Euro":500}, "Times-BoldItalic":{"space":250, "exclam":389, "quotedbl":555, "numbersign":500, "dollar":500, "percent":833, "ampersand":778, "quoteright":333, "parenleft":333, "parenright":333, "asterisk":500, "plus":570, "comma":250, "hyphen":333, "period":250, "slash":278, "zero":500, "one":500, "two":500, "three":500, 
  "four":500, "five":500, "six":500, "seven":500, "eight":500, "nine":500, "colon":333, "semicolon":333, "less":570, "equal":570, "greater":570, "question":500, "at":832, "A":667, "B":667, "C":667, "D":722, "E":667, "F":667, "G":722, "H":778, "I":389, "J":500, "K":667, "L":611, "M":889, "N":722, "O":722, "P":611, "Q":722, "R":667, "S":556, "T":611, "U":722, "V":667, "W":889, "X":667, "Y":611, "Z":611, "bracketleft":333, "backslash":278, "bracketright":333, "asciicircum":570, "underscore":500, "quoteleft":333, 
  "a":500, "b":500, "c":444, "d":500, "e":444, "f":333, "g":500, "h":556, "i":278, "j":278, "k":500, "l":278, "m":778, "n":556, "o":500, "p":500, "q":500, "r":389, "s":389, "t":278, "u":556, "v":444, "w":667, "x":500, "y":444, "z":389, "braceleft":348, "bar":220, "braceright":348, "asciitilde":570, "exclamdown":389, "cent":500, "sterling":500, "fraction":167, "yen":500, "florin":500, "section":500, "currency":500, "quotesingle":278, "quotedblleft":500, "guillemotleft":500, "guilsinglleft":333, "guilsinglright":333, 
  "fi":556, "fl":556, "endash":500, "dagger":500, "daggerdbl":500, "periodcentered":250, "paragraph":500, "bullet":350, "quotesinglbase":333, "quotedblbase":500, "quotedblright":500, "guillemotright":500, "ellipsis":1E3, "perthousand":1E3, "questiondown":500, "grave":333, "acute":333, "circumflex":333, "tilde":333, "macron":333, "breve":333, "dotaccent":333, "dieresis":333, "ring":333, "cedilla":333, "hungarumlaut":333, "ogonek":333, "caron":333, "emdash":1E3, "AE":944, "ordfeminine":266, "Lslash":611, 
  "Oslash":722, "OE":944, "ordmasculine":300, "ae":722, "dotlessi":278, "lslash":278, "oslash":500, "oe":722, "germandbls":500, "Idieresis":389, "eacute":444, "abreve":500, "uhungarumlaut":556, "ecaron":444, "Ydieresis":611, "divide":570, "Yacute":611, "Acircumflex":667, "aacute":500, "Ucircumflex":722, "yacute":444, "scommaaccent":389, "ecircumflex":444, "Uring":722, "Udieresis":722, "aogonek":500, "Uacute":722, "uogonek":556, "Edieresis":667, "Dcroat":722, "commaaccent":250, "copyright":747, "Emacron":667, 
  "ccaron":444, "aring":500, "Ncommaaccent":722, "lacute":278, "agrave":500, "Tcommaaccent":611, "Cacute":667, "atilde":500, "Edotaccent":667, "scaron":389, "scedilla":389, "iacute":278, "lozenge":494, "Rcaron":667, "Gcommaaccent":722, "ucircumflex":556, "acircumflex":500, "Amacron":667, "rcaron":389, "ccedilla":444, "Zdotaccent":611, "Thorn":611, "Omacron":722, "Racute":667, "Sacute":556, "dcaron":608, "Umacron":722, "uring":556, "threesuperior":300, "Ograve":722, "Agrave":667, "Abreve":667, "multiply":570, 
  "uacute":556, "Tcaron":611, "partialdiff":494, "ydieresis":444, "Nacute":722, "icircumflex":278, "Ecircumflex":667, "adieresis":500, "edieresis":444, "cacute":444, "nacute":556, "umacron":556, "Ncaron":722, "Iacute":389, "plusminus":570, "brokenbar":220, "registered":747, "Gbreve":722, "Idotaccent":389, "summation":600, "Egrave":667, "racute":389, "omacron":500, "Zacute":611, "Zcaron":611, "greaterequal":549, "Eth":722, "Ccedilla":667, "lcommaaccent":278, "tcaron":366, "eogonek":444, "Uogonek":722, 
  "Aacute":667, "Adieresis":667, "egrave":444, "zacute":389, "iogonek":278, "Oacute":722, "oacute":500, "amacron":500, "sacute":389, "idieresis":278, "Ocircumflex":722, "Ugrave":722, "Delta":612, "thorn":500, "twosuperior":300, "Odieresis":722, "mu":576, "igrave":278, "ohungarumlaut":500, "Eogonek":667, "dcroat":500, "threequarters":750, "Scedilla":556, "lcaron":382, "Kcommaaccent":667, "Lacute":611, "trademark":1E3, "edotaccent":444, "Igrave":389, "Imacron":389, "Lcaron":611, "onehalf":750, "lessequal":549, 
  "ocircumflex":500, "ntilde":556, "Uhungarumlaut":722, "Eacute":667, "emacron":444, "gbreve":500, "onequarter":750, "Scaron":556, "Scommaaccent":556, "Ohungarumlaut":722, "degree":400, "ograve":500, "Ccaron":667, "ugrave":556, "radical":549, "Dcaron":722, "rcommaaccent":389, "Ntilde":722, "otilde":500, "Rcommaaccent":667, "Lcommaaccent":611, "Atilde":667, "Aogonek":667, "Aring":667, "Otilde":722, "zdotaccent":389, "Ecaron":667, "Iogonek":389, "kcommaaccent":500, "minus":606, "Icircumflex":389, "ncaron":556, 
  "tcommaaccent":278, "logicalnot":606, "odieresis":500, "udieresis":556, "notequal":549, "gcommaaccent":500, "eth":500, "zcaron":389, "ncommaaccent":556, "onesuperior":300, "imacron":278, "Euro":500}, "Times-Italic":{"space":250, "exclam":333, "quotedbl":420, "numbersign":500, "dollar":500, "percent":833, "ampersand":778, "quoteright":333, "parenleft":333, "parenright":333, "asterisk":500, "plus":675, "comma":250, "hyphen":333, "period":250, "slash":278, "zero":500, "one":500, "two":500, "three":500, 
  "four":500, "five":500, "six":500, "seven":500, "eight":500, "nine":500, "colon":333, "semicolon":333, "less":675, "equal":675, "greater":675, "question":500, "at":920, "A":611, "B":611, "C":667, "D":722, "E":611, "F":611, "G":722, "H":722, "I":333, "J":444, "K":667, "L":556, "M":833, "N":667, "O":722, "P":611, "Q":722, "R":611, "S":500, "T":556, "U":722, "V":611, "W":833, "X":611, "Y":556, "Z":556, "bracketleft":389, "backslash":278, "bracketright":389, "asciicircum":422, "underscore":500, "quoteleft":333, 
  "a":500, "b":500, "c":444, "d":500, "e":444, "f":278, "g":500, "h":500, "i":278, "j":278, "k":444, "l":278, "m":722, "n":500, "o":500, "p":500, "q":500, "r":389, "s":389, "t":278, "u":500, "v":444, "w":667, "x":444, "y":444, "z":389, "braceleft":400, "bar":275, "braceright":400, "asciitilde":541, "exclamdown":389, "cent":500, "sterling":500, "fraction":167, "yen":500, "florin":500, "section":500, "currency":500, "quotesingle":214, "quotedblleft":556, "guillemotleft":500, "guilsinglleft":333, "guilsinglright":333, 
  "fi":500, "fl":500, "endash":500, "dagger":500, "daggerdbl":500, "periodcentered":250, "paragraph":523, "bullet":350, "quotesinglbase":333, "quotedblbase":556, "quotedblright":556, "guillemotright":500, "ellipsis":889, "perthousand":1E3, "questiondown":500, "grave":333, "acute":333, "circumflex":333, "tilde":333, "macron":333, "breve":333, "dotaccent":333, "dieresis":333, "ring":333, "cedilla":333, "hungarumlaut":333, "ogonek":333, "caron":333, "emdash":889, "AE":889, "ordfeminine":276, "Lslash":556, 
  "Oslash":722, "OE":944, "ordmasculine":310, "ae":667, "dotlessi":278, "lslash":278, "oslash":500, "oe":667, "germandbls":500, "Idieresis":333, "eacute":444, "abreve":500, "uhungarumlaut":500, "ecaron":444, "Ydieresis":556, "divide":675, "Yacute":556, "Acircumflex":611, "aacute":500, "Ucircumflex":722, "yacute":444, "scommaaccent":389, "ecircumflex":444, "Uring":722, "Udieresis":722, "aogonek":500, "Uacute":722, "uogonek":500, "Edieresis":611, "Dcroat":722, "commaaccent":250, "copyright":760, "Emacron":611, 
  "ccaron":444, "aring":500, "Ncommaaccent":667, "lacute":278, "agrave":500, "Tcommaaccent":556, "Cacute":667, "atilde":500, "Edotaccent":611, "scaron":389, "scedilla":389, "iacute":278, "lozenge":471, "Rcaron":611, "Gcommaaccent":722, "ucircumflex":500, "acircumflex":500, "Amacron":611, "rcaron":389, "ccedilla":444, "Zdotaccent":556, "Thorn":611, "Omacron":722, "Racute":611, "Sacute":500, "dcaron":544, "Umacron":722, "uring":500, "threesuperior":300, "Ograve":722, "Agrave":611, "Abreve":611, "multiply":675, 
  "uacute":500, "Tcaron":556, "partialdiff":476, "ydieresis":444, "Nacute":667, "icircumflex":278, "Ecircumflex":611, "adieresis":500, "edieresis":444, "cacute":444, "nacute":500, "umacron":500, "Ncaron":667, "Iacute":333, "plusminus":675, "brokenbar":275, "registered":760, "Gbreve":722, "Idotaccent":333, "summation":600, "Egrave":611, "racute":389, "omacron":500, "Zacute":556, "Zcaron":556, "greaterequal":549, "Eth":722, "Ccedilla":667, "lcommaaccent":278, "tcaron":300, "eogonek":444, "Uogonek":722, 
  "Aacute":611, "Adieresis":611, "egrave":444, "zacute":389, "iogonek":278, "Oacute":722, "oacute":500, "amacron":500, "sacute":389, "idieresis":278, "Ocircumflex":722, "Ugrave":722, "Delta":612, "thorn":500, "twosuperior":300, "Odieresis":722, "mu":500, "igrave":278, "ohungarumlaut":500, "Eogonek":611, "dcroat":500, "threequarters":750, "Scedilla":500, "lcaron":300, "Kcommaaccent":667, "Lacute":556, "trademark":980, "edotaccent":444, "Igrave":333, "Imacron":333, "Lcaron":611, "onehalf":750, "lessequal":549, 
  "ocircumflex":500, "ntilde":500, "Uhungarumlaut":722, "Eacute":611, "emacron":444, "gbreve":500, "onequarter":750, "Scaron":500, "Scommaaccent":500, "Ohungarumlaut":722, "degree":400, "ograve":500, "Ccaron":667, "ugrave":500, "radical":453, "Dcaron":722, "rcommaaccent":389, "Ntilde":667, "otilde":500, "Rcommaaccent":611, "Lcommaaccent":556, "Atilde":611, "Aogonek":611, "Aring":611, "Otilde":722, "zdotaccent":389, "Ecaron":611, "Iogonek":333, "kcommaaccent":444, "minus":675, "Icircumflex":333, "ncaron":500, 
  "tcommaaccent":278, "logicalnot":675, "odieresis":500, "udieresis":500, "notequal":549, "gcommaaccent":500, "eth":500, "zcaron":389, "ncommaaccent":500, "onesuperior":300, "imacron":278, "Euro":500}, "ZapfDingbats":{"space":278, "a1":974, "a2":961, "a202":974, "a3":980, "a4":719, "a5":789, "a119":790, "a118":791, "a117":690, "a11":960, "a12":939, "a13":549, "a14":855, "a15":911, "a16":933, "a105":911, "a17":945, "a18":974, "a19":755, "a20":846, "a21":762, "a22":761, "a23":571, "a24":677, "a25":763, 
  "a26":760, "a27":759, "a28":754, "a6":494, "a7":552, "a8":537, "a9":577, "a10":692, "a29":786, "a30":788, "a31":788, "a32":790, "a33":793, "a34":794, "a35":816, "a36":823, "a37":789, "a38":841, "a39":823, "a40":833, "a41":816, "a42":831, "a43":923, "a44":744, "a45":723, "a46":749, "a47":790, "a48":792, "a49":695, "a50":776, "a51":768, "a52":792, "a53":759, "a54":707, "a55":708, "a56":682, "a57":701, "a58":826, "a59":815, "a60":789, "a61":789, "a62":707, "a63":687, "a64":696, "a65":689, "a66":786, 
  "a67":787, "a68":713, "a69":791, "a70":785, "a71":791, "a72":873, "a73":761, "a74":762, "a203":762, "a75":759, "a204":759, "a76":892, "a77":892, "a78":788, "a79":784, "a81":438, "a82":138, "a83":277, "a84":415, "a97":392, "a98":392, "a99":668, "a100":668, "a89":390, "a90":390, "a93":317, "a94":317, "a91":276, "a92":276, "a205":509, "a85":509, "a206":410, "a86":410, "a87":234, "a88":234, "a95":334, "a96":334, "a101":732, "a102":544, "a103":544, "a104":910, "a106":667, "a107":760, "a108":760, "a112":776, 
  "a111":595, "a110":694, "a109":626, "a120":788, "a121":788, "a122":788, "a123":788, "a124":788, "a125":788, "a126":788, "a127":788, "a128":788, "a129":788, "a130":788, "a131":788, "a132":788, "a133":788, "a134":788, "a135":788, "a136":788, "a137":788, "a138":788, "a139":788, "a140":788, "a141":788, "a142":788, "a143":788, "a144":788, "a145":788, "a146":788, "a147":788, "a148":788, "a149":788, "a150":788, "a151":788, "a152":788, "a153":788, "a154":788, "a155":788, "a156":788, "a157":788, "a158":788, 
  "a159":788, "a160":894, "a161":838, "a163":1016, "a164":458, "a196":748, "a165":924, "a192":748, "a166":918, "a167":927, "a168":928, "a169":928, "a170":834, "a171":873, "a172":828, "a173":924, "a162":924, "a174":917, "a175":930, "a176":931, "a177":463, "a178":883, "a179":836, "a193":836, "a180":867, "a199":867, "a181":696, "a200":696, "a182":874, "a201":874, "a183":760, "a184":946, "a197":771, "a185":865, "a194":771, "a198":888, "a186":967, "a195":888, "a187":831, "a188":873, "a189":927, "a190":970, 
  "a191":918}};
  var EOF = {};
  var Parser = function ParserClosure() {
    function Parser$$1(lexer$$2, allowStreams, xref$$24) {
      this.lexer = lexer$$2;
      this.allowStreams = allowStreams;
      this.xref = xref$$24;
      this.inlineImg = 0;
      this.refill()
    }
    Parser$$1.prototype = {refill:function Parser_refill() {
      this.buf1 = this.lexer.getObj();
      this.buf2 = this.lexer.getObj()
    }, shift:function Parser_shift() {
      if(isCmd(this.buf2, "ID")) {
        this.buf1 = this.buf2;
        this.buf2 = null;
        this.lexer.skip()
      }else {
        this.buf1 = this.buf2;
        this.buf2 = this.lexer.getObj()
      }
    }, getObj:function Parser_getObj(cipherTransform) {
      if(isCmd(this.buf1, "BI")) {
        this.shift();
        return this.makeInlineImage(cipherTransform)
      }
      if(isCmd(this.buf1, "[")) {
        this.shift();
        var array$$14 = [];
        for(;!isCmd(this.buf1, "]") && !(this.buf1 == EOF);) {
          array$$14.push(this.getObj())
        }
        if(this.buf1 == EOF) {
          error$$3("End of file inside array")
        }
        this.shift();
        return array$$14
      }
      if(isCmd(this.buf1, "<<")) {
        this.shift();
        var dict$$23 = new Dict(this.xref);
        for(;!isCmd(this.buf1, ">>") && !(this.buf1 == EOF);) {
          if(!isName(this.buf1)) {
            error$$3("Dictionary key must be a name object")
          }
          var key$$46 = this.buf1.name;
          this.shift();
          if(this.buf1 == EOF) {
            break
          }
          dict$$23.set(key$$46, this.getObj(cipherTransform))
        }
        if(this.buf1 == EOF) {
          error$$3("End of file inside dictionary")
        }
        if(isCmd(this.buf2, "stream")) {
          return this.allowStreams ? this.makeStream(dict$$23, cipherTransform) : dict$$23
        }
        this.shift();
        return dict$$23
      }
      if(isInt(this.buf1)) {
        var num$$12 = this.buf1;
        this.shift();
        if(isInt(this.buf1) && isCmd(this.buf2, "R")) {
          var ref$$7 = new Ref(num$$12, this.buf1);
          this.shift();
          this.shift();
          return ref$$7
        }
        return num$$12
      }
      if(isString(this.buf1)) {
        var str$$28 = this.buf1;
        this.shift();
        if(cipherTransform) {
          str$$28 = cipherTransform.decryptString(str$$28)
        }
        return str$$28
      }
      var obj$$32 = this.buf1;
      this.shift();
      return obj$$32
    }, makeInlineImage:function Parser_makeInlineImage(cipherTransform$$1) {
      var lexer$$3 = this.lexer;
      var stream$$20 = lexer$$3.stream;
      var dict$$24 = new Dict;
      for(;!isCmd(this.buf1, "ID") && !(this.buf1 == EOF);) {
        if(!isName(this.buf1)) {
          error$$3("Dictionary key must be a name object")
        }
        var key$$47 = this.buf1.name;
        this.shift();
        if(this.buf1 == EOF) {
          break
        }
        dict$$24.set(key$$47, this.getObj(cipherTransform$$1))
      }
      var startPos$$1 = stream$$20.pos;
      var state$$3 = 0;
      var ch$$5;
      for(;state$$3 != 4 && (ch$$5 = stream$$20.getByte()) != null;) {
        switch(ch$$5) {
          case 32:
          ;
          case 13:
          ;
          case 10:
            state$$3 = state$$3 === 3 ? 4 : 0;
            break;
          case 69:
            state$$3 = 2;
            break;
          case 73:
            state$$3 = state$$3 === 2 ? 3 : 0;
            break;
          default:
            state$$3 = 0
        }
      }
      var inlineImgLimit = 500;
      if(++this.inlineImg >= inlineImgLimit) {
        if(this.inlineImg === inlineImgLimit) {
          warn("Too many inline images")
        }
        this.shift();
        return null
      }
      var length$$55 = stream$$20.pos - 4 - startPos$$1;
      var imageStream = stream$$20.makeSubStream(startPos$$1, length$$55, dict$$24);
      if(cipherTransform$$1) {
        imageStream = cipherTransform$$1.createStream(imageStream)
      }
      imageStream = this.filter(imageStream, dict$$24, length$$55);
      imageStream.parameters = dict$$24;
      this.buf2 = Cmd.get("EI");
      this.shift();
      return imageStream
    }, fetchIfRef:function Parser_fetchIfRef(obj$$33) {
      return isRef(obj$$33) ? this.xref.fetch(obj$$33) : obj$$33
    }, makeStream:function Parser_makeStream(dict$$25, cipherTransform$$2) {
      var lexer$$4 = this.lexer;
      var stream$$21 = lexer$$4.stream;
      lexer$$4.skipToNextLine();
      var pos$$10 = stream$$21.pos;
      var length$$56 = this.fetchIfRef(dict$$25.get("Length"));
      if(!isInt(length$$56)) {
        error$$3("Bad " + length$$56 + " attribute in stream")
      }
      stream$$21.pos = pos$$10 + length$$56;
      this.shift();
      this.shift();
      if(!isCmd(this.buf1, "endstream")) {
        error$$3("Missing endstream")
      }
      this.shift();
      stream$$21 = stream$$21.makeSubStream(pos$$10, length$$56, dict$$25);
      if(cipherTransform$$2) {
        stream$$21 = cipherTransform$$2.createStream(stream$$21)
      }
      stream$$21 = this.filter(stream$$21, dict$$25, length$$56);
      stream$$21.parameters = dict$$25;
      return stream$$21
    }, filter:function Parser_filter(stream$$22, dict$$26, length$$57) {
      var filter$$1 = this.fetchIfRef(dict$$26.get("Filter", "F"));
      var params$$3 = this.fetchIfRef(dict$$26.get("DecodeParms", "DP"));
      if(isName(filter$$1)) {
        return this.makeFilter(stream$$22, filter$$1.name, length$$57, params$$3)
      }
      if(isArray(filter$$1)) {
        var filterArray = filter$$1;
        var paramsArray = params$$3;
        var i$$146 = 0;
        var ii$$64 = filterArray.length;
        for(;i$$146 < ii$$64;++i$$146) {
          filter$$1 = filterArray[i$$146];
          if(!isName(filter$$1)) {
            error$$3("Bad filter name: " + filter$$1)
          }
          params$$3 = null;
          if(isArray(paramsArray) && i$$146 in paramsArray) {
            params$$3 = paramsArray[i$$146]
          }
          stream$$22 = this.makeFilter(stream$$22, filter$$1.name, length$$57, params$$3);
          length$$57 = null
        }
      }
      return stream$$22
    }, makeFilter:function Parser_makeFilter(stream$$23, name$$66, length$$58, params$$4) {
      if(name$$66 == "FlateDecode" || name$$66 == "Fl") {
        if(params$$4) {
          return new PredictorStream(new FlateStream(stream$$23), params$$4)
        }
        return new FlateStream(stream$$23)
      }
      if(name$$66 == "LZWDecode" || name$$66 == "LZW") {
        var earlyChange = 1;
        if(params$$4) {
          if(params$$4.has("EarlyChange")) {
            earlyChange = params$$4.get("EarlyChange")
          }
          return new PredictorStream(new LZWStream(stream$$23, earlyChange), params$$4)
        }
        return new LZWStream(stream$$23, earlyChange)
      }
      if(name$$66 == "DCTDecode" || name$$66 == "DCT") {
        var bytes$$10 = stream$$23.getBytes(length$$58);
        return new JpegStream(bytes$$10, stream$$23.dict, this.xref)
      }
      if(name$$66 == "JPXDecode" || name$$66 == "JPX") {
        bytes$$10 = stream$$23.getBytes(length$$58);
        return new JpxStream(bytes$$10, stream$$23.dict)
      }
      if(name$$66 == "ASCII85Decode" || name$$66 == "A85") {
        return new Ascii85Stream(stream$$23)
      }
      if(name$$66 == "ASCIIHexDecode" || name$$66 == "AHx") {
        return new AsciiHexStream(stream$$23)
      }
      if(name$$66 == "CCITTFaxDecode" || name$$66 == "CCF") {
        return new CCITTFaxStream(stream$$23, params$$4)
      }
      if(name$$66 == "RunLengthDecode" || name$$66 == "RL") {
        return new RunLengthStream(stream$$23)
      }
      if(name$$66 == "JBIG2Decode") {
        error$$3("JBIG2 image format is not currently supprted.")
      }
      warn('filter "' + name$$66 + '" not supported yet');
      return stream$$23
    }};
    return Parser$$1
  }();
  var Lexer = function LexerClosure() {
    function Lexer$$1(stream$$24) {
      this.stream = stream$$24
    }
    function toHexDigit(ch$$6) {
      if(ch$$6 >= "0" && ch$$6 <= "9") {
        return ch$$6.charCodeAt(0) - 48
      }
      ch$$6 = ch$$6.toUpperCase();
      if(ch$$6 >= "A" && ch$$6 <= "F") {
        return ch$$6.charCodeAt(0) - 55
      }
      return-1
    }
    Lexer$$1.isSpace = function Lexer_isSpace(ch$$7) {
      return ch$$7 == " " || ch$$7 == "\t" || ch$$7 == "\r" || ch$$7 == "\n"
    };
    var specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    Lexer$$1.prototype = {getNumber:function Lexer_getNumber(ch$$8) {
      var floating = false;
      var str$$29 = ch$$8;
      var stream$$25 = this.stream;
      for(;;) {
        ch$$8 = stream$$25.lookChar();
        if(ch$$8 == "." && !floating) {
          str$$29 += ch$$8;
          floating = true
        }else {
          if(ch$$8 == "-") {
            warn("Badly formated number")
          }else {
            if(ch$$8 >= "0" && ch$$8 <= "9") {
              str$$29 += ch$$8
            }else {
              if(ch$$8 == "e" || ch$$8 == "E") {
                floating = true
              }else {
                break
              }
            }
          }
        }
        stream$$25.skip()
      }
      var value$$68 = parseFloat(str$$29);
      if(isNaN(value$$68)) {
        error$$3("Invalid floating point number: " + value$$68)
      }
      return value$$68
    }, getString:function Lexer_getString() {
      var numParen = 1;
      var done = false;
      var str$$30 = "";
      var stream$$26 = this.stream;
      var ch$$9;
      do {
        ch$$9 = stream$$26.getChar();
        switch(ch$$9) {
          case undefined:
            warn("Unterminated string");
            done = true;
            break;
          case "(":
            ++numParen;
            str$$30 += ch$$9;
            break;
          case ")":
            if(--numParen == 0) {
              done = true
            }else {
              str$$30 += ch$$9
            }
            break;
          case "\\":
            ch$$9 = stream$$26.getChar();
            switch(ch$$9) {
              case undefined:
                warn("Unterminated string");
                done = true;
                break;
              case "n":
                str$$30 += "\n";
                break;
              case "r":
                str$$30 += "\r";
                break;
              case "t":
                str$$30 += "\t";
                break;
              case "b":
                str$$30 += "\b";
                break;
              case "f":
                str$$30 += "\f";
                break;
              case "\\":
              ;
              case "(":
              ;
              case ")":
                str$$30 += ch$$9;
                break;
              case "0":
              ;
              case "1":
              ;
              case "2":
              ;
              case "3":
              ;
              case "4":
              ;
              case "5":
              ;
              case "6":
              ;
              case "7":
                var x$$76 = ch$$9 - "0";
                ch$$9 = stream$$26.lookChar();
                if(ch$$9 >= "0" && ch$$9 <= "7") {
                  stream$$26.skip();
                  x$$76 = (x$$76 << 3) + (ch$$9 - "0");
                  ch$$9 = stream$$26.lookChar();
                  if(ch$$9 >= "0" && ch$$9 <= "7") {
                    stream$$26.skip();
                    x$$76 = (x$$76 << 3) + (ch$$9 - "0")
                  }
                }
                str$$30 += String.fromCharCode(x$$76);
                break;
              case "\r":
                ch$$9 = stream$$26.lookChar();
                if(ch$$9 == "\n") {
                  stream$$26.skip()
                }
                break;
              case "\n":
                break;
              default:
                str$$30 += ch$$9
            }
            break;
          default:
            str$$30 += ch$$9
        }
      }while(!done);
      return str$$30
    }, getName:function Lexer_getName(ch$$10) {
      var str$$31 = "";
      var stream$$27 = this.stream;
      for(;!!(ch$$10 = stream$$27.lookChar()) && !specialChars[ch$$10.charCodeAt(0)];) {
        stream$$27.skip();
        if(ch$$10 == "#") {
          ch$$10 = stream$$27.lookChar();
          var x$$77 = toHexDigit(ch$$10);
          if(x$$77 != -1) {
            stream$$27.skip();
            var x2$$4 = toHexDigit(stream$$27.getChar());
            if(x2$$4 == -1) {
              error$$3("Illegal digit in hex char in name: " + x2$$4)
            }
            str$$31 += String.fromCharCode(x$$77 << 4 | x2$$4)
          }else {
            str$$31 += "#";
            str$$31 += ch$$10
          }
        }else {
          str$$31 += ch$$10
        }
      }
      if(str$$31.length > 128) {
        error$$3("Warning: name token is longer than allowed by the spec: " + str$$31.length)
      }
      return new Name(str$$31)
    }, getHexString:function Lexer_getHexString(ch$$11) {
      var str$$32 = "";
      var stream$$28 = this.stream;
      for(;;) {
        ch$$11 = stream$$28.getChar();
        if(ch$$11 == ">") {
          break
        }
        if(!ch$$11) {
          warn("Unterminated hex string");
          break
        }
        if(specialChars[ch$$11.charCodeAt(0)] != 1) {
          var x$$78;
          var x2$$5;
          if((x$$78 = toHexDigit(ch$$11)) == -1) {
            error$$3("Illegal character in hex string: " + ch$$11)
          }
          ch$$11 = stream$$28.getChar();
          for(;specialChars[ch$$11.charCodeAt(0)] == 1;) {
            ch$$11 = stream$$28.getChar()
          }
          if((x2$$5 = toHexDigit(ch$$11)) == -1) {
            error$$3("Illegal character in hex string: " + ch$$11)
          }
          str$$32 += String.fromCharCode(x$$78 << 4 | x2$$5)
        }
      }
      return str$$32
    }, getObj:function Lexer_getObj() {
      var comment$$1 = false;
      var stream$$29 = this.stream;
      var ch$$12;
      for(;true;) {
        if(!(ch$$12 = stream$$29.getChar())) {
          return EOF
        }
        if(comment$$1) {
          if(ch$$12 == "\r" || ch$$12 == "\n") {
            comment$$1 = false
          }
        }else {
          if(ch$$12 == "%") {
            comment$$1 = true
          }else {
            if(specialChars[ch$$12.charCodeAt(0)] != 1) {
              break
            }
          }
        }
      }
      switch(ch$$12) {
        case "0":
        ;
        case "1":
        ;
        case "2":
        ;
        case "3":
        ;
        case "4":
        ;
        case "5":
        ;
        case "6":
        ;
        case "7":
        ;
        case "8":
        ;
        case "9":
        ;
        case "+":
        ;
        case "-":
        ;
        case ".":
          return this.getNumber(ch$$12);
        case "(":
          return this.getString();
        case "/":
          return this.getName(ch$$12);
        case "[":
        ;
        case "]":
          return Cmd.get(ch$$12);
        case "<":
          ch$$12 = stream$$29.lookChar();
          if(ch$$12 == "<") {
            stream$$29.skip();
            return Cmd.get("<<")
          }
          return this.getHexString(ch$$12);
        case ">":
          ch$$12 = stream$$29.lookChar();
          if(ch$$12 == ">") {
            stream$$29.skip();
            return Cmd.get(">>")
          }
        ;
        case "{":
        ;
        case "}":
          return Cmd.get(ch$$12);
        case ")":
          error$$3("Illegal character: " + ch$$12)
      }
      var str$$33 = ch$$12;
      for(;!!(ch$$12 = stream$$29.lookChar()) && !specialChars[ch$$12.charCodeAt(0)];) {
        stream$$29.skip();
        if(str$$33.length == 128) {
          error$$3("Command token too long: " + str$$33.length)
        }
        str$$33 += ch$$12
      }
      if(str$$33 == "true") {
        return true
      }
      if(str$$33 == "false") {
        return false
      }
      if(str$$33 == "null") {
        return null
      }
      return Cmd.get(str$$33)
    }, skipToNextLine:function Lexer_skipToNextLine() {
      var stream$$30 = this.stream;
      for(;true;) {
        var ch$$13 = stream$$30.getChar();
        if(!ch$$13 || ch$$13 == "\n") {
          return
        }
        if(ch$$13 == "\r") {
          if((ch$$13 = stream$$30.lookChar()) == "\n") {
            stream$$30.skip()
          }
          return
        }
      }
    }, skip:function Lexer_skip() {
      this.stream.skip()
    }};
    return Lexer$$1
  }();
  var Linearization = function LinearizationClosure() {
    function Linearization$$1(stream$$31) {
      this.parser = new Parser(new Lexer(stream$$31), false, null);
      var obj1$$1 = this.parser.getObj();
      var obj2$$1 = this.parser.getObj();
      var obj3$$1 = this.parser.getObj();
      this.linDict = this.parser.getObj();
      if(isInt(obj1$$1) && isInt(obj2$$1) && isCmd(obj3$$1, "obj") && isDict(this.linDict)) {
        var obj$$34 = this.linDict.get("Linearized");
        if(!(isNum(obj$$34) && obj$$34 > 0)) {
          this.linDict = null
        }
      }
    }
    Linearization$$1.prototype = {getInt:function Linearization_getInt(name$$67) {
      var linDict = this.linDict;
      var obj$$35;
      if(isDict(linDict) && isInt(obj$$35 = linDict.get(name$$67)) && obj$$35 > 0) {
        return obj$$35
      }
      error$$3('"' + name$$67 + '" field in linearization table is invalid')
    }, getHint:function Linearization_getHint(index$$60) {
      var linDict$$1 = this.linDict;
      var obj1$$2;
      var obj2$$2;
      if(isDict(linDict$$1) && isArray(obj1$$2 = linDict$$1.get("H")) && obj1$$2.length >= 2 && isInt(obj2$$2 = obj1$$2[index$$60]) && obj2$$2 > 0) {
        return obj2$$2
      }
      error$$3("Hints table in linearization table is invalid: " + index$$60)
    }, get length() {
      if(!isDict(this.linDict)) {
        return 0
      }
      return this.getInt("L")
    }, get hintsOffset() {
      return this.getHint(0)
    }, get hintsLength() {
      return this.getHint(1)
    }, get hintsOffset2() {
      return this.getHint(2)
    }, get hintsLenth2() {
      return this.getHint(3)
    }, get objectNumberFirst() {
      return this.getInt("O")
    }, get endFirst() {
      return this.getInt("E")
    }, get numPages() {
      return this.getInt("N")
    }, get mainXRefEntriesOffset() {
      return this.getInt("T")
    }, get pageFirst() {
      return this.getInt("P")
    }};
    return Linearization$$1
  }();
  var JSCompiler_object_inline_AXIAL_293 = 2;
  var JSCompiler_object_inline_RADIAL_294 = 3;
  var Pattern = function PatternClosure() {
    function Pattern$$1() {
      error$$3("should not call Pattern constructor")
    }
    Pattern$$1.prototype = {getPattern:function Pattern_getPattern(ctx$$14) {
      error$$3("Should not call Pattern.getStyle: " + ctx$$14)
    }};
    Pattern$$1.shadingFromIR = function Pattern_shadingFromIR(raw$$7) {
      return Shadings[raw$$7[0]].fromIR(raw$$7)
    };
    Pattern$$1.parseShading = function Pattern_parseShading(shading$$1, matrix$$3, xref$$25, res$$6) {
      var dict$$27 = isStream(shading$$1) ? shading$$1.dict : shading$$1;
      var type$$42 = dict$$27.get("ShadingType");
      switch(type$$42) {
        case JSCompiler_object_inline_AXIAL_293:
        ;
        case JSCompiler_object_inline_RADIAL_294:
          return new Shadings.RadialAxial(dict$$27, matrix$$3, xref$$25, res$$6);
        default:
          return new Shadings.Dummy
      }
    };
    return Pattern$$1
  }();
  var Shadings = {};
  Shadings.RadialAxial = function RadialAxialClosure() {
    function RadialAxial(dict$$28, matrix$$4, xref$$26, res$$7, ctx$$15) {
      this.matrix = matrix$$4;
      this.coordsArr = dict$$28.get("Coords");
      this.shadingType = dict$$28.get("ShadingType");
      this.type = "Pattern";
      this.ctx = ctx$$15;
      var cs$$7 = dict$$28.get("ColorSpace", "CS");
      cs$$7 = ColorSpace.parse(cs$$7, xref$$26, res$$7);
      this.cs = cs$$7;
      var t0 = 0;
      var t1$$1 = 1;
      if(dict$$28.has("Domain")) {
        var domainArr = dict$$28.get("Domain");
        t0 = domainArr[0];
        t1$$1 = domainArr[1]
      }
      var extendStart = false;
      var extendEnd = false;
      if(dict$$28.has("Extend")) {
        var extendArr = dict$$28.get("Extend");
        extendStart = extendArr[0];
        extendEnd = extendArr[1];
        TODO("Support extend")
      }
      this.extendStart = extendStart;
      this.extendEnd = extendEnd;
      var fnObj = dict$$28.get("Function");
      if(isArray(fnObj)) {
        error$$3("No support for array of functions")
      }
      var JSCompiler_inline_result$$3;
      JSCompiler_inline_label_isPDFFunction_119: {
        var v$$inline_117 = fnObj;
        var fnDict$$inline_118;
        if(typeof v$$inline_117 != "object") {
          JSCompiler_inline_result$$3 = false;
          break JSCompiler_inline_label_isPDFFunction_119
        }else {
          if(isDict(v$$inline_117)) {
            fnDict$$inline_118 = v$$inline_117
          }else {
            if(isStream(v$$inline_117)) {
              fnDict$$inline_118 = v$$inline_117.dict
            }else {
              JSCompiler_inline_result$$3 = false;
              break JSCompiler_inline_label_isPDFFunction_119
            }
          }
        }
        JSCompiler_inline_result$$3 = fnDict$$inline_118.has("FunctionType")
      }
      if(!JSCompiler_inline_result$$3) {
        error$$3("Invalid function")
      }
      var fn$$5 = PDFFunction.parse(xref$$26, fnObj);
      var step$$1 = (t1$$1 - t0) / 10;
      var diff$$2 = t1$$1 - t0;
      var colorStops = [];
      var i$$147 = t0;
      for(;i$$147 <= t1$$1;i$$147 += step$$1) {
        var rgbColor$$2 = cs$$7.getRgb(fn$$5([i$$147]));
        var cssColor = Util.makeCssRgb(rgbColor$$2[0], rgbColor$$2[1], rgbColor$$2[2]);
        colorStops.push([(i$$147 - t0) / diff$$2, cssColor])
      }
      this.colorStops = colorStops
    }
    RadialAxial.fromIR = function RadialAxial_fromIR(raw$$8) {
      var type$$43 = raw$$8[1];
      var colorStops$$1 = raw$$8[2];
      var p0 = raw$$8[3];
      var p1 = raw$$8[4];
      var r0$$1 = raw$$8[5];
      var r1$$1 = raw$$8[6];
      return{type:"Pattern", getPattern:function RadialAxial_getPattern(ctx$$16) {
        var curMatrix = ctx$$16.mozCurrentTransform;
        if(curMatrix) {
          var userMatrix = ctx$$16.mozCurrentTransformInverse;
          p0 = Util.applyTransform(p0, curMatrix);
          p0 = Util.applyTransform(p0, userMatrix);
          p1 = Util.applyTransform(p1, curMatrix);
          p1 = Util.applyTransform(p1, userMatrix)
        }
        var grad;
        if(type$$43 == JSCompiler_object_inline_AXIAL_293) {
          grad = ctx$$16.createLinearGradient(p0[0], p0[1], p1[0], p1[1])
        }else {
          if(type$$43 == JSCompiler_object_inline_RADIAL_294) {
            grad = ctx$$16.createRadialGradient(p0[0], p0[1], r0$$1, p1[0], p1[1], r1$$1)
          }
        }
        var i$$148 = 0;
        var ii$$65 = colorStops$$1.length;
        for(;i$$148 < ii$$65;++i$$148) {
          var c$$18 = colorStops$$1[i$$148];
          grad.addColorStop(c$$18[0], c$$18[1])
        }
        return grad
      }}
    };
    RadialAxial.prototype = {getIR:function RadialAxial_getIR() {
      var coordsArr = this.coordsArr;
      var type$$44 = this.shadingType;
      if(type$$44 == JSCompiler_object_inline_AXIAL_293) {
        var p0$$1 = [coordsArr[0], coordsArr[1]];
        var p1$$1 = [coordsArr[2], coordsArr[3]];
        var r0$$2 = null;
        var r1$$2 = null
      }else {
        if(type$$44 == JSCompiler_object_inline_RADIAL_294) {
          p0$$1 = [coordsArr[0], coordsArr[1]];
          p1$$1 = [coordsArr[3], coordsArr[4]];
          r0$$2 = coordsArr[2];
          r1$$2 = coordsArr[5]
        }else {
          error$$3("getPattern type unknown: " + type$$44)
        }
      }
      var matrix$$5 = this.matrix;
      if(matrix$$5) {
        p0$$1 = Util.applyTransform(p0$$1, matrix$$5);
        p1$$1 = Util.applyTransform(p1$$1, matrix$$5)
      }
      return["RadialAxial", type$$44, this.colorStops, p0$$1, p1$$1, r0$$2, r1$$2]
    }};
    return RadialAxial
  }();
  Shadings.Dummy = function DummyClosure() {
    function Dummy() {
      this.type = "Pattern"
    }
    Dummy.fromIR = function Dummy_fromIR() {
      return"hotpink"
    };
    Dummy.prototype = {getIR:function Dummy_getIR() {
      return["Dummy"]
    }};
    return Dummy
  }();
  var TilingPattern = function TilingPatternClosure() {
    function TilingPattern$$1(IR$$9, color$$18, ctx$$17, objs$$6) {
      var operatorList$$5 = IR$$9[2];
      this.matrix = IR$$9[3];
      var bbox$$2 = IR$$9[4];
      var xstep = IR$$9[5];
      var ystep = IR$$9[6];
      var paintType = IR$$9[7];
      TODO("TilingType");
      this.curMatrix = ctx$$17.mozCurrentTransform;
      this.invMatrix = ctx$$17.mozCurrentTransformInverse;
      this.ctx = ctx$$17;
      this.type = "Pattern";
      var x0$$3 = bbox$$2[0];
      var y0$$3 = bbox$$2[1];
      var x1$$7 = bbox$$2[2];
      var y1$$6 = bbox$$2[3];
      var topLeft = [x0$$3, y0$$3];
      var botRight = [x0$$3 + xstep, y0$$3 + ystep];
      var width$$29 = botRight[0] - topLeft[0];
      var height$$21 = botRight[1] - topLeft[1];
      for(;Math.abs(width$$29) > MAX_PATTERN_SIZE || Math.abs(height$$21) > MAX_PATTERN_SIZE;) {
        width$$29 = height$$21 = MAX_PATTERN_SIZE
      }
      var tmpCanvas$$3 = createScratchCanvas(width$$29, height$$21);
      var tmpCtx$$3 = tmpCanvas$$3.getContext("2d");
      var graphics = new CanvasGraphics(tmpCtx$$3, objs$$6);
      switch(paintType) {
        case PaintType.COLORED:
          tmpCtx$$3.fillStyle = ctx$$17.fillStyle;
          tmpCtx$$3.strokeStyle = ctx$$17.strokeStyle;
          break;
        case PaintType.UNCOLORED:
          var cssColor$$1 = Util.makeCssRgb(this, color$$18[0], color$$18[1], color$$18[2]);
          tmpCtx$$3.fillStyle = cssColor$$1;
          tmpCtx$$3.strokeStyle = cssColor$$1;
          break;
        default:
          error$$3("Unsupported paint type: " + paintType)
      }
      var scale$$11 = [width$$29 / xstep, height$$21 / ystep];
      this.scale = scale$$11;
      var tmpTranslate = [1, 0, 0, 1, -topLeft[0], -topLeft[1]];
      var tmpScale = [scale$$11[0], 0, 0, scale$$11[1], 0, 0];
      graphics.transform.apply(graphics, tmpScale);
      graphics.transform.apply(graphics, tmpTranslate);
      if(bbox$$2 && isArray(bbox$$2) && 4 == bbox$$2.length) {
        var bboxWidth = x1$$7 - x0$$3;
        var bboxHeight = y1$$6 - y0$$3;
        graphics.rectangle(x0$$3, y0$$3, bboxWidth, bboxHeight);
        graphics.clip();
        graphics.endPath()
      }
      graphics.executeOperatorList(operatorList$$5);
      this.canvas = tmpCanvas$$3
    }
    var PaintType = {COLORED:1, UNCOLORED:2};
    var MAX_PATTERN_SIZE = 512;
    TilingPattern$$1.getIR = function TilingPattern_getIR(operatorList$$6, dict$$29, args$$6) {
      var matrix$$6 = dict$$29.get("Matrix");
      var bbox$$3 = dict$$29.get("BBox");
      var xstep$$1 = dict$$29.get("XStep");
      var ystep$$1 = dict$$29.get("YStep");
      var paintType$$1 = dict$$29.get("PaintType");
      return["TilingPattern", args$$6, operatorList$$6, matrix$$6, bbox$$3, xstep$$1, ystep$$1, paintType$$1]
    };
    TilingPattern$$1.prototype = {getPattern:function TilingPattern_getPattern() {
      var matrix$$7 = this.matrix;
      var curMatrix$$1 = this.curMatrix;
      var ctx$$18 = this.ctx;
      if(curMatrix$$1) {
        ctx$$18.setTransform.apply(ctx$$18, curMatrix$$1)
      }
      if(matrix$$7) {
        ctx$$18.transform.apply(ctx$$18, matrix$$7)
      }
      var scale$$12 = this.scale;
      ctx$$18.scale(1 / scale$$12[0], 1 / scale$$12[1]);
      return ctx$$18.createPattern(this.canvas, "repeat")
    }};
    return TilingPattern$$1
  }();
  var Stream = function StreamClosure() {
    function Stream$$1(arrayBuffer, start$$17, length$$59, dict$$30) {
      this.bytes = new Uint8Array(arrayBuffer);
      this.start = start$$17 || 0;
      this.pos = this.start;
      this.end = start$$17 + length$$59 || this.bytes.length;
      this.dict = dict$$30
    }
    Stream$$1.prototype = {get length() {
      return this.end - this.start
    }, getByte:function Stream_getByte() {
      if(this.pos >= this.end) {
        return null
      }
      return this.bytes[this.pos++]
    }, getBytes:function Stream_getBytes(length$$60) {
      var bytes$$11 = this.bytes;
      var pos$$11 = this.pos;
      var strEnd = this.end;
      if(!length$$60) {
        return bytes$$11.subarray(pos$$11, strEnd)
      }
      var end$$11 = pos$$11 + length$$60;
      if(end$$11 > strEnd) {
        end$$11 = strEnd
      }
      this.pos = end$$11;
      return bytes$$11.subarray(pos$$11, end$$11)
    }, lookChar:function Stream_lookChar() {
      if(this.pos >= this.end) {
        return null
      }
      return String.fromCharCode(this.bytes[this.pos])
    }, getChar:function Stream_getChar() {
      if(this.pos >= this.end) {
        return null
      }
      return String.fromCharCode(this.bytes[this.pos++])
    }, skip:function Stream_skip(n$$28) {
      if(!n$$28) {
        n$$28 = 1
      }
      this.pos += n$$28
    }, reset:function Stream_reset() {
      this.pos = this.start
    }, moveStart:function Stream_moveStart() {
      this.start = this.pos
    }, makeSubStream:function Stream_makeSubStream(start$$18, length$$61, dict$$31) {
      return new Stream$$1(this.bytes.buffer, start$$18, length$$61, dict$$31)
    }, isStream:true};
    return Stream$$1
  }();
  var StringStream = function StringStreamClosure() {
    function StringStream$$1(str$$34) {
      var length$$62 = str$$34.length;
      var bytes$$12 = new Uint8Array(length$$62);
      var n$$29 = 0;
      for(;n$$29 < length$$62;++n$$29) {
        bytes$$12[n$$29] = str$$34.charCodeAt(n$$29)
      }
      Stream.call(this, bytes$$12)
    }
    StringStream$$1.prototype = Stream.prototype;
    return StringStream$$1
  }();
  var DecodeStream = function DecodeStreamClosure() {
    function DecodeStream$$1() {
      this.pos = 0;
      this.bufferLength = 0;
      this.eof = false;
      this.buffer = null
    }
    DecodeStream$$1.prototype = {ensureBuffer:function DecodeStream_ensureBuffer(requested) {
      var buffer$$17 = this.buffer;
      var current$$6 = buffer$$17 ? buffer$$17.byteLength : 0;
      if(requested < current$$6) {
        return buffer$$17
      }
      var size$$12 = 512;
      for(;size$$12 < requested;) {
        size$$12 <<= 1
      }
      var buffer2 = new Uint8Array(size$$12);
      var i$$149 = 0;
      for(;i$$149 < current$$6;++i$$149) {
        buffer2[i$$149] = buffer$$17[i$$149]
      }
      return this.buffer = buffer2
    }, getByte:function DecodeStream_getByte() {
      var pos$$12 = this.pos;
      for(;this.bufferLength <= pos$$12;) {
        if(this.eof) {
          return null
        }
        this.readBlock()
      }
      return this.buffer[this.pos++]
    }, getBytes:function DecodeStream_getBytes(length$$63) {
      var end$$12;
      var pos$$13 = this.pos;
      if(length$$63) {
        this.ensureBuffer(pos$$13 + length$$63);
        end$$12 = pos$$13 + length$$63;
        for(;!this.eof && this.bufferLength < end$$12;) {
          this.readBlock()
        }
        var bufEnd = this.bufferLength;
        if(end$$12 > bufEnd) {
          end$$12 = bufEnd
        }
      }else {
        for(;!this.eof;) {
          this.readBlock()
        }
        end$$12 = this.bufferLength;
        if(!end$$12) {
          this.buffer = new Uint8Array(0)
        }
      }
      this.pos = end$$12;
      return this.buffer.subarray(pos$$13, end$$12)
    }, lookChar:function DecodeStream_lookChar() {
      var pos$$14 = this.pos;
      for(;this.bufferLength <= pos$$14;) {
        if(this.eof) {
          return null
        }
        this.readBlock()
      }
      return String.fromCharCode(this.buffer[this.pos])
    }, getChar:function DecodeStream_getChar() {
      var pos$$15 = this.pos;
      for(;this.bufferLength <= pos$$15;) {
        if(this.eof) {
          return null
        }
        this.readBlock()
      }
      return String.fromCharCode(this.buffer[this.pos++])
    }, makeSubStream:function DecodeStream_makeSubStream(start$$19, length$$64, dict$$32) {
      var end$$13 = start$$19 + length$$64;
      for(;this.bufferLength <= end$$13 && !this.eof;) {
        this.readBlock()
      }
      return new Stream(this.buffer, start$$19, length$$64, dict$$32)
    }, skip:function DecodeStream_skip(n$$30) {
      if(!n$$30) {
        n$$30 = 1
      }
      this.pos += n$$30
    }, reset:function DecodeStream_reset() {
      this.pos = 0
    }};
    return DecodeStream$$1
  }();
  var FakeStream = function FakeStreamClosure() {
    function FakeStream$$1(stream$$32) {
      this.dict = stream$$32.dict;
      DecodeStream.call(this)
    }
    FakeStream$$1.prototype = Object.create(DecodeStream.prototype);
    FakeStream$$1.prototype.readBlock = function FakeStream_readBlock() {
      var bufferLength$$3 = this.bufferLength;
      bufferLength$$3 += 1024;
      var buffer$$18 = this.ensureBuffer(bufferLength$$3);
      this.bufferLength = bufferLength$$3
    };
    FakeStream$$1.prototype.getBytes = function FakeStream_getBytes(length$$65) {
      var end$$14;
      var pos$$16 = this.pos;
      if(length$$65) {
        this.ensureBuffer(pos$$16 + length$$65);
        end$$14 = pos$$16 + length$$65;
        for(;!this.eof && this.bufferLength < end$$14;) {
          this.readBlock()
        }
        var bufEnd$$1 = this.bufferLength;
        if(end$$14 > bufEnd$$1) {
          end$$14 = bufEnd$$1
        }
      }else {
        this.eof = true;
        end$$14 = this.bufferLength
      }
      this.pos = end$$14;
      return this.buffer.subarray(pos$$16, end$$14)
    };
    return FakeStream$$1
  }();
  var StreamsSequenceStream = function StreamsSequenceStreamClosure() {
    function StreamsSequenceStream$$1(streams$$1) {
      this.streams = streams$$1;
      DecodeStream.call(this)
    }
    StreamsSequenceStream$$1.prototype = Object.create(DecodeStream.prototype);
    StreamsSequenceStream$$1.prototype.readBlock = function streamSequenceStreamReadBlock() {
      var streams$$2 = this.streams;
      if(streams$$2.length == 0) {
        this.eof = true;
        return
      }
      var stream$$33 = streams$$2.shift();
      var chunk = stream$$33.getBytes();
      var bufferLength$$4 = this.bufferLength;
      var newLength$$1 = bufferLength$$4 + chunk.length;
      var buffer$$19 = this.ensureBuffer(newLength$$1);
      buffer$$19.set(chunk, bufferLength$$4);
      this.bufferLength = newLength$$1
    };
    return StreamsSequenceStream$$1
  }();
  var FlateStream = function FlateStreamClosure() {
    function FlateStream$$1(stream$$34) {
      var bytes$$13 = stream$$34.getBytes();
      var bytesPos = 0;
      this.dict = stream$$34.dict;
      var cmf = bytes$$13[bytesPos++];
      var flg = bytes$$13[bytesPos++];
      if(cmf == -1 || flg == -1) {
        error$$3("Invalid header in flate stream: " + cmf + ", " + flg)
      }
      if((cmf & 15) != 8) {
        error$$3("Unknown compression method in flate stream: " + cmf + ", " + flg)
      }
      if(((cmf << 8) + flg) % 31 != 0) {
        error$$3("Bad FCHECK in flate stream: " + cmf + ", " + flg)
      }
      if(flg & 32) {
        error$$3("FDICT bit set in flate stream: " + cmf + ", " + flg)
      }
      this.bytes = bytes$$13;
      this.bytesPos = bytesPos;
      this.codeSize = 0;
      this.codeBuf = 0;
      DecodeStream.call(this)
    }
    var codeLenCodeMap = new Uint32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    var lengthDecode = new Uint32Array([3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091, 131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211, 262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258, 258]);
    var distDecode = new Uint32Array([1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177, 262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801, 525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625, 798721, 868353, 876545]);
    var fixedLitCodeTab = [new Uint32Array([459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016, 459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048, 459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032, 459020, 524392, 524328, 59E4, 524296, 524424, 524360, 590064, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024, 459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056, 459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040, 459022, 524396, 
    524332, 590008, 524300, 524428, 524364, 590072, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020, 459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052, 459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036, 459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028, 459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060, 459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044, 459023, 
    524398, 524334, 590012, 524302, 524430, 524366, 590076, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018, 459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050, 459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034, 459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026, 459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058, 459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042, 
    459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022, 459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054, 459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038, 459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030, 459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062, 459015, 524383, 524319, 589982, 459031, 524415, 524351, 
    590046, 459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078, 459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017, 459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049, 459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033, 459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025, 459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057, 459014, 524380, 524316, 589977, 459030, 524412, 
    524348, 590041, 459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021, 459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053, 459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037, 459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029, 459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061, 459015, 524382, 524318, 589981, 459031, 
    524414, 524350, 590045, 459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019, 459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051, 459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035, 459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027, 459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059, 459014, 524381, 524317, 589979, 
    459030, 524413, 524349, 590043, 459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023, 459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055, 459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039, 459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031, 459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063, 459015, 524383, 524319, 
    589983, 459031, 524415, 524351, 590047, 459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079]), 9];
    var fixedDistCodeTab = [new Uint32Array([327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708, 327682, 327698, 327690, 327706, 327686, 327702, 327694, 0, 327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709, 327683, 327699, 327691, 327707, 327687, 327703, 327695, 0]), 5];
    FlateStream$$1.prototype = Object.create(DecodeStream.prototype);
    FlateStream$$1.prototype.getBits = function FlateStream_getBits(bits$$6) {
      var codeSize$$1 = this.codeSize;
      var codeBuf$$1 = this.codeBuf;
      var bytes$$14 = this.bytes;
      var bytesPos$$1 = this.bytesPos;
      var b$$25;
      for(;codeSize$$1 < bits$$6;) {
        if(typeof(b$$25 = bytes$$14[bytesPos$$1++]) == "undefined") {
          error$$3("Bad encoding in flate stream")
        }
        codeBuf$$1 |= b$$25 << codeSize$$1;
        codeSize$$1 += 8
      }
      b$$25 = codeBuf$$1 & (1 << bits$$6) - 1;
      this.codeBuf = codeBuf$$1 >> bits$$6;
      this.codeSize = codeSize$$1 -= bits$$6;
      this.bytesPos = bytesPos$$1;
      return b$$25
    };
    FlateStream$$1.prototype.getCode = function FlateStream_getCode(table$$3) {
      var codes$$2 = table$$3[0];
      var maxLen = table$$3[1];
      var codeSize$$2 = this.codeSize;
      var codeBuf$$2 = this.codeBuf;
      var bytes$$15 = this.bytes;
      var bytesPos$$2 = this.bytesPos;
      for(;codeSize$$2 < maxLen;) {
        var b$$26;
        if(typeof(b$$26 = bytes$$15[bytesPos$$2++]) == "undefined") {
          error$$3("Bad encoding in flate stream")
        }
        codeBuf$$2 |= b$$26 << codeSize$$2;
        codeSize$$2 += 8
      }
      var code$$16 = codes$$2[codeBuf$$2 & (1 << maxLen) - 1];
      var codeLen = code$$16 >> 16;
      var codeVal = code$$16 & 65535;
      if(codeSize$$2 == 0 || codeSize$$2 < codeLen || codeLen == 0) {
        error$$3("Bad encoding in flate stream")
      }
      this.codeBuf = codeBuf$$2 >> codeLen;
      this.codeSize = codeSize$$2 - codeLen;
      this.bytesPos = bytesPos$$2;
      return codeVal
    };
    FlateStream$$1.prototype.generateHuffmanTable = function flateStreamGenerateHuffmanTable(lengths) {
      var n$$31 = lengths.length;
      var maxLen$$1 = 0;
      var i$$150 = 0;
      for(;i$$150 < n$$31;++i$$150) {
        if(lengths[i$$150] > maxLen$$1) {
          maxLen$$1 = lengths[i$$150]
        }
      }
      var size$$13 = 1 << maxLen$$1;
      var codes$$3 = new Uint32Array(size$$13);
      var len$$1 = 1;
      var code$$17 = 0;
      var skip = 2;
      for(;len$$1 <= maxLen$$1;++len$$1, code$$17 <<= 1, skip <<= 1) {
        var val = 0;
        for(;val < n$$31;++val) {
          if(lengths[val] == len$$1) {
            var code2 = 0;
            var t$$3 = code$$17;
            i$$150 = 0;
            for(;i$$150 < len$$1;++i$$150) {
              code2 = code2 << 1 | t$$3 & 1;
              t$$3 >>= 1
            }
            i$$150 = code2;
            for(;i$$150 < size$$13;i$$150 += skip) {
              codes$$3[i$$150] = len$$1 << 16 | val
            }
            ++code$$17
          }
        }
      }
      return[codes$$3, maxLen$$1]
    };
    FlateStream$$1.prototype.readBlock = function FlateStream_readBlock() {
      var hdr = this.getBits(3);
      if(hdr & 1) {
        this.eof = true
      }
      hdr >>= 1;
      if(hdr == 0) {
        var bytes$$16 = this.bytes;
        var bytesPos$$3 = this.bytesPos;
        var b$$27;
        if(typeof(b$$27 = bytes$$16[bytesPos$$3++]) == "undefined") {
          error$$3("Bad block header in flate stream")
        }
        var blockLen = b$$27;
        if(typeof(b$$27 = bytes$$16[bytesPos$$3++]) == "undefined") {
          error$$3("Bad block header in flate stream")
        }
        blockLen |= b$$27 << 8;
        if(typeof(b$$27 = bytes$$16[bytesPos$$3++]) == "undefined") {
          error$$3("Bad block header in flate stream")
        }
        var check = b$$27;
        if(typeof(b$$27 = bytes$$16[bytesPos$$3++]) == "undefined") {
          error$$3("Bad block header in flate stream")
        }
        check |= b$$27 << 8;
        if(check != (~blockLen & 65535)) {
          error$$3("Bad uncompressed block length in flate stream")
        }
        this.codeBuf = 0;
        this.codeSize = 0;
        var bufferLength$$5 = this.bufferLength;
        var buffer$$20 = this.ensureBuffer(bufferLength$$5 + blockLen);
        var end$$15 = bufferLength$$5 + blockLen;
        this.bufferLength = end$$15;
        var n$$32 = bufferLength$$5;
        for(;n$$32 < end$$15;++n$$32) {
          if(typeof(b$$27 = bytes$$16[bytesPos$$3++]) == "undefined") {
            this.eof = true;
            break
          }
          buffer$$20[n$$32] = b$$27
        }
        this.bytesPos = bytesPos$$3;
        return
      }
      var litCodeTable;
      var distCodeTable;
      if(hdr == 1) {
        litCodeTable = fixedLitCodeTab;
        distCodeTable = fixedDistCodeTab
      }else {
        if(hdr == 2) {
          var numLitCodes = this.getBits(5) + 257;
          var numDistCodes = this.getBits(5) + 1;
          var numCodeLenCodes = this.getBits(4) + 4;
          var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);
          var i$$151 = 0;
          for(;i$$151 < numCodeLenCodes;++i$$151) {
            codeLenCodeLengths[codeLenCodeMap[i$$151]] = this.getBits(3)
          }
          var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);
          var len$$2 = 0;
          i$$151 = 0;
          var codes$$4 = numLitCodes + numDistCodes;
          var codeLengths = new Uint8Array(codes$$4);
          for(;i$$151 < codes$$4;) {
            var code$$18 = this.getCode(codeLenCodeTab);
            if(code$$18 == 16) {
              var bitsLength = 2;
              var bitsOffset = 3;
              var what$$2 = len$$2
            }else {
              if(code$$18 == 17) {
                bitsLength = 3;
                bitsOffset = 3;
                what$$2 = len$$2 = 0
              }else {
                if(code$$18 == 18) {
                  bitsLength = 7;
                  bitsOffset = 11;
                  what$$2 = len$$2 = 0
                }else {
                  codeLengths[i$$151++] = len$$2 = code$$18;
                  continue
                }
              }
            }
            var repeatLength = this.getBits(bitsLength) + bitsOffset;
            for(;repeatLength-- > 0;) {
              codeLengths[i$$151++] = what$$2
            }
          }
          litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));
          distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes$$4))
        }else {
          error$$3("Unknown block type in flate stream")
        }
      }
      buffer$$20 = this.buffer;
      var limit$$2 = buffer$$20 ? buffer$$20.length : 0;
      var pos$$17 = this.bufferLength;
      for(;true;) {
        var code1 = this.getCode(litCodeTable);
        if(code1 < 256) {
          if(pos$$17 + 1 >= limit$$2) {
            buffer$$20 = this.ensureBuffer(pos$$17 + 1);
            limit$$2 = buffer$$20.length
          }
          buffer$$20[pos$$17++] = code1;
          continue
        }
        if(code1 == 256) {
          this.bufferLength = pos$$17;
          return
        }
        code1 -= 257;
        code1 = lengthDecode[code1];
        var code2$$1 = code1 >> 16;
        if(code2$$1 > 0) {
          code2$$1 = this.getBits(code2$$1)
        }
        len$$2 = (code1 & 65535) + code2$$1;
        code1 = this.getCode(distCodeTable);
        code1 = distDecode[code1];
        code2$$1 = code1 >> 16;
        if(code2$$1 > 0) {
          code2$$1 = this.getBits(code2$$1)
        }
        var dist = (code1 & 65535) + code2$$1;
        if(pos$$17 + len$$2 >= limit$$2) {
          buffer$$20 = this.ensureBuffer(pos$$17 + len$$2);
          limit$$2 = buffer$$20.length
        }
        var k$$11 = 0;
        for(;k$$11 < len$$2;++k$$11, ++pos$$17) {
          buffer$$20[pos$$17] = buffer$$20[pos$$17 - dist]
        }
      }
    };
    return FlateStream$$1
  }();
  var PredictorStream = function PredictorStreamClosure() {
    function PredictorStream$$1(stream$$35, params$$5) {
      var predictor = this.predictor = params$$5.get("Predictor") || 1;
      if(predictor <= 1) {
        return stream$$35
      }
      if(predictor !== 2 && (predictor < 10 || predictor > 15)) {
        error$$3("Unsupported predictor: " + predictor)
      }
      if(predictor === 2) {
        this.readBlock = this.readBlockTiff
      }else {
        this.readBlock = this.readBlockPng
      }
      this.stream = stream$$35;
      this.dict = stream$$35.dict;
      var colors = this.colors = params$$5.get("Colors") || 1;
      var bits$$7 = this.bits = params$$5.get("BitsPerComponent") || 8;
      var columns = this.columns = params$$5.get("Columns") || 1;
      this.pixBytes = colors * bits$$7 + 7 >> 3;
      this.rowBytes = columns * colors * bits$$7 + 7 >> 3;
      DecodeStream.call(this);
      return this
    }
    PredictorStream$$1.prototype = Object.create(DecodeStream.prototype);
    PredictorStream$$1.prototype.readBlockTiff = function predictorStreamReadBlockTiff() {
      var rowBytes$$2 = this.rowBytes;
      var bufferLength$$6 = this.bufferLength;
      var buffer$$21 = this.ensureBuffer(bufferLength$$6 + rowBytes$$2);
      var bits$$8 = this.bits;
      var colors$$1 = this.colors;
      var rawBytes = this.stream.getBytes(rowBytes$$2);
      var inbuf = 0;
      var outbuf = 0;
      var inbits = 0;
      var outbits = 0;
      var pos$$18 = bufferLength$$6;
      if(bits$$8 === 1) {
        var i$$152 = 0;
        for(;i$$152 < rowBytes$$2;++i$$152) {
          var c$$19 = rawBytes[i$$152];
          inbuf = inbuf << 8 | c$$19;
          buffer$$21[pos$$18++] = (c$$19 ^ inbuf >> colors$$1) & 255;
          inbuf &= 65535
        }
      }else {
        if(bits$$8 === 8) {
          i$$152 = 0;
          for(;i$$152 < colors$$1;++i$$152) {
            buffer$$21[pos$$18++] = rawBytes[i$$152]
          }
          for(;i$$152 < rowBytes$$2;++i$$152) {
            buffer$$21[pos$$18] = buffer$$21[pos$$18 - colors$$1] + rawBytes[i$$152];
            pos$$18++
          }
        }else {
          var compArray = new Uint8Array(colors$$1 + 1);
          var bitMask = (1 << bits$$8) - 1;
          var j$$50 = 0;
          var k$$12 = bufferLength$$6;
          var columns$$1 = this.columns;
          i$$152 = 0;
          for(;i$$152 < columns$$1;++i$$152) {
            var kk$$2 = 0;
            for(;kk$$2 < colors$$1;++kk$$2) {
              if(inbits < bits$$8) {
                inbuf = inbuf << 8 | rawBytes[j$$50++] & 255;
                inbits += 8
              }
              compArray[kk$$2] = compArray[kk$$2] + (inbuf >> inbits - bits$$8) & bitMask;
              inbits -= bits$$8;
              outbuf = outbuf << bits$$8 | compArray[kk$$2];
              outbits += bits$$8;
              if(outbits >= 8) {
                buffer$$21[k$$12++] = outbuf >> outbits - 8 & 255;
                outbits -= 8
              }
            }
          }
          if(outbits > 0) {
            buffer$$21[k$$12++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1)
          }
        }
      }
      this.bufferLength += rowBytes$$2
    };
    PredictorStream$$1.prototype.readBlockPng = function predictorStreamReadBlockPng() {
      var rowBytes$$3 = this.rowBytes;
      var pixBytes = this.pixBytes;
      var predictor$$1 = this.stream.getByte();
      var rawBytes$$1 = this.stream.getBytes(rowBytes$$3);
      var bufferLength$$7 = this.bufferLength;
      var buffer$$22 = this.ensureBuffer(bufferLength$$7 + rowBytes$$3);
      var prevRow = buffer$$22.subarray(bufferLength$$7 - rowBytes$$3, bufferLength$$7);
      if(prevRow.length == 0) {
        prevRow = new Uint8Array(rowBytes$$3)
      }
      var j$$51 = bufferLength$$7;
      switch(predictor$$1) {
        case 0:
          var i$$153 = 0;
          for(;i$$153 < rowBytes$$3;++i$$153) {
            buffer$$22[j$$51++] = rawBytes$$1[i$$153]
          }
          break;
        case 1:
          i$$153 = 0;
          for(;i$$153 < pixBytes;++i$$153) {
            buffer$$22[j$$51++] = rawBytes$$1[i$$153]
          }
          for(;i$$153 < rowBytes$$3;++i$$153) {
            buffer$$22[j$$51] = buffer$$22[j$$51 - pixBytes] + rawBytes$$1[i$$153] & 255;
            j$$51++
          }
          break;
        case 2:
          i$$153 = 0;
          for(;i$$153 < rowBytes$$3;++i$$153) {
            buffer$$22[j$$51++] = prevRow[i$$153] + rawBytes$$1[i$$153] & 255
          }
          break;
        case 3:
          i$$153 = 0;
          for(;i$$153 < pixBytes;++i$$153) {
            buffer$$22[j$$51++] = (prevRow[i$$153] >> 1) + rawBytes$$1[i$$153]
          }
          for(;i$$153 < rowBytes$$3;++i$$153) {
            buffer$$22[j$$51] = (prevRow[i$$153] + buffer$$22[j$$51 - pixBytes] >> 1) + rawBytes$$1[i$$153] & 255;
            j$$51++
          }
          break;
        case 4:
          i$$153 = 0;
          for(;i$$153 < pixBytes;++i$$153) {
            var up$$1 = prevRow[i$$153];
            var c$$20 = rawBytes$$1[i$$153];
            buffer$$22[j$$51++] = up$$1 + c$$20
          }
          for(;i$$153 < rowBytes$$3;++i$$153) {
            up$$1 = prevRow[i$$153];
            var upLeft = prevRow[i$$153 - pixBytes];
            var left$$3 = buffer$$22[j$$51 - pixBytes];
            var p$$3 = left$$3 + up$$1 - upLeft;
            var pa = p$$3 - left$$3;
            if(pa < 0) {
              pa = -pa
            }
            var pb = p$$3 - up$$1;
            if(pb < 0) {
              pb = -pb
            }
            var pc = p$$3 - upLeft;
            if(pc < 0) {
              pc = -pc
            }
            c$$20 = rawBytes$$1[i$$153];
            if(pa <= pb && pa <= pc) {
              buffer$$22[j$$51++] = left$$3 + c$$20
            }else {
              if(pb <= pc) {
                buffer$$22[j$$51++] = up$$1 + c$$20
              }else {
                buffer$$22[j$$51++] = upLeft + c$$20
              }
            }
          }
          break;
        default:
          error$$3("Unsupported predictor: " + predictor$$1)
      }
      this.bufferLength += rowBytes$$3
    };
    return PredictorStream$$1
  }();
  var JpegStream = function JpegStreamClosure() {
    function JpegStream$$1(bytes$$19, dict$$33, xref$$27) {
      this.dict = dict$$33;
      this.isAdobeImage = false;
      this.colorTransform = dict$$33.get("ColorTransform") || -1;
      var JSCompiler_inline_result$$9;
      JSCompiler_inline_label_isAdobeImage_123: {
        var bytes$$inline_120 = bytes$$19;
        var maxBytesScanned$$inline_121 = Math.max(bytes$$inline_120.length - 16, 1024);
        var i$$inline_122 = 0;
        for(;i$$inline_122 < maxBytesScanned$$inline_121;++i$$inline_122) {
          if(bytes$$inline_120[i$$inline_122] == 255 && bytes$$inline_120[i$$inline_122 + 1] == 238 && bytes$$inline_120[i$$inline_122 + 2] == 0 && bytes$$inline_120[i$$inline_122 + 3] == 14 && bytes$$inline_120[i$$inline_122 + 4] == 65 && bytes$$inline_120[i$$inline_122 + 5] == 100 && bytes$$inline_120[i$$inline_122 + 6] == 111 && bytes$$inline_120[i$$inline_122 + 7] == 98 && bytes$$inline_120[i$$inline_122 + 8] == 101 && bytes$$inline_120[i$$inline_122 + 9] == 0) {
            JSCompiler_inline_result$$9 = true;
            break JSCompiler_inline_label_isAdobeImage_123
          }
          if(bytes$$inline_120[i$$inline_122] == 255 && bytes$$inline_120[i$$inline_122 + 1] == 192) {
            break
          }
        }
        JSCompiler_inline_result$$9 = false
      }
      if(JSCompiler_inline_result$$9) {
        this.isAdobeImage = true;
        var bytes$$inline_124 = bytes$$19;
        var embedMarker$$inline_125 = new Uint8Array([255, 236, 0, 8, 69, 77, 66, 69, 68, 0]);
        var newBytes$$inline_126 = new Uint8Array(bytes$$inline_124.length + embedMarker$$inline_125.length);
        newBytes$$inline_126.set(bytes$$inline_124, embedMarker$$inline_125.length);
        newBytes$$inline_126[0] = bytes$$inline_124[0];
        newBytes$$inline_126[1] = bytes$$inline_124[1];
        newBytes$$inline_126.set(embedMarker$$inline_125, 2);
        bytes$$19 = newBytes$$inline_126
      }
      this.bytes = bytes$$19;
      DecodeStream.call(this)
    }
    JpegStream$$1.prototype = Object.create(DecodeStream.prototype);
    JpegStream$$1.prototype.ensureBuffer = function JpegStream_ensureBuffer(req) {
      if(this.bufferLength) {
        return
      }
      try {
        var jpegImage = new JpegImage;
        if(this.colorTransform != -1) {
          jpegImage.colorTransform = this.colorTransform
        }
        jpegImage.parse(this.bytes);
        var width$$30 = jpegImage.width;
        var height$$22 = jpegImage.height;
        var data$$84 = jpegImage.getData(width$$30, height$$22);
        this.buffer = data$$84;
        this.bufferLength = data$$84.length
      }catch(e$$25) {
        error$$3("JPEG error: " + e$$25)
      }
    };
    JpegStream$$1.prototype.getIR = function JpegStream_getIR() {
      return bytesToString(this.bytes)
    };
    JpegStream$$1.prototype.getChar = function JpegStream_getChar() {
      error$$3("internal error: getChar is not valid on JpegStream")
    };
    JpegStream$$1.prototype.isNativelySupported = function JpegStream_isNativelySupported(xref$$28, res$$8) {
      var cs$$8 = ColorSpace.parse(this.dict.get("ColorSpace"), xref$$28, res$$8);
      if(cs$$8.name === "DeviceGray" || cs$$8.name === "DeviceRGB") {
        return true
      }
      if(cs$$8.name === "DeviceCMYK" && !this.isAdobeImage && this.colorTransform < 1) {
        return true
      }
      return false
    };
    JpegStream$$1.prototype.isNativelyDecodable = function JpegStream_isNativelyDecodable(xref$$29, res$$9) {
      var cs$$9 = ColorSpace.parse(this.dict.get("ColorSpace"), xref$$29, res$$9);
      var numComps$$10 = cs$$9.numComps;
      if(numComps$$10 == 1 || numComps$$10 == 3) {
        return true
      }
      return false
    };
    return JpegStream$$1
  }();
  var JpxStream = function JpxStreamClosure() {
    function JpxStream$$1(bytes$$20, dict$$34) {
      this.dict = dict$$34;
      this.bytes = bytes$$20;
      DecodeStream.call(this)
    }
    JpxStream$$1.prototype = Object.create(DecodeStream.prototype);
    JpxStream$$1.prototype.ensureBuffer = function JpxStream_ensureBuffer(req$$1) {
      if(this.bufferLength) {
        return
      }
      var jpxImage = new JpxImage;
      jpxImage.parse(this.bytes);
      var width$$31 = jpxImage.width;
      var height$$23 = jpxImage.height;
      var componentsCount = jpxImage.componentsCount;
      if(componentsCount != 1 && componentsCount != 3 && componentsCount != 4) {
        error$$3("JPX with " + componentsCount + " components is not supported")
      }
      var data$$85 = new Uint8Array(width$$31 * height$$23 * componentsCount);
      var k$$13 = 0;
      var kk$$3 = jpxImage.tiles.length;
      for(;k$$13 < kk$$3;k$$13++) {
        var tileCompoments = jpxImage.tiles[k$$13];
        var tileWidth = tileCompoments[0].width;
        var tileHeight = tileCompoments[0].height;
        var tileLeft = tileCompoments[0].left;
        var tileTop = tileCompoments[0].top;
        var dataPosition;
        var sourcePosition;
        var data0;
        var data1;
        var data2;
        var data3;
        var rowFeed;
        switch(componentsCount) {
          case 1:
            data0 = tileCompoments[0].items;
            dataPosition = width$$31 * tileTop + tileLeft;
            rowFeed = width$$31 - tileWidth;
            sourcePosition = 0;
            var j$$52 = 0;
            for(;j$$52 < tileHeight;j$$52++) {
              var i$$155 = 0;
              for(;i$$155 < tileWidth;i$$155++) {
                data$$85[dataPosition++] = data0[sourcePosition++]
              }
              dataPosition += rowFeed
            }
            break;
          case 3:
            data0 = tileCompoments[0].items;
            data1 = tileCompoments[1].items;
            data2 = tileCompoments[2].items;
            dataPosition = (width$$31 * tileTop + tileLeft) * 3;
            rowFeed = (width$$31 - tileWidth) * 3;
            sourcePosition = 0;
            j$$52 = 0;
            for(;j$$52 < tileHeight;j$$52++) {
              i$$155 = 0;
              for(;i$$155 < tileWidth;i$$155++) {
                data$$85[dataPosition++] = data0[sourcePosition];
                data$$85[dataPosition++] = data1[sourcePosition];
                data$$85[dataPosition++] = data2[sourcePosition];
                sourcePosition++
              }
              dataPosition += rowFeed
            }
            break;
          case 4:
            data0 = tileCompoments[0].items;
            data1 = tileCompoments[1].items;
            data2 = tileCompoments[2].items;
            data3 = tileCompoments[3].items;
            dataPosition = (width$$31 * tileTop + tileLeft) * 4;
            rowFeed = (width$$31 - tileWidth) * 4;
            sourcePosition = 0;
            j$$52 = 0;
            for(;j$$52 < tileHeight;j$$52++) {
              i$$155 = 0;
              for(;i$$155 < tileWidth;i$$155++) {
                data$$85[dataPosition++] = data0[sourcePosition];
                data$$85[dataPosition++] = data1[sourcePosition];
                data$$85[dataPosition++] = data2[sourcePosition];
                data$$85[dataPosition++] = data3[sourcePosition];
                sourcePosition++
              }
              dataPosition += rowFeed
            }
        }
      }
      this.buffer = data$$85;
      this.bufferLength = data$$85.length
    };
    JpxStream$$1.prototype.getChar = function JpxStream_getChar() {
      error$$3("internal error: getChar is not valid on JpxStream")
    };
    return JpxStream$$1
  }();
  var DecryptStream = function DecryptStreamClosure() {
    function DecryptStream$$1(str$$35, decrypt$$1) {
      this.str = str$$35;
      this.dict = str$$35.dict;
      this.decrypt = decrypt$$1;
      DecodeStream.call(this)
    }
    var chunkSize = 512;
    DecryptStream$$1.prototype = Object.create(DecodeStream.prototype);
    DecryptStream$$1.prototype.readBlock = function DecryptStream_readBlock() {
      var chunk$$1 = this.str.getBytes(chunkSize);
      if(!chunk$$1 || chunk$$1.length == 0) {
        this.eof = true;
        return
      }
      var decrypt$$2 = this.decrypt;
      chunk$$1 = decrypt$$2(chunk$$1);
      var bufferLength$$8 = this.bufferLength;
      var i$$156;
      var n$$33 = chunk$$1.length;
      var buffer$$23 = this.ensureBuffer(bufferLength$$8 + n$$33);
      i$$156 = 0;
      for(;i$$156 < n$$33;i$$156++) {
        buffer$$23[bufferLength$$8++] = chunk$$1[i$$156]
      }
      this.bufferLength = bufferLength$$8
    };
    return DecryptStream$$1
  }();
  var Ascii85Stream = function Ascii85StreamClosure() {
    function Ascii85Stream$$1(str$$36) {
      this.str = str$$36;
      this.dict = str$$36.dict;
      this.input = new Uint8Array(5);
      DecodeStream.call(this)
    }
    Ascii85Stream$$1.prototype = Object.create(DecodeStream.prototype);
    Ascii85Stream$$1.prototype.readBlock = function Ascii85Stream_readBlock() {
      var tildaCode = "~".charCodeAt(0);
      var zCode = "z".charCodeAt(0);
      var str$$37 = this.str;
      var c$$21 = str$$37.getByte();
      for(;Lexer.isSpace(String.fromCharCode(c$$21));) {
        c$$21 = str$$37.getByte()
      }
      if(!c$$21 || c$$21 === tildaCode) {
        this.eof = true;
        return
      }
      var bufferLength$$9 = this.bufferLength;
      var buffer$$24;
      if(c$$21 == zCode) {
        buffer$$24 = this.ensureBuffer(bufferLength$$9 + 4);
        var i$$157 = 0;
        for(;i$$157 < 4;++i$$157) {
          buffer$$24[bufferLength$$9 + i$$157] = 0
        }
        this.bufferLength += 4
      }else {
        var input$$7 = this.input;
        input$$7[0] = c$$21;
        i$$157 = 1;
        for(;i$$157 < 5;++i$$157) {
          c$$21 = str$$37.getByte();
          for(;Lexer.isSpace(String.fromCharCode(c$$21));) {
            c$$21 = str$$37.getByte()
          }
          input$$7[i$$157] = c$$21;
          if(!c$$21 || c$$21 == tildaCode) {
            break
          }
        }
        buffer$$24 = this.ensureBuffer(bufferLength$$9 + i$$157 - 1);
        this.bufferLength += i$$157 - 1;
        if(i$$157 < 5) {
          for(;i$$157 < 5;++i$$157) {
            input$$7[i$$157] = 33 + 84
          }
          this.eof = true
        }
        var t$$4 = 0;
        i$$157 = 0;
        for(;i$$157 < 5;++i$$157) {
          t$$4 = t$$4 * 85 + (input$$7[i$$157] - 33)
        }
        i$$157 = 3;
        for(;i$$157 >= 0;--i$$157) {
          buffer$$24[bufferLength$$9 + i$$157] = t$$4 & 255;
          t$$4 >>= 8
        }
      }
    };
    return Ascii85Stream$$1
  }();
  var AsciiHexStream = function AsciiHexStreamClosure() {
    function AsciiHexStream$$1(str$$38) {
      this.str = str$$38;
      this.dict = str$$38.dict;
      DecodeStream.call(this)
    }
    var hexvalueMap = {9:-1, 32:-1, 48:0, 49:1, 50:2, 51:3, 52:4, 53:5, 54:6, 55:7, 56:8, 57:9, 65:10, 66:11, 67:12, 68:13, 69:14, 70:15, 97:10, 98:11, 99:12, 100:13, 101:14, 102:15};
    AsciiHexStream$$1.prototype = Object.create(DecodeStream.prototype);
    AsciiHexStream$$1.prototype.readBlock = function AsciiHexStream_readBlock() {
      var gtCode = ">".charCodeAt(0);
      var bytes$$21 = this.str.getBytes();
      var c$$22;
      var n$$34;
      var decodeLength;
      var buffer$$25;
      var bufferLength$$10;
      var i$$158;
      var length$$66;
      decodeLength = bytes$$21.length + 1 >> 1;
      buffer$$25 = this.ensureBuffer(this.bufferLength + decodeLength);
      bufferLength$$10 = this.bufferLength;
      i$$158 = 0, length$$66 = bytes$$21.length;
      for(;i$$158 < length$$66;i$$158++) {
        c$$22 = hexvalueMap[bytes$$21[i$$158]];
        for(;c$$22 == -1 && i$$158 + 1 < length$$66;) {
          c$$22 = hexvalueMap[bytes$$21[++i$$158]]
        }
        if(i$$158 + 1 < length$$66 && bytes$$21[i$$158 + 1] !== gtCode) {
          n$$34 = hexvalueMap[bytes$$21[++i$$158]];
          buffer$$25[bufferLength$$10++] = c$$22 * 16 + n$$34
        }else {
          if(bytes$$21[i$$158] !== gtCode) {
            buffer$$25[bufferLength$$10++] = c$$22 * 16
          }
        }
      }
      this.bufferLength = bufferLength$$10;
      this.eof = true
    };
    return AsciiHexStream$$1
  }();
  var RunLengthStream = function RunLengthStreamClosure() {
    function RunLengthStream$$1(str$$39) {
      this.str = str$$39;
      this.dict = str$$39.dict;
      DecodeStream.call(this)
    }
    RunLengthStream$$1.prototype = Object.create(DecodeStream.prototype);
    RunLengthStream$$1.prototype.readBlock = function RunLengthStream_readBlock() {
      var repeatHeader = this.str.getBytes(2);
      if(!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] == 128) {
        this.eof = true;
        return
      }
      var bufferLength$$11 = this.bufferLength;
      var n$$35 = repeatHeader[0];
      if(n$$35 < 128) {
        var buffer$$26 = this.ensureBuffer(bufferLength$$11 + n$$35 + 1);
        buffer$$26[bufferLength$$11++] = repeatHeader[1];
        if(n$$35 > 0) {
          var source$$3 = this.str.getBytes(n$$35);
          buffer$$26.set(source$$3, bufferLength$$11);
          bufferLength$$11 += n$$35
        }
      }else {
        n$$35 = 257 - n$$35;
        var b$$28 = repeatHeader[1];
        buffer$$26 = this.ensureBuffer(bufferLength$$11 + n$$35 + 1);
        var i$$159 = 0;
        for(;i$$159 < n$$35;i$$159++) {
          buffer$$26[bufferLength$$11++] = b$$28
        }
      }
      this.bufferLength = bufferLength$$11
    };
    return RunLengthStream$$1
  }();
  var CCITTFaxStream = function CCITTFaxStreamClosure() {
    function CCITTFaxStream$$1(str$$40, params$$6) {
      this.str = str$$40;
      this.dict = str$$40.dict;
      params$$6 = params$$6 || new Dict;
      this.encoding = params$$6.get("K") || 0;
      this.eoline = params$$6.get("EndOfLine") || false;
      this.byteAlign = params$$6.get("EncodedByteAlign") || false;
      this.columns = params$$6.get("Columns") || 1728;
      this.rows = params$$6.get("Rows") || 0;
      var eoblock = params$$6.get("EndOfBlock");
      if(eoblock == null) {
        eoblock = true
      }
      this.eoblock = eoblock;
      this.black = params$$6.get("BlackIs1") || false;
      this.codingLine = new Uint32Array(this.columns + 1);
      this.refLine = new Uint32Array(this.columns + 2);
      this.codingLine[0] = this.columns;
      this.codingPos = 0;
      this.row = 0;
      this.nextLine2D = this.encoding < 0;
      this.inputBits = 0;
      this.inputBuf = 0;
      this.outputBits = 0;
      this.buf = EOF;
      var code1$$1;
      for(;(code1$$1 = this.lookBits(12)) == 0;) {
        this.eatBits(1)
      }
      if(code1$$1 == 1) {
        this.eatBits(12)
      }
      if(this.encoding > 0) {
        this.nextLine2D = !this.lookBits(1);
        this.eatBits(1)
      }
      DecodeStream.call(this)
    }
    var ccittEOL = -2;
    var twoDimPass = 0;
    var twoDimHoriz = 1;
    var twoDimVert0 = 2;
    var twoDimVertR1 = 3;
    var twoDimVertL1 = 4;
    var twoDimVertR2 = 5;
    var twoDimVertL2 = 6;
    var twoDimVertR3 = 7;
    var twoDimVertL3 = 8;
    var twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], 
    [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], 
    [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, 
    twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], 
    [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];
    var whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];
    var whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], 
    [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 
    320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 
    24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 
    1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 
    3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], 
    [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 
    5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], 
    [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];
    var blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 
    2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], 
    [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];
    var blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 
    14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], 
    [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], 
    [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];
    var blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], 
    [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];
    CCITTFaxStream$$1.prototype = Object.create(DecodeStream.prototype);
    CCITTFaxStream$$1.prototype.readBlock = function CCITTFaxStream_readBlock() {
      for(;!this.eof;) {
        var c$$23 = this.lookChar();
        this.buf = EOF;
        this.ensureBuffer(this.bufferLength + 1);
        this.buffer[this.bufferLength++] = c$$23
      }
    };
    CCITTFaxStream$$1.prototype.addPixels = function ccittFaxStreamAddPixels(a1, blackPixels) {
      var codingLine = this.codingLine;
      var codingPos = this.codingPos;
      if(a1 > codingLine[codingPos]) {
        if(a1 > this.columns) {
          warn("row is wrong length");
          this.err = true;
          a1 = this.columns
        }
        if(codingPos & 1 ^ blackPixels) {
          ++codingPos
        }
        codingLine[codingPos] = a1
      }
      this.codingPos = codingPos
    };
    CCITTFaxStream$$1.prototype.addPixelsNeg = function ccittFaxStreamAddPixelsNeg(a1$$1, blackPixels$$1) {
      var codingLine$$1 = this.codingLine;
      var codingPos$$1 = this.codingPos;
      if(a1$$1 > codingLine$$1[codingPos$$1]) {
        if(a1$$1 > this.columns) {
          warn("row is wrong length");
          this.err = true;
          a1$$1 = this.columns
        }
        if(codingPos$$1 & 1 ^ blackPixels$$1) {
          ++codingPos$$1
        }
        codingLine$$1[codingPos$$1] = a1$$1
      }else {
        if(a1$$1 < codingLine$$1[codingPos$$1]) {
          if(a1$$1 < 0) {
            warn("invalid code");
            this.err = true;
            a1$$1 = 0
          }
          for(;codingPos$$1 > 0 && a1$$1 < codingLine$$1[codingPos$$1 - 1];) {
            --codingPos$$1
          }
          codingLine$$1[codingPos$$1] = a1$$1
        }
      }
      this.codingPos = codingPos$$1
    };
    CCITTFaxStream$$1.prototype.lookChar = function CCITTFaxStream_lookChar() {
      if(this.buf != EOF) {
        return this.buf
      }
      var refLine = this.refLine;
      var codingLine$$2 = this.codingLine;
      var columns$$2 = this.columns;
      var refPos;
      var blackPixels$$2;
      var bits$$9;
      if(this.outputBits == 0) {
        if(this.eof) {
          return null
        }
        this.err = false;
        var code1$$2;
        var code2$$2;
        var code3;
        if(this.nextLine2D) {
          var i$$160 = 0;
          for(;codingLine$$2[i$$160] < columns$$2;++i$$160) {
            refLine[i$$160] = codingLine$$2[i$$160]
          }
          refLine[i$$160++] = columns$$2;
          refLine[i$$160] = columns$$2;
          codingLine$$2[0] = 0;
          this.codingPos = 0;
          refPos = 0;
          blackPixels$$2 = 0;
          for(;codingLine$$2[this.codingPos] < columns$$2;) {
            code1$$2 = this.getTwoDimCode();
            switch(code1$$2) {
              case twoDimPass:
                this.addPixels(refLine[refPos + 1], blackPixels$$2);
                if(refLine[refPos + 1] < columns$$2) {
                  refPos += 2
                }
                break;
              case twoDimHoriz:
                code1$$2 = code2$$2 = 0;
                if(blackPixels$$2) {
                  do {
                    code1$$2 += code3 = this.getBlackCode()
                  }while(code3 >= 64);
                  do {
                    code2$$2 += code3 = this.getWhiteCode()
                  }while(code3 >= 64)
                }else {
                  do {
                    code1$$2 += code3 = this.getWhiteCode()
                  }while(code3 >= 64);
                  do {
                    code2$$2 += code3 = this.getBlackCode()
                  }while(code3 >= 64)
                }
                this.addPixels(codingLine$$2[this.codingPos] + code1$$2, blackPixels$$2);
                if(codingLine$$2[this.codingPos] < columns$$2) {
                  this.addPixels(codingLine$$2[this.codingPos] + code2$$2, blackPixels$$2 ^ 1)
                }
                for(;refLine[refPos] <= codingLine$$2[this.codingPos] && refLine[refPos] < columns$$2;) {
                  refPos += 2
                }
                break;
              case twoDimVertR3:
                this.addPixels(refLine[refPos] + 3, blackPixels$$2);
                blackPixels$$2 ^= 1;
                if(codingLine$$2[this.codingPos] < columns$$2) {
                  ++refPos;
                  for(;refLine[refPos] <= codingLine$$2[this.codingPos] && refLine[refPos] < columns$$2;) {
                    refPos += 2
                  }
                }
                break;
              case twoDimVertR2:
                this.addPixels(refLine[refPos] + 2, blackPixels$$2);
                blackPixels$$2 ^= 1;
                if(codingLine$$2[this.codingPos] < columns$$2) {
                  ++refPos;
                  for(;refLine[refPos] <= codingLine$$2[this.codingPos] && refLine[refPos] < columns$$2;) {
                    refPos += 2
                  }
                }
                break;
              case twoDimVertR1:
                this.addPixels(refLine[refPos] + 1, blackPixels$$2);
                blackPixels$$2 ^= 1;
                if(codingLine$$2[this.codingPos] < columns$$2) {
                  ++refPos;
                  for(;refLine[refPos] <= codingLine$$2[this.codingPos] && refLine[refPos] < columns$$2;) {
                    refPos += 2
                  }
                }
                break;
              case twoDimVert0:
                this.addPixels(refLine[refPos], blackPixels$$2);
                blackPixels$$2 ^= 1;
                if(codingLine$$2[this.codingPos] < columns$$2) {
                  ++refPos;
                  for(;refLine[refPos] <= codingLine$$2[this.codingPos] && refLine[refPos] < columns$$2;) {
                    refPos += 2
                  }
                }
                break;
              case twoDimVertL3:
                this.addPixelsNeg(refLine[refPos] - 3, blackPixels$$2);
                blackPixels$$2 ^= 1;
                if(codingLine$$2[this.codingPos] < columns$$2) {
                  if(refPos > 0) {
                    --refPos
                  }else {
                    ++refPos
                  }
                  for(;refLine[refPos] <= codingLine$$2[this.codingPos] && refLine[refPos] < columns$$2;) {
                    refPos += 2
                  }
                }
                break;
              case twoDimVertL2:
                this.addPixelsNeg(refLine[refPos] - 2, blackPixels$$2);
                blackPixels$$2 ^= 1;
                if(codingLine$$2[this.codingPos] < columns$$2) {
                  if(refPos > 0) {
                    --refPos
                  }else {
                    ++refPos
                  }
                  for(;refLine[refPos] <= codingLine$$2[this.codingPos] && refLine[refPos] < columns$$2;) {
                    refPos += 2
                  }
                }
                break;
              case twoDimVertL1:
                this.addPixelsNeg(refLine[refPos] - 1, blackPixels$$2);
                blackPixels$$2 ^= 1;
                if(codingLine$$2[this.codingPos] < columns$$2) {
                  if(refPos > 0) {
                    --refPos
                  }else {
                    ++refPos
                  }
                  for(;refLine[refPos] <= codingLine$$2[this.codingPos] && refLine[refPos] < columns$$2;) {
                    refPos += 2
                  }
                }
                break;
              case EOF:
                this.addPixels(columns$$2, 0);
                this.eof = true;
                break;
              default:
                warn("bad 2d code");
                this.addPixels(columns$$2, 0);
                this.err = true
            }
          }
        }else {
          codingLine$$2[0] = 0;
          this.codingPos = 0;
          blackPixels$$2 = 0;
          for(;codingLine$$2[this.codingPos] < columns$$2;) {
            code1$$2 = 0;
            if(blackPixels$$2) {
              do {
                code1$$2 += code3 = this.getBlackCode()
              }while(code3 >= 64)
            }else {
              do {
                code1$$2 += code3 = this.getWhiteCode()
              }while(code3 >= 64)
            }
            this.addPixels(codingLine$$2[this.codingPos] + code1$$2, blackPixels$$2);
            blackPixels$$2 ^= 1
          }
        }
        if(this.byteAlign) {
          this.inputBits &= ~7
        }
        var gotEOL = false;
        if(!this.eoblock && this.row == this.rows - 1) {
          this.eof = true
        }else {
          code1$$2 = this.lookBits(12);
          for(;code1$$2 == 0;) {
            this.eatBits(1);
            code1$$2 = this.lookBits(12)
          }
          if(code1$$2 == 1) {
            this.eatBits(12);
            gotEOL = true
          }else {
            if(code1$$2 == EOF) {
              this.eof = true
            }
          }
        }
        if(!this.eof && this.encoding > 0) {
          this.nextLine2D = !this.lookBits(1);
          this.eatBits(1)
        }
        if(this.eoblock && gotEOL) {
          code1$$2 = this.lookBits(12);
          if(code1$$2 == 1) {
            this.eatBits(12);
            if(this.encoding > 0) {
              this.lookBits(1);
              this.eatBits(1)
            }
            if(this.encoding >= 0) {
              i$$160 = 0;
              for(;i$$160 < 4;++i$$160) {
                code1$$2 = this.lookBits(12);
                if(code1$$2 != 1) {
                  warn("bad rtc code: " + code1$$2)
                }
                this.eatBits(12);
                if(this.encoding > 0) {
                  this.lookBits(1);
                  this.eatBits(1)
                }
              }
            }
            this.eof = true
          }
        }else {
          if(this.err && this.eoline) {
            for(;true;) {
              code1$$2 = this.lookBits(13);
              if(code1$$2 == EOF) {
                this.eof = true;
                return null
              }
              if(code1$$2 >> 1 == 1) {
                break
              }
              this.eatBits(1)
            }
            this.eatBits(12);
            if(this.encoding > 0) {
              this.eatBits(1);
              this.nextLine2D = !(code1$$2 & 1)
            }
          }
        }
        if(codingLine$$2[0] > 0) {
          this.outputBits = codingLine$$2[this.codingPos = 0]
        }else {
          this.outputBits = codingLine$$2[this.codingPos = 1]
        }
        this.row++
      }
      if(this.outputBits >= 8) {
        this.buf = this.codingPos & 1 ? 0 : 255;
        this.outputBits -= 8;
        if(this.outputBits == 0 && codingLine$$2[this.codingPos] < columns$$2) {
          this.codingPos++;
          this.outputBits = codingLine$$2[this.codingPos] - codingLine$$2[this.codingPos - 1]
        }
      }else {
        bits$$9 = 8;
        this.buf = 0;
        do {
          if(this.outputBits > bits$$9) {
            this.buf <<= bits$$9;
            if(!(this.codingPos & 1)) {
              this.buf |= 255 >> 8 - bits$$9
            }
            this.outputBits -= bits$$9;
            bits$$9 = 0
          }else {
            this.buf <<= this.outputBits;
            if(!(this.codingPos & 1)) {
              this.buf |= 255 >> 8 - this.outputBits
            }
            bits$$9 -= this.outputBits;
            this.outputBits = 0;
            if(codingLine$$2[this.codingPos] < columns$$2) {
              this.codingPos++;
              this.outputBits = codingLine$$2[this.codingPos] - codingLine$$2[this.codingPos - 1]
            }else {
              if(bits$$9 > 0) {
                this.buf <<= bits$$9;
                bits$$9 = 0
              }
            }
          }
        }while(bits$$9)
      }
      if(this.black) {
        this.buf ^= 255
      }
      return this.buf
    };
    CCITTFaxStream$$1.prototype.findTableCode = function ccittFaxStreamFindTableCode(start$$20, end$$16, table$$4, limit$$3) {
      var limitValue = limit$$3 || 0;
      var i$$161 = start$$20;
      for(;i$$161 <= end$$16;++i$$161) {
        var code$$19 = this.lookBits(i$$161);
        if(code$$19 == EOF) {
          return[true, 1, false]
        }
        if(i$$161 < end$$16) {
          code$$19 <<= end$$16 - i$$161
        }
        if(!limitValue || code$$19 >= limitValue) {
          var p$$4 = table$$4[code$$19 - limitValue];
          if(p$$4[0] == i$$161) {
            this.eatBits(i$$161);
            return[true, p$$4[1], true]
          }
        }
      }
      return[false, 0, false]
    };
    CCITTFaxStream$$1.prototype.getTwoDimCode = function ccittFaxStreamGetTwoDimCode() {
      var code$$20 = 0;
      var p$$5;
      if(this.eoblock) {
        code$$20 = this.lookBits(7);
        p$$5 = twoDimTable[code$$20];
        if(p$$5 && p$$5[0] > 0) {
          this.eatBits(p$$5[0]);
          return p$$5[1]
        }
      }else {
        var result$$9 = this.findTableCode(1, 7, twoDimTable);
        if(result$$9[0] && result$$9[2]) {
          return result$$9[1]
        }
      }
      warn("Bad two dim code");
      return EOF
    };
    CCITTFaxStream$$1.prototype.getWhiteCode = function ccittFaxStreamGetWhiteCode() {
      var code$$21 = 0;
      var p$$6;
      var n$$36;
      if(this.eoblock) {
        code$$21 = this.lookBits(12);
        if(code$$21 == EOF) {
          return 1
        }
        if(code$$21 >> 5 == 0) {
          p$$6 = whiteTable1[code$$21]
        }else {
          p$$6 = whiteTable2[code$$21 >> 3]
        }
        if(p$$6[0] > 0) {
          this.eatBits(p$$6[0]);
          return p$$6[1]
        }
      }else {
        var result$$10 = this.findTableCode(1, 9, whiteTable2);
        if(result$$10[0]) {
          return result$$10[1]
        }
        result$$10 = this.findTableCode(11, 12, whiteTable1);
        if(result$$10[0]) {
          return result$$10[1]
        }
      }
      warn("bad white code");
      this.eatBits(1);
      return 1
    };
    CCITTFaxStream$$1.prototype.getBlackCode = function ccittFaxStreamGetBlackCode() {
      var code$$22;
      var p$$7;
      if(this.eoblock) {
        code$$22 = this.lookBits(13);
        if(code$$22 == EOF) {
          return 1
        }
        if(code$$22 >> 7 == 0) {
          p$$7 = blackTable1[code$$22]
        }else {
          if(code$$22 >> 9 == 0 && code$$22 >> 7 != 0) {
            p$$7 = blackTable2[(code$$22 >> 1) - 64]
          }else {
            p$$7 = blackTable3[code$$22 >> 7]
          }
        }
        if(p$$7[0] > 0) {
          this.eatBits(p$$7[0]);
          return p$$7[1]
        }
      }else {
        var result$$11 = this.findTableCode(2, 6, blackTable3);
        if(result$$11[0]) {
          return result$$11[1]
        }
        result$$11 = this.findTableCode(7, 12, blackTable2, 64);
        if(result$$11[0]) {
          return result$$11[1]
        }
        result$$11 = this.findTableCode(10, 13, blackTable1);
        if(result$$11[0]) {
          return result$$11[1]
        }
      }
      warn("bad black code");
      this.eatBits(1);
      return 1
    };
    CCITTFaxStream$$1.prototype.lookBits = function CCITTFaxStream_lookBits(n$$37) {
      var c$$24;
      for(;this.inputBits < n$$37;) {
        if((c$$24 = this.str.getByte()) == null) {
          if(this.inputBits == 0) {
            return EOF
          }
          return this.inputBuf << n$$37 - this.inputBits & 65535 >> 16 - n$$37
        }
        this.inputBuf = (this.inputBuf << 8) + c$$24;
        this.inputBits += 8
      }
      return this.inputBuf >> this.inputBits - n$$37 & 65535 >> 16 - n$$37
    };
    CCITTFaxStream$$1.prototype.eatBits = function CCITTFaxStream_eatBits(n$$38) {
      if((this.inputBits -= n$$38) < 0) {
        this.inputBits = 0
      }
    };
    return CCITTFaxStream$$1
  }();
  var LZWStream = function LZWStreamClosure() {
    function LZWStream$$1(str$$41, earlyChange$$1) {
      this.str = str$$41;
      this.dict = str$$41.dict;
      this.cachedData = 0;
      this.bitsCached = 0;
      var maxLzwDictionarySize = 4096;
      var lzwState = {earlyChange:earlyChange$$1, codeLength:9, nextCode:258, dictionaryValues:new Uint8Array(maxLzwDictionarySize), dictionaryLengths:new Uint16Array(maxLzwDictionarySize), dictionaryPrevCodes:new Uint16Array(maxLzwDictionarySize), currentSequence:new Uint8Array(maxLzwDictionarySize), currentSequenceLength:0};
      var i$$162 = 0;
      for(;i$$162 < 256;++i$$162) {
        lzwState.dictionaryValues[i$$162] = i$$162;
        lzwState.dictionaryLengths[i$$162] = 1
      }
      this.lzwState = lzwState;
      DecodeStream.call(this)
    }
    LZWStream$$1.prototype = Object.create(DecodeStream.prototype);
    LZWStream$$1.prototype.readBits = function LZWStream_readBits(n$$39) {
      var bitsCached = this.bitsCached;
      var cachedData = this.cachedData;
      for(;bitsCached < n$$39;) {
        var c$$25 = this.str.getByte();
        if(c$$25 == null) {
          this.eof = true;
          return null
        }
        cachedData = cachedData << 8 | c$$25;
        bitsCached += 8
      }
      this.bitsCached = bitsCached -= n$$39;
      this.cachedData = cachedData;
      this.lastCode = null;
      return cachedData >>> bitsCached & (1 << n$$39) - 1
    };
    LZWStream$$1.prototype.readBlock = function LZWStream_readBlock() {
      var blockSize = 512;
      var estimatedDecodedSize = blockSize * 2;
      var decodedSizeDelta = blockSize;
      var i$$163;
      var j$$53;
      var q;
      var lzwState$$1 = this.lzwState;
      if(!lzwState$$1) {
        return
      }
      var earlyChange$$2 = lzwState$$1.earlyChange;
      var nextCode = lzwState$$1.nextCode;
      var dictionaryValues = lzwState$$1.dictionaryValues;
      var dictionaryLengths = lzwState$$1.dictionaryLengths;
      var dictionaryPrevCodes = lzwState$$1.dictionaryPrevCodes;
      var codeLength = lzwState$$1.codeLength;
      var prevCode = lzwState$$1.prevCode;
      var currentSequence = lzwState$$1.currentSequence;
      var currentSequenceLength = lzwState$$1.currentSequenceLength;
      var decodedLength = 0;
      var currentBufferLength = this.bufferLength;
      var buffer$$27 = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);
      i$$163 = 0;
      for(;i$$163 < blockSize;i$$163++) {
        var code$$23 = this.readBits(codeLength);
        var hasPrev = currentSequenceLength > 0;
        if(code$$23 < 256) {
          currentSequence[0] = code$$23;
          currentSequenceLength = 1
        }else {
          if(code$$23 >= 258) {
            if(code$$23 < nextCode) {
              currentSequenceLength = dictionaryLengths[code$$23];
              j$$53 = currentSequenceLength - 1, q = code$$23;
              for(;j$$53 >= 0;j$$53--) {
                currentSequence[j$$53] = dictionaryValues[q];
                q = dictionaryPrevCodes[q]
              }
            }else {
              currentSequence[currentSequenceLength++] = currentSequence[0]
            }
          }else {
            if(code$$23 == 256) {
              codeLength = 9;
              nextCode = 258;
              currentSequenceLength = 0;
              continue
            }else {
              this.eof = true;
              delete this.lzwState;
              break
            }
          }
        }
        if(hasPrev) {
          dictionaryPrevCodes[nextCode] = prevCode;
          dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;
          dictionaryValues[nextCode] = currentSequence[0];
          nextCode++;
          codeLength = nextCode + earlyChange$$2 & nextCode + earlyChange$$2 - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange$$2) / 0.6931471805599453 + 1, 12) | 0
        }
        prevCode = code$$23;
        decodedLength += currentSequenceLength;
        if(estimatedDecodedSize < decodedLength) {
          do {
            estimatedDecodedSize += decodedSizeDelta
          }while(estimatedDecodedSize < decodedLength);
          buffer$$27 = this.ensureBuffer(this.bufferLength + estimatedDecodedSize)
        }
        j$$53 = 0;
        for(;j$$53 < currentSequenceLength;j$$53++) {
          buffer$$27[currentBufferLength++] = currentSequence[j$$53]
        }
      }
      lzwState$$1.nextCode = nextCode;
      lzwState$$1.codeLength = codeLength;
      lzwState$$1.prevCode = prevCode;
      lzwState$$1.currentSequenceLength = currentSequenceLength;
      this.bufferLength = currentBufferLength
    };
    return LZWStream$$1
  }();
  MessageHandler.prototype = {on:function messageHandlerOn(actionName, handler$$9, scope) {
    var ah$$1 = this.actionHandler;
    if(ah$$1[actionName]) {
      error$$3('There is already an actionName called "' + actionName + '"')
    }
    ah$$1[actionName] = [handler$$9, scope]
  }, send:function messageHandlerSend(actionName$$1, data$$86, callback$$37) {
    var message$$12 = {action:actionName$$1, data:data$$86};
    if(callback$$37) {
      var callbackId$$1 = this.callbackIndex++;
      this.callbacks[callbackId$$1] = callback$$37;
      message$$12.callbackId = callbackId$$1
    }
    this.comObj.postMessage(message$$12)
  }};
  var WorkerMessageHandler = {setup:function wphSetup(handler$$10) {
    var pdfModel = null;
    handler$$10.on("test", function wphSetupTest(data$$87) {
      handler$$10.send("test", data$$87 instanceof Uint8Array)
    });
    handler$$10.on("GetDocRequest", function wphSetupDoc(data$$88) {
      pdfModel = new PDFDocument(new Stream(data$$88));
      var doc = {numPages:pdfModel.numPages, fingerprint:pdfModel.getFingerprint(), destinations:pdfModel.catalog.destinations, outline:pdfModel.catalog.documentOutline, info:pdfModel.getDocumentInfo(), metadata:pdfModel.catalog.metadata};
      handler$$10.send("GetDoc", {pdfInfo:doc})
    });
    handler$$10.on("GetPageRequest", function wphSetupGetPage(data$$89) {
      var pageNumber$$2 = data$$89.pageIndex + 1;
      var pdfPage = pdfModel.getPage(pageNumber$$2);
      var page$$4 = {pageIndex:data$$89.pageIndex, rotate:pdfPage.rotate, ref:pdfPage.ref, view:pdfPage.view};
      handler$$10.send("GetPage", {pageInfo:page$$4})
    });
    handler$$10.on("GetAnnotationsRequest", function wphSetupGetAnnotations(data$$90) {
      var pdfPage$$1 = pdfModel.getPage(data$$90.pageIndex + 1);
      handler$$10.send("GetAnnotations", {pageIndex:data$$90.pageIndex, annotations:pdfPage$$1.getAnnotations()})
    });
    handler$$10.on("RenderPageRequest", function wphSetupRenderPage(data$$91) {
      var pageNum = data$$91.pageIndex + 1;
      var gfx$$2 = new CanvasGraphics(null);
      var start$$21 = Date.now();
      var dependency$$3 = [];
      var operatorList$$7 = null;
      try {
        var page$$5 = pdfModel.getPage(pageNum);
        operatorList$$7 = page$$5.getOperatorList(handler$$10, dependency$$3)
      }catch(e$$26) {
        var minimumStackMessage = "worker.js: while trying to getPage() and getOperatorList()";
        if(typeof e$$26 === "string") {
          e$$26 = {message:e$$26, stack:minimumStackMessage}
        }else {
          if(typeof e$$26 === "object") {
            e$$26 = {message:e$$26.message || e$$26.toString(), stack:e$$26.stack || minimumStackMessage}
          }else {
            e$$26 = {message:"Unknown exception type: " + typeof e$$26, stack:minimumStackMessage}
          }
        }
        handler$$10.send("PageError", {pageNum:pageNum, error:e$$26});
        return
      }
      var fonts$$4 = {};
      var i$$164 = 0;
      var ii$$66 = dependency$$3.length;
      for(;i$$164 < ii$$66;i$$164++) {
        var dep$$1 = dependency$$3[i$$164];
        if(dep$$1.indexOf("font_") == 0) {
          fonts$$4[dep$$1] = true
        }
      }
      handler$$10.send("RenderPage", {pageIndex:data$$91.pageIndex, operatorList:operatorList$$7, depFonts:Object.keys(fonts$$4)})
    }, this)
  }};
  var consoleTimer = {};
  var workerConsole = {log:function log$$4() {
    var args$$7 = Array.prototype.slice.call(arguments);
    postMessage({action:"console_log", data:args$$7})
  }, error:function error$$6() {
    var args$$8 = Array.prototype.slice.call(arguments);
    postMessage({action:"console_error", data:args$$8});
    throw"pdf.js execution error";
  }, time:function time$$1(name$$68) {
    consoleTimer[name$$68] = Date.now()
  }, timeEnd:function timeEnd(name$$69) {
    var time$$2 = consoleTimer[name$$69];
    if(time$$2 == null) {
      error$$3("Unkown timer name " + name$$69)
    }
    this.log("Timer:", name$$69, Date.now() - time$$2)
  }};
  if(typeof PdfJS_window.window === "undefined") {
    globalScope.console = workerConsole;
    var handler$$3 = new MessageHandler("worker_processor", this);
    WorkerMessageHandler.setup(handler$$3)
  }
  var JpegImage = function jpegImage$$1() {
    function constructor() {
    }
    function buildHuffmanTable(codeLengths$$1, values$$6) {
      var k$$14 = 0;
      var code$$24 = [];
      var i$$165;
      var j$$54;
      var length$$67 = 16;
      for(;length$$67 > 0 && !codeLengths$$1[length$$67 - 1];) {
        length$$67--
      }
      code$$24.push({children:[], index:0});
      var p$$8 = code$$24[0];
      var q$$1;
      i$$165 = 0;
      for(;i$$165 < length$$67;i$$165++) {
        j$$54 = 0;
        for(;j$$54 < codeLengths$$1[i$$165];j$$54++) {
          p$$8 = code$$24.pop();
          p$$8.children[p$$8.index] = values$$6[k$$14];
          for(;p$$8.index > 0;) {
            p$$8 = code$$24.pop()
          }
          p$$8.index++;
          code$$24.push(p$$8);
          for(;code$$24.length <= i$$165;) {
            code$$24.push(q$$1 = {children:[], index:0});
            p$$8.children[p$$8.index] = q$$1.children;
            p$$8 = q$$1
          }
          k$$14++
        }
        if(i$$165 + 1 < length$$67) {
          code$$24.push(q$$1 = {children:[], index:0});
          p$$8.children[p$$8.index] = q$$1.children;
          p$$8 = q$$1
        }
      }
      return code$$24[0].children
    }
    function decodeScan(data$$92, offset$$32, frame$$1, components$$2, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
      function readBit() {
        if(bitsCount > 0) {
          bitsCount--;
          return bitsData >> bitsCount & 1
        }
        bitsData = data$$92[offset$$32++];
        if(bitsData == 255) {
          var nextByte = data$$92[offset$$32++];
          if(nextByte) {
            throw"unexpected marker: " + (bitsData << 8 | nextByte).toString(16);
          }
        }
        bitsCount = 7;
        return bitsData >>> 7
      }
      function decodeHuffman(tree) {
        var node$$2 = tree;
        var bit;
        for(;(bit = readBit()) !== null;) {
          node$$2 = node$$2[bit];
          if(typeof node$$2 === "number") {
            return node$$2
          }
          if(typeof node$$2 !== "object") {
            throw"invalid huffman sequence";
          }
        }
        return null
      }
      function receive(length$$68) {
        var n$$41 = 0;
        for(;length$$68 > 0;) {
          var bit$$1 = readBit();
          if(bit$$1 === null) {
            return
          }
          n$$41 = n$$41 << 1 | bit$$1;
          length$$68--
        }
        return n$$41
      }
      function receiveAndExtend(length$$69) {
        var n$$42 = receive(length$$69);
        if(n$$42 >= 1 << length$$69 - 1) {
          return n$$42
        }
        return n$$42 + (-1 << length$$69) + 1
      }
      function decodeBaseline(component$$1, zz) {
        var t$$5 = decodeHuffman(component$$1.huffmanTableDC);
        var diff$$3 = t$$5 === 0 ? 0 : receiveAndExtend(t$$5);
        zz[0] = component$$1.pred += diff$$3;
        var k$$16 = 1;
        for(;k$$16 < 64;) {
          var rs = decodeHuffman(component$$1.huffmanTableAC);
          var s$$13 = rs & 15;
          var r$$9 = rs >> 4;
          if(s$$13 === 0) {
            if(r$$9 < 15) {
              break
            }
            k$$16 += 16;
            continue
          }
          k$$16 += r$$9;
          var z$$3 = dctZigZag[k$$16];
          zz[z$$3] = receiveAndExtend(s$$13);
          k$$16++
        }
      }
      function decodeDCFirst(component$$2, zz$$1) {
        var t$$6 = decodeHuffman(component$$2.huffmanTableDC);
        var diff$$4 = t$$6 === 0 ? 0 : receiveAndExtend(t$$6) << successive;
        zz$$1[0] = component$$2.pred += diff$$4
      }
      function decodeDCSuccessive(component$$3, zz$$2) {
        zz$$2[0] |= readBit() << successive
      }
      function decodeACFirst(component$$4, zz$$3) {
        if(eobrun > 0) {
          eobrun--;
          return
        }
        var k$$17 = spectralStart;
        var e$$27 = spectralEnd;
        for(;k$$17 <= e$$27;) {
          var rs$$1 = decodeHuffman(component$$4.huffmanTableAC);
          var s$$14 = rs$$1 & 15;
          var r$$10 = rs$$1 >> 4;
          if(s$$14 === 0) {
            if(r$$10 < 15) {
              eobrun = receive(r$$10) + (1 << r$$10) - 1;
              break
            }
            k$$17 += 16;
            continue
          }
          k$$17 += r$$10;
          var z$$4 = dctZigZag[k$$17];
          zz$$3[z$$4] = receiveAndExtend(s$$14) * (1 << successive);
          k$$17++
        }
      }
      function decodeACSuccessive(component$$5, zz$$4) {
        var k$$18 = spectralStart;
        var e$$28 = spectralEnd;
        var r$$11 = 0;
        for(;k$$18 <= e$$28;) {
          var z$$5 = dctZigZag[k$$18];
          switch(successiveACState) {
            case 0:
              var rs$$2 = decodeHuffman(component$$5.huffmanTableAC);
              var s$$15 = rs$$2 & 15;
              r$$11 = rs$$2 >> 4;
              if(s$$15 === 0) {
                if(r$$11 < 15) {
                  eobrun = receive(r$$11) + (1 << r$$11);
                  successiveACState = 4
                }else {
                  r$$11 = 16;
                  successiveACState = 1
                }
              }else {
                if(s$$15 !== 1) {
                  throw"invalid ACn encoding";
                }
                successiveACNextValue = receiveAndExtend(s$$15);
                successiveACState = r$$11 ? 2 : 3
              }
              continue;
            case 1:
            ;
            case 2:
              if(zz$$4[z$$5]) {
                zz$$4[z$$5] += readBit() << successive
              }else {
                r$$11--;
                if(r$$11 === 0) {
                  successiveACState = successiveACState == 2 ? 3 : 0
                }
              }
              break;
            case 3:
              if(zz$$4[z$$5]) {
                zz$$4[z$$5] += readBit() << successive
              }else {
                zz$$4[z$$5] = successiveACNextValue << successive;
                successiveACState = 0
              }
              break;
            case 4:
              if(zz$$4[z$$5]) {
                zz$$4[z$$5] += readBit() << successive
              }
          }
          k$$18++
        }
        if(successiveACState === 4) {
          eobrun--;
          if(eobrun === 0) {
            successiveACState = 0
          }
        }
      }
      function decodeMcu(component$$6, decode$$4, mcu$$1, row, col) {
        var mcuRow = mcu$$1 / mcusPerLine | 0;
        var mcuCol = mcu$$1 % mcusPerLine;
        var blockRow = mcuRow * component$$6.v + row;
        var blockCol = mcuCol * component$$6.h + col;
        decode$$4(component$$6, component$$6.blocks[blockRow][blockCol])
      }
      function decodeBlock(component$$7, decode$$5, mcu$$2) {
        var blockRow$$1 = mcu$$2 / component$$7.blocksPerLine | 0;
        var blockCol$$1 = mcu$$2 % component$$7.blocksPerLine;
        decode$$5(component$$7, component$$7.blocks[blockRow$$1][blockCol$$1])
      }
      var precision = frame$$1.precision;
      var samplesPerLine = frame$$1.samplesPerLine;
      var scanLines = frame$$1.scanLines;
      var mcusPerLine = frame$$1.mcusPerLine;
      var progressive = frame$$1.progressive;
      var maxH = frame$$1.maxH;
      var maxV = frame$$1.maxV;
      var startOffset$$1 = offset$$32;
      var bitsData = 0;
      var bitsCount = 0;
      var eobrun = 0;
      var successiveACState = 0;
      var successiveACNextValue;
      var componentsLength = components$$2.length;
      var component;
      var i$$166;
      var j$$55;
      var k$$15;
      var n$$40;
      var decodeFn;
      if(progressive) {
        if(spectralStart === 0) {
          decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive
        }else {
          decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive
        }
      }else {
        decodeFn = decodeBaseline
      }
      var mcu = 0;
      var marker;
      var mcuExpected;
      if(componentsLength == 1) {
        mcuExpected = components$$2[0].blocksPerLine * components$$2[0].blocksPerColumn
      }else {
        mcuExpected = mcusPerLine * frame$$1.mcusPerColumn
      }
      if(!resetInterval) {
        resetInterval = mcuExpected
      }
      var h$$14;
      var v$$18;
      for(;mcu < mcuExpected;) {
        i$$166 = 0;
        for(;i$$166 < componentsLength;i$$166++) {
          components$$2[i$$166].pred = 0
        }
        eobrun = 0;
        if(componentsLength == 1) {
          component = components$$2[0];
          n$$40 = 0;
          for(;n$$40 < resetInterval;n$$40++) {
            decodeBlock(component, decodeFn, mcu);
            mcu++
          }
        }else {
          n$$40 = 0;
          for(;n$$40 < resetInterval;n$$40++) {
            i$$166 = 0;
            for(;i$$166 < componentsLength;i$$166++) {
              component = components$$2[i$$166];
              h$$14 = component.h;
              v$$18 = component.v;
              j$$55 = 0;
              for(;j$$55 < v$$18;j$$55++) {
                k$$15 = 0;
                for(;k$$15 < h$$14;k$$15++) {
                  decodeMcu(component, decodeFn, mcu, j$$55, k$$15)
                }
              }
            }
            mcu++
          }
        }
        bitsCount = 0;
        marker = data$$92[offset$$32] << 8 | data$$92[offset$$32 + 1];
        if(marker <= 65280) {
          throw"marker was not found";
        }
        if(marker >= 65488 && marker <= 65495) {
          offset$$32 += 2
        }else {
          break
        }
      }
      return offset$$32 - startOffset$$1
    }
    function buildComponentData(frame$$2, component$$8) {
      var lines = [];
      var blocksPerLine = component$$8.blocksPerLine;
      var blocksPerColumn = component$$8.blocksPerColumn;
      var samplesPerLine$$1 = blocksPerLine << 3;
      var R = new Int32Array(64);
      var r$$12 = new Uint8Array(64);
      var i$$167;
      var j$$56;
      var blockRow$$2 = 0;
      for(;blockRow$$2 < blocksPerColumn;blockRow$$2++) {
        var scanLine = blockRow$$2 << 3;
        i$$167 = 0;
        for(;i$$167 < 8;i$$167++) {
          lines.push(new Uint8Array(samplesPerLine$$1))
        }
        var blockCol$$2 = 0;
        for(;blockCol$$2 < blocksPerLine;blockCol$$2++) {
          var zz$$inline_128 = component$$8.blocks[blockRow$$2][blockCol$$2];
          var dataOut$$inline_129 = r$$12;
          var dataIn$$inline_130 = R;
          var qt$$inline_131 = component$$8.quantizationTable;
          var v0$$inline_132 = void 0;
          var v1$$inline_133 = void 0;
          var v2$$inline_134 = void 0;
          var v3$$inline_135 = void 0;
          var v4$$inline_136 = void 0;
          var v5$$inline_137 = void 0;
          var v6$$inline_138 = void 0;
          var v7$$inline_139 = void 0;
          var t$$inline_140 = void 0;
          var p$$inline_141 = dataIn$$inline_130;
          var i$$inline_142 = void 0;
          i$$inline_142 = 0;
          for(;i$$inline_142 < 64;i$$inline_142++) {
            p$$inline_141[i$$inline_142] = zz$$inline_128[i$$inline_142] * qt$$inline_131[i$$inline_142]
          }
          i$$inline_142 = 0;
          for(;i$$inline_142 < 8;++i$$inline_142) {
            var row$$inline_143 = 8 * i$$inline_142;
            if(p$$inline_141[1 + row$$inline_143] == 0 && p$$inline_141[2 + row$$inline_143] == 0 && p$$inline_141[3 + row$$inline_143] == 0 && p$$inline_141[4 + row$$inline_143] == 0 && p$$inline_141[5 + row$$inline_143] == 0 && p$$inline_141[6 + row$$inline_143] == 0 && p$$inline_141[7 + row$$inline_143] == 0) {
              t$$inline_140 = dctSqrt2 * p$$inline_141[0 + row$$inline_143] + 512 >> 10;
              p$$inline_141[0 + row$$inline_143] = t$$inline_140;
              p$$inline_141[1 + row$$inline_143] = t$$inline_140;
              p$$inline_141[2 + row$$inline_143] = t$$inline_140;
              p$$inline_141[3 + row$$inline_143] = t$$inline_140;
              p$$inline_141[4 + row$$inline_143] = t$$inline_140;
              p$$inline_141[5 + row$$inline_143] = t$$inline_140;
              p$$inline_141[6 + row$$inline_143] = t$$inline_140;
              p$$inline_141[7 + row$$inline_143] = t$$inline_140;
              continue
            }
            v0$$inline_132 = dctSqrt2 * p$$inline_141[0 + row$$inline_143] + 128 >> 8;
            v1$$inline_133 = dctSqrt2 * p$$inline_141[4 + row$$inline_143] + 128 >> 8;
            v2$$inline_134 = p$$inline_141[2 + row$$inline_143];
            v3$$inline_135 = p$$inline_141[6 + row$$inline_143];
            v4$$inline_136 = dctSqrt1d2 * (p$$inline_141[1 + row$$inline_143] - p$$inline_141[7 + row$$inline_143]) + 128 >> 8;
            v7$$inline_139 = dctSqrt1d2 * (p$$inline_141[1 + row$$inline_143] + p$$inline_141[7 + row$$inline_143]) + 128 >> 8;
            v5$$inline_137 = p$$inline_141[3 + row$$inline_143] << 4;
            v6$$inline_138 = p$$inline_141[5 + row$$inline_143] << 4;
            t$$inline_140 = v0$$inline_132 - v1$$inline_133 + 1 >> 1;
            v0$$inline_132 = v0$$inline_132 + v1$$inline_133 + 1 >> 1;
            v1$$inline_133 = t$$inline_140;
            t$$inline_140 = v2$$inline_134 * dctSin6 + v3$$inline_135 * dctCos6 + 128 >> 8;
            v2$$inline_134 = v2$$inline_134 * dctCos6 - v3$$inline_135 * dctSin6 + 128 >> 8;
            v3$$inline_135 = t$$inline_140;
            t$$inline_140 = v4$$inline_136 - v6$$inline_138 + 1 >> 1;
            v4$$inline_136 = v4$$inline_136 + v6$$inline_138 + 1 >> 1;
            v6$$inline_138 = t$$inline_140;
            t$$inline_140 = v7$$inline_139 + v5$$inline_137 + 1 >> 1;
            v5$$inline_137 = v7$$inline_139 - v5$$inline_137 + 1 >> 1;
            v7$$inline_139 = t$$inline_140;
            t$$inline_140 = v0$$inline_132 - v3$$inline_135 + 1 >> 1;
            v0$$inline_132 = v0$$inline_132 + v3$$inline_135 + 1 >> 1;
            v3$$inline_135 = t$$inline_140;
            t$$inline_140 = v1$$inline_133 - v2$$inline_134 + 1 >> 1;
            v1$$inline_133 = v1$$inline_133 + v2$$inline_134 + 1 >> 1;
            v2$$inline_134 = t$$inline_140;
            t$$inline_140 = v4$$inline_136 * dctSin3 + v7$$inline_139 * dctCos3 + 2048 >> 12;
            v4$$inline_136 = v4$$inline_136 * dctCos3 - v7$$inline_139 * dctSin3 + 2048 >> 12;
            v7$$inline_139 = t$$inline_140;
            t$$inline_140 = v5$$inline_137 * dctSin1 + v6$$inline_138 * dctCos1 + 2048 >> 12;
            v5$$inline_137 = v5$$inline_137 * dctCos1 - v6$$inline_138 * dctSin1 + 2048 >> 12;
            v6$$inline_138 = t$$inline_140;
            p$$inline_141[0 + row$$inline_143] = v0$$inline_132 + v7$$inline_139;
            p$$inline_141[7 + row$$inline_143] = v0$$inline_132 - v7$$inline_139;
            p$$inline_141[1 + row$$inline_143] = v1$$inline_133 + v6$$inline_138;
            p$$inline_141[6 + row$$inline_143] = v1$$inline_133 - v6$$inline_138;
            p$$inline_141[2 + row$$inline_143] = v2$$inline_134 + v5$$inline_137;
            p$$inline_141[5 + row$$inline_143] = v2$$inline_134 - v5$$inline_137;
            p$$inline_141[3 + row$$inline_143] = v3$$inline_135 + v4$$inline_136;
            p$$inline_141[4 + row$$inline_143] = v3$$inline_135 - v4$$inline_136
          }
          i$$inline_142 = 0;
          for(;i$$inline_142 < 8;++i$$inline_142) {
            var col$$inline_144 = i$$inline_142;
            if(p$$inline_141[1 * 8 + col$$inline_144] == 0 && p$$inline_141[2 * 8 + col$$inline_144] == 0 && p$$inline_141[3 * 8 + col$$inline_144] == 0 && p$$inline_141[4 * 8 + col$$inline_144] == 0 && p$$inline_141[5 * 8 + col$$inline_144] == 0 && p$$inline_141[6 * 8 + col$$inline_144] == 0 && p$$inline_141[7 * 8 + col$$inline_144] == 0) {
              t$$inline_140 = dctSqrt2 * dataIn$$inline_130[i$$inline_142 + 0] + 8192 >> 14;
              p$$inline_141[0 * 8 + col$$inline_144] = t$$inline_140;
              p$$inline_141[1 * 8 + col$$inline_144] = t$$inline_140;
              p$$inline_141[2 * 8 + col$$inline_144] = t$$inline_140;
              p$$inline_141[3 * 8 + col$$inline_144] = t$$inline_140;
              p$$inline_141[4 * 8 + col$$inline_144] = t$$inline_140;
              p$$inline_141[5 * 8 + col$$inline_144] = t$$inline_140;
              p$$inline_141[6 * 8 + col$$inline_144] = t$$inline_140;
              p$$inline_141[7 * 8 + col$$inline_144] = t$$inline_140;
              continue
            }
            v0$$inline_132 = dctSqrt2 * p$$inline_141[0 * 8 + col$$inline_144] + 2048 >> 12;
            v1$$inline_133 = dctSqrt2 * p$$inline_141[4 * 8 + col$$inline_144] + 2048 >> 12;
            v2$$inline_134 = p$$inline_141[2 * 8 + col$$inline_144];
            v3$$inline_135 = p$$inline_141[6 * 8 + col$$inline_144];
            v4$$inline_136 = dctSqrt1d2 * (p$$inline_141[1 * 8 + col$$inline_144] - p$$inline_141[7 * 8 + col$$inline_144]) + 2048 >> 12;
            v7$$inline_139 = dctSqrt1d2 * (p$$inline_141[1 * 8 + col$$inline_144] + p$$inline_141[7 * 8 + col$$inline_144]) + 2048 >> 12;
            v5$$inline_137 = p$$inline_141[3 * 8 + col$$inline_144];
            v6$$inline_138 = p$$inline_141[5 * 8 + col$$inline_144];
            t$$inline_140 = v0$$inline_132 - v1$$inline_133 + 1 >> 1;
            v0$$inline_132 = v0$$inline_132 + v1$$inline_133 + 1 >> 1;
            v1$$inline_133 = t$$inline_140;
            t$$inline_140 = v2$$inline_134 * dctSin6 + v3$$inline_135 * dctCos6 + 2048 >> 12;
            v2$$inline_134 = v2$$inline_134 * dctCos6 - v3$$inline_135 * dctSin6 + 2048 >> 12;
            v3$$inline_135 = t$$inline_140;
            t$$inline_140 = v4$$inline_136 - v6$$inline_138 + 1 >> 1;
            v4$$inline_136 = v4$$inline_136 + v6$$inline_138 + 1 >> 1;
            v6$$inline_138 = t$$inline_140;
            t$$inline_140 = v7$$inline_139 + v5$$inline_137 + 1 >> 1;
            v5$$inline_137 = v7$$inline_139 - v5$$inline_137 + 1 >> 1;
            v7$$inline_139 = t$$inline_140;
            t$$inline_140 = v0$$inline_132 - v3$$inline_135 + 1 >> 1;
            v0$$inline_132 = v0$$inline_132 + v3$$inline_135 + 1 >> 1;
            v3$$inline_135 = t$$inline_140;
            t$$inline_140 = v1$$inline_133 - v2$$inline_134 + 1 >> 1;
            v1$$inline_133 = v1$$inline_133 + v2$$inline_134 + 1 >> 1;
            v2$$inline_134 = t$$inline_140;
            t$$inline_140 = v4$$inline_136 * dctSin3 + v7$$inline_139 * dctCos3 + 2048 >> 12;
            v4$$inline_136 = v4$$inline_136 * dctCos3 - v7$$inline_139 * dctSin3 + 2048 >> 12;
            v7$$inline_139 = t$$inline_140;
            t$$inline_140 = v5$$inline_137 * dctSin1 + v6$$inline_138 * dctCos1 + 2048 >> 12;
            v5$$inline_137 = v5$$inline_137 * dctCos1 - v6$$inline_138 * dctSin1 + 2048 >> 12;
            v6$$inline_138 = t$$inline_140;
            p$$inline_141[0 * 8 + col$$inline_144] = v0$$inline_132 + v7$$inline_139;
            p$$inline_141[7 * 8 + col$$inline_144] = v0$$inline_132 - v7$$inline_139;
            p$$inline_141[1 * 8 + col$$inline_144] = v1$$inline_133 + v6$$inline_138;
            p$$inline_141[6 * 8 + col$$inline_144] = v1$$inline_133 - v6$$inline_138;
            p$$inline_141[2 * 8 + col$$inline_144] = v2$$inline_134 + v5$$inline_137;
            p$$inline_141[5 * 8 + col$$inline_144] = v2$$inline_134 - v5$$inline_137;
            p$$inline_141[3 * 8 + col$$inline_144] = v3$$inline_135 + v4$$inline_136;
            p$$inline_141[4 * 8 + col$$inline_144] = v3$$inline_135 - v4$$inline_136
          }
          i$$inline_142 = 0;
          for(;i$$inline_142 < 64;++i$$inline_142) {
            var sample$$inline_145 = 128 + (p$$inline_141[i$$inline_142] + 8 >> 4);
            dataOut$$inline_129[i$$inline_142] = sample$$inline_145 < 0 ? 0 : sample$$inline_145 > 255 ? 255 : sample$$inline_145
          }
          var offset$$33 = 0;
          var sample = blockCol$$2 << 3;
          j$$56 = 0;
          for(;j$$56 < 8;j$$56++) {
            var line = lines[scanLine + j$$56];
            i$$167 = 0;
            for(;i$$167 < 8;i$$167++) {
              line[sample + i$$167] = r$$12[offset$$33++]
            }
          }
        }
      }
      return lines
    }
    var dctZigZag = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);
    var dctCos1 = 4017;
    var dctSin1 = 799;
    var dctCos3 = 3406;
    var dctSin3 = 2276;
    var dctCos6 = 1567;
    var dctSin6 = 3784;
    var dctSqrt2 = 5793;
    var dctSqrt1d2 = 2896;
    constructor.prototype = {load:function load(path) {
      var xhr$$1 = new PdfJS_window.XMLHttpRequest;
      xhr$$1.open("GET", path, true);
      xhr$$1.responseType = "arraybuffer";
      xhr$$1.onload = function() {
        var data$$93 = new Uint8Array(xhr$$1.response || xhr$$1.mozResponseArrayBuffer);
        this.parse(data$$93);
        if(this.onload) {
          this.onload()
        }
      }.bind(this);
      xhr$$1.send(null)
    }, parse:function parse(data$$94) {
      function readUint16() {
        var value$$69 = data$$94[offset$$34] << 8 | data$$94[offset$$34 + 1];
        offset$$34 += 2;
        return value$$69
      }
      function readDataBlock() {
        var length$$71 = readUint16();
        var array$$15 = data$$94.subarray(offset$$34, offset$$34 + length$$71 - 2);
        offset$$34 += array$$15.length;
        return array$$15
      }
      function prepareComponents(frame$$4) {
        var maxH$$2 = 0;
        var maxV$$2 = 0;
        var component$$10;
        var componentId$$1;
        for(componentId$$1 in frame$$4.components) {
          if(frame$$4.components.hasOwnProperty(componentId$$1)) {
            component$$10 = frame$$4.components[componentId$$1];
            if(maxH$$2 < component$$10.h) {
              maxH$$2 = component$$10.h
            }
            if(maxV$$2 < component$$10.v) {
              maxV$$2 = component$$10.v
            }
          }
        }
        var mcusPerLine$$1 = Math.ceil(frame$$4.samplesPerLine / 8 / maxH$$2);
        var mcusPerColumn = Math.ceil(frame$$4.scanLines / 8 / maxV$$2);
        for(componentId$$1 in frame$$4.components) {
          if(frame$$4.components.hasOwnProperty(componentId$$1)) {
            component$$10 = frame$$4.components[componentId$$1];
            var blocksPerLine$$1 = Math.ceil(Math.ceil(frame$$4.samplesPerLine / 8) * component$$10.h / maxH$$2);
            var blocksPerColumn$$1 = Math.ceil(Math.ceil(frame$$4.scanLines / 8) * component$$10.v / maxV$$2);
            var blocksPerLineForMcu = mcusPerLine$$1 * component$$10.h;
            var blocksPerColumnForMcu = mcusPerColumn * component$$10.v;
            var blocks = [];
            var i$$170 = 0;
            for(;i$$170 < blocksPerColumnForMcu;i$$170++) {
              var row$$2 = [];
              var j$$58 = 0;
              for(;j$$58 < blocksPerLineForMcu;j$$58++) {
                row$$2.push(new Int32Array(64))
              }
              blocks.push(row$$2)
            }
            component$$10.blocksPerLine = blocksPerLine$$1;
            component$$10.blocksPerColumn = blocksPerColumn$$1;
            component$$10.blocks = blocks
          }
        }
        frame$$4.maxH = maxH$$2;
        frame$$4.maxV = maxV$$2;
        frame$$4.mcusPerLine = mcusPerLine$$1;
        frame$$4.mcusPerColumn = mcusPerColumn
      }
      var offset$$34 = 0;
      var length$$70 = data$$94.length;
      var jfif = null;
      var adobe = null;
      var pixels$$4 = null;
      var frame$$3;
      var resetInterval$$1;
      var quantizationTables = [];
      var frames = [];
      var huffmanTablesAC = [];
      var huffmanTablesDC = [];
      var fileMarker = readUint16();
      if(fileMarker != 65496) {
        throw"SOI not found";
      }
      fileMarker = readUint16();
      for(;fileMarker != 65497;) {
        var i$$169;
        var j$$57;
        var l$$1;
        switch(fileMarker) {
          case 65504:
          ;
          case 65505:
          ;
          case 65506:
          ;
          case 65507:
          ;
          case 65508:
          ;
          case 65509:
          ;
          case 65510:
          ;
          case 65511:
          ;
          case 65512:
          ;
          case 65513:
          ;
          case 65514:
          ;
          case 65515:
          ;
          case 65516:
          ;
          case 65517:
          ;
          case 65518:
          ;
          case 65519:
          ;
          case 65534:
            var appData = readDataBlock();
            if(fileMarker === 65504) {
              if(appData[0] === 74 && appData[1] === 70 && appData[2] === 73 && appData[3] === 70 && appData[4] === 0) {
                jfif = {version:{major:appData[5], minor:appData[6]}, densityUnits:appData[7], xDensity:appData[8] << 8 | appData[9], yDensity:appData[10] << 8 | appData[11], thumbWidth:appData[12], thumbHeight:appData[13], thumbData:appData.subarray(14, 14 + 3 * appData[12] * appData[13])}
              }
            }
            if(fileMarker === 65518) {
              if(appData[0] === 65 && appData[1] === 100 && appData[2] === 111 && appData[3] === 98 && appData[4] === 101 && appData[5] === 0) {
                adobe = {version:appData[6], flags0:appData[7] << 8 | appData[8], flags1:appData[9] << 8 | appData[10], transformCode:appData[11]}
              }
            }
            break;
          case 65499:
            var quantizationTableCount = Math.floor((readUint16() - 2) / 65);
            i$$169 = 0;
            for(;i$$169 < quantizationTableCount;i$$169++) {
              var quantizationTableSpec = data$$94[offset$$34++];
              var tableData$$1 = new Int32Array(64);
              if(quantizationTableSpec >> 4 === 0) {
                j$$57 = 0;
                for(;j$$57 < 64;j$$57++) {
                  var z$$6 = dctZigZag[j$$57];
                  tableData$$1[z$$6] = data$$94[offset$$34++]
                }
              }else {
                if(quantizationTableSpec >> 4 === 1) {
                  j$$57 = 0;
                  for(;j$$57 < 64;j$$57++) {
                    z$$6 = dctZigZag[j$$57];
                    tableData$$1[z$$6] = readUint16()
                  }
                }else {
                  throw"DQT: invalid table spec";
                }
              }
              quantizationTables[quantizationTableSpec & 15] = tableData$$1
            }
            break;
          case 65472:
          ;
          case 65474:
            readUint16();
            frame$$3 = {};
            frame$$3.progressive = fileMarker === 65474;
            frame$$3.precision = data$$94[offset$$34++];
            frame$$3.scanLines = readUint16();
            frame$$3.samplesPerLine = readUint16();
            frame$$3.components = {};
            frame$$3.componentsOrder = [];
            var componentsCount$$1 = data$$94[offset$$34++];
            var componentId;
            var maxH$$1 = 0;
            var maxV$$1 = 0;
            i$$169 = 0;
            for(;i$$169 < componentsCount$$1;i$$169++) {
              componentId = data$$94[offset$$34];
              var h$$15 = data$$94[offset$$34 + 1] >> 4;
              var v$$19 = data$$94[offset$$34 + 1] & 15;
              var qId = data$$94[offset$$34 + 2];
              frame$$3.componentsOrder.push(componentId);
              frame$$3.components[componentId] = {h:h$$15, v:v$$19, quantizationTable:quantizationTables[qId]};
              offset$$34 += 3
            }
            prepareComponents(frame$$3);
            frames.push(frame$$3);
            break;
          case 65476:
            var huffmanLength = readUint16();
            i$$169 = 2;
            for(;i$$169 < huffmanLength;) {
              var huffmanTableSpec = data$$94[offset$$34++];
              var codeLengths$$2 = new Uint8Array(16);
              var codeLengthSum = 0;
              j$$57 = 0;
              for(;j$$57 < 16;j$$57++, offset$$34++) {
                codeLengthSum += codeLengths$$2[j$$57] = data$$94[offset$$34]
              }
              var huffmanValues = new Uint8Array(codeLengthSum);
              j$$57 = 0;
              for(;j$$57 < codeLengthSum;j$$57++, offset$$34++) {
                huffmanValues[j$$57] = data$$94[offset$$34]
              }
              i$$169 += 17 + codeLengthSum;
              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths$$2, huffmanValues)
            }
            break;
          case 65501:
            readUint16();
            resetInterval$$1 = readUint16();
            break;
          case 65498:
            var scanLength = readUint16();
            var selectorsCount = data$$94[offset$$34++];
            var components$$3 = [];
            var component$$9;
            i$$169 = 0;
            for(;i$$169 < selectorsCount;i$$169++) {
              component$$9 = frame$$3.components[data$$94[offset$$34++]];
              var tableSpec = data$$94[offset$$34++];
              component$$9.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
              component$$9.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
              components$$3.push(component$$9)
            }
            var spectralStart$$1 = data$$94[offset$$34++];
            var spectralEnd$$1 = data$$94[offset$$34++];
            var successiveApproximation = data$$94[offset$$34++];
            var processed$$2 = decodeScan(data$$94, offset$$34, frame$$3, components$$3, resetInterval$$1, spectralStart$$1, spectralEnd$$1, successiveApproximation >> 4, successiveApproximation & 15);
            offset$$34 += processed$$2;
            break;
          default:
            throw"unknown JPEG marker " + fileMarker.toString(16);
        }
        fileMarker = readUint16()
      }
      if(frames.length != 1) {
        throw"only single frame JPEGs supported";
      }
      this.width = frame$$3.samplesPerLine;
      this.height = frame$$3.scanLines;
      this.jfif = jfif;
      this.adobe = adobe;
      this.components = [];
      i$$169 = 0;
      for(;i$$169 < frame$$3.componentsOrder.length;i$$169++) {
        component$$9 = frame$$3.components[frame$$3.componentsOrder[i$$169]];
        this.components.push({lines:buildComponentData(frame$$3, component$$9), scaleX:component$$9.h / frame$$3.maxH, scaleY:component$$9.v / frame$$3.maxV})
      }
    }, getData:function getData(width$$32, height$$24) {
      function clampTo8bit$$1(a$$18) {
        return a$$18 < 0 ? 0 : a$$18 > 255 ? 255 : a$$18
      }
      var scaleX = this.width / width$$32;
      var scaleY = this.height / height$$24;
      var component1;
      var component2;
      var component3;
      var component4;
      var component1Line;
      var component2Line;
      var component3Line;
      var component4Line;
      var x$$79;
      var y$$58;
      var offset$$35 = 0;
      var Y$$1;
      var Cb;
      var Cr;
      var K;
      var C;
      var M$$1;
      var Ye;
      var R$$1;
      var G;
      var B;
      var colorTransform;
      var dataLength$$1 = width$$32 * height$$24 * this.components.length;
      var data$$95 = new Uint8Array(dataLength$$1);
      switch(this.components.length) {
        case 1:
          component1 = this.components[0];
          y$$58 = 0;
          for(;y$$58 < height$$24;y$$58++) {
            component1Line = component1.lines[0 | y$$58 * component1.scaleY * scaleY];
            x$$79 = 0;
            for(;x$$79 < width$$32;x$$79++) {
              Y$$1 = component1Line[0 | x$$79 * component1.scaleX * scaleX];
              data$$95[offset$$35++] = Y$$1
            }
          }
          break;
        case 3:
          colorTransform = true;
          if(this.adobe && this.adobe.transformCode) {
            colorTransform = true
          }else {
            if(typeof this.colorTransform !== "undefined") {
              colorTransform = !!this.colorTransform
            }
          }
          component1 = this.components[0];
          component2 = this.components[1];
          component3 = this.components[2];
          y$$58 = 0;
          for(;y$$58 < height$$24;y$$58++) {
            component1Line = component1.lines[0 | y$$58 * component1.scaleY * scaleY];
            component2Line = component2.lines[0 | y$$58 * component2.scaleY * scaleY];
            component3Line = component3.lines[0 | y$$58 * component3.scaleY * scaleY];
            x$$79 = 0;
            for(;x$$79 < width$$32;x$$79++) {
              if(!colorTransform) {
                R$$1 = component1Line[0 | x$$79 * component1.scaleX * scaleX];
                G = component2Line[0 | x$$79 * component2.scaleX * scaleX];
                B = component3Line[0 | x$$79 * component3.scaleX * scaleX]
              }else {
                Y$$1 = component1Line[0 | x$$79 * component1.scaleX * scaleX];
                Cb = component2Line[0 | x$$79 * component2.scaleX * scaleX];
                Cr = component3Line[0 | x$$79 * component3.scaleX * scaleX];
                R$$1 = clampTo8bit$$1(Y$$1 + 1.402 * (Cr - 128));
                G = clampTo8bit$$1(Y$$1 - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                B = clampTo8bit$$1(Y$$1 + 1.772 * (Cb - 128))
              }
              data$$95[offset$$35++] = R$$1;
              data$$95[offset$$35++] = G;
              data$$95[offset$$35++] = B
            }
          }
          break;
        case 4:
          if(!this.adobe) {
            throw"Unsupported color mode (4 components)";
          }
          colorTransform = false;
          if(this.adobe && this.adobe.transformCode) {
            colorTransform = true
          }else {
            if(typeof this.colorTransform !== "undefined") {
              colorTransform = !!this.colorTransform
            }
          }
          component1 = this.components[0];
          component2 = this.components[1];
          component3 = this.components[2];
          component4 = this.components[3];
          y$$58 = 0;
          for(;y$$58 < height$$24;y$$58++) {
            component1Line = component1.lines[0 | y$$58 * component1.scaleY * scaleY];
            component2Line = component2.lines[0 | y$$58 * component2.scaleY * scaleY];
            component3Line = component3.lines[0 | y$$58 * component3.scaleY * scaleY];
            component4Line = component4.lines[0 | y$$58 * component4.scaleY * scaleY];
            x$$79 = 0;
            for(;x$$79 < width$$32;x$$79++) {
              if(!colorTransform) {
                C = component1Line[0 | x$$79 * component1.scaleX * scaleX];
                M$$1 = component2Line[0 | x$$79 * component2.scaleX * scaleX];
                Ye = component3Line[0 | x$$79 * component3.scaleX * scaleX];
                K = component4Line[0 | x$$79 * component4.scaleX * scaleX]
              }else {
                Y$$1 = component1Line[0 | x$$79 * component1.scaleX * scaleX];
                Cb = component2Line[0 | x$$79 * component2.scaleX * scaleX];
                Cr = component3Line[0 | x$$79 * component3.scaleX * scaleX];
                K = component4Line[0 | x$$79 * component4.scaleX * scaleX];
                C = 255 - clampTo8bit$$1(Y$$1 + 1.402 * (Cr - 128));
                M$$1 = 255 - clampTo8bit$$1(Y$$1 - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                Ye = 255 - clampTo8bit$$1(Y$$1 + 1.772 * (Cb - 128))
              }
              data$$95[offset$$35++] = C;
              data$$95[offset$$35++] = M$$1;
              data$$95[offset$$35++] = Ye;
              data$$95[offset$$35++] = K
            }
          }
          break;
        default:
          throw"Unsupported color mode";
      }
      return data$$95
    }, copyToImageData:function copyToImageData(imageData$$4) {
      var width$$33 = imageData$$4.width;
      var height$$25 = imageData$$4.height;
      var imageDataArray = imageData$$4.data;
      var data$$96 = this.getData(width$$33, height$$25);
      var i$$171 = 0;
      var j$$59 = 0;
      var x$$80;
      var y$$59;
      var Y$$2;
      var K$$1;
      var C$$1;
      var M$$2;
      var R$$2;
      var G$$1;
      var B$$1;
      switch(this.components.length) {
        case 1:
          y$$59 = 0;
          for(;y$$59 < height$$25;y$$59++) {
            x$$80 = 0;
            for(;x$$80 < width$$33;x$$80++) {
              Y$$2 = data$$96[i$$171++];
              imageDataArray[j$$59++] = Y$$2;
              imageDataArray[j$$59++] = Y$$2;
              imageDataArray[j$$59++] = Y$$2;
              imageDataArray[j$$59++] = 255
            }
          }
          break;
        case 3:
          y$$59 = 0;
          for(;y$$59 < height$$25;y$$59++) {
            x$$80 = 0;
            for(;x$$80 < width$$33;x$$80++) {
              R$$2 = data$$96[i$$171++];
              G$$1 = data$$96[i$$171++];
              B$$1 = data$$96[i$$171++];
              imageDataArray[j$$59++] = R$$2;
              imageDataArray[j$$59++] = G$$1;
              imageDataArray[j$$59++] = B$$1;
              imageDataArray[j$$59++] = 255
            }
          }
          break;
        case 4:
          y$$59 = 0;
          for(;y$$59 < height$$25;y$$59++) {
            x$$80 = 0;
            for(;x$$80 < width$$33;x$$80++) {
              C$$1 = data$$96[i$$171++];
              M$$2 = data$$96[i$$171++];
              Y$$2 = data$$96[i$$171++];
              K$$1 = data$$96[i$$171++];
              R$$2 = 255 - clampTo8bit(C$$1 * (1 - K$$1 / 255) + K$$1);
              G$$1 = 255 - clampTo8bit(M$$2 * (1 - K$$1 / 255) + K$$1);
              B$$1 = 255 - clampTo8bit(Y$$2 * (1 - K$$1 / 255) + K$$1);
              imageDataArray[j$$59++] = R$$2;
              imageDataArray[j$$59++] = G$$1;
              imageDataArray[j$$59++] = B$$1;
              imageDataArray[j$$59++] = 255
            }
          }
          break;
        default:
          throw"Unsupported color mode";
      }
    }};
    return constructor
  }();
  var JpxImage = function JpxImageClosure() {
    function JpxImage$$1() {
      this.failOnCorruptedImage = false
    }
    function readUint32(data$$97, offset$$36) {
      return data$$97[offset$$36] << 24 | data$$97[offset$$36 + 1] << 16 | data$$97[offset$$36 + 2] << 8 | data$$97[offset$$36 + 3]
    }
    function readUint16$$1(data$$98, offset$$37) {
      return data$$98[offset$$37] << 8 | data$$98[offset$$37 + 1]
    }
    function log2(x$$81) {
      var n$$43 = 1;
      var i$$172 = 0;
      for(;x$$81 > n$$43;) {
        n$$43 <<= 1;
        i$$172++
      }
      return i$$172
    }
    function buildCodeblocks(context$$4, subband, dimensions$$1) {
      var xcb_ = dimensions$$1.xcb_;
      var ycb_ = dimensions$$1.ycb_;
      var codeblockWidth = 1 << xcb_;
      var codeblockHeight = 1 << ycb_;
      var cbx0 = Math.floor(subband.tbx0 / codeblockWidth);
      var cby0 = Math.floor(subband.tby0 / codeblockHeight);
      var cbx1 = Math.ceil(subband.tbx1 / codeblockWidth);
      var cby1 = Math.ceil(subband.tby1 / codeblockHeight);
      var precinctParameters = subband.resolution.precinctParameters;
      var codeblocks = [];
      var precincts = [];
      var j$$61 = cby0;
      for(;j$$61 < cby1;j$$61++) {
        var i$$174 = cbx0;
        for(;i$$174 < cbx1;i$$174++) {
          var codeblock = {cbx:i$$174, cby:j$$61, tbx0:codeblockWidth * i$$174, tby0:codeblockHeight * j$$61, tbx1:codeblockWidth * (i$$174 + 1), tby1:codeblockHeight * (j$$61 + 1)};
          var pi = Math.floor((codeblock.tbx0 - precinctParameters.precinctXOffset) / precinctParameters.precinctWidth);
          var pj = Math.floor((codeblock.tby0 - precinctParameters.precinctYOffset) / precinctParameters.precinctHeight);
          var precinctNumber = pj + pi * precinctParameters.numprecinctswide;
          codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);
          codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);
          codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);
          codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);
          codeblock.precinctNumber = precinctNumber;
          codeblock.subbandType = subband.type;
          var coefficientsLength = (codeblock.tbx1_ - codeblock.tbx0_) * (codeblock.tby1_ - codeblock.tby0_);
          codeblock.Lblock = 3;
          codeblocks.push(codeblock);
          var precinct;
          if(precinctNumber in precincts) {
            precinct = precincts[precinctNumber];
            precinct.cbxMin = Math.min(precinct.cbxMin, i$$174);
            precinct.cbyMin = Math.min(precinct.cbyMin, j$$61);
            precinct.cbxMax = Math.max(precinct.cbxMax, i$$174);
            precinct.cbyMax = Math.max(precinct.cbyMax, j$$61)
          }else {
            precincts[precinctNumber] = precinct = {cbxMin:i$$174, cbyMin:j$$61, cbxMax:i$$174, cbyMax:j$$61}
          }
          codeblock.precinct = precinct
        }
      }
      subband.codeblockParameters = {codeblockWidth:xcb_, codeblockHeight:ycb_, numcodeblockwide:cbx1 - cbx0 + 1, numcodeblockhigh:cby1 - cby1 + 1};
      subband.codeblocks = codeblocks;
      i$$174 = 0;
      var ii$$68 = codeblocks.length;
      for(;i$$174 < ii$$68;i$$174++) {
        codeblock = codeblocks[i$$174];
        precinctNumber = codeblock.precinctNumber
      }
      subband.precincts = precincts
    }
    function createPacket(resolution$$1, precinctNumber$$1, layerNumber$$1) {
      var precinctCodeblocks = [];
      var subbands = resolution$$1.subbands;
      var i$$175 = 0;
      var ii$$69 = subbands.length;
      for(;i$$175 < ii$$69;i$$175++) {
        var subband$$1 = subbands[i$$175];
        var codeblocks$$1 = subband$$1.codeblocks;
        var j$$62 = 0;
        var jj$$14 = codeblocks$$1.length;
        for(;j$$62 < jj$$14;j$$62++) {
          var codeblock$$1 = codeblocks$$1[j$$62];
          if(codeblock$$1.precinctNumber != precinctNumber$$1) {
            continue
          }
          precinctCodeblocks.push(codeblock$$1)
        }
      }
      return{layerNumber:layerNumber$$1, codeblocks:precinctCodeblocks}
    }
    function LayerResolutionComponentPositionIterator(context$$5) {
      var siz$$2 = context$$5.SIZ;
      var tileIndex = context$$5.currentTile.index;
      var tile$$1 = context$$5.tiles[tileIndex];
      var layersCount = tile$$1.codingStyleDefaultParameters.layersCount;
      var componentsCount$$3 = siz$$2.Csiz;
      var maxDecompositionLevelsCount = 0;
      var q$$3 = 0;
      for(;q$$3 < componentsCount$$3;q$$3++) {
        maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile$$1.components[q$$3].codingStyleParameters.decompositionLevelsCount)
      }
      var l$$2 = 0;
      var r$$14 = 0;
      var i$$176 = 0;
      var k$$19 = 0;
      this.nextPacket = function JpxImage_nextPacket() {
        for(;l$$2 < layersCount;l$$2++) {
          for(;r$$14 <= maxDecompositionLevelsCount;r$$14++) {
            for(;i$$176 < componentsCount$$3;i$$176++) {
              var component$$14 = tile$$1.components[i$$176];
              if(r$$14 > component$$14.codingStyleParameters.decompositionLevelsCount) {
                continue
              }
              var resolution$$2 = component$$14.resolutions[r$$14];
              var numprecincts$$1 = resolution$$2.precinctParameters.numprecincts;
              for(;k$$19 < numprecincts$$1;) {
                var packet = createPacket(resolution$$2, k$$19, l$$2);
                k$$19++;
                return packet
              }
              k$$19 = 0
            }
            i$$176 = 0
          }
          r$$14 = 0
        }
        throw"Out of packets";
      }
    }
    function ResolutionLayerComponentPositionIterator(context$$6) {
      var siz$$3 = context$$6.SIZ;
      var tileIndex$$1 = context$$6.currentTile.index;
      var tile$$2 = context$$6.tiles[tileIndex$$1];
      var layersCount$$1 = tile$$2.codingStyleDefaultParameters.layersCount;
      var componentsCount$$4 = siz$$3.Csiz;
      var maxDecompositionLevelsCount$$1 = 0;
      var q$$4 = 0;
      for(;q$$4 < componentsCount$$4;q$$4++) {
        maxDecompositionLevelsCount$$1 = Math.max(maxDecompositionLevelsCount$$1, tile$$2.components[q$$4].codingStyleParameters.decompositionLevelsCount)
      }
      var r$$15 = 0;
      var l$$3 = 0;
      var i$$177 = 0;
      var k$$20 = 0;
      this.nextPacket = function JpxImage_nextPacket$$1() {
        for(;r$$15 <= maxDecompositionLevelsCount$$1;r$$15++) {
          for(;l$$3 < layersCount$$1;l$$3++) {
            for(;i$$177 < componentsCount$$4;i$$177++) {
              var component$$15 = tile$$2.components[i$$177];
              if(r$$15 > component$$15.codingStyleParameters.decompositionLevelsCount) {
                continue
              }
              var resolution$$3 = component$$15.resolutions[r$$15];
              var numprecincts$$2 = resolution$$3.precinctParameters.numprecincts;
              for(;k$$20 < numprecincts$$2;) {
                var packet$$1 = createPacket(resolution$$3, k$$20, l$$3);
                k$$20++;
                return packet$$1
              }
              k$$20 = 0
            }
            i$$177 = 0
          }
          l$$3 = 0
        }
        throw"Out of packets";
      }
    }
    function parseTilePackets(context$$8, data$$99, offset$$38, dataLength$$2) {
      function readBits(count$$21) {
        for(;bufferSize < count$$21;) {
          var b$$29 = data$$99[offset$$38 + position$$2];
          position$$2++;
          if(skipNextBit) {
            buffer$$28 = buffer$$28 << 7 | b$$29;
            bufferSize += 7;
            skipNextBit = false
          }else {
            buffer$$28 = buffer$$28 << 8 | b$$29;
            bufferSize += 8
          }
          if(b$$29 == 255) {
            skipNextBit = true
          }
        }
        bufferSize -= count$$21;
        return buffer$$28 >>> bufferSize & (1 << count$$21) - 1
      }
      function readCodingpasses() {
        var value$$70 = readBits(1);
        if(value$$70 == 0) {
          return 1
        }
        value$$70 = value$$70 << 1 | readBits(1);
        if(value$$70 == 2) {
          return 2
        }
        value$$70 = value$$70 << 2 | readBits(2);
        if(value$$70 <= 14) {
          return(value$$70 & 3) + 3
        }
        value$$70 = value$$70 << 5 | readBits(5);
        if(value$$70 <= 510) {
          return(value$$70 & 31) + 6
        }
        value$$70 = value$$70 << 7 | readBits(7);
        return(value$$70 & 127) + 37
      }
      var position$$2 = 0;
      var buffer$$28;
      var bufferSize = 0;
      var skipNextBit = false;
      var tileIndex$$3 = context$$8.currentTile.index;
      var tile$$4 = context$$8.tiles[tileIndex$$3];
      var packetsIterator$$1 = tile$$4.packetsIterator;
      for(;position$$2 < dataLength$$2;) {
        var packet$$2 = packetsIterator$$1.nextPacket();
        if(!readBits(1)) {
          bufferSize = 0;
          if(skipNextBit) {
            position$$2++;
            skipNextBit = false
          }
          continue
        }
        var layerNumber$$2 = packet$$2.layerNumber;
        var queue$$3 = [];
        var i$$178 = 0;
        var ii$$70 = packet$$2.codeblocks.length;
        for(;i$$178 < ii$$70;i$$178++) {
          var codeblock$$2 = packet$$2.codeblocks[i$$178];
          var precinct$$1 = codeblock$$2.precinct;
          var codeblockColumn = codeblock$$2.cbx - precinct$$1.cbxMin;
          var codeblockRow = codeblock$$2.cby - precinct$$1.cbyMin;
          var codeblockIncluded = false;
          var firstTimeInclusion = false;
          if("included" in codeblock$$2) {
            codeblockIncluded = !!readBits(1)
          }else {
            precinct$$1 = codeblock$$2.precinct;
            var inclusionTree;
            var zeroBitPlanesTree;
            if("inclusionTree" in precinct$$1) {
              inclusionTree = precinct$$1.inclusionTree
            }else {
              var width$$34 = precinct$$1.cbxMax - precinct$$1.cbxMin + 1;
              var height$$26 = precinct$$1.cbyMax - precinct$$1.cbyMin + 1;
              inclusionTree = new InclusionTree(width$$34, height$$26, layerNumber$$2);
              zeroBitPlanesTree = new TagTree(width$$34, height$$26);
              precinct$$1.inclusionTree = inclusionTree;
              precinct$$1.zeroBitPlanesTree = zeroBitPlanesTree
            }
            if(inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber$$2)) {
              for(;true;) {
                if(readBits(1)) {
                  var valueReady = !inclusionTree.nextLevel();
                  if(valueReady) {
                    codeblock$$2.included = true;
                    codeblockIncluded = firstTimeInclusion = true;
                    break
                  }
                }else {
                  inclusionTree.incrementValue(layerNumber$$2);
                  break
                }
              }
            }
          }
          if(!codeblockIncluded) {
            continue
          }
          if(firstTimeInclusion) {
            zeroBitPlanesTree = precinct$$1.zeroBitPlanesTree;
            zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);
            for(;true;) {
              if(readBits(1)) {
                valueReady = !zeroBitPlanesTree.nextLevel();
                if(valueReady) {
                  break
                }
              }else {
                zeroBitPlanesTree.incrementValue()
              }
            }
            codeblock$$2.zeroBitPlanes = zeroBitPlanesTree.value
          }
          var codingpasses = readCodingpasses();
          for(;readBits(1);) {
            codeblock$$2.Lblock++
          }
          var codingpassesLog2 = log2(codingpasses);
          var bits$$10 = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock$$2.Lblock;
          var codedDataLength = readBits(bits$$10);
          queue$$3.push({codeblock:codeblock$$2, codingpasses:codingpasses, dataLength:codedDataLength})
        }
        bufferSize = 0;
        if(skipNextBit) {
          position$$2++;
          skipNextBit = false
        }
        for(;queue$$3.length > 0;) {
          var packetItem = queue$$3.shift();
          codeblock$$2 = packetItem.codeblock;
          if(!("data" in codeblock$$2)) {
            codeblock$$2.data = []
          }
          codeblock$$2.data.push({data:data$$99, start:offset$$38 + position$$2, end:offset$$38 + position$$2 + packetItem.dataLength, codingpasses:packetItem.codingpasses});
          position$$2 += packetItem.dataLength
        }
      }
      return position$$2
    }
    var SubbandsGainLog2 = {"LL":0, "LH":1, "HL":1, "HH":2};
    JpxImage$$1.prototype = {load:function JpxImage_load(url$$7) {
      var xhr$$2 = new PdfJS_window.XMLHttpRequest;
      xhr$$2.open("GET", url$$7, true);
      xhr$$2.responseType = "arraybuffer";
      xhr$$2.onload = function() {
        var data$$102 = new Uint8Array(xhr$$2.response || xhr$$2.mozResponseArrayBuffer);
        this.parse(data$$102);
        if(this.onload) {
          this.onload()
        }
      }.bind(this);
      xhr$$2.send(null)
    }, parse:function JpxImage_parse(data$$103) {
      function ReadUint(data$$104, offset$$41, bytes$$22) {
        var n$$45 = 0;
        var i$$182 = 0;
        for(;i$$182 < bytes$$22;i$$182++) {
          n$$45 = n$$45 * 256 + (data$$104[offset$$41 + i$$182] & 255)
        }
        return n$$45
      }
      var position$$4 = 0;
      var length$$72 = data$$103.length;
      for(;position$$4 < length$$72;) {
        var headerSize = 8;
        var lbox = ReadUint(data$$103, position$$4, 4);
        var tbox = ReadUint(data$$103, position$$4 + 4, 4);
        position$$4 += headerSize;
        if(lbox == 1) {
          lbox = ReadUint(data$$103, position$$4, 8);
          position$$4 += 8;
          headerSize += 8
        }
        if(lbox == 0) {
          lbox = length$$72 - position$$4 + headerSize
        }
        if(lbox < headerSize) {
          error$$3("JPX error: Invalid box field size")
        }
        var dataLength$$3 = lbox - headerSize;
        var jumpDataLength = true;
        switch(tbox) {
          case 1783634458:
            break;
          case 1785737832:
            jumpDataLength = false;
            break;
          case 1668246642:
            break;
          case 1785737827:
            this.parseCodestream(data$$103, position$$4, position$$4 + dataLength$$3)
        }
        if(jumpDataLength) {
          position$$4 += dataLength$$3
        }
      }
    }, parseCodestream:function JpxImage_parseCodestream(data$$105, start$$22, end$$17) {
      var context$$12 = {};
      try {
        var position$$5 = start$$22;
        for(;position$$5 < end$$17;) {
          var code$$25 = readUint16$$1(data$$105, position$$5);
          position$$5 += 2;
          var length$$73 = 0;
          var j$$66;
          switch(code$$25) {
            case 65359:
              context$$12.mainHeader = true;
              break;
            case 65497:
              break;
            case 65361:
              length$$73 = readUint16$$1(data$$105, position$$5);
              var siz$$7 = {};
              siz$$7.Xsiz = readUint32(data$$105, position$$5 + 4);
              siz$$7.Ysiz = readUint32(data$$105, position$$5 + 8);
              siz$$7.XOsiz = readUint32(data$$105, position$$5 + 12);
              siz$$7.YOsiz = readUint32(data$$105, position$$5 + 16);
              siz$$7.XTsiz = readUint32(data$$105, position$$5 + 20);
              siz$$7.YTsiz = readUint32(data$$105, position$$5 + 24);
              siz$$7.XTOsiz = readUint32(data$$105, position$$5 + 28);
              siz$$7.YTOsiz = readUint32(data$$105, position$$5 + 32);
              var componentsCount$$8 = readUint16$$1(data$$105, position$$5 + 36);
              siz$$7.Csiz = componentsCount$$8;
              var components$$6 = [];
              j$$66 = position$$5 + 38;
              var i$$183 = 0;
              for(;i$$183 < componentsCount$$8;i$$183++) {
                var component$$20 = {precision:(data$$105[j$$66] & 127) + 1, isSigned:!!(data$$105[j$$66] & 128), XRsiz:data$$105[j$$66 + 1], YRsiz:data$$105[j$$66 + 1]};
                var component$$inline_183 = component$$20;
                var siz$$inline_184 = siz$$7;
                component$$inline_183.x0 = Math.ceil(siz$$inline_184.XOsiz / component$$inline_183.XRsiz);
                component$$inline_183.x1 = Math.ceil(siz$$inline_184.Xsiz / component$$inline_183.XRsiz);
                component$$inline_183.y0 = Math.ceil(siz$$inline_184.YOsiz / component$$inline_183.YRsiz);
                component$$inline_183.y1 = Math.ceil(siz$$inline_184.Ysiz / component$$inline_183.YRsiz);
                component$$inline_183.width = component$$inline_183.x1 - component$$inline_183.x0;
                component$$inline_183.height = component$$inline_183.y1 - component$$inline_183.y0;
                components$$6.push(component$$20)
              }
              context$$12.SIZ = siz$$7;
              context$$12.components = components$$6;
              var context$$inline_186 = context$$12;
              var components$$inline_187 = components$$6;
              var siz$$inline_188 = context$$inline_186.SIZ;
              var tiles$$inline_189 = [];
              var numXtiles$$inline_190 = Math.ceil((siz$$inline_188.Xsiz - siz$$inline_188.XTOsiz) / siz$$inline_188.XTsiz);
              var numYtiles$$inline_191 = Math.ceil((siz$$inline_188.Ysiz - siz$$inline_188.YTOsiz) / siz$$inline_188.YTsiz);
              var q$$inline_192 = 0;
              for(;q$$inline_192 < numYtiles$$inline_191;q$$inline_192++) {
                var p$$inline_193 = 0;
                for(;p$$inline_193 < numXtiles$$inline_190;p$$inline_193++) {
                  var tile$$inline_194 = {};
                  tile$$inline_194.tx0 = Math.max(siz$$inline_188.XTOsiz + p$$inline_193 * siz$$inline_188.XTsiz, siz$$inline_188.XOsiz);
                  tile$$inline_194.ty0 = Math.max(siz$$inline_188.YTOsiz + q$$inline_192 * siz$$inline_188.YTsiz, siz$$inline_188.YOsiz);
                  tile$$inline_194.tx1 = Math.min(siz$$inline_188.XTOsiz + (p$$inline_193 + 1) * siz$$inline_188.XTsiz, siz$$inline_188.Xsiz);
                  tile$$inline_194.ty1 = Math.min(siz$$inline_188.YTOsiz + (q$$inline_192 + 1) * siz$$inline_188.YTsiz, siz$$inline_188.Ysiz);
                  tile$$inline_194.width = tile$$inline_194.tx1 - tile$$inline_194.tx0;
                  tile$$inline_194.height = tile$$inline_194.ty1 - tile$$inline_194.ty0;
                  tile$$inline_194.components = [];
                  tiles$$inline_189.push(tile$$inline_194)
                }
              }
              context$$inline_186.tiles = tiles$$inline_189;
              var componentsCount$$inline_195 = siz$$inline_188.Csiz;
              var i$$inline_196 = 0;
              var ii$$inline_197 = componentsCount$$inline_195;
              for(;i$$inline_196 < ii$$inline_197;i$$inline_196++) {
                var component$$inline_198 = components$$inline_187[i$$inline_196];
                var tileComponents$$inline_199 = [];
                var j$$inline_200 = 0;
                var jj$$inline_201 = tiles$$inline_189.length;
                for(;j$$inline_200 < jj$$inline_201;j$$inline_200++) {
                  var tileComponent$$inline_202 = {};
                  tile$$inline_194 = tiles$$inline_189[j$$inline_200];
                  tileComponent$$inline_202.tcx0 = Math.ceil(tile$$inline_194.tx0 / component$$inline_198.XRsiz);
                  tileComponent$$inline_202.tcy0 = Math.ceil(tile$$inline_194.ty0 / component$$inline_198.YRsiz);
                  tileComponent$$inline_202.tcx1 = Math.ceil(tile$$inline_194.tx1 / component$$inline_198.XRsiz);
                  tileComponent$$inline_202.tcy1 = Math.ceil(tile$$inline_194.ty1 / component$$inline_198.YRsiz);
                  tileComponent$$inline_202.width = tileComponent$$inline_202.tcx1 - tileComponent$$inline_202.tcx0;
                  tileComponent$$inline_202.height = tileComponent$$inline_202.tcy1 - tileComponent$$inline_202.tcy0;
                  tile$$inline_194.components[i$$inline_196] = tileComponent$$inline_202
                }
              }
              context$$12.QCC = [];
              context$$12.COC = [];
              break;
            case 65372:
              length$$73 = readUint16$$1(data$$105, position$$5);
              var qcd = {};
              j$$66 = position$$5 + 2;
              var sqcd = data$$105[j$$66++];
              var spqcdSize;
              var scalarExpounded$$1;
              switch(sqcd & 31) {
                case 0:
                  spqcdSize = 8;
                  scalarExpounded$$1 = true;
                  break;
                case 1:
                  spqcdSize = 16;
                  scalarExpounded$$1 = false;
                  break;
                case 2:
                  spqcdSize = 16;
                  scalarExpounded$$1 = true;
                  break;
                default:
                  throw"Invalid SQcd value " + sqcd;
              }
              qcd.noQuantization = spqcdSize == 8;
              qcd.scalarExpounded = scalarExpounded$$1;
              qcd.guardBits = sqcd >> 5;
              var spqcds$$1 = [];
              for(;j$$66 < length$$73 + position$$5;) {
                var spqcd = {};
                if(spqcdSize == 8) {
                  spqcd.epsilon = data$$105[j$$66++] >> 3;
                  spqcd.mu = 0
                }else {
                  spqcd.epsilon = data$$105[j$$66] >> 3;
                  spqcd.mu = (data$$105[j$$66] & 7) << 8 | data$$105[j$$66 + 1];
                  j$$66 += 2
                }
                spqcds$$1.push(spqcd)
              }
              qcd.SPqcds = spqcds$$1;
              if(context$$12.mainHeader) {
                context$$12.QCD = qcd
              }else {
                context$$12.currentTile.QCD = qcd;
                context$$12.currentTile.QCC = []
              }
              break;
            case 65373:
              length$$73 = readUint16$$1(data$$105, position$$5);
              var qcc = {};
              j$$66 = position$$5 + 2;
              var cqcc;
              if(context$$12.SIZ.Csiz < 257) {
                cqcc = data$$105[j$$66++]
              }else {
                cqcc = readUint16$$1(data$$105, j$$66);
                j$$66 += 2
              }
              sqcd = data$$105[j$$66++];
              switch(sqcd & 31) {
                case 0:
                  spqcdSize = 8;
                  scalarExpounded$$1 = true;
                  break;
                case 1:
                  spqcdSize = 16;
                  scalarExpounded$$1 = false;
                  break;
                case 2:
                  spqcdSize = 16;
                  scalarExpounded$$1 = true;
                  break;
                default:
                  throw"Invalid SQcd value " + sqcd;
              }
              qcc.noQuantization = spqcdSize == 8;
              qcc.scalarExpounded = scalarExpounded$$1;
              qcc.guardBits = sqcd >> 5;
              spqcds$$1 = [];
              for(;j$$66 < length$$73 + position$$5;) {
                spqcd = {};
                if(spqcdSize == 8) {
                  spqcd.epsilon = data$$105[j$$66++] >> 3;
                  spqcd.mu = 0
                }else {
                  spqcd.epsilon = data$$105[j$$66] >> 3;
                  spqcd.mu = (data$$105[j$$66] & 7) << 8 | data$$105[j$$66 + 1];
                  j$$66 += 2
                }
                spqcds$$1.push(spqcd)
              }
              qcc.SPqcds = spqcds$$1;
              if(context$$12.mainHeader) {
                context$$12.QCC[cqcc] = qcc
              }else {
                context$$12.currentTile.QCC[cqcc] = qcc
              }
              break;
            case 65362:
              length$$73 = readUint16$$1(data$$105, position$$5);
              var cod = {};
              j$$66 = position$$5 + 2;
              var scod = data$$105[j$$66++];
              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);
              cod.sopMarkerUsed = !!(scod & 2);
              cod.ephMarkerUsed = !!(scod & 4);
              cod.progressionOrder = data$$105[j$$66++];
              cod.layersCount = readUint16$$1(data$$105, j$$66);
              j$$66 += 2;
              cod.multipleComponentTransform = data$$105[j$$66++];
              cod.decompositionLevelsCount = data$$105[j$$66++];
              cod.xcb = (data$$105[j$$66++] & 15) + 2;
              cod.ycb = (data$$105[j$$66++] & 15) + 2;
              var blockStyle = data$$105[j$$66++];
              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);
              cod.resetContextProbabilities = !!(blockStyle & 2);
              cod.terminationOnEachCodingPass = !!(blockStyle & 4);
              cod.verticalyStripe = !!(blockStyle & 8);
              cod.predictableTermination = !!(blockStyle & 16);
              cod.segmentationSymbolUsed = !!(blockStyle & 32);
              cod.transformation = data$$105[j$$66++];
              if(cod.entropyCoderWithCustomPrecincts) {
                var precinctsSizes = {};
                for(;j$$66 < length$$73 + position$$5;) {
                  var precinctsSize = data$$105[j$$66];
                  precinctsSizes.push({PPx:precinctsSize & 15, PPy:precinctsSize >> 4})
                }
                cod.precinctsSizes = precinctsSizes
              }
              if(cod.sopMarkerUsed || cod.ephMarkerUsed || cod.selectiveArithmeticCodingBypass || cod.resetContextProbabilities || cod.terminationOnEachCodingPass || cod.verticalyStripe || cod.predictableTermination || cod.segmentationSymbolUsed) {
                throw"Unsupported COD options: " + uneval(cod);
              }
              if(context$$12.mainHeader) {
                context$$12.COD = cod
              }else {
                context$$12.currentTile.COD = cod;
                context$$12.currentTile.COC = []
              }
              break;
            case 65424:
              length$$73 = readUint16$$1(data$$105, position$$5);
              var tile$$8 = {};
              tile$$8.index = readUint16$$1(data$$105, position$$5 + 2);
              tile$$8.length = readUint32(data$$105, position$$5 + 4);
              tile$$8.dataEnd = tile$$8.length + position$$5 - 2;
              tile$$8.partIndex = data$$105[position$$5 + 8];
              tile$$8.partsCount = data$$105[position$$5 + 9];
              context$$12.mainHeader = false;
              if(tile$$8.partIndex == 0) {
                tile$$8.COD = context$$12.COD;
                tile$$8.COC = context$$12.COC.slice(0);
                tile$$8.QCD = context$$12.QCD;
                tile$$8.QCC = context$$12.QCC.slice(0)
              }
              context$$12.currentTile = tile$$8;
              break;
            case 65427:
              tile$$8 = context$$12.currentTile;
              if(tile$$8.partIndex == 0) {
                var context$$inline_204 = context$$12;
                var siz$$inline_206 = context$$inline_204.SIZ;
                var componentsCount$$inline_207 = siz$$inline_206.Csiz;
                var tile$$inline_208 = context$$inline_204.tiles[tile$$8.index];
                var resultTiles$$inline_209 = [];
                var c$$inline_210 = 0;
                for(;c$$inline_210 < componentsCount$$inline_207;c$$inline_210++) {
                  var component$$inline_211 = tile$$inline_208.components[c$$inline_210];
                  var qcdOrQcc$$inline_212 = c$$inline_210 in context$$inline_204.currentTile.QCC ? context$$inline_204.currentTile.QCC[c$$inline_210] : context$$inline_204.currentTile.QCD;
                  component$$inline_211.quantizationParameters = qcdOrQcc$$inline_212;
                  var codOrCoc$$inline_213 = c$$inline_210 in context$$inline_204.currentTile.COC ? context$$inline_204.currentTile.COC[c$$inline_210] : context$$inline_204.currentTile.COD;
                  component$$inline_211.codingStyleParameters = codOrCoc$$inline_213
                }
                tile$$inline_208.codingStyleDefaultParameters = context$$inline_204.currentTile.COD;
                var context$$inline_215 = context$$12;
                var siz$$inline_216 = context$$inline_215.SIZ;
                var tileIndex$$inline_217 = context$$inline_215.currentTile.index;
                var tile$$inline_218 = context$$inline_215.tiles[tileIndex$$inline_217];
                var componentsCount$$inline_219 = siz$$inline_216.Csiz;
                var c$$inline_220 = 0;
                for(;c$$inline_220 < componentsCount$$inline_219;c$$inline_220++) {
                  var component$$inline_221 = tile$$inline_218.components[c$$inline_220];
                  var decompositionLevelsCount$$inline_222 = component$$inline_221.codingStyleParameters.decompositionLevelsCount;
                  var resolutions$$inline_223 = [];
                  var subbands$$inline_224 = [];
                  var r$$inline_225 = 0;
                  for(;r$$inline_225 <= decompositionLevelsCount$$inline_222;r$$inline_225++) {
                    var blocksDimensions$$inline_226;
                    var r$$inline_297 = r$$inline_225;
                    var codOrCoc$$inline_298 = component$$inline_221.codingStyleParameters;
                    var result$$inline_299 = {};
                    if(!codOrCoc$$inline_298.entropyCoderWithCustomPrecincts) {
                      result$$inline_299.PPx = 15;
                      result$$inline_299.PPy = 15
                    }else {
                      result$$inline_299.PPx = codOrCoc$$inline_298.precinctsSizes[r$$inline_297].PPx;
                      result$$inline_299.PPy = codOrCoc$$inline_298.precinctsSizes[r$$inline_297].PPy
                    }
                    result$$inline_299.xcb_ = r$$inline_297 > 0 ? Math.min(codOrCoc$$inline_298.xcb, result$$inline_299.PPx - 1) : Math.min(codOrCoc$$inline_298.xcb, result$$inline_299.PPx);
                    result$$inline_299.ycb_ = r$$inline_297 > 0 ? Math.min(codOrCoc$$inline_298.ycb, result$$inline_299.PPy - 1) : Math.min(codOrCoc$$inline_298.ycb, result$$inline_299.PPy);
                    blocksDimensions$$inline_226 = result$$inline_299;
                    var resolution$$inline_227 = {};
                    var scale$$inline_228 = 1 << decompositionLevelsCount$$inline_222 - r$$inline_225;
                    resolution$$inline_227.trx0 = Math.ceil(component$$inline_221.tcx0 / scale$$inline_228);
                    resolution$$inline_227.try0 = Math.ceil(component$$inline_221.tcy0 / scale$$inline_228);
                    resolution$$inline_227.trx1 = Math.ceil(component$$inline_221.tcx1 / scale$$inline_228);
                    resolution$$inline_227.try1 = Math.ceil(component$$inline_221.tcy1 / scale$$inline_228);
                    var resolution$$inline_302 = resolution$$inline_227;
                    var precinctWidth$$inline_304 = 1 << blocksDimensions$$inline_226.PPx;
                    var precinctHeight$$inline_305 = 1 << blocksDimensions$$inline_226.PPy;
                    var numprecinctswide$$inline_306 = resolution$$inline_302.trx1 > resolution$$inline_302.trx0 ? Math.ceil(resolution$$inline_302.trx1 / precinctWidth$$inline_304) - Math.floor(resolution$$inline_302.trx0 / precinctWidth$$inline_304) : 0;
                    var numprecinctshigh$$inline_307 = resolution$$inline_302.try1 > resolution$$inline_302.try0 ? Math.ceil(resolution$$inline_302.try1 / precinctHeight$$inline_305) - Math.floor(resolution$$inline_302.try0 / precinctHeight$$inline_305) : 0;
                    var numprecincts$$inline_308 = numprecinctswide$$inline_306 * numprecinctshigh$$inline_307;
                    var precinctXOffset$$inline_309 = Math.floor(resolution$$inline_302.trx0 / precinctWidth$$inline_304) * precinctWidth$$inline_304;
                    var precinctYOffset$$inline_310 = Math.floor(resolution$$inline_302.try0 / precinctHeight$$inline_305) * precinctHeight$$inline_305;
                    resolution$$inline_302.precinctParameters = {precinctXOffset:precinctXOffset$$inline_309, precinctYOffset:precinctYOffset$$inline_310, precinctWidth:precinctWidth$$inline_304, precinctHeight:precinctHeight$$inline_305, numprecinctswide:numprecinctswide$$inline_306, numprecinctshigh:numprecinctshigh$$inline_307, numprecincts:numprecincts$$inline_308};
                    resolutions$$inline_223.push(resolution$$inline_227);
                    var subband$$inline_229;
                    if(r$$inline_225 == 0) {
                      subband$$inline_229 = {};
                      subband$$inline_229.type = "LL";
                      subband$$inline_229.tbx0 = Math.ceil(component$$inline_221.tcx0 / scale$$inline_228);
                      subband$$inline_229.tby0 = Math.ceil(component$$inline_221.tcy0 / scale$$inline_228);
                      subband$$inline_229.tbx1 = Math.ceil(component$$inline_221.tcx1 / scale$$inline_228);
                      subband$$inline_229.tby1 = Math.ceil(component$$inline_221.tcy1 / scale$$inline_228);
                      subband$$inline_229.resolution = resolution$$inline_227;
                      buildCodeblocks(context$$inline_215, subband$$inline_229, blocksDimensions$$inline_226);
                      subbands$$inline_224.push(subband$$inline_229);
                      resolution$$inline_227.subbands = [subband$$inline_229]
                    }else {
                      var bscale$$inline_230 = 1 << decompositionLevelsCount$$inline_222 - r$$inline_225 + 1;
                      var resolutionSubbands$$inline_231 = [];
                      subband$$inline_229 = {};
                      subband$$inline_229.type = "HL";
                      subband$$inline_229.tbx0 = Math.ceil(component$$inline_221.tcx0 / bscale$$inline_230 - 0.5);
                      subband$$inline_229.tby0 = Math.ceil(component$$inline_221.tcy0 / bscale$$inline_230);
                      subband$$inline_229.tbx1 = Math.ceil(component$$inline_221.tcx1 / bscale$$inline_230 - 0.5);
                      subband$$inline_229.tby1 = Math.ceil(component$$inline_221.tcy1 / bscale$$inline_230);
                      subband$$inline_229.resolution = resolution$$inline_227;
                      buildCodeblocks(context$$inline_215, subband$$inline_229, blocksDimensions$$inline_226);
                      subbands$$inline_224.push(subband$$inline_229);
                      resolutionSubbands$$inline_231.push(subband$$inline_229);
                      subband$$inline_229 = {};
                      subband$$inline_229.type = "LH";
                      subband$$inline_229.tbx0 = Math.ceil(component$$inline_221.tcx0 / bscale$$inline_230);
                      subband$$inline_229.tby0 = Math.ceil(component$$inline_221.tcy0 / bscale$$inline_230 - 0.5);
                      subband$$inline_229.tbx1 = Math.ceil(component$$inline_221.tcx1 / bscale$$inline_230);
                      subband$$inline_229.tby1 = Math.ceil(component$$inline_221.tcy1 / bscale$$inline_230 - 0.5);
                      subband$$inline_229.resolution = resolution$$inline_227;
                      buildCodeblocks(context$$inline_215, subband$$inline_229, blocksDimensions$$inline_226);
                      subbands$$inline_224.push(subband$$inline_229);
                      resolutionSubbands$$inline_231.push(subband$$inline_229);
                      subband$$inline_229 = {};
                      subband$$inline_229.type = "HH";
                      subband$$inline_229.tbx0 = Math.ceil(component$$inline_221.tcx0 / bscale$$inline_230 - 0.5);
                      subband$$inline_229.tby0 = Math.ceil(component$$inline_221.tcy0 / bscale$$inline_230 - 0.5);
                      subband$$inline_229.tbx1 = Math.ceil(component$$inline_221.tcx1 / bscale$$inline_230 - 0.5);
                      subband$$inline_229.tby1 = Math.ceil(component$$inline_221.tcy1 / bscale$$inline_230 - 0.5);
                      subband$$inline_229.resolution = resolution$$inline_227;
                      buildCodeblocks(context$$inline_215, subband$$inline_229, blocksDimensions$$inline_226);
                      subbands$$inline_224.push(subband$$inline_229);
                      resolutionSubbands$$inline_231.push(subband$$inline_229);
                      resolution$$inline_227.subbands = resolutionSubbands$$inline_231
                    }
                  }
                  component$$inline_221.resolutions = resolutions$$inline_223;
                  component$$inline_221.subbands = subbands$$inline_224
                }
                var progressionOrder$$inline_232 = tile$$inline_218.codingStyleDefaultParameters.progressionOrder;
                var packetsIterator$$inline_233 = void 0;
                switch(progressionOrder$$inline_232) {
                  case 0:
                    tile$$inline_218.packetsIterator = new LayerResolutionComponentPositionIterator(context$$inline_215);
                    break;
                  case 1:
                    tile$$inline_218.packetsIterator = new ResolutionLayerComponentPositionIterator(context$$inline_215);
                    break;
                  default:
                    throw"Unsupported progression order " + progressionOrder$$inline_232;
                }
              }
              length$$73 = tile$$8.dataEnd - position$$5;
              parseTilePackets(context$$12, data$$105, position$$5, length$$73);
              break;
            case 65380:
              length$$73 = readUint16$$1(data$$105, position$$5);
              break;
            default:
              throw"Unknown codestream code: " + code$$25.toString(16);
          }
          position$$5 += length$$73
        }
      }catch(e$$29) {
        if(this.failOnCorruptedImage) {
          error$$3("JPX error: " + e$$29)
        }else {
          warn("JPX error: " + e$$29 + ". Trying to recover")
        }
      }
      var JSCompiler_inline_result$$4;
      var context$$inline_235 = context$$12;
      var siz$$inline_236 = context$$inline_235.SIZ;
      var components$$inline_237 = context$$inline_235.components;
      var componentsCount$$inline_238 = siz$$inline_236.Csiz;
      var resultImages$$inline_239 = [];
      var i$$inline_240 = 0;
      var ii$$inline_241 = context$$inline_235.tiles.length;
      for(;i$$inline_240 < ii$$inline_241;i$$inline_240++) {
        var tile$$inline_242 = context$$inline_235.tiles[i$$inline_240];
        var result$$inline_243 = [];
        var c$$inline_244 = 0;
        for(;c$$inline_244 < componentsCount$$inline_238;c$$inline_244++) {
          var image$$inline_245;
          var component$$inline_315 = tile$$inline_242.components[c$$inline_244];
          var codingStyleParameters$$inline_316 = component$$inline_315.codingStyleParameters;
          var quantizationParameters$$inline_317 = component$$inline_315.quantizationParameters;
          var decompositionLevelsCount$$inline_318 = codingStyleParameters$$inline_316.decompositionLevelsCount;
          var spqcds$$inline_319 = quantizationParameters$$inline_317.SPqcds;
          var scalarExpounded$$inline_320 = quantizationParameters$$inline_317.scalarExpounded;
          var guardBits$$inline_321 = quantizationParameters$$inline_317.guardBits;
          var transformation$$inline_322 = codingStyleParameters$$inline_316.transformation;
          var precision$$inline_323 = context$$inline_235.components[c$$inline_244].precision;
          var subbandCoefficients$$inline_324 = [];
          var k$$inline_325 = 0;
          var b$$inline_326 = 0;
          var i$$inline_327 = 0;
          for(;i$$inline_327 <= decompositionLevelsCount$$inline_318;i$$inline_327++) {
            var resolution$$inline_328 = component$$inline_315.resolutions[i$$inline_327];
            var j$$inline_329 = 0;
            var jj$$inline_330 = resolution$$inline_328.subbands.length;
            for(;j$$inline_329 < jj$$inline_330;j$$inline_329++) {
              var mu$$inline_331;
              var epsilon$$inline_332;
              if(!scalarExpounded$$inline_320) {
                mu$$inline_331 = spqcds$$inline_319[0].mu;
                epsilon$$inline_332 = spqcds$$inline_319[0].epsilon + (i$$inline_327 > 0 ? 1 - i$$inline_327 : 0)
              }else {
                mu$$inline_331 = spqcds$$inline_319[b$$inline_326].mu;
                epsilon$$inline_332 = spqcds$$inline_319[b$$inline_326].epsilon
              }
              var subband$$inline_333 = resolution$$inline_328.subbands[j$$inline_329];
              var width$$inline_334 = subband$$inline_333.tbx1 - subband$$inline_333.tbx0;
              var height$$inline_335 = subband$$inline_333.tby1 - subband$$inline_333.tby0;
              var gainLog2$$inline_336 = SubbandsGainLog2[subband$$inline_333.type];
              var delta$$inline_337 = Math.pow(2, precision$$inline_323 + gainLog2$$inline_336 - epsilon$$inline_332) * (1 + mu$$inline_331 / 2048);
              var mb$$inline_338 = guardBits$$inline_321 + epsilon$$inline_332 - 1;
              var coefficients$$inline_339 = new Float32Array(width$$inline_334 * height$$inline_335);
              var coefficients$$inline_340 = coefficients$$inline_339;
              var x0$$inline_341 = subband$$inline_333.tbx0;
              var y0$$inline_342 = subband$$inline_333.tby0;
              var width$$inline_343 = width$$inline_334;
              var delta$$inline_344 = delta$$inline_337;
              var mb$$inline_345 = mb$$inline_338;
              var codeblocks$$inline_346 = subband$$inline_333.codeblocks;
              var transformation$$inline_347 = transformation$$inline_322;
              var r$$inline_348 = 0.5;
              var i$$inline_349 = 0;
              var ii$$inline_350 = codeblocks$$inline_346.length;
              for(;i$$inline_349 < ii$$inline_350;++i$$inline_349) {
                var codeblock$$inline_351 = codeblocks$$inline_346[i$$inline_349];
                var blockWidth$$inline_352 = codeblock$$inline_351.tbx1_ - codeblock$$inline_351.tbx0_;
                var blockHeight$$inline_353 = codeblock$$inline_351.tby1_ - codeblock$$inline_351.tby0_;
                if(blockWidth$$inline_352 == 0 || blockHeight$$inline_353 == 0) {
                  continue
                }
                if(!("data" in codeblock$$inline_351)) {
                  continue
                }
                var bitModel$$inline_354;
                var currentCodingpassType$$inline_355;
                bitModel$$inline_354 = new BitModel(blockWidth$$inline_352, blockHeight$$inline_353, codeblock$$inline_351.subbandType, codeblock$$inline_351.zeroBitPlanes);
                currentCodingpassType$$inline_355 = 2;
                var data$$inline_356 = codeblock$$inline_351.data;
                var totalLength$$inline_357 = 0;
                var codingpasses$$inline_358 = 0;
                var q$$inline_359 = 0;
                var qq$$inline_360 = data$$inline_356.length;
                for(;q$$inline_359 < qq$$inline_360;q$$inline_359++) {
                  var dataItem$$inline_361 = data$$inline_356[q$$inline_359];
                  totalLength$$inline_357 += dataItem$$inline_361.end - dataItem$$inline_361.start;
                  codingpasses$$inline_358 += dataItem$$inline_361.codingpasses
                }
                var encodedData$$inline_362 = new Uint8Array(totalLength$$inline_357);
                var k$$inline_363 = 0;
                q$$inline_359 = 0;
                qq$$inline_360 = data$$inline_356.length;
                for(;q$$inline_359 < qq$$inline_360;q$$inline_359++) {
                  dataItem$$inline_361 = data$$inline_356[q$$inline_359];
                  var chunk$$inline_364 = dataItem$$inline_361.data.subarray(dataItem$$inline_361.start, dataItem$$inline_361.end);
                  encodedData$$inline_362.set(chunk$$inline_364, k$$inline_363);
                  k$$inline_363 += chunk$$inline_364.length
                }
                var decoder$$inline_365 = new ArithmeticDecoder(encodedData$$inline_362, 0, totalLength$$inline_357);
                bitModel$$inline_354.setDecoder(decoder$$inline_365);
                q$$inline_359 = 0;
                for(;q$$inline_359 < codingpasses$$inline_358;q$$inline_359++) {
                  switch(currentCodingpassType$$inline_355) {
                    case 0:
                      bitModel$$inline_354.runSignificancePropogationPass();
                      break;
                    case 1:
                      bitModel$$inline_354.runMagnitudeRefinementPass();
                      break;
                    case 2:
                      bitModel$$inline_354.runCleanupPass()
                  }
                  currentCodingpassType$$inline_355 = (currentCodingpassType$$inline_355 + 1) % 3
                }
                var offset$$inline_366 = codeblock$$inline_351.tbx0_ - x0$$inline_341 + (codeblock$$inline_351.tby0_ - y0$$inline_342) * width$$inline_343;
                var position$$inline_367 = 0;
                var j$$inline_368 = 0;
                for(;j$$inline_368 < blockHeight$$inline_353;j$$inline_368++) {
                  k$$inline_363 = 0;
                  for(;k$$inline_363 < blockWidth$$inline_352;k$$inline_363++) {
                    var n$$inline_369 = (bitModel$$inline_354.coefficentsSign[position$$inline_367] ? -1 : 1) * bitModel$$inline_354.coefficentsMagnitude[position$$inline_367];
                    var nb$$inline_370 = bitModel$$inline_354.bitsDecoded[position$$inline_367];
                    var correction$$inline_371;
                    if(transformation$$inline_347 == 0 || mb$$inline_345 > nb$$inline_370) {
                      n$$inline_369 += n$$inline_369 < 0 ? n$$inline_369 - r$$inline_348 : n$$inline_369 > 0 ? n$$inline_369 + r$$inline_348 : 0;
                      correction$$inline_371 = 1 << mb$$inline_345 - nb$$inline_370
                    }else {
                      correction$$inline_371 = 1
                    }
                    coefficients$$inline_340[offset$$inline_366++] = n$$inline_369 * correction$$inline_371 * delta$$inline_344;
                    position$$inline_367++
                  }
                  offset$$inline_366 += width$$inline_343 - blockWidth$$inline_352
                }
              }
              subbandCoefficients$$inline_324.push({width:width$$inline_334, height:height$$inline_335, items:coefficients$$inline_339});
              b$$inline_326++
            }
          }
          transformation$$inline_322 = codingStyleParameters$$inline_316.transformation;
          var transform$$inline_372 = transformation$$inline_322 == 0 ? new IrreversibleTransform : new ReversibleTransform;
          var result$$inline_373 = transform$$inline_372.calculate(subbandCoefficients$$inline_324, component$$inline_315.tcx0, component$$inline_315.tcy0);
          image$$inline_245 = {left:component$$inline_315.tcx0, top:component$$inline_315.tcy0, width:result$$inline_373.width, height:result$$inline_373.height, items:result$$inline_373.items};
          result$$inline_243.push(image$$inline_245)
        }
        if(tile$$inline_242.codingStyleDefaultParameters.multipleComponentTransform) {
          var y0items$$inline_246 = result$$inline_243[0].items;
          var y1items$$inline_247 = result$$inline_243[1].items;
          var y2items$$inline_248 = result$$inline_243[2].items;
          var j$$inline_249 = 0;
          var jj$$inline_250 = y0items$$inline_246.length;
          for(;j$$inline_249 < jj$$inline_250;j$$inline_249++) {
            var y0$$inline_251 = y0items$$inline_246[j$$inline_249];
            var y1$$inline_252 = y1items$$inline_247[j$$inline_249];
            var y2$$inline_253 = y2items$$inline_248[j$$inline_249];
            var i1$$inline_254 = y0$$inline_251 - (y2$$inline_253 + y1$$inline_252 >> 2);
            y1items$$inline_247[j$$inline_249] = i1$$inline_254;
            y0items$$inline_246[j$$inline_249] = y2$$inline_253 + i1$$inline_254;
            y2items$$inline_248[j$$inline_249] = y1$$inline_252 + i1$$inline_254
          }
        }
        c$$inline_244 = 0;
        for(;c$$inline_244 < componentsCount$$inline_238;c$$inline_244++) {
          var component$$inline_255 = components$$inline_237[c$$inline_244];
          if(component$$inline_255.isSigned) {
            continue
          }
          var offset$$inline_256 = 1 << component$$inline_255.precision - 1;
          var tileImage$$inline_257 = result$$inline_243[c$$inline_244];
          var items$$inline_258 = tileImage$$inline_257.items;
          j$$inline_249 = 0;
          jj$$inline_250 = items$$inline_258.length;
          for(;j$$inline_249 < jj$$inline_250;j$$inline_249++) {
            items$$inline_258[j$$inline_249] += offset$$inline_256
          }
        }
        c$$inline_244 = 0;
        for(;c$$inline_244 < componentsCount$$inline_238;c$$inline_244++) {
          component$$inline_255 = components$$inline_237[c$$inline_244];
          offset$$inline_256 = component$$inline_255.isSigned ? 128 : 0;
          var shift$$inline_259 = component$$inline_255.precision - 8;
          tileImage$$inline_257 = result$$inline_243[c$$inline_244];
          items$$inline_258 = tileImage$$inline_257.items;
          var data$$inline_260 = new Uint8Array(items$$inline_258.length);
          j$$inline_249 = 0;
          jj$$inline_250 = items$$inline_258.length;
          for(;j$$inline_249 < jj$$inline_250;j$$inline_249++) {
            var value$$inline_261 = (items$$inline_258[j$$inline_249] >> shift$$inline_259) + offset$$inline_256;
            data$$inline_260[j$$inline_249] = value$$inline_261 < 0 ? 0 : value$$inline_261 > 255 ? 255 : value$$inline_261
          }
          result$$inline_243[c$$inline_244].items = data$$inline_260
        }
        resultImages$$inline_239.push(result$$inline_243)
      }
      JSCompiler_inline_result$$4 = resultImages$$inline_239;
      this.tiles = JSCompiler_inline_result$$4;
      this.width = context$$12.SIZ.Xsiz - context$$12.SIZ.XOsiz;
      this.height = context$$12.SIZ.Ysiz - context$$12.SIZ.YOsiz;
      this.componentsCount = context$$12.SIZ.Csiz
    }};
    var TagTree = function TagTreeClosure() {
      function TagTree$$1(width$$37, height$$29) {
        var levelsLength = log2(Math.max(width$$37, height$$29)) + 1;
        this.levels = [];
        var i$$184 = 0;
        for(;i$$184 < levelsLength;i$$184++) {
          var level$$7 = {width:width$$37, height:height$$29, items:[]};
          this.levels.push(level$$7);
          width$$37 = Math.ceil(width$$37 / 2);
          height$$29 = Math.ceil(height$$29 / 2)
        }
      }
      TagTree$$1.prototype = {reset:function TagTree_reset(i$$185, j$$67) {
        var currentLevel = 0;
        var value$$72 = 0;
        for(;currentLevel < this.levels.length;) {
          var level$$8 = this.levels[currentLevel];
          var index$$61 = i$$185 + j$$67 * level$$8.width;
          if(index$$61 in level$$8.items) {
            value$$72 = level$$8.items[index$$61];
            break
          }
          level$$8.index = index$$61;
          i$$185 >>= 1;
          j$$67 >>= 1;
          currentLevel++
        }
        currentLevel--;
        level$$8 = this.levels[currentLevel];
        level$$8.items[level$$8.index] = value$$72;
        this.currentLevel = currentLevel;
        delete this.value
      }, incrementValue:function TagTree_incrementValue() {
        var level$$9 = this.levels[this.currentLevel];
        level$$9.items[level$$9.index]++
      }, nextLevel:function TagTree_nextLevel() {
        var currentLevel$$1 = this.currentLevel;
        var level$$10 = this.levels[currentLevel$$1];
        var value$$73 = level$$10.items[level$$10.index];
        currentLevel$$1--;
        if(currentLevel$$1 < 0) {
          this.value = value$$73;
          return false
        }
        this.currentLevel = currentLevel$$1;
        level$$10 = this.levels[currentLevel$$1];
        level$$10.items[level$$10.index] = value$$73;
        return true
      }};
      return TagTree$$1
    }();
    var InclusionTree = function InclusionTreeClosure() {
      function InclusionTree$$1(width$$38, height$$30, defaultValue) {
        var levelsLength$$1 = log2(Math.max(width$$38, height$$30)) + 1;
        this.levels = [];
        var i$$186 = 0;
        for(;i$$186 < levelsLength$$1;i$$186++) {
          var items$$3 = new Uint8Array(width$$38 * height$$30);
          var j$$68 = 0;
          var jj$$17 = items$$3.length;
          for(;j$$68 < jj$$17;j$$68++) {
            items$$3[j$$68] = defaultValue
          }
          var level$$11 = {width:width$$38, height:height$$30, items:items$$3};
          this.levels.push(level$$11);
          width$$38 = Math.ceil(width$$38 / 2);
          height$$30 = Math.ceil(height$$30 / 2)
        }
      }
      InclusionTree$$1.prototype = {reset:function InclusionTree_reset(i$$187, j$$69, stopValue) {
        var currentLevel$$2 = 0;
        for(;currentLevel$$2 < this.levels.length;) {
          var level$$12 = this.levels[currentLevel$$2];
          var index$$62 = i$$187 + j$$69 * level$$12.width;
          level$$12.index = index$$62;
          var value$$74 = level$$12.items[index$$62];
          if(value$$74 == 255) {
            break
          }
          if(value$$74 > stopValue) {
            this.currentLevel = currentLevel$$2;
            this.propagateValues();
            return false
          }
          i$$187 >>= 1;
          j$$69 >>= 1;
          currentLevel$$2++
        }
        this.currentLevel = currentLevel$$2 - 1;
        return true
      }, incrementValue:function InclusionTree_incrementValue(stopValue$$1) {
        var level$$13 = this.levels[this.currentLevel];
        level$$13.items[level$$13.index] = stopValue$$1 + 1;
        this.propagateValues()
      }, propagateValues:function InclusionTree_propagateValues() {
        var levelIndex = this.currentLevel;
        var level$$14 = this.levels[levelIndex];
        var currentValue = level$$14.items[level$$14.index];
        for(;--levelIndex >= 0;) {
          level$$14 = this.levels[levelIndex];
          level$$14.items[level$$14.index] = currentValue
        }
      }, nextLevel:function InclusionTree_nextLevel() {
        var currentLevel$$3 = this.currentLevel;
        var level$$15 = this.levels[currentLevel$$3];
        var value$$75 = level$$15.items[level$$15.index];
        level$$15.items[level$$15.index] = 255;
        currentLevel$$3--;
        if(currentLevel$$3 < 0) {
          return false
        }
        this.currentLevel = currentLevel$$3;
        level$$15 = this.levels[currentLevel$$3];
        level$$15.items[level$$15.index] = value$$75;
        return true
      }};
      return InclusionTree$$1
    }();
    var ArithmeticDecoder = function ArithmeticDecoderClosure() {
      function ArithmeticDecoder$$1(data$$106, start$$23, end$$18) {
        this.data = data$$106;
        this.bp = start$$23;
        this.dataEnd = end$$18;
        this.chigh = data$$106[start$$23];
        this.clow = 0;
        this.byteIn();
        this.chigh = this.chigh << 7 & 65535 | this.clow >> 9 & 127;
        this.clow = this.clow << 7 & 65535;
        this.ct -= 7;
        this.a = 32768
      }
      var QeTable = [{qe:22017, nmps:1, nlps:1, switchFlag:1}, {qe:13313, nmps:2, nlps:6, switchFlag:0}, {qe:6145, nmps:3, nlps:9, switchFlag:0}, {qe:2753, nmps:4, nlps:12, switchFlag:0}, {qe:1313, nmps:5, nlps:29, switchFlag:0}, {qe:545, nmps:38, nlps:33, switchFlag:0}, {qe:22017, nmps:7, nlps:6, switchFlag:1}, {qe:21505, nmps:8, nlps:14, switchFlag:0}, {qe:18433, nmps:9, nlps:14, switchFlag:0}, {qe:14337, nmps:10, nlps:14, switchFlag:0}, {qe:12289, nmps:11, nlps:17, switchFlag:0}, {qe:9217, nmps:12, 
      nlps:18, switchFlag:0}, {qe:7169, nmps:13, nlps:20, switchFlag:0}, {qe:5633, nmps:29, nlps:21, switchFlag:0}, {qe:22017, nmps:15, nlps:14, switchFlag:1}, {qe:21505, nmps:16, nlps:14, switchFlag:0}, {qe:20737, nmps:17, nlps:15, switchFlag:0}, {qe:18433, nmps:18, nlps:16, switchFlag:0}, {qe:14337, nmps:19, nlps:17, switchFlag:0}, {qe:13313, nmps:20, nlps:18, switchFlag:0}, {qe:12289, nmps:21, nlps:19, switchFlag:0}, {qe:10241, nmps:22, nlps:19, switchFlag:0}, {qe:9217, nmps:23, nlps:20, switchFlag:0}, 
      {qe:8705, nmps:24, nlps:21, switchFlag:0}, {qe:7169, nmps:25, nlps:22, switchFlag:0}, {qe:6145, nmps:26, nlps:23, switchFlag:0}, {qe:5633, nmps:27, nlps:24, switchFlag:0}, {qe:5121, nmps:28, nlps:25, switchFlag:0}, {qe:4609, nmps:29, nlps:26, switchFlag:0}, {qe:4353, nmps:30, nlps:27, switchFlag:0}, {qe:2753, nmps:31, nlps:28, switchFlag:0}, {qe:2497, nmps:32, nlps:29, switchFlag:0}, {qe:2209, nmps:33, nlps:30, switchFlag:0}, {qe:1313, nmps:34, nlps:31, switchFlag:0}, {qe:1089, nmps:35, nlps:32, 
      switchFlag:0}, {qe:673, nmps:36, nlps:33, switchFlag:0}, {qe:545, nmps:37, nlps:34, switchFlag:0}, {qe:321, nmps:38, nlps:35, switchFlag:0}, {qe:273, nmps:39, nlps:36, switchFlag:0}, {qe:133, nmps:40, nlps:37, switchFlag:0}, {qe:73, nmps:41, nlps:38, switchFlag:0}, {qe:37, nmps:42, nlps:39, switchFlag:0}, {qe:21, nmps:43, nlps:40, switchFlag:0}, {qe:9, nmps:44, nlps:41, switchFlag:0}, {qe:5, nmps:45, nlps:42, switchFlag:0}, {qe:1, nmps:45, nlps:43, switchFlag:0}, {qe:22017, nmps:46, nlps:46, 
      switchFlag:0}];
      ArithmeticDecoder$$1.prototype = {byteIn:function ArithmeticDecoder_byteIn() {
        var data$$107 = this.data;
        var bp = this.bp;
        if(data$$107[bp] == 255) {
          var b1$$2 = data$$107[bp + 1];
          if(b1$$2 > 143) {
            this.clow += 65280;
            this.ct = 8
          }else {
            bp++;
            this.clow += data$$107[bp] << 9;
            this.ct = 7;
            this.bp = bp
          }
        }else {
          bp++;
          this.clow += bp < this.dataEnd ? data$$107[bp] << 8 : 65280;
          this.ct = 8;
          this.bp = bp
        }
        if(this.clow > 65535) {
          this.chigh += this.clow >> 16;
          this.clow &= 65535
        }
      }, readBit:function ArithmeticDecoder_readBit(cx) {
        var qeIcx = QeTable[cx.index].qe;
        this.a -= qeIcx;
        if(this.chigh < qeIcx) {
          var d$$8 = this.exchangeLps(cx);
          this.renormD();
          return d$$8
        }else {
          this.chigh -= qeIcx;
          if((this.a & 32768) == 0) {
            d$$8 = this.exchangeMps(cx);
            this.renormD();
            return d$$8
          }else {
            return cx.mps
          }
        }
      }, renormD:function ArithmeticDecoder_renormD() {
        do {
          if(this.ct == 0) {
            this.byteIn()
          }
          this.a <<= 1;
          this.chigh = this.chigh << 1 & 65535 | this.clow >> 15 & 1;
          this.clow = this.clow << 1 & 65535;
          this.ct--
        }while((this.a & 32768) == 0)
      }, exchangeMps:function ArithmeticDecoder_exchangeMps(cx$$1) {
        var d$$9;
        var qeTableIcx = QeTable[cx$$1.index];
        if(this.a < qeTableIcx.qe) {
          d$$9 = 1 - cx$$1.mps;
          if(qeTableIcx.switchFlag == 1) {
            cx$$1.mps = 1 - cx$$1.mps
          }
          cx$$1.index = qeTableIcx.nlps
        }else {
          d$$9 = cx$$1.mps;
          cx$$1.index = qeTableIcx.nmps
        }
        return d$$9
      }, exchangeLps:function ArithmeticDecoder_exchangeLps(cx$$2) {
        var d$$10;
        var qeTableIcx$$1 = QeTable[cx$$2.index];
        if(this.a < qeTableIcx$$1.qe) {
          this.a = qeTableIcx$$1.qe;
          d$$10 = cx$$2.mps;
          cx$$2.index = qeTableIcx$$1.nmps
        }else {
          this.a = qeTableIcx$$1.qe;
          d$$10 = 1 - cx$$2.mps;
          if(qeTableIcx$$1.switchFlag == 1) {
            cx$$2.mps = 1 - cx$$2.mps
          }
          cx$$2.index = qeTableIcx$$1.nlps
        }
        return d$$10
      }};
      return ArithmeticDecoder$$1
    }();
    var BitModel = function BitModelClosure() {
      function calcSignContribution(significance0, sign0, significance1, sign1) {
        if(significance1) {
          if(!sign1) {
            return significance0 ? !sign0 ? 1 : 0 : 1
          }else {
            return significance0 ? !sign0 ? 0 : -1 : -1
          }
        }else {
          return significance0 ? !sign0 ? 1 : -1 : 0
        }
      }
      function BitModel$$1(width$$39, height$$31, subband$$4, zeroBitPlanes) {
        this.width = width$$39;
        this.height = height$$31;
        this.contextLabelTable = subband$$4 == "HH" ? HHContextLabel : subband$$4 == "HL" ? HLContextLabel : LLAndLHContextsLabel;
        var coefficientCount = width$$39 * height$$31;
        this.neighborsSignificance = new Uint8Array(coefficientCount);
        this.coefficentsSign = new Uint8Array(coefficientCount);
        this.coefficentsMagnitude = new Uint32Array(coefficientCount);
        this.processingFlags = new Uint8Array(coefficientCount);
        var bitsDecoded = new Uint8Array(this.width * this.height);
        var i$$188 = 0;
        var ii$$73 = bitsDecoded.length;
        for(;i$$188 < ii$$73;i$$188++) {
          bitsDecoded[i$$188] = zeroBitPlanes
        }
        this.bitsDecoded = bitsDecoded;
        this.reset()
      }
      var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);
      var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);
      var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);
      var SignContextLabels = [{contextLabel:13, xorBit:0}, {contextLabel:12, xorBit:0}, {contextLabel:11, xorBit:0}, {contextLabel:10, xorBit:0}, {contextLabel:9, xorBit:0}, {contextLabel:10, xorBit:1}, {contextLabel:11, xorBit:1}, {contextLabel:12, xorBit:1}, {contextLabel:13, xorBit:1}];
      BitModel$$1.prototype = {setDecoder:function BitModel_setDecoder(decoder$$1) {
        this.decoder = decoder$$1
      }, reset:function BitModel_reset() {
        this.uniformContext = {index:46, mps:0};
        this.runLengthContext = {index:3, mps:0};
        this.contexts = [];
        this.contexts.push({index:4, mps:0});
        var i$$189 = 1;
        for(;i$$189 <= 16;i$$189++) {
          this.contexts.push({index:0, mps:0})
        }
      }, setNeighborsSignificance:function BitModel_setNeighborsSignificance(row$$3, column) {
        var neighborsSignificance = this.neighborsSignificance;
        var width$$40 = this.width;
        var height$$32 = this.height;
        var index$$63 = row$$3 * width$$40 + column;
        if(row$$3 > 0) {
          if(column > 0) {
            neighborsSignificance[index$$63 - width$$40 - 1] += 16
          }
          if(column + 1 < width$$40) {
            neighborsSignificance[index$$63 - width$$40 + 1] += 16
          }
          neighborsSignificance[index$$63 - width$$40] += 4
        }
        if(row$$3 + 1 < height$$32) {
          if(column > 0) {
            neighborsSignificance[index$$63 + width$$40 - 1] += 16
          }
          if(column + 1 < width$$40) {
            neighborsSignificance[index$$63 + width$$40 + 1] += 16
          }
          neighborsSignificance[index$$63 + width$$40] += 4
        }
        if(column > 0) {
          neighborsSignificance[index$$63 - 1] += 1
        }
        if(column + 1 < width$$40) {
          neighborsSignificance[index$$63 + 1] += 1
        }
        neighborsSignificance[index$$63] |= 128
      }, runSignificancePropogationPass:function BitModel_runSignificancePropogationPass() {
        var decoder$$2 = this.decoder;
        var width$$41 = this.width;
        var height$$33 = this.height;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var coefficentsSign = this.coefficentsSign;
        var contextLabels = this.contextLabels;
        var neighborsSignificance$$1 = this.neighborsSignificance;
        var processingFlags = this.processingFlags;
        var contexts = this.contexts;
        var labels = this.contextLabelTable;
        var bitsDecoded$$1 = this.bitsDecoded;
        var processedInverseMask = ~1;
        var processedMask = 1;
        var firstMagnitudeBitMask = 2;
        var q$$6 = 0;
        var qq$$1 = width$$41 * height$$33;
        for(;q$$6 < qq$$1;q$$6++) {
          processingFlags[q$$6] &= processedInverseMask
        }
        var i0 = 0;
        for(;i0 < height$$33;i0 += 4) {
          var j$$70 = 0;
          for(;j$$70 < width$$41;j$$70++) {
            var index$$64 = i0 * width$$41 + j$$70;
            var i1$$1 = 0;
            for(;i1$$1 < 4;i1$$1++, index$$64 += width$$41) {
              var i$$190 = i0 + i1$$1;
              if(i$$190 >= height$$33) {
                break
              }
              if(coefficentsMagnitude[index$$64] || !neighborsSignificance$$1[index$$64]) {
                continue
              }
              var contextLabel = labels[neighborsSignificance$$1[index$$64]];
              var cx$$3 = contexts[contextLabel];
              var decision = decoder$$2.readBit(cx$$3);
              if(decision) {
                var sign = this.decodeSignBit(i$$190, j$$70);
                coefficentsSign[index$$64] = sign;
                coefficentsMagnitude[index$$64] = 1;
                this.setNeighborsSignificance(i$$190, j$$70);
                processingFlags[index$$64] |= firstMagnitudeBitMask
              }
              bitsDecoded$$1[index$$64]++;
              processingFlags[index$$64] |= processedMask
            }
          }
        }
      }, decodeSignBit:function BitModel_decodeSignBit(row$$4, column$$1) {
        var width$$42 = this.width;
        var height$$34 = this.height;
        var index$$65 = row$$4 * width$$42 + column$$1;
        var coefficentsMagnitude$$1 = this.coefficentsMagnitude;
        var coefficentsSign$$1 = this.coefficentsSign;
        var horizontalContribution = calcSignContribution(column$$1 > 0 && coefficentsMagnitude$$1[index$$65 - 1], coefficentsSign$$1[index$$65 - 1], column$$1 + 1 < width$$42 && coefficentsMagnitude$$1[index$$65 + 1], coefficentsSign$$1[index$$65 + 1]);
        var verticalContribution = calcSignContribution(row$$4 > 0 && coefficentsMagnitude$$1[index$$65 - width$$42], coefficentsSign$$1[index$$65 - width$$42], row$$4 + 1 < height$$34 && coefficentsMagnitude$$1[index$$65 + width$$42], coefficentsSign$$1[index$$65 + width$$42]);
        var contextLabelAndXor = SignContextLabels[3 * (1 - horizontalContribution) + (1 - verticalContribution)];
        var contextLabel$$1 = contextLabelAndXor.contextLabel;
        var cx$$4 = this.contexts[contextLabel$$1];
        var decoded = this.decoder.readBit(cx$$4);
        return decoded ^ contextLabelAndXor.xorBit
      }, runMagnitudeRefinementPass:function BitModel_runMagnitudeRefinementPass() {
        var decoder$$3 = this.decoder;
        var width$$43 = this.width;
        var height$$35 = this.height;
        var coefficentsMagnitude$$2 = this.coefficentsMagnitude;
        var neighborsSignificance$$2 = this.neighborsSignificance;
        var contexts$$1 = this.contexts;
        var bitsDecoded$$2 = this.bitsDecoded;
        var processingFlags$$1 = this.processingFlags;
        var processedMask$$1 = 1;
        var firstMagnitudeBitMask$$1 = 2;
        var i0$$1 = 0;
        for(;i0$$1 < height$$35;i0$$1 += 4) {
          var j$$71 = 0;
          for(;j$$71 < width$$43;j$$71++) {
            var i1$$2 = 0;
            for(;i1$$2 < 4;i1$$2++) {
              var i$$191 = i0$$1 + i1$$2;
              if(i$$191 >= height$$35) {
                break
              }
              var index$$66 = i$$191 * width$$43 + j$$71;
              if(!coefficentsMagnitude$$2[index$$66] || (processingFlags$$1[index$$66] & processedMask$$1) != 0) {
                continue
              }
              var contextLabel$$2 = 16;
              if((processingFlags$$1[index$$66] & firstMagnitudeBitMask$$1) != 0) {
                processingFlags$$1[i$$191 * width$$43 + j$$71] ^= firstMagnitudeBitMask$$1;
                var significance = neighborsSignificance$$2[index$$66];
                var sumOfSignificance = (significance & 3) + (significance >> 2 & 3) + (significance >> 4 & 7);
                contextLabel$$2 = sumOfSignificance >= 1 ? 15 : 14
              }
              var cx$$5 = contexts$$1[contextLabel$$2];
              var bit$$2 = decoder$$3.readBit(cx$$5);
              coefficentsMagnitude$$2[index$$66] = coefficentsMagnitude$$2[index$$66] << 1 | bit$$2;
              bitsDecoded$$2[index$$66]++;
              processingFlags$$1[index$$66] |= processedMask$$1
            }
          }
        }
      }, runCleanupPass:function BitModel_runCleanupPass() {
        var decoder$$4 = this.decoder;
        var width$$44 = this.width;
        var height$$36 = this.height;
        var neighborsSignificance$$3 = this.neighborsSignificance;
        var significanceState = this.significanceState;
        var coefficentsMagnitude$$3 = this.coefficentsMagnitude;
        var coefficentsSign$$2 = this.coefficentsSign;
        var contexts$$2 = this.contexts;
        var labels$$1 = this.contextLabelTable;
        var bitsDecoded$$3 = this.bitsDecoded;
        var processingFlags$$2 = this.processingFlags;
        var processedMask$$2 = 1;
        var firstMagnitudeBitMask$$2 = 2;
        var oneRowDown = width$$44;
        var twoRowsDown = width$$44 * 2;
        var threeRowsDown = width$$44 * 3;
        var i0$$2 = 0;
        for(;i0$$2 < height$$36;i0$$2 += 4) {
          var j$$72 = 0;
          for(;j$$72 < width$$44;j$$72++) {
            var index0 = i0$$2 * width$$44 + j$$72;
            var allEmpty = i0$$2 + 3 < height$$36 && processingFlags$$2[index0] == 0 && processingFlags$$2[index0 + oneRowDown] == 0 && processingFlags$$2[index0 + twoRowsDown] == 0 && processingFlags$$2[index0 + threeRowsDown] == 0 && neighborsSignificance$$3[index0] == 0 && neighborsSignificance$$3[index0 + oneRowDown] == 0 && neighborsSignificance$$3[index0 + twoRowsDown] == 0 && neighborsSignificance$$3[index0 + threeRowsDown] == 0;
            var i1$$3 = 0;
            var index$$67 = index0;
            var cx$$6;
            var i$$192;
            if(allEmpty) {
              cx$$6 = this.runLengthContext;
              var hasSignificantCoefficent = decoder$$4.readBit(cx$$6);
              if(!hasSignificantCoefficent) {
                bitsDecoded$$3[index0]++;
                bitsDecoded$$3[index0 + oneRowDown]++;
                bitsDecoded$$3[index0 + twoRowsDown]++;
                bitsDecoded$$3[index0 + threeRowsDown]++;
                continue
              }
              cx$$6 = this.uniformContext;
              i1$$3 = decoder$$4.readBit(cx$$6) << 1 | decoder$$4.readBit(cx$$6);
              i$$192 = i0$$2 + i1$$3;
              index$$67 += i1$$3 * width$$44;
              var sign$$1 = this.decodeSignBit(i$$192, j$$72);
              coefficentsSign$$2[index$$67] = sign$$1;
              coefficentsMagnitude$$3[index$$67] = 1;
              this.setNeighborsSignificance(i$$192, j$$72);
              processingFlags$$2[index$$67] |= firstMagnitudeBitMask$$2;
              index$$67 = index0;
              var i2 = i0$$2;
              for(;i2 <= i$$192;i2++, index$$67 += width$$44) {
                bitsDecoded$$3[index$$67]++
              }
              i1$$3++
            }
            for(;i1$$3 < 4;i1$$3++, index$$67 += width$$44) {
              i$$192 = i0$$2 + i1$$3;
              if(i$$192 >= height$$36) {
                break
              }
              if(coefficentsMagnitude$$3[index$$67] || (processingFlags$$2[index$$67] & processedMask$$2) != 0) {
                continue
              }
              var contextLabel$$3 = labels$$1[neighborsSignificance$$3[index$$67]];
              cx$$6 = contexts$$2[contextLabel$$3];
              var decision$$1 = decoder$$4.readBit(cx$$6);
              if(decision$$1 == 1) {
                sign$$1 = this.decodeSignBit(i$$192, j$$72);
                coefficentsSign$$2[index$$67] = sign$$1;
                coefficentsMagnitude$$3[index$$67] = 1;
                this.setNeighborsSignificance(i$$192, j$$72);
                processingFlags$$2[index$$67] |= firstMagnitudeBitMask$$2
              }
              bitsDecoded$$3[index$$67]++
            }
          }
        }
      }};
      return BitModel$$1
    }();
    var Transform = function TransformClosure() {
      function Transform$$1() {
      }
      Transform$$1.prototype.calculate = function transformCalculate(subbands$$2, u0, v0$$1) {
        var ll = subbands$$2[0];
        var i$$193 = 1;
        var ii$$74 = subbands$$2.length;
        var j$$73 = 1;
        for(;i$$193 < ii$$74;i$$193 += 3, j$$73++) {
          ll = this.iterate(ll, subbands$$2[i$$193], subbands$$2[i$$193 + 1], subbands$$2[i$$193 + 2], u0, v0$$1)
        }
        return ll
      };
      Transform$$1.prototype.iterate = function Transform_iterate(ll$$1, hl, lh, hh, u0$$1, v0$$2) {
        var llWidth = ll$$1.width;
        var llHeight = ll$$1.height;
        var llItems = ll$$1.items;
        var hlWidth = hl.width;
        var hlHeight = hl.height;
        var hlItems = hl.items;
        var lhWidth = lh.width;
        var lhHeight = lh.height;
        var lhItems = lh.items;
        var hhWidth = hh.width;
        var hhHeight = hh.height;
        var hhItems = hh.items;
        var width$$45 = llWidth + hlWidth;
        var height$$37 = llHeight + lhHeight;
        var items$$4 = new Float32Array(width$$45 * height$$37);
        var i$$194 = 0;
        var ii$$75 = llHeight;
        for(;i$$194 < ii$$75;i$$194++) {
          var k$$23 = i$$194 * llWidth;
          var l$$4 = i$$194 * 2 * width$$45;
          var j$$74 = 0;
          var jj$$18 = llWidth;
          for(;j$$74 < jj$$18;j$$74++, k$$23++, l$$4 += 2) {
            items$$4[l$$4] = llItems[k$$23]
          }
        }
        i$$194 = 0;
        ii$$75 = hlHeight;
        for(;i$$194 < ii$$75;i$$194++) {
          k$$23 = i$$194 * hlWidth;
          l$$4 = i$$194 * 2 * width$$45 + 1;
          j$$74 = 0;
          jj$$18 = hlWidth;
          for(;j$$74 < jj$$18;j$$74++, k$$23++, l$$4 += 2) {
            items$$4[l$$4] = hlItems[k$$23]
          }
        }
        i$$194 = 0;
        ii$$75 = lhHeight;
        for(;i$$194 < ii$$75;i$$194++) {
          k$$23 = i$$194 * lhWidth;
          l$$4 = (i$$194 * 2 + 1) * width$$45;
          j$$74 = 0;
          jj$$18 = lhWidth;
          for(;j$$74 < jj$$18;j$$74++, k$$23++, l$$4 += 2) {
            items$$4[l$$4] = lhItems[k$$23]
          }
        }
        i$$194 = 0;
        ii$$75 = hhHeight;
        for(;i$$194 < ii$$75;i$$194++) {
          k$$23 = i$$194 * hhWidth;
          l$$4 = (i$$194 * 2 + 1) * width$$45 + 1;
          j$$74 = 0;
          jj$$18 = hhWidth;
          for(;j$$74 < jj$$18;j$$74++, k$$23++, l$$4 += 2) {
            items$$4[l$$4] = hhItems[k$$23]
          }
        }
        var bufferPadding = 4;
        var bufferLength$$12 = new Float32Array(Math.max(width$$45, height$$37) + 2 * bufferPadding);
        var buffer$$29 = new Float32Array(bufferLength$$12);
        var bufferOut = new Float32Array(bufferLength$$12);
        var v$$20 = 0;
        for(;v$$20 < height$$37;v$$20++) {
          if(width$$45 == 1) {
            if(u0$$1 % 1 != 0) {
              items$$4[v$$20 * width$$45] /= 2
            }
            continue
          }
          k$$23 = v$$20 * width$$45;
          l$$4 = bufferPadding;
          var u$$1 = 0;
          for(;u$$1 < width$$45;u$$1++, k$$23++, l$$4++) {
            buffer$$29[l$$4] = items$$4[k$$23]
          }
          var i1$$4 = bufferPadding - 1;
          var j1 = bufferPadding + 1;
          var i2$$1 = bufferPadding + width$$45 - 2;
          var j2 = bufferPadding + width$$45;
          buffer$$29[i1$$4--] = buffer$$29[j1++];
          buffer$$29[j2++] = buffer$$29[i2$$1--];
          buffer$$29[i1$$4--] = buffer$$29[j1++];
          buffer$$29[j2++] = buffer$$29[i2$$1--];
          buffer$$29[i1$$4--] = buffer$$29[j1++];
          buffer$$29[j2++] = buffer$$29[i2$$1--];
          buffer$$29[i1$$4--] = buffer$$29[j1++];
          buffer$$29[j2++] = buffer$$29[i2$$1--];
          this.filter(buffer$$29, bufferPadding, width$$45, u0$$1, bufferOut);
          k$$23 = v$$20 * width$$45;
          l$$4 = bufferPadding;
          u$$1 = 0;
          for(;u$$1 < width$$45;u$$1++, k$$23++, l$$4++) {
            items$$4[k$$23] = bufferOut[l$$4]
          }
        }
        u$$1 = 0;
        for(;u$$1 < width$$45;u$$1++) {
          if(height$$37 == 1) {
            if(v0$$2 % 1 != 0) {
              items$$4[u$$1] /= 2
            }
            continue
          }
          k$$23 = u$$1;
          l$$4 = bufferPadding;
          v$$20 = 0;
          for(;v$$20 < height$$37;v$$20++, k$$23 += width$$45, l$$4++) {
            buffer$$29[l$$4] = items$$4[k$$23]
          }
          i1$$4 = bufferPadding - 1;
          j1 = bufferPadding + 1;
          i2$$1 = bufferPadding + height$$37 - 2;
          j2 = bufferPadding + height$$37;
          buffer$$29[i1$$4--] = buffer$$29[j1++];
          buffer$$29[j2++] = buffer$$29[i2$$1--];
          buffer$$29[i1$$4--] = buffer$$29[j1++];
          buffer$$29[j2++] = buffer$$29[i2$$1--];
          buffer$$29[i1$$4--] = buffer$$29[j1++];
          buffer$$29[j2++] = buffer$$29[i2$$1--];
          buffer$$29[i1$$4--] = buffer$$29[j1++];
          buffer$$29[j2++] = buffer$$29[i2$$1--];
          this.filter(buffer$$29, bufferPadding, height$$37, v0$$2, bufferOut);
          k$$23 = u$$1;
          l$$4 = bufferPadding;
          v$$20 = 0;
          for(;v$$20 < height$$37;v$$20++, k$$23 += width$$45, l$$4++) {
            items$$4[k$$23] = bufferOut[l$$4]
          }
        }
        return{width:width$$45, height:height$$37, items:items$$4}
      };
      return Transform$$1
    }();
    var IrreversibleTransform = function IrreversibleTransformClosure() {
      function IrreversibleTransform$$1() {
        Transform.call(this)
      }
      IrreversibleTransform$$1.prototype = Object.create(Transform.prototype);
      IrreversibleTransform$$1.prototype.filter = function irreversibleTransformFilter(y$$60, offset$$42, length$$74, i0$$3, x$$82) {
        var i0_ = Math.floor(i0$$3 / 2);
        var i1_ = Math.floor((i0$$3 + length$$74) / 2);
        var offset_ = offset$$42 - i0$$3 % 1;
        var alpha$$3 = -1.586134342059924;
        var beta = -0.052980118572961;
        var gamma = 0.882911075530934;
        var delta$$4 = 0.443506852043971;
        var K$$2 = 1.230174104914001;
        var K_ = 1 / K$$2;
        var j$$75 = offset_ - 2;
        var n$$46 = i0_ - 1;
        var nn$$1 = i1_ + 2;
        for(;n$$46 < nn$$1;n$$46++, j$$75 += 2) {
          x$$82[j$$75] = K$$2 * y$$60[j$$75]
        }
        j$$75 = offset_ - 3;
        n$$46 = i0_ - 2;
        nn$$1 = i1_ + 2;
        for(;n$$46 < nn$$1;n$$46++, j$$75 += 2) {
          x$$82[j$$75] = K_ * y$$60[j$$75]
        }
        j$$75 = offset_ - 2;
        n$$46 = i0_ - 1;
        nn$$1 = i1_ + 2;
        for(;n$$46 < nn$$1;n$$46++, j$$75 += 2) {
          x$$82[j$$75] -= delta$$4 * (x$$82[j$$75 - 1] + x$$82[j$$75 + 1])
        }
        j$$75 = offset_ - 1;
        n$$46 = i0_ - 1;
        nn$$1 = i1_ + 1;
        for(;n$$46 < nn$$1;n$$46++, j$$75 += 2) {
          x$$82[j$$75] -= gamma * (x$$82[j$$75 - 1] + x$$82[j$$75 + 1])
        }
        j$$75 = offset_;
        n$$46 = i0_;
        nn$$1 = i1_ + 1;
        for(;n$$46 < nn$$1;n$$46++, j$$75 += 2) {
          x$$82[j$$75] -= beta * (x$$82[j$$75 - 1] + x$$82[j$$75 + 1])
        }
        j$$75 = offset_ + 1;
        n$$46 = i0_;
        nn$$1 = i1_;
        for(;n$$46 < nn$$1;n$$46++, j$$75 += 2) {
          x$$82[j$$75] -= alpha$$3 * (x$$82[j$$75 - 1] + x$$82[j$$75 + 1])
        }
      };
      return IrreversibleTransform$$1
    }();
    var ReversibleTransform = function ReversibleTransformClosure() {
      function ReversibleTransform$$1() {
        Transform.call(this)
      }
      ReversibleTransform$$1.prototype = Object.create(Transform.prototype);
      ReversibleTransform$$1.prototype.filter = function reversibleTransformFilter(y$$61, offset$$43, length$$75, i0$$4, x$$83) {
        var i0_$$1 = Math.floor(i0$$4 / 2);
        var i1_$$1 = Math.floor((i0$$4 + length$$75) / 2);
        var offset_$$1 = offset$$43 - i0$$4 % 1;
        var n$$47 = i0_$$1;
        var nn$$2 = i1_$$1 + 1;
        var j$$76 = offset_$$1;
        for(;n$$47 < nn$$2;n$$47++, j$$76 += 2) {
          x$$83[j$$76] = y$$61[j$$76] - Math.floor((y$$61[j$$76 - 1] + y$$61[j$$76 + 1] + 2) / 4)
        }
        n$$47 = i0_$$1;
        nn$$2 = i1_$$1;
        j$$76 = offset_$$1 + 1;
        for(;n$$47 < nn$$2;n$$47++, j$$76 += 2) {
          x$$83[j$$76] = y$$61[j$$76] + Math.floor((x$$83[j$$76 - 1] + x$$83[j$$76 + 1]) / 2)
        }
      };
      return ReversibleTransform$$1
    }();
    return JpxImage$$1
  }();
  var bidi = PDFJS.bidi = function bidiClosure() {
    function reverseValues(arr$$15, start$$26, end$$20) {
      var i$$197 = start$$26;
      var j$$79 = end$$20 - 1;
      for(;i$$197 < j$$79;++i$$197, --j$$79) {
        var temp$$1 = arr$$15[i$$197];
        arr$$15[i$$197] = arr$$15[j$$79];
        arr$$15[j$$79] = temp$$1
      }
    }
    function bidi$$1(text$$11, startLevel) {
      var str$$42 = text$$11.str;
      var strLength = str$$42.length;
      if(strLength == 0) {
        return str$$42
      }
      var chars$$1 = [];
      var types$$3 = [];
      var oldtypes = [];
      var numBidi = 0;
      var i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        chars$$1[i$$198] = str$$42.charAt(i$$198);
        var charCode = str$$42.charCodeAt(i$$198);
        var charType = "L";
        if(charCode <= 255) {
          charType = baseTypes[charCode]
        }else {
          if(1424 <= charCode && charCode <= 1524) {
            charType = "R"
          }else {
            if(1536 <= charCode && charCode <= 1791) {
              charType = arabicTypes[charCode & 255]
            }else {
              if(1792 <= charCode && charCode <= 2220) {
                charType = "AL"
              }
            }
          }
        }
        if(charType == "R" || charType == "AL" || charType == "AN") {
          numBidi++
        }
        oldtypes[i$$198] = types$$3[i$$198] = charType
      }
      if(numBidi == 0) {
        text$$11.direction = "ltr";
        return str$$42
      }
      if(startLevel == -1) {
        if(strLength / numBidi < 0.3) {
          text$$11.direction = "ltr";
          startLevel = 0
        }else {
          text$$11.direction = "rtl";
          startLevel = 1
        }
      }
      var levels = [];
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        levels[i$$198] = startLevel
      }
      var e$$30 = (startLevel & 1) != 0 ? "R" : "L";
      var sor = e$$30;
      var eor = sor;
      var lastType = sor;
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        if(types$$3[i$$198] == "NSM") {
          types$$3[i$$198] = lastType
        }else {
          lastType = types$$3[i$$198]
        }
      }
      lastType = sor;
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        var t$$8 = types$$3[i$$198];
        if(t$$8 == "EN") {
          types$$3[i$$198] = lastType == "AL" ? "AN" : "EN"
        }else {
          if(t$$8 == "R" || t$$8 == "L" || t$$8 == "AL") {
            lastType = t$$8
          }
        }
      }
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        t$$8 = types$$3[i$$198];
        if(t$$8 == "AL") {
          types$$3[i$$198] = "R"
        }
      }
      i$$198 = 1;
      for(;i$$198 < strLength - 1;++i$$198) {
        if(types$$3[i$$198] == "ES" && types$$3[i$$198 - 1] == "EN" && types$$3[i$$198 + 1] == "EN") {
          types$$3[i$$198] = "EN"
        }
        if(types$$3[i$$198] == "CS" && (types$$3[i$$198 - 1] == "EN" || types$$3[i$$198 - 1] == "AN") && types$$3[i$$198 + 1] == types$$3[i$$198 - 1]) {
          types$$3[i$$198] = types$$3[i$$198 - 1]
        }
      }
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        if(types$$3[i$$198] == "EN") {
          var j$$80 = i$$198 - 1;
          for(;j$$80 >= 0;--j$$80) {
            if(types$$3[j$$80] != "ET") {
              break
            }
            types$$3[j$$80] = "EN"
          }
          j$$80 = i$$198 + 1;
          for(;j$$80 < strLength;--j$$80) {
            if(types$$3[j$$80] != "ET") {
              break
            }
            types$$3[j$$80] = "EN"
          }
        }
      }
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        t$$8 = types$$3[i$$198];
        if(t$$8 == "WS" || t$$8 == "ES" || t$$8 == "ET" || t$$8 == "CS") {
          types$$3[i$$198] = "ON"
        }
      }
      lastType = sor;
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        t$$8 = types$$3[i$$198];
        if(t$$8 == "EN") {
          types$$3[i$$198] = lastType == "L" ? "L" : "EN"
        }else {
          if(t$$8 == "R" || t$$8 == "L") {
            lastType = t$$8
          }
        }
      }
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        if(types$$3[i$$198] == "ON") {
          var end$$21;
          JSCompiler_inline_label_findUnequal_268: {
            var j$$inline_266 = void 0;
            j$$inline_266 = i$$198 + 1;
            var jj$$inline_267 = types$$3.length;
            for(;j$$inline_266 < jj$$inline_267;++j$$inline_266) {
              if(types$$3[j$$inline_266] != "ON") {
                end$$21 = j$$inline_266;
                break JSCompiler_inline_label_findUnequal_268
              }
            }
            end$$21 = j$$inline_266
          }
          var before$$1 = sor;
          if(i$$198 > 0) {
            before$$1 = types$$3[i$$198 - 1]
          }
          var after = eor;
          if(end$$21 + 1 < strLength) {
            after = types$$3[end$$21 + 1]
          }
          if(before$$1 != "L") {
            before$$1 = "R"
          }
          if(after != "L") {
            after = "R"
          }
          if(before$$1 == after) {
            var arr$$inline_269 = types$$3;
            var end$$inline_271 = end$$21;
            var value$$inline_272 = before$$1;
            var j$$inline_273 = i$$198;
            for(;j$$inline_273 < end$$inline_271;++j$$inline_273) {
              arr$$inline_269[j$$inline_273] = value$$inline_272
            }
          }
          i$$198 = end$$21 - 1
        }
      }
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        if(types$$3[i$$198] == "ON") {
          types$$3[i$$198] = e$$30
        }
      }
      i$$198 = 0;
      for(;i$$198 < strLength;++i$$198) {
        t$$8 = types$$3[i$$198];
        if((levels[i$$198] & 1) == 0) {
          if(t$$8 == "R") {
            levels[i$$198] += 1
          }else {
            if(t$$8 == "AN" || t$$8 == "EN") {
              levels[i$$198] += 2
            }
          }
        }else {
          if(t$$8 == "L" || t$$8 == "AN" || t$$8 == "EN") {
            levels[i$$198] += 1
          }
        }
      }
      var highestLevel = -1;
      var lowestOddLevel = 99;
      i$$198 = 0;
      var ii$$76 = levels.length;
      for(;i$$198 < ii$$76;++i$$198) {
        var level$$16 = levels[i$$198];
        if(highestLevel < level$$16) {
          highestLevel = level$$16
        }
        if(lowestOddLevel > level$$16 && (level$$16 & 1) != 0) {
          lowestOddLevel = level$$16
        }
      }
      level$$16 = highestLevel;
      for(;level$$16 >= lowestOddLevel;--level$$16) {
        var start$$27 = -1;
        i$$198 = 0;
        ii$$76 = levels.length;
        for(;i$$198 < ii$$76;++i$$198) {
          if(levels[i$$198] < level$$16) {
            if(start$$27 >= 0) {
              reverseValues(chars$$1, start$$27, i$$198);
              start$$27 = -1
            }
          }else {
            if(start$$27 < 0) {
              start$$27 = i$$198
            }
          }
        }
        if(start$$27 >= 0) {
          reverseValues(chars$$1, start$$27, levels.length)
        }
      }
      var result$$15 = "";
      i$$198 = 0;
      ii$$76 = chars$$1.length;
      for(;i$$198 < ii$$76;++i$$198) {
        var ch$$14 = chars$$1[i$$198];
        if(ch$$14 != "<" && ch$$14 != ">") {
          result$$15 += ch$$14
        }
      }
      return result$$15
    }
    var baseTypes = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "ON", "ON", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "ON", "ON", "CS", "ON", "CS", "ON", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", 
    "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "ON", "ET", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "L", "ON", "ON", "ON", 
    "ON", "ON", "ET", "ET", "EN", "EN", "ON", "L", "ON", "ON", "ON", "EN", "L", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L"];
    var arabicTypes = ["AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "CS", "AL", "ON", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", 


    "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL"];
    return bidi$$1
  }();
  var Metadata$$1 = PDFJS.Metadata = function MetadataClosure() {
    function fixMetadata(meta) {
      return meta.replace(/>\\376\\377([^<]+)/g, function(all$$1, codes$$5) {
        var bytes$$23 = codes$$5.replace(/\\([0-3])([0-7])([0-7])/g, function(code$$27, d1, d2, d3) {
          return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1)
        });
        var chars$$2 = "";
        var i$$199 = 0;
        for(;i$$199 < bytes$$23.length;i$$199 += 2) {
          var code$$26 = bytes$$23.charCodeAt(i$$199) * 256 + bytes$$23.charCodeAt(i$$199 + 1);
          chars$$2 += code$$26 >= 32 && code$$26 < 127 && code$$26 != 60 && code$$26 != 62 && code$$26 != 38 && false ? String.fromCharCode(code$$26) : "&#x" + (65536 + code$$26).toString(16).substring(1) + ";"
        }
        return">" + chars$$2
      })
    }
    function Metadata$$2(meta$$1) {
      if(typeof meta$$1 === "string") {
        meta$$1 = fixMetadata(meta$$1);
        var parser$$7 = new DOMParser;
        meta$$1 = parser$$7.parseFromString(meta$$1, "application/xml")
      }else {
        if(!(meta$$1 instanceof Document)) {
          error$$3("Metadata: Invalid metadata object")
        }
      }
      this.metaDocument = meta$$1;
      this.metadata = {};
      this.parse()
    }
    Metadata$$2.prototype = {parse:function Metadata_parse() {
      var doc$$1 = this.metaDocument;
      var rdf = doc$$1.documentElement;
      if(rdf.nodeName.toLowerCase() !== "rdf:rdf") {
        rdf = rdf.firstChild;
        for(;rdf && rdf.nodeName.toLowerCase() !== "rdf:rdf";) {
          rdf = rdf.nextSibling
        }
      }
      var nodeName = rdf ? rdf.nodeName.toLowerCase() : null;
      if(!rdf || nodeName !== "rdf:rdf" || !rdf.hasChildNodes()) {
        return
      }
      var childNodes = rdf.childNodes;
      var desc;
      var namespace$$1;
      var entries$$3;
      var entry$$3;
      var i$$200 = 0;
      var length$$76 = childNodes.length;
      for(;i$$200 < length$$76;i$$200++) {
        desc = childNodes[i$$200];
        if(desc.nodeName.toLowerCase() !== "rdf:description") {
          continue
        }
        entries$$3 = [];
        var ii$$77 = 0;
        var iLength = desc.childNodes.length;
        for(;ii$$77 < iLength;ii$$77++) {
          if(desc.childNodes[ii$$77].nodeName.toLowerCase() !== "#text") {
            entries$$3.push(desc.childNodes[ii$$77])
          }
        }
        ii$$77 = 0, iLength = entries$$3.length;
        for(;ii$$77 < iLength;ii$$77++) {
          entry$$3 = entries$$3[ii$$77];
          var name$$70 = entry$$3.nodeName.toLowerCase();
          this.metadata[name$$70] = entry$$3.textContent.trim()
        }
      }
    }, get:function Metadata_get(name$$71) {
      return this.metadata[name$$71] || null
    }, has:function Metadata_has(name$$72) {
      return typeof this.metadata[name$$72] !== "undefined"
    }};
    return Metadata$$2
  }()
}).call(typeof PdfJS_window.window === "undefined" ? this : PdfJS_window.window);
var completed = 0;
var benchmarks = BenchmarkSuite.CountBenchmarks();
var success = true;
var latencyBenchmarks = ["Splay", "Mandreel"];
var skipBenchmarks = typeof skipBenchmarks === "undefined" ? [] : skipBenchmarks;

JAM.stopProfile('load');
