# This file represents two violating path for the beacon.js benchmark.
#
# A policy edge is specified on each (non-comment, non-empty) line in
# the white-space-ignoring format
# 
#   nsrc,ndest: predicate
#
# where nsrc and ndest are numeric ids for policy states, and predicate
# is the pseudo-JavaScript representation of the heap state that
# triggers the transition. JAM enforces that the initial state is always
# indicated as 0, and the final state is -1.
#
# This first transition is induced by an invocation of either the
# getElementById or getElementsByTagName methods of
# HTMLDocument.prototype. JAM provides a utility to translate JavaScript
# references like "document.getElementById" (which the JAM user is
# likely familiar with) to JAM's symbolic representation of the memory
# location that the reference points to in a newly initialized browser
# environment. While it would be possible to do this translation
# automatically, this format allows for greater control. For example,
# it's now possible to specify a policy predicate such as
# "document.getElementById !== #HTMLDocument#prototype#getElementById",
# which would be violated if the analyzed program overwrites the
# document.getElementById reference.
0,1: jam#invoke(#HTMLDocument#prototype#getElementById)
0,1: jam#invoke(#HTMLDocument#prototype#getElementsByTagName)

# This transition is taken with an assignment to document.cookie. The
# #document component refers the target of the native "window.document"
# object, while the "cookie" component refers to the string-indexed
# member of this object that stores the security-sensitive cookie for
# the current domain.
1,-1: jam#set(#document,"cookie")
