
JAM.startProfile('load');
introspect(JAM.policy.pFull) {
var performance = performance || {};
performance.now = function() {
  return performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || Date.now;
}();
function Benchmark(name$$30, doWarmup, doDeterministic, deterministicIterations, run, setup, tearDown, rmsResult, minIterations) {
  this.name = name$$30;
  this.doWarmup = doWarmup;
  this.doDeterministic = doDeterministic;
  this.deterministicIterations = deterministicIterations;
  this.run = run;
  this.Setup = setup ? setup : function() {
  };
  this.TearDown = tearDown ? tearDown : function() {
  };
  this.rmsResult = rmsResult ? rmsResult : null;
  this.minIterations = minIterations ? minIterations : 32;
}
function BenchmarkResult(benchmark, time, latency) {
  this.benchmark = benchmark;
  this.time = time;
  this.latency = latency;
}
BenchmarkResult.prototype.valueOf = function() {
  return this.time;
};
function BenchmarkSuite(name$$31, reference, benchmarks$$1) {
  this.name = name$$31;
  this.reference = reference;
  this.benchmarks = benchmarks$$1;
  BenchmarkSuite.suites.push(this);
}
BenchmarkSuite.suites = [];
BenchmarkSuite.version = "9";
BenchmarkSuite.config = {doWarmup:undefined, doDeterministic:undefined};
alert = function(s$$2) {
  throw "Alert called with argument: " + s$$2;
};
BenchmarkSuite.ResetRNG = function() {
  Math.random = function() {
    var seed = 49734321;
    return function() {
      seed = seed + 2127912214 + (seed << 12) & 4294967295;
      seed = (seed ^ 3345072700 ^ seed >>> 19) & 4294967295;
      seed = seed + 374761393 + (seed << 5) & 4294967295;
      seed = (seed + 3550635116 ^ seed << 9) & 4294967295;
      seed = seed + 4251993797 + (seed << 3) & 4294967295;
      seed = (seed ^ 3042594569 ^ seed >>> 16) & 4294967295;
      return(seed & 268435455) / 268435456;
    };
  }();
};
BenchmarkSuite.RunSuites = function(runner, skipBenchmarks$$1) {
  function RunStep() {
    for (;continuation || index$$39 < length$$11;) {
      if (continuation) {
        continuation = continuation();
      } else {
        var suite = suites[index$$39++];
        if (runner.NotifyStart) {
          runner.NotifyStart(suite.name);
        }
        if (skipBenchmarks$$1.indexOf(suite.name) > -1) {
          suite.NotifySkipped(runner);
        } else {
          continuation = suite.RunStep(runner);
        }
      }
      if (continuation && typeof window != "undefined" && window.setTimeout) {
        window.setTimeout(RunStep, 25);
        return;
      }
    }
    if (runner.NotifyScore) {
      var score = BenchmarkSuite.GeometricMean(BenchmarkSuite.scores);
      var formatted = BenchmarkSuite.FormatScore(100 * score);
      runner.NotifyScore(formatted);
    }
  }
  skipBenchmarks$$1 = typeof skipBenchmarks$$1 === "undefined" ? [] : skipBenchmarks$$1;
  var continuation = null;
  var suites = BenchmarkSuite.suites;
  var length$$11 = suites.length;
  BenchmarkSuite.scores = [];
  var index$$39 = 0;
  RunStep();
};
BenchmarkSuite.CountBenchmarks = function() {
  var result = 0;
  var suites$$1 = BenchmarkSuite.suites;
  var i$$1 = 0;
  for (;i$$1 < suites$$1.length;i$$1++) {
    result += suites$$1[i$$1].benchmarks.length;
  }
  return result;
};
BenchmarkSuite.GeometricMean = function(numbers) {
  var log = 0;
  var i$$2 = 0;
  for (;i$$2 < numbers.length;i$$2++) {
    log += Math.log(numbers[i$$2]);
  }
  return Math.pow(Math.E, log / numbers.length);
};
BenchmarkSuite.GeometricMeanTime = function(measurements) {
  var log$$1 = 0;
  var i$$3 = 0;
  for (;i$$3 < measurements.length;i$$3++) {
    log$$1 += Math.log(measurements[i$$3].time);
  }
  return Math.pow(Math.E, log$$1 / measurements.length);
};
BenchmarkSuite.GeometricMeanLatency = function(measurements$$1) {
  var log$$2 = 0;
  var hasLatencyResult = false;
  var i$$4 = 0;
  for (;i$$4 < measurements$$1.length;i$$4++) {
    if (measurements$$1[i$$4].latency != 0) {
      log$$2 += Math.log(measurements$$1[i$$4].latency);
      hasLatencyResult = true;
    }
  }
  if (hasLatencyResult) {
    return Math.pow(Math.E, log$$2 / measurements$$1.length);
  } else {
    return 0;
  }
};
BenchmarkSuite.FormatScore = function(value$$27) {
  if (value$$27 > 100) {
    return value$$27.toFixed(0);
  } else {
    return value$$27.toPrecision(3);
  }
};
BenchmarkSuite.prototype.NotifyStep = function(result$$1) {
  this.results.push(result$$1);
  if (this.runner.NotifyStep) {
    this.runner.NotifyStep(result$$1.benchmark.name);
  }
};
BenchmarkSuite.prototype.NotifyResult = function() {
  var mean = BenchmarkSuite.GeometricMeanTime(this.results);
  var score$$1 = this.reference[0] / mean;
  BenchmarkSuite.scores.push(score$$1);
  if (this.runner.NotifyResult) {
    var formatted$$1 = BenchmarkSuite.FormatScore(100 * score$$1);
    this.runner.NotifyResult(this.name, formatted$$1);
  }
  if (this.reference.length == 2) {
    var meanLatency = BenchmarkSuite.GeometricMeanLatency(this.results);
    if (meanLatency != 0) {
      var scoreLatency = this.reference[1] / meanLatency;
      BenchmarkSuite.scores.push(scoreLatency);
      if (this.runner.NotifyResult) {
        var formattedLatency = BenchmarkSuite.FormatScore(100 * scoreLatency);
        this.runner.NotifyResult(this.name + "Latency", formattedLatency);
      }
    }
  }
};
BenchmarkSuite.prototype.NotifySkipped = function(runner$$1) {
  BenchmarkSuite.scores.push(1);
  if (runner$$1.NotifyResult) {
    runner$$1.NotifyResult(this.name, "Skipped");
  }
};
BenchmarkSuite.prototype.NotifyError = function(error$$1) {
  if (this.runner.NotifyError) {
    this.runner.NotifyError(this.name, error$$1);
  }
  if (this.runner.NotifyStep) {
    this.runner.NotifyStep(this.name);
  }
};
BenchmarkSuite.prototype.RunSingleBenchmark = function(benchmark$$1, data$$18) {
  function Measure(data$$19) {
    var elapsed = 0;
    var start$$4 = new Date;
    var i$$5 = 0;
    for (;doDeterministic$$1 ? i$$5 < benchmark$$1.deterministicIterations : elapsed < 1E3;i$$5++) {
      benchmark$$1.run();
      elapsed = new Date - start$$4;
    }
    if (data$$19 != null) {
      data$$19.runs += i$$5;
      data$$19.elapsed += elapsed;
    }
  }
  var config = BenchmarkSuite.config;
  var doWarmup$$1 = config.doWarmup !== undefined ? config.doWarmup : benchmark$$1.doWarmup;
  var doDeterministic$$1 = config.doDeterministic !== undefined ? config.doDeterministic : benchmark$$1.doDeterministic;
  if (!doWarmup$$1 && data$$18 == null) {
    data$$18 = {runs:0, elapsed:0};
  }
  if (data$$18 == null) {
    Measure(null);
    return{runs:0, elapsed:0};
  } else {
    Measure(data$$18);
    if (data$$18.runs < benchmark$$1.minIterations) {
      return data$$18;
    }
    var usec = data$$18.elapsed * 1E3 / data$$18.runs;
    var rms = benchmark$$1.rmsResult != null ? benchmark$$1.rmsResult() : 0;
    this.NotifyStep(new BenchmarkResult(benchmark$$1, usec, rms));
    return null;
  }
};
BenchmarkSuite.prototype.RunStep = function(runner$$2) {
  function RunNextSetup() {
    if (index$$40 < length$$12) {
      try {
        suite$$1.benchmarks[index$$40].Setup();
      } catch (e$$4) {
        suite$$1.NotifyError(e$$4);
        return null;
      }
      return RunNextBenchmark;
    }
    suite$$1.NotifyResult();
    return null;
  }
  function RunNextBenchmark() {
    try {
      data$$20 = suite$$1.RunSingleBenchmark(suite$$1.benchmarks[index$$40], data$$20);
    } catch (e$$5) {
      suite$$1.NotifyError(e$$5);
      return null;
    }
    return data$$20 == null ? RunNextTearDown : RunNextBenchmark();
  }
  function RunNextTearDown() {
    try {
      suite$$1.benchmarks[index$$40++].TearDown();
    } catch (e$$6) {
      suite$$1.NotifyError(e$$6);
      return null;
    }
    return RunNextSetup;
  }
  BenchmarkSuite.ResetRNG();
  this.results = [];
  this.runner = runner$$2;
  var length$$12 = this.benchmarks.length;
  var index$$40 = 0;
  var suite$$1 = this;
  var data$$20;
  return RunNextSetup();
};
var typescript = new BenchmarkSuite("Typescript", [255011322], [new Benchmark("Typescript", false, true, 5, runTypescript, setupTypescript, tearDownTypescript, null, 1)]);
function setupTypescript() {
}
function tearDownTypescript() {
  compiler_input = null;
}
var parseErrors = [];
function runTypescript() {
  var compiler = createCompiler();
  compiler.addUnit(compiler_input, "compiler_input.ts");
  parseErrors = [];
  compiler.reTypeCheck();
  compiler.emit({createFile:function(fileName) {
    return outfile;
  }, fileExists:function(path) {
    return false;
  }, directoryExists:function(path$$1) {
    return false;
  }, resolvePath:function(path$$2) {
    return path$$2;
  }});
  if (parseErrors.length != 192 && parseErrors.length != 193) {
    throw new Error("Parse errors.");
  }
  compiler = null;
}
var outfile = {checksum:-412589664, cumulative_checksum:0, Write:function(s$$3) {
  this.Verify(s$$3);
}, WriteLine:function(s$$4) {
  this.Verify(s$$4 + "\n");
}, Close:function() {
  if (this.checksum != this.cumulative_checksum) {
    throw new Error("Wrong checksum.");
  }
  this.cumulative_checksum = 0;
}, Verify:function(s$$5) {
  var i$$6 = 0;
  for (;i$$6 < s$$5.length;i$$6++) {
    var c = s$$5.charCodeAt(i$$6);
    this.cumulative_checksum = this.cumulative_checksum << 1 ^ c;
  }
}};
var outerr = {checksum:0, cumulative_checksum:0, Write:function(s$$6) {
  this.Verify(s$$6);
}, WriteLine:function(s$$7) {
  this.Verify(s$$7 + "\n");
}, Close:function() {
  if (this.checksum != this.cumulative_checksum) {
    throw new Error("Wrong checksum.");
  }
  this.cumulative_checksum = 0;
}, Verify:function(s$$8) {
  var i$$7 = 0;
  for (;i$$7 < s$$8.length;i$$7++) {
    var c$$1 = s$$8.charCodeAt(i$$7);
    this.cumulative_checksum = this.cumulative_checksum << 1 ^ c$$1;
  }
}};
function createCompiler() {
  var settings = new TypeScript.CompilationSettings;
  settings.codeGenTarget = TypeScript.CodeGenTarget.ES5;
  var compiler$$1 = new TypeScript.TypeScriptCompiler(outerr, new TypeScript.NullLogger, settings);
  compiler$$1.setErrorCallback(function(start$$5, len, message$$9) {
    parseErrors.push({start:start$$5, len:len, message:message$$9});
  });
  compiler$$1.parser.errorRecovery = true;
  compiler$$1.typeCheck();
  return compiler$$1;
}
var compiler_input = '//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    export class AstLogger {\n\n        constructor (public logger: ILogger) { }\n\n        public logScript(script: TypeScript.Script): void {\n            this.logLinemap(script.locationInfo.lineMap);\n\n            var stack: AST[]= [];\n\n            var pre = (cur: TypeScript.AST, parent: TypeScript.AST) => {\n                stack.push(cur);\n                var indent = (stack.length - 1) * 2;\n                this.logComments(script, cur.preComments, indent);\n                this.logNode(script, cur, indent);\n                this.logComments(script, cur.postComments, indent);\n                return cur;\n            }\n\n            var post = (cur: TypeScript.AST, parent: TypeScript.AST) => {\n                stack.pop();\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(script, pre, post);\n        }\n\n\n        public logNode(script: TypeScript.Script, cur: TypeScript.AST, indent: number) {\n            var msg = this.addPadding("", indent, "| ", true);\n\n            msg = msg.concat("+ " + cur.treeViewLabel());\n            msg = this.addPadding(msg, 70, " ", false);\n\n            msg = msg + this.addLineColumn(script, cur.minChar);\n            msg = this.addPadding(msg, 80, " ", false);\n\n            msg = msg + "=> ";\n            msg = msg + this.addLineColumn(script, cur.limChar);\n            msg = this.addPadding(msg, 102, " ", false);\n\n            msg = msg.concat("[" + this.addPadding(cur.minChar.toString(), 1, " ", true) + ", " + this.addPadding(cur.limChar.toString(), 1, " ", true) + "]");\n\n            msg = this.addPadding(msg, 115, " ", false);\n            msg = msg.concat("sym=" + (<any>cur).sym);\n\n            msg = this.addPadding(msg, 135, " ", false);\n            msg = msg.concat("type=" + (cur.type === null ? "null" : cur.type.getTypeName()));\n            this.logger.log(msg);\n        }\n\n        private logComments(script: TypeScript.Script, comments: TypeScript.AST[], indent: number) {\n            if (comments == null)\n                return;\n\n            for (var i = 0; i < comments.length; i++) {\n                this.logNode(script, comments[i], indent);\n            }\n        }\n\n        public logLinemap(linemap: number[]) {\n            var result = "[";\n            for (var i = 0; i < linemap.length; i++) {\n                if (i > 0)\n                    result += ",";\n                result += linemap[i];\n            }\n            result += "]";\n            this.logger.log("linemap: " + result);\n        }\n\n        private addPadding(s: string, targetLength: number, paddingString: string, leftPadding: bool): string {\n            var result = (leftPadding ? "" : s);\n            for (var i = s.length; i < targetLength; i++) {\n                result = result + paddingString;\n            }\n            result = result + (leftPadding ? s : "");\n            return result;\n        }\n\n        private addLineColumn(script: TypeScript.Script, position: number): string {\n            // just for calling getSourceLineColFromMap\n            var lineInfo = {\n                line: -1,\n                col: -1\n            }\n            TypeScript.getSourceLineColFromMap(lineInfo, position, script.locationInfo.lineMap);\n\n            if (lineInfo.col !== -1) {\n                lineInfo.col++; //TODO: function above seems to consider line as 1-based, and column as 0-based\n            }\n\n            return "(" + lineInfo.line + ", " + lineInfo.col + ")";\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export function lastOf(items: any[]): any {\n        return (items === null || items.length === 0) ? null : items[items.length - 1];\n    }\n\n    export function max(a: number, b: number): number {\n        return a >= b ? a : b;\n    }\n\n    export function min(a: number, b: number): number {\n        return a <= b ? a : b;\n    }\n\n    //\n    // Helper class representing a path from a root ast node to a (grand)child ast node.\n    // This is helpful as our tree don\'t have parents.\n    //\n    export class AstPath {\n        public asts: TypeScript.AST[] = [];\n        public top: number = -1;\n\n        static reverseIndexOf(items: any[], index: number): any {\n            return (items === null || items.length <= index) ? null : items[items.length - index - 1];\n        }\n\n        public clone(): AstPath {\n            var clone = new AstPath();\n            clone.asts = this.asts.map((value) => { return value; });\n            clone.top = this.top;\n            return clone;\n        }\n\n        public pop(): TypeScript.AST {\n            var head = this.ast();\n            this.up();\n\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            return head;\n        }\n\n        public push(ast: TypeScript.AST) {\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            this.top = this.asts.length;\n            this.asts.push(ast);\n        }\n\n        public up() {\n            if (this.top <= -1)\n                throw new Error("Invalid call to \'up\'");\n            this.top--;\n        }\n\n        public down() {\n            if (this.top == this.ast.length - 1)\n                throw new Error("Invalid call to \'down\'");\n            this.top++;\n        }\n\n        public nodeType(): TypeScript.NodeType {\n            if (this.ast() == null)\n                return TypeScript.NodeType.None;\n            return this.ast().nodeType;\n        }\n\n        public ast() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));\n        }\n\n        public parent() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);\n        }\n\n        public count() {\n            return this.top + 1;\n        }\n\n        public get(index: number): TypeScript.AST {\n            return this.asts[index];\n        }\n\n        public isNameOfClass(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfInterface(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfArgument(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ArgDecl) &&\n                ((<TypeScript.ArgDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfVariable(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.VarDecl) &&\n                ((<TypeScript.VarDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfModule(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) &&\n                ((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfFunction(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.FuncDecl) &&\n                ((<TypeScript.FuncDecl>this.parent()).name === this.ast());\n        }\n\n        public isChildOfScript(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script;\n        }\n\n        public isChildOfModule(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration;\n        }\n\n        public isChildOfClass(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration;\n        }\n\n        public isArgumentOfClassConstructor(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 5 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) &&\n                ((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]);\n        }\n\n        public isChildOfInterface(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration;\n        }\n\n        public isTopLevelImplicitModule() {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags, TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfTopLevelImplicitModule() {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags, TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfScript(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script &&\n                 (<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfSwitch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch &&\n                 (<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0];\n        }\n\n        public isBodyOfModule(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfClass(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                 (<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                 (<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfInterface(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration &&\n                 (<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfBlock(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFor(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.For &&\n                (<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfCase(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case &&\n                (<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfTry(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try &&\n                (<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfCatch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch &&\n                (<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfDoWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile &&\n                (<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.While &&\n                (<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfForIn(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn &&\n                (<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfWith(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.With &&\n                (<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFinally(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally &&\n                (<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1];\n        }\n\n        public isDefaultCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0];\n        }\n\n        public isListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];\n        }\n\n        public isBodyOfObjectLit(): bool {\n            return this.isListOfObjectLit();\n        }\n\n        public isEmptyListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] &&\n                (<TypeScript.ASTList>this.asts[this.top - 0]).members.length == 0;\n        }\n\n        public isMemberOfObjectLit(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1];\n        }\n\n        public isNameOfMemberOfObjectLit(): bool {\n            return this.count() >= 4 &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2];\n        }\n\n        public isListOfArrayLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];\n        }\n\n        public isTargetOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0];\n        }\n\n        public isMemberOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isItemOfList(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List;\n            //(<Tools.ASTList>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isThenOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0];\n        }\n\n        public isElseOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfDefaultCase(): bool {\n            return this.isBodyOfCase();\n        }\n\n        public isSingleStatementList(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.ASTList>this.asts[this.top]).members.length === 1;\n        }\n\n        public isArgumentListOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentOfFunction(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1];\n        }\n\n        public isArgumentListOfCall(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentListOfNew(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.New &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isSynthesizedBlock(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false;\n        }\n    }\n\n    export function isValidAstNode(ast: TypeScript.ASTSpan): bool {\n        if (ast === null)\n            return false;\n\n        if (ast.minChar === -1 || ast.limChar === -1)\n            return false;\n\n        return true;\n    }\n\n    export class AstPathContext {\n        public path = new TypeScript.AstPath();\n    }\n\n    export enum GetAstPathOptions {\n        Default = 0,\n        EdgeInclusive = 1,\n        //We need this options dealing with an AST coming from an incomplete AST. For example:\n        //     class foo { // r\n        // If we ask for the AST at the position after the "r" character, we won\'t see we are \n        // inside a comment, because the "class" AST node has a limChar corresponding to the position of \n        // the "{" character, meaning we don\'t traverse the tree down to the stmt list of the class, meaning\n        // we don\'t find the "precomment" attached to the errorneous empty stmt.\n        //TODO: It would be nice to be able to get rid of this.\n        DontPruneSearchBasedOnPosition = 1 << 1,\n    }\n\n    ///\n    /// Return the stack of AST nodes containing "position"\n    ///\n    export function getAstPathToPosition(script: TypeScript.AST, pos: number, options = GetAstPathOptions.Default): TypeScript.AstPath {\n        var lookInComments = (comments: TypeScript.Comment[]) => {\n            if (comments && comments.length > 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    var minChar = comments[i].minChar;\n                    var limChar = comments[i].limChar;\n                    if (!comments[i].isBlockComment) {\n                        limChar++; // For single line comments, include 1 more character (for the newline)\n                    }\n                    if (pos >= minChar && pos < limChar) {\n                        ctx.path.push(comments[i]);\n                    }\n                }\n            }\n        }\n\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {\n            if (isValidAstNode(cur)) {\n\n                // Add "cur" to the stack if it contains our position\n                // For "identifier" nodes, we need a special case: A position equal to "limChar" is\n                // valid, since the position corresponds to a caret position (in between characters)\n                // For example:\n                //  bar\n                //  0123\n                // If "position == 3", the caret is at the "right" of the "r" character, which should be considered valid\n                var inclusive =\n                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||\n                    cur.nodeType === TypeScript.NodeType.Name ||\n                    pos === script.limChar; // Special "EOF" case\n\n                var minChar = cur.minChar;\n                var limChar = cur.limChar + (inclusive ? 1 : 0)\n                if (pos >= minChar && pos < limChar) {\n\n                    // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it\'s better\n                    //       than top of the stack.\n                    var previous = ctx.path.ast();\n                    if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {\n                        ctx.path.push(cur);\n                    }\n                    else {\n                        //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");\n                    }\n                }\n\n                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually\n                if (pos < limChar) {\n                    lookInComments(cur.preComments);\n                }\n                if (pos >= minChar) {\n                    lookInComments(cur.postComments);\n                }\n\n                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {\n                    // Don\'t go further down the tree if pos is outside of [minChar, limChar]\n                    walker.options.goChildren = (minChar <= pos && pos <= limChar);\n                }\n            }\n            return cur;\n        }\n\n        var ctx = new AstPathContext();\n        TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx);\n        return ctx.path;\n    }\n\n    //\n    // Find a source text offset that is safe for lexing tokens at the given position.\n    // This is used when "position" might be inside a comment or string, etc.\n    //\n    export function getTokenizationOffset(script: TypeScript.Script, position: number): number {\n        var bestOffset = 0;\n        var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {\n            if (TypeScript.isValidAstNode(cur)) {\n                // Did we find a closer offset?\n                if (cur.minChar <= position) {\n                    bestOffset = max(bestOffset, cur.minChar);\n                }\n\n                // Stop the walk if this node is not related to "minChar"\n                if (cur.minChar > position || cur.limChar < bestOffset) {\n                    walker.options.goChildren = false;\n                }\n            }\n\n            return cur;\n        }\n\n        TypeScript.getAstWalkerFactory().walk(script, pre);\n        return bestOffset;\n    }\n\n    ///\n    /// Simple function to Walk an AST using a simple callback function.\n    ///\n    export function walkAST(ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void ): void {\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.push(cur);\n            callback(path, walker);\n            return cur;\n        }\n        var post = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.pop();\n            return cur;\n        }\n\n        var path = new AstPath();\n        TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path);\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ASTSpan {\n        public minChar: number = -1;  // -1 = "undefined" or "compiler generated"\n        public limChar: number = -1;  // -1 = "undefined" or "compiler generated"   \n    }\n\n    export class AST extends ASTSpan {\n        public type: Type = null;\n        public flags = ASTFlags.Writeable;\n\n        // REVIEW: for diagnostic purposes\n        public passCreated: number = CompilerDiagnostics.analysisPass;\n\n        public preComments: Comment[] = null;\n        public postComments: Comment[] = null;\n        private docComments: Comment[] = null;\n\n        public isParenthesized = false;\n\n        constructor (public nodeType: NodeType) {\n            super();\n        }\n\n        public isExpression() { return false; }\n\n        public isStatementOrExpression() { return false; }\n\n        public isCompoundStatement() { return false; }\n\n        public isLeaf() { return this.isStatementOrExpression() && (!this.isCompoundStatement()); }\n        \n        public isDeclaration() { return false; }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Error:\n                case NodeType.EmptyExpr:\n                    this.type = typeFlow.anyType;\n                    break;\n                case NodeType.This:\n                    return typeFlow.typeCheckThis(this);\n                case NodeType.Null:\n                    this.type = typeFlow.nullType;\n                    break;\n                case NodeType.False:\n                case NodeType.True:\n                    this.type = typeFlow.booleanType;\n                    break;\n                case NodeType.Super:\n                    return typeFlow.typeCheckSuper(this);\n                case NodeType.EndCode:\n                case NodeType.Empty:\n                case NodeType.Void:\n                    this.type = typeFlow.voidType;\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            switch (this.nodeType) {\n                case NodeType.This:\n                    emitter.recordSourceMappingStart(this);\n                    if (emitter.thisFnc && (hasFlag(emitter.thisFnc.fncFlags, FncFlags.IsFatArrowFunction))) {\n                        emitter.writeToOutput("_this");\n                    }\n                    else {\n                        emitter.writeToOutput("this");\n                    }\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Null:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("null");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.False:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("false");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.True:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("true");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Super:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.emitSuperReference();\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.EndCode:\n                case NodeType.Error:\n                case NodeType.EmptyExpr:\n                    break;\n                case NodeType.Empty:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Void:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("void ");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public print(context: PrintContext) {\n            context.startLine();\n            var lineCol = { line: -1, col: -1 };\n            var limLineCol = { line: -1, col: -1 };\n            if (context.parser !== null) {\n                context.parser.getSourceLineCol(lineCol, this.minChar);\n                context.parser.getSourceLineCol(limLineCol, this.limChar);\n                context.write("(" + lineCol.line + "," + lineCol.col + ")--" +\n                              "(" + limLineCol.line + "," + limLineCol.col + "): ");\n            }\n            var lab = this.printLabel();\n            if (hasFlag(this.flags, ASTFlags.Error)) {\n                lab += " (Error)";\n            }\n            context.writeLine(lab);\n        }\n\n        public printLabel() {\n            if (nodeTypeTable[this.nodeType] !== undefined) {\n                return nodeTypeTable[this.nodeType];\n            }\n            else {\n                return (<any>NodeType)._map[this.nodeType];\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            // by default, AST adds itself to current basic block and does not check its children\n            context.walker.options.goChildren = false;\n            context.addContent(this);\n        }\n\n        public netFreeUses(container: Symbol, freeUses: StringHashTable) {\n        }\n\n        public treeViewLabel() {\n            return (<any>NodeType)._map[this.nodeType];\n        }\n\n        public static getResolvedIdentifierName(name: string): string {\n            if (!name) return "";\n\n            var resolved = "";\n            var start = 0;\n            var i = 0;\n            while(i <= name.length - 6) {\n                // Look for escape sequence \\uxxxx\n                if (name.charAt(i) == \'\\\\\' && name.charAt(i+1) == \'u\') {\n                    var charCode = parseInt(name.substr(i + 2, 4), 16);\n                    resolved += name.substr(start, i - start);\n                    resolved += String.fromCharCode(charCode);\n                    i += 6;\n                    start = i;\n                    continue;\n                } \n                i++;\n            }\n            // Append remaining string\n            resolved += name.substring(start);\n            return resolved;\n        }\n\n        public getDocComments() : Comment[] {\n            if (!this.isDeclaration() || !this.preComments || this.preComments.length == 0) {\n                return [];\n            }\n\n            if (!this.docComments) {\n                var preCommentsLength = this.preComments.length;\n                var docComments: Comment[] = [];\n                for (var i = preCommentsLength - 1; i >= 0; i--) {\n                    if (this.preComments[i].isDocComment()) {\n                        var prevDocComment = docComments.length > 0 ? docComments[docComments.length - 1] : null;\n                        if (prevDocComment == null || // If the help comments were not yet set then this is the comment\n                             (this.preComments[i].limLine == prevDocComment.minLine ||\n                              this.preComments[i].limLine + 1 == prevDocComment.minLine)) { // On same line or next line\n                            docComments.push(this.preComments[i]);\n                            continue;\n                        }\n                    }\n                    break;\n                }\n\n                this.docComments = docComments.reverse();\n            }\n\n            return this.docComments;\n        }\n    }\n\n    export class IncompleteAST extends AST {\n        constructor (min: number, lim: number) {\n            super(NodeType.Error);\n\n            this.minChar = min;\n            this.limChar = lim;\n        }\n    }\n\n    export class ASTList extends AST {\n        public enclosingScope: SymbolScope = null;\n        public members: AST[] = new AST[];\n\n        constructor () {\n            super(NodeType.List);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var len = this.members.length;\n            for (var i = 0; i < len; i++) {\n                if (context.noContinuation) {\n                    context.addUnreachable(this.members[i]);\n                    break;\n                }\n                else {\n                    this.members[i] = context.walk(this.members[i], this);\n                }\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public append(ast: AST) {\n            this.members[this.members.length] = ast;\n            return this;\n        }\n\n        public appendAll(ast: AST) {\n            if (ast.nodeType == NodeType.List) {\n                var list = <ASTList>ast;\n                for (var i = 0, len = list.members.length; i < len; i++) {\n                    this.append(list.members[i]);\n                }\n            }\n            else {\n                this.append(ast);\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascriptList(this, null, TokenID.Semicolon, startLine, false, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.members.length;\n            typeFlow.nestingLevel++;\n            for (var i = 0; i < len; i++) {\n                if (this.members[i]) {\n                    this.members[i] = this.members[i].typeCheck(typeFlow);\n                }\n            }\n            typeFlow.nestingLevel--;\n            return this;\n        }\n    }\n\n    export class Identifier extends AST {\n        public sym: Symbol = null;\n        public cloId = -1;\n        public text: string;\n\n        // \'actualText\' is the text that the user has entered for the identifier. the text might \n        // include any Unicode escape sequences (e.g.: \\u0041 for \'A\'). \'text\', however, contains \n        // the resolved value of any escape sequences in the actual text; so in the previous \n        // example, actualText = \'\\u0041\', text = \'A\'.\n        //\n        // For purposes of finding a symbol, use text, as this will allow you to match all \n        // variations of the variable text. For full-fidelity translation of the user input, such\n        // as emitting, use the actualText field.\n        // \n        // Note: \n        //    To change text, and to avoid running into a situation where \'actualText\' does not \n        //    match \'text\', always use setText.\n        constructor (public actualText: string, public hasEscapeSequence?: bool) {\n            super(NodeType.Name);\n            this.setText(actualText, hasEscapeSequence);\n        }\n\n        public setText(actualText: string, hasEscapeSequence?: bool) {\n            this.actualText = actualText;\n            if (hasEscapeSequence) {\n                this.text = AST.getResolvedIdentifierName(actualText);\n            }\n            else {\n                this.text = actualText;\n            }\n        }\n\n        public isMissing() { return false; }\n        public isLeaf() { return true; }\n\n        public treeViewLabel() {\n            return "id: " + this.actualText;\n        }\n\n        public printLabel() {\n            if (this.actualText) {\n                return "id: " + this.actualText;\n            }\n            else {\n                return "name node";\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckName(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptName(this, true);\n        }\n\n        public static fromToken(token: Token): Identifier {\n            return new Identifier(token.getText(), (<IdentifierToken>token).hasEscapeSequence);\n        }\n    }\n\n    export class MissingIdentifier extends Identifier {\n        constructor () {\n            super("__missing");\n        }\n\n        public isMissing() {\n            return true;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            // Emit nothing for a missing ID\n        }\n    }\n\n    export class Label extends AST {\n        constructor (public id: Identifier) {\n            super(NodeType.Label);\n        }\n\n        public printLabel() { return this.id.actualText + ":"; }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.recordSourceMappingStart(this.id);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this.id);\n            emitter.writeLineToOutput(":");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class Expression extends AST {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public isExpression() { return true; }\n\n        public isStatementOrExpression() { return true; }\n    }\n\n    export class UnaryExpression extends Expression {\n        public targetType: Type = null; // Target type for an object literal (null if no target type)\n        public castTerm: AST = null;\n\n        constructor (nodeType: NodeType, public operand: AST) {\n            super(nodeType);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            // TODO: add successor as catch block/finally block if present\n            if (this.nodeType == NodeType.Throw) {\n                context.returnStmt();\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Not:\n                    return typeFlow.typeCheckBitNot(this);\n\n                case NodeType.LogNot:\n                    return typeFlow.typeCheckLogNot(this);\n\n                case NodeType.Pos:\n                case NodeType.Neg:\n                    return typeFlow.typeCheckUnaryNumberOperator(this);\n\n                case NodeType.IncPost:\n                case NodeType.IncPre:\n                case NodeType.DecPost:\n                case NodeType.DecPre:\n                    return typeFlow.typeCheckIncOrDec(this);\n\n                case NodeType.ArrayLit:\n                    typeFlow.typeCheckArrayLit(this);\n                    return this;\n\n                case NodeType.ObjectLit:\n                    typeFlow.typeCheckObjectLit(this);\n                    return this;\n\n                case NodeType.Throw:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.voidType;\n                    return this;\n\n                case NodeType.Typeof:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.stringType;\n                    return this;\n\n                case NodeType.Delete:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.booleanType;\n                    break;\n\n                case NodeType.TypeAssertion:\n                    this.castTerm = typeFlow.typeCheck(this.castTerm);\n                    var applyTargetType = !this.operand.isParenthesized;\n\n                    var targetType = applyTargetType ? this.castTerm.type : null;\n\n                    typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand);\n                    typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true);\n                    this.type = this.castTerm.type;\n                    return this;\n\n                case NodeType.Void:\n                    // REVIEW - Although this is good to do for completeness\'s sake,\n                    // this shouldn\'t be strictly necessary from the void operator\'s\n                    // point of view\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.checker.undefinedType;\n                    break;\n\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            switch (this.nodeType) {\n                case NodeType.IncPost:\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    emitter.writeToOutput("++");\n                    break;\n                case NodeType.LogNot:\n                    emitter.writeToOutput("!");\n                    emitter.emitJavascript(this.operand, TokenID.Exclamation, false);\n                    break;\n                case NodeType.DecPost:\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    emitter.writeToOutput("--");\n                    break;\n                case NodeType.ObjectLit:\n                    emitter.emitObjectLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.ArrayLit:\n                    emitter.emitArrayLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.Not:\n                    emitter.writeToOutput("~");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Neg:\n                    emitter.writeToOutput("-");\n                    if (this.operand.nodeType == NodeType.Neg) {\n                        this.operand.isParenthesized = true;\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Minus, false);\n                    break;\n                case NodeType.Pos:\n                    emitter.writeToOutput("+");\n                    if (this.operand.nodeType == NodeType.Pos) {\n                        this.operand.isParenthesized = true;\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Plus, false);\n                    break;\n                case NodeType.IncPre:\n                    emitter.writeToOutput("++");\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    break;\n                case NodeType.DecPre:\n                    emitter.writeToOutput("--");\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    break;\n                case NodeType.Throw:\n                    emitter.writeToOutput("throw ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    emitter.writeToOutput(";");\n                    break;\n                case NodeType.Typeof:\n                    emitter.writeToOutput("typeof ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Delete:\n                    emitter.writeToOutput("delete ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Void:\n                    emitter.writeToOutput("void ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.TypeAssertion:\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class CallExpression extends Expression {\n        constructor (nodeType: NodeType,\n                     public target: AST,\n                     public arguments: ASTList) {\n            super(nodeType);\n            this.minChar = this.target.minChar;\n        }\n\n        public signature: Signature = null;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (this.nodeType == NodeType.New) {\n                return typeFlow.typeCheckNew(this);\n            }\n            else {\n                return typeFlow.typeCheckCall(this);\n            }\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n\n            if (this.nodeType == NodeType.New) {\n                emitter.emitNew(this.target, this.arguments);\n            }\n            else {\n                emitter.emitCall(this, this.target, this.arguments);\n            }\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class BinaryExpression extends Expression {\n        constructor (nodeType: NodeType, public operand1: AST, public operand2: AST) {\n            super(nodeType);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Dot:\n                    return typeFlow.typeCheckDotOperator(this);\n                case NodeType.Asg:\n                    return typeFlow.typeCheckAsgOperator(this);\n                case NodeType.Add:\n                case NodeType.Sub:\n                case NodeType.Mul:\n                case NodeType.Div:\n                case NodeType.Mod:\n                case NodeType.Or:\n                case NodeType.And:\n                    return typeFlow.typeCheckArithmeticOperator(this, false);\n                case NodeType.Xor:\n                    return typeFlow.typeCheckBitwiseOperator(this, false);\n                case NodeType.Ne:\n                case NodeType.Eq:\n                    var text: string;\n                    if (typeFlow.checker.styleSettings.eqeqeq) {\n                        text = nodeTypeTable[this.nodeType];\n                        typeFlow.checker.errorReporter.styleError(this, "use of " + text);\n                    }\n                    else if (typeFlow.checker.styleSettings.eqnull) {\n                        text = nodeTypeTable[this.nodeType];\n                        if ((this.operand2 !== null) && (this.operand2.nodeType == NodeType.Null)) {\n                            typeFlow.checker.errorReporter.styleError(this, "use of " + text + " to compare with null");\n                        }\n                    }\n                case NodeType.Eqv:\n                case NodeType.NEqv:\n                case NodeType.Lt:\n                case NodeType.Le:\n                case NodeType.Ge:\n                case NodeType.Gt:\n                    return typeFlow.typeCheckBooleanOperator(this);\n                case NodeType.Index:\n                    return typeFlow.typeCheckIndex(this);\n                case NodeType.Member:\n                    this.type = typeFlow.voidType;\n                    return this;\n                case NodeType.LogOr:\n                    return typeFlow.typeCheckLogOr(this);\n                case NodeType.LogAnd:\n                    return typeFlow.typeCheckLogAnd(this);\n                case NodeType.AsgAdd:\n                case NodeType.AsgSub:\n                case NodeType.AsgMul:\n                case NodeType.AsgDiv:\n                case NodeType.AsgMod:\n                case NodeType.AsgOr:\n                case NodeType.AsgAnd:\n                    return typeFlow.typeCheckArithmeticOperator(this, true);\n                case NodeType.AsgXor:\n                    return typeFlow.typeCheckBitwiseOperator(this, true);\n                case NodeType.Lsh:\n                case NodeType.Rsh:\n                case NodeType.Rs2:\n                    return typeFlow.typeCheckShift(this, false);\n                case NodeType.AsgLsh:\n                case NodeType.AsgRsh:\n                case NodeType.AsgRs2:\n                    return typeFlow.typeCheckShift(this, true);\n                case NodeType.Comma:\n                    return typeFlow.typeCheckCommaOperator(this);\n                case NodeType.InstOf:\n                    return typeFlow.typeCheckInstOf(this);\n                case NodeType.In:\n                    return typeFlow.typeCheckInOperator(this);\n                case NodeType.From:\n                    typeFlow.checker.errorReporter.simpleError(this, "Illegal use of \'from\' keyword in binary expression");\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var binTokenId = nodeTypeToTokTable[this.nodeType];\n\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (binTokenId != undefined) {\n\n                emitter.emitJavascript(this.operand1, binTokenId, false);\n\n                if (tokenTable[binTokenId].text == "instanceof") {\n                    emitter.writeToOutput(" instanceof ");\n                }\n                else if (tokenTable[binTokenId].text == "in") {\n                    emitter.writeToOutput(" in ");\n                }\n                else {\n                    emitter.writeToOutputTrimmable(" " + tokenTable[binTokenId].text + " ");\n                }\n\n                emitter.emitJavascript(this.operand2, binTokenId, false);\n            }\n            else {\n                switch (this.nodeType) {\n                    case NodeType.Dot:\n                        if (!emitter.tryEmitConstant(this)) {\n                            emitter.emitJavascript(this.operand1, TokenID.Dot, false);\n                            emitter.writeToOutput(".");\n                            emitter.emitJavascriptName(<Identifier>this.operand2, false);\n                        }\n                        break;\n                    case NodeType.Index:\n                        emitter.emitIndex(this.operand1, this.operand2);\n                        break;\n\n                    case NodeType.Member:\n                        if (this.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>this.operand2).isAccessor()) {\n                            var funcDecl = <FuncDecl>this.operand2;\n                            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                                emitter.writeToOutput("get ");\n                            }\n                            else {\n                                emitter.writeToOutput("set ");\n                            }\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                        }\n                        else {\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                            emitter.writeToOutputTrimmable(": ");\n                        }\n                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Comma:\n                        emitter.emitJavascript(this.operand1, TokenID.Comma, false);\n                        if (emitter.emitState.inObjectLiteral) {\n                            emitter.writeLineToOutput(", ");\n                        }\n                        else {\n                            emitter.writeToOutput(",");\n                        }\n                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Is:\n                        throw new Error("should be de-sugared during type check");\n                    default:\n                        throw new Error("please implement in derived class");\n                }\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class ConditionalExpression extends Expression {\n        constructor (public operand1: AST,\n                     public operand2: AST,\n                     public operand3: AST) {\n            super(NodeType.ConditionalExpression);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckQMark(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.operand1, TokenID.Question, false);\n            emitter.writeToOutput(" ? ");\n            emitter.emitJavascript(this.operand2, TokenID.Question, false);\n            emitter.writeToOutput(" : ");\n            emitter.emitJavascript(this.operand3, TokenID.Question, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class NumberLiteral extends Expression {\n        constructor (public value: number, public hasEmptyFraction?: bool) {\n            super(NodeType.NumberLit);\n        }\n\n        public isNegativeZero = false;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.doubleType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return "num: " + this.printLabel();\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isNegativeZero) {\n                emitter.writeToOutput("-");\n            }\n\n            emitter.writeToOutput(this.value.toString());\n\n            if (this.hasEmptyFraction)\n                emitter.writeToOutput(".0");\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public printLabel() {\n            if (Math.floor(this.value) != this.value) {\n                return this.value.toFixed(2).toString();\n            }\n            else if (this.hasEmptyFraction) {\n                return this.value.toString() + ".0";\n            }\n            else {\n                return this.value.toString();\n            }\n        }\n    }\n\n    export class RegexLiteral extends Expression {\n        constructor (public regex) {\n            super(NodeType.Regex);\n        }\n        \n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.regexType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.regex.toString());\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class StringLiteral extends Expression {\n        constructor (public text: string) {\n            super(NodeType.QString);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitStringLiteral(this.text);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.stringType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return "st: " + this.text;\n        }\n\n        public printLabel() {\n            return this.text;\n        }\n    }\n\n    export class ModuleElement extends AST {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n    }\n\n    export class ImportDeclaration extends ModuleElement {\n        public isStatementOrExpression() { return true; }\n        public varFlags = VarFlags.None;\n        public isDynamicImport = false;\n        public isDeclaration() { return true; }\n\n        constructor (public id: Identifier, public alias: AST) {\n            super(NodeType.ImportDeclaration);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var mod = <ModuleType>this.alias.type;\n            // REVIEW: Only modules may be aliased for now, though there\'s no real\n            // restriction on what the type symbol may be\n            if (!this.isDynamicImport || (this.id.sym && !(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef)) {\n                var prevModAliasId = emitter.modAliasId;\n                var prevFirstModAlias = emitter.firstModAlias;\n\n                emitter.recordSourceMappingStart(this);\n                emitter.emitParensAndCommentsInPlace(this, true);\n                emitter.writeToOutput("var " + this.id.actualText + " = ");\n                emitter.modAliasId = this.id.actualText;\n                emitter.firstModAlias = this.firstAliasedModToString();\n                emitter.emitJavascript(this.alias, TokenID.Tilde, false);\n                // the dynamic import case will insert the semi-colon automatically\n                if (!this.isDynamicImport) {\n                    emitter.writeToOutput(";");\n                }\n                emitter.emitParensAndCommentsInPlace(this, false);\n                emitter.recordSourceMappingEnd(this);\n\n                emitter.modAliasId = prevModAliasId;\n                emitter.firstModAlias = prevFirstModAlias;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckImportDecl(this);\n        }\n\n        public getAliasName(aliasAST?: AST = this.alias) : string {\n            if (aliasAST.nodeType == NodeType.Name) {\n                return (<Identifier>aliasAST).actualText;\n            } else {\n                var dotExpr = <BinaryExpression>aliasAST;\n                return this.getAliasName(dotExpr.operand1) + "." + this.getAliasName(dotExpr.operand2);\n            }\n        }\n\n        public firstAliasedModToString() {\n            if (this.alias.nodeType == NodeType.Name) {\n                return (<Identifier>this.alias).actualText;\n            }\n            else {\n                var dotExpr = <BinaryExpression>this.alias;\n                var firstMod = <Identifier>dotExpr.operand1;\n                return firstMod.actualText;\n            }\n        }\n    }\n\n    export class BoundDecl extends AST {\n        public init: AST = null;\n        public typeExpr: AST = null;\n        public varFlags = VarFlags.None;\n        public sym: Symbol = null;\n        public isDeclaration() { return true; }\n\n        constructor (public id: Identifier, nodeType: NodeType, public nestingLevel: number) {\n            super(nodeType);\n        }\n\n        public isStatementOrExpression() { return true; }\n\n        public isPrivate() { return hasFlag(this.varFlags, VarFlags.Private); }\n        public isPublic() { return hasFlag(this.varFlags, VarFlags.Public); }\n        public isProperty() { return hasFlag(this.varFlags, VarFlags.Property); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckBoundDecl(this);\n        }\n\n        public printLabel() {\n            return this.treeViewLabel();\n        }\n    }\n\n    export class VarDecl extends BoundDecl {\n        constructor (id: Identifier, nest: number) {\n            super(id, NodeType.VarDecl, nest);\n        }\n\n        public isAmbient() { return hasFlag(this.varFlags, VarFlags.Ambient); }\n        public isExported() { return hasFlag(this.varFlags, VarFlags.Exported); }\n        public isStatic() { return hasFlag(this.varFlags, VarFlags.Static); }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptVarDecl(this, tokenId);\n        }\n\n        public treeViewLabel() {\n            return "var " + this.id.actualText;\n        }\n    }\n\n    export class ArgDecl extends BoundDecl {\n        constructor (id: Identifier) {\n            super(id, NodeType.ArgDecl, 0);\n        }\n\n        public isOptional = false;\n\n        public isOptionalArg() { return this.isOptional || this.init; }\n\n        public treeViewLabel() {\n            return "arg: " + this.id.actualText;\n        }\n\n        public parameterPropertySym: FieldSymbol = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    var internalId = 0;\n\n    export class FuncDecl extends AST {\n        public hint: string = null;\n        public fncFlags = FncFlags.None;\n        public returnTypeAnnotation: AST = null;\n        public symbols: IHashTable;\n        public variableArgList = false;\n        public signature: Signature;\n        public envids: Identifier[];\n        public jumpRefs: Identifier[] = null;\n        public internalNameCache: string = null;\n        public tmp1Declared = false;\n        public enclosingFnc: FuncDecl = null;\n        public freeVariables: Symbol[] = [];\n        public unitIndex = -1;\n        public classDecl: NamedDeclaration = null;\n        public boundToProperty: VarDecl = null;\n        public isOverload = false;\n        public innerStaticFuncs: FuncDecl[] = [];\n        public isTargetTypedAsMethod = false;\n        public isInlineCallLiteral = false;\n        public accessorSymbol: Symbol = null;\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public returnStatementsWithExpressions: ReturnStatement[] = [];\n        public scopeType: Type = null; // Type of the FuncDecl, before target typing\n        public endingToken: ASTSpan = null;\n        public isDeclaration() { return true; }\n\n        constructor (public name: Identifier, public bod: ASTList, public isConstructor: bool,\n                     public arguments: ASTList, public vars: ASTList, public scopes: ASTList, public statics: ASTList,\n                     nodeType: number) {\n\n            super(nodeType);\n        }\n\n        public internalName(): string {\n            if (this.internalNameCache == null) {\n                var extName = this.getNameText();\n                if (extName) {\n                    this.internalNameCache = "_internal_" + extName;\n                }\n                else {\n                    this.internalNameCache = "_internal_" + internalId++;\n                }\n            }\n            return this.internalNameCache;\n        }\n\n        public hasSelfReference() { return hasFlag(this.fncFlags, FncFlags.HasSelfReference); }\n        public setHasSelfReference() { this.fncFlags |= FncFlags.HasSelfReference; }\n\n        public hasSuperReferenceInFatArrowFunction() { return hasFlag(this.fncFlags, FncFlags.HasSuperReferenceInFatArrowFunction); }\n        public setHasSuperReferenceInFatArrowFunction() { this.fncFlags |= FncFlags.HasSuperReferenceInFatArrowFunction; }\n\n        public addCloRef(id: Identifier, sym: Symbol): number {\n            if (this.envids == null) {\n                this.envids = new Identifier[];\n            }\n            this.envids[this.envids.length] = id;\n            var outerFnc = this.enclosingFnc;\n            if (sym) {\n                while (outerFnc && (outerFnc.type.symbol != sym.container)) {\n                    outerFnc.addJumpRef(sym);\n                    outerFnc = outerFnc.enclosingFnc;\n                }\n            }\n            return this.envids.length - 1;\n        }\n\n        public addJumpRef(sym: Symbol): void {\n            if (this.jumpRefs == null) {\n                this.jumpRefs = new Identifier[];\n            }\n            var id = new Identifier(sym.name);\n            this.jumpRefs[this.jumpRefs.length] = id;\n            id.sym = sym;\n            id.cloId = this.addCloRef(id, null);\n        }\n\n        public buildControlFlow(): ControlFlowContext {\n            var entry = new BasicBlock();\n            var exit = new BasicBlock();\n\n            var context = new ControlFlowContext(entry, exit);\n\n            var controlFlowPrefix = (ast: AST, parent: AST, walker: IAstWalker) => {\n                ast.addToControlFlow(walker.state);\n                return ast;\n            }\n\n            var walker = getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context);\n            context.walker = walker;\n            walker.walk(this.bod, this);\n\n            return context;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFunction(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptFunction(this);\n        }\n\n        public getNameText() {\n            if (this.name) {\n                return this.name.actualText;\n            }\n            else {\n                return this.hint;\n            }\n        }\n\n        public isMethod() {\n            return (this.fncFlags & FncFlags.Method) != FncFlags.None;\n        }\n\n        public isCallMember() { return hasFlag(this.fncFlags, FncFlags.CallMember); }\n        public isConstructMember() { return hasFlag(this.fncFlags, FncFlags.ConstructMember); }\n        public isIndexerMember() { return hasFlag(this.fncFlags, FncFlags.IndexerMember); }\n        public isSpecialFn() { return this.isCallMember() || this.isIndexerMember() || this.isConstructMember(); }\n        public isAnonymousFn() { return this.name === null; }\n        public isAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor) || hasFlag(this.fncFlags, FncFlags.SetAccessor); }\n        public isGetAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor); }\n        public isSetAccessor() { return hasFlag(this.fncFlags, FncFlags.SetAccessor); }\n        public isAmbient() { return hasFlag(this.fncFlags, FncFlags.Ambient); }\n        public isExported() { return hasFlag(this.fncFlags, FncFlags.Exported); }\n        public isPrivate() { return hasFlag(this.fncFlags, FncFlags.Private); }\n        public isPublic() { return hasFlag(this.fncFlags, FncFlags.Public); }\n        public isStatic() { return hasFlag(this.fncFlags, FncFlags.Static); }\n\n        public treeViewLabel() {\n            if (this.name == null) {\n                return "funcExpr";\n            }\n            else {\n                return "func: " + this.name.actualText\n            }\n        }\n\n        public ClearFlags(): void {\n            this.fncFlags = FncFlags.None;\n        }\n\n        public isSignature() { return (this.fncFlags & FncFlags.Signature) != FncFlags.None; }\n    }\n\n    export class LocationInfo {\n        constructor (public filename: string, public lineMap: number[], public unitIndex) { }\n    }\n\n    export var unknownLocationInfo = new LocationInfo("unknown", null, -1);\n\n    export class Script extends FuncDecl {\n        public locationInfo: LocationInfo = null;\n        public referencedFiles: IFileReference[] = [];\n        public requiresGlobal = false;\n        public requiresExtendsBlock = false;\n        public isResident = false;\n        public isDeclareFile = false;\n        public hasBeenTypeChecked = false;\n        public topLevelMod: ModuleDeclaration = null;\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public vars: ASTList;\n        public scopes: ASTList;\n        // Remember if the script contains Unicode chars, that is needed when generating code for this script object to decide the output file correct encoding.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n        public cachedEmitRequired: bool;\n\n        private setCachedEmitRequired(value: bool) {\n            this.cachedEmitRequired = value;\n            return this.cachedEmitRequired;\n        }\n\n        constructor (vars: ASTList, scopes: ASTList) {\n            super(new Identifier("script"), null, false, null, vars, scopes, null, NodeType.Script);\n            this.vars = vars;\n            this.scopes = scopes;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckScript(this);\n        }\n\n        public treeViewLabel() {\n            return "Script";\n        }\n\n        public emitRequired(emitOptions: EmitOptions) {\n            if (this.cachedEmitRequired != undefined) {\n                return this.cachedEmitRequired;\n            }\n\n            if (!this.isDeclareFile && !this.isResident && this.bod) {\n                if (this.bod.members.length == 0) {\n                    // allow empty files that are not declare files \n                    return this.setCachedEmitRequired(true);\n                }\n\n                for (var i = 0, len = this.bod.members.length; i < len; i++) {\n                    var stmt = this.bod.members[i];\n                    if (stmt.nodeType == NodeType.ModuleDeclaration) {\n                        if (!hasFlag((<ModuleDeclaration>stmt).modFlags, ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.ClassDeclaration) {\n                        if (!hasFlag((<ClassDeclaration>stmt).varFlags, VarFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.VarDecl) {\n                        if (!hasFlag((<VarDecl>stmt).varFlags, VarFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.FuncDecl) {\n                        if (!(<FuncDecl>stmt).isSignature()) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType != NodeType.InterfaceDeclaration && stmt.nodeType != NodeType.Empty) {\n                        return this.setCachedEmitRequired(true);\n                    }\n                }\n\n                if ( emitOptions.emitComments &&\n                    ((this.bod.preComments && this.bod.preComments.length > 0) || (this.bod.postComments && this.bod.postComments.length > 0))) {\n                    return this.setCachedEmitRequired(true);\n                }\n            }\n            return this.setCachedEmitRequired(false);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (this.emitRequired(emitter.emitOptions)) {\n                emitter.emitParensAndCommentsInPlace(this.bod, true);\n                emitter.emitJavascriptList(this.bod, null, TokenID.Semicolon, true, false, false, true, this.requiresExtendsBlock);\n                emitter.emitParensAndCommentsInPlace(this.bod, false);\n            }\n        }\n\n        private externallyVisibleImportedSymbols: Symbol[] = [];\n\n        public AddExternallyVisibleImportedSymbol(symbol: Symbol, checker: TypeChecker) {\n            if (this.isExternallyVisibleSymbol(symbol)) {\n                return;\n            }\n\n            // Before adding check if the external symbol is also marked for visibility\n            if (!symbol.getType().symbol.isExternallyVisible(checker)) {\n                // Report error\n                var quotes = "";\n                var moduleName = symbol.getType().symbol.prettyName;\n                if (!isQuoted(moduleName)) {\n                    quotes = "\'";\n                }\n                checker.errorReporter.simpleError(symbol.declAST, "Externally visible import statement uses non exported module " + quotes + moduleName + quotes);\n            }\n            this.externallyVisibleImportedSymbols.push(symbol);\n        }\n\n        public isExternallyVisibleSymbol(symbol: Symbol) {\n            for (var i = 0 ; i < this.externallyVisibleImportedSymbols.length; i++) {\n                if (this.externallyVisibleImportedSymbols[i] == symbol) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    export class NamedDeclaration extends ModuleElement {\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public isDeclaration() { return true; }\n\n        constructor (nodeType: NodeType,\n                     public name: Identifier,\n                     public members: ASTList) {\n            super(nodeType);\n        }\n    }\n\n    export class ModuleDeclaration extends NamedDeclaration {\n        public modFlags = ModuleFlags.ShouldEmitModuleDecl;\n        public mod: ModuleType;\n        public prettyName: string;\n        public amdDependencies: string[] = [];\n        public vars: ASTList;\n        public scopes: ASTList;\n        // Remember if the module contains Unicode chars, that is needed for dynamic module as we will generate a file for each.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n\n        constructor (name: Identifier, members: ASTList, vars: ASTList, scopes: ASTList, public endingToken: ASTSpan) {\n            super(NodeType.ModuleDeclaration, name, members);\n\n            this.vars = vars;\n            this.scopes = scopes;\n            this.prettyName = this.name.actualText;\n        }\n\n        public isExported() { return hasFlag(this.modFlags, ModuleFlags.Exported); }\n        public isAmbient() { return hasFlag(this.modFlags, ModuleFlags.Ambient); }\n        public isEnum() { return hasFlag(this.modFlags, ModuleFlags.IsEnum); }\n\n        public recordNonInterface() {\n            this.modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckModule(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (!hasFlag(this.modFlags, ModuleFlags.ShouldEmitModuleDecl)) {\n                emitter.emitParensAndCommentsInPlace(this, true);\n                emitter.emitJavascriptModule(this);\n                emitter.emitParensAndCommentsInPlace(this, false);\n            }\n        }\n    }\n\n    export class TypeDeclaration extends NamedDeclaration {\n        public varFlags = VarFlags.None;\n\n        constructor (nodeType: NodeType,\n                     name: Identifier,\n                     public extendsList: ASTList,\n                     public implementsList: ASTList,\n                     members: ASTList) {\n            super(nodeType, name, members);\n        }\n\n        public isExported() { \n            return hasFlag(this.varFlags, VarFlags.Exported);\n        }\n\n        public isAmbient() {\n            return hasFlag(this.varFlags, VarFlags.Ambient);\n        }\n    }\n\n    export class ClassDeclaration extends TypeDeclaration {\n        public knownMemberNames: any = {};\n        public constructorDecl: FuncDecl = null;\n        public constructorNestingLevel = 0;\n        public endingToken: ASTSpan = null;\n\n        constructor (name: Identifier,\n                     members: ASTList,\n                     extendsList: ASTList,\n                     implementsList: ASTList) {\n            super(NodeType.ClassDeclaration, name, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckClass(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptClass(this);\n        }\n    }\n\n    export class InterfaceDeclaration extends TypeDeclaration {\n        constructor (name: Identifier,\n                     members: ASTList,\n                     extendsList: ASTList,\n                     implementsList: ASTList) {\n            super(NodeType.InterfaceDeclaration, name, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckInterface(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n        }\n    }\n\n    export class Statement extends ModuleElement {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n            this.flags |= ASTFlags.IsStatement;\n        }\n\n        public isLoop() { return false; }\n\n        public isStatementOrExpression() { return true; }\n\n        public isCompoundStatement() { return this.isLoop(); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class LabeledStatement extends Statement {\n        constructor (public labels: ASTList, public stmt: AST) {\n            super(NodeType.LabeledStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.labels) {\n                var labelsLen = this.labels.members.length;\n                for (var i = 0; i < labelsLen; i++) {\n                    this.labels.members[i].emit(emitter, tokenId, startLine);\n                }\n            }\n            this.stmt.emit(emitter, tokenId, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            typeFlow.typeCheck(this.labels);\n            this.stmt = this.stmt.typeCheck(typeFlow);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var beforeBB = context.current;\n            var bb = new BasicBlock();\n            context.current = bb;\n            beforeBB.addSuccessor(bb);\n        }\n    }\n\n    export class Block extends Statement {\n        constructor (public statements: ASTList,\n                     public isStatementBlock: bool) {\n            super(NodeType.Block);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isStatementBlock) {\n                emitter.writeLineToOutput(" {");\n                emitter.indenter.increaseIndent();\n            } else {\n                emitter.setInVarBlock(this.statements.members.length);\n            }\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.statements) {\n                emitter.emitJavascriptList(this.statements, null, TokenID.Semicolon, true, false, false);\n            }\n            if (this.isStatementBlock) {\n                emitter.indenter.decreaseIndent();\n                emitter.emitIndent();\n                emitter.writeToOutput("}");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterIfNeeded = new BasicBlock();\n            context.pushStatement(this, context.current, afterIfNeeded);\n            if (this.statements) {\n                context.walk(this.statements, this);\n            }\n            context.walker.options.goChildren = false;\n            context.popStatement();\n            if (afterIfNeeded.predecessors.length > 0) {\n                context.current.addSuccessor(afterIfNeeded);\n                context.current = afterIfNeeded;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (!typeFlow.checker.styleSettings.emptyBlocks) {\n                if ((this.statements === null) || (this.statements.members.length == 0)) {\n                    typeFlow.checker.errorReporter.styleError(this, "empty block");\n                }\n            }\n\n            typeFlow.typeCheck(this.statements);\n            return this;\n        }\n    }\n\n    export class Jump extends Statement {\n        public target: string = null;\n        public hasExplicitTarget() { return (this.target); }\n        public resolvedTarget: Statement = null;\n\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public setResolvedTarget(parser: Parser, stmt: Statement): bool {\n            if (stmt.isLoop()) {\n                this.resolvedTarget = stmt;\n                return true;\n            }\n            if (this.nodeType === NodeType.Continue) {\n                parser.reportParseError("continue statement applies only to loops");\n                return false;\n            }\n            else {\n                if ((stmt.nodeType == NodeType.Switch) || this.hasExplicitTarget()) {\n                    this.resolvedTarget = stmt;\n                    return true;\n                }\n                else {\n                    parser.reportParseError("break statement with no label can apply only to a loop or switch statement");\n                    return false;\n                }\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.unconditionalBranch(this.resolvedTarget, (this.nodeType == NodeType.Continue));\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.nodeType == NodeType.Break) {\n                emitter.writeToOutput("break");\n            }\n            else {\n                emitter.writeToOutput("continue");\n            }\n            if (this.hasExplicitTarget()) {\n                emitter.writeToOutput(" " + this.target);\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(";");\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class WhileStatement extends Statement {\n        public body: AST = null;\n\n        constructor (public cond: AST) {\n            super(NodeType.While);\n        }\n\n        public isLoop() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("while(");\n            emitter.emitJavascript(this.cond, TokenID.While, false);\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, false);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            context.addContent(this.cond);\n            var condBlock = context.current;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            condBlock.addSuccessor(afterLoop);\n            // TODO: check for while (true) and then only continue if afterLoop has predecessors\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class DoWhileStatement extends Statement {\n        public body: AST = null;\n        public whileAST: AST = null;\n        public cond: AST = null;\n        public isLoop() { return true; }\n\n        constructor () {\n            super(NodeType.DoWhile);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("do");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingStart(this.whileAST);\n            emitter.writeToOutput("while");\n            emitter.recordSourceMappingEnd(this.whileAST);\n            emitter.writeToOutput(\'(\');\n            emitter.emitJavascript(this.cond, TokenID.CloseParen, false);\n            emitter.writeToOutput(")");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(";");\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckDoWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n                context.addContent(this.cond);\n                // TODO: check for while (true) \n                context.current = afterLoop;\n                loopEnd.addSuccessor(afterLoop);\n            }\n            else {\n                context.addUnreachable(this.cond);\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class IfStatement extends Statement {\n        public thenBod: AST;\n        public elseBod: AST = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor (public cond: AST) {\n            super(NodeType.If);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("if(");\n            emitter.emitJavascript(this.cond, TokenID.If, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.thenBod, true);\n            if (this.elseBod) {\n                if (this.elseBod.nodeType === NodeType.If) {\n                    emitter.writeToOutput(" else ");\n                    this.elseBod.emit(emitter, tokenId, /*startLine:*/ false);\n                }\n                else {\n                    emitter.writeToOutput(" else");\n                    emitter.emitJavascriptStatements(this.elseBod, true);\n                }\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckIf(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            this.cond.addToControlFlow(context);\n            var afterIf = new BasicBlock();\n            var beforeIf = context.current;\n            context.pushStatement(this, beforeIf, afterIf);\n            var hasContinuation = false;\n            context.current = new BasicBlock();\n            beforeIf.addSuccessor(context.current);\n            context.walk(this.thenBod, this);\n            if (!context.noContinuation) {\n                hasContinuation = true;\n                context.current.addSuccessor(afterIf);\n            }\n            if (this.elseBod) {\n                // current block will be thenBod\n                context.current = new BasicBlock();\n                context.noContinuation = false;\n                beforeIf.addSuccessor(context.current);\n                context.walk(this.elseBod, this);\n                if (!context.noContinuation) {\n                    hasContinuation = true;\n                    context.current.addSuccessor(afterIf);\n                }\n                else {\n                    // thenBod created continuation for if statement\n                    if (hasContinuation) {\n                        context.noContinuation = false;\n                    }\n                }\n            }\n            else {\n                beforeIf.addSuccessor(afterIf);\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            var targetInfo = context.popStatement();\n            if (afterIf.predecessors.length > 0) {\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            if (hasContinuation) {\n                context.current = afterIf;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class ReturnStatement extends Statement {\n        public returnExpression: AST = null;\n\n        constructor () {\n            super(NodeType.Return);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.returnExpression) {\n                emitter.writeToOutput("return ");\n                emitter.emitJavascript(this.returnExpression, TokenID.Semicolon, false);\n\n                if (this.returnExpression.nodeType === NodeType.FuncDecl) {\n                    emitter.writeToOutput(";");\n                }\n            }\n            else {\n                emitter.writeToOutput("return;");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.returnStmt();\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckReturn(this);\n        }\n    }\n\n    export class EndCode extends AST {\n        constructor () {\n            super(NodeType.EndCode);\n        }\n    }\n\n    export class ForInStatement extends Statement {\n        constructor (public lval: AST, public obj: AST) {\n            super(NodeType.ForIn);\n            if (this.lval && (this.lval.nodeType == NodeType.VarDecl)) {\n                (<BoundDecl>this.lval).varFlags |= VarFlags.AutoInit;\n            }\n        }\n        public statement: ASTSpan = new ASTSpan();\n        public body: AST;\n\n        public isLoop() { return true; }\n\n        public isFiltered() {\n            if (this.body) {\n                var singleItem: AST = null;\n                if (this.body.nodeType == NodeType.List) {\n                    var stmts = <ASTList>this.body;\n                    if (stmts.members.length == 1) {\n                        singleItem = stmts.members[0];\n                    }\n                }\n                else {\n                    singleItem = this.body;\n                }\n                // match template for filtering \'own\' properties from obj\n                if (singleItem !== null) {\n                    if (singleItem.nodeType == NodeType.Block) {\n                        var block = <Block>singleItem;\n                        if ((block.statements !== null) && (block.statements.members.length == 1)) {\n                            singleItem = block.statements.members[0];\n                        }\n                    }\n                    if (singleItem.nodeType == NodeType.If) {\n                        var cond = (<IfStatement>singleItem).cond;\n                        if (cond.nodeType == NodeType.Call) {\n                            var target = (<CallExpression>cond).target;\n                            if (target.nodeType == NodeType.Dot) {\n                                var binex = <BinaryExpression>target;\n                                if ((binex.operand1.nodeType == NodeType.Name) &&\n                                    (this.obj.nodeType == NodeType.Name) &&\n                                    ((<Identifier>binex.operand1).actualText == (<Identifier>this.obj).actualText)) {\n                                    var prop = <Identifier>binex.operand2;\n                                    if (prop.actualText == "hasOwnProperty") {\n                                        var args = (<CallExpression>cond).arguments;\n                                        if ((args !== null) && (args.members.length == 1)) {\n                                            var arg = args.members[0];\n                                            if ((arg.nodeType == NodeType.Name) &&\n                                                 (this.lval.nodeType == NodeType.Name)) {\n                                                if (((<Identifier>this.lval).actualText) == (<Identifier>arg).actualText) {\n                                                    return true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("for(");\n            emitter.emitJavascript(this.lval, TokenID.For, false);\n            emitter.writeToOutput(" in ");\n            emitter.emitJavascript(this.obj, TokenID.For, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (typeFlow.checker.styleSettings.forin) {\n                if (!this.isFiltered()) {\n                    typeFlow.checker.errorReporter.styleError(this, "no hasOwnProperty filter");\n                }\n            }\n            return typeFlow.typeCheckForIn(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.lval) {\n                context.addContent(this.lval);\n            }\n            if (this.obj) {\n                context.addContent(this.obj);\n            }\n\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            context.noContinuation = false;\n            loopHeader.addSuccessor(afterLoop);\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class ForStatement extends Statement {\n        public cond: AST;\n        public body: AST;\n        public incr: AST;\n\n        constructor (public init: AST) {\n            super(NodeType.For);\n        }\n\n        public isLoop() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("for(");\n            if (this.init) {\n                if (this.init.nodeType != NodeType.List) {\n                    emitter.emitJavascript(this.init, TokenID.For, false);\n                }\n                else {\n                    emitter.setInVarBlock((<ASTList>this.init).members.length); \n                    emitter.emitJavascriptList(this.init, null, TokenID.For, false, false, false);\n                }\n            }\n            emitter.writeToOutput("; ");\n            emitter.emitJavascript(this.cond, TokenID.For, false);\n            emitter.writeToOutput("; ");\n            emitter.emitJavascript(this.incr, TokenID.For, false);\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFor(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.init) {\n                context.addContent(this.init);\n            }\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var condBlock: BasicBlock = null;\n            var continueTarget = loopStart;\n            var incrBB: BasicBlock = null;\n            if (this.incr) {\n                incrBB = new BasicBlock();\n                continueTarget = incrBB;\n            }\n            if (this.cond) {\n                condBlock = context.current;\n                context.addContent(this.cond);\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n            }\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, continueTarget, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (this.incr) {\n                if (context.noContinuation) {\n                    if (incrBB.predecessors.length == 0) {\n                        context.addUnreachable(this.incr);\n                    }\n                }\n                else {\n                    context.current.addSuccessor(incrBB);\n                    context.current = incrBB;\n                    context.addContent(this.incr);\n                }\n            }\n            var loopEnd = context.current;\n            if (!(context.noContinuation)) {\n                loopEnd.addSuccessor(loopStart);\n\n            }\n            if (condBlock) {\n                condBlock.addSuccessor(afterLoop);\n                context.noContinuation = false;\n            }\n            if (afterLoop.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterLoop;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class WithStatement extends Statement {\n        public body: AST;\n\n        public isCompoundStatement() { return true; }\n\n        public withSym: WithSymbol = null;\n\n        constructor (public expr: AST) {\n            super(NodeType.With);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("with (");\n            if (this.expr) {\n                emitter.emitJavascript(this.expr, TokenID.With, false);\n            }\n\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWith(this);\n        }\n    }\n\n    export class SwitchStatement extends Statement {\n        public caseList: ASTList;\n        public defaultCase: CaseStatement = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor (public val: AST) {\n            super(NodeType.Switch);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("switch(");\n            emitter.emitJavascript(this.val, TokenID.Identifier, false);\n            emitter.writeToOutput(")"); \n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.writeLineToOutput(" {");\n            emitter.indenter.increaseIndent();\n            var casesLen = this.caseList.members.length;\n            for (var i = 0; i < casesLen; i++) {\n                var caseExpr = this.caseList.members[i];\n                emitter.emitJavascript(caseExpr, TokenID.Case, true);\n            }\n            emitter.indenter.decreaseIndent();\n            emitter.emitIndent();\n            emitter.writeToOutput("}");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.caseList.members.length;\n            this.val = typeFlow.typeCheck(this.val);\n            for (var i = 0; i < len; i++) {\n                this.caseList.members[i] = typeFlow.typeCheck(this.caseList.members[i]);\n            }\n            this.defaultCase = <CaseStatement>typeFlow.typeCheck(this.defaultCase);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // if there are break statements that match this switch, then just link cond block with block after switch\n        public addToControlFlow(context: ControlFlowContext) {\n            var condBlock = context.current;\n            context.addContent(this.val);\n            var execBlock = new BasicBlock();\n            var afterSwitch = new BasicBlock();\n\n            condBlock.addSuccessor(execBlock);\n            context.pushSwitch(execBlock);\n            context.current = execBlock;\n            context.pushStatement(this, execBlock, afterSwitch);\n            context.walk(this.caseList, this);\n            context.popSwitch();\n            var targetInfo = context.popStatement();\n            var hasCondContinuation = (this.defaultCase == null);\n            if (this.defaultCase == null) {\n                condBlock.addSuccessor(afterSwitch);\n            }\n            if (afterSwitch.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterSwitch;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class CaseStatement extends Statement {\n        public expr: AST = null;\n        public body: ASTList;\n\n        constructor () {\n            super(NodeType.Case);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.expr) {\n                emitter.writeToOutput("case ");\n                emitter.emitJavascript(this.expr, TokenID.Identifier, false);\n            }\n            else {\n                emitter.writeToOutput("default");\n            }\n            emitter.writeToOutput(":");\n            if (this.body.members.length == 1 && this.body.members[0].nodeType == NodeType.Block) {\n                // The case statement was written with curly braces, so emit it with the appropriate formatting\n                emitter.emitJavascriptStatements(this.body, false);\n            }\n            else {\n                // No curly braces. Format in the expected way\n                emitter.writeLineToOutput("");\n                emitter.indenter.increaseIndent();\n                emitter.emitBareJavascriptStatements(this.body);\n                emitter.indenter.decreaseIndent();\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.expr = typeFlow.typeCheck(this.expr);\n            typeFlow.typeCheck(this.body);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // TODO: more reasoning about unreachable cases (such as duplicate literals as case expressions)\n        // for now, assume all cases are reachable, regardless of whether some cases fall through\n        public addToControlFlow(context: ControlFlowContext) {\n            var execBlock = new BasicBlock();\n            var sw = context.currentSwitch[context.currentSwitch.length - 1];\n            // TODO: fall-through from previous (+ to end of switch)\n            if (this.expr) {\n                var exprBlock = new BasicBlock();\n                context.current = exprBlock;\n                sw.addSuccessor(exprBlock);\n                context.addContent(this.expr);\n                exprBlock.addSuccessor(execBlock);\n            }\n            else {\n                sw.addSuccessor(execBlock);\n            }\n            context.current = execBlock;\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class TypeReference extends AST {\n        constructor (public term: AST, public arrayCount: number) {\n            super(NodeType.TypeRef);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            throw new Error("should not emit a type ref");\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevInTCTR = typeFlow.inTypeRefTypeCheck;\n            typeFlow.inTypeRefTypeCheck = true;\n            var typeLink = getTypeLink(this, typeFlow.checker, true);\n            typeFlow.checker.resolveTypeLink(typeFlow.scope, typeLink, false);\n\n            if (this.term) {\n                typeFlow.typeCheck(this.term);\n            }\n\n            typeFlow.checkForVoidConstructor(typeLink.type, this);\n\n            this.type = typeLink.type;\n\n            // in error recovery cases, there may not be a term\n            if (this.term) {\n                this.term.type = this.type;\n            }\n\n            typeFlow.inTypeRefTypeCheck = prevInTCTR;\n            return this;\n        }\n    }\n\n    export class TryFinally extends Statement {\n        constructor (public tryNode: AST, public finallyNode: Finally) {\n            super(NodeType.TryFinally);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.tryNode, TokenID.Try, false);\n            emitter.emitJavascript(this.finallyNode, TokenID.Finally, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.tryNode = typeFlow.typeCheck(this.tryNode);\n            this.finallyNode = <Finally>typeFlow.typeCheck(this.finallyNode);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterFinally = new BasicBlock();\n            context.walk(this.tryNode, this);\n            var finBlock = new BasicBlock();\n            if (context.current) {\n                context.current.addSuccessor(finBlock);\n            }\n            context.current = finBlock;\n            context.pushStatement(this, null, afterFinally);\n            context.walk(this.finallyNode, this);\n            if (!context.noContinuation && context.current) {\n                context.current.addSuccessor(afterFinally);\n            }\n            if (afterFinally.predecessors.length > 0) {\n                context.current = afterFinally;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.popStatement();\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class TryCatch extends Statement {\n        constructor (public tryNode: Try, public catchNode: Catch) {\n            super(NodeType.TryCatch);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.tryNode, TokenID.Try, false);\n            emitter.emitJavascript(this.catchNode, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var beforeTry = context.current;\n            var tryBlock = new BasicBlock();\n            beforeTry.addSuccessor(tryBlock);\n            context.current = tryBlock;\n            var afterTryCatch = new BasicBlock();\n            context.pushStatement(this, null, afterTryCatch);\n            context.walk(this.tryNode, this);\n            if (!context.noContinuation) {\n                if (context.current) {\n                    context.current.addSuccessor(afterTryCatch);\n                }\n            }\n            context.current = new BasicBlock();\n            beforeTry.addSuccessor(context.current);\n            context.walk(this.catchNode, this);\n            context.popStatement();\n            if (!context.noContinuation) {\n                if (context.current) {\n                    context.current.addSuccessor(afterTryCatch);\n                }\n            }\n            context.current = afterTryCatch;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.tryNode = <Try>typeFlow.typeCheck(this.tryNode);\n            this.catchNode = <Catch>typeFlow.typeCheck(this.catchNode);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class Try extends Statement {\n        constructor (public body: AST) {\n            super(NodeType.Try);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("try ");\n            emitter.emitJavascript(this.body, TokenID.Try, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.body = typeFlow.typeCheck(this.body);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.walker.options.goChildren = false;\n            context.noContinuation = false;\n        }\n    }\n\n    export class Catch extends Statement {\n        constructor (public param: VarDecl, public body: AST) {\n            super(NodeType.Catch);\n            if (this.param) {\n                this.param.varFlags |= VarFlags.AutoInit;\n            }\n        }\n        public statement: ASTSpan = new ASTSpan();\n        public containedScope: SymbolScope = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(" ");\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("catch (");\n            emitter.emitJavascript(this.param, TokenID.OpenParen, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascript(this.body, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.param) {\n                context.addContent(this.param);\n                var bodBlock = new BasicBlock();\n                context.current.addSuccessor(bodBlock);\n                context.current = bodBlock;\n            }\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevScope = typeFlow.scope;\n            typeFlow.scope = this.containedScope;\n            this.param = <VarDecl>typeFlow.typeCheck(this.param);\n            var exceptVar = new ValueLocation();\n            var varSym = new VariableSymbol((<VarDecl>this.param).id.text,\n                                          this.param.minChar,\n                                          typeFlow.checker.locationInfo.unitIndex,\n                                          exceptVar);\n            exceptVar.symbol = varSym;\n            exceptVar.typeLink = new TypeLink();\n            // var type for now (add syntax for type annotation)\n            exceptVar.typeLink.type = typeFlow.anyType;\n            var thisFnc = typeFlow.thisFnc;\n            if (thisFnc && thisFnc.type) {\n                exceptVar.symbol.container = thisFnc.type.symbol;\n            }\n            else {\n                exceptVar.symbol.container = null;\n            }\n            this.param.sym = exceptVar.symbol;\n            typeFlow.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol,\n                                 typeFlow.checker.errorReporter, false, false, false);\n            this.body = typeFlow.typeCheck(this.body);\n\n            // if we\'re in provisional typecheck mode, clean up the symbol entry\n            // REVIEW: This is obviously bad form, since we\'re counting on the internal\n            // layout of the symbol table, but this is also the only place where we insert\n            // symbols during typecheck\n            if (typeFlow.checker.inProvisionalTypecheckMode()) {\n                var table = typeFlow.scope.getTable();\n                (<any>table).secondaryTable.table[exceptVar.symbol.name] = undefined;\n            }\n            this.type = typeFlow.voidType;\n            typeFlow.scope = prevScope;\n            return this;\n        }\n    }\n\n    export class Finally extends Statement {\n        constructor (public body: AST) {\n            super(NodeType.Finally);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("finally");\n            emitter.emitJavascript(this.body, TokenID.Finally, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.walker.options.goChildren = false;\n            context.noContinuation = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.body = typeFlow.typeCheck(this.body);\n            return this;\n        }\n    }\n\n    export class Comment extends AST {\n\n        public text: string[] = null;\n        public minLine: number;\n        public limLine: number;\n        private docCommentText: string = null;\n\n        constructor (public content: string, public isBlockComment: bool, public endsLine) {\n            super(NodeType.Comment);\n        }\n\n        public getText(): string[] {\n            if (this.text == null) {\n                if (this.isBlockComment) {\n                    this.text = this.content.split("\\n");\n                    for (var i = 0; i < this.text.length; i++) {\n                        this.text[i] = this.text[i].replace(/^\\s+|\\s+$/g, \'\');\n                    }\n                }\n                else {\n                    this.text = [(this.content.replace(/^\\s+|\\s+$/g, \'\'))];\n                }\n            }\n\n            return this.text;\n        }\n\n        public isDocComment() {\n            if (this.isBlockComment) {\n                return this.content.charAt(2) == "*";\n            }\n\n            return false;\n        }\n\n        public getDocCommentText() {\n            if (this.docCommentText == null) {\n                this.docCommentText = Comment.cleanJSDocComment(this.content);\n            }\n\n            return this.docCommentText;\n        }\n\n        static consumeLeadingSpace(line: string, startIndex: number, maxSpacesToRemove?: number) {\n            var endIndex = line.length;\n            if (maxSpacesToRemove != undefined) {\n                endIndex = min(startIndex + maxSpacesToRemove, endIndex);\n            }\n\n            for (; startIndex < endIndex; startIndex++) {\n                var charCode = line.charCodeAt(startIndex);\n                if (charCode != LexCodeSpace && charCode != LexCodeTAB) {\n                    return startIndex;\n                }\n            }\n            \n            if (endIndex != line.length) {\n                return endIndex;\n            }\n\n            return -1;\n        }\n\n        static isSpaceChar(line: string, index: number) {\n            var length = line.length;\n            if (index < length) {\n                var charCode = line.charCodeAt(index);\n                // If the character is space\n                return charCode == LexCodeSpace || charCode == LexCodeTAB;\n            }\n\n            // If the index is end of the line it is space\n            return index == length;\n        }\n\n        static cleanDocCommentLine(line: string, jsDocStyleComment: bool, jsDocLineSpaceToRemove?: number) {\n            var nonSpaceIndex = Comment.consumeLeadingSpace(line, 0);\n            if (nonSpaceIndex != -1) {\n                var jsDocSpacesRemoved = nonSpaceIndex;\n                if (jsDocStyleComment && line.charAt(nonSpaceIndex) == \'*\') { // remove leading * in case of jsDocComment\n                    var startIndex = nonSpaceIndex + 1;\n                    nonSpaceIndex = Comment.consumeLeadingSpace(line, startIndex, jsDocLineSpaceToRemove);\n\n                    if (nonSpaceIndex != -1) {\n                        jsDocSpacesRemoved = nonSpaceIndex - startIndex;\n                    } else {\n                        return null;\n                    }\n                }\n\n                return {\n                    minChar: nonSpaceIndex,\n                    limChar: line.charAt(line.length - 1) == "\\r" ? line.length - 1 : line.length,\n                    jsDocSpacesRemoved: jsDocSpacesRemoved\n                };\n            }\n\n            return null;\n        }\n\n        static cleanJSDocComment(content: string, spacesToRemove?: number) {\n            var docCommentLines: string[] = [];\n            content = content.replace("/**", ""); // remove /**\n            if (content.length >= 2 && content.charAt(content.length - 1) == "/" && content.charAt(content.length - 2) == "*") {\n                content = content.substring(0, content.length - 2); // remove last */\n            }\n            var lines = content.split("\\n");\n            var inParamTag = false;\n            for (var l = 0; l < lines.length; l++) {\n                var line = lines[l];\n                var cleanLinePos = Comment.cleanDocCommentLine(line, true, spacesToRemove);\n                if (!cleanLinePos) {\n                    // Whole line empty, read next line\n                    continue;\n                }\n\n                var docCommentText = "";\n                var prevPos = cleanLinePos.minChar;\n                for (var i = line.indexOf("@", cleanLinePos.minChar); 0 <= i && i < cleanLinePos.limChar; i = line.indexOf("@", i + 1)) {\n                    // We have encoutered @. \n                    // If we were omitting param comment, we dont have to do anything\n                    // other wise the content of the text till @ tag goes as doc comment\n                    var wasInParamtag = inParamTag;\n\n                    // Parse contents next to @\n                    if (line.indexOf("param", i + 1) == i + 1 && Comment.isSpaceChar(line, i + 6)) {\n                        // It is param tag. \n\n                        // If we were not in param tag earlier, push the contents from prev pos of the tag this tag start as docComment\n                        if (!wasInParamtag) {\n                            docCommentText += line.substring(prevPos, i);\n                        }\n\n                        // New start of contents \n                        prevPos = i;\n                        inParamTag = true;\n                    } else if (wasInParamtag) {\n                        // Non param tag start\n                        prevPos = i;\n                        inParamTag = false;\n                    }\n                }\n\n                if (!inParamTag) {\n                    docCommentText += line.substring(prevPos, cleanLinePos.limChar);\n                }\n\n                // Add line to comment text if it is not only white space line\n                var newCleanPos = Comment.cleanDocCommentLine(docCommentText, false);\n                if (newCleanPos) {\n                    if (spacesToRemove == undefined) {\n                        spacesToRemove = cleanLinePos.jsDocSpacesRemoved;\n                    }\n                    docCommentLines.push(docCommentText);\n                }\n            }\n            \n            return docCommentLines.join("\\n");\n        }\n\n        static getDocCommentText(comments: Comment[]) {\n            var docCommentText: string[] = [];\n            for (var c = 0 ; c < comments.length; c++) {\n                var commentText = comments[c].getDocCommentText();\n                if (commentText != "") {\n                    docCommentText.push(commentText);\n                }\n            }\n            return docCommentText.join("\\n");\n        }\n\n        static getParameterDocCommentText(param: string, fncDocComments: Comment[]) {\n            if (fncDocComments.length == 0 || !fncDocComments[0].isBlockComment) {\n                // there were no fnc doc comments and the comment is not block comment then it cannot have \n                // @param comment that can be parsed\n                return "";\n            }\n            \n            for (var i = 0; i < fncDocComments.length; i++) {\n                var commentContents = fncDocComments[i].content;\n                for (var j = commentContents.indexOf("@param", 0); 0 <= j; j = commentContents.indexOf("@param", j)) {\n                    j += 6;\n                    if (!Comment.isSpaceChar(commentContents, j)) {\n                        // This is not param tag but a tag line @paramxxxxx\n                        continue;\n                    }\n\n                    // This is param tag. Check if it is what we are looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j);\n                    if (j == -1) {\n                        break;\n                    }\n                    \n                    // Ignore the type expression\n                    if (commentContents.charCodeAt(j) == LexCodeLC) {\n                        j++;\n                        // Consume the type\n                        var charCode = 0;\n                        for (var curlies = 1; j < commentContents.length; j++) {\n                            charCode = commentContents.charCodeAt(j);\n                            // { character means we need to find another } to match the found one\n                            if (charCode == LexCodeLC) {\n                                curlies++;\n                                continue;\n                            }\n\n                            // } char\n                            if (charCode == LexCodeRC) {\n                                curlies--;\n                                if (curlies == 0) {\n                                    // We do not have any more } to match the type expression is ignored completely\n                                    break;\n                                } else {\n                                    // there are more { to be matched with }\n                                    continue;\n                                }\n                            }\n\n                            // Found start of another tag\n                            if (charCode == LexCodeAtSign) {\n                                break;\n                            }\n                        }\n\n                        // End of the comment\n                        if (j == commentContents.length) {\n                            break;\n                        }\n\n                        // End of the tag, go onto looking for next tag\n                        if (charCode == LexCodeAtSign) {\n                            continue;\n                        }\n\n                        j = Comment.consumeLeadingSpace(commentContents, j + 1);\n                        if (j == -1) {\n                            break;\n                        }\n                    }\n\n                    // Parameter name\n                    if (param != commentContents.substr(j, param.length) || !Comment.isSpaceChar(commentContents, j + param.length)) {\n                        // this is not the parameter we are looking for\n                        continue;\n                    }\n\n                    // Found the parameter we were looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j + param.length);\n                    if (j == -1) {\n                        return "";\n                    }\n                    \n                    var endOfParam = commentContents.indexOf("@", j);\n                    var paramHelpString = commentContents.substring(j, endOfParam < 0 ? commentContents.length : endOfParam);\n\n                    // Find alignement spaces to remove\n                    var paramSpacesToRemove: number = undefined;\n                    var paramLineIndex = commentContents.substring(0, j).lastIndexOf("\\n") + 1;\n                    if (paramLineIndex != 0) {\n                        if (paramLineIndex < j && commentContents.charAt(paramLineIndex + 1) == "\\r") {\n                            paramLineIndex++;\n                        }\n                    }\n                    var startSpaceRemovalIndex = Comment.consumeLeadingSpace(commentContents, paramLineIndex);\n                    if (startSpaceRemovalIndex != j && commentContents.charAt(startSpaceRemovalIndex) == "*") {\n                        paramSpacesToRemove = j - startSpaceRemovalIndex - 1;\n                    }\n\n                    // Clean jsDocComment and return\n                    return Comment.cleanJSDocComment(paramHelpString, paramSpacesToRemove);\n                }\n            }\n\n            return "";\n        }\n\n        static getDocCommentTextOfSignatures(signatures: Signature[]) {\n            var comments: string[] = [];\n            for (var i = 0; i < signatures.length; i++) {\n                var signatureDocComment = TypeScript.Comment.getDocCommentText(signatures[i].declAST.getDocComments());\n                if (signatureDocComment != "") {\n                    comments.push(signatureDocComment);\n                }\n            }\n\n            return comments.join("\\n");\n        }\n    }\n\n    export class DebuggerStatement extends Statement {\n        constructor () {\n            super(NodeType.Debugger);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeLineToOutput("debugger;");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript.AstWalkerWithDetailCallback {\n    export interface AstWalkerDetailCallback {\n        EmptyCallback? (pre, ast: AST): bool;\n        EmptyExprCallback? (pre, ast: AST): bool;\n        TrueCallback? (pre, ast: AST): bool;\n        FalseCallback? (pre, ast: AST): bool;\n        ThisCallback? (pre, ast: AST): bool;\n        SuperCallback? (pre, ast: AST): bool;\n        QStringCallback? (pre, ast: AST): bool;\n        RegexCallback? (pre, ast: AST): bool;\n        NullCallback? (pre, ast: AST): bool;\n        ArrayLitCallback? (pre, ast: AST): bool;\n        ObjectLitCallback? (pre, ast: AST): bool;\n        VoidCallback? (pre, ast: AST): bool;\n        CommaCallback? (pre, ast: AST): bool;\n        PosCallback? (pre, ast: AST): bool;\n        NegCallback? (pre, ast: AST): bool;\n        DeleteCallback? (pre, ast: AST): bool;\n        AwaitCallback? (pre, ast: AST): bool;\n        InCallback? (pre, ast: AST): bool;\n        DotCallback? (pre, ast: AST): bool;\n        FromCallback? (pre, ast: AST): bool;\n        IsCallback? (pre, ast: AST): bool;\n        InstOfCallback? (pre, ast: AST): bool;\n        TypeofCallback? (pre, ast: AST): bool;\n        NumberLitCallback? (pre, ast: AST): bool;\n        NameCallback? (pre, identifierAst: Identifier): bool;\n        TypeRefCallback? (pre, ast: AST): bool;\n        IndexCallback? (pre, ast: AST): bool;\n        CallCallback? (pre, ast: AST): bool;\n        NewCallback? (pre, ast: AST): bool;\n        AsgCallback? (pre, ast: AST): bool;\n        AsgAddCallback? (pre, ast: AST): bool;\n        AsgSubCallback? (pre, ast: AST): bool;\n        AsgDivCallback? (pre, ast: AST): bool;\n        AsgMulCallback? (pre, ast: AST): bool;\n        AsgModCallback? (pre, ast: AST): bool;\n        AsgAndCallback? (pre, ast: AST): bool;\n        AsgXorCallback? (pre, ast: AST): bool;\n        AsgOrCallback? (pre, ast: AST): bool;\n        AsgLshCallback? (pre, ast: AST): bool;\n        AsgRshCallback? (pre, ast: AST): bool;\n        AsgRs2Callback? (pre, ast: AST): bool;\n        QMarkCallback? (pre, ast: AST): bool;\n        LogOrCallback? (pre, ast: AST): bool;\n        LogAndCallback? (pre, ast: AST): bool;\n        OrCallback? (pre, ast: AST): bool;\n        XorCallback? (pre, ast: AST): bool;\n        AndCallback? (pre, ast: AST): bool;\n        EqCallback? (pre, ast: AST): bool;\n        NeCallback? (pre, ast: AST): bool;\n        EqvCallback? (pre, ast: AST): bool;\n        NEqvCallback? (pre, ast: AST): bool;\n        LtCallback? (pre, ast: AST): bool;\n        LeCallback? (pre, ast: AST): bool;\n        GtCallback? (pre, ast: AST): bool;\n        GeCallback? (pre, ast: AST): bool;\n        AddCallback? (pre, ast: AST): bool;\n        SubCallback? (pre, ast: AST): bool;\n        MulCallback? (pre, ast: AST): bool;\n        DivCallback? (pre, ast: AST): bool;\n        ModCallback? (pre, ast: AST): bool;\n        LshCallback? (pre, ast: AST): bool;\n        RshCallback? (pre, ast: AST): bool;\n        Rs2Callback? (pre, ast: AST): bool;\n        NotCallback? (pre, ast: AST): bool;\n        LogNotCallback? (pre, ast: AST): bool;\n        IncPreCallback? (pre, ast: AST): bool;\n        DecPreCallback? (pre, ast: AST): bool;\n        IncPostCallback? (pre, ast: AST): bool;\n        DecPostCallback? (pre, ast: AST): bool;\n        TypeAssertionCallback? (pre, ast: AST): bool;\n        FuncDeclCallback? (pre, funcDecl: FuncDecl): bool;\n        MemberCallback? (pre, ast: AST): bool;\n        VarDeclCallback? (pre, varDecl: VarDecl): bool;\n        ArgDeclCallback? (pre, ast: AST): bool;\n        ReturnCallback? (pre, ast: AST): bool;\n        BreakCallback? (pre, ast: AST): bool;\n        ContinueCallback? (pre, ast: AST): bool;\n        ThrowCallback? (pre, ast: AST): bool;\n        ForCallback? (pre, ast: AST): bool;\n        ForInCallback? (pre, ast: AST): bool;\n        IfCallback? (pre, ast: AST): bool;\n        WhileCallback? (pre, ast: AST): bool;\n        DoWhileCallback? (pre, ast: AST): bool;\n        BlockCallback? (pre, block: Block): bool;\n        CaseCallback? (pre, ast: AST): bool;\n        SwitchCallback? (pre, ast: AST): bool;\n        TryCallback? (pre, ast: AST): bool;\n        TryCatchCallback? (pre, ast: AST): bool;\n        TryFinallyCallback? (pre, ast: AST): bool;\n        FinallyCallback? (pre, ast: AST): bool;\n        CatchCallback? (pre, ast: AST): bool;\n        ListCallback? (pre, astList: ASTList): bool;\n        ScriptCallback? (pre, script: Script): bool;\n        ClassDeclarationCallback? (pre, ast: AST): bool;\n        InterfaceDeclarationCallback? (pre, interfaceDecl: InterfaceDeclaration): bool;\n        ModuleDeclarationCallback? (pre, moduleDecl: ModuleDeclaration): bool;\n        ImportDeclarationCallback? (pre, ast: AST): bool;\n        WithCallback? (pre, ast: AST): bool;\n        LabelCallback? (pre, labelAST: AST): bool;\n        LabeledStatementCallback? (pre, ast: AST): bool;\n        EBStartCallback? (pre, ast: AST): bool;\n        GotoEBCallback? (pre, ast: AST): bool;\n        EndCodeCallback? (pre, ast: AST): bool;\n        ErrorCallback? (pre, ast: AST): bool;\n        CommentCallback? (pre, ast: AST): bool;\n        DebuggerCallback? (pre, ast: AST): bool;\n        DefaultCallback? (pre, ast: AST): bool;\n    }\n\n    export function walk(script: Script, callback: AstWalkerDetailCallback): void {\n        var pre = (cur: AST, parent: AST) => {\n            walker.options.goChildren = AstWalkerCallback(true, cur, callback);\n            return cur;\n        }\n\n        var post = (cur: AST, parent: AST) => {\n            AstWalkerCallback(false, cur, callback);\n            return cur;\n        }\n\n        var walker = TypeScript.getAstWalkerFactory().getWalker(pre, post);\n        walker.walk(script, null);\n    }\n\n    function AstWalkerCallback(pre: bool, ast: AST, callback: AstWalkerDetailCallback): bool {\n        // See if the Callback needs to be handled using specific one or default one\n        var nodeType = ast.nodeType;\n        var callbackString = (<any>NodeType)._map[nodeType] + "Callback";\n        if (callback[callbackString]) {\n            return callback[callbackString](pre, ast);\n        }\n\n        if (callback.DefaultCallback) {\n            return callback.DefaultCallback(pre, ast);\n        }\n\n        return true;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface IAstWalker {\n        walk(ast: AST, parent: AST): AST;\n        options: AstWalkOptions;\n        state: any; // user state object\n    }\n\n    export class AstWalkOptions {\n        public goChildren = true;\n        public goNextSibling = true;\n        public reverseSiblings = false; // visit siblings in reverse execution order\n\n        public stopWalk(stop:bool = true) {\n            this.goChildren = !stop;\n            this.goNextSibling = !stop;\n        }\n    }\n\n    export interface IAstWalkCallback {\n        (ast: AST, parent: AST, walker: IAstWalker): AST;\n    }\n\n    export interface IAstWalkChildren {\n        (preAst: AST, parent: AST, walker: IAstWalker): void;\n    }\n\n    class AstWalker implements IAstWalker {\n        constructor (\n            private childrenWalkers: IAstWalkChildren[],\n            private pre: IAstWalkCallback,\n            private post: IAstWalkCallback,\n            public options: AstWalkOptions,\n            public state: any) {\n        }\n\n        public walk(ast: AST, parent: AST): AST {\n            var preAst = this.pre(ast, parent, this);\n            if (preAst === undefined) {\n                preAst = ast;\n            }\n            if (this.options.goChildren) {\n                var svGoSib = this.options.goNextSibling;\n                this.options.goNextSibling = true;\n                // Call the "walkChildren" function corresponding to "nodeType".\n                this.childrenWalkers[ast.nodeType](ast, parent, this);\n                this.options.goNextSibling = svGoSib;\n            }\n            else {\n                // no go only applies to children of node issuing it\n                this.options.goChildren = true;\n            }\n            if (this.post) {\n                var postAst = this.post(preAst, parent, this);\n                if (postAst === undefined) {\n                    postAst = preAst;\n                }\n                return postAst;\n            }\n            else {\n                return preAst;\n            }\n        }\n    }\n\n    export class AstWalkerFactory {\n        private childrenWalkers: IAstWalkChildren[] = [];\n\n        constructor () {\n            this.initChildrenWalkers();\n        }\n\n        public walk(ast: AST, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): AST {\n            return this.getWalker(pre, post, options, state).walk(ast, null)\n        }\n\n        public getWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            return this.getSlowWalker(pre, post, options, state);\n        }\n\n        private getSlowWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            if (!options) {\n                options = new AstWalkOptions();\n            }\n\n            return new AstWalker(this.childrenWalkers, pre, post, options, state);\n        }\n\n        private initChildrenWalkers(): void {\n            this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;\n            this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;\n            this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren;\n            this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren;\n            this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren;\n            this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren;\n            this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren;\n            this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren;\n            this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;\n            this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren;\n            this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren;\n            this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren;\n            this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren;\n            this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren;\n            this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren;\n            this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren;\n            this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;\n            this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;\n            this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;\n            this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;\n            this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;\n            this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;\n            this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren;\n            this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren;\n            this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;\n            this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone;\n\n            // Verify the code is up to date with the enum\n            for (var e in (<any>NodeType)._map) {\n                if ((<any>this.childrenWalkers)[e] === undefined) {\n                    throw new Error("initWalkers function is not up to date with enum content!");\n                }\n            }\n        }\n    }\n\n    var globalAstWalkerFactory: AstWalkerFactory;\n\n    export function getAstWalkerFactory(): AstWalkerFactory {\n        if (!globalAstWalkerFactory) {\n            globalAstWalkerFactory = new AstWalkerFactory();\n        }\n        return globalAstWalkerFactory;\n    }\n\n    module ChildrenWalkers {\n        export function walkNone(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            // Nothing to do\n        }\n\n        export function walkListChildren(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            var len = preAst.members.length;\n            if (walker.options.reverseSiblings) {\n                for (var i = len - 1; i >= 0; i--) {\n                    if (walker.options.goNextSibling) {\n                        preAst.members[i] = walker.walk(preAst.members[i], preAst);\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < len; i++) {\n                    if (walker.options.goNextSibling) {\n                        preAst.members[i] = walker.walk(preAst.members[i], preAst);\n                    }\n                }\n            }\n        }\n\n        export function walkUnaryExpressionChildren(preAst: UnaryExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.castTerm) {\n                preAst.castTerm = walker.walk(preAst.castTerm, preAst);\n            }\n            if (preAst.operand) {\n                preAst.operand = walker.walk(preAst.operand, preAst);\n            }\n        }\n\n        export function walkBinaryExpressionChildren(preAst: BinaryExpression, parent: AST, walker: IAstWalker): void {\n            if (walker.options.reverseSiblings) {\n                if (preAst.operand2) {\n                    preAst.operand2 = walker.walk(preAst.operand2, preAst);\n                }\n                if ((preAst.operand1) && (walker.options.goNextSibling)) {\n                    preAst.operand1 = walker.walk(preAst.operand1, preAst);\n                }\n            } else {\n                if (preAst.operand1) {\n                    preAst.operand1 = walker.walk(preAst.operand1, preAst);\n                }\n                if ((preAst.operand2) && (walker.options.goNextSibling)) {\n                    preAst.operand2 = walker.walk(preAst.operand2, preAst);\n                }\n            }\n        }\n\n        export function walkTypeReferenceChildren(preAst: TypeReference, parent: AST, walker: IAstWalker): void {\n            if (preAst.term) {\n                preAst.term = walker.walk(preAst.term, preAst);\n            }\n        }\n\n        export function walkCallExpressionChildren(preAst: CallExpression, parent: AST, walker: IAstWalker): void {\n            if (!walker.options.reverseSiblings) {\n                preAst.target = walker.walk(preAst.target, preAst);\n            }\n            if (preAst.arguments && (walker.options.goNextSibling)) {\n                preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst);\n            }\n            if ((walker.options.reverseSiblings) && (walker.options.goNextSibling)) {\n                preAst.target = walker.walk(preAst.target, preAst);\n            }\n        }\n\n        export function walkTrinaryExpressionChildren(preAst: ConditionalExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.operand1) {\n                preAst.operand1 = walker.walk(preAst.operand1, preAst);\n            }\n            if (preAst.operand2 && (walker.options.goNextSibling)) {\n                preAst.operand2 = walker.walk(preAst.operand2, preAst);\n            }\n            if (preAst.operand3 && (walker.options.goNextSibling)) {\n                preAst.operand3 = walker.walk(preAst.operand3, preAst);\n            }\n        }\n\n        export function walkFuncDeclChildren(preAst: FuncDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            }\n            if (preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling)) {\n                preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst);\n            }\n            if (preAst.returnTypeAnnotation && (walker.options.goNextSibling)) {\n                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);\n            }\n            if (preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling)) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkBoundDeclChildren(preAst: BoundDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n            if ((preAst.typeExpr) && (walker.options.goNextSibling)) {\n                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);\n            }\n        }\n\n        export function walkReturnStatementChildren(preAst: ReturnStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.returnExpression) {\n                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);\n            }\n        }\n\n        export function walkForStatementChildren(preAst: ForStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n\n            if (preAst.cond && walker.options.goNextSibling) {\n                preAst.cond = walker.walk(preAst.cond, preAst);\n            }\n\n            if (preAst.incr && walker.options.goNextSibling) {\n                preAst.incr = walker.walk(preAst.incr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkForInStatementChildren(preAst: ForInStatement, parent: AST, walker: IAstWalker): void {\n            preAst.lval = walker.walk(preAst.lval, preAst);\n            if (walker.options.goNextSibling) {\n                preAst.obj = walker.walk(preAst.obj, preAst);\n            }\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkIfStatementChildren(preAst: IfStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.thenBod && (walker.options.goNextSibling)) {\n                preAst.thenBod = walker.walk(preAst.thenBod, preAst);\n            }\n            if (preAst.elseBod && (walker.options.goNextSibling)) {\n                preAst.elseBod = walker.walk(preAst.elseBod, preAst);\n            }\n        }\n\n        export function walkWhileStatementChildren(preAst: WhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkDoWhileStatementChildren(preAst: DoWhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkBlockChildren(preAst: Block, parent: AST, walker: IAstWalker): void {\n            if (preAst.statements) {\n                preAst.statements = <ASTList>walker.walk(preAst.statements, preAst);\n            }\n        }\n\n        export function walkCaseStatementChildren(preAst: CaseStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = <ASTList>walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkSwitchStatementChildren(preAst: SwitchStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.val) {\n                preAst.val = walker.walk(preAst.val, preAst);\n            }\n\n            if ((preAst.caseList) && walker.options.goNextSibling) {\n                preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst);\n            }\n        }\n\n        export function walkTryChildren(preAst: Try, parent: AST, walker: IAstWalker): void {\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkTryCatchChildren(preAst: TryCatch, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryNode) {\n                preAst.tryNode = <Try>walker.walk(preAst.tryNode, preAst);\n            }\n\n            if ((preAst.catchNode) && walker.options.goNextSibling) {\n                preAst.catchNode = <Catch>walker.walk(preAst.catchNode, preAst);\n            }\n        }\n\n        export function walkTryFinallyChildren(preAst: TryFinally, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryNode) {\n                preAst.tryNode = walker.walk(preAst.tryNode, preAst);\n            }\n\n            if (preAst.finallyNode && walker.options.goNextSibling) {\n                preAst.finallyNode = <Finally>walker.walk(preAst.finallyNode, preAst);\n            }\n        }\n\n        export function walkFinallyChildren(preAst: Finally, parent: AST, walker: IAstWalker): void {\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkCatchChildren(preAst: Catch, parent: AST, walker: IAstWalker): void {\n            if (preAst.param) {\n                preAst.param = <VarDecl>walker.walk(preAst.param, preAst);\n            }\n\n            if ((preAst.body) && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkRecordChildren(preAst: NamedDeclaration, parent: AST, walker: IAstWalker): void {\n            preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            if (walker.options.goNextSibling && preAst.members) {\n                preAst.members = <ASTList>walker.walk(preAst.members, preAst);\n            }\n\n        }\n\n        export function walkNamedTypeChildren(preAst: TypeDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkClassDeclChildren(preAst: ClassDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            if (walker.options.goNextSibling && preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (walker.options.goNextSibling && preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkScriptChildren(preAst: Script, parent: AST, walker: IAstWalker): void {\n            if (preAst.bod) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkTypeDeclChildren(preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            // walked arguments as part of members\n            if (walker.options.goNextSibling && preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (walker.options.goNextSibling && preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkModuleDeclChildren(preAst: ModuleDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkImportDeclChildren(preAst: ImportDeclaration, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.alias) {\n                preAst.alias = walker.walk(preAst.alias, preAst);\n            }\n        }\n\n        export function walkWithStatementChildren(preAst: WithStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkLabelChildren(preAst: Label, parent: AST, walker: IAstWalker): void {\n            //TODO: Walk "id"?\n        }\n\n        export function walkLabeledStatementChildren(preAst: LabeledStatement, parent: AST, walker: IAstWalker): void {\n            preAst.labels = <ASTList>walker.walk(preAst.labels, preAst);\n            if (walker.options.goNextSibling) {\n                preAst.stmt = walker.walk(preAst.stmt, preAst);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    class Base64Format {\n        static encodedValues = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n        static encode(inValue: number) {\n            if (inValue < 64) {\n                return encodedValues.charAt(inValue);\n            }\n            throw TypeError(inValue + ": not a 64 based value");\n        }\n\n        static decodeChar(inChar: string) {\n            if (inChar.length === 1) {\n                return encodedValues.indexOf(inChar);\n            } else {\n                throw TypeError(\'"\' + inChar + \'" must have length 1\');\n            }\n        }\n    }\n\n    export class Base64VLQFormat {\n        static encode(inValue: number) {\n            // Add a new least significant bit that has the sign of the value.\n            // if negative number the least significant bit that gets added to the number has value 1\n            // else least significant bit value that gets added is 0\n            // eg. -1 changes to binary : 01 [1] => 3\n            //     +1 changes to binary : 01 [0] => 2\n            if (inValue < 0) {\n                inValue = ((-inValue) << 1) + 1;\n            }\n            else {\n                inValue = inValue << 1;\n            }\n\n            // Encode 5 bits at a time starting from least significant bits\n            var encodedStr = "";\n            do {\n                var currentDigit = inValue & 31; // 11111\n                inValue = inValue >> 5;\n                if (inValue > 0) {\n                    // There are still more digits to decode, set the msb (6th bit)\n                    currentDigit = currentDigit | 32; \n                }\n                encodedStr = encodedStr + Base64Format.encode(currentDigit);\n            } while (inValue > 0);\n\n            return encodedStr;\n        }\n\n        static decode(inString: string) {\n            var result = 0;\n            var negative = false;\n\n            var shift = 0;\n            for (var i = 0; i < inString.length; i++) {\n                var byte = Base64Format.decodeChar(inString[i]);\n                if (i === 0) {\n                    // Sign bit appears in the LSBit of the first value\n                    if ((byte & 1) === 1) {\n                        negative = true;\n                    }\n                    result = (byte >> 1) & 15; // 1111x\n                } else {\n                    result = result | ((byte & 31) << shift); // 11111\n                }\n\n                shift += (i == 0) ? 4 : 5;\n\n                if ((byte & 32) === 32) {\n                    // Continue\n                } else {\n                    return { value: negative ? -(result) : result, rest: inString.substr(i + 1) };\n                }\n            }\n\n            throw new Error(\'Base64 value "\' + inString + \'" finished with a continuation bit\');\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Binder {\n        constructor(public checker: TypeChecker) { }\n        \n        public resolveBaseTypeLinks(typeLinks: TypeLink[], scope: SymbolScope) {\n            var extendsList: Type[] = null;\n            if (typeLinks) {\n                extendsList = new Type[];\n                for (var i = 0, len = typeLinks.length; i < len; i++) {\n                    extendsList[i] = this.checker.resolveBaseTypeLink(typeLinks[i], scope);\n                }\n            }\n            return extendsList;\n        }\n\n        public resolveBases(scope: SymbolScope, type: Type) {\n            type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope);\n\n            var i = 0, len = type.extendsList.length;\n            var derivedIsClass = type.isClassInstance();\n            for (; i < len; i++) {\n                var baseIsClass = type.extendsList[i].isClassInstance();\n                if (type.extendsList[i] != this.checker.anyType) {\n                    var baseRef = type.extendsTypeLinks[i].ast;\n                    if (derivedIsClass) {\n                        if (!baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "A class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is not a class.");\n                        }\n                    }\n                    else {\n                        if (baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class.");\n                        }\n                    }\n                }\n            }\n\n            type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope);\n\n            if (type.implementsList) {\n                for (i = 0, len = type.implementsList.length; i < len; i++) {\n                    var iface = type.implementsList[i];\n                    var baseRef = type.implementsTypeLinks[i].ast;\n                    if (iface.isClassInstance()) {\n                        if (derivedIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.");\n                        }\n                    }\n                }\n            }\n        }\n\n        public resolveSignatureGroup(signatureGroup: SignatureGroup, scope: SymbolScope, instanceType: Type) {\n            var supplyVar = !(signatureGroup.hasImplementation);\n            for (var i = 0, len = signatureGroup.signatures.length; i < len; i++) {\n                var signature = signatureGroup.signatures[i];\n                if (instanceType) {\n                    signature.returnType.type = instanceType;\n                }\n                else {\n                    this.checker.resolveTypeLink(scope, signature.returnType, supplyVar);\n                }\n                var paramLen = signature.parameters.length;\n                for (var j = 0; j < paramLen; j++) {\n                    this.bindSymbol(scope, signature.parameters[j]);\n                }\n                if (signature.hasVariableArgList) {\n                    // check that last parameter has an array type\n                    var lastParam = <ParameterSymbol>signature.parameters[paramLen - 1];\n                    lastParam.argsOffset = paramLen - 1;\n                    if (!lastParam.getType().isArray()) {\n                        this.checker.errorReporter.simpleErrorFromSym(lastParam,\n                                                                 "... parameter must have array type");\n                        lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);\n                    }\n                }\n            }\n        }\n\n        public bindType(scope: SymbolScope, type: Type, instanceType: Type): void {\n            if (instanceType) {\n                this.bindType(scope, instanceType, null);\n            }\n            if (type.hasMembers()) {\n                var members = type.members;\n                var ambientMembers = type.ambientMembers;\n                var typeMembers = type.getAllEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var ambientTypeMembers = type.getAllAmbientEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var memberScope = new SymbolTableScope(members, ambientMembers, typeMembers, ambientTypeMembers, type.symbol);\n                var agg = new SymbolAggregateScope(type.symbol);\n                var prevCurrentModDecl = this.checker.currentModDecl;\n                var prevBindStatus = this.checker.inBind;\n                agg.addParentScope(memberScope);\n                agg.addParentScope(scope);\n                if (type.isModuleType()) {\n                    this.checker.currentModDecl = <ModuleDeclaration>type.symbol.declAST;\n                    this.checker.inBind = true;\n                }\n                if (members) {\n                    this.bind(agg, type.members.allMembers); // REVIEW: Should only be getting exported types?\n                }\n                if (typeMembers) {\n                    this.bind(agg, typeMembers.allMembers);\n                }\n                if (ambientMembers) {\n                    this.bind(agg, ambientMembers.allMembers);\n                }\n                if (ambientTypeMembers) {\n                    this.bind(agg, ambientTypeMembers.allMembers);\n                }\n                this.checker.currentModDecl = prevCurrentModDecl;\n                this.checker.inBind = prevBindStatus;\n            }\n            if (type.extendsTypeLinks) {\n                this.resolveBases(scope, type);\n            }\n            if (type.construct) {\n                this.resolveSignatureGroup(type.construct, scope, instanceType);\n            }\n            if (type.call) {\n                this.resolveSignatureGroup(type.call, scope, null);\n            }\n            if (type.index) {\n                this.resolveSignatureGroup(type.index, scope, null);\n            }\n            if (type.elementType) {\n                this.bindType(scope, type.elementType, null);\n            }\n        }\n\n        public bindSymbol(scope: SymbolScope, symbol: Symbol) {\n            if (!symbol.bound) {\n                var prevLocationInfo = this.checker.locationInfo;\n                if ((this.checker.units) && (symbol.unitIndex >= 0) && (symbol.unitIndex < this.checker.units.length)) {\n                    this.checker.locationInfo = this.checker.units[symbol.unitIndex];\n                }\n                switch (symbol.kind()) {\n                    case SymbolKind.Type:\n\n                        if (symbol.flags & SymbolFlags.Bound) {\n                            break;\n                        }\n\n                        var typeSymbol = <TypeSymbol>symbol;\n                        typeSymbol.flags |= SymbolFlags.Bound;\n\n                        // Since type collection happens out of order, a dynamic module referenced by an import statement\n                        // may not yet be in scope when the import symbol is created.  In that case, we need to search\n                        // out the module symbol now\n                        // Note that we\'ll also want to do this in resolveTypeMembers, in case the symbol is set outside the\n                        // context of a given module  (E.g., an outer import statement)\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymbol.type = modSym.getType();\n                            }\n                        }\n\n                        if (typeSymbol.type && typeSymbol.type != this.checker.gloModType) {\n                            this.bindType(scope, typeSymbol.type, typeSymbol.instanceType);\n\n                            // bind expansions on the parent type symbol\n                            if (typeSymbol.type.isModuleType()) {\n                                for (var i = 0; i < typeSymbol.expansions.length; i++) {\n                                    this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType);\n                                }\n                            }\n                        }\n                        break;\n                    case SymbolKind.Field:\n                        this.checker.resolveTypeLink(scope, (<FieldSymbol>symbol).field.typeLink,\n                                                false);\n                        break;\n                    case SymbolKind.Parameter:\n                        this.checker.resolveTypeLink(scope,\n                                                (<ParameterSymbol>symbol).parameter.typeLink,\n                                                true);\n                        break;\n                }\n                this.checker.locationInfo = prevLocationInfo;\n            }\n            symbol.bound = true;\n        }\n\n        public bind(scope: SymbolScope, table: IHashTable) {\n            table.map(\n                (key, sym, binder) => {\n                    binder.bindSymbol(scope, sym);\n                },\n                this);\n        }\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class DeclFileWriter {\n        public onNewLine = true;\n        constructor(private declFile: ITextWriter) {\n        }\n\n        public Write(s: string) {\n            this.declFile.Write(s);\n            this.onNewLine = false;\n        }\n\n        public WriteLine(s: string) {\n            this.declFile.WriteLine(s);\n            this.onNewLine = true;\n        }\n\n        public Close() {\n            this.declFile.Close();\n        }\n    }\n\n    export class DeclarationEmitter implements AstWalkerWithDetailCallback.AstWalkerDetailCallback {\n        private declFile: DeclFileWriter = null;\n        private indenter = new Indenter();\n        private declarationContainerStack: AST[] = [];\n        private isDottedModuleName: bool[] = [];\n        private dottedModuleEmit: string;\n        private ignoreCallbackAst: AST = null;\n        private singleDeclFile: DeclFileWriter = null;\n        private varListCount: number = 0;\n\n        private getAstDeclarationContainer() {\n            return this.declarationContainerStack[this.declarationContainerStack.length - 1];\n        }\n\n        private emitDottedModuleName() {\n            return (this.isDottedModuleName.length == 0) ? false : this.isDottedModuleName[this.isDottedModuleName.length - 1];\n        }\n\n        constructor (public checker: TypeChecker, public emitOptions: EmitOptions, public errorReporter: ErrorReporter) {\n        }\n\n        public setDeclarationFile(file: ITextWriter) {\n            this.declFile = new DeclFileWriter(file);\n        }\n\n        public Close() {\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                this.declFile.Close();\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n\n        public emitDeclarations(script: TypeScript.Script): void {\n            AstWalkerWithDetailCallback.walk(script, this);\n        }\n\n        private getIndentString(declIndent? = false) {\n            if (this.emitOptions.minWhitespace) {\n                return "";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        private emitIndent() {\n            this.declFile.Write(this.getIndentString());\n        }\n\n        private canEmitSignature(declFlags: DeclFlags, canEmitGlobalAmbientDecl?: bool = true, useDeclarationContainerTop?: bool = true) {\n            var container: AST;\n            if (useDeclarationContainerTop) {\n                container = this.getAstDeclarationContainer();\n            } else {\n                container = this.declarationContainerStack[this.declarationContainerStack.length - 2];\n            }\n\n            if (container.nodeType == NodeType.ModuleDeclaration && !hasFlag(declFlags, DeclFlags.Exported)) {\n                return false;\n            }\n\n            if (!canEmitGlobalAmbientDecl && container.nodeType == NodeType.Script && hasFlag(declFlags, DeclFlags.Ambient)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        private canEmitPrePostAstSignature(declFlags: DeclFlags, astWithPrePostCallback: AST, preCallback: bool) {\n            if (this.ignoreCallbackAst) {\n                CompilerDiagnostics.assert(this.ignoreCallbackAst != astWithPrePostCallback, "Ignore Callback AST mismatch");\n                this.ignoreCallbackAst = null;\n                return false;\n            } else if (preCallback &&\n                !this.canEmitSignature(declFlags, true, preCallback)) {\n                this.ignoreCallbackAst = astWithPrePostCallback;\n                return false;\n            }\n\n            return true;\n        }\n\n        private getDeclFlagsString(declFlags: DeclFlags, typeString: string) {\n            var result = this.getIndentString();\n\n            // Accessor strings\n            var accessorString = "";\n            if (hasFlag(declFlags, DeclFlags.GetAccessor)) {\n                accessorString = "get ";\n            }\n            else if (hasFlag(declFlags, DeclFlags.SetAccessor)) {\n                accessorString = "set ";\n            }\n\n            // Emit export only for global export statements. The container for this would be dynamic module which is whole file\n            var container = this.getAstDeclarationContainer();\n            if (container.nodeType == NodeType.ModuleDeclaration &&\n                hasFlag((<ModuleDeclaration>container).modFlags, ModuleFlags.IsWholeFile) &&\n                hasFlag(declFlags, DeclFlags.Exported)) {\n                result += "export ";\n            }\n\n            // Static/public/private/global declare\n            if (hasFlag(declFlags, DeclFlags.LocalStatic) || hasFlag(declFlags, DeclFlags.Static)) {\n                result += "static " + accessorString;\n            }\n            else {\n                if (hasFlag(declFlags, DeclFlags.Private)) {\n                    result += "private " + accessorString;\n                }\n                else if (hasFlag(declFlags, DeclFlags.Public)) {\n                    result += "public " + accessorString;\n                }\n                else {\n                    if (accessorString == "") {\n                        result += typeString + " ";\n                    } else {\n                        result += accessorString;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        private emitDeclFlags(declFlags: DeclFlags, typeString: string) {\n            this.declFile.Write(this.getDeclFlagsString(declFlags, typeString));\n        }\n\n        private canEmitTypeAnnotationSignature(declFlag: DeclFlags = DeclFlags.None) {\n            // Private declaration, shouldnt emit type any time.\n            return !hasFlag(declFlag, DeclFlags.Private);\n        }\n\n        private pushDeclarationContainer(ast: AST) {\n            this.declarationContainerStack.push(ast);\n        }\n\n        private popDeclarationContainer(ast: AST) {\n            CompilerDiagnostics.assert(ast != this.getAstDeclarationContainer(), \'Declaration container mismatch\');\n            this.declarationContainerStack.pop();\n        }\n\n        private emitTypeNamesMember(memberName: MemberName, emitIndent? : bool = false) {\n            if (memberName.prefix == "{ ") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.WriteLine("{");\n                this.indenter.increaseIndent();\n                emitIndent = true;\n            } else if (memberName.prefix != "") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write(memberName.prefix);\n                emitIndent = false;\n            }\n\n            if (memberName.isString()) {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write((<MemberNameString>memberName).text);\n            } else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    this.emitTypeNamesMember(ar.entries[index], emitIndent);\n                    if (ar.delim == "; ") {\n                        this.declFile.WriteLine(";");\n                    }\n                }\n            }\n\n            if (memberName.suffix == "}") {\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.declFile.Write(memberName.suffix);\n            } else {\n                this.declFile.Write(memberName.suffix);\n            }\n        }\n\n        private emitTypeSignature(type: Type) {\n            var containingScope: SymbolScope = null;\n            var declarationContainerAst = this.getAstDeclarationContainer();\n            switch (declarationContainerAst.nodeType) {\n                case NodeType.ModuleDeclaration:\n                case NodeType.InterfaceDeclaration:\n                case NodeType.FuncDecl:\n                    if (declarationContainerAst.type) {\n                        containingScope = declarationContainerAst.type.containedScope;\n                    }\n                    break;\n\n                case NodeType.Script:\n                    var script = <Script>declarationContainerAst;\n                    if (script.bod) {\n                        containingScope = script.bod.enclosingScope;\n                    }\n                    break;\n\n                case NodeType.ClassDeclaration:\n                    if (declarationContainerAst.type) {\n                        containingScope = declarationContainerAst.type.instanceType.containedScope;\n                    }\n                    break;\n\n                default:\n                    CompilerDiagnostics.debugPrint("Unknown containing scope");\n            }\n\n            var typeNameMembers = type.getScopedTypeNameEx(containingScope);\n            this.emitTypeNamesMember(typeNameMembers);\n        }\n\n        private emitComment(comment: Comment) {\n            var text = comment.getText();\n            if (this.declFile.onNewLine) {\n                this.emitIndent();\n            } else if (!comment.isBlockComment) {\n                this.declFile.WriteLine("");\n                this.emitIndent();\n            }\n            \n            this.declFile.Write(text[0]);\n\n            for (var i = 1; i < text.length; i++) {\n                this.declFile.WriteLine("");\n                this.emitIndent();\n                this.declFile.Write(text[i]);\n            }\n\n            if (comment.endsLine || !comment.isBlockComment) {\n                this.declFile.WriteLine("");\n            } else {\n                this.declFile.Write(" ");\n            }\n        }\n\n        private emitDeclarationComments(ast: AST, endLine?: bool);\n        private emitDeclarationComments(symbol: Symbol, endLine?: bool);\n        private emitDeclarationComments(astOrSymbol, endLine = true) {\n            if (!this.emitOptions.emitComments) {\n                return;\n            }\n\n            var declComments = <Comment[]>astOrSymbol.getDocComments();\n            if (declComments.length > 0) {\n                for (var i = 0; i < declComments.length; i++) {\n                    this.emitComment(declComments[i]);\n                }\n\n                if (endLine) {\n                    if (!this.declFile.onNewLine) {\n                        this.declFile.WriteLine("");\n                    }\n                } else {\n                    if (this.declFile.onNewLine) {\n                        this.emitIndent();\n                    }\n                }\n            }\n        }\n\n        public VarDeclCallback(pre: bool, varDecl: VarDecl): bool {\n            if (pre && this.canEmitSignature(ToDeclFlags(varDecl.varFlags), false)) {\n                var interfaceMember = (this.getAstDeclarationContainer().nodeType == NodeType.InterfaceDeclaration);\n                this.emitDeclarationComments(varDecl);\n                if (!interfaceMember) {\n                    // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n                    // If it is var list of form  var a = varList count will be 0\n                    if (this.varListCount >= 0) {\n                        this.emitDeclFlags(ToDeclFlags(varDecl.varFlags), "var");\n                        this.varListCount = -this.varListCount;\n                    }\n                    this.declFile.Write(varDecl.id.text);\n                } else {\n                    this.emitIndent();\n                    this.declFile.Write(varDecl.id.text);\n                    if (hasFlag(varDecl.id.flags, ASTFlags.OptionalName)) {\n                        this.declFile.Write("?");\n                    }\n                }\n\n                var type: Type = null;\n                if (varDecl.typeExpr && varDecl.typeExpr.type) {\n                    type = varDecl.typeExpr.type;\n                }\n                else if (varDecl.sym) {\n                    type = (<FieldSymbol>varDecl.sym).getType();\n                    // Dont emit inferred any\n                    if (type == this.checker.anyType) {\n                        type = null;\n                    }\n                }\n\n                if (type && this.canEmitTypeAnnotationSignature(ToDeclFlags(varDecl.varFlags))) {\n                    this.declFile.Write(": ");\n                    this.emitTypeSignature(type);\n                }\n               \n                // emitted one var decl\n                if (this.varListCount > 0) { this.varListCount--; } else if (this.varListCount < 0) { this.varListCount++; }\n\n                // Write ; or ,\n                if (this.varListCount < 0) {\n                    this.declFile.Write(", ");\n                } else {\n                    this.declFile.WriteLine(";");\n                }\n            }\n            return false;\n        }\n\n        public BlockCallback(pre: bool, block: Block): bool {\n            if (!block.isStatementBlock) {\n                if (pre) {\n                    this.varListCount = block.statements.members.length;\n                } else {\n                    this.varListCount = 0;\n                }\n                return true;\n            }\n            return false;\n        }\n\n        private emitArgDecl(argDecl: ArgDecl, funcDecl: FuncDecl) {\n            this.emitDeclarationComments(argDecl, false);\n            this.declFile.Write(argDecl.id.text);\n            if (argDecl.isOptionalArg()) {\n                this.declFile.Write("?");\n            }\n            if ((argDecl.typeExpr || argDecl.type != this.checker.anyType) &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags))) {\n                this.declFile.Write(": ");\n                this.emitTypeSignature(argDecl.type);\n            }\n        }\n\n        public FuncDeclCallback(pre: bool, funcDecl: FuncDecl): bool {\n            if (!pre) {\n                return false;\n            }\n\n            if (funcDecl.isAccessor()) {\n                return this.emitPropertyAccessorSignature(funcDecl);\n            }\n\n            var isInterfaceMember = (this.getAstDeclarationContainer().nodeType == NodeType.InterfaceDeclaration);\n            if (funcDecl.bod) {\n                if (funcDecl.isConstructor) {\n                    if (funcDecl.type.construct && funcDecl.type.construct.signatures.length > 1) {\n                        return false;\n                    }\n                } else {\n                    if (funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {\n                        // This means its implementation of overload signature. do not emit\n                        return false;\n                    }\n                }\n            } else if (!isInterfaceMember && hasFlag(funcDecl.fncFlags, FncFlags.Private) && funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {\n                // Print only first overload of private function\n                var signatures = funcDecl.type.call.signatures;\n                var firstSignature = signatures[0].declAST;\n                if (firstSignature.bod) {\n                    // Its a implementation, use next one\n                    firstSignature = signatures[1].declAST;\n                }\n\n                if (firstSignature != funcDecl) {\n                    return false;\n                }\n            }\n\n            if (!this.canEmitSignature(ToDeclFlags(funcDecl.fncFlags), false)) {\n                return false;\n            }\n\n            this.emitDeclarationComments(funcDecl);\n            if (funcDecl.isConstructor) {\n                this.emitIndent();\n                this.declFile.Write("constructor");\n            }\n            else {\n                var id = funcDecl.getNameText();\n                if (!isInterfaceMember) {\n                    this.emitDeclFlags(ToDeclFlags(funcDecl.fncFlags), "function");\n                    this.declFile.Write(id);\n                } else {\n                    this.emitIndent();\n                    if (funcDecl.isConstructMember()) {\n                        this.declFile.Write("new");\n                    } else if (!funcDecl.isCallMember() && !funcDecl.isIndexerMember()) {\n                        this.declFile.Write(id);\n                        if (hasFlag(funcDecl.name.flags, ASTFlags.OptionalName)) {\n                            this.declFile.Write("? ");\n                        }\n                    }\n                }\n            }\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write("(");\n            } else {\n                this.declFile.Write("[");\n            }\n\n            this.indenter.increaseIndent();\n\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length;\n                if (funcDecl.variableArgList) {\n                    argsLen--;\n                }\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    this.emitArgDecl(argDecl, funcDecl);\n                    if (i < (argsLen - 1)) {\n                        this.declFile.Write(", ");\n                    }\n                }\n            }\n\n            if (funcDecl.variableArgList) {\n                var lastArg = <ArgDecl>funcDecl.arguments.members[funcDecl.arguments.members.length - 1];\n                if (funcDecl.arguments.members.length > 1) {\n                    this.declFile.Write(", ...");\n                }\n                else {\n                    this.declFile.Write("...");\n                }\n                this.emitArgDecl(lastArg, funcDecl);\n            }\n\n            this.indenter.decreaseIndent();\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write(")");\n            } else {\n                this.declFile.Write("]");\n            }\n\n            if (!funcDecl.isConstructor &&\n                (funcDecl.returnTypeAnnotation || funcDecl.signature.returnType.type != this.checker.anyType) &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags))) {\n                this.declFile.Write(": ");\n                this.emitTypeSignature(funcDecl.signature.returnType.type);\n            }\n\n            this.declFile.WriteLine(";");\n\n            return false;\n        }\n\n        private emitBaseList(bases: ASTList, qual: string) {\n            if (bases && (bases.members.length > 0)) {\n                this.declFile.Write(" " + qual + " ");\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    var baseExpr = bases.members[i];\n                    var baseSymbol = baseExpr.type.symbol;\n                    var baseType = baseExpr.type;\n                    if (i > 0) {\n                        this.declFile.Write(", ");\n                    }\n                    this.emitTypeSignature(baseType);\n                }\n            }\n        }\n\n        private emitPropertyAccessorSignature(funcDecl: FuncDecl) {\n            var accessorSymbol = <FieldSymbol>funcDecl.accessorSymbol;\n            if (accessorSymbol.getter && accessorSymbol.getter.declAST != funcDecl) {\n                // Setter is being used to emit the type info. \n                return false;\n            }\n\n            this.emitDeclarationComments(accessorSymbol);\n            this.emitDeclFlags(ToDeclFlags(accessorSymbol.flags), "var");\n            this.declFile.Write(funcDecl.name.text);\n            var propertyType = accessorSymbol.getType();\n            if (this.canEmitTypeAnnotationSignature(ToDeclFlags(accessorSymbol.flags))) {\n                this.declFile.Write(" : ");\n                this.emitTypeSignature(propertyType);\n            }\n            this.declFile.WriteLine(";");\n\n            return false;\n        }\n\n        private emitClassMembersFromConstructorDefinition(funcDecl: FuncDecl) {\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length; if (funcDecl.variableArgList) { argsLen--; }\n\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    if (hasFlag(argDecl.varFlags, VarFlags.Property)) {\n                        this.emitDeclarationComments(argDecl);\n                        this.emitDeclFlags(ToDeclFlags(argDecl.varFlags), "var");\n                        this.declFile.Write(argDecl.id.text);\n\n                        if (argDecl.typeExpr && this.canEmitTypeAnnotationSignature(ToDeclFlags(argDecl.varFlags))) {\n                            this.declFile.Write(": ");\n                            this.emitTypeSignature(argDecl.type);\n                        }\n                        this.declFile.WriteLine(";");\n                    }\n                }\n            }\n        }\n\n        public ClassDeclarationCallback(pre: bool, classDecl: ClassDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(classDecl.varFlags), classDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var className = classDecl.name.text;\n                this.emitDeclarationComments(classDecl);\n                this.emitDeclFlags(ToDeclFlags(classDecl.varFlags), "class");\n                this.declFile.Write(className);\n                this.emitBaseList(classDecl.extendsList, "extends");\n                this.emitBaseList(classDecl.implementsList, "implements");\n                this.declFile.WriteLine(" {");\n\n                this.pushDeclarationContainer(classDecl);\n                this.indenter.increaseIndent();\n                if (classDecl.constructorDecl) {\n                    this.emitClassMembersFromConstructorDefinition(classDecl.constructorDecl);\n                }\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(classDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine("}");\n            }\n\n            return true;\n        }\n\n        public InterfaceDeclarationCallback(pre: bool, interfaceDecl: InterfaceDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(interfaceDecl.varFlags), interfaceDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var interfaceName = interfaceDecl.name.text;\n                this.emitDeclarationComments(interfaceDecl);\n                this.emitDeclFlags(ToDeclFlags(interfaceDecl.varFlags), "interface");\n                this.declFile.Write(interfaceName);\n                this.emitBaseList(interfaceDecl.extendsList, "extends");\n                this.declFile.WriteLine(" {");\n\n                this.indenter.increaseIndent();\n                this.pushDeclarationContainer(interfaceDecl);\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(interfaceDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine("}");\n            }\n\n            return true;\n        }\n\n        public ImportDeclarationCallback(pre: bool, importDecl: ImportDeclaration): bool {\n            if (pre) {\n                if ((<Script>this.declarationContainerStack[0]).isExternallyVisibleSymbol(importDecl.id.sym)) {\n                    this.emitDeclarationComments(importDecl);\n                    this.emitIndent();\n                    this.declFile.Write("import ");\n\n                    this.declFile.Write(importDecl.id.text + " = ");\n                    if (importDecl.isDynamicImport) {\n                        this.declFile.WriteLine("module (" + importDecl.getAliasName() + ");");\n                    } else {\n                        this.declFile.WriteLine(importDecl.getAliasName() + ";");\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private emitEnumSignature(moduleDecl: ModuleDeclaration) {\n            if (!this.canEmitSignature(ToDeclFlags(moduleDecl.modFlags))) {\n                return false;\n            }\n\n            this.emitDeclarationComments(moduleDecl);\n            this.emitDeclFlags(ToDeclFlags(moduleDecl.modFlags), "enum");\n            this.declFile.WriteLine(moduleDecl.name.text + " {");\n\n            this.indenter.increaseIndent();\n            var membersLen = moduleDecl.members.members.length;\n            for (var j = 1; j < membersLen; j++) {\n                var memberDecl: AST = moduleDecl.members.members[j];\n                if (memberDecl.nodeType == NodeType.VarDecl) {\n                    this.emitDeclarationComments(memberDecl);\n                    this.emitIndent();\n                    this.declFile.WriteLine((<VarDecl>memberDecl).id.text + ",");\n                } else {\n                    CompilerDiagnostics.assert(memberDecl.nodeType != NodeType.Asg, "We want to catch this");\n                }\n            }\n            this.indenter.decreaseIndent();\n\n            this.emitIndent();\n            this.declFile.WriteLine("}");\n\n            return false;\n        }\n\n        public ModuleDeclarationCallback(pre: bool, moduleDecl: ModuleDeclaration): bool {\n            if (hasFlag(moduleDecl.modFlags, ModuleFlags.IsWholeFile)) {\n                // This is dynamic modules and we are going to outputing single file, \n                // we need to change the declFile because dynamic modules are always emitted to their corresponding .d.ts\n                if (hasFlag(moduleDecl.modFlags, ModuleFlags.IsDynamic)) {\n                    if (pre) {\n                        if (!this.emitOptions.outputMany) {\n                            this.singleDeclFile = this.declFile;\n                            CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");\n                            // Create new file\n                            var declareFileName = this.emitOptions.mapOutputFileName(stripQuotes(moduleDecl.name.sym.name), TypeScriptCompiler.mapToDTSFileName);\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            try {\n                                // Creating files can cause exceptions, report them.   \n                                this.declFile = new DeclFileWriter(this.emitOptions.ioHost.createFile(declareFileName, useUTF8InOutputfile));\n                            } catch (ex) {\n                                this.errorReporter.emitterError(null, ex.message);\n                            }\n                        }\n                        this.pushDeclarationContainer(moduleDecl);\n                    } else {\n                        if (!this.emitOptions.outputMany) {\n                            CompilerDiagnostics.assert(this.singleDeclFile != this.declFile, "singleDeclFile cannot be null as we are going to revert back to it");\n                            CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");\n                            try {\n                                // Closing files could result in exceptions, report them if they occur\n                                this.declFile.Close();\n                            } catch (ex) {\n                                this.errorReporter.emitterError(null, ex.message);\n                            }\n                            this.declFile = this.singleDeclFile;\n                        }\n                        this.popDeclarationContainer(moduleDecl);\n                    }\n                }\n\n                return true;\n            }\n\n            if (moduleDecl.isEnum()) {\n                if (pre) {\n                    this.emitEnumSignature(moduleDecl);\n                }\n                return false;\n            }\n\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(moduleDecl.modFlags), moduleDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                if (this.emitDottedModuleName()) {\n                    this.dottedModuleEmit += ".";\n                } else {\n                    this.dottedModuleEmit = this.getDeclFlagsString(ToDeclFlags(moduleDecl.modFlags), "module");\n                }\n                this.dottedModuleEmit += moduleDecl.name.text;\n\n                var isCurrentModuleDotted = (moduleDecl.members.members.length == 1 &&\n                    moduleDecl.members.members[0].nodeType == NodeType.ModuleDeclaration &&\n                    !(<ModuleDeclaration>moduleDecl.members.members[0]).isEnum() &&\n                    hasFlag((<ModuleDeclaration>moduleDecl.members.members[0]).modFlags, ModuleFlags.Exported));\n\n                // Module is dotted only if it does not have doc comments for it\n                var moduleDeclComments = moduleDecl.getDocComments();\n                isCurrentModuleDotted = isCurrentModuleDotted && (moduleDeclComments == null || moduleDeclComments.length == 0);\n\n                this.isDottedModuleName.push(isCurrentModuleDotted);\n                this.pushDeclarationContainer(moduleDecl);\n\n                if (!isCurrentModuleDotted) {\n                    this.emitDeclarationComments(moduleDecl);\n                    this.declFile.Write(this.dottedModuleEmit);\n                    this.declFile.WriteLine(" {");\n                    this.indenter.increaseIndent();\n                }\n            } else {\n                if (!this.emitDottedModuleName()) {\n                    this.indenter.decreaseIndent();\n                    this.emitIndent();\n                    this.declFile.WriteLine("}");\n                }\n                this.popDeclarationContainer(moduleDecl);\n                this.isDottedModuleName.pop();\n            }\n\n            return true;\n        }\n\n        public ScriptCallback(pre: bool, script: Script): bool {\n            if (pre) {\n                if (this.emitOptions.outputMany) {\n                    for (var i = 0; i < script.referencedFiles.length; i++) {\n                        var referencePath = script.referencedFiles[i].path;\n                        var declareFileName: string;\n                        if (isRooted(referencePath)) {\n                            declareFileName = this.emitOptions.mapOutputFileName(referencePath, TypeScriptCompiler.mapToDTSFileName)\n                        } else {\n                            declareFileName = getDeclareFilePath(script.referencedFiles[i].path);\n                        }\n                        this.declFile.WriteLine(\'/// <reference path="\' + declareFileName + \'" />\');\n                    }\n                }\n                this.pushDeclarationContainer(script);\n            }\n            else {\n                this.popDeclarationContainer(script);\n            }\n            return true;\n        }\n\n        public DefaultCallback(pre: bool, ast: AST): bool {\n            return !hasFlag(ast.flags, ASTFlags.IsStatement);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export module CompilerDiagnostics {\n        export var debug = false;\n        export interface IDiagnosticWriter {\n            Alert(output: string): void;\n        }\n\n        export var diagnosticWriter: IDiagnosticWriter = null;\n\n        export var analysisPass: number = 0;\n\n        export function Alert(output: string) {\n            if (diagnosticWriter) {\n                diagnosticWriter.Alert(output);\n            }\n        }\n\n        export function debugPrint(s: string) {\n            if (debug) {\n                Alert(s);\n            }\n        }\n\n        export function assert(condition: bool, s: string) {\n            if (debug) {\n                if (!condition) {\n                    Alert(s);\n                }\n            }\n        }\n\n    }\n\n    export interface ILogger {\n        information(): bool;\n        debug(): bool;\n        warning(): bool;\n        error(): bool;\n        fatal(): bool;\n        log(s: string): void;\n    }\n\n    export class NullLogger implements ILogger {\n        public information(): bool { return false; }\n        public debug(): bool { return false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n        }\n    }\n\n    export class LoggerAdapter implements ILogger {\n        private _information: bool;\n        private _debug: bool;\n        private _warning: bool;\n        private _error: bool;\n        private _fatal: bool;\n\n        constructor (public logger: ILogger) { \n            this._information = this.logger.information();\n            this._debug = this.logger.debug();\n            this._warning = this.logger.warning();\n            this._error = this.logger.error();\n            this._fatal = this.logger.fatal();\n        }\n\n\n        public information(): bool { return this._information; }\n        public debug(): bool { return this._debug; }\n        public warning(): bool { return this._warning; }\n        public error(): bool { return this._error; }\n        public fatal(): bool { return this._fatal; }\n        public log(s: string): void {\n            this.logger.log(s);\n        }\n    }\n\n    export class BufferedLogger implements ILogger {\n        public logContents = [];\n\n        public information(): bool { return false; }\n        public debug(): bool { return false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n            this.logContents.push(s);\n        }\n    }\n\n    export function timeFunction(logger: ILogger, funcDescription: string, func: () =>any): any {\n        var start = +new Date();\n        var result = func();\n        var end = +new Date();\n        logger.log(funcDescription + " completed in " + (end - start) + " msec");\n        return result;\n    }\n\n    export function stringToLiteral(value: string, length: number): string {\n        var result = "";\n\n        var addChar = (index: number) => {\n            var ch = value.charCodeAt(index);\n            switch (ch) {\n                case 0x09: // tab\n                    result += "\\\\t";\n                    break;\n                case 0x0a: // line feed\n                    result += "\\\\n";\n                    break;\n                case 0x0b: // vertical tab\n                    result += "\\\\v";\n                    break;\n                case 0x0c: // form feed\n                    result += "\\\\f";\n                    break;\n                case 0x0d: // carriage return\n                    result += "\\\\r";\n                    break;\n                case 0x22:  // double quote\n                    result += "\\\\\\"";\n                    break;\n                case 0x27: // single quote\n                    result += "\\\\\\\'";\n                    break;\n                case 0x5c: // Backslash\n                    result += "\\\\";\n                    break;\n                default:\n                    result += value.charAt(index);\n            }\n        }\n\n        var tooLong = (value.length > length);\n        if (tooLong) {\n            var mid = length >> 1;\n            for (var i = 0; i < mid; i++) addChar(i);\n            result += "(...)";\n            for (var i = value.length - mid; i < value.length; i++) addChar(i);\n        }\n        else {\n            length = value.length;\n            for (var i = 0; i < length; i++) addChar(i);\n        }\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum EmitContainer {\n        Prog,\n        Module,\n        DynamicModule,\n        Class,\n        Constructor,\n        Function,\n        Args,\n        Interface,\n    }\n\n    export class EmitState {\n        public column: number;\n        public line: number;\n        public pretty: bool;\n        public inObjectLiteral: bool;\n        public container: EmitContainer;\n\n        constructor () {\n            this.column = 0;\n            this.line = 0;\n            this.pretty = false;\n            this.inObjectLiteral = false;\n            this.container = EmitContainer.Prog;\n        }\n    }\n\n    export class EmitOptions {\n        public minWhitespace: bool;\n        public propagateConstants: bool;\n        public emitComments: bool;\n        public outputOption: string;\n        public ioHost: EmitterIOHost = null;\n        public outputMany: bool = true;\n        public commonDirectoryPath = "";\n\n        constructor(settings: CompilationSettings) {\n            this.minWhitespace = settings.minWhitespace;\n            this.propagateConstants = settings.propagateConstants;\n            this.emitComments = settings.emitComments;\n            this.outputOption = settings.outputOption;\n        }\n\n        public mapOutputFileName(fileName: string, extensionChanger: (fname: string, wholeFileNameReplaced: bool) => string) {\n            if (this.outputMany) {\n                var updatedFileName = fileName;\n                if (this.outputOption != "") {\n                    // Replace the common directory path with the option specified\n                    updatedFileName = fileName.replace(this.commonDirectoryPath, "");\n                    updatedFileName = this.outputOption + updatedFileName;\n                }\n                return extensionChanger(updatedFileName, false);\n            } else {\n                return extensionChanger(this.outputOption, true);\n            }\n        }\n    }\n\n    export class Indenter {\n        static indentStep : number = 4;\n        static indentStepString : string = "    ";\n        static indentStrings: string[] = [];\n        public indentAmt: number = 0;\n\n        public increaseIndent() {\n            this.indentAmt += Indenter.indentStep;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt -= Indenter.indentStep;\n        }\n\n        public getIndent() {\n            var indentString = Indenter.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = "";\n                for (var i = 0; i < this.indentAmt; i = i + Indenter.indentStep) {\n                    indentString += Indenter.indentStepString;\n                }\n                Indenter.indentStrings[this.indentAmt] = indentString;\n            }\n            return indentString;\n        }\n    }\n\n    export class Emitter {\n        public prologueEmitted = false;\n        public thisClassNode: TypeDeclaration = null;\n        public thisFnc: FuncDecl = null;\n        public moduleDeclList: ModuleDeclaration[] = [];\n        public moduleName = "";\n        public emitState = new EmitState();\n        public indenter = new Indenter();\n        public ambientModule = false;\n        public modAliasId: string = null;\n        public firstModAlias: string = null;\n        public allSourceMappers: SourceMapper[] = [];\n        public sourceMapper: SourceMapper = null;\n        public captureThisStmtString = "var _this = this;";\n        private varListCountStack: number[] = [0]; \n\n        constructor(public checker: TypeChecker, public emittingFileName: string, public outfile: ITextWriter, public emitOptions: EmitOptions, public errorReporter: ErrorReporter) {\n        }\n\n        public setSourceMappings(mapper: SourceMapper) {\n            this.allSourceMappers.push(mapper);\n            this.sourceMapper = mapper;\n        }\n\n        public writeToOutput(s: string) {\n            this.outfile.Write(s);\n            // TODO: check s for newline\n            this.emitState.column += s.length;\n        }\n\n        public writeToOutputTrimmable(s: string) {\n            if (this.emitOptions.minWhitespace) {\n                s = s.replace(/[\\s]*/g, \'\');\n            }\n            this.writeToOutput(s);\n        }\n\n        public writeLineToOutput(s: string) {\n            if (this.emitOptions.minWhitespace) {\n                this.writeToOutput(s);\n                var c = s.charCodeAt(s.length - 1);\n                if (!((c == LexCodeSpace) || (c == LexCodeSMC) || (c == LexCodeLBR))) {\n                    this.writeToOutput(\' \');\n                }\n            }\n            else {\n                this.outfile.WriteLine(s);\n                this.emitState.column = 0\n                this.emitState.line++;\n            }\n        }\n\n        public writeCaptureThisStatement(ast: AST) {\n            this.emitIndent();\n            this.recordSourceMappingStart(ast);\n            this.writeToOutput(this.captureThisStmtString);\n            this.recordSourceMappingEnd(ast);\n            this.writeLineToOutput("");\n        }\n\n        public setInVarBlock(count: number) {\n            this.varListCountStack[this.varListCountStack.length - 1] = count;\n        }\n\n        public setInObjectLiteral(val: bool): bool {\n            var temp = this.emitState.inObjectLiteral;\n            this.emitState.inObjectLiteral = val;\n            return temp;\n        }\n\n        public setContainer(c: number): number {\n            var temp = this.emitState.container;\n            this.emitState.container = c;\n            return temp;\n        }\n\n        private getIndentString() {\n            if (this.emitOptions.minWhitespace) {\n                return "";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        public emitIndent() {\n            this.writeToOutput(this.getIndentString());\n        }\n\n        public emitCommentInPlace(comment: Comment) {\n            var text = comment.getText();\n            var hadNewLine = false;\n\n            if (comment.isBlockComment) {\n                if (this.emitState.column == 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n\n                if (text.length > 1 || comment.endsLine) {\n                    for (var i = 1; i < text.length; i++) {\n                        this.writeLineToOutput("");\n                        this.emitIndent();\n                        this.writeToOutput(text[i]);\n                    }\n                    this.recordSourceMappingEnd(comment);\n                    this.writeLineToOutput("");\n                    hadNewLine = true;\n                } else {\n                    this.recordSourceMappingEnd(comment);\n                }\n            }\n            else {\n                if (this.emitState.column == 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n                this.recordSourceMappingEnd(comment);\n                this.writeLineToOutput("");\n                hadNewLine = true;\n            }\n\n            if (hadNewLine) {\n                this.emitIndent();\n            }\n            else {\n                this.writeToOutput(" ");\n            }\n        }\n\n        public emitParensAndCommentsInPlace(ast: AST, pre: bool) {\n            var comments = pre ? ast.preComments : ast.postComments;\n\n            // comments should be printed before the LParen, but after the RParen\n            if (ast.isParenthesized && !pre) {\n                this.writeToOutput(")");\n            }\n            if (this.emitOptions.emitComments && comments && comments.length != 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    this.emitCommentInPlace(comments[i]);\n                }\n            }\n            if (ast.isParenthesized && pre) {\n                this.writeToOutput("(");\n            }\n        }\n\n        // TODO: emit accessor pattern\n        public emitObjectLiteral(content: ASTList) {\n            this.writeLineToOutput("{");\n            this.indenter.increaseIndent();\n            var inObjectLiteral = this.setInObjectLiteral(true);\n            this.emitJavascriptList(content, ",", TokenID.Comma, true, false, false);\n            this.setInObjectLiteral(inObjectLiteral);\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.writeToOutput("}");\n        }\n\n        public emitArrayLiteral(content: ASTList) {\n            this.writeToOutput("[");\n            if (content) {\n                this.writeLineToOutput("");\n                this.indenter.increaseIndent();\n                this.emitJavascriptList(content, ", ", TokenID.Comma, true, false, false);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n            }\n            this.writeToOutput("]");\n        }\n\n        public emitNew(target: AST, args: ASTList) {\n            this.writeToOutput("new ");\n            if (target.nodeType == NodeType.TypeRef) {\n                var typeRef = <TypeReference>target;\n                if (typeRef.arrayCount) {\n                    this.writeToOutput("Array()");\n                }\n                else {\n                    this.emitJavascript(typeRef.term, TokenID.Tilde, false);\n                    this.writeToOutput("()");\n                }\n            }\n            else {\n                this.emitJavascript(target, TokenID.Tilde, false);\n                this.recordSourceMappingStart(args);\n                this.writeToOutput("(");\n                this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                this.writeToOutput(")");\n                this.recordSourceMappingEnd(args);\n            }\n        }\n\n        public tryEmitConstant(dotExpr: BinaryExpression) {\n            if (!this.emitOptions.propagateConstants) {\n                return false;\n            }\n            var propertyName = <Identifier>dotExpr.operand2;\n            if (propertyName && propertyName.sym && propertyName.sym.isVariable()) {\n                if (hasFlag(propertyName.sym.flags, SymbolFlags.Constant)) {\n                    if (propertyName.sym.declAST) {\n                        var boundDecl = <BoundDecl>propertyName.sym.declAST;\n                        if (boundDecl.init && (boundDecl.init.nodeType == NodeType.NumberLit)) {\n                            var numLit = <NumberLiteral>boundDecl.init;\n                            this.writeToOutput(numLit.value.toString());\n                            var comment = " /* ";\n                            comment += propertyName.actualText;\n                            comment += " */ ";\n                            this.writeToOutput(comment);\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public emitCall(callNode: CallExpression, target: AST, args: ASTList) {\n            if (!this.emitSuperCall(callNode)) {\n                if (!hasFlag(callNode.flags, ASTFlags.ClassBaseConstructorCall)) {\n                    if (target.nodeType == NodeType.FuncDecl && !target.isParenthesized) {\n                        this.writeToOutput("(");\n                    }\n                    if (callNode.target.nodeType == NodeType.Super && this.emitState.container == EmitContainer.Constructor) {\n                        this.writeToOutput("_super.call");\n                    }\n                    else {\n                        this.emitJavascript(target, TokenID.OpenParen, false);\n                    }\n                    if (target.nodeType == NodeType.FuncDecl && !target.isParenthesized) {\n                        this.writeToOutput(")");\n                    }\n                    this.recordSourceMappingStart(args);\n                    this.writeToOutput("(");\n                    if (callNode.target.nodeType == NodeType.Super && this.emitState.container == EmitContainer.Constructor) {\n                        this.writeToOutput("this");\n                        if (args && args.members.length) {\n                            this.writeToOutput(", ");\n                        }\n                    }\n                    this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                    this.writeToOutput(")");\n                    this.recordSourceMappingEnd(args);\n                }\n                else {\n                    this.indenter.decreaseIndent();\n                    this.indenter.decreaseIndent();\n                    var constructorCall = new ASTList();\n                    constructorCall.members[0] = callNode;\n                    this.emitConstructorCalls(constructorCall, this.thisClassNode);\n                    this.indenter.increaseIndent();\n                    this.indenter.increaseIndent();\n                }\n            }\n        }\n\n        public emitConstructorCalls(bases: ASTList, classDecl: TypeDeclaration) {\n            if (bases == null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            this.recordSourceMappingStart(classDecl);\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType == NodeType.Call) {\n                    baseSymbol = (<CallExpression>baseExpr).target.type.symbol;\n                }\n                else {\n                    baseSymbol = baseExpr.type.symbol;\n                }\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                if (baseExpr.nodeType == NodeType.Call) {\n                    this.emitIndent();\n                    this.writeToOutput("_super.call(this");\n                    var args = (<CallExpression>baseExpr).arguments;\n                    if (args && (args.members.length > 0)) {\n                        this.writeToOutput(", ");\n                        this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(")");\n                }\n                else {\n                    if (baseExpr.type && (baseExpr.type.isClassInstance())) {\n                        // parameterless constructor call;\n                        this.emitIndent();\n                        this.writeToOutput(classDecl.name.actualText + "._super.constructor");\n                        //emitJavascript(baseExpr,TokenID.LParen,false);\n                        this.writeToOutput(".call(this)");\n                    }\n                }\n            }\n            this.recordSourceMappingEnd(classDecl);\n        }\n\n        public emitInnerFunction(funcDecl: FuncDecl, printName: bool, isMember: bool,\n            bases: ASTList, hasSelfRef: bool, classDecl: TypeDeclaration) {\n            /// REVIEW: The code below causes functions to get pushed to a newline in cases where they shouldn\'t\n            /// such as: \n            ///     Foo.prototype.bar = \n            ///         function() {\n            ///         };\n            /// Once we start emitting comments, we should pull this code out to place on the outer context where the function\n            /// is used.\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n            //    this.writeLineToOutput("");\n            //    this.increaseIndent();\n            //    emitIndent();\n            //}\n\n            var isClassConstructor = funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod);\n            var hasNonObjectBaseType = isClassConstructor && hasFlag(this.thisClassNode.type.instanceType.typeFlags, TypeFlags.HasBaseType) && !hasFlag(this.thisClassNode.type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n            var classPropertiesMustComeAfterSuperCall = hasNonObjectBaseType && hasFlag((<ClassDeclaration>this.thisClassNode).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor);\n\n            // We have no way of knowing if the current function is used as an expression or a statement, so as to enusre that the emitted\n            // JavaScript is always valid, add an extra parentheses for unparenthesized function expressions\n            var shouldParenthesize = hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression) && !funcDecl.isParenthesized && !funcDecl.isAccessor() && (hasFlag(funcDecl.flags, ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.flags, ASTFlags.AutomaticSemicolon));\n\n            this.emitParensAndCommentsInPlace(funcDecl, true);\n            if (shouldParenthesize) {\n                this.writeToOutput("(");\n            }\n            this.recordSourceMappingStart(funcDecl);\n            if (!(funcDecl.isAccessor() && (<FieldSymbol>funcDecl.accessorSymbol).isObjectLitField)) {\n                this.writeToOutput("function ");\n            }\n            if (printName) {\n                var id = funcDecl.getNameText();\n                if (id && !funcDecl.isAccessor()) {\n                    if (funcDecl.name) {\n                        this.recordSourceMappingStart(funcDecl.name);\n                    }\n                    this.writeToOutput(id);\n                    if (funcDecl.name) {\n                        this.recordSourceMappingEnd(funcDecl.name);\n                    }\n                }\n            }\n\n            this.writeToOutput("(");\n            var argsLen = 0;\n            var i = 0;\n            var arg: ArgDecl;\n            var defaultArgs: ArgDecl[] = [];\n            if (funcDecl.arguments) {\n                var tempContainer = this.setContainer(EmitContainer.Args);\n                argsLen = funcDecl.arguments.members.length;\n                var printLen = argsLen;\n                if (funcDecl.variableArgList) {\n                    printLen--;\n                }\n                for (i = 0; i < printLen; i++) {\n                    arg = <ArgDecl>funcDecl.arguments.members[i];\n                    if (arg.init) {\n                        defaultArgs.push(arg);\n                    }\n                    this.emitJavascript(arg, TokenID.OpenParen, false);\n                    if (i < (printLen - 1)) {\n                        this.writeToOutput(", ");\n                    }\n                }\n                this.setContainer(tempContainer);\n            }\n            this.writeLineToOutput(") {");\n\n            if (funcDecl.isConstructor) {\n                this.recordSourceMappingNameStart("constructor");\n            } else if (funcDecl.isGetAccessor()) {\n                this.recordSourceMappingNameStart("get_" + funcDecl.getNameText());\n            } else if (funcDecl.isSetAccessor()) {\n                this.recordSourceMappingNameStart("set_" + funcDecl.getNameText());\n            } else {\n                this.recordSourceMappingNameStart(funcDecl.getNameText());\n            }\n            this.indenter.increaseIndent();\n\n            // set default args first\n            for (i = 0; i < defaultArgs.length; i++) {\n                var arg = defaultArgs[i];\n                this.emitIndent();\n                this.recordSourceMappingStart(arg);\n                this.writeToOutput("if (typeof " + arg.id.actualText + " === \\"undefined\\") { ");//\n                this.recordSourceMappingStart(arg.id);\n                this.writeToOutput(arg.id.actualText);\n                this.recordSourceMappingEnd(arg.id);\n                this.writeToOutput(" = ");\n                this.emitJavascript(arg.init, TokenID.OpenParen, false);\n                this.writeLineToOutput("; }")\n                this.recordSourceMappingEnd(arg);\n            }\n\n            if (funcDecl.isConstructor && ((<ClassDeclaration>funcDecl.classDecl).varFlags & VarFlags.MustCaptureThis)) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n\n            if (funcDecl.isConstructor && !classPropertiesMustComeAfterSuperCall) {\n                if (funcDecl.arguments) {\n                    argsLen = funcDecl.arguments.members.length;\n                    for (i = 0; i < argsLen; i++) {\n                        arg = <ArgDecl>funcDecl.arguments.members[i];\n                        if ((arg.varFlags & VarFlags.Property) != VarFlags.None) {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(arg);\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput("this." + arg.id.actualText);\n                            this.recordSourceMappingEnd(arg.id);\n                            this.writeToOutput(" = ");\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput(arg.id.actualText);\n                            this.recordSourceMappingEnd(arg.id);\n                            this.writeLineToOutput(";");\n                            this.recordSourceMappingEnd(arg);\n                        }\n                    }\n                }\n\n                // For classes, the constructor needs to be explicitly called\n                if (!hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                    this.emitConstructorCalls(bases, classDecl);\n                }\n            }\n            if (hasSelfRef) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n            if (funcDecl.variableArgList) {\n                argsLen = funcDecl.arguments.members.length;\n                var lastArg = <ArgDecl>funcDecl.arguments.members[argsLen - 1];\n                this.emitIndent();\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("var ");\n                this.recordSourceMappingStart(lastArg.id);\n                this.writeToOutput(lastArg.id.actualText);\n                this.recordSourceMappingEnd(lastArg.id);\n                this.writeLineToOutput(" = [];");\n                this.recordSourceMappingEnd(lastArg);\n                this.emitIndent();\n                this.writeToOutput("for (")\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("var _i = 0;");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput(" ");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("_i < (arguments.length - " + (argsLen - 1) + ")");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput("; ");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("_i++");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput(") {");\n                this.indenter.increaseIndent();\n                this.emitIndent();\n\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(lastArg.id.actualText + "[_i] = arguments[_i + " + (argsLen - 1) + "];");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput("");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput("}");\n            }\n\n            // if it\'s a class, emit the uninitializedMembers, first emit the non-proto class body members\n            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod) && !classPropertiesMustComeAfterSuperCall) {\n\n                var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                for (var i = 0; i < nProps; i++) {\n                    if ((<ASTList>this.thisClassNode.members).members[i].nodeType == NodeType.VarDecl) {\n                        var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[i];\n                        if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                            this.emitIndent();\n                            this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                            this.writeLineToOutput("");\n                        }\n                    }\n                }\n                //this.writeLineToOutput("");\n            }\n\n            this.emitBareJavascriptStatements(funcDecl.bod, classPropertiesMustComeAfterSuperCall);\n\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.recordSourceMappingStart(funcDecl.endingToken);\n            this.writeToOutput("}");\n\n            this.recordSourceMappingNameEnd();\n            this.recordSourceMappingEnd(funcDecl.endingToken);\n            this.recordSourceMappingEnd(funcDecl);\n\n            if (shouldParenthesize) {\n                this.writeToOutput(")");\n            }\n\n            // The extra call is to make sure the caller\'s funcDecl end is recorded, since caller wont be able to record it\n            this.recordSourceMappingEnd(funcDecl);\n\n            this.emitParensAndCommentsInPlace(funcDecl, false);\n\n            if (!isMember &&\n                //funcDecl.name != null &&\n                !hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression) &&\n                (hasFlag(funcDecl.fncFlags, FncFlags.Definition) || funcDecl.isConstructor)) {\n                this.writeLineToOutput("");\n            } else if (hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression)) {\n                if (hasFlag(funcDecl.flags, ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.flags, ASTFlags.AutomaticSemicolon)) {\n                    // If either of these two flags are set, then the function expression is a statement. Terminate it.\n                    this.writeLineToOutput(";");\n                }\n            }\n            /// TODO: See the other part of this at the beginning of function\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n            //    this.decreaseIndent();\n            //}           \n        }\n\n        public emitJavascriptModule(moduleDecl: ModuleDeclaration) {\n            var modName = moduleDecl.name.actualText;\n            if (isTSFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 3));\n            }\n            else if (isSTRFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 4));\n            }\n\n            if (!hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient)) {\n                var isDynamicMod = hasFlag(moduleDecl.modFlags, ModuleFlags.IsDynamic);\n                var prevOutFile = this.outfile;\n                var prevOutFileName = this.emittingFileName;\n                var prevAllSourceMappers = this.allSourceMappers;\n                var prevSourceMapper = this.sourceMapper;\n                var prevColumn = this.emitState.column;\n                var prevLine = this.emitState.line;\n                var temp = this.setContainer(EmitContainer.Module);\n                var svModuleName = this.moduleName;\n                var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);\n                this.moduleDeclList[this.moduleDeclList.length] = moduleDecl;\n                var isWholeFile = hasFlag(moduleDecl.modFlags, ModuleFlags.IsWholeFile);\n                this.moduleName = moduleDecl.name.actualText;\n\n                // prologue\n                if (isDynamicMod) {\n                    // create the new outfile for this module\n                    var tsModFileName = stripQuotes(moduleDecl.name.actualText);\n                    var modFilePath = trimModName(tsModFileName) + ".js";\n                    modFilePath = this.emitOptions.mapOutputFileName(modFilePath, TypeScriptCompiler.mapToJSFileName);\n\n                    if (this.emitOptions.ioHost) {\n                        // Ensure that the slashes are normalized so that the comparison is fair\n                        // REVIEW: Note that modFilePath is normalized to forward slashes in Parser.parse, so the \n                        // first call to switchToForwardSlashes is technically a no-op, but it will prevent us from\n                        // regressing if the parser changes\n                        if (switchToForwardSlashes(modFilePath) != switchToForwardSlashes(this.emittingFileName)) {\n                            this.emittingFileName = modFilePath;\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            this.outfile = this.createFile(this.emittingFileName, useUTF8InOutputfile);\n                            if (prevSourceMapper != null) {\n                                this.allSourceMappers = [];\n                                var sourceMappingFile = this.createFile(this.emittingFileName + SourceMapper.MapFileExtension, false);\n                                this.setSourceMappings(new TypeScript.SourceMapper(tsModFileName, this.emittingFileName, this.outfile, sourceMappingFile, this.errorReporter));\n                                this.emitState.column = 0;\n                                this.emitState.line = 0;\n                            }\n                        } else {\n                            CompilerDiagnostics.assert(this.emitOptions.outputMany, "Cannot have dynamic modules compiling into single file");\n                        }\n                    }\n\n                    this.setContainer(EmitContainer.DynamicModule); // discard the previous \'Module\' container\n\n                    this.recordSourceMappingStart(moduleDecl);\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) { // AMD\n                        var dependencyList = "[\\"require\\", \\"exports\\"";\n                        var importList = "require, exports";\n                        var importStatement: ImportDeclaration = null;\n\n                        // all dependencies are quoted\n                        for (var i = 0; i < (<ModuleType>moduleDecl.mod).importedModules.length; i++) {\n                            importStatement = (<ModuleType>moduleDecl.mod).importedModules[i]\n\n                            // if the imported module is only used in a type position, do not add it as a requirement\n                            if (importStatement.id.sym &&\n                                !(<TypeSymbol>importStatement.id.sym).onlyReferencedAsTypeRef) {\n                                if (i <= (<ModuleType>moduleDecl.mod).importedModules.length - 1) {\n                                    dependencyList += ", ";\n                                    importList += ", ";\n                                }\n\n                                importList += "__" + importStatement.id.actualText + "__";\n                                dependencyList += importStatement.firstAliasedModToString();\n                            }\n                        }\n\n                        // emit any potential amd dependencies\n                        for (var i = 0; i < moduleDecl.amdDependencies.length; i++) {\n                            dependencyList += ", \\"" + moduleDecl.amdDependencies[i] + "\\"";\n                        }\n\n                        dependencyList += "]";\n\n                        this.writeLineToOutput("define(" + dependencyList + "," + " function(" + importList + ") {");\n                    }\n                    else { // Node\n\n                    }\n                }\n                else {\n\n                    if (!isExported) {\n                        this.recordSourceMappingStart(moduleDecl);\n                        this.writeToOutput("var ");\n                        this.recordSourceMappingStart(moduleDecl.name);\n                        this.writeToOutput(this.moduleName);\n                        this.recordSourceMappingEnd(moduleDecl.name);\n                        this.writeLineToOutput(";");\n                        this.recordSourceMappingEnd(moduleDecl);\n                        this.emitIndent();\n                    }\n\n                    this.writeToOutput("(");\n                    this.recordSourceMappingStart(moduleDecl);\n                    this.writeToOutput("function (");\n                    this.recordSourceMappingStart(moduleDecl.name);\n                    this.writeToOutput(this.moduleName);\n                    this.recordSourceMappingEnd(moduleDecl.name);\n                    this.writeLineToOutput(") {");\n                }\n\n                if (!isWholeFile) {\n                    this.recordSourceMappingNameStart(this.moduleName);\n                }\n\n                // body - don\'t indent for Node\n                if (!isDynamicMod || moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                    this.indenter.increaseIndent();\n                }\n\n                if (moduleDecl.modFlags & ModuleFlags.MustCaptureThis) {\n                    this.writeCaptureThisStatement(moduleDecl);\n                }\n\n                this.emitJavascriptList(moduleDecl.members, null, TokenID.Semicolon, true, false, false);\n                if (!isDynamicMod || moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                    this.indenter.decreaseIndent();\n                }\n                this.emitIndent();\n\n                // epilogue\n                if (isDynamicMod) {\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) { // AMD\n                        this.writeLineToOutput("})");\n                    }\n                    else { // Node\n                    }\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n\n                    // close the module outfile, and restore the old one\n                    if (this.outfile != prevOutFile) {\n                        this.Close();\n                        if (prevSourceMapper != null) {\n                            this.allSourceMappers = prevAllSourceMappers;\n                            this.sourceMapper = prevSourceMapper;\n                            this.emitState.column = prevColumn;\n                            this.emitState.line = prevLine;\n                        }\n                        this.outfile = prevOutFile;\n                        this.emittingFileName = prevOutFileName;\n                    }\n                }\n                else {\n                    var containingMod: ModuleDeclaration = null;\n                    if (moduleDecl.type && moduleDecl.type.symbol.container && moduleDecl.type.symbol.container.declAST) {\n                        containingMod = <ModuleDeclaration>moduleDecl.type.symbol.container.declAST;\n                    }\n                    var parentIsDynamic = containingMod && hasFlag(containingMod.modFlags, ModuleFlags.IsDynamic);\n\n                    this.recordSourceMappingStart(moduleDecl.endingToken);\n                    if (temp == EmitContainer.Prog && isExported) {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(this." + this.moduleName + " || (this." + this.moduleName + " = {}));");\n                    }\n                    else if (isExported || temp == EmitContainer.Prog) {\n                        var dotMod = svModuleName != "" ? (parentIsDynamic ? "exports" : svModuleName) + "." : svModuleName;\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(" + dotMod + this.moduleName + " || (" + dotMod + this.moduleName + " = {}));");\n                    }\n                    else if (!isExported && temp != EmitContainer.Prog) {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(" + this.moduleName + " || (" + this.moduleName + " = {}));");\n                    }\n                    else {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")();");\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n                    this.writeLineToOutput("");\n                    if (temp != EmitContainer.Prog && isExported) {\n                        this.emitIndent();\n                        this.recordSourceMappingStart(moduleDecl);\n                        if (parentIsDynamic) {\n                            this.writeLineToOutput("var " + this.moduleName + " = exports." + this.moduleName + ";");\n                        } else {\n                            this.writeLineToOutput("var " + this.moduleName + " = " + svModuleName + "." + this.moduleName + ";");\n                        }\n                        this.recordSourceMappingEnd(moduleDecl);\n                    }\n                }\n\n                this.setContainer(temp);\n                this.moduleName = svModuleName;\n                this.moduleDeclList.length--;\n            }\n        }\n\n        public emitIndex(operand1: AST, operand2: AST) {\n            var temp = this.setInObjectLiteral(false);\n            this.emitJavascript(operand1, TokenID.Tilde, false);\n            this.writeToOutput("[");\n            this.emitJavascriptList(operand2, ", ", TokenID.Comma, false, false, false);\n            this.writeToOutput("]");\n            this.setInObjectLiteral(temp);\n        }\n\n        public emitStringLiteral(text: string) {\n            // should preserve escape etc.\n            // TODO: simplify object literal simple name\n            this.writeToOutput(text);\n        }\n\n        public emitJavascriptFunction(funcDecl: FuncDecl) {\n            if (hasFlag(funcDecl.fncFlags, FncFlags.Signature) || funcDecl.isOverload) {\n                return;\n            }\n            var temp: number;\n            var tempFnc = this.thisFnc;\n            this.thisFnc = funcDecl;\n\n            if (funcDecl.isConstructor) {\n                temp = this.setContainer(EmitContainer.Constructor);\n            }\n            else {\n                temp = this.setContainer(EmitContainer.Function);\n            }\n\n            var bases: ASTList = null;\n            var hasSelfRef = false;\n            var funcName = funcDecl.getNameText();\n\n            if ((this.emitState.inObjectLiteral || !funcDecl.isAccessor()) &&\n                ((temp != EmitContainer.Constructor) ||\n                ((funcDecl.fncFlags & FncFlags.Method) == FncFlags.None))) {\n                var tempLit = this.setInObjectLiteral(false);\n                if (this.thisClassNode) {\n                    bases = this.thisClassNode.extendsList;\n                }\n                hasSelfRef = Emitter.shouldCaptureThis(funcDecl);\n                this.recordSourceMappingStart(funcDecl);\n                if (hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported) && funcDecl.type.symbol.container == this.checker.gloMod && !funcDecl.isConstructor) {\n                    this.writeToOutput("this." + funcName + " = ");\n                    this.emitInnerFunction(funcDecl, false, false, bases, hasSelfRef, this.thisClassNode);\n                }\n                else {\n                    this.emitInnerFunction(funcDecl, (funcDecl.name && !funcDecl.name.isMissing()), false, bases, hasSelfRef, this.thisClassNode);\n                }\n                this.setInObjectLiteral(tempLit);\n            }\n            this.setContainer(temp);\n            this.thisFnc = tempFnc;\n\n            if (hasFlag(funcDecl.fncFlags, FncFlags.Definition)) {\n                if (hasFlag(funcDecl.fncFlags, FncFlags.Static)) {\n                    if (this.thisClassNode) {\n                        if (funcDecl.isAccessor()) {\n                            this.emitPropertyAccessor(funcDecl, this.thisClassNode.name.actualText, false);\n                        }\n                        else {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(funcDecl);\n                            this.writeLineToOutput(this.thisClassNode.name.actualText + "." + funcName +\n                                          " = " + funcName + ";");\n                            this.recordSourceMappingEnd(funcDecl);\n                        }\n                    }\n                }\n                else if ((this.emitState.container == EmitContainer.Module || this.emitState.container == EmitContainer.DynamicModule) && hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported)) {\n                    this.emitIndent();\n                    var modName = this.emitState.container == EmitContainer.Module ? this.moduleName : "exports";\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeLineToOutput(modName + "." + funcName +\n                                      " = " + funcName + ";");\n                    this.recordSourceMappingEnd(funcDecl);\n                }\n            }\n        }\n\n        public emitAmbientVarDecl(varDecl: VarDecl) {\n            if (varDecl.init) {\n                this.emitParensAndCommentsInPlace(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                this.writeToOutput(" = ");\n                this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                this.recordSourceMappingEnd(varDecl);\n                this.writeToOutput(";");\n                this.emitParensAndCommentsInPlace(varDecl, false);\n            }\n        }\n\n        private varListCount(): number {\n            return this.varListCountStack[this.varListCountStack.length - 1];\n        }\n\n        // Emits "var " if it is allowed\n        private emitVarDeclVar() {\n            // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n            // If it is var list of form  var a = varList count will be 0\n            if (this.varListCount() >= 0) {\n                this.writeToOutput("var ");\n                this.setInVarBlock(-this.varListCount());\n            }\n            return true;\n        }\n\n        private onEmitVar() {\n            if (this.varListCount() > 0) {\n                this.setInVarBlock(this.varListCount() - 1);\n            }\n            else if (this.varListCount() < 0) {\n                this.setInVarBlock(this.varListCount() + 1);\n            }\n        }\n\n        public emitJavascriptVarDecl(varDecl: VarDecl, tokenId: TokenID) {\n            if ((varDecl.varFlags & VarFlags.Ambient) == VarFlags.Ambient) {\n                this.emitAmbientVarDecl(varDecl);\n                this.onEmitVar();\n            }\n            else {\n                var sym = varDecl.sym;\n                var hasInitializer = (varDecl.init != null);\n                this.emitParensAndCommentsInPlace(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                if (sym && sym.isMember() && sym.container &&\n                    (sym.container.kind() == SymbolKind.Type)) {\n                    var type = (<TypeSymbol>sym.container).type;\n                    if (type.isClass() && (!hasFlag(sym.flags, SymbolFlags.ModuleMember))) {\n                        // class\n                        if (this.emitState.container != EmitContainer.Args) {\n                            if (hasFlag(sym.flags, SymbolFlags.Static)) {\n                                this.writeToOutput(sym.container.name + ".");\n                            }\n                            else {\n                                this.writeToOutput("this.");\n                            }\n                        }\n                    }\n                    else if (type.hasImplementation()) {\n                        // module\n                        if (!hasFlag(sym.flags, SymbolFlags.Exported) && (sym.container == this.checker.gloMod || !hasFlag(sym.flags, SymbolFlags.Property))) {\n                            this.emitVarDeclVar();\n                        }\n                        else if (hasFlag(varDecl.varFlags, VarFlags.LocalStatic)) {\n                            this.writeToOutput(".");\n                        }\n                        else {\n                            if (this.emitState.container == EmitContainer.DynamicModule) {\n                                this.writeToOutput("exports.");\n                            }\n                            else {\n                                this.writeToOutput(this.moduleName + ".");\n                            }\n                        }\n                    }\n                    else {\n                        // function, constructor, method etc.\n                        if (tokenId != TokenID.OpenParen) {\n                            if (hasFlag(sym.flags, SymbolFlags.Exported) && sym.container == this.checker.gloMod) {\n                                this.writeToOutput("this.");\n                            }\n                            else {\n                                this.emitVarDeclVar();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (tokenId != TokenID.OpenParen) {\n                        this.emitVarDeclVar();\n                    }\n                }\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                if (hasInitializer) {\n                    this.writeToOutputTrimmable(" = ");\n\n                    // Ensure we have a fresh var list count when recursing into the variable \n                    // initializer.  We don\'t want our current list of variables to affect how we\n                    // emit nested variable lists.\n                    this.varListCountStack.push(0);\n                    this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                    this.varListCountStack.pop();\n                }\n                this.onEmitVar();\n                if ((tokenId != TokenID.OpenParen)) {\n                    if (this.varListCount() < 0) {\n                        this.writeToOutput(", ");\n                    } else if (tokenId != TokenID.For) {\n                        this.writeToOutputTrimmable(";");\n                    }\n                }\n                this.recordSourceMappingEnd(varDecl);\n                this.emitParensAndCommentsInPlace(varDecl, false);\n            }\n        }\n\n        public declEnclosed(moduleDecl: ModuleDeclaration): bool {\n            if (moduleDecl == null) {\n                return true;\n            }\n            for (var i = 0, len = this.moduleDeclList.length; i < len; i++) {\n                if (this.moduleDeclList[i] == moduleDecl) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitJavascriptName(name: Identifier, addThis: bool) {\n            var sym = name.sym;\n            this.emitParensAndCommentsInPlace(name, true);\n            this.recordSourceMappingStart(name);\n            if (!name.isMissing()) {\n                if (addThis && (this.emitState.container != EmitContainer.Args) && sym) {\n                    // TODO: flag global module with marker other than string name\n                    if (sym.container && (sym.container.name != globalId)) {\n                        if (hasFlag(sym.flags, SymbolFlags.Static) && (hasFlag(sym.flags, SymbolFlags.Property))) {\n                            if (sym.declModule && hasFlag(sym.declModule.modFlags, ModuleFlags.IsDynamic)) {\n                                this.writeToOutput("exports.");\n                            }\n                            else {\n                                this.writeToOutput(sym.container.name + ".");\n                            }\n                        }\n                        else if (sym.kind() == SymbolKind.Field) {\n                            var fieldSym = <FieldSymbol>sym;\n                            if (hasFlag(fieldSym.flags, SymbolFlags.ModuleMember)) {\n                                if ((sym.container != this.checker.gloMod) && ((hasFlag(sym.flags, SymbolFlags.Property)) || hasFlag(sym.flags, SymbolFlags.Exported))) {\n                                    if (hasFlag(sym.declModule.modFlags, ModuleFlags.IsDynamic)) {\n                                        this.writeToOutput("exports.");\n                                    }\n                                    else {\n                                        this.writeToOutput(sym.container.name + ".");\n                                    }\n                                }\n                            }\n                            else {\n                                if (sym.isInstanceProperty()) {\n                                    this.emitThis();\n                                    this.writeToOutput(".");\n                                }\n                            }\n                        }\n                        else if (sym.kind() == SymbolKind.Type) {\n                            if (sym.isInstanceProperty()) {\n                                var typeSym = <TypeSymbol>sym;\n                                var type = typeSym.type;\n                                if (type.call && !hasFlag(sym.flags, SymbolFlags.ModuleMember)) {\n                                    this.emitThis();\n                                    this.writeToOutput(".");\n                                }\n                            }\n                            else if ((sym.unitIndex != this.checker.locationInfo.unitIndex) || (!this.declEnclosed(sym.declModule))) {\n                                this.writeToOutput(sym.container.name + ".")\n                            }\n                        }\n                    }\n                    else if (sym.container == this.checker.gloMod &&\n                                hasFlag(sym.flags, SymbolFlags.Exported) &&\n                                !hasFlag(sym.flags, SymbolFlags.Ambient) &&\n                                // check that it\'s a not a member of an ambient module...\n                                !((sym.isType() || sym.isMember()) &&\n                                    sym.declModule &&\n                                    hasFlag(sym.declModule.modFlags, ModuleFlags.Ambient)) &&\n                                this.emitState.container == EmitContainer.Prog &&\n                                sym.declAST.nodeType != NodeType.FuncDecl) {\n                        this.writeToOutput("this.");\n                    }\n                }\n\n                // If it\'s a dynamic module, we need to print the "require" invocation\n                if (sym &&\n                    sym.declAST &&\n                    sym.declAST.nodeType == NodeType.ModuleDeclaration &&\n                    (hasFlag((<ModuleDeclaration>sym.declAST).modFlags, ModuleFlags.IsDynamic))) {\n                    var moduleDecl: ModuleDeclaration = <ModuleDeclaration>sym.declAST;\n\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                        this.writeLineToOutput("__" + this.modAliasId + "__;");\n                    }\n                    else {\n                        var modPath = name.actualText;//(<ModuleDecl>moduleDecl.mod.symbol.declAST).name.actualText;\n                        var isAmbient = moduleDecl.mod.symbol.declAST && hasFlag((<ModuleDeclaration>moduleDecl.mod.symbol.declAST).modFlags, ModuleFlags.Ambient);\n                        modPath = isAmbient ? modPath : this.firstModAlias ? this.firstModAlias : quoteBaseName(modPath);\n                        modPath = isAmbient ? modPath : (!isRelative(stripQuotes(modPath)) ? quoteStr("./" + stripQuotes(modPath)) : modPath);\n                        this.writeToOutput("require(" + modPath + ")");\n                    }\n                }\n                else {\n                    this.writeToOutput(name.actualText);\n                }\n            }\n            this.recordSourceMappingEnd(name);\n            this.emitParensAndCommentsInPlace(name, false);\n        }\n\n        public emitJavascriptStatements(stmts: AST, emitEmptyBod: bool) {\n            if (stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    var hasContents = (stmts && (stmts.nodeType != NodeType.List || ((<ASTList>stmts).members.length > 0)));\n                    if (emitEmptyBod || hasContents) {\n                        var hasOnlyBlockStatement = ((stmts.nodeType == NodeType.Block) ||\n                            ((stmts.nodeType == NodeType.List) && ((<ASTList>stmts).members.length == 1) && ((<ASTList>stmts).members[0].nodeType == NodeType.Block)));\n\n                        this.recordSourceMappingStart(stmts);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput(" {");\n                            this.indenter.increaseIndent();\n                        }\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, false);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput("");\n                            this.indenter.decreaseIndent();\n                            this.emitIndent();\n                            this.writeToOutput("}");\n                        }\n                        this.recordSourceMappingEnd(stmts);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else if (emitEmptyBod) {\n                this.writeToOutput("{ }");\n            }\n        }\n\n        public emitBareJavascriptStatements(stmts: AST, emitClassPropertiesAfterSuperCall: bool = false) {\n            // just the statements without enclosing curly braces\n            if (stmts.nodeType != NodeType.Block) {\n                if (stmts.nodeType == NodeType.List) {\n                    var stmtList = <ASTList>stmts;\n                    if ((stmtList.members.length == 2) &&\n                        (stmtList.members[0].nodeType == NodeType.Block) &&\n                        (stmtList.members[1].nodeType == NodeType.EndCode)) {\n                        this.emitJavascript(stmtList.members[0], TokenID.Semicolon, true);\n                        this.writeLineToOutput("");\n                    }\n                    else {\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, emitClassPropertiesAfterSuperCall);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else {\n                this.emitJavascript(stmts, TokenID.Semicolon, true);\n            }\n        }\n\n        public recordSourceMappingNameStart(name: string) {\n            if (this.sourceMapper) {\n                var finalName = name;\n                if (!name) {\n                    finalName = "";\n                } else if (this.sourceMapper.currentNameIndex.length > 0) {\n                    finalName = this.sourceMapper.names[this.sourceMapper.currentNameIndex.length - 1] + "." + name;\n                }\n\n                // We are currently not looking for duplicate but that is possible.\n                this.sourceMapper.names.push(finalName);\n                this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);\n            }\n        }\n\n        public recordSourceMappingNameEnd() {\n            if (this.sourceMapper) {\n                this.sourceMapper.currentNameIndex.pop();\n            }\n        }\n\n        public recordSourceMappingStart(ast: ASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                var lineCol = { line: -1, col: -1 };\n                var sourceMapping = new SourceMapping();\n                sourceMapping.start.emittedColumn = this.emitState.column;\n                sourceMapping.start.emittedLine = this.emitState.line;\n                // REVIEW: check time consumed by this binary search (about two per leaf statement)\n                getSourceLineColFromMap(lineCol, ast.minChar, this.checker.locationInfo.lineMap);\n                sourceMapping.start.sourceColumn = lineCol.col;\n                sourceMapping.start.sourceLine = lineCol.line;\n                getSourceLineColFromMap(lineCol, ast.limChar, this.checker.locationInfo.lineMap);\n                sourceMapping.end.sourceColumn = lineCol.col;\n                sourceMapping.end.sourceLine = lineCol.line;\n                if (this.sourceMapper.currentNameIndex.length > 0) {\n                    sourceMapping.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];\n                }\n                // Set parent and child relationship\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                siblings.push(sourceMapping);\n                this.sourceMapper.currentMappings.push(sourceMapping.childMappings);\n            }\n        }\n\n        public recordSourceMappingEnd(ast: ASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                // Pop source mapping childs\n                this.sourceMapper.currentMappings.pop();\n\n                // Get the last source mapping from sibling list = which is the one we are recording end for\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                var sourceMapping = siblings[siblings.length - 1];\n\n                sourceMapping.end.emittedColumn = this.emitState.column;\n                sourceMapping.end.emittedLine = this.emitState.line;\n            }\n        }\n\n        public Close() {\n            if (this.sourceMapper != null) {\n                SourceMapper.EmitSourceMapping(this.allSourceMappers);\n            }\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                this.outfile.Close();\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n\n        public emitJavascriptList(ast: AST, delimiter: string, tokenId: TokenID, startLine: bool, onlyStatics: bool, emitClassPropertiesAfterSuperCall: bool = false, emitPrologue? = false, requiresExtendsBlock?: bool) {\n            if (ast == null) {\n                return;\n            }\n            else if (ast.nodeType != NodeType.List) {\n                this.emitPrologue(emitPrologue);\n                this.emitJavascript(ast, tokenId, startLine);\n            }\n            else {\n                var list = <ASTList>ast;\n                if (list.members.length == 0) {\n                    return;\n                }\n\n                this.emitParensAndCommentsInPlace(ast, true);\n                var len = list.members.length;\n                for (var i = 0; i < len; i++) {\n                    if (emitPrologue) {\n                        // If the list has Strict mode flags, emit prologue after first statement\n                        // otherwise emit before first statement\n                        if (i == 1 || !hasFlag(list.flags, ASTFlags.StrictMode)) {\n                            this.emitPrologue(requiresExtendsBlock);\n                            emitPrologue = false;\n                        }\n                    }\n\n                    // In some circumstances, class property initializers must be emitted immediately after the \'super\' constructor\n                    // call which, in these cases, must be the first statement in the constructor body\n                    if (i == 1 && emitClassPropertiesAfterSuperCall) {\n\n                        // emit any parameter properties first\n                        var constructorDecl = (<ClassDeclaration>this.thisClassNode).constructorDecl;\n\n                        if (constructorDecl && constructorDecl.arguments) {\n                            var argsLen = constructorDecl.arguments.members.length;\n                            for (var iArg = 0; iArg < argsLen; iArg++) {\n                                var arg = <BoundDecl>constructorDecl.arguments.members[iArg];\n                                if ((arg.varFlags & VarFlags.Property) != VarFlags.None) {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(arg);\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput("this." + arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeToOutput(" = ");\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput(arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeLineToOutput(";");\n                                    this.recordSourceMappingEnd(arg);\n                                }\n                            }\n                        }\n\n                        var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                        for (var iMember = 0; iMember < nProps; iMember++) {\n                            if ((<ASTList>this.thisClassNode.members).members[iMember].nodeType == NodeType.VarDecl) {\n                                var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[iMember];\n                                if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                                    this.emitIndent();\n                                    this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                    this.writeLineToOutput("");\n                                }\n                            }\n                        }\n                    }\n\n                    var emitNode = list.members[i];\n\n                    var isStaticDecl =\n                                (emitNode.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>emitNode).fncFlags, FncFlags.Static)) ||\n                                (emitNode.nodeType == NodeType.VarDecl && hasFlag((<VarDecl>emitNode).varFlags, VarFlags.Static))\n\n                    if (onlyStatics ? !isStaticDecl : isStaticDecl) {\n                        continue;\n                    }\n                    this.emitJavascript(emitNode, tokenId, startLine);\n\n                    if (delimiter && (i < (len - 1))) {\n                        if (startLine) {\n                            this.writeLineToOutput(delimiter);\n                        }\n                        else {\n                            this.writeToOutput(delimiter);\n                        }\n                    }\n                    else if (startLine &&\n                             (emitNode.nodeType != NodeType.ModuleDeclaration) &&\n                             (emitNode.nodeType != NodeType.InterfaceDeclaration) &&\n                             (!((emitNode.nodeType == NodeType.VarDecl) &&\n                                ((((<VarDecl>emitNode).varFlags) & VarFlags.Ambient) == VarFlags.Ambient) &&\n                                (((<VarDecl>emitNode).init) == null)) && this.varListCount() >= 0) &&\n                             (emitNode.nodeType != NodeType.Block || (<Block>emitNode).isStatementBlock) &&\n                             (emitNode.nodeType != NodeType.EndCode) &&\n                             (emitNode.nodeType != NodeType.FuncDecl)) {\n                        this.writeLineToOutput("");\n                    }\n                }\n                this.emitParensAndCommentsInPlace(ast, false);\n            }\n        }\n\n        // tokenId is the id the preceding token\n        public emitJavascript(ast: AST, tokenId: TokenID, startLine: bool) {\n            if (ast == null) {\n                return;\n            }\n\n            // REVIEW: simplify rules for indenting\n            if (startLine && (this.indenter.indentAmt > 0) && (ast.nodeType != NodeType.List) &&\n                (ast.nodeType != NodeType.Block)) {\n                if ((ast.nodeType != NodeType.InterfaceDeclaration) &&\n                    (!((ast.nodeType == NodeType.VarDecl) &&\n                       ((((<VarDecl>ast).varFlags) & VarFlags.Ambient) == VarFlags.Ambient) &&\n                       (((<VarDecl>ast).init) == null)) && this.varListCount() >= 0) &&\n                    (ast.nodeType != NodeType.EndCode) &&\n                    ((ast.nodeType != NodeType.FuncDecl) ||\n                     (this.emitState.container != EmitContainer.Constructor))) {\n                    this.emitIndent();\n                }\n            }\n\n            ast.emit(this, tokenId, startLine);\n\n            if ((tokenId == TokenID.Semicolon) && (ast.nodeType < NodeType.GeneralNode)) {\n                this.writeToOutput(";");\n            }\n        }\n\n        public emitPropertyAccessor(funcDecl: FuncDecl, className: string, isProto: bool) {\n            if (!(<FieldSymbol>funcDecl.accessorSymbol).hasBeenEmitted) {\n                var accessorSymbol = <FieldSymbol>funcDecl.accessorSymbol;\n                this.emitIndent();\n                this.recordSourceMappingStart(funcDecl);\n                this.writeLineToOutput("Object.defineProperty(" + className + (isProto ? ".prototype, \\"" : ", \\"") + funcDecl.name.actualText + "\\"" + ", {");\n                this.indenter.increaseIndent();\n\n                if (accessorSymbol.getter) {\n                    var getter: FuncDecl = <FuncDecl>accessorSymbol.getter.declAST;\n\n                    this.emitIndent();\n                    this.recordSourceMappingStart(getter);\n                    this.writeToOutput("get: ");\n                    this.emitInnerFunction(getter, false, isProto, null, Emitter.shouldCaptureThis(getter), null);\n                    this.writeLineToOutput(",");\n                }\n\n                if (accessorSymbol.setter) {\n                    var setter: FuncDecl = <FuncDecl>accessorSymbol.setter.declAST;\n\n                    this.emitIndent();\n                    this.recordSourceMappingStart(setter);\n                    this.writeToOutput("set: ");\n                    this.emitInnerFunction(setter, false, isProto, null, Emitter.shouldCaptureThis(setter), null);\n                    this.writeLineToOutput(",");\n                }\n\n                this.emitIndent();\n                this.writeLineToOutput("enumerable: true,");\n                this.emitIndent();\n                this.writeLineToOutput("configurable: true");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput("});");\n                this.recordSourceMappingEnd(funcDecl);\n\n                accessorSymbol.hasBeenEmitted = true;\n            }\n        }\n\n        public emitPrototypeMember(member: AST, className: string) {\n            if (member.nodeType == NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>member;\n                if (funcDecl.isAccessor()) {\n                    this.emitPropertyAccessor(funcDecl, className, true);\n                }\n                else {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeToOutput(className + ".prototype." + funcDecl.getNameText() + " = ");\n                    this.emitInnerFunction(funcDecl, false, true, null, Emitter.shouldCaptureThis(funcDecl), null);\n                    this.writeLineToOutput(";");\n                }\n            }\n            else if (member.nodeType == NodeType.VarDecl) {\n                var varDecl = <VarDecl>member;\n\n                if (varDecl.init) {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(varDecl);\n                    this.recordSourceMappingStart(varDecl.id);\n                    this.writeToOutput(className + ".prototype." + varDecl.id.actualText);\n                    this.recordSourceMappingEnd(varDecl.id);\n                    this.writeToOutput(" = ");\n                    this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                    this.recordSourceMappingEnd(varDecl);\n                    this.writeLineToOutput(";");\n                }\n            }\n        }\n\n        public emitAddBaseMethods(className: string, base: Type, classDecl: TypeDeclaration): void {\n            if (base.members) {\n                var baseSymbol = base.symbol;\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                base.members.allMembers.map(function(key, s, c) {\n                    var sym = <Symbol>s;\n                    if ((sym.kind() == SymbolKind.Type) && (<TypeSymbol>sym).type.call) {\n                        this.recordSourceMappingStart(sym.declAST);\n                        this.writeLineToOutput(className + ".prototype." + sym.name + " = " +\n                                          baseName + ".prototype." + sym.name + ";");\n                        this.recordSourceMappingEnd(sym.declAST);\n                    }\n                }, null);\n            }\n            if (base.extendsList) {\n                for (var i = 0, len = base.extendsList.length; i < len; i++) {\n                    this.emitAddBaseMethods(className, base.extendsList[i], classDecl);\n                }\n            }\n        }\n\n        public emitJavascriptClass(classDecl: ClassDeclaration) {\n            if (!hasFlag(classDecl.varFlags, VarFlags.Ambient)) {\n                var svClassNode = this.thisClassNode;\n                var i = 0;\n                this.thisClassNode = classDecl;\n                var className = classDecl.name.actualText;\n                this.emitParensAndCommentsInPlace(classDecl, true);\n                var temp = this.setContainer(EmitContainer.Class);\n\n                this.recordSourceMappingStart(classDecl);\n                if (hasFlag(classDecl.varFlags, VarFlags.Exported) && classDecl.type.symbol.container == this.checker.gloMod) {\n                    this.writeToOutput("this." + className);\n                }\n                else {\n                    this.writeToOutput("var " + className);\n                }\n\n                //if (hasFlag(classDecl.varFlags, VarFlags.Exported) && (temp == EmitContainer.Module || temp == EmitContainer.DynamicModule)) {\n                //    var modName = temp == EmitContainer.Module ? this.moduleName : "exports";\n                //    this.writeToOutput(" = " + modName + "." + className);\n                //}\n\n                var hasBaseClass = classDecl.extendsList && classDecl.extendsList.members.length;\n                var baseNameDecl: AST = null;\n                var baseName: AST = null;\n\n                if (hasBaseClass) {\n                    this.writeLineToOutput(" = (function (_super) {");\n                } else {\n                    this.writeLineToOutput(" = (function () {");\n                }\n\n                this.recordSourceMappingNameStart(className);\n                this.indenter.increaseIndent();\n\n                if (hasBaseClass) {\n                    baseNameDecl = classDecl.extendsList.members[0];\n                    baseName = baseNameDecl.nodeType == NodeType.Call ? (<CallExpression>baseNameDecl).target : baseNameDecl;\n                    this.emitIndent();\n                    this.writeLineToOutput("__extends(" + className + ", _super);");\n                }\n\n                this.emitIndent();\n\n                var constrDecl = classDecl.constructorDecl;\n\n                // output constructor\n                if (constrDecl) {\n                    // declared constructor\n                    this.emitJavascript(classDecl.constructorDecl, TokenID.OpenParen, false);\n\n                }\n                else {\n                    var wroteProps = 0;\n\n                    this.recordSourceMappingStart(classDecl);\n                    // default constructor\n                    this.indenter.increaseIndent();\n                    this.writeToOutput("function " + classDecl.name.actualText + "() {");\n                    this.recordSourceMappingNameStart("constructor");\n                    if (hasBaseClass) {\n                        this.writeLineToOutput("");\n                        this.emitIndent();\n                        this.writeLineToOutput("_super.apply(this, arguments);");\n                        wroteProps++;\n                    }\n\n                    if (classDecl.varFlags & VarFlags.MustCaptureThis) {\n                        this.writeCaptureThisStatement(classDecl);\n                    }\n\n                    var members = (<ASTList>this.thisClassNode.members).members\n\n                    // output initialized properties\n                    for (var i = 0; i < members.length; i++) {\n                        if (members[i].nodeType == NodeType.VarDecl) {\n                            var varDecl = <VarDecl>members[i];\n                            if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                                this.writeLineToOutput("");\n                                this.emitIndent();\n                                this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                wroteProps++;\n                            }\n                        }\n                    }\n                    if (wroteProps) {\n                        this.writeLineToOutput("");\n                        this.indenter.decreaseIndent();\n                        this.emitIndent();\n                        this.writeLineToOutput("}");\n                    }\n                    else {\n                        this.writeLineToOutput(" }");\n                        this.indenter.decreaseIndent();\n                    }\n                    this.recordSourceMappingNameEnd();\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                var membersLen = classDecl.members.members.length;\n                for (var j = 0; j < membersLen; j++) {\n\n                    var memberDecl: AST = classDecl.members.members[j];\n\n                    if (memberDecl.nodeType == NodeType.FuncDecl) {\n                        var fn = <FuncDecl>memberDecl;\n\n                        if (hasFlag(fn.fncFlags, FncFlags.Method) && !fn.isSignature()) {\n                            if (!hasFlag(fn.fncFlags, FncFlags.Static)) {\n                                this.emitPrototypeMember(fn, className);\n                            }\n                            else { // static functions\n                                if (fn.isAccessor()) {\n                                    this.emitPropertyAccessor(fn, this.thisClassNode.name.actualText, false);\n                                }\n                                else {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(fn)\n                                    this.writeToOutput(classDecl.name.actualText + "." + fn.name.actualText + " = ");\n                                    this.emitInnerFunction(fn, (fn.name && !fn.name.isMissing()), true,\n                                            null, Emitter.shouldCaptureThis(fn), null);\n                                    this.writeLineToOutput(";");\n                                }\n                            }\n                        }\n                    }\n                    else if (memberDecl.nodeType == NodeType.VarDecl) {\n                        var varDecl = <VarDecl>memberDecl;\n                        if (hasFlag(varDecl.varFlags, VarFlags.Static)) {\n\n                            if (varDecl.init) {\n                                // EMITREVIEW\n                                this.emitIndent();\n                                this.recordSourceMappingStart(varDecl);\n                                this.writeToOutput(classDecl.name.actualText + "." + varDecl.id.actualText + " = ");\n                                this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                                // EMITREVIEW\n\n                                this.writeLineToOutput(";");\n                                this.recordSourceMappingEnd(varDecl);\n                            }\n                        }\n                    }\n                    else {\n                        throw Error("We want to catch this");\n                    }\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeLineToOutput("return " + className + ";");\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeToOutput("}");\n                this.recordSourceMappingNameEnd();\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.recordSourceMappingStart(classDecl);\n                this.writeToOutput(")(");\n                if (hasBaseClass)\n                    this.emitJavascript(baseName, TokenID.Tilde, false);\n                this.writeToOutput(");");\n                this.recordSourceMappingEnd(classDecl);\n\n                if ((temp == EmitContainer.Module || temp == EmitContainer.DynamicModule) && hasFlag(classDecl.varFlags, VarFlags.Exported)) {\n                    this.writeLineToOutput("");\n                    this.emitIndent();\n                    var modName = temp == EmitContainer.Module ? this.moduleName : "exports";\n                    this.recordSourceMappingStart(classDecl);\n                    this.writeToOutput(modName + "." + className + " = " + className + ";");\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingEnd(classDecl);\n                this.emitParensAndCommentsInPlace(classDecl, false);\n                this.setContainer(temp);\n                this.thisClassNode = svClassNode;\n            }\n        }\n\n        public emitPrologue(reqInherits: bool) {\n            if (!this.prologueEmitted) {\n                if (reqInherits) {\n                    this.prologueEmitted = true;\n                    this.writeLineToOutput("var __extends = this.__extends || function (d, b) {");\n                    this.writeLineToOutput("    function __() { this.constructor = d; }");\n                    this.writeLineToOutput("    __.prototype = b.prototype;");\n                    this.writeLineToOutput("    d.prototype = new __();");\n                    this.writeLineToOutput("};");\n                }\n                if (this.checker.mustCaptureGlobalThis) {\n                    this.prologueEmitted = true;\n                    this.writeLineToOutput(this.captureThisStmtString);\n                }\n            }\n        }\n\n        public emitSuperReference() {\n            this.writeToOutput("_super.prototype");\n        }\n\n        public emitSuperCall(callEx: CallExpression): bool {\n            if (callEx.target.nodeType == NodeType.Dot) {\n                var dotNode = <BinaryExpression>callEx.target;\n                if (dotNode.operand1.nodeType == NodeType.Super) {\n                    this.emitJavascript(dotNode, TokenID.OpenParen, false);\n                    this.writeToOutput(".call(");\n                    this.emitThis();\n                    if (callEx.arguments && callEx.arguments.members.length > 0) {\n                        this.writeToOutput(", ");\n                        this.emitJavascriptList(callEx.arguments, ", ", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(")");\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitThis() {\n            if (this.thisFnc && !this.thisFnc.isMethod() && (!this.thisFnc.isConstructor)) {\n                this.writeToOutput("_this");\n            }\n            else {\n                this.writeToOutput("this");\n            }\n        }\n\n        private static shouldCaptureThis(func: FuncDecl): bool {\n            // Super calls use \'this\' reference. If super call is in a lambda, \'this\' value needs to be captured in the parent.\n            return func.hasSelfReference() || func.hasSuperReferenceInFatArrowFunction();\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface ILineCol {\n        line: number;\n        col: number;\n    }\n\n    export class ErrorReporter {\n        public parser: Parser = null;\n        public checker: TypeChecker = null;\n        public lineCol = { line: 0, col: 0 };\n        public emitAsComments = true;\n        public hasErrors = false;\n        public pushToErrorSink = false;\n        public errorSink: string[] = [];\n\n        constructor (public outfile: ITextWriter) { }\n\n        public getCapturedErrors() { return this.errorSink; }\n        public freeCapturedErrors() { this.errorSink = []; }\n        public captureError(emsg: string) { this.errorSink[this.errorSink.length] = emsg; }\n\n        public setErrOut(outerr) {\n            this.outfile = outerr;\n            this.emitAsComments = false;\n        }\n\n        public emitPrefix() {\n            if (this.emitAsComments) {\n                this.outfile.Write("// ");\n            }\n            this.outfile.Write(this.checker.locationInfo.filename + "(" + this.lineCol.line + "," + this.lineCol.col + "): ");\n        }\n\n        public writePrefix(ast: AST): void {\n            if (ast) {\n                this.setError(ast);\n            }\n            else {\n                this.lineCol.line = 0;\n                this.lineCol.col = 0;\n            }\n            this.emitPrefix();\n        }\n\n        public writePrefixFromSym(symbol: Symbol): void {\n            if (symbol && this.checker.locationInfo.lineMap) {\n                getSourceLineColFromMap(this.lineCol, symbol.location,\n                                        this.checker.locationInfo.lineMap);\n            }\n            else {\n                this.lineCol.line = -1;\n                this.lineCol.col = -1;\n            }\n            this.emitPrefix();\n        }\n\n        public setError(ast: AST) {\n            if (ast) {\n                ast.flags |= ASTFlags.Error;\n                if (this.checker.locationInfo.lineMap) {\n                    getSourceLineColFromMap(this.lineCol, ast.minChar, this.checker.locationInfo.lineMap);\n                }\n            }\n        }\n\n        public reportError(ast: AST, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (ast && this.parser.errorRecovery && this.parser.errorCallback) {\n                var len = (ast.limChar - ast.minChar);\n                this.parser.errorCallback(ast.minChar, len, message, this.checker.locationInfo.unitIndex);\n            }\n            else {\n                this.writePrefix(ast);\n                this.outfile.WriteLine(message); // Right after the semi-colon\n            }\n        }\n\n        public reportErrorFromSym(symbol: Symbol, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (this.parser.errorRecovery && this.parser.errorCallback) {\n                this.parser.errorCallback(symbol.location, symbol.length, message, this.checker.locationInfo.unitIndex);\n            }\n            else {\n                this.writePrefixFromSym(symbol);\n                this.outfile.WriteLine(message);\n            }\n        }\n\n        public emitterError(ast: AST, message: string) {\n            this.reportError(ast, message);\n            // Emitter errors are not recoverable, stop immediately\n            throw Error("EmitError");\n        }\n\n        public duplicateIdentifier(ast: AST, name: string) {\n            this.reportError(ast, "Duplicate identifier \'" + name + "\'");\n        }\n\n        public showRef(ast: AST, text: string, symbol: Symbol) {\n            var defLineCol = { line: -1, col: -1 };\n            // TODO: multiple def locations\n            this.parser.getSourceLineCol(defLineCol, symbol.location);\n            this.reportError(ast, "symbol " + text + " defined at (" + defLineCol.line + "," +\n                              defLineCol.col + ")");\n        }\n\n        public unresolvedSymbol(ast: AST, name: string) {\n            this.reportError(ast, "The name \'" + name + "\' does not exist in the current scope");\n        }\n\n        public symbolDoesNotReferToAValue(ast: AST, name: string): void {\n            this.reportError(ast, "The name \'" + name + "\' does not refer to a value");\n        }\n\n        public styleError(ast: AST, msg: string): void {\n            var bkThrow = this.pushToErrorSink;\n            this.pushToErrorSink = false;\n            this.reportError(ast, "STYLE: " + msg);\n            this.pushToErrorSink = bkThrow;\n        }\n\n        public simpleError(ast: AST, msg: string): void {\n            this.reportError(ast, msg);\n        }\n\n        public simpleErrorFromSym(sym: Symbol, msg: string): void {\n            this.reportErrorFromSym(sym, msg);\n        }\n\n        public invalidSuperReference(ast: AST) {\n            this.simpleError(ast, "Keyword \'super\' can only be used inside a class instance method");\n        }\n\n        public valueCannotBeModified(ast: AST) {\n            this.simpleError(ast, "The left-hand side of an assignment expression must be a variable, property or indexer");\n        }\n\n        public invalidCall(ast: CallExpression, nodeType: number, scope: SymbolScope): void {\n            var targetType = ast.target.type;\n            var typeName = targetType.getScopedTypeName(scope);\n            if (targetType.construct && (nodeType == NodeType.Call)) {\n                this.reportError(ast, "Value of type \'" + typeName + "\' is not callable.  Did you mean to include \'new\'?");\n            } else {\n                var catString = (nodeType == NodeType.Call) ? "callable" : "newable";\n\n                this.reportError(ast, "Value of type \'" + typeName + "\' is not " + catString);\n            }\n        }\n\n        public indexLHS(ast: BinaryExpression, scope: SymbolScope): void {\n            var targetType = ast.operand1.type.getScopedTypeName(scope);\n            var indexType = ast.operand2.type.getScopedTypeName(scope);\n            this.simpleError(ast, "Value of type \'" + targetType + "\' is not indexable by type \'" + indexType + "\'");\n        }\n\n        public incompatibleTypes(ast: AST, t1: Type, t2: Type, op: string, scope: SymbolScope, comparisonInfo?:TypeComparisonInfo) {\n            if (!t1) {\n                t1 = this.checker.anyType;\n            }\n            if (!t2) {\n                t2 = this.checker.anyType;\n            }\n\n            var reason = comparisonInfo ? comparisonInfo.message : "";\n            if (op) {\n                this.reportError(ast, "Operator \'" + op + "\' cannot be applied to types \'" + t1.getScopedTypeName(scope) +\n                                  "\' and \'" + t2.getScopedTypeName(scope) + "\'" + (reason ? ": " + reason : ""));\n            }\n            else {\n                this.reportError(ast, "Cannot convert \'" + t1.getScopedTypeName(scope) +\n                                  "\' to \'" + t2.getScopedTypeName(scope) + "\'" + (reason ? ": " + reason : ""));\n            }\n        }\n\n        public expectedClassOrInterface(ast: AST): void {\n            this.simpleError(ast, "Expected var, class, interface, or module");\n        }\n\n        public unaryOperatorTypeError(ast: AST, op: string, type: Type) {\n            this.reportError(ast, "Operator \'" + op + "\' cannot be applied to type \'" + type.getTypeName() + "\'");\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export function hasFlag(val: number, flag: number) {\n        return (val & flag) != 0;\n    }\n\n    export enum ErrorRecoverySet {\n        None = 0,\n        Comma = 1, // Comma\n        SColon = 1 << 1, // SColon\n        Asg = 1 << 2, // Asg\n        BinOp = 1 << 3, // Lsh, Rsh, Rs2, Le, Ge, INSTANCEOF, EQ, NE, Eqv, NEqv, LogAnd, LogOr, AsgMul, AsgDiv\n        // AsgMod, AsgAdd, AsgSub, AsgLsh, AsgRsh, AsgRs2, AsgAnd, AsgXor, AsgOr, QMark, Mult, Div, \n        // Pct, GT, LT, And, Xor, Or\n        RBrack = 1 << 4, // RBrack\n        RCurly = 1 << 5, // RCurly\n        RParen = 1 << 6, // RParen\n        Dot = 1 << 7, // Dot\n        Colon = 1 << 8, // Colon\n        PrimType = 1 << 9, // number, string, bool\n        AddOp = 1 << 10, // Add, Sub\n        LCurly = 1 << 11, // LCurly\n        PreOp = 1 << 12, // Tilde, Bang, Inc, Dec\n        RegExp = 1 << 13, // RegExp\n        LParen = 1 << 14, // LParen\n        LBrack = 1 << 15, // LBrack\n        Scope = 1 << 16, // Scope\n        In = 1 << 17, // IN\n        SCase = 1 << 18, // CASE, DEFAULT\n        Else = 1 << 19, // ELSE\n        Catch = 1 << 20, // CATCH, FINALLY\n        Var = 1 << 21, // \n        Stmt = 1 << 22, // BREAK, RETURN, THROW, DEBUGGER, FOR, SWITCH, DO, IF, TRY, WITH\n        While = 1 << 23, // WHILE\n        ID = 1 << 24, // ID\n        Prefix = 1 << 25, // VOID, DELETE, TYPEOF, AWAIT\n        Literal = 1 << 26, // IntCon, FltCon, StrCon\n        RLit = 1 << 27, // THIS, TRUE, FALSE, NULL\n        Func = 1 << 28, // FUNCTION\n        EOF = 1 << 29, // EOF\n\n        // REVIEW: Name this something clearer.\n        TypeScriptS = 1 << 30, // PROPERTY, PRIVATE, STATIC, INTERFACE, CLASS, MODULE, EXPORT, IMPORT\n        ExprStart = SColon | AddOp | LCurly | PreOp | RegExp | LParen | LBrack | ID | Prefix | RLit | Func | Literal,\n        StmtStart = ExprStart | SColon | Var | Stmt | While | TypeScriptS,\n        Postfix = Dot | LParen | LBrack,\n    }\n\n    export enum AllowedElements {\n        None = 0,\n        ModuleDeclarations = 1 << 2,\n        ClassDeclarations = 1 << 3,\n        InterfaceDeclarations = 1 << 4,\n        AmbientDeclarations = 1 << 10,\n        Properties = 1 << 11,\n\n        Global = ModuleDeclarations | ClassDeclarations | InterfaceDeclarations | AmbientDeclarations,\n        QuickParse = Global | Properties,\n    }\n\n    export enum Modifiers {\n        None = 0,\n        Private = 1,\n        Public = 1 << 1,\n        Readonly = 1 << 2,\n        Ambient = 1 << 3,\n        Exported = 1 << 4,\n        Getter = 1 << 5,\n        Setter = 1 << 6,\n        Static = 1 << 7,\n    }\n\n    export enum ASTFlags {\n        None = 0,\n        ExplicitSemicolon = 1, // statment terminated by an explicit semicolon\n        AutomaticSemicolon = 1 << 1, // statment terminated by an automatic semicolon\n        Writeable = 1 << 2,  // node is lhs that can be modified\n        Error = 1 << 3, // node has an error\n        DotLHSPartial = 1 << 4, // node is the lhs of an incomplete dot expr at cursor\n        DotLHS = 1 << 5, // node is the lhs of a dot expr\n        IsStatement = 1 << 6, // node is a statement\n        StrictMode = 1 << 7, // node is in the strict mode environment\n        PossibleOptionalParameter = 1 << 8,\n        ClassBaseConstructorCall = 1 << 9,\n        OptionalName = 1 << 10,\n        // REVIEW: This flag is to mark lambda nodes to note that the LParen of an expression has already been matched in the lambda header.\n        //         The flag is used to communicate this piece of information to the calling parseTerm, which intern will remove it.\n        //         Once we have a better way to associate information with nodes, this flag should not be used.\n        SkipNextRParen = 1 << 11, \n    }\n\n    export enum DeclFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n    }\n\n    export enum ModuleFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        IsEnum = 1 << 8,\n        ShouldEmitModuleDecl = 1 << 9,\n        IsWholeFile = 1 << 10,\n        IsDynamic = 1 << 11,\n        MustCaptureThis = 1 << 12,\n    }\n\n    export enum SymbolFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        Property = 1 << 8,\n        Readonly = 1 << 9,\n        ModuleMember = 1 << 10,\n        InterfaceMember = 1 << 11,\n        ClassMember = 1 << 12,\n        BuiltIn = 1 << 13,\n        TypeSetDuringScopeAssignment = 1 << 14,\n        Constant = 1 << 15,\n        Optional = 1 << 16,\n        RecursivelyReferenced = 1 << 17,\n        Bound = 1 << 18,\n        CompilerGenerated = 1 << 19,\n    }\n\n    export enum VarFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        AutoInit = 1 << 8,\n        Property = 1 << 9,\n        Readonly = 1 << 10,\n        Class = 1 << 11,\n        ClassProperty = 1 << 12,\n        ClassBodyProperty = 1 << 13,\n        ClassConstructorProperty = 1 << 14,\n        ClassSuperMustBeFirstCallInConstructor = 1 << 15,\n        Constant = 1 << 16,\n        MustCaptureThis = 1 << 17,\n    }\n\n    export enum FncFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        Definition = 1 << 8,\n        Signature = 1 << 9,\n        Method = 1 << 10,\n        HasReturnExpression = 1 << 11,\n        CallMember = 1 << 12,\n        ConstructMember = 1 << 13,\n        HasSelfReference = 1 << 14,\n        IsFatArrowFunction = 1 << 15,\n        IndexerMember = 1 << 16,\n        IsFunctionExpression = 1 << 17,\n        ClassMethod = 1 << 18,\n        ClassPropertyMethodExported = 1 << 19,\n        HasSuperReferenceInFatArrowFunction = 1 << 20,\n        IsPropertyBound = 1 << 21,\n    }\n\n    export enum SignatureFlags {\n        None = 0,\n        IsIndexer = 1,\n        IsStringIndexer = 1 << 1,\n        IsNumberIndexer = 1 << 2,\n    }\n\n    export function ToDeclFlags(fncFlags: FncFlags) : DeclFlags;\n    export function ToDeclFlags(varFlags: VarFlags) : DeclFlags;\n    export function ToDeclFlags(symFlags: SymbolFlags): DeclFlags;\n    export function ToDeclFlags(moduleFlags: ModuleFlags): DeclFlags;\n    export function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags: any) {\n        return <DeclFlags>fncOrVarOrSymbolOrModuleFlags;\n    }\n\n    export enum TypeFlags {\n        None = 0,\n        HasImplementation = 1,\n        HasSelfReference = 1 << 1,\n        MergeResult = 1 << 2,\n        IsEnum = 1 << 3,\n        BuildingName = 1 << 4,\n        HasBaseType = 1 << 5,\n        HasBaseTypeOfObject = 1 << 6,\n        IsClass = 1 << 7,\n    }\n\n    export enum TypeRelationshipFlags {\n        SuccessfulComparison = 0,\n        SourceIsNullTargetIsVoidOrUndefined = 1,\n        RequiredPropertyIsMissing = 1 << 1,\n        IncompatibleSignatures = 1 << 2,\n        SourceSignatureHasTooManyParameters = 3,\n        IncompatibleReturnTypes = 1 << 4,\n        IncompatiblePropertyTypes = 1 << 5,\n        IncompatibleParameterTypes = 1 << 6,\n    }\n\n    export enum CodeGenTarget {\n        ES3 = 0,\n        ES5 = 1,\n    }\n\n    export enum ModuleGenTarget {\n        Synchronous = 0,\n        Asynchronous = 1,\n        Local = 1 << 1,\n    }\n\n    // Compiler defaults to generating ES5-compliant code for\n    //  - getters and setters\n    export var codeGenTarget: CodeGenTarget = CodeGenTarget.ES3;\n\n    export var moduleGenTarget: ModuleGenTarget = ModuleGenTarget.Synchronous;\n\n    export var optimizeModuleCodeGen = true;\n\n    export function flagsToString(e, flags: number): string {\n        var builder = "";\n        for (var i = 1; i < (1 << 31) ; i = i << 1) {\n            if ((flags & i) != 0) {\n                for (var k in e) {\n                    if (e[k] == i) {\n                        if (builder.length > 0) {\n                            builder += "|";\n                        }\n                        builder += k;\n                        break;\n                    }\n                }\n            }\n        }\n        return builder;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class BlockIntrinsics {\n        public prototype = undefined;\n        public toString = undefined;\n        public toLocaleString = undefined;\n        public valueOf = undefined;\n        public hasOwnProperty = undefined;\n        public propertyIsEnumerable = undefined;\n        public isPrototypeOf = undefined;\n\n        constructor () {\n            // initialize the \'constructor\' field\n            this["constructor"] = undefined;\n        }\n    }\n\n    export interface IHashTable {\n        getAllKeys(): string[];\n        add(key: string, data): bool;\n        addOrUpdate(key: string, data): bool;\n        map(fn: (k: string, v, c) => void , context): void;\n        every(fn: (k: string, v, c) => bool, context): bool;\n        some(fn: (k: string, v, c) => bool, context): bool;\n        count(): number;\n        lookup(key: string): any;\n    }\n\n    export class StringHashTable implements IHashTable {\n        public itemCount = 0;\n        public table = <any>(<any> new BlockIntrinsics());\n\n        public getAllKeys(): string[]{\n            var result: string[] = [];\n            for (var k in this.table) {\n                if (this.table[k] != undefined) {\n                    result[result.length] = k;\n                }\n            }\n            return result;\n        }\n\n        public add(key: string, data): bool {\n            if (this.table[key] != undefined) {\n                return false;\n            }\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.table[key] != undefined) {\n                this.table[key] = data;\n                return false;\n            }\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    fn(k, this.table[k], context);\n                }\n            }\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    if (!fn(k, this.table[k], context)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    if (fn(k, this.table[k], context)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key: string) {\n            var data = this.table[key];\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return (null);\n            }\n        }\n    }\n\n    // The resident table is expected to reference the same table object, whereas the \n    // transientTable may reference different objects over time\n    // REVIEW:  WARNING:  For performance reasons, neither the primary nor secondary table may be null\n    export class DualStringHashTable implements IHashTable {\n\n        public insertPrimary = true;\n\n        constructor (public primaryTable: IHashTable,\n                                        public secondaryTable: IHashTable) { }\n\n        public getAllKeys(): string[]{\n            return this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());\n        }\n\n        public add(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.add(key, data);\n            }\n            else {\n                return this.secondaryTable.add(key, data);\n            }\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.addOrUpdate(key, data);\n            }\n            else {\n                return this.secondaryTable.addOrUpdate(key, data);\n            }\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            this.primaryTable.map(fn, context);\n            this.secondaryTable.map(fn, context);\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.every(fn, context) && this.secondaryTable.every(fn, context);\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.some(fn, context) || this.secondaryTable.some(fn, context);\n        }\n\n        public count() {\n            return this.primaryTable.count() + this.secondaryTable.count();\n        }\n\n        public lookup(key: string) {\n            var data = this.primaryTable.lookup(key);\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return this.secondaryTable.lookup(key);\n            }\n        }\n    }\n\n    export function numberHashFn(key: number): number {\n        var c2 = 0x27d4eb2d; // a prime or an odd constant\n        key = (key ^ 61) ^ (key >>> 16);\n        key = key + (key << 3);\n        key = key ^ (key >>> 4);\n        key = key * c2;\n        key = key ^ (key >>> 15);\n        return key;\n    }\n\n    export function combineHashes(key1: number, key2: number) {\n        return key2 ^ ((key1 >> 5) + key1);\n    }\n\n    export class HashEntry {\n        public next: HashEntry;\n\n        constructor (public key, public data) { }\n    }\n\n    export class HashTable {\n        public itemCount: number = 0;\n        public table = new HashEntry[];\n\n        constructor (public size: number, public hashFn: (key) =>number,\n                    public equalsFn: (key1, key2) =>bool) {\n            for (var i: number = 0; i < this.size; i++) {\n                this.table[i] = null;\n            }\n        }\n\n        public add(key, data): bool {\n            var current: HashEntry;\n            var entry: HashEntry = new HashEntry(key, data);\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return false;\n                }\n            }\n            entry.next = this.table[val];\n            this.table[val] = entry;\n            this.itemCount++;\n            return true;\n        }\n\n        public remove(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            var result = null;\n            var prevEntry: HashEntry = null;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    result = current.data;\n                    this.itemCount--;\n                    if (prevEntry) {\n                        prevEntry.next = current.next;\n                    }\n                    else {\n                        this.table[val] = current.next;\n                    }\n                    break;\n                }\n                prevEntry = current;\n            }\n            return result;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return (current.data);\n                }\n            }\n            return (null);\n        }\n    }\n\n    // Simple Hash table with list of keys and values matching each other at the given index\n    export class SimpleHashTable {\n        private keys = [];\n        private values = [];\n\n        public lookup(key, findValue?: bool) {\n            var searchArray = this.keys;\n            if (findValue) {\n                searchArray = this.values;\n            }\n\n            for (var i = 0; i < searchArray.length; i++) {\n                if (searchArray[i] == key) {\n                    return {\n                        key: this.keys[i],\n                        data: this.values[i],\n                    };\n                }\n            }\n            return null;\n        }\n\n        public add(key, data): bool {\n            var lookupData = this.lookup(key);\n            if (lookupData) {\n                return false;\n            }\n\n            this.keys[this.keys.length] = key;\n            this.values[this.values.length] = data;\n\n            return true;\n        }\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class IncrementalParser {\n        \n        private astLogger: AstLogger;\n\n        constructor (private logger: TypeScript.ILogger) {\n            this.astLogger = new AstLogger(this.logger);\n        }\n\n        //\n        // Return "null" if "editRange" cannot be safely determined to be inside a single scope.\n        //\n        public getEnclosingScopeContextIfSingleScopeEdit(previousScript: Script, scriptId: string, newSourceText: ISourceText, editRange: ScriptEditRange): EnclosingScopeContext {\n            this.logger.log("checkEditsInsideSingleScope(\\"" + scriptId + "\\")");\n\n            if (editRange === null) {\n                throw new Error("editRange should be valid");\n            }\n\n            if (editRange.isUnknown()) {\n                this.logger.log("  Bailing out because edit range is unknown");\n                return null;\n            }\n\n            var scope1 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.minChar, false/*isMemberCompletion*/);\n            var scope2 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.limChar, false/*isMemberCompletion*/);\n            if (scope1 == null || scope2 == null) {\n                this.logger.log("  Bailing out because containing scopes cannot be determined");\n                return null;\n            }\n\n            // We only support changes within a single containing scope\n            if (scope1.scopeStartAST !== scope2.scopeStartAST) {\n                this.logger.log("  Bailing out because edit overlaps 2 disctint scopes");\n                return null;\n            }\n\n            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;\n            if (newScopeLength <= 0) {\n                this.logger.log("  Bailing out because scope has been entirely removed from new source text");\n                return null;\n            }\n\n            return scope1;\n        }\n\n        public attemptIncrementalUpdateUnit(previousScript: Script, scriptId: string, newSourceText: ISourceText, editRange: ScriptEditRange): UpdateUnitResult {\n            this.logger.log("attemptIncrementalUpdateUnit(\\"" + scriptId + "\\")");\n\n            if (editRange === null) {\n                throw new Error("editRange should be valid");\n            }\n\n            var scope1 = this.getEnclosingScopeContextIfSingleScopeEdit(previousScript, scriptId, newSourceText, editRange);\n            if (scope1 === null) {\n                return null;\n            }\n\n            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;\n\n            // Heuristic: if the range to reparse is too big, bail out. \n            // This is because a full parse will be faster than an incremental parse followed by all the necessary fix-ups \n            if (newScopeLength >= newSourceText.getLength() / 2) {\n                this.logger.log("  Bailing out because range of scope to reparse (" + newScopeLength + " characters) is greater than half the size of the source text");\n                return null;\n            }\n\n            // Capture parsing errors so that they are part of "updateResult"\n            var parseErrors: TypeScript.ErrorEntry[] = [];\n            var errorCapture = function(minChar: number, charLen: number, message: string, unitIndex: number): void {\n                parseErrors.push(new TypeScript.ErrorEntry(unitIndex, minChar, minChar + charLen, message));\n            };\n\n            var quickParseResult = TypeScript.quickParse(this.logger, scope1.scopeStartAST, newSourceText, scope1.scopeStartAST.minChar, scope1.scopeStartAST.minChar + newScopeLength, errorCapture);\n            if (quickParseResult.endLexState != TypeScript.LexState.Start) {\n                this.logger.log("  Bailing out because scope contains unterminated comment");\n                return null;\n            }\n\n            var scriptFragment = quickParseResult.Script;\n            if (scriptFragment.vars.members.length !== 0) {\n                this.logger.log("  Bailing out because new source text defines variables");\n                return null;\n            }\n\n            //if (scriptFragment.scopes.members.length !== 1) {\n            //    logger.log("  Bailing out because new source text defines more than one scope (or none)");\n            //    return null;\n            //}\n\n            // This detects adding close curlies, since they have the side effect of having the parser \n            // parse more members in the scope range.\n            if (scriptFragment.bod.members.length !== 1) {\n                this.logger.log("  Bailing out because new source text defines more than one scope (or none)");\n                return null;\n            }\n\n            var oldScope = scope1.scopeStartAST;\n            var newScope = scriptFragment.bod.members[0];\n\n            if (oldScope.nodeType != newScope.nodeType) {\n                this.logger.log("  Bailing out because new source text does not define the same scope type as the existing scope");\n                return null;\n            }\n\n            if (!(<any>oldScope).leftCurlyCount || !(<any>oldScope).rightCurlyCount) {\n                this.logger.log("  Bailing out because sopce doesn\'t have left/right curly count");\n                return null;\n            }\n\n            if ((<any>oldScope).leftCurlyCount !== (<any>newScope).leftCurlyCount) {\n                this.logger.log("  Bailing out because new source text contains more (or fewer) left curly braces");\n                return null;\n            }\n\n            if ((<any>oldScope).rightCurlyCount !== (<any>newScope).rightCurlyCount) {\n                this.logger.log("  Bailing out because new source text contains more (or fewer) right curly braces");\n                return null;\n            }\n\n            if (newScope.minChar !== 0) {\n                this.logger.log("  Bailing out because new function declaration does not start at position 0");\n                return null;\n            }\n\n            if (newScope.limChar !== newScopeLength) {\n                this.logger.log("  Bailing out because new function declaration does not end at the new end position");\n                return null;\n            }\n\n            return TypeScript.UpdateUnitResult.singleScopeEdits(previousScript, scriptFragment, oldScope, newScope, editRange, parseErrors);\n        }\n\n        public mergeTrees(updateResult: UpdateUnitResult): void {\n            TypeScript.timeFunction(this.logger, "mergeTrees()", () => {\n                var editRange = new ScriptEditRange(updateResult.scope1.minChar, updateResult.scope1.limChar, updateResult.editRange.delta);\n                // Update positions in current ast\n                this.applyDeltaPosition(updateResult.script1, editRange.limChar, editRange.delta);\n                // Update positions in new (partial) ast\n                this.applyDeltaPosition(updateResult.script2, 0, editRange.minChar);\n                // Merge linemaps\n                this.mergeLocationInfo(updateResult.script1, updateResult.script2, editRange);\n                //  Replace old AST for scope with new one\n                this.replaceAST(updateResult.script1, updateResult.scope1, updateResult.scope2);\n            });\n        }\n\n        private replaceAST(script: TypeScript.AST, oldAst: TypeScript.AST, newAst: TypeScript.AST) {\n            var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => {\n                if (cur === oldAst) {\n                    // Transfer comments ownership to new AST. We need this because when "quick parsing" the\n                    // new AST, we don\'t take into account the text before and after the "minChar/limChar" pair\n                    // of the scope, which don\'t include pre/post-comments.\n                    newAst.preComments = cur.preComments;\n                    newAst.postComments = cur.postComments;\n\n                    this.logger.log("replaced old AST node with new one in script AST");\n                    walker.options.stopWalk();\n                    return newAst;\n                }\n\n                // Avoid visiting sub-trees outside of the edit range\n                if (TypeScript.isValidAstNode(cur)) {\n                    if (cur.limChar < oldAst.minChar || cur.minChar > oldAst.limChar) {\n                        walker.options.goChildren = false;\n                    }\n                }\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(script, pre);\n        }\n\n        private mergeLocationInfo(script: TypeScript.Script, partial: TypeScript.Script, editRange: ScriptEditRange) {\n            // Don\'t merger these fields, as the original script has the right values\n            //script.locationInfo.unitIndex = partial.locationInfo.unitIndex;\n            //script.locationInfo.filename = partial.locationInfo.filename;\n\n            var lineMap1 = script.locationInfo.lineMap;\n            var lineMap2 = partial.locationInfo.lineMap;\n\n            if (this.logger.information()) {\n                this.logger.log("lineMap1 (before):");\n                this.astLogger.logLinemap(lineMap1);\n                this.logger.log("lineMap2 (quick parse):");\n                this.astLogger.logLinemap(lineMap2);\n                this.logger.log("EditRange=" + editRange);\n            }\n\n            // Skip entries < minChar\n            var i1 = 2; // lineMap[0] is always undefined, lineMap[1] is always 0.\n            var i2 = 2; // lineMap[0] is always undefined, lineMap[1] is always 0.\n            var len1 = lineMap1.length;\n            var len2 = lineMap2.length;\n            while (i1 < len1) {\n                if (lineMap1[i1] <= editRange.minChar) {\n                    // Nothing to do for this entry, since it\'s before the range of the change\n                    i1++;\n                } else if (lineMap1[i1] >= editRange.limChar) {\n                    // Apply delta to this entry, since it\'s outside the range of the change\n                    lineMap1[i1] += editRange.delta;\n                    i1++;\n                }\n                else {\n                    if (i2 < len2) {\n                        // Add a new entry to lineMap1 corresponding to lineMap2 in new range\n                        lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);\n                        i1++;\n                        len1++;\n                        i2++;\n                    }\n                    else { /* i2 >= len 2 */\n                        // Remove this entry, since there is no corresponding entry in the new map\n                        lineMap1.splice(i1, 1);\n                        len1--;\n                    }\n                }\n            }\n            // Merge the remaining entries in lineMap2 while maintaing the constraint that a lineMap is sorted\n            if (i2 < len2) {\n                // i1 >= len1 && i2 < len2 \n                if (lineMap1[len1 - 1] >= (lineMap2[i2] + editRange.minChar)) {\n                    // lineMap2 needs to be merged within lineMap1\n                    i1 = 2;\n                    while (i1 < len1 && i2 < len2) {\n                        if (lineMap1[i1] < (lineMap2[i2] + editRange.minChar)) {\n                            i1++;\n                        }\n                        else {\n                            lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);\n                            i1++;\n                            len1++;\n                            i2++;\n                        }\n                    }\n                }\n\n                // Append all the remaining entries in lineMap2 to the end of lineMap1\n                for (; i2 < len2; i2++) {\n                    lineMap1.push(lineMap2[i2] + editRange.minChar);\n                }\n            }\n\n            if (this.logger.information()) {\n                this.logger.log("lineMap1 (after merge):");\n                this.astLogger.logLinemap(lineMap1);\n            }\n        }\n\n        private applyDeltaPosition(ast: TypeScript.AST, start: number, delta: number) {\n            var applyDelta = (ast: TypeScript.AST) => {\n                if (ast.minChar !== -1 && ast.minChar >= start) {\n                    ast.minChar += delta;\n                }\n                if (ast.limChar !== -1 && ast.limChar >= start) {\n                    ast.limChar += delta;\n                }\n            }\n\n            var applyDeltaToComments = (comments: TypeScript.Comment[]) => {\n                if (comments && comments.length > 0) {\n                    for (var i = 0; i < comments.length; i++) {\n                        applyDelta(comments[i]);\n                    }\n                }\n            }\n\n            var pre = function(cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n                // *Before* applying delta to this, check if we need to go to children\n                if (cur.limChar !== -1 && cur.limChar < start) {\n                    walker.options.goChildren = false; // Done with applying Delta for this sub-tree\n                }\n\n                // Apply delta to this node\n                applyDelta(cur);\n                applyDeltaToComments(cur.preComments);\n                applyDeltaToComments(cur.postComments);\n\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(ast, pre);\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\ninterface IResolvedFile {\n    content: string;\n    path: string;\n}\n\ninterface IFileWatcher {\n    close(): void;\n}\n\ninterface IIO {\n    readFile(path: string): string;\n    writeFile(path: string, contents: string): void;\n    createFile(path: string, useUTF8?: bool): ITextWriter;\n    deleteFile(path: string): void;\n    dir(path: string, re?: RegExp, options?: { recursive?: bool; }): string[];\n    fileExists(path: string): bool;\n    directoryExists(path: string): bool;\n    createDirectory(path: string): void;\n    resolvePath(path: string): string;\n    dirName(path: string): string;\n    findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n    print(str: string): void;\n    printLine(str: string): void;\n    arguments: string[];\n    stderr: ITextWriter;\n    stdout: ITextWriter;\n    watchFile(filename: string, callback: (string) => void ): IFileWatcher;\n    run(source: string, filename: string): void;\n    getExecutingFilePath(): string;\n    quit(exitCode?: number);\n}\n\nmodule IOUtils {\n    // Creates the directory including its parent if not already present\n    function createDirectoryStructure(ioHost: IIO, dirName: string) {\n        if (ioHost.directoryExists(dirName)) {\n            return;\n        }\n\n        var parentDirectory = ioHost.dirName(dirName);\n        if (parentDirectory != "") {\n            createDirectoryStructure(ioHost, parentDirectory);\n        }\n        ioHost.createDirectory(dirName);\n    }\n\n    // Creates a file including its directory structure if not already present\n    export function createFileAndFolderStructure(ioHost: IIO, fileName: string, useUTF8?: bool) {\n        var path = ioHost.resolvePath(fileName);\n        var dirName = ioHost.dirName(path);\n        createDirectoryStructure(ioHost, dirName);\n        return ioHost.createFile(path, useUTF8);\n    }\n\n    export function throwIOError(message: string, error: Error) {\n        var errorMessage = message;\n        if (error && error.message) {\n            errorMessage += (" " + error.message);\n        }\n        throw new Error(errorMessage);\n    }\n}\n\n// Declare dependencies needed for all supported hosts\ndeclare class Enumerator {\n    public atEnd(): bool;\n    public moveNext();\n    public item(): any;\n    constructor (o: any);\n}\ndeclare function setTimeout(callback: () =>void , ms?: number);\ndeclare var require: any;\ndeclare module process {\n    export var argv: string[];\n    export var platform: string;\n    export function on(event: string, handler: (any) => void ): void;\n    export module stdout {\n        export function write(str: string);\n    }\n    export module stderr {\n        export function write(str: string);\n    }\n    export module mainModule {\n        export var filename: string;\n    }\n    export function exit(exitCode?: number);\n}\n\nvar IO = (function() {\n\n    // Create an IO object for use inside WindowsScriptHost hosts\n    // Depends on WSCript and FileSystemObject\n    function getWindowsScriptHostIO(): IIO {\n        var fso = new ActiveXObject("Scripting.FileSystemObject");\n        var streamObjectPool = [];\n\n        function getStreamObject(): any { \n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            }  else {\n                return new ActiveXObject("ADODB.Stream");\n            }\n        }\n\n        function releaseStreamObject(obj: any) { \n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            readFile: function(path) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2; // Text data\n                    streamObj.Charset = \'x-ansi\'; // Assume we are reading ansi text\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2); // Read the BOM char\n                    streamObj.Position = 0; // Position has to be at 0 before changing the encoding\n                    if ((bomChar.charCodeAt(0) == 0xFE && bomChar.charCodeAt(1) == 0xFF)\n                        || (bomChar.charCodeAt(0) == 0xFF && bomChar.charCodeAt(1) == 0xFE)) {\n                        streamObj.Charset = \'unicode\';\n                    } else if (bomChar.charCodeAt(0) == 0xEF && bomChar.charCodeAt(1) == 0xBB) {\n                        streamObj.Charset = \'utf-8\'; \n                    }\n\n                    // Read the whole file\n                    var str = streamObj.ReadText(-1 /* read from the current position to EOS */);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return <string>str;\n                }\n                catch (err) {\n                    IOUtils.throwIOError("Error reading file \\"" + path + "\\".", err);\n                }\n            },\n\n            writeFile: function(path, contents) {\n                var file = this.createFile(path);\n                file.Write(contents);\n                file.Close();\n            },\n\n            fileExists: function(path: string): bool {\n                return fso.FileExists(path);\n            },\n\n            resolvePath: function(path: string): string {\n                return fso.GetAbsolutePathName(path);\n            },\n\n            dirName: function(path: string): string {\n                return fso.GetParentFolderName(path);\n            },\n\n            findFile: function(rootPath: string, partialFilePath: string): IResolvedFile {\n                var path = fso.GetAbsolutePathName(rootPath) + "/" + partialFilePath;\n\n                while (true) {\n                    if (fso.FileExists(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        }\n                        catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint("Could not find " + path + ", trying parent");\n                        }\n                    }\n                    else {\n                        rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\n\n                        if (rootPath == "") {\n                            return null;\n                        }\n                        else {\n                            path = fso.BuildPath(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n\n            deleteFile: function(path: string): void {\n                try {\n                    if (fso.FileExists(path)) {\n                        fso.DeleteFile(path, true); // true: delete read-only files\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t delete file \'" + path + "\'.", e);\n                }\n            },\n\n            createFile: function (path, useUTF8?) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Charset = useUTF8 ? \'utf-8\' : \'x-ansi\';\n                    streamObj.Open();\n                    return {\n                        Write: function (str) { streamObj.WriteText(str, 0); },\n                        WriteLine: function (str) { streamObj.WriteText(str, 1); },\n                        Close: function() {\n                            try {\n                                streamObj.SaveToFile(path, 2);\n                            } catch (saveError) {\n                                IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", saveError);\n                            }\n                            finally {\n                                if (streamObj.State != 0 /*adStateClosed*/) {\n                                    streamObj.Close();\n                                }\n                                releaseStreamObject(streamObj);\n                            }\n                        }\n                    };\n                } catch (creationError) {\n                    IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", creationError);\n                }\n            },\n\n            directoryExists: function(path) {\n                return <bool>fso.FolderExists(path);\n            },\n\n            createDirectory: function(path) {\n                try {\n                    if (!this.directoryExists(path)) {\n                        fso.CreateFolder(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t create directory \'" + path + "\'.", e);\n                }\n            },\n\n            dir: function(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n                function filesInFolder(folder, root): string[]{\n                    var paths = [];\n                    var fc: Enumerator;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd() ; fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + "/" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd() ; fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + "/" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n\n            print: function(str) {\n                WScript.StdOut.Write(str);\n            },\n\n            printLine: function(str) {\n                WScript.Echo(str);\n            },\n\n            arguments: <string[]>args,\n            stderr: WScript.StdErr,\n            stdout: WScript.StdOut,\n            watchFile: null,\n            run: function(source, filename) {\n                try {\n                    eval(source);\n                } catch (e) {\n                    IOUtils.throwIOError("Error while executing file \'" + filename + "\'.", e);\n                }\n            },\n            getExecutingFilePath: function () {\n                return WScript.ScriptFullName;\n            },\n            quit: function (exitCode? : number = 0) {\n                try {\n                    WScript.Quit(exitCode);\n                } catch (e) {\n                }\n            }\n        }\n\n    };\n\n    // Create an IO object for use inside Node.js hosts\n    // Depends on \'fs\' and \'path\' modules\n    function getNodeIO(): IIO {\n\n        var _fs = require(\'fs\');\n        var _path = require(\'path\');\n        var _module = require(\'module\');\n\n        return {\n            readFile: function(file) {\n                try {\n                    var buffer = _fs.readFileSync(file);\n                    switch (buffer[0]) {\n                        case 0xFE:\n                            if (buffer[1] == 0xFF) {\n                                // utf16-be. Reading the buffer as big endian is not supported, so convert it to \n                                // Little Endian first\n                                var i = 0;\n                                while ((i + 1) < buffer.length) {\n                                    var temp = buffer[i]\n                                    buffer[i] = buffer[i + 1];\n                                    buffer[i + 1] = temp;\n                                    i += 2;\n                                }\n                                return buffer.toString("ucs2", 2);\n                            }\n                            break;\n                        case 0xFF:\n                            if (buffer[1] == 0xFE) {\n                                // utf16-le \n                                return buffer.toString("ucs2", 2);\n                            }\n                            break;\n                        case 0xEF:\n                            if (buffer[1] == 0xBB) {\n                                // utf-8\n                                return buffer.toString("utf8", 3);\n                            }\n                    }\n                    // Default behaviour\n                    return buffer.toString();\n                } catch (e) {\n                    IOUtils.throwIOError("Error reading file \\"" + file + "\\".", e);\n                }\n            },\n            writeFile: <(path: string, contents: string) => void >_fs.writeFileSync,\n            deleteFile: function(path) {\n                try {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t delete file \'" + path + "\'.", e);\n                }\n            },\n            fileExists: function(path): bool {\n                return _fs.existsSync(path);\n            },\n            createFile: function(path, useUTF8?) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        IOUtils.throwIOError("\\"" + path + "\\" exists but isn\'t a directory.", null);\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n\n                mkdirRecursiveSync(_path.dirname(path));\n\n                try {\n                    var fd = _fs.openSync(path, \'w\');\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", e);\n                }\n                return {\n                    Write: function(str) { _fs.writeSync(fd, str); },\n                    WriteLine: function(str) { _fs.writeSync(fd, str + \'\\r\\n\'); },\n                    Close: function() { _fs.closeSync(fd); fd = null; }\n                };\n            },\n            dir: function dir(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n\n                function filesInFolder(folder: string): string[]{\n                    var paths = [];\n\n                    var files = _fs.readdirSync(folder);\n                    for (var i = 0; i < files.length; i++) {\n                        var stat = _fs.statSync(folder + "/" + files[i]);\n                        if (options.recursive && stat.isDirectory()) {\n                            paths = paths.concat(filesInFolder(folder + "/" + files[i]));\n                        } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                            paths.push(folder + "/" + files[i]);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            createDirectory: function(path: string): void {\n                try {\n                    if (!this.directoryExists(path)) {\n                        _fs.mkdirSync(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t create directory \'" + path + "\'.", e);\n                }\n            },\n\n            directoryExists: function(path: string): bool {\n                return _fs.existsSync(path) && _fs.lstatSync(path).isDirectory();\n            },\n            resolvePath: function(path: string): string {\n                return _path.resolve(path);\n            },\n            dirName: function(path: string): string {\n                return _path.dirname(path);\n            },\n            findFile: function(rootPath: string, partialFilePath): IResolvedFile {\n                var path = rootPath + "/" + partialFilePath;\n\n                while (true) {\n                    if (_fs.existsSync(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        } catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint(("Could not find " + path) + ", trying parent");\n                        }\n                    }\n                    else {\n                        var parentPath = _path.resolve(rootPath, "..");\n\n                        // Node will just continue to repeat the root path, rather than return null\n                        if (rootPath === parentPath) {\n                            return null;\n                        }\n                        else {\n                            rootPath = parentPath;\n                            path = _path.resolve(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            print: function(str) { process.stdout.write(str) },\n            printLine: function(str) { process.stdout.write(str + \'\\n\') },\n            arguments: process.argv.slice(2),\n            stderr: {\n                Write: function(str) { process.stderr.write(str); },\n                WriteLine: function(str) { process.stderr.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            stdout: {\n                Write: function(str) { process.stdout.write(str); },\n                WriteLine: function(str) { process.stdout.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            watchFile: function(filename: string, callback: (string) => void ): IFileWatcher {\n                var firstRun = true;\n                var processingChange = false;\n\n                var fileChanged: any = function(curr, prev) {\n                    if (!firstRun) {\n                        if (curr.mtime < prev.mtime) {\n                            return;\n                        }\n\n                        _fs.unwatchFile(filename, fileChanged);\n                        if (!processingChange) {\n                            processingChange = true;\n                            callback(filename);\n                            setTimeout(function() { processingChange = false; }, 100);\n                        }\n                    }\n                    firstRun = false;\n                    _fs.watchFile(filename, { persistent: true, interval: 500 }, fileChanged);\n                };\n\n                fileChanged();\n                return {\n                    filename: filename,\n                    close: function() {\n                        _fs.unwatchFile(filename, fileChanged);\n                    }\n                };\n            },\n            run: function(source, filename) {\n                require.main.filename = filename;\n                require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(filename)));\n                require.main._compile(source, filename);\n            }, \n            getExecutingFilePath: function () {\n                return process.mainModule.filename;\n            },\n            quit: process.exit\n        }\n    };\n\n    if (typeof ActiveXObject === "function")\n        return getWindowsScriptHostIO();\n    else if (typeof require === "function")\n        return getNodeIO();\n    else\n        return null; // Unsupported host\n})();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // Note: Any addition to the NodeType should also be supported with addition to AstWalkerDetailCallback\n    export enum NodeType {\n        None,\n        Empty,\n        EmptyExpr,\n        True,\n        False,\n        This,\n        Super,\n        QString,\n        Regex,\n        Null,\n        ArrayLit,\n        ObjectLit,\n        Void,\n        Comma,\n        Pos,\n        Neg,\n        Delete,\n        Await,\n        In,\n        Dot,\n        From,\n        Is,\n        InstOf,\n        Typeof,\n        NumberLit,\n        Name,\n        TypeRef,\n        Index,\n        Call,\n        New,\n        Asg,\n        AsgAdd,\n        AsgSub,\n        AsgDiv,\n        AsgMul,\n        AsgMod,\n        AsgAnd,\n        AsgXor,\n        AsgOr,\n        AsgLsh,\n        AsgRsh,\n        AsgRs2,\n        ConditionalExpression,\n        LogOr,\n        LogAnd,\n        Or,\n        Xor,\n        And,\n        Eq,\n        Ne,\n        Eqv,\n        NEqv,\n        Lt,\n        Le,\n        Gt,\n        Ge,\n        Add,\n        Sub,\n        Mul,\n        Div,\n        Mod,\n        Lsh,\n        Rsh,\n        Rs2,\n        Not,\n        LogNot,\n        IncPre,\n        DecPre,\n        IncPost,\n        DecPost,\n        TypeAssertion,\n        FuncDecl,\n        Member,\n        VarDecl,\n        ArgDecl,\n        Return,\n        Break,\n        Continue,\n        Throw,\n        For,\n        ForIn,\n        If,\n        While,\n        DoWhile,\n        Block,\n        Case,\n        Switch,\n        Try,\n        TryCatch,\n        TryFinally,\n        Finally,\n        Catch,\n        List,\n        Script,\n        ClassDeclaration,\n        InterfaceDeclaration,\n        ModuleDeclaration,\n        ImportDeclaration,\n        With,\n        Label,\n        LabeledStatement,\n        EBStart,\n        GotoEB,\n        EndCode,\n        Error,\n        Comment,\n        Debugger,\n        GeneralNode = FuncDecl,\n        LastAsg = AsgRs2,\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path="io.ts" />\n\ninterface IOptions {\n    name?: string;\n    flag?: bool;\n    short?: string;\n    usage?: string;\n    set?: (s: string) => void;\n    type?: string;\n    experimental?: bool;\n}\n\nclass OptionsParser {\n    private DEFAULT_SHORT_FLAG = "-";\n    private DEFAULT_LONG_FLAG = "--";\n\n    // Find the option record for the given string. Returns null if not found.\n    private findOption(arg: string) {\n\n        for (var i = 0; i < this.options.length; i++) {\n\n            if (arg === this.options[i].short || arg === this.options[i].name) {\n                return this.options[i];\n            }\n        }\n\n        return null;\n    }\n\n    public unnamed: string[] = [];\n\n    public options: IOptions[] = [];\n\n    constructor (public host: IIO) {\n    }\n\n    public printUsage() {\n        this.host.printLine("Syntax:   tsc [options] [file ..]");\n        this.host.printLine("");\n        this.host.printLine("Examples: tsc hello.ts");\n        this.host.printLine("          tsc --out foo.js foo.ts");\n        this.host.printLine("          tsc @args.txt");\n        this.host.printLine("");\n        this.host.printLine("Options:");\n\n        var output = [];\n        var maxLength = 0;\n\n        this.options = this.options.sort(function(a, b) {\n            var aName = a.name.toLowerCase();\n            var bName = b.name.toLowerCase();\n\n            if (aName > bName) {\n                return 1;\n            } else if (aName < bName) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Build up output array\n        for (var i = 0; i < this.options.length; i++) {\n            var option = this.options[i];\n\n            if (option.experimental) {\n                continue;\n            }\n\n            if (!option.usage) {\n                break;\n            }\n\n            var usageString = "  ";\n            var type = option.type ? " " + option.type.toUpperCase() : "";\n\n            if (option.short) {\n                usageString += this.DEFAULT_SHORT_FLAG + option.short + type + ", ";\n            }\n\n            usageString += this.DEFAULT_LONG_FLAG + option.name + type;\n\n            output.push([usageString, option.usage]);\n\n            if (usageString.length > maxLength) {\n                maxLength = usageString.length;\n            }\n        }\n\n        output.push(["  @<file>", "Insert command line options and files from a file."]);\n\n        // Print padded output\n        for (var i = 0; i < output.length; i++) {\n            this.host.printLine(output[i][0] + (new Array(maxLength - output[i][0].length + 3)).join(" ") + output[i][1]);\n        }\n    }\n\n    public option(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = false;\n\n        this.options.push(config);\n    }\n\n    public flag(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = true\n\n        this.options.push(config);\n    }\n\n    // Parse an arguments string\n    public parseString(argString: string) {\n        var position = 0;\n        var tokens = argString.match(/\\s+|"|[^\\s"]+/g);\n\n        function peek() {\n            return tokens[position];\n        }\n\n        function consume() {\n            return tokens[position++];\n        }\n\n        function consumeQuotedString() {\n            var value = \'\';\n            consume(); // skip opening quote.\n\n            var token = peek();\n\n            while (token && token !== \'"\') {\n                consume();\n\n                value += token;\n\n                token = peek();\n            }\n\n            consume(); // skip ending quote;\n\n            return value;\n        }\n\n        var args: string[] = [];\n        var currentArg = \'\';\n\n        while (position < tokens.length) {\n            var token = peek();\n\n            if (token === \'"\') {\n                currentArg += consumeQuotedString();\n            } else if (token.match(/\\s/)) {\n                if (currentArg.length > 0) {\n                    args.push(currentArg);\n                    currentArg = \'\';\n                }\n\n                consume();\n            } else {\n                consume();\n                currentArg += token;\n            }\n        }\n\n        if (currentArg.length > 0) {\n            args.push(currentArg);\n        }\n\n        this.parse(args);\n    }\n\n    // Parse arguments as they come from the platform: split into arguments.\n    public parse(args: string[]) {\n        var position = 0;\n\n        function consume() {\n            return args[position++];\n        }\n\n        while (position < args.length) {\n            var current = consume();\n            var match = current.match(/^(--?|@)(.*)/);\n            var value = null;\n\n            if (match) {\n                if (match[1] === \'@\') {\n                    this.parseString(this.host.readFile(match[2]));\n                } else {\n                    var arg = match[2];\n                    var option = this.findOption(arg);\n\n                    if (option === null) {\n                        this.host.printLine("Unknown option \'" + arg +"\'");\n                        this.host.printLine("Use the \'--help\' flag to see options");\n                    } else {\n                        if (!option.flag)\n                            value = consume();\n\n                        option.set(value);\n                    }\n                }\n            } else {\n                this.unnamed.push(current);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeContext {\n        NoTypes = 0,\n        ArraySuffix = 1,\n        Primitive = 2,\n        Named = 4,\n        AllSimpleTypes = Primitive | Named,\n        AllTypes = Primitive | Named | ArraySuffix,\n    }\n\n    export enum ParseState {\n        None,\n        StartScript,\n        StartStatementList,\n        StartStatement,\n        StartFncDecl,\n        FncDeclName,\n        FncDeclArgs,\n        FncDeclReturnType,\n        ForInit,\n        ForInitAfterVar,\n        ForCondStart,\n        EndStmtList,\n        EndScript,\n    }\n\n    export interface IStatementInfo {\n        stmt: Statement;\n        labels: ASTList;\n    }\n\n    export interface ILambdaArgumentContext {\n        preProcessedLambdaArgs: AST;\n    }\n\n    export class QuickParseResult {\n        constructor (public Script: Script, public endLexState: LexState) { }\n    }\n\n    export class Parser {\n        private varLists: ASTList[] = [];\n        private scopeLists: ASTList[] = [];\n        private staticsLists: ASTList[] = [];\n\n        private scanner: IScanner = new Scanner();\n        private currentToken: Token = null;\n\n        private needTerminator = false;\n\n        // TODO: consolidate these\n        private inFunction = false;\n        private inInterfaceDecl = false;\n        public currentClassDecl: NamedDeclaration = null;\n\n        private inFncDecl = false;  // this is only for FuncDecls - not constructors, like inFnc\n        private anonId = new Identifier("_anonymous");\n        public style_requireSemi = false;\n        public style_funcInLoop = true;\n        private incremental = false;\n        public errorRecovery = false;\n        public outfile: ITextWriter = undefined;\n        public errorCallback: (minChar: number, charLen: number, message: string, unit: number) =>void = null;\n        private state: ParseState = ParseState.StartStatementList;\n        private ambientModule = false;\n        private ambientClass = false;\n        private topLevel = true;\n        private allowImportDeclaration = true;\n        private currentUnitIndex = (-1);\n        private prevIDTok: Token = null;\n        private statementInfoStack: IStatementInfo[] = new IStatementInfo[];\n        private hasTopLevelImportOrExport = false; // for imports, only true if it\'s a dynamic module\n        private strictMode = false;\n        private nestingLevel = 0;\n        private prevExpr: AST = null;\n        private currentClassDefinition: ClassDeclaration = null;\n        private parsingClassConstructorDefinition = false;\n        private parsingDeclareFile = false;\n        private amdDependencies: string[] = [];\n        public inferPropertiesFromThisAssignment = false;\n        public requiresExtendsBlock = false;\n\n        private resetStmtStack() {\n            this.statementInfoStack = new IStatementInfo[];\n        }\n\n        private inLoop() {\n            for (var j = this.statementInfoStack.length - 1; j >= 0; j--) {\n                if (this.statementInfoStack[j].stmt.isLoop()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private pushStmt(stmt: Statement, labels: ASTList) {\n            // allocate here to avoid always storing this information in statements\n            var info = { stmt: stmt, labels: labels };\n            this.statementInfoStack.push(info);\n        }\n\n        private popStmt(): IStatementInfo {\n            return this.statementInfoStack.pop();\n        }\n\n        private resolveJumpTarget(jump: Jump): void {\n            var resolvedTarget = AST.getResolvedIdentifierName(jump.target);\n            var len = this.statementInfoStack.length;\n            for (var i = len - 1; i >= 0; i--) {\n                var info = this.statementInfoStack[i];\n                if (jump.target) {\n                    if (info.labels && (info.labels.members.length > 0)) {\n                        for (var j = 0, labLen = info.labels.members.length; j < labLen; j++) {\n                            var label = <Label>info.labels.members[j];\n                            if (label.id.text == resolvedTarget) {\n                                jump.setResolvedTarget(this, info.stmt);\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (info.stmt.isLoop()) {\n                        jump.setResolvedTarget(this, info.stmt);\n                        return;\n                    }\n                    else if ((info.stmt.nodeType == NodeType.Switch) && (jump.nodeType == NodeType.Break)) {\n                        jump.setResolvedTarget(this, info.stmt);\n                        return;\n                    }\n                }\n            }\n            // no luck\n            if (jump.target) {\n                this.reportParseError("could not find enclosing statement with label " + jump.target);\n            }\n            else {\n                if (jump.nodeType == NodeType.Break) {\n                    this.reportParseError("break statement requires enclosing loop or switch");\n                }\n                else {\n                    this.reportParseError("continue statement requires enclosing loop");\n                }\n            }\n        }\n\n        public setErrorRecovery(outfile: ITextWriter) {\n            this.outfile = outfile;\n            this.errorRecovery = true;\n        }\n\n        public getSourceLineCol(lineCol: ILineCol, minChar: number): void {\n            getSourceLineColFromMap(lineCol, minChar, this.scanner.lineMap);\n        }\n\n        private createRef(text: string, hasEscapeSequence: bool, minChar: number): Identifier {\n            var id = new Identifier(text, hasEscapeSequence);\n            id.minChar = minChar;\n            return id;\n        }\n\n        private reportParseStyleError(message: string) {\n            this.reportParseError("STYLE: " + message);\n        }\n\n        public reportParseError(message: string, startPos = this.scanner.startPos, pos = this.scanner.pos) {\n            var len = Math.max(1, pos - startPos);\n            if (this.errorCallback) {\n                this.errorCallback(startPos, len, message, this.currentUnitIndex);\n            }\n            else if (this.errorRecovery) {\n                var lineCol = { line: -1, col: -1 };\n                this.getSourceLineCol(lineCol, startPos);\n                if (this.outfile) {\n                    this.outfile.WriteLine("// " + this.fname + " (" + lineCol.line + "," + lineCol.col + "): " + message);\n                }\n            }\n            else {\n                throw new SyntaxError(this.fname + " (" + this.scanner.line + "," + this.scanner.col + "): " + message);\n            }\n        }\n\n        private checkNextToken(tokenId: TokenID, errorRecoverySet: ErrorRecoverySet, errorText: string = null): void {\n            this.currentToken = this.scanner.scan();\n            this.checkCurrentToken(tokenId, errorRecoverySet, errorText);\n        }\n\n        private skip(errorRecoverySet: ErrorRecoverySet) {\n            errorRecoverySet |= ErrorRecoverySet.EOF;\n            var ersTok = ErrorRecoverySet.None;\n            var tokenInfo = lookupToken(this.currentToken.tokenId);\n            if (tokenInfo != undefined) {\n                ersTok = tokenInfo.ers;\n            }\n            var pendingRightCurlies = 0;\n            while (((ersTok & errorRecoverySet) == ErrorRecoverySet.None) ||\n                   (this.currentToken.tokenId == TokenID.CloseBrace) && (pendingRightCurlies > 0)) {\n                if (this.currentToken.tokenId == TokenID.OpenBrace) {\n                    pendingRightCurlies++;\n                }\n                else if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    pendingRightCurlies--;\n                }\n                this.currentToken = this.scanner.scan();\n                ersTok = ErrorRecoverySet.None;\n                tokenInfo = lookupToken(this.currentToken.tokenId);\n                if (tokenInfo != undefined) {\n                    ersTok = tokenInfo.ers;\n                }\n                // TODO: regex rescan \n            }\n        }\n\n        private checkCurrentToken(tokenId: TokenID, errorRecoverySet: ErrorRecoverySet, errorText: string = null): void {\n            if (this.currentToken.tokenId != tokenId) {\n                errorText = errorText == null ? ("Expected \'" + tokenTable[tokenId].text + "\'") : errorText;\n                this.reportParseError(errorText);\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n                }\n            }\n            else {\n                this.currentToken = this.scanner.scan();\n            }\n        }\n\n        private pushDeclLists() {\n            this.staticsLists.push(new ASTList());\n            this.varLists.push(new ASTList());\n            this.scopeLists.push(new ASTList());\n        }\n\n        private popDeclLists() {\n            this.staticsLists.pop();\n            this.varLists.pop();\n            this.scopeLists.pop();\n        }\n\n        private topVarList() {\n            return this.varLists[this.varLists.length - 1];\n        }\n\n        private topScopeList() {\n            return this.scopeLists[this.scopeLists.length - 1];\n        }\n\n        private topStaticsList() {\n            return this.staticsLists[this.staticsLists.length - 1];\n        }\n\n        private parseComment(comment: CommentToken) {\n            if (comment) {\n                var c: Comment = new Comment(comment.value, comment.isBlock, comment.endsLine);\n                c.minChar = comment.startPos;\n                c.limChar = comment.startPos + comment.value.length;\n                var lineCol = { line: -1, col: -1 };\n                this.getSourceLineCol(lineCol, c.minChar);\n                c.minLine = lineCol.line;\n                this.getSourceLineCol(lineCol, c.limChar);\n                c.limLine = lineCol.line;\n\n                if (!comment.isBlock && comment.value.length > 3 && comment.value.substring(0, 3) == "///") {\n                    var dependencyPath = getAdditionalDependencyPath(comment.value);\n\n                    if (dependencyPath) {\n                        this.amdDependencies.push(dependencyPath);\n                    }\n\n                    if (getImplicitImport(comment.value)) {\n                        this.hasTopLevelImportOrExport = true;\n                    }\n                }\n\n                return c;\n            }\n            else {\n                return null;\n            }\n        }\n\n        private parseCommentsInner(comments: CommentToken[]) {\n            if (comments) {\n                var commentASTs: Comment[] = new Comment[];\n                for (var i = 0; i < comments.length; i++) {\n                    commentASTs.push(this.parseComment(comments[i]));\n                }\n                return commentASTs;\n            } else {\n                return null;\n            }\n        }\n\n        private parseComments() {\n            var comments = this.scanner.getComments();\n            return this.parseCommentsInner(comments);\n        }\n\n        private parseCommentsForLine(line: number) {\n            var comments = this.scanner.getCommentsForLine(line);\n\n            return this.parseCommentsInner(comments);\n        }\n\n        private combineComments(comment1: Comment[], comment2: Comment[]) {\n            if (comment1 == null) {\n                return comment2;\n            }\n            else if (comment2 == null) {\n                return comment1;\n            }\n            else {\n                return comment1.concat(comment2);\n            }\n        }\n\n        private parseEnumDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): ModuleDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("Enum declaration requires identifier");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.startPos;\n                    name.limChar = this.scanner.startPos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.ID);\n            this.pushDeclLists();\n            var members = new ASTList();\n            members.minChar = membersMinChar;\n            var mapDecl = new VarDecl(new Identifier("_map"), 0);\n            mapDecl.varFlags |= VarFlags.Exported;\n            mapDecl.varFlags |= VarFlags.Private;\n\n            // REVIEW: Is this still necessary?\n            mapDecl.varFlags |= (VarFlags.Property | VarFlags.Public);\n            mapDecl.init = new UnaryExpression(NodeType.ArrayLit, null);\n            members.append(mapDecl);\n            var lastValue: NumberLiteral = null;\n            for (; ;) {\n                var minChar = this.scanner.startPos;\n                var limChar;\n                var memberName: Identifier = null;\n                var memberValue: AST = null;\n                var preComments = null;\n                var postComments = null;\n\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                    memberName = Identifier.fromToken(this.currentToken);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    break;\n                }\n                else {\n                    this.reportParseError("Expected identifer of enum member");\n                    if (this.errorRecovery) {\n                        memberName = new MissingIdentifier();\n                        memberName.minChar = this.scanner.startPos;\n                        memberName.limChar = this.scanner.startPos;\n                        memberName.flags |= ASTFlags.Error;\n                    }\n                }\n\n                limChar = this.scanner.pos;\n                preComments = this.parseComments();\n                this.currentToken = this.scanner.scan();\n                postComments = this.parseComments();\n\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    this.currentToken = this.scanner.scan();\n                    memberValue = this.parseExpr(errorRecoverySet, OperatorPrecedence.Comma, true,\n                                          TypeContext.NoTypes);\n                    lastValue = <NumberLiteral>memberValue;\n                    limChar = memberValue.limChar;\n                }\n                else {\n                    if (lastValue == null) {\n                        memberValue = new NumberLiteral(0);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n                    else {\n                        memberValue = new NumberLiteral(lastValue.value + 1);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n                    var map: BinaryExpression =\n                        new BinaryExpression(NodeType.Asg,\n                                             new BinaryExpression(NodeType.Index,\n                                                                  new Identifier("_map"),\n                                                                  memberValue),\n                                             new StringLiteral(\'"\' + memberName.actualText + \'"\'));\n                    members.append(map);\n                }\n                var member = new VarDecl(memberName, this.nestingLevel);\n                member.minChar = minChar;\n                member.limChar = limChar;\n                member.init = memberValue;\n                // Note: Leave minChar, limChar as "-1" on typeExpr as this is a parsing artifact.\n                member.typeExpr = new TypeReference(this.createRef(name.actualText, name.hasEscapeSequence, -1), 0);\n                member.varFlags |= (VarFlags.Readonly | VarFlags.Property);\n                if (memberValue.nodeType == NodeType.NumberLit) {\n                    member.varFlags |= VarFlags.Constant;\n                }\n                member.preComments = preComments;\n                members.append(member);\n                member.postComments = postComments;\n                // all enum members are exported\n                member.varFlags |= VarFlags.Exported;\n\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    this.currentToken = this.scanner.scan();\n                    member.postComments = this.combineComments(member.postComments, this.parseCommentsForLine(this.scanner.prevLine));\n                    if ((this.currentToken.tokenId == TokenID.Identifier) || (convertTokToIDName(this.currentToken))) {\n                        continue;\n                    }\n                }\n                break;\n            }\n            var endingToken = new ASTSpan();\n            endingToken.minChar = this.scanner.startPos;\n            endingToken.limChar = this.scanner.pos;\n\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n            members.limChar = this.scanner.lastTokenLimChar();\n            var modDecl = new ModuleDeclaration(name, members, this.topVarList(), this.topScopeList(), endingToken);\n            modDecl.modFlags |= ModuleFlags.IsEnum;\n            this.popDeclLists();\n\n            modDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            modDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return modDecl;\n        }\n\n        private parseDottedName(enclosedList: AST[]): void {\n            this.currentToken = this.scanner.scan();\n            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                var id = Identifier.fromToken(this.currentToken);\n                id.preComments = this.parseComments();\n                enclosedList[enclosedList.length] = id;\n                id.minChar = this.scanner.startPos;\n                id.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n                if (this.currentToken.tokenId == TokenID.Dot) {\n                    this.parseDottedName(enclosedList);\n                }\n            }\n            else {\n                this.reportParseError("need identifier after \'.\'");\n            }\n        }\n\n        // REVIEW: This is much more lenient than the spec - we\'re basically just checking to see if the\n        // path is rooted or contains an extension, not if it could potentially be a bogus file path\n        private isValidImportPath(importPath: string) {\n            importPath = stripQuotes(importPath);\n\n            if (!importPath ||\n                importPath.indexOf(\':\') != -1 || \n                importPath.indexOf(\'\\\\\') != -1 ||\n                //(importPath.indexOf(\'.\') != -1 && importPath.charAt(0) != \'.\') ||\n                importPath.charAt(0) == \'/\') {\n                return false;\n            }\n            return true;\n        }\n\n        private parseImportDeclaration(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): ImportDeclaration {\n\n            var name: Identifier = null;\n            var alias: AST = null;\n            var importDecl: ImportDeclaration = null;\n            var minChar = this.scanner.startPos;\n            var isDynamicImport = false;\n\n            this.currentToken = this.scanner.scan();\n\n            if (this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n                name = Identifier.fromToken(this.currentToken);\n            }\n            else {\n                this.reportParseError("Expected identifer after \'import\'");\n                name = new MissingIdentifier();\n            }\n\n            name.minChar = this.scanner.startPos;\n            name.limChar = this.scanner.pos;\n\n            this.currentToken = this.scanner.scan();\n\n            this.checkCurrentToken(TokenID.Equals, errorRecoverySet | ErrorRecoverySet.ID);\n\n            var aliasPreComments = this.parseComments();\n\n            var limChar;\n            if (this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n\n                if (this.currentToken.tokenId == TokenID.Module) {\n                    limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        this.currentToken = this.scanner.scan();\n\n                        if (this.currentToken.tokenId == TokenID.StringLiteral || this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n\n                            if (this.currentToken.tokenId == TokenID.StringLiteral) {\n\n                                if (this.topLevel) {\n                                    this.hasTopLevelImportOrExport = true;\n                                } else if (!this.allowImportDeclaration) {\n                                    this.reportParseError("Import declaration of external module is permitted only in global or top level dynamic modules");\n                                }\n\n                                var aliasText = this.currentToken.getText();\n                                alias = Identifier.fromToken(this.currentToken);\n                                alias.minChar = this.scanner.startPos;\n                                alias.limChar = this.scanner.pos;\n\n                                if (!this.isValidImportPath((<Identifier>alias).text)) {\n                                    this.reportParseError("Invalid import path");\n                                }\n\n                                isDynamicImport = true;\n                                this.currentToken = this.scanner.scan();\n                                    \n                                alias.preComments = aliasPreComments;\n                            }\n                            else {\n                                alias = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                                    \n                                alias.preComments = aliasPreComments;\n                            }\n                        }\n\n                        limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.ID);\n\n                        if (alias) {\n                            alias.postComments = this.parseComments();\n                        }\n                    }\n                }\n                else {\n                    alias = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                    limChar = this.scanner.pos; // Include semicolon if needed\n                }\n            }\n            else {\n                this.reportParseError("Expected module name");\n                alias = new MissingIdentifier();\n                alias.minChar = this.scanner.startPos;\n                if (this.currentToken.tokenId == TokenID.Semicolon) {\n                    alias.limChar = this.scanner.startPos;\n                } else {\n                    alias.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n                alias.flags |= ASTFlags.Error;\n                limChar = alias.limChar;\n            }\n\n            importDecl = new ImportDeclaration(name, alias);\n            importDecl.isDynamicImport = isDynamicImport;\n\n            importDecl.minChar = minChar;\n            importDecl.limChar = limChar;\n\n            return importDecl;\n        }\n\n        private parseModuleDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers, preComments: Comment[]): ModuleDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var svAmbient = this.ambientModule;\n            var svTopLevel = this.topLevel;\n            this.topLevel = false;\n            if (this.parsingDeclareFile || svAmbient || hasFlag(modifiers, Modifiers.Ambient)) {\n                this.ambientModule = true;\n            }\n\n            this.currentToken = this.scanner.scan();\n            var name: AST = null;\n            var enclosedList: AST[] = null;\n            this.pushDeclLists();\n            var minChar = this.scanner.startPos;\n            var isDynamicMod = false;\n\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (this.currentToken.tokenId == TokenID.StringLiteral) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode))) {\n                var nameText = this.currentToken.getText();\n\n                if (this.currentToken.tokenId == TokenID.StringLiteral) {\n                    isDynamicMod = true;\n                    if (!this.ambientModule) {\n                        this.reportParseError("Only ambient dynamic modules may have string literal names");\n                    }\n\n                    if (!svTopLevel) {\n                        this.reportParseError("Dynamic modules may not be nested within other modules");\n                    }\n                }\n\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n\n                this.currentToken = this.scanner.scan();\n            }\n            else if (this.currentToken.tokenId == TokenID.OpenBrace) {\n                this.reportParseError("Module name missing");\n                name = new Identifier("");\n                // "fake" position of where the ID would be\n                name.minChar = minChar;\n                name.limChar = minChar;\n            }\n\n            if (this.currentToken.tokenId == TokenID.Dot) {\n                enclosedList = new AST[];\n                this.parseDottedName(enclosedList);\n            }\n\n            if (name == null) {\n                name = new MissingIdentifier();\n            }\n\n            var moduleBody = new ASTList();\n            var bodyMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.ID);\n\n            if (svTopLevel && isDynamicMod) {\n                this.allowImportDeclaration = true;\n            } else {\n                this.allowImportDeclaration = false;\n            }\n            this.parseStatementList(\n                errorRecoverySet | ErrorRecoverySet.RCurly, moduleBody,\n                /*sourceElements:*/ true, /*noLeadingCase:*/ true, AllowedElements.Global, modifiers);\n            moduleBody.minChar = bodyMinChar;\n            moduleBody.limChar = this.scanner.pos;\n\n            var endingToken = new ASTSpan();\n            endingToken.minChar = this.scanner.startPos;\n            endingToken.limChar = this.scanner.pos;\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            var limChar = this.scanner.lastTokenLimChar();\n            var moduleDecl: ModuleDeclaration;\n\n            this.allowImportDeclaration = svTopLevel;\n\n            if (enclosedList && (enclosedList.length > 0)) {\n                var len = enclosedList.length;\n                var innerName = <Identifier>enclosedList[len - 1];\n                var innerDecl = new ModuleDeclaration(innerName, moduleBody, this.topVarList(),\n                                                this.topScopeList(), endingToken);\n                innerDecl.preComments = preComments;\n\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    innerDecl.modFlags |= ModuleFlags.Ambient;\n                }\n\n                innerDecl.modFlags |= ModuleFlags.Exported;\n\n                // REVIEW: will also possibly need to re-parent comments as well\n                innerDecl.minChar = minChar;\n                innerDecl.limChar = limChar;\n\n                this.popDeclLists();\n                var outerModBod: ASTList;\n                for (var i = len - 2; i >= 0; i--) {\n                    outerModBod = new ASTList();\n                    outerModBod.append(innerDecl);\n                    innerName = <Identifier>enclosedList[i];\n                    innerDecl = new ModuleDeclaration(innerName, outerModBod, new ASTList(),\n                                                new ASTList(), endingToken);\n                    outerModBod.minChar = innerDecl.minChar = minChar;\n                    outerModBod.limChar = innerDecl.limChar = limChar;\n\n                    if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                        innerDecl.modFlags |= ModuleFlags.Ambient;\n                    }\n\n                    innerDecl.modFlags |= ModuleFlags.Exported;\n                }\n                outerModBod = new ASTList();\n                outerModBod.append(innerDecl);\n                outerModBod.minChar = minChar;\n                outerModBod.limChar = limChar;\n                moduleDecl = new ModuleDeclaration(<Identifier>name, outerModBod, new ASTList(),\n                                            new ASTList(), endingToken);\n            }\n            else {\n                moduleDecl = new ModuleDeclaration(<Identifier>name, moduleBody, this.topVarList(), this.topScopeList(), endingToken);\n                moduleDecl.preComments = preComments;\n                this.popDeclLists();\n            }\n\n            if (this.parsingDeclareFile || svAmbient || hasFlag(modifiers, Modifiers.Ambient)) {\n                moduleDecl.modFlags |= ModuleFlags.Ambient;\n            }\n            if (svAmbient || hasFlag(modifiers, Modifiers.Exported)) {\n                moduleDecl.modFlags |= ModuleFlags.Exported;\n            }\n            if (isDynamicMod) {\n                moduleDecl.modFlags |= ModuleFlags.IsDynamic;\n            }\n\n            this.ambientModule = svAmbient;\n\n            this.topLevel = svTopLevel;\n            moduleDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            moduleDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            moduleDecl.limChar = moduleBody.limChar;\n            return moduleDecl;\n        }\n\n        private parseTypeReferenceTail(errorRecoverySet: ErrorRecoverySet, minChar: number, term: AST): TypeReference {\n            var result = new TypeReference(term, 0);\n            result.minChar = minChar;\n            while (this.currentToken.tokenId == TokenID.OpenBracket) {\n                this.currentToken = this.scanner.scan();\n                result.arrayCount++;\n                this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet | ErrorRecoverySet.LBrack);\n            }\n            result.limChar = this.scanner.lastTokenLimChar();\n            return result;\n        }\n\n        // REVIEW: Consider renaming to parseTypeName.\n        private parseNamedType(errorRecoverySet: ErrorRecoverySet, minChar: number, term: AST, tail: bool): AST {\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId == TokenID.Dot) {\n                var curpos = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n                // Don\'t allow reserved words if immediately after a new line and error recovery is enabled\n                if ((this.currentToken.tokenId == TokenID.Identifier) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && convertTokToID(this.currentToken, this.strictMode))) {\n                    var op2 = Identifier.fromToken(this.currentToken);\n                    op2.minChar = this.scanner.startPos;\n                    op2.limChar = this.scanner.pos;\n                    var dotNode = new BinaryExpression(NodeType.Dot, term, op2);\n                    dotNode.minChar = term.minChar;\n                    dotNode.limChar = op2.limChar;\n                    return this.parseNamedType(errorRecoverySet, minChar,\n                                            dotNode, tail);\n                }\n                else {\n                    this.reportParseError("need identifier after \'.\'");\n                    if (this.errorRecovery) {\n                        term.flags |= ASTFlags.DotLHS;\n                        // We set "limChar" to be slightly innacurate for completion list behavior\n                        // (last AST node from "quickParse" will match DotLHS and be at end of file position)\n                        // This is to match the behavior of TokenId.Dot processing in parsePostfixOperators.\n                        term.limChar = this.scanner.lastTokenLimChar();\n                        return term;\n                    }\n                    else {\n                        var eop2 = new MissingIdentifier();\n                        eop2.minChar = this.scanner.pos;\n                        eop2.limChar = this.scanner.pos;\n                        var edotNode = new BinaryExpression(NodeType.Dot, term, eop2);\n                        edotNode.flags |= ASTFlags.Error;\n                        edotNode.minChar = term.minChar;\n                        edotNode.limChar = eop2.limChar;\n                        return this.parseNamedType(errorRecoverySet, minChar,\n                                                edotNode, tail);\n                    }\n                }\n            }\n            else {\n                if (tail) {\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, term);\n                }\n                else {\n                    return term;\n                }\n            }\n        }\n\n        // REVIEW: Reconsider renaming this to parseType to match the grammar.\n        private parseTypeReference(errorRecoverySet: ErrorRecoverySet, allowVoid: bool): AST {\n            var minChar = this.scanner.startPos;\n            var isConstructorMember = false;\n\n            switch (this.currentToken.tokenId) {\n                case TokenID.Void:\n                    if (!allowVoid) {\n                        this.reportParseError("void not a valid type in this context");\n                    }\n                // Intentional fall-through\n                case TokenID.Any:\n                case TokenID.Number:\n                case TokenID.Bool:\n                case TokenID.String: {\n                    var text = tokenTable[this.currentToken.tokenId].text;\n                    var predefinedIdentifier = new Identifier(text);\n                    predefinedIdentifier.minChar = minChar;\n                    predefinedIdentifier.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, predefinedIdentifier);\n                }\n\n                case TokenID.Identifier:\n                    var ident = this.createRef(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence, minChar);\n                    ident.limChar = this.scanner.pos;\n                    return this.parseNamedType(errorRecoverySet, minChar, ident, true);\n\n                case TokenID.OpenBrace:\n                    return this.parseObjectType(minChar, errorRecoverySet);\n\n                case TokenID.New:\n                    this.currentToken = this.scanner.scan();\n                    // can\'t use chkCurrentTok, since we don\'t want to advance the token\n                    if (this.currentToken.tokenId != TokenID.OpenParen) {\n                        this.reportParseError("Expected \'(\'");\n                    }\n                    else {\n                        isConstructorMember = true;\n                        // fall through...\n                    }\n\n                case TokenID.OpenParen: {\n                    // ( formals ) => type\n                    var formals = new ASTList();\n                    var variableArgList =\n                        this.parseFormalParameterList(errorRecoverySet | ErrorRecoverySet.RParen,\n                                            formals, false, true, false, false, false, false, null, true);\n                    this.checkCurrentToken(TokenID.EqualsGreaterThan, errorRecoverySet);\n                    var returnType = this.parseTypeReference(errorRecoverySet, true);\n                    var funcDecl = new FuncDecl(null, null, false, formals, null, null, null,\n                                                NodeType.FuncDecl);\n                    funcDecl.returnTypeAnnotation = returnType;\n                    funcDecl.variableArgList = variableArgList;\n                    funcDecl.fncFlags |= FncFlags.Signature;\n\n                    if (isConstructorMember) {\n                        funcDecl.fncFlags |= FncFlags.ConstructMember;\n                        funcDecl.hint = "_construct";\n                        funcDecl.classDecl = null;\n                    }\n                    funcDecl.minChar = minChar;\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, funcDecl);\n                }\n\n                default:\n                    this.reportParseError("Expected type name");\n                    var etr = new TypeReference(null, 0);\n                    etr.flags |= ASTFlags.Error;\n                    etr.minChar = this.scanner.pos;\n                    etr.limChar = this.scanner.pos;\n                    return etr;\n            }\n        }\n\n        private parseObjectType(minChar: number, errorRecoverySet: ErrorRecoverySet): TypeReference {\n            this.currentToken = this.scanner.scan();\n\n            var members = new ASTList();\n            members.minChar = minChar;\n\n            var prevInInterfaceDecl = this.inInterfaceDecl;\n            this.inInterfaceDecl = true;\n            this.parseTypeMemberList(errorRecoverySet | ErrorRecoverySet.RCurly, members);\n            this.inInterfaceDecl = prevInInterfaceDecl;\n\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            // REVIEW: We\'re parsing an ObjectType, but we give a NodeType of Interface here.\n            var interfaceDecl = new InterfaceDeclaration(\n                this.anonId, members, /*extends:*/ null, /*implementsL*/ null);\n\n            interfaceDecl.minChar = minChar;\n            interfaceDecl.limChar = members.limChar;    // "}"\n\n            return this.parseTypeReferenceTail(errorRecoverySet, minChar, interfaceDecl);\n        }\n\n        private parseFunctionBlock(errorRecoverySet: ErrorRecoverySet,\n                                   allowedElements: AllowedElements,\n                                   parentModifiers: Modifiers,\n                                   bod: ASTList,\n                                   bodMinChar: number): void {\n            this.state = ParseState.StartStatementList;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.StmtStart);\n            var savedInFunction = this.inFunction;\n            this.inFunction = true;\n            this.parseStatementList(\n                errorRecoverySet | ErrorRecoverySet.RCurly | ErrorRecoverySet.StmtStart,\n                bod, /*sourceElements:*/ true, /*noLeadingCase:*/ false, allowedElements, parentModifiers);\n            bod.minChar = bodMinChar;\n            bod.limChar = this.scanner.pos;\n            this.inFunction = savedInFunction;\n            var ec = new EndCode();\n            ec.minChar = bod.limChar;\n            ec.limChar = ec.minChar;\n            bod.append(ec);\n        }\n\n        private parseFunctionStatements(errorRecoverySet: ErrorRecoverySet,\n                                        name: Identifier,\n                                        isConstructor: bool,\n                                        isMethod: bool,\n                                        args: ASTList,\n                                        allowedElements: AllowedElements,\n                                        minChar: number,\n                                        requiresSignature: bool,\n                                        parentModifiers: Modifiers) {\n\n            this.pushDeclLists();\n            // start new statement stack\n            var svStmtStack = this.statementInfoStack;\n            this.resetStmtStack();\n\n            var bod: ASTList = null;\n            var wasShorthand = false;\n            var isAnonLambda = false;\n            var limChar: number;\n\n            if (requiresSignature) {\n                // If we require a signature, but they provided a block, then give an error, but\n                // still consume the block.\n                limChar = this.scanner.pos;\n                if (this.currentToken.tokenId === TokenID.OpenBrace) {\n                    this.reportParseError("Function declarations are not permitted within interfaces, ambient modules or classes")\n                    bod = new ASTList();\n                    var bodMinChar = this.scanner.startPos;\n\n                    this.parseFunctionBlock(errorRecoverySet, allowedElements, parentModifiers, bod, bodMinChar);\n                    this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n                    // If there\'s also a semicolon, then just skip over it.  We don\'t want to report an \n                    // additional error here.\n                    if (this.currentToken.tokenId === TokenID.Semicolon) {\n                        this.currentToken = this.scanner.scan();\n                    }\n                }\n                else {\n                    this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet, "Expected \';\'");\n                }\n            }\n            else {\n                bod = new ASTList();\n                var bodMinChar = this.scanner.startPos;\n                if (this.currentToken.tokenId == TokenID.EqualsGreaterThan) {\n                    if (isMethod) {\n                        this.reportParseError("\'=>\' may not be used for class methods");\n                    }\n                    wasShorthand = true;\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (wasShorthand && this.currentToken.tokenId != TokenID.OpenBrace) {\n                    var retExpr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                    var retStmt = new ReturnStatement();\n                    retStmt.returnExpression = retExpr;\n                    retStmt.minChar = retExpr.minChar;\n                    retStmt.limChar = retExpr.limChar;\n                    bod.minChar = bodMinChar;\n                    bod.append(retStmt);\n                }\n                else {\n                    isAnonLambda = wasShorthand;\n                    this.parseFunctionBlock(errorRecoverySet, allowedElements, parentModifiers, bod, bodMinChar);\n                }\n\n                limChar = this.scanner.pos;\n            }\n\n            var funcDecl = new FuncDecl(name, bod, isConstructor, args, this.topVarList(),\n                                        this.topScopeList(), this.topStaticsList(), NodeType.FuncDecl);\n            this.popDeclLists();\n            var scopeList = this.topScopeList();\n            scopeList.append(funcDecl);\n            var staticFuncDecl = false;\n\n            if (!requiresSignature) {\n                if (!wasShorthand || isAnonLambda) {\n                    funcDecl.endingToken = new ASTSpan();\n                    funcDecl.endingToken.minChar = this.scanner.startPos;\n                    funcDecl.endingToken.limChar = this.scanner.pos;\n                    this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n                    if (isAnonLambda) {\n                        funcDecl.fncFlags |= FncFlags.IsFatArrowFunction;\n                    }\n                }\n                else {\n                    funcDecl.fncFlags |= FncFlags.IsFatArrowFunction;\n                    funcDecl.endingToken = new ASTSpan();\n\n                    funcDecl.endingToken.minChar = bod.members[0].minChar;\n                    funcDecl.endingToken.limChar = bod.members[0].limChar;\n                }\n            }\n            funcDecl.minChar = minChar;\n            funcDecl.limChar = limChar;\n\n            if (!requiresSignature) {\n                funcDecl.fncFlags |= FncFlags.Definition;\n            }\n\n            this.statementInfoStack = svStmtStack;\n            return funcDecl;\n        }\n\n        private transformAnonymousArgsIntoFormals(formals: ASTList, argList: AST) : bool {\n\n            var translateBinExOperand = (operand: AST) : bool => {\n                if (operand.nodeType == NodeType.Comma) {\n                    return this.transformAnonymousArgsIntoFormals(formals, operand);\n                }\n                else if (operand.nodeType == NodeType.Name || operand.nodeType == NodeType.Asg) {\n                    var opArg = operand.nodeType == NodeType.Asg ? (<BinaryExpression>operand).operand1 : operand;\n\n                    var arg = new ArgDecl(<Identifier>opArg);\n                    arg.preComments = opArg.preComments;\n                    arg.postComments = opArg.postComments;\n                    arg.minChar = operand.minChar;\n                    arg.limChar = operand.limChar;\n\n                    if (hasFlag(opArg.flags, ASTFlags.PossibleOptionalParameter)) {\n                        arg.isOptional = true;\n                    }\n\n                    if (operand.nodeType == NodeType.Asg) {\n                        arg.init = (<BinaryExpression>operand).operand2;\n                    }\n\n                    formals.append(arg);\n\n                    return arg.isOptional || arg.init;\n                }\n                else {\n                    this.reportParseError("Invalid lambda argument");\n                }\n                return false;\n            }\n\n            if (argList) {\n                if (argList.nodeType == NodeType.Comma) {\n                    var commaList = <BinaryExpression> argList;\n                    if (commaList.operand1.isParenthesized) { \n                        this.reportParseError("Invalid lambda argument", commaList.operand1.minChar, commaList.operand1.limChar);\n                    }\n                    if (commaList.operand2.isParenthesized) { \n                        this.reportParseError("Invalid lambda argument", commaList.operand2.minChar, commaList.operand2.limChar);\n                    }\n                    var isOptional = translateBinExOperand(commaList.operand1);\n                    isOptional = translateBinExOperand(commaList.operand2) || isOptional;\n                    return isOptional;\n                }\n                else {\n                    return translateBinExOperand(argList);\n                }\n            }\n        }\n\n        private parseFormalParameterList(errorRecoverySet: ErrorRecoverySet,\n                                            formals: ASTList,\n                                            isClassConstr: bool,\n                                            isSig: bool,\n                                            isIndexer: bool,\n                                            isGetter: bool,\n                                            isSetter: bool,\n                                            isLambda: bool,\n                                            preProcessedLambdaArgs: AST,\n                                            expectClosingRParen: bool): bool \n        {\n\n            formals.minChar = this.scanner.startPos; // \'(\' or \'[\'\n            if (isIndexer) {\n                this.currentToken = this.scanner.scan();\n            }\n            else if (!isLambda) {\n                this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.RParen);\n            }\n            var sawEllipsis = false;\n            var firstArg = true;\n            var hasOptional = false;\n            var haveFirstArgID = false;\n\n            // if preProcessedLambdaArgs is "true", we either have a typeless argument list, or we have\n            // a single identifier node and the current token is the \':\' before a typereference\n            if (isLambda && preProcessedLambdaArgs && preProcessedLambdaArgs.nodeType != NodeType.EmptyExpr) {\n                hasOptional = this.transformAnonymousArgsIntoFormals(formals, preProcessedLambdaArgs);\n                haveFirstArgID = true;\n            }\n\n            while (true) {\n                var munchedArg = false;\n                var argFlags = VarFlags.None;\n                var argMinChar = this.scanner.startPos;\n\n                if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TokenID.This) {\n                    if (!isClassConstr) {\n                        this.reportParseError("Instance property declarations using \'this\' may only be used in class constructors");\n                    }\n                    this.currentToken = this.scanner.scan(); // consume the \'.\'\n\n                    argFlags |= (VarFlags.Public | VarFlags.Property);\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.Public) {\n                    argFlags |= (VarFlags.Public | VarFlags.Property);\n\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Private) {\n                    argFlags |= (VarFlags.Private | VarFlags.Property);\n\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Static && isClassConstr) {\n                    this.reportParseError("Static properties can not be declared as parameter properties");\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (argFlags != VarFlags.None) {\n                    if (!isClassConstr) {\n                        this.reportParseError("only constructor parameters can be properties");\n                    }\n                    this.currentToken = this.scanner.scan();\n\n                    if (isModifier(this.currentToken)) { \n                        this.reportParseError("Multiple modifiers may not be applied to parameters");\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TokenID.This) {\n                        if (!isClassConstr) {\n                            this.reportParseError("Instance property declarations using \'this\' may only be used in class constructors");\n                        }\n                        this.currentToken = this.scanner.scan(); // consume the \'.\'\n                        this.currentToken = this.scanner.scan();\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.DotDotDot) {\n                    sawEllipsis = true;\n                    this.currentToken = this.scanner.scan();\n\n                    if (!(this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                        this.reportParseError("\'...\' parameters require both a parameter name and an array type annotation to be specified");\n                        sawEllipsis = false; // Do not treat this parameter as vararg\n                    }\n                }\n\n                var argId: Identifier = null;\n\n                if (!haveFirstArgID && (this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                    argId = Identifier.fromToken(this.currentToken);\n                    argId.minChar = this.scanner.startPos;\n                    argId.limChar = this.scanner.pos;\n                }\n\n                if (haveFirstArgID || argId) {\n                    munchedArg = true;\n                    var type: AST = null;\n                    var arg: ArgDecl = null;\n\n                    if (haveFirstArgID && formals.members.length) {\n                        arg = <ArgDecl>formals.members[formals.members.length - 1];\n\n                        if (arg.isOptional) {\n                            hasOptional = true;\n                        }\n                    }\n                    else {\n                        arg = new ArgDecl(argId);\n\n                        if (isGetter) {\n                            this.reportParseError("Property getters may not take any arguments");\n                        }\n\n                        if (isSetter && !firstArg) {\n                            this.reportParseError("Property setters may only take one argument");\n                        }\n\n                        arg.minChar = argMinChar;\n                        arg.preComments = this.parseComments();\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.Question) {\n                        arg.isOptional = true;\n                        hasOptional = true;\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.Colon) {\n                        this.currentToken = this.scanner.scan();\n                        type = this.parseTypeReference(errorRecoverySet, false);\n                    }\n\n                    // check for default parameter\n                    // REVIEW: In the case of a typed reference, assume that parseTypeReference or one\n                    // of its children in the call graph advanced tok\n                    if (this.currentToken.tokenId == TokenID.Equals) {\n                        if (isSig) {\n                            this.reportParseError("Arguments in signatures may not have default values");\n                        }\n\n                        hasOptional = true;\n                        this.currentToken = this.scanner.scan();\n                        arg.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                            OperatorPrecedence.Comma, false,\n                                            TypeContext.NoTypes);\n\n                    }\n\n                    if (hasOptional && !arg.isOptionalArg() && !sawEllipsis) {\n                        this.reportParseError("Optional parameters may only be followed by other optional parameters");\n                    }\n\n                    if (sawEllipsis && arg.isOptionalArg()) {\n                        this.reportParseError("Varargs may not be optional or have default parameters");\n                    }\n\n                    if (sawEllipsis && !type) {\n                        // Ellipsis is missing a type definition\n                        this.reportParseError("\'...\' parameters require both a parameter name and an array type annotation to be specified");\n                    }\n\n                    // REVIEW: Ok for lambdas?\n                    arg.postComments = this.parseComments();\n                    arg.typeExpr = type;\n                    arg.limChar = this.scanner.lastTokenLimChar();\n                    arg.varFlags |= argFlags;\n                    if (!haveFirstArgID) {\n                        formals.append(arg);\n                    }\n                    else {\n                        haveFirstArgID = false;\n                    }\n                }\n                firstArg = false;\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    if ((munchedArg) && (!sawEllipsis)) {\n                        this.currentToken = this.scanner.scan();\n                        continue;\n                    }\n                    else {\n                        this.reportParseError("Unexpected \',\' in argument list");\n                        if (this.errorRecovery) {\n                            this.currentToken = this.scanner.scan();\n                            continue;\n                        }\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n\n            if (isIndexer) {\n                this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet | ErrorRecoverySet.LCurly | ErrorRecoverySet.SColon);\n            }\n            else if (expectClosingRParen) {\n                this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly | ErrorRecoverySet.SColon);\n            }\n            formals.limChar = this.scanner.lastTokenLimChar(); // \')\' or \']\'\n            return sawEllipsis;\n        }\n\n        private parseFncDecl(errorRecoverySet: ErrorRecoverySet,\n                             isDecl: bool,\n                             requiresSignature: bool,\n                             isMethod: bool,\n                             methodName: Identifier,\n                             indexer: bool,\n                             isStatic: bool,\n                             markedAsAmbient: bool,\n                             modifiers: Modifiers,\n                             lambdaArgContext: ILambdaArgumentContext,\n                             expectClosingRParen: bool): AST {\n\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var prevInConstr = this.parsingClassConstructorDefinition;\n            this.parsingClassConstructorDefinition = false;\n\n            var name: Identifier = null;\n            var fnMin = this.scanner.startPos;\n            var minChar = this.scanner.pos;\n            var prevNestingLevel = this.nestingLevel;\n            var preComments = this.parseComments();\n            var isLambda = !!lambdaArgContext;\n            this.nestingLevel = 0;\n            if ((!this.style_funcInLoop) && this.inLoop()) {\n                this.reportParseStyleError("function declaration in loop");\n            }\n            if (!isMethod && !isStatic && !indexer && !lambdaArgContext) {\n                // past function keyword\n                this.currentToken = this.scanner.scan();\n                this.state = ParseState.StartFncDecl;\n                if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToID(this.currentToken, this.strictMode))) {\n                    if (isDecl) {\n                        this.reportParseError("Function declaration must include identifier");\n\n                        this.nestingLevel = prevNestingLevel;\n                        return new IncompleteAST(fnMin, this.scanner.pos);\n                    }\n                }\n                else {\n                    name = Identifier.fromToken(this.currentToken);\n                    name.minChar = this.scanner.startPos;\n                    name.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n            else {\n                if (methodName) {\n                    name = methodName;\n                }\n            }\n\n            this.state = ParseState.FncDeclName;\n            var args: ASTList = new ASTList();\n            var variableArgList = false;\n            var isOverload = false;\n            var isGetter = hasFlag(modifiers, Modifiers.Getter);\n            var isSetter = hasFlag(modifiers, Modifiers.Setter);\n            if ((this.currentToken.tokenId == TokenID.OpenParen) || (indexer && (this.currentToken.tokenId == TokenID.OpenBracket)) || (lambdaArgContext && (lambdaArgContext.preProcessedLambdaArgs || this.currentToken.tokenId == TokenID.DotDotDot))) {\n                // arg list\n                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, false, requiresSignature, indexer, isGetter, isSetter, isLambda, lambdaArgContext ? lambdaArgContext.preProcessedLambdaArgs : null, expectClosingRParen);\n            }\n            this.state = ParseState.FncDeclArgs;\n            var returnType: AST = null;\n            if (this.currentToken.tokenId == TokenID.Colon) {\n                this.currentToken = this.scanner.scan();\n                if (hasFlag(modifiers, Modifiers.Setter)) {\n                    this.reportParseError("Property setters may not declare a return type");\n                }\n                returnType = this.parseTypeReference(errorRecoverySet, true);\n            }\n\n            if (indexer && args.members.length == 0) {\n                this.reportParseError("Index signatures require a parameter type to be specified");\n            }\n            this.state = ParseState.FncDeclReturnType;\n\n            if (isLambda && this.currentToken.tokenId != TokenID.EqualsGreaterThan) {\n                this.reportParseError("Expected \'=>\'");\n            }\n\n            // REVIEW:\n            // Currently, it\'s imperative that ambient functions *not* be marked as overloads.  At some point, we may\n            // want to unify the two concepts internally\n            if (isDecl && !(this.parsingDeclareFile || markedAsAmbient) && (!isMethod || !(this.ambientModule || this.ambientClass || this.inInterfaceDecl)) && this.currentToken.tokenId == TokenID.Semicolon) {\n                isOverload = true;\n                isDecl = false;\n                requiresSignature = true;\n            }\n            var svInFncDecl = this.inFncDecl;\n            this.inFncDecl = true;\n            var funcDecl: FuncDecl =\n                this.parseFunctionStatements(\n                errorRecoverySet | ErrorRecoverySet.RCurly,\n                name, /*isConstructor:*/ false, isMethod, args, AllowedElements.None,\n                minChar, requiresSignature, Modifiers.None);\n\n            this.inFncDecl = svInFncDecl;\n            funcDecl.variableArgList = variableArgList;\n            funcDecl.isOverload = isOverload;\n\n            if (!requiresSignature) { // REVIEW: What\'s the point of this?  Why not just use \'Signature\' instead of \'Definition\'?\n                funcDecl.fncFlags |= FncFlags.Definition;\n            }\n\n            if (isStatic) {\n                funcDecl.fncFlags |= FncFlags.Static;\n            }\n\n            if (requiresSignature) {\n                funcDecl.fncFlags |= FncFlags.Signature;\n            }\n            if (indexer) {\n                funcDecl.fncFlags |= FncFlags.IndexerMember;\n            }\n            funcDecl.returnTypeAnnotation = returnType;\n            if (isMethod) {\n                funcDecl.fncFlags |= FncFlags.Method;\n                // all class property methods are currently exported\n                funcDecl.fncFlags |= FncFlags.ClassPropertyMethodExported;\n            }\n            funcDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            funcDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n\n            this.nestingLevel = prevNestingLevel;\n            this.parsingClassConstructorDefinition = prevInConstr;\n            funcDecl.preComments = preComments;\n            return funcDecl;\n        }\n\n        private convertToTypeReference(ast: AST): TypeReference {\n            var result: TypeReference;\n            switch (ast.nodeType) {\n                case NodeType.TypeRef:\n                    return <TypeReference>ast;\n                case NodeType.Name:\n                    result = new TypeReference(ast, 0);\n                    result.minChar = ast.minChar;\n                    result.limChar = ast.limChar;\n                    return result;\n                case NodeType.Index: {\n                    var expr = <BinaryExpression>ast;\n                    result = this.convertToTypeReference(expr.operand1);\n                    if (result) {\n                        result.arrayCount++;\n                        result.minChar = expr.minChar;\n                        result.limChar = expr.limChar;\n                        return result;\n                    }\n                    else {\n                        var etr = <TypeReference>new AST(NodeType.Error);\n                        return etr;\n                    }\n                }\n            }\n            return null;\n        }\n\n        private parseArgList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var args: ASTList = new ASTList();\n            args.minChar = this.scanner.startPos;\n\n            // skip left paren\n            this.currentToken = this.scanner.scan();\n\n            if (this.currentToken.tokenId !== TokenID.CloseParen) {\n                while (true) {\n                    if (args.members.length > 0xffff) {\n                        this.reportParseError("max number of args exceeded");\n                        break;\n                    }\n\n                    var arg = this.parseExpr(\n                        ErrorRecoverySet.Comma | errorRecoverySet,\n                        OperatorPrecedence.Comma, \n                        /*allowIn:*/ true,\n                        TypeContext.NoTypes);\n\n                    args.append(arg);\n                    if (this.currentToken.tokenId != TokenID.Comma) {\n                        break;\n                    }\n\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n\n            args.limChar = this.scanner.pos;\n            return args;\n        }\n\n        private parseBaseList(extendsList: ASTList,\n                              implementsList: ASTList,\n                              errorRecoverySet: ErrorRecoverySet,\n                              isClass: bool): void {\n            var keyword = true;\n            var currentList = extendsList;\n            for (; ;) {\n                if (keyword) {\n                    if (this.currentToken.tokenId === TokenID.Implements) {\n                        currentList = implementsList;\n                    }\n                    else if (this.currentToken.tokenId == TokenID.Extends && !this.requiresExtendsBlock) {\n                        this.requiresExtendsBlock = isClass;\n                    }\n                    this.currentToken = this.scanner.scan();\n                    keyword = false;\n                }\n                var baseName: Identifier = null;\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                    var minChar = this.scanner.startPos;\n                    baseName = Identifier.fromToken(this.currentToken);\n                    baseName.minChar = minChar;\n                    baseName.limChar = this.scanner.pos;\n                    baseName = <Identifier>this.parseNamedType(errorRecoverySet | ErrorRecoverySet.LCurly,\n                                            minChar, baseName, false);\n                }\n                else {\n                    this.reportParseError("Expected base name");\n                    if (this.errorRecovery) {\n                        baseName = new MissingIdentifier();\n                        baseName.minChar = this.scanner.pos;\n                        baseName.limChar = this.scanner.pos;\n                        baseName.flags |= ASTFlags.Error;\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.OpenParen) {\n                    if (isClass) {\n                        this.reportParseError("Base classes may only be initialized via a \'super\' call within the constructor body");\n                    }\n                    else {\n                        this.reportParseError("Interfaces may not be extended with a call expression");\n                    }\n                }\n                else {\n                    currentList.append(baseName);\n                }\n\n                if (isClass && currentList == extendsList && extendsList.members.length > 1) {\n                    this.reportParseError("A class may only extend one other class");\n                }\n\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    this.currentToken = this.scanner.scan();\n                    continue;\n                }\n\n                else if ((this.currentToken.tokenId == TokenID.Extends) ||\n                         (this.currentToken.tokenId == TokenID.Implements)) {\n\n                    if (this.currentToken.tokenId == TokenID.Extends && !this.requiresExtendsBlock) {\n                        this.requiresExtendsBlock = isClass;\n                    }\n\n                    currentList = extendsList;\n                    keyword = true;\n                    continue;\n                }\n\n                break;\n            }\n        }\n\n        private parseClassDecl(errorRecoverySet: ErrorRecoverySet, minChar: number, modifiers: Modifiers): ClassDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            if ((modifiers & Modifiers.Readonly) != Modifiers.None) {\n                this.reportParseError("const modifier is implicit for class");\n            }\n\n            // mark the class as ambient, as necessary\n            if (this.parsingDeclareFile || this.ambientModule) {\n                modifiers |= Modifiers.Ambient;\n                modifiers |= Modifiers.Exported;\n            }\n            var classIsMarkedAsAmbient = this.parsingDeclareFile || (modifiers & Modifiers.Ambient) != Modifiers.None;\n            var svAmbientClass = this.ambientClass;\n            this.ambientClass = classIsMarkedAsAmbient;\n\n            // grab the class\'s name\n            this.currentToken = this.scanner.scan();\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode)) ) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("class missing name");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.pos;\n                    name.limChar = this.scanner.pos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var extendsList: ASTList = null;\n            var implementsList: ASTList = null;\n            var requiresSignature = false;\n\n            if ((this.currentToken.tokenId == TokenID.Extends) ||\n                (this.currentToken.tokenId == TokenID.Implements)) {\n                extendsList = new ASTList();\n                implementsList = new ASTList();\n                this.parseBaseList(extendsList, implementsList, errorRecoverySet, /*isClass:*/ true);\n            }\n\n            // REVIEW: Note that we don\'t set this as the current class decl\n            var classDecl = new ClassDeclaration(name, new ASTList(), extendsList, implementsList);\n\n            this.currentClassDefinition = classDecl;\n\n            // parse the classes members\n            this.parseClassElements(classDecl, errorRecoverySet, modifiers);\n\n            if (this.ambientModule || this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Exported)) {\n                classDecl.varFlags |= VarFlags.Exported;\n            }\n\n            if (this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                classDecl.varFlags |= VarFlags.Ambient;\n            }\n\n            classDecl.varFlags |= VarFlags.Class;\n\n            this.ambientClass = svAmbientClass;\n            classDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            classDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return classDecl;\n        }\n\n        private parseClassElements(classDecl: ClassDeclaration, errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers) {\n            var modifiers = parentModifiers;\n            var resetModifiers = false;\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet);\n\n            this.nestingLevel++;\n\n            var currentMemberMinChar = this.scanner.startPos;\n            var wasGetOrSetId = false;\n\n            while (!(this.currentToken.tokenId == TokenID.CloseBrace || this.currentToken.tokenId == TokenID.EndOfFile)) {\n                var scanNext = true;\n                var publicOrPrivateFlags = Modifiers.Public | Modifiers.Private;\n\n                // modifiers\n                if (this.currentToken.tokenId == TokenID.Get) {\n                    if (modifiers & Modifiers.Getter) {\n                        this.reportParseError("Duplicate \'get\' declaration in class body");\n                    }\n                    if (modifiers & Modifiers.Setter) {\n                        this.reportParseError("Getter already marked as a setter");\n                    }\n                    modifiers |= Modifiers.Getter;\n                }\n                else if (this.currentToken.tokenId == TokenID.Set) {\n                    if (modifiers & Modifiers.Setter) {\n                        this.reportParseError("Duplicate \'set\' declaration in class body");\n                    }\n                    if (modifiers & Modifiers.Getter) {\n                        this.reportParseError("Setter already marked as a getter");\n                    }\n                    modifiers |= Modifiers.Setter;\n\n                }\n                else if (this.currentToken.tokenId == TokenID.Private) {\n                    if (modifiers & publicOrPrivateFlags) {\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Private;\n                }\n                else if (this.currentToken.tokenId == TokenID.Public) {\n                    if (modifiers & publicOrPrivateFlags) {\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Public;\n                }\n                else if (this.currentToken.tokenId == TokenID.Static) {\n                    if (modifiers & Modifiers.Static) { // only check for double instances of static\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Static;\n                }  // constructors\n                else if (this.currentToken.tokenId == TokenID.Constructor) {\n\n                    if (modifiers != parentModifiers) {\n                        this.reportParseError("Constructors may not have modifiers");\n                    }\n\n                    this.parseClassConstructorDeclaration(currentMemberMinChar, errorRecoverySet, modifiers);\n                    scanNext = false; // parsing functions advances the token for us\n                    resetModifiers = true;\n                }  // member declarations\n                else if (wasGetOrSetId || this.currentToken.tokenId == TokenID.Identifier || convertTokToIDName(this.currentToken)) {\n\n                    var idText = wasGetOrSetId ? ((modifiers & Modifiers.Getter) ? "get" : "set") : this.currentToken.getText();\n                    var id = wasGetOrSetId ? new Identifier(idText) : Identifier.fromToken(this.currentToken);\n                    id.minChar = this.scanner.startPos;\n                    id.limChar = this.scanner.pos;\n\n                    // unset the get/set bit, if we\'re using it for an id\n                    if (wasGetOrSetId) {\n                        modifiers = modifiers ^ ((modifiers & Modifiers.Getter) ? Modifiers.Getter : Modifiers.Setter);\n                        wasGetOrSetId = false;\n                    }\n                    else {\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        this.parseClassMemberFunctionDeclaration(id, currentMemberMinChar, errorRecoverySet, modifiers);\n                        scanNext = false; // parsing functions advances the token for us\n                    }\n                    else {\n                        if (modifiers & Modifiers.Getter || modifiers & Modifiers.Setter) {\n                            this.reportParseError("Property accessors must be functions");\n                        }\n\n                        var varDecl = this.parseClassMemberVariableDeclaration(id, currentMemberMinChar, false, errorRecoverySet, modifiers);\n\n                        if (varDecl.init && varDecl.init.nodeType == NodeType.FuncDecl) {\n                            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                                scanNext = false;\n                            }\n                        }\n                        else if (varDecl.init && varDecl.init.nodeType == NodeType.ObjectLit && this.currentToken.tokenId != TokenID.Semicolon) {\n                            scanNext = false;\n                            varDecl.init.flags |= ASTFlags.AutomaticSemicolon;\n                        }\n                        else if (this.currentToken.tokenId != TokenID.Semicolon) {\n                            this.reportParseError("Expected \';\'");\n                            scanNext = false;\n                        }\n                    }\n\n                    resetModifiers = true;\n                } // catch errant uses of \'super\'\n                else if (this.currentToken.tokenId == TokenID.Super) {\n                    this.reportParseError("Base class initializers must be the first statement in a class definition");\n                }\n                else if (!wasGetOrSetId && ((modifiers & Modifiers.Getter) || (modifiers & Modifiers.Setter)) &&\n                         ((this.currentToken.tokenId == TokenID.OpenParen) || (this.currentToken.tokenId == TokenID.Equals) ||\n                          (this.currentToken.tokenId == TokenID.Colon) || (this.currentToken.tokenId == TokenID.Semicolon))) {\n                             // catch a \'get\' or \'set\' used as an identifier\n                    wasGetOrSetId = true;\n                    scanNext = false;\n\n                }  // mark anything else as an error\n                else if (this.currentToken.tokenId != TokenID.Semicolon) { // jettison semicolons\n                    this.reportParseError("Unexpected \'" + this.currentToken.getText() + "\' in class definition");\n                    resetModifiers = true;\n                }\n\n                if (scanNext) {\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (resetModifiers) {\n                    modifiers = parentModifiers;\n                    currentMemberMinChar = this.scanner.startPos;\n                    resetModifiers = false;\n                }\n            }\n\n            var membersLimChar = this.scanner.pos;\n            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                classDecl.endingToken = new ASTSpan();\n                classDecl.endingToken.minChar = this.scanner.startPos;\n                classDecl.endingToken.limChar = this.scanner.pos;\n\n                // for a class with an empty body, consume any \'dangling\' inner comments\n                if (!this.currentClassDefinition.members.members.length) {\n                    this.currentClassDefinition.preComments = this.parseComments();\n                }\n\n                this.currentToken = this.scanner.scan();\n            }\n\n            this.nestingLevel--;\n\n            this.currentClassDefinition.members.minChar = membersMinChar;\n            this.currentClassDefinition.members.limChar = membersLimChar;\n            this.currentClassDefinition.limChar = membersLimChar;\n            this.currentClassDefinition = null;\n        }\n\n        private parseClassConstructorDeclaration(minChar: number, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n            this.parsingClassConstructorDefinition = true;\n\n            var isAmbient = this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient);\n\n            var args: ASTList = new ASTList();\n            var variableArgList = false;\n            var preComments = this.parseComments();\n\n            this.currentToken = this.scanner.scan(); // scan past the \'constructor\' token\n\n            if (this.currentToken.tokenId == TokenID.OpenParen) {\n                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, true, isAmbient, false, false, false, false, null, true);\n                if (args.members.length > 0) {\n                    var lastArg = args.members[args.members.length - 1];\n                }\n            }\n\n            var requiresSignature = isAmbient || this.currentToken.tokenId == TokenID.Semicolon;\n\n\n            if (requiresSignature) {\n                for (var i = 0; i < args.members.length; i++) {\n                    var arg = <ArgDecl> args.members[i];\n                    if (hasFlag(arg.varFlags, VarFlags.Property)) {\n                        this.reportParseError("Overload or ambient signatures may not specify parameter properties", arg.minChar, arg.limChar);\n                    }\n                }\n            }\n\n            if (!requiresSignature) {\n                this.currentClassDefinition.constructorNestingLevel = this.nestingLevel + 1;\n            }\n\n            var constructorFuncDecl = this.parseFunctionStatements(\n                errorRecoverySet | ErrorRecoverySet.RCurly, this.currentClassDefinition.name, \n                /*isConstructor:*/ true, /*isMethod:*/ false, args, AllowedElements.Properties, \n                minChar, requiresSignature, modifiers);\n\n            constructorFuncDecl.preComments = preComments;\n\n            if (requiresSignature && !isAmbient) {\n                constructorFuncDecl.isOverload = true;\n            }\n\n            constructorFuncDecl.variableArgList = variableArgList;\n            this.currentClassDecl = null;\n            constructorFuncDecl.returnTypeAnnotation = this.convertToTypeReference(this.currentClassDefinition.name);\n            constructorFuncDecl.classDecl = this.currentClassDefinition;\n\n            if (isAmbient) {\n                constructorFuncDecl.fncFlags |= FncFlags.Ambient;\n            }\n\n            if (requiresSignature) {\n                constructorFuncDecl.fncFlags |= FncFlags.Signature;\n            }\n\n            if (this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                constructorFuncDecl.fncFlags |= FncFlags.Exported;\n            }\n\n\n            if (this.currentClassDefinition.constructorDecl) {\n                if (!isAmbient && !this.currentClassDefinition.constructorDecl.isSignature() && !constructorFuncDecl.isSignature()) {\n                    this.reportParseError("Duplicate constructor definition");\n                }\n            }\n\n            if (isAmbient || !constructorFuncDecl.isSignature()) {\n                this.currentClassDefinition.constructorDecl = constructorFuncDecl;\n            }\n\n            // REVIEW: Should we have a separate flag for class constructors?  (Constructors are not methods)\n            constructorFuncDecl.fncFlags |= FncFlags.ClassMethod;\n\n            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = constructorFuncDecl;\n\n            this.parsingClassConstructorDefinition = false;\n\n            return constructorFuncDecl;\n        }\n\n        private parseClassMemberVariableDeclaration(text: Identifier, minChar: number, isDeclaredInConstructor: bool, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n\n            var varDecl = new VarDecl(text, this.nestingLevel);\n            varDecl.minChar = minChar;\n            var isStatic = false;\n            varDecl.preComments = this.parseComments();\n\n            if (this.currentToken.tokenId == TokenID.Colon) {\n                this.currentToken = this.scanner.scan();\n                varDecl.typeExpr =\n                    this.parseTypeReference(errorRecoverySet | ErrorRecoverySet.Asg | ErrorRecoverySet.Comma, false);\n                if (varDecl.typeExpr && varDecl.typeExpr.nodeType == NodeType.TypeRef) {\n                    var typeExpr = (<TypeReference>varDecl.typeExpr);\n                    if (typeExpr.term && typeExpr.term.nodeType == NodeType.FuncDecl) {\n                        typeExpr.term.preComments = varDecl.preComments;\n                    }\n                }\n            }\n\n            if (this.currentToken.tokenId == TokenID.Equals) {\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    this.reportParseError("context does not permit variable initializer");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        varDecl.flags |= ASTFlags.Error;\n                        varDecl.limChar = this.scanner.lastTokenLimChar();\n                        return varDecl;\n                    }\n                }\n\n                // TODO: note assignment for language service\n                this.currentToken = this.scanner.scan();\n\n                varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                        OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n\n                varDecl.limChar = varDecl.init.limChar;\n\n                // member initializers on instance properties require that super be invoked as the first call within the constructor\n                if (!(modifiers & Modifiers.Static)) {\n                    this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                }\n            }\n            else {\n                varDecl.limChar = this.scanner.pos;\n            }\n\n            if (modifiers & Modifiers.Static) {\n                varDecl.varFlags |= VarFlags.Static;\n                isStatic = true;\n            }\n\n            if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                varDecl.varFlags |= VarFlags.Private;\n            }\n            else {\n                varDecl.varFlags |= VarFlags.Public;\n            }\n\n            varDecl.varFlags |= VarFlags.Property;\n\n            if (isDeclaredInConstructor) {\n                varDecl.varFlags |= VarFlags.ClassConstructorProperty;\n            }\n\n            if (!isDeclaredInConstructor && !isStatic) {\n                varDecl.varFlags |= VarFlags.ClassBodyProperty;\n            }\n\n            this.currentClassDefinition.knownMemberNames[text.actualText] = true;\n\n            if (!isDeclaredInConstructor) {\n                this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = varDecl;\n            }\n\n            varDecl.postComments = this.parseComments();\n            return varDecl;\n        }\n\n        private parseClassMemberFunctionDeclaration(methodName: Identifier, minChar: number, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n            var wasAccessorID = this.prevIDTok != null;\n            var isAccessor = hasFlag(modifiers, Modifiers.Getter) || hasFlag(modifiers, Modifiers.Setter);\n            var isStatic = hasFlag(modifiers, Modifiers.Static);\n\n            var isAmbient = this.ambientModule || hasFlag(modifiers, Modifiers.Ambient);\n\n            errorRecoverySet |= ErrorRecoverySet.RParen;\n\n            if (isAccessor && (modifiers & Modifiers.Ambient)) {\n                this.reportParseError("Property accessors may not be declared in ambient classes");\n            }\n\n            // REVIEW: Why bother passing in isAmbient for both requiresSignature and isAmbient?  Shouldn\'t just saying its ambient suffice?\n            var ast: AST = this.parseFncDecl(errorRecoverySet, true, isAmbient, true, methodName, false, isStatic, isAmbient, modifiers, null, true);\n            if (ast.nodeType == NodeType.Error) {\n                return ast;\n            }\n\n            var funcDecl = <FuncDecl>ast;\n\n            funcDecl.minChar = minChar;\n            if (funcDecl.bod !== null)\n                funcDecl.limChar = funcDecl.bod.limChar;\n\n            if (modifiers & Modifiers.Private) {\n                funcDecl.fncFlags |= FncFlags.Private;\n            }\n            else {\n                funcDecl.fncFlags |= FncFlags.Public;\n            }\n\n            if (isStatic) {\n                funcDecl.fncFlags |= FncFlags.Static;\n            }\n\n            if (isAccessor) {\n                // REVIEW: verify return-type annotations and arguments\n                if (hasFlag(modifiers, Modifiers.Getter)) {\n                    funcDecl.fncFlags |= FncFlags.GetAccessor;\n                    funcDecl.hint = "get" + funcDecl.name.actualText;\n                }\n                else {\n                    funcDecl.fncFlags |= FncFlags.SetAccessor;\n                    funcDecl.hint = "set" + funcDecl.name.actualText;\n                }\n                funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n                if (codeGenTarget < CodeGenTarget.ES5) {\n                    this.reportParseError("Property accessors are only available when targeting ES5 or greater", funcDecl.minChar, funcDecl.limChar);\n                }\n            }\n\n            funcDecl.fncFlags |= FncFlags.ClassMethod;\n\n            this.currentClassDefinition.knownMemberNames[methodName.actualText] = true;\n\n            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = funcDecl;\n\n            return funcDecl;\n        }\n\n        private parseTypeMember(errorRecoverySet: ErrorRecoverySet): AST {\n            var minChar = this.scanner.startPos;\n\n            var propertyDecl = this.parsePropertyDeclaration(\n                errorRecoverySet, Modifiers.Public, /*requireSignature:*/ true, /*isStatic:*/ false);\n\n            if (propertyDecl) {\n                propertyDecl.minChar = minChar;\n\n                if (propertyDecl.nodeType == NodeType.VarDecl) {\n                     this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet);\n                }\n            }\n\n            return propertyDecl;\n        }\n\n        private parseTypeMemberList(errorRecoverySet: ErrorRecoverySet, members: ASTList) {\n            errorRecoverySet |= ErrorRecoverySet.TypeScriptS;\n            while (true) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.CloseBrace:\n                    case TokenID.EndOfFile:\n                        members.limChar = this.scanner.pos;\n                        return;\n                }\n\n                // REVIEW: This code looks suspect.  If parseTypeMember returns null, then \n                // won\'t we just infinite loop?\n                var element = this.parseTypeMember(errorRecoverySet);\n                if (element) {\n                    members.append(element);\n                }\n            }\n        }\n\n        private parseInterfaceDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): InterfaceDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            this.currentToken = this.scanner.scan();\n            var minChar = this.scanner.pos;\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode))) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("interface missing name");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.pos;\n                    name.limChar = this.scanner.pos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var extendsList: ASTList = null;\n            var implementsList: ASTList = null;\n            if (this.currentToken.tokenId === TokenID.Extends || this.currentToken.tokenId === TokenID.Implements) {\n                if (this.currentToken.tokenId === TokenID.Implements) {\n                    this.reportParseError("Expected \'extends\'");\n                }\n\n                extendsList = new ASTList();\n                implementsList = new ASTList();\n                extendsList.minChar = this.scanner.startPos;\n                this.parseBaseList(extendsList, implementsList, errorRecoverySet, /*isClass:*/ false);\n            }\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.TypeScriptS);\n            var members = new ASTList();\n            members.minChar = membersMinChar;\n            var prevInInterfaceDecl = this.inInterfaceDecl;\n            this.inInterfaceDecl = true;\n            this.parseTypeMemberList(errorRecoverySet | ErrorRecoverySet.RCurly, members);\n            this.inInterfaceDecl = prevInInterfaceDecl;\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            // REVIEW: According to the grammar, an interface declaration should actually just\n            // have an \'ObjectType\' and not a list of members.  We may want to consider making that\n            // change.  Note: it would mean breaking aparat TypeDecl into InterfaceDeclaration and \n            // ClassDeclaration.\n            var interfaceDecl = new InterfaceDeclaration(name, members, extendsList, null);\n            if (hasFlag(modifiers, Modifiers.Private)) {\n                interfaceDecl.varFlags |= VarFlags.Private;\n            }\n            if (hasFlag(modifiers, Modifiers.Public)) {\n                interfaceDecl.varFlags |= VarFlags.Public;\n            }\n            if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                interfaceDecl.varFlags |= VarFlags.Exported;\n            }\n\n            interfaceDecl.limChar = members.limChar;\n            interfaceDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            interfaceDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return interfaceDecl;\n        }\n\n        private makeVarDecl(id: Identifier, nest: number): VarDecl {\n            var varDecl = new VarDecl(id, nest);\n            var currentVarList = this.topVarList();\n            if (currentVarList) {\n                currentVarList.append(varDecl);\n            }\n            return varDecl;\n        }\n\n        private parsePropertyDeclaration(\n            errorRecoverySet: ErrorRecoverySet,\n            modifiers: Modifiers,\n            requireSignature: bool,\n            isStatic: bool): AST {\n\n            var text: Identifier = null;\n            var minChar = this.scanner.startPos;\n            var nameLimChar = minChar;\n            var isNew = false;\n            var isIndexer = false;\n            var wasAccessorID = this.prevIDTok != null;\n            var isAccessor = hasFlag(modifiers, Modifiers.Getter) || hasFlag(modifiers, Modifiers.Setter);\n\n            if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                requireSignature = true;\n            }\n\n            if (this.currentToken.tokenId == TokenID.OpenParen && !wasAccessorID) {\n                if (!requireSignature && !isStatic) {\n                    this.reportParseError("Expected identifier in property declaration");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        //REVIEW: Use something else than "Identifier"?\n                        text = new MissingIdentifier();\n                    }\n                }\n            }\n            else if (this.currentToken.tokenId == TokenID.New) {\n                if (requireSignature) {\n                    this.currentToken = this.scanner.scan();\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        isNew = true;\n                    }\n                }\n\n                if (!isNew) {\n                    // is identifier\n                    if (!requireSignature) {\n                        this.currentToken = this.scanner.scan();\n                    }\n                    text = new Identifier("new");\n                    text.minChar = this.scanner.pos - 3;\n                    text.limChar = this.scanner.pos;\n                    nameLimChar = this.scanner.pos;\n                }\n            }\n            else if ((this.currentToken.tokenId == TokenID.OpenBracket) && requireSignature) {\n                // indexer signature\n                isIndexer = true;\n                //REVIEW: Should we use a special "compiler reserved" identifier node?\n                text = new Identifier("__item");\n            }\n            else if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToIDName(this.currentToken)) && !wasAccessorID) {\n                this.reportParseError("Expected identifier in property declaration");\n                if (this.errorRecovery) {\n                    var eminChar = this.scanner.startPos;\n                    var curpos = this.scanner.pos;\n                    this.skip(errorRecoverySet & (~ErrorRecoverySet.Comma));\n                    if (this.scanner.pos == curpos) {\n                        // ensure progress\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    var epd = new VarDecl(new MissingIdentifier(), this.nestingLevel);\n                    epd.flags |= ASTFlags.Error;\n                    epd.minChar = eminChar;\n                    epd.limChar = this.scanner.lastTokenLimChar();\n                    return epd;\n                }\n            }\n            else {\n                if (wasAccessorID) {\n                    text = Identifier.fromToken(this.prevIDTok);\n                    text.minChar = this.scanner.lastTokenLimChar() - 3;\n                    text.limChar = this.scanner.lastTokenLimChar();\n                    nameLimChar = text.limChar;\n\n                    if (codeGenTarget < CodeGenTarget.ES5) {\n                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                    }\n\n                    // this block guards against \'get\' and \'set\' tokens that\n                    // were coerced into identifiers\n                    if (this.currentToken.getText() == text.actualText && this.currentToken != this.prevIDTok) {\n                        this.currentToken = this.scanner.scan();\n                    } // Otherwise, don\'t update the token - we\'re already at \'(\'\n\n                    // reset the previous ID Token\n                    this.prevIDTok = null;\n                }\n                else {\n                    text = Identifier.fromToken(this.currentToken);\n                    text.minChar = this.scanner.startPos;\n                    text.limChar = this.scanner.pos;\n                    nameLimChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n\n            if (this.currentToken.tokenId == TokenID.Question) {\n                if (this.inInterfaceDecl && text) {\n                    text.flags |= ASTFlags.OptionalName;\n                }\n                else {\n                    this.reportParseError("Optional properties may only be declared on interface or object types");\n                }\n                this.currentToken = this.scanner.scan();\n            }\n\n            if ((this.currentToken.tokenId == TokenID.OpenParen) ||\n                (isIndexer && (this.currentToken.tokenId == TokenID.OpenBracket))) {\n                var ers = errorRecoverySet | ErrorRecoverySet.RParen;\n                if (isIndexer) {\n                    ers = errorRecoverySet | ErrorRecoverySet.RBrack;\n                }\n                var ast = this.parseFncDecl(ers, true, requireSignature,\n                                       !this.inFncDecl, text, isIndexer, isStatic, (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)), modifiers, null, true);\n                var funcDecl: FuncDecl;\n                if (ast.nodeType == NodeType.Error) {\n                    return ast;\n                }\n                else {\n                    funcDecl = <FuncDecl>ast;\n                }\n                if (funcDecl.name) {\n                    funcDecl.name.minChar = minChar;\n                    funcDecl.name.limChar = nameLimChar;\n                }\n                if ((modifiers & Modifiers.Public) != Modifiers.None) {\n                    funcDecl.fncFlags |= FncFlags.Public;\n                }\n                if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                    funcDecl.fncFlags |= FncFlags.Private;\n                }\n                if (isStatic) {\n                    funcDecl.fncFlags |= FncFlags.Static;\n                }\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    funcDecl.fncFlags |= FncFlags.Ambient;\n                }\n                if (isAccessor) {\n                    // REVIEW: verify return-type annotations and arguments\n                    if (hasFlag(modifiers, Modifiers.Getter)) {\n                        funcDecl.fncFlags |= FncFlags.GetAccessor;\n                        funcDecl.hint = "get" + funcDecl.name.actualText;\n                    }\n                    else {\n                        funcDecl.fncFlags |= FncFlags.SetAccessor;\n                        funcDecl.hint = "set" + funcDecl.name.actualText;\n                    }\n                    funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n\n                    if (modifiers & Modifiers.Ambient) {\n                        this.reportParseError("Property accessors may not be declared in ambient types");\n                    }\n                }\n\n                if (text == null) {\n                    if (isNew) {\n                        funcDecl.fncFlags |= FncFlags.ConstructMember;\n                        funcDecl.hint = "_construct";\n                        funcDecl.classDecl = this.currentClassDecl;\n                    }\n                    else {\n                        funcDecl.hint = "_call";\n                        funcDecl.fncFlags |= FncFlags.CallMember;\n                    }\n                }\n                return funcDecl;\n            }\n            else {\n                var varDecl = new VarDecl(text, this.nestingLevel);\n                varDecl.preComments = this.parseComments();\n                varDecl.minChar = minChar;\n                if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    varDecl.typeExpr =\n                        this.parseTypeReference(errorRecoverySet | ErrorRecoverySet.Asg |\n                                           ErrorRecoverySet.Comma, false);\n                    if (varDecl.typeExpr && varDecl.typeExpr.nodeType == NodeType.TypeRef) {\n                        var typeExpr = (<TypeReference>varDecl.typeExpr);\n                        if (typeExpr.term && typeExpr.term.nodeType == NodeType.FuncDecl) {\n                            typeExpr.term.preComments = varDecl.preComments;\n                        }\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    if (requireSignature) {\n                        this.reportParseError("context does not permit variable initializer");\n                        if (this.errorRecovery) {\n                            this.skip(errorRecoverySet);\n                            varDecl.flags |= ASTFlags.Error;\n                            varDecl.limChar = this.scanner.lastTokenLimChar();\n                            return varDecl;\n                        }\n                    }\n                    // TODO: note assignment for language service\n                    this.currentToken = this.scanner.scan();\n                    varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                           OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                    varDecl.limChar = varDecl.init.limChar;\n                    if (varDecl.init.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>varDecl.init;\n                        funcDecl.hint = varDecl.id.text;\n                        funcDecl.boundToProperty = varDecl;\n                    }\n                    else if (isAccessor) {\n                        this.reportParseError("Accessors may only be functions");\n                    }\n                }\n                else {\n                    varDecl.limChar = this.scanner.pos;\n                }\n                if ((modifiers & Modifiers.Readonly) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Readonly;\n                }\n                if (isStatic) {\n                    varDecl.varFlags |= VarFlags.Static;\n                }\n                if ((modifiers & Modifiers.Public) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Public;\n                }\n                if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Private;\n                }\n                varDecl.varFlags |= VarFlags.Property;\n                return varDecl;\n            }\n        }\n\n        private parseVariableDeclaration(\n            errorRecoverySet: ErrorRecoverySet,\n            modifiers: Modifiers,\n            allowIn: bool,\n            isStatic: bool): AST {\n\n            var isConst = hasFlag(modifiers, Modifiers.Readonly);\n            var minChar = this.scanner.startPos;\n            var varDecl: VarDecl = null;\n            var declList: ASTList = null;\n            var multivar = false;\n\n            this.currentToken = this.scanner.scan();\n            var varDeclPreComments = this.parseComments();\n\n            while (true) {\n                if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToID(this.currentToken, this.strictMode))) {\n                    this.reportParseError("Expected identifier in variable declaration");\n\n                    if (this.errorRecovery) {\n                        varDecl = new VarDecl(new MissingIdentifier(), this.nestingLevel);\n                        varDecl.minChar = minChar;\n                        this.skip(errorRecoverySet);\n                        varDecl.flags |= ASTFlags.Error;\n                        varDecl.limChar = this.scanner.lastTokenLimChar();\n                        return varDecl;\n                    }\n                }\n\n                var varDeclName = Identifier.fromToken(this.currentToken)\n                if (this.strictMode && (varDeclName.text == "eval")) {\n                    this.reportParseError("\'eval\' may not name a variable in strict mode");\n                }\n\n                varDecl = this.makeVarDecl(varDeclName, this.nestingLevel);\n                varDecl.id.minChar = this.scanner.startPos;\n                varDecl.id.limChar = this.scanner.pos;\n                varDecl.preComments = varDeclPreComments;\n\n                if (isStatic) {\n                    varDecl.varFlags |= VarFlags.Static;\n                }\n                if (hasFlag(modifiers, Modifiers.Readonly)) {\n                    varDecl.varFlags |= VarFlags.Readonly;\n                }\n                if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                    varDecl.varFlags |= VarFlags.Ambient;\n                }\n                if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                    varDecl.varFlags |= VarFlags.Exported;\n                }\n                varDecl.minChar = minChar;\n                if (declList) {\n                    declList.append(varDecl);\n                }\n\n                // move past ID; with error recovery need a test \n                this.currentToken = this.scanner.scan();\n                if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    var prevInFncDecl = this.inFncDecl;\n                    this.inFncDecl = false;\n                    varDecl.typeExpr = this.parseTypeReference(\n                        errorRecoverySet | ErrorRecoverySet.Asg | ErrorRecoverySet.Comma, /*allowVoid:*/ false);\n                    this.inFncDecl = prevInFncDecl;\n                }\n\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    if (hasFlag(varDecl.varFlags, VarFlags.Ambient)) {\n                        this.reportParseError("Ambient variable can not have an initializer");\n                    }\n                    // TODO: note assignment for language service\n                    this.currentToken = this.scanner.scan();\n                    varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                           OperatorPrecedence.Comma, allowIn,\n                                           TypeContext.NoTypes);\n                    varDecl.limChar = varDecl.init.limChar;\n                    if (varDecl.init.nodeType == NodeType.FuncDecl) {\n                        // TODO: use \'as\' operator when can bootstrap\n                        var funcDecl = <FuncDecl>varDecl.init;\n                        funcDecl.hint = varDecl.id.actualText;\n                    }\n                }\n                else {\n                    if (isConst) {\n                        this.reportParseError("const declaration requires initializer");\n                    }\n                    varDecl.limChar = this.scanner.pos;\n                }\n                varDecl.postComments = this.parseCommentsForLine(this.scanner.line);\n\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    if (declList) {\n                        declList.limChar = varDecl.limChar;\n                        return declList;\n                    }\n                    else {\n                        return varDecl;\n                    }\n                }\n\n                if (!multivar) {\n                    declList = new ASTList();\n                    declList.minChar = varDecl.minChar;\n                    declList.append(varDecl);\n                    multivar = true;\n                }\n\n                this.currentToken = this.scanner.scan();\n                minChar = this.scanner.startPos;\n            }\n        }\n\n        private parseMemberList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var elements = new ASTList();\n            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                return elements;\n            }\n\n            var idHint: string = null;\n            var memberName: AST = null;\n            var memberExpr: AST = null;\n            var member: BinaryExpression = null;\n            var minChar = this.scanner.startPos;\n            var isSet = false;\n            var skippedTokenForGetSetId = false;\n            var getSetTok: Token = null;\n            var getSetStartPos = 0;\n            var getSetPos = 0;\n\n            for (; ;) {\n                var accessorPattern = false;\n                if (this.currentToken.tokenId == TokenID.Get || this.currentToken.tokenId == TokenID.Set) {\n                    isSet = this.currentToken.tokenId == TokenID.Set;\n                    getSetTok = this.currentToken;\n                    getSetStartPos = this.scanner.startPos;\n                    getSetPos = this.scanner.pos;\n\n                    this.currentToken = this.scanner.scan();\n\n                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                        idHint = isSet ? "set" : "get";\n                        idHint = idHint + this.currentToken.getText();\n                        memberName = Identifier.fromToken(this.currentToken);\n                        memberName.minChar = this.scanner.startPos;\n                        accessorPattern = true;\n                        if (codeGenTarget < CodeGenTarget.ES5) {\n                            this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                        }\n                    }\n                    else if (this.currentToken.tokenId != TokenID.Colon) {\n                        this.reportParseError("Expected identifier, string or number as accessor name");\n                    }\n                    else {\n                        skippedTokenForGetSetId = true;\n                        memberName = Identifier.fromToken(getSetTok);\n                        memberName.minChar = getSetStartPos;\n                        memberName.limChar = getSetPos;\n                    }\n                }\n                else if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                    idHint = this.currentToken.getText();\n                    memberName = Identifier.fromToken(this.currentToken);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else if (this.currentToken.tokenId == TokenID.StringLiteral) {\n                    idHint = this.currentToken.getText();\n                    memberName = new StringLiteral(idHint);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                    // TODO: allow reserved words\n                else if (this.currentToken.tokenId == TokenID.NumberLiteral) {\n                    var ntok = <NumberLiteralToken>this.currentToken;\n                    idHint = ntok.value.toString();\n                    memberName = new StringLiteral(idHint);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else {\n                    this.reportParseError("Expected identifier, string or number as member name");\n                    if (this.errorRecovery) {\n                        memberName = new MissingIdentifier();\n                        memberName.minChar = this.scanner.startPos;\n                        memberName.flags |= ASTFlags.Error;\n                        this.skip(errorRecoverySet | ErrorRecoverySet.Comma);\n                        memberName.limChar = this.scanner.lastTokenLimChar();\n                    }\n                }\n\n                if (!skippedTokenForGetSetId) {\n                    this.currentToken = this.scanner.scan();\n                }\n                else {\n                    skippedTokenForGetSetId = false;\n                }\n\n                if (this.currentToken.tokenId == TokenID.Question) {\n                    memberName.flags |= ASTFlags.OptionalName;\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (accessorPattern) {\n                    var args = new ASTList();\n                    this.parseFormalParameterList(errorRecoverySet | ErrorRecoverySet.RParen,\n                                      args, false, true, false, !isSet, isSet, false, null, true);\n\n                    var funcDecl: FuncDecl =\n                        this.parseFunctionStatements(errorRecoverySet | ErrorRecoverySet.RCurly,\n                                                <Identifier>memberName, false, true, args,\n                                                AllowedElements.None,\n                                                this.scanner.startPos, false, Modifiers.None);\n\n                    if (isSet && funcDecl.returnTypeAnnotation) {\n                        this.reportParseError("Property setters may not declare a return type");\n                    }\n\n                    funcDecl.fncFlags |= isSet ? FncFlags.SetAccessor : FncFlags.GetAccessor;\n                    funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n                    funcDecl.hint = idHint;\n                    memberExpr = funcDecl;\n                    member = new BinaryExpression(NodeType.Member, memberName, memberExpr);\n                    member.minChar = memberName.minChar;\n                    if (memberExpr.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>memberExpr;\n                        funcDecl.hint = idHint;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    memberExpr = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                         OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                    // If the memberExpr is a type reference, we can be certain that it was an\n                    // array type declaraion that lacked a "new".  We can realistically only\n                    // expect call and name ASTs to be the result of this call to parseExpr.\n                    // If it\'s a constructor without a "new", we\'ll flag it as an invalid\n                    // call site later on.\n                    if (memberExpr.nodeType == NodeType.TypeRef) {\n                        this.reportParseError("Expected \'new\' on array declaration in member definition")\n                    }\n                    member = new BinaryExpression(NodeType.Member, memberName, memberExpr);\n                    member.minChar = memberName.minChar;\n                    if (memberExpr.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>memberExpr;\n                        funcDecl.hint = idHint;\n                    }\n                }\n                else {\n                    this.reportParseError("Expected \':\' in member definition");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        elements.flags |= ASTFlags.Error;\n                        elements.minChar = minChar;\n                        elements.limChar = this.scanner.lastTokenLimChar();\n                        return elements;\n                    }\n                }\n                idHint = null;\n                elements.append(member);\n                member.limChar = this.scanner.lastTokenLimChar();\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    break;\n                }\n                else {\n                    // munch comma\n                    this.currentToken = this.scanner.scan();\n                }\n\n                // trailing comma allowed\n                if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    break;\n                }\n            }\n\n            if (member) {\n                elements.limChar = member.limChar;\n            }\n            elements.minChar = minChar;\n            return elements;\n        }\n\n        private parseArrayList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var elements: ASTList = null;\n            if (this.currentToken.tokenId == TokenID.CloseBracket) {\n                return elements;\n            }\n            else {\n                elements = new ASTList();\n                elements.minChar = this.scanner.startPos;\n            }\n\n            var arg: AST;\n\n            for (; ;) {\n                if ((this.currentToken.tokenId == TokenID.Comma) ||\n                    (this.currentToken.tokenId == TokenID.CloseBracket)) {\n                    arg = new AST(NodeType.EmptyExpr);\n                }\n                else {\n                    arg = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                  OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                }\n                elements.append(arg);\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    break;\n                }\n                this.currentToken = this.scanner.scan();\n            }\n            elements.limChar = this.scanner.lastTokenLimChar();\n            return elements;\n        }\n\n        private parseArrayLiteral(errorRecoverySet: ErrorRecoverySet): UnaryExpression {\n            var arrayLiteral: UnaryExpression = null;\n            arrayLiteral = new UnaryExpression(NodeType.ArrayLit,\n                                             this.parseArrayList(errorRecoverySet));\n            return arrayLiteral;\n        }\n\n        private parseTerm(errorRecoverySet: ErrorRecoverySet, allowCall: bool, typeContext: TypeContext, inCast: bool): AST {\n            var ast: AST = null;\n            var sawId = false;\n            var inNew = false;\n            var minChar = this.scanner.startPos;\n            var limChar = this.scanner.pos;\n            var parseAsLambda = false;\n            var expectlambdaRParen = false;\n\n            // keywords first\n            switch (this.currentToken.tokenId) {\n                case TokenID.Number:\n                case TokenID.Bool:\n                case TokenID.Any:\n                case TokenID.String:\n                    var tid = new Identifier(tokenTable[this.currentToken.tokenId].text);\n                    if (hasFlag(typeContext, TypeContext.Primitive)) {\n                        ast = new TypeReference(tid, 0);\n                        sawId = true;\n                    }\n                    else {\n                        ast = tid;\n                        sawId = true;\n                    }\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.This:\n                    ast = new AST(NodeType.This);\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.Super:\n                    ast = new AST(NodeType.Super);\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.True:\n                    ast = new AST(NodeType.True);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.False:\n                    ast = new AST(NodeType.False);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.Null:\n                    ast = new AST(NodeType.Null);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.New:\n                    minChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    var target = this.parseTerm(errorRecoverySet, false, TypeContext.AllSimpleTypes, inCast);\n\n                    if (target.nodeType == NodeType.Error || (target.nodeType == NodeType.Index && (<BinaryExpression>target).operand1.nodeType == NodeType.TypeRef)) {\n                        this.reportParseError("Cannot invoke \'new\' on this expression");\n                    } else {\n                        ast = new CallExpression(NodeType.New, target, null);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        inNew = true;\n                    }\n                    break;\n                case TokenID.Function:\n                    minChar = this.scanner.pos;\n                    ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, null, true);\n                    (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n                    ast.minChar = minChar;\n                    limChar = this.scanner.lastTokenLimChar();\n                    ast.limChar = limChar;\n                    break;\n            }\n\n            if (ast == null) {\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n\n                    var idText = this.currentToken.getText();\n                    ast = this.createRef(idText, (<IdentifierToken>this.currentToken).hasEscapeSequence, minChar);\n                    sawId = true;\n \n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n\n                    if (this.currentToken.tokenId == TokenID.Question) {\n                        ast.flags |= ASTFlags.PossibleOptionalParameter;\n                    }\n\n                    limChar = this.scanner.lastTokenLimChar();\n                }\n            }\n\n            if (inCast) {\n                this.checkCurrentToken(TokenID.GreaterThan, errorRecoverySet);\n            }\n\n            if (ast == null) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.OpenParen:\n                        minChar = this.scanner.pos;\n                        var prevTokId = this.scanner.previousToken().tokenId;\n                        this.currentToken = this.scanner.scan();\n\n                        var couldBeLambda = prevTokId == TokenID.OpenParen || // foo(()=>{});\n                                            prevTokId == TokenID.Comma || // foo(x,()=>{});\n                                            prevTokId == TokenID.EqualsEquals || // var foo = ()=>{};\n                                            prevTokId == TokenID.Colon;    // var x = { foo: ()=> {} };\n\n\n                        if (couldBeLambda && this.currentToken.tokenId == TokenID.CloseParen) {\n                            parseAsLambda = true;\n                            expectlambdaRParen = false;\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else if (couldBeLambda && this.currentToken.tokenId == TokenID.DotDotDot) {\n                            parseAsLambda = true;\n                            expectlambdaRParen = true;\n                        }\n                        else {\n                            ast = this.parseExpr(errorRecoverySet | ErrorRecoverySet.RParen,\n                                          OperatorPrecedence.None, true, TypeContext.NoTypes, couldBeLambda);\n                            limChar = this.scanner.lastTokenLimChar();\n                            parseAsLambda = couldBeLambda && (ast.nodeType == NodeType.Name || ast.nodeType == NodeType.Comma) &&\n                                            (this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.Question);\n                            expectlambdaRParen = true;\n                        }\n\n                        // Check for the RParen if it\'s not an anonymous \'=>\' function\n                        if ((ast && !parseAsLambda)) {\n                            if (hasFlag(ast.flags, ASTFlags.SkipNextRParen)) {\n                                // REVIEW: parseExpr resulted in a lambda node, the LParen scanned earlier, is the beginning of that node, and not of a parenthesized expression;\n                                //         do not look for a matching RParen for this node, but make sure to remove the flag, so that any enclosing parenthesis are matched correctly.\n                                ast.flags = ast.flags & (~(ASTFlags.SkipNextRParen)); \n                                break;\n                            }\n                            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                            ast.isParenthesized = true;\n                        }\n\n                        break;\n                    case TokenID.NumberLiteral: {\n                        var numTok = <NumberLiteralToken>this.currentToken;\n                        this.currentToken = this.scanner.scan();\n                        ast = new NumberLiteral(numTok.value, numTok.hasEmptyFraction);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.StringLiteral:\n                        ast = new StringLiteral(this.currentToken.getText());\n                        this.currentToken = this.scanner.scan();\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    case TokenID.RegularExpressionLiteral: {\n                        var rtok = <RegularExpressionLiteralToken>this.currentToken;\n                        ast = new RegexLiteral(rtok.regex);\n                        this.currentToken = this.scanner.scan();\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.OpenBracket:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        ast = this.parseArrayLiteral(ErrorRecoverySet.RBrack | errorRecoverySet);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.pos; // \']\'\n                        this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet);\n                        break;\n                    // TODO: rescan regex for TokenID.Div and AsgDiv\n                        case TokenID.OpenBrace:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var members = this.parseMemberList(ErrorRecoverySet.RCurly | errorRecoverySet)\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        ast = new UnaryExpression(NodeType.ObjectLit, members);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        members.minChar = minChar;\n                        members.limChar = limChar;\n                        break;\n\n                    case TokenID.LessThan:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var term: AST = this.parseTypeReference(ErrorRecoverySet.BinOp, false);\n                        this.checkCurrentToken(TokenID.GreaterThan, errorRecoverySet);\n                        ast = new UnaryExpression(NodeType.TypeAssertion, this.parseExpr(errorRecoverySet, OperatorPrecedence.Unary, false, TypeContext.NoTypes));\n                        (<UnaryExpression>ast).castTerm = term;\n                        break;\n\n                    default:\n                        if (this.prevExpr && hasFlag(this.prevExpr.flags, ASTFlags.PossibleOptionalParameter)) {\n                            parseAsLambda = true;\n                            ast = this.prevExpr;\n                        }\n                        else {\n                            this.reportParseError("Check format of expression term");\n                            if (this.errorRecovery) {\n                                var ident = new MissingIdentifier();\n                                ident.minChar = minChar;\n                                ident.flags |= ASTFlags.Error;\n                                this.skip(errorRecoverySet | ErrorRecoverySet.Postfix);\n                                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                    ident.setText(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence);\n                                    this.currentToken = this.scanner.scan();\n                                    limChar = this.scanner.lastTokenLimChar();\n                                }\n                                else {\n                                    limChar = this.scanner.lastTokenLimChar();\n                                    //tok=scanner.scan();\n                                }\n\n                                // REVIEW: set sawId\n                                ast = ident;\n                            }\n                        }\n                }\n            }\n\n            if (parseAsLambda) {\n                // If the next token is an fat arrow or a colon, we either have a parameter list, or can rightly assume\n                // that we have a typed formal, so we proceed with the lambda parse\n                if (\n                    this.currentToken.tokenId == TokenID.Colon ||\n                    this.currentToken.tokenId == TokenID.Comma ||\n                    this.currentToken.tokenId == TokenID.CloseParen ||\n                    this.currentToken.tokenId == TokenID.DotDotDot) {\n\n                        // We won\'t scan in the \':\' case, since keeping the \':\' simplifies argument handling in parseFormalParameterList\n                        // Note that we don\'t set the minchar in this case\n                    ast = this.parseLambdaExpr(errorRecoverySet, ast, true /* skipNextRParen */, expectlambdaRParen);\n                    ast.minChar = minChar;\n                    limChar = this.scanner.lastTokenLimChar();\n                    ast.limChar = limChar;\n                }\n                else if (ast) {\n                    ast.isParenthesized = true;\n                }\n            }\n\n            if (sawId && (typeContext != TypeContext.NoTypes)) {\n                typeContext |= TypeContext.ArraySuffix;\n            }\n\n            var postFix = this.parsePostfixOperators(errorRecoverySet, ast, allowCall, inNew, typeContext, minChar, limChar);\n\n            // Defensive error check...\n            if (postFix) {\n                if (sawId && (postFix.nodeType == NodeType.Index)) {\n                    var binExpr = <BinaryExpression>postFix;\n                    if (binExpr.operand2 == null) {\n                        postFix = this.convertToTypeReference(postFix);\n                    }\n                }\n\n                ///////////////////////////////////////////////////////////\n                //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n                //      as they are sometimes not specific enough for each expression kind.\n                postFix.minChar = minChar;\n                // Only update "limChar" if it is not better than "lastTokenLimChar()"\n                postFix.limChar = max(postFix.limChar, this.scanner.lastTokenLimChar());\n                //\n                ///////////////////////////////////////////////////////////\n                return postFix;\n            }\n            else {\n                return new AST(NodeType.Error);\n            }\n\n        }\n\n        private parseLambdaExpr(errorRecoverySet: ErrorRecoverySet, lambdaArgs: AST, skipNextRParen: bool, expectClosingRParen: bool): AST {\n            // REVIEW: Parse the remainder of a lambda expression. The opening paren has been read already, if it existed. \n            //         skipNextRParen sets a flag on the resulting lambda node to tell the calling parseTerm that the LParen it scanned has been matched as part of parsing the formal parameter list\n            //         expectClosingRParen indicates that a closing RParen is expected, in the cases with optional parameter or more than one parameter.\n            var ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, { preProcessedLambdaArgs: lambdaArgs }, expectClosingRParen);\n            (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n            (<FuncDecl>ast).fncFlags |= FncFlags.IsFatArrowFunction;\n            if (!skipNextRParen) {\n                ast.flags |= ASTFlags.SkipNextRParen;\n            }\n            ast.limChar = this.scanner.lastTokenLimChar();;\n            return ast;\n        }\n\n        private parseExpr(errorRecoverySet: ErrorRecoverySet, minPrecedence: number, allowIn: bool,\n            typeContext: TypeContext, possiblyInLambda: bool = false): AST {\n            var ast: AST = null;\n            var tokenInfo = lookupToken(this.currentToken.tokenId);\n            var canAssign: bool = true;\n            var idHint: string = null;\n            var minChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            var exprIsAnonLambda = false;\n\n            if ((tokenInfo != undefined) && (tokenInfo.unopNodeType != NodeType.None)) {\n                canAssign = false;\n                this.currentToken = this.scanner.scan();\n                var tempExpr = this.parseExpr(ErrorRecoverySet.BinOp | errorRecoverySet,\n                                       tokenInfo.unopPrecedence, allowIn,\n                                       TypeContext.NoTypes);\n\n                // fold unary +- into constants\n                if ((tokenInfo.unopNodeType == NodeType.Pos) &&\n                    (tempExpr.nodeType == NodeType.NumberLit)) {\n                    ast = tempExpr;\n                }\n                else if ((tokenInfo.unopNodeType == NodeType.Neg) &&\n                         (tempExpr.nodeType == NodeType.NumberLit)) {\n                    var numLit = <NumberLiteral>tempExpr;\n                    numLit.value = (-numLit.value);\n                    if (numLit.value == 0) {\n                        numLit.isNegativeZero = true;\n                    }\n                    ast = tempExpr;\n                }\n                else {\n                    ast = new UnaryExpression(tokenInfo.unopNodeType, tempExpr);\n                    ast.limChar = tempExpr.limChar;\n                }\n                ast.minChar = minChar;\n            }\n            else {\n                ast = this.parseTerm(ErrorRecoverySet.BinOp | ErrorRecoverySet.AddOp |\n                              errorRecoverySet, true, typeContext, false);\n                var id: Identifier;\n                var temp: AST;\n                if (ast.nodeType == NodeType.Name) {\n                    id = <Identifier>ast;\n                    idHint = id.actualText;\n                }\n                else if (ast.nodeType == NodeType.Dot) {\n\n                    // If this is within a class declaration, and the circumstances are right, we need to\n                    // transform the dotted expression into a member declaration\n                    var subsumedExpr = false;\n\n                    if (this.inferPropertiesFromThisAssignment && \n                        (this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.Equals) &&\n                         this.parsingClassConstructorDefinition &&\n                         this.nestingLevel == this.currentClassDefinition.constructorNestingLevel && // this nesting level means we\'re at the top-level in the constructor\n                         (<BinaryExpression>ast).operand1.nodeType == NodeType.This) {\n\n                        if ((<BinaryExpression>ast).operand2.nodeType == NodeType.Name) {\n                            var op2ID: Identifier = (<Identifier>(<BinaryExpression>ast).operand2);\n\n                            if (!this.currentClassDefinition.knownMemberNames[op2ID.actualText]) {\n                                ast = this.parseClassMemberVariableDeclaration(op2ID, ast.minChar, true, errorRecoverySet, Modifiers.Public);\n                                subsumedExpr = true;\n                            }\n                        }\n                    }\n\n                    if (!subsumedExpr) {\n                        temp = ast;\n                        while (temp.nodeType == NodeType.Dot) {\n                            var binExpr = <BinaryExpression>temp;\n                            temp = binExpr.operand2;\n                        }\n                        if (temp.nodeType == NodeType.Name) {\n                             id = <Identifier>temp;\n                            idHint = id.actualText;\n                        }\n                    }\n                }\n                if ((!this.scanner.lastTokenHadNewline()) &&\n                    ((this.currentToken.tokenId == TokenID.PlusPlus) || (this.currentToken.tokenId == TokenID.MinusMinus))) {\n                    canAssign = false;\n                    var operand = ast;\n                    ast = new UnaryExpression((this.currentToken.tokenId == TokenID.PlusPlus) ? NodeType.IncPost : NodeType.DecPost, operand);\n                    ast.limChar = this.scanner.pos;\n                    ast.minChar = operand.minChar;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n            for (; ;) {\n                tokenInfo = lookupToken(this.currentToken.tokenId);\n                if ((tokenInfo == undefined) || (tokenInfo.binopNodeType == NodeType.None)) {\n                    break;\n                }\n                if ((!allowIn) && (tokenInfo.binopNodeType == NodeType.In)) {\n                    break;\n                }\n                if (tokenInfo.binopPrecedence == OperatorPrecedence.Assignment) {\n                    if (tokenInfo.binopPrecedence < minPrecedence) {\n                        break;\n                    }\n                    if (!canAssign) {\n                        this.reportParseError("illegal assignment");\n                    }\n                }\n                else if (tokenInfo.binopPrecedence <= minPrecedence) {\n                    break;\n                }\n\n                if (possiblyInLambda && this.currentToken.tokenId == TokenID.Comma && this.scanner.getLookAheadToken().tokenId == TokenID.DotDotDot) {\n                    // The ellipsis can only exist in the formal list of a lambda expression, so do not attempt to parse the comma token as the comma binary operator\n                    // instead parse it as a lambda\n                    exprIsAnonLambda = true;\n                    canAssign = false;\n                    ast = this.parseLambdaExpr(errorRecoverySet, ast, false, true);\n                    break;\n                }\n\n                // Precedence is high enough. Consume the operator token.\n                this.currentToken = this.scanner.scan();\n                canAssign = false;\n                if (tokenInfo.binopNodeType == NodeType.ConditionalExpression) {\n                    if (possiblyInLambda && \n                        ( this.currentToken.tokenId == TokenID.Equals || this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.CloseParen || this.currentToken.tokenId == TokenID.Comma)) {\n                        // The QMark is not a ternary expression, it is a marker for optional parameter in a lambda expression.\n                        exprIsAnonLambda = true;\n                        canAssign = true;\n                    }\n                    else {\n                        this.prevExpr = ast;\n                        var whenTrue = this.parseExpr(\n                            errorRecoverySet | ErrorRecoverySet.Colon, OperatorPrecedence.Assignment, allowIn, TypeContext.NoTypes);\n\n                        // Do not hold onto the prevExpr handle\n                        this.prevExpr = null;\n                        this.checkCurrentToken(TokenID.Colon, errorRecoverySet | ErrorRecoverySet.ExprStart);\n\n                        var whenFalse = this.parseExpr(\n                            errorRecoverySet | ErrorRecoverySet.BinOp, OperatorPrecedence.Assignment, allowIn, TypeContext.NoTypes)\n                        ast = new ConditionalExpression(ast, whenTrue, whenFalse);\n                    }\n                }\n                else {\n                    var tc = TypeContext.NoTypes;\n                    var binExpr2: BinaryExpression;\n\n                    binExpr2 = new BinaryExpression(tokenInfo.binopNodeType, ast,\n                                                    this.parseExpr(errorRecoverySet |\n                                                            ErrorRecoverySet.BinOp,\n                                                            tokenInfo.binopPrecedence,\n                                                            allowIn, TypeContext.NoTypes, possiblyInLambda));\n                    if (binExpr2.operand2.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>binExpr2.operand2;\n                        funcDecl.hint = idHint;\n                    }\n\n                    binExpr2.minChar = ast.minChar;\n                    binExpr2.limChar = this.scanner.lastTokenLimChar();\n                    idHint = null;\n                    ast = binExpr2;\n                }\n            }\n            if (canAssign) {\n                ast.flags |= ASTFlags.Writeable;\n            }\n            if (!exprIsAnonLambda) {\n                ///////////////////////////////////////////////////////////\n                //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n                //      as they are sometimes not specific enough for each statement kind.\n                ast.minChar = minChar;\n                // Only update "limChar" if it is not better than "lastTokenLimChar()"\n                ast.limChar = max(ast.limChar, this.scanner.lastTokenLimChar());\n                //\n                ///////////////////////////////////////////////////////////\n                ast.preComments = preComments;\n                ast.postComments = this.parseCommentsForLine(this.scanner.line);\n            }\n            return ast;\n        }\n\n        private parsePostfixOperators(errorRecoverySet: ErrorRecoverySet, ast: AST, allowCall: bool, inNew: bool,\n            typeContext: TypeContext, lhsMinChar: number, lhsLimChar: number): AST {\n            var count = 0;\n\n            if (!ast) {\n                ast = new AST(NodeType.EmptyExpr);\n                ast.isParenthesized = true;\n            }\n\n            ast.minChar = lhsMinChar;\n            ast.limChar = lhsLimChar;\n\n            for (; ;) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.OpenParen:\n                        if (inNew) {\n                            var callExpr = <CallExpression>ast;\n                            callExpr.arguments = this.parseArgList(errorRecoverySet);\n                            inNew = false;\n                        }\n                        else {\n                            if (!allowCall) {\n                                return ast;\n                            }\n                            ast = new CallExpression(NodeType.Call, ast,\n                                                   this.parseArgList(errorRecoverySet));\n                            ast.minChar = lhsMinChar;\n                        }\n                        ast.limChar = this.scanner.pos; // \')\'\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                        break;\n                    case TokenID.OpenBracket:\n                        this.currentToken = this.scanner.scan();\n                        if (this.currentToken.tokenId == TokenID.CloseBracket) {\n                            if (hasFlag(typeContext, TypeContext.ArraySuffix)) {\n                                this.currentToken = this.scanner.scan();\n                                if (ast.nodeType == NodeType.TypeRef) {\n                                    var typeRef = <TypeReference>ast;\n                                    typeRef.arrayCount++;\n                                }\n                                else {\n                                    ast = new BinaryExpression(NodeType.Index, ast, null);\n                                }\n                                ast.limChar = this.scanner.pos;\n                                break; // note early exit from case\n                            }\n                        }\n\n                        ast = new BinaryExpression(NodeType.Index, ast,\n                                                 this.parseExpr(errorRecoverySet | ErrorRecoverySet.RBrack,\n                                                           OperatorPrecedence.None, true,\n                                                           TypeContext.NoTypes));\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.pos; // \']\'\n                        this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet);\n                        break;\n                    case TokenID.Dot: {\n                        var name: Identifier = null;\n                        var curpos = this.scanner.pos;\n                        this.currentToken = this.scanner.scan();\n                        // Don\'t allow reserved words if immediately after a new line and error recovery is enabled\n                        if ((this.currentToken.tokenId == TokenID.Identifier) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && convertTokToIDName(this.currentToken))) {\n                            ast.flags |= ASTFlags.DotLHS;\n                            name = this.createRef(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence, this.scanner.startPos);\n                            name.limChar = this.scanner.pos;\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else {\n                            this.reportParseError("Expected identifier following dot");\n                            if (this.errorRecovery) {\n                                this.skip(errorRecoverySet);\n                                ast.flags |= (ASTFlags.Error | ASTFlags.DotLHS);\n                                return ast;\n                            }\n                            else {\n                                name = new MissingIdentifier();\n                            }\n                        }\n                        ast = new BinaryExpression(NodeType.Dot, ast, name);\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.EqualsGreaterThan:\n                        ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, { preProcessedLambdaArgs: ast }, false);\n                        (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    default:\n                        return ast;\n\n                }\n            }\n        }\n\n        private parseTry(tryNode: Try, errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Try {\n            var minChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\'");\n                if (this.errorRecovery) {\n                    var etryNode = tryNode;\n                    etryNode.minChar = minChar;\n                    etryNode.limChar = this.scanner.lastTokenLimChar();\n                    etryNode.flags |= ASTFlags.Error;\n                    return etryNode;\n                }\n            }\n            tryNode.body = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers);\n            tryNode.minChar = minChar;\n            tryNode.limChar = tryNode.body.limChar;\n            tryNode.preComments = preComments;\n            tryNode.postComments = this.parseComments();\n            return tryNode;\n        }\n\n        private parseCatch(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Catch {\n            var catchMinChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n            if ((this.currentToken.tokenId != TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                this.reportParseError("Expected identifier in catch header");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n\n                    var ecatch = new Catch(new VarDecl(new MissingIdentifier(), this.nestingLevel),\n                                            new Statement(NodeType.Empty));\n                    ecatch.statement.minChar = catchMinChar;\n                    ecatch.statement.limChar = this.scanner.pos;\n                    ecatch.minChar = this.scanner.startPos;\n                    ecatch.limChar = this.scanner.pos;\n                    ecatch.flags |= ASTFlags.Error;\n                    return ecatch;\n                }\n            }\n            var param = new VarDecl(Identifier.fromToken(this.currentToken), this.nestingLevel);\n            param.id.minChar = this.scanner.startPos;\n            param.id.limChar = this.scanner.pos;\n            param.minChar = param.id.minChar;\n            param.limChar = param.id.limChar;\n            this.currentToken = this.scanner.scan();\n            var statementPos = this.scanner.pos;\n            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.StmtStart);\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\' to start catch body");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n\n                    var ecatch = new Catch(new VarDecl(new MissingIdentifier(), this.nestingLevel),\n                                            new Statement(NodeType.Empty));\n                    ecatch.statement.minChar = catchMinChar;\n                    ecatch.statement.limChar = statementPos;\n                    ecatch.minChar = this.scanner.startPos;\n                    ecatch.limChar = this.scanner.pos;\n                    ecatch.flags |= ASTFlags.Error;\n                    return ecatch;\n                }\n            }\n\n            var catchStmt = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers);\n            var catchNode = new Catch(param, catchStmt);\n            catchNode.statement.minChar = catchMinChar;\n            catchNode.statement.limChar = statementPos;\n            catchNode.minChar = catchMinChar;\n            catchNode.limChar = catchStmt.limChar;\n            catchNode.preComments = preComments;\n            catchNode.postComments = this.parseComments();\n            return catchNode;\n        }\n\n        private parseFinally(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Finally {\n            var finMinChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\' to start body of finally statement");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n                    var efin = new Finally(new Statement(NodeType.Empty));\n                    efin.flags |= ASTFlags.Error;\n                    efin.minChar = this.scanner.startPos;\n                    efin.limChar = this.scanner.pos;\n                    return efin;\n                }\n            }\n\n            var finBody = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers)\n            var fin = new Finally(finBody);\n            fin.minChar = finMinChar;\n            fin.limChar = fin.body.limChar;\n            fin.preComments = preComments;\n            fin.postComments = this.parseComments();\n            return fin;\n        }\n\n        private parseTryCatchFinally(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers, labelList: ASTList): AST {\n            var tryPart: AST = new Try(null);\n            var tryMinChar = this.scanner.startPos;\n            this.pushStmt(<Statement>tryPart, labelList);\n            this.parseTry(<Try>tryPart, errorRecoverySet | ErrorRecoverySet.Catch, parentModifiers);\n            this.popStmt();\n            var tc: TryCatch = null;\n            var tf: TryFinally = null;\n\n            if (this.currentToken.tokenId == TokenID.Catch) {\n                var catchPart = this.parseCatch(errorRecoverySet | ErrorRecoverySet.Catch, parentModifiers);\n                tc = new TryCatch(<Try>tryPart, catchPart);\n                tc.minChar = tryPart.minChar;\n                tc.limChar = catchPart.limChar;\n            }\n\n            if (this.currentToken.tokenId != TokenID.Finally) {\n                if (tc == null) {\n                    this.reportParseError("try with neither catch nor finally");\n                    if (this.errorRecovery) {\n                        var etf = new TryFinally(tryPart, new Finally(new AST(NodeType.Empty)));\n                        etf.flags |= ASTFlags.Error;\n                        etf.minChar = this.scanner.startPos;\n                        etf.limChar = this.scanner.pos;\n                        return etf;\n                    }\n                    return new TryFinally(tryPart, new Finally(new AST(NodeType.Empty)));\n                }\n                else {\n                    return tc;\n                }\n            }\n            else {\n                if (tc) {\n                    tryPart = tc;\n                }\n                var finallyPart = this.parseFinally(errorRecoverySet, parentModifiers)\n                tf = new TryFinally(tryPart, finallyPart);\n                tf.minChar = tryMinChar;\n                tf.limChar = finallyPart.limChar;\n                return tf;\n            }\n        }\n\n        private parseStatement(errorRecoverySet: ErrorRecoverySet, allowedElements: AllowedElements, parentModifiers: Modifiers): AST {\n            var ast: AST = null;\n            var labelList: ASTList = null;\n            var astList: ASTList = null;\n            var temp: AST;\n            var modifiers = Modifiers.None;\n            var minChar = this.scanner.startPos;\n            var forInOk = false;\n            var needTerminator = false;\n            var fnOrVar: AST = null;\n            var preComments = this.parseComments();\n            this.state = ParseState.StartStatement;\n\n            function isAmbient() {\n                return hasFlag(modifiers, Modifiers.Ambient) || hasFlag(parentModifiers, Modifiers.Ambient);\n            }\n\n            function mayNotBeExported() {\n                if (hasFlag(modifiers, Modifiers.Exported)) {\n                    this.reportError("Statement may not be exported");\n                }\n            }\n\n            for (; ;) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.EndOfFile:\n                        ast = new AST(NodeType.Error);\n                        ast.minChar = minChar;\n                        ast.limChar = this.scanner.pos;\n                        break;\n                    case TokenID.Function:\n                        if (this.parsingDeclareFile || isAmbient() || this.ambientModule) {\n                            this.currentToken = this.scanner.scan();\n                            fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                      modifiers, true, false);\n                            if (fnOrVar.nodeType == NodeType.VarDecl) {\n                                this.reportParseError("function keyword can only introduce function declaration");\n                            }\n                            else if ((fnOrVar.nodeType == NodeType.FuncDecl) && ((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                needTerminator = true;\n                            }\n                            ast = fnOrVar;\n                            if (this.parsingDeclareFile || this.ambientModule && ast.nodeType == NodeType.FuncDecl) {\n                                (<FuncDecl>ast).fncFlags |= FncFlags.Exported;\n                            }\n                        }\n                        else {\n                            ast = this.parseFncDecl(errorRecoverySet, true, false, false, null, false, false, isAmbient(), modifiers, null, true);\n                            if (hasFlag((<FuncDecl>ast).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                needTerminator = true;\n                            }\n                            if (this.ambientModule) {\n                                this.reportParseError("function declaration not permitted within ambient module");\n                            }\n                            if (hasFlag(modifiers, Modifiers.Exported)) {\n                                (<FuncDecl>ast).fncFlags |= FncFlags.Exported;\n                            }\n                        }\n                        break;\n                    case TokenID.Module:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("module not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseModuleDecl(errorRecoverySet, modifiers, preComments);\n                            preComments = null;\n                        }\n                        break;\n                    case TokenID.Import:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("module not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            if (hasFlag(modifiers, Modifiers.Exported)) {\n                                this.reportParseError("export keyword not permitted on import declaration");\n                            }\n                            ast = this.parseImportDeclaration(errorRecoverySet, modifiers);\n                            needTerminator = true;\n                        }\n                        break;\n                    case TokenID.Export:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("\'export\' statements are only allowed at the global and module levels");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        if (this.topLevel) {\n                            this.hasTopLevelImportOrExport = true;\n                        }\n                        modifiers |= Modifiers.Exported;\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Private:\n                        modifiers |= Modifiers.Private;\n\n                        this.currentToken = this.scanner.scan();\n\n                        if (this.parsingClassConstructorDefinition) {\n\n                            if (!this.inferPropertiesFromThisAssignment) {\n                                this.reportParseError("Property declarations are not permitted within constructor bodies");\n                            }\n\n                            minChar = this.scanner.pos;\n                            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TokenID.Dot)) {\n                                this.reportParseError("Expected \'this.\' for property declaration");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n\n                                var id = Identifier.fromToken(this.currentToken);\n                                id.minChar = this.scanner.startPos;\n                                id.limChar = this.scanner.pos;\n\n                                this.currentToken = this.scanner.scan();\n                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);\n                            }\n                        }\n                        else {\n                            if (this.currentToken.tokenId != TokenID.Interface) {\n                                if (this.currentToken.tokenId == TokenID.Get) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Getter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                else if (this.currentToken.tokenId == TokenID.Set) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Setter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                          modifiers, isAmbient(), false);\n                                if ((fnOrVar.nodeType == NodeType.VarDecl) ||\n                                    ((fnOrVar.nodeType == NodeType.FuncDecl) && (hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction)))) {\n                                    needTerminator = true;\n                                }\n                                ast = fnOrVar;\n                            }\n                        }\n                        break;\n                    case TokenID.Public:\n                        if (this.parsingClassConstructorDefinition) {\n\n                            if (!this.inferPropertiesFromThisAssignment) {\n                                this.reportParseError("Property declarations are not permitted within constructor bodies");\n                            }\n\n                            this.currentToken = this.scanner.scan(); \n                            minChar = this.scanner.pos;\n                            modifiers |= Modifiers.Public;\n                            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TokenID.Dot)) {\n                                this.reportParseError("Expected \'this.\' for property declaration");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n\n                                var id = Identifier.fromToken(this.currentToken);\n                                id.minChar = this.scanner.startPos;\n                                id.limChar = this.scanner.pos;\n\n                                this.currentToken = this.scanner.scan();\n                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);\n                            }\n                        }\n                        else {\n                            if ((allowedElements & AllowedElements.Properties) == AllowedElements.None) {\n                                this.reportParseError("\'property\' statements are only allowed within classes");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                modifiers |= Modifiers.Public;\n                                this.currentToken = this.scanner.scan();\n                                if (this.currentToken.tokenId == TokenID.Get) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Getter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                else if (this.currentToken.tokenId == TokenID.Set) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Setter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                            modifiers, isAmbient(), false);\n                                if ((fnOrVar.nodeType == NodeType.VarDecl) ||\n                                    ((fnOrVar.nodeType == NodeType.FuncDecl) && hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction))) {\n                                    needTerminator = true;\n                                }\n                                ast = fnOrVar;\n                            }\n                        }\n                        break;\n                    case TokenID.Declare:\n                        if (!(allowedElements & AllowedElements.AmbientDeclarations)) {\n                            this.reportParseError("Ambient declarations are only allowed at the top-level or module scopes")\n                        }\n                        if (!this.parsingDeclareFile && hasFlag(parentModifiers, Modifiers.Ambient)) {\n                            this.reportParseError("Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)")\n                        }\n                        modifiers |= Modifiers.Ambient;\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Class:\n                        if ((allowedElements & AllowedElements.ClassDeclarations) == AllowedElements.None) {\n                            this.reportParseError("class not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseClassDecl(errorRecoverySet, minChar, modifiers);\n                        }\n                        break;\n                    case TokenID.Interface:\n                        if ((allowedElements & AllowedElements.InterfaceDeclarations) == AllowedElements.None) {\n                            this.reportParseError("interface not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseInterfaceDecl(errorRecoverySet, modifiers);\n                        }\n                        break;\n                    case TokenID.Var:\n                        var declAst: AST = this.parseVariableDeclaration(errorRecoverySet | ErrorRecoverySet.StmtStart, modifiers,\n                                                     true, false);\n                        if (declAst.nodeType == NodeType.VarDecl) {\n                            ast = declAst;\n                        }\n                        else {\n                            ast = new Block(<ASTList>declAst, false);\n                        }\n                        needTerminator = true;\n                        break;\n                    case TokenID.Static:\n\n                        if (this.currentClassDecl == null) {\n                            this.reportParseError("Statics may only be class members");\n                        }\n\n                        mayNotBeExported();\n                        modifiers |= Modifiers.Public;\n                        this.currentToken = this.scanner.scan();\n                        if (this.currentToken.tokenId == TokenID.Get) {\n                            this.prevIDTok = this.currentToken;\n                            this.currentToken = this.scanner.scan();\n                            if (codeGenTarget < CodeGenTarget.ES5) {\n                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                            }\n                            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                modifiers |= Modifiers.Getter;\n                                this.prevIDTok = null;\n                            }\n                        }\n                        else if (this.currentToken.tokenId == TokenID.Set) {\n                            this.currentToken = this.scanner.scan();\n                            if (codeGenTarget < CodeGenTarget.ES5) {\n                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                            }\n                            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                modifiers |= Modifiers.Setter;\n                            }\n                        }\n                        if (isAmbient()) {\n                            modifiers |= Modifiers.Ambient;\n                        }\n                        fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                  modifiers, this.parsingDeclareFile || (modifiers & Modifiers.Ambient) != Modifiers.None, true);\n\n                        var staticsList = this.topStaticsList();\n                        if (staticsList && fnOrVar.nodeType == NodeType.VarDecl) {\n                            staticsList.append(fnOrVar);\n                        }\n\n                        if (fnOrVar.nodeType == NodeType.VarDecl || ((fnOrVar.nodeType == NodeType.FuncDecl) && hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction))) {\n                            needTerminator = true;\n                        }\n\n                        ast = fnOrVar;\n                        break;\n                    case TokenID.For:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("syntax error: for statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart | ErrorRecoverySet.Var);\n                        this.state = ParseState.ForInit;\n                        forInOk = true;\n                        switch (this.currentToken.tokenId) {\n                            case TokenID.Var:\n                                temp = this.parseVariableDeclaration(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                  ErrorRecoverySet.In, Modifiers.None, false, false);\n                                break;\n                            case TokenID.Semicolon:\n                                temp = null;\n                                this.state = ParseState.ForCondStart;\n                                break;\n                            default:\n                                temp = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                               ErrorRecoverySet.In, OperatorPrecedence.None, false,\n                                               TypeContext.NoTypes);\n                                break;\n                        }\n                        this.state = ParseState.ForInitAfterVar;\n                        if (this.currentToken.tokenId == TokenID.In) {\n                            if ((temp == null) || (!forInOk)) {\n                                this.reportParseError("malformed for statement");\n                                if (this.errorRecovery) {\n                                    this.skip(errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                    ast = new AST(NodeType.Empty);\n                                    ast.flags |= ASTFlags.Error;\n                                }\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n                                var forInStmt = new ForInStatement(temp,\n                                                                 this.parseExpr(ErrorRecoverySet.RParen |\n                                                                           errorRecoverySet,\n                                                                           OperatorPrecedence.Comma,\n                                                                           false,\n                                                                           TypeContext.NoTypes));\n\n                                forInStmt.limChar = this.scanner.pos;\n                                forInStmt.statement.minChar = minChar;\n                                forInStmt.statement.limChar = this.scanner.pos;\n                                this.checkCurrentToken(TokenID.CloseParen, ErrorRecoverySet.StmtStart | errorRecoverySet);\n                                this.pushStmt(forInStmt, labelList);\n                                forInStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                                this.popStmt();\n                                forInStmt.minChar = minChar;\n                                ast = forInStmt;\n                            }\n                        }\n                        else {\n                            var forStmt: ForStatement = new ForStatement(temp);\n                            forStmt.minChar = minChar;\n                            this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet);\n                            if (this.currentToken.tokenId == TokenID.Semicolon) {\n                                forStmt.cond = null;\n                            }\n                            else {\n                                forStmt.cond = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                       ErrorRecoverySet.RParen,\n                                                       OperatorPrecedence.None, true,\n                                                       TypeContext.NoTypes);\n                                if (this.currentToken.tokenId != TokenID.Semicolon) {\n                                    this.skip(errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                    ast = forStmt;\n                                    ast.flags |= ASTFlags.Error;\n                                }\n                            }\n                            this.currentToken = this.scanner.scan();\n                            if (this.currentToken.tokenId == TokenID.CloseParen) {\n                                forStmt.incr = null;\n                            }\n                            else {\n                                forStmt.incr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                       ErrorRecoverySet.RParen,\n                                                       OperatorPrecedence.None, true,\n                                                       TypeContext.NoTypes);\n                            }\n                            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n                            this.pushStmt(forStmt, labelList);\n                            forStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                            this.popStmt();\n                            forStmt.limChar = forStmt.body.limChar;\n                            ast = forStmt;\n                        }\n                        break;\n                    case TokenID.With: {\n                        if (codeGenTarget < CodeGenTarget.ES5) {\n                            this.reportParseError("\'with\' statements are only available in ES5 codegen mode or better");\n                        }\n\n                        if (this.strictMode) {\n                            this.reportParseError("\'with\' statements are not available in strict mode");\n                        }\n\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'with\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart | ErrorRecoverySet.Var);\n\n                        var expr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.Colon,\n                                                            OperatorPrecedence.None, true,\n                                                            TypeContext.NoTypes);\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n\n                        var withStmt = new WithStatement(expr);\n                        withStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                        withStmt.minChar = minChar;\n                        withStmt.limChar = withStmt.body.limChar;\n                        ast = withStmt;\n                    }\n                        break;\n                    case TokenID.Switch: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'switch\' statement does not take modifiers");\n                        }\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n\n                        var switchStmt = new SwitchStatement(this.parseExpr(errorRecoverySet |\n                                                                     ErrorRecoverySet.RParen,\n                                                                     OperatorPrecedence.None,\n                                                                     true,\n                                                                     TypeContext.NoTypes));\n                        switchStmt.statement.minChar = minChar;\n                        switchStmt.statement.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n                        var caseListMinChar = this.scanner.startPos;\n                         this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.SCase);\n                        switchStmt.defaultCase = null;\n                        switchStmt.caseList = new ASTList();\n                        var caseStmt: CaseStatement = null;\n                        this.pushStmt(switchStmt, labelList);\n                        for (; ;) {\n                            if ((this.currentToken.tokenId == TokenID.Case) ||\n                                (this.currentToken.tokenId == TokenID.Default)) {\n                                var isDefault = (this.currentToken.tokenId == TokenID.Default);\n                                caseStmt = new CaseStatement();\n                                caseStmt.minChar = this.scanner.startPos;\n                                this.currentToken = this.scanner.scan();\n                                if (isDefault) {\n                                    switchStmt.defaultCase = caseStmt;\n                                }\n                                else {\n                                    caseStmt.expr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.Colon,\n                                                            OperatorPrecedence.None, true,\n                                                            TypeContext.NoTypes);\n                                }\n                                this.checkCurrentToken(TokenID.Colon, errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                caseStmt.body = new ASTList();\n                                this.parseStatementList(errorRecoverySet | ErrorRecoverySet.RCurly,\n                                              caseStmt.body, false, true, allowedElements, modifiers);\n                                caseStmt.limChar = caseStmt.body.limChar;\n                                switchStmt.caseList.append(caseStmt);\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        // end of switch statement\n                        switchStmt.caseList.minChar = caseListMinChar;\n                        switchStmt.caseList.limChar = this.scanner.pos;\n                        switchStmt.limChar = switchStmt.caseList.limChar;\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        this.popStmt();\n                        ast = switchStmt;\n                        break;\n                    }\n                    case TokenID.While: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'while\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, ErrorRecoverySet.ExprStart |\n                                  errorRecoverySet);\n                        var whileStmt = new WhileStatement(this.parseExpr(errorRecoverySet |\n                                                                   ErrorRecoverySet.RParen,\n                                                                   OperatorPrecedence.None,\n                                                                   true, TypeContext.NoTypes));\n                        whileStmt.minChar = minChar;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet |\n                                  ErrorRecoverySet.StmtStart);\n                        this.pushStmt(whileStmt, labelList);\n                        whileStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                        whileStmt.limChar = whileStmt.body.limChar;\n                        this.popStmt();\n                        ast = whileStmt;\n                        break;\n                    }\n                    case TokenID.Do: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'do\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var doStmt = new DoWhileStatement();\n                        doStmt.minChar = minChar;\n                        this.pushStmt(doStmt, labelList);\n                        doStmt.body = this.parseStatement(errorRecoverySet | ErrorRecoverySet.While,\n                                                   allowedElements, parentModifiers);\n                        this.popStmt();\n                        doStmt.whileAST = new Identifier("while");\n                        doStmt.whileAST.minChar = this.scanner.startPos;\n                        this.checkCurrentToken(TokenID.While, errorRecoverySet | ErrorRecoverySet.LParen);\n                        doStmt.whileAST.limChar = doStmt.whileAST.minChar + 5;\n                        this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n                        doStmt.cond = this.parseExpr(errorRecoverySet | ErrorRecoverySet.RParen,\n                                              OperatorPrecedence.None, true, TypeContext.NoTypes);\n                        doStmt.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                        ast = doStmt;\n                        // compatibility; more strict would be to require the \';\'\n                        if (this.currentToken.tokenId == TokenID.Semicolon) {\n                            this.currentToken = this.scanner.scan();\n                        }\n                        break;\n                    }\n                    case TokenID.If: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("if statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n                        var ifStmt = new IfStatement(this.parseExpr(errorRecoverySet |\n                                                             ErrorRecoverySet.LParen,\n                                                             OperatorPrecedence.None, true,\n                                                             TypeContext.NoTypes));\n                        ifStmt.minChar = minChar;\n                        ifStmt.statement.minChar = minChar;\n                        ifStmt.statement.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.StmtStart);\n                        this.pushStmt(ifStmt, labelList);\n                        ifStmt.thenBod = this.parseStatement(ErrorRecoverySet.Else | errorRecoverySet,\n                                                      allowedElements, parentModifiers);\n                        ifStmt.limChar = ifStmt.thenBod.limChar;\n                        if (this.currentToken.tokenId == TokenID.Else) {\n                            this.currentToken = this.scanner.scan();\n                            ifStmt.elseBod = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                            ifStmt.limChar = ifStmt.elseBod.limChar;\n                        }\n                        this.popStmt();\n                        ast = ifStmt;\n                        break;\n                    }\n                    case TokenID.Try: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("try statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        ast = this.parseTryCatchFinally(errorRecoverySet, parentModifiers, labelList);\n                        break;\n                    }\n                    case TokenID.OpenBrace: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("block does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var block = new Block(new ASTList(), true);\n                        this.pushStmt(block, labelList);\n                        this.parseStatementList(\n                            errorRecoverySet | ErrorRecoverySet.RCurly, block.statements,\n                            /*sourceElements:*/ false, /*noLeadingCase:*/ false, AllowedElements.None, modifiers);\n                        this.popStmt();\n                        block.statements.minChar = minChar;\n                        block.statements.limChar = this.scanner.pos;\n                        block.minChar = block.statements.minChar;\n                        block.limChar = block.statements.limChar;\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        ast = block;\n                        break;\n                    }\n                    case TokenID.Semicolon:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifier can not appear here");\n                        }\n                        ast = new AST(NodeType.Empty);\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Break:\n                    case TokenID.Continue: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before jump statement");\n                        }\n                        var jump =\n                            new Jump((this.currentToken.tokenId == TokenID.Break) ? NodeType.Break : NodeType.Continue);\n                        this.currentToken = this.scanner.scan();\n                        if ((this.currentToken.tokenId == TokenID.Identifier) && (!this.scanner.lastTokenHadNewline())) {\n                            // Labeled break or continue.\n                            jump.target = this.currentToken.getText();\n                            this.currentToken = this.scanner.scan();\n                        }\n                        this.resolveJumpTarget(jump);\n                        ast = jump;\n                        needTerminator = true;\n                        break;\n                    }\n                    case TokenID.Return: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before return statement");\n                        }\n                        if (!this.inFunction) {\n                            this.reportParseError("return statement outside of function body");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var retStmt = new ReturnStatement();\n                        retStmt.minChar = minChar;\n                        if ((this.currentToken.tokenId != TokenID.Semicolon) &&\n                            (this.currentToken.tokenId != TokenID.CloseBrace) &&\n                            (!(this.scanner.lastTokenHadNewline()))) {\n                            retStmt.returnExpression = this.parseExpr(errorRecoverySet |\n                                                               ErrorRecoverySet.SColon,\n                                                               OperatorPrecedence.None,\n                                                               true, TypeContext.NoTypes);\n                        }\n                        needTerminator = true;\n                        retStmt.limChar = this.scanner.lastTokenLimChar();\n                        ast = retStmt;\n                        break;\n                    }\n                    case TokenID.Throw:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before a throw statement");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        if ((this.currentToken.tokenId != TokenID.Semicolon) &&\n                            (this.currentToken.tokenId != TokenID.CloseBrace) &&\n                            (!(this.scanner.lastTokenHadNewline()))) {\n                            temp = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                           OperatorPrecedence.None, true, TypeContext.NoTypes);\n                        }\n                        else {\n                            this.reportParseError("throw with no target");\n                            temp = null;\n                        }\n                        ast = new UnaryExpression(NodeType.Throw, temp);\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        needTerminator = true;\n                        break;\n                    case TokenID.Enum:\n                        // TODO: check module allowed here\n                        //minChar=scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        ast = this.parseEnumDecl(errorRecoverySet, modifiers);\n                        ast.minChar = minChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                            (<ModuleDeclaration>ast).modFlags |= ModuleFlags.Ambient;\n                        }\n                        if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                            (<ModuleDeclaration>ast).modFlags |= ModuleFlags.Exported;\n                        }\n                        break;\n                    case TokenID.Debugger:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before debugger statement");\n                        }\n                        \n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var debuggerStmt = new DebuggerStatement();\n                        debuggerStmt.minChar = minChar;\n                        needTerminator = true;\n                        debuggerStmt.limChar = this.scanner.lastTokenLimChar();\n                        ast = debuggerStmt;\n                        break;\n                    default:\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before an expression statement or label");\n                        }\n                        minChar = this.scanner.startPos;\n                        var svPos = this.scanner.pos;\n                        temp = this.parseExpr(ErrorRecoverySet.Colon | ErrorRecoverySet.StmtStart |\n                                       errorRecoverySet, OperatorPrecedence.None, true,\n                                       TypeContext.NoTypes);\n                        if (this.scanner.pos == svPos) {\n                            // no progress\n                            this.currentToken = this.scanner.scan();\n                            ast = temp;\n                        }\n                        else if ((this.currentToken.tokenId == TokenID.Colon) && (!this.scanner.lastTokenHadNewline()) &&\n                                        temp && (temp.nodeType == NodeType.Name)) {\n                                            // It\'s a label\n                            if (labelList == null) {\n                                labelList = new ASTList();\n                            }\n                            labelList.append(new Label(<Identifier>temp));\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else {\n                            // expression statement\n                            ast = temp;\n                            needTerminator = true;\n                        }\n                }\n                if (ast) {\n                    break;\n                }\n            }\n            if (needTerminator) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.Semicolon:\n                        this.currentToken = this.scanner.scan();\n                        ast.flags |= ASTFlags.ExplicitSemicolon;\n                        break;\n                    case TokenID.EndOfFile:\n                        // Extend any incomplete statements to include EOF token. This makes sure that this node is in the path \n                        // when completion or parameter help is requested.\n                        ast.limChar = this.scanner.pos;\n                        // IntentionaCloseBracethrough\n                    case TokenID.CloseBrace:\n                        ast.flags |= ASTFlags.AutomaticSemicolon;\n                        if (this.style_requireSemi) {\n                            this.reportParseStyleError("no automatic semicolon");\n                        }\n                        break;\n                    default:\n                        if (!this.scanner.lastTokenHadNewline()) {\n                            this.reportParseError("Expected \';\'");\n                        }\n                        else {\n                            ast.flags |= ASTFlags.AutomaticSemicolon;\n                            if (this.style_requireSemi) {\n                                this.reportParseStyleError("no automatic semicolon");\n                            }\n                        }\n                        break;\n                }\n            }\n            if (labelList) {\n                ast = new LabeledStatement(labelList, ast);\n            }\n\n            ///////////////////////////////////////////////////////////\n            //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n            //      as they are sometimes not specific enough for each statement kind.\n            ast.minChar = minChar;\n            // Only update "limChar" if it is not better than "lastTokenLimChar()"\n            ast.limChar = max(ast.limChar, this.scanner.lastTokenLimChar());\n            //\n            ///////////////////////////////////////////////////////////\n\n            if (preComments) {\n                ast.preComments = preComments;\n            }\n            if (this.ambientModule && (!this.okAmbientModuleMember(ast))) {\n                this.reportParseError("statement not permitted within ambient module");\n            }\n            ast.flags |= ASTFlags.IsStatement;\n            return ast;\n        }\n\n        private okAmbientModuleMember(ast: AST) {\n            var nt = ast.nodeType;\n            return (nt == NodeType.ClassDeclaration) || (nt == NodeType.ImportDeclaration) || (nt == NodeType.InterfaceDeclaration) || (nt == NodeType.ModuleDeclaration) ||\n                (nt == NodeType.Empty) || (nt == NodeType.VarDecl) || \n                ((nt == NodeType.Block) && !(<Block>ast).isStatementBlock) ||\n                ((nt == NodeType.FuncDecl) && ((<FuncDecl>ast).isMethod()));\n        }\n\n        private parseStatementList(errorRecoverySet: ErrorRecoverySet,\n                                   statements: ASTList,\n                                   sourceElms: bool,\n                                   noLeadingCase: bool,\n                                   allowedElements: AllowedElements,\n                                   parentModifiers: Modifiers): void {\n            var directivePrologue = sourceElms;\n            statements.minChar = this.scanner.startPos;\n            var limChar = this.scanner.pos;\n            var innerStmts = (allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None;\n            var classNope = (allowedElements & AllowedElements.ClassDeclarations) == AllowedElements.None;\n\n            errorRecoverySet |= ErrorRecoverySet.TypeScriptS | ErrorRecoverySet.RCurly;\n\n            this.state = ParseState.StartStatementList;\n            var oldStrictMode = this.strictMode;\n            this.nestingLevel++;\n            for (; ;) {\n                if ((this.currentToken.tokenId == TokenID.CloseBrace) ||\n                    (noLeadingCase && ((this.currentToken.tokenId == TokenID.Case) || (this.currentToken.tokenId == TokenID.Default))) ||\n                    (innerStmts && (this.currentToken.tokenId == TokenID.Export)) ||\n                    (classNope && (this.currentToken.tokenId == TokenID.Class)) ||\n                    (this.currentToken.tokenId == TokenID.EndOfFile)) {\n                    this.state = ParseState.EndStmtList;\n                    statements.limChar = limChar;\n                    if (statements.members.length == 0) {\n                        statements.preComments = this.parseComments();\n                    }\n                    else {\n                        statements.postComments = this.parseComments();\n                    }\n                    this.strictMode = oldStrictMode;\n                    this.nestingLevel--;\n                    return;\n                }\n\n                var stmt = this.parseStatement(errorRecoverySet &\n                                        (~(ErrorRecoverySet.Else | ErrorRecoverySet.RParen |\n                                           ErrorRecoverySet.Catch | ErrorRecoverySet.Colon)),\n                                        allowedElements, parentModifiers);\n\n\n                if (stmt) {\n                    stmt.postComments = this.combineComments(stmt.postComments, this.parseCommentsForLine(this.scanner.prevLine));\n                    statements.append(stmt);\n                    limChar = stmt.limChar;\n                    if (directivePrologue) {\n                        if (stmt.nodeType == NodeType.QString) {\n                            var qstring = <StringLiteral>stmt;\n                            if (qstring.text == "\\"use strict\\"") {\n                                statements.flags |= ASTFlags.StrictMode;\n                                this.strictMode = true;\n                            }\n                            else {\n                                directivePrologue = false;\n                            }\n                        }\n                        else {\n                            directivePrologue = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        private fname = "";\n\n        public quickParse(sourceText: ISourceText, filename: string, unitIndex: number): QuickParseResult {\n            //TODO: REVIEW: We set this to avoid adding a "module" decl in the resulting script (see parse() method)\n            var svGenTarget = TypeScript.moduleGenTarget;\n            try {\n                TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Local;\n                var script = this.parse(sourceText, filename, unitIndex, AllowedElements.QuickParse);\n                return new QuickParseResult(script, this.scanner.lexState);\n            }\n            finally {\n                TypeScript.moduleGenTarget = svGenTarget;\n            }\n        }\n\n        public parse(sourceText: ISourceText, filename: string, unitIndex: number, allowedElements = AllowedElements.Global): Script {\n            // Reset all parser state here.  This allows us to be resilient to reentrancy if an \n            // exception is thrown.\n            this.fname = filename;\n            this.currentUnitIndex = unitIndex;\n\n            this.currentToken = null;\n            this.needTerminator = false;\n            this.inFunction = false;\n            this.inInterfaceDecl = false;\n            this.inFncDecl = false;\n            this.state = ParseState.StartStatementList;\n            this.ambientModule = false;\n            this.ambientClass = false;\n            this.topLevel = true;\n            this.allowImportDeclaration = true;\n            this.prevIDTok = null;\n            this.statementInfoStack = new IStatementInfo[];\n            this.hasTopLevelImportOrExport = false;\n            this.strictMode = false;\n            this.nestingLevel = 0;\n            this.prevExpr = null;\n            this.currentClassDefinition = null;\n            this.parsingClassConstructorDefinition = false;\n            this.parsingDeclareFile = false;\n            this.amdDependencies = [];\n            this.inferPropertiesFromThisAssignment = false;\n            this.requiresExtendsBlock = false;\n\n            this.scanner.resetComments();\n            this.scanner.setErrorHandler((message) =>this.reportParseError(message));\n            this.scanner.setSourceText(sourceText, LexMode.File);\n\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var minChar = this.scanner.pos;\n            this.currentToken = this.scanner.scan();\n            this.pushDeclLists();\n            var bod = new ASTList();\n            bod.minChar = minChar;\n\n            this.state = ParseState.StartScript;\n            this.parsingDeclareFile = isDSTRFile(filename) || isDTSFile(filename);\n\n            while (true) {\n                this.parseStatementList(\n                    ErrorRecoverySet.EOF | ErrorRecoverySet.Func,\n                    bod, /*sourceElements:*/ true, /*noLeadingCase:*/ false,\n                    allowedElements, Modifiers.None);\n\n                if (this.currentToken.tokenId === TokenID.EndOfFile) {\n                    break;\n                }\n\n                // Still have remaining tokens in the file.  Report error for this unexpected token,\n                // skip it, and continue trying to parse statements until we\'re done. \n                var badToken = tokenTable[this.currentToken.tokenId];\n                this.reportParseError("Unexpected statement block terminator \'" + badToken.text + "\'");\n\n                this.currentToken = this.scanner.scan();\n            }\n\n            this.state = ParseState.EndScript;\n\n            bod.limChar = this.scanner.pos;\n\n            var topLevelMod: ModuleDeclaration = null;\n            if (moduleGenTarget != ModuleGenTarget.Local && this.hasTopLevelImportOrExport) {\n                var correctedFileName = switchToForwardSlashes(filename);\n                var id: Identifier = new Identifier(correctedFileName);\n                topLevelMod = new ModuleDeclaration(id, bod, this.topVarList(), this.topScopeList(), null);\n\n                topLevelMod.modFlags |= ModuleFlags.IsDynamic;\n                topLevelMod.modFlags |= ModuleFlags.IsWholeFile;\n                topLevelMod.modFlags |= ModuleFlags.Exported;\n\n                if (this.parsingDeclareFile) {\n                    topLevelMod.modFlags |= ModuleFlags.Ambient;\n                }\n\n                topLevelMod.minChar = minChar;\n                topLevelMod.limChar = this.scanner.pos;\n                topLevelMod.prettyName = getPrettyName(correctedFileName);\n                topLevelMod.containsUnicodeChar = this.scanner.seenUnicodeChar;\n                topLevelMod.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n\n                topLevelMod.amdDependencies = this.amdDependencies;\n\n                bod = new ASTList();\n                bod.minChar = topLevelMod.minChar;\n                bod.limChar = topLevelMod.limChar;\n                bod.append(topLevelMod);\n            }\n\n            var script = new Script(this.topVarList(), this.topScopeList());\n            script.bod = bod;\n            this.popDeclLists();\n            script.minChar = minChar;\n            script.limChar = this.scanner.pos;\n            script.locationInfo = new LocationInfo(filename, this.scanner.lineMap, unitIndex);\n            script.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            script.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            script.isDeclareFile = this.parsingDeclareFile;\n            script.topLevelMod = topLevelMod;\n            script.containsUnicodeChar = this.scanner.seenUnicodeChar;\n            script.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n            script.requiresExtendsBlock = this.requiresExtendsBlock;\n            return script;\n        }\n    }\n\n    export function quickParse(logger: TypeScript.ILogger, scopeStartAST: AST, sourceText: ISourceText, minChar: number, limChar: number,\n        errorCapture: (minChar: number, charLen: number, message: string, unitIndex: number) => void ): QuickParseResult {\n\n        var fragment = sourceText.getText(minChar, limChar);\n        logger.log("Quick parse range (" + minChar + "," + limChar + "): \\"" + TypeScript.stringToLiteral(fragment, 100) + "\\"");\n\n        var quickParser = new Parser();\n        quickParser.setErrorRecovery(null);\n        quickParser.errorCallback = errorCapture;\n\n        // REVIEW: use enclosing scope to determine this\n        // REVIEW: Why even use class here?\n        var quickClassDecl = new ClassDeclaration(null, null, null, null);\n        quickParser.currentClassDecl = quickClassDecl;\n\n        var result = quickParser.quickParse(new StringSourceText(fragment), "", 0);\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // We need to catch both left and right quotes\n    // (depending on your editor\'s font, this may not be clear...)    \n    export function stripQuotes(str: string) {\n        return str.replace("\\"", "").replace("\'", "").replace("\'", "").replace("\\"", "")\n    }\n\n    export function isQuoted(str: string) {\n        return str.indexOf("\\"") != -1 || str.indexOf("\'") != -1 || str.indexOf("\'") != -1 || str.indexOf("\\"") != -1;\n    }\n\n    export function quoteStr(str: string) {\n        return "\\"" + str + "\\"";\n    }\n\n    export function swapQuotes(str: string) {\n\n        if (str.indexOf("\\"") != -1) {\n            str = str.replace("\\"", "\'");\n            str = str.replace("\\"", "\'");\n        }\n        else {\n            str = str.replace("\'", "\\"");\n            str = str.replace("\'", "\\"");\n        }\n\n        return str;\n    }\n\n    export function switchToForwardSlashes(path: string) {\n        return path.replace(/\\\\/g, "/");\n    }\n\n    export function trimModName(modName: string) {\n        // in case\'s it\'s a declare file...\n        if (modName.length > 6 && modName.substring(modName.length - 6, modName.length) == ".d.str") {\n            return modName.substring(0, modName.length - 6);\n        }\n        if (modName.length > 4 && modName.substring(modName.length - 4, modName.length) == ".str") {\n            return modName.substring(0, modName.length - 4);\n        }\n        if (modName.length > 5 && modName.substring(modName.length - 5, modName.length) == ".d.ts") {\n            return modName.substring(0, modName.length - 5);\n        }\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".ts") {\n            return modName.substring(0, modName.length - 3);\n        }\n        // in case\'s it\'s a .js file\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".js") {\n            return modName.substring(0, modName.length - 3);\n        }\n\n        return modName;\n    }\n\n    export function getDeclareFilePath(fname: string) {\n        return isSTRFile(fname) ? changePathToDSTR(fname) : isTSFile(fname) ? changePathToDTS(fname) : changePathToDTS(fname);\n    }\n\n    function isFileOfExtension(fname: string, ext: string) {\n        var invariantFname = fname.toLocaleUpperCase();\n        var invariantExt = ext.toLocaleUpperCase();\n        var extLength = invariantExt.length;\n        return invariantFname.length > extLength && invariantFname.substring(invariantFname.length - extLength, invariantFname.length) == invariantExt;\n    }\n\n    export function isJSFile(fname: string) {\n        return isFileOfExtension(fname, ".js");\n    }\n\n    export function isSTRFile(fname: string) {\n        return isFileOfExtension(fname, ".str");\n    }\n\n    export function isTSFile(fname: string) {\n        return isFileOfExtension(fname, ".ts");\n    }\n\n    export function isDSTRFile(fname: string) {\n        return isFileOfExtension(fname, ".d.str");\n    }\n\n    export function isDTSFile(fname: string) {\n        return isFileOfExtension(fname, ".d.ts");\n    }\n\n    export function getPrettyName(modPath: string, quote?=true, treatAsFileName?=false) { \n        var modName = treatAsFileName ? switchToForwardSlashes(modPath) : trimModName(stripQuotes(modPath));\n        var components = this.getPathComponents(modName);\n        return components.length ? (quote ? quoteStr(components[components.length - 1]) : components[components.length - 1]) : modPath;\n    }\n\n    export function getPathComponents(path: string) {\n        return path.split("/");\n    }\n\n    export function getRelativePathToFixedPath(fixedModFilePath: string, absoluteModPath: string) {\n        absoluteModPath = switchToForwardSlashes(absoluteModPath);\n\n        var modComponents = this.getPathComponents(absoluteModPath);\n        var fixedModComponents = this.getPathComponents(fixedModFilePath);\n\n        // Find the component that differs\n        var joinStartIndex = 0;\n        for (; joinStartIndex < modComponents.length && joinStartIndex < fixedModComponents.length ; joinStartIndex++) {\n            if (fixedModComponents[joinStartIndex] != modComponents[joinStartIndex]) {\n                break;\n            }\n        }\n\n        // Get the relative path\n        if (joinStartIndex != 0) {\n            var relativePath = "";\n            var relativePathComponents = modComponents.slice(joinStartIndex, modComponents.length);\n            for (; joinStartIndex < fixedModComponents.length; joinStartIndex++) {\n                if (fixedModComponents[joinStartIndex] != "") {\n                    relativePath = relativePath + "../";\n                }\n            }\n\n            return relativePath + relativePathComponents.join("/");\n        }\n\n        return absoluteModPath;\n    }\n\n    export function quoteBaseName(modPath: string) {\n        var modName = trimModName(stripQuotes(modPath));\n        var path = getRootFilePath(modName);\n        if (path == "") {\n            return modPath;\n        }\n        else {\n            var components = modName.split(path);\n            var fileIndex = components.length > 1 ? 1 : 0;\n            return quoteStr(components[fileIndex]);\n        }\n    }\n\n    export function changePathToSTR(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".str";\n    }\n\n    export function changePathToDSTR(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".d.str";\n    }\n\n    export function changePathToTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".ts";\n    }\n\n    export function changePathToDTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".d.ts";\n    }\n\n    export function isRelative(path: string) {\n        return path.charAt(0) == ".";\n    }\n    export function isRooted(path: string) {\n        return path.charAt(0) == "\\\\" || path.charAt(0) == "/" || (path.indexOf(":\\\\") != -1) || (path.indexOf(":/") != -1);\n    }\n\n    export function getRootFilePath(outFname: string) {\n        if (outFname == "") {\n            return outFname;\n        }\n        else {\n            var isPath = outFname.indexOf("/") != -1;\n            return isPath ? filePath(outFname) : "";\n        }\n    }\n\n    export function filePathComponents(fullPath: string) {\n        fullPath = switchToForwardSlashes(fullPath);\n        var components = getPathComponents(fullPath);\n        return components.slice(0, components.length - 1);\n    }\n\n    export function filePath(fullPath: string) {\n        var path = filePathComponents(fullPath);\n        return path.join("/") + "/";\n    }\n\n    export function normalizeURL(url: string): string {\n        var hostDomainAndPortRegex = /^(https?:\\/\\/[\\-\\w\\.]+(:\\d+)?\\/)(.*)$/i;\n        var matches = hostDomainAndPortRegex.exec(url);\n        if (matches) {\n            var hostDomainAndPort = matches[1];\n            var actualPath = matches[3];\n            return hostDomainAndPort + normalizePath(actualPath);\n        }\n        return normalizePath(url);\n    }\n\n    export var pathNormalizeRegExp = /\\//g;\n\n    export function normalizePath(path: string): string {\n        path = switchToForwardSlashes(path);\n        var startedWithSep = path.charAt(0) === "/";\n        var parts = this.getPathComponents(path);\n        for (var i = 0; i < parts.length; i++) {\n            if (parts[i] === "." || parts[i] === "") {\n                parts.splice(i, 1);\n                i--;\n            }\n            if (i > 0 && parts[i] === ".." && parts[i - 1] !== "..") {\n                parts.splice(i - 1, 2);\n                i -= 2;\n            }\n        }\n        return (startedWithSep ? "/" : "") + parts.join("/");\n    }\n\n    export function normalizeImportPath(path: string): string {\n        return normalizePath(path);\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    /// Compiler settings\n\n    export class StyleSettings {\n        // bitwise operations not permitted\n        public bitwise = false;  \n        // disallow non-block statements as bodies of compound statements\n        public blockInCompoundStmt = false;\n        // disallow == and !=\n        public eqeqeq = false;\n        // require body of for in loop to start with a filter\n        public forin = false;\n        // empty blocks permitted\n        public emptyBlocks = true;\n        // require result of new expression to be used (no new just for side-effects)\n        public newMustBeUsed = false;\n        // require semicolons to terminate statements\n        public requireSemi = false;\n        // no top-level assignment in conditionals if (a=b) { ...\n        public assignmentInCond = false;\n        // no == null or != null\n        public eqnull = false;\n        // permit eval\n        public evalOK = true;\n        // permit var use if decl in inner scope as in if (c) { var v=10; } v=11;\n        public innerScopeDeclEscape = true;\n        // permit functions in loops\n        public funcInLoop = true;\n        // permit re-declaration of local variable \n        public reDeclareLocal = true;\n        // permit obj[\'x\'] in addition to obj.x\n        public literalSubscript = true;\n        // flag implicit \'any\'\n        public implicitAny = false;\n\n        public setOption(opt: string, val: bool): bool {\n            var optExists = this[opt];\n            if (optExists !== undefined) {\n                this[opt] = val;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        \n        public parseOptions(str: string) {\n            var opts=str.split(";");\n            for (var i = 0, len = opts.length; i < len; i++) {\n                var opt = opts[i];\n                var val = true;\n                var colonIndex=opt.lastIndexOf(":");\n                if (colonIndex >= 0) {\n                    var valStr = opt.substring(colonIndex+1);\n                    opt = opt.substring(0, colonIndex);\n                    if (valStr == "off") {\n                        val = false;\n                    }\n                }\n                if (!this.setOption(opt, val)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    \n    export class CompilationSettings {\n        public styleSettings = new StyleSettings();\n        public propagateConstants = false;\n        public minWhitespace = false;\n        public parseOnly = false;\n        public errorRecovery = false;\n        public emitComments = false;\n        public watch = false;\n        public exec = false;\n        public resolve = true;\n        public controlFlow = false;\n        public printControlFlow = false;\n        public controlFlowUseDef = false;\n        public errorOnWith = true;\n        public preprocess = true;\n        public canCallDefinitionSignature = false;\n\n        public inferPropertiesFromThisAssignment = false;\n        public useDefaultLib = true;\n\n        public codeGenTarget = CodeGenTarget.ES3;\n        public moduleGenTarget = ModuleGenTarget.Synchronous;\n        // --out option passed. \n        // Default is the "" which leads to multiple files generated next to the.ts files\n        public outputOption: string = "";\n        public mapSourceFiles = false;\n        public generateDeclarationFiles = false;\n\n        public useCaseSensitiveFileResolution = false;\n\n        public setStyleOptions(str: string) {\n            this.styleSettings.parseOptions(str);\n        }\n    }\n\n    ///\n    /// Preprocessing\n    ///\n    export interface IPreProcessedFileInfo {\n        settings: CompilationSettings;\n        referencedFiles: IFileReference[];\n        importedFiles: IFileReference[];\n        isLibFile: bool;\n    }\n\n    function getFileReferenceFromReferencePath(comment: string): IFileReference {\n        var referencesRegEx = /^(\\/\\/\\/\\s*<reference\\s+path=)(\'|")(.+?)\\2\\s*(static=(\'|")(.+?)\\2\\s*)*\\/>/gim;\n        var match = referencesRegEx.exec(comment);\n\n        if (match) {\n            var path: string = normalizePath(match[3]);\n            var adjustedPath = normalizePath(path);\n    \n            var isResident = match.length >= 7 && match[6] == "true";\n            if (isResident) {\n                CompilerDiagnostics.debugPrint(path + " is resident");\n            }\n            return { minChar: 0, limChar: 0, path: switchToForwardSlashes(adjustedPath), isResident: isResident };\n        }\n        else {\n            return null;\n        }\n    }\n\n    // used in the parser, but kept here in case we want to reintegrate it with preprocessing\n    export function getAdditionalDependencyPath(comment: string): string {\n        var amdDependencyRegEx = /^(\\/\\/\\/\\s*<amd-dependency\\s+path=)(\'|")(.+?)\\2\\s*(static=(\'|")(.+?)\\2\\s*)*\\/>/gim;\n        var match = amdDependencyRegEx.exec(comment);\n\n        if (match) {\n            var path: string = match[3];\n            return path;\n        }\n        else {\n            return null;\n        }\n    }\n\n    export function getImplicitImport(comment: string): bool {\n        var implicitImportRegEx = /^(\\/\\/\\/\\s*<implicit-import\\s*)*\\/>/gim;\n        var match = implicitImportRegEx.exec(comment);\n\n        if (match) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    export function getStyleSettings(comment: string, styleSettings: StyleSettings) {\n        var styleRegEx = /^(\\/\\/\\/\\s*<style\\s+)(([a-zA-Z])+=(\'|").+(\'|"))\\s*\\/>/gim;\n\n        var settings = styleRegEx.exec(comment);\n\n        if (settings) {\n            var settingsRegEx = /^([a-zA-Z]+=[\'"]on[\'|"])/gim;\n            settings = settingsRegEx.exec(settings[2]);\n                \n            if (settings) {\n                for (var i = 0; i < settings.length; i++) {\n                    var setting = (<string>settings[i]).split("=");\n                    var on = "\\"on\\"";\n\n                    switch (setting[0]) {\n                        case "blockInCompoundStmt": styleSettings.blockInCompoundStmt = setting[1] == on; break;\n                        case "eqeqeq": styleSettings.eqeqeq = setting[1] == on; break;\n                        case "forin": styleSettings.forin = setting[1] == on; break;\n                        case "emptyBlocks": styleSettings.emptyBlocks = setting[1] == on; break;\n                        case "newMustBeUsed": styleSettings.newMustBeUsed = setting[1] == on; break;\n                        case "requireSemi": styleSettings.requireSemi = setting[1] == on; break;\n                        case "assignmentInCond": styleSettings.assignmentInCond = setting[1] == on; break;\n                        case "eqnull": styleSettings.eqnull = setting[1] == on; break;\n                        case "evalOK": styleSettings.evalOK = setting[1] == on; break;\n                        case "innerScopeDeclEscape": styleSettings.innerScopeDeclEscape = setting[1] == on; break;\n                        case "funcInLoop": styleSettings.funcInLoop = setting[1] == on; break;\n                        case "reDeclareLocal": styleSettings.reDeclareLocal = setting[1] == on; break;\n                        case "literalSubscript": styleSettings.literalSubscript = setting[1] == on; break;\n                        case "implicitAny": styleSettings.implicitAny = setting[1] == on; break;                               \n                    }\n                }\n            }\n        }\n    }\n\n    export function getReferencedFiles(sourceText: ISourceText): IFileReference[] {\n        var preProcessInfo = preProcessFile(sourceText, null, false);\n        return preProcessInfo.referencedFiles;\n    }\n\n    export function preProcessFile(sourceText: ISourceText, options=new CompilationSettings(), readImportFiles? = true): IPreProcessedFileInfo {\n        var scanner = new Scanner();\n        scanner.resetComments();\n        scanner.setSourceText(sourceText, LexMode.File);\n\n        var tok: Token = scanner.scan();\n        var comments: CommentToken[] = [];\n        var comment: CommentToken = null;\n        var leftCurlies: Token[] = [];\n\n        var settings: CompilationSettings = options;\n        var referencedFiles: IFileReference[] = [];\n        var importedFiles: IFileReference[] = [];\n        var isLibFile: bool = false;\n\n        // only search out dynamic mods\n        // if you find a dynamic mod, ignore every other mod inside, until you balance rcurlies\n\n        while (tok.tokenId != TokenID.EndOfFile) {\n\n            if (readImportFiles && tok.tokenId == TokenID.Import) {\n\n                tok = scanner.scan();\n\n                if (tok.tokenId == TokenID.Identifier || convertTokToID(tok, false)) {\n                    tok = scanner.scan();\n\n                    if (tok.tokenId == TokenID.Equals) {\n                        tok = scanner.scan();\n\n                        if (tok.tokenId == TokenID.Module) {\n                            tok = scanner.scan();\n                            if (tok.tokenId == TokenID.OpenParen) {\n                                tok = scanner.scan();\n\n                                // import foo = module("foo")\n                                if (tok.tokenId == TokenID.StringLiteral) {\n                                    var ref = { minChar: scanner.startPos, limChar: scanner.pos, path: stripQuotes(switchToForwardSlashes(tok.getText())), isResident: false };\n                                    importedFiles.push(ref);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (tok.tokenId == TokenID.OpenBrace) {\n                leftCurlies.push(tok);\n            }\n\n            if (tok.tokenId == TokenID.CloseBrace) {\n                leftCurlies.pop();\n            }\n\n            tok = scanner.scan();\n        }\n\n        // deal with comment references, amd dependencies and style settings\n        // REVIEW: We could potentially do this inline with the above, if we\n        // set Scanner::scanComments to \'true\'\n        comments = scanner.getComments();\n\n        for (var iComment = 0; iComment < comments.length; iComment++) {\n            comment = comments[iComment];\n            \n            if (!comment.isBlock) {\n                var referencedCode = getFileReferenceFromReferencePath(comment.getText());\n                if (referencedCode) {\n                    referencedCode.minChar = comment.startPos;\n                    referencedCode.limChar = referencedCode.minChar + comment.value.length;\n                    referencedFiles.push(referencedCode);\n                }\n\n                if (settings) {\n                    getStyleSettings(comment.getText(), settings.styleSettings);\n\n                    // is it a lib file?\n                    var isNoLibRegex = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib=)(\'|")(.+?)\\2\\s*\\/>/gim;\n                    var isNoLibMatch: any = isNoLibRegex.exec(comment.getText());\n                    if (isNoLibMatch) {\n                        isLibFile = (isNoLibMatch[3] == "true");\n                    }\n                }\n            }\n        }\n\n        return { settings: settings, referencedFiles: referencedFiles, importedFiles: importedFiles, isLibFile: isLibFile };\n    }\n\n} // Tools//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // TODO: refactor indent logic for use in emit\n    export class PrintContext {\n        public builder = "";\n        public indent1 = "  ";\n        public indentStrings: string[] = [];\n        public indentAmt = 0;\n\n        constructor (public outfile: ITextWriter, public parser: Parser) {\n        }\n\n        public increaseIndent() {\n            this.indentAmt++;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt--;\n        }\n\n        public startLine() {\n            if (this.builder.length > 0) {\n                CompilerDiagnostics.Alert(this.builder);\n            }\n            var indentString = this.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = "";\n                for (var i = 0; i < this.indentAmt; i++) {\n                    indentString += this.indent1;\n                }\n                this.indentStrings[this.indentAmt] = indentString;\n            }\n            this.builder += indentString;\n        }\n\n        public write(s) {\n            this.builder += s;\n        }\n\n        public writeLine(s) {\n            this.builder += s;\n            this.outfile.WriteLine(this.builder);\n            this.builder = "";\n        }\n\n    }\n\n    export function prePrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n\n        ast.print(pc);\n        pc.increaseIndent();\n        return ast;\n    }\n\n\n    export function postPrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n        pc.decreaseIndent();\n        return ast;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export interface IResolvedFile {\n        content: string;\n        path: string;\n    }\n\n    /// This class acts as a convenience class to store path and content information in places\n    /// where we need an ISourceText object\n    export class SourceUnit implements ISourceText, IResolvedFile {\n        public referencedFiles: IFileReference[] = null;\n        constructor(public path: string, public content: string) {\n        }\n\n        public getText(start: number, end: number): string { return this.content.substring(start, end); }\n        public getLength(): number { return this.content.length; }\n    }\n\n    export interface IFileReference {\n        minChar: number;\n        limChar: number;\n        path: string;\n        isResident: bool;\n    }\n\n    /// Limited API for file system manipulation\n    export interface IFileSystemObject {\n        resolvePath(path: string): string;\n        readFile(path: string): string;\n        findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n        dirName(path: string): string;\n    }\n\n    export class CompilationEnvironment {\n        constructor (public compilationSettings: CompilationSettings, public ioHost: IFileSystemObject) { }\n        public residentCode: SourceUnit[] = [];\n        public code: SourceUnit[] = [];\n    }\n\n    export interface IResolutionDispatcher {\n        postResolutionError(errorFile: string, errorMessage: string, errorObject: any): void;\n        postResolution(path: string, source: ISourceText): void;\n    }\n\n    export interface ICodeResolver {\n        resolveCode(referencePath: string, rootPath: string, performSearch:bool, state: IResolutionDispatcher): void;\n    }\n\n    export interface IResolverHost {\n        resolveCompilationEnvironment(preEnvironment: CompilationEnvironment, resolver: ICodeResolver, traceDependencies: bool): CompilationEnvironment;\n    }\n\n    export class CodeResolver implements TypeScript.ICodeResolver {\n        public visited: any = { };\n\n        constructor (public environment: CompilationEnvironment) { }\n\n        public resolveCode(referencePath: string, parentPath: string, performSearch: bool, resolutionDispatcher: TypeScript.IResolutionDispatcher): void {\n            \n            var resolvedFile: IResolvedFile = { content: null, path: referencePath };\n            \n            var ioHost = this.environment.ioHost;\n            \n            // If the path is relative, normalize it, based on the root\n            var isRelativePath = TypeScript.isRelative(referencePath);\n            var isRootedPath = isRelativePath ? false : isRooted(referencePath);\n            var normalizedPath: string = \n                isRelativePath ? ioHost.resolvePath(parentPath + "/" + referencePath) : \n                // we only follow the second clause if the path is a non-rooted triple-slash reference path\n                (isRootedPath || !parentPath || performSearch ? referencePath : parentPath + "/" + referencePath);\n\n            // We use +=.ts to make sure we don\'t accidentally pick up ".js" files or the like\n            if (!isSTRFile(normalizedPath) && !isTSFile(normalizedPath)) {\n                normalizedPath += ".ts";  //changePathToSTR(normalizedPath);\n            }\n\n            normalizedPath = switchToForwardSlashes(stripQuotes(normalizedPath));\n            var absoluteModuleID = this.environment.compilationSettings.useCaseSensitiveFileResolution ? normalizedPath : normalizedPath.toLocaleUpperCase();\n            // read the file contents - if it doesn\'t exist, trigger a resolution error\n            if (!this.visited[absoluteModuleID]) {\n\n                // if the path is relative, or came from a reference tag, we don\'t perform a search\n                if (isRelativePath || isRootedPath || !performSearch) {\n                    try {\n                        CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                            \n                        // Look for the .ts file first - if not present, use the .ts, the .d.str and the .d.ts\n                        try {\n                            resolvedFile.content = ioHost.readFile(normalizedPath);\n                        }\n                        catch (err) {\n                            try {\n                                if (isSTRFile(normalizedPath)) {\n                                    normalizedPath = changePathToTS(normalizedPath);\n                                }\n                                else if (isTSFile(normalizedPath)) {\n                                    normalizedPath = changePathToSTR(normalizedPath);\n                                }\n                                CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                                resolvedFile.content = ioHost.readFile(normalizedPath);\n                            }\n                            catch (err) {\n                                normalizedPath = changePathToDSTR(normalizedPath);\n                                CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n\n                                try {\n                                    resolvedFile.content = ioHost.readFile(normalizedPath);\n                                }\n                                catch (err) {\n                                    normalizedPath = changePathToDTS(normalizedPath);\n                                    CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                                    resolvedFile.content = ioHost.readFile(normalizedPath);\n                                }\n                            }\n                        }\n                        CompilerDiagnostics.debugPrint("   Found code at " + normalizedPath);\n\n                        resolvedFile.path = normalizedPath;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    catch (err) {\n                        CompilerDiagnostics.debugPrint("   Did not find code for " + referencePath);\n                    }\n                }\n                else {\n\n                    // if the path is non-relative, we should attempt to search on the relative path\n                    resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n\n                    if (!resolvedFile) {\n                        if (isSTRFile(normalizedPath)) {\n                            normalizedPath = changePathToTS(normalizedPath);\n                        }\n                        else if (isTSFile(normalizedPath)) {\n                            normalizedPath = changePathToSTR(normalizedPath);\n                        }\n                        resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                    }\n\n                    if (!resolvedFile) {\n                        normalizedPath = changePathToDTS(normalizedPath);\n                        resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                        if (!resolvedFile) {\n                            normalizedPath = changePathToDSTR(normalizedPath);\n                            resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                        }\n                    }\n\n                    if (resolvedFile) {\n                        resolvedFile.path = switchToForwardSlashes(TypeScript.stripQuotes(resolvedFile.path));\n                        CompilerDiagnostics.debugPrint(referencePath + " resolved to: " + resolvedFile.path);\n                        resolvedFile.content = resolvedFile.content;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    else {\n                        CompilerDiagnostics.debugPrint("Could not find " + referencePath);\n                    }\n                }\n\n                if (resolvedFile && resolvedFile.content != null) {\n                    // preprocess the file, to gather dependencies\n                    var rootDir = ioHost.dirName(resolvedFile.path);\n                    var sourceUnit = new SourceUnit(resolvedFile.path, resolvedFile.content);\n                    var preProcessedFileInfo = preProcessFile(sourceUnit, this.environment.compilationSettings);\n                    sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;\n\n                    // resolve explicit references\n                    for (var i = 0; i < preProcessedFileInfo.referencedFiles.length; i++) {\n                        var referencedFile = preProcessedFileInfo.referencedFiles[i];\n                        var normalizedPath = isRooted(referencedFile.path) ? referencedFile.path : rootDir + "/" + referencedFile.path;\n                        normalizedPath = ioHost.resolvePath(normalizedPath);\n                        if (referencePath == normalizedPath) {\n                            resolutionDispatcher.postResolutionError(normalizedPath, "File contains reference to itself", null);\n                            continue;\n                        }\n                        this.resolveCode(referencedFile.path, rootDir, false, resolutionDispatcher);\n                    }\n                    \n                    // resolve imports\n                    for (var i = 0; i < preProcessedFileInfo.importedFiles.length; i++) {\n                        this.resolveCode(preProcessedFileInfo.importedFiles[i].path, rootDir, true, resolutionDispatcher);\n                    }\n\n                    // add the file to the appropriate code list\n                    resolutionDispatcher.postResolution(sourceUnit.path, sourceUnit);\n                }\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export var LexEOF = (-1);\n\n    export var LexCodeNWL = 0x0A;\n    export var LexCodeRET = 0x0D;\n    export var LexCodeLS =  0x2028;\n    export var LexCodePS =  0x2029;\n    export var LexCodeTAB = 0x09;\n    export var LexCodeVTAB = 0x0B;\n    export var LexCode_e = \'e\'.charCodeAt(0);\n    export var LexCode_E = \'E\'.charCodeAt(0);\n    export var LexCode_x = \'x\'.charCodeAt(0);\n    export var LexCode_X = \'X\'.charCodeAt(0);\n    export var LexCode_a = \'a\'.charCodeAt(0);\n    export var LexCode_A = \'A\'.charCodeAt(0);\n    export var LexCode_f = \'f\'.charCodeAt(0);\n    export var LexCode_F = \'F\'.charCodeAt(0);\n\n    export var LexCode_g = \'g\'.charCodeAt(0);\n    export var LexCode_m = \'m\'.charCodeAt(0);\n    export var LexCode_i = \'i\'.charCodeAt(0);\n\n    export var LexCode_u = \'u\'.charCodeAt(0);\n\n    export var LexCode_0 = \'0\'.charCodeAt(0);\n    export var LexCode_9 = \'9\'.charCodeAt(0);\n    export var LexCode_8 = \'8\'.charCodeAt(0);\n    export var LexCode_7 = \'7\'.charCodeAt(0);\n\n    export var LexCodeBSL = \'\\\\\'.charCodeAt(0);\n    export var LexCodeSHP = \'#\'.charCodeAt(0);\n    export var LexCodeBNG = \'!\'.charCodeAt(0);\n    export var LexCodeQUO = \'"\'.charCodeAt(0);\n    export var LexCodeAPO = \'\\\'\'.charCodeAt(0);\n    export var LexCodePCT = \'%\'.charCodeAt(0);\n    export var LexCodeAMP = \'&\'.charCodeAt(0);\n    export var LexCodeLPR = \'(\'.charCodeAt(0);\n    export var LexCodeRPR = \')\'.charCodeAt(0);\n    export var LexCodePLS = \'+\'.charCodeAt(0);\n    export var LexCodeMIN = \'-\'.charCodeAt(0);\n    export var LexCodeMUL = \'*\'.charCodeAt(0);\n    export var LexCodeSLH = \'/\'.charCodeAt(0);\n    export var LexCodeXOR = \'^\'.charCodeAt(0);\n    export var LexCodeCMA = \',\'.charCodeAt(0);\n    export var LexCodeDOT = \'.\'.charCodeAt(0);\n    export var LexCodeLT = \'<\'.charCodeAt(0);\n    export var LexCodeEQ = \'=\'.charCodeAt(0);\n    export var LexCodeGT = \'>\'.charCodeAt(0);\n    export var LexCodeQUE = \'?\'.charCodeAt(0);\n    export var LexCodeLBR = \'[\'.charCodeAt(0);\n    export var LexCodeRBR = \']\'.charCodeAt(0);\n    export var LexCodeUSC = \'_\'.charCodeAt(0);\n    export var LexCodeLC = \'{\'.charCodeAt(0);\n    export var LexCodeRC = \'}\'.charCodeAt(0);\n    export var LexCodeBAR = \'|\'.charCodeAt(0);\n    export var LexCodeTIL = \'~\'.charCodeAt(0);\n    export var LexCodeCOL = \':\'.charCodeAt(0);\n    export var LexCodeSMC = \';\'.charCodeAt(0);\n    export var LexCodeUnderscore = \'_\'.charCodeAt(0);\n    export var LexCodeDollar = \'$\'.charCodeAt(0);\n    export var LexCodeSpace = 32;\n    export var LexCodeAtSign = \'@\'.charCodeAt(0);\n    export var LexCodeASCIIChars = 128;\n\n    export var LexKeywordTable = undefined;\n    // TODO: use new Token[128];\n    var autoToken: Token[] = new Array(LexCodeASCIIChars);\n    var lexIdStartTable: bool[] = new Array(LexCodeASCIIChars);\n\n    // Unicode range maps\n    // REVIEW: These range maps have been extracted from the Unicode specifications, they might be missing values, and/or include \n    //         incorrect ranges. but for the most they seem to be correct. A more accurate and thorough review is needed.\n\n    /*\n        As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n        IdentifierStart :: Can contain Unicode 3.0.0  categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter (Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).\n        IdentifierPart :: Can contain IdentifierStart + Unicode 3.0.0  categories Non-spacing mark (Mn), Combining spacing mark (Mc), Decimal number (Nd), or Connector punctuation (Pc).\n                    \n        Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n        http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n    */\n    var unicodeES3IdStart = [\n\t\t170, 170,181, 181,186, 186,192, 214,216, 246,248, 543,546, 563,592, 685,688, 696,699, 705,720, 721,736, 740,750, 750,890, 890,902, 902,904, 906,908, 908,910, 929,931, 974,976, 983,986, 1011,1024, 1153,1164, 1220,1223, 1224,1227, 1228,1232, 1269,1272, 1273,1329, 1366,1369, 1369,1377, 1415,1488, 1514,\n\t\t1520, 1522,1569, 1594,1600, 1610,1649, 1747,1749, 1749,1765, 1766,1786, 1788,1808, 1808,1810, 1836,1920, 1957,2309, 2361,2365, 2365,2384, 2384,2392, 2401,2437, 2444,2447, 2448,2451, 2472,2474, 2480,2482, 2482,2486, 2489,2524, 2525,2527, 2529,2544, 2545,2565, 2570,2575, 2576,2579, 2600,2602, 2608,2610, 2611,\n\t\t2613, 2614,2616, 2617,2649, 2652,2654, 2654,2674, 2676,2693, 2699,2701, 2701,2703, 2705,2707, 2728,2730, 2736,2738, 2739,2741, 2745,2749, 2749,2768, 2768,2784, 2784,2821, 2828,2831, 2832,2835, 2856,2858, 2864,2866, 2867,2870, 2873,2877, 2877,2908, 2909,2911, 2913,2949, 2954,2958, 2960,2962, 2965,2969, 2970,\n\t\t2972, 2972,2974, 2975,2979, 2980,2984, 2986,2990, 2997,2999, 3001,3077, 3084,3086, 3088,3090, 3112,3114, 3123,3125, 3129,3168, 3169,3205, 3212,3214, 3216,3218, 3240,3242, 3251,3253, 3257,3294, 3294,3296, 3297,3333, 3340,3342, 3344,3346, 3368,3370, 3385,3424, 3425,3461, 3478,3482, 3505,3507, 3515,3517, 3517,\n\t\t3520, 3526,3585, 3632,3634, 3635,3648, 3654,3713, 3714,3716, 3716,3719, 3720,3722, 3722,3725, 3725,3732, 3735,3737, 3743,3745, 3747,3749, 3749,3751, 3751,3754, 3755,3757, 3760,3762, 3763,3773, 3773,3776, 3780,3782, 3782,3804, 3805,3840, 3840,3904, 3911,3913, 3946,3976, 3979,4096, 4129,4131, 4135,4137, 4138,\n\t\t4176, 4181,4256, 4293,4304, 4342,4352, 4441,4447, 4514,4520, 4601,4608, 4614,4616, 4678,4680, 4680,4682, 4685,4688, 4694,4696, 4696,4698, 4701,4704, 4742,4744, 4744,4746, 4749,4752, 4782,4784, 4784,4786, 4789,4792, 4798,4800, 4800,4802, 4805,4808, 4814,4816, 4822,4824, 4846,4848, 4878,4880, 4880,4882, 4885,\n\t\t4888, 4894,4896, 4934,4936, 4954,5024, 5108,5121, 5740,5743, 5750,5761, 5786,5792, 5866,6016, 6067,6176, 6263,6272, 6312,7680, 7835,7840, 7929,7936, 7957,7960, 7965,7968, 8005,8008, 8013,8016, 8023,8025, 8025,8027, 8027,8029, 8029,8031, 8061,8064, 8116,8118, 8124,8126, 8126,8130, 8132,8134, 8140,8144, 8147,\n\t\t8150, 8155,8160, 8172,8178, 8180,8182, 8188,8319, 8319,8450, 8450,8455, 8455,8458, 8467,8469, 8469,8473, 8477,8484, 8484,8486, 8486,8488, 8488,8490, 8493,8495, 8497,8499, 8505,8544, 8579,12293, 12295,12321, 12329,12337, 12341,12344, 12346,12353, 12436,12445, 12446,12449, 12538,12540, 12542,12549, 12588,\n\t\t12593, 12686,12704, 12727,13312, 13312,19893, 19893,19968, 19968,40869, 40869,40960, 42124,44032, 44032,55203, 55203,63744, 64045,64256, 64262,64275, 64279,64285, 64285,64287, 64296,64298, 64310,64312, 64316,64318, 64318,64320, 64321,64323, 64324,64326, 64433,64467, 64829,64848, 64911,64914, 64967,\n\t\t65008, 65019,65136, 65138,65140, 65140,65142, 65276,65313, 65338,65345, 65370,65382, 65470,65474, 65479,65482, 65487,65490, 65495,65498, 65500\n\t];\n\n\tvar unicodeES3IdCont = [\n\t\t768, 846,864, 866,1155, 1158,1425, 1441,1443, 1465,1467, 1469,1471, 1471,1473, 1474,1476, 1476,1611, 1621,1632, 1641,1648, 1648,1750, 1756,1759, 1764,1767, 1768,1770, 1773,1776, 1785,1809, 1809,1840, 1866,1958, 1968,2305, 2307,2364, 2364,2366, 2381,2385, 2388,2402, 2403,2406, 2415,2433, 2435,2492, 2492,\n\t\t2494, 2500,2503, 2504,2507, 2509,2519, 2519,2530, 2531,2534, 2543,2562, 2562,2620, 2620,2622, 2626,2631, 2632,2635, 2637,2662, 2673,2689, 2691,2748, 2748,2750, 2757,2759, 2761,2763, 2765,2790, 2799,2817, 2819,2876, 2876,2878, 2883,2887, 2888,2891, 2893,2902, 2903,2918, 2927,2946, 2947,3006, 3010,3014, 3016,\n\t\t3018, 3021,3031, 3031,3047, 3055,3073, 3075,3134, 3140,3142, 3144,3146, 3149,3157, 3158,3174, 3183,3202, 3203,3262, 3268,3270, 3272,3274, 3277,3285, 3286,3302, 3311,3330, 3331,3390, 3395,3398, 3400,3402, 3405,3415, 3415,3430, 3439,3458, 3459,3530, 3530,3535, 3540,3542, 3542,3544, 3551,3570, 3571,3633, 3633,\n\t\t3636, 3642,3655, 3662,3664, 3673,3761, 3761,3764, 3769,3771, 3772,3784, 3789,3792, 3801,3864, 3865,3872, 3881,3893, 3893,3895, 3895,3897, 3897,3902, 3903,3953, 3972,3974, 3975,3984, 3991,3993, 4028,4038, 4038,4140, 4146,4150, 4153,4160, 4169,4182, 4185,4969, 4977,6068, 6099,6112, 6121,6160, 6169,6313, 6313,\n\t\t8255, 8256,8400, 8412,8417, 8417,12330, 12335,12441, 12442,12539, 12539,64286, 64286,65056, 65059,65075, 65076,65101, 65103,65296, 65305,65343, 65343,65381, 65381\n\t];\n\n\n    /*\n        As per ECMAScript Language Specification 5th Edition, Section 7.6: Identifier Names and Identifiers\n        IdentifierStart :: Can contain Unicode 6.2  categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter (Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).\n        IdentifierPart :: Can contain IdentifierStart + Unicode 6.2  categories Non-spacing mark (Mn), Combining spacing mark (Mc), Decimal number (Nd), Connector punctuation (Pc), <ZWNJ>, or <ZWJ>.\n                    \n        Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\n        http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\n    */\n\tvar unicodeES5IdStart = [\n\t\t170, 170,181, 181,186, 186,192, 214,216, 246,248, 705,710, 721,736, 740,748, 748,750, 750,880, 884,886, 887,890, 893,902, 902,904, 906,908, 908,910, 929,931, 1013,1015, 1153,1162, 1319,1329, 1366,1369, 1369,1377, 1415,1488, 1514,1520, 1522,1568, 1610,1646, 1647,1649, 1747,1749, 1749,1765, 1766,1774, 1775,\n\t\t1786, 1788,1791, 1791,1808, 1808,1810, 1839,1869, 1957,1969, 1969,1994, 2026,2036, 2037,2042, 2042,2048, 2069,2074, 2074,2084, 2084,2088, 2088,2112, 2136,2208, 2208,2210, 2220,2308, 2361,2365, 2365,2384, 2384,2392, 2401,2417, 2423,2425, 2431,2437, 2444,2447, 2448,2451, 2472,2474, 2480,2482, 2482,2486, 2489,\n\t\t2493, 2493,2510, 2510,2524, 2525,2527, 2529,2544, 2545,2565, 2570,2575, 2576,2579, 2600,2602, 2608,2610, 2611,2613, 2614,2616, 2617,2649, 2652,2654, 2654,2674, 2676,2693, 2701,2703, 2705,2707, 2728,2730, 2736,2738, 2739,2741, 2745,2749, 2749,2768, 2768,2784, 2785,2821, 2828,2831, 2832,2835, 2856,2858, 2864,\n\t\t2866, 2867,2869, 2873,2877, 2877,2908, 2909,2911, 2913,2929, 2929,2947, 2947,2949, 2954,2958, 2960,2962, 2965,2969, 2970,2972, 2972,2974, 2975,2979, 2980,2984, 2986,2990, 3001,3024, 3024,3077, 3084,3086, 3088,3090, 3112,3114, 3123,3125, 3129,3133, 3133,3160, 3161,3168, 3169,3205, 3212,3214, 3216,3218, 3240,\n\t\t3242, 3251,3253, 3257,3261, 3261,3294, 3294,3296, 3297,3313, 3314,3333, 3340,3342, 3344,3346, 3386,3389, 3389,3406, 3406,3424, 3425,3450, 3455,3461, 3478,3482, 3505,3507, 3515,3517, 3517,3520, 3526,3585, 3632,3634, 3635,3648, 3654,3713, 3714,3716, 3716,3719, 3720,3722, 3722,3725, 3725,3732, 3735,3737, 3743,\n\t\t3745, 3747,3749, 3749,3751, 3751,3754, 3755,3757, 3760,3762, 3763,3773, 3773,3776, 3780,3782, 3782,3804, 3807,3840, 3840,3904, 3911,3913, 3948,3976, 3980,4096, 4138,4159, 4159,4176, 4181,4186, 4189,4193, 4193,4197, 4198,4206, 4208,4213, 4225,4238, 4238,4256, 4293,4295, 4295,4301, 4301,4304, 4346,4348, 4680,\n\t\t4682, 4685,4688, 4694,4696, 4696,4698, 4701,4704, 4744,4746, 4749,4752, 4784,4786, 4789,4792, 4798,4800, 4800,4802, 4805,4808, 4822,4824, 4880,4882, 4885,4888, 4954,4992, 5007,5024, 5108,5121, 5740,5743, 5759,5761, 5786,5792, 5866,5870, 5872,5888, 5900,5902, 5905,5920, 5937,5952, 5969,5984, 5996,5998, 6000,\n\t\t6016, 6067,6103, 6103,6108, 6108,6176, 6263,6272, 6312,6314, 6314,6320, 6389,6400, 6428,6480, 6509,6512, 6516,6528, 6571,6593, 6599,6656, 6678,6688, 6740,6823, 6823,6917, 6963,6981, 6987,7043, 7072,7086, 7087,7098, 7141,7168, 7203,7245, 7247,7258, 7293,7401, 7404,7406, 7409,7413, 7414,7424, 7615,7680, 7957,\n\t\t7960, 7965,7968, 8005,8008, 8013,8016, 8023,8025, 8025,8027, 8027,8029, 8029,8031, 8061,8064, 8116,8118, 8124,8126, 8126,8130, 8132,8134, 8140,8144, 8147,8150, 8155,8160, 8172,8178, 8180,8182, 8188,8305, 8305,8319, 8319,8336, 8348,8450, 8450,8455, 8455,8458, 8467,8469, 8469,8473, 8477,8484, 8484,8486, 8486,\n\t\t8488, 8488,8490, 8493,8495, 8505,8508, 8511,8517, 8521,8526, 8526,8544, 8584,11264, 11310,11312, 11358,11360, 11492,11499, 11502,11506, 11507,11520, 11557,11559, 11559,11565, 11565,11568, 11623,11631, 11631,11648, 11670,11680, 11686,11688, 11694,11696, 11702,11704, 11710,11712, 11718,11720, 11726,\n\t\t11728, 11734,11736, 11742,11823, 11823,12293, 12295,12321, 12329,12337, 12341,12344, 12348,12353, 12438,12445, 12447,12449, 12538,12540, 12543,12549, 12589,12593, 12686,12704, 12730,12784, 12799,13312, 13312,19893, 19893,19968, 19968,40908, 40908,40960, 42124,42192, 42237,42240, 42508,42512, 42527,\n\t\t42538, 42539,42560, 42606,42623, 42647,42656, 42735,42775, 42783,42786, 42888,42891, 42894,42896, 42899,42912, 42922,43000, 43009,43011, 43013,43015, 43018,43020, 43042,43072, 43123,43138, 43187,43250, 43255,43259, 43259,43274, 43301,43312, 43334,43360, 43388,43396, 43442,43471, 43471,43520, 43560,\n\t\t43584, 43586,43588, 43595,43616, 43638,43642, 43642,43648, 43695,43697, 43697,43701, 43702,43705, 43709,43712, 43712,43714, 43714,43739, 43741,43744, 43754,43762, 43764,43777, 43782,43785, 43790,43793, 43798,43808, 43814,43816, 43822,43968, 44002,44032, 44032,55203, 55203,55216, 55238,55243, 55291,\n\t\t63744, 64109,64112, 64217,64256, 64262,64275, 64279,64285, 64285,64287, 64296,64298, 64310,64312, 64316,64318, 64318,64320, 64321,64323, 64324,64326, 64433,64467, 64829,64848, 64911,64914, 64967,65008, 65019,65136, 65140,65142, 65276,65313, 65338,65345, 65370,65382, 65470,65474, 65479,65482, 65487,\n\t\t65490, 65495,65498, 65500\n\t];\n\n\tvar unicodeES5IdCont = [\n\t\t768, 879,1155, 1159,1425, 1469,1471, 1471,1473, 1474,1476, 1477,1479, 1479,1552, 1562,1611, 1641,1648, 1648,1750, 1756,1759, 1764,1767, 1768,1770, 1773,1776, 1785,1809, 1809,1840, 1866,1958, 1968,1984, 1993,2027, 2035,2070, 2073,2075, 2083,2085, 2087,2089, 2093,2137, 2139,2276, 2302,2304, 2307,2362, 2364,\n\t\t2366, 2383,2385, 2391,2402, 2403,2406, 2415,2433, 2435,2492, 2492,2494, 2500,2503, 2504,2507, 2509,2519, 2519,2530, 2531,2534, 2543,2561, 2563,2620, 2620,2622, 2626,2631, 2632,2635, 2637,2641, 2641,2662, 2673,2677, 2677,2689, 2691,2748, 2748,2750, 2757,2759, 2761,2763, 2765,2786, 2787,2790, 2799,2817, 2819,\n\t\t2876, 2876,2878, 2884,2887, 2888,2891, 2893,2902, 2903,2914, 2915,2918, 2927,2946, 2946,3006, 3010,3014, 3016,3018, 3021,3031, 3031,3046, 3055,3073, 3075,3134, 3140,3142, 3144,3146, 3149,3157, 3158,3170, 3171,3174, 3183,3202, 3203,3260, 3260,3262, 3268,3270, 3272,3274, 3277,3285, 3286,3298, 3299,3302, 3311,\n\t\t3330, 3331,3390, 3396,3398, 3400,3402, 3405,3415, 3415,3426, 3427,3430, 3439,3458, 3459,3530, 3530,3535, 3540,3542, 3542,3544, 3551,3570, 3571,3633, 3633,3636, 3642,3655, 3662,3664, 3673,3761, 3761,3764, 3769,3771, 3772,3784, 3789,3792, 3801,3864, 3865,3872, 3881,3893, 3893,3895, 3895,3897, 3897,3902, 3903,\n\t\t3953, 3972,3974, 3975,3981, 3991,3993, 4028,4038, 4038,4139, 4158,4160, 4169,4182, 4185,4190, 4192,4194, 4196,4199, 4205,4209, 4212,4226, 4237,4239, 4253,4957, 4959,5906, 5908,5938, 5940,5970, 5971,6002, 6003,6068, 6099,6109, 6109,6112, 6121,6155, 6157,6160, 6169,6313, 6313,6432, 6443,6448, 6459,6470, 6479,\n\t\t6576, 6592,6600, 6601,6608, 6617,6679, 6683,6741, 6750,6752, 6780,6783, 6793,6800, 6809,6912, 6916,6964, 6980,6992, 7001,7019, 7027,7040, 7042,7073, 7085,7088, 7097,7142, 7155,7204, 7223,7232, 7241,7248, 7257,7376, 7378,7380, 7400,7405, 7405,7410, 7412,7616, 7654,7676, 7679,8204, 8205,8255, 8256,8276, 8276,\n\t\t8400, 8412,8417, 8417,8421, 8432,11503, 11505,11647, 11647,11744, 11775,12330, 12335,12441, 12442,42528, 42537,42607, 42607,42612, 42621,42655, 42655,42736, 42737,43010, 43010,43014, 43014,43019, 43019,43043, 43047,43136, 43137,43188, 43204,43216, 43225,43232, 43249,43264, 43273,43302, 43309,43335, 43347,\n\t\t43392, 43395,43443, 43456,43472, 43481,43561, 43574,43587, 43587,43596, 43597,43600, 43609,43643, 43643,43696, 43696,43698, 43700,43703, 43704,43710, 43711,43713, 43713,43755, 43759,43765, 43766,44003, 44010,44012, 44013,44016, 44025,64286, 64286,65024, 65039,65056, 65062,65075, 65076,65101, 65103,\n\t\t65296, 65305,65343, 65343\n\t];\n\n    export function LexLookUpUnicodeMap(code: number, map: number[]) : bool {\n        // Perform binary search in one of the unicode range maps\n        var lo: number = 0;\n        var hi: number = map.length;\n        var mid: number;\n\n        while (lo + 1 < hi)\n        {\n            mid = lo + (hi - lo) / 2;\n            // mid has to be even to catch a range\'s beginning\n            mid -= mid % 2;\n            if (map[mid] <= code && code <= map[mid + 1])\n                return true;\n            if (code < map[mid])\n                hi = mid;\n            else\n                lo = mid + 2;\n        }\n        return false;\n    }\n\n    export function LexIsUnicodeDigit(code: number): bool {\n        if (codeGenTarget == CodeGenTarget.ES3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdCont);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdCont);\n        }\n    }\n\n    export function LexIsUnicodeIdStart(code: number): bool {\n        if (codeGenTarget == CodeGenTarget.ES3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdStart);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdStart);\n        }\n    }\n    export function LexInitialize() {\n        initializeStaticTokens();\n        autoToken[LexCodeLPR] = staticTokens[TokenID.OpenParen];\n        autoToken[LexCodeRPR] = staticTokens[TokenID.CloseParen];\n        autoToken[LexCodeCMA] = staticTokens[TokenID.Comma];\n        autoToken[LexCodeSMC] = staticTokens[TokenID.Semicolon];\n        autoToken[LexCodeLBR] = staticTokens[TokenID.OpenBracket];\n        autoToken[LexCodeRBR] = staticTokens[TokenID.CloseBracket];\n        autoToken[LexCodeTIL] = staticTokens[TokenID.Tilde];\n        autoToken[LexCodeQUE] = staticTokens[TokenID.Question];\n        autoToken[LexCodeLC] = staticTokens[TokenID.OpenBrace];\n        autoToken[LexCodeRC] = staticTokens[TokenID.CloseBrace];\n        autoToken[LexCodeCOL] = staticTokens[TokenID.Colon];\n        LexKeywordTable = new StringHashTable();\n        for (var i in (<any>TokenID)._map) {\n            if ((<number><any>i) <= TokenID.LimKeyword) {\n                LexKeywordTable.add((<any>TokenID)._map[i].toLowerCase(), i);\n            }\n        }\n        for (var j = 0; j < LexCodeASCIIChars; j++) {\n            if (LexIsIdentifierStartChar(j)) {\n                lexIdStartTable[j] = true;\n            }\n            else {\n                lexIdStartTable[j] = false;\n            }\n        }\n    }\n\n    export function LexAdjustIndent(code, indentAmt) {\n        if ((code == LexCodeLBR) || (code == LexCodeLC) || (code == LexCodeLPR)) {\n            return indentAmt + 1;\n        }\n        else if ((code == LexCodeRBR) || (code == LexCodeRC) || (code == LexCodeRPR)) {\n            return indentAmt - 1;\n        }\n        else return indentAmt;\n    }\n\n    export function LexIsIdentifierStartChar(code): bool {\n        return (((code >= 97) && (code <= 122)) ||\n                ((code >= 65) && (code <= 90)) ||\n                (code == LexCodeDollar) ||\n                (code == LexCodeUnderscore));\n    }\n\n    export function LexIsDigit(code): bool {\n        return ((code >= 48) && (code <= 57));\n    }\n\n    export function LexIsIdentifierChar(code:number) {\n        return lexIdStartTable[code] || LexIsDigit(code);\n    }\n\n    export function LexMatchingOpen(code) {\n        if (code == LexCodeRBR)\n            return LexCodeLBR;\n        else if (code == LexCodeRC)\n            return LexCodeLC;\n        else if (code == LexCodeRPR)\n            return LexCodeLPR;\n        else return 0;\n    }\n\n    export enum NumberScanState {\n        Start,\n        InFraction,\n        InEmptyFraction,\n        InExponent\n    }\n\n    export enum LexState {\n        Start,\n        InMultilineComment,\n        InMultilineSingleQuoteString,\n        InMultilineDoubleQuoteString,\n    }\n\n    export enum LexMode {\n        Line,\n        File,\n    }\n\n    export enum CommentStyle {\n        Line,\n        Block\n    }\n\n    // Represent a piece of source code which can be read in multiple segments\n    export interface ISourceText {\n        getText(start: number, end: number): string;\n        getLength(): number;\n    }\n\n    // Implementation on top of a contiguous string\n    export class StringSourceText implements ISourceText {\n        constructor (public text: string) {\n        }\n\n        public getText(start: number, end: number): string {\n            return this.text.substring(start, end);\n        }\n\n        public getLength(): number {\n            return this.text.length;\n        }\n    }\n\n    export class SourceTextSegment implements ISourceTextSegment {\n        constructor (public segmentStart: number,\n                    public segmentEnd: number,\n                    public segment: string) {\n        }\n\n        charCodeAt(index: number): number {\n            return this.segment.charCodeAt(index - this.segmentStart);\n        }\n\n        substring(start: number, end: number): string {\n            return this.segment.substring(start - this.segmentStart, end - this.segmentStart);\n        }\n    }\n\n    export class AggerateSourceTextSegment implements ISourceTextSegment {\n\n        constructor (public seg1: SourceTextSegment, public seg2: SourceTextSegment) { }\n\n        public charCodeAt(index: number): number {\n            if (this.seg1.segmentStart <= index && index < this.seg1.segmentEnd)\n                return this.seg1.segment.charCodeAt(index - this.seg1.segmentStart);\n\n            return this.seg2.segment.charCodeAt(index - this.seg2.segmentStart);\n        }\n\n        public substring(start: number, end: number): string {\n            if (this.seg1.segmentStart <= start && end <= this.seg1.segmentEnd)\n                return this.seg1.segment.substring(start - this.seg1.segmentStart, end - this.seg1.segmentStart);\n\n            return this.seg2.segment.substring(start - this.seg2.segmentStart) + this.seg1.segment.substring(0, end - this.seg1.segmentStart);\n        }\n    }\n\n    export interface ISourceTextSegment {\n        charCodeAt(index: number): number;\n        substring(start: number, end: number): string;\n    }\n\n    export class ScannerTextStream {\n        static emptySegment = new SourceTextSegment(0, 0, "");\n        public agg: AggerateSourceTextSegment;\n        public len: number;\n\n        constructor (public sourceText: ISourceText) {\n            this.agg = new AggerateSourceTextSegment(ScannerTextStream.emptySegment, ScannerTextStream.emptySegment);\n            this.len = this.sourceText.getLength();\n        }\n\n        public max(a: number, b: number): number {\n            return a >= b ? a : b;\n        }\n\n        public min(a: number, b: number): number {\n            return a <= b ? a : b;\n        }\n\n        public fetchSegment(start: number, end: number): ISourceTextSegment {\n            // Common case\n            if (this.agg.seg1.segmentStart <= start && end <= this.agg.seg1.segmentEnd)\n                return this.agg.seg1;\n\n            // Common overlap case\n            if (this.agg.seg2.segmentStart <= start && end <= this.agg.seg1.segmentEnd)\n                return this.agg;\n\n            // if overlapping outside of fetched segment(s), fetch a new segment\n            var prev = this.agg.seg1;\n\n            var s = prev.segmentEnd;\n            var e = max(s + 512, end); // ensure we move forward at least 512 characters or "end"\n            e = min(e, this.len);    // but don\'t go past the end of the source text\n\n            var src = this.sourceText.getText(s, e);\n            var newSeg = new SourceTextSegment(s, e, src);\n            this.agg.seg2 = prev;\n            this.agg.seg1 = newSeg;\n            return this.agg;\n        }\n\n        public charCodeAt(index: number): number {\n            return this.fetchSegment(index, index + 1).charCodeAt(index);\n        }\n\n        public substring(start: number, end: number) {\n            return this.fetchSegment(start, end).substring(start, end);\n        }\n    }\n\n    export interface IScanner {\n        startPos: number;\n        pos: number;\n        scan(): Token;\n        previousToken(): Token;\n        prevLine: number;\n        line: number;\n        col: number;\n        leftCurlyCount: number;\n        rightCurlyCount: number;\n        lastTokenLimChar(): number;\n        lastTokenHadNewline(): bool;\n        lexState: number;\n        getComments(): CommentToken[];\n        getCommentsForLine(line: number): CommentToken[];\n        resetComments(): void;\n        lineMap: number[];\n        setSourceText(newSrc: ISourceText, textMode: number): void;\n        setErrorHandler(reportError: (message: string) => void): void;\n        seenUnicodeChar: bool;\n        seenUnicodeCharInComment: bool;\n        getLookAheadToken(): Token;\n    }\n\n    export class SavedTokens implements IScanner {\n        public prevToken: Token = null;\n        public curSavedToken: SavedToken = null;\n        public prevSavedToken: SavedToken = null;\n        public currentTokenIndex: number;\n        public currentTokens: SavedToken[];\n        public tokensByLine: SavedToken[][];\n        public lexStateByLine: LexState[];\n        private prevToken: SavedToken = null;\n        public previousToken(): Token { return this.prevToken; }\n        public currentToken = 0;\n        public tokens = new SavedToken[];\n        public startPos: number;\n        public pos: number;\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        public close() {\n            this.currentToken = 0;\n        }\n\n        public addToken(tok: Token, scanner: IScanner) {\n            this.tokens[this.currentToken++] = new SavedToken(tok, scanner.startPos, scanner.pos);\n        }\n\n        public scan(): Token {\n            // TODO: curly count\n            this.startLine = this.line;\n            this.startPos = this.col;\n            if (this.currentTokenIndex == this.currentTokens.length) {\n                if (this.line < this.lineMap.length) {\n                    this.line++;\n                    this.col = 0;\n                    this.currentTokenIndex = 0;\n                    this.currentTokens = this.tokensByLine[this.line];\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            }\n            if (this.currentTokenIndex < this.currentTokens.length) {\n                this.prevToken = this.curSavedToken.tok;\n                this.prevSavedToken = this.curSavedToken;\n                this.curSavedToken = this.currentTokens[this.currentTokenIndex++];\n                var curToken = this.curSavedToken.tok;\n                this.pos = this.curSavedToken.limChar;\n                this.col += (this.curSavedToken.limChar - this.curSavedToken.minChar);\n                this.startPos = this.curSavedToken.minChar;\n                this.prevLine = this.line;\n                return curToken;\n            }\n            else {\n                return staticTokens[TokenID.EndOfFile];\n            }\n        }\n        public startLine: number;\n        public prevLine = 1;\n        public line = 1;\n        public col = 0;\n        public leftCurlyCount: number;\n        public rightCurlyCount: number;\n\n        public syncToTok(offset: number): number {\n            this.line = getLineNumberFromPosition(this.lineMap, offset);\n            this.currentTokenIndex = 0;\n            var tmpCol = offset - this.lineMap[this.line];\n            while ((this.lexStateByLine[this.line] == LexState.InMultilineComment) && (this.line > 0)) {\n                this.line--;\n                tmpCol = 0;\n            }\n            var lenMin1 = this.lineMap.length - 1;\n            this.currentTokens = this.tokensByLine[this.line];\n            while ((this.currentTokens.length == 0) && (this.line < lenMin1)) {\n                this.line++;\n                this.currentTokens = this.tokensByLine[this.line];\n                tmpCol = 0;\n            }\n            if (this.line <= lenMin1) {\n                while ((this.currentTokenIndex < this.currentTokens.length) &&\n                       (tmpCol > this.currentTokens[this.currentTokenIndex].limChar)) {\n                    this.currentTokenIndex++;\n                }\n                if (this.currentTokenIndex < this.currentTokens.length) {\n                    this.col = this.currentTokens[this.currentTokenIndex].minChar;\n                    return this.col + this.lineMap[this.line];\n                }\n            }\n            return -1;\n        }\n\n        public lastTokenLimChar(): number {\n            if (this.prevSavedToken !== null) {\n                return this.prevSavedToken.limChar;\n            }\n            else {\n                return 0;\n            }\n        }\n\n        public lastTokenHadNewline(): bool {\n            return this.prevLine != this.startLine;\n        }\n\n        public lexState = LexState.Start;\n\n        public commentStack: CommentToken[] = new CommentToken[];\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {\n                if (comments == null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public lineMap: number[] = [];\n        public setSourceText(newSrc: ISourceText, textMode: number) {\n        }\n        public setErrorHandler(reportError: (message: string) => void ) { \n        }\n        public getLookAheadToken(): Token {\n            throw new Error("Invalid operation.");\n        }\n    }\n\n    export class Scanner implements IScanner {\n        // REVIEW: When adding new variables make sure to handle storing them in getLookAheadToken. \n        //         The method works by storing the state before scanning and restoring it later on, missing a member variable \n        //         could result in an inconsistent state.\n        public prevLine = 1;\n        public line = 1;\n        public col = 0;\n        public pos = 0;\n        public startPos = 0;\n        public startCol: number;\n        public startLine: number;\n        public src: string;\n        public len = 0;\n        public lineMap: number[] = [];\n        \n        public ch = LexEOF;\n        public lexState = LexState.Start;\n        public mode = LexMode.File;\n        public scanComments: bool = true;\n        public interveningWhitespace = false; // Was there a whitespace token between the last token and the current one?\n        private interveningWhitespacePos = 0; //  If yes, this contains the start position of the whitespace\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public commentStack: CommentToken[] = new CommentToken[];\n        public saveScan: SavedTokens = null;\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        private reportError: (message: string) =>void;\n\n        constructor () {\n            this.startCol = this.col;\n            this.startLine = this.line;            \n            this.lineMap[1] = 0;\n            \n            if (!LexKeywordTable) {\n                LexInitialize();\n            }            \n        }\n\n        private prevTok = staticTokens[TokenID.EndOfFile];\n        public previousToken() { return this.prevTok; }\n\n        public setSourceText(newSrc: ISourceText, textMode: number) {\n            this.mode = textMode;\n            this.scanComments = (this.mode === LexMode.Line);\n            this.pos = 0;\n            this.interveningWhitespacePos = 0;\n            this.startPos = 0;\n            this.line = 1;\n            this.col = 0;\n            this.startCol = this.col;\n            this.startLine = this.line;\n            this.len = 0;\n            this.src = newSrc.getText(0, newSrc.getLength());\n            this.len = this.src.length;\n            this.lineMap = [];\n            this.lineMap[1] = 0;\n            this.commentStack = [];\n            this.leftCurlyCount = 0;\n            this.rightCurlyCount = 0;\n            this.seenUnicodeChar = false;\n            this.seenUnicodeCharInComment = false;\n        }\n\n        public setErrorHandler(reportError: (message: string) => void ) { \n            this.reportError = reportError;\n        }\n\n        public setSaveScan(savedTokens: SavedTokens) {\n            this.saveScan = savedTokens;\n        }\n\n        public setText(newSrc: string, textMode: number) {\n            this.setSourceText(new StringSourceText(newSrc), textMode);\n        }\n\n        public setScanComments(value: bool) {\n            this.scanComments = value;\n        }\n\n        public getLexState(): number {\n            return this.lexState;\n        }\n\n        public tokenStart() {\n            this.startPos = this.pos;\n            this.startLine = this.line;\n            this.startCol = this.col;\n            this.interveningWhitespace = false;\n        }\n\n        public peekChar(): number {\n            if (this.pos < this.len) {\n                return this.src.charCodeAt(this.pos);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public peekCharAt(index: number): number {\n            if (index < this.len) {\n                return this.src.charCodeAt(index);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public IsHexDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_9)) || ((c >= LexCode_A) && (c <= LexCode_F)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public IsOctalDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_7)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public scanHexDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsHexDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        return new NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanOctalDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsOctalDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        return new NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanDecimalNumber(state: number): Token {\n            var atLeastOneDigit = false;\n            var svPos = this.pos;\n            var svCol = this.col;\n            for (; ;) {\n                if (LexIsDigit(this.ch)) {\n                    atLeastOneDigit = true;\n                    if (this.ch != LexCode_0 && state == NumberScanState.InEmptyFraction) {\n                        state = NumberScanState.InFraction;\n                    }\n                    this.nextChar();\n                }\n                else if (this.ch == LexCodeDOT) {\n                    if (state == NumberScanState.Start) {\n                        // DecimalDigit* .\n                        this.nextChar();\n                        state = NumberScanState.InEmptyFraction;\n                    }\n                    else {\n                        // dot not part of number\n                        if (atLeastOneDigit) {\n                            // DecimalDigit* . DecimalDigit+\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                } else if ((this.ch == LexCode_e) || (this.ch == LexCode_E)) {\n                    if (state == NumberScanState.Start) {\n                        if (atLeastOneDigit) {\n                            // DecimalDigit+ (. DecimalDigit*) [eE] [+-]DecimalDigit+\n                            atLeastOneDigit = false;\n                            this.nextChar();\n                            state = NumberScanState.InExponent;\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state == NumberScanState.InFraction || state == NumberScanState.InEmptyFraction) {\n                        // DecimalDigit+ . DecimalDigit* [eE]\n                        this.nextChar();\n                        state = NumberScanState.InExponent;\n                        atLeastOneDigit = false;\n                    }\n                    else {\n                        // DecimalDigit+ . DecimalDigit* [eE] DecimalDigit+\n                        if (atLeastOneDigit) {\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                }\n                else if ((this.ch == LexCodePLS) || (this.ch == LexCodeMIN)) {\n                    if (state == NumberScanState.InExponent) {\n                        if (!atLeastOneDigit) {\n                            this.nextChar();\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state == NumberScanState.InEmptyFraction || state == NumberScanState.InFraction) {\n                        // This case will not generate bad javascript if we miss the fractional part, but we just want to be consistent with the dot case\n                        return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                    }\n                    else {\n                        if (!atLeastOneDigit) {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                        else {\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));\n                        }\n                    }\n                }\n                else {\n                    if (!atLeastOneDigit) {\n                        this.pos = svPos;\n                        this.col = svCol;\n                        return null;\n                    }\n                    else {\n                        return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                    }\n                }\n            }\n        }\n\n        // 0 [xX] hexDigits\n        // 0 octalDigits\n        // 0 [89] decimalDigits\n        // decimalDigits? fraction? exponent?\n\n        public scanNumber(): Token {\n            if (this.peekChar() == LexCode_0) {\n                switch (this.peekCharAt(this.pos + 1)) {\n                    case LexCode_x:\n                    case LexCode_X:\n                        // Hex\n                        this.advanceChar(2);\n                        return this.scanHexDigits();\n                    case LexCode_8:\n                    case LexCode_9:\n                    case LexCodeDOT:\n                        return this.scanDecimalNumber(NumberScanState.Start);\n                    default:\n                        // Octal\n                        return this.scanOctalDigits();\n                }\n            }\n            else {\n                return this.scanDecimalNumber(NumberScanState.Start);\n            }\n        }\n\n        public scanFraction(): Token {\n            return this.scanDecimalNumber(NumberScanState.InFraction);\n        }\n\n        public newLine() {\n            this.col = 0;\n            if (this.mode == LexMode.File) {\n                this.line++;\n                this.lineMap[this.line] = this.pos + 1;\n            }\n        }\n\n        public finishMultilineComment(): bool {\n            var ch2: number;\n            this.lexState = LexState.InMultilineComment;\n            while (this.pos < this.len) {\n                if (this.ch == LexCodeMUL) {\n                    ch2 = this.peekCharAt(this.pos + 1);\n                    if (ch2 == LexCodeSLH) {\n                        this.advanceChar(2);\n                        if (this.mode == LexMode.File) {\n                            this.tokenStart();\n                        }\n                        this.lexState = LexState.Start;\n                        return true;\n                    }\n                }\n                else if (this.ch == LexCodeNWL) {\n                    this.newLine();\n                    if (this.mode == LexMode.Line) {\n                        this.nextChar();\n                        return false;\n                    }\n                } \n                else if (this.ch >= LexCodeASCIIChars) { \n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n            return false;\n        }\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {\n                if (comments == null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public endsLine(c: number) {\n            return (c == LexCodeNWL) || (c == LexCodeRET) || (c == LexCodeLS) || (c == LexCodePS);\n        }\n\n        public finishSinglelineComment() {\n            while (this.pos < this.len) {\n                if (this.endsLine(this.ch))\n                    break;\n                if (this.ch >= LexCodeASCIIChars) { \n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n\n            if (this.mode == LexMode.File) {\n                this.tokenStart();\n            }\n        }\n\n        public tokenText(): string {\n            return this.src.substring(this.startPos, this.pos);\n        }\n\n        public findClosingSLH() {\n            var index = this.pos;\n            var ch2 = this.src.charCodeAt(index);\n            var prevCh = 0;\n            var liveEsc = false;\n            while (!this.endsLine(ch2) && (index < this.len)) {\n                if ((ch2 == LexCodeSLH) && (!liveEsc)) {\n                    return index;\n                }\n                prevCh = ch2;\n                index++;\n                if (liveEsc) {\n                    liveEsc = false;\n                }\n                else {\n                    liveEsc = (prevCh == LexCodeBSL);\n                }\n\n                ch2 = this.src.charCodeAt(index);\n            }\n            return -1;\n        }\n\n        public speculateRegex(): Token {\n            if (noRegexTable[this.prevTok.tokenId] != undefined) {\n                return null;\n            }\n            var svPos = this.pos;\n            var svCol = this.col;\n            // first char is \'/\' and has been skipped\n            var index = this.findClosingSLH();\n            if (index > 0) {\n                // found closing /\n                var pattern = this.src.substring(svPos, index);\n                var flags = "";\n                this.pos = index + 1;\n                this.ch = this.peekChar();\n                var flagsStart = this.pos;\n                // TODO: check for duplicate flags\n                while ((this.ch == LexCode_i) || (this.ch == LexCode_g) || (this.ch == LexCode_m)) {\n                    this.nextChar();\n                }\n                if ((this.pos - flagsStart) > 3) {\n                    return null;\n                }\n                else {\n                    flags = this.src.substring(flagsStart, this.pos);\n                }\n                var regex = undefined;\n                try {\n                    regex = new RegExp(pattern, flags);\n                }\n                catch (regexException) {\n                }\n                if (regex) {\n                    // no line boundary in regex string\n                    this.col = svCol + (this.pos - this.startPos);\n                    return new RegularExpressionLiteralToken(regex);\n                }\n            }\n            this.pos = svPos;\n            this.col = svCol;\n            return null;\n        }\n\n        public lastTokenHadNewline() {\n            return this.prevLine != this.startLine;\n        }\n\n        public lastTokenLimChar() {\n            return this.interveningWhitespace ? this.interveningWhitespacePos : this.startPos;\n        }\n\n        // use only when known not to skip line terminators\n        public advanceChar(amt: number) {\n            this.pos += amt;\n            this.col += amt;\n            this.ch = this.peekChar();\n        }\n\n        public nextChar() {\n            this.pos++;\n            this.col++;\n            this.ch = this.peekChar();\n        }\n\n        public getLookAheadToken(): Token {\n            // REVIEW: This method is only used for parsing varargs in lambda expressions. If this functionality is needed for more common cases, \n            //         it needs to be designed. \n            //         Look-ahead token needs to be integrated in the scanner design to allow for an efficient lookup.\n\n            // Store the scanner state\n            var prevLine = this.prevLine;\n            var line = this.line;\n            var col = this.col;\n            var pos = this.pos;\n            var startPos = this.startPos;\n            var startCol = this.startCol;\n            var startLine = this.startLine;\n            var ch = this.ch;\n            var prevTok = this.prevTok;\n            var lexState = this.lexState;\n            var interveningWhitespace = this.interveningWhitespace;\n            var interveningWhitespacePos = this.interveningWhitespacePos;\n            var leftCurlyCount = this.leftCurlyCount;\n            var rightCurlyCount = this.rightCurlyCount;\n            var seenUnicodeChar = this.seenUnicodeChar;\n            var seenUnicodeCharInComment = this.seenUnicodeCharInComment;\n            var commentStackLength = this.commentStack.length;\n\n            var lookAheadToken = this.scan();\n\n            // Restore state\n            this.prevLine = prevLine;\n            this.line = line;\n            this.col = col;\n            this.pos = pos;\n            this.startPos = startPos;\n            this.startCol = startCol;\n            this.startLine = startLine;\n            this.ch = ch;\n            this.prevTok = prevTok;\n            this.lexState = lexState;\n            this.interveningWhitespace = interveningWhitespace;\n            this.interveningWhitespacePos = interveningWhitespacePos;\n            this.leftCurlyCount = leftCurlyCount;\n            this.rightCurlyCount = rightCurlyCount;\n            this.seenUnicodeChar = seenUnicodeChar;\n            this.seenUnicodeCharInComment = seenUnicodeCharInComment;\n            this.commentStack.length = commentStackLength;\n\n            return lookAheadToken;\n        }\n\n        public scanInLine(): Token {\n            if ((this.lexState == LexState.InMultilineComment) && (this.scanComments)) {\n                this.ch = this.peekChar();\n                var commentLine = this.line;\n                this.finishMultilineComment();\n                if (this.startPos < this.pos) {\n                    var commentText = this.src.substring(this.startPos, this.pos);\n                    this.tokenStart();\n                    return new CommentToken(TokenID.Comment, commentText,/*isBlock*/true, this.startPos, commentLine,/*endsLine*/true);\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            } \n            else if (this.lexState == LexState.InMultilineSingleQuoteString && this.pos < this.len) { \n                this.ch = LexCodeAPO;\n                this.lexState = LexState.Start;\n                return this.scanStringConstant();\n            }\n            else if (this.lexState == LexState.InMultilineDoubleQuoteString && this.pos < this.len) { \n                this.ch = LexCodeQUO;\n                this.lexState = LexState.Start;\n                return this.scanStringConstant();\n            }\n            this.prevLine = this.line;\n            var prevTok = this.innerScan();\n\n            // Ingore white spaces\n            if (prevTok.tokenId != TokenID.Whitespace) {\n                this.prevTok = prevTok;\n            }\n            return prevTok;\n        }\n\n        public scan(): Token {\n            this.prevLine = this.line;\n            this.prevTok = this.innerScan();\n            if (this.saveScan) {\n                this.saveScan.addToken(this.prevTok, this);\n            }\n            return this.prevTok;\n        }\n\n        private isValidUnicodeIdentifierChar(): bool {\n            var valid = LexIsUnicodeIdStart(this.ch) || LexIsUnicodeDigit(this.ch);\n            this.seenUnicodeChar = this.seenUnicodeChar || valid;\n            return valid;\n        }\n\n        private scanStringConstant(): Token {\n            var endCode = this.ch;\n            \n            // Skip the first quote\n            this.nextChar();\n            \n            // Accumulate with escape characters\n            scanStringConstantLoop:\n            for (;;) {\n                switch (this.ch) {\n                    case LexEOF:\n                        // Unexpected end of file\n                        this.reportScannerError("Unterminated string constant");\n                        break scanStringConstantLoop;\n\n                    case LexCodeLS:\n                    case LexCodePS:\n                        this.seenUnicodeChar = true;\n                    // Intentional fall through\n                    case LexCodeRET:\n                    case LexCodeNWL:\n                        this.reportScannerError("Unterminated string constant");\n                        break scanStringConstantLoop;\n\n                    case LexCodeAPO:\n                    case LexCodeQUO:\n                        if (this.ch == endCode) {\n                            // Found string terminator. Skip past end code.\n                            this.nextChar();\n                            break scanStringConstantLoop;\n                        }\n                        break;\n\n                    case LexCodeBSL:\n                        // Consume the current slash\n                        this.nextChar();\n\n                        switch (this.ch) {\n                            case LexCodeAPO:\n                            case LexCodeQUO:\n                            case LexCodeBSL:\n                                // Valid escape sequences\n                                this.nextChar();\n                                continue scanStringConstantLoop;\n\n                            case LexCodeLS:\n                            case LexCodePS:\n                                this.seenUnicodeChar = true;\n                            // Intentional fall through\n                            case LexCodeRET:\n                            case LexCodeNWL:\n                                // Skip /r in a /r/n sequence\n                                if (this.ch == LexCodeRET && this.peekCharAt(this.pos + 1) == LexCodeNWL) {\n                                    this.nextChar();\n                                }\n\n                                // Consume the new line char\n                                this.nextChar();\n\n                                // Record new line\n                                this.newLine();\n\n                                if (this.mode == LexMode.Line) {\n                                    this.lexState = endCode == LexCodeAPO ? LexState.InMultilineSingleQuoteString : LexState.InMultilineDoubleQuoteString;\n                                    break scanStringConstantLoop;\n                                }\n                                break;\n\n                            case LexCode_x:\n                            case LexCode_u:\n                                var expectedHexDigits = this.ch == LexCode_x ? 2 : 4;\n                                this.nextChar();\n                                for (var i = 0; i < expectedHexDigits; i++) {\n                                    if (this.IsHexDigit(this.ch)) {\n                                        this.nextChar();\n                                    }\n                                    else {\n                                        this.reportScannerError("Invalid Unicode escape sequence");\n                                        break;\n                                    }\n                                }\n                                continue scanStringConstantLoop;\n                        }\n                        break;\n                }\n\n                // Record seeing a Unicode char\n                if (this.ch >= LexCodeASCIIChars) {\n                    this.seenUnicodeChar = true;\n                }\n\n                this.nextChar();\n            }\n\n            return new StringLiteralToken(this.src.substring(this.startPos, this.pos));\n        }\n\n        private scanIdentifier(): Token {\n            var hasEscape = false;\n            var isFirstChar = (this.ch == LexCodeBSL);\n            var hasUnicode: any = false;\n\n            for (; ;) {\n                while (lexIdStartTable[this.ch] || LexIsDigit(this.ch) || \n                      (this.ch >= LexCodeASCIIChars && this.isValidUnicodeIdentifierChar())) {\n                    this.nextChar();\n                }\n                if (this.ch == LexCodeBSL) {\n                    this.nextChar();\n                    if (this.ch == LexCode_u) {\n                        // 4 hex digits\n                        this.nextChar();\n                        for (var h = 0; h < 4 ; h++) {\n                            if (this.IsHexDigit(this.ch)) {\n                                this.nextChar();\n                            }\n                            else {\n                                this.reportScannerError("Invalid Unicode escape sequence");\n                                return staticTokens[TokenID.Error];\n                            }\n                        }\n                        var hexChar = parseInt(this.src.substring(this.pos - 4, this.pos), 16);\n\n                        // Verify is valid ID char \n                        if (lexIdStartTable[hexChar] || (!isFirstChar && LexIsDigit(hexChar)) ||\n                            (hexChar >= LexCodeASCIIChars && (LexIsUnicodeIdStart(hexChar) || (!isFirstChar && LexIsUnicodeDigit(hexChar))))) {\n                        }\n                        else { \n                            this.reportScannerError("Invalid identifier character");\n                            return staticTokens[TokenID.Error];\n                        }\n\n                        hasEscape = true;\n                        isFirstChar = false;\n                        continue;\n                    }\n\n                    this.reportScannerError("Invalid Unicode escape sequence");\n                    return staticTokens[TokenID.Error];\n                }\n                break;\n            }\n\n            var id: number;\n            var text = this.src.substring(this.startPos, this.pos);\n            if (!hasEscape && (id = LexKeywordTable.lookup(text)) != null) {\n                return staticTokens[id];\n            }\n            else {\n                return new IdentifierToken(text, hasEscape);\n            }\n        }\n\n        public innerScan(): Token {\n            var rtok;\n            this.tokenStart();\n            this.ch = this.peekChar();\n\n            start: while (this.pos < this.len) {\n                 if (lexIdStartTable[this.ch] || this.ch == LexCodeBSL || (this.ch >= LexCodeASCIIChars && LexIsUnicodeIdStart(this.ch))) {\n                    // identifier or keyword\n                    return this.scanIdentifier();\n                }\n                else if (this.ch == LexCodeSpace) {\n                    if (!this.interveningWhitespace) {\n                        this.interveningWhitespacePos = this.pos;\n                    }\n                    do {\n                        this.nextChar();\n                    } while (this.ch == LexCodeSpace);\n                    if (this.mode == LexMode.Line) {\n                        var whitespaceText = this.src.substring(this.startPos, this.pos);\n                        return new WhitespaceToken(TokenID.Whitespace, whitespaceText);\n                    }\n                    else {\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                    }\n                }\n                else if (this.ch == LexCodeSLH) {\n                    this.nextChar();\n                    var commentText;\n                    if (this.ch == LexCodeSLH) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.finishSinglelineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var commentToken = new CommentToken(TokenID.Comment, commentText,/*isBlock*/false, commentStartPos, commentStartLine,/*endsLine*/false);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n\n                        this.interveningWhitespace = true;\n                    }\n                    else if (this.ch == LexCodeMUL) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.nextChar();  // Skip the "*"\n                        this.finishMultilineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var endsLine = this.endsLine(this.peekChar());\n                        var commentToken = new CommentToken(TokenID.Comment, commentText,/*isBlock*/true, commentStartPos, commentStartLine, endsLine);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n                        this.interveningWhitespace = true;\n                    }\n                    else {\n                        var regexTok = this.speculateRegex();\n                        if (regexTok) {\n                            return regexTok;\n                        }\n                        else {\n                            if (this.peekCharAt(this.pos) == LexCodeEQ) {\n                                this.nextChar();\n                                return staticTokens[TokenID.SlashEquals];\n                            }\n                            else {\n                                return staticTokens[TokenID.Slash];\n                            }\n                        }\n                    }\n                }\n                else if (this.ch == LexCodeSMC) {\n                    this.nextChar();\n                    return staticTokens[TokenID.Semicolon];\n                }\n                else if ((this.ch == LexCodeAPO) || (this.ch == LexCodeQUO)) {\n                    return this.scanStringConstant();\n                }\n                else if (autoToken[this.ch]) {\n                    var atok = autoToken[this.ch];\n                    if (atok.tokenId == TokenID.OpenBrace) {\n                        this.leftCurlyCount++;\n                    }\n                    else if (atok.tokenId == TokenID.CloseBrace) {\n                        this.rightCurlyCount++;\n                    }\n                    this.nextChar();\n                    return atok;\n                }\n                else if ((this.ch >= LexCode_0) && (this.ch <= LexCode_9)) {\n                    rtok = this.scanNumber();\n                    if (rtok) {\n                        return rtok;\n                    }\n                    else {\n                        this.nextChar();\n                        return staticTokens[TokenID.Error];\n                    }\n                }\n                else switch (this.ch) {\n                    // TAB\n                    case LexCodeTAB:\n                    case LexCodeVTAB:\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        if (this.mode == LexMode.Line) {\n                            do {\n                                this.nextChar();\n                            } while ((this.ch == LexCodeSpace) || (this.ch == 9));\n                            var wsText = this.src.substring(this.startPos, this.pos);\n                            return new WhitespaceToken(TokenID.Whitespace, wsText);\n                        }\n                        else {\n                            this.interveningWhitespace = true;\n                        }\n                     // Newlines and BOM\n                    case 0xFF: // UTF16 SEQUENCE\n                    case 0xFE:\n                    case 0xEF:    // UTF8 SEQUENCE\n                    case 0xBB:\n                    case 0xBF:\n                    case LexCodeLS:\n                    case LexCodePS:\n                    case LexCodeNWL:\n                    case LexCodeRET:\n                        if (this.ch == LexCodeNWL) {\n                            this.newLine();\n                            if (this.mode == LexMode.Line) {\n                                return staticTokens[TokenID.EndOfFile];\n                            }\n                        }\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        this.nextChar();\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                        break;\n                    case LexCodeDOT: {\n                        if (this.peekCharAt(this.pos + 1) == LexCodeDOT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeDOT) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.DotDotDot];\n                            }\n                            else {\n                                this.nextChar();\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            rtok = this.scanFraction();\n                            if (rtok) {\n                                return rtok;\n                            }\n                            else {\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        // break;\n                    }\n                    case LexCodeEQ:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.EqualsEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.EqualsEquals];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeGT) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.EqualsGreaterThan];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Equals];\n                        }\n                    // break;\n                    case LexCodeBNG:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.ExclamationEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.ExclamationEquals];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Exclamation];\n                        }\n                    // break;\n                    case LexCodePLS:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodePLS) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusPlus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Plus];\n                        }\n                    // break;\n                    case LexCodeMIN:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeMIN) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusMinus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Minus];\n                        }\n                    // break;\n                    case LexCodeMUL:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AsteriskEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Asterisk];\n                        }\n                    // break;\n                    case LexCodePCT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PercentEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Percent];\n                        }\n                    // break;\n                    case LexCodeLT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeLT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.LessThanLessThanEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.LessThanLessThan];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.LessThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.LessThan];\n                        }\n                    //  break;\n                    case LexCodeGT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeGT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.GreaterThanGreaterThanEquals];\n                            }\n                            else if (this.peekCharAt(this.pos + 2) == LexCodeGT) {\n                                if (this.peekCharAt(this.pos + 3) == LexCodeEQ) {\n                                    this.advanceChar(4);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThanEquals];\n                                }\n                                else {\n                                    this.advanceChar(3);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThan];\n                                }\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.GreaterThanGreaterThan];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.GreaterThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.GreaterThan];\n                        }\n                    // break;\n                    case LexCodeXOR:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.CaretEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Caret];\n                        }\n                    //  break;\n                    case LexCodeBAR:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeBAR) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarBar];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Bar];\n                        }\n                    //  break;\n                    case LexCodeAMP:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeAMP) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandAmpersand];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.And];\n                        }\n                    //  break;\n                    default:\n                        // Report error\n                        this.reportScannerError("Invalid character");\n                        this.nextChar();\n\n                        continue start;\n                }\n            }\n            return staticTokens[TokenID.EndOfFile];\n        }\n\n        private reportScannerError(message: string) { \n            if (this.reportError) { \n                this.reportError(message);\n            }\n        }\n    }\n\n    // Reseverved words only apply to Identifiers, not IdentifierNames\n    export function convertTokToIDName(tok: Token): bool {\n        return convertTokToIDBase(tok, true, false);\n    }\n\n    export function convertTokToID(tok: Token, strictMode: bool): bool {\n        return convertTokToIDBase(tok, false, strictMode);\n    }\n\n    function convertTokToIDBase(tok: Token, identifierName: bool, strictMode: bool): bool {\n        if (tok.tokenId <= TokenID.LimKeyword) {\n            var tokInfo = lookupToken(tok.tokenId);\n            if (tokInfo != undefined) {\n                var resFlags = Reservation.Javascript | Reservation.JavascriptFuture;\n                if (strictMode) {\n                    resFlags |= Reservation.JavascriptFutureStrict;\n                }\n                if (identifierName || !hasFlag(tokInfo.reservation, resFlags)) {\n                    return true;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n\n    // Return the (1-based) line number from a character offset using the provided linemap.\n    export function getLineNumberFromPosition(lineMap: number[], position: number): number {\n        if (position === -1)\n            return 0;\n\n        // Binary search\n        var min = 0;\n        var max = lineMap.length - 1;\n        while (min < max) {\n            var med = (min + max) >> 1;\n            if (position < lineMap[med]) {\n                max = med - 1;\n            }\n            else if (position < lineMap[med + 1]) {\n                min = max = med; // found it\n            }\n            else {\n                min = med + 1;\n            }\n        }\n\n        return min;\n    }\n\n    /// Return the [line, column] data for a given offset and a lineMap.\n    /// Note that the returned line is 1-based, while the column is 0-based.\n    export function getSourceLineColFromMap(lineCol: ILineCol, minChar: number, lineMap: number[]): void {\n        var line = getLineNumberFromPosition(lineMap, minChar);\n\n        if (line > 0) {\n            lineCol.line = line;\n            lineCol.col = (minChar - lineMap[line]);\n        }\n    }\n\n    // Return the [line, column] (both 1 based) corresponding to a given position in a given script.\n    export function getLineColumnFromPosition(script: TypeScript.Script, position: number): ILineCol {\n        var result = { line: -1, col: -1 };\n        getSourceLineColFromMap(result, position, script.locationInfo.lineMap);\n        if (result.col >= 0) {\n            result.col++;   // Make it 1-based\n        }\n        return result;\n    }\n\n    //\n    // Return the position (offset) corresponding to a given [line, column] (both 1-based) in a given script.\n    //\n    export function getPositionFromLineColumn(script: TypeScript.Script, line: number, column: number): number {\n        return script.locationInfo.lineMap[line] + (column - 1);\n    }\n    \n    // Return true if the token is a primitive type\n    export function isPrimitiveTypeToken(token: Token) {\n        switch (token.tokenId) {\n            case TokenID.Any:\n            case TokenID.Bool:\n            case TokenID.Number:\n            case TokenID.String:\n                return true;\n        }\n        return false;\n    }\n\n    // Return true if the token is a primitive type\n    export function isModifier(token: Token) {\n        switch (token.tokenId) {\n            case TokenID.Public:\n            case TokenID.Private:\n            case TokenID.Static:\n                return true;\n        }\n        return false;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class AssignScopeContext {\n        constructor (public scopeChain: ScopeChain,\n                     public typeFlow: TypeFlow,\n                     public modDeclChain: ModuleDeclaration[]) {\n        }\n    }\n\n    export function pushAssignScope(scope: SymbolScope,\n        context: AssignScopeContext,\n        type: Type,\n        classType: Type,\n        fnc: FuncDecl) {\n\n        var chain = new ScopeChain(null, context.scopeChain, scope);\n        chain.thisType = type;\n        chain.classType = classType;\n        chain.fnc = fnc;\n        context.scopeChain = chain;\n    }\n\n    export function popAssignScope(context: AssignScopeContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function instanceCompare(a: Symbol, b: Symbol) {\n        if (((a == null) || (!a.isInstanceProperty()))) {\n            return b;\n        }\n        else {\n            return a;\n        }\n    }\n\n    export function instanceFilterStop(s: Symbol) {\n        return s.isInstanceProperty();\n    }\n\n    export class ScopeSearchFilter {\n\n        constructor (public select: (a: Symbol, b: Symbol) =>Symbol,\n                            public stop: (s: Symbol) =>bool) { }\n\n        public result: Symbol = null;\n\n        public reset() {\n            this.result = null;\n        }\n\n        public update(b: Symbol): bool {\n            this.result = this.select(this.result, b);\n            if (this.result) {\n                return this.stop(this.result);\n            }\n            else {\n                return false;\n            }\n        }\n    }\n\n    export var instanceFilter = new ScopeSearchFilter(instanceCompare, instanceFilterStop);\n\n    export function preAssignModuleScopes(ast: AST, context: AssignScopeContext) {\n        var moduleDecl = <ModuleDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (moduleDecl.name && moduleDecl.mod) {\n            moduleDecl.name.sym = moduleDecl.mod.symbol;\n        }\n\n        var mod = moduleDecl.mod;\n\n        // We\'re likely here because of error recovery\n        if (!mod) {\n            return;\n        }\n\n        memberScope = new SymbolTableScope(mod.members, mod.ambientMembers, mod.enclosedTypes, mod.ambientEnclosedTypes, mod.symbol);\n        mod.memberScope = memberScope;\n        context.modDeclChain.push(moduleDecl);\n        context.typeFlow.checker.currentModDecl = moduleDecl;\n        aggScope = new SymbolAggregateScope(mod.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        mod.containedScope = aggScope;\n        if (mod.symbol) {\n            context.typeFlow.addLocalsFromScope(mod.containedScope, mod.symbol, moduleDecl.vars, mod.members.privateMembers, true);\n        }\n    }\n\n    export function preAssignClassScopes(ast: AST, context: AssignScopeContext) {\n        var classDecl = <InterfaceDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (classDecl.name && classDecl.type) {\n            classDecl.name.sym = classDecl.type.symbol;\n        }\n\n        var classType = ast.type;\n\n        if (classType) {\n            var classSym = classType.symbol;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(classType);\n\n            aggScope = new SymbolAggregateScope(classType.symbol);\n            aggScope.addParentScope(memberScope);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            classType.containedScope = aggScope;\n            classType.memberScope = memberScope;\n\n            var instanceType = classType.instanceType;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(instanceType);\n            instanceType.memberScope = memberScope;\n\n            aggScope = new SymbolAggregateScope(instanceType.symbol);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            pushAssignScope(aggScope, context, instanceType, classType, null);\n            instanceType.containedScope = aggScope;\n        }\n        else {\n            ast.type = context.typeFlow.anyType;\n        }\n    }\n\n    export function preAssignInterfaceScopes(ast: AST, context: AssignScopeContext) {\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (interfaceDecl.name && interfaceDecl.type) {\n            interfaceDecl.name.sym = interfaceDecl.type.symbol;\n        }\n\n        var interfaceType = ast.type;\n        memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(interfaceType);\n        interfaceType.memberScope = memberScope;\n        aggScope = new SymbolAggregateScope(interfaceType.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        interfaceType.containedScope = aggScope;\n    }\n\n    export function preAssignWithScopes(ast: AST, context: AssignScopeContext) {\n        var withStmt = <WithStatement>ast;\n        var withType = withStmt.type;\n\n        var members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        var ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        var withType = new Type();\n        var withSymbol = new WithSymbol(withStmt.minChar, context.typeFlow.checker.locationInfo.unitIndex, withType);\n        withType.members = members;\n        withType.ambientMembers = ambientMembers;\n        withType.symbol = withSymbol;\n        withType.setHasImplementation();\n        withStmt.type = withType;\n\n        var withScope = new TypeScript.SymbolScopeBuilder(withType.members, withType.ambientMembers, null, null, context.scopeChain.scope, withType.symbol);\n\n        pushAssignScope(withScope, context, null, null, null);\n        withType.containedScope = withScope;\n    }\n\n    export function preAssignFuncDeclScopes(ast: AST, context: AssignScopeContext) {\n        var funcDecl = <FuncDecl>ast;\n\n        var container: Symbol = null;\n        var localContainer: Symbol = null;\n        if (funcDecl.type) {\n            localContainer = ast.type.symbol;\n        }\n\n        var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n        var isInnerStatic = isStatic && context.scopeChain.fnc != null;\n        // for inner static functions, use the parent\'s member scope, so local vars cannot be captured\n        var parentScope = isInnerStatic ? context.scopeChain.fnc.type.memberScope : context.scopeChain.scope;\n\n        // if this is not a method, but enclosed by class, use constructor as\n        // the enclosing scope\n        // REVIEW: Some twisted logic here - this needs to be cleaned up once old classes are removed\n        //  - if it\'s a new class, always use the contained scope, since we initialize the constructor scope below\n        if (context.scopeChain.thisType &&\n            (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod))) {\n            var instType = context.scopeChain.thisType;\n\n            if (!(instType.typeFlags & TypeFlags.IsClass) && !hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                if (!funcDecl.isMethod() || isStatic) {\n                    parentScope = instType.constructorScope;\n                }\n                else {\n                    // use constructor scope if a method as well\n                    parentScope = instType.containedScope;\n                }\n            }\n            else {\n                if (context.scopeChain.previous.scope.container &&\n                    context.scopeChain.previous.scope.container.declAST &&\n                    context.scopeChain.previous.scope.container.declAST.nodeType == NodeType.FuncDecl &&\n                    (<FuncDecl>context.scopeChain.previous.scope.container.declAST).isConstructor) {\n\n                        // if the parent is the class constructor, use the constructor scope\n                    parentScope = instType.constructorScope;\n                }\n                else if (isStatic && context.scopeChain.classType) {\n                    parentScope = context.scopeChain.classType.containedScope;\n                }\n                else {\n                    // else, use the contained scope\n                    parentScope = instType.containedScope;\n                }\n            }\n            container = instType.symbol;\n        }\n        else if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            // sets the container to the class type\'s symbol (which is shared by the instance type)\n            container = context.scopeChain.thisType.symbol;\n        }\n\n        if (funcDecl.type == null || hasFlag(funcDecl.type.symbol.flags, SymbolFlags.TypeSetDuringScopeAssignment)) {\n            if (context.scopeChain.fnc && context.scopeChain.fnc.type) {\n                container = context.scopeChain.fnc.type.symbol;\n            }\n\n            var funcScope = null;\n            var outerFnc: FuncDecl = context.scopeChain.fnc;\n            var nameText = funcDecl.name ? funcDecl.name.actualText : null;\n            var fgSym: TypeSymbol = null;\n\n            if (isStatic) {\n                // In the case of function-nested statics, no member list will have bee initialized for the function, so we need\n                // to copy it over.  We don\'t set this by default because having a non-null member list will throw off assignment\n                // compatibility tests\n                if (outerFnc.type.members == null && container.getType().memberScope) {\n                    outerFnc.type.members = (<SymbolScopeBuilder>(<TypeSymbol>container).type.memberScope).valueMembers;\n                }\n                funcScope = context.scopeChain.fnc.type.memberScope;\n                outerFnc.innerStaticFuncs[outerFnc.innerStaticFuncs.length] = funcDecl;\n            }\n            else {\n                funcScope = context.scopeChain.scope;\n            }\n\n            // REVIEW: We don\'t search for another sym for accessors to prevent us from\n            // accidentally coalescing function signatures with the same name (E.g., a function\n            // \'f\' the outer scope and a setter \'f\' in an object literal within that scope)\n            if (nameText && nameText != "__missing" && !funcDecl.isAccessor()) {\n                if (isStatic) {\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n            }\n\n            context.typeFlow.checker.createFunctionSignature(funcDecl, container,\n                                                            funcScope, fgSym, fgSym == null);\n\n            // it\'s a getter or setter for a class property                     \n            if (!funcDecl.accessorSymbol && \n                (funcDecl.fncFlags & FncFlags.ClassMethod) &&\n                container && \n                ((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || \n                    (fgSym && fgSym.isAccessor())) \n            {\n                funcDecl.accessorSymbol = context.typeFlow.checker.createAccessorSymbol(funcDecl, fgSym, container.getType(), (funcDecl.isMethod() && isStatic), true, funcScope, container);\n            }\n\n            funcDecl.type.symbol.flags |= SymbolFlags.TypeSetDuringScopeAssignment;\n        }\n\n        // Set the symbol for functions and their overloads\n        if (funcDecl.name && funcDecl.type) {\n            funcDecl.name.sym = funcDecl.type.symbol;\n        }\n\n        // Keep track of the original scope type, because target typing might override\n        // the "type" member. We need the original "Scope type" for completion list, etc.\n        funcDecl.scopeType = funcDecl.type;\n\n        // Overloads have no scope, so bail here\n        if (funcDecl.isOverload) {\n            return;\n        }\n\n        var funcTable = new StringHashTable();\n        var funcMembers = new ScopedMembers(new DualStringHashTable(funcTable, new StringHashTable()));\n        var ambientFuncTable = new StringHashTable();\n        var ambientFuncMembers = new ScopedMembers(new DualStringHashTable(ambientFuncTable, new StringHashTable()));\n        var funcStaticTable = new StringHashTable();\n        var funcStaticMembers = new ScopedMembers(new DualStringHashTable(funcStaticTable, new StringHashTable()));\n        var ambientFuncStaticTable = new StringHashTable();\n        var ambientFuncStaticMembers = new ScopedMembers(new DualStringHashTable(ambientFuncStaticTable, new StringHashTable()));\n\n        // REVIEW: Is it a problem that this is being set twice for properties and constructors?\n        funcDecl.unitIndex = context.typeFlow.checker.locationInfo.unitIndex;\n\n        var locals = new SymbolScopeBuilder(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);\n        var statics = new SymbolScopeBuilder(funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null);\n\n        if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            context.scopeChain.thisType.constructorScope = locals;\n        }\n\n        // basically, there are two problems\n        // - Above, for new classes, we were overwriting the constructor scope with the containing scope.  This caused constructor params to be\n        // in scope everywhere\n        // - Below, we\'re setting the contained scope table to the same table we were overwriting the constructor scope with, which we need to\n        // fish lambda params, etc, out (see funcTable below)\n        //\n        // A good first approach to solving this would be to change addLocalsFromScope to take a scope instead of a table, and add to the\n        // constructor scope as appropriate\n\n        funcDecl.symbols = funcTable;\n\n        if (!funcDecl.isSpecialFn()) {\n            var group = funcDecl.type;\n            var signature = funcDecl.signature;\n\n            if (!funcDecl.isConstructor) {\n                group.containedScope = locals;\n                locals.container = group.symbol;\n\n                group.memberScope = statics;\n                statics.container = group.symbol;\n            }\n            funcDecl.enclosingFnc = context.scopeChain.fnc;\n            group.enclosingType = isStatic ? context.scopeChain.classType : context.scopeChain.thisType;\n            // for mapping when type checking\n            var fgSym = <TypeSymbol>ast.type.symbol;\n            if (((funcDecl.fncFlags & FncFlags.Signature) == FncFlags.None) && funcDecl.vars) {\n                context.typeFlow.addLocalsFromScope(locals, fgSym, funcDecl.vars,\n                                                    funcTable, false);\n                context.typeFlow.addLocalsFromScope(statics, fgSym, funcDecl.statics,\n                                                    funcStaticTable, false);\n            }\n            if (signature.parameters) {\n                var len = signature.parameters.length;\n                for (var i = 0; i < len; i++) {\n                    var paramSym: ParameterSymbol = signature.parameters[i];\n                    context.typeFlow.checker.resolveTypeLink(locals,\n                                                                paramSym.parameter.typeLink, true);\n                }\n            }\n            context.typeFlow.checker.resolveTypeLink(locals, signature.returnType,\n                                                        funcDecl.isSignature());\n        }\n\n        if (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n            var thisType = (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) ? context.scopeChain.thisType : null;\n            pushAssignScope(locals, context, thisType, null, funcDecl);\n        }\n\n        if (funcDecl.name && hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression)) {\n            // If the function is an expression, the name will not be visible in the enclosing scope.\n            // Add the function symbol under its name to the local scope to allow for recursive calls.\n            if (funcDecl.name.sym) {\n                funcTable.add(funcDecl.name.actualText, funcDecl.name.sym);\n            }\n        }\n    }\n\n    export function preAssignCatchScopes(ast: AST, context: AssignScopeContext) {\n        var catchBlock = <Catch>ast;\n        if (catchBlock.param) {\n            var catchTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable())); // REVIEW: Should we be allocating a public table instead of a private one?\n            var catchLocals = new SymbolScopeBuilder(catchTable, null, null, null, context.scopeChain.scope,\n                                                   context.scopeChain.scope.container);\n            catchBlock.containedScope = catchLocals;\n            pushAssignScope(catchLocals, context, context.scopeChain.thisType, context.scopeChain.classType, context.scopeChain.fnc);\n        }\n    }\n\n    export function preAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n\n        if (ast) {\n            if (ast.nodeType == NodeType.List) {\n                var list = <ASTList>ast;\n                list.enclosingScope = context.scopeChain.scope;\n            }\n            else if (ast.nodeType == NodeType.ModuleDeclaration) {\n                preAssignModuleScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.ClassDeclaration) {\n                preAssignClassScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n                preAssignInterfaceScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.With) {\n                preAssignWithScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n                preAssignFuncDeclScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.Catch) {\n                preAssignCatchScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.TypeRef) {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n        if (ast) {\n            if (ast.nodeType == NodeType.ModuleDeclaration) {\n                var prevModDecl = <ModuleDeclaration>ast;\n\n                popAssignScope(context);\n\n                context.modDeclChain.pop();\n                if (context.modDeclChain.length >= 1) {\n                    context.typeFlow.checker.currentModDecl = context.modDeclChain[context.modDeclChain.length - 1];\n                }\n            }\n            else if (ast.nodeType == NodeType.ClassDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.With) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>ast;\n                if ((!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) && !funcDecl.isOverload) {\n                    popAssignScope(context);\n                }\n            }\n            else if (ast.nodeType == NodeType.Catch) {\n                var catchBlock = <Catch>ast;\n                if (catchBlock.param) {\n                    popAssignScope(context);\n                }\n            }\n            else {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class TypeCollectionContext {\n        public script: Script = null;\n\n        constructor (public scopeChain: ScopeChain, public checker: TypeChecker) {\n        }\n    }\n\n    export class MemberScopeContext {\n        public type: Type = null;\n        public ast: AST = null;\n        public scope: SymbolScope;\n        public options = new AstWalkOptions();\n\n        constructor (public flow: TypeFlow, public pos: number, public matchFlag: ASTFlags) {\n        }\n    }\n\n    export class EnclosingScopeContext {\n\n        public scopeGetter: () => SymbolScope = null;\n        public objectLiteralScopeGetter: () => SymbolScope = null;\n        public scopeStartAST: AST = null;\n        public skipNextFuncDeclForClass = false;\n        public deepestModuleDecl: ModuleDeclaration = null;\n        public enclosingClassDecl: TypeDeclaration = null;\n        public enclosingObjectLit: UnaryExpression = null;\n        public publicsOnly = true;\n        public useFullAst = false;\n        private scriptFragment: Script;\n\n        constructor (public logger: ILogger,\n                    public script: Script,\n                    public text: ISourceText,\n                    public pos: number,\n                    public isMemberCompletion: bool) {\n        }\n\n        public getScope(): SymbolScope {\n            return this.scopeGetter();\n        }\n\n        public getObjectLiteralScope(): SymbolScope {\n            return this.objectLiteralScopeGetter();\n        }\n\n        public getScopeAST() {\n            return this.scopeStartAST;\n        }\n\n        public getScopePosition() {\n            return this.scopeStartAST.minChar;\n        }\n\n        public getScriptFragmentStartAST(): AST {\n            return this.scopeStartAST;\n        }\n\n        public getScriptFragmentPosition(): number {\n            return this.getScriptFragmentStartAST().minChar;\n        }\n\n        public getScriptFragment(): Script {\n            if (this.scriptFragment == null) {\n                var ast = this.getScriptFragmentStartAST();\n                var minChar = ast.minChar;\n                var limChar = (this.isMemberCompletion ? this.pos : this.pos + 1);\n                this.scriptFragment = TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null/*errorCapture*/).Script;\n            }\n            return this.scriptFragment;\n        }\n    }\n\n    export function preFindMemberScope(ast: AST, parent: AST, walker: IAstWalker) {\n        var memScope: MemberScopeContext = walker.state;\n        if (hasFlag(ast.flags, memScope.matchFlag) && ((memScope.pos < 0) || (memScope.pos == ast.limChar))) {\n            memScope.ast = ast;\n            if ((ast.type == null) && (memScope.pos >= 0)) {\n                memScope.flow.inScopeTypeCheck(ast, memScope.scope);\n            }\n            memScope.type = ast.type;\n            memScope.options.stopWalk();\n        }\n        return ast;\n    }\n\n    export function pushTypeCollectionScope(container: Symbol,\n        valueMembers: ScopedMembers,\n        ambientValueMembers: ScopedMembers,\n        enclosedTypes: ScopedMembers,\n        ambientEnclosedTypes: ScopedMembers,\n        context: TypeCollectionContext,\n        thisType: Type,\n        classType: Type,\n        moduleDecl: ModuleDeclaration) {\n        var builder = new SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container);\n        var chain: ScopeChain = new ScopeChain(container, context.scopeChain, builder);\n        chain.thisType = thisType;\n        chain.classType = classType;\n        chain.moduleDecl = moduleDecl;\n        context.scopeChain = chain;\n    }\n\n    export function popTypeCollectionScope(context: TypeCollectionContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function preFindEnclosingScope(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: EnclosingScopeContext = walker.state;\n        var minChar = ast.minChar;\n        var limChar = ast.limChar;\n\n        // Account for the fact completion list may be called at the end of a file which\n        // is has not been fully re-parsed yet.\n        if (ast.nodeType == NodeType.Script && context.pos > limChar)\n            limChar = context.pos;\n\n        if ((minChar <= context.pos) &&\n            (limChar >= context.pos)) {\n            switch (ast.nodeType) {\n                case NodeType.Script:\n                    var script = <Script>ast;\n                    context.scopeGetter = function () {\n                        return script.bod === null ? null : script.bod.enclosingScope;\n                    };\n                    context.scopeStartAST = script;\n                    break;\n\n                case NodeType.ClassDeclaration:\n                    context.scopeGetter = function () {\n                        return (ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    context.enclosingClassDecl = <TypeDeclaration>ast;\n                    break;\n\n                case NodeType.ObjectLit:\n                    var objectLit = <UnaryExpression>ast;\n                    // Only consider target-typed object literals\n                    if (objectLit.targetType) {\n                        context.scopeGetter = function () {\n                            return objectLit.targetType.containedScope;\n                        };\n                        context.objectLiteralScopeGetter = function () {\n                            return objectLit.targetType.memberScope;\n                        }\n                        context.enclosingObjectLit = objectLit;\n                    }\n                    break;\n\n                case NodeType.ModuleDeclaration:\n                    context.deepestModuleDecl = <ModuleDeclaration>ast;\n                    context.scopeGetter = function () {\n                        return ast.type === null ? null : ast.type.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    break;\n\n                case NodeType.InterfaceDeclaration:\n                    context.scopeGetter = function () {\n                        return (ast.type === null) ? null : ast.type.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    break;\n\n                case NodeType.FuncDecl: {\n                    var funcDecl = <FuncDecl>ast;\n                    if (context.skipNextFuncDeclForClass) {\n                        context.skipNextFuncDeclForClass = false;\n                    }\n                    else {\n                        context.scopeGetter = function () {\n                            // The scope of a class constructor is hidden somewhere we don\'t expect :-S\n                            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                                if (ast.type && ast.type.enclosingType) {\n                                    return ast.type.enclosingType.constructorScope;\n                                }\n                            }\n\n                            if (funcDecl.scopeType) {\n                                return funcDecl.scopeType.containedScope;\n                            }\n\n                            if (funcDecl.type) {\n                                return funcDecl.type.containedScope;\n                            }\n                            return null;\n                        };\n                        context.scopeStartAST = ast;\n                    }\n                }\n                    break;\n            }\n            walker.options.goChildren = true;\n        }\n        else {\n            walker.options.goChildren = false;\n        }\n        return ast;\n    }\n\n    //\n    // Find the enclosing scope context from a position inside a script AST.\n    // The "scopeStartAST" of the returned scope is always valid.\n    // Return "null" if the enclosing scope can\'t be found.\n    //\n    export function findEnclosingScopeAt(logger: ILogger, script: Script, text: ISourceText, pos: number, isMemberCompletion: bool): EnclosingScopeContext {\n        var context = new EnclosingScopeContext(logger, script, text, pos, isMemberCompletion);\n\n        TypeScript.getAstWalkerFactory().walk(script, preFindEnclosingScope, null, null, context);\n\n        if (context.scopeStartAST === null)\n            return null;\n        return context;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Signature {\n        public hasVariableArgList = false;\n        public returnType: TypeLink;\n        public parameters: ParameterSymbol[] = null;\n        public declAST: FuncDecl = null;\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public nonOptionalParameterCount = 0;\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Signature {\n            var result = new Signature();\n            if (this.hasVariableArgList) {\n                result.hasVariableArgList = true;\n            }\n            result.returnType = new TypeLink();\n            if (this.returnType.type) {\n                result.returnType.type =\n                    this.returnType.type.specializeType(pattern, replacement, checker, false);\n            }\n            else {\n                result.returnType.type = checker.anyType;\n            }\n\n            if (this.parameters) {\n                result.parameters = [];\n                for (var i = 0, len = this.parameters.length; i < len; i++) {\n                    var oldSym:ParameterSymbol = this.parameters[i];\n                    var paramDef = new ValueLocation();\n                    var paramSym = new ParameterSymbol(oldSym.name, oldSym.location,\n                                                     checker.locationInfo.unitIndex,\n                                                     paramDef);\n\n                    paramSym.declAST = this.declAST;\n                    paramDef.symbol = paramSym;\n                    paramDef.typeLink = new TypeLink();\n                    result.parameters[i] = paramSym;\n                    var oldType = oldSym.getType();\n                    if (oldType) {\n                        paramDef.typeLink.type = oldType.specializeType(pattern, replacement, checker, false);\n                        paramSym.declAST.type = paramDef.typeLink.type;\n                    }\n                    else {\n                        paramDef.typeLink.type = checker.anyType;\n                    }\n                }\n            }\n            result.nonOptionalParameterCount = this.nonOptionalParameterCount;\n            result.declAST = this.declAST;\n\n            return result;\n        }\n\n        public toString() {\n            return this.toStringHelper(false, false, null);\n        }\n\n        public toStringHelper(shortform: bool, brackets: bool, scope: SymbolScope) {\n            return this.toStringHelperEx(shortform, brackets, scope).toString();\n        }\n\n        public toStringHelperEx(shortform: bool, brackets: bool, scope: SymbolScope, prefix? : string = "") : MemberName {\n            var builder = new MemberNameArray();\n            if (brackets) {\n                builder.prefix =  prefix + "[";\n            }\n            else {\n                builder.prefix = prefix + "(";\n            }\n\n            var paramLen = this.parameters.length;\n            var len = this.hasVariableArgList ? paramLen - 1 : paramLen;\n            for (var i = 0; i < len; i++) {\n                builder.add(MemberName.create(this.parameters[i].name + (this.parameters[i].isOptional() ? "?" : "") + ": "));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n                if (i < paramLen - 1) {\n                    builder.add(MemberName.create(", "));\n                }\n            }\n\n            if (this.hasVariableArgList) {\n                builder.add(MemberName.create("..." + this.parameters[i].name + ": "));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n            }\n\n            if (shortform) {\n                if (brackets) {\n                    builder.add(MemberName.create("] => "));\n                }\n                else {\n                    builder.add(MemberName.create(") => "));\n                }\n            }\n            else {\n                if (brackets) {\n                    builder.add(MemberName.create("]: "));\n                }\n                else {\n                    builder.add(MemberName.create("): "));\n                }\n            }\n\n            if (this.returnType.type) {\n                 builder.add(this.returnType.type.getScopedTypeNameEx(scope));\n            }\n            else {\n                builder.add(MemberName.create("any"));\n            }\n            return builder;\n        }\n    }\n\n    export class SignatureGroup {\n        public signatures: Signature[] = [];\n        public hasImplementation = true;\n        public definitionSignature: Signature = null;\n        public hasBeenTypechecked = false;\n        public flags: SignatureFlags = SignatureFlags.None;\n        public addSignature(signature: Signature) {\n            if (this.signatures == null) {\n                this.signatures = new Signature[];\n            }\n            this.signatures[this.signatures.length] = signature;\n            \n            // REVIEW: duplicates should be found within createFunctionSignature,\n            // so we won\'t check for them here\n            if (signature.declAST &&\n                !signature.declAST.isOverload &&\n                !signature.declAST.isSignature() && \n                !hasFlag(signature.declAST.fncFlags, FncFlags.Ambient) &&\n                hasFlag(signature.declAST.fncFlags, FncFlags.Definition)) {\n                this.definitionSignature = signature;\n            }\n        }\n\n        public toString() { return this.signatures.toString(); }\n        public toStrings(prefix: string, shortform: bool, scope: SymbolScope) {\n            var result : MemberName[] = [];  \n            var len = this.signatures.length;\n            if (len > 1) {\n                shortform = false;\n            }\n            for (var i = 0; i < len; i++) {\n                // the definition signature shouldn\'t be printed if there are overloads\n                if (len > 1 && this.signatures[i] == this.definitionSignature) {\n                    continue;\n                }\n                if (this.flags & SignatureFlags.IsIndexer) {\n                    result.push(this.signatures[i].toStringHelperEx(shortform, true, scope));\n                }\n                else {\n                    result.push(this.signatures[i].toStringHelperEx(shortform, false, scope, prefix));\n                }\n            }\n            \n            return result;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): SignatureGroup {\n            var result = new SignatureGroup();\n            if (this.signatures) {\n                for (var i = 0, len = this.signatures.length; i < len; i++) {\n                    result.addSignature(this.signatures[i].specializeType(pattern, replacement, checker));\n                }\n            }\n            return result;\n        }\n\n        // verifies that signatures are\n        //  - unique within a given group\n        //  - compatible with the declaration signature\n        public verifySignatures(checker: TypeChecker) {\n\n            var len = 0;\n            \n            // TODO: verify no signature pair with identical parameters\n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                for (var i = 0; i < len; i++) {\n                    \n                    for (var j = i + 1; j < len; j++) {\n                        // next check for equivalence between overloads - no two can be exactly the same                     \n                        if (this.signatures[i].declAST && this.signatures[j].declAST &&\n                            (!hasFlag(this.signatures[i].declAST.fncFlags, FncFlags.Definition) && !hasFlag(this.signatures[j].declAST.fncFlags, FncFlags.Definition)) &&\n                            checker.signaturesAreIdentical(this.signatures[i], this.signatures[j])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, (this.signatures[i].declAST && this.signatures[i].declAST.name) ? "Signature for \'" + this.signatures[i].declAST.name.actualText + "\' is duplicated" :"Signature is duplicated");\n                        }\n                    }\n                    \n                    // finally, ensure that the definition is assignable to each signature\n                    if (this.definitionSignature) {\n                        if (!checker.signatureIsAssignableToTarget(this.definitionSignature, this.signatures[i])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload signature is not compatible with function definition");\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheck(checker: TypeChecker, ast: AST, hasConstruct:bool) {\n            \n            if (this.hasBeenTypechecked) {\n                return;\n            }\n            \n            // set here to prevent us from recursively invoking typeCheck again\n            this.hasBeenTypechecked = true;\n            \n            var len = 0;\n            \n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                // first, typecheck each signature\n                for (var i = 0; i < len; i++) {\n\n                    if (!hasConstruct && !this.definitionSignature && this.signatures[i].declAST && this.signatures[i].declAST.isOverload && !hasFlag(this.signatures[i].declAST.fncFlags, FncFlags.Ambient)) {\n                        checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload declaration lacks definition");\n                    }\n\n                    // If we\'re typechecking a constructor via one of its overloads, ensure that the outer class is typechecked, since we need to validate its inheritance properties\n                    // to properly check that \'super\' is being used correctly\n                    if (this.signatures[i].declAST && this.signatures[i].declAST.isConstructor && this.signatures[i].declAST.classDecl && this.signatures[i].declAST.classDecl.type.symbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                        checker.typeFlow.typeCheck(this.signatures[i].declAST.classDecl);\n                    }\n\n                    checker.typeFlow.typeCheck(this.signatures[i].declAST);\n                }\n\n                this.verifySignatures(checker);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n///<reference path=\'..\\harness\\external\\json2.ts\' />\n\nmodule TypeScript {\n    export class SourceMapPosition {\n        public sourceLine: number;\n        public sourceColumn: number;\n        public emittedLine: number;\n        public emittedColumn: number;\n    }\n\n    export class SourceMapping {\n        public start = new SourceMapPosition();\n        public end = new SourceMapPosition();\n        public nameIndex: number = -1;\n        public childMappings: SourceMapping[] = [];\n    }\n\n    export class SourceMapper {\n        static MapFileExtension = ".map";\n        \n        public sourceMappings: SourceMapping[] = [];\n        public currentMappings: SourceMapping[][] = [];\n\n        public names: string[] = [];\n        public currentNameIndex: number[] = [];\n\n        public jsFileName: string;\n        public tsFileName: string;\n\n        constructor(tsFileName: string, jsFileName: string, public jsFile: ITextWriter, public sourceMapOut: ITextWriter, public errorReporter: ErrorReporter) {\n            this.currentMappings.push(this.sourceMappings);\n\n            jsFileName = switchToForwardSlashes(jsFileName);\n            this.jsFileName = TypeScript.getPrettyName(jsFileName, false, true);\n\n            var removalIndex = jsFileName.lastIndexOf(this.jsFileName);\n            var fixedPath = jsFileName.substring(0, removalIndex);\n\n            this.tsFileName = TypeScript.getRelativePathToFixedPath(fixedPath, tsFileName);\n        }\n        \n        // Generate source mapping\n        static EmitSourceMapping(allSourceMappers: SourceMapper[]) {\n            // At this point we know that there is at least one source mapper present.\n            // If there are multiple source mappers, all will correspond to same map file but different sources\n\n            // Output map file name into the js file\n            var sourceMapper = allSourceMappers[0];\n            sourceMapper.jsFile.WriteLine("//@ sourceMappingURL=" + sourceMapper.jsFileName + SourceMapper.MapFileExtension);\n\n            // Now output map file\n            var sourceMapOut = sourceMapper.sourceMapOut;\n            var mappingsString = "";\n            var tsFiles: string[] = [];\n\n            var prevEmittedColumn = 0;\n            var prevEmittedLine = 0;\n            var prevSourceColumn = 0;\n            var prevSourceLine = 0;\n            var prevSourceIndex = 0;\n            var prevNameIndex = 0;\n            var namesList: string[] = [];\n            var namesCount = 0;\n            var emitComma = false;\n\n            var recordedPosition: SourceMapPosition = null;\n            for (var sourceMapperIndex = 0; sourceMapperIndex < allSourceMappers.length; sourceMapperIndex++) {\n                sourceMapper = allSourceMappers[sourceMapperIndex];\n\n                // If there are any mappings generated\n                var currentSourceIndex = tsFiles.length;\n                tsFiles.push(sourceMapper.tsFileName);\n\n                // Join namelist\n                if (sourceMapper.names.length > 0) {\n                    namesList.push.apply(namesList, sourceMapper.names);\n                }\n\n                var recordSourceMapping = (mappedPosition: SourceMapPosition, nameIndex: number) => {\n                    if (recordedPosition != null &&\n                        recordedPosition.emittedColumn == mappedPosition.emittedColumn &&\n                        recordedPosition.emittedLine == mappedPosition.emittedLine) {\n                        // This position is already recorded\n                        return;\n                    }\n\n                    // Record this position\n                    if (prevEmittedLine !== mappedPosition.emittedLine) {\n                        while (prevEmittedLine < mappedPosition.emittedLine) {\n                            prevEmittedColumn = 0;\n                            mappingsString = mappingsString + ";";\n                            prevEmittedLine++;\n                        }\n                        emitComma = false;\n                    }\n                    else if (emitComma) {\n                        mappingsString = mappingsString + ",";\n                    }\n\n                    // 1. Relative Column\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.emittedColumn - prevEmittedColumn);\n                    prevEmittedColumn = mappedPosition.emittedColumn;\n\n                    // 2. Relative sourceIndex \n                    mappingsString = mappingsString + Base64VLQFormat.encode(currentSourceIndex - prevSourceIndex);\n                    prevSourceIndex = currentSourceIndex;\n\n                    // 3. Relative sourceLine 0 based\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceLine - 1 - prevSourceLine);\n                    prevSourceLine = mappedPosition.sourceLine - 1;\n\n                    // 4. Relative sourceColumn 0 based \n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceColumn - prevSourceColumn);\n                    prevSourceColumn = mappedPosition.sourceColumn;\n\n                    // 5. Relative namePosition 0 based\n                    if (nameIndex >= 0) {\n                        mappingsString = mappingsString + Base64VLQFormat.encode(namesCount + nameIndex - prevNameIndex);\n                        prevNameIndex = namesCount + nameIndex;\n                    }\n\n                    emitComma = true;\n                    recordedPosition = mappedPosition;\n                }\n\n                // Record starting spans\n                var recordSourceMappingSiblings = (sourceMappings: SourceMapping[]) => {\n                    for (var i = 0; i < sourceMappings.length; i++) {\n                        var sourceMapping = sourceMappings[i];\n                        recordSourceMapping(sourceMapping.start, sourceMapping.nameIndex);\n                        recordSourceMappingSiblings(sourceMapping.childMappings);\n                        recordSourceMapping(sourceMapping.end, sourceMapping.nameIndex);\n                    }\n                }\n\n                recordSourceMappingSiblings(sourceMapper.sourceMappings, -1);\n                namesCount = namesCount + sourceMapper.names.length;\n            }\n\n            // Write the actual map file\n            if (mappingsString != "") {\n                sourceMapOut.Write(JSON2.stringify({\n                    version: 3,\n                    file: sourceMapper.jsFileName,\n                    sources: tsFiles,\n                    names: namesList,\n                    mappings: mappingsString\n                }));\n            }\n\n            // Done, close the file\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                sourceMapOut.Close();\n            } catch (ex) {\n                sourceMapper.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // private members are private to the scope\n    // public members are public to the scope\n    export class ScopedMembers {\n\n        public allMembers: IHashTable;\n        public publicMembers: IHashTable;\n        public privateMembers: IHashTable;\n\n        constructor (public dualMembers: DualStringHashTable) { \n            this.allMembers = this.dualMembers;\n            this.publicMembers = this.dualMembers.primaryTable;\n            this.privateMembers = this.dualMembers.secondaryTable;\n        }\n\n        // add a public member\n        public addPublicMember(key: string, data) { return this.dualMembers.primaryTable.add(key, data); }\n\n        // add a private member \n        public addPrivateMember(key: string, data) { return this.dualMembers.secondaryTable.add(key, data); }\n    }\n\n    export enum SymbolKind {\n        None,\n        Type,\n        Field,\n        Parameter,\n        Variable,\n    }\n\n    export class SymbolScope {\n        constructor (public container: Symbol) { }\n        public printLabel() { return "base"; }\n        public getAllSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        public getAllTypeSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        public getAllValueSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        // advanced search using a filter\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in this immediate scope\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in value namespace \n        public find(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find symbol that supplies an implementation\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // restrict the search to ambient values\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        public print(outfile: ITextWriter) {\n            if (this.container) {\n                outfile.WriteLine(this.printLabel() + " scope with container: " + this.container.name + "...");\n            }\n            else {\n                outfile.WriteLine(this.printLabel() + " scope...");\n            }\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, errorReporter: ErrorReporter, publicOnly: bool,\n            typespace: bool, ambient: bool): void {\n            throw new Error("please implement in derived class");\n        }\n\n        public getTable(): IHashTable {\n            throw new Error("please implement in derived class");\n        }\n    }\n\n    function symbolCanBeUsed(sym: Symbol, publicOnly) {\n        return publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                            (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                          : true;\n    }\n\n    export class SymbolAggregateScope extends SymbolScope {\n        public printLabel() { return "agg"; }\n        public valueCache: IHashTable = null;\n        public valueImplCache: IHashTable = null;\n        public valueAmbientCache: IHashTable = null;\n        public typeCache: IHashTable = null;\n        public typeImplCache: IHashTable = null;\n        public typeAmbientCache: IHashTable = null;\n        public parents: SymbolScope[] = null;\n        public container: Symbol;\n\n        constructor (container: Symbol) {\n            super(container);\n            this.container = container;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var sym = this.parents[i].search(filter, name, publicOnly, typespace);\n                    if (sym) {\n                        if (filter.update(sym)) {\n                            return sym;\n                        }\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public getAllSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllTypeSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllValueSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    this.parents[i].print(outfile);\n                }\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var implCache = this.valueImplCache;\n\n            if (typespace) {\n                implCache = this.typeImplCache;\n            }\n            if (implCache &&\n                ((sym = implCache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].findImplementation(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (implCache) {\n                if (typespace) {\n                    this.typeImplCache = new StringHashTable();\n                    implCache = this.typeImplCache;\n                }\n                else {\n                    this.valueImplCache = new StringHashTable();\n                    implCache = this.valueImplCache;\n                }\n            }\n            implCache.add(name, sym);\n            return sym;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueCache;\n\n            if (typespace) {\n                cache = this.typeCache;\n            }\n            if (cache &&\n                ((sym = cache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].find(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache == null) {\n                if (typespace) {\n                    this.typeCache = new StringHashTable();\n                    cache = this.typeCache;\n                }\n                else {\n                    this.valueCache = new StringHashTable();\n                    cache = this.valueCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueAmbientCache;\n            if (typespace) {\n                cache = this.typeAmbientCache;\n            }\n            if (cache && ((sym = cache.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].findAmbient(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache == null) {\n                if (typespace) {\n                    this.typeAmbientCache = new StringHashTable();\n                    cache = this.typeAmbientCache;\n                }\n                else {\n                    this.valueAmbientCache = new StringHashTable();\n                    cache = this.valueAmbientCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public addParentScope(parent: SymbolScope): void {\n            if (this.parents == null) {\n                this.parents = new SymbolScope[];\n            }\n            this.parents[this.parents.length] = parent;\n        }\n    }\n\n    export class SymbolTableScope extends SymbolScope {\n        public container: Symbol;\n\n        constructor(public valueMembers: ScopedMembers,\n                            public ambientValueMembers: ScopedMembers,\n                            public enclosedTypes: ScopedMembers,\n                            public ambientEnclosedTypes: ScopedMembers,\n                            container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return "table"; }\n\n        public getAllSymbolNames(members: bool): string[]{\n            var result = this.getAllTypeSymbolNames(members);\n\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym = this.find(name, publicOnly, typespace);\n            filter.update(sym);\n            return filter.result;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var table: IHashTable = null;\n            var ambientTable: IHashTable = null;\n\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            else {\n                table = (this.valueMembers == null) ? null :\n                                publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n                ambientTable = (this.ambientValueMembers == null) ? null :\n                                    publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n            if (table) {\n                var s = table.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n                this.valueMembers.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = this.find(name, publicOnly, typespace);\n            if (sym) {\n                if (sym.kind() == SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>sym;\n                    if (!typeSym.type.hasImplementation()) {\n                        sym = null;\n                    }\n                }\n                else if (sym.container) {\n                    if (sym.container.kind() == SymbolKind.Type) {\n                        var ctypeSym = <TypeSymbol>sym.container;\n                        if (!ctypeSym.type.hasImplementation()) {\n                            sym = null;\n                        }\n                    }\n                }\n            }\n            return sym;\n        }\n\n        public getTable() {\n            return this.valueMembers.publicMembers;\n        }\n    }\n\n    export class SymbolScopeBuilder extends SymbolScope {\n        public container: Symbol;\n        \n        constructor (public valueMembers: ScopedMembers,\n                    public ambientValueMembers: ScopedMembers,\n                    public enclosedTypes: ScopedMembers,\n                    public ambientEnclosedTypes: ScopedMembers,\n                    public parent: SymbolScope,\n                    container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return "builder"; }\n        public getAllSymbolNames(members: bool): string[]{\n            var result: string[] = this.getAllTypeSymbolNames(members);\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllTypeSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllValueSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            if (this.parent) {\n                sym = this.parent.search(filter, name, publicOnly, typespace);\n                if (sym) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n                this.valueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.parent) {\n                this.parent.print(outfile);\n            }\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (table && ((sym = table.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.find(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.findAmbient(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            return null;\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, errorReporter: ErrorReporter, insertAsPublic: bool, typespace: bool, ambient: bool): void {\n            var table = null;\n\n            if (ambient) {\n                if (typespace) {\n                    table = (this.ambientEnclosedTypes == null) ? null :\n                                    insertAsPublic ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.ambientValueMembers == null) ? null :\n                                insertAsPublic ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.privateMembers;\n                }\n            }\n            else {\n                if (typespace) {\n                    table = (this.enclosedTypes == null) ? null :\n                                insertAsPublic ? this.enclosedTypes.publicMembers : this.enclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.valueMembers == null) ? null :\n                                insertAsPublic ? this.valueMembers.publicMembers : this.valueMembers.privateMembers;\n                }\n            }\n\n            if (table) {\n                if (!table.add(symbol.name, symbol)) {\n                    errorReporter.duplicateIdentifier(ast, symbol.name);\n                }\n            }\n            else {\n                CompilerDiagnostics.Alert("YYYYY");  // REVIEW: Surely we can do better than this...\n            }\n            symbol.container = container;\n        }\n\n        public getTable() { return this.valueMembers.allMembers; }\n    }\n\n    export class FilteredSymbolScope extends SymbolScope {\n        constructor (public scope: SymbolScope, container: Symbol, public filter: ScopeSearchFilter) {\n            super(container);\n        }\n        public print(outfile: ITextWriter) {\n            this.scope.print(outfile);\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool) {\n            this.filter.reset();\n            return this.scope.search(this.filter, name, publicOnly, typespace);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool) { return this.scope.findLocal(name, publicOnly, typespace); }\n    }\n\n    export class FilteredSymbolScopeBuilder extends SymbolScopeBuilder {\n        constructor (valueMembers: ScopedMembers, parent: SymbolScope, container: Symbol, public filter: (sym: Symbol) =>bool) {\n            super(valueMembers, null, null, null, parent, container);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return sym;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool):Symbol {\n            throw new Error("please implement");\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return super.find(name, publicOnly, typespace);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeCheckStatus {\n        NotStarted,\n        Started,\n        Finished,\n    }\n\n    // For lexically-scoped constructs\n    export function aLexicallyEnclosesB(a: Symbol, b: Symbol) {\n        if (a.declAST && b && b.declAST && a.declAST.nodeType == NodeType.FuncDecl) {\n            return a.declAST.minChar <= b.declAST.minChar && a.declAST.limChar >= b.declAST.limChar;\n        }\n        else {\n            return false;\n        }\n    }\n\n    export function aEnclosesB(a: Symbol, b: Symbol) {\n        while (a.container) {\n            if (a == b || aLexicallyEnclosesB(a.container, b)) {\n                return true;\n            }\n            a = a.container;\n        }\n        return false;\n    }\n\n    export interface PhasedTypecheckObject {\n        typeCheckStatus: TypeCheckStatus;\n    }\n\n    export class Symbol {\n        public bound = false;\n        public container: Symbol;\n        public instanceScope(): SymbolScope { return null; }\n        public isVariable() { return false; }\n        public isMember() { return false; }\n        public isInferenceSymbol() { return false; }\n        public isWith() { return false; }\n        public writeable() { return false; }\n        public isType(): bool { return false; }\n        public getType(): Type { return null; }\n        public flags: SymbolFlags = SymbolFlags.None;\n        public refs: Identifier[];\n        public isAccessor() { return false; }\n        public isObjectLitField = false;\n\n        public declAST: AST = null;\n        public declModule: ModuleDeclaration = null;  // if child of module, this is the module that declared it\n\n        public passSymbolCreated: number = CompilerDiagnostics.analysisPass;\n\n        constructor(public name: string, public location: number, public length: number,\n                 public unitIndex: number) { }\n\n        public isInstanceProperty() {\n            return hasFlag(this.flags, SymbolFlags.Property) && (!hasFlag(this.flags, SymbolFlags.ModuleMember));\n        }\n\n        public getTypeName(scope: SymbolScope): string {\n            return this.getTypeNameEx(scope).toString();\n        }\n        \n        public getTypeNameEx(scope: SymbolScope): MemberName {\n            return MemberName.create(this.toString());\n        }\n\n        public getOptionalNameString() {\n            return hasFlag(this.flags, SymbolFlags.Optional) ? "?" : "";\n        }\n\n        public pathToRoot() {\n            var path = new Symbol[];\n            var node = this;\n            while (node && (node.name != globalId)) {\n                path[path.length] = node;\n                node = node.container;\n            }\n            return path;\n        }\n\n        public findCommonAncestorPath(b: Symbol) {\n            if (this.container == null) {\n                return new Symbol[];\n            }\n            var aPath = this.container.pathToRoot();\n            var bPath: Symbol[];\n            if (b) {\n                bPath = b.pathToRoot();\n            }\n            else {\n                bPath = new Symbol[];\n            }\n            var commonNodeIndex = -1;\n            for (var i = 0, aLen = aPath.length; i < aLen; i++) {\n                var aNode = aPath[i];\n                for (var j = 0, bLen = bPath.length; j < bLen; j++) {\n                    var bNode = bPath[j];\n                    if (aNode == bNode) {\n                        commonNodeIndex = i;\n                        break;\n                    }\n                }\n                if (commonNodeIndex >= 0) {\n                    break;\n                }\n            }\n            if (commonNodeIndex >= 0) {\n                return aPath.slice(0, commonNodeIndex);\n            }\n            else {\n                return aPath;\n            }\n        }\n\n        // Gets the pretty Name for the symbol withing the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            return this.name;\n        }\n\n        public scopeRelativeName(scope: SymbolScope): string {\n            if (scope == null) {\n                return this.getPrettyName(null) + this.getOptionalNameString();\n            }\n            var lca = this.findCommonAncestorPath(scope.container);\n            var builder = "";\n            for (var i = 0, len = lca.length; i < len; i++) {\n                var prettyName = lca[i].getPrettyName(i == len - 1 ? scope.container : lca[i + 1]);\n                builder = prettyName + "." + builder;\n            }\n            builder += this.getPrettyName(len == 0 ? scope.container : lca[0]) + this.getOptionalNameString();\n            return builder;\n        }\n\n        public fullName(): string {\n            var builder = this.name;\n            var ancestor = this.container;\n            while (ancestor && (ancestor.name != globalId)) {\n                builder = ancestor.name + "." + builder;\n                ancestor = ancestor.container;\n            }\n            return builder;\n        }\n\n        public isExternallyVisible(checker: TypeChecker) {\n            // Global module is not hidden\n            if (this == checker.gloMod) {\n                return true;\n            }\n\n            // private symbol\n            if (hasFlag(this.flags, SymbolFlags.Private)) {\n                return false;\n            }\n\n            // If the current container is not exported\n            // If its in global - it is visible, otherwise it isn\'t\n            if (!hasFlag(this.flags, SymbolFlags.Exported)) {\n                return this.container == checker.gloMod;\n            }\n\n            // It is visible if its container is visible too\n            return this.container.isExternallyVisible(checker);\n        }\n\n        public visible(scope: SymbolScope, checker: TypeChecker) {\n            if (checker == null || this.container == checker.gloMod) {\n                return true;\n            }\n\n            if (hasFlag(this.flags, SymbolFlags.ModuleMember)) {\n\n                if (hasFlag(this.flags, SymbolFlags.Exported)) {\n                    if (!hasFlag(this.flags, SymbolFlags.Private)) {\n                        return true;\n                    }\n                    else {\n                        return aEnclosesB(this, scope.container);\n                    }\n                }\n                else {\n                    // REVIEW:\n                    // Note that in the scope-assignment and binding phases,\n                    // currentModDecl will point to the "master" module decl,\n                    // and not necessarily the one that the symbol in question\n                    // was declared in.\n                    // That\'s ok - there\'s no harm done in attributing the symbol\n                    // to the master mod decl in either of those phases, so long\n                    // as we reference the actual module fragment of declaration\n                    // during typecheck.  Doing this also prevents us from printing\n                    // multiple error messages if the symbol is not visible.\n                    return checker && (checker.currentModDecl == this.declModule) ||\n                                                (checker.currentModDecl &&\n                                                    checker.currentModDecl.mod &&\n                                                    checker.currentModDecl.mod.symbol &&\n                                                    this.declModule &&\n                                                    this.declModule.mod &&\n                                                    this.declModule.mod.symbol &&\n                                                    aEnclosesB(checker.currentModDecl.mod.symbol, this.declModule.mod.symbol));\n                }\n            }\n            else {\n                // field or method\n                var isFunction = this.declAST && this.declAST.nodeType == NodeType.FuncDecl;\n                var isMethod = isFunction && (<FuncDecl>this.declAST).isMethod();\n                var isStaticFunction = isFunction && hasFlag((<FuncDecl>this.declAST).fncFlags, FncFlags.Static)\n                var isPrivateMethod = isMethod && hasFlag((<FuncDecl>this.declAST).fncFlags, FncFlags.Private);\n                var isAlias = this.isType() && (<TypeSymbol>this).aliasLink;\n\n                if (this.isMember() || isMethod || isStaticFunction || isAlias) {\n                    if (hasFlag(this.flags, SymbolFlags.Private) || isPrivateMethod) {\n                        if (scope.container == null && this.container != scope.container) {\n                            return false; // it\'s an inner member being accessed by the global scope\n                        }\n                        else {\n                            return this.container == null ? true : aEnclosesB(scope.container, this.container);\n                        }\n                    }\n                    else {\n                        return true;\n                    }\n                }\n                else if (this.container) {\n                    return aEnclosesB(this, scope.container);\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n\n        public addRef(identifier: Identifier) {\n            if (!this.refs) {\n                this.refs = [];\n            }\n            this.refs[this.refs.length] = identifier;\n        }\n\n        public toString() {\n            if (this.name) {\n                return this.name;\n            }\n            else {\n                return "_anonymous";\n            }\n        }\n\n        public print(outfile) {\n            outfile.Write(this.toString());\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            throw new Error("please implement in derived class");\n        }\n\n        public setType(type: Type) {\n            throw new Error("please implement in derived class");\n        }\n\n        public kind(): SymbolKind {\n            throw new Error("please implement in derived class");\n        }\n\n        public getInterfaceDeclFromSymbol(checker: TypeChecker) {\n            if (this.declAST != null) {\n                if (this.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.declAST;\n                } else if (this.container != null && this.container != checker.gloMod && this.container.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.container.declAST;\n                }\n            }\n\n            return null;\n        }\n\n        public getVarDeclFromSymbol() {\n            if (this.declAST != null && this.declAST.nodeType == NodeType.VarDecl) {\n                return <VarDecl>this.declAST;\n            }\n\n            return null;\n        }\n\n        public getDocComments() : Comment[] {\n            if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n        public isStatic() {\n            return hasFlag(this.flags, SymbolFlags.Static);\n        }\n    }\n\n    export class ValueLocation {\n        public symbol: Symbol;\n        public typeLink: TypeLink;\n    }\n\n    export class InferenceSymbol extends Symbol {\n        constructor (name: string, location: number, length: number, unitIndex: number) {\n            super(name, location, length, unitIndex);\n        }\n\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public isInferenceSymbol() { return true; }\n        public transferVarFlags(varFlags: VarFlags) {\n            if (hasFlag(varFlags, VarFlags.Ambient)) {\n                this.flags |= SymbolFlags.Ambient;\n            }\n            if (hasFlag(varFlags, VarFlags.Constant)) {\n                this.flags |= SymbolFlags.Constant;\n            }\n            if (hasFlag(varFlags, VarFlags.Static)) {\n                this.flags |= SymbolFlags.Static;\n            }\n            if (hasFlag(varFlags, VarFlags.Property)) {\n                this.flags |= SymbolFlags.Property;\n            }\n            if (hasFlag(varFlags, VarFlags.Private)) {\n                this.flags |= SymbolFlags.Private;\n            }\n            if (hasFlag(varFlags, VarFlags.Public)) {\n                this.flags |= SymbolFlags.Public;\n            }\n            if (hasFlag(varFlags, VarFlags.Readonly)) {\n                this.flags |= SymbolFlags.Readonly;\n            }\n            if (hasFlag(varFlags, VarFlags.Exported)) {\n                this.flags |= SymbolFlags.Exported;\n            }\n        }\n    }\n\n    export class TypeSymbol extends InferenceSymbol {\n        public additionalLocations: number[];\n        public expansions: Type[] = []; // For types that may be "split", keep track of the subsequent definitions\n        public expansionsDeclAST: AST[] = [];\n        public isDynamic = false;\n\n        constructor (locName: string, location: number, length: number, unitIndex: number, public type: Type) {\n            super(locName, location, length, unitIndex);\n            this.prettyName = this.name;\n        }\n\n        public addLocation(loc: number) {\n            if (this.additionalLocations == null) {\n                this.additionalLocations = [];\n            }\n            this.additionalLocations[this.additionalLocations.length] = loc;\n        }\n        public isMethod = false;\n        public aliasLink:ImportDeclaration = null;\n        public kind() { return SymbolKind.Type; }\n        public isType(): bool { return true; }\n        public getType() { return this.type; }\n        public prettyName: string;\n        public onlyReferencedAsTypeRef = optimizeModuleCodeGen;\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return this.type.getMemberTypeNameEx(this.name ? this.name + this.getOptionalNameString() : "", false, false, scope);\n        }\n\n        public instanceScope(): SymbolScope {\n            // Don\'t use the constructor scope for a class body or methods - use the contained scope\n            if (!(this.type.typeFlags & TypeFlags.IsClass) && this.type.isClass()) {\n                return this.type.instanceType.constructorScope;\n            }\n            else {\n                return this.type.containedScope;\n            }\n        }\n        // corresponding instance type if this is a class\n        public instanceType: Type;\n\n        public toString() {\n            var result = this.type.getTypeName();\n            if (this.name) {\n                result = this.name + ":" + result;\n            }\n            return result;\n        }\n\n        public isClass() { return this.instanceType != null; }\n        public isFunction() { return this.declAST != null && this.declAST.nodeType == NodeType.FuncDecl; }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            if (this.type == pattern) {\n                return replacement.symbol;\n            }\n            else {\n                var replType = this.type.specializeType(pattern, replacement, checker, false);\n                if (replType != this.type) {\n                    var result = new TypeSymbol(this.name, -1, 0, -1, replType);\n                    return result;\n                }\n                else {\n                    return this;\n                }\n            }\n        }\n\n        // Gets the pretty name of the symbol with respect to symbol of the scope (scopeSymbol)\n        // searchTillRoot specifies if the name need to searched in the root path of the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            if (!!scopeSymbol && isQuoted(this.prettyName) && this.type.isModuleType()) {\n                // Its a dynamic module - and need to be specialized with the scope\n                // Check in exported module members in each scope\n                var symbolPath = scopeSymbol.pathToRoot();\n                var prettyName = this.getPrettyNameOfDynamicModule(symbolPath);\n                if (prettyName != null) {\n                    return prettyName.name;\n                }\n            }\n\n            return this.prettyName;\n        }\n\n        public getPrettyNameOfDynamicModule(scopeSymbolPath: Symbol[]) {\n            var scopeSymbolPathLength = scopeSymbolPath.length;\n            var externalSymbol: { name: string; symbol: Symbol; } = null;\n            if (scopeSymbolPath.length > 0 &&\n                scopeSymbolPath[scopeSymbolPathLength - 1].getType().isModuleType() &&\n                (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 1]).isDynamic) {\n\n                // Check if submodule is dynamic\n                if (scopeSymbolPathLength > 1 &&\n                    scopeSymbolPath[scopeSymbolPathLength - 2].getType().isModuleType() &&\n                    (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 2]).isDynamic) {\n                    var moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 2].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n\n                }\n\n                if (externalSymbol == null) {\n                    // Check in this module\n                    var moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 1].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n                }\n            }\n\n            return externalSymbol;\n        }\n\n        public getDocComments(): Comment[]{\n            var comments : Comment[] = [];\n            if (this.declAST != null) {\n                comments = comments.concat(this.declAST.getDocComments());\n            }\n\n            for (var i = 0; i < this.expansionsDeclAST.length; i++) {\n                comments = comments.concat(this.expansionsDeclAST[i].getDocComments());\n            }\n\n            return comments;\n        }\n    }\n\n    export class WithSymbol extends TypeSymbol {\n        constructor (location: number, unitIndex: number, withType: Type) {\n            super("with", location, 4, unitIndex, withType);\n        }\n        public isWith() { return true; }\n    }\n\n    export class FieldSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n\n        constructor (name: string, location: number, unitIndex: number, public canWrite: bool,\n                      public field: ValueLocation) {\n\n            super(name, location, name.length, unitIndex);\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Field; }\n        public writeable() { return this.isAccessor() ? this.setter != null : this.canWrite; }\n        public getType() { return this.field.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.field.typeLink.type.getScopedTypeNameEx(scope), this.name + this.getOptionalNameString() + ": ", "");\n        }\n\n        public isMember() { return true; }\n        public setType(type: Type) {\n            this.field.typeLink.type = type;\n        }\n\n        public getter: TypeSymbol = null;\n        public setter: TypeSymbol = null;\n        public hasBeenEmitted = false; // since getters and setters are emitted together, need to track if one has been emitted\n\n        public isAccessor() { return this.getter != null || this.setter != null; }\n\n        public isVariable() { return true; }\n        public toString() { return this.getTypeNameEx(null).toString(); }\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.field.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (rType != this.field.typeLink.type) {\n                var fieldDef = new ValueLocation();\n                var result = new FieldSymbol(this.name, 0, checker.locationInfo.unitIndex,\n                                           this.canWrite, fieldDef);\n                result.flags = this.flags;\n                fieldDef.symbol = result;\n                fieldDef.typeLink = new TypeLink();\n                result.setType(rType);\n                result.typeCheckStatus = TypeCheckStatus.Finished;\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getDocComments(): Comment[] {\n            if (this.getter != null || this.setter != null) {\n                var comments : Comment[] = [];\n                if (this.getter != null) {\n                    comments = comments.concat(this.getter.getDocComments());\n                }\n                if (this.setter != null) {\n                    comments = comments.concat(this.setter.getDocComments());\n                }\n                return comments;\n            }\n            else if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n    }\n\n    export class ParameterSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n        private paramDocComment: string = null;\n        public funcDecl: AST = null;\n        \n        constructor (name: string, location: number, unitIndex: number,\n                          public parameter: ValueLocation) {\n            super(name, location, name.length, unitIndex);\n\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Parameter; }\n        public writeable() { return true; }\n        public getType() { return this.parameter.typeLink.type; }\n        public setType(type: Type) {\n            this.parameter.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n        public argsOffset = (-1);\n        public isOptional() {\n            if (this.parameter && this.parameter.symbol && this.parameter.symbol.declAST) {\n                return (<ArgDecl>this.parameter.symbol.declAST).isOptional;\n            }\n            else {\n                return false;\n            }\n        }\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + (this.isOptional() ? "?" : "") + ": ", "");\n        }\n\n        public toString() { return this.getTypeNameEx(null).toString(); }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.parameter.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (this.parameter.typeLink.type != rType) {\n                var paramDef = new ValueLocation();\n                var result = new ParameterSymbol(this.name, 0, checker.locationInfo.unitIndex,\n                                               paramDef);\n                paramDef.symbol = result;\n                result.setType(rType);\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getParameterDocComments() {\n            if (!this.paramDocComment) {\n                var parameterComments: string[] = [];\n                if (this.funcDecl) {\n                    var fncDocComments = this.funcDecl.getDocComments();\n                    var paramComment = Comment.getParameterDocCommentText(this.name, fncDocComments);\n                    if (paramComment != "") {\n                        parameterComments.push(paramComment);\n                    }\n                }\n                var docComments = TypeScript.Comment.getDocCommentText(this.getDocComments());\n                if (docComments != "") {\n                    parameterComments.push(docComments);\n                }\n                \n                this.paramDocComment = parameterComments.join("\\n");\n            }\n\n            return this.paramDocComment;\n        }\n    }\n\n    export class VariableSymbol extends InferenceSymbol {\n\n        constructor (name: string, location: number, unitIndex: number, public variable: ValueLocation) {\n            super(name, location, name.length, unitIndex);\n        }\n        public kind() { return SymbolKind.Variable; }\n        public writeable() { return true; }\n        public getType() { return this.variable.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + ": ", "");\n        }\n\n        public setType(type: Type) {\n            this.variable.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export enum TokenID {\n        // Keywords\n        Any,\n        Bool,\n        Break,\n        Case,\n        Catch,\n        Class,\n        Const,\n        Continue,\n        Debugger,\n        Default,\n        Delete,\n        Do,\n        Else,\n        Enum,\n        Export,\n        Extends,\n        Declare,\n        False,\n        Finally,\n        For,\n        Function,\n        Constructor,\n        Get,\n        If,\n        Implements,\n        Import,\n        In,\n        InstanceOf,\n        Interface,\n        Let,\n        Module,\n        New,\n        Number,\n        Null,\n        Package,\n        Private,\n        Protected,\n        Public,\n        Return,\n        Set,\n        Static,\n        String,\n        Super,\n        Switch,\n        This,\n        Throw,\n        True,\n        Try,\n        TypeOf,\n        Var,\n        Void,\n        With,\n        While,\n        Yield,\n        // Punctuation\n        Semicolon,\n        OpenParen,\n        CloseParen,\n        OpenBracket,\n        CloseBracket,\n        OpenBrace,\n        CloseBrace,\n        Comma,\n        Equals,\n        PlusEquals,\n        MinusEquals,\n        AsteriskEquals,\n        SlashEquals,\n        PercentEquals,\n        AmpersandEquals,\n        CaretEquals,\n        BarEquals,\n        LessThanLessThanEquals,\n        GreaterThanGreaterThanEquals,\n        GreaterThanGreaterThanGreaterThanEquals,\n        Question,\n        Colon,\n        BarBar,\n        AmpersandAmpersand,\n        Bar,\n        Caret,\n        And,\n        EqualsEquals,\n        ExclamationEquals,\n        EqualsEqualsEquals,\n        ExclamationEqualsEquals,\n        LessThan,\n        LessThanEquals,\n        GreaterThan,\n        GreaterThanEquals,\n        LessThanLessThan,\n        GreaterThanGreaterThan,\n        GreaterThanGreaterThanGreaterThan,\n        Plus,\n        Minus,\n        Asterisk,\n        Slash,\n        Percent,\n        Tilde,\n        Exclamation,\n        PlusPlus,\n        MinusMinus,\n        Dot,\n        DotDotDot,\n        Error,\n        EndOfFile,\n        EqualsGreaterThan,\n        Identifier,\n        StringLiteral,\n        RegularExpressionLiteral,\n        NumberLiteral,\n        Whitespace,\n        Comment,\n        Lim,\n        LimFixed = EqualsGreaterThan,\n        LimKeyword = Yield,\n    }\n\n    export var tokenTable = new TokenInfo[];\n    export var nodeTypeTable = new string[];\n    export var nodeTypeToTokTable = new number[];\n    export var noRegexTable = new bool[];\n\n    noRegexTable[TokenID.Identifier] = true;\n    noRegexTable[TokenID.StringLiteral] = true;\n    noRegexTable[TokenID.NumberLiteral] = true;\n    noRegexTable[TokenID.RegularExpressionLiteral] = true;\n    noRegexTable[TokenID.This] = true;\n    noRegexTable[TokenID.PlusPlus] = true;\n    noRegexTable[TokenID.MinusMinus] = true;\n    noRegexTable[TokenID.CloseParen] = true;\n    noRegexTable[TokenID.CloseBracket] = true;\n    noRegexTable[TokenID.CloseBrace] = true;\n    noRegexTable[TokenID.True] = true;\n    noRegexTable[TokenID.False] = true;\n\n    export enum OperatorPrecedence {\n        None,\n        Comma,\n        Assignment,\n        Conditional,\n        LogicalOr,\n        LogicalAnd,\n        BitwiseOr,\n        BitwiseExclusiveOr,\n        BitwiseAnd,\n        Equality,\n        Relational,\n        Shift,\n        Additive,\n        Multiplicative,\n        Unary,\n        Lim\n    }\n\n    export enum Reservation {\n        None = 0,\n        Javascript = 1,\n        JavascriptFuture = 2,\n        TypeScript = 4,\n        JavascriptFutureStrict = 8,\n        TypeScriptAndJS = Javascript | TypeScript,\n        TypeScriptAndJSFuture = JavascriptFuture | TypeScript,\n        TypeScriptAndJSFutureStrict = JavascriptFutureStrict | TypeScript,\n    }\n\n    export class TokenInfo {\n        constructor (public tokenId: TokenID, public reservation: Reservation,\n                    public binopPrecedence: number, public binopNodeType: number,\n                    public unopPrecedence: number, public unopNodeType: number,\n                    public text: string, public ers: ErrorRecoverySet) { }\n    }\n\n    function setTokenInfo(tokenId: TokenID, reservation: number, binopPrecedence: number,\n        binopNodeType: number, unopPrecedence: number, unopNodeType: number,\n        text: string, ers: ErrorRecoverySet) {\n        if (tokenId !== undefined) {\n            tokenTable[tokenId] = new TokenInfo(tokenId, reservation, binopPrecedence,\n                                              binopNodeType, unopPrecedence, unopNodeType, text, ers);\n            if (binopNodeType != NodeType.None) {\n                nodeTypeTable[binopNodeType] = text;\n                nodeTypeToTokTable[binopNodeType] = tokenId;\n            }\n            if (unopNodeType != NodeType.None) {\n                nodeTypeTable[unopNodeType] = text;\n            }\n        }\n    }\n\n    setTokenInfo(TokenID.Any, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "any", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Bool, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "bool", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Break, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "break", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Case, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "case", ErrorRecoverySet.SCase);\n    setTokenInfo(TokenID.Catch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "catch", ErrorRecoverySet.Catch);\n    setTokenInfo(TokenID.Class, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "class", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Const, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "const", ErrorRecoverySet.Var);\n    setTokenInfo(TokenID.Continue, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "continue", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Debugger, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.Debugger, "debugger", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Default, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "default", ErrorRecoverySet.SCase);\n    setTokenInfo(TokenID.Delete, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Delete, "delete", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.Do, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "do", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Else, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "else", ErrorRecoverySet.Else);\n    setTokenInfo(TokenID.Enum, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "enum", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Export, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "export", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Extends, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "extends", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Declare, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "declare", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.False, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "false", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Finally, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "finally", ErrorRecoverySet.Catch);\n    setTokenInfo(TokenID.For, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "for", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Function, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "function", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Constructor, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "constructor", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Get, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "get", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Set, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "set", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.If, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "if", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Implements, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "implements", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Import, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "import", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.In, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.In, OperatorPrecedence.None, NodeType.None, "in", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.InstanceOf, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.InstOf, OperatorPrecedence.None, NodeType.None, "instanceof", ErrorRecoverySet.BinOp);\n    setTokenInfo(TokenID.Interface, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "interface", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Let, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "let", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Module, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "module", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.New, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "new", ErrorRecoverySet.PreOp);\n    setTokenInfo(TokenID.Number, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "number", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Null, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "null", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Package, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "package", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Private, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "private", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Protected, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "protected", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Public, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "public", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Return, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "return", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Static, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "static", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.String, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "string", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Super, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "super", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Switch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "switch", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.This, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "this", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Throw, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "throw", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.True, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "true", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Try, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "try", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.TypeOf, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Typeof, "typeof", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.Var, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "var", ErrorRecoverySet.Var);\n    setTokenInfo(TokenID.Void, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Void, "void", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.With, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.With, "with", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.While, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "while", ErrorRecoverySet.While);\n    setTokenInfo(TokenID.Yield, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "yield", ErrorRecoverySet.None);\n\n    setTokenInfo(TokenID.Identifier, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "identifier", ErrorRecoverySet.ID);\n    setTokenInfo(TokenID.NumberLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "numberLiteral", ErrorRecoverySet.Literal);\n    setTokenInfo(TokenID.RegularExpressionLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "regex", ErrorRecoverySet.RegExp);\n    setTokenInfo(TokenID.StringLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "qstring", ErrorRecoverySet.Literal);\n\n    // Non-operator non-identifier tokens\n    setTokenInfo(TokenID.Semicolon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ";", ErrorRecoverySet.SColon); // ;\n    setTokenInfo(TokenID.CloseParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ")", ErrorRecoverySet.RParen); // )\n    setTokenInfo(TokenID.CloseBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "]", ErrorRecoverySet.RBrack); // ]\n    setTokenInfo(TokenID.OpenBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "{", ErrorRecoverySet.LCurly); // {\n    setTokenInfo(TokenID.CloseBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "}", ErrorRecoverySet.RCurly); // }\n    setTokenInfo(TokenID.DotDotDot, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "...", ErrorRecoverySet.None); // ...\n\n    // Operator non-identifier tokens\n    setTokenInfo(TokenID.Comma, Reservation.None, OperatorPrecedence.Comma, NodeType.Comma, OperatorPrecedence.None, NodeType.None, ",", ErrorRecoverySet.Comma); // ,\n    setTokenInfo(TokenID.Equals, Reservation.None, OperatorPrecedence.Assignment, NodeType.Asg, OperatorPrecedence.None, NodeType.None, "=", ErrorRecoverySet.Asg); // =\n    setTokenInfo(TokenID.PlusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAdd, OperatorPrecedence.None, NodeType.None, "+=", ErrorRecoverySet.BinOp); // +=\n    setTokenInfo(TokenID.MinusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgSub, OperatorPrecedence.None, NodeType.None, "-=", ErrorRecoverySet.BinOp); // -=\n    setTokenInfo(TokenID.AsteriskEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMul, OperatorPrecedence.None, NodeType.None, "*=", ErrorRecoverySet.BinOp); // *=\n\n    setTokenInfo(TokenID.SlashEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgDiv, OperatorPrecedence.None, NodeType.None, "/=", ErrorRecoverySet.BinOp); // /=\n    setTokenInfo(TokenID.PercentEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMod, OperatorPrecedence.None, NodeType.None, "%=", ErrorRecoverySet.BinOp); // %=\n    setTokenInfo(TokenID.AmpersandEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAnd, OperatorPrecedence.None, NodeType.None, "&=", ErrorRecoverySet.BinOp); // &=\n    setTokenInfo(TokenID.CaretEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgXor, OperatorPrecedence.None, NodeType.None, "^=", ErrorRecoverySet.BinOp); // ^=\n    setTokenInfo(TokenID.BarEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgOr, OperatorPrecedence.None, NodeType.None, "|=", ErrorRecoverySet.BinOp); // |=\n    setTokenInfo(TokenID.LessThanLessThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgLsh, OperatorPrecedence.None, NodeType.None, "<<=", ErrorRecoverySet.BinOp); // <<=\n    setTokenInfo(TokenID.GreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRsh, OperatorPrecedence.None, NodeType.None, ">>=", ErrorRecoverySet.BinOp); // >>=\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRs2, OperatorPrecedence.None, NodeType.None, ">>>=", ErrorRecoverySet.BinOp); // >>>=\n    setTokenInfo(TokenID.Question, Reservation.None, OperatorPrecedence.Conditional, NodeType.ConditionalExpression, OperatorPrecedence.None, NodeType.None, "?", ErrorRecoverySet.BinOp); // ?\n    setTokenInfo(TokenID.Colon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ":", ErrorRecoverySet.Colon); // :\n    setTokenInfo(TokenID.BarBar, Reservation.None, OperatorPrecedence.LogicalOr, NodeType.LogOr, OperatorPrecedence.None, NodeType.None, "||", ErrorRecoverySet.BinOp); // ||\n    setTokenInfo(TokenID.AmpersandAmpersand, Reservation.None, OperatorPrecedence.LogicalAnd, NodeType.LogAnd, OperatorPrecedence.None, NodeType.None, "&&", ErrorRecoverySet.BinOp); // &&\n    setTokenInfo(TokenID.Bar, Reservation.None, OperatorPrecedence.BitwiseOr, NodeType.Or, OperatorPrecedence.None, NodeType.None, "|", ErrorRecoverySet.BinOp); // |\n    setTokenInfo(TokenID.Caret, Reservation.None, OperatorPrecedence.BitwiseExclusiveOr, NodeType.Xor, OperatorPrecedence.None, NodeType.None, "^", ErrorRecoverySet.BinOp); // ^\n    setTokenInfo(TokenID.And, Reservation.None, OperatorPrecedence.BitwiseAnd, NodeType.And, OperatorPrecedence.None, NodeType.None, "&", ErrorRecoverySet.BinOp); // &\n    setTokenInfo(TokenID.EqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eq, OperatorPrecedence.None, NodeType.None, "==", ErrorRecoverySet.BinOp); // ==\n    setTokenInfo(TokenID.ExclamationEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Ne, OperatorPrecedence.None, NodeType.None, "!=", ErrorRecoverySet.BinOp); // !=\n    setTokenInfo(TokenID.EqualsEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eqv, OperatorPrecedence.None, NodeType.None, "===", ErrorRecoverySet.BinOp); // ===\n    setTokenInfo(TokenID.ExclamationEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.NEqv, OperatorPrecedence.None, NodeType.None, "!==", ErrorRecoverySet.BinOp); // !==\n    setTokenInfo(TokenID.LessThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Lt, OperatorPrecedence.None, NodeType.None, "<", ErrorRecoverySet.BinOp); // <\n    setTokenInfo(TokenID.LessThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Le, OperatorPrecedence.None, NodeType.None, "<=", ErrorRecoverySet.BinOp); // <=\n    setTokenInfo(TokenID.GreaterThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Gt, OperatorPrecedence.None, NodeType.None, ">", ErrorRecoverySet.BinOp); // >\n    setTokenInfo(TokenID.GreaterThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Ge, OperatorPrecedence.None, NodeType.None, ">=", ErrorRecoverySet.BinOp); // >=\n    setTokenInfo(TokenID.LessThanLessThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Lsh, OperatorPrecedence.None, NodeType.None, "<<", ErrorRecoverySet.BinOp); // <<\n    setTokenInfo(TokenID.GreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rsh, OperatorPrecedence.None, NodeType.None, ">>", ErrorRecoverySet.BinOp); // >>\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rs2, OperatorPrecedence.None, NodeType.None, ">>>", ErrorRecoverySet.BinOp); // >>>\n    setTokenInfo(TokenID.Plus, Reservation.None, OperatorPrecedence.Additive, NodeType.Add, OperatorPrecedence.Unary, NodeType.Pos, "+", ErrorRecoverySet.AddOp); // +\n    setTokenInfo(TokenID.Minus, Reservation.None, OperatorPrecedence.Additive, NodeType.Sub, OperatorPrecedence.Unary, NodeType.Neg, "-", ErrorRecoverySet.AddOp); // -\n    setTokenInfo(TokenID.Asterisk, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mul, OperatorPrecedence.None, NodeType.None, "*", ErrorRecoverySet.BinOp); // *\n    setTokenInfo(TokenID.Slash, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Div, OperatorPrecedence.None, NodeType.None, "/", ErrorRecoverySet.BinOp); // /\n    setTokenInfo(TokenID.Percent, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mod, OperatorPrecedence.None, NodeType.None, "%", ErrorRecoverySet.BinOp); // %\n    setTokenInfo(TokenID.Tilde, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Not, "~", ErrorRecoverySet.PreOp); // ~\n    setTokenInfo(TokenID.Exclamation, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.LogNot, "!", ErrorRecoverySet.PreOp); // !\n    setTokenInfo(TokenID.PlusPlus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.IncPre, "++", ErrorRecoverySet.PreOp); // ++\n    setTokenInfo(TokenID.MinusMinus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.DecPre, "--", ErrorRecoverySet.PreOp); // --\n    setTokenInfo(TokenID.OpenParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "(", ErrorRecoverySet.LParen); // (\n    setTokenInfo(TokenID.OpenBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "[", ErrorRecoverySet.LBrack); // [\n    setTokenInfo(TokenID.Dot, Reservation.None, OperatorPrecedence.Unary, NodeType.None, OperatorPrecedence.None, NodeType.None, ".", ErrorRecoverySet.Dot); // .\n    setTokenInfo(TokenID.EndOfFile, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "<EOF>", ErrorRecoverySet.EOF); // EOF\n    setTokenInfo(TokenID.EqualsGreaterThan, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "=>", ErrorRecoverySet.None); // =>\n\n    export function lookupToken(tokenId: TokenID): TokenInfo {\n        return tokenTable[tokenId];\n    }\n\n    export enum TokenClass {\n        Punctuation,\n        Keyword,\n        Operator,\n        Comment,\n        Whitespace,\n        Identifier,\n        NumberLiteral,\n        StringLiteral,\n        RegExpLiteral,\n    }\n\n    export class SavedToken {\n        constructor (public tok: Token, public minChar: number, public limChar: number) { }\n    }\n\n    export class Token {\n        constructor (public tokenId: TokenID) {\n        }\n\n        public toString() {\n            return "token: " + this.tokenId + " " + this.getText() + " (" + (<any>TokenID)._map[this.tokenId] + ")";\n        }\n\n        public print(line: number, outfile) {\n            outfile.WriteLine(this.toString() + ",on line" + line);\n        }\n\n        public getText(): string {\n            return tokenTable[this.tokenId].text;\n        }\n\n        public classification(): TokenClass {\n            if (this.tokenId <= TokenID.LimKeyword) {\n                return TokenClass.Keyword;\n            }\n            else {\n                var tokenInfo = lookupToken(this.tokenId);\n                if (tokenInfo != undefined) {\n                    if ((tokenInfo.unopNodeType != NodeType.None) ||\n                        (tokenInfo.binopNodeType != NodeType.None)) {\n                        return TokenClass.Operator;\n                    }\n                }\n            }\n\n            return TokenClass.Punctuation;\n        }\n    }\n\n    export class NumberLiteralToken extends Token {\n        constructor (public value: number, public hasEmptyFraction?: bool) {\n            super(TokenID.NumberLiteral);\n        }\n\n        public getText(): string {\n            return this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString();\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.NumberLiteral;\n        }\n    }\n\n    export class StringLiteralToken extends Token {\n        constructor (public value: string) {\n            super(TokenID.StringLiteral);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.StringLiteral;\n        }\n    }\n\n    export class IdentifierToken extends Token {\n        constructor (public value: string, public hasEscapeSequence : bool) {\n            super(TokenID.Identifier);\n        }\n        public getText(): string {\n            return this.value;\n        }\n        public classification(): TokenClass {\n            return TokenClass.Identifier;\n        }\n    }\n\n    export class WhitespaceToken extends Token {\n        constructor (tokenId: TokenID, public value: string) {\n            super(tokenId);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Whitespace;\n        }\n    }\n\n    export class CommentToken extends Token {\n        constructor (tokenID: TokenID, public value: string, public isBlock: bool, public startPos: number, public line: number, public endsLine: bool) {\n            super(tokenID);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Comment;\n        }\n    }\n\n    export class RegularExpressionLiteralToken extends Token {\n        constructor(public regex) {\n            super(TokenID.RegularExpressionLiteral);\n        }\n\n        public getText(): string {\n            return this.regex.toString();\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.RegExpLiteral;\n        }\n    }\n\n    // TODO: new with length TokenID.LimFixed\n    export var staticTokens = new Token[];\n    export function initializeStaticTokens() {\n        for (var i = 0; i <= TokenID.LimFixed; i++) {\n            staticTokens[i] = new Token(i);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\'/>\n///<reference path=\'io.ts\'/>\n///<reference path=\'optionsParser.ts\'/>\n\nclass CommandLineHost implements TypeScript.IResolverHost {\n\n    public pathMap: any = {};\n    public resolvedPaths: any = {};\n\n    constructor(public compilationSettings: TypeScript.CompilationSettings) { \n    }\n\n    public getPathIdentifier(path: string) { \n        return this.compilationSettings.useCaseSensitiveFileResolution ? path : path.toLocaleUpperCase();\n    }\n\n    public isResolved(path: string) {\n        return this.resolvedPaths[this.getPathIdentifier(this.pathMap[path])] != undefined;\n    }\n\n    public resolveCompilationEnvironment(preEnv: TypeScript.CompilationEnvironment,\n        resolver: TypeScript.ICodeResolver,\n        traceDependencies: bool): TypeScript.CompilationEnvironment {\n        var resolvedEnv = new TypeScript.CompilationEnvironment(preEnv.compilationSettings, preEnv.ioHost);\n\n        var nCode = preEnv.code.length;\n        var path = "";\n\n        var postResolutionError = \n            (errorFile: string, errorMessage: string) => {\n                TypeScript.CompilerDiagnostics.debugPrint("Could not resolve file \'" + errorFile + "\'" + (errorMessage == "" ? "" : ": " + errorMessage));\n            }\n\n        var resolutionDispatcher: TypeScript.IResolutionDispatcher = {\n            postResolutionError: postResolutionError,\n            postResolution: (path: string, code: TypeScript.ISourceText) => {\n                var pathId = this.getPathIdentifier(path);\n                if (!this.resolvedPaths[pathId]) {\n                    resolvedEnv.code.push(<TypeScript.SourceUnit>code);\n                    this.resolvedPaths[pathId] = true;\n                }\n            }\n        };\n\n        for (var i = 0; i < nCode; i++) {\n            path = TypeScript.switchToForwardSlashes(preEnv.ioHost.resolvePath(preEnv.code[i].path));\n            this.pathMap[preEnv.code[i].path] = path;\n            resolver.resolveCode(path, "", false, resolutionDispatcher);\n        }\n\n        return resolvedEnv;\n    }\n}\nclass BatchCompiler {\n    public compilationSettings: TypeScript.CompilationSettings;\n    public compilationEnvironment: TypeScript.CompilationEnvironment;\n    public resolvedEnvironment: TypeScript.CompilationEnvironment = null;\n    public hasResolveErrors: bool = false;\n    public compilerVersion = "0.8.2.0";\n    public printedVersion = false;\n\n    constructor (public ioHost: IIO) { \n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n    }\n\n    public resolve() {\n        var resolver = new TypeScript.CodeResolver(this.compilationEnvironment);\n        var commandLineHost = new CommandLineHost(this.compilationSettings);\n        var ret = commandLineHost.resolveCompilationEnvironment(this.compilationEnvironment, resolver, true);\n\n        // Reset resolve error status\n        this.hasResolveErrors = false;\n\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            if (!commandLineHost.isResolved(this.compilationEnvironment.code[i].path)) {\n                this.hasResolveErrors = true;\n                var path = this.compilationEnvironment.code[i].path;\n                if (!TypeScript.isSTRFile(path) && !TypeScript.isDSTRFile(path) && !TypeScript.isTSFile(path) && !TypeScript.isDTSFile(path)) {\n                    this.ioHost.stderr.WriteLine("Unknown extension for file: \\""+path+"\\". Only .ts and .d.ts extensions are allowed.");\n                }\n                else {\n                    this.ioHost.stderr.WriteLine("Error reading file \\"" + path + "\\": File not found");\n                }\n            }\n        }\n\n        return ret;\n    }\n    \n    /// Do the actual compilation reading from input files and\n    /// writing to output file(s).\n    public compile(): bool {\n        var compiler: TypeScript.TypeScriptCompiler;\n\n        compiler = new TypeScript.TypeScriptCompiler(this.ioHost.stderr, new TypeScript.NullLogger(), this.compilationSettings);\n        compiler.setErrorOutput(this.ioHost.stderr);\n        compiler.setErrorCallback(\n            (minChar, charLen, message, unitIndex) => {\n                compiler.errorReporter.hasErrors = true;\n                var fname = this.resolvedEnvironment.code[unitIndex].path;\n                var lineCol = { line: -1, col: -1 };\n                compiler.parser.getSourceLineCol(lineCol, minChar);\n                // line is 1-base, col, however, is 0-base. add 1 to the col before printing the message\n                var msg = fname + " (" + lineCol.line + "," + (lineCol.col + 1) + "): " + message;\n                if (this.compilationSettings.errorRecovery) {\n                    this.ioHost.stderr.WriteLine(msg);\n                } else {\n                    throw new SyntaxError(msg);\n                }\n            });\n\n        if (this.compilationSettings.emitComments) {\n            compiler.emitCommentsToOutput();\n        }\n\n        var consumeUnit = (code: TypeScript.SourceUnit, addAsResident: bool) => {\n            try {\n                // if file resolving is disabled, the file\'s content will not yet be loaded\n\n                if (!this.compilationSettings.resolve) {\n                    code.content = this.ioHost.readFile(code.path);\n                    // If declaration files are going to be emitted, \n                    // preprocess the file contents and add in referenced files as well\n                    if (this.compilationSettings.generateDeclarationFiles) {\n                        TypeScript.CompilerDiagnostics.assert(code.referencedFiles == null, "With no resolve option, referenced files need to null");\n                        code.referencedFiles = TypeScript.getReferencedFiles(code);\n                    }\n                }\n\n                if (code.content != null) {\n                    if (this.compilationSettings.parseOnly) {\n                        compiler.parseUnit(code.content, code.path);\n                    }\n                    else {\n                        if (this.compilationSettings.errorRecovery) {\n                            compiler.parser.setErrorRecovery(this.ioHost.stderr);\n                        }\n                        compiler.addUnit(code.content, code.path, addAsResident, code.referencedFiles);\n                    }\n                }\n            }\n            catch (err) {\n                compiler.errorReporter.hasErrors = true;\n                // This includes syntax errors thrown from error callback if not in recovery mode\n                this.ioHost.stderr.WriteLine(err.message);\n            }\n\n        }\n\n        for (var iCode = 0 ; iCode < this.resolvedEnvironment.code.length; iCode++) {\n            if (!this.compilationSettings.parseOnly || (iCode > 0)) {\n                consumeUnit(this.resolvedEnvironment.code[iCode], false);\n            }\n        }\n\n        var emitterIOHost = {\n            createFile: (fileName: string, useUTF8?: bool) => IOUtils.createFileAndFolderStructure(this.ioHost, fileName, useUTF8),\n            directoryExists: this.ioHost.directoryExists,\n            fileExists: this.ioHost.fileExists,\n            resolvePath: this.ioHost.resolvePath\n        };\n\n        try {\n            if (!this.compilationSettings.parseOnly) {\n                compiler.typeCheck();\n                compiler.emit(emitterIOHost);\n                compiler.emitDeclarations();\n            }\n            else {\n                compiler.emitAST(emitterIOHost);\n            }\n        } catch (err) {\n            compiler.errorReporter.hasErrors = true;\n            // Catch emitter exceptions\n            if (err.message != "EmitError") {\n                throw err;\n            }\n        }\n\n        return compiler.errorReporter.hasErrors;\n    }\n\n    // Execute the provided inputs\n    public run() {\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            var unit = this.compilationEnvironment.code[i];\n            \n            var outputFileName: string = unit.path;\n            if (TypeScript.isTSFile(outputFileName)) {\n                outputFileName = outputFileName.replace(/\\.ts$/, ".js");\n            } else if (TypeScript.isSTRFile(outputFileName)) {\n                outputFileName = outputFileName.replace(/\\.str$/, ".js");\n            }\n            if (this.ioHost.fileExists(outputFileName)) {\n                var unitRes = this.ioHost.readFile(outputFileName)\n                this.ioHost.run(unitRes, outputFileName);\n            }\n        }\n    }\n\n    /// Begin batch compilation\n    public batchCompile() {\n        TypeScript.CompilerDiagnostics.diagnosticWriter = { Alert: (s: string) => { this.ioHost.printLine(s); } }\n\n        var code: TypeScript.SourceUnit;\n\n        var opts = new OptionsParser(this.ioHost);\n\n        opts.option(\'out\', {\n            usage: \'Concatenate and emit output to single file | Redirect output structure to the directory\',\n            type: \'file|directory\',\n            set: (str) => {\n                this.compilationSettings.outputOption = str;\n            }\n        });\n\n        opts.option(\'style\', {\n            usage: \'Select style checking options (examples --style requireSemi:off or --style "eqeqeq;bitwise:off")\',\n            experimental: true,\n            set: (str) => {\n                this.compilationSettings.setStyleOptions(str);\n            }\n        });\n\n        opts.flag(\'sourcemap\', {\n            usage: \'Generates corresponding .map file\',\n            set: () => {\n                this.compilationSettings.mapSourceFiles = true;\n            }\n        });\n\n        opts.flag(\'declaration\', {\n            usage: \'Generates corresponding .d.ts file\',\n            set: () => {\n                this.compilationSettings.generateDeclarationFiles = true;\n            }\n        });\n\n        if (this.ioHost.watchFile) {\n            opts.flag(\'watch\', {\n                usage: \'Watch output files\',\n                set: () => {\n                    this.compilationSettings.watch = true;\n                }\n            }, \'w\');\n        }\n\n        opts.flag(\'exec\', {\n            usage: \'Execute the script after compilation\',\n            set: () => {\n                this.compilationSettings.exec = true;\n            }\n        }, \'e\');\n\n        opts.flag(\'parse\', {\n            usage: \'Parse only\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.parseOnly = true;\n            }\n        });\n\n        opts.flag(\'minw\', {\n            usage: \'Minimize whitespace\',\n            experimental: true,\n            set: () => { this.compilationSettings.minWhitespace = true; }\n        }, \'mw\');\n\n        opts.flag(\'const\', {\n            usage: \'Propagate constants to emitted code\',\n            experimental: true,\n            set: () => { this.compilationSettings.propagateConstants = true; }\n        });\n\n        opts.flag(\'errorrecovery\', {\n            usage: \'Enable error recovery\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorRecovery = true;\n            }\n        }, \'er\');\n\n        opts.flag(\'comments\', {\n            usage: \'Emit comments to output\',\n            set: () => {\n                this.compilationSettings.emitComments = true;\n            }\n        }, \'c\');\n\n        opts.flag(\'cflow\', {\n            usage: \'Control flow\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n            }\n        });\n\n        opts.flag(\'cflowp\', {\n            usage: \'Print control flow\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.printControlFlow = true;\n            }\n        });\n\n        opts.flag(\'cflowu\', {\n            usage: \'Print Use Def control flow\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.controlFlowUseDef = true;\n            }\n        });\n\n        opts.flag(\'noerroronwith\', {\n            usage: \'Allow with statements\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorOnWith = false;\n            }\n        });\n\n        opts.flag(\'noresolve\', {\n            usage: \'Skip resolution and preprocessing\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.resolve = false;\n                this.compilationSettings.preprocess = false;\n            }\n        });\n\n        opts.flag(\'debug\', {\n            usage: \'Print debug output\',\n            experimental: true,\n            set: () => {\n                TypeScript.CompilerDiagnostics.debug = true;\n            }\n        });\n\n        opts.flag(\'canCallDefinitionSignature\', {\n            usage: \'Allows you to call the definition signature of an overload group\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.canCallDefinitionSignature = true;\n            }\n        });\n\n        opts.flag(\'nooptimizemodules\', {\n            usage: \'Do not optimize module codegen\',\n            experimental: true,\n            set: () => {\n                TypeScript.optimizeModuleCodeGen = false;\n            }\n        });\n\n        opts.flag(\'nolib\', {\n            usage: \'Do not include a default lib.d.ts with global declarations\',\n            set: () => {\n                this.compilationSettings.useDefaultLib = false;\n            }\n        });\n\n\n        opts.flag(\'inferProperties\', {\n            usage: \'Infer class properties from top-level assignments to \\\'this\\\'\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.inferPropertiesFromThisAssignment = true;\n            }\n        });\n\n        opts.option(\'target\', {\n            usage: \'Specify ECMAScript target version: "ES3" (default), or "ES5"\',\n            type: \'VER\',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === \'es3\') {\n                    this.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES3;\n                } else if (type === \'es5\') {\n                    this.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES5;\n                }\n                else {\n                    this.ioHost.printLine("ECMAScript target version \'" + type + "\' not supported.  Using default \'ES3\' code generation");\n                }\n            }\n        });\n\n        opts.option(\'module\', {\n            usage: \'Specify module code generation: "commonjs" (default) or "amd"\',\n            type: \'kind\',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === \'commonjs\' || type === \'node\') {\n                    TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;\n                } else if (type === \'amd\') {\n                    TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Asynchronous;\n                } else {\n                    this.ioHost.printLine("Module code generation \'" + type + "\' not supported.  Using default \'commonjs\' code generation");\n                }\n            }\n        });\n\n        var printedUsage = false;\n\n        opts.flag(\'help\', {\n            usage: \'Print this message\',\n            set: () => {\n                this.printVersion();\n                opts.printUsage();\n                printedUsage = true;\n            }\n        }, \'h\');\n\n        opts.flag(\'useCaseSensitiveFileResolution\', {\n            usage: \'Force file resolution to be case sensitive\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.useCaseSensitiveFileResolution = true;\n            }\n        });\n\n        opts.flag(\'version\', {\n            usage: \'Print the compiler\\\'s version: \' + this.compilerVersion,\n            set: () => {\n                this.printVersion();\n            }\n        }, \'v\');\n\n        opts.parse(this.ioHost.arguments);\n        \n        if (this.compilationSettings.useDefaultLib) {\n            var compilerFilePath = this.ioHost.getExecutingFilePath()\n            var binDirPath = this.ioHost.dirName(compilerFilePath);\n            var libStrPath = this.ioHost.resolvePath(binDirPath + "/lib.d.ts");\n            code = new TypeScript.SourceUnit(libStrPath, null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        for (var i = 0; i < opts.unnamed.length; i++) {\n            code = new TypeScript.SourceUnit(opts.unnamed[i], null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        // If no source files provided to compiler - print usage information\n        if (this.compilationEnvironment.code.length == (this.compilationSettings.useDefaultLib ? 1 : 0)) {\n            if (!printedUsage && !this.printedVersion) {\n                this.printVersion();\n                opts.printUsage();\n                this.ioHost.quit(1);\n            }\n            return;\n        }\n\n        var sourceFiles: TypeScript.SourceUnit[] = [];\n        if (this.compilationSettings.watch) {\n            // Capture the state before calling resolve\n            sourceFiles = this.compilationEnvironment.code.slice(0);\n        }\n\n        // Resolve file dependencies, if requested\n        this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n        var hasCompileErrors = this.compile();\n\n        var hasErrors = hasCompileErrors || this.hasResolveErrors;\n        if (!hasErrors) {\n            if (this.compilationSettings.exec) {\n                this.run();\n            }\n        }\n\n        if (this.compilationSettings.watch) {\n            // Watch will cause the program to stick around as long as the files exist\n            this.watchFiles(sourceFiles);\n        }\n        else {  \n            // Exit with the appropriate error code\n            this.ioHost.quit(hasErrors ? 1 : 0);\n        }\n    }\n\n    public printVersion() {\n        if (!this.printedVersion) {\n            this.ioHost.printLine("Version " + this.compilerVersion);\n            this.printedVersion = true;\n        }\n    }\n\n    public watchFiles(soruceFiles: TypeScript.SourceUnit[]) {\n        if (!this.ioHost.watchFile) {\n            this.ioHost.printLine("Error: Current host does not support -w[atch] option");\n            return;\n        }\n\n        var resolvedFiles: string[] = []\n        var watchers: { [x: string]: IFileWatcher; } = {};\n\n        var addWatcher = (filename: string) => {\n            if (!watchers[filename]) {\n                var watcher = this.ioHost.watchFile(filename, onWatchedFileChange);\n                watchers[filename] = watcher;\n            }\n            else {\n                throw new Error("Cannot watch file, it is already watched.");\n            }\n        };\n\n        var removeWatcher = (filename: string) => {\n            if (watchers[filename]) {\n                watchers[filename].close();\n                delete watchers[filename];\n            }\n            else {\n                throw new Error("Cannot stop watching file, it is not being watched.");\n            }\n        };\n\n        var onWatchedFileChange = () => {\n            // Reset the state\n            this.compilationEnvironment.code = soruceFiles;\n\n            // Resolve file dependencies, if requested\n            this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n            // Check if any new files were added to the environment as a result of the file change\n            var oldFiles = resolvedFiles;\n            var newFiles: string[] = [];\n            this.resolvedEnvironment.code.forEach((sf) => newFiles.push(sf.path));\n            newFiles = newFiles.sort();\n\n            var i = 0, j = 0;\n            while (i < oldFiles.length && j < newFiles.length) {\n\n                var compareResult = oldFiles[i].localeCompare(newFiles[j]);\n                if (compareResult == 0) {\n                    // No change here\n                    i++;\n                    j++;\n                }\n                else if (compareResult < 0) {\n                    // Entry in old list does not exist in the new one, it was removed\n                    removeWatcher(oldFiles[i]);\n                    i++;\n                }\n                else {\n                    // Entry in new list does exist in the new one, it was added\n                    addWatcher(newFiles[j]);\n                    j++;\n                }\n            }\n\n            // All remaining unmatched items in the old list have been removed\n            for (var k = i; k < oldFiles.length; k++) {\n                removeWatcher(oldFiles[k]);\n            }\n\n            // All remaing unmatched items in the new list have been added\n            for (var k = j; k < newFiles.length; k++) {\n                addWatcher(newFiles[k]);\n            }\n\n            // Update the state\n            resolvedFiles = newFiles;;\n\n            // Print header\n            this.ioHost.printLine("");\n            this.ioHost.printLine("Recompiling (" + new Date() + "): ");\n            resolvedFiles.forEach((f) => this.ioHost.printLine("    " + f));\n\n            // Trigger a new compilation\n            var hasCompileErrors = this.compile();\n\n            var hasErrors = hasCompileErrors || this.hasResolveErrors;\n            if (!hasErrors) {\n                if (this.compilationSettings.exec) {\n                    this.run();\n                }\n            }\n        };\n\n        // Switch to using stdout for all error messages\n        this.ioHost.stderr = this.ioHost.stdout;\n\n        // Initialize the initial list of resolved files, and add watches to them\n        this.resolvedEnvironment.code.forEach((sf) => {\n            resolvedFiles.push(sf.path);\n            addWatcher(sf.path);\n        });\n        resolvedFiles.sort();\n    }\n}\n\n// Start the batch compilation using the current hosts IO\nvar batch = new BatchCompiler(IO);\nbatch.batchCompile();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ArrayCache {\n        public arrayType: Type;\n        public arrayBase: Type = null;\n\n        public specialize(arrInstType: Type, checker: TypeChecker): Type {\n            if (this.arrayBase == null) {\n                this.arrayBase = arrInstType.specializeType(checker.wildElm.type, this.arrayType.elementType,\n                                                   checker, true);\n            }\n            return this.arrayBase;\n        }\n    }\n\n    export class TypeComparisonInfo {\n        public onlyCaptureFirstError = false;\n        public flags: TypeRelationshipFlags = TypeRelationshipFlags.SuccessfulComparison;\n        public message = "";\n\n        public addMessageToFront(message) {\n            if (!this.onlyCaptureFirstError) {\n                this.message = this.message ? message + ":\\n\\t" + this.message : message;\n            }\n            else {\n                this.setMessage(message);\n            }\n        }\n\n        public setMessage(message) {\n            this.message = message;\n        }\n    }\n\n    export interface SignatureData {\n        parameters: ParameterSymbol[];\n        nonOptionalParameterCount: number;\n    }\n\n    export interface ApplicableSignature {\n        signature: Signature;\n        hadProvisionalErrors: bool;\n    }\n\n    export enum TypeCheckCollectionMode {\n        Resident,\n        Transient\n    }\n\n    export class PersistentGlobalTypeState {\n        public importedGlobalsTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        public importedGlobalsTypeTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        public importedGlobals: SymbolScopeBuilder;\n\n        // transient state\n        public globals: IHashTable = null;\n        public globalTypes: IHashTable = null;\n        public ambientGlobals: IHashTable = null;\n        public ambientGlobalTypes: IHashTable = null;\n\n        // resident state\n        public residentGlobalValues = new StringHashTable();\n        public residentGlobalTypes = new StringHashTable();\n        public residentGlobalAmbientValues = new StringHashTable();\n        public residentGlobalAmbientTypes = new StringHashTable();\n\n        // dual resident/transient state\n\n        // REVIEW: We shouldn\'t need to allocate private hash tables for these, since there\'s no private global scope\n        // REVIEW: In general, we should audit each instance of DualStringHashTable to ensure that both the primary\n        // and secondary tables are necessary.  If it\'s not necessary, we should sub in a constant sentinel value.\n        public dualGlobalValues: DualStringHashTable;\n        public dualGlobalTypes: DualStringHashTable;\n        public dualAmbientGlobalValues: DualStringHashTable;\n        public dualAmbientGlobalTypes: DualStringHashTable;\n\n        public globalScope: SymbolScope;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public doubleType: Type;\n\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        // Use this flag to turn resident checking on and off\n        public residentTypeCheck: bool = true;\n\n        public mod: ModuleType = null;\n        public gloMod: TypeSymbol = null;\n\n        public wildElm: TypeSymbol = null;\n\n        constructor (public errorReporter: ErrorReporter) {\n            this.importedGlobals = new SymbolScopeBuilder(null, this.importedGlobalsTable, null, this.importedGlobalsTypeTable, null, null);\n\n            this.dualGlobalValues = new DualStringHashTable(this.residentGlobalValues, new StringHashTable());\n            this.dualGlobalTypes = new DualStringHashTable(this.residentGlobalTypes, new StringHashTable());\n            this.dualAmbientGlobalValues = new DualStringHashTable(this.residentGlobalAmbientValues, new StringHashTable());\n            this.dualAmbientGlobalTypes = new DualStringHashTable(this.residentGlobalAmbientTypes, new StringHashTable());\n\n            var dualGlobalScopedMembers = new ScopedMembers(new DualStringHashTable(this.dualGlobalValues, new StringHashTable()));\n            var dualGlobalScopedAmbientMembers = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalValues, new StringHashTable()));\n            var dualGlobalScopedEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualGlobalTypes, new StringHashTable()));\n            var dualGlobalScopedAmbientEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalTypes, new StringHashTable()));\n\n            this.globalScope = new SymbolScopeBuilder(dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, this.importedGlobals, null);\n\n            this.voidType = this.enterPrimitive(Primitive.Void, "void");\n            this.booleanType = this.enterPrimitive(Primitive.Boolean, "bool");\n            this.doubleType = this.enterPrimitive(Primitive.Double, "number");\n            this.importedGlobals.ambientEnclosedTypes.addPublicMember("number", this.doubleType.symbol);\n\n            this.stringType = this.enterPrimitive(Primitive.String, "string");\n            this.anyType = this.enterPrimitive(Primitive.Any, "any");\n            this.nullType = this.enterPrimitive(Primitive.Null, "null");\n            this.undefinedType = this.enterPrimitive(Primitive.Undefined, "undefined");\n\n            // shared global state is resident\n            this.setCollectionMode(TypeCheckCollectionMode.Resident);\n\n            this.wildElm = new TypeSymbol("_element", -1, 0, -1, new Type());\n            this.importedGlobalsTypeTable.addPublicMember(this.wildElm.name, this.wildElm);\n\n            this.mod = new ModuleType(dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes);\n            this.mod.members = dualGlobalScopedMembers;\n            this.mod.ambientMembers = dualGlobalScopedAmbientMembers;\n            this.mod.containedScope = this.globalScope;\n\n            this.gloMod = new TypeSymbol(globalId, -1, 0, -1, this.mod);\n            this.mod.members.addPublicMember(this.gloMod.name, this.gloMod);\n\n            this.defineGlobalValue("undefined", this.undefinedType);\n        }\n\n\n        public enterPrimitive(flags: number, name: string) {\n            var primitive = new Type();\n            primitive.primitiveTypeClass = flags;\n            var symbol = new TypeSymbol(name, -1, name.length, -1, primitive);\n            symbol.typeCheckStatus = TypeCheckStatus.Finished;\n            primitive.symbol = symbol;\n            this.importedGlobals.enter(null, null, symbol, this.errorReporter, true, true, true);\n            return primitive;\n        }\n\n        public setCollectionMode(mode: TypeCheckCollectionMode) {\n            this.residentTypeCheck =\n                this.dualGlobalValues.insertPrimary =\n                    this.dualGlobalTypes.insertPrimary =\n                        this.dualAmbientGlobalValues.insertPrimary =\n                            this.dualAmbientGlobalTypes.insertPrimary = mode == TypeCheckCollectionMode.Resident;\n        }\n\n        public refreshPersistentState() {\n            this.globals = new StringHashTable();\n            this.globalTypes = new StringHashTable();\n            this.ambientGlobals = new StringHashTable();\n            this.ambientGlobalTypes = new StringHashTable();\n\n            // add global types to the global scope\n            this.globalTypes.add(this.voidType.symbol.name, this.voidType.symbol);\n            this.globalTypes.add(this.booleanType.symbol.name, this.booleanType.symbol);\n            this.globalTypes.add(this.doubleType.symbol.name, this.doubleType.symbol);\n            this.globalTypes.add("number", this.doubleType.symbol);\n            this.globalTypes.add(this.stringType.symbol.name, this.stringType.symbol);\n            this.globalTypes.add(this.anyType.symbol.name, this.anyType.symbol);\n            this.globalTypes.add(this.nullType.symbol.name, this.nullType.symbol);\n            this.globalTypes.add(this.undefinedType.symbol.name, this.undefinedType.symbol);\n\n            this.dualGlobalValues.secondaryTable = this.globals;\n            this.dualGlobalTypes.secondaryTable = this.globalTypes;\n            this.dualAmbientGlobalValues.secondaryTable = this.ambientGlobals;\n            this.dualAmbientGlobalTypes.secondaryTable = this.ambientGlobalTypes;\n        }\n\n        public defineGlobalValue(name: string, type: Type) {\n            var valueLocation = new ValueLocation();\n            valueLocation.typeLink = new TypeLink();\n            var sym = new VariableSymbol(name, 0, -1, valueLocation);\n            sym.setType(type);\n            sym.typeCheckStatus = TypeCheckStatus.Finished;\n            sym.container = this.gloMod;\n            this.importedGlobalsTable.addPublicMember(name, sym);\n        }\n    }\n\n    export class ContextualTypeContext {\n        public targetSig: Signature = null;\n        public targetThis: Type = null;\n        public targetAccessorType: Type = null;\n\n        constructor (public contextualType: Type,\n            public provisional: bool, public contextID: number) { }\n    }\n\n    export class ContextualTypingContextStack {\n        private contextStack: ContextualTypeContext[] = [];\n        static contextID = TypeCheckStatus.Finished + 1;\n        public pushContextualType(type: Type, provisional: bool) { this.contextStack.push(new ContextualTypeContext(type, provisional, ContextualTypingContextStack.contextID++)); this.checker.errorReporter.pushToErrorSink = provisional; }\n        public hadProvisionalErrors = false; // somewhere in the chain a provisional typecheck error was thrown\n        public popContextualType() {\n            var tc = this.contextStack.pop();\n            this.checker.errorReporter.pushToErrorSink = this.isProvisional();\n            this.hadProvisionalErrors = this.hadProvisionalErrors || (tc.provisional && (this.checker.errorReporter.getCapturedErrors().length));\n            this.checker.errorReporter.freeCapturedErrors();\n            return tc;\n        }\n        public getContextualType(): ContextualTypeContext { return (!this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1]); }\n        public getContextID() { return (!this.contextStack.length ? TypeCheckStatus.Finished : this.contextStack[this.contextStack.length - 1].contextID); }\n        public isProvisional() { return (!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional); }\n\n        constructor (public checker: TypeChecker) { }\n    }\n\n    export class TypeChecker {\n        public errorReporter: ErrorReporter = null;\n        public globalScope: SymbolScope;\n\n        public checkControlFlow = false;\n        public printControlFlowGraph = false;\n        public checkControlFlowUseDef = false;\n        public styleSettings: StyleSettings = null;\n\n        public units: LocationInfo[] = null;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public numberType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        public anon = "_anonymous";\n\n        public globals: DualStringHashTable;\n        public globalTypes: DualStringHashTable;\n        public ambientGlobals: DualStringHashTable;\n        public ambientGlobalTypes: DualStringHashTable;\n        public gloModType: ModuleType;\n        public gloMod: TypeSymbol;\n        public wildElm: TypeSymbol;\n\n        public locationInfo: LocationInfo = null;\n        public typeFlow: TypeFlow = null;\n\n        public currentCompareA: Symbol = null;\n        public currentCompareB: Symbol = null;\n\n        public currentModDecl: ModuleDeclaration = null;\n\n        public inBind = false;\n        public inWith = false;\n        public errorsOnWith = true;\n\n        public typingContextStack: ContextualTypingContextStack;\n        public currentContextualTypeContext: ContextualTypeContext = null;\n\n        public resolvingBases = false;\n\n        public canCallDefinitionSignature = false;\n\n        public assignableCache: any[] = <any>{};\n        public subtypeCache: any[] = <any>{};\n        public identicalCache: any[] = <any>{};\n\n        public provisionalStartedTypecheckObjects: PhasedTypecheckObject[] = [];\n\n        public mustCaptureGlobalThis = false;\n\n        constructor (public persistentState: PersistentGlobalTypeState) {\n            this.voidType = this.persistentState.voidType;\n            this.booleanType = this.persistentState.booleanType;\n            this.numberType = this.persistentState.doubleType;\n            this.stringType = this.persistentState.stringType;\n            this.anyType = this.persistentState.anyType;\n            this.nullType = this.persistentState.nullType;\n            this.undefinedType = this.persistentState.undefinedType;\n\n            this.globals = this.persistentState.dualGlobalValues;\n            this.globalTypes = this.persistentState.dualGlobalTypes;\n            this.ambientGlobals = this.persistentState.dualAmbientGlobalValues;\n            this.ambientGlobalTypes = this.persistentState.dualAmbientGlobalTypes;\n            this.gloModType = this.persistentState.mod;\n            this.gloMod = this.persistentState.gloMod;\n            this.wildElm = this.persistentState.wildElm;\n\n            this.globalScope = this.persistentState.globalScope;\n\n            this.typingContextStack = new ContextualTypingContextStack(this);\n        }\n\n        public setStyleOptions(style: StyleSettings) {\n            this.styleSettings = style;\n        }\n\n        // Contextual typing\n        public setContextualType(type: Type, provisional: bool) {\n            this.typingContextStack.pushContextualType(type, provisional);\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        public unsetContextualType() {\n            var lastTC = this.typingContextStack.popContextualType();\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n            return lastTC;\n        }\n\n        public hadProvisionalErrors() {\n            return this.typingContextStack.hadProvisionalErrors;\n        }\n        public resetProvisionalErrors() {\n            if (!this.typingContextStack.getContextualType()) {\n                this.typingContextStack.hadProvisionalErrors = false;\n            }\n        }\n\n        public typeCheckWithContextualType(contextType: Type, provisional: bool, condition: bool, ast: AST) {\n            if (condition) {\n                this.setContextualType(contextType, this.typingContextStack.isProvisional() || provisional);\n            }\n            this.typeFlow.typeCheck(ast);\n            if (condition) {\n                this.unsetContextualType();\n            }\n        }\n\n        public resetTargetType() {\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        // Unset the current contextual type without disturbing the stack, effectively "killing" the contextual typing process\n        public killCurrentContextualType() { this.currentContextualTypeContext = null; this.errorReporter.pushToErrorSink = false; }\n        public hasTargetType() { return this.currentContextualTypeContext && this.currentContextualTypeContext.contextualType; }\n        public getTargetTypeContext() { return this.currentContextualTypeContext; }\n\n        public inProvisionalTypecheckMode() {\n            return this.typingContextStack.isProvisional();\n        }\n\n        public getTypeCheckFinishedStatus() {\n            if (this.inProvisionalTypecheckMode()) {\n                return this.typingContextStack.getContextID();\n            }\n            return TypeCheckStatus.Finished;\n        }\n\n        public typeStatusIsFinished(status: TypeCheckStatus) {\n\n            return status == TypeCheckStatus.Finished ||\n                   (this.inProvisionalTypecheckMode() && status == this.typingContextStack.getContextID());\n        }\n\n        public addStartedPTO(pto: PhasedTypecheckObject) {\n            if (this.inProvisionalTypecheckMode()) {\n                this.provisionalStartedTypecheckObjects[this.provisionalStartedTypecheckObjects.length] = pto;\n            }\n        }\n\n        public cleanStartedPTO() {\n            for (var i = 0; i < this.provisionalStartedTypecheckObjects.length; i++) {\n                if (this.provisionalStartedTypecheckObjects[i].typeCheckStatus >= this.typingContextStack.getContextID()) {\n                    this.provisionalStartedTypecheckObjects[i].typeCheckStatus = TypeCheckStatus.NotStarted;\n                }\n            }\n            this.provisionalStartedTypecheckObjects = [];\n        }\n\n        // type collection      \n        public collectTypes(ast: AST): void {\n            if (ast.nodeType == NodeType.Script) {\n                var script = <Script>ast;\n                this.locationInfo = script.locationInfo;\n            }\n            var globalChain = new ScopeChain(this.gloMod, null, this.globalScope);\n            var context = new TypeCollectionContext(globalChain, this);\n            getAstWalkerFactory().walk(ast, preCollectTypes, postCollectTypes, null, context);\n        }\n\n        public makeArrayType(type: Type): Type {\n            if (type.arrayCache == null) {\n                type.arrayCache = new ArrayCache();\n                type.arrayCache.arrayType = new Type();\n                type.arrayCache.arrayType.elementType = type;\n                type.arrayCache.arrayType.symbol = type.symbol;\n            }\n            return type.arrayCache.arrayType;\n        }\n\n        public getParameterList(funcDecl: FuncDecl, container: Symbol): SignatureData {\n            var args = funcDecl.arguments;\n            var parameterTable = null;\n            var parameterBuilder = null;\n            var len = args.members.length;\n            var nonOptionalParams = 0;\n            var result: ParameterSymbol[] = [];\n\n            if (len > 0) {\n                parameterTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                parameterBuilder = new SymbolScopeBuilder(parameterTable, null, null, null, null, container);\n\n                for (var i = 0; i < len; i++) {\n                    var parameter = <ArgDecl>args.members[i];\n                    var paramDef = new ValueLocation();\n                    var parameterSymbol = new ParameterSymbol(parameter.id.text, parameter.minChar,\n                                                            this.locationInfo.unitIndex, paramDef);\n                    parameterSymbol.declAST = parameter;\n                    parameterSymbol.funcDecl = funcDecl;\n                    parameter.id.sym = parameterSymbol;\n                    parameter.sym = parameterSymbol;\n                    paramDef.symbol = parameterSymbol;\n                    paramDef.typeLink = getTypeLink(parameter.typeExpr, this, false);\n                    parameterBuilder.enter(null, parameter, parameterSymbol, this.errorReporter, true, false, false); // REVIEW: Should this be entered into the private scope?\n                    result[result.length] = parameterSymbol;\n                    if (!parameter.isOptionalArg()) {\n                        nonOptionalParams++;\n                    }\n                }\n            }\n            return { parameters: result, nonOptionalParameterCount: nonOptionalParams };\n        }\n\n        // Create a signature for a function definition\n        //  (E.g., has a function body - function declarations, property declarations, lambdas)\n        public createFunctionSignature(funcDecl: FuncDecl, container: Symbol, scope: SymbolScope, overloadGroupSym: Symbol, addToScope: bool): Signature {\n\n            var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported) || container == this.gloMod;\n            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n            var isDefinition = hasFlag(funcDecl.fncFlags, FncFlags.Definition);\n            var isAmbient = hasFlag(funcDecl.fncFlags, FncFlags.Ambient);\n            var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n            var isGlobal = container == this.gloMod;\n\n            var signature: Signature = new Signature();\n            var isLambda = funcDecl.fncFlags & FncFlags.IsFunctionExpression;\n\n            // If a return type has been declared for the signature, set the type link.\n            // Otherwise:\n            //  if it\'s a signature, its type will be \'any\'\n            //  if it\'s a definition, the return type will be inferred  \n            if (funcDecl.returnTypeAnnotation || isDefinition) {\n                signature.returnType = getTypeLink(funcDecl.returnTypeAnnotation, this, false);\n            }\n            else {\n                signature.returnType = new TypeLink();\n                signature.returnType.type = this.anyType;\n            }\n\n            signature.hasVariableArgList = funcDecl.variableArgList;\n\n            var sigData = this.getParameterList(funcDecl, container);\n\n            signature.parameters = sigData.parameters;\n            signature.nonOptionalParameterCount = sigData.nonOptionalParameterCount;\n\n            funcDecl.signature = signature;\n            signature.declAST = funcDecl;\n\n            var useOverloadGroupSym =\n                overloadGroupSym &&\n                overloadGroupSym.getType() &&\n                !overloadGroupSym.isAccessor() &&\n                (funcDecl.isSignature() || (isAmbient == hasFlag(overloadGroupSym.flags, SymbolFlags.Ambient)));\n\n            if (useOverloadGroupSym && isPrivate != hasFlag(overloadGroupSym.flags, SymbolFlags.Private)) {\n                this.errorReporter.simpleError(funcDecl, "Public/Private visibility of overloads does not agree");\n            }\n\n            var groupType = useOverloadGroupSym ? overloadGroupSym.getType() : new Type();\n\n            if (isConstructor) {\n                if (groupType.construct == null) {\n                    groupType.construct = new SignatureGroup();\n                }\n                groupType.construct.addSignature(signature);\n                groupType.construct.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.construct.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else if (funcDecl.isIndexerMember()) {\n                if (groupType.index == null) {\n                    groupType.index = new SignatureGroup();\n                    groupType.index.flags |= SignatureFlags.IsIndexer;\n                }\n\n                groupType.index.addSignature(signature);\n                groupType.index.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.index.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else {\n                if (groupType.call == null) {\n                    groupType.call = new SignatureGroup();\n                }\n                groupType.call.addSignature(signature);\n\n                groupType.call.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.call.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n\n            var instanceType = groupType.instanceType;\n\n            // Ensure that the function\'s symbol is properly configured\n            // (If there were overloads, we\'ll already have a symbol, otherwise we need to create one)\n            var funcName: string = null;\n\n            // Set the function\'s name:\n            //  In the case of anonymous or functions resulting from error\n            //  correction in the parser (isMissing() == true), we do not\n            //  want to set a function name, since they shouldn\'t be inserted\n            //  into the enclosing scope\n\n            // usedHint prevents functions bound to object literal fields from being added to the\n            // enclosing scope\n            var usedHint = false;\n            if (funcDecl.name && !funcDecl.name.isMissing()) {\n                funcName = funcDecl.name.text;\n            }\n            else if (funcDecl.hint) {\n                funcName = funcDecl.hint;\n                usedHint = true;\n            }\n\n            if (groupType.symbol == null) {\n                groupType.symbol =\n                    new TypeSymbol(funcName ? funcName : this.anon,\n                                    funcDecl.minChar, funcDecl.limChar - funcDecl.minChar,\n                                    this.locationInfo.unitIndex,\n                                    groupType);\n                if (!useOverloadGroupSym) {\n                    groupType.symbol.declAST = funcDecl;\n                }\n            }\n\n            // REVIEW: Are we missing any other flags?\n            if (isStatic) {\n                groupType.symbol.flags |= SymbolFlags.Static;\n            }\n\n            if (isAmbient) {\n                groupType.symbol.flags |= SymbolFlags.Ambient;\n            }\n\n            if (isPrivate) {\n                groupType.symbol.flags |= SymbolFlags.Private;\n            }\n\n            groupType.symbol.isMethod = funcDecl.isMethod();\n            if (groupType.symbol.isMethod) {\n                groupType.symbol.flags |= SymbolFlags.Property;\n            }\n\n            funcDecl.type = groupType;\n\n            // Add the function symbol to the appropriate scope\n            // if the funcDecl is a constructor, it will be added to the enclosing scope as a class\n            if (!isConstructor) {\n                // Add the function\'s symbol to its enclosing scope\n                if (funcName && !isLambda && !funcDecl.isAccessor() && !usedHint) {\n\n                    // REVIEW: We\'re not setting the isDecl flags for fuctions bound to object literal properties\n                    // so removing the isDefiniton clause would break object literals\n                    if (addToScope) {  // REVIEW: If we combine this with createFunctionDeclarationSignature, we\'ll need to broaden this for both decls and defs                      \n                        // if it\'s a static method, enter directly into the container\'s scope\n                        if (funcDecl.isMethod() && isStatic) {\n\n                            // REVIEW: What about private statics?\n                            if (!(<TypeSymbol>container).type.members.publicMembers.add(funcName, groupType.symbol)) {\n                                this.errorReporter.duplicateIdentifier(funcDecl, funcName);\n                            }\n\n                            groupType.symbol.container = container;\n                        } // REVIEW: Another check for overloads...\n                        else if (overloadGroupSym == null || (overloadGroupSym.declAST && !(<FuncDecl>overloadGroupSym.declAST).isOverload && (container.isType()))) {\n                            scope.enter(container, funcDecl, groupType.symbol, this.errorReporter, !isPrivate && (isExported || isStatic || isGlobal), false, isAmbient);\n                        }\n                    }\n                    else if (!funcDecl.isSpecialFn()) {\n                        groupType.symbol.container = container; // REVIEW: Set container for overloads or anonymous?\n                    }\n                }\n                else if (!funcDecl.isSpecialFn()) {\n                    groupType.symbol.container = container; // REVIEW: Set container for lambdas and accessors?\n                }\n            }\n\n            // If, say, a call signature overload was declared before the class type was, we want to reuse\n            // the type that\'s already been instantiated for the class type, rather than allocate a new one\n            if (useOverloadGroupSym) {\n                var overloadGroupType = overloadGroupSym ? overloadGroupSym.getType() : null;\n                var classType = groupType;\n\n                if (classType != overloadGroupType) {\n                    if (classType.construct == null) {\n                        if (overloadGroupType && overloadGroupType.construct) {\n                            classType.construct = overloadGroupType.construct;\n                        }\n                        else {\n                            classType.construct = new SignatureGroup();\n                        }\n                    }\n                    else if (overloadGroupType) {\n                        if (overloadGroupType.construct) {\n                            classType.construct.signatures.concat(overloadGroupType.construct.signatures);\n                        }\n                    }\n\n                    // sync call and index signatures as well, but don\'t allocate should they not\n                    // already exist\n                    if (overloadGroupType) {\n                        if (classType.call == null) {\n                            classType.call = overloadGroupType.call;\n                        }\n                        else if (overloadGroupType.call) {\n                            classType.call.signatures.concat(overloadGroupType.call.signatures);\n                        }\n\n                        // if the function is not static, we need to add any call overloads onto the\n                        // instance type\'s call signature list\n                        if (!isStatic) {\n\n                            if (classType.instanceType == null) {\n                                classType.instanceType = overloadGroupType.instanceType;\n                            }\n\n                            var instanceType = classType.instanceType;\n\n                            if (instanceType) {\n                                if (instanceType.call == null) {\n                                    instanceType.call = overloadGroupType.call;\n                                }\n                                else if (overloadGroupType.call) {\n                                    instanceType.call.signatures.concat(overloadGroupType.call.signatures);\n                                }\n                            }\n                        }\n\n                        if (classType.index == null) {\n                            classType.index = overloadGroupType.index;\n                        }\n                        else if (overloadGroupType.index) {\n                            classType.index.signatures.concat(overloadGroupType.index.signatures);\n                        }\n                    }\n                }\n            }\n\n            return signature;\n        }\n\n        // Creates a new symbol for an accessor property\n        // Note that funcDecl.type.symbol and fgSym may not be the same (E.g., in the case of type collection)\n        public createAccessorSymbol(funcDecl: FuncDecl, fgSym: Symbol, enclosingClass: Type, addToMembers: bool, isClassProperty: bool, scope: SymbolScope, container: Symbol) {\n            var accessorSym: FieldSymbol = null\n            var sig = funcDecl.signature;\n            var nameText = funcDecl.name.text;\n            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n\n            if (fgSym == null) {\n                var field = new ValueLocation();\n                accessorSym = new FieldSymbol(nameText, funcDecl.minChar, this.locationInfo.unitIndex, false, field);\n                field.symbol = accessorSym;\n                accessorSym.declAST = funcDecl; // REVIEW: need to reset for getters and setters\n\n                if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                    if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");\n                    }\n                    accessorSym.getter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");\n                    }\n                    accessorSym.setter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n\n                field.typeLink = getTypeLink(null, this, false);\n\n                // if it\'s static, enter it into the class\'s member list directly\n                if (addToMembers) {\n                    if (enclosingClass) {\n                        if (!enclosingClass.members.publicMembers.add(nameText, accessorSym)) {\n                            this.errorReporter.duplicateIdentifier(funcDecl, accessorSym.name);\n                        }\n                        accessorSym.container = enclosingClass.symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(funcDecl, "Accessor property may not be added in this context");\n                    }\n                }\n                else {\n                    scope.enter(container, funcDecl, accessorSym, this.errorReporter, !isPrivate || isStatic, false, false);\n                }\n\n                // We set the flags here, instead of below, because the accessor symbol does not yet have a type\n                if (isClassProperty) {\n                    accessorSym.flags |= SymbolFlags.Property;\n                }\n                if (isStatic) {\n                    accessorSym.flags |= SymbolFlags.Static;\n                }\n\n                if (isPrivate) {\n                    accessorSym.flags |= SymbolFlags.Private;\n                }\n                else {\n                    accessorSym.flags |= SymbolFlags.Public;\n                }\n            }\n            else {\n                accessorSym = <FieldSymbol>(<any>fgSym);\n\n                if (isPrivate != hasFlag(accessorSym.flags, SymbolFlags.Private)) {\n                    this.errorReporter.simpleError(funcDecl, "Getter and setter accessors do not agree in visibility");\n                }\n\n                if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                    if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");\n                    }\n                    accessorSym.getter = <TypeSymbol>funcDecl.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");\n                    }\n                    accessorSym.setter = <TypeSymbol>funcDecl.type.symbol;\n                }\n            }\n\n            return accessorSym;\n        }\n\n        public addBases(resultScope: SymbolAggregateScope, type: Type, baseContext: { base: string; baseId: number; }): void {\n            resultScope.addParentScope(new SymbolTableScope(type.members, type.ambientMembers, type.getAllEnclosedTypes(), type.getAllAmbientEnclosedTypes(), type.symbol));\n            var i = 0;\n            var parent: Type;\n            if (type.extendsList) {\n                for (var len = type.extendsList.length; i < len; i++) {\n                    parent = type.extendsList[i];\n                    if (baseContext.baseId == parent.typeID) {\n                        this.errorReporter.reportErrorFromSym(parent.symbol, "Type \'" + baseContext.base + "\' is recursively referenced as a base class of itself");\n                        parent.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        break;\n                    }\n                    this.addBases(resultScope, parent, baseContext);\n                }\n            }\n        }\n\n        public scopeOf(type: Type): SymbolScope {\n            var resultScope = new SymbolAggregateScope(type.symbol);\n            var baseContext = { base: type.symbol && type.symbol.name ? type.symbol.name : "{}", baseId: type.typeID };\n            this.addBases(resultScope, type, baseContext);\n            return resultScope;\n        }\n\n        public lookupMemberTypeSymbol(containingType: Type, name: string): Symbol {\n            var symbol: Symbol = null;\n            if (containingType.containedScope) {\n                symbol = containingType.containedScope.find(name, false, true);\n            }\n            else if (containingType.members) {\n                symbol = containingType.members.allMembers.lookup(name);\n\n                if (symbol == null && containingType.ambientMembers) {\n                    symbol = containingType.ambientMembers.allMembers.lookup(name);\n                }\n            }\n            if (symbol == null) {\n                var typeMembers = containingType.getAllEnclosedTypes();\n                var ambientTypeMembers = containingType.getAllAmbientEnclosedTypes();\n                if (typeMembers) {\n                    symbol = typeMembers.allMembers.lookup(name);\n\n                    if (symbol == null && ambientTypeMembers) {\n                        symbol = ambientTypeMembers.allMembers.lookup(name);\n                    }\n\n                }\n            }\n            if (symbol && symbol.isType()) {\n                return symbol;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public findSymbolForDynamicModule(idText: string, currentFileName: string, search: (id: string) =>Symbol): Symbol {\n            var originalIdText = idText;\n            var symbol = search(idText);\n           \n            if (symbol == null) {\n                // perhaps it\'s a dynamic module?\n                if (!symbol) {\n                    idText = swapQuotes(originalIdText);\n                    symbol = search(idText);\n                }\n\n                // Check the literal path first\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".ts";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".str";\n                    symbol = search(idText);\n                }\n\n                // Check check for .d.str\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".d.ts";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".d.str";\n                    symbol = search(idText);\n                }\n\n                // If the literal path doesn\'t work, begin the search\n                if (!symbol && !isRelative(originalIdText)) {\n                    // check the full path first, as this is the most likely scenario\n                    idText = originalIdText;\n\n                    var strippedIdText = stripQuotes(idText);\n\n                    // REVIEW: Technically, we shouldn\'t have to normalize here - we should normalize in addUnit.\n                    // Still, normalizing here alows any language services to be free of assumptions\n                    var path = getRootFilePath(switchToForwardSlashes(currentFileName));\n\n                    while (symbol == null && path != "") {\n                        idText = normalizePath(path + strippedIdText + ".ts");\n                        symbol = search(idText);\n\n                        // check for .str\n                        if (symbol == null) {\n                            idText = changePathToSTR(idText);\n                            symbol = search(idText);\n                        }\n\n                        // check for .d.ts\n                        if (symbol == null) {\n                            idText = changePathToDTS(idText);\n                            symbol = search(idText);\n                        }\n\n                        // check for .d.str\n                        if (symbol == null) {\n                            idText = changePathToDSTR(idText);\n                            symbol = search(idText);\n                        }\n\n                        if (symbol == null) {\n\t\t\t\t\t\t\tif(path === \'/\') {\n\t\t\t\t\t\t\t\tpath = \'\';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpath = normalizePath(path + "..");\n\t\t\t\t\t\t\t\tpath = path && path != \'/\' ? path + \'/\' : path;\n\t\t\t\t\t\t\t}\n                        }\n                    }\n                }\n            }\n\n            return symbol;\n        }\n\n        public resolveTypeMember(scope: SymbolScope, dotNode: BinaryExpression): Type {\n            var lhs = dotNode.operand1;\n            var rhs = dotNode.operand2;\n            var resultType = this.anyType;\n            var lhsType = this.anyType;\n\n            if (lhs && rhs && (rhs.nodeType == NodeType.Name)) {\n                if (lhs.nodeType == NodeType.Dot) {\n                    lhsType = this.resolveTypeMember(scope, <BinaryExpression>lhs);\n                }\n                else if (lhs.nodeType == NodeType.Name) {\n                    var identifier = <Identifier>lhs;\n                    var symbol = scope.find(identifier.text, false, true);\n                    if (symbol == null) {\n                        this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                    }\n                    else if (symbol.isType()) {\n\n                        var typeSymbol = <TypeSymbol> symbol;\n\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.findSymbolForDynamicModule(modPath, this.locationInfo.filename, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymbol.type = modSym.getType();\n                            }\n                        }\n\n                        if (optimizeModuleCodeGen && symbol) {\n                            var symType = symbol.getType();\n                            // Once the type has been referenced outside of a type ref position, there\'s\n                            // no going back                        \n                            if (symType && typeSymbol.aliasLink && typeSymbol.onlyReferencedAsTypeRef) {\n\n                                var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                                if (modDecl && hasFlag(modDecl.modFlags, ModuleFlags.IsDynamic)) {\n                                    typeSymbol.onlyReferencedAsTypeRef = !this.resolvingBases;\n                                }\n                            }\n                        }\n                        if (!symbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, "The symbol \'" + identifier.actualText + "\' is not visible at this point");\n                        }\n                        lhsType = symbol.getType();\n\n                        identifier.sym = symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(lhs, "Expected type");\n                    }\n\n                }\n\n                // if the LHS type is a module alias, we won\'t be able to resolve it until\n                // typecheck type.  If this is called during binding, lhsType will be null\n                if (!lhsType) {\n                    lhsType = this.anyType;\n                }\n\n                if (lhsType != this.anyType) {\n                    var rhsIdentifier = <Identifier>rhs;\n                    var resultSymbol = this.lookupMemberTypeSymbol(lhsType, rhsIdentifier.text);\n                    if (resultSymbol == null) {\n                        resultType = this.anyType;\n                        this.errorReporter.simpleError(dotNode, "Expected type");\n                    }\n                    else {\n                        resultType = resultSymbol.getType();\n                        if (!resultSymbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, "The symbol \'" + (<Identifier>rhs).actualText + "\' is not visible at this point");\n                        }\n                    }\n                    rhsIdentifier.sym = resultType.symbol;\n                }\n            }\n            if (resultType.isClass()) {\n                resultType = resultType.instanceType;\n            }\n            return resultType;\n        }\n\n        public resolveFuncDecl(funcDecl: FuncDecl, scope: SymbolScope,\n            fgSym: TypeSymbol): Symbol {\n            var functionGroupSymbol = this.createFunctionSignature(funcDecl, scope.container, scope, fgSym, false).declAST.type.symbol;\n            var signatures: Signature[];\n            if (funcDecl.isConstructMember()) {\n                signatures = functionGroupSymbol.type.construct.signatures;\n            }\n            else if (funcDecl.isIndexerMember()) {\n                signatures = functionGroupSymbol.type.getInstanceType().index.signatures;\n            }\n            else {\n                signatures = functionGroupSymbol.type.call.signatures;\n            }\n\n            var signature = signatures[signatures.length - 1];\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var paramSym: ParameterSymbol = signature.parameters[i];\n                this.resolveTypeLink(scope, paramSym.parameter.typeLink, true);\n            }\n\n            // If a vararg list is present, check that the type is an array type\n            if (len && funcDecl.variableArgList) {\n                if (!signature.parameters[len - 1].parameter.typeLink.type.elementType) {\n                    this.errorReporter.simpleErrorFromSym(signature.parameters[len - 1].parameter.symbol, "... parameter must have array type");\n                    signature.parameters[len - 1].parameter.typeLink.type = this.makeArrayType(signature.parameters[len - 1].parameter.typeLink.type);\n                }\n            }\n            this.resolveTypeLink(scope, signature.returnType,\n                            funcDecl.isSignature());\n            return functionGroupSymbol;\n        }\n\n        public resolveVarDecl(varDecl: VarDecl, scope: SymbolScope): Symbol {\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.minChar, this.locationInfo.unitIndex,\n                                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.varFlags);\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = varDecl;\n            field.typeLink = getTypeLink(varDecl.typeExpr, this, varDecl.init == null);\n            this.resolveTypeLink(scope, field.typeLink, true);\n            varDecl.sym = fieldSymbol;\n            varDecl.type = field.typeLink.type;\n            return fieldSymbol;\n        }\n\n        public resolveTypeLink(scope: SymbolScope, typeLink: TypeLink, supplyVar: bool): void {\n            var arrayCount = 0;\n            if (typeLink.type == null) {\n                var ast: AST = typeLink.ast;\n                if (ast) {\n                    while (typeLink.type == null) {\n                        switch (ast.nodeType) {\n                            case NodeType.Name:\n                                var identifier = <Identifier>ast;\n                                var symbol = scope.find(identifier.text, false, true);\n                                if (symbol == null) {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                                }\n                                else if (symbol.isType()) {\n                                    if (!symbol.visible(scope, this)) {\n                                        this.errorReporter.simpleError(ast, "The symbol \'" + identifier.actualText + "\' is not visible at this point");\n                                    }\n                                    identifier.sym = symbol;\n                                    typeLink.type = symbol.getType();\n                                    if (typeLink.type) {\n                                        if (typeLink.type.isClass()) {\n                                            typeLink.type = typeLink.type.instanceType;\n                                        }\n                                    }\n                                    else {\n                                        typeLink.type = this.anyType;\n                                    }\n                                }\n                                else {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.simpleError(ast, "Expected type");\n                                }\n                                break;\n                            case NodeType.Dot:\n                                typeLink.type = this.resolveTypeMember(scope, <BinaryExpression>ast);\n                                break;\n                            case NodeType.TypeRef:\n                                var typeRef = <TypeReference>ast;\n                                arrayCount = typeRef.arrayCount;\n                                ast = typeRef.term;\n                                if (ast == null) {\n                                    typeLink.type = this.anyType;\n                                }\n                                break;\n                            case NodeType.InterfaceDeclaration:\n                                var interfaceDecl = <InterfaceDeclaration>ast;\n                                var interfaceType = new Type();\n                                var interfaceSymbol = new TypeSymbol((<Identifier>interfaceDecl.name).text,\n                                                                   ast.minChar,\n                                                                   ast.limChar - ast.minChar,\n                                                                   this.locationInfo.unitIndex,\n                                                                   interfaceType);\n                                interfaceType.symbol = interfaceSymbol;\n                                interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                                interfaceType.containedScope =\n                                    new SymbolTableScope(interfaceType.members, null, null, null,\n                                                         interfaceSymbol);\n\n                                interfaceType.containedScope.container = interfaceSymbol;\n                                interfaceType.memberScope = interfaceType.containedScope;\n\n                                var memberList = <ASTList>interfaceDecl.members;\n                                var props: AST[] = memberList.members;\n                                var propsLen = props.length;\n\n                                for (var j = 0; j < propsLen; j++) {\n                                    var propDecl = props[j];\n                                    var propSym: Symbol = null;\n                                    var addMember = true;\n                                    var id: Identifier = null;\n                                    if (propDecl.nodeType == NodeType.FuncDecl) {\n                                        var funcDecl = <FuncDecl>propDecl;\n                                        id = funcDecl.name;\n                                        propSym = interfaceType.members.allMembers.lookup(funcDecl.getNameText());\n                                        addMember = (propSym == null);\n                                        if (funcDecl.isSpecialFn()) {\n                                            addMember = false;\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, interfaceSymbol);\n                                        }\n                                        else {\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, <TypeSymbol>propSym);\n                                        }\n                                        funcDecl.type = (<TypeSymbol>propSym).type;\n                                    }\n                                    else {\n                                        id = (<VarDecl>propDecl).id;\n                                        propSym = this.resolveVarDecl(<VarDecl>propDecl, scope);\n\n                                        // Don\'t add the member if it was missing a name.  This \n                                        // generally just leads to cascading errors that make things\n                                        // more confusing for the user.\n                                        addMember = !id.isMissing();\n                                    }\n\n                                    if (addMember) {\n                                        if (id && hasFlag(id.flags, ASTFlags.OptionalName)) {\n                                            propSym.flags |= SymbolFlags.Optional;\n                                        }\n                                        if (!interfaceType.members.allMembers.add(propSym.name, propSym)) {\n                                            this.errorReporter.duplicateIdentifier(ast, propSym.name);\n                                        }\n                                    }\n                                }\n\n                                ast.type = interfaceType;\n                                typeLink.type = interfaceType;\n\n                                break;\n                            case NodeType.FuncDecl:\n                                var tsym = <TypeSymbol>this.resolveFuncDecl(<FuncDecl>ast, scope, null);\n                                typeLink.type = tsym.type;\n                                break;\n                            default:\n                                typeLink.type = this.anyType;\n                                this.errorReporter.simpleError(ast, "Expected type");\n                                break;\n                        }\n                    }\n                }\n                for (var count = arrayCount; count > 0; count--) {\n                    typeLink.type = this.makeArrayType(typeLink.type);\n                }\n                if (supplyVar && (typeLink.type == null)) {\n                    typeLink.type = this.anyType;\n                }\n                if (typeLink.ast) {\n                    typeLink.ast.type = typeLink.type;\n                }\n            }\n            // else wait for type inference\n        }\n\n        public resolveBaseTypeLink(typeLink: TypeLink, scope: SymbolScope) {\n            this.resolvingBases = true;\n            this.resolveTypeLink(scope, typeLink, true);\n            this.resolvingBases = false;\n            var extendsType: Type = null;\n            if (typeLink.type.isClass()) {\n                extendsType = typeLink.type.instanceType;\n            }\n            else {\n                extendsType = typeLink.type;\n            }\n\n            return extendsType;\n        }\n\n        public findMostApplicableSignature(signatures: ApplicableSignature[], args: ASTList): { sig: Signature; ambiguous: bool; } {\n\n            if (signatures.length == 1) {\n                return { sig: signatures[0].signature, ambiguous: false };\n            }\n\n            var best: ApplicableSignature = signatures[0];\n            var Q: ApplicableSignature = null;\n            var AType: Type = null;\n            var PType: Type = null;\n            var QType: Type = null;\n            var ambiguous = false;\n\n            for (var qSig = 1; qSig < signatures.length; qSig++) {\n                Q = signatures[qSig];\n                var i = 0;\n                // find the better conversion\n                for (i = 0; args && i < args.members.length; i++) {\n                    AType = args.members[i].type;\n                    PType = i < best.signature.parameters.length ? best.signature.parameters[i].getType() : best.signature.parameters[best.signature.parameters.length - 1].getType().elementType;\n                    QType = i < Q.signature.parameters.length ? Q.signature.parameters[i].getType() : Q.signature.parameters[Q.signature.parameters.length - 1].getType().elementType;\n\n                    if (this.typesAreIdentical(PType, QType)) {\n                        continue;\n                    }\n                    else if (this.typesAreIdentical(AType, PType)) {\n                        break;\n                    }\n                    else if (this.typesAreIdentical(AType, QType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(PType, QType)) {\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(QType, PType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (Q.hadProvisionalErrors) {\n                        break;\n                    }\n                    else if (best.hadProvisionalErrors) {\n                        best = Q;\n                        break;\n                    }\n                }\n\n                if (!args || i == args.members.length) {\n                    var collection: ITypeCollection = {\n                        getLength: () => { return 2; },\n                        setTypeAtIndex: (index: number, type: Type) => { }, // no contextual typing here, so no need to do anything\n                        getTypeAtIndex: (index: number) => { return index ? Q.signature.returnType.type : best.signature.returnType.type; } // we only want the "second" type - the "first" is skipped\n                    }\n                    var bct = this.findBestCommonType(best.signature.returnType.type, null, collection, true);\n                    ambiguous = !bct;\n                }\n                else {\n                    ambiguous = false;\n                }\n            }\n\n            return { sig: best.signature, ambiguous: ambiguous };\n        }\n\n        public getApplicableSignatures(signatures: Signature[], args: ASTList, comparisonInfo: TypeComparisonInfo): ApplicableSignature[] {\n\n            var applicableSigs: ApplicableSignature[] = [];\n            var memberType: Type = null;\n            var miss = false;\n            var cxt: ContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            for (var i = 0; i < signatures.length; i++) {\n                miss = false;\n\n                for (var j = 0; j < args.members.length; j++) {\n\n                    if (j >= signatures[i].parameters.length) {\n                        continue;\n                    }\n                    memberType = signatures[i].parameters[j].getType();\n\n                    // account for varargs\n                    if (signatures[i].declAST.variableArgList && (j >= signatures[i].nonOptionalParameterCount - 1) && memberType.isArray()) {\n                        memberType = memberType.elementType;\n                    }\n\n                    if (memberType == this.anyType) {\n                        continue;\n                    }\n                    else if (args.members[j].nodeType == NodeType.FuncDecl) {\n                        if (this.typeFlow.functionInterfaceType && memberType == this.typeFlow.functionInterfaceType) {\n                            continue;\n                        }\n                        if (!this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], true)) {\n                            // if it\'s just annotations that are blocking us, typecheck the function and add it to the list\n                            if (this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], false)) {\n                                this.typeFlow.typeCheck(args.members[j]);\n                                if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                    break;\n                                }\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        else { // if it can be contextually typed, try it out...\n\n                            this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                            this.cleanStartedPTO();\n                            hadProvisionalErrors = this.hadProvisionalErrors();\n\n                            if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                if (comparisonInfo) {\n                                    comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                                }\n                                miss = true;\n                            }\n\n                            // clean the type\n                            //if (hadProvisionalErrors) {\n                            //    cxt = this.currentContextualTypeContext;\n                            //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                            //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                            //        miss = true;\n                            //    }\n                            //    this.cleanStartedPTO();\n                            //}\n\n                            this.resetProvisionalErrors();\n                            if (miss) {\n                                break;\n                            }\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ObjectLit) {\n                        // now actually attempt to typecheck as the contextual type\n                        if (this.typeFlow.objectInterfaceType && memberType == this.typeFlow.objectInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        this.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                            }\n                            miss = true;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n\n                        //    // is the "cleaned" type even assignable?\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ArrayLit) {\n                        // attempt to contextually type the array literal\n                        if (this.typeFlow.arrayInterfaceType && memberType == this.typeFlow.arrayInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        this.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                            }\n                            break;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                }\n\n                if (j == args.members.length) {\n                    applicableSigs[applicableSigs.length] = { signature: signatures[i], hadProvisionalErrors: hadProvisionalErrors };\n                }\n                hadProvisionalErrors = false;\n            }\n\n            return applicableSigs;\n        }\n\n        public canContextuallyTypeFunction(candidateType: Type, funcDecl: FuncDecl, beStringent: bool): bool {\n\n            // in these cases, we do not attempt to apply a contextual type\n            //  RE: isInlineCallLiteral - if the call target is a function literal, we don\'t want to apply the target type\n            //  to its body - instead, it should be applied to its return type\n            if (funcDecl.isParenthesized ||\n                funcDecl.isMethod() ||\n                beStringent && funcDecl.returnTypeAnnotation ||\n                funcDecl.isInlineCallLiteral) {\n                return false;\n            }\n\n            beStringent = beStringent || (this.typeFlow.functionInterfaceType == candidateType);\n\n            // At this point, if we\'re not being stringent, there\'s no need to check for multiple call sigs\n            // or count parameters - we just want to unblock typecheck\n            if (!beStringent) {\n                return true;\n            }\n\n            // If we\'re coming from an in-scope typecheck, lambdas may not have had function signatures created for them\n            // REVIEW: Should we search out the overload group here?\n            if (!funcDecl.signature) {\n                this.createFunctionSignature(funcDecl, this.typeFlow.scope.container, this.typeFlow.scope, null, null);\n                this.typeFlow.typeCheck(funcDecl);\n            }\n\n            var signature = funcDecl.signature;\n            var paramLen = signature.parameters.length;\n\n            // Check that the argument declarations have no type annotations\n            for (var i = 0; i < paramLen; i++) {\n                var param = signature.parameters[i];\n                var symbol = <ParameterSymbol>param;\n                var argDecl = <ArgDecl>symbol.declAST;\n\n                // REVIEW: a valid typeExpr is a requirement for varargs,\n                // so we may want to revise our invariant\n                if (beStringent && argDecl.typeExpr) {\n                    return false;\n                }\n            }\n\n            if (candidateType.construct && candidateType.call) {\n                return false;\n            }\n\n            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n\n            if (!candidateSigs || candidateSigs.signatures.length > 1) {\n                return false;\n            }\n\n            // if we\'re here, the contextual type can be applied to the function\n            return true;\n        }\n\n        public canContextuallyTypeObjectLiteral(targetType: Type, objectLit: UnaryExpression): bool {\n\n            if (targetType == this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            var memberDecls = <ASTList>objectLit.operand;\n\n            if (!(memberDecls && targetType.memberScope)) {\n                return false;\n            }\n\n            var id: AST = null;\n            var targetMember: Symbol = null;\n            var text = "";\n            var foundSyms = {};\n\n            // Check that each property in the object literal is present in the target\n            // type\n            for (var i = 0; i < memberDecls.members.length; i++) {\n                id = (<BinaryExpression>memberDecls.members[i]).operand1;\n\n                if (id.nodeType == NodeType.Name) {\n                    text = (<Identifier>id).text;\n                }\n                else if (id.nodeType == NodeType.QString) {\n                    // TODO: set text to unescaped string\n                    var idText = (<StringLiteral>id).text;\n                    text = idText.substring(1, idText.length - 1);\n                }\n                else {\n                    return false;\n                }\n\n                targetMember = targetType.memberScope.find(text, true, false);\n\n                if (!targetMember) {\n                    return false;\n                }\n\n                foundSyms[text] = true;\n            }\n\n            // Check that all members in the target type are present in the object literal\n            var targetMembers = targetType.memberScope.getAllValueSymbolNames(true);\n\n            for (var i = 0; i < targetMembers.length; i++) {\n                var memberName = targetMembers[i];\n                var memberSym = targetType.memberScope.find(memberName, true, false);\n\n                if (!foundSyms[targetMembers[i]] &&\n                    !hasFlag(memberSym.flags, SymbolFlags.Optional)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public widenType(t: Type) {\n            if (t == this.undefinedType || t == this.nullType) { // REVIEW: not isNullOrUndefinedType for perf reasons\n                return this.anyType;\n            }\n\n            return t;\n        }\n\n        public isNullOrUndefinedType(t: Type) {\n            return t == this.undefinedType || t == this.nullType;\n        }\n\n        public findBestCommonType(initialType: Type, targetType: Type, collection: ITypeCollection, acceptVoid:bool, comparisonInfo?: TypeComparisonInfo) {\n            var i = 0;\n            var len = collection.getLength();\n            var nlastChecked = 0;\n            var bestCommonType = initialType;\n\n            if (targetType) {\n                bestCommonType = bestCommonType ? bestCommonType.mergeOrdered(targetType, this, acceptVoid) : targetType;\n            }\n\n            // it\'s important that we set the convergence type here, and not in the loop,\n            // since the first element considered may be the contextual type\n            var convergenceType: Type = bestCommonType;\n\n            while (nlastChecked < len) {\n\n                for (i = 0; i < len; i++) {\n\n                    // no use in comparing a type against itself\n                    if (i == nlastChecked) {\n                        continue;\n                    }\n\n                    if (convergenceType && (bestCommonType = convergenceType.mergeOrdered(collection.getTypeAtIndex(i), this, acceptVoid, comparisonInfo))) {\n                        convergenceType = bestCommonType;\n                    }\n\n                    if (bestCommonType == this.anyType || bestCommonType == null) {\n                        break;\n                    }\n                    else if (targetType) { // set the element type to the target type\n                        collection.setTypeAtIndex(i, targetType);\n                    }\n                }\n\n                // use the type if we\'ve agreed upon it\n                if (convergenceType && bestCommonType) {\n                    break;\n                }\n\n                nlastChecked++;\n                if (nlastChecked < len) {\n                    convergenceType = collection.getTypeAtIndex(nlastChecked);\n                }\n            }\n\n            return acceptVoid ? bestCommonType : (bestCommonType == this.voidType ? null : bestCommonType);\n        }\n\n        // Type Identity\n\n        public typesAreIdentical(t1: Type, t2: Type) {\n\n            // This clause will cover both primitive types (since the type objects are shared),\n            // as well as shared brands\n            if (t1 == t2) {\n                return true;\n            }\n\n            if (!t1 || !t2) {\n                return false;\n            }\n\n            if (t1.isClass() || t1.isClassInstance()) {\n                return false;\n            }\n\n            var comboId = (t2.typeID << 16) | t1.typeID;\n\n            if (this.identicalCache[comboId]) {\n                return true;\n            }\n\n            // If one is an enum, and they\'re not the same type, they\'re not identical\n            if ((t1.typeFlags & TypeFlags.IsEnum) || (t2.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (t1.isArray() || t2.isArray()) {\n                if (!(t1.isArray() && t2.isArray())) {\n                    return false;\n                }\n                this.identicalCache[comboId] = false;\n                var ret = this.typesAreIdentical(t1.elementType, t2.elementType);\n                if (ret) {\n                    this.subtypeCache[comboId] = true;\n                }\n                else {\n                    this.subtypeCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            if (t1.primitiveTypeClass != t2.primitiveTypeClass) {\n                return false;\n            }\n\n            this.identicalCache[comboId] = false;\n\n            // properties are identical in name, optionality, and type\n            // REVIEW: TypeChanges - The compiler does not currently check against the members of parent types!\n            // REVIEW: TypeChanges - What about ambientMembers?\n            if (t1.memberScope && t2.memberScope) {\n                var t1MemberKeys = t1.memberScope.getAllValueSymbolNames(true).sort();\n                var t2MemberKeys = t2.memberScope.getAllValueSymbolNames(true).sort();\n\n                if (t1MemberKeys.length != t2MemberKeys.length) {\n                    this.identicalCache[comboId] = undefined;\n                    return false;\n                }\n\n                var t1MemberSymbol: Symbol = null;\n                var t2MemberSymbol: Symbol = null;\n\n                var t1MemberType: Type = null;\n                var t2MemberType: Type = null;\n\n                for (var iMember = 0; iMember < t1MemberKeys.length; iMember++) {\n                    if (t1MemberKeys[iMember] != t2MemberKeys[iMember]) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberSymbol = <Symbol>t1.memberScope.find(t1MemberKeys[iMember], false, false);\n                    t2MemberSymbol = <Symbol>t2.memberScope.find(t2MemberKeys[iMember], false, false);\n\n                    if ((t1MemberSymbol.flags & SymbolFlags.Optional) != (t2MemberSymbol.flags & SymbolFlags.Optional)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberType = t1MemberSymbol.getType();\n                    t2MemberType = t2MemberSymbol.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (t1MemberType && t2MemberType && (this.identicalCache[(t2MemberType.typeID << 16) | t1MemberType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.typesAreIdentical(t1MemberType, t2MemberType)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n                }\n            }\n            else if (t1.memberScope || t2.memberScope) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.call, t2.call)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.construct, t2.construct)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.index, t2.index)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            this.identicalCache[comboId] = true;\n            return true;\n        }\n\n        public signatureGroupsAreIdentical(sg1: SignatureGroup, sg2: SignatureGroup) {\n\n            // covers the null case\n            if (sg1 == sg2) {\n                return true;\n            }\n\n            // covers the mixed-null case\n            if (!sg1 || !sg2) {\n                return false;\n            }\n\n            if (sg1.signatures.length != sg2.signatures.length) {\n                return false;\n            }\n\n            var sig1: Signature = null;\n            var sig2: Signature = null;\n            var sigsMatch = false;\n\n            // The signatures in the signature group may not be ordered...\n            // REVIEW: Should definition signatures be required to be identical as well?\n            for (var iSig1 = 0; iSig1 < sg1.signatures.length; iSig1++) {\n                sig1 = sg1.signatures[iSig1];\n\n                for (var iSig2 = 0; iSig2 < sg2.signatures.length; iSig2++) {\n                    sig2 = sg2.signatures[iSig2];\n\n                    if (this.signaturesAreIdentical(sig1, sig2)) {\n                        sigsMatch = true;\n                        break;\n                    }\n                }\n\n                if (sigsMatch) {\n                    sigsMatch = false;\n                    continue;\n                }\n\n                // no match found for a specific signature\n                return false;\n            }\n\n            return true;\n        }\n\n        public signaturesAreIdentical(s1: Signature, s2: Signature) {\n\n            if (s1.hasVariableArgList != s2.hasVariableArgList) {\n                return false;\n            }\n\n            if (s1.nonOptionalParameterCount != s2.nonOptionalParameterCount) {\n                return false;\n            }\n\n            if (s1.parameters.length != s2.parameters.length) {\n                return false;\n            }\n\n            if (!this.typesAreIdentical(s1.returnType.type, s2.returnType.type)) {\n                return false;\n            }\n\n            for (var iParam = 0; iParam < s1.parameters.length; iParam++) {\n                if (!this.typesAreIdentical(s1.parameters[iParam].parameter.typeLink.type, s2.parameters[iParam].parameter.typeLink.type)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        // Subtyping and Assignment compatibility\n\n        public sourceIsSubtypeOfTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, false, this.subtypeCache, comparisonInfo); }\n        public signatureGroupIsSubtypeOfTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, false, this.subtypeCache, comparisonInfo); }\n        public signatureIsSubtypeOfTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, false, this.subtypeCache, comparisonInfo); }\n\n        public sourceIsAssignableToTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, true, this.assignableCache, comparisonInfo); }\n        public signatureGroupIsAssignableToTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, true, this.assignableCache, comparisonInfo); }\n        public signatureIsAssignableToTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, true, this.assignableCache, comparisonInfo); }\n\n        public sourceIsRelatableToTarget(source: Type, target: Type, assignableTo: bool, comparisonCache: any, comparisonInfo: TypeComparisonInfo) {\n\n            // REVIEW: Does this check even matter?\n            //if (this.typesAreIdentical(source, target)) {\n            //    return true;\n            //}\n            if (source == target) {\n                return true;\n            }\n\n            // An error has already been reported in this case\n            if (!(source && target)) {\n                return true;\n            }\n\n            var comboId = (source.typeID << 16) | target.typeID;\n\n            // In the case of a \'false\', we want to short-circuit a recursive typecheck\n            if (comparisonCache[comboId] != undefined) {\n                return true;\n            }\n\n            // this is one difference between subtyping and assignment compatibility\n            if (assignableTo) {\n                if (source == this.anyType || target == this.anyType) {\n                    return true;\n                }\n            }\n            else {\n                // This is one difference between assignment compatibility and subtyping\n                if (target == this.anyType) {\n                    return true;\n                }\n            }\n\n            if (source == this.undefinedType) {\n                return true;\n            }\n\n            if ((source == this.nullType) && (target != this.undefinedType && target != this.voidType)) {\n                return true;\n            }\n\n            // REVIEW: enum types aren\'t explicitly covered in the spec\n            if (target == this.numberType && (source.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if (source == this.numberType && (target.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if ((source.typeFlags & TypeFlags.IsEnum) || (target.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (source.isArray() || target.isArray()) {\n                if (!(source.isArray() && target.isArray())) {\n                    return false;\n                }\n                comparisonCache[comboId] = false;\n                var ret = this.sourceIsRelatableToTarget(source.elementType, target.elementType, assignableTo, comparisonCache, comparisonInfo);\n                if (ret) {\n                    comparisonCache[comboId] = true;\n                }\n                else {\n                    comparisonCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            // this check ensures that we only operate on object types from this point forward,\n            // since the checks involving primitives occurred above\n            if (source.primitiveTypeClass != target.primitiveTypeClass) {\n\n                if (target.primitiveTypeClass == Primitive.None) {\n                    if (source == this.numberType && this.typeFlow.numberInterfaceType) {\n                        source = this.typeFlow.numberInterfaceType;\n                    }\n                    else if (source == this.stringType && this.typeFlow.stringInterfaceType) {\n                        source = this.typeFlow.stringInterfaceType;\n                    }\n                    else if (source == this.booleanType && this.typeFlow.booleanInterfaceType) {\n                        source = this.typeFlow.booleanInterfaceType;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = false;\n\n            if (source.hasBase(target)) {\n                comparisonCache[comboId] = true;\n                return true;\n            }\n\n            if (this.typeFlow.objectInterfaceType && target == this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            if (this.typeFlow.functionInterfaceType && (source.call || source.construct) && target == this.typeFlow.functionInterfaceType) {\n                return true;\n            }\n\n            // REVIEW: We should perhaps do this, though it wouldn\'t be quite right without generics support\n            //if (this.typeFlow.arrayInterfaceType && (source.index) && target == this.typeFlow.arrayInterfaceType) {\n            //    return true;\n            //}\n\n            // At this point, if the target is a class, but not the source or a parent of the source, bail\n            if (target.isClass() || target.isClassInstance()) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            if (target.memberScope && source.memberScope) {\n                var mPropKeys = target.memberScope.getAllValueSymbolNames(true);\n                var mProp: Symbol = null;\n                var nProp: Symbol = null;\n                var mPropType: Type = null;\n                var nPropType: Type = null;\n                var inferenceSymbol: InferenceSymbol = null;\n\n                for (var iMProp = 0; iMProp < mPropKeys.length; iMProp++) {\n                    mProp = target.memberScope.find(mPropKeys[iMProp], false, false);\n                    nProp = source.memberScope.find(mPropKeys[iMProp], false, false);\n\n                    // methods do not have the "arguments" field\n                    if (mProp.name == "arguments" &&\n                        this.typeFlow.iargumentsInterfaceType &&\n                        (this.typeFlow.iargumentsInterfaceType.symbol.flags & SymbolFlags.CompilerGenerated) &&\n                        mProp.kind() == SymbolKind.Variable &&\n                        (<VariableSymbol>mProp).variable.typeLink.type == this.typeFlow.iargumentsInterfaceType) {\n                        continue;\n                    }\n\n                    if (mProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>mProp;\n                        if (inferenceSymbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                            // REVIEW: TypeChanges: Does this ever really happen?  Maybe for out-of-order typecheck?\n                            this.typeFlow.typeCheck(mProp.declAST);\n                        }\n                    }\n                    mPropType = mProp.getType();\n\n                    if (!nProp) {\n                        // If it\'s not present on the type in question, look for the property on \'Object\'\n                        if (this.typeFlow.objectInterfaceType) {\n                            nProp = this.typeFlow.objectInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                        }\n\n                        if (!nProp) {\n                            // Now, the property was not found on Object, but the type in question is a function, look\n                            // for it on function\n                            if (this.typeFlow.functionInterfaceType && (mPropType.call || mPropType.construct)) {\n                                nProp = this.typeFlow.functionInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                            }\n\n                            // finally, check to see if the property is optional\n                            if (!nProp) {\n                                if (!(mProp.flags & SymbolFlags.Optional)) {\n                                    comparisonCache[comboId] = undefined;\n                                    if (comparisonInfo) { // only surface the first error\n                                        comparisonInfo.flags |= TypeRelationshipFlags.RequiredPropertyIsMissing;\n                                        comparisonInfo.addMessageToFront("Type \'" + source.getTypeName() + "\' is missing property \'" + mPropKeys[iMProp] + "\' from type \'" + target.getTypeName() + "\'");\n                                    }\n                                    return false;\n                                }\n                                else {\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (nProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>nProp;\n                        if (inferenceSymbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                            this.typeFlow.typeCheck(nProp.declAST);\n                        }\n                    }\n\n\n                    nPropType = nProp.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (mPropType && nPropType && (comparisonCache[(nPropType.typeID << 16) | mPropType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo)) {\n                        comparisonCache[comboId] = undefined;\n                        if (comparisonInfo) { // only surface the first error\n                            comparisonInfo.flags |= TypeRelationshipFlags.IncompatiblePropertyTypes;\n                            comparisonInfo.addMessageToFront("Types of property \'" + mProp.name + "\' of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        return false;\n                    }\n                }\n            }\n\n            // check signature groups\n            if (source.call || target.call) {\n                if (!this.signatureGroupIsRelatableToTarget(source.call, target.call, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.call && target.call) {\n                            comparisonInfo.addMessageToFront("Call signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        else {\n                            var hasSig = target.call ? target.getTypeName() : source.getTypeName();\n                            var lacksSig = !target.call ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage("Type \'" + hasSig + "\' requires a call signature, but Type \'" + lacksSig + "\' lacks one");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (source.construct || target.construct) {\n                if (!this.signatureGroupIsRelatableToTarget(source.construct, target.construct, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.construct && target.construct) {\n                            comparisonInfo.addMessageToFront("Construct signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        else {\n                            var hasSig = target.construct ? target.getTypeName() : source.getTypeName();\n                            var lacksSig = !target.construct ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage("Type \'" + hasSig + "\' requires a construct signature, but Type \'" + lacksSig + "\' lacks one");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (target.index) {\n                var targetIndex = !target.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : target.index;\n                var sourceIndex = !source.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : source.index;\n\n                if (!this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.addMessageToFront("Index signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = true;\n            return true;\n        }\n\n        // REVIEW: TypeChanges: Return an error context object so the user can get better diagnostic info\n        public signatureGroupIsRelatableToTarget(sourceSG: SignatureGroup, targetSG: SignatureGroup, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n            if (sourceSG == targetSG) {\n                return true;\n            }\n\n            if (!(sourceSG && targetSG)) {\n                return false;\n            }\n\n            var mSig: Signature = null;\n            var nSig: Signature = null;\n            var foundMatch = false;\n\n            for (var iMSig = 0; iMSig < targetSG.signatures.length; iMSig++) {\n                mSig = targetSG.signatures[iMSig];\n\n                for (var iNSig = 0; iNSig < sourceSG.signatures.length; iNSig++) {\n                    nSig = sourceSG.signatures[iNSig];\n                    if (this.signatureIsRelatableToTarget(nSig, mSig, assignableTo, comparisonCache, comparisonInfo)) {\n                        foundMatch = true;\n                        break;\n                    }\n                }\n\n                if (foundMatch) {\n                    foundMatch = false;\n                    continue;\n                }\n                return false;\n            }\n\n            return true;\n        }\n\n        public signatureIsRelatableToTarget(sourceSig: Signature, targetSig: Signature, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n\n            if (!sourceSig.parameters || !targetSig.parameters) {\n                return false;\n            }\n\n            var targetVarArgCount = targetSig.hasVariableArgList ? targetSig.nonOptionalParameterCount - 1 : targetSig.nonOptionalParameterCount;\n            var sourceVarArgCount = sourceSig.hasVariableArgList ? sourceSig.nonOptionalParameterCount - 1 : sourceSig.nonOptionalParameterCount;\n\n            if (sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableArgList) {\n                if (comparisonInfo) {\n                    comparisonInfo.flags |= TypeRelationshipFlags.SourceSignatureHasTooManyParameters;\n                    comparisonInfo.addMessageToFront("Call signature expects " + targetVarArgCount + " or fewer parameters");\n                }\n                return false;\n            }\n\n            var sourceReturnType = sourceSig.returnType.type;\n            var targetReturnType = targetSig.returnType.type;\n\n            if (targetReturnType != this.voidType) {\n                if (!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleReturnTypes;\n                        // No need to print this one here - it\'s printed as part of the signature error in sourceIsRelatableToTarget\n                        //comparisonInfo.addMessageToFront("Incompatible return types: \'" + sourceReturnType.getTypeName() + "\' and \'" + targetReturnType.getTypeName() + "\'");\n                    }\n                    return false;\n                }\n            }\n\n            var len = (sourceVarArgCount < targetVarArgCount && sourceSig.hasVariableArgList) ? targetVarArgCount : sourceVarArgCount;\n            var sourceParamType: Type = null;\n            var targetParamType: Type = null;\n            var sourceParamName = "";\n            var targetParamName = "";\n\n            for (var iSource = 0, iTarget = 0; iSource < len; iSource++, iTarget++) {\n\n                if (!sourceSig.hasVariableArgList || iSource < sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n                else if (iSource == sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    if (sourceParamType.elementType) {\n                        sourceParamType = sourceParamType.elementType;\n                    }\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n\n                if (iTarget < targetSig.parameters.length && iTarget < targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n                else if (targetSig.hasVariableArgList && iTarget == targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    if (targetParamType.elementType) {\n                        targetParamType = targetParamType.elementType;\n                    }\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n\n                if (!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo, comparisonCache, comparisonInfo) ||\n                        this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo, comparisonCache, comparisonInfo))) {\n\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleParameterTypes;\n                    }\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Continuation {\n        public exceptionBlock = -1;\n        constructor (public normalBlock: number) { }\n    }\n\n    function getBaseTypeLinks(bases: ASTList, baseTypeLinks: TypeLink[]) {\n        if (bases) {\n            var len = bases.members.length;\n            if (baseTypeLinks == null) {\n                baseTypeLinks = new TypeLink[];\n            }\n            for (var i = 0; i < len; i++) {\n                var baseExpr = bases.members[i];\n                var name = baseExpr;\n                var typeLink = new TypeLink();\n                typeLink.ast = name;\n                baseTypeLinks[baseTypeLinks.length] = typeLink;\n            }\n        }\n        return baseTypeLinks;\n    }\n\n    function getBases(type: Type, typeDecl: TypeDeclaration) {\n        type.extendsTypeLinks = getBaseTypeLinks(typeDecl.extendsList, type.extendsTypeLinks);\n        type.implementsTypeLinks = getBaseTypeLinks(typeDecl.implementsList, type.implementsTypeLinks);\n    }\n\n    function addPrototypeField(classType: Type, ast: AST, context: TypeCollectionContext) {\n        var field = new ValueLocation();\n        field.typeLink = new TypeLink();\n        field.typeLink.ast = ast;\n        field.typeLink.type = classType.instanceType;\n\n        var fieldSymbol =\n            new FieldSymbol("prototype", ast.minChar,\n                            context.checker.locationInfo.unitIndex, true, field);\n        fieldSymbol.flags |= (SymbolFlags.Property | SymbolFlags.BuiltIn);\n        field.symbol = fieldSymbol;\n        fieldSymbol.declAST = ast;\n        classType.members.addPublicMember("prototype", fieldSymbol);\n    }\n\n    export function createNewConstructGroupForType(type: Type) {\n        var signature = new Signature();\n        signature.returnType = new TypeLink();\n        signature.returnType.type = type.instanceType;\n        signature.parameters = [];\n\n        type.construct = new SignatureGroup();\n        type.construct.addSignature(signature);     \n    }\n\n    export function cloneParentConstructGroupForChildType(child: Type, parent: Type) {\n        child.construct = new SignatureGroup();\n        var sig: Signature = null;\n\n        if (!parent.construct) {\n            createNewConstructGroupForType(parent);\n        }\n\n        for (var i = 0; i < parent.construct.signatures.length; i++) { \n            sig = new Signature();\n            sig.parameters = parent.construct.signatures[i].parameters;\n            sig.nonOptionalParameterCount = parent.construct.signatures[i].nonOptionalParameterCount;\n            sig.typeCheckStatus = parent.construct.signatures[i].typeCheckStatus;\n            sig.declAST = parent.construct.signatures[i].declAST;\n            sig.returnType = new TypeLink();\n            sig.returnType.type = child.instanceType;\n            child.construct.addSignature(sig);\n        }\n\n    }\n\n    export var globalId = "__GLO";\n\n    export interface IAliasScopeContext {\n        topLevelScope: ScopeChain;\n        members: IHashTable;\n        tcContext: TypeCollectionContext;\n    }\n\n    function findTypeSymbolInScopeChain(name: string, scopeChain: ScopeChain): Symbol {\n        var symbol = scopeChain.scope.find(name, false, true);\n\n        if (symbol == null && scopeChain.previous) {\n            symbol = findTypeSymbolInScopeChain(name, scopeChain.previous);\n        }\n\n        return symbol;\n    }\n\n    function findSymbolFromAlias(alias: AST, context: IAliasScopeContext): Symbol {\n        var symbol: Symbol = null;\n        switch (alias.nodeType) {\n            case NodeType.Name:\n                var name = (<Identifier>alias).text;\n                var isDynamic = isQuoted(name);\n\n                var findSym = (id: string) => {\n                    if (context.members) {\n                        return context.members.lookup(name);\n                    }\n                    else {\n                        return findTypeSymbolInScopeChain(name, context.topLevelScope);\n                    }\n                }\n\n                if (isDynamic) {\n                    symbol = context.tcContext.checker.findSymbolForDynamicModule(name, context.tcContext.script.locationInfo.filename, findSym);\n                }\n                else {\n                    symbol = findSym(name);\n                }\n\n                break;\n\n            case NodeType.Dot:\n                var dottedExpr = <BinaryExpression>alias;\n                var op1Sym = findSymbolFromAlias(dottedExpr.operand1, context);\n\n                if (op1Sym && op1Sym.getType()) {\n                    symbol = findSymbolFromAlias(dottedExpr.operand2, context);\n                }\n\n                break;\n\n            default:\n                break;\n        }\n\n        if (symbol) {\n            var symType = symbol.getType();\n            if (symType) {\n                var members = symType.members;\n                if (members) {\n                    context.members = members.publicMembers;\n                }\n            }\n        }\n\n        return symbol;\n    }\n\n    export function preCollectImportTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        var importDecl = <ImportDeclaration>ast;\n\n        // REVIEW: technically, this call isn\'t strictly necessary, since we\'ll find the type during the call to resolveTypeMembers\n        var aliasedModSymbol = findSymbolFromAlias(importDecl.alias, { topLevelScope: scopeChain, members: null, tcContext: context });\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n\n        if (aliasedModSymbol) {\n            var aliasedModType = aliasedModSymbol.getType();\n\n            if (aliasedModType) {\n                modType = <ModuleType>aliasedModType;\n            }\n        }\n\n        typeSymbol = new TypeSymbol(importDecl.id.text, importDecl.id.minChar, importDecl.limChar - importDecl.minChar,\n                                    context.checker.locationInfo.unitIndex, modType);\n\n        typeSymbol.aliasLink = importDecl;\n\n        if (context.scopeChain.moduleDecl) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n            typeSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        typeSymbol.declAST = importDecl;\n        importDecl.id.sym = typeSymbol;\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, true, false);\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, false, false);\n        return true;\n    }\n\n    export function preCollectModuleTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>ast;\n\n        var isAmbient = hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient);\n        var isEnum = hasFlag(moduleDecl.modFlags, ModuleFlags.IsEnum);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);\n        var modName = (<Identifier>moduleDecl.name).text;\n\n        var isDynamic = isQuoted(modName);\n\n        var symbol = scopeChain.scope.findLocal(modName, false, false);\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        if ((symbol == null) || (symbol.kind() != SymbolKind.Type)) {\n\n            if (modType == null) {\n                var enclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n                if (isEnum) {\n                    modType.typeFlags |= TypeFlags.IsEnum;\n                }\n                modType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.setHasImplementation();\n            }\n\n            typeSymbol = new TypeSymbol(modName, moduleDecl.name.minChar, modName.length,\n                                        context.checker.locationInfo.unitIndex, modType);\n            typeSymbol.isDynamic = isQuoted(moduleDecl.prettyName);\n\n            if (context.scopeChain.moduleDecl) {\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n            typeSymbol.declAST = moduleDecl;\n            typeSymbol.prettyName = moduleDecl.prettyName;\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            modType.symbol = typeSymbol;\n        }\n        else {\n            if (symbol && symbol.declAST && symbol.declAST.nodeType != NodeType.ModuleDeclaration) {\n                context.checker.errorReporter.simpleError(moduleDecl, "Conflicting symbol name for module \'" + modName + "\'");\n            }\n            typeSymbol = <TypeSymbol>symbol;\n\n            // initialize new private scope for the type\n            var publicEnclosedTypes = typeSymbol.type.getAllEnclosedTypes().publicMembers;\n            var publicEnclosedTypesTable = (publicEnclosedTypes == null) ? new StringHashTable() : publicEnclosedTypes;\n            var enclosedTypes = new ScopedMembers(new DualStringHashTable(publicEnclosedTypesTable, new StringHashTable()));\n\n            var publicEnclosedAmbientTypes = typeSymbol.type.getAllAmbientEnclosedTypes().publicMembers;\n            var publicAmbientEnclosedTypesTable = (publicEnclosedAmbientTypes == null) ? new StringHashTable() : publicEnclosedAmbientTypes;\n            var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(publicAmbientEnclosedTypesTable, new StringHashTable()));\n\n            var publicMembers = typeSymbol.type.members.publicMembers;\n            var publicMembersTable = (publicMembers == null) ? new StringHashTable() : publicMembers;\n            var members = new ScopedMembers(new DualStringHashTable(publicMembersTable, new StringHashTable()));\n\n            var publicAmbientMembers = typeSymbol.type.ambientMembers.publicMembers;\n            var publicAmbientMembersTable = (publicAmbientMembers == null) ? new StringHashTable() : publicAmbientMembers;\n            var ambientMembers = new ScopedMembers(new DualStringHashTable(publicAmbientMembersTable, new StringHashTable()));\n\n            modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n            if (isEnum) {\n                modType.typeFlags |= TypeFlags.IsEnum;\n            }\n            modType.members = members;\n            modType.ambientMembers = ambientMembers;\n            modType.setHasImplementation();\n            modType.symbol = typeSymbol;\n\n            typeSymbol.addLocation(moduleDecl.minChar);\n            typeSymbol.expansions.push(modType);\n            typeSymbol.expansionsDeclAST.push(moduleDecl);\n\n        }\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        // REVIEW: If multiple disparate module decls for the same module don\'t agree\n        // in export privileges, how should we handle it?\n        if (isExported) {\n            typeSymbol.flags |= SymbolFlags.Exported;\n        }\n        if ((context.scopeChain.moduleDecl) ||\n            (context.scopeChain.container == context.checker.gloMod)) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        moduleDecl.mod = modType;\n        pushTypeCollectionScope(typeSymbol, modType.members,\n                                modType.ambientMembers,\n                                modType.enclosedTypes,\n                                modType.ambientEnclosedTypes,\n                                context, null, null, moduleDecl);\n\n        return true;\n    }\n\n    export function preCollectClassTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var classDecl = <ClassDeclaration>ast;\n\n        var classType: Type;\n        var instanceType: Type;\n        var typeSymbol: TypeSymbol = null;\n        var className = (<Identifier>classDecl.name).text;\n        var alreadyInScope = false;\n        var isAmbient = hasFlag(classDecl.varFlags, VarFlags.Ambient);\n        var isExported = hasFlag(classDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var containerMod = <TypeSymbol>scopeChain.container;\n        var foundValSymbol = false;\n\n        typeSymbol = <TypeSymbol>scopeChain.scope.findLocal(className, false, true);\n        \n        // check the value space, since an override may have been declared with the type\'s name\n        // REVIEW-CLASSES\n        if (!typeSymbol) {\n            var valTypeSymbol = scopeChain.scope.findLocal(className, false, false);\n            \n            if (valTypeSymbol &&\n                valTypeSymbol.isType() &&\n                valTypeSymbol.declAST &&\n                valTypeSymbol.declAST.nodeType == NodeType.FuncDecl &&\n                (<FuncDecl>valTypeSymbol.declAST).isSignature()) {\n                \n                typeSymbol = <TypeSymbol>valTypeSymbol;\n                foundValSymbol = true;\n                \n                if (isExported) {\n                    typeSymbol.flags |= SymbolFlags.Exported;\n                }\n            \n                if (isAmbient) {\n                    typeSymbol.flags |= SymbolFlags.Ambient;\n                }                \n                \n                // the class was never entered into type space, so add it\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, true, isAmbient);                \n            }\n        }\n        \n        if (typeSymbol && !foundValSymbol && (typeSymbol.declAST != classDecl)) {\n            typeSymbol = null;\n        }\n\n        if (typeSymbol == null) {\n            var valueSymbol = scopeChain.scope.findLocal(className, false, false);\n            classType = new Type();\n            classType.setHasImplementation();\n            instanceType = new Type();\n            instanceType.setHasImplementation();\n            classType.instanceType = instanceType;\n            classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            addPrototypeField(classType, classDecl, context);\n            instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            instanceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            typeSymbol = new TypeSymbol(className, classDecl.name.minChar, className.length,\n                                        context.checker.locationInfo.unitIndex, classType);\n            typeSymbol.declAST = classDecl;\n            typeSymbol.instanceType = instanceType;\n            classType.symbol = typeSymbol;\n            instanceType.symbol = typeSymbol;\n\n            if (context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n                typeSymbol.flags |= SymbolFlags.ModuleMember;\n            }\n\n            if (isExported) {\n                typeSymbol.flags |= SymbolFlags.Exported;\n            }\n            \n            if (isAmbient) {\n                typeSymbol.flags |= SymbolFlags.Ambient;\n            }\n\n            ast.type = classType;\n\n            // class in both name spaces (type for instance type; constructor representative in value space)\n            context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n\n            if (valueSymbol == null) {\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            }\n        }\n        else {                            \n            classType = typeSymbol.type;\n            \n            // If the instance type is null, a call overload was likely declared before the class constructor\n            if (classType.instanceType == null) {\n                classType.instanceType = new Type();\n                classType.instanceType.setHasImplementation();\n                classType.instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.instanceType.symbol = classType.symbol;\n                classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            }\n            \n            instanceType = classType.instanceType;\n            ast.type = classType;\n        }\n        \n        // if the class has no declared constructor, either create a default signature or adapt \n        // it\'s base class\'s signature group\n        if (!classDecl.constructorDecl) {\n\n            if (typeSymbol && typeSymbol.declAST && typeSymbol.declAST.type && typeSymbol.declAST.type.call && !(<FuncDecl>typeSymbol.declAST).isOverload) {\n                context.checker.errorReporter.duplicateIdentifier(typeSymbol.declAST, typeSymbol.name);\n            }\n\n            createNewConstructGroupForType(classDecl.type);\n        }\n\n        classType.typeFlags |= TypeFlags.IsClass;\n        instanceType.typeFlags |= TypeFlags.IsClass;\n\n        getBases(instanceType, classDecl);\n        pushTypeCollectionScope(typeSymbol, instanceType.members, instanceType.ambientMembers, null, null,\n                                context, instanceType, classType, null);\n        return true;\n    }\n\n    export function preCollectInterfaceTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var interfaceSymbol: TypeSymbol = null;\n        var interfaceType: Type = null;\n        var isExported = hasFlag(interfaceDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var alreadyInScope = true;\n\n        alreadyInScope = false;\n        var interfaceName = (<Identifier>interfaceDecl.name).text;\n        interfaceSymbol = <TypeSymbol>scopeChain.scope.findLocal(interfaceName, false, true);\n        if (interfaceSymbol == null) {\n            interfaceType = new Type();\n            interfaceSymbol = new TypeSymbol(interfaceName,\n                                        interfaceDecl.name.minChar,\n                                        interfaceName.length,\n                                        context.checker.locationInfo.unitIndex,\n                                        interfaceType);\n            interfaceType.symbol = interfaceSymbol;\n            // REVIEW: Shouldn\'t allocate another table for interface privates\n            interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceSymbol.declAST = interfaceDecl;\n            interfaceSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n        else {\n            alreadyInScope = true;\n            interfaceType = interfaceSymbol.type;\n        }\n\n        if (!interfaceType) {\n            interfaceType = context.checker.anyType;\n        }\n\n        ast.type = interfaceType;\n        getBases(interfaceType, interfaceDecl);\n\n        if (isExported) {\n            interfaceSymbol.flags |= SymbolFlags.Exported;\n        }\n\n        if (context.scopeChain.moduleDecl) {\n            interfaceSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        if (!alreadyInScope) {\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            interfaceSymbol, context.checker.errorReporter, isGlobal || isExported, true, false); // REVIEW: Technically, interfaces should be ambient\n        }\n        pushTypeCollectionScope(interfaceSymbol, interfaceType.members, interfaceType.ambientMembers, null, null,\n                                context, interfaceType, null, null);\n        return true;\n    }\n\n    export function preCollectArgDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var argDecl = <ArgDecl>ast;\n        if (hasFlag(argDecl.varFlags, VarFlags.Public | VarFlags.Private)) {\n            var field = new ValueLocation();\n            var isPrivate = hasFlag(argDecl.varFlags, VarFlags.Private);\n            var fieldSymbol =\n                new FieldSymbol(argDecl.id.text, argDecl.id.minChar,\n                                context.checker.locationInfo.unitIndex,\n                                !hasFlag(argDecl.varFlags, VarFlags.Readonly),\n                                field);\n            fieldSymbol.transferVarFlags(argDecl.varFlags);\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            argDecl.parameterPropertySym = fieldSymbol;\n\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            fieldSymbol, context.checker.errorReporter, !isPrivate, false, false);\n\n            field.typeLink = getTypeLink(argDecl.typeExpr, context.checker, argDecl.init == null);\n            argDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectVarDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var varDecl = <VarDecl>ast;\n        var isAmbient = hasFlag(varDecl.varFlags, VarFlags.Ambient);\n        var isExported = hasFlag(varDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var isProperty = hasFlag(varDecl.varFlags, VarFlags.Property);\n        var isStatic = hasFlag(varDecl.varFlags, VarFlags.Static);\n        var isPrivate = hasFlag(varDecl.varFlags, VarFlags.Private);\n        var isOptional = hasFlag(varDecl.id.flags, ASTFlags.OptionalName);\n\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        if (isProperty ||\n            isExported ||\n            (context.scopeChain.container == context.checker.gloMod) ||\n            context.scopeChain.moduleDecl) {\n            if (isAmbient) {\n                var existingSym =\n                    <FieldSymbol>scopeChain.scope.findLocal(varDecl.id.text, false, false);\n                if (existingSym) {\n                    varDecl.sym = existingSym;\n                    return false;\n                }\n            }\n\n            // Defensive error detection...\n            if (varDecl.id == null) {\n                context.checker.errorReporter.simpleError(varDecl, "Expected variable identifier at this location");\n                return false;\n            }\n\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.id.minChar,\n                                context.checker.locationInfo.unitIndex,\n                                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.varFlags);\n            if (isOptional) {\n                fieldSymbol.flags |= SymbolFlags.Optional;\n            }\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            if ((context.scopeChain.moduleDecl) ||\n                (context.scopeChain.container == context.checker.gloMod)) {\n                fieldSymbol.flags |= SymbolFlags.ModuleMember;\n                fieldSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n\n            // if it\'s static, enter it into the class\'s member list directly\n            if (hasFlag(varDecl.varFlags, VarFlags.Property) && isStatic && context.scopeChain.classType) {\n                if (!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text, fieldSymbol)) {\n                    context.checker.errorReporter.duplicateIdentifier(ast, fieldSymbol.name);\n                }\n                fieldSymbol.container = context.scopeChain.classType.symbol;\n            }\n            else {\n                context.scopeChain.scope.enter(context.scopeChain.container,\n                                                ast,\n                                                fieldSymbol,\n                                                context.checker.errorReporter,\n                                                !isPrivate && (isProperty || isExported || isGlobal || isStatic),\n                                                false,\n                                                isAmbient);\n            }\n\n            if (hasFlag(varDecl.varFlags, VarFlags.Exported)) {\n                fieldSymbol.flags |= SymbolFlags.Exported;\n            }\n\n            field.typeLink = getTypeLink(varDecl.typeExpr, context.checker,\n                                        varDecl.init == null);\n            varDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectFuncDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        // REVIEW: This will have to change when we move to "export"\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n\n        var funcDecl = <FuncDecl>ast;\n        var fgSym: TypeSymbol = null;\n        var nameText = funcDecl.getNameText();\n        var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported);\n        var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n        var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n        var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n        var containerSym:TypeSymbol = <TypeSymbol> (((funcDecl.isMethod() && isStatic) || funcDecl.isAccessor()) && context.scopeChain.classType ? context.scopeChain.classType.symbol : context.scopeChain.container);\n        var containerScope: SymbolScope = context.scopeChain.scope;\n        var isGlobal = containerSym == context.checker.gloMod;\n        var isOptional = funcDecl.name && hasFlag(funcDecl.name.flags, ASTFlags.OptionalName);\n        var go = false;\n        var foundSymbol = false; \n\n        // If this is a class constructor, the "container" is actually the class declaration\n        if (isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n            containerSym = <TypeSymbol>containerSym.container;\n            containerScope = scopeChain.previous.scope;\n        }\n\n        funcDecl.unitIndex = context.checker.locationInfo.unitIndex;\n        \n        // If the parent is the constructor, and this isn\'t an instance method, skip it.\n        // That way, we\'ll set the type during scope assignment, and can be sure that the\n        // function will be placed in the constructor-local scope\n        if (!funcDecl.isConstructor &&\n            containerSym &&\n            containerSym.declAST &&\n            containerSym.declAST.nodeType == NodeType.FuncDecl &&\n            (<FuncDecl>containerSym.declAST).isConstructor &&\n            !funcDecl.isMethod()) {\n            return go;\n        }        \n\n        // Interfaces and overloads\n        if (hasFlag(funcDecl.fncFlags, FncFlags.Signature)) {\n            var instType = context.scopeChain.thisType;                       \n\n            // If the function is static, search in the class type\'s\n            if (nameText && nameText != "__missing") {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    \n                    // If we could not find the function symbol in the value context, look\n                    // in the type context.\n                    // This would be the case, for example, if a class constructor override\n                    // were declared before a call override for a given class\n                    if (fgSym == null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, true);\n                    }\n                }\n                \n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    // We\'ll combine ambient and non-ambient funcdecls during typecheck (for contextual typing).,\n                    // So, if they don\'t agree, don\'t use the symbol we\'ve found                    \n                    if (!funcDecl.isSignature() && (hasFlag(funcDecl.fncFlags, FncFlags.Ambient) != hasFlag(fgSym.flags, SymbolFlags.Ambient))) {\n                       fgSym = null;\n                    }\n                }                \n            }\n            \n            // a function with this symbol has not yet been declared in this scope\n            // REVIEW: In the code below, we need to ensure that only function overloads are considered\n            //  (E.g., if a vardecl has the same id as a function or class, we may use the vardecl symbol\n            //  as the overload.)  Defensively, however, the vardecl won\'t have a type yet, so it should\n            //  suffice to just check for a null type when considering the overload symbol in\n            //  createFunctionSignature\n            if (fgSym == null) {\n                if (!(funcDecl.isSpecialFn())) {                    \n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, null, !foundSymbol).declAST.type.symbol;\n                }\n                else {\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, containerSym, false).declAST.type.symbol;                                                                         \n                }\n                \n                // set the symbol\'s declAST, which will point back to the first declaration (symbol or otherwise)\n                // related to this symbol\n                if (fgSym.declAST == null || !funcDecl.isSpecialFn()) {\n                    fgSym.declAST = ast;\n                }\n            }\n            else { // there exists a symbol with this name\n                \n                if ((fgSym.kind() == SymbolKind.Type)) {\n\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, false).declAST.type.symbol;\n                }\n                else {\n                    context.checker.errorReporter.simpleError(funcDecl, "Function or method \'" + funcDecl.name.actualText + "\' already declared as a property");\n                }\n            }\n         \n            if (funcDecl.isSpecialFn() && !isStatic) {\n                funcDecl.type = instType ? instType : fgSym.type; \n            }\n            else {\n                funcDecl.type = fgSym.type;\n            }            \n        }\n        else {\n            // declarations\n            \n            if (nameText) {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // in the constructor case, we want to check the parent scope for overloads\n                    if (funcDecl.isConstructor && context.scopeChain.previous) {\n                        fgSym = <TypeSymbol>context.scopeChain.previous.scope.findLocal(nameText, false, false);\n                    }\n                    \n                    if (fgSym == null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    }\n                }\n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    if (!isConstructor && fgSym.declAST.nodeType == NodeType.FuncDecl && !(<FuncDecl>fgSym.declAST).isAccessor() && !(<FuncDecl>fgSym.declAST).isSignature()) {\n                        fgSym = null;\n                        foundSymbol = false;\n                    }\n                }                \n            }\n\n            // REVIEW: Move this check into the typecheck phase?  It\'s only being run over properties...\n            if (fgSym &&\n                !fgSym.isAccessor() &&\n                fgSym.type &&\n                fgSym.type.construct &&\n                fgSym.type.construct.signatures != [] &&\n                (fgSym.type.construct.signatures[0].declAST == null ||\n                    !hasFlag(fgSym.type.construct.signatures[0].declAST.fncFlags, FncFlags.Ambient)) &&\n                !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, "Functions may not have class overloads");\n            }\n\n            if (fgSym && !(fgSym.kind() == SymbolKind.Type) && funcDecl.isMethod() && !funcDecl.isAccessor() && !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, "Function or method \'" + funcDecl.name.actualText + "\' already declared as a property");\n                fgSym.type = context.checker.anyType;\n            }\n            var sig = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, !foundSymbol);\n\n            // it\'s a getter or setter function                                   \n            if (((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || (fgSym && fgSym.isAccessor())) {\n                funcDecl.accessorSymbol = context.checker.createAccessorSymbol(funcDecl, fgSym, containerSym.type, (funcDecl.isMethod() && isStatic), true, containerScope, containerSym);\n            }\n\n            funcDecl.type.symbol.declAST = ast;\n            if (funcDecl.isConstructor) { // REVIEW: Remove when classes completely replace oldclass\n                go = true;\n            };\n        }\n        if (isExported) {\n            if (funcDecl.type.call) {\n                funcDecl.type.symbol.flags |= SymbolFlags.Exported;\n            }\n            \n            // Accessors are set to \'exported\' above\n            if (fgSym && !fgSym.isAccessor() && fgSym.kind() == SymbolKind.Type && fgSym.type.call) {\n                fgSym.flags |= SymbolFlags.Exported;\n            }\n        }\n        if (context.scopeChain.moduleDecl && !funcDecl.isSpecialFn()) {\n            funcDecl.type.symbol.flags |= SymbolFlags.ModuleMember;\n            funcDecl.type.symbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        if (fgSym && isOptional) {\n            fgSym.flags |= SymbolFlags.Optional;\n        }\n\n        return go;\n    }\n\n    export function preCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n        var go = false;\n        var scopeChain = context.scopeChain;\n\n        if (ast.nodeType == NodeType.Script) {\n            var script: Script = <Script>ast;\n            context.script = script;\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.List) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.ImportDeclaration) {\n            go = preCollectImportTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.With) {\n            go = false;\n        }\n        else if (ast.nodeType == NodeType.ModuleDeclaration) {\n            go = preCollectModuleTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            go = preCollectClassTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.Block) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            go = preCollectInterfaceTypes(ast, parent, context);\n        }\n        // This will be a constructor arg because this pass only traverses\n        // constructor arg lists\n        else if (ast.nodeType == NodeType.ArgDecl) {\n            go = preCollectArgDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.VarDecl) {\n            go = preCollectVarDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.FuncDecl) {\n            go = preCollectFuncDeclTypes(ast, parent, context);\n        }\n        else {\n            if (ast.isStatementOrExpression() && context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n\n        if (ast.nodeType == NodeType.ModuleDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        return ast;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ScopeChain {\n        public thisType: Type;\n        public classType: Type;\n        public fnc: FuncDecl;\n        public moduleDecl: ModuleDeclaration;\n\n        constructor (public container: Symbol, public previous: ScopeChain,\n                     public scope: SymbolScope) { }\n    }\n\n    export class BBUseDefInfo {\n        public defsBySymbol = new bool[];\n        public gen: BitVector;\n        public kill: BitVector;\n        public top: BitVector;\n        // use lists by symbol \n        public useIndexBySymbol = new number[][];\n\n        constructor (public bb: BasicBlock) { }\n\n        public updateTop() {\n            var temp = new BitVector(this.top.bitCount);\n            for (var i = 0, succLen = this.bb.successors.length; i < succLen; i++) {\n                var succ = this.bb.successors[i];\n                if (succ.useDef) {\n                    temp.union(succ.useDef.top);\n                }\n            }\n            temp.difference(this.kill);\n            temp.union(this.gen);\n            var changed = temp.notEq(this.top);\n            this.top = temp;\n            return changed;\n        }\n\n\n        public initialize(useDefContext: UseDefContext) {\n            var defSym = (sym: Symbol, context: UseDefContext) => {\n                if (context.isLocalSym(sym)) {\n                    var index = context.getSymbolIndex(sym);\n                    // clear pending uses\n                    this.useIndexBySymbol[index] = new number[];\n                    this.defsBySymbol[index] = true;\n                }\n            }\n\n            var useSym = (sym: Symbol, context: UseDefContext, ast: AST) => {\n                if (context.isLocalSym(sym)) {\n                    var symIndex = context.getSymbolIndex(sym);\n                    if (this.useIndexBySymbol[symIndex] == undefined) {\n                        this.useIndexBySymbol[symIndex] = new number[];\n                    }\n                    var symUses = this.useIndexBySymbol[symIndex];\n                    var astIndex = context.getUseIndex(ast);\n                    context.addUse(symIndex, astIndex);\n                    symUses.push(astIndex);\n                }\n            }\n\n            function initUseDefPre(cur: AST, parent: AST, walker: IAstWalker) {\n                var context: UseDefContext = walker.state;\n                if (cur == null) {\n                    cur = null;\n                }\n                if (cur.nodeType == NodeType.VarDecl) {\n                    var varDecl = <BoundDecl>cur;\n                    if (varDecl.init || hasFlag(varDecl.varFlags, VarFlags.AutoInit)) {\n                        defSym(varDecl.sym, context);\n                    }\n                }\n                else if (cur.nodeType == NodeType.Name) {\n                    // use\n                    if (parent) {\n                        if (parent.nodeType == NodeType.Asg) {\n                            var asg = <BinaryExpression>parent;\n                            if (asg.operand1 == cur) {\n                                return cur;\n                            }\n                        }\n                        else if (parent.nodeType == NodeType.VarDecl) {\n                            var parentDecl = <BoundDecl>parent;\n                            if (parentDecl.id == cur) {\n                                return cur;\n                            }\n                        }\n                    }\n                    var id = <Identifier>cur;\n                    useSym(id.sym, context, cur);\n                }\n                else if ((cur.nodeType >= NodeType.Asg) && (cur.nodeType <= NodeType.LastAsg)) {\n                    // def\n                    var asg = <BinaryExpression>cur;\n                    if (asg.operand1 && (asg.operand1.nodeType == NodeType.Name)) {\n                        var id = <Identifier>asg.operand1;\n                        defSym(id.sym, context);\n                    }\n                }\n                else if (cur.nodeType == NodeType.FuncDecl) {\n                    walker.options.goChildren = false;\n                }\n\n                return cur;\n            }\n\n            var options = new AstWalkOptions();\n            // traverse ASTs in reverse order of execution (to match uses with preceding defs)\n            options.reverseSiblings = true;\n\n            getAstWalkerFactory().walk(this.bb.content, initUseDefPre, null, options, useDefContext);\n        }\n\n        public initializeGen(useDefContext: UseDefContext) {\n            var symbolLen = this.useIndexBySymbol.length;\n            var bitCount = useDefContext.uses.length;\n            this.gen = new BitVector(bitCount);\n            for (var s = 0; s < symbolLen; s++) {\n                var symUses = this.useIndexBySymbol[s];\n                if ((symUses != undefined) && (symUses.length > 0)) {\n                    for (var u = 0, uLen = symUses.length; u < uLen; u++) {\n                        this.gen.set(symUses[u], true);\n                    }\n                }\n            }\n            this.top = this.gen;\n        }\n\n        public initializeKill(useDefContext: UseDefContext) {\n            this.kill = new BitVector(this.gen.bitCount);\n            for (var s = 0, symbolLen = this.defsBySymbol.length; s < symbolLen; s++) {\n                if (this.defsBySymbol[s]) {\n                    var globalSymUses = useDefContext.useIndexBySymbol[s];\n                    if (globalSymUses) {\n                        for (var u = 0, useLen = globalSymUses.length; u < useLen; u++) {\n                            this.kill.set(globalSymUses[u], true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    export class UseDefContext {\n        // global use lists by symbol\n        public useIndexBySymbol = new number[][];\n        // global list of uses (flat)\n        public uses = new AST[];\n        public symbols = new VariableSymbol[];\n        public symbolMap = new StringHashTable();\n        public symbolCount = 0;\n        public func: Symbol;\n\n        constructor () {\n        }\n\n        public getSymbolIndex(sym: Symbol) {\n            var name = sym.name;\n            var index = <number>(this.symbolMap.lookup(name));\n            if (index == null) {\n                index = this.symbolCount++;\n                this.symbols[index] = <VariableSymbol>sym;\n                this.symbolMap.add(name, index);\n            }\n            return index;\n        }\n\n        public addUse(symIndex: number, astIndex: number) {\n            var useBySym = this.useIndexBySymbol[symIndex];\n            if (useBySym == undefined) {\n                useBySym = new number[];\n                this.useIndexBySymbol[symIndex] = useBySym;\n            }\n            useBySym[useBySym.length] = astIndex;\n        }\n\n        public getUseIndex(ast: AST) {\n            this.uses[this.uses.length] = ast;\n            return this.uses.length - 1;\n        }\n\n        public isLocalSym(sym: Symbol) { return (sym && (sym.container == this.func) && (sym.kind() == SymbolKind.Variable)); }\n\n        public killSymbol(sym: VariableSymbol, bbUses: BitVector) {\n            var index: number = this.symbolMap.lookup(sym.name);\n            var usesOfSym = this.useIndexBySymbol[index];\n            for (var k = 0, len = usesOfSym.length; k < len; k++) {\n                bbUses.set(usesOfSym[k], true);\n            }\n        }\n    }\n\n    export class BitVector {\n        static packBits = 30;\n        public firstBits = 0;\n        public restOfBits: number[] = null;\n\n        constructor (public bitCount: number) {\n            if (this.bitCount > BitVector.packBits) {\n                this.restOfBits = new number[];\n                var len = Math.floor(this.bitCount / BitVector.packBits);\n                for (var i = 0; i < len; i++) {\n                    this.restOfBits[i] = 0;\n                }\n            }\n        }\n\n        public set(bitIndex: number, value: bool) {\n            if (bitIndex < BitVector.packBits) {\n                if (value) {\n                    this.firstBits |= (1 << bitIndex);\n                }\n                else {\n                    this.firstBits &= (~(1 << bitIndex));\n                }\n            }\n            else {\n                var offset = Math.floor(bitIndex / BitVector.packBits) - 1;\n                var localIndex = bitIndex % BitVector.packBits;\n                if (value) {\n                    this.restOfBits[offset] |= (1 << localIndex);\n                }\n                else {\n                    this.restOfBits[offset] &= (~(1 << localIndex));\n                }\n            }\n        }\n\n        public map(fn: (index: number) =>any) {\n            var k: number;\n            for (k = 0; k < BitVector.packBits; k++) {\n                if (k == this.bitCount) {\n                    return;\n                }\n                if (((1 << k) & this.firstBits) != 0) {\n                    fn(k);\n                }\n            }\n            if (this.restOfBits) {\n                var len: number;\n                var cumu = BitVector.packBits;\n                for (k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    for (var j = 0; j < BitVector.packBits; j++) {\n                        if (((1 << j) & myBits) != 0) {\n                            fn(cumu);\n                        }\n                        cumu++;\n                        if (cumu == this.bitCount) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public union(b: BitVector) {\n            this.firstBits |= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits | bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public intersection(b: BitVector) {\n            this.firstBits &= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits & bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public notEq(b: BitVector) {\n            if (this.firstBits != b.firstBits) {\n                return true;\n            }\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    if (myBits != bBits) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public difference(b: BitVector) {\n            var oldFirstBits = this.firstBits;\n            this.firstBits &= (~b.firstBits);\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] &= (~bBits);\n                }\n            }\n        }\n    }\n\n    export class BasicBlock {\n        // blocks that branch to the block after this one\n        public predecessors = new BasicBlock[];\n        public index = -1;\n        public markValue = 0;\n        public marked(markBase: number) { return this.markValue > markBase; }\n        public mark() {\n            this.markValue++;\n        }\n        public successors = new BasicBlock[];\n        public useDef: BBUseDefInfo = null;\n        public content = new ASTList();\n        public addSuccessor(successor: BasicBlock): void {\n            this.successors[this.successors.length] = successor;\n            successor.predecessors[successor.predecessors.length] = this;\n        }\n    }\n\n    export interface ITargetInfo {\n        stmt: AST;\n        continueBB: BasicBlock;\n        breakBB: BasicBlock;\n    }\n\n    export class ControlFlowContext {\n        public entry = null;\n        // first unreachable ast for each unreachable code segment\n        public unreachable: AST[] = null;\n        public noContinuation = false;\n        // statements enclosing the current statement\n        public statementStack = new ITargetInfo[];\n        public currentSwitch = new BasicBlock[];\n        public walker: IAstWalker;\n\n        constructor (public current: BasicBlock,\n                     public exit: BasicBlock) {\n            this.entry = this.current;\n        }\n\n        public walk(ast: AST, parent: AST) {\n            return this.walker.walk(ast, parent);\n        }\n\n        public pushSwitch(bb: BasicBlock) {\n            this.currentSwitch.push(bb);\n        }\n\n        public popSwitch() {\n            return this.currentSwitch.pop();\n        }\n\n        public reportUnreachable(er: ErrorReporter) {\n            if (this.unreachable && (this.unreachable.length > 0)) {\n                var len = this.unreachable.length;\n                for (var i = 0; i < len; i++) {\n                    var unreachableAST = this.unreachable[i];\n                    if (unreachableAST.nodeType != NodeType.EndCode) {\n                        er.simpleError(unreachableAST, "unreachable code");\n                    }\n                }\n            }\n        }\n\n        private printAST(ast: AST, outfile: ITextWriter) {\n            var printContext = new PrintContext(outfile, null);\n\n            printContext.increaseIndent();\n            //ast.walk(prePrintAST, postPrintAST, null, printContext);\n            getAstWalkerFactory().walk(ast, prePrintAST, postPrintAST, null, printContext);\n\n            printContext.decreaseIndent();\n        }\n\n        private printBlockContent(bb: BasicBlock, outfile: ITextWriter) {\n            var content = bb.content;\n            for (var i = 0, len = content.members.length; i < len; i++) {\n                var ast = content.members[i];\n                this.printAST(ast, outfile);\n            }\n        }\n\n        public markBase = 0;\n\n        public bfs(nodeFunc: (bb: BasicBlock) =>void , edgeFunc: (node1: BasicBlock, node2: BasicBlock) =>void ,\n            preEdges: () =>void , postEdges: () =>void ) {\n            var markValue = this.markBase++;\n            var q = new BasicBlock[];\n            q[q.length] = this.entry;\n\n            while (q.length > 0) {\n                var bb = q.pop();\n                if (!(bb.marked(markValue))) {\n                    bb.mark();\n                    if (nodeFunc) {\n                        nodeFunc(bb);\n                    }\n                    var succLen = bb.successors.length;\n                    if (succLen > 0) {\n                        if (preEdges) {\n                            preEdges();\n                        }\n                        for (var j = succLen - 1; j >= 0; j--) {\n                            var successor = bb.successors[j];\n                            if (!(successor.marked(this.markBase))) {\n                                if (edgeFunc) {\n                                    edgeFunc(bb, successor);\n                                }\n                                q[q.length] = successor;\n                            }\n                        }\n                        if (postEdges) {\n                            postEdges();\n                        }\n                    }\n                }\n            }\n        }\n\n        public linearBBs = new BasicBlock[];\n\n        public useDef(er: ErrorReporter, funcSym: Symbol) {\n            var useDefContext = new UseDefContext();\n            useDefContext.func = funcSym;\n            var useDefInit = (bb: BasicBlock) => {\n                bb.useDef = new BBUseDefInfo(bb);\n                bb.useDef.initialize(useDefContext);\n                this.linearBBs[this.linearBBs.length] = bb;\n            }\n            this.bfs(useDefInit, null, null, null);\n            var i: number, bbLen: number;\n            for (i = 0, bbLen = this.linearBBs.length; i < bbLen; i++) {\n                this.linearBBs[i].useDef.initializeGen(useDefContext);\n                this.linearBBs[i].useDef.initializeKill(useDefContext);\n            }\n            var changed = true;\n\n            while (changed) {\n                changed = false;\n                for (i = 0; i < bbLen; i++) {\n                    changed = this.linearBBs[i].useDef.updateTop() || changed;\n                }\n            }\n\n            var top = this.entry.useDef.top;\n            top.map((index) => {\n                var ast = <Identifier>useDefContext.uses[<number>index];\n                er.simpleError(ast, "use of variable \'" + ast.actualText + "\' that is not definitely assigned");\n            });\n        }\n\n        public print(outfile: ITextWriter) {\n            var index = 0;\n            var node = (bb: BasicBlock) => {\n                if (bb.index < 0) {\n                    bb.index = index++;\n                }\n                if (bb == this.exit) {\n                    outfile.WriteLine("Exit block with index " + bb.index);\n                }\n                else {\n                    outfile.WriteLine("Basic block with index " + bb.index);\n                    this.printBlockContent(bb, outfile);\n                }\n            }\n\n            function preEdges() {\n                outfile.Write("  Branches to ");\n            }\n\n            function postEdges() {\n                outfile.WriteLine("");\n            }\n\n            function edge(node1: BasicBlock, node2: BasicBlock) {\n                if (node2.index < 0) {\n                    node2.index = index++;\n                }\n                outfile.Write(node2.index + " ");\n            }\n\n            this.bfs(node, edge, preEdges, postEdges);\n            if (this.unreachable != null) {\n                for (var i = 0, len = this.unreachable.length; i < len; i++) {\n                    outfile.WriteLine("Unreachable basic block ...");\n                    this.printAST(this.unreachable[i], outfile);\n                }\n            }\n        }\n\n        public pushStatement(stmt: Statement, continueBB: BasicBlock, breakBB: BasicBlock) {\n            this.statementStack.push({ stmt: stmt, continueBB: continueBB, breakBB: breakBB });\n        }\n\n        public popStatement() { return this.statementStack.pop(); }\n\n        public returnStmt() {\n            // TODO: make successor finally block if return stmt inside of try/finally \n            this.current.addSuccessor(this.exit);\n            this.setUnreachable();\n        }\n\n        public setUnreachable() {\n            this.current = null;\n            this.noContinuation = true;\n        }\n\n        public addUnreachable(ast: AST) {\n            if (this.unreachable === null) {\n                this.unreachable = new AST[];\n            }\n            this.unreachable[this.unreachable.length] = ast;\n        }\n\n        public unconditionalBranch(target: AST, isContinue: bool) {\n            var targetBB = null;\n            for (var i = 0, len = this.statementStack.length; i < len; i++) {\n                var targetInfo = this.statementStack[i];\n                if (targetInfo.stmt == target) {\n                    if (isContinue) {\n                        targetBB = targetInfo.continueBB;\n                    }\n                    else {\n                        targetBB = targetInfo.breakBB;\n                    }\n                    break;\n                }\n            }\n            if (targetBB) {\n                this.current.addSuccessor(targetBB);\n            }\n            this.setUnreachable();\n        }\n\n        public addContent(ast: AST): void {\n            if (this.current) {\n                this.current.content.append(ast);\n            }\n        }\n    }\n\n    export interface IResolutionData {\n        actuals: Type[];\n        exactCandidates: Signature[];\n        conversionCandidates: Signature[];\n        id: number;\n    }\n\n    export class ResolutionDataCache {\n        public cacheSize = 16;\n        public rdCache: IResolutionData[] = [];\n        public nextUp: number = 0;\n\n        constructor () {\n            for (var i = 0; i < this.cacheSize; i++) {\n                this.rdCache[i] = {\n                    actuals: new Type[],\n                    exactCandidates: new Signature[],\n                    conversionCandidates: new Signature[],\n                    id: i\n                };\n            }\n        }\n\n        public getResolutionData(): IResolutionData {\n            var rd: IResolutionData = null;\n\n            if (this.nextUp < this.cacheSize) {\n                rd = this.rdCache[this.nextUp];\n            }\n\n            if (rd == null) {\n                this.cacheSize++;\n                rd = {\n                    actuals: new Type[],\n                    exactCandidates: new Signature[],\n                    conversionCandidates: new Signature[],\n                    id: this.cacheSize\n                };\n                this.rdCache[this.cacheSize] = rd;\n            }\n\n            // cache operates as a stack - RD is always served up in-order\n            this.nextUp++;\n\n            return rd;\n        }\n\n        public returnResolutionData(rd: IResolutionData) {\n            // Pop to save on array allocations, which are a bottleneck\n            // REVIEW: On some VMs, Array.pop doesn\'t always pop the last value in the array\n            rd.actuals.length = 0;\n            rd.exactCandidates.length = 0;\n            rd.conversionCandidates.length = 0;\n\n            this.nextUp = rd.id;\n        }\n    }\n\n    export class TypeFlow {\n        public scope: SymbolScope;\n        public globalScope: SymbolScope;\n\n        public thisType: Type;\n        public thisFnc: FuncDecl = null;\n        public thisClassNode: TypeDeclaration = null;\n        public enclosingFncIsMethod = false;\n\n        // REVIEW: Prune in favor of typechecker fields\n        public doubleType: Type;\n        public booleanType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public regexType: Type;\n        public nullType: Type;\n        public voidType: Type;\n        public arrayAnyType: Type;\n\n        public arrayInterfaceType: Type = null;\n        public stringInterfaceType: Type = null;\n        public objectInterfaceType: Type = null;\n        public functionInterfaceType: Type = null;\n        public numberInterfaceType: Type = null;\n        public booleanInterfaceType: Type = null;\n        public iargumentsInterfaceType: Type = null;\n\n        public currentScript: Script = null;\n\n        public inImportTypeCheck = false;\n        public inTypeRefTypeCheck = false;\n        public inArrayElementTypeCheck = false;\n        public resolutionDataCache = new ResolutionDataCache();\n        public nestingLevel = 0;\n        public inSuperCall = false;\n\n        constructor (public logger: ILogger, public initScope: SymbolScope, public parser: Parser,\n                   public checker: TypeChecker) {\n            this.checker.typeFlow = this;\n            this.scope = this.initScope;\n            this.globalScope = this.initScope;\n            this.doubleType = this.checker.numberType;\n            this.booleanType = this.checker.booleanType;\n            this.stringType = this.checker.stringType;\n            this.anyType = this.checker.anyType;\n            this.regexType = this.anyType;\n            this.nullType = this.checker.nullType;\n            this.voidType = this.checker.voidType;\n            this.arrayAnyType = this.checker.makeArrayType(this.anyType);\n        }\n\n        public initLibs() {\n            var arraySym = this.globalScope.find("Array", false, true);\n            if (arraySym && (arraySym.kind() == SymbolKind.Type)) {\n                this.arrayInterfaceType = (<TypeSymbol>arraySym).type;\n            }\n            var stringSym = this.globalScope.find("String", false, true);\n            if (stringSym && (stringSym.kind() == SymbolKind.Type)) {\n                this.stringInterfaceType = (<TypeSymbol>stringSym).type;\n            }\n            var objectSym = this.globalScope.find("Object", false, true);\n            if (objectSym && (objectSym.kind() == SymbolKind.Type)) {\n                this.objectInterfaceType = (<TypeSymbol>objectSym).type;\n            }\n            var fnSym = this.globalScope.find("Function", false, true);\n            if (fnSym && (fnSym.kind() == SymbolKind.Type)) {\n                this.functionInterfaceType = (<TypeSymbol>fnSym).type;\n            }\n            var numberSym = this.globalScope.find("Number", false, true);\n            if (numberSym && (numberSym.kind() == SymbolKind.Type)) {\n                this.numberInterfaceType = (<TypeSymbol>numberSym).type;\n            }\n            var booleanSym = this.globalScope.find("Boolean", false, true);\n            if (booleanSym && (booleanSym.kind() == SymbolKind.Type)) {\n                this.booleanInterfaceType = (<TypeSymbol>booleanSym).type;\n            }\n            var regexSym = this.globalScope.find("RegExp", false, true);\n            if (regexSym && (regexSym.kind() == SymbolKind.Type)) {\n                this.regexType = (<TypeSymbol>regexSym).type;\n            }\n        }\n\n        public cast(ast: AST, type: Type): AST {\n            return this.castWithCoercion(ast, type, true, false);\n        }\n\n        public castWithCoercion(ast: AST, type: Type, applyCoercion: bool, typeAssertion: bool): AST {\n            var comparisonInfo = new TypeComparisonInfo();\n            if (this.checker.sourceIsAssignableToTarget(ast.type, type, comparisonInfo) || (typeAssertion && this.checker.sourceIsAssignableToTarget(type, ast.type, comparisonInfo))) {\n                if (applyCoercion) {\n                    if (type == null) {\n                        ast.type = this.anyType;\n                    }\n                    else if (type.isClass()) {\n                        ast.type = type.instanceType;\n                    }\n                    else {\n                        ast.type = type;\n                    }\n                }\n                return ast;\n            }\n            else {\n                this.checker.errorReporter.incompatibleTypes(ast, ast.type, type, null, this.scope, comparisonInfo);\n                return ast;\n            }\n        }\n\n        public inScopeTypeCheck(ast: AST, enclosingScope: SymbolScope): AST {\n            var prevScope = this.scope;\n            this.scope = enclosingScope;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var svThisClassNode = this.thisClassNode;\n            var svCurrentModDecl = this.checker.currentModDecl;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var container = this.scope.container;\n            var fnc: FuncDecl = null;\n            while (container) {\n                if (container.kind() == SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>container;\n                    var type = typeSym.type;\n                    if (type.call) {\n                        if (fnc == null) {\n                            // use innermost function\n                            this.enclosingFncIsMethod = typeSym.isMethod;\n                            fnc = <FuncDecl>container.declAST;\n                        }\n                    }\n                    if (type.isClass()) {\n                        this.thisType = type.instanceType;\n                        if (typeSym.declAST &&\n                            (typeSym.declAST.nodeType == NodeType.ClassDeclaration)) {\n                            this.thisClassNode = <TypeDeclaration>typeSym.declAST;\n                        }\n                        // use innermost class\n                        break;\n                    }\n                    if (type.isModuleType()) {\n                        this.checker.currentModDecl = <ModuleDeclaration>typeSym.declAST;\n                        // use innermost module\n                        break;\n                    }\n                }\n                container = container.container;\n            }\n            this.thisFnc = fnc;\n\n            var updated = this.typeCheck(ast);\n\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.thisClassNode = svThisClassNode;\n            this.checker.currentModDecl = svCurrentModDecl;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.scope = prevScope;\n            return updated;\n        }\n\n        public typeCheck(ast: AST): AST {\n            if (ast) {\n                return ast.typeCheck(this);\n            }\n            else {\n                return null;\n            }\n        }\n\n        public inScopeTypeCheckDecl(ast: AST) {\n            if (ast.nodeType == NodeType.VarDecl || ast.nodeType == NodeType.ArgDecl) {\n                this.inScopeTypeCheckBoundDecl(<BoundDecl>ast);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n\n                var funcDecl = <FuncDecl>ast;\n\n                if (funcDecl.isAccessor()) {\n                    this.typeCheckFunction(funcDecl);\n                }\n            }\n        }\n\n        public inScopeTypeCheckBoundDecl(varDecl: BoundDecl) {\n            var sym = varDecl.sym;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevLocationInfo = this.checker.locationInfo;\n            if (sym && sym.container) {\n                var instanceScope = hasFlag(varDecl.varFlags, VarFlags.ClassConstructorProperty) ? sym.container.getType().constructorScope : sym.container.instanceScope();\n                if (hasFlag(varDecl.varFlags, VarFlags.Property) && sym.container.declAST.nodeType == NodeType.FuncDecl) {\n                    this.thisFnc = <FuncDecl>sym.container.declAST;\n                }\n                if (instanceScope) {\n                    var prevScope = this.scope;\n                    this.scope = instanceScope;\n                    var container = sym.container;\n                    var svCurrentModDecl = this.checker.currentModDecl;\n                    if (this.checker.units &&\n                        (sym.unitIndex >= 0) &&\n                        (sym.unitIndex < this.checker.units.length)) {\n                        this.checker.locationInfo = this.checker.units[sym.unitIndex];\n                    }\n                    else {\n                        this.checker.locationInfo = unknownLocationInfo;\n                    }\n                    // REVIEW: container linkage for function expressions\n                    while (container) {\n                        if (container.kind() == SymbolKind.Type) {\n                            var typeSym = <TypeSymbol>container;\n                            var type = typeSym.type;\n                            if (type.call) {\n                                this.enclosingFncIsMethod = typeSym.isMethod;\n                            }\n                            if (type.isClass()) {\n                                this.thisType = type.instanceType;\n                            }\n                            if (type.isModuleType()) {\n                                this.checker.currentModDecl = <ModuleDeclaration>container.declAST;\n                                break;\n                            }\n                        }\n                        container = container.container;\n                    }\n\n                    this.typeCheckBoundDecl(varDecl);\n                    this.checker.currentModDecl = svCurrentModDecl;\n                    this.scope = prevScope;\n                }\n            }\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.enclosingFncIsMethod = prevMethodStatus;\n        }\n\n        public resolveBoundDecl(varDecl: BoundDecl) {\n            if (varDecl.typeExpr) {\n                if (varDecl.typeExpr.type == null ||\n                    (varDecl.typeExpr.type && varDecl.typeExpr.type == this.anyType && this.scope) ||\n                    varDecl.typeExpr.type.symbol == null ||\n                    !this.checker.typeStatusIsFinished(varDecl.typeExpr.type.symbol.typeCheckStatus)) {\n                    this.typeCheck(varDecl.typeExpr);\n                }\n                varDecl.type = varDecl.typeExpr.type;\n                if (varDecl.sym) {\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n            else if (varDecl.init == null) {\n                if (this.checker.styleSettings.implicitAny) {\n                    this.checker.errorReporter.styleError(varDecl, "type implicitly set to \'any\'");\n                }\n                varDecl.type = this.anyType;\n                if (varDecl.sym) {\n                    if (varDecl.sym.isType()) {\n                        var tsym = <TypeSymbol>varDecl.sym;\n                        if (tsym.isMethod) {\n                            this.checker.errorReporter.simpleError(varDecl, "Cannot bind method group to variable.  (Did you mean to use \'declare function\' instead of \'declare var\'?)");\n                            return;\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(varDecl, "Cannot bind type to variable");\n                            return;\n                        }\n                    }\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n        }\n\n        public typeCheckBoundDecl(varDecl: BoundDecl): VarDecl {\n            // symbol has already been added to the scope\n            var infSym = <InferenceSymbol>varDecl.sym;\n            if (infSym == null) {\n                if (varDecl.init) {\n                    varDecl.init = this.typeCheck(varDecl.init);\n                    varDecl.type = this.checker.widenType(varDecl.init.type);\n                }\n                else {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, "type implicitly set to \'any\'");\n                    }\n                    varDecl.type = this.anyType;\n                }\n            }\n            else {\n                if (infSym.typeCheckStatus == TypeCheckStatus.Started) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, "type implicitly set to \'any\'");\n                    }\n                    varDecl.type = this.anyType;\n                    infSym.setType(this.anyType);\n                }\n                else if (infSym.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                    infSym.typeCheckStatus = TypeCheckStatus.Started;\n                    this.checker.addStartedPTO(infSym);\n                    var resolved = false;\n                    if (varDecl.type == null) {\n                        // propagate declared type\n                        if (varDecl.typeExpr) {\n                            this.resolveBoundDecl(varDecl);\n                            resolved = true;\n                            varDecl.type = varDecl.typeExpr.type;\n                            infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        }\n                    }\n\n                    if (varDecl.init) {\n                        // if the bound decl is a function-local static, we need to set the\n                        // encapsulating scope to the function\'s member scope\n                        var isLocalStatic = hasFlag(varDecl.varFlags, VarFlags.LocalStatic);\n                        var prevScope = this.scope;\n                        var applyTargetType = !varDecl.init.isParenthesized;\n                        if (isLocalStatic) {\n                            this.scope = varDecl.sym.container.getType().memberScope;\n                        }\n\n                        // Mark Lambda expressions with IsPropertyBound flag\n                        if (hasFlag(varDecl.varFlags, VarFlags.Property) && this.thisClassNode) {\n                            getAstWalkerFactory().walk(varDecl.init, (ast: AST, parent: AST, walker: IAstWalker) => {\n                                if (ast && ast.nodeType == NodeType.FuncDecl) {\n                                    if (hasFlag((<FuncDecl>ast).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                        // Found a Lambda, mark it\n                                        (<FuncDecl>ast).fncFlags |= FncFlags.IsPropertyBound;\n                                    }\n                                    // Only mark the top level functions\n                                    walker.options.goChildren = false;\n                                }\n                                return ast;\n                            });\n                        }\n\n                        this.checker.typeCheckWithContextualType(varDecl.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, varDecl.init);\n\n                        this.scope = prevScope;\n                        if (varDecl.type) {\n                            // If the cast is to a target type, in the case of a funcdecl,\n                            // we may overwrite the init\'s type with one generated from a signature.\n                            // In that case, we need to preserve the contained scope of the actual decl\n                            var preserveScope = false;\n                            var preservedContainedScope = null;\n\n                            if (varDecl.init.type) {\n                                preservedContainedScope = varDecl.init.type.containedScope;\n                                preserveScope = true;\n                                if (varDecl.init.type == this.voidType) {\n                                    this.checker.errorReporter.simpleError(varDecl, "Cannot assign type \'void\' to variable \'" + varDecl.id.actualText + "\'");\n                                }\n                            }\n\n                            varDecl.init = this.castWithCoercion(varDecl.init, varDecl.type, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n\n                            if (preserveScope && varDecl.init.type.containedScope == null) {\n                                varDecl.init.type.containedScope = preservedContainedScope;\n                            }\n                        }\n                        else {\n                            varDecl.type = this.checker.widenType(varDecl.init.type);\n                            if (varDecl.type == this.voidType) {\n                                this.checker.errorReporter.simpleError(varDecl, "Cannot assign type \'void\' to variable \'" + varDecl.id.actualText + "\'");\n                                varDecl.type = this.anyType;\n                            }\n                        }\n                        infSym.setType(varDecl.type);\n                    }\n                    else {\n                        if (!resolved) {\n                            this.resolveBoundDecl(varDecl);\n                        }\n                    }\n                    infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                }\n                else if (this.checker.typeStatusIsFinished(infSym.typeCheckStatus) &&\n                         (infSym.declAST != varDecl)) {\n                    if (varDecl.init) {\n                        varDecl.init = this.typeCheck(varDecl.init);\n                        varDecl.type = infSym.getType();\n                        varDecl.init = this.cast(varDecl.init, varDecl.type);\n                    }\n                }\n            }\n            if (varDecl.id && varDecl.sym) {\n                varDecl.id.sym = varDecl.sym;\n            }\n\n            // Check if variable satisfies type privacy\n            if (varDecl.sym && varDecl.sym.container) {\n                this.checkTypePrivacy(varDecl.sym.getType(), varDecl.sym, (typeName: string, isModuleName: bool) => this.varPrivacyErrorReporter(varDecl, typeName, isModuleName));\n            }\n            return <VarDecl>varDecl;\n        }\n\n        private varPrivacyErrorReporter(varDecl: BoundDecl, typeName: string, isModuleName: bool) {\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n\n            if (hasFlag(varDecl.varFlags, VarFlags.Public)) {\n                if (varDecl.sym.container.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    this.checker.errorReporter.simpleError(varDecl, "property \'" + varDecl.sym.name + "\' of exported interface" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(varDecl, "public member \'" + varDecl.sym.name + "\' of exported class" + typestring);\n                }\n            } else {\n                this.checker.errorReporter.simpleError(varDecl, "exported variable \'" + varDecl.sym.name + "\'" + typestring);\n            }\n        }\n\n        public typeCheckSuper(ast: AST): AST {\n            if (this.thisType && (this.enclosingFncIsMethod && !this.thisFnc.isStatic()) && this.thisType.baseClass()) {\n                ast.type = this.thisType.baseClass();\n            }\n            else {\n                // redirect \'super\' used within lambdas\n                if (!this.enclosingFncIsMethod &&\n                    this.thisType && this.thisType.baseClass() &&\n                    this.thisFnc && hasFlag(this.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n                    // Find the closest non lambda function\n                    var enclosingFnc = this.thisFnc.enclosingFnc;\n                    while (hasFlag(enclosingFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n                        enclosingFnc = enclosingFnc.enclosingFnc;\n                    }\n\n                    // If the lambda is enclosed is a valid member, use the base type\n                    if (enclosingFnc && (enclosingFnc.isMethod() || enclosingFnc.isConstructor) && !enclosingFnc.isStatic()) {\n                        ast.type = this.thisType.baseClass();\n                        enclosingFnc.setHasSuperReferenceInFatArrowFunction();\n                        return ast;\n                    }\n                }\n\n                ast.type = this.anyType;\n                this.checker.errorReporter.invalidSuperReference(ast);\n            }\n            return ast;\n        }\n\n        public typeCheckThis(ast: AST): AST {\n           ast.type = this.anyType;\n            var illegalThisRef = false;\n            if (this.thisFnc == null) {\n                // \'this\' in class bodies should bind to \'any\'\n                if (this.thisType) {\n                    if (this.thisClassNode && this.thisClassNode.nodeType == NodeType.ClassDeclaration) {\n                        illegalThisRef = true;\n                    }\n                    else {\n                        ast.type = this.thisType;\n                    }\n                }\n                else if (this.checker.currentModDecl) {\n                    this.checker.errorReporter.simpleError(ast, "\'this\' may not be referenced within module bodies");\n                }\n            }\n            else {\n                if (this.thisClassNode && (hasFlag(this.thisFnc.fncFlags, FncFlags.IsPropertyBound) || (this.inSuperCall && hasFlag((<ClassDeclaration>this.thisClassNode).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor)))) {\n                    illegalThisRef = true;\n                }\n                if (this.thisFnc.isMethod() || this.thisFnc.isConstructor || this.thisFnc.isTargetTypedAsMethod) {\n                    if (this.thisType && !(this.thisFnc.fncFlags & FncFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            // redirect \'this\' used within lambdas\n            if (!this.enclosingFncIsMethod &&\n                this.thisFnc &&\n                hasFlag(this.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n\n                    // if the enclosing function was bound to a property,\n                    // checkInitSelf would not have been able to mark the \n                    // function for a self init\n                if (this.thisFnc.boundToProperty) {\n                    var container = this.thisFnc.boundToProperty.sym.container;\n                    if (container.declAST.nodeType == NodeType.FuncDecl) {\n                        (<FuncDecl>container.declAST).setHasSelfReference();\n                    }\n                }\n                else {\n                    var encFnc = this.thisFnc.enclosingFnc;\n                    var firstEncFnc = encFnc;\n\n                    while (encFnc) {\n                        if (this.thisClassNode && hasFlag(encFnc.fncFlags, FncFlags.IsPropertyBound)) {\n                            illegalThisRef = true;\n                        }\n\n                        if (!hasFlag(encFnc.fncFlags, FncFlags.IsFatArrowFunction) || encFnc.hasSelfReference()) {\n                            encFnc.setHasSelfReference();\n                            break;\n                        }\n\n                        encFnc = encFnc.enclosingFnc;\n                    }\n\n                    if (!encFnc && firstEncFnc) {\n                        encFnc = firstEncFnc;\n                        encFnc.setHasSelfReference();\n                    }\n                    else if (!encFnc) { // the lambda is bound at the top-level...\n                        if (this.thisClassNode) {\n                            (<ClassDeclaration>this.thisClassNode).varFlags |= VarFlags.MustCaptureThis;\n                        }\n                        else if (this.checker.currentModDecl) {\n                            this.checker.currentModDecl.modFlags |= ModuleFlags.MustCaptureThis;\n                        }\n                        else {\n                            this.checker.mustCaptureGlobalThis = true;\n                        }\n                    }\n\n                    if (encFnc && (encFnc.isMethod() || encFnc.isConstructor) && this.thisType && !hasFlag(encFnc.fncFlags, FncFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            if (illegalThisRef) {\n                this.checker.errorReporter.simpleError(ast, "Keyword \'this\' cannot be referenced in initializers in a class body, or in super constructor calls");\n            }\n            return ast;\n        }\n\n        public setTypeFromSymbol(ast: AST, symbol: Symbol): void {\n            if (symbol.isVariable()) {\n                if (symbol.isInferenceSymbol()) {\n                    var infSym = <InferenceSymbol>symbol;\n                    if (infSym.declAST &&\n                        !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                        this.inScopeTypeCheckDecl(infSym.declAST);\n                    }\n                    if (!this.checker.styleSettings.innerScopeDeclEscape) {\n                        if (infSym.declAST && (infSym.declAST.nodeType == NodeType.VarDecl)) {\n                            if (this.nestingLevel < (<VarDecl>infSym.declAST).nestingLevel) {\n                                this.checker.errorReporter.styleError(ast, "Illegal reference to a variable defined in more nested scope");\n                            }\n                        }\n                    }\n                }\n                ast.type = symbol.getType();\n                if (!symbol.writeable()) {\n                    ast.flags = ast.flags & (~(ASTFlags.Writeable));\n                }\n            }\n            else if (symbol.isType()) {\n                ast.type = symbol.getType();\n                ast.flags = ast.flags & (~(ASTFlags.Writeable));\n            }\n            else {\n                ast.type = this.anyType;\n                this.checker.errorReporter.symbolDoesNotReferToAValue(ast, symbol.name);\n            }\n        }\n\n        public typeCheckName(ast: AST): AST {\n            var identifier = <Identifier>ast;\n\n            if (this.checker.inWith) {\n                identifier.type = this.anyType;\n            }\n            else {\n                var typespace = this.inTypeRefTypeCheck;\n                var idText = identifier.text;\n                var originalIdText = idText;\n                var isDynamicModuleName = isQuoted(identifier.text);\n\n                var symbol = this.scope.find(idText, false, typespace);\n\n                if (symbol == null && isDynamicModuleName) {\n                    symbol = this.checker.findSymbolForDynamicModule(idText, this.currentScript.locationInfo.filename, (id) => this.scope.find(id, false, typespace));\n                }\n\n                if (!symbol) {\n                    if (!identifier.isMissing()) {\n                        this.checker.errorReporter.unresolvedSymbol(identifier, identifier.text);\n                    }\n                    identifier.type = this.anyType;\n                }\n                else {\n                    if (optimizeModuleCodeGen && symbol && symbol.isType()) {\n                        var symType = symbol.getType();\n                        // Once the type has been referenced outside of a type ref position, there\'s\n                        // no going back                        \n                        if (symType && (<TypeSymbol>symbol).aliasLink && (<TypeSymbol>symbol).onlyReferencedAsTypeRef) {\n\n                            var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                            if (modDecl && hasFlag(modDecl.modFlags, ModuleFlags.IsDynamic)) {\n                                (<TypeSymbol>symbol).onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;\n                            }\n                        }\n                    }\n\n                    if (symbol.declAST &&\n                        symbol.declAST.nodeType == NodeType.FuncDecl &&\n                        !(<FuncDecl>symbol.declAST).returnTypeAnnotation &&\n                        (<FuncDecl>symbol.declAST).signature.typeCheckStatus == TypeCheckStatus.Started) {\n                        (<FuncDecl>symbol.declAST).type.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        (<FuncDecl>symbol.declAST).signature.returnType.type = this.anyType;\n                    }\n\n                    this.setTypeFromSymbol(ast, symbol);\n                    identifier.sym = symbol;\n                    if (this.thisFnc) {\n                        if (this.thisFnc.type && symbol.container != this.thisFnc.type.symbol) {\n                            this.thisFnc.freeVariables[this.thisFnc.freeVariables.length] = symbol;\n                        }\n                    }\n                }\n            }\n            return ast;\n        }\n\n        public typeCheckScript(script: Script): Script {\n            this.checker.locationInfo = script.locationInfo;\n            this.scope = this.checker.globalScope;\n\n            // if it\'s a top-level module, the globals have already been added to the implicit\n            // module decl\n            if (!script.topLevelMod) {\n                this.addLocalsFromScope(this.scope, this.checker.gloMod,\n                                   script.vars, this.checker.globals, true);\n            }\n\n            this.currentScript = script;\n            script.bod = <ASTList>this.typeCheck(script.bod);\n            this.currentScript = null;\n            return script;\n        }\n\n        public typeCheckBitNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return unex;\n        }\n\n        public typeCheckUnaryNumberOperator(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return ast;\n        }\n\n        public typeCheckLogNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.booleanType;\n            return unex;\n        }\n\n        public astIsWriteable(ast: AST): bool {\n            return hasFlag(ast.flags, ASTFlags.Writeable);\n        }\n\n        public typeCheckIncOrDec(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            var lval = unex.operand;\n            if (!this.astIsWriteable(unex)) {\n                this.checker.errorReporter.valueCannotBeModified(unex);\n                unex.type = this.doubleType;\n            }\n            else {\n                unex = <UnaryExpression> this.typeCheckUnaryNumberOperator(ast);\n                if (unex.operand.type != this.checker.numberType && unex.operand.type != this.checker.anyType && !(unex.operand.type.typeFlags & TypeFlags.IsEnum)) {\n                    this.checker.errorReporter.simpleError(ast, "\'++\' and \'--\' may only be applied to operands of type \'number\' or \'any\'");\n                }\n            }\n            return unex;\n        }\n\n        public typeCheckBitwiseOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            var resultType: Type = null;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (assignment && (!this.astIsWriteable(binex))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n\n            if (this.checker.styleSettings.bitwise) {\n                this.checker.errorReporter.styleError(ast, "use of " + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (this.checker.sourceIsSubtypeOfTarget(leftType, this.doubleType) && (this.checker.sourceIsSubtypeOfTarget(rightType, this.doubleType))) {\n                resultType = this.doubleType;\n            }\n            else if ((leftType == this.booleanType) &&\n                     (rightType == this.booleanType)) {\n                resultType = this.booleanType;\n            }\n            else if (leftType == this.anyType) {\n                if ((rightType == this.anyType) ||\n                    (rightType == this.doubleType) ||\n                    (rightType == this.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            else if (rightType == this.anyType) {\n                if ((leftType == this.anyType) ||\n                    (leftType == this.doubleType) ||\n                    (leftType == this.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            if (resultType == null) {\n                resultType = this.anyType;\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                        binex.printLabel(), this.scope);\n            }\n            binex.type = resultType;\n            return binex;\n        }\n\n        public typeCheckArithmeticOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (assignment && (!this.astIsWriteable(binex.operand1))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n\n            if (this.checker.styleSettings.bitwise &&\n                ((binex.nodeType == NodeType.And) ||\n                (binex.nodeType == NodeType.Or) ||\n                (binex.nodeType == NodeType.AsgAnd) ||\n                (binex.nodeType == NodeType.AsgOr))) {\n                this.checker.errorReporter.styleError(ast, "use of " + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (leftType == null || rightType == null) {\n                this.checker.errorReporter.simpleError(binex, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?");\n                binex.type = this.anyType;\n                return binex;\n            }\n            var nodeType = binex.nodeType;\n\n            if (this.checker.isNullOrUndefinedType(leftType)) {\n                leftType = rightType;\n            }\n            if (this.checker.isNullOrUndefinedType(rightType)) {\n                rightType = leftType;\n            }\n            leftType = this.checker.widenType(leftType);\n            rightType = this.checker.widenType(rightType);\n\n            if (nodeType == NodeType.Add || nodeType == NodeType.AsgAdd) {\n\n                if (leftType == this.checker.stringType || rightType == this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else if (leftType == this.checker.numberType && rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n            else {\n                if (leftType == this.checker.numberType && rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n\n            return binex;\n        }\n\n        public typeCheckDotOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var leftIsFnc = false;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            var leftType = binex.operand1.type;\n            var leftScope: SymbolScope = null;\n            // REVIEW: replace with get member scope\n            if (leftType) {\n                if (leftType == this.anyType) {\n                    binex.type = this.anyType;\n                    return binex;\n                }\n                else if (leftType == this.stringType) {\n                    if (this.stringInterfaceType) {\n                        leftScope = this.stringInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType == this.doubleType) {\n                    if (this.numberInterfaceType) {\n                        leftScope = this.numberInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType == this.booleanType) {\n                    if (this.booleanInterfaceType) {\n                        leftScope = this.booleanInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if ((leftType.call || leftType.construct) && leftType.members == null) {\n                    if (this.functionInterfaceType) {\n                        leftScope = this.functionInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType.elementType) {\n                    if (this.arrayInterfaceType) {\n                        var arrInstType = leftType.elementType.getArrayBase(this.arrayInterfaceType, this.checker);\n                        leftScope = arrInstType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else {\n                    leftScope = leftType.memberScope;\n                }\n            }\n            if (leftScope == null) {\n                this.checker.errorReporter.expectedClassOrInterface(binex);\n                binex.type = this.anyType;\n            }\n            else {\n                var propertyName = <Identifier>binex.operand2;\n                var lhsIsEnclosingType = (this.thisClassNode && binex.operand1.type == this.thisClassNode.type.instanceType) || this.inTypeRefTypeCheck;\n                var symbol = leftScope.find(propertyName.text, !lhsIsEnclosingType, this.inTypeRefTypeCheck); // only search the public members, unless the rhs is a \'this\' pointer\n\n                // If the symbol wasn\'t found, delegate to the appropriate \'virtual\' parent type\n                if (!symbol) {\n                    if (this.objectInterfaceType && leftType) {\n                        // check \'Object\' for the symbol\n                        if (leftType.isReferenceType()) {\n                            symbol = this.objectInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                        }\n                        if (!symbol) {\n                            // check \'Function\', if appropriate\n                            if (this.functionInterfaceType && (leftType.call || leftType.construct)) {\n                                symbol = this.functionInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                            }\n                        }\n                    }\n                }\n\n                if (!symbol || (!symbol.visible(leftScope, this.checker))) {\n                    binex.type = this.anyType;\n\n                    if (symbol == null) {\n                        this.checker.errorReporter.simpleError(propertyName, "The property \'" + propertyName.actualText + "\' does not exist on value of type \'" + leftType.getScopedTypeName(this.scope) + "\'");\n                    }\n                    else if (!this.inTypeRefTypeCheck) {  // if it\'s a dotted type reference, we\'ll catch the visibility error during binding\n                        this.checker.errorReporter.simpleError(binex, "The property \'" + propertyName.actualText + " on type \'" + leftType.getScopedTypeName(this.scope) + "\' is not visible");\n                    }\n                }\n                else {\n                    if (symbol.isVariable()) {\n                        if (symbol.isInferenceSymbol()) {\n                            var infSym = <InferenceSymbol>symbol;\n                            if (infSym.declAST && !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                                this.inScopeTypeCheckDecl(infSym.declAST);\n                            }\n                        }\n                    }\n                    propertyName.sym = symbol;\n                    binex.type = symbol.getType();\n                }\n            }\n            if (binex.type == null) {\n                binex.type = this.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckBooleanOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n            if ((!(this.checker.sourceIsAssignableToTarget(leftType, rightType))) &&\n                (!(this.checker.sourceIsAssignableToTarget(rightType, leftType)))) {\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckAsgOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var applyTargetType = !binex.operand2.isParenthesized;\n            binex.operand1 = this.typeCheck(binex.operand1);\n\n            this.checker.typeCheckWithContextualType(binex.operand1.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, binex.operand2);\n\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (!(this.astIsWriteable(binex.operand1))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n            if (binex.operand1.nodeType == NodeType.Call) {\n                var callEx = <CallExpression>binex.operand1;\n            }\n            var preserveScope = false;\n            var preservedContainedScope = null;\n            if (binex.operand2.type) {\n                preservedContainedScope = binex.operand2.type.containedScope;\n                preserveScope = true;\n            }\n            // Do not re-write the AST in provisional typecheck mode\n            binex.operand2 = this.castWithCoercion(binex.operand2, leftType, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n            if (preserveScope && binex.operand2.type.containedScope == null) {\n                binex.operand2.type.containedScope = preservedContainedScope;\n            }\n            binex.type = rightType;\n            return binex;\n        }\n\n        public typeCheckIndex(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1); // ObjExpr\n            binex.operand2 = this.typeCheck(binex.operand2); // IndexExpr\n\n            if (!this.checker.styleSettings.literalSubscript) {\n                if (binex.operand2.nodeType == NodeType.QString) {\n                    this.checker.errorReporter.styleError(ast, "use literal subscript (\'.\') notation instead)");\n                }\n            }\n\n            var objExprType = binex.operand1.type;\n            var indexExprType = binex.operand2.type;\n\n            if (objExprType.elementType) { // arrays\n                if (indexExprType == this.checker.anyType || indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)) {\n                    binex.type = objExprType.elementType;\n                }\n                else if (indexExprType == this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (objExprType.index) { // types with index sigs\n\n                if (indexExprType == this.checker.anyType ||\n                    !((objExprType.index.flags & SignatureFlags.IsStringIndexer) || (objExprType.index.flags & SignatureFlags.IsNumberIndexer)) || // REVIEW: unvalidated type expression\n                    ((objExprType.index.flags & SignatureFlags.IsStringIndexer) && indexExprType == this.checker.stringType) ||\n                    ((objExprType.index.flags & SignatureFlags.IsNumberIndexer) && (indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) {\n                    var sig = this.resolveOverload(ast, objExprType.index);\n                    if (sig) {\n                        binex.type = sig.returnType.type;//objExprType.index.signatures[0].returnType.type;\n                    }\n                    else {\n                        binex.type = this.checker.anyType;\n                    }\n                }\n                else if (indexExprType == this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if ((objExprType == this.checker.anyType ||\n                     objExprType == this.checker.stringType ||\n                     objExprType == this.checker.numberType ||\n                     objExprType == this.checker.booleanType ||\n                     objExprType.isReferenceType()) &&\n                     (indexExprType == this.checker.anyType ||\n                      indexExprType == this.checker.stringType ||\n                      (indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) { // REVIEW: Do we want to allow indexes of type \'number\'?\n                binex.type = this.checker.anyType;\n            }\n            else {\n                this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                binex.type = this.checker.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckInOperator(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.stringType);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type == this.checker.anyType || binex.operand1.type == this.checker.stringType) &&\n                    (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.objectInterfaceType)))) {\n                this.checker.errorReporter.simpleError(binex, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type");\n            }\n\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckShift(binex: BinaryExpression, assignment: bool): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.doubleType);\n            binex.operand2 = this.cast(this.typeCheck(binex.operand2), this.doubleType);\n            if (assignment && (!(this.astIsWriteable(binex.operand1)))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n            binex.type = this.doubleType;\n            return binex;\n        }\n\n        public typeCheckQMark(trinex: ConditionalExpression): ConditionalExpression {\n            trinex.operand1 = this.typeCheck(trinex.operand1);\n            trinex.operand2 = this.typeCheck(trinex.operand2);\n            trinex.operand3 = this.typeCheck(trinex.operand3);\n            var leftType = trinex.operand2.type;\n            var rightType = trinex.operand3.type;\n\n            if (leftType == rightType) {\n                trinex.type = leftType;\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    trinex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    trinex.type = leftType;\n                }\n                else {\n                    trinex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(trinex, leftType, rightType, trinex.printLabel(), this.scope);\n                }\n            }\n\n            return trinex;\n        }\n\n        public addFormals(container: Symbol, signature: Signature,\n            table: IHashTable) {\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var symbol = <ParameterSymbol>signature.parameters[i];\n                symbol.container = container;\n                table.add(symbol.name, symbol);\n            }\n        }\n\n        // REVIEW: We use isModContainer instead of container.getType().isModuleType because container.type may be null at this\n        // juncture\n        public addLocalsFromScope(scope: SymbolScope, container: Symbol, vars: ASTList, table: IHashTable, isModContainer: bool) {\n            var len = vars.members.length;\n            var hasArgsDef = false;\n            for (var i = 0; i < len; i++) {\n                var local = <VarDecl>vars.members[i];\n                if (((local.sym == null) || (local.sym.kind() != SymbolKind.Field))) {\n                    var result: Symbol = null;\n                    if ((result = table.lookup(local.id.text)) == null) {\n                        var localVar: ValueLocation = new ValueLocation();\n                        localVar.typeLink = new TypeLink();\n                        var varSym = null;\n\n                        if (hasFlag(local.varFlags, VarFlags.Static)) {\n                            local.varFlags |= VarFlags.LocalStatic;\n                            varSym = new FieldSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.unitIndex,\n                                                      true, localVar);\n                        }\n                        else {\n                            varSym = new VariableSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.unitIndex,\n                                                      localVar);\n                        }\n                        varSym.transferVarFlags(local.varFlags);\n                        localVar.symbol = varSym;\n                        varSym.declAST = local;\n                        localVar.typeLink.ast = local.typeExpr;\n                        this.checker.resolveTypeLink(scope, localVar.typeLink, false);\n                        if ((local.type == null) && (local.init == null)) {\n                            local.type = this.anyType;\n                        }\n                        localVar.typeLink.type = local.type;\n                        localVar.symbol.container = container;\n                        local.sym = localVar.symbol;\n                        table.add(local.id.text, varSym);\n                        if (local.id.text == "arguments") {\n                            hasArgsDef = true;\n                        }\n                    }\n                    else {\n                        local.type = result.getType();\n                        local.sym = result;\n                    }\n                }\n            }\n            if (!isModContainer) {\n                if (!hasArgsDef) {\n                    var argLoc = new ValueLocation();\n                    argLoc.typeLink = new TypeLink();\n                    var theArgSym = new VariableSymbol("arguments", vars.minChar,\n                                                     this.checker.locationInfo.unitIndex,\n                                                     argLoc);\n\n                    // if the user is using a custom lib.d.ts where IArguments has not been defined\n                    // (or they\'re compiling with the --nolib option), use \'any\' as the argument type\n                    if (!this.iargumentsInterfaceType) {\n                        var argumentsSym = scope.find("IArguments", false, true);\n\n                        if (argumentsSym) {\n                            argumentsSym.flags |= SymbolFlags.CompilerGenerated;\n                            this.iargumentsInterfaceType = argumentsSym.getType();\n                        }\n                        else {\n                            this.iargumentsInterfaceType = this.anyType;\n                        }\n                    }\n                    argLoc.typeLink.type = this.iargumentsInterfaceType;\n                    table.add("arguments", theArgSym);\n                }\n            }\n        }\n\n        // REVIEW: isClass param may now be redundant\n        public addConstructorLocalArgs(container: Symbol, args: ASTList, table: IHashTable, isClass: bool): void {\n            if (args) {\n                var len = args.members.length;\n                for (var i = 0; i < len; i++) {\n                    var local = <ArgDecl>args.members[i];\n                    if ((local.sym == null) ||\n                        (isClass || (local.sym.kind() != SymbolKind.Field))) {\n                        var result: Symbol = null;\n                        if ((result = table.lookup(local.id.text)) == null) {\n                            this.resolveBoundDecl(local);\n                            var localVar: ValueLocation = new ValueLocation();\n                            localVar.typeLink = new TypeLink();\n                            var varSym = new ParameterSymbol(local.id.text, local.minChar,\n                                                                   this.checker.locationInfo.unitIndex,\n                                                                   localVar);\n                            varSym.declAST = local;\n                            localVar.symbol = varSym;\n                            localVar.typeLink.type = local.type;\n                            localVar.symbol.container = container;\n                            local.sym = localVar.symbol;\n                            table.add(local.id.text, varSym);\n                        }\n                        else {\n                            local.type = result.getType();\n                            local.sym = result;\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkInitSelf(funcDecl: FuncDecl): bool {\n            if (!funcDecl.isMethod()) {\n                var freeVars = funcDecl.freeVariables;\n                for (var k = 0, len = freeVars.length; k < len; k++) {\n                    var sym = freeVars[k];\n                    if (sym.isInstanceProperty()) {\n                        return true;\n                    }\n                }\n            }\n            var fns = funcDecl.scopes;\n            var fnsLen = fns.members.length;\n\n            for (var j = 0; j < fnsLen; j++) {\n                var fn = <FuncDecl>fns.members[j];\n                if (this.checkInitSelf(fn)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public checkPromoteFreeVars(funcDecl: FuncDecl, constructorSym: Symbol): void {\n            var freeVars = funcDecl.freeVariables;\n            for (var k = 0, len = freeVars.length; k < len; k++) {\n                var sym = freeVars[k];\n                if ((!sym.isInstanceProperty()) && (sym.container == constructorSym)) {\n                    instanceFilter.reset();\n                    if (this.scope.search(instanceFilter, sym.name, false, false)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variable shadows class property \'" + sym.name + "\'. To access the class property, use \'self." + sym.name + "\'");\n                    }\n\n                    this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable \'" + sym.name + "\' to a class property")\n                }\n            }\n        }\n\n        public allReturnsAreVoid(funcDecl: FuncDecl) {\n            // in the case of a function or method with no declared return type, walk the body to \n            // pre-emptively determine if the function has a return type of void\n            //\n            // REVIEW: Eventually, we\'ll want to perform exit graph analysis to determine\n            // if the function ever "escapes" without a return expression\n            // This would require moving some of this logic into the function\'s typecheck-proper,\n            // which would slow things down a fair bit, but would open up more analysis opportunities\n            var allReturnsAreVoid = true;\n\n            if (funcDecl.signature.returnType.type == null) {\n                var preFindReturnExpressionTypes = function (ast: AST, parent: AST, walker: IAstWalker) {\n                    var go = true;\n                    switch (ast.nodeType) {\n                        case NodeType.FuncDecl:\n                            // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                            // return type with the top-level function\'s return type\n                            go = false;\n                            break;\n                        case NodeType.Return:\n                            var returnStmt: ReturnStatement = <ReturnStatement>ast;\n\n                            if (returnStmt.returnExpression) {\n                                allReturnsAreVoid = false;\n                                go = false;\n                            }\n\n                        default:\n                            break;\n                    }\n                    walker.options.goChildren = go;\n                    walker.options.goNextSibling = go;\n                    return ast;\n                }\n\n                getAstWalkerFactory().walk(funcDecl.bod, preFindReturnExpressionTypes);\n            }\n\n            return allReturnsAreVoid;\n        }\n\n        public classConstructorHasSuperCall(funcDecl: FuncDecl) {\n            var foundSuper = false;\n\n            var preFindSuperCall = function (ast: AST, parent: AST, walker: IAstWalker) {\n\n                var go = true;\n\n                switch (ast.nodeType) {\n                    case NodeType.FuncDecl:\n                        go = false;\n                        break;\n                    case NodeType.Call:\n                        var call = <CallExpression>ast;\n\n                        if (call.target.nodeType == NodeType.Super) {\n                            go = false;\n                            foundSuper = true;\n                            break;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                walker.options.goChildren = go;\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(funcDecl.bod, preFindSuperCall);\n\n            return foundSuper;\n        }\n\n        private baseListPrivacyErrorReporter(bases: ASTList, i: number, declSymbol: Symbol, extendsList: bool, typeName: string, isModuleName: bool) {\n            var baseSymbol = bases.members[i].type.symbol;\n            var declTypeString = (declSymbol.declAST.nodeType == NodeType.InterfaceDeclaration) ? "interface" : "class";\n            var baseListTypeString = extendsList ? "extends" : "implements";\n            var baseTypeString = (baseSymbol.declAST.nodeType == NodeType.InterfaceDeclaration) ? "interface" : "class";\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module ";\n                baseTypeString = " " + baseTypeString + " from private module " + quotestring + typeName + quotestring;\n            } else {\n                baseTypeString = " private " + baseTypeString + " \'" + typeName + "\'";\n            }\n            this.checker.errorReporter.simpleError(bases.members[i], "exported " + declTypeString + " \'" + declSymbol.name + "\' " + baseListTypeString + baseTypeString);\n        }\n\n        // Check if declSymbol can satisfy baselist privacy\n        private typeCheckBaseListPrivacy(bases: ASTList, declSymbol: Symbol, extendsList: bool) {\n            if (bases) {\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    if (!bases.members[i].type || bases.members[i].type == this.checker.anyType) {\n                        // This type is coming from external module so it has to be exported, or we\'re recovering from an\n                        // error condition\n                        continue;\n                    }\n\n                    this.checkSymbolPrivacy(bases.members[i].type.symbol, declSymbol, (typeName: string, isModuleName: bool) => this.baseListPrivacyErrorReporter(bases, i, declSymbol, extendsList, typeName, isModuleName));\n                }\n            }\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSymbolPrivacy(typeSymbol: TypeSymbol, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName: bool) => void ) {\n            var externalModuleSymbol: TypeSymbol = null;\n            var declSymbolPath: Symbol[] = null;\n\n            // Type is visible type, so this can be used by anyone.\n            if (typeSymbol.isExternallyVisible(this.checker)) {\n                // Symbol could be from external module, go ahead and find the external module\n                var typeSymbolPath = typeSymbol.pathToRoot();\n                declSymbolPath = declSymbol.pathToRoot();\n                var typeSymbolLength = typeSymbolPath.length;\n                var declSymbolPathLength = declSymbolPath.length;\n\n                if (typeSymbolLength > 0) {\n                    if (typeSymbolPath[typeSymbolLength - 1].getType().isModuleType() &&\n                        (<TypeSymbol>typeSymbolPath[typeSymbolLength - 1]).isDynamic &&\n                        typeSymbolPath[typeSymbolLength - 1] != declSymbolPath[declSymbolPathLength - 1]) {\n                        // Symbol from external module that was imported using one of the import statement\n                        externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 1];\n                    } else if (typeSymbolLength > 1) {\n                        // Is symbol from declared quoted module\n                        if (typeSymbolPath[typeSymbolLength - 2].getType().isModuleType() &&\n                            (<TypeSymbol>typeSymbolPath[typeSymbolLength - 2]).isDynamic &&\n                            (declSymbolPathLength == 1 || typeSymbolPath[typeSymbolLength - 2] != declSymbolPath[declSymbolPathLength - 2])) {\n                            // From quoted module name\n                            externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 2];\n                        }\n                    }\n                }\n\n                if (externalModuleSymbol == null) {\n                    return;\n                }\n            }\n\n            // Interface symbol doesn\'t reflect correct Exported state so use AST instead\n            var interfaceDecl: InterfaceDeclaration = declSymbol.getInterfaceDeclFromSymbol(this.checker);\n            if (interfaceDecl && !hasFlag(interfaceDecl.varFlags, VarFlags.Exported)) {\n                return;\n            }\n\n            var checkVisibilitySymbol = declSymbol;\n            // Var decl symbol doesnt reflect correct exported state so use AST instead\n            var varDecl = declSymbol.getVarDeclFromSymbol();\n            if (varDecl) {\n                if (hasFlag(varDecl.varFlags, VarFlags.Private)) {\n                    return;\n                } else if (hasFlag(varDecl.varFlags, VarFlags.Public)) {\n                    // Its a member from class so check visibility of its container\n                    checkVisibilitySymbol = declSymbol.container;\n                }\n            }\n\n            // If the container is visible from global scrope it is error\n            if (checkVisibilitySymbol.isExternallyVisible(this.checker)) {\n                var privateSymbolName = typeSymbol.name;\n\n                // If imported typeSymbol mark it as visible externally and verify that the symbol it imports is visible externally\n                if (externalModuleSymbol != null) {\n                    var prettyName = externalModuleSymbol.getPrettyNameOfDynamicModule(declSymbolPath);\n                    if (prettyName != null) {\n                        this.currentScript.AddExternallyVisibleImportedSymbol(prettyName.symbol, this.checker);\n                        return;\n                    } else {\n                        privateSymbolName = externalModuleSymbol.prettyName;\n                    }\n                }\n\n                // Visible declaration using non visible type.\n                errorCallback(privateSymbolName, typeSymbol.name != privateSymbolName);\n            }\n        }\n\n        // Checks if the privacy is satisfied by type that is used in the declaration inside container\n        private checkTypePrivacy(type: Type, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName : bool) =>void ) {\n            // Primitive types\n            if (!(type && type.primitiveTypeClass == Primitive.None)) {\n                return;\n            }\n\n\n            // If type is array, check element type\n            if (type.isArray()) {\n                return this.checkTypePrivacy(type.elementType, declSymbol, errorCallback);\n            }\n\n            // Going to be printing symbol name, verify if symbol can be emitted\n            if (type.symbol && type.symbol.name && type.symbol.name != "_anonymous" &&\n                        (((type.call == null) && (type.construct == null) && (type.index == null)) ||\n                        (type.members && (!type.isClass())))) {\n                return this.checkSymbolPrivacy(<TypeSymbol>type.symbol, declSymbol, errorCallback);\n            }\n\n            if (type.members) {\n                // Verify symbols for members\n                type.members.allMembers.map((key, s, unused) => {\n                    var sym = <Symbol>s;\n                    if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                        this.checkTypePrivacy(sym.getType(), declSymbol, errorCallback);\n                    }\n                }, null);\n            }\n\n            this.checkSignatureGroupPrivacy(type.call, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.construct, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.index, declSymbol, errorCallback);\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSignatureGroupPrivacy(sgroup: SignatureGroup, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName : bool) =>void ) {\n            if (sgroup) {\n                var len = sgroup.signatures.length;\n                for (var i = 0; i < sgroup.signatures.length; i++) {\n                    var signature = sgroup.signatures[i];\n                    if (len > 1 && signature == sgroup.definitionSignature) {\n                        // In case of overloads don\'t look up for overload defintion types.\n                        continue;\n                    }\n\n                    if (signature.returnType) {\n                        this.checkTypePrivacy(signature.returnType.type, declSymbol, errorCallback);\n                    }\n\n                    var paramLen = signature.parameters.length;\n                    for (var j = 0; j < paramLen; j++) {\n                        var param = signature.parameters[j];\n                        this.checkTypePrivacy(param.getType(), declSymbol, errorCallback);\n                    }\n                }\n            }\n        }\n\n        private functionArgumentPrivacyErrorReporter(funcDecl: FuncDecl, p: number, paramSymbol: Symbol, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.fncFlags, FncFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n\n            if (!isContainerInterface) {\n                if (funcDecl.isConstructor) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported class\'s constructor parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (isSetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " setter parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (!isGetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " function parameter \'" + paramSymbol.name + "\'" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s constructor parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s call parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (!funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s function parameter \'" + paramSymbol.name + "\'" + typestring);\n                }\n            }\n        }\n\n        private returnTypePrivacyError(astError: AST, funcDecl: FuncDecl, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.fncFlags, FncFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n            if (!isContainerInterface) {\n                if (isGetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " getter return type" + typestring);\n                } else if (!isSetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " function return type" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s constructor return type" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s call return type" + typestring);\n                } else if (funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s indexer return type" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s function return type" + typestring);\n                }\n            }\n        }\n\n        private functionReturnTypePrivacyErrorReporter(funcDecl: FuncDecl, signature: Signature, typeName: string, isModuleName: bool) {\n            var reportOnFuncDecl = false;\n\n            // Error coming from return annotation\n            if (funcDecl.returnTypeAnnotation != null &&\n                funcDecl.returnTypeAnnotation.type == signature.returnType.type) {\n                this.returnTypePrivacyError(funcDecl.returnTypeAnnotation, funcDecl, typeName, isModuleName);\n            }\n\n            // Check if return statement\'s type matches the one that we concluded\n            for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                if (funcDecl.returnStatementsWithExpressions[i].type == signature.returnType.type) {\n                    this.returnTypePrivacyError(funcDecl.returnStatementsWithExpressions[i], funcDecl, typeName, isModuleName);\n                } else {\n                    reportOnFuncDecl = true;\n                }\n            }\n\n            if (reportOnFuncDecl) {\n                // Show on function decl\n                this.returnTypePrivacyError(funcDecl, funcDecl, typeName, isModuleName);\n            }\n        }\n\n        public typeCheckFunction(funcDecl: FuncDecl): FuncDecl {\n            this.nestingLevel = 0;\n            var fnType = funcDecl.type;\n\n            var fgSym = fnType.symbol;\n            var signature = funcDecl.signature;\n\n            if (this.checker.typeStatusIsFinished(signature.typeCheckStatus)) {\n                return funcDecl;\n            }\n            else if (signature.typeCheckStatus == TypeCheckStatus.Started) {\n                if (!funcDecl.returnTypeAnnotation &&\n                    funcDecl.bod &&\n                       !funcDecl.isSignature() &&\n                       !(funcDecl.isConstructor) &&\n                       this.allReturnsAreVoid(funcDecl)) {\n\n                    signature.returnType.type = this.voidType;\n                    return funcDecl;\n                }\n                else {\n                    if (funcDecl.returnTypeAnnotation == null) {\n                        if (this.checker.styleSettings.implicitAny) {\n                            this.checker.errorReporter.styleError(funcDecl, "type implicitly set to \'any\'");\n                        }\n                        signature.returnType.type = this.anyType;\n                        fgSym.flags |= SymbolFlags.RecursivelyReferenced;\n                    }\n                    return funcDecl;\n                }\n            }\n\n            signature.typeCheckStatus = TypeCheckStatus.Started;\n            this.checker.addStartedPTO(signature);\n            var prevScope = this.scope;\n            var prevFnc = this.thisFnc;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevClassNode = this.thisClassNode;\n            this.enclosingFncIsMethod = funcDecl.isMethod() || funcDecl.isConstructor;\n            this.thisFnc = funcDecl;\n            var container = funcDecl.type.symbol;\n            var prevThisType = this.thisType;\n            var prevLocationInfo = this.checker.locationInfo;\n            var funcTable: IHashTable = null;\n            var acceptedContextualType = false;\n            var targetParams: ParameterSymbol[] = null;\n            var targetReturnType: Type = null;\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var accessorType: Type = (isGetter || isSetter) && funcDecl.accessorSymbol ? funcDecl.accessorSymbol.getType() : null;\n            var prevModDecl = this.checker.currentModDecl;\n\n            if (funcDecl.isConstructor && !funcDecl.isOverload) {\n                if (fnType.instanceType == null) {\n                    this.checker.errorReporter.simpleError(funcDecl, "Malformed function body (is this a class named the same as an existing interface?)");\n                    return funcDecl;\n                }\n\n                this.scope = fnType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                funcTable = ssb.valueMembers.allMembers;\n            }\n            else if ((funcDecl.isSpecialFn() && !(funcDecl.fncFlags & FncFlags.Signature)) || funcDecl.isOverload) {\n                funcTable = funcDecl.symbols;\n                // if the function is static, we just want to use the \n                // current scope\n                if (!hasFlag(funcDecl.fncFlags, FncFlags.Static) && fnType.containedScope) {\n                    this.scope = fnType.containedScope;\n                }\n            }\n            else {\n                if (funcDecl.bod) {\n                    this.scope = fnType.containedScope;\n                }\n                var ssb = <SymbolScopeBuilder>this.scope;\n\n                // If it is null, it\'s an ambient declaration with no body, so it doesn\'t strictly matter\n                // if funcTable is not set\n                if (ssb && ssb.valueMembers) {\n                    funcTable = ssb.valueMembers.allMembers;\n                }\n            }\n\n            // If it\'s a class constructor, we need to check for the presence (or absense) of calls\n            // to the \'super\' constructor\n            //\n            // A super constructor call must exist if:\n            //  - the class has a base class\n            //\n            // A super constructor call must be the first statement in the function body if:\n            //  - the constructor has parameter properties or\n            //  - the class body has initialized property decls\n            //\n            // A super constructor call may not exist if:\n            //  - The class has no base type, or inherits directly from \'Object\'\n            if (funcDecl.isConstructor && funcDecl.bod && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n\n                var hasBaseType = hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseType);\n                var noSuperCallAllowed = !hasBaseType || hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n                var superCallMustBeFirst = hasFlag((<ClassDeclaration>funcDecl.classDecl).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor);\n\n                if (noSuperCallAllowed && this.classConstructorHasSuperCall(funcDecl)) {\n                    this.checker.errorReporter.simpleError(funcDecl, "Calls to \'super\' constructor are not allowed in classes that either inherit directly from \'Object\' or have no base class");\n                }\n                else if (hasBaseType) {\n                    if (superCallMustBeFirst) {\n                        if (!funcDecl.bod ||\n                            !funcDecl.bod.members.length ||\n                            !((funcDecl.bod.members[0].nodeType == NodeType.Call && (<CallExpression>funcDecl.bod.members[0]).target.nodeType == NodeType.Super) ||\n                            (hasFlag(funcDecl.bod.flags, ASTFlags.StrictMode) && funcDecl.bod.members.length > 1 &&\n                             funcDecl.bod.members[1].nodeType == NodeType.Call && (<CallExpression>funcDecl.bod.members[1]).target.nodeType == NodeType.Super))) {\n                            this.checker.errorReporter.simpleError(funcDecl, "If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor");\n                        }\n                    }\n                    else if (!this.classConstructorHasSuperCall(funcDecl)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Constructors for derived classes must contain a call to the class\'s \'super\' constructor");\n                    }\n                }\n            }\n\n            // If we\'ve typechecked this method "out of order" (not by walking the class, but through a method call somewhere else),\n            // we need to reset the current class node in question, so that visibility checks on class members don\'t fail\n            if (funcDecl.isMethod() && funcDecl.type.enclosingType) {\n\n                var enclosingClassNode: TypeDeclaration = null;\n\n                if (funcDecl.type.enclosingType.symbol.declAST.nodeType == NodeType.FuncDecl) {\n                    enclosingClassNode = <TypeDeclaration>(<FuncDecl>funcDecl.type.enclosingType.symbol.declAST).classDecl;\n                }\n                else if (funcDecl.type.enclosingType.symbol.declAST.nodeType == NodeType.ClassDeclaration) {\n                    enclosingClassNode = <TypeDeclaration>funcDecl.type.enclosingType.symbol.declAST;\n                }\n\n                if (enclosingClassNode) {\n                    this.thisClassNode = enclosingClassNode;\n                }\n            }\n\n            // if this function is contained in a module, we may be in the midst of a recursive typecheck operation\n            // should that be the case, we need to properly set the current module (for visibility tests)\n            if (fnType.enclosingType) {;\n                var enclosingSym = fnType.symbol.container;\n\n                // if the enclosing type is a class, grab the parent module\n                if (enclosingSym && enclosingSym.isType() && enclosingSym.getType().isClass()) {\n                    enclosingSym = enclosingSym.container;\n                }\n\n                if (enclosingSym && enclosingSym.declAST && enclosingSym.declAST.nodeType == NodeType.ModuleDeclaration) {\n                    this.checker.currentModDecl = <ModuleDeclaration>enclosingSym.declAST;\n                }\n            }\n\n            if (funcDecl.unitIndex > 0) {\n                if (this.checker.units &&\n                    (funcDecl.unitIndex < this.checker.units.length)) {\n                    this.checker.locationInfo = this.checker.units[funcDecl.unitIndex];\n                }\n                else {\n                    this.checker.locationInfo = unknownLocationInfo;\n                }\n            }\n\n            if (fnType.enclosingType) {\n                this.thisType = fnType.enclosingType;\n            }\n            else {\n                this.thisType = prevThisType;\n            }\n\n            var paramLen = signature.parameters.length;\n\n            if (!funcDecl.isConstructor && funcDecl.bod && !funcDecl.isSignature()) {\n                var tmpParamScope = this.scope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n\n                // Attempt to contextually type the function declaration             \n                if (!funcDecl.isMethod() && funcDecl.returnTypeAnnotation == null) {\n\n                    // the funcDecl may be a candidate for contextual typing                 \n                    // REVIEW: prevScope will only be null in the case of an upstream error\n                    if (prevScope && funcDecl.name && !funcDecl.name.isMissing()) {\n                        // Go ahead and check for an ambient symbol\n                        var considerSym: Symbol = prevScope.findAmbient(funcDecl.name.text, false, false);\n\n                        if (considerSym && considerSym.declAST && considerSym.declAST.type) {\n                            // REVIEW: Ambients beget signatures, and signatures don\'t need to be typechecked\n                            //typeCheck(considerSym.declAST);\n                            this.checker.setContextualType(considerSym.declAST.type, false);\n                        }\n                    }\n\n                    if (this.checker.hasTargetType()) {\n                        var candidateTypeContext = this.checker.getTargetTypeContext();\n                        var candidateType = candidateTypeContext.contextualType;\n\n                        if (this.checker.canContextuallyTypeFunction(candidateType, funcDecl, true)) {\n\n                            // Safe to do this, since the indices and fields are guaranteed to be\n                            // non-null and valid by the above call to canContextuallyTypeFunction\n                            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n                            candidateTypeContext.targetSig = candidateSigs.signatures[0];\n                            var candidateParams = candidateTypeContext.targetSig.parameters;\n\n                            // the target type has been accepted\n                            targetParams = candidateParams;\n                            targetReturnType = candidateTypeContext.targetSig.returnType.type;\n\n                            // Set "this" if applicable\n                            if (candidateTypeContext.targetSig.declAST) {\n                                if (candidateTypeContext.targetSig.declAST.isConstructor) {\n                                    //candidateTypeContext.targetThis=candidateType.instanceType;\n                                    //this.thisType = candidateType.instanceType;\n                                    funcDecl.isTargetTypedAsMethod = true;\n                                }\n                                else if (candidateTypeContext.targetSig.declAST.isMethod()) {\n                                    //candidateTypeContext.targetThis=candidateTypeContext.targetSig.declAST.type.enclosingType;\n                                    //this.thisType = candidateTypeContext.targetSig.declAST.type.enclosingType;\n                                    funcDecl.isTargetTypedAsMethod = true;\n                                }\n                            }\n                            fgSym.type = candidateTypeContext.contextualType;\n                            acceptedContextualType = true;\n                        }\n                        else if (candidateType && funcDecl.isAccessor()) {\n                            accessorType = candidateType;\n                            candidateTypeContext.targetAccessorType = accessorType;\n                        }\n                        else {\n                            this.checker.killCurrentContextualType();\n                        }\n                    }\n                }\n\n                // typecheck parameters\n                // Add parameter symbols to current scope for typechecking (in case default params reference each other)\n                // Order matters here - default parameters can reference previously defined parameters\n                var paramTable = ssb.valueMembers;\n                this.scope = new SymbolScopeBuilder(paramTable, null, null, null, prevScope, container);\n\n                for (var p = 0; p < paramLen; p++) {\n                    var symbol = signature.parameters[p];\n                    var ast = <ArgDecl>symbol.declAST\n\n                    if (this.checker.hasTargetType() && (targetParams && (this.checker.getTargetTypeContext().targetSig.hasVariableArgList || p < targetParams.length))) {\n                        var candidateTypeContext = this.checker.getTargetTypeContext();\n                        var hasVarArgList = candidateTypeContext.targetSig.hasVariableArgList;\n                        ast.type = hasVarArgList && p >= targetParams.length - 1 ? targetParams[targetParams.length - 1].getType().elementType : targetParams[p].getType();\n                        ast.sym.setType(ast.type);\n                        (<InferenceSymbol>ast.sym).typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                    }\n                    else {\n                        this.typeCheck(ast);\n                    }\n\n                    // infer the setter type, if necessary\n                    if (isSetter && accessorType) {\n                        ast = <ArgDecl>this.cast(ast, accessorType);\n                    }\n\n                    symbol.container = container;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(symbol.getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, symbol, typeName, isModuleName));\n                    paramTable.publicMembers.add(symbol.name, symbol);\n                }\n                this.scope = tmpParamScope;\n            }\n            else {\n                this.typeCheck(funcDecl.arguments)\n\n                // Because some terms were not yet type-checkable during binding, ensure that\n                // param symbols are updated with the proper argument types\n                for (var p = 0; p < paramLen; p++) {\n                    signature.parameters[p].parameter.typeLink.type = funcDecl.arguments.members[p].type;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(signature.parameters[p].getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, signature.parameters[p], typeName, isModuleName));\n                    if ((<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym) {\n                        (<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym.setType(funcDecl.arguments.members[p].type);\n                    }\n                }\n\n                if ((funcDecl.fncFlags & FncFlags.IndexerMember)) {\n                    if (!paramLen || paramLen > 1) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Index signatures may take one and only one parameter");\n                    }\n                    else if (funcDecl.arguments.members[0].type == this.checker.numberType) {\n                        fnType.index.flags |= SignatureFlags.IsNumberIndexer;\n                    }\n                    else if (funcDecl.arguments.members[0].type == this.checker.stringType) {\n                        fnType.index.flags |= SignatureFlags.IsStringIndexer;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(funcDecl.arguments.members[0], "Index signatures may only take \'string\' or \'number\' as their parameter");\n                    }\n\n                }\n            }\n\n            // typecheck body\n            if (funcDecl.bod && (!funcDecl.isSignature())) {\n                if (!(funcDecl.isConstructor)) {\n                    this.addFormals(container, signature, funcTable);\n                }\n                else {\n                    this.addConstructorLocalArgs(funcDecl.type.symbol, funcDecl.arguments, funcTable, hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod));\n\n                    if (this.thisClassNode && this.thisClassNode.extendsList) {\n                        var tmpScope = this.scope;\n                        var funcMembers = new ScopedMembers(<DualStringHashTable>funcTable);\n                        this.scope = new FilteredSymbolScopeBuilder(funcMembers, prevScope, funcDecl.type.symbol,\n                                                             function (sym) {\n                                                                 return sym.kind() == SymbolKind.Parameter;\n                                                             });\n                        this.typeCheckBaseCalls(this.thisClassNode.extendsList);\n                        this.scope = tmpScope;\n                    }\n                }\n\n                // Because this function may have been typechecked in a different visiblity context as its caller (e.g., this\n                // function is being typechecked as a result of a call, before the declaration could be typechecked), we need\n                // to set the enclosing module\n                var prevMod = this.checker.currentModDecl;\n                if (funcDecl.type &&\n                    funcDecl.type.symbol &&\n                    !funcDecl.isMethod() &&\n                    funcDecl.type.symbol.declModule) {\n                    this.checker.currentModDecl = funcDecl.type.symbol.declModule;\n                }\n\n\n                // unset the contextual type before typechecking the function body\n                if (acceptedContextualType) {\n                    this.checker.setContextualType(null, this.checker.inProvisionalTypecheckMode());\n                }\n\n                this.typeCheck(funcDecl.bod);\n\n                if (acceptedContextualType) {\n                    this.checker.unsetContextualType();\n                }\n\n                this.checker.currentModDecl = prevMod;\n\n                if (this.checker.checkControlFlow) {\n                    var cfg = funcDecl.buildControlFlow();\n                    if (this.checker.printControlFlowGraph) {\n                        cfg.print(this.checker.errorReporter.outfile);\n                    }\n                    cfg.reportUnreachable(this.checker.errorReporter);\n                    if (this.checker.checkControlFlowUseDef) {\n                        cfg.useDef(this.checker.errorReporter, funcDecl.type.symbol);\n                    }\n                }\n\n                if (funcDecl.isConstructor) {\n                    var fns: ASTList = funcDecl.scopes;\n                    var fnsLen = fns.members.length;\n                    var freeVars: Symbol[];\n                    var sym: Symbol;\n                    var j = 0;\n                    for (; j < fnsLen; j++) {\n                        var fn = <FuncDecl>fns.members[j];\n                        if (!fn.isSignature()) {\n                            if (hasFlag(fn.fncFlags, FncFlags.Method) && (!hasFlag(fn.fncFlags, FncFlags.Static))) {\n                                this.checkPromoteFreeVars(fn, funcDecl.type.symbol);\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.scope = prevScope;\n            this.thisFnc = prevFnc;\n            this.thisClassNode = prevClassNode;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.thisType = prevThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.checker.currentModDecl = prevModDecl;\n\n            signature.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n\n            // set the return type\n            if (funcDecl.returnTypeAnnotation) {\n                this.checkForVoidConstructor(funcDecl.returnTypeAnnotation.type, funcDecl.returnTypeAnnotation);\n\n                if (signature.returnType.type == null) {\n                    this.checker.resolveTypeLink(this.scope, signature.returnType, false);\n                }\n            }\n            else if (targetReturnType) {\n                signature.returnType.type = targetReturnType;\n            }\n\n            // If no return type annotation has been applied to the function declaration\n            // unify the return types from the given return statements\n\n            if (!(fgSym.flags & SymbolFlags.RecursivelyReferenced) && funcDecl.returnStatementsWithExpressions.length > 0) {\n                var collection: ITypeCollection = {\n                    getLength: () => { return funcDecl.returnStatementsWithExpressions.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { funcDecl.returnStatementsWithExpressions[index].type = type; },\n                    getTypeAtIndex: (index: number) => { return funcDecl.returnStatementsWithExpressions[index].type; }\n                }\n\n                var bestCommonReturnType = funcDecl.returnStatementsWithExpressions[0].type;\n                bestCommonReturnType = this.checker.findBestCommonType(bestCommonReturnType, null, collection, true);\n\n                if (bestCommonReturnType) {\n                    signature.returnType.type = this.checker.widenType(bestCommonReturnType);\n                }\n                else {\n                    for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnStatementsWithExpressions[i], "Incompatible return type");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n            }\n\n            var onlyHasThrow = false;\n\n            if (signature.returnType.type == null) {\n                if (hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression)) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(funcDecl, "type implicitly set to \'any\'");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n                else {\n                    signature.returnType.type = this.voidType;\n                }\n            }\n            else if (signature.returnType.type == this.nullType || signature.returnType.type == this.checker.undefinedType) {\n                signature.returnType.type = this.anyType;\n            }\n            else if ((signature.returnType.type != this.voidType && signature.returnType.type != this.checker.undefinedType && signature.returnType.type != this.anyType)) {\n                // the signature declared a non-void type, but there\'s no return statement\n                if (!funcDecl.isSignature() &&\n                    !funcDecl.isConstructor &&\n                    !hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression) &&\n                    !hasFlag(funcDecl.fncFlags, FncFlags.IsFatArrowFunction)) {\n                        // relax the restriction if the method only contains a single "throw" statement\n                    onlyHasThrow = (funcDecl.bod.members.length > 0) && (funcDecl.bod.members[0].nodeType == NodeType.Throw)\n\n                    if (!onlyHasThrow) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnTypeAnnotation || funcDecl,\n                             "Function declared a non-void return type, but has no return expression");\n                    }\n                }\n\n                // Type check for return type Privacy\n                this.checkTypePrivacy(signature.returnType.type, container, (typeName: string, isModuleName: bool) => this.functionReturnTypePrivacyErrorReporter(funcDecl, signature, typeName, isModuleName));\n            }\n\n            // if the function declaration is a getter or a setter, set the type of the associated getter/setter symbol\n            if (funcDecl.accessorSymbol) {\n                var accessorType = funcDecl.accessorSymbol.getType();\n                if (!onlyHasThrow && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) && !hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression)) {\n                    this.checker.errorReporter.simpleError(funcDecl, "Getters must return a value");\n                }\n                if (accessorType) {\n                    if ((hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) && accessorType != signature.returnType.type) ||\n                        (funcDecl.arguments.members.length > 0 && accessorType != funcDecl.arguments.members[0].type)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Getter and setter types do not agree");\n                    }\n                }\n                else {\n                    if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                        funcDecl.accessorSymbol.setType(signature.returnType.type);\n                    }\n                    else {\n                        if (funcDecl.arguments.members.length != 1) {\n                            this.checker.errorReporter.simpleError(funcDecl, "Setters may have one and only one argument");\n                        }\n                        else {\n                            funcDecl.accessorSymbol.setType(funcDecl.arguments.members[0].type);\n                        }\n                    }\n                }\n            }\n\n            this.typeCheckOverloadSignatures(fnType, funcDecl);\n            return funcDecl;\n        }\n\n        public typeCheckBases(type: Type) {\n            var seenInterface = false;\n            var bases = type.extendsList;\n            var baseLinks = type.extendsTypeLinks;\n            if (bases) {\n                var len = bases.length;\n\n                if (len > 0) {\n                    type.typeFlags |= TypeFlags.HasBaseType;\n                }\n\n                for (var i = 0; i < len; i++) {\n                    if (bases[i] == this.checker.anyType) {\n                        // This may be the type from imported module and hence the type was not really resolved to the correct one.\n                        // Try resolving it again\n                        baseLinks[i].type = null;\n                        // There are no contextual errors when trying to verify the base class\n                        var oldErrors = this.checker.errorReporter.getCapturedErrors();\n                        CompilerDiagnostics.assert(oldErrors.length == 0, "There shouldnt be any contextual errors when typechecking base type names");\n                        this.checker.errorReporter.pushToErrorSink = true;\n                        bases[i] = this.checker.resolveBaseTypeLink(baseLinks[i], type.containedScope);\n                        this.checker.errorReporter.pushToErrorSink = false;\n                        this.checker.errorReporter.freeCapturedErrors();\n                    }\n\n                    var base = bases[i];\n                    var baseRef = baseLinks[i].ast;\n\n                    // make sure it\'s the global \'Object\' and not some alias\n                    var baseTypeOfObject = base.symbol && base.symbol.name == "Object" && base.symbol.container == this.checker.gloMod;\n\n                    if (baseTypeOfObject) {\n                        type.typeFlags |= TypeFlags.HasBaseTypeOfObject;\n                    }\n\n                    if (base.isClassInstance()) {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef, "Interface base type must be interface");\n                        }\n                        else {\n                            if (seenInterface) {\n                                this.checker.errorReporter.simpleError(baseRef, "Class may not follow interface as base type");\n                            }\n                        }\n                    }\n                    else if (base.isModuleType()) {\n                        this.checker.errorReporter.simpleError(baseRef, "Types may not be derived from module types");\n                    }\n                    else if (base.members) {\n                        if (!seenInterface) {\n                            seenInterface = true;\n                        }\n                    }\n                    else {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "Interface base type must be interface");\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "Base type must be interface or class");\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        public checkMembersImplementInterfaces(implementingType: Type) {\n            var instanceType = implementingType.getInstanceType();\n            if (instanceType.implementsList) {\n                var len = instanceType.implementsList.length;\n\n                for (var i = 0; i < len; i++) {\n                    var interfaceType = instanceType.implementsList[i];\n                    var comparisonInfo = new TypeComparisonInfo();\n                    if (!this.checker.sourceIsSubtypeOfTarget(instanceType, interfaceType, comparisonInfo)) {\n                        var emsg = "Class \'" + instanceType.getTypeName() +\n                              "\' declares interface \'" + interfaceType.getTypeName() +\n                              "\' but does not implement it";\n                        if (!comparisonInfo.message) {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg);\n                        }\n                        else {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg + ": " + comparisonInfo.message);\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheckBaseCalls(bases: ASTList) {\n            if (bases == null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType == NodeType.Call) {\n                    this.typeCheckNew(baseExpr);\n                }\n            }\n        }\n\n        public assertUniqueNamesInBaseTypes(names: IHashTable, type: Type, classDecl: InterfaceDeclaration, checkUnique: bool): void {\n            if (type) {\n                if (type.members) {\n                    type.members.publicMembers.map((key, s, c) => {\n                        var sym = <Symbol>s;\n                        var dup = names.lookup(sym.name);\n                        if (dup) {\n                            if (checkUnique) {\n                                this.checker.errorReporter.simpleError(classDecl,\n                                                                  "duplicate member name in bases for " + classDecl.name.actualText + ": " + type.symbol.name + " and " + dup.container.name + " both contain member with name " + sym.name);\n                            }\n                        }\n                        else {\n                            names.add(sym.name, sym);\n                        }\n                    }, null);\n                }\n                if (type.extendsList) {\n                    var len = type.extendsList.length;\n                    for (var i = 0; i < len; i++) {\n                        if (!(type.extendsList[i].symbol.flags & SymbolFlags.RecursivelyReferenced)) {\n                            this.assertUniqueNamesInBaseTypes(names, type.extendsList[i], classDecl, checkUnique);\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkBaseTypeMemberInheritance(derivedType: Type, derivedTypeDecl: AST): void {\n            var instanceType = derivedType.getInstanceType();\n            if (instanceType.extendsList == null) {\n                return;\n            }\n\n            var len = instanceType.extendsList.length;\n            if (len > 0) {\n                var names = new StringHashTable();\n                if (instanceType.isClassInstance()) {\n                    for (var i = 0; i < len; i++) {\n                        this.assertUniqueNamesInBaseTypes(names, instanceType.extendsList[i], <InterfaceDeclaration>derivedTypeDecl, i > 0);\n                    }\n                }\n\n                if (instanceType.members) {\n                    instanceType.members.publicMembers.map((key, s, c) => {\n                        var sym = <Symbol>s;\n                        for (var j = 0; j < len; j++) {\n                            var base = instanceType.extendsList[j];\n                            if (base.memberScope == null) {\n                                this.checker.errorReporter.simpleError(derivedTypeDecl, "Base type \'" + base.symbol.name + "\' lacks an implementation.")\n                            }\n                            else {\n                                var bSym = base.memberScope.find(sym.name, false, false);\n                                if (bSym) {\n                                    var aType = sym.getType();\n                                    var bType = bSym.getType();\n                                    if (!(this.checker.sourceIsSubtypeOfTarget(aType, bType))) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          "Type of overridden member \'" + sym.name + "\' is not subtype of original member defined by type \'" + bSym.container.name + "\'");\n                                    }\n                                    else if ((sym.kind() == SymbolKind.Type) &&\n                                             (bSym.kind() == SymbolKind.Field)) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          "Cannot override field \'" + sym.name + "\' with method");\n                                    }\n                                }\n                            }\n                        }\n                    }, null);\n                }\n            }\n        }\n\n        public typeCheckClass(classDecl: ClassDeclaration): ClassDeclaration {\n            var typeSymbol = <TypeSymbol>classDecl.type.symbol;\n\n            if (typeSymbol.typeCheckStatus == TypeCheckStatus.Finished) {\n                return classDecl;\n            }\n            else if (typeSymbol.typeCheckStatus == TypeCheckStatus.Started) {\n                // REVIEW: report this recursion\n                //checker.errorReporter.recursionRequiresTypeAnnotation(classDecl);\n                return classDecl;\n            }\n            else {\n                typeSymbol.typeCheckStatus = TypeCheckStatus.Started;\n                this.checker.addStartedPTO(typeSymbol);\n            }\n\n            var prevScope = this.scope;\n            var svClassNode = this.thisClassNode;\n            this.thisClassNode = classDecl;\n            var classType = classDecl.type;\n            this.typeCheckBases(classType.instanceType);\n\n            this.typeCheckBaseListPrivacy(classDecl.extendsList, typeSymbol, true);\n            this.typeCheckBaseListPrivacy(classDecl.implementsList, typeSymbol, false);\n\n            var prevThisType = this.thisType;\n            this.thisType = classType.instanceType;\n            this.scope = classType.instanceType.containedScope;\n\n            // Add the constructor locals, if necessary\n            if (classDecl.constructorDecl) {\n                this.scope = classType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                var funcTable = ssb.valueMembers.allMembers;\n\n                this.addConstructorLocalArgs(classDecl.constructorDecl.type.symbol, classDecl.constructorDecl.arguments, funcTable, true);\n            }\n\n            this.typeCheck(classDecl.members);\n            typeSymbol.typeCheckStatus = TypeCheckStatus.Finished;\n            this.checkBaseTypeMemberInheritance(classType, classDecl);\n            this.checkMembersImplementInterfaces(classType);\n\n            this.typeCheckOverloadSignatures(classType, classDecl);\n            this.typeCheckOverloadSignatures(classType.instanceType, classDecl);\n\n            // if the class has no declared constructor, adapt its base class\'s signature group, if necessary\n            if (!classDecl.constructorDecl) {\n                if (classDecl.extendsList &&\n                    classDecl.extendsList.members.length &&\n                    classDecl.extendsList.members[0].type &&\n                    classDecl.extendsList.members[0].type.symbol.type.isClass()) {\n                    cloneParentConstructGroupForChildType(classDecl.type, classDecl.extendsList.members[0].type.symbol.type);\n                }\n            }\n\n            this.thisType = prevThisType;\n            this.thisClassNode = svClassNode;\n            this.scope = prevScope;\n            return classDecl;\n        }\n\n        public typeCheckOverloadSignatures(type: Type, ast: AST) {\n            if (type.call) {\n                type.call.typeCheck(this.checker, ast, type.construct != null);\n            }\n            if (type.construct) {\n                type.construct.typeCheck(this.checker, ast, false);\n            }\n            if (type.index) {\n                type.index.typeCheck(this.checker, ast, false);\n            }\n        }\n\n        public typeCheckInterface(interfaceDecl: InterfaceDeclaration): InterfaceDeclaration {\n            // overloads will be typechecked inline by the members\n            //this.typeCheckOverloadSignatures(interfaceDecl.type, interfaceDecl);\n            this.typeCheckBases(interfaceDecl.type);\n            this.typeCheckBaseListPrivacy(interfaceDecl.extendsList, interfaceDecl.type.symbol, true);\n            this.typeCheck(interfaceDecl.members);\n            this.checkBaseTypeMemberInheritance(interfaceDecl.type, interfaceDecl);\n\n            // propagate base type signatures\n            if (interfaceDecl.extendsList) {\n                for (var i = 0; i < interfaceDecl.extendsList.members.length; i++) {\n                    if (interfaceDecl.extendsList.members[i].type.call) {\n                        if (interfaceDecl.type.call) {\n                            interfaceDecl.type.call.signatures = interfaceDecl.type.call.signatures.concat(interfaceDecl.extendsList.members[i].type.call.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.call = interfaceDecl.extendsList.members[i].type.call;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.construct) {\n                        if (interfaceDecl.type.construct) {\n                            interfaceDecl.type.construct.signatures = interfaceDecl.type.construct.signatures.concat(interfaceDecl.extendsList.members[i].type.construct.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.construct = interfaceDecl.extendsList.members[i].type.construct;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.index) {\n                        if (interfaceDecl.type.index) {\n                            interfaceDecl.type.index.signatures = interfaceDecl.type.index.signatures.concat(interfaceDecl.extendsList.members[i].type.index.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.index = interfaceDecl.extendsList.members[i].type.index;\n                        }\n                    }\n                }\n            }\n\n            return interfaceDecl;\n        }\n\n        public typeCheckImportDecl(importDecl: ImportDeclaration) {\n            var mod: ModuleType = <ModuleType>importDecl.alias.type;\n            var sym: TypeSymbol = null;\n            var prevInImportTC = this.inImportTypeCheck;\n            this.inImportTypeCheck = true;\n\n            this.typeCheck(importDecl.alias);\n            mod = <ModuleType>importDecl.alias.type;\n\n            if (mod == null) {\n                this.checker.errorReporter.simpleError(importDecl.alias, "Could not resolve module alias \'" + importDecl.id.actualText + "\'");\n                mod = <ModuleType>this.checker.anyType;\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n            }\n\n            importDecl.id.type = mod;\n            sym = mod.symbol;\n\n            if (!mod.isModuleType()) {\n                this.checker.errorReporter.simpleError(importDecl.alias, "A module cannot be aliased to a non-module type");\n            }\n            else {\n                sym.type = mod;\n                \n                // Add the imported module to the AMD dependency list\n                if (this.checker.typeFlow.currentScript && \n                    this.checker.typeFlow.currentScript.topLevelMod && \n                    this.checker.typeFlow.currentScript.topLevelMod.mod) \n                {\n                    this.checker.typeFlow.currentScript.topLevelMod.mod.importedModules.push(importDecl);\n                }\n\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n\n                if (mod.symbol && mod.symbol.declAST) {\n                    (<ModuleDeclaration>mod.symbol.declAST).modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;\n                }\n\n                //importDecl.id.sym = sym;\n                // REVIEW: Uncomment when you can toggle module codegen targets from the language service\n                //else if (typeFlow.checker.currentModDecl == null && \n                //            hasFlag((<ModuleDecl>sym.declAST).modFlags,ModuleFlags.IsDynamic) &&\n                //            moduleGenTarget == ModuleGenTarget.Asynchronous) \n                //{\n                //    typeFlow.checker.errorReporter.simpleError(alias, "In AMD codegen mode, dynamic modules may not be referenced from global scope.  (Wrap the file in a module declaration.)");\n                //}\n            }\n            this.inImportTypeCheck = prevInImportTC;\n            return importDecl;\n        }\n\n        public typeCheckModule(moduleDecl: ModuleDeclaration): ModuleDeclaration {\n\n            // In some really nasty cases of error recovery, we may not have a type\n            if (!moduleDecl.mod) {\n                return moduleDecl;\n            }\n\n            if (this.currentScript) {\n                this.currentScript.requiresGlobal = true;\n            }\n            var mod = moduleDecl.mod;\n            var sym: TypeSymbol = null;\n\n            var prevScope = this.scope;\n            var prevThisType = this.thisType;\n            var prevCurrentModDecl = this.checker.currentModDecl;\n            this.checker.currentModDecl = moduleDecl;\n\n            this.thisType = null;\n            this.scope = mod.containedScope;\n            this.typeCheck(moduleDecl.members);\n            sym = mod.symbol;\n\n            this.checker.currentModDecl = prevCurrentModDecl;\n            this.thisType = prevThisType;\n            this.scope = prevScope;\n\n            moduleDecl.type = mod;\n\n            if (sym) {\n                sym.typeCheckStatus = TypeCheckStatus.Finished;\n            }\n            return moduleDecl;\n        }\n\n        public typeCheckFor(forStmt: ForStatement): ForStatement {\n            forStmt.init = this.typeCheck(forStmt.init);\n            this.nestingLevel++;\n            forStmt.cond = this.typeCheck(forStmt.cond);\n            this.typeCheckCondExpr(forStmt.cond);\n            forStmt.incr = this.typeCheck(forStmt.incr);\n            this.nestingLevel--;\n            forStmt.body = this.typeCheck(forStmt.body);\n            this.typeCheckCompoundStmtBlock(forStmt.body, "for statement");\n            forStmt.type = this.voidType;\n            return forStmt;\n        }\n\n        public typeCheckWith(withStmt: WithStatement): WithStatement {\n            if (this.checker.errorsOnWith) {\n                this.checker.errorReporter.simpleError(withStmt.expr, "All symbols within a \'with\' block will be typed as \'any\'");\n            }\n            withStmt.expr = this.typeCheck(withStmt.expr);\n            this.checker.inWith = true;\n            withStmt.body = this.typeCheck(withStmt.body);\n            this.typeCheckCompoundStmtBlock(withStmt.body, "with statement");\n            this.checker.inWith = false;\n            return withStmt;\n        }\n\n        public typeCheckForIn(forInStmt: ForInStatement): ForInStatement {\n            forInStmt.obj = this.typeCheck(forInStmt.obj);\n            forInStmt.lval = this.cast(this.typeCheck(forInStmt.lval), this.checker.stringType);\n            if (forInStmt.lval.nodeType == NodeType.VarDecl) {\n\n                var varDecl = <VarDecl>forInStmt.lval;\n                if (varDecl.typeExpr) {\n                    this.checker.errorReporter.simpleError(varDecl, "Variable declarations for for/in expressions may not contain a type annotation");\n                }\n\n                if (varDecl.sym) {\n                    varDecl.sym.setType(this.checker.stringType);\n                }\n            }\n            forInStmt.body = this.typeCheck(forInStmt.body);\n            this.typeCheckCompoundStmtBlock(forInStmt.body, "for in statement");\n            return forInStmt;\n        }\n\n        public typeCheckWhile(whileStmt: WhileStatement): WhileStatement {\n            whileStmt.cond = this.typeCheck(whileStmt.cond);\n            this.typeCheckCondExpr(whileStmt.cond);\n            whileStmt.body = this.typeCheck(whileStmt.body);\n            this.typeCheckCompoundStmtBlock(whileStmt.body, "while statement");\n            whileStmt.type = this.voidType;\n            return whileStmt;\n        }\n\n        public typeCheckDoWhile(doWhileStmt: DoWhileStatement): DoWhileStatement {\n            doWhileStmt.cond = this.typeCheck(doWhileStmt.cond);\n            this.typeCheckCondExpr(doWhileStmt.cond);\n            doWhileStmt.body = this.typeCheck(doWhileStmt.body);\n            this.typeCheckCompoundStmtBlock(doWhileStmt.body, "do while statement");\n            doWhileStmt.type = this.voidType;\n            return doWhileStmt;\n        }\n\n        public typeCheckCondExpr(cond: AST) {\n            if (this.checker.styleSettings.assignmentInCond) {\n                if ((cond !== null) &&\n                    (cond.nodeType >= NodeType.Asg) &&\n                    (cond.nodeType <= NodeType.LastAsg)) {\n                    this.checker.errorReporter.simpleError(cond, "top-level assignment statement in conditional expression");\n                }\n            }\n        }\n\n        public typeCheckCompoundStmtBlock(stmts: AST, stmtType: string) {\n            if (this.checker.styleSettings.blockInCompoundStmt && stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    this.checker.errorReporter.styleError(stmts, stmtType + " requires a block");\n                }\n            }\n        }\n        public typeCheckIf(ifStmt: IfStatement): IfStatement {\n            ifStmt.cond = this.typeCheck(ifStmt.cond);\n            this.typeCheckCondExpr(ifStmt.cond);\n            ifStmt.thenBod = this.typeCheck(ifStmt.thenBod);\n            ifStmt.elseBod = this.typeCheck(ifStmt.elseBod);\n            this.typeCheckCompoundStmtBlock(ifStmt.thenBod, "if statement");\n            this.typeCheckCompoundStmtBlock(ifStmt.elseBod, "if statement");\n            ifStmt.type = this.voidType;\n            return ifStmt;\n        }\n\n        public typeFromAccessorFuncDecl(funcDecl: FuncDecl) {\n            if (!funcDecl.isAccessor()) {\n                return null;\n            }\n\n            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                return funcDecl.type.call.signatures[0].returnType.type;\n            }\n            else {\n                return funcDecl.type.call.signatures[0].parameters[0].getType();\n            }\n        }\n\n        public typeCheckObjectLit(objectLit: UnaryExpression): void {\n\n            var resultType = new Type();\n            resultType.symbol = new TypeSymbol(this.checker.anon, objectLit.minChar,\n                                             objectLit.limChar - objectLit.minChar,\n                                             this.checker.locationInfo.unitIndex,\n                                             resultType);\n\n            resultType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            resultType.memberScope = new SymbolTableScope(resultType.members, null, null, null, null);\n\n            var aggScope = new SymbolAggregateScope(resultType.symbol);\n            aggScope.addParentScope(resultType.memberScope);\n            aggScope.addParentScope(this.scope);\n            resultType.containedScope = aggScope;\n            var memberDecls = <ASTList>objectLit.operand;\n            var prevThisType = this.thisType;\n            var acceptTargetType = false;\n            var targetType: Type = null;\n\n            if (this.checker.hasTargetType()) {\n                targetType = this.checker.getTargetTypeContext().contextualType;\n\n                if (targetType && targetType.symbol && !this.checker.typeStatusIsFinished(targetType.symbol.typeCheckStatus)) {\n                    if (targetType.symbol.declAST) {\n                        this.typeCheck(targetType.symbol.declAST);\n                    }\n                }\n                acceptTargetType = true;\n            }\n\n            if (memberDecls) {\n                for (var i = 0, len = memberDecls.members.length; i < len; i++) {\n\n                    var binex = <BinaryExpression>memberDecls.members[i];\n\n                    var id = binex.operand1;\n                    var text: string;\n                    var targetMember: Symbol = null;\n                    var fieldSymbol: FieldSymbol = null;\n\n                    if (id.nodeType == NodeType.Name) {\n                        text = (<Identifier>id).text;\n                    }\n                    else if (id.nodeType == NodeType.QString) {\n                        // TODO: set text to unescaped string\n                        var idText = (<StringLiteral>id).text;\n                        text = idText.substring(1, idText.length - 1);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(objectLit,\n                                                          "malformed object literal");\n                        resultType = this.anyType;\n                        break;\n                    }\n\n                    if (acceptTargetType && targetType.memberScope) {\n                        targetMember = targetType.memberScope.find(text, false, false);\n                    }\n\n                    // before typechecking an accessor function member, we need to initialize its accessor symbol\n                    if (binex.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>binex.operand2).isAccessor()) {\n\n                        var funcDecl = <FuncDecl>binex.operand2;\n                        var accessorSym: FieldSymbol = resultType.members.publicMembers.lookup(text);\n\n                        accessorSym = this.checker.createAccessorSymbol(funcDecl, accessorSym, resultType, true, false, resultType.memberScope, null);\n                        funcDecl.accessorSymbol = accessorSym;\n                        fieldSymbol = accessorSym;\n                        if (id.nodeType == NodeType.Name) {\n                            (<Identifier>id).sym = accessorSym;\n                        }\n                    }\n\n                    this.checker.typeCheckWithContextualType(acceptTargetType && targetMember ? targetMember.getType() : null, false, acceptTargetType, binex.operand2);\n\n                    if (acceptTargetType && targetMember) {\n                        // Note that we accept \'any\' in place of a valid subtype                     \n                        if ((binex.operand2.type == this.anyType || this.checker.sourceIsAssignableToTarget(binex.operand2.type, targetMember.getType())) ||\n                            (binex.operand2.nodeType == NodeType.FuncDecl &&\n                            (<FuncDecl>binex.operand2).isAccessor() &&\n                                this.typeFromAccessorFuncDecl(<FuncDecl>binex.operand2) == targetMember.getType())) {\n                                    // set the field type to the proper contextual type\n                                    // this is especially important in the \'any\' case, so that\n                                    // fields typed to \'any\' aren\'t accepted for contextual typing,\n                                    // but never properly set to the target type\n                            binex.operand1.type = targetMember.getType();\n                        }\n                    }\n                    else {\n                        // here we sub in \'any\' for \'undefined\' to account for field initialization to\n                        // \'undefined\'  \n                        binex.operand2.type = binex.operand2.type == this.checker.undefinedType ? this.anyType : binex.operand2.type;\n                    }\n\n                    // the field symbol hasn\'t been set by a getter or setter\n                    if (fieldSymbol == null) {\n                        var memberType = binex.operand2.type;\n                        var field = new ValueLocation();\n                        fieldSymbol =\n                            new FieldSymbol(text, id.minChar,\n                                            this.checker.locationInfo.unitIndex,\n                                            true, field);\n                        fieldSymbol.flags |= SymbolFlags.Property;\n                        field.symbol = fieldSymbol;\n                        fieldSymbol.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        field.typeLink = new TypeLink();\n                        field.typeLink.type = memberType;\n                        resultType.members.publicMembers.add(text, fieldSymbol);\n                    }\n                    fieldSymbol.isObjectLitField = true;\n                }\n            }\n\n            this.thisType = prevThisType;\n            objectLit.type = resultType;\n            if (targetType) {\n                objectLit.targetType = targetType;\n            }\n        }\n\n        public typeCheckArrayLit(arrayLit: UnaryExpression): void {\n            var elements = <ASTList>arrayLit.operand;\n            var elementType = this.anyType;\n            var targetElementType: Type = null;\n            var comparisonInfo = new TypeComparisonInfo();\n            comparisonInfo.onlyCaptureFirstError = true;\n\n            // if the target type is an array type, extract the element type\n            if (this.checker.hasTargetType()) {\n                var targetType = this.checker.getTargetTypeContext().contextualType;\n                if (targetType.elementType) {\n                    targetElementType = targetType.elementType;\n                }\n            }\n\n            if (elements) {\n\n                var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;\n\n                this.inArrayElementTypeCheck = true;\n                this.checker.typeCheckWithContextualType(targetElementType, this.checker.inProvisionalTypecheckMode(), targetElementType != null, elements);\n                this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;\n\n                elementType = elements.members[0].type;\n\n                var collection: ITypeCollection = {\n                    getLength: () => { return elements.members.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { elements.members[index].type = type; },\n                    getTypeAtIndex: (index: number) => { return elements.members[index].type; }\n                }\n\n                elementType = this.checker.findBestCommonType(elementType, targetElementType, collection, false, comparisonInfo);\n\n                // if the array type is the undefined type, we should widen it to any\n                // if it\'s of the null type, only widen it if it\'s not in a nested array element, so as not to \n                // short-circuit any checks for the best common type\n                if (elementType == this.checker.undefinedType || (!prevInArrayElemTypeCheck && elementType == this.nullType)) {\n                    elementType = this.anyType;\n                }\n            }\n            if (!elementType) {\n                var emsg = "Incompatible types in array literal expression";\n                if (!comparisonInfo.message) {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg);\n                }\n                else {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg + ": " + comparisonInfo.message);\n                }\n                elementType = this.anyType;\n            }\n            else if (targetElementType) {\n                // for the case of zero-length \'any\' arrays, we still want to set the contextual type, if\n                // need be\n                if (this.checker.sourceIsAssignableToTarget(elementType, targetElementType)) {\n                    elementType = targetElementType;\n                }\n            }\n\n            arrayLit.type = this.checker.makeArrayType(elementType);\n\n        }\n\n        public checkForVoidConstructor(type: Type, ast: AST) {\n            if (type &&\n                type.construct &&\n                type.construct.signatures.length > 0) {\n\n                for (var i = 0; i < type.construct.signatures.length; i++) {\n                    if (type.construct.signatures[i].returnType.type == this.checker.voidType) {\n                        this.checker.errorReporter.simpleError(ast, "Constructors may not have a return type of \'void\'");\n                        break;\n                    }\n                }\n            }\n        }\n\n        // REVIEW: the code below could set the signature type of the function to the current return\n        // type, which would have a benefit of reducing the risk of a recursive typecheck scenario, but is\n        // is technically wrong - mergeOrdered will only work properly if the best common supertype\n        // comes before any sibling types.  This would mean that if a function, "color()", returned\n        // three types (in order) - "Red", "Blue", and "IColor", an "Incompatible return type" error \n        // would be triggered.  However, if "color()" returned (in order) "Red", "IColor" and "Blue"\n        // no error would be triggered, and the return type of the function would be "IColor"\n        public typeCheckReturn(returnStmt: ReturnStatement): ReturnStatement {\n\n            if (this.thisFnc) {\n                var targetType: Type = null;\n\n                // determine the target type\n                if (this.checker.hasTargetType()) {\n                    var tcContext = this.checker.getTargetTypeContext();\n                    var accessorType = tcContext.targetAccessorType;\n\n                    if (accessorType) {\n                        targetType = accessorType;\n                    }\n                    else {\n                        var targetSig = this.checker.getTargetTypeContext().targetSig;\n                        if (targetSig && targetSig.returnType.type != this.voidType) {\n                            targetType = targetSig.returnType.type;\n                        }\n                    }\n                }\n\n                if (returnStmt.returnExpression) {\n                    this.thisFnc.fncFlags |= FncFlags.HasReturnExpression;\n\n                    if (targetType == null && this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type && this.thisFnc.returnTypeAnnotation.type != this.voidType) {\n                        targetType = this.thisFnc.returnTypeAnnotation.type;\n                    }\n\n                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), targetType != null, returnStmt.returnExpression);\n\n                    var expectedReturnType: Type =\n                        (this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ?\n                            this.thisFnc.returnTypeAnnotation.type :\n                            targetType;\n                    if (expectedReturnType) {\n                        if (expectedReturnType == this.voidType && returnStmt.returnExpression.type != this.voidType) {\n                            this.checker.errorReporter.simpleError(returnStmt,\n                                                              "Return with value expression in void function");\n\n                            // even though we\'ve raised an error, use the more specific type\n                            returnStmt.type = returnStmt.returnExpression.type;\n                        }\n                        else {\n                            returnStmt.returnExpression = this.cast(returnStmt.returnExpression, expectedReturnType);\n                            returnStmt.type = expectedReturnType;\n                        }\n                    }\n                    else {\n                        if (targetType) {\n                            if (returnStmt.returnExpression.type != this.voidType) {\n                                returnStmt.returnExpression = this.cast(returnStmt.returnExpression, targetType);\n                            }\n                            else {\n                                returnStmt.returnExpression.type = targetType;\n                            }\n                        }\n                        returnStmt.type = returnStmt.returnExpression.type;\n                    }\n                    this.thisFnc.returnStatementsWithExpressions[this.thisFnc.returnStatementsWithExpressions.length] = returnStmt;\n                }\n                else {\n                    returnStmt.type = targetType == null ? this.checker.voidType : targetType; //((this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ? this.thisFnc.returnTypeAnnotation.type : this.checker.voidType) : targetType;\n                }\n            }\n\n            return returnStmt;\n        }\n\n        public typeCheckInstOf(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type == this.checker.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand1.type, this.objectInterfaceType)) &&\n                    (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.functionInterfaceType)))) {\n                this.checker.errorReporter.simpleError(ast, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type");\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckCommaOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public typeCheckLogOr(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                binex.type = this.checker.anyType;\n            }\n            else if (leftType == this.checker.booleanType) {\n                if (rightType == this.checker.booleanType) {\n                    binex.type = this.checker.booleanType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType == this.checker.numberType) {\n                if (rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType == this.checker.stringType) {\n                if (rightType == this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    binex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    binex.type = leftType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            return binex;\n        }\n\n        public typeCheckLogAnd(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public tryAddCandidates(signature: Signature, actuals: Type[], exactCandidates: Signature[], conversionCandidates: Signature[], comparisonInfo: TypeComparisonInfo): void {\n            var lowerBound = signature.nonOptionalParameterCount; // required parameters\n            var upperBound = signature.parameters.length; // required and optional parameters\n            var formalLen = lowerBound;\n            var acceptable = false;\n\n            if ((actuals.length >= lowerBound) && (signature.hasVariableArgList || actuals.length <= upperBound)) {\n                formalLen = (signature.hasVariableArgList ? signature.parameters.length : actuals.length);\n                acceptable = true;\n            }\n\n            var repeatType: Type = null;\n\n            if (acceptable || signature.hasVariableArgList) {\n                // assumed structure here is checked when signature is formed\n                if (signature.hasVariableArgList) {\n                    formalLen -= 1;\n                    repeatType = (<ParameterSymbol>signature.parameters[formalLen]).parameter.typeLink.type;\n                    repeatType = repeatType.elementType;\n                    acceptable = actuals.length >= formalLen;\n                }\n                var len = actuals.length;\n\n                var exact = acceptable;\n                var convert = acceptable;\n                for (var i = 0; i < len; i++) {\n                    var typeA: Type;\n                    if (i < formalLen) {\n                        typeA =\n                            (<ParameterSymbol>signature.parameters[i]).parameter.typeLink.type;\n                    }\n                    else {\n                        typeA = repeatType;\n                    }\n\n                    var typeB = actuals[i];\n                    if (!typeA || !typeB || !(this.checker.typesAreIdentical(typeA, typeB))) {\n                        exact = false;\n                    }\n                    // is the argument assignable to the parameter?\n                    if (!this.checker.sourceIsAssignableToTarget(typeB, typeA, comparisonInfo)) {\n                        convert = false;\n                    }\n                    if (!(exact || convert)) {\n                        break;\n                    }\n                }\n                if (exact) {\n                    exactCandidates[exactCandidates.length] = signature;\n                }\n                else if (convert && (exactCandidates.length == 0)) {\n                    conversionCandidates[conversionCandidates.length] = signature;\n                }\n\n            }\n        }\n\n        public resolveOverload(application: AST, group: SignatureGroup): Signature {\n            var rd = this.resolutionDataCache.getResolutionData();\n            var actuals = rd.actuals;\n            var exactCandidates = rd.exactCandidates;\n            var conversionCandidates = rd.conversionCandidates;\n            var candidate: Signature = null;\n            var hasOverloads = group.signatures.length > 1;\n            var comparisonInfo = new TypeComparisonInfo();\n            var args: ASTList = null;\n            var target: AST = null;\n\n            if (application.nodeType == NodeType.Call || application.nodeType == NodeType.New) {\n                var callEx = <CallExpression>application;\n                args = callEx.arguments;\n                target = callEx.target;\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n                    for (var i = 0; i < len; i++) {\n                        actuals[i] = callEx.arguments.members[i].type;\n                    }\n                }\n            }\n            else if (application.nodeType == NodeType.Index) {\n                var binExp = <BinaryExpression>application;\n                target = binExp.operand1;\n                args = new ASTList();\n                args.members[0] = binExp.operand2;\n                actuals[0] = binExp.operand2.type;\n            }\n\n            for (var j = 0, groupLen = group.signatures.length; j < groupLen; j++) {\n                var signature = group.signatures[j];\n                if (hasOverloads && signature == group.definitionSignature && !this.checker.canCallDefinitionSignature) {\n                    continue;\n                }\n                if (!signature.returnType.type && signature.declAST &&\n                    (signature.typeCheckStatus != TypeCheckStatus.Finished)) {\n                    this.typeCheckFunction(signature.declAST);\n                }\n                this.tryAddCandidates(signature, actuals, exactCandidates, conversionCandidates, comparisonInfo);\n            }\n            if (exactCandidates.length == 0) {\n\n                var applicableCandidates = this.checker.getApplicableSignatures(conversionCandidates, args, comparisonInfo);\n                if (applicableCandidates.length > 0) {\n                    var candidateInfo = this.checker.findMostApplicableSignature(applicableCandidates, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorReporter.simpleError(target, "Ambiguous call expression - could not choose overload");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    var emsg = "Supplied parameters do not match any signature of call target";\n                    if (comparisonInfo.message) {\n                        this.checker.errorReporter.simpleError(target, emsg + ":\\n\\t" + comparisonInfo.message);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(target, emsg);\n                    }\n                }\n            }\n            else {\n                if (exactCandidates.length > 1) {\n                    var applicableSigs: ApplicableSignature[] = [];\n                    for (var i = 0; i < exactCandidates.length; i++) {\n                        applicableSigs[i] = { signature: exactCandidates[i], hadProvisionalErrors: false };\n                    }\n                    var candidateInfo = this.checker.findMostApplicableSignature(applicableSigs, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorReporter.simpleError(target, "Ambiguous call expression - could not choose overload");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    candidate = exactCandidates[0];\n                }\n            }\n\n            this.resolutionDataCache.returnResolutionData(rd);\n            return candidate;\n        }\n\n        public typeCheckNew(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n\n            callEx.target = this.typeCheck(callEx.target);\n            var target = callEx.target;\n            if (target.type.construct || target.type.call) {\n                this.preTypeCheckCallArgs(callEx.arguments);\n            }\n            else {\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n\n            if (target.type == this.anyType) {\n                callEx.type = this.anyType;\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n            else {\n                if (target.type.construct) {\n                    var signature = this.resolveOverload(callEx, target.type.construct);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if (signature.returnType.type == this.voidType) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else if (target.type.call) {\n                    var signature = this.resolveOverload(callEx, target.type.call);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if ((signature.returnType.type == this.voidType) || (signature.returnType.type == this.anyType)) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(callEx.target,\n                           "new expression only valid on constructors");\n                    }\n                }\n                else if (target.type.elementType) {\n                    callEx.type = target.type;\n                }\n                else {\n                    this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    callEx.type = this.anyType;\n                }\n            }\n\n            this.postTypeCheckCallArgs(callEx);\n\n            return callEx;\n        }\n\n        // Typecheck all args that cannot be affected by contextual typing of overloads\n        public preTypeCheckCallArgs(args: ASTList) {\n\n            if (!args) {\n                return;\n            }\n\n            for (var i = 0; i < args.members.length; i++) {\n                switch (args.members[i].nodeType) {\n                    case NodeType.FuncDecl:\n                    case NodeType.ObjectLit:\n                    case NodeType.ArrayLit:\n                        continue;\n                    default:\n                        this.typeCheck(args.members[i]);\n                        break;\n                }\n            }\n        }\n\n        public postTypeCheckCallArgs(callEx: CallExpression) {\n\n            var acceptedTargetType = false;\n            var i = 0;\n\n            if (callEx.target &&\n                callEx.target.type &&\n                callEx.signature &&\n                callEx.arguments) {\n                var sig = callEx.signature;\n\n                if (sig && callEx.arguments.members.length >= sig.nonOptionalParameterCount) {\n                    acceptedTargetType = true;\n                    var targetType: Type = null;\n                    var nonVarArgFormalParamLength = sig.hasVariableArgList ? sig.parameters.length - 1 : sig.parameters.length;\n                    var nonVarArgActualParamLength = callEx.arguments.members.length < nonVarArgFormalParamLength ? callEx.arguments.members.length : nonVarArgFormalParamLength\n\n                    for (i = 0; i < nonVarArgActualParamLength; i++) {\n                        targetType = sig.parameters[i].getType();\n                        switch (callEx.arguments.members[i].nodeType) {\n                            case NodeType.FuncDecl:\n                            case NodeType.ObjectLit:\n                            case NodeType.ArrayLit:\n                                this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), !sig.parameters[i].declAST.isParenthesized, callEx.arguments.members[i]);\n                                break;\n                        }\n                    }\n\n                    if (sig.hasVariableArgList) {\n                        var varArgParamIndex = sig.nonOptionalParameterCount - 1;\n                        targetType = sig.parameters[varArgParamIndex].getType();\n                        if (targetType) {\n                            targetType = targetType.elementType;\n                        }\n                        var isParenthesized = !sig.parameters[varArgParamIndex].declAST.isParenthesized;\n                        for (i = nonVarArgActualParamLength; i < callEx.arguments.members.length; i++) {\n                            switch (callEx.arguments.members[i].nodeType) {\n                                case NodeType.FuncDecl:\n                                case NodeType.ObjectLit:\n                                case NodeType.ArrayLit:\n                                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), isParenthesized, callEx.arguments.members[i]);\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!acceptedTargetType && callEx.arguments) {\n                this.checker.killCurrentContextualType();\n\n                for (i = 0; i < callEx.arguments.members.length; i++) {\n                    switch (callEx.arguments.members[i].nodeType) {\n                        case NodeType.FuncDecl:\n                        case NodeType.ObjectLit:\n                        case NodeType.ArrayLit:\n                            this.typeCheck(callEx.arguments.members[i]);\n                            break;\n                        default:\n                            continue;\n                    }\n                }\n            }\n        }\n\n        public typeCheckCall(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n            if (this.checker.styleSettings.newMustBeUsed && (ast.nodeType == NodeType.New)) {\n                if (hasFlag(ast.flags, ASTFlags.IsStatement)) {\n                    this.checker.errorReporter.styleError(ast, "use of new expression as a statement");\n                }\n            }\n            else if ((!this.checker.styleSettings.evalOK) && (ast.nodeType == NodeType.Call)) {\n                if ((callEx.target.nodeType == NodeType.Name) && ((<Identifier>callEx.target).text == "eval")) {\n                    this.checker.errorReporter.styleError(callEx, "eval not permitted");\n                }\n            }\n\n            if (callEx.target.nodeType == NodeType.FuncDecl) {\n                (<FuncDecl>callEx.target).isInlineCallLiteral = true;\n            }\n\n            var prevInSuperCall = this.inSuperCall;\n\n            if (callEx.target.nodeType == NodeType.Super) {\n                this.inSuperCall = true;\n            }\n\n            callEx.target = this.typeCheck(callEx.target);\n            this.preTypeCheckCallArgs(callEx.arguments);\n\n            var target = callEx.target;\n\n            if ((target.type == null) || (target.type == this.anyType) || (this.functionInterfaceType && target.type == this.functionInterfaceType)) {\n                callEx.type = this.anyType;\n            }\n            else {\n                var fnType = target.type;\n                if (fnType.call) {\n                    var signature = this.resolveOverload(callEx, fnType.call);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else {\n                    // track calls to class base class\n                    if (callEx.target.nodeType == NodeType.Super &&\n                        this.thisFnc &&\n                        this.thisFnc.isConstructor &&\n                        hasFlag(this.thisFnc.fncFlags, FncFlags.ClassMethod)) {\n\n                            // Need to use the class type for the construct signature, not the instance type\n                        var signature = fnType.symbol.type.construct ? this.resolveOverload(callEx, fnType.symbol.type.construct) : null;\n\n                        if (signature == null) {\n                            callEx.type = this.anyType;\n                        }\n                        else {\n                            callEx.flags |= ASTFlags.ClassBaseConstructorCall;\n                            callEx.type = signature.returnType.type;\n                            callEx.signature = signature;\n                        }\n                    }\n                    else {\n                        callEx.type = this.anyType;\n                        this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    }\n                }\n            }\n            this.postTypeCheckCallArgs(callEx);\n\n            this.inSuperCall = prevInSuperCall;\n\n            return callEx;\n        }\n\n        public assignScopes(ast: AST) {\n            var script = <Script>ast;\n            this.checker.locationInfo = script.locationInfo;\n            var globalChain = new ScopeChain(this.checker.gloMod, null, this.globalScope);\n            var context = new AssignScopeContext(globalChain, this, [this.checker.currentModDecl]);\n            getAstWalkerFactory().walk(ast, preAssignScopes, postAssignScopes, null, context);\n        }\n\n        public findMemberScope(enclosingScopeContext: EnclosingScopeContext, matchFlag: ASTFlags) {\n            var enclosingScope = enclosingScopeContext.getScope();\n            var pos = enclosingScopeContext.pos - enclosingScopeContext.getScriptFragmentPosition();\n            var scriptFragment = enclosingScopeContext.getScriptFragment();\n\n            var memContext = new MemberScopeContext(this, pos, matchFlag);\n            memContext.scope = enclosingScope;\n            if (scriptFragment.nodeType == NodeType.Name) {\n                return scriptFragment.type.getMemberScope(this);\n            }\n            else {\n                getAstWalkerFactory().walk(scriptFragment, preFindMemberScope, null, null, memContext);\n                if (memContext.ast && enclosingScopeContext.enclosingClassDecl && memContext.ast.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {\n                    enclosingScopeContext.publicsOnly = false;\n                }\n                if (memContext.type) {\n                    return memContext.type.getMemberScope(this);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n\n        public findMemberScopeAt(enclosingScopeContext: EnclosingScopeContext) {\n            return this.findMemberScope(enclosingScopeContext, ASTFlags.DotLHS);\n        }\n\n        public findMemberScopeAtFullAst(enclosingScopeContext: EnclosingScopeContext) {\n            var matchFlag = ASTFlags.DotLHS;\n            var pos = enclosingScopeContext.pos;\n            var astResult: AST = null;\n\n            var preFindMemberScopeFullAst = function (ast: AST, parent: AST, walker: IAstWalker) {\n                if (isValidAstNode(ast)) {\n                    // Note: pos == ast.limChar       in case of incomplete code (e.g. "foo.")\n                    // Note: (pos - 1) == ast.limChar in case of complete code (e.g. "foo.bar")\n                    if (hasFlag(ast.flags, matchFlag) && (pos == ast.limChar || (pos - 1) == ast.limChar)) {\n                        astResult = ast;\n                        walker.options.stopWalk();\n                    }\n\n                    // Stop traversal if range does not contain position\n                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);\n                }\n                return ast;\n            }\n\n            var preFindMemberScopeFullAstFuzy = function (ast: AST, parent: AST, walker: IAstWalker) {\n                if (isValidAstNode(ast)) {\n                    if (hasFlag(ast.flags, matchFlag) && ((ast.minChar < pos) && (pos <= ast.limChar))) {\n                        astResult = ast;\n                    }\n\n                    // Stop traversal if range does not contain position\n                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);\n                }\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAst);\n\n            if (astResult == null) {\n                // Perform a more "fusy" match. This is because the limChar of AST nodes is sometimes\n                // not what we expect, for example:\n                //   foo./*comment*/;\n                // In this case, limChar points to ";" instead of "." (because of the trailing comment).\n                getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAstFuzy);\n            }\n\n            if (astResult &&\n                enclosingScopeContext.enclosingClassDecl &&\n                astResult.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {\n                enclosingScopeContext.publicsOnly = false;\n            }\n\n            if (astResult && astResult.type) {\n                return astResult.type.getMemberScope(this);\n            }\n            else {\n                return null;\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'diagnostics.ts\' />\n///<reference path=\'flags.ts\' />\n///<reference path=\'nodeTypes.ts\' />\n///<reference path=\'hashTable.ts\' />\n///<reference path=\'ast.ts\' />\n///<reference path=\'astWalker.ts\' />\n///<reference path=\'astWalkerCallback.ts\' />\n///<reference path=\'astPath.ts\' />\n///<reference path=\'astLogger.ts\' />\n///<reference path=\'binder.ts\' />\n///<reference path=\'base64.ts\' />\n///<reference path=\'sourceMapping.ts\' />\n///<reference path=\'emitter.ts\' />\n///<reference path=\'errorReporter.ts\' />\n///<reference path=\'parser.ts\' />\n///<reference path=\'printContext.ts\' />\n///<reference path=\'scanner.ts\' />\n///<reference path=\'scopeAssignment.ts\' />\n///<reference path=\'scopeWalk.ts\' />\n///<reference path=\'signatures.ts\' />\n///<reference path=\'symbols.ts\' />\n///<reference path=\'symbolScope.ts\' />\n///<reference path=\'tokens.ts\' />\n///<reference path=\'typeChecker.ts\' />\n///<reference path=\'typeCollection.ts\' />\n///<reference path=\'typeFlow.ts\' />\n///<reference path=\'types.ts\' />\n///<reference path=\'pathUtils.ts\' />\n///<reference path=\'referenceResolution.ts\' />\n///<reference path=\'precompile.ts\' />\n///<reference path=\'incrementalParser.ts\' />\n///<reference path=\'declarationEmitter.ts\' />\n\nmodule TypeScript {\n\n    export enum UpdateUnitKind {\n        Unknown,\n        NoEdits,\n        EditsInsideSingleScope,\n    }\n\n    export class ScriptEditRange {\n        constructor (public minChar: number,\n                     public limChar: number,\n                     public delta: number) { }\n\n        static unknown(): ScriptEditRange {\n            return new ScriptEditRange(-1, -1, -1);\n        }\n\n        public isUnknown() {\n            return this.minChar === -1 && this.limChar === -1 && this.delta === -1;\n        }\n\n        public containsPosition(pos: number) {\n            return (this.minChar <= pos && pos < this.limChar)\n                || (this.minChar <= pos && pos < this.limChar + this.delta);\n        }\n\n        public toString(): string {\n            return "editRange(minChar=" + this.minChar + ", limChar=" + this.limChar + ", delta=" + this.delta + ")";\n        }\n    }\n\n    export class UpdateUnitResult {\n\n        constructor (public kind: UpdateUnitKind, public unitIndex: number, public script1: Script, public script2: Script) { }\n\n        public scope1: AST = null;\n        public scope2: AST = null;\n        public editRange: ScriptEditRange = null;\n        public parseErrors: ErrorEntry[] = [];\n\n        static noEdits(unitIndex: number) {\n            return new UpdateUnitResult(UpdateUnitKind.NoEdits, unitIndex, null, null);\n        }\n\n        static unknownEdits(script1: Script, script2: Script, parseErrors: ErrorEntry[]) {\n            var result = new UpdateUnitResult(UpdateUnitKind.Unknown, script1.locationInfo.unitIndex, script1, script2);\n            result.parseErrors = parseErrors;\n            return result;\n        }\n\n        static singleScopeEdits(script1: Script, script2: Script, scope1: AST, scope2: AST, editRange: ScriptEditRange, parseErrors: ErrorEntry[]) {\n            var result = new UpdateUnitResult(UpdateUnitKind.EditsInsideSingleScope, script1.locationInfo.unitIndex, script1, script2);\n            result.scope1 = scope1;\n            result.scope2 = scope2;\n            result.editRange = editRange;\n            result.parseErrors = parseErrors;\n            return result;\n        }\n    }\n\n    export class ErrorEntry {\n        constructor (public unitIndex: number,\n                    public minChar: number,\n                    public limChar: number,\n                    public message: string) { }\n    }\n\n    export var defaultSettings = new CompilationSettings();\n\n    export interface EmitterIOHost {\n        // function that can even create a folder structure if needed\n        createFile(path: string, useUTF8?: bool): ITextWriter;\n\n        // function to check if file exists on the disk\n        fileExists(path: string): bool;\n\n        // Function to check if the directory exists on the disk\n        directoryExists(path: string): bool;\n\n        // Resolves the path\n        resolvePath(path: string): string;\n    }\n\n    export class TypeScriptCompiler {\n        public parser = new Parser();\n        public typeChecker: TypeChecker;\n        public typeFlow: TypeFlow = null;\n        public scripts = new ASTList();\n        public units: LocationInfo[] = new LocationInfo[];\n        public errorReporter: ErrorReporter;\n\n        public persistentTypeState: PersistentGlobalTypeState;\n\n\n        public emitSettings: EmitOptions;\n\n        constructor (public errorOutput: ITextWriter, public logger: ILogger = new NullLogger(), public settings: CompilationSettings = defaultSettings) {\n            this.errorReporter = new ErrorReporter(this.errorOutput);\n            this.persistentTypeState = new PersistentGlobalTypeState(this.errorReporter);\n            this.errorReporter.parser = this.parser;\n            this.initTypeChecker(this.errorOutput);\n\n            this.parser.style_requireSemi = this.settings.styleSettings.requireSemi;\n            this.parser.style_funcInLoop = this.settings.styleSettings.funcInLoop;\n            this.parser.inferPropertiesFromThisAssignment = this.settings.inferPropertiesFromThisAssignment;\n            this.emitSettings = new EmitOptions(this.settings);\n            codeGenTarget = settings.codeGenTarget;\n        }\n\n        public timeFunction(funcDescription: string, func: () => any): any {\n            return TypeScript.timeFunction(this.logger, funcDescription, func);\n        }\n\n        public initTypeChecker(errorOutput: ITextWriter) {\n            // The initial "refresh" initializes the persistent type state\n            this.persistentTypeState.refreshPersistentState();\n            this.typeChecker = new TypeChecker(this.persistentTypeState);\n            this.typeChecker.errorReporter = this.errorReporter;\n\n            // REVIEW: These properties should be moved out of the typeCheck object\n            // ideally, CF should be a separate pass, independent of control flow\n            this.typeChecker.checkControlFlow = this.settings.controlFlow;\n            this.typeChecker.checkControlFlowUseDef = this.settings.controlFlowUseDef;\n            this.typeChecker.printControlFlowGraph = this.settings.printControlFlow;\n\n            this.typeChecker.errorsOnWith = this.settings.errorOnWith;\n            this.typeChecker.styleSettings = this.settings.styleSettings;\n            this.typeChecker.canCallDefinitionSignature = this.settings.canCallDefinitionSignature;\n\n            this.errorReporter.checker = this.typeChecker;\n            this.setErrorOutput(this.errorOutput);\n        }\n\n        public setErrorOutput(outerr) {\n            this.errorOutput = outerr;\n            this.errorReporter.setErrOut(outerr);\n            this.parser.outfile = outerr;\n        }\n\n        public emitCommentsToOutput() {\n            this.emitSettings = new EmitOptions(this.settings);\n        }\n\n        public setErrorCallback(fn: (minChar: number, charLen: number, message: string,\n            unitIndex: number) =>void ) {\n            this.parser.errorCallback = fn;\n        }\n\n        public updateUnit(prog: string, filename: string, setRecovery: bool) {\n            return this.updateSourceUnit(new StringSourceText(prog), filename, setRecovery);\n        }\n\n        public updateSourceUnit(sourceText: ISourceText, filename: string, setRecovery: bool): bool {\n            return this.timeFunction("updateSourceUnit(" + filename + ")", () => {\n                var updateResult = this.partialUpdateUnit(sourceText, filename, setRecovery);\n                return this.applyUpdateResult(updateResult);\n            });\n        }\n\n        // Apply changes to compiler state.\n        // Return "false" if the change is empty and nothing was updated.\n        public applyUpdateResult(updateResult: UpdateUnitResult): bool {\n            switch (updateResult.kind) {\n                case UpdateUnitKind.NoEdits:\n                    return false;\n\n                case UpdateUnitKind.Unknown:\n                    this.scripts.members[updateResult.unitIndex] = updateResult.script2;\n                    this.units[updateResult.unitIndex] = updateResult.script2.locationInfo;\n                    for (var i = 0, len = updateResult.parseErrors.length; i < len; i++) {\n                        var e = updateResult.parseErrors[i];\n                        if (this.parser.errorCallback) {\n                            this.parser.errorCallback(e.minChar, e.limChar - e.minChar, e.message, e.unitIndex);\n                        }\n                    }\n                    return true;\n\n                case UpdateUnitKind.EditsInsideSingleScope:\n                    new IncrementalParser(this.logger).mergeTrees(updateResult);\n                    return true;\n            }\n        }\n\n        public partialUpdateUnit(sourceText: ISourceText, filename: string, setRecovery: bool): UpdateUnitResult {\n            return this.timeFunction("partialUpdateUnit(" + filename + ")", () => {\n                for (var i = 0, len = this.units.length; i < len; i++) {\n                    if (this.units[i].filename == filename) {\n                        if ((<Script>this.scripts.members[i]).isResident) {\n                            return UpdateUnitResult.noEdits(i);\n                        }\n\n                        if (setRecovery) {\n                            this.parser.setErrorRecovery(null);\n                        }\n\n                        var updateResult: UpdateUnitResult;\n\n                        // Capture parsing errors so that they are part of "updateResult"\n                        var parseErrors: ErrorEntry[] = [];\n                        var errorCapture = (minChar: number, charLen: number, message: string, unitIndex: number): void => {\n                            parseErrors.push(new ErrorEntry(unitIndex, minChar, minChar + charLen, message));\n                        };\n                        var svErrorCallback = this.parser.errorCallback;\n                        if (svErrorCallback)\n                            this.parser.errorCallback = errorCapture;\n\n                        var oldScript = <Script>this.scripts.members[i];\n                        var newScript = this.parser.parse(sourceText, filename, i);\n\n                        if (svErrorCallback)\n                            this.parser.errorCallback = svErrorCallback;\n\n                        updateResult = UpdateUnitResult.unknownEdits(oldScript, newScript, parseErrors);\n\n                        return updateResult;\n                    }\n                }\n                throw new Error("Unknown file \\"" + filename + "\\"");\n            });\n        }\n\n        public addUnit(prog: string, filename: string, keepResident? = false, referencedFiles?: IFileReference[] = []): Script {\n            return this.addSourceUnit(new StringSourceText(prog), filename, keepResident, referencedFiles);\n        }\n\n        public addSourceUnit(sourceText: ISourceText, filename: string, keepResident:bool, referencedFiles?: IFileReference[] = []): Script {\n            return this.timeFunction("addSourceUnit(" + filename + ", " + keepResident + ")", () => {\n                var script: Script = this.parser.parse(sourceText, filename, this.units.length, AllowedElements.Global);\n                script.referencedFiles = referencedFiles;\n                script.isResident = keepResident;\n                this.persistentTypeState.setCollectionMode(keepResident ? TypeCheckCollectionMode.Resident : TypeCheckCollectionMode.Transient);\n                var index = this.units.length;\n                this.units[index] = script.locationInfo;\n                this.typeChecker.collectTypes(script);\n                this.scripts.append(script);\n                return script\n            });\n        }\n\n        public parseUnit(prog: string, filename: string) {\n            return this.parseSourceUnit(new StringSourceText(prog), filename);\n        }\n\n        public parseSourceUnit(sourceText: ISourceText, filename: string) {\n            this.parser.setErrorRecovery(this.errorOutput);\n            var script: Script = this.parser.parse(sourceText, filename, 0);\n\n            var index = this.units.length;\n            this.units[index] = script.locationInfo;\n            this.typeChecker.collectTypes(script);\n            this.scripts.append(script);\n        }\n\n        public typeCheck() {\n            return this.timeFunction("typeCheck()", () => {\n                var binder = new Binder(this.typeChecker);\n                this.typeChecker.units = this.units;\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.globals);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.ambientGlobals);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.globalTypes);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.ambientGlobalTypes);\n                this.typeFlow = new TypeFlow(this.logger, this.typeChecker.globalScope, this.parser, this.typeChecker);\n                var i = 0;\n                var script: Script = null;\n                var len = this.scripts.members.length;\n\n\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Resident);\n                // first, typecheck resident "lib" scripts, if necessary\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (!script.isResident || script.hasBeenTypeChecked) { continue; }\n\n                    this.typeFlow.assignScopes(script);\n                    this.typeFlow.initLibs();\n                }\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (!script.isResident || script.hasBeenTypeChecked) { continue; }\n\n                    this.typeFlow.typeCheck(script);\n                    script.hasBeenTypeChecked = true;\n                }\n\n                // next typecheck scripts that may change\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\n                len = this.scripts.members.length;\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (script.isResident) { continue; }\n                    this.typeFlow.assignScopes(script);\n                    this.typeFlow.initLibs();\n                }\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (script.isResident) { continue; }\n                    this.typeFlow.typeCheck(script);\n                }\n\n                return null;\n            });\n        }\n\n        public cleanASTTypesForReTypeCheck(ast: AST) {\n            function cleanASTType(ast: AST, parent: AST): AST {\n                ast.type = null;\n                if (ast.nodeType == NodeType.VarDecl) {\n                    var vardecl = <VarDecl>ast;\n                    vardecl.sym = null;\n                }\n                else if (ast.nodeType == NodeType.ArgDecl) {\n                    var argdecl = <ArgDecl>ast;\n                    argdecl.sym = null;\n                }\n                else if (ast.nodeType == NodeType.Name) {\n                    var name = <Identifier>ast;\n                    name.sym = null;\n                }\n                else if (ast.nodeType == NodeType.FuncDecl) {\n                    var funcdecl = <FuncDecl>ast;\n                    funcdecl.signature = null;\n                    funcdecl.freeVariables = new Symbol[]\n                    funcdecl.symbols = null;\n                    funcdecl.accessorSymbol = null;\n                    funcdecl.scopeType = null;\n                }\n                else if (ast.nodeType == NodeType.ModuleDeclaration) {\n                    var modDecl = <ModuleDeclaration>ast;\n                    modDecl.mod = null;\n                }\n                else if (ast.nodeType == NodeType.With) {\n                    (<WithStatement>ast).withSym = null;\n                }\n                else if (ast.nodeType == NodeType.Catch) {\n                    (<Catch>ast).containedScope = null;\n                }\n                return ast;\n            }\n            TypeScript.getAstWalkerFactory().walk(ast, cleanASTType);\n        }\n\n        public cleanTypesForReTypeCheck() {\n            return this.timeFunction("cleanTypesForReTypeCheck()", () => {\n                for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                    var script = this.scripts.members[i];\n                    if ((<Script>script).isResident) {\n                        continue;\n                    }\n                    this.cleanASTTypesForReTypeCheck(script);\n                    this.typeChecker.collectTypes(script);\n                }\n\n                return null;\n            });\n        }\n\n        // Return "true" if the incremental typecheck was successful\n        // Return "false" if incremental typecheck failed, requiring a full typecheck\n        public attemptIncrementalTypeCheck(updateResult: TypeScript.UpdateUnitResult): bool {\n            return this.timeFunction("attemptIncrementalTypeCheck()", () => {\n                // updateResult.kind == editsInsideFunction\n                // updateResult.scope1 == old function\n                // updateResult.scope2 == new function\n                //REVIEW: What about typecheck errors? How do we replace the old ones with the new ones?\n                return false;\n            });\n        }\n\n        public reTypeCheck() {\n            return this.timeFunction("reTypeCheck()", () => {\n                CompilerDiagnostics.analysisPass++;\n                this.initTypeChecker(this.errorOutput);\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\n                this.cleanTypesForReTypeCheck();\n                return this.typeCheck();\n            });\n        }\n\n        private isDynamicModuleCompilation() {\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (!script.isDeclareFile && script.topLevelMod != null) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private updateCommonDirectoryPath() {\n            var commonComponents: string[] = [];\n            var commonComponentsLength = -1;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (script.emitRequired(this.emitSettings)) {\n                    var fileName = script.locationInfo.filename;\n                    var fileComponents = filePathComponents(fileName);\n                    if (commonComponentsLength == -1) {\n                        // First time at finding common path\n                        // So common path = directory of file\n                        commonComponents = fileComponents;\n                        commonComponentsLength = commonComponents.length;\n                    } else {\n                        var updatedPath = false;\n                        for (var j = 0; j < commonComponentsLength && j < fileComponents.length; j++) {\n                            if (commonComponents[j] != fileComponents[j]) {\n                                // The new components = 0 ... j -1\n                                commonComponentsLength = j;\n                                updatedPath = true;\n\n                                if (j == 0) {\n                                    // Its error to not have common path\n                                    this.errorReporter.emitterError(null, "Cannot find the common subdirectory path for the input files");\n                                    return;\n                                }\n\n                                break;\n                            }\n                        }\n\n                        // If the fileComponent path completely matched and less than already found update the length\n                        if (!updatedPath && fileComponents.length < commonComponentsLength) {\n                            commonComponentsLength = fileComponents.length;\n                        }\n                    }\n                }\n            }\n\n            this.emitSettings.commonDirectoryPath = commonComponents.slice(0, commonComponentsLength).join("/") + "/";\n            if (this.emitSettings.outputOption.charAt(this.emitSettings.outputOption.length - 1) != "/") {\n                this.emitSettings.outputOption += "/";\n            }\n        }\n\n        public parseEmitOption(ioHost: EmitterIOHost) {\n            this.emitSettings.ioHost = ioHost;\n            if (this.emitSettings.outputOption == "") {\n                this.emitSettings.outputMany = true;\n                this.emitSettings.commonDirectoryPath = "";\n                return;\n            }\n\n            this.emitSettings.outputOption = switchToForwardSlashes(this.emitSettings.ioHost.resolvePath(this.emitSettings.outputOption));\n\n            // Determine if output options is directory or file\n            if (this.emitSettings.ioHost.directoryExists(this.emitSettings.outputOption)) {\n                // Existing directory\n                this.emitSettings.outputMany = true;\n            } else if (this.emitSettings.ioHost.fileExists(this.emitSettings.outputOption)) {\n                // Existing file\n                this.emitSettings.outputMany = false;\n            }\n            else {\n                // New File/directory\n                this.emitSettings.outputMany = !isJSFile(this.emitSettings.outputOption);\n            }\n\n            // Verify if options are correct\n            if (this.isDynamicModuleCompilation() && !this.emitSettings.outputMany) {\n                this.errorReporter.emitterError(null, "Cannot compile dynamic modules when emitting into single file");\n            }\n\n            // Parse the directory structure\n            if (this.emitSettings.outputMany) {\n                this.updateCommonDirectoryPath();\n            }\n        }\n\n        public useUTF8ForFile(script: Script) {\n            if (this.emitSettings.outputMany) {\n                return this.outputScriptToUTF8(script);\n            } else {\n                return this.outputScriptsToUTF8(<Script[]>(this.scripts.members));\n            }\n        }\n\n        static mapToDTSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return getDeclareFilePath(fileName);\n        }\n\n        private canEmitDeclarations(script?: Script) {\n            if (!this.settings.generateDeclarationFiles) {\n                return false;\n            }\n\n            // If its already a declare file or is resident or does not contain body \n            if (!!script && (script.isDeclareFile || script.isResident || script.bod == null)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        public emitDeclarationsUnit(script: Script, reuseEmitter?: bool, declarationEmitter?: DeclarationEmitter) {\n            if (!this.canEmitDeclarations(script)) {\n                return null;\n            }\n\n            if (!declarationEmitter) {\n                var declareFileName = this.emitSettings.mapOutputFileName(script.locationInfo.filename, TypeScriptCompiler.mapToDTSFileName);\n                var declareFile = this.createFile(declareFileName, this.useUTF8ForFile(script));\n                declarationEmitter = new DeclarationEmitter(this.typeChecker, this.emitSettings, this.errorReporter);\n                declarationEmitter.setDeclarationFile(declareFile);\n            }\n\n            declarationEmitter.emitDeclarations(script);\n\n            if (!reuseEmitter) {\n                declarationEmitter.Close();\n                return null;\n            } else {\n                return declarationEmitter;\n            }\n        }\n\n        public emitDeclarations() {\n            if (!this.canEmitDeclarations()) {\n                return;\n            }\n\n            if (this.errorReporter.hasErrors) {\n                // There were errors reported, do not generate declaration file\n                return;\n            }\n\n            if (this.scripts.members.length == 0) {\n                return;\n            }\n\n            var declarationEmitter: DeclarationEmitter = null;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || declarationEmitter == null) {\n                    // Create or reuse file\n                    declarationEmitter = this.emitDeclarationsUnit(script, !this.emitSettings.outputMany);\n                } else {\n                    // Emit in existing emitter\n                    this.emitDeclarationsUnit(script, true, declarationEmitter);\n                }\n            }\n\n            if (declarationEmitter) {\n                declarationEmitter.Close();\n            }\n        }\n\n        static mapToFileNameExtension(extension: string, fileName: string, wholeFileNameReplaced: bool) {\n            if (wholeFileNameReplaced) {\n                // The complete output is redirected in this file so do not change extension\n                return fileName;\n            } else {\n                // Change the extension of the file\n                var splitFname = fileName.split(".");\n                splitFname.pop();\n                return splitFname.join(".") + extension;\n            }\n        }\n\n        static mapToJSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return TypeScriptCompiler.mapToFileNameExtension(".js", fileName, wholeFileNameReplaced);\n        }\n\n        public emitUnit(script: Script, reuseEmitter?: bool, emitter?: Emitter) {\n            if (!script.emitRequired(this.emitSettings)) {\n                return null;\n            }\n\n            var fname = script.locationInfo.filename;\n            if (!emitter) {\n                var outFname = this.emitSettings.mapOutputFileName(fname, TypeScriptCompiler.mapToJSFileName);\n                var outFile = this.createFile(outFname, this.useUTF8ForFile(script));\n                emitter = new Emitter(this.typeChecker, outFname, outFile, this.emitSettings, this.errorReporter);\n                if (this.settings.mapSourceFiles) {\n                    emitter.setSourceMappings(new TypeScript.SourceMapper(fname, outFname, outFile, this.createFile(outFname + SourceMapper.MapFileExtension, false), this.errorReporter));\n                }\n            } else if (this.settings.mapSourceFiles) {\n                emitter.setSourceMappings(new TypeScript.SourceMapper(fname, emitter.emittingFileName, emitter.outfile, emitter.sourceMapper.sourceMapOut, this.errorReporter));\n            }\n\n            this.typeChecker.locationInfo = script.locationInfo;\n            emitter.emitJavascript(script, TokenID.Comma, false);\n            if (!reuseEmitter) {\n                emitter.Close();\n                return null;\n            } else {\n                return emitter;\n            }\n        }\n\n        public emit(ioHost: EmitterIOHost) {\n            this.parseEmitOption(ioHost);\n\n            var emitter: Emitter = null;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || emitter == null) {\n                    emitter = this.emitUnit(script, !this.emitSettings.outputMany);\n                } else {\n                    this.emitUnit(script, true, emitter);\n                }\n            }\n\n            if (emitter) {\n                emitter.Close();\n            }\n        }\n\n        public emitToOutfile(outputFile: ITextWriter) {\n            if (this.settings.mapSourceFiles) {\n                throw Error("Cannot generate source map");\n            }\n\n            if (this.settings.generateDeclarationFiles) {\n                throw Error("Cannot generate declaration files");\n            }\n\n            if (this.settings.outputOption != "") {\n                throw Error("Cannot parse output option");\n            }\n\n            var emitter: Emitter = emitter = new Emitter(this.typeChecker, "stdout", outputFile, this.emitSettings, this.errorReporter);;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                this.typeChecker.locationInfo = script.locationInfo;\n                emitter.emitJavascript(script, TokenID.Comma, false);\n            }\n        }\n\n        public emitAST(ioHost: EmitterIOHost) {\n            this.parseEmitOption(ioHost);\n\n            var outFile: ITextWriter = null;\n            var context: PrintContext = null;\n\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || context == null) {\n                    var fname = this.units[i].filename;\n                    var mapToTxtFileName = (fileName: string, wholeFileNameReplaced: bool) => {\n                        return TypeScriptCompiler.mapToFileNameExtension(".txt", fileName, wholeFileNameReplaced);\n                    };\n                    var outFname = this.emitSettings.mapOutputFileName(fname, mapToTxtFileName);\n                    outFile = this.createFile(outFname, this.useUTF8ForFile(script));\n                    context = new PrintContext(outFile, this.parser);\n                }\n                getAstWalkerFactory().walk(script, prePrintAST, postPrintAST, null, context);\n                if (this.emitSettings.outputMany) {\n                    try {\n                        outFile.Close();\n                    } catch (e) {\n                        this.errorReporter.emitterError(null, e.message);\n                    }\n                }\n            }\n\n            if (!this.emitSettings.outputMany) {\n                try {\n                    outFile.Close();\n                } catch (e) {\n                    this.errorReporter.emitterError(null, e.message);\n                }\n            }\n        }\n\n        private outputScriptToUTF8(script: Script): bool {\n            return script.containsUnicodeChar || (this.emitSettings.emitComments && script.containsUnicodeCharInComment);\n        }\n\n        private outputScriptsToUTF8(scripts: Script[]): bool {\n            for (var i = 0, len = scripts.length; i < len; i++) {\n                var script = scripts[i];\n                if (this.outputScriptToUTF8(script)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                // Creating files can cause exceptions, report them.   \n                return this.emitSettings.ioHost.createFile(fileName, useUTF8);\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n\n    export class ScopeEntry {\n        constructor (\n            public name: string,\n            public type: string,\n            public sym: Symbol) {\n        }\n    }\n\n    export class ScopeTraversal {\n        constructor (private compiler: TypeScriptCompiler) {\n        }\n\n        public getScope(enclosingScopeContext: EnclosingScopeContext): SymbolScope {\n            if (enclosingScopeContext.enclosingObjectLit && enclosingScopeContext.isMemberCompletion) {\n                return enclosingScopeContext.getObjectLiteralScope();\n            }\n            else if (enclosingScopeContext.isMemberCompletion) {\n                if (enclosingScopeContext.useFullAst) {\n                    return this.compiler.typeFlow.findMemberScopeAtFullAst(enclosingScopeContext)\n                }\n                else {\n                    return this.compiler.typeFlow.findMemberScopeAt(enclosingScopeContext)\n                }\n            }\n            else {\n                return enclosingScopeContext.getScope();\n            }\n        }\n\n        public getScopeEntries(enclosingScopeContext: EnclosingScopeContext): ScopeEntry[] {\n            var scope = this.getScope(enclosingScopeContext);\n            if (scope == null) {\n                return [];\n            }\n\n            var inScopeNames: IHashTable = new StringHashTable();\n            var allSymbolNames: string[] = scope.getAllSymbolNames(enclosingScopeContext.isMemberCompletion);\n\n            // there may be duplicates between the type and value tables, so batch the symbols\n            // getTypeNamesForNames will prefer the entry in the value table\n            for (var i = 0; i < allSymbolNames.length; i++) {\n                var name = allSymbolNames[i];\n\n                // Skip global/internal symbols that won\'t compile in user code\n                if (name == globalId || name == "_Core" || name == "_element") {\n                    continue;\n                }\n\n                inScopeNames.add(name, "");\n            }\n\n            var svModuleDecl = this.compiler.typeChecker.currentModDecl;\n            this.compiler.typeChecker.currentModDecl = enclosingScopeContext.deepestModuleDecl;\n\n            var result = this.getTypeNamesForNames(enclosingScopeContext, inScopeNames.getAllKeys(), scope);\n\n            this.compiler.typeChecker.currentModDecl = svModuleDecl;\n            return result;\n        }\n\n        private getTypeNamesForNames(enclosingScopeContext: EnclosingScopeContext, allNames: string[], scope: SymbolScope): ScopeEntry[] {\n            var result: ScopeEntry[] = [];\n\n            var enclosingScope = enclosingScopeContext.getScope();\n            for (var i = 0; i < allNames.length; i++) {\n                var name = allNames[i];\n                // Search for the id in the value space first\n                // if we don\'t find it, search in the type space.\n                // We don\'t want to search twice, because the first\n                // search may insert the name in the symbol value table\n                // if the scope is aggregate\n                var publicsOnly = enclosingScopeContext.publicsOnly && enclosingScopeContext.isMemberCompletion;\n                var symbol = scope.find(name, publicsOnly, false/*typespace*/);  // REVIEW: Should search public members only?\n                if (symbol == null) {\n                    symbol = scope.find(name, publicsOnly, true/*typespace*/);\n                }\n\n                var displayThisMember = symbol && symbol.flags & SymbolFlags.Private ? symbol.container == scope.container : true;\n\n                if (symbol) {\n                    // Do not add dynamic module names to the list, since they\'re not legal as identifiers\n                    if (displayThisMember && !isQuoted(symbol.name) && !isRelative(symbol.name)) {\n                        var typeName = symbol.getType().getScopedTypeName(enclosingScope);\n                        result.push(new ScopeEntry(name, typeName, symbol));\n                    }\n                }\n                else {\n                    // Special case for "true" and "false"\n                    // REVIEW: This may no longer be necessary?\n                    if (name == "true" || name == "false") {\n                        result.push(new ScopeEntry(name, "bool", this.compiler.typeChecker.booleanType.symbol));\n                    }\n                }\n            }\n\n            return result;\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum Primitive {\n        None = 0,\n        Void = 1,\n        Double = 2,\n        String = 4,\n        Boolean = 8,\n        Any = 16,\n        Null = 32,\n        Undefined = 64,\n    }\n\n    export class MemberName {\n        public prefix: string = "";\n        public suffix: string = "";\n\n        public isString() { return false; }\n        public isArray() { return false; }\n\n        public toString(): string {\n            return MemberName.memberNameToString(this);\n        }\n\n        static memberNameToString(memberName: MemberName): string {\n            var result = memberName.prefix;\n\n            if (memberName.isString()) {\n                result += (<MemberNameString>memberName).text;\n            }\n            else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    result += memberNameToString(ar.entries[index]);\n                    result += ar.delim;\n                }\n            }\n\n            result += memberName.suffix;\n            return result;\n        }\n\n        static create(text: string): MemberName;\n        static create(entry: MemberName, prefix: string, suffix: string): MemberName;\n        static create(arg1: any, arg2?: any, arg3?: any): MemberName {\n            if (typeof arg1 == "string") {\n                return new MemberNameString(arg1);\n            }\n            else {\n                var result = new MemberNameArray();\n                if (arg2)\n                    result.prefix = arg2;\n                if (arg3)\n                    result.suffix = arg3;\n                result.entries.push(arg1);\n                return result;\n            }\n        }\n    }\n\n    export class MemberNameString extends MemberName {\n        constructor (public text: string) {\n            super()\n        }\n\n        public isString() { return true; }\n    }\n\n    export class MemberNameArray extends MemberName {\n        public delim: string = "";\n        public entries: MemberName[] = [];\n\n        public isArray() { return true; }\n\n        public add(entry: MemberName) {\n            this.entries.push(entry);\n        }\n\n        public addAll(entries: MemberName[]) {\n            for (var i = 0 ; i < entries.length; i++) {\n                this.entries.push(entries[i]);\n            }\n        }\n    }\n\n    var currentTypeID = -1;\n\n    export class Type {\n        public typeID = currentTypeID++;\n\n        public members: ScopedMembers;\n        public ambientMembers: ScopedMembers;\n\n        public construct: SignatureGroup = null;\n        public call: SignatureGroup = null;\n        public index: SignatureGroup = null;\n\n        // REVIEW: for either of the below, why do we have lists of types and lists of type links?\n        // interface can only extend\n        public extendsList: Type[];\n        public extendsTypeLinks: TypeLink[];\n\n        // class can also implement\n        public implementsList: Type[];\n        public implementsTypeLinks: TypeLink[];\n\n        public passTypeCreated: number = CompilerDiagnostics.analysisPass;\n\n        public baseClass(): Type {\n            if (this.extendsList && (this.extendsList.length > 0)) {\n                return this.extendsList[0];\n            }\n            else {\n                return null;\n            }\n        }\n\n        public elementType: Type;\n\n        public getArrayBase(arrInstType: Type, checker: TypeChecker): Type {\n            return this.arrayCache.specialize(arrInstType, checker);\n        }\n\n        public primitiveTypeClass: number = Primitive.None;\n\n        // REVIEW: Prune constructorScope\n        public constructorScope: SymbolScope;\n        public containedScope: SymbolScope;\n        public memberScope: SymbolScope;\n\n        public arrayCache: ArrayCache;\n\n        public typeFlags = TypeFlags.None;\n\n        public symbol: TypeSymbol;\n\n        public enclosingType: Type;\n        public instanceType: Type;\n\n        // REVIEW: Prune\n        public isClass() { return this.instanceType != null; }\n        public isArray() { return this.elementType != null; }\n        public isClassInstance() {\n            return this.symbol && !this.elementType && (<TypeSymbol>this.symbol).type.isClass();\n        }\n\n        public getInstanceType() {\n            if (this.isClass()) {\n                return this.instanceType;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public hasImplementation() { return hasFlag(this.typeFlags, TypeFlags.HasImplementation); }\n        public setHasImplementation() { this.typeFlags |= TypeFlags.HasImplementation; }\n\n        public isDouble() { return hasFlag(this.primitiveTypeClass, Primitive.Double); }\n        public isString() { return hasFlag(this.primitiveTypeClass, Primitive.String); }\n        public isBoolean() { return hasFlag(this.primitiveTypeClass, Primitive.Boolean); }\n        public isNull() { return hasFlag(this.primitiveTypeClass, Primitive.Null); }\n\n        // REVIEW: No need for this to be a method\n        public getTypeName(): string {\n            return this.getMemberTypeName("", true, false, null);\n        }\n\n        public getScopedTypeName(scope: SymbolScope) {\n            return this.getMemberTypeName("", true, false, scope);\n        }\n\n        public getScopedTypeNameEx(scope: SymbolScope) {\n            return this.getMemberTypeNameEx("", true, false, scope);\n        }\n\n        // REVIEW: No need for this to be a method\n        public callCount() {\n            var total = 0;\n            if (this.call) {\n                total += this.call.signatures.length;\n            }\n            if (this.construct) {\n                total += this.construct.signatures.length;\n            }\n            if (this.index) {\n                total += this.index.signatures.length;\n            }\n            return total;\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeName(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope): string {\n            var memberName = this.getMemberTypeNameEx(prefix, topLevel, isElementType, scope);\n            return memberName.toString();\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeNameEx(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope): MemberName {\n            if (this.elementType) {\n                return MemberName.create(this.elementType.getMemberTypeNameEx(prefix, false, true, scope), "", "[]");\n            }\n            else if (this.symbol && this.symbol.name && this.symbol.name != "_anonymous" &&\n                     (((this.call == null) && (this.construct == null) && (this.index == null)) ||\n                      (hasFlag(this.typeFlags, TypeFlags.BuildingName)) ||\n                      (this.members && (!this.isClass())))) {\n                var tn = this.symbol.scopeRelativeName(scope);\n                return MemberName.create(tn == "null" ? "any" : tn); // REVIEW: GROSS!!!\n            }\n            else {\n                if (this.members || this.call || this.construct) {\n                    if (hasFlag(this.typeFlags, TypeFlags.BuildingName)) {\n                        return MemberName.create("this");\n                    }\n                    this.typeFlags |= TypeFlags.BuildingName;\n                    var builder = "";\n                    var allMemberNames = new MemberNameArray();\n                    var curlies = isElementType || this.index != null;\n                    var memCount = 0;\n                    var delim = "; ";\n                    if (this.members) {\n                        this.members.allMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                                // Remove the delimiter character from the generated type name, since\n                                // our "allMemberNames" array takes care of storing delimiters\n                                var typeNameMember = sym.getTypeNameEx(scope);\n                                if (typeNameMember.isArray() && (<MemberNameArray>typeNameMember).delim == delim) {\n                                    allMemberNames.addAll((<MemberNameArray>typeNameMember).entries);\n                                } else {\n                                    allMemberNames.add(typeNameMember);\n                                }\n                                memCount++;\n                                curlies = true;\n                            }\n                        }, null);\n                    }\n\n                    var signatureCount = this.callCount();\n                    var j: number;\n                    var len = 0;\n                    var shortform = !curlies && signatureCount == 1 && topLevel;\n                    if (this.call) {\n                        allMemberNames.addAll(this.call.toStrings(prefix, shortform, scope));\n                    }\n\n                    if (this.construct) {\n                        allMemberNames.addAll(this.construct.toStrings("new", shortform, scope));\n                    }\n\n                    if (this.index) {\n                        allMemberNames.addAll(this.index.toStrings("", shortform, scope));\n                    }\n\n                    if ((curlies) || ((signatureCount > 1) && topLevel)) {\n                        allMemberNames.prefix = "{ ";\n                        allMemberNames.suffix = "}";\n                        allMemberNames.delim = delim;\n                    } else if (allMemberNames.entries.length > 1) {\n                        allMemberNames.delim = delim;\n                    }\n\n                    this.typeFlags &= (~TypeFlags.BuildingName);\n                    if ((signatureCount == 0) && (memCount == 0)) {\n                        return MemberName.create("{}");\n                    }\n                    else {\n                        return allMemberNames;\n                    }\n                }\n                else {\n                    return MemberName.create("{}");\n                }\n            }\n        }\n\n        public checkDecl(checker: TypeChecker) {\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST) {\n                    checker.typeFlow.inScopeTypeCheckDecl(this.symbol.declAST);\n                }\n            }\n        }\n\n        public getMemberScope(flow: TypeFlow) {\n            if (this == flow.anyType) {\n                return null;\n            }\n            else if (this.isDouble()) {\n                if (flow.numberInterfaceType) {\n                    return flow.numberInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.isBoolean()) {\n                if (flow.booleanInterfaceType) {\n                    return flow.booleanInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this == flow.stringType) {\n                if (flow.stringInterfaceType) {\n                    return flow.stringInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.elementType) {\n                if (flow.arrayInterfaceType) {\n                    var arrInstType = this.elementType.getArrayBase(flow.arrayInterfaceType, flow.checker);\n                    return arrInstType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return this.memberScope;\n            }\n        }\n\n        public isReferenceType() {\n            return this.members || this.extendsList ||\n                this.construct || this.call || this.index ||\n                this.elementType;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker, membersOnly: bool): Type {\n            if (pattern == this) {\n                return replacement;\n            }\n            var result = this;\n            if (membersOnly) {\n                // assume interface type without bases\n                if (this.isReferenceType()) {\n                    result = new Type();\n                    if (this.members) {\n                        result.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                        this.members.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.members.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    if (this.ambientMembers) {\n                        result.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                        this.ambientMembers.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.ambientMembers.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    result.containedScope = checker.scopeOf(result);\n                    result.memberScope = result.containedScope;\n                }\n            }\n            else {\n                if (this.elementType) {\n                    if (this.elementType == pattern) {\n                        result = checker.makeArrayType(replacement);\n                    }\n                    else {\n                        if (this.elementType.elementType == pattern) {\n                            result = checker.makeArrayType(checker.makeArrayType(replacement));\n                        }\n                    }\n                }\n                else if (this.call) {\n                    result = new Type();\n                    result.call = this.call.specializeType(pattern, replacement, checker);\n                }\n            }\n            return result;\n        }\n\n        public hasBase(baseType: Type): bool {\n            if (baseType == this) {\n                return true;\n            }\n            else {\n                if (this.extendsList) {\n                    for (var i = 0, len = this.extendsList.length; i < len; i++) {\n                        if (this.extendsList[i].hasBase(baseType)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public mergeOrdered(b: Type, checker: TypeChecker, acceptVoid: bool, comparisonInfo?: TypeComparisonInfo): Type {\n            if ((this == checker.anyType) || (b == checker.anyType)) {\n                return checker.anyType;\n            }\n            else if (this == b) {\n                return this;\n            }\n            else if ((b == checker.nullType) && this != checker.nullType) {\n                return this;\n            }\n            else if ((this == checker.nullType) && (b != checker.nullType)) {\n                return b;\n            }\n            else if (acceptVoid && (b == checker.voidType) && this != checker.voidType) {\n                return this;\n            }\n            else if (acceptVoid && (this == checker.voidType) && (b != checker.voidType)) {\n                return b;\n            }\n            else if ((b == checker.undefinedType) && this != checker.undefinedType) {\n                return this;\n            }\n            else if ((this == checker.undefinedType) && (b != checker.undefinedType)) {\n                return b;\n            }\n            else if (this.elementType && b.elementType) {\n                if (this.elementType == b.elementType) {\n                    return this;\n                }\n                else {\n                    var mergedET = this.elementType.mergeOrdered(b.elementType, checker, acceptVoid, comparisonInfo);\n                    if (mergedET == null) {\n                        return checker.makeArrayType(checker.anyType);\n                    }\n                    else {\n                        return checker.makeArrayType(mergedET);\n                    }\n                }\n            }\n            else if (checker.sourceIsSubtypeOfTarget(this, b, comparisonInfo)) {\n                return b;\n            }\n            else if (checker.sourceIsSubtypeOfTarget(b, this, comparisonInfo)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public isModuleType() { return false; }\n        public hasMembers() { return this.members != null; }\n        public getAllEnclosedTypes(): ScopedMembers { return null; }\n        public getAllAmbientEnclosedTypes(): ScopedMembers { return null; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n\n        public getDocComments(): Comment[]{\n            if (this.elementType || !this.symbol) {\n                return [];\n            }\n\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST.nodeType == NodeType.FuncDecl) {\n                    // Its a constructor - use the class declaration instead\n                    return (<FuncDecl>this.symbol.declAST).classDecl.getDocComments();\n                } else {\n                    // Its a class without constructor\n                    return this.symbol.getDocComments();\n                }\n            }\n\n            if (this.symbol.name && this.symbol.name != "_anonymous" &&\n                (((this.call == null) && (this.construct == null) && (this.index == null))\n                  || this.members)) {\n                return this.symbol.getDocComments();\n            }\n\n            return [];\n        }\n    }\n\n    export interface ITypeCollection {\n        // returns null when types are exhausted\n        getLength(): number;\n        setTypeAtIndex(index: number, type: Type): void;\n        getTypeAtIndex(index: number): Type;\n    }\n\n    export class ModuleType extends Type {\n\n        constructor (public enclosedTypes: ScopedMembers, public ambientEnclosedTypes: ScopedMembers) {\n            super();\n        }\n\n        public isModuleType() { return true; }\n        public hasMembers() { return this.members != null || this.enclosedTypes != null; }\n        public getAllEnclosedTypes() { return this.enclosedTypes; }\n        public getAllAmbientEnclosedTypes() { return this.ambientEnclosedTypes; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n        public importedModules: ImportDeclaration[] = [];\n\n        // Finds the dynamic module name of moduleType in the members\n        // ignoreSymbols define list of symbols already visited - to avoid recursion\n        static findDynamicModuleNameInHashTable(moduleType: Type, members: IHashTable) {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            members.map((key, s, c) => {\n                if (moduleName == null && !isQuoted(key)) {\n                    var symbol = <Symbol>s;\n                    var type = symbol.getType();\n                    if (type == moduleType) {\n                        // If this is the module type we were looking for\n                        moduleName = { name: key, symbol: symbol };\n                    }\n                }\n            }, null);\n\n            return moduleName;\n        }\n\n        // Finds the Dynamic module name of the moduleType in this moduleType\n        // onlyPublic tells if we are looking for module name in public members only\n        public findDynamicModuleName(moduleType: Type): { name: string; symbol: Symbol; } {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            // Not cached, so seach and add to the cache\n            moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.members.allMembers);\n            if (moduleName == null) {\n                moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.ambientMembers.allMembers);\n            }\n            return moduleName;\n        }\n    }\n\n    export class TypeLink {\n        public type: Type = null;\n        public ast: AST = null;\n    }\n\n    export function getTypeLink(ast: AST, checker: TypeChecker, autoVar: bool): TypeLink {\n        var result = new TypeLink();\n\n        result.ast = ast;\n\n        if ((ast == null) && (autoVar)) {\n            result.type = checker.anyType;\n        }\n        else {\n            result.type = null;\n        }\n\n        return result;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule Tools {\n    export interface IWalkContext {\n        goChildren: bool;\n        goNextSibling: bool;\n        // visit siblings in reverse execution order\n        reverseSiblings: bool;\n    }\n\n    export class BaseWalkContext implements IWalkContext {\n        public goChildren = true;\n        public goNextSibling = true;\n        public reverseSiblings = false;\n    }\n}';
var TypeScript;
(function(TypeScript$$1) {
  function hasFlag(val, flag$$1) {
    return(val & flag$$1) != 0;
  }
  function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags) {
    return fncOrVarOrSymbolOrModuleFlags;
  }
  function flagsToString(e$$7, flags$$1) {
    var builder = "";
    var i$$8 = 1;
    for (;i$$8 < 1 << 31;i$$8 = i$$8 << 1) {
      if ((flags$$1 & i$$8) != 0) {
        var k;
        for (k in e$$7) {
          if (e$$7[k] == i$$8) {
            if (builder.length > 0) {
              builder += "|";
            }
            builder += k;
            break;
          }
        }
      }
    }
    return builder;
  }
  TypeScript$$1.hasFlag = hasFlag;
  (function(ErrorRecoverySet$$1) {
    ErrorRecoverySet$$1._map = [];
    ErrorRecoverySet$$1.None = 0;
    ErrorRecoverySet$$1.Comma = 1;
    ErrorRecoverySet$$1.SColon = 1 << 1;
    ErrorRecoverySet$$1.Asg = 1 << 2;
    ErrorRecoverySet$$1.BinOp = 1 << 3;
    ErrorRecoverySet$$1.RBrack = 1 << 4;
    ErrorRecoverySet$$1.RCurly = 1 << 5;
    ErrorRecoverySet$$1.RParen = 1 << 6;
    ErrorRecoverySet$$1.Dot = 1 << 7;
    ErrorRecoverySet$$1.Colon = 1 << 8;
    ErrorRecoverySet$$1.PrimType = 1 << 9;
    ErrorRecoverySet$$1.AddOp = 1 << 10;
    ErrorRecoverySet$$1.LCurly = 1 << 11;
    ErrorRecoverySet$$1.PreOp = 1 << 12;
    ErrorRecoverySet$$1.RegExp = 1 << 13;
    ErrorRecoverySet$$1.LParen = 1 << 14;
    ErrorRecoverySet$$1.LBrack = 1 << 15;
    ErrorRecoverySet$$1.Scope = 1 << 16;
    ErrorRecoverySet$$1.In = 1 << 17;
    ErrorRecoverySet$$1.SCase = 1 << 18;
    ErrorRecoverySet$$1.Else = 1 << 19;
    ErrorRecoverySet$$1.Catch = 1 << 20;
    ErrorRecoverySet$$1.Var = 1 << 21;
    ErrorRecoverySet$$1.Stmt = 1 << 22;
    ErrorRecoverySet$$1.While = 1 << 23;
    ErrorRecoverySet$$1.ID = 1 << 24;
    ErrorRecoverySet$$1.Prefix = 1 << 25;
    ErrorRecoverySet$$1.Literal = 1 << 26;
    ErrorRecoverySet$$1.RLit = 1 << 27;
    ErrorRecoverySet$$1.Func = 1 << 28;
    ErrorRecoverySet$$1.EOF = 1 << 29;
    ErrorRecoverySet$$1.TypeScriptS = 1 << 30;
    ErrorRecoverySet$$1.ExprStart = ErrorRecoverySet$$1.SColon | ErrorRecoverySet$$1.AddOp | ErrorRecoverySet$$1.LCurly | ErrorRecoverySet$$1.PreOp | ErrorRecoverySet$$1.RegExp | ErrorRecoverySet$$1.LParen | ErrorRecoverySet$$1.LBrack | ErrorRecoverySet$$1.ID | ErrorRecoverySet$$1.Prefix | ErrorRecoverySet$$1.RLit | ErrorRecoverySet$$1.Func | ErrorRecoverySet$$1.Literal;
    ErrorRecoverySet$$1.StmtStart = ErrorRecoverySet$$1.ExprStart | ErrorRecoverySet$$1.SColon | ErrorRecoverySet$$1.Var | ErrorRecoverySet$$1.Stmt | ErrorRecoverySet$$1.While | ErrorRecoverySet$$1.TypeScriptS;
    ErrorRecoverySet$$1.Postfix = ErrorRecoverySet$$1.Dot | ErrorRecoverySet$$1.LParen | ErrorRecoverySet$$1.LBrack;
  })(TypeScript$$1.ErrorRecoverySet || (TypeScript$$1.ErrorRecoverySet = {}));
  var ErrorRecoverySet = TypeScript$$1.ErrorRecoverySet;
  (function(AllowedElements$$1) {
    AllowedElements$$1._map = [];
    AllowedElements$$1.None = 0;
    AllowedElements$$1.ModuleDeclarations = 1 << 2;
    AllowedElements$$1.ClassDeclarations = 1 << 3;
    AllowedElements$$1.InterfaceDeclarations = 1 << 4;
    AllowedElements$$1.AmbientDeclarations = 1 << 10;
    AllowedElements$$1.Properties = 1 << 11;
    AllowedElements$$1.Global = AllowedElements$$1.ModuleDeclarations | AllowedElements$$1.ClassDeclarations | AllowedElements$$1.InterfaceDeclarations | AllowedElements$$1.AmbientDeclarations;
    AllowedElements$$1.QuickParse = AllowedElements$$1.Global | AllowedElements$$1.Properties;
  })(TypeScript$$1.AllowedElements || (TypeScript$$1.AllowedElements = {}));
  var AllowedElements = TypeScript$$1.AllowedElements;
  (function(Modifiers$$1) {
    Modifiers$$1._map = [];
    Modifiers$$1.None = 0;
    Modifiers$$1.Private = 1;
    Modifiers$$1.Public = 1 << 1;
    Modifiers$$1.Readonly = 1 << 2;
    Modifiers$$1.Ambient = 1 << 3;
    Modifiers$$1.Exported = 1 << 4;
    Modifiers$$1.Getter = 1 << 5;
    Modifiers$$1.Setter = 1 << 6;
    Modifiers$$1.Static = 1 << 7;
  })(TypeScript$$1.Modifiers || (TypeScript$$1.Modifiers = {}));
  var Modifiers = TypeScript$$1.Modifiers;
  (function(ASTFlags$$1) {
    ASTFlags$$1._map = [];
    ASTFlags$$1.None = 0;
    ASTFlags$$1.ExplicitSemicolon = 1;
    ASTFlags$$1.AutomaticSemicolon = 1 << 1;
    ASTFlags$$1.Writeable = 1 << 2;
    ASTFlags$$1.Error = 1 << 3;
    ASTFlags$$1.DotLHSPartial = 1 << 4;
    ASTFlags$$1.DotLHS = 1 << 5;
    ASTFlags$$1.IsStatement = 1 << 6;
    ASTFlags$$1.StrictMode = 1 << 7;
    ASTFlags$$1.PossibleOptionalParameter = 1 << 8;
    ASTFlags$$1.ClassBaseConstructorCall = 1 << 9;
    ASTFlags$$1.OptionalName = 1 << 10;
    ASTFlags$$1.SkipNextRParen = 1 << 11;
  })(TypeScript$$1.ASTFlags || (TypeScript$$1.ASTFlags = {}));
  var ASTFlags = TypeScript$$1.ASTFlags;
  (function(DeclFlags$$1) {
    DeclFlags$$1._map = [];
    DeclFlags$$1.None = 0;
    DeclFlags$$1.Exported = 1;
    DeclFlags$$1.Private = 1 << 1;
    DeclFlags$$1.Public = 1 << 2;
    DeclFlags$$1.Ambient = 1 << 3;
    DeclFlags$$1.Static = 1 << 4;
    DeclFlags$$1.LocalStatic = 1 << 5;
    DeclFlags$$1.GetAccessor = 1 << 6;
    DeclFlags$$1.SetAccessor = 1 << 7;
  })(TypeScript$$1.DeclFlags || (TypeScript$$1.DeclFlags = {}));
  var DeclFlags = TypeScript$$1.DeclFlags;
  (function(ModuleFlags$$1) {
    ModuleFlags$$1._map = [];
    ModuleFlags$$1.None = 0;
    ModuleFlags$$1.Exported = 1;
    ModuleFlags$$1.Private = 1 << 1;
    ModuleFlags$$1.Public = 1 << 2;
    ModuleFlags$$1.Ambient = 1 << 3;
    ModuleFlags$$1.Static = 1 << 4;
    ModuleFlags$$1.LocalStatic = 1 << 5;
    ModuleFlags$$1.GetAccessor = 1 << 6;
    ModuleFlags$$1.SetAccessor = 1 << 7;
    ModuleFlags$$1.IsEnum = 1 << 8;
    ModuleFlags$$1.ShouldEmitModuleDecl = 1 << 9;
    ModuleFlags$$1.IsWholeFile = 1 << 10;
    ModuleFlags$$1.IsDynamic = 1 << 11;
    ModuleFlags$$1.MustCaptureThis = 1 << 12;
  })(TypeScript$$1.ModuleFlags || (TypeScript$$1.ModuleFlags = {}));
  var ModuleFlags = TypeScript$$1.ModuleFlags;
  (function(SymbolFlags$$1) {
    SymbolFlags$$1._map = [];
    SymbolFlags$$1.None = 0;
    SymbolFlags$$1.Exported = 1;
    SymbolFlags$$1.Private = 1 << 1;
    SymbolFlags$$1.Public = 1 << 2;
    SymbolFlags$$1.Ambient = 1 << 3;
    SymbolFlags$$1.Static = 1 << 4;
    SymbolFlags$$1.LocalStatic = 1 << 5;
    SymbolFlags$$1.GetAccessor = 1 << 6;
    SymbolFlags$$1.SetAccessor = 1 << 7;
    SymbolFlags$$1.Property = 1 << 8;
    SymbolFlags$$1.Readonly = 1 << 9;
    SymbolFlags$$1.ModuleMember = 1 << 10;
    SymbolFlags$$1.InterfaceMember = 1 << 11;
    SymbolFlags$$1.ClassMember = 1 << 12;
    SymbolFlags$$1.BuiltIn = 1 << 13;
    SymbolFlags$$1.TypeSetDuringScopeAssignment = 1 << 14;
    SymbolFlags$$1.Constant = 1 << 15;
    SymbolFlags$$1.Optional = 1 << 16;
    SymbolFlags$$1.RecursivelyReferenced = 1 << 17;
    SymbolFlags$$1.Bound = 1 << 18;
    SymbolFlags$$1.CompilerGenerated = 1 << 19;
  })(TypeScript$$1.SymbolFlags || (TypeScript$$1.SymbolFlags = {}));
  var SymbolFlags = TypeScript$$1.SymbolFlags;
  (function(VarFlags$$1) {
    VarFlags$$1._map = [];
    VarFlags$$1.None = 0;
    VarFlags$$1.Exported = 1;
    VarFlags$$1.Private = 1 << 1;
    VarFlags$$1.Public = 1 << 2;
    VarFlags$$1.Ambient = 1 << 3;
    VarFlags$$1.Static = 1 << 4;
    VarFlags$$1.LocalStatic = 1 << 5;
    VarFlags$$1.GetAccessor = 1 << 6;
    VarFlags$$1.SetAccessor = 1 << 7;
    VarFlags$$1.AutoInit = 1 << 8;
    VarFlags$$1.Property = 1 << 9;
    VarFlags$$1.Readonly = 1 << 10;
    VarFlags$$1.Class = 1 << 11;
    VarFlags$$1.ClassProperty = 1 << 12;
    VarFlags$$1.ClassBodyProperty = 1 << 13;
    VarFlags$$1.ClassConstructorProperty = 1 << 14;
    VarFlags$$1.ClassSuperMustBeFirstCallInConstructor = 1 << 15;
    VarFlags$$1.Constant = 1 << 16;
    VarFlags$$1.MustCaptureThis = 1 << 17;
  })(TypeScript$$1.VarFlags || (TypeScript$$1.VarFlags = {}));
  var VarFlags = TypeScript$$1.VarFlags;
  (function(FncFlags$$1) {
    FncFlags$$1._map = [];
    FncFlags$$1.None = 0;
    FncFlags$$1.Exported = 1;
    FncFlags$$1.Private = 1 << 1;
    FncFlags$$1.Public = 1 << 2;
    FncFlags$$1.Ambient = 1 << 3;
    FncFlags$$1.Static = 1 << 4;
    FncFlags$$1.LocalStatic = 1 << 5;
    FncFlags$$1.GetAccessor = 1 << 6;
    FncFlags$$1.SetAccessor = 1 << 7;
    FncFlags$$1.Definition = 1 << 8;
    FncFlags$$1.Signature = 1 << 9;
    FncFlags$$1.Method = 1 << 10;
    FncFlags$$1.HasReturnExpression = 1 << 11;
    FncFlags$$1.CallMember = 1 << 12;
    FncFlags$$1.ConstructMember = 1 << 13;
    FncFlags$$1.HasSelfReference = 1 << 14;
    FncFlags$$1.IsFatArrowFunction = 1 << 15;
    FncFlags$$1.IndexerMember = 1 << 16;
    FncFlags$$1.IsFunctionExpression = 1 << 17;
    FncFlags$$1.ClassMethod = 1 << 18;
    FncFlags$$1.ClassPropertyMethodExported = 1 << 19;
    FncFlags$$1.HasSuperReferenceInFatArrowFunction = 1 << 20;
    FncFlags$$1.IsPropertyBound = 1 << 21;
  })(TypeScript$$1.FncFlags || (TypeScript$$1.FncFlags = {}));
  var FncFlags = TypeScript$$1.FncFlags;
  (function(SignatureFlags$$1) {
    SignatureFlags$$1._map = [];
    SignatureFlags$$1.None = 0;
    SignatureFlags$$1.IsIndexer = 1;
    SignatureFlags$$1.IsStringIndexer = 1 << 1;
    SignatureFlags$$1.IsNumberIndexer = 1 << 2;
  })(TypeScript$$1.SignatureFlags || (TypeScript$$1.SignatureFlags = {}));
  var SignatureFlags = TypeScript$$1.SignatureFlags;
  TypeScript$$1.ToDeclFlags = ToDeclFlags;
  (function(TypeFlags$$1) {
    TypeFlags$$1._map = [];
    TypeFlags$$1.None = 0;
    TypeFlags$$1.HasImplementation = 1;
    TypeFlags$$1.HasSelfReference = 1 << 1;
    TypeFlags$$1.MergeResult = 1 << 2;
    TypeFlags$$1.IsEnum = 1 << 3;
    TypeFlags$$1.BuildingName = 1 << 4;
    TypeFlags$$1.HasBaseType = 1 << 5;
    TypeFlags$$1.HasBaseTypeOfObject = 1 << 6;
    TypeFlags$$1.IsClass = 1 << 7;
  })(TypeScript$$1.TypeFlags || (TypeScript$$1.TypeFlags = {}));
  var TypeFlags = TypeScript$$1.TypeFlags;
  (function(TypeRelationshipFlags$$1) {
    TypeRelationshipFlags$$1._map = [];
    TypeRelationshipFlags$$1.SuccessfulComparison = 0;
    TypeRelationshipFlags$$1.SourceIsNullTargetIsVoidOrUndefined = 1;
    TypeRelationshipFlags$$1.RequiredPropertyIsMissing = 1 << 1;
    TypeRelationshipFlags$$1.IncompatibleSignatures = 1 << 2;
    TypeRelationshipFlags$$1.SourceSignatureHasTooManyParameters = 3;
    TypeRelationshipFlags$$1.IncompatibleReturnTypes = 1 << 4;
    TypeRelationshipFlags$$1.IncompatiblePropertyTypes = 1 << 5;
    TypeRelationshipFlags$$1.IncompatibleParameterTypes = 1 << 6;
  })(TypeScript$$1.TypeRelationshipFlags || (TypeScript$$1.TypeRelationshipFlags = {}));
  var TypeRelationshipFlags = TypeScript$$1.TypeRelationshipFlags;
  (function(CodeGenTarget$$1) {
    CodeGenTarget$$1._map = [];
    CodeGenTarget$$1.ES3 = 0;
    CodeGenTarget$$1.ES5 = 1;
  })(TypeScript$$1.CodeGenTarget || (TypeScript$$1.CodeGenTarget = {}));
  var CodeGenTarget = TypeScript$$1.CodeGenTarget;
  (function(ModuleGenTarget$$1) {
    ModuleGenTarget$$1._map = [];
    ModuleGenTarget$$1.Synchronous = 0;
    ModuleGenTarget$$1.Asynchronous = 1;
    ModuleGenTarget$$1.Local = 1 << 1;
  })(TypeScript$$1.ModuleGenTarget || (TypeScript$$1.ModuleGenTarget = {}));
  var ModuleGenTarget = TypeScript$$1.ModuleGenTarget;
  TypeScript$$1.codeGenTarget = CodeGenTarget.ES3;
  TypeScript$$1.moduleGenTarget = ModuleGenTarget.Synchronous;
  TypeScript$$1.optimizeModuleCodeGen = true;
  TypeScript$$1.flagsToString = flagsToString;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$2) {
  (function(NodeType$$1) {
    NodeType$$1._map = [];
    NodeType$$1._map[0] = "None";
    NodeType$$1.None = 0;
    NodeType$$1._map[1] = "Empty";
    NodeType$$1.Empty = 1;
    NodeType$$1._map[2] = "EmptyExpr";
    NodeType$$1.EmptyExpr = 2;
    NodeType$$1._map[3] = "True";
    NodeType$$1.True = 3;
    NodeType$$1._map[4] = "False";
    NodeType$$1.False = 4;
    NodeType$$1._map[5] = "This";
    NodeType$$1.This = 5;
    NodeType$$1._map[6] = "Super";
    NodeType$$1.Super = 6;
    NodeType$$1._map[7] = "QString";
    NodeType$$1.QString = 7;
    NodeType$$1._map[8] = "Regex";
    NodeType$$1.Regex = 8;
    NodeType$$1._map[9] = "Null";
    NodeType$$1.Null = 9;
    NodeType$$1._map[10] = "ArrayLit";
    NodeType$$1.ArrayLit = 10;
    NodeType$$1._map[11] = "ObjectLit";
    NodeType$$1.ObjectLit = 11;
    NodeType$$1._map[12] = "Void";
    NodeType$$1.Void = 12;
    NodeType$$1._map[13] = "Comma";
    NodeType$$1.Comma = 13;
    NodeType$$1._map[14] = "Pos";
    NodeType$$1.Pos = 14;
    NodeType$$1._map[15] = "Neg";
    NodeType$$1.Neg = 15;
    NodeType$$1._map[16] = "Delete";
    NodeType$$1.Delete = 16;
    NodeType$$1._map[17] = "Await";
    NodeType$$1.Await = 17;
    NodeType$$1._map[18] = "In";
    NodeType$$1.In = 18;
    NodeType$$1._map[19] = "Dot";
    NodeType$$1.Dot = 19;
    NodeType$$1._map[20] = "From";
    NodeType$$1.From = 20;
    NodeType$$1._map[21] = "Is";
    NodeType$$1.Is = 21;
    NodeType$$1._map[22] = "InstOf";
    NodeType$$1.InstOf = 22;
    NodeType$$1._map[23] = "Typeof";
    NodeType$$1.Typeof = 23;
    NodeType$$1._map[24] = "NumberLit";
    NodeType$$1.NumberLit = 24;
    NodeType$$1._map[25] = "Name";
    NodeType$$1.Name = 25;
    NodeType$$1._map[26] = "TypeRef";
    NodeType$$1.TypeRef = 26;
    NodeType$$1._map[27] = "Index";
    NodeType$$1.Index = 27;
    NodeType$$1._map[28] = "Call";
    NodeType$$1.Call = 28;
    NodeType$$1._map[29] = "New";
    NodeType$$1.New = 29;
    NodeType$$1._map[30] = "Asg";
    NodeType$$1.Asg = 30;
    NodeType$$1._map[31] = "AsgAdd";
    NodeType$$1.AsgAdd = 31;
    NodeType$$1._map[32] = "AsgSub";
    NodeType$$1.AsgSub = 32;
    NodeType$$1._map[33] = "AsgDiv";
    NodeType$$1.AsgDiv = 33;
    NodeType$$1._map[34] = "AsgMul";
    NodeType$$1.AsgMul = 34;
    NodeType$$1._map[35] = "AsgMod";
    NodeType$$1.AsgMod = 35;
    NodeType$$1._map[36] = "AsgAnd";
    NodeType$$1.AsgAnd = 36;
    NodeType$$1._map[37] = "AsgXor";
    NodeType$$1.AsgXor = 37;
    NodeType$$1._map[38] = "AsgOr";
    NodeType$$1.AsgOr = 38;
    NodeType$$1._map[39] = "AsgLsh";
    NodeType$$1.AsgLsh = 39;
    NodeType$$1._map[40] = "AsgRsh";
    NodeType$$1.AsgRsh = 40;
    NodeType$$1._map[41] = "AsgRs2";
    NodeType$$1.AsgRs2 = 41;
    NodeType$$1._map[42] = "ConditionalExpression";
    NodeType$$1.ConditionalExpression = 42;
    NodeType$$1._map[43] = "LogOr";
    NodeType$$1.LogOr = 43;
    NodeType$$1._map[44] = "LogAnd";
    NodeType$$1.LogAnd = 44;
    NodeType$$1._map[45] = "Or";
    NodeType$$1.Or = 45;
    NodeType$$1._map[46] = "Xor";
    NodeType$$1.Xor = 46;
    NodeType$$1._map[47] = "And";
    NodeType$$1.And = 47;
    NodeType$$1._map[48] = "Eq";
    NodeType$$1.Eq = 48;
    NodeType$$1._map[49] = "Ne";
    NodeType$$1.Ne = 49;
    NodeType$$1._map[50] = "Eqv";
    NodeType$$1.Eqv = 50;
    NodeType$$1._map[51] = "NEqv";
    NodeType$$1.NEqv = 51;
    NodeType$$1._map[52] = "Lt";
    NodeType$$1.Lt = 52;
    NodeType$$1._map[53] = "Le";
    NodeType$$1.Le = 53;
    NodeType$$1._map[54] = "Gt";
    NodeType$$1.Gt = 54;
    NodeType$$1._map[55] = "Ge";
    NodeType$$1.Ge = 55;
    NodeType$$1._map[56] = "Add";
    NodeType$$1.Add = 56;
    NodeType$$1._map[57] = "Sub";
    NodeType$$1.Sub = 57;
    NodeType$$1._map[58] = "Mul";
    NodeType$$1.Mul = 58;
    NodeType$$1._map[59] = "Div";
    NodeType$$1.Div = 59;
    NodeType$$1._map[60] = "Mod";
    NodeType$$1.Mod = 60;
    NodeType$$1._map[61] = "Lsh";
    NodeType$$1.Lsh = 61;
    NodeType$$1._map[62] = "Rsh";
    NodeType$$1.Rsh = 62;
    NodeType$$1._map[63] = "Rs2";
    NodeType$$1.Rs2 = 63;
    NodeType$$1._map[64] = "Not";
    NodeType$$1.Not = 64;
    NodeType$$1._map[65] = "LogNot";
    NodeType$$1.LogNot = 65;
    NodeType$$1._map[66] = "IncPre";
    NodeType$$1.IncPre = 66;
    NodeType$$1._map[67] = "DecPre";
    NodeType$$1.DecPre = 67;
    NodeType$$1._map[68] = "IncPost";
    NodeType$$1.IncPost = 68;
    NodeType$$1._map[69] = "DecPost";
    NodeType$$1.DecPost = 69;
    NodeType$$1._map[70] = "TypeAssertion";
    NodeType$$1.TypeAssertion = 70;
    NodeType$$1._map[71] = "FuncDecl";
    NodeType$$1.FuncDecl = 71;
    NodeType$$1._map[72] = "Member";
    NodeType$$1.Member = 72;
    NodeType$$1._map[73] = "VarDecl";
    NodeType$$1.VarDecl = 73;
    NodeType$$1._map[74] = "ArgDecl";
    NodeType$$1.ArgDecl = 74;
    NodeType$$1._map[75] = "Return";
    NodeType$$1.Return = 75;
    NodeType$$1._map[76] = "Break";
    NodeType$$1.Break = 76;
    NodeType$$1._map[77] = "Continue";
    NodeType$$1.Continue = 77;
    NodeType$$1._map[78] = "Throw";
    NodeType$$1.Throw = 78;
    NodeType$$1._map[79] = "For";
    NodeType$$1.For = 79;
    NodeType$$1._map[80] = "ForIn";
    NodeType$$1.ForIn = 80;
    NodeType$$1._map[81] = "If";
    NodeType$$1.If = 81;
    NodeType$$1._map[82] = "While";
    NodeType$$1.While = 82;
    NodeType$$1._map[83] = "DoWhile";
    NodeType$$1.DoWhile = 83;
    NodeType$$1._map[84] = "Block";
    NodeType$$1.Block = 84;
    NodeType$$1._map[85] = "Case";
    NodeType$$1.Case = 85;
    NodeType$$1._map[86] = "Switch";
    NodeType$$1.Switch = 86;
    NodeType$$1._map[87] = "Try";
    NodeType$$1.Try = 87;
    NodeType$$1._map[88] = "TryCatch";
    NodeType$$1.TryCatch = 88;
    NodeType$$1._map[89] = "TryFinally";
    NodeType$$1.TryFinally = 89;
    NodeType$$1._map[90] = "Finally";
    NodeType$$1.Finally = 90;
    NodeType$$1._map[91] = "Catch";
    NodeType$$1.Catch = 91;
    NodeType$$1._map[92] = "List";
    NodeType$$1.List = 92;
    NodeType$$1._map[93] = "Script";
    NodeType$$1.Script = 93;
    NodeType$$1._map[94] = "ClassDeclaration";
    NodeType$$1.ClassDeclaration = 94;
    NodeType$$1._map[95] = "InterfaceDeclaration";
    NodeType$$1.InterfaceDeclaration = 95;
    NodeType$$1._map[96] = "ModuleDeclaration";
    NodeType$$1.ModuleDeclaration = 96;
    NodeType$$1._map[97] = "ImportDeclaration";
    NodeType$$1.ImportDeclaration = 97;
    NodeType$$1._map[98] = "With";
    NodeType$$1.With = 98;
    NodeType$$1._map[99] = "Label";
    NodeType$$1.Label = 99;
    NodeType$$1._map[100] = "LabeledStatement";
    NodeType$$1.LabeledStatement = 100;
    NodeType$$1._map[101] = "EBStart";
    NodeType$$1.EBStart = 101;
    NodeType$$1._map[102] = "GotoEB";
    NodeType$$1.GotoEB = 102;
    NodeType$$1._map[103] = "EndCode";
    NodeType$$1.EndCode = 103;
    NodeType$$1._map[104] = "Error";
    NodeType$$1.Error = 104;
    NodeType$$1._map[105] = "Comment";
    NodeType$$1.Comment = 105;
    NodeType$$1._map[106] = "Debugger";
    NodeType$$1.Debugger = 106;
    NodeType$$1.GeneralNode = NodeType$$1.FuncDecl;
    NodeType$$1.LastAsg = NodeType$$1.AsgRs2;
  })(TypeScript$$2.NodeType || (TypeScript$$2.NodeType = {}));
  var NodeType = TypeScript$$2.NodeType;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$3) {
  function numberHashFn(key$$14) {
    var c2 = 668265261;
    key$$14 = key$$14 ^ 61 ^ key$$14 >>> 16;
    key$$14 = key$$14 + (key$$14 << 3);
    key$$14 = key$$14 ^ key$$14 >>> 4;
    key$$14 = key$$14 * c2;
    key$$14 = key$$14 ^ key$$14 >>> 15;
    return key$$14;
  }
  function combineHashes(key1, key2) {
    return key2 ^ (key1 >> 5) + key1;
  }
  var BlockIntrinsics = function() {
    function BlockIntrinsics$$1() {
      this.prototype = undefined;
      this.toString = undefined;
      this.toLocaleString = undefined;
      this.valueOf = undefined;
      this.hasOwnProperty = undefined;
      this.propertyIsEnumerable = undefined;
      this.isPrototypeOf = undefined;
      this["constructor"] = undefined;
    }
    return BlockIntrinsics$$1;
  }();
  TypeScript$$3.BlockIntrinsics = BlockIntrinsics;
  var StringHashTable = function() {
    function StringHashTable$$1() {
      this.itemCount = 0;
      this.table = new BlockIntrinsics;
    }
    StringHashTable$$1.prototype.getAllKeys = function() {
      var result$$2 = [];
      var k$$1;
      for (k$$1 in this.table) {
        if (this.table[k$$1] != undefined) {
          result$$2[result$$2.length] = k$$1;
        }
      }
      return result$$2;
    };
    StringHashTable$$1.prototype.add = function(key$$15, data$$21) {
      if (this.table[key$$15] != undefined) {
        return false;
      }
      this.table[key$$15] = data$$21;
      this.itemCount++;
      return true;
    };
    StringHashTable$$1.prototype.addOrUpdate = function(key$$16, data$$22) {
      if (this.table[key$$16] != undefined) {
        this.table[key$$16] = data$$22;
        return false;
      }
      this.table[key$$16] = data$$22;
      this.itemCount++;
      return true;
    };
    StringHashTable$$1.prototype.map = function(fn, context) {
      var k$$2;
      for (k$$2 in this.table) {
        var data$$23 = this.table[k$$2];
        if (data$$23 != undefined) {
          fn(k$$2, this.table[k$$2], context);
        }
      }
    };
    StringHashTable$$1.prototype.every = function(fn$$1, context$$1) {
      var k$$3;
      for (k$$3 in this.table) {
        var data$$24 = this.table[k$$3];
        if (data$$24 != undefined) {
          if (!fn$$1(k$$3, this.table[k$$3], context$$1)) {
            return false;
          }
        }
      }
      return true;
    };
    StringHashTable$$1.prototype.some = function(fn$$2, context$$2) {
      var k$$4;
      for (k$$4 in this.table) {
        var data$$25 = this.table[k$$4];
        if (data$$25 != undefined) {
          if (fn$$2(k$$4, this.table[k$$4], context$$2)) {
            return true;
          }
        }
      }
      return false;
    };
    StringHashTable$$1.prototype.count = function() {
      return this.itemCount;
    };
    StringHashTable$$1.prototype.lookup = function(key$$17) {
      var data$$26 = this.table[key$$17];
      if (data$$26 != undefined) {
        return data$$26;
      } else {
        return null;
      }
    };
    return StringHashTable$$1;
  }();
  TypeScript$$3.StringHashTable = StringHashTable;
  var DualStringHashTable = function() {
    function DualStringHashTable$$1(primaryTable, secondaryTable) {
      this.primaryTable = primaryTable;
      this.secondaryTable = secondaryTable;
      this.insertPrimary = true;
    }
    DualStringHashTable$$1.prototype.getAllKeys = function() {
      return this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());
    };
    DualStringHashTable$$1.prototype.add = function(key$$18, data$$27) {
      if (this.insertPrimary) {
        return this.primaryTable.add(key$$18, data$$27);
      } else {
        return this.secondaryTable.add(key$$18, data$$27);
      }
    };
    DualStringHashTable$$1.prototype.addOrUpdate = function(key$$19, data$$28) {
      if (this.insertPrimary) {
        return this.primaryTable.addOrUpdate(key$$19, data$$28);
      } else {
        return this.secondaryTable.addOrUpdate(key$$19, data$$28);
      }
    };
    DualStringHashTable$$1.prototype.map = function(fn$$3, context$$3) {
      this.primaryTable.map(fn$$3, context$$3);
      this.secondaryTable.map(fn$$3, context$$3);
    };
    DualStringHashTable$$1.prototype.every = function(fn$$4, context$$4) {
      return this.primaryTable.every(fn$$4, context$$4) && this.secondaryTable.every(fn$$4, context$$4);
    };
    DualStringHashTable$$1.prototype.some = function(fn$$5, context$$5) {
      return this.primaryTable.some(fn$$5, context$$5) || this.secondaryTable.some(fn$$5, context$$5);
    };
    DualStringHashTable$$1.prototype.count = function() {
      return this.primaryTable.count() + this.secondaryTable.count();
    };
    DualStringHashTable$$1.prototype.lookup = function(key$$20) {
      var data$$29 = this.primaryTable.lookup(key$$20);
      if (data$$29 != undefined) {
        return data$$29;
      } else {
        return this.secondaryTable.lookup(key$$20);
      }
    };
    return DualStringHashTable$$1;
  }();
  TypeScript$$3.DualStringHashTable = DualStringHashTable;
  TypeScript$$3.numberHashFn = numberHashFn;
  TypeScript$$3.combineHashes = combineHashes;
  var HashEntry = function() {
    function HashEntry$$1(key$$21, data$$30) {
      this.key = key$$21;
      this.data = data$$30;
    }
    return HashEntry$$1;
  }();
  TypeScript$$3.HashEntry = HashEntry;
  var HashTable = function() {
    function HashTable$$1(size$$4, hashFn, equalsFn) {
      this.size = size$$4;
      this.hashFn = hashFn;
      this.equalsFn = equalsFn;
      this.itemCount = 0;
      this.table = new Array;
      var i$$9 = 0;
      for (;i$$9 < this.size;i$$9++) {
        this.table[i$$9] = null;
      }
    }
    HashTable$$1.prototype.add = function(key$$22, data$$31) {
      var current;
      var entry = new HashEntry(key$$22, data$$31);
      var val$$1 = this.hashFn(key$$22);
      val$$1 = val$$1 % this.size;
      current = this.table[val$$1];
      for (;current != null;current = current.next) {
        if (this.equalsFn(key$$22, current.key)) {
          return false;
        }
      }
      entry.next = this.table[val$$1];
      this.table[val$$1] = entry;
      this.itemCount++;
      return true;
    };
    HashTable$$1.prototype.remove = function(key$$23) {
      var current$$1;
      var val$$2 = this.hashFn(key$$23);
      val$$2 = val$$2 % this.size;
      var result$$3 = null;
      var prevEntry = null;
      current$$1 = this.table[val$$2];
      for (;current$$1 != null;current$$1 = current$$1.next) {
        if (this.equalsFn(key$$23, current$$1.key)) {
          result$$3 = current$$1.data;
          this.itemCount--;
          if (prevEntry) {
            prevEntry.next = current$$1.next;
          } else {
            this.table[val$$2] = current$$1.next;
          }
          break;
        }
        prevEntry = current$$1;
      }
      return result$$3;
    };
    HashTable$$1.prototype.count = function() {
      return this.itemCount;
    };
    HashTable$$1.prototype.lookup = function(key$$24) {
      var current$$2;
      var val$$3 = this.hashFn(key$$24);
      val$$3 = val$$3 % this.size;
      current$$2 = this.table[val$$3];
      for (;current$$2 != null;current$$2 = current$$2.next) {
        if (this.equalsFn(key$$24, current$$2.key)) {
          return current$$2.data;
        }
      }
      return null;
    };
    return HashTable$$1;
  }();
  TypeScript$$3.HashTable = HashTable;
  var SimpleHashTable = function() {
    function SimpleHashTable$$1() {
      this.keys = [];
      this.values = [];
    }
    SimpleHashTable$$1.prototype.lookup = function(key$$25, findValue) {
      var searchArray = this.keys;
      if (findValue) {
        searchArray = this.values;
      }
      var i$$10 = 0;
      for (;i$$10 < searchArray.length;i$$10++) {
        if (searchArray[i$$10] == key$$25) {
          return{key:this.keys[i$$10], data:this.values[i$$10]};
        }
      }
      return null;
    };
    SimpleHashTable$$1.prototype.add = function(key$$26, data$$32) {
      var lookupData = this.lookup(key$$26);
      if (lookupData) {
        return false;
      }
      this.keys[this.keys.length] = key$$26;
      this.values[this.values.length] = data$$32;
      return true;
    };
    return SimpleHashTable$$1;
  }();
  TypeScript$$3.SimpleHashTable = SimpleHashTable;
})(TypeScript || (TypeScript = {}));
var __extends = this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  __.prototype = b.prototype;
  d.prototype = new __;
};
(function(TypeScript$$4) {
  var ASTSpan = function() {
    function ASTSpan$$1() {
      this.minChar = -1;
      this.limChar = -1;
    }
    return ASTSpan$$1;
  }();
  TypeScript$$4.ASTSpan = ASTSpan;
  var AST = function(_super) {
    function AST$$1(nodeType) {
      _super.call(this);
      this.nodeType = nodeType;
      this.type = null;
      this.flags = TypeScript$$4.ASTFlags.Writeable;
      this.passCreated = TypeScript$$4.CompilerDiagnostics.analysisPass;
      this.preComments = null;
      this.postComments = null;
      this.docComments = null;
      this.isParenthesized = false;
    }
    __extends(AST$$1, _super);
    AST$$1.prototype.isExpression = function() {
      return false;
    };
    AST$$1.prototype.isStatementOrExpression = function() {
      return false;
    };
    AST$$1.prototype.isCompoundStatement = function() {
      return false;
    };
    AST$$1.prototype.isLeaf = function() {
      return this.isStatementOrExpression() && !this.isCompoundStatement();
    };
    AST$$1.prototype.isDeclaration = function() {
      return false;
    };
    AST$$1.prototype.typeCheck = function(typeFlow) {
      switch(this.nodeType) {
        case TypeScript$$4.NodeType.Error:
        ;
        case TypeScript$$4.NodeType.EmptyExpr:
          this.type = typeFlow.anyType;
          break;
        case TypeScript$$4.NodeType.This:
          return typeFlow.typeCheckThis(this);
        case TypeScript$$4.NodeType.Null:
          this.type = typeFlow.nullType;
          break;
        case TypeScript$$4.NodeType.False:
        ;
        case TypeScript$$4.NodeType.True:
          this.type = typeFlow.booleanType;
          break;
        case TypeScript$$4.NodeType.Super:
          return typeFlow.typeCheckSuper(this);
        case TypeScript$$4.NodeType.EndCode:
        ;
        case TypeScript$$4.NodeType.Empty:
        ;
        case TypeScript$$4.NodeType.Void:
          this.type = typeFlow.voidType;
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    };
    AST$$1.prototype.emit = function(emitter, tokenId, startLine) {
      emitter.emitParensAndCommentsInPlace(this, true);
      switch(this.nodeType) {
        case TypeScript$$4.NodeType.This:
          emitter.recordSourceMappingStart(this);
          if (emitter.thisFnc && TypeScript$$4.hasFlag(emitter.thisFnc.fncFlags, TypeScript$$4.FncFlags.IsFatArrowFunction)) {
            emitter.writeToOutput("_this");
          } else {
            emitter.writeToOutput("this");
          }
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.Null:
          emitter.recordSourceMappingStart(this);
          emitter.writeToOutput("null");
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.False:
          emitter.recordSourceMappingStart(this);
          emitter.writeToOutput("false");
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.True:
          emitter.recordSourceMappingStart(this);
          emitter.writeToOutput("true");
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.Super:
          emitter.recordSourceMappingStart(this);
          emitter.emitSuperReference();
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.EndCode:
        ;
        case TypeScript$$4.NodeType.Error:
        ;
        case TypeScript$$4.NodeType.EmptyExpr:
          break;
        case TypeScript$$4.NodeType.Empty:
          emitter.recordSourceMappingStart(this);
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.Void:
          emitter.recordSourceMappingStart(this);
          emitter.writeToOutput("void ");
          emitter.recordSourceMappingEnd(this);
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      emitter.emitParensAndCommentsInPlace(this, false);
    };
    AST$$1.prototype.print = function(context$$6) {
      context$$6.startLine();
      var lineCol = {line:-1, col:-1};
      var limLineCol = {line:-1, col:-1};
      if (context$$6.parser !== null) {
        context$$6.parser.getSourceLineCol(lineCol, this.minChar);
        context$$6.parser.getSourceLineCol(limLineCol, this.limChar);
        context$$6.write("(" + lineCol.line + "," + lineCol.col + ")--" + "(" + limLineCol.line + "," + limLineCol.col + "): ");
      }
      var lab = this.printLabel();
      if (TypeScript$$4.hasFlag(this.flags, TypeScript$$4.ASTFlags.Error)) {
        lab += " (Error)";
      }
      context$$6.writeLine(lab);
    };
    AST$$1.prototype.printLabel = function() {
      if (TypeScript$$4.nodeTypeTable[this.nodeType] !== undefined) {
        return TypeScript$$4.nodeTypeTable[this.nodeType];
      } else {
        return TypeScript$$4.NodeType._map[this.nodeType];
      }
    };
    AST$$1.prototype.addToControlFlow = function(context$$7) {
      context$$7.walker.options.goChildren = false;
      context$$7.addContent(this);
    };
    AST$$1.prototype.netFreeUses = function(container, freeUses) {
    };
    AST$$1.prototype.treeViewLabel = function() {
      return TypeScript$$4.NodeType._map[this.nodeType];
    };
    AST$$1.getResolvedIdentifierName = function getResolvedIdentifierName(name$$32) {
      if (!name$$32) {
        return "";
      }
      var resolved = "";
      var start$$6 = 0;
      var i$$11 = 0;
      for (;i$$11 <= name$$32.length - 6;) {
        if (name$$32.charAt(i$$11) == "\\" && name$$32.charAt(i$$11 + 1) == "u") {
          var charCode = parseInt(name$$32.substr(i$$11 + 2, 4), 16);
          resolved += name$$32.substr(start$$6, i$$11 - start$$6);
          resolved += String.fromCharCode(charCode);
          i$$11 += 6;
          start$$6 = i$$11;
          continue;
        }
        i$$11++;
      }
      resolved += name$$32.substring(start$$6);
      return resolved;
    };
    AST$$1.prototype.getDocComments = function() {
      if (!this.isDeclaration() || !this.preComments || this.preComments.length == 0) {
        return[];
      }
      if (!this.docComments) {
        var preCommentsLength = this.preComments.length;
        var docComments = [];
        var i$$12 = preCommentsLength - 1;
        for (;i$$12 >= 0;i$$12--) {
          if (this.preComments[i$$12].isDocComment()) {
            var prevDocComment = docComments.length > 0 ? docComments[docComments.length - 1] : null;
            if (prevDocComment == null || (this.preComments[i$$12].limLine == prevDocComment.minLine || this.preComments[i$$12].limLine + 1 == prevDocComment.minLine)) {
              docComments.push(this.preComments[i$$12]);
              continue;
            }
          }
          break;
        }
        this.docComments = docComments.reverse();
      }
      return this.docComments;
    };
    return AST$$1;
  }(ASTSpan);
  TypeScript$$4.AST = AST;
  var IncompleteAST = function(_super$$1) {
    function IncompleteAST$$1(min, lim) {
      _super$$1.call(this, TypeScript$$4.NodeType.Error);
      this.minChar = min;
      this.limChar = lim;
    }
    __extends(IncompleteAST$$1, _super$$1);
    return IncompleteAST$$1;
  }(AST);
  TypeScript$$4.IncompleteAST = IncompleteAST;
  var ASTList = function(_super$$2) {
    function ASTList$$1() {
      _super$$2.call(this, TypeScript$$4.NodeType.List);
      this.enclosingScope = null;
      this.members = new Array;
    }
    __extends(ASTList$$1, _super$$2);
    ASTList$$1.prototype.addToControlFlow = function(context$$8) {
      var len$$1 = this.members.length;
      var i$$13 = 0;
      for (;i$$13 < len$$1;i$$13++) {
        if (context$$8.noContinuation) {
          context$$8.addUnreachable(this.members[i$$13]);
          break;
        } else {
          this.members[i$$13] = context$$8.walk(this.members[i$$13], this);
        }
      }
      context$$8.walker.options.goChildren = false;
    };
    ASTList$$1.prototype.append = function(ast) {
      this.members[this.members.length] = ast;
      return this;
    };
    ASTList$$1.prototype.appendAll = function(ast$$1) {
      if (ast$$1.nodeType == TypeScript$$4.NodeType.List) {
        var list = ast$$1;
        var i$$14 = 0;
        var len$$2 = list.members.length;
        for (;i$$14 < len$$2;i$$14++) {
          this.append(list.members[i$$14]);
        }
      } else {
        this.append(ast$$1);
      }
      return this;
    };
    ASTList$$1.prototype.emit = function(emitter$$1, tokenId$$1, startLine$$1) {
      emitter$$1.recordSourceMappingStart(this);
      emitter$$1.emitJavascriptList(this, null, TypeScript$$4.TokenID.Semicolon, startLine$$1, false, false);
      emitter$$1.recordSourceMappingEnd(this);
    };
    ASTList$$1.prototype.typeCheck = function(typeFlow$$1) {
      var len$$3 = this.members.length;
      typeFlow$$1.nestingLevel++;
      var i$$15 = 0;
      for (;i$$15 < len$$3;i$$15++) {
        if (this.members[i$$15]) {
          this.members[i$$15] = this.members[i$$15].typeCheck(typeFlow$$1);
        }
      }
      typeFlow$$1.nestingLevel--;
      return this;
    };
    return ASTList$$1;
  }(AST);
  TypeScript$$4.ASTList = ASTList;
  var Identifier = function(_super$$3) {
    function Identifier$$1(actualText, hasEscapeSequence) {
      _super$$3.call(this, TypeScript$$4.NodeType.Name);
      this.actualText = actualText;
      this.hasEscapeSequence = hasEscapeSequence;
      this.sym = null;
      this.cloId = -1;
      this.setText(actualText, hasEscapeSequence);
    }
    __extends(Identifier$$1, _super$$3);
    Identifier$$1.prototype.setText = function(actualText$$1, hasEscapeSequence$$1) {
      this.actualText = actualText$$1;
      if (hasEscapeSequence$$1) {
        this.text = AST.getResolvedIdentifierName(actualText$$1);
      } else {
        this.text = actualText$$1;
      }
    };
    Identifier$$1.prototype.isMissing = function() {
      return false;
    };
    Identifier$$1.prototype.isLeaf = function() {
      return true;
    };
    Identifier$$1.prototype.treeViewLabel = function() {
      return "id: " + this.actualText;
    };
    Identifier$$1.prototype.printLabel = function() {
      if (this.actualText) {
        return "id: " + this.actualText;
      } else {
        return "name node";
      }
    };
    Identifier$$1.prototype.typeCheck = function(typeFlow$$2) {
      return typeFlow$$2.typeCheckName(this);
    };
    Identifier$$1.prototype.emit = function(emitter$$2, tokenId$$2, startLine$$2) {
      emitter$$2.emitJavascriptName(this, true);
    };
    Identifier$$1.fromToken = function fromToken(token$$4) {
      return new Identifier$$1(token$$4.getText(), token$$4.hasEscapeSequence);
    };
    return Identifier$$1;
  }(AST);
  TypeScript$$4.Identifier = Identifier;
  var MissingIdentifier = function(_super$$4) {
    function MissingIdentifier$$1() {
      _super$$4.call(this, "__missing");
    }
    __extends(MissingIdentifier$$1, _super$$4);
    MissingIdentifier$$1.prototype.isMissing = function() {
      return true;
    };
    MissingIdentifier$$1.prototype.emit = function(emitter$$3, tokenId$$3, startLine$$3) {
    };
    return MissingIdentifier$$1;
  }(Identifier);
  TypeScript$$4.MissingIdentifier = MissingIdentifier;
  var Label = function(_super$$5) {
    function Label$$1(id) {
      _super$$5.call(this, TypeScript$$4.NodeType.Label);
      this.id = id;
    }
    __extends(Label$$1, _super$$5);
    Label$$1.prototype.printLabel = function() {
      return this.id.actualText + ":";
    };
    Label$$1.prototype.typeCheck = function(typeFlow$$3) {
      this.type = typeFlow$$3.voidType;
      return this;
    };
    Label$$1.prototype.emit = function(emitter$$4, tokenId$$4, startLine$$4) {
      emitter$$4.emitParensAndCommentsInPlace(this, true);
      emitter$$4.recordSourceMappingStart(this);
      emitter$$4.recordSourceMappingStart(this.id);
      emitter$$4.writeToOutput(this.id.actualText);
      emitter$$4.recordSourceMappingEnd(this.id);
      emitter$$4.writeLineToOutput(":");
      emitter$$4.recordSourceMappingEnd(this);
      emitter$$4.emitParensAndCommentsInPlace(this, false);
    };
    return Label$$1;
  }(AST);
  TypeScript$$4.Label = Label;
  var Expression = function(_super$$6) {
    function Expression$$1(nodeType$$1) {
      _super$$6.call(this, nodeType$$1);
    }
    __extends(Expression$$1, _super$$6);
    Expression$$1.prototype.isExpression = function() {
      return true;
    };
    Expression$$1.prototype.isStatementOrExpression = function() {
      return true;
    };
    return Expression$$1;
  }(AST);
  TypeScript$$4.Expression = Expression;
  var UnaryExpression = function(_super$$7) {
    function UnaryExpression$$1(nodeType$$2, operand) {
      _super$$7.call(this, nodeType$$2);
      this.operand = operand;
      this.targetType = null;
      this.castTerm = null;
    }
    __extends(UnaryExpression$$1, _super$$7);
    UnaryExpression$$1.prototype.addToControlFlow = function(context$$9) {
      _super$$7.prototype.addToControlFlow.call(this, context$$9);
      if (this.nodeType == TypeScript$$4.NodeType.Throw) {
        context$$9.returnStmt();
      }
    };
    UnaryExpression$$1.prototype.typeCheck = function(typeFlow$$4) {
      switch(this.nodeType) {
        case TypeScript$$4.NodeType.Not:
          return typeFlow$$4.typeCheckBitNot(this);
        case TypeScript$$4.NodeType.LogNot:
          return typeFlow$$4.typeCheckLogNot(this);
        case TypeScript$$4.NodeType.Pos:
        ;
        case TypeScript$$4.NodeType.Neg:
          return typeFlow$$4.typeCheckUnaryNumberOperator(this);
        case TypeScript$$4.NodeType.IncPost:
        ;
        case TypeScript$$4.NodeType.IncPre:
        ;
        case TypeScript$$4.NodeType.DecPost:
        ;
        case TypeScript$$4.NodeType.DecPre:
          return typeFlow$$4.typeCheckIncOrDec(this);
        case TypeScript$$4.NodeType.ArrayLit:
          typeFlow$$4.typeCheckArrayLit(this);
          return this;
        case TypeScript$$4.NodeType.ObjectLit:
          typeFlow$$4.typeCheckObjectLit(this);
          return this;
        case TypeScript$$4.NodeType.Throw:
          this.operand = typeFlow$$4.typeCheck(this.operand);
          this.type = typeFlow$$4.voidType;
          return this;
        case TypeScript$$4.NodeType.Typeof:
          this.operand = typeFlow$$4.typeCheck(this.operand);
          this.type = typeFlow$$4.stringType;
          return this;
        case TypeScript$$4.NodeType.Delete:
          this.operand = typeFlow$$4.typeCheck(this.operand);
          this.type = typeFlow$$4.booleanType;
          break;
        case TypeScript$$4.NodeType.TypeAssertion:
          this.castTerm = typeFlow$$4.typeCheck(this.castTerm);
          var applyTargetType = !this.operand.isParenthesized;
          var targetType = applyTargetType ? this.castTerm.type : null;
          typeFlow$$4.checker.typeCheckWithContextualType(targetType, typeFlow$$4.checker.inProvisionalTypecheckMode(), true, this.operand);
          typeFlow$$4.castWithCoercion(this.operand, this.castTerm.type, false, true);
          this.type = this.castTerm.type;
          return this;
        case TypeScript$$4.NodeType.Void:
          this.operand = typeFlow$$4.typeCheck(this.operand);
          this.type = typeFlow$$4.checker.undefinedType;
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    };
    UnaryExpression$$1.prototype.emit = function(emitter$$5, tokenId$$5, startLine$$5) {
      emitter$$5.emitParensAndCommentsInPlace(this, true);
      emitter$$5.recordSourceMappingStart(this);
      switch(this.nodeType) {
        case TypeScript$$4.NodeType.IncPost:
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.PlusPlus, false);
          emitter$$5.writeToOutput("++");
          break;
        case TypeScript$$4.NodeType.LogNot:
          emitter$$5.writeToOutput("!");
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Exclamation, false);
          break;
        case TypeScript$$4.NodeType.DecPost:
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.MinusMinus, false);
          emitter$$5.writeToOutput("--");
          break;
        case TypeScript$$4.NodeType.ObjectLit:
          emitter$$5.emitObjectLiteral(this.operand);
          break;
        case TypeScript$$4.NodeType.ArrayLit:
          emitter$$5.emitArrayLiteral(this.operand);
          break;
        case TypeScript$$4.NodeType.Not:
          emitter$$5.writeToOutput("~");
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Tilde, false);
          break;
        case TypeScript$$4.NodeType.Neg:
          emitter$$5.writeToOutput("-");
          if (this.operand.nodeType == TypeScript$$4.NodeType.Neg) {
            this.operand.isParenthesized = true;
          }
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Minus, false);
          break;
        case TypeScript$$4.NodeType.Pos:
          emitter$$5.writeToOutput("+");
          if (this.operand.nodeType == TypeScript$$4.NodeType.Pos) {
            this.operand.isParenthesized = true;
          }
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Plus, false);
          break;
        case TypeScript$$4.NodeType.IncPre:
          emitter$$5.writeToOutput("++");
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.PlusPlus, false);
          break;
        case TypeScript$$4.NodeType.DecPre:
          emitter$$5.writeToOutput("--");
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.MinusMinus, false);
          break;
        case TypeScript$$4.NodeType.Throw:
          emitter$$5.writeToOutput("throw ");
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Tilde, false);
          emitter$$5.writeToOutput(";");
          break;
        case TypeScript$$4.NodeType.Typeof:
          emitter$$5.writeToOutput("typeof ");
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Tilde, false);
          break;
        case TypeScript$$4.NodeType.Delete:
          emitter$$5.writeToOutput("delete ");
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Tilde, false);
          break;
        case TypeScript$$4.NodeType.Void:
          emitter$$5.writeToOutput("void ");
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Tilde, false);
          break;
        case TypeScript$$4.NodeType.TypeAssertion:
          emitter$$5.emitJavascript(this.operand, TypeScript$$4.TokenID.Tilde, false);
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      emitter$$5.recordSourceMappingEnd(this);
      emitter$$5.emitParensAndCommentsInPlace(this, false);
    };
    return UnaryExpression$$1;
  }(Expression);
  TypeScript$$4.UnaryExpression = UnaryExpression;
  var CallExpression = function(_super$$8) {
    function CallExpression$$1(nodeType$$3, target$$26, args) {
      _super$$8.call(this, nodeType$$3);
      this.target = target$$26;
      this.arguments = args;
      this.signature = null;
      this.minChar = this.target.minChar;
    }
    __extends(CallExpression$$1, _super$$8);
    CallExpression$$1.prototype.typeCheck = function(typeFlow$$5) {
      if (this.nodeType == TypeScript$$4.NodeType.New) {
        return typeFlow$$5.typeCheckNew(this);
      } else {
        return typeFlow$$5.typeCheckCall(this);
      }
    };
    CallExpression$$1.prototype.emit = function(emitter$$6, tokenId$$6, startLine$$6) {
      emitter$$6.emitParensAndCommentsInPlace(this, true);
      emitter$$6.recordSourceMappingStart(this);
      if (this.nodeType == TypeScript$$4.NodeType.New) {
        emitter$$6.emitNew(this.target, this.arguments);
      } else {
        emitter$$6.emitCall(this, this.target, this.arguments);
      }
      emitter$$6.recordSourceMappingEnd(this);
      emitter$$6.emitParensAndCommentsInPlace(this, false);
    };
    return CallExpression$$1;
  }(Expression);
  TypeScript$$4.CallExpression = CallExpression;
  var BinaryExpression = function(_super$$9) {
    function BinaryExpression$$1(nodeType$$4, operand1, operand2) {
      _super$$9.call(this, nodeType$$4);
      this.operand1 = operand1;
      this.operand2 = operand2;
    }
    __extends(BinaryExpression$$1, _super$$9);
    BinaryExpression$$1.prototype.typeCheck = function(typeFlow$$6) {
      switch(this.nodeType) {
        case TypeScript$$4.NodeType.Dot:
          return typeFlow$$6.typeCheckDotOperator(this);
        case TypeScript$$4.NodeType.Asg:
          return typeFlow$$6.typeCheckAsgOperator(this);
        case TypeScript$$4.NodeType.Add:
        ;
        case TypeScript$$4.NodeType.Sub:
        ;
        case TypeScript$$4.NodeType.Mul:
        ;
        case TypeScript$$4.NodeType.Div:
        ;
        case TypeScript$$4.NodeType.Mod:
        ;
        case TypeScript$$4.NodeType.Or:
        ;
        case TypeScript$$4.NodeType.And:
          return typeFlow$$6.typeCheckArithmeticOperator(this, false);
        case TypeScript$$4.NodeType.Xor:
          return typeFlow$$6.typeCheckBitwiseOperator(this, false);
        case TypeScript$$4.NodeType.Ne:
        ;
        case TypeScript$$4.NodeType.Eq:
          var text$$7;
          if (typeFlow$$6.checker.styleSettings.eqeqeq) {
            text$$7 = TypeScript$$4.nodeTypeTable[this.nodeType];
            typeFlow$$6.checker.errorReporter.styleError(this, "use of " + text$$7);
          } else {
            if (typeFlow$$6.checker.styleSettings.eqnull) {
              text$$7 = TypeScript$$4.nodeTypeTable[this.nodeType];
              if (this.operand2 !== null && this.operand2.nodeType == TypeScript$$4.NodeType.Null) {
                typeFlow$$6.checker.errorReporter.styleError(this, "use of " + text$$7 + " to compare with null");
              }
            }
          }
        ;
        case TypeScript$$4.NodeType.Eqv:
        ;
        case TypeScript$$4.NodeType.NEqv:
        ;
        case TypeScript$$4.NodeType.Lt:
        ;
        case TypeScript$$4.NodeType.Le:
        ;
        case TypeScript$$4.NodeType.Ge:
        ;
        case TypeScript$$4.NodeType.Gt:
          return typeFlow$$6.typeCheckBooleanOperator(this);
        case TypeScript$$4.NodeType.Index:
          return typeFlow$$6.typeCheckIndex(this);
        case TypeScript$$4.NodeType.Member:
          this.type = typeFlow$$6.voidType;
          return this;
        case TypeScript$$4.NodeType.LogOr:
          return typeFlow$$6.typeCheckLogOr(this);
        case TypeScript$$4.NodeType.LogAnd:
          return typeFlow$$6.typeCheckLogAnd(this);
        case TypeScript$$4.NodeType.AsgAdd:
        ;
        case TypeScript$$4.NodeType.AsgSub:
        ;
        case TypeScript$$4.NodeType.AsgMul:
        ;
        case TypeScript$$4.NodeType.AsgDiv:
        ;
        case TypeScript$$4.NodeType.AsgMod:
        ;
        case TypeScript$$4.NodeType.AsgOr:
        ;
        case TypeScript$$4.NodeType.AsgAnd:
          return typeFlow$$6.typeCheckArithmeticOperator(this, true);
        case TypeScript$$4.NodeType.AsgXor:
          return typeFlow$$6.typeCheckBitwiseOperator(this, true);
        case TypeScript$$4.NodeType.Lsh:
        ;
        case TypeScript$$4.NodeType.Rsh:
        ;
        case TypeScript$$4.NodeType.Rs2:
          return typeFlow$$6.typeCheckShift(this, false);
        case TypeScript$$4.NodeType.AsgLsh:
        ;
        case TypeScript$$4.NodeType.AsgRsh:
        ;
        case TypeScript$$4.NodeType.AsgRs2:
          return typeFlow$$6.typeCheckShift(this, true);
        case TypeScript$$4.NodeType.Comma:
          return typeFlow$$6.typeCheckCommaOperator(this);
        case TypeScript$$4.NodeType.InstOf:
          return typeFlow$$6.typeCheckInstOf(this);
        case TypeScript$$4.NodeType.In:
          return typeFlow$$6.typeCheckInOperator(this);
        case TypeScript$$4.NodeType.From:
          typeFlow$$6.checker.errorReporter.simpleError(this, "Illegal use of 'from' keyword in binary expression");
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    };
    BinaryExpression$$1.prototype.emit = function(emitter$$7, tokenId$$7, startLine$$7) {
      var binTokenId = TypeScript$$4.nodeTypeToTokTable[this.nodeType];
      emitter$$7.emitParensAndCommentsInPlace(this, true);
      emitter$$7.recordSourceMappingStart(this);
      if (binTokenId != undefined) {
        emitter$$7.emitJavascript(this.operand1, binTokenId, false);
        if (TypeScript$$4.tokenTable[binTokenId].text == "instanceof") {
          emitter$$7.writeToOutput(" instanceof ");
        } else {
          if (TypeScript$$4.tokenTable[binTokenId].text == "in") {
            emitter$$7.writeToOutput(" in ");
          } else {
            emitter$$7.writeToOutputTrimmable(" " + TypeScript$$4.tokenTable[binTokenId].text + " ");
          }
        }
        emitter$$7.emitJavascript(this.operand2, binTokenId, false);
      } else {
        switch(this.nodeType) {
          case TypeScript$$4.NodeType.Dot:
            if (!emitter$$7.tryEmitConstant(this)) {
              emitter$$7.emitJavascript(this.operand1, TypeScript$$4.TokenID.Dot, false);
              emitter$$7.writeToOutput(".");
              emitter$$7.emitJavascriptName(this.operand2, false);
            }
            break;
          case TypeScript$$4.NodeType.Index:
            emitter$$7.emitIndex(this.operand1, this.operand2);
            break;
          case TypeScript$$4.NodeType.Member:
            if (this.operand2.nodeType == TypeScript$$4.NodeType.FuncDecl && this.operand2.isAccessor()) {
              var funcDecl = this.operand2;
              if (TypeScript$$4.hasFlag(funcDecl.fncFlags, TypeScript$$4.FncFlags.GetAccessor)) {
                emitter$$7.writeToOutput("get ");
              } else {
                emitter$$7.writeToOutput("set ");
              }
              emitter$$7.emitJavascript(this.operand1, TypeScript$$4.TokenID.Colon, false);
            } else {
              emitter$$7.emitJavascript(this.operand1, TypeScript$$4.TokenID.Colon, false);
              emitter$$7.writeToOutputTrimmable(": ");
            }
            emitter$$7.emitJavascript(this.operand2, TypeScript$$4.TokenID.Comma, false);
            break;
          case TypeScript$$4.NodeType.Comma:
            emitter$$7.emitJavascript(this.operand1, TypeScript$$4.TokenID.Comma, false);
            if (emitter$$7.emitState.inObjectLiteral) {
              emitter$$7.writeLineToOutput(", ");
            } else {
              emitter$$7.writeToOutput(",");
            }
            emitter$$7.emitJavascript(this.operand2, TypeScript$$4.TokenID.Comma, false);
            break;
          case TypeScript$$4.NodeType.Is:
            throw new Error("should be de-sugared during type check");;
          default:
            throw new Error("please implement in derived class");;
        }
      }
      emitter$$7.recordSourceMappingEnd(this);
      emitter$$7.emitParensAndCommentsInPlace(this, false);
    };
    return BinaryExpression$$1;
  }(Expression);
  TypeScript$$4.BinaryExpression = BinaryExpression;
  var ConditionalExpression = function(_super$$10) {
    function ConditionalExpression$$1(operand1$$1, operand2$$1, operand3) {
      _super$$10.call(this, TypeScript$$4.NodeType.ConditionalExpression);
      this.operand1 = operand1$$1;
      this.operand2 = operand2$$1;
      this.operand3 = operand3;
    }
    __extends(ConditionalExpression$$1, _super$$10);
    ConditionalExpression$$1.prototype.typeCheck = function(typeFlow$$7) {
      return typeFlow$$7.typeCheckQMark(this);
    };
    ConditionalExpression$$1.prototype.emit = function(emitter$$8, tokenId$$8, startLine$$8) {
      emitter$$8.emitParensAndCommentsInPlace(this, true);
      emitter$$8.recordSourceMappingStart(this);
      emitter$$8.emitJavascript(this.operand1, TypeScript$$4.TokenID.Question, false);
      emitter$$8.writeToOutput(" ? ");
      emitter$$8.emitJavascript(this.operand2, TypeScript$$4.TokenID.Question, false);
      emitter$$8.writeToOutput(" : ");
      emitter$$8.emitJavascript(this.operand3, TypeScript$$4.TokenID.Question, false);
      emitter$$8.recordSourceMappingEnd(this);
      emitter$$8.emitParensAndCommentsInPlace(this, false);
    };
    return ConditionalExpression$$1;
  }(Expression);
  TypeScript$$4.ConditionalExpression = ConditionalExpression;
  var NumberLiteral = function(_super$$11) {
    function NumberLiteral$$1(value$$28, hasEmptyFraction) {
      _super$$11.call(this, TypeScript$$4.NodeType.NumberLit);
      this.value = value$$28;
      this.hasEmptyFraction = hasEmptyFraction;
      this.isNegativeZero = false;
    }
    __extends(NumberLiteral$$1, _super$$11);
    NumberLiteral$$1.prototype.typeCheck = function(typeFlow$$8) {
      this.type = typeFlow$$8.doubleType;
      return this;
    };
    NumberLiteral$$1.prototype.treeViewLabel = function() {
      return "num: " + this.printLabel();
    };
    NumberLiteral$$1.prototype.emit = function(emitter$$9, tokenId$$9, startLine$$9) {
      emitter$$9.emitParensAndCommentsInPlace(this, true);
      emitter$$9.recordSourceMappingStart(this);
      if (this.isNegativeZero) {
        emitter$$9.writeToOutput("-");
      }
      emitter$$9.writeToOutput(this.value.toString());
      if (this.hasEmptyFraction) {
        emitter$$9.writeToOutput(".0");
      }
      emitter$$9.recordSourceMappingEnd(this);
      emitter$$9.emitParensAndCommentsInPlace(this, false);
    };
    NumberLiteral$$1.prototype.printLabel = function() {
      if (Math.floor(this.value) != this.value) {
        return this.value.toFixed(2).toString();
      } else {
        if (this.hasEmptyFraction) {
          return this.value.toString() + ".0";
        } else {
          return this.value.toString();
        }
      }
    };
    return NumberLiteral$$1;
  }(Expression);
  TypeScript$$4.NumberLiteral = NumberLiteral;
  var RegexLiteral = function(_super$$12) {
    function RegexLiteral$$1(regex$$1) {
      _super$$12.call(this, TypeScript$$4.NodeType.Regex);
      this.regex = regex$$1;
    }
    __extends(RegexLiteral$$1, _super$$12);
    RegexLiteral$$1.prototype.typeCheck = function(typeFlow$$9) {
      this.type = typeFlow$$9.regexType;
      return this;
    };
    RegexLiteral$$1.prototype.emit = function(emitter$$10, tokenId$$10, startLine$$10) {
      emitter$$10.emitParensAndCommentsInPlace(this, true);
      emitter$$10.recordSourceMappingStart(this);
      emitter$$10.writeToOutput(this.regex.toString());
      emitter$$10.recordSourceMappingEnd(this);
      emitter$$10.emitParensAndCommentsInPlace(this, false);
    };
    return RegexLiteral$$1;
  }(Expression);
  TypeScript$$4.RegexLiteral = RegexLiteral;
  var StringLiteral = function(_super$$13) {
    function StringLiteral$$1(text$$8) {
      _super$$13.call(this, TypeScript$$4.NodeType.QString);
      this.text = text$$8;
    }
    __extends(StringLiteral$$1, _super$$13);
    StringLiteral$$1.prototype.emit = function(emitter$$11, tokenId$$11, startLine$$11) {
      emitter$$11.emitParensAndCommentsInPlace(this, true);
      emitter$$11.recordSourceMappingStart(this);
      emitter$$11.emitStringLiteral(this.text);
      emitter$$11.recordSourceMappingEnd(this);
      emitter$$11.emitParensAndCommentsInPlace(this, false);
    };
    StringLiteral$$1.prototype.typeCheck = function(typeFlow$$10) {
      this.type = typeFlow$$10.stringType;
      return this;
    };
    StringLiteral$$1.prototype.treeViewLabel = function() {
      return "st: " + this.text;
    };
    StringLiteral$$1.prototype.printLabel = function() {
      return this.text;
    };
    return StringLiteral$$1;
  }(Expression);
  TypeScript$$4.StringLiteral = StringLiteral;
  var ModuleElement = function(_super$$14) {
    function ModuleElement$$1(nodeType$$5) {
      _super$$14.call(this, nodeType$$5);
    }
    __extends(ModuleElement$$1, _super$$14);
    return ModuleElement$$1;
  }(AST);
  TypeScript$$4.ModuleElement = ModuleElement;
  var ImportDeclaration = function(_super$$15) {
    function ImportDeclaration$$1(id$$1, alias) {
      _super$$15.call(this, TypeScript$$4.NodeType.ImportDeclaration);
      this.id = id$$1;
      this.alias = alias;
      this.varFlags = TypeScript$$4.VarFlags.None;
      this.isDynamicImport = false;
    }
    __extends(ImportDeclaration$$1, _super$$15);
    ImportDeclaration$$1.prototype.isStatementOrExpression = function() {
      return true;
    };
    ImportDeclaration$$1.prototype.isDeclaration = function() {
      return true;
    };
    ImportDeclaration$$1.prototype.emit = function(emitter$$12, tokenId$$12, startLine$$12) {
      var mod = this.alias.type;
      if (!this.isDynamicImport || this.id.sym && !this.id.sym.onlyReferencedAsTypeRef) {
        var prevModAliasId = emitter$$12.modAliasId;
        var prevFirstModAlias = emitter$$12.firstModAlias;
        emitter$$12.recordSourceMappingStart(this);
        emitter$$12.emitParensAndCommentsInPlace(this, true);
        emitter$$12.writeToOutput("var " + this.id.actualText + " = ");
        emitter$$12.modAliasId = this.id.actualText;
        emitter$$12.firstModAlias = this.firstAliasedModToString();
        emitter$$12.emitJavascript(this.alias, TypeScript$$4.TokenID.Tilde, false);
        if (!this.isDynamicImport) {
          emitter$$12.writeToOutput(";");
        }
        emitter$$12.emitParensAndCommentsInPlace(this, false);
        emitter$$12.recordSourceMappingEnd(this);
        emitter$$12.modAliasId = prevModAliasId;
        emitter$$12.firstModAlias = prevFirstModAlias;
      }
    };
    ImportDeclaration$$1.prototype.typeCheck = function(typeFlow$$11) {
      return typeFlow$$11.typeCheckImportDecl(this);
    };
    ImportDeclaration$$1.prototype.getAliasName = function(aliasAST) {
      if (typeof aliasAST === "undefined") {
        aliasAST = this.alias;
      }
      if (aliasAST.nodeType == TypeScript$$4.NodeType.Name) {
        return aliasAST.actualText;
      } else {
        var dotExpr = aliasAST;
        return this.getAliasName(dotExpr.operand1) + "." + this.getAliasName(dotExpr.operand2);
      }
    };
    ImportDeclaration$$1.prototype.firstAliasedModToString = function() {
      if (this.alias.nodeType == TypeScript$$4.NodeType.Name) {
        return this.alias.actualText;
      } else {
        var dotExpr$$1 = this.alias;
        var firstMod = dotExpr$$1.operand1;
        return firstMod.actualText;
      }
    };
    return ImportDeclaration$$1;
  }(ModuleElement);
  TypeScript$$4.ImportDeclaration = ImportDeclaration;
  var BoundDecl = function(_super$$16) {
    function BoundDecl$$1(id$$2, nodeType$$6, nestingLevel) {
      _super$$16.call(this, nodeType$$6);
      this.id = id$$2;
      this.nestingLevel = nestingLevel;
      this.init = null;
      this.typeExpr = null;
      this.varFlags = TypeScript$$4.VarFlags.None;
      this.sym = null;
    }
    __extends(BoundDecl$$1, _super$$16);
    BoundDecl$$1.prototype.isDeclaration = function() {
      return true;
    };
    BoundDecl$$1.prototype.isStatementOrExpression = function() {
      return true;
    };
    BoundDecl$$1.prototype.isPrivate = function() {
      return TypeScript$$4.hasFlag(this.varFlags, TypeScript$$4.VarFlags.Private);
    };
    BoundDecl$$1.prototype.isPublic = function() {
      return TypeScript$$4.hasFlag(this.varFlags, TypeScript$$4.VarFlags.Public);
    };
    BoundDecl$$1.prototype.isProperty = function() {
      return TypeScript$$4.hasFlag(this.varFlags, TypeScript$$4.VarFlags.Property);
    };
    BoundDecl$$1.prototype.typeCheck = function(typeFlow$$12) {
      return typeFlow$$12.typeCheckBoundDecl(this);
    };
    BoundDecl$$1.prototype.printLabel = function() {
      return this.treeViewLabel();
    };
    return BoundDecl$$1;
  }(AST);
  TypeScript$$4.BoundDecl = BoundDecl;
  var VarDecl = function(_super$$17) {
    function VarDecl$$1(id$$3, nest) {
      _super$$17.call(this, id$$3, TypeScript$$4.NodeType.VarDecl, nest);
    }
    __extends(VarDecl$$1, _super$$17);
    VarDecl$$1.prototype.isAmbient = function() {
      return TypeScript$$4.hasFlag(this.varFlags, TypeScript$$4.VarFlags.Ambient);
    };
    VarDecl$$1.prototype.isExported = function() {
      return TypeScript$$4.hasFlag(this.varFlags, TypeScript$$4.VarFlags.Exported);
    };
    VarDecl$$1.prototype.isStatic = function() {
      return TypeScript$$4.hasFlag(this.varFlags, TypeScript$$4.VarFlags.Static);
    };
    VarDecl$$1.prototype.emit = function(emitter$$13, tokenId$$13, startLine$$13) {
      emitter$$13.emitJavascriptVarDecl(this, tokenId$$13);
    };
    VarDecl$$1.prototype.treeViewLabel = function() {
      return "var " + this.id.actualText;
    };
    return VarDecl$$1;
  }(BoundDecl);
  TypeScript$$4.VarDecl = VarDecl;
  var ArgDecl = function(_super$$18) {
    function ArgDecl$$1(id$$4) {
      _super$$18.call(this, id$$4, TypeScript$$4.NodeType.ArgDecl, 0);
      this.isOptional = false;
      this.parameterPropertySym = null;
    }
    __extends(ArgDecl$$1, _super$$18);
    ArgDecl$$1.prototype.isOptionalArg = function() {
      return this.isOptional || this.init;
    };
    ArgDecl$$1.prototype.treeViewLabel = function() {
      return "arg: " + this.id.actualText;
    };
    ArgDecl$$1.prototype.emit = function(emitter$$14, tokenId$$14, startLine$$14) {
      emitter$$14.emitParensAndCommentsInPlace(this, true);
      emitter$$14.recordSourceMappingStart(this);
      emitter$$14.writeToOutput(this.id.actualText);
      emitter$$14.recordSourceMappingEnd(this);
      emitter$$14.emitParensAndCommentsInPlace(this, false);
    };
    return ArgDecl$$1;
  }(BoundDecl);
  TypeScript$$4.ArgDecl = ArgDecl;
  var internalId = 0;
  var FuncDecl = function(_super$$19) {
    function FuncDecl$$1(name$$33, bod, isConstructor, args$$1, vars, scopes, statics, nodeType$$7) {
      _super$$19.call(this, nodeType$$7);
      this.name = name$$33;
      this.bod = bod;
      this.isConstructor = isConstructor;
      this.arguments = args$$1;
      this.vars = vars;
      this.scopes = scopes;
      this.statics = statics;
      this.hint = null;
      this.fncFlags = TypeScript$$4.FncFlags.None;
      this.returnTypeAnnotation = null;
      this.variableArgList = false;
      this.jumpRefs = null;
      this.internalNameCache = null;
      this.tmp1Declared = false;
      this.enclosingFnc = null;
      this.freeVariables = [];
      this.unitIndex = -1;
      this.classDecl = null;
      this.boundToProperty = null;
      this.isOverload = false;
      this.innerStaticFuncs = [];
      this.isTargetTypedAsMethod = false;
      this.isInlineCallLiteral = false;
      this.accessorSymbol = null;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.returnStatementsWithExpressions = [];
      this.scopeType = null;
      this.endingToken = null;
    }
    __extends(FuncDecl$$1, _super$$19);
    FuncDecl$$1.prototype.isDeclaration = function() {
      return true;
    };
    FuncDecl$$1.prototype.internalName = function() {
      if (this.internalNameCache == null) {
        var extName = this.getNameText();
        if (extName) {
          this.internalNameCache = "_internal_" + extName;
        } else {
          this.internalNameCache = "_internal_" + internalId++;
        }
      }
      return this.internalNameCache;
    };
    FuncDecl$$1.prototype.hasSelfReference = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.HasSelfReference);
    };
    FuncDecl$$1.prototype.setHasSelfReference = function() {
      this.fncFlags |= TypeScript$$4.FncFlags.HasSelfReference;
    };
    FuncDecl$$1.prototype.hasSuperReferenceInFatArrowFunction = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.HasSuperReferenceInFatArrowFunction);
    };
    FuncDecl$$1.prototype.setHasSuperReferenceInFatArrowFunction = function() {
      this.fncFlags |= TypeScript$$4.FncFlags.HasSuperReferenceInFatArrowFunction;
    };
    FuncDecl$$1.prototype.addCloRef = function(id$$5, sym) {
      if (this.envids == null) {
        this.envids = new Array;
      }
      this.envids[this.envids.length] = id$$5;
      var outerFnc = this.enclosingFnc;
      if (sym) {
        for (;outerFnc && outerFnc.type.symbol != sym.container;) {
          outerFnc.addJumpRef(sym);
          outerFnc = outerFnc.enclosingFnc;
        }
      }
      return this.envids.length - 1;
    };
    FuncDecl$$1.prototype.addJumpRef = function(sym$$1) {
      if (this.jumpRefs == null) {
        this.jumpRefs = new Array;
      }
      var id$$6 = new Identifier(sym$$1.name);
      this.jumpRefs[this.jumpRefs.length] = id$$6;
      id$$6.sym = sym$$1;
      id$$6.cloId = this.addCloRef(id$$6, null);
    };
    FuncDecl$$1.prototype.buildControlFlow = function() {
      var entry$$1 = new TypeScript$$4.BasicBlock;
      var exit = new TypeScript$$4.BasicBlock;
      var context$$10 = new TypeScript$$4.ControlFlowContext(entry$$1, exit);
      var controlFlowPrefix = function(ast$$2, parent, walker$$1) {
        ast$$2.addToControlFlow(walker$$1.state);
        return ast$$2;
      };
      var walker = TypeScript$$4.getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context$$10);
      context$$10.walker = walker;
      walker.walk(this.bod, this);
      return context$$10;
    };
    FuncDecl$$1.prototype.typeCheck = function(typeFlow$$13) {
      return typeFlow$$13.typeCheckFunction(this);
    };
    FuncDecl$$1.prototype.emit = function(emitter$$15, tokenId$$15, startLine$$15) {
      emitter$$15.emitJavascriptFunction(this);
    };
    FuncDecl$$1.prototype.getNameText = function() {
      if (this.name) {
        return this.name.actualText;
      } else {
        return this.hint;
      }
    };
    FuncDecl$$1.prototype.isMethod = function() {
      return(this.fncFlags & TypeScript$$4.FncFlags.Method) != TypeScript$$4.FncFlags.None;
    };
    FuncDecl$$1.prototype.isCallMember = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.CallMember);
    };
    FuncDecl$$1.prototype.isConstructMember = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.ConstructMember);
    };
    FuncDecl$$1.prototype.isIndexerMember = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.IndexerMember);
    };
    FuncDecl$$1.prototype.isSpecialFn = function() {
      return this.isCallMember() || this.isIndexerMember() || this.isConstructMember();
    };
    FuncDecl$$1.prototype.isAnonymousFn = function() {
      return this.name === null;
    };
    FuncDecl$$1.prototype.isAccessor = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.GetAccessor) || TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.SetAccessor);
    };
    FuncDecl$$1.prototype.isGetAccessor = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.GetAccessor);
    };
    FuncDecl$$1.prototype.isSetAccessor = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.SetAccessor);
    };
    FuncDecl$$1.prototype.isAmbient = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.Ambient);
    };
    FuncDecl$$1.prototype.isExported = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.Exported);
    };
    FuncDecl$$1.prototype.isPrivate = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.Private);
    };
    FuncDecl$$1.prototype.isPublic = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.Public);
    };
    FuncDecl$$1.prototype.isStatic = function() {
      return TypeScript$$4.hasFlag(this.fncFlags, TypeScript$$4.FncFlags.Static);
    };
    FuncDecl$$1.prototype.treeViewLabel = function() {
      if (this.name == null) {
        return "funcExpr";
      } else {
        return "func: " + this.name.actualText;
      }
    };
    FuncDecl$$1.prototype.ClearFlags = function() {
      this.fncFlags = TypeScript$$4.FncFlags.None;
    };
    FuncDecl$$1.prototype.isSignature = function() {
      return(this.fncFlags & TypeScript$$4.FncFlags.Signature) != TypeScript$$4.FncFlags.None;
    };
    return FuncDecl$$1;
  }(AST);
  TypeScript$$4.FuncDecl = FuncDecl;
  var LocationInfo = function() {
    function LocationInfo$$1(filename, lineMap, unitIndex) {
      this.filename = filename;
      this.lineMap = lineMap;
      this.unitIndex = unitIndex;
    }
    return LocationInfo$$1;
  }();
  TypeScript$$4.LocationInfo = LocationInfo;
  TypeScript$$4.unknownLocationInfo = new LocationInfo("unknown", null, -1);
  var Script = function(_super$$20) {
    function Script$$1(vars$$1, scopes$$1) {
      _super$$20.call(this, new Identifier("script"), null, false, null, vars$$1, scopes$$1, null, TypeScript$$4.NodeType.Script);
      this.locationInfo = null;
      this.referencedFiles = [];
      this.requiresGlobal = false;
      this.requiresExtendsBlock = false;
      this.isResident = false;
      this.isDeclareFile = false;
      this.hasBeenTypeChecked = false;
      this.topLevelMod = null;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.containsUnicodeChar = false;
      this.containsUnicodeCharInComment = false;
      this.externallyVisibleImportedSymbols = [];
      this.vars = vars$$1;
      this.scopes = scopes$$1;
    }
    __extends(Script$$1, _super$$20);
    Script$$1.prototype.setCachedEmitRequired = function(value$$29) {
      this.cachedEmitRequired = value$$29;
      return this.cachedEmitRequired;
    };
    Script$$1.prototype.typeCheck = function(typeFlow$$14) {
      return typeFlow$$14.typeCheckScript(this);
    };
    Script$$1.prototype.treeViewLabel = function() {
      return "Script";
    };
    Script$$1.prototype.emitRequired = function(emitOptions) {
      if (this.cachedEmitRequired != undefined) {
        return this.cachedEmitRequired;
      }
      if (!this.isDeclareFile && !this.isResident && this.bod) {
        var i$$16 = 0;
        var len$$4 = this.bod.members.length;
        for (;i$$16 < len$$4;i$$16++) {
          var stmt = this.bod.members[i$$16];
          if (stmt.nodeType == TypeScript$$4.NodeType.ModuleDeclaration) {
            if (!TypeScript$$4.hasFlag(stmt.modFlags, TypeScript$$4.ModuleFlags.ShouldEmitModuleDecl | TypeScript$$4.ModuleFlags.Ambient)) {
              return this.setCachedEmitRequired(true);
            }
          } else {
            if (stmt.nodeType == TypeScript$$4.NodeType.ClassDeclaration) {
              if (!TypeScript$$4.hasFlag(stmt.varFlags, TypeScript$$4.VarFlags.Ambient)) {
                return this.setCachedEmitRequired(true);
              }
            } else {
              if (stmt.nodeType == TypeScript$$4.NodeType.VarDecl) {
                if (!TypeScript$$4.hasFlag(stmt.varFlags, TypeScript$$4.VarFlags.Ambient)) {
                  return this.setCachedEmitRequired(true);
                }
              } else {
                if (stmt.nodeType == TypeScript$$4.NodeType.FuncDecl) {
                  if (!stmt.isSignature()) {
                    return this.setCachedEmitRequired(true);
                  }
                } else {
                  if (stmt.nodeType != TypeScript$$4.NodeType.InterfaceDeclaration && stmt.nodeType != TypeScript$$4.NodeType.Empty) {
                    return this.setCachedEmitRequired(true);
                  }
                }
              }
            }
          }
        }
        if (emitOptions.emitComments && (this.bod.preComments && this.bod.preComments.length > 0 || this.bod.postComments && this.bod.postComments.length > 0)) {
          return this.setCachedEmitRequired(true);
        }
      }
      return this.setCachedEmitRequired(false);
    };
    Script$$1.prototype.emit = function(emitter$$16, tokenId$$16, startLine$$16) {
      if (this.emitRequired(emitter$$16.emitOptions)) {
        emitter$$16.emitParensAndCommentsInPlace(this.bod, true);
        emitter$$16.emitJavascriptList(this.bod, null, TypeScript$$4.TokenID.Semicolon, true, false, false, true, this.requiresExtendsBlock);
        emitter$$16.emitParensAndCommentsInPlace(this.bod, false);
      }
    };
    Script$$1.prototype.AddExternallyVisibleImportedSymbol = function(symbol, checker) {
      if (this.isExternallyVisibleSymbol(symbol)) {
        return;
      }
      if (!symbol.getType().symbol.isExternallyVisible(checker)) {
        var quotes = "";
        var moduleName = symbol.getType().symbol.prettyName;
        if (!TypeScript$$4.isQuoted(moduleName)) {
          quotes = "'";
        }
        checker.errorReporter.simpleError(symbol.declAST, "Externally visible import statement uses non exported module " + quotes + moduleName + quotes);
      }
      this.externallyVisibleImportedSymbols.push(symbol);
    };
    Script$$1.prototype.isExternallyVisibleSymbol = function(symbol$$1) {
      var i$$17 = 0;
      for (;i$$17 < this.externallyVisibleImportedSymbols.length;i$$17++) {
        if (this.externallyVisibleImportedSymbols[i$$17] == symbol$$1) {
          return true;
        }
      }
      return false;
    };
    return Script$$1;
  }(FuncDecl);
  TypeScript$$4.Script = Script;
  var NamedDeclaration = function(_super$$21) {
    function NamedDeclaration$$1(nodeType$$8, name$$34, members) {
      _super$$21.call(this, nodeType$$8);
      this.name = name$$34;
      this.members = members;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
    }
    __extends(NamedDeclaration$$1, _super$$21);
    NamedDeclaration$$1.prototype.isDeclaration = function() {
      return true;
    };
    return NamedDeclaration$$1;
  }(ModuleElement);
  TypeScript$$4.NamedDeclaration = NamedDeclaration;
  var ModuleDeclaration = function(_super$$22) {
    function ModuleDeclaration$$1(name$$35, members$$1, vars$$2, scopes$$2, endingToken) {
      _super$$22.call(this, TypeScript$$4.NodeType.ModuleDeclaration, name$$35, members$$1);
      this.endingToken = endingToken;
      this.modFlags = TypeScript$$4.ModuleFlags.ShouldEmitModuleDecl;
      this.amdDependencies = [];
      this.containsUnicodeChar = false;
      this.containsUnicodeCharInComment = false;
      this.vars = vars$$2;
      this.scopes = scopes$$2;
      this.prettyName = this.name.actualText;
    }
    __extends(ModuleDeclaration$$1, _super$$22);
    ModuleDeclaration$$1.prototype.isExported = function() {
      return TypeScript$$4.hasFlag(this.modFlags, TypeScript$$4.ModuleFlags.Exported);
    };
    ModuleDeclaration$$1.prototype.isAmbient = function() {
      return TypeScript$$4.hasFlag(this.modFlags, TypeScript$$4.ModuleFlags.Ambient);
    };
    ModuleDeclaration$$1.prototype.isEnum = function() {
      return TypeScript$$4.hasFlag(this.modFlags, TypeScript$$4.ModuleFlags.IsEnum);
    };
    ModuleDeclaration$$1.prototype.recordNonInterface = function() {
      this.modFlags &= ~TypeScript$$4.ModuleFlags.ShouldEmitModuleDecl;
    };
    ModuleDeclaration$$1.prototype.typeCheck = function(typeFlow$$15) {
      return typeFlow$$15.typeCheckModule(this);
    };
    ModuleDeclaration$$1.prototype.emit = function(emitter$$17, tokenId$$17, startLine$$17) {
      if (!TypeScript$$4.hasFlag(this.modFlags, TypeScript$$4.ModuleFlags.ShouldEmitModuleDecl)) {
        emitter$$17.emitParensAndCommentsInPlace(this, true);
        emitter$$17.recordSourceMappingStart(this);
        emitter$$17.emitJavascriptModule(this);
        emitter$$17.recordSourceMappingEnd(this);
        emitter$$17.emitParensAndCommentsInPlace(this, false);
      }
    };
    return ModuleDeclaration$$1;
  }(NamedDeclaration);
  TypeScript$$4.ModuleDeclaration = ModuleDeclaration;
  var TypeDeclaration = function(_super$$23) {
    function TypeDeclaration$$1(nodeType$$9, name$$36, extendsList, implementsList, members$$2) {
      _super$$23.call(this, nodeType$$9, name$$36, members$$2);
      this.extendsList = extendsList;
      this.implementsList = implementsList;
      this.varFlags = TypeScript$$4.VarFlags.None;
    }
    __extends(TypeDeclaration$$1, _super$$23);
    TypeDeclaration$$1.prototype.isExported = function() {
      return TypeScript$$4.hasFlag(this.varFlags, TypeScript$$4.VarFlags.Exported);
    };
    TypeDeclaration$$1.prototype.isAmbient = function() {
      return TypeScript$$4.hasFlag(this.varFlags, TypeScript$$4.VarFlags.Ambient);
    };
    return TypeDeclaration$$1;
  }(NamedDeclaration);
  TypeScript$$4.TypeDeclaration = TypeDeclaration;
  var ClassDeclaration = function(_super$$24) {
    function ClassDeclaration$$1(name$$37, members$$3, extendsList$$1, implementsList$$1) {
      _super$$24.call(this, TypeScript$$4.NodeType.ClassDeclaration, name$$37, extendsList$$1, implementsList$$1, members$$3);
      this.knownMemberNames = {};
      this.constructorDecl = null;
      this.constructorNestingLevel = 0;
      this.endingToken = null;
    }
    __extends(ClassDeclaration$$1, _super$$24);
    ClassDeclaration$$1.prototype.typeCheck = function(typeFlow$$16) {
      return typeFlow$$16.typeCheckClass(this);
    };
    ClassDeclaration$$1.prototype.emit = function(emitter$$18, tokenId$$18, startLine$$18) {
      emitter$$18.emitJavascriptClass(this);
    };
    return ClassDeclaration$$1;
  }(TypeDeclaration);
  TypeScript$$4.ClassDeclaration = ClassDeclaration;
  var InterfaceDeclaration = function(_super$$25) {
    function InterfaceDeclaration$$1(name$$38, members$$4, extendsList$$2, implementsList$$2) {
      _super$$25.call(this, TypeScript$$4.NodeType.InterfaceDeclaration, name$$38, extendsList$$2, implementsList$$2, members$$4);
    }
    __extends(InterfaceDeclaration$$1, _super$$25);
    InterfaceDeclaration$$1.prototype.typeCheck = function(typeFlow$$17) {
      return typeFlow$$17.typeCheckInterface(this);
    };
    InterfaceDeclaration$$1.prototype.emit = function(emitter$$19, tokenId$$19, startLine$$19) {
    };
    return InterfaceDeclaration$$1;
  }(TypeDeclaration);
  TypeScript$$4.InterfaceDeclaration = InterfaceDeclaration;
  var Statement = function(_super$$26) {
    function Statement$$1(nodeType$$10) {
      _super$$26.call(this, nodeType$$10);
      this.flags |= TypeScript$$4.ASTFlags.IsStatement;
    }
    __extends(Statement$$1, _super$$26);
    Statement$$1.prototype.isLoop = function() {
      return false;
    };
    Statement$$1.prototype.isStatementOrExpression = function() {
      return true;
    };
    Statement$$1.prototype.isCompoundStatement = function() {
      return this.isLoop();
    };
    Statement$$1.prototype.typeCheck = function(typeFlow$$18) {
      this.type = typeFlow$$18.voidType;
      return this;
    };
    return Statement$$1;
  }(ModuleElement);
  TypeScript$$4.Statement = Statement;
  var LabeledStatement = function(_super$$27) {
    function LabeledStatement$$1(labels, stmt$$1) {
      _super$$27.call(this, TypeScript$$4.NodeType.LabeledStatement);
      this.labels = labels;
      this.stmt = stmt$$1;
    }
    __extends(LabeledStatement$$1, _super$$27);
    LabeledStatement$$1.prototype.emit = function(emitter$$20, tokenId$$20, startLine$$20) {
      emitter$$20.emitParensAndCommentsInPlace(this, true);
      emitter$$20.recordSourceMappingStart(this);
      if (this.labels) {
        var labelsLen = this.labels.members.length;
        var i$$18 = 0;
        for (;i$$18 < labelsLen;i$$18++) {
          this.labels.members[i$$18].emit(emitter$$20, tokenId$$20, startLine$$20);
        }
      }
      this.stmt.emit(emitter$$20, tokenId$$20, true);
      emitter$$20.recordSourceMappingEnd(this);
      emitter$$20.emitParensAndCommentsInPlace(this, false);
    };
    LabeledStatement$$1.prototype.typeCheck = function(typeFlow$$19) {
      typeFlow$$19.typeCheck(this.labels);
      this.stmt = this.stmt.typeCheck(typeFlow$$19);
      return this;
    };
    LabeledStatement$$1.prototype.addToControlFlow = function(context$$11) {
      var beforeBB = context$$11.current;
      var bb = new TypeScript$$4.BasicBlock;
      context$$11.current = bb;
      beforeBB.addSuccessor(bb);
    };
    return LabeledStatement$$1;
  }(Statement);
  TypeScript$$4.LabeledStatement = LabeledStatement;
  var Block = function(_super$$28) {
    function Block$$1(statements, isStatementBlock) {
      _super$$28.call(this, TypeScript$$4.NodeType.Block);
      this.statements = statements;
      this.isStatementBlock = isStatementBlock;
    }
    __extends(Block$$1, _super$$28);
    Block$$1.prototype.emit = function(emitter$$21, tokenId$$21, startLine$$21) {
      emitter$$21.emitParensAndCommentsInPlace(this, true);
      emitter$$21.recordSourceMappingStart(this);
      if (this.isStatementBlock) {
        emitter$$21.writeLineToOutput(" {");
        emitter$$21.indenter.increaseIndent();
      } else {
        emitter$$21.setInVarBlock(this.statements.members.length);
      }
      var temp = emitter$$21.setInObjectLiteral(false);
      if (this.statements) {
        emitter$$21.emitJavascriptList(this.statements, null, TypeScript$$4.TokenID.Semicolon, true, false, false);
      }
      if (this.isStatementBlock) {
        emitter$$21.indenter.decreaseIndent();
        emitter$$21.emitIndent();
        emitter$$21.writeToOutput("}");
      }
      emitter$$21.setInObjectLiteral(temp);
      emitter$$21.recordSourceMappingEnd(this);
      emitter$$21.emitParensAndCommentsInPlace(this, false);
    };
    Block$$1.prototype.addToControlFlow = function(context$$12) {
      var afterIfNeeded = new TypeScript$$4.BasicBlock;
      context$$12.pushStatement(this, context$$12.current, afterIfNeeded);
      if (this.statements) {
        context$$12.walk(this.statements, this);
      }
      context$$12.walker.options.goChildren = false;
      context$$12.popStatement();
      if (afterIfNeeded.predecessors.length > 0) {
        context$$12.current.addSuccessor(afterIfNeeded);
        context$$12.current = afterIfNeeded;
      }
    };
    Block$$1.prototype.typeCheck = function(typeFlow$$20) {
      if (!typeFlow$$20.checker.styleSettings.emptyBlocks) {
        if (this.statements === null || this.statements.members.length == 0) {
          typeFlow$$20.checker.errorReporter.styleError(this, "empty block");
        }
      }
      typeFlow$$20.typeCheck(this.statements);
      return this;
    };
    return Block$$1;
  }(Statement);
  TypeScript$$4.Block = Block;
  var Jump = function(_super$$29) {
    function Jump$$1(nodeType$$11) {
      _super$$29.call(this, nodeType$$11);
      this.target = null;
      this.resolvedTarget = null;
    }
    __extends(Jump$$1, _super$$29);
    Jump$$1.prototype.hasExplicitTarget = function() {
      return this.target;
    };
    Jump$$1.prototype.setResolvedTarget = function(parser, stmt$$2) {
      if (stmt$$2.isLoop()) {
        this.resolvedTarget = stmt$$2;
        return true;
      }
      if (this.nodeType === TypeScript$$4.NodeType.Continue) {
        parser.reportParseError("continue statement applies only to loops");
        return false;
      } else {
        if (stmt$$2.nodeType == TypeScript$$4.NodeType.Switch || this.hasExplicitTarget()) {
          this.resolvedTarget = stmt$$2;
          return true;
        } else {
          parser.reportParseError("break statement with no label can apply only to a loop or switch statement");
          return false;
        }
      }
    };
    Jump$$1.prototype.addToControlFlow = function(context$$13) {
      _super$$29.prototype.addToControlFlow.call(this, context$$13);
      context$$13.unconditionalBranch(this.resolvedTarget, this.nodeType == TypeScript$$4.NodeType.Continue);
    };
    Jump$$1.prototype.emit = function(emitter$$22, tokenId$$22, startLine$$22) {
      emitter$$22.emitParensAndCommentsInPlace(this, true);
      emitter$$22.recordSourceMappingStart(this);
      if (this.nodeType == TypeScript$$4.NodeType.Break) {
        emitter$$22.writeToOutput("break");
      } else {
        emitter$$22.writeToOutput("continue");
      }
      if (this.hasExplicitTarget()) {
        emitter$$22.writeToOutput(" " + this.target);
      }
      emitter$$22.recordSourceMappingEnd(this);
      emitter$$22.writeToOutput(";");
      emitter$$22.emitParensAndCommentsInPlace(this, false);
    };
    return Jump$$1;
  }(Statement);
  TypeScript$$4.Jump = Jump;
  var WhileStatement = function(_super$$30) {
    function WhileStatement$$1(cond) {
      _super$$30.call(this, TypeScript$$4.NodeType.While);
      this.cond = cond;
      this.body = null;
    }
    __extends(WhileStatement$$1, _super$$30);
    WhileStatement$$1.prototype.isLoop = function() {
      return true;
    };
    WhileStatement$$1.prototype.emit = function(emitter$$23, tokenId$$23, startLine$$23) {
      emitter$$23.emitParensAndCommentsInPlace(this, true);
      emitter$$23.recordSourceMappingStart(this);
      var temp$$1 = emitter$$23.setInObjectLiteral(false);
      emitter$$23.writeToOutput("while(");
      emitter$$23.emitJavascript(this.cond, TypeScript$$4.TokenID.While, false);
      emitter$$23.writeToOutput(")");
      emitter$$23.emitJavascriptStatements(this.body, false);
      emitter$$23.setInObjectLiteral(temp$$1);
      emitter$$23.recordSourceMappingEnd(this);
      emitter$$23.emitParensAndCommentsInPlace(this, false);
    };
    WhileStatement$$1.prototype.typeCheck = function(typeFlow$$21) {
      return typeFlow$$21.typeCheckWhile(this);
    };
    WhileStatement$$1.prototype.addToControlFlow = function(context$$14) {
      var loopHeader = context$$14.current;
      var loopStart = new TypeScript$$4.BasicBlock;
      var afterLoop = new TypeScript$$4.BasicBlock;
      loopHeader.addSuccessor(loopStart);
      context$$14.current = loopStart;
      context$$14.addContent(this.cond);
      var condBlock = context$$14.current;
      var targetInfo = null;
      if (this.body) {
        context$$14.current = new TypeScript$$4.BasicBlock;
        condBlock.addSuccessor(context$$14.current);
        context$$14.pushStatement(this, loopStart, afterLoop);
        context$$14.walk(this.body, this);
        targetInfo = context$$14.popStatement();
      }
      if (!context$$14.noContinuation) {
        var loopEnd = context$$14.current;
        loopEnd.addSuccessor(loopStart);
      }
      context$$14.current = afterLoop;
      condBlock.addSuccessor(afterLoop);
      context$$14.noContinuation = false;
      context$$14.walker.options.goChildren = false;
    };
    return WhileStatement$$1;
  }(Statement);
  TypeScript$$4.WhileStatement = WhileStatement;
  var DoWhileStatement = function(_super$$31) {
    function DoWhileStatement$$1() {
      _super$$31.call(this, TypeScript$$4.NodeType.DoWhile);
      this.body = null;
      this.whileAST = null;
      this.cond = null;
    }
    __extends(DoWhileStatement$$1, _super$$31);
    DoWhileStatement$$1.prototype.isLoop = function() {
      return true;
    };
    DoWhileStatement$$1.prototype.emit = function(emitter$$24, tokenId$$24, startLine$$24) {
      emitter$$24.emitParensAndCommentsInPlace(this, true);
      emitter$$24.recordSourceMappingStart(this);
      var temp$$2 = emitter$$24.setInObjectLiteral(false);
      emitter$$24.writeToOutput("do");
      emitter$$24.emitJavascriptStatements(this.body, true);
      emitter$$24.recordSourceMappingStart(this.whileAST);
      emitter$$24.writeToOutput("while");
      emitter$$24.recordSourceMappingEnd(this.whileAST);
      emitter$$24.writeToOutput("(");
      emitter$$24.emitJavascript(this.cond, TypeScript$$4.TokenID.CloseParen, false);
      emitter$$24.writeToOutput(")");
      emitter$$24.setInObjectLiteral(temp$$2);
      emitter$$24.recordSourceMappingEnd(this);
      emitter$$24.writeToOutput(";");
      emitter$$24.emitParensAndCommentsInPlace(this, false);
    };
    DoWhileStatement$$1.prototype.typeCheck = function(typeFlow$$22) {
      return typeFlow$$22.typeCheckDoWhile(this);
    };
    DoWhileStatement$$1.prototype.addToControlFlow = function(context$$15) {
      var loopHeader$$1 = context$$15.current;
      var loopStart$$1 = new TypeScript$$4.BasicBlock;
      var afterLoop$$1 = new TypeScript$$4.BasicBlock;
      loopHeader$$1.addSuccessor(loopStart$$1);
      context$$15.current = loopStart$$1;
      var targetInfo$$1 = null;
      if (this.body) {
        context$$15.pushStatement(this, loopStart$$1, afterLoop$$1);
        context$$15.walk(this.body, this);
        targetInfo$$1 = context$$15.popStatement();
      }
      if (!context$$15.noContinuation) {
        var loopEnd$$1 = context$$15.current;
        loopEnd$$1.addSuccessor(loopStart$$1);
        context$$15.addContent(this.cond);
        context$$15.current = afterLoop$$1;
        loopEnd$$1.addSuccessor(afterLoop$$1);
      } else {
        context$$15.addUnreachable(this.cond);
      }
      context$$15.walker.options.goChildren = false;
    };
    return DoWhileStatement$$1;
  }(Statement);
  TypeScript$$4.DoWhileStatement = DoWhileStatement;
  var IfStatement = function(_super$$32) {
    function IfStatement$$1(cond$$1) {
      _super$$32.call(this, TypeScript$$4.NodeType.If);
      this.cond = cond$$1;
      this.elseBod = null;
      this.statement = new ASTSpan;
    }
    __extends(IfStatement$$1, _super$$32);
    IfStatement$$1.prototype.isCompoundStatement = function() {
      return true;
    };
    IfStatement$$1.prototype.emit = function(emitter$$25, tokenId$$25, startLine$$25) {
      emitter$$25.emitParensAndCommentsInPlace(this, true);
      emitter$$25.recordSourceMappingStart(this);
      var temp$$3 = emitter$$25.setInObjectLiteral(false);
      emitter$$25.recordSourceMappingStart(this.statement);
      emitter$$25.writeToOutput("if(");
      emitter$$25.emitJavascript(this.cond, TypeScript$$4.TokenID.If, false);
      emitter$$25.writeToOutput(")");
      emitter$$25.recordSourceMappingEnd(this.statement);
      emitter$$25.emitJavascriptStatements(this.thenBod, true);
      if (this.elseBod) {
        if (this.elseBod.nodeType === TypeScript$$4.NodeType.If) {
          emitter$$25.writeToOutput(" else ");
          this.elseBod.emit(emitter$$25, tokenId$$25, false);
        } else {
          emitter$$25.writeToOutput(" else");
          emitter$$25.emitJavascriptStatements(this.elseBod, true);
        }
      }
      emitter$$25.setInObjectLiteral(temp$$3);
      emitter$$25.recordSourceMappingEnd(this);
      emitter$$25.emitParensAndCommentsInPlace(this, false);
    };
    IfStatement$$1.prototype.typeCheck = function(typeFlow$$23) {
      return typeFlow$$23.typeCheckIf(this);
    };
    IfStatement$$1.prototype.addToControlFlow = function(context$$16) {
      this.cond.addToControlFlow(context$$16);
      var afterIf = new TypeScript$$4.BasicBlock;
      var beforeIf = context$$16.current;
      context$$16.pushStatement(this, beforeIf, afterIf);
      var hasContinuation = false;
      context$$16.current = new TypeScript$$4.BasicBlock;
      beforeIf.addSuccessor(context$$16.current);
      context$$16.walk(this.thenBod, this);
      if (!context$$16.noContinuation) {
        hasContinuation = true;
        context$$16.current.addSuccessor(afterIf);
      }
      if (this.elseBod) {
        context$$16.current = new TypeScript$$4.BasicBlock;
        context$$16.noContinuation = false;
        beforeIf.addSuccessor(context$$16.current);
        context$$16.walk(this.elseBod, this);
        if (!context$$16.noContinuation) {
          hasContinuation = true;
          context$$16.current.addSuccessor(afterIf);
        } else {
          if (hasContinuation) {
            context$$16.noContinuation = false;
          }
        }
      } else {
        beforeIf.addSuccessor(afterIf);
        context$$16.noContinuation = false;
        hasContinuation = true;
      }
      var targetInfo$$2 = context$$16.popStatement();
      if (afterIf.predecessors.length > 0) {
        context$$16.noContinuation = false;
        hasContinuation = true;
      }
      if (hasContinuation) {
        context$$16.current = afterIf;
      }
      context$$16.walker.options.goChildren = false;
    };
    return IfStatement$$1;
  }(Statement);
  TypeScript$$4.IfStatement = IfStatement;
  var ReturnStatement = function(_super$$33) {
    function ReturnStatement$$1() {
      _super$$33.call(this, TypeScript$$4.NodeType.Return);
      this.returnExpression = null;
    }
    __extends(ReturnStatement$$1, _super$$33);
    ReturnStatement$$1.prototype.emit = function(emitter$$26, tokenId$$26, startLine$$26) {
      emitter$$26.emitParensAndCommentsInPlace(this, true);
      emitter$$26.recordSourceMappingStart(this);
      var temp$$4 = emitter$$26.setInObjectLiteral(false);
      if (this.returnExpression) {
        emitter$$26.writeToOutput("return ");
        emitter$$26.emitJavascript(this.returnExpression, TypeScript$$4.TokenID.Semicolon, false);
        if (this.returnExpression.nodeType === TypeScript$$4.NodeType.FuncDecl) {
          emitter$$26.writeToOutput(";");
        }
      } else {
        emitter$$26.writeToOutput("return;");
      }
      emitter$$26.setInObjectLiteral(temp$$4);
      emitter$$26.recordSourceMappingEnd(this);
      emitter$$26.emitParensAndCommentsInPlace(this, false);
    };
    ReturnStatement$$1.prototype.addToControlFlow = function(context$$17) {
      _super$$33.prototype.addToControlFlow.call(this, context$$17);
      context$$17.returnStmt();
    };
    ReturnStatement$$1.prototype.typeCheck = function(typeFlow$$24) {
      return typeFlow$$24.typeCheckReturn(this);
    };
    return ReturnStatement$$1;
  }(Statement);
  TypeScript$$4.ReturnStatement = ReturnStatement;
  var EndCode = function(_super$$34) {
    function EndCode$$1() {
      _super$$34.call(this, TypeScript$$4.NodeType.EndCode);
    }
    __extends(EndCode$$1, _super$$34);
    return EndCode$$1;
  }(AST);
  TypeScript$$4.EndCode = EndCode;
  var ForInStatement = function(_super$$35) {
    function ForInStatement$$1(lval, obj$$16) {
      _super$$35.call(this, TypeScript$$4.NodeType.ForIn);
      this.lval = lval;
      this.obj = obj$$16;
      this.statement = new ASTSpan;
      if (this.lval && this.lval.nodeType == TypeScript$$4.NodeType.VarDecl) {
        this.lval.varFlags |= TypeScript$$4.VarFlags.AutoInit;
      }
    }
    __extends(ForInStatement$$1, _super$$35);
    ForInStatement$$1.prototype.isLoop = function() {
      return true;
    };
    ForInStatement$$1.prototype.isFiltered = function() {
      if (this.body) {
        var singleItem = null;
        if (this.body.nodeType == TypeScript$$4.NodeType.List) {
          var stmts = this.body;
          if (stmts.members.length == 1) {
            singleItem = stmts.members[0];
          }
        } else {
          singleItem = this.body;
        }
        if (singleItem !== null) {
          if (singleItem.nodeType == TypeScript$$4.NodeType.Block) {
            var block = singleItem;
            if (block.statements !== null && block.statements.members.length == 1) {
              singleItem = block.statements.members[0];
            }
          }
          if (singleItem.nodeType == TypeScript$$4.NodeType.If) {
            var cond$$2 = singleItem.cond;
            if (cond$$2.nodeType == TypeScript$$4.NodeType.Call) {
              var target$$27 = cond$$2.target;
              if (target$$27.nodeType == TypeScript$$4.NodeType.Dot) {
                var binex = target$$27;
                if (binex.operand1.nodeType == TypeScript$$4.NodeType.Name && this.obj.nodeType == TypeScript$$4.NodeType.Name && binex.operand1.actualText == this.obj.actualText) {
                  var prop$$4 = binex.operand2;
                  if (prop$$4.actualText == "hasOwnProperty") {
                    var args$$2 = cond$$2.arguments;
                    if (args$$2 !== null && args$$2.members.length == 1) {
                      var arg$$2 = args$$2.members[0];
                      if (arg$$2.nodeType == TypeScript$$4.NodeType.Name && this.lval.nodeType == TypeScript$$4.NodeType.Name) {
                        if (this.lval.actualText == arg$$2.actualText) {
                          return true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return false;
    };
    ForInStatement$$1.prototype.emit = function(emitter$$27, tokenId$$27, startLine$$27) {
      emitter$$27.emitParensAndCommentsInPlace(this, true);
      emitter$$27.recordSourceMappingStart(this);
      var temp$$5 = emitter$$27.setInObjectLiteral(false);
      emitter$$27.recordSourceMappingStart(this.statement);
      emitter$$27.writeToOutput("for(");
      emitter$$27.emitJavascript(this.lval, TypeScript$$4.TokenID.For, false);
      emitter$$27.writeToOutput(" in ");
      emitter$$27.emitJavascript(this.obj, TypeScript$$4.TokenID.For, false);
      emitter$$27.writeToOutput(")");
      emitter$$27.recordSourceMappingEnd(this.statement);
      emitter$$27.emitJavascriptStatements(this.body, true);
      emitter$$27.setInObjectLiteral(temp$$5);
      emitter$$27.recordSourceMappingEnd(this);
      emitter$$27.emitParensAndCommentsInPlace(this, false);
    };
    ForInStatement$$1.prototype.typeCheck = function(typeFlow$$25) {
      if (typeFlow$$25.checker.styleSettings.forin) {
        if (!this.isFiltered()) {
          typeFlow$$25.checker.errorReporter.styleError(this, "no hasOwnProperty filter");
        }
      }
      return typeFlow$$25.typeCheckForIn(this);
    };
    ForInStatement$$1.prototype.addToControlFlow = function(context$$18) {
      if (this.lval) {
        context$$18.addContent(this.lval);
      }
      if (this.obj) {
        context$$18.addContent(this.obj);
      }
      var loopHeader$$2 = context$$18.current;
      var loopStart$$2 = new TypeScript$$4.BasicBlock;
      var afterLoop$$2 = new TypeScript$$4.BasicBlock;
      loopHeader$$2.addSuccessor(loopStart$$2);
      context$$18.current = loopStart$$2;
      if (this.body) {
        context$$18.pushStatement(this, loopStart$$2, afterLoop$$2);
        context$$18.walk(this.body, this);
        context$$18.popStatement();
      }
      if (!context$$18.noContinuation) {
        var loopEnd$$2 = context$$18.current;
        loopEnd$$2.addSuccessor(loopStart$$2);
      }
      context$$18.current = afterLoop$$2;
      context$$18.noContinuation = false;
      loopHeader$$2.addSuccessor(afterLoop$$2);
      context$$18.walker.options.goChildren = false;
    };
    return ForInStatement$$1;
  }(Statement);
  TypeScript$$4.ForInStatement = ForInStatement;
  var ForStatement = function(_super$$36) {
    function ForStatement$$1(init) {
      _super$$36.call(this, TypeScript$$4.NodeType.For);
      this.init = init;
    }
    __extends(ForStatement$$1, _super$$36);
    ForStatement$$1.prototype.isLoop = function() {
      return true;
    };
    ForStatement$$1.prototype.emit = function(emitter$$28, tokenId$$28, startLine$$28) {
      emitter$$28.emitParensAndCommentsInPlace(this, true);
      emitter$$28.recordSourceMappingStart(this);
      var temp$$6 = emitter$$28.setInObjectLiteral(false);
      emitter$$28.writeToOutput("for(");
      if (this.init) {
        if (this.init.nodeType != TypeScript$$4.NodeType.List) {
          emitter$$28.emitJavascript(this.init, TypeScript$$4.TokenID.For, false);
        } else {
          emitter$$28.setInVarBlock(this.init.members.length);
          emitter$$28.emitJavascriptList(this.init, null, TypeScript$$4.TokenID.For, false, false, false);
        }
      }
      emitter$$28.writeToOutput("; ");
      emitter$$28.emitJavascript(this.cond, TypeScript$$4.TokenID.For, false);
      emitter$$28.writeToOutput("; ");
      emitter$$28.emitJavascript(this.incr, TypeScript$$4.TokenID.For, false);
      emitter$$28.writeToOutput(")");
      emitter$$28.emitJavascriptStatements(this.body, true);
      emitter$$28.setInObjectLiteral(temp$$6);
      emitter$$28.recordSourceMappingEnd(this);
      emitter$$28.emitParensAndCommentsInPlace(this, false);
    };
    ForStatement$$1.prototype.typeCheck = function(typeFlow$$26) {
      return typeFlow$$26.typeCheckFor(this);
    };
    ForStatement$$1.prototype.addToControlFlow = function(context$$19) {
      if (this.init) {
        context$$19.addContent(this.init);
      }
      var loopHeader$$3 = context$$19.current;
      var loopStart$$3 = new TypeScript$$4.BasicBlock;
      var afterLoop$$3 = new TypeScript$$4.BasicBlock;
      loopHeader$$3.addSuccessor(loopStart$$3);
      context$$19.current = loopStart$$3;
      var condBlock$$1 = null;
      var continueTarget = loopStart$$3;
      var incrBB = null;
      if (this.incr) {
        incrBB = new TypeScript$$4.BasicBlock;
        continueTarget = incrBB;
      }
      if (this.cond) {
        condBlock$$1 = context$$19.current;
        context$$19.addContent(this.cond);
        context$$19.current = new TypeScript$$4.BasicBlock;
        condBlock$$1.addSuccessor(context$$19.current);
      }
      var targetInfo$$3 = null;
      if (this.body) {
        context$$19.pushStatement(this, continueTarget, afterLoop$$3);
        context$$19.walk(this.body, this);
        targetInfo$$3 = context$$19.popStatement();
      }
      if (this.incr) {
        if (context$$19.noContinuation) {
          if (incrBB.predecessors.length == 0) {
            context$$19.addUnreachable(this.incr);
          }
        } else {
          context$$19.current.addSuccessor(incrBB);
          context$$19.current = incrBB;
          context$$19.addContent(this.incr);
        }
      }
      var loopEnd$$3 = context$$19.current;
      if (!context$$19.noContinuation) {
        loopEnd$$3.addSuccessor(loopStart$$3);
      }
      if (condBlock$$1) {
        condBlock$$1.addSuccessor(afterLoop$$3);
        context$$19.noContinuation = false;
      }
      if (afterLoop$$3.predecessors.length > 0) {
        context$$19.noContinuation = false;
        context$$19.current = afterLoop$$3;
      }
      context$$19.walker.options.goChildren = false;
    };
    return ForStatement$$1;
  }(Statement);
  TypeScript$$4.ForStatement = ForStatement;
  var WithStatement = function(_super$$37) {
    function WithStatement$$1(expr$$3) {
      _super$$37.call(this, TypeScript$$4.NodeType.With);
      this.expr = expr$$3;
      this.withSym = null;
    }
    __extends(WithStatement$$1, _super$$37);
    WithStatement$$1.prototype.isCompoundStatement = function() {
      return true;
    };
    WithStatement$$1.prototype.emit = function(emitter$$29, tokenId$$29, startLine$$29) {
      emitter$$29.emitParensAndCommentsInPlace(this, true);
      emitter$$29.recordSourceMappingStart(this);
      emitter$$29.writeToOutput("with (");
      if (this.expr) {
        emitter$$29.emitJavascript(this.expr, TypeScript$$4.TokenID.With, false);
      }
      emitter$$29.writeToOutput(")");
      emitter$$29.emitJavascriptStatements(this.body, true);
      emitter$$29.recordSourceMappingEnd(this);
      emitter$$29.emitParensAndCommentsInPlace(this, false);
    };
    WithStatement$$1.prototype.typeCheck = function(typeFlow$$27) {
      return typeFlow$$27.typeCheckWith(this);
    };
    return WithStatement$$1;
  }(Statement);
  TypeScript$$4.WithStatement = WithStatement;
  var SwitchStatement = function(_super$$38) {
    function SwitchStatement$$1(val$$4) {
      _super$$38.call(this, TypeScript$$4.NodeType.Switch);
      this.val = val$$4;
      this.defaultCase = null;
      this.statement = new ASTSpan;
    }
    __extends(SwitchStatement$$1, _super$$38);
    SwitchStatement$$1.prototype.isCompoundStatement = function() {
      return true;
    };
    SwitchStatement$$1.prototype.emit = function(emitter$$30, tokenId$$30, startLine$$30) {
      emitter$$30.emitParensAndCommentsInPlace(this, true);
      emitter$$30.recordSourceMappingStart(this);
      var temp$$7 = emitter$$30.setInObjectLiteral(false);
      emitter$$30.recordSourceMappingStart(this.statement);
      emitter$$30.writeToOutput("switch(");
      emitter$$30.emitJavascript(this.val, TypeScript$$4.TokenID.Identifier, false);
      emitter$$30.writeToOutput(")");
      emitter$$30.recordSourceMappingEnd(this.statement);
      emitter$$30.writeLineToOutput(" {");
      emitter$$30.indenter.increaseIndent();
      var casesLen = this.caseList.members.length;
      var i$$19 = 0;
      for (;i$$19 < casesLen;i$$19++) {
        var caseExpr = this.caseList.members[i$$19];
        emitter$$30.emitJavascript(caseExpr, TypeScript$$4.TokenID.Case, true);
      }
      emitter$$30.indenter.decreaseIndent();
      emitter$$30.emitIndent();
      emitter$$30.writeToOutput("}");
      emitter$$30.setInObjectLiteral(temp$$7);
      emitter$$30.recordSourceMappingEnd(this);
      emitter$$30.emitParensAndCommentsInPlace(this, false);
    };
    SwitchStatement$$1.prototype.typeCheck = function(typeFlow$$28) {
      var len$$5 = this.caseList.members.length;
      this.val = typeFlow$$28.typeCheck(this.val);
      var i$$20 = 0;
      for (;i$$20 < len$$5;i$$20++) {
        this.caseList.members[i$$20] = typeFlow$$28.typeCheck(this.caseList.members[i$$20]);
      }
      this.defaultCase = typeFlow$$28.typeCheck(this.defaultCase);
      this.type = typeFlow$$28.voidType;
      return this;
    };
    SwitchStatement$$1.prototype.addToControlFlow = function(context$$20) {
      var condBlock$$2 = context$$20.current;
      context$$20.addContent(this.val);
      var execBlock = new TypeScript$$4.BasicBlock;
      var afterSwitch = new TypeScript$$4.BasicBlock;
      condBlock$$2.addSuccessor(execBlock);
      context$$20.pushSwitch(execBlock);
      context$$20.current = execBlock;
      context$$20.pushStatement(this, execBlock, afterSwitch);
      context$$20.walk(this.caseList, this);
      context$$20.popSwitch();
      var targetInfo$$4 = context$$20.popStatement();
      var hasCondContinuation = this.defaultCase == null;
      if (this.defaultCase == null) {
        condBlock$$2.addSuccessor(afterSwitch);
      }
      if (afterSwitch.predecessors.length > 0) {
        context$$20.noContinuation = false;
        context$$20.current = afterSwitch;
      } else {
        context$$20.noContinuation = true;
      }
      context$$20.walker.options.goChildren = false;
    };
    return SwitchStatement$$1;
  }(Statement);
  TypeScript$$4.SwitchStatement = SwitchStatement;
  var CaseStatement = function(_super$$39) {
    function CaseStatement$$1() {
      _super$$39.call(this, TypeScript$$4.NodeType.Case);
      this.expr = null;
    }
    __extends(CaseStatement$$1, _super$$39);
    CaseStatement$$1.prototype.emit = function(emitter$$31, tokenId$$31, startLine$$31) {
      emitter$$31.emitParensAndCommentsInPlace(this, true);
      emitter$$31.recordSourceMappingStart(this);
      if (this.expr) {
        emitter$$31.writeToOutput("case ");
        emitter$$31.emitJavascript(this.expr, TypeScript$$4.TokenID.Identifier, false);
      } else {
        emitter$$31.writeToOutput("default");
      }
      emitter$$31.writeToOutput(":");
      if (this.body.members.length == 1 && this.body.members[0].nodeType == TypeScript$$4.NodeType.Block) {
        emitter$$31.emitJavascriptStatements(this.body, false);
      } else {
        emitter$$31.writeLineToOutput("");
        emitter$$31.indenter.increaseIndent();
        emitter$$31.emitBareJavascriptStatements(this.body);
        emitter$$31.indenter.decreaseIndent();
      }
      emitter$$31.recordSourceMappingEnd(this);
      emitter$$31.emitParensAndCommentsInPlace(this, false);
    };
    CaseStatement$$1.prototype.typeCheck = function(typeFlow$$29) {
      this.expr = typeFlow$$29.typeCheck(this.expr);
      typeFlow$$29.typeCheck(this.body);
      this.type = typeFlow$$29.voidType;
      return this;
    };
    CaseStatement$$1.prototype.addToControlFlow = function(context$$21) {
      var execBlock$$1 = new TypeScript$$4.BasicBlock;
      var sw$$2 = context$$21.currentSwitch[context$$21.currentSwitch.length - 1];
      if (this.expr) {
        var exprBlock = new TypeScript$$4.BasicBlock;
        context$$21.current = exprBlock;
        sw$$2.addSuccessor(exprBlock);
        context$$21.addContent(this.expr);
        exprBlock.addSuccessor(execBlock$$1);
      } else {
        sw$$2.addSuccessor(execBlock$$1);
      }
      context$$21.current = execBlock$$1;
      if (this.body) {
        context$$21.walk(this.body, this);
      }
      context$$21.noContinuation = false;
      context$$21.walker.options.goChildren = false;
    };
    return CaseStatement$$1;
  }(Statement);
  TypeScript$$4.CaseStatement = CaseStatement;
  var TypeReference = function(_super$$40) {
    function TypeReference$$1(term, arrayCount) {
      _super$$40.call(this, TypeScript$$4.NodeType.TypeRef);
      this.term = term;
      this.arrayCount = arrayCount;
    }
    __extends(TypeReference$$1, _super$$40);
    TypeReference$$1.prototype.emit = function(emitter$$32, tokenId$$32, startLine$$32) {
      throw new Error("should not emit a type ref");
    };
    TypeReference$$1.prototype.typeCheck = function(typeFlow$$30) {
      var prevInTCTR = typeFlow$$30.inTypeRefTypeCheck;
      typeFlow$$30.inTypeRefTypeCheck = true;
      var typeLink = TypeScript$$4.getTypeLink(this, typeFlow$$30.checker, true);
      typeFlow$$30.checker.resolveTypeLink(typeFlow$$30.scope, typeLink, false);
      if (this.term) {
        typeFlow$$30.typeCheck(this.term);
      }
      typeFlow$$30.checkForVoidConstructor(typeLink.type, this);
      this.type = typeLink.type;
      if (this.term) {
        this.term.type = this.type;
      }
      typeFlow$$30.inTypeRefTypeCheck = prevInTCTR;
      return this;
    };
    return TypeReference$$1;
  }(AST);
  TypeScript$$4.TypeReference = TypeReference;
  var TryFinally = function(_super$$41) {
    function TryFinally$$1(tryNode, finallyNode) {
      _super$$41.call(this, TypeScript$$4.NodeType.TryFinally);
      this.tryNode = tryNode;
      this.finallyNode = finallyNode;
    }
    __extends(TryFinally$$1, _super$$41);
    TryFinally$$1.prototype.isCompoundStatement = function() {
      return true;
    };
    TryFinally$$1.prototype.emit = function(emitter$$33, tokenId$$33, startLine$$33) {
      emitter$$33.recordSourceMappingStart(this);
      emitter$$33.emitJavascript(this.tryNode, TypeScript$$4.TokenID.Try, false);
      emitter$$33.emitJavascript(this.finallyNode, TypeScript$$4.TokenID.Finally, false);
      emitter$$33.recordSourceMappingEnd(this);
    };
    TryFinally$$1.prototype.typeCheck = function(typeFlow$$31) {
      this.tryNode = typeFlow$$31.typeCheck(this.tryNode);
      this.finallyNode = typeFlow$$31.typeCheck(this.finallyNode);
      this.type = typeFlow$$31.voidType;
      return this;
    };
    TryFinally$$1.prototype.addToControlFlow = function(context$$22) {
      var afterFinally = new TypeScript$$4.BasicBlock;
      context$$22.walk(this.tryNode, this);
      var finBlock = new TypeScript$$4.BasicBlock;
      if (context$$22.current) {
        context$$22.current.addSuccessor(finBlock);
      }
      context$$22.current = finBlock;
      context$$22.pushStatement(this, null, afterFinally);
      context$$22.walk(this.finallyNode, this);
      if (!context$$22.noContinuation && context$$22.current) {
        context$$22.current.addSuccessor(afterFinally);
      }
      if (afterFinally.predecessors.length > 0) {
        context$$22.current = afterFinally;
      } else {
        context$$22.noContinuation = true;
      }
      context$$22.popStatement();
      context$$22.walker.options.goChildren = false;
    };
    return TryFinally$$1;
  }(Statement);
  TypeScript$$4.TryFinally = TryFinally;
  var TryCatch = function(_super$$42) {
    function TryCatch$$1(tryNode$$1, catchNode) {
      _super$$42.call(this, TypeScript$$4.NodeType.TryCatch);
      this.tryNode = tryNode$$1;
      this.catchNode = catchNode;
    }
    __extends(TryCatch$$1, _super$$42);
    TryCatch$$1.prototype.isCompoundStatement = function() {
      return true;
    };
    TryCatch$$1.prototype.emit = function(emitter$$34, tokenId$$34, startLine$$34) {
      emitter$$34.emitParensAndCommentsInPlace(this, true);
      emitter$$34.recordSourceMappingStart(this);
      emitter$$34.emitJavascript(this.tryNode, TypeScript$$4.TokenID.Try, false);
      emitter$$34.emitJavascript(this.catchNode, TypeScript$$4.TokenID.Catch, false);
      emitter$$34.recordSourceMappingEnd(this);
      emitter$$34.emitParensAndCommentsInPlace(this, false);
    };
    TryCatch$$1.prototype.addToControlFlow = function(context$$23) {
      var beforeTry = context$$23.current;
      var tryBlock = new TypeScript$$4.BasicBlock;
      beforeTry.addSuccessor(tryBlock);
      context$$23.current = tryBlock;
      var afterTryCatch = new TypeScript$$4.BasicBlock;
      context$$23.pushStatement(this, null, afterTryCatch);
      context$$23.walk(this.tryNode, this);
      if (!context$$23.noContinuation) {
        if (context$$23.current) {
          context$$23.current.addSuccessor(afterTryCatch);
        }
      }
      context$$23.current = new TypeScript$$4.BasicBlock;
      beforeTry.addSuccessor(context$$23.current);
      context$$23.walk(this.catchNode, this);
      context$$23.popStatement();
      if (!context$$23.noContinuation) {
        if (context$$23.current) {
          context$$23.current.addSuccessor(afterTryCatch);
        }
      }
      context$$23.current = afterTryCatch;
      context$$23.walker.options.goChildren = false;
    };
    TryCatch$$1.prototype.typeCheck = function(typeFlow$$32) {
      this.tryNode = typeFlow$$32.typeCheck(this.tryNode);
      this.catchNode = typeFlow$$32.typeCheck(this.catchNode);
      this.type = typeFlow$$32.voidType;
      return this;
    };
    return TryCatch$$1;
  }(Statement);
  TypeScript$$4.TryCatch = TryCatch;
  var Try = function(_super$$43) {
    function Try$$1(body) {
      _super$$43.call(this, TypeScript$$4.NodeType.Try);
      this.body = body;
    }
    __extends(Try$$1, _super$$43);
    Try$$1.prototype.emit = function(emitter$$35, tokenId$$35, startLine$$35) {
      emitter$$35.emitParensAndCommentsInPlace(this, true);
      emitter$$35.recordSourceMappingStart(this);
      emitter$$35.writeToOutput("try ");
      emitter$$35.emitJavascript(this.body, TypeScript$$4.TokenID.Try, false);
      emitter$$35.recordSourceMappingEnd(this);
      emitter$$35.emitParensAndCommentsInPlace(this, false);
    };
    Try$$1.prototype.typeCheck = function(typeFlow$$33) {
      this.body = typeFlow$$33.typeCheck(this.body);
      return this;
    };
    Try$$1.prototype.addToControlFlow = function(context$$24) {
      if (this.body) {
        context$$24.walk(this.body, this);
      }
      context$$24.walker.options.goChildren = false;
      context$$24.noContinuation = false;
    };
    return Try$$1;
  }(Statement);
  TypeScript$$4.Try = Try;
  var Catch = function(_super$$44) {
    function Catch$$1(param$$3, body$$1) {
      _super$$44.call(this, TypeScript$$4.NodeType.Catch);
      this.param = param$$3;
      this.body = body$$1;
      this.statement = new ASTSpan;
      this.containedScope = null;
      if (this.param) {
        this.param.varFlags |= TypeScript$$4.VarFlags.AutoInit;
      }
    }
    __extends(Catch$$1, _super$$44);
    Catch$$1.prototype.emit = function(emitter$$36, tokenId$$36, startLine$$36) {
      emitter$$36.emitParensAndCommentsInPlace(this, true);
      emitter$$36.recordSourceMappingStart(this);
      emitter$$36.writeToOutput(" ");
      emitter$$36.recordSourceMappingStart(this.statement);
      emitter$$36.writeToOutput("catch (");
      emitter$$36.emitJavascript(this.param, TypeScript$$4.TokenID.OpenParen, false);
      emitter$$36.writeToOutput(")");
      emitter$$36.recordSourceMappingEnd(this.statement);
      emitter$$36.emitJavascript(this.body, TypeScript$$4.TokenID.Catch, false);
      emitter$$36.recordSourceMappingEnd(this);
      emitter$$36.emitParensAndCommentsInPlace(this, false);
    };
    Catch$$1.prototype.addToControlFlow = function(context$$25) {
      if (this.param) {
        context$$25.addContent(this.param);
        var bodBlock = new TypeScript$$4.BasicBlock;
        context$$25.current.addSuccessor(bodBlock);
        context$$25.current = bodBlock;
      }
      if (this.body) {
        context$$25.walk(this.body, this);
      }
      context$$25.noContinuation = false;
      context$$25.walker.options.goChildren = false;
    };
    Catch$$1.prototype.typeCheck = function(typeFlow$$34) {
      var prevScope = typeFlow$$34.scope;
      typeFlow$$34.scope = this.containedScope;
      this.param = typeFlow$$34.typeCheck(this.param);
      var exceptVar = new TypeScript$$4.ValueLocation;
      var varSym = new TypeScript$$4.VariableSymbol(this.param.id.text, this.param.minChar, typeFlow$$34.checker.locationInfo.unitIndex, exceptVar);
      exceptVar.symbol = varSym;
      exceptVar.typeLink = new TypeScript$$4.TypeLink;
      exceptVar.typeLink.type = typeFlow$$34.anyType;
      var thisFnc = typeFlow$$34.thisFnc;
      if (thisFnc && thisFnc.type) {
        exceptVar.symbol.container = thisFnc.type.symbol;
      } else {
        exceptVar.symbol.container = null;
      }
      this.param.sym = exceptVar.symbol;
      typeFlow$$34.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol, typeFlow$$34.checker.errorReporter, false, false, false);
      this.body = typeFlow$$34.typeCheck(this.body);
      if (typeFlow$$34.checker.inProvisionalTypecheckMode()) {
        var table = typeFlow$$34.scope.getTable();
        table.secondaryTable.table[exceptVar.symbol.name] = undefined;
      }
      this.type = typeFlow$$34.voidType;
      typeFlow$$34.scope = prevScope;
      return this;
    };
    return Catch$$1;
  }(Statement);
  TypeScript$$4.Catch = Catch;
  var Finally = function(_super$$45) {
    function Finally$$1(body$$2) {
      _super$$45.call(this, TypeScript$$4.NodeType.Finally);
      this.body = body$$2;
    }
    __extends(Finally$$1, _super$$45);
    Finally$$1.prototype.emit = function(emitter$$37, tokenId$$37, startLine$$37) {
      emitter$$37.emitParensAndCommentsInPlace(this, true);
      emitter$$37.recordSourceMappingStart(this);
      emitter$$37.writeToOutput("finally");
      emitter$$37.emitJavascript(this.body, TypeScript$$4.TokenID.Finally, false);
      emitter$$37.recordSourceMappingEnd(this);
      emitter$$37.emitParensAndCommentsInPlace(this, false);
    };
    Finally$$1.prototype.addToControlFlow = function(context$$26) {
      if (this.body) {
        context$$26.walk(this.body, this);
      }
      context$$26.walker.options.goChildren = false;
      context$$26.noContinuation = false;
    };
    Finally$$1.prototype.typeCheck = function(typeFlow$$35) {
      this.body = typeFlow$$35.typeCheck(this.body);
      return this;
    };
    return Finally$$1;
  }(Statement);
  TypeScript$$4.Finally = Finally;
  var Comment$$1 = function(_super$$46) {
    function Comment$$2(content, isBlockComment, endsLine) {
      _super$$46.call(this, TypeScript$$4.NodeType.Comment);
      this.content = content;
      this.isBlockComment = isBlockComment;
      this.endsLine = endsLine;
      this.text = null;
      this.docCommentText = null;
    }
    __extends(Comment$$2, _super$$46);
    Comment$$2.prototype.getText = function() {
      if (this.text == null) {
        if (this.isBlockComment) {
          this.text = this.content.split("\n");
          var i$$21 = 0;
          for (;i$$21 < this.text.length;i$$21++) {
            this.text[i$$21] = this.text[i$$21].replace(/^\s+|\s+$/g, "");
          }
        } else {
          this.text = [this.content.replace(/^\s+|\s+$/g, "")];
        }
      }
      return this.text;
    };
    Comment$$2.prototype.isDocComment = function() {
      if (this.isBlockComment) {
        return this.content.charAt(2) == "*";
      }
      return false;
    };
    Comment$$2.prototype.getDocCommentText = function() {
      if (this.docCommentText == null) {
        this.docCommentText = Comment$$2.cleanJSDocComment(this.content);
      }
      return this.docCommentText;
    };
    Comment$$2.consumeLeadingSpace = function consumeLeadingSpace(line, startIndex, maxSpacesToRemove) {
      var endIndex = line.length;
      if (maxSpacesToRemove != undefined) {
        endIndex = TypeScript$$4.min(startIndex + maxSpacesToRemove, endIndex);
      }
      for (;startIndex < endIndex;startIndex++) {
        var charCode$$1 = line.charCodeAt(startIndex);
        if (charCode$$1 != TypeScript$$4.LexCodeSpace && charCode$$1 != TypeScript$$4.LexCodeTAB) {
          return startIndex;
        }
      }
      if (endIndex != line.length) {
        return endIndex;
      }
      return-1;
    };
    Comment$$2.isSpaceChar = function isSpaceChar(line$$1, index$$41) {
      var length$$13 = line$$1.length;
      if (index$$41 < length$$13) {
        var charCode$$2 = line$$1.charCodeAt(index$$41);
        return charCode$$2 == TypeScript$$4.LexCodeSpace || charCode$$2 == TypeScript$$4.LexCodeTAB;
      }
      return index$$41 == length$$13;
    };
    Comment$$2.cleanDocCommentLine = function cleanDocCommentLine(line$$2, jsDocStyleComment, jsDocLineSpaceToRemove) {
      var nonSpaceIndex = Comment$$2.consumeLeadingSpace(line$$2, 0);
      if (nonSpaceIndex != -1) {
        var jsDocSpacesRemoved = nonSpaceIndex;
        if (jsDocStyleComment && line$$2.charAt(nonSpaceIndex) == "*") {
          var startIndex$$1 = nonSpaceIndex + 1;
          nonSpaceIndex = Comment$$2.consumeLeadingSpace(line$$2, startIndex$$1, jsDocLineSpaceToRemove);
          if (nonSpaceIndex != -1) {
            jsDocSpacesRemoved = nonSpaceIndex - startIndex$$1;
          } else {
            return null;
          }
        }
        return{minChar:nonSpaceIndex, limChar:line$$2.charAt(line$$2.length - 1) == "\r" ? line$$2.length - 1 : line$$2.length, jsDocSpacesRemoved:jsDocSpacesRemoved};
      }
      return null;
    };
    Comment$$2.cleanJSDocComment = function cleanJSDocComment(content$$1, spacesToRemove) {
      var docCommentLines = [];
      content$$1 = content$$1.replace("/**", "");
      if (content$$1.length >= 2 && content$$1.charAt(content$$1.length - 1) == "/" && content$$1.charAt(content$$1.length - 2) == "*") {
        content$$1 = content$$1.substring(0, content$$1.length - 2);
      }
      var lines = content$$1.split("\n");
      var inParamTag = false;
      var l = 0;
      for (;l < lines.length;l++) {
        var line$$3 = lines[l];
        var cleanLinePos = Comment$$2.cleanDocCommentLine(line$$3, true, spacesToRemove);
        if (!cleanLinePos) {
          continue;
        }
        var docCommentText = "";
        var prevPos = cleanLinePos.minChar;
        var i$$22 = line$$3.indexOf("@", cleanLinePos.minChar);
        for (;0 <= i$$22 && i$$22 < cleanLinePos.limChar;i$$22 = line$$3.indexOf("@", i$$22 + 1)) {
          var wasInParamtag = inParamTag;
          if (line$$3.indexOf("param", i$$22 + 1) == i$$22 + 1 && Comment$$2.isSpaceChar(line$$3, i$$22 + 6)) {
            if (!wasInParamtag) {
              docCommentText += line$$3.substring(prevPos, i$$22);
            }
            prevPos = i$$22;
            inParamTag = true;
          } else {
            if (wasInParamtag) {
              prevPos = i$$22;
              inParamTag = false;
            }
          }
        }
        if (!inParamTag) {
          docCommentText += line$$3.substring(prevPos, cleanLinePos.limChar);
        }
        var newCleanPos = Comment$$2.cleanDocCommentLine(docCommentText, false);
        if (newCleanPos) {
          if (spacesToRemove == undefined) {
            spacesToRemove = cleanLinePos.jsDocSpacesRemoved;
          }
          docCommentLines.push(docCommentText);
        }
      }
      return docCommentLines.join("\n");
    };
    Comment$$2.getDocCommentText = function getDocCommentText(comments) {
      var docCommentText$$1 = [];
      var c$$2 = 0;
      for (;c$$2 < comments.length;c$$2++) {
        var commentText = comments[c$$2].getDocCommentText();
        if (commentText != "") {
          docCommentText$$1.push(commentText);
        }
      }
      return docCommentText$$1.join("\n");
    };
    Comment$$2.getParameterDocCommentText = function getParameterDocCommentText(param$$4, fncDocComments) {
      if (fncDocComments.length == 0 || !fncDocComments[0].isBlockComment) {
        return "";
      }
      var i$$23 = 0;
      for (;i$$23 < fncDocComments.length;i$$23++) {
        var commentContents = fncDocComments[i$$23].content;
        var j = commentContents.indexOf("@param", 0);
        for (;0 <= j;j = commentContents.indexOf("@param", j)) {
          j += 6;
          if (!Comment$$2.isSpaceChar(commentContents, j)) {
            continue;
          }
          j = Comment$$2.consumeLeadingSpace(commentContents, j);
          if (j == -1) {
            break;
          }
          if (commentContents.charCodeAt(j) == TypeScript$$4.LexCodeLC) {
            j++;
            var charCode$$3 = 0;
            var curlies = 1;
            for (;j < commentContents.length;j++) {
              charCode$$3 = commentContents.charCodeAt(j);
              if (charCode$$3 == TypeScript$$4.LexCodeLC) {
                curlies++;
                continue;
              }
              if (charCode$$3 == TypeScript$$4.LexCodeRC) {
                curlies--;
                if (curlies == 0) {
                  break;
                } else {
                  continue;
                }
              }
              if (charCode$$3 == TypeScript$$4.LexCodeAtSign) {
                break;
              }
            }
            if (j == commentContents.length) {
              break;
            }
            if (charCode$$3 == TypeScript$$4.LexCodeAtSign) {
              continue;
            }
            j = Comment$$2.consumeLeadingSpace(commentContents, j + 1);
            if (j == -1) {
              break;
            }
          }
          if (param$$4 != commentContents.substr(j, param$$4.length) || !Comment$$2.isSpaceChar(commentContents, j + param$$4.length)) {
            continue;
          }
          j = Comment$$2.consumeLeadingSpace(commentContents, j + param$$4.length);
          if (j == -1) {
            return "";
          }
          var endOfParam = commentContents.indexOf("@", j);
          var paramHelpString = commentContents.substring(j, endOfParam < 0 ? commentContents.length : endOfParam);
          var paramSpacesToRemove = undefined;
          var paramLineIndex = commentContents.substring(0, j).lastIndexOf("\n") + 1;
          if (paramLineIndex != 0) {
            if (paramLineIndex < j && commentContents.charAt(paramLineIndex + 1) == "\r") {
              paramLineIndex++;
            }
          }
          var startSpaceRemovalIndex = Comment$$2.consumeLeadingSpace(commentContents, paramLineIndex);
          if (startSpaceRemovalIndex != j && commentContents.charAt(startSpaceRemovalIndex) == "*") {
            paramSpacesToRemove = j - startSpaceRemovalIndex - 1;
          }
          return Comment$$2.cleanJSDocComment(paramHelpString, paramSpacesToRemove);
        }
      }
      return "";
    };
    Comment$$2.getDocCommentTextOfSignatures = function getDocCommentTextOfSignatures(signatures) {
      var comments$$1 = [];
      var i$$24 = 0;
      for (;i$$24 < signatures.length;i$$24++) {
        var signatureDocComment = TypeScript$$4.Comment.getDocCommentText(signatures[i$$24].declAST.getDocComments());
        if (signatureDocComment != "") {
          comments$$1.push(signatureDocComment);
        }
      }
      return comments$$1.join("\n");
    };
    return Comment$$2;
  }(AST);
  TypeScript$$4.Comment = Comment$$1;
  var DebuggerStatement = function(_super$$47) {
    function DebuggerStatement$$1() {
      _super$$47.call(this, TypeScript$$4.NodeType.Debugger);
    }
    __extends(DebuggerStatement$$1, _super$$47);
    DebuggerStatement$$1.prototype.emit = function(emitter$$38, tokenId$$38, startLine$$38) {
      emitter$$38.emitParensAndCommentsInPlace(this, true);
      emitter$$38.recordSourceMappingStart(this);
      emitter$$38.writeLineToOutput("debugger;");
      emitter$$38.recordSourceMappingEnd(this);
      emitter$$38.emitParensAndCommentsInPlace(this, false);
    };
    return DebuggerStatement$$1;
  }(Statement);
  TypeScript$$4.DebuggerStatement = DebuggerStatement;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$5) {
  function getAstWalkerFactory() {
    if (!globalAstWalkerFactory) {
      globalAstWalkerFactory = new AstWalkerFactory;
    }
    return globalAstWalkerFactory;
  }
  var AstWalkOptions = function() {
    function AstWalkOptions$$1() {
      this.goChildren = true;
      this.goNextSibling = true;
      this.reverseSiblings = false;
    }
    AstWalkOptions$$1.prototype.stopWalk = function(stop) {
      if (typeof stop === "undefined") {
        stop = true;
      }
      this.goChildren = !stop;
      this.goNextSibling = !stop;
    };
    return AstWalkOptions$$1;
  }();
  TypeScript$$5.AstWalkOptions = AstWalkOptions;
  var AstWalker = function() {
    function AstWalker$$1(childrenWalkers, pre, post, options$$1, state) {
      this.childrenWalkers = childrenWalkers;
      this.pre = pre;
      this.post = post;
      this.options = options$$1;
      this.state = state;
    }
    AstWalker$$1.prototype.walk = function(ast$$3, parent$$1) {
      var preAst = this.pre(ast$$3, parent$$1, this);
      if (preAst === undefined) {
        preAst = ast$$3;
      }
      if (this.options.goChildren) {
        var svGoSib = this.options.goNextSibling;
        this.options.goNextSibling = true;
        this.childrenWalkers[ast$$3.nodeType](ast$$3, parent$$1, this);
        this.options.goNextSibling = svGoSib;
      } else {
        this.options.goChildren = true;
      }
      if (this.post) {
        var postAst = this.post(preAst, parent$$1, this);
        if (postAst === undefined) {
          postAst = preAst;
        }
        return postAst;
      } else {
        return preAst;
      }
    };
    return AstWalker$$1;
  }();
  var AstWalkerFactory = function() {
    function AstWalkerFactory$$1() {
      this.childrenWalkers = [];
      this.initChildrenWalkers();
    }
    AstWalkerFactory$$1.prototype.walk = function(ast$$4, pre$$1, post$$1, options$$2, state$$1) {
      return this.getWalker(pre$$1, post$$1, options$$2, state$$1).walk(ast$$4, null);
    };
    AstWalkerFactory$$1.prototype.getWalker = function(pre$$2, post$$2, options$$3, state$$2) {
      return this.getSlowWalker(pre$$2, post$$2, options$$3, state$$2);
    };
    AstWalkerFactory$$1.prototype.getSlowWalker = function(pre$$3, post$$3, options$$4, state$$3) {
      if (!options$$4) {
        options$$4 = new AstWalkOptions;
      }
      return new AstWalker(this.childrenWalkers, pre$$3, post$$3, options$$4, state$$3);
    };
    AstWalkerFactory$$1.prototype.initChildrenWalkers = function() {
      this.childrenWalkers[TypeScript$$5.NodeType.None] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Empty] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.EmptyExpr] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.True] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.False] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.This] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Super] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.QString] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Regex] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Null] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.NumberLit] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Name] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Break] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Continue] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.For] = ChildrenWalkers.walkForStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.If] = ChildrenWalkers.walkIfStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.While] = ChildrenWalkers.walkWhileStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Block] = ChildrenWalkers.walkBlockChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Try] = ChildrenWalkers.walkTryChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Finally] = ChildrenWalkers.walkFinallyChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Catch] = ChildrenWalkers.walkCatchChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.List] = ChildrenWalkers.walkListChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Script] = ChildrenWalkers.walkScriptChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.With] = ChildrenWalkers.walkWithStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.Label] = ChildrenWalkers.walkLabelChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;
      this.childrenWalkers[TypeScript$$5.NodeType.EBStart] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.GotoEB] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.EndCode] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Error] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Comment] = ChildrenWalkers.walkNone;
      this.childrenWalkers[TypeScript$$5.NodeType.Debugger] = ChildrenWalkers.walkNone;
      var e$$8;
      for (e$$8 in TypeScript$$5.NodeType._map) {
        if (this.childrenWalkers[e$$8] === undefined) {
          throw new Error("initWalkers function is not up to date with enum content!");
        }
      }
    };
    return AstWalkerFactory$$1;
  }();
  TypeScript$$5.AstWalkerFactory = AstWalkerFactory;
  var globalAstWalkerFactory;
  TypeScript$$5.getAstWalkerFactory = getAstWalkerFactory;
  var ChildrenWalkers;
  (function(ChildrenWalkers$$1) {
    function walkNone(preAst$$1, parent$$2, walker$$2) {
    }
    function walkListChildren(preAst$$2, parent$$3, walker$$3) {
      var len$$6 = preAst$$2.members.length;
      if (walker$$3.options.reverseSiblings) {
        var i$$25 = len$$6 - 1;
        for (;i$$25 >= 0;i$$25--) {
          if (walker$$3.options.goNextSibling) {
            preAst$$2.members[i$$25] = walker$$3.walk(preAst$$2.members[i$$25], preAst$$2);
          }
        }
      } else {
        i$$25 = 0;
        for (;i$$25 < len$$6;i$$25++) {
          if (walker$$3.options.goNextSibling) {
            preAst$$2.members[i$$25] = walker$$3.walk(preAst$$2.members[i$$25], preAst$$2);
          }
        }
      }
    }
    function walkUnaryExpressionChildren(preAst$$3, parent$$4, walker$$4) {
      if (preAst$$3.castTerm) {
        preAst$$3.castTerm = walker$$4.walk(preAst$$3.castTerm, preAst$$3);
      }
      if (preAst$$3.operand) {
        preAst$$3.operand = walker$$4.walk(preAst$$3.operand, preAst$$3);
      }
    }
    function walkBinaryExpressionChildren(preAst$$4, parent$$5, walker$$5) {
      if (walker$$5.options.reverseSiblings) {
        if (preAst$$4.operand2) {
          preAst$$4.operand2 = walker$$5.walk(preAst$$4.operand2, preAst$$4);
        }
        if (preAst$$4.operand1 && walker$$5.options.goNextSibling) {
          preAst$$4.operand1 = walker$$5.walk(preAst$$4.operand1, preAst$$4);
        }
      } else {
        if (preAst$$4.operand1) {
          preAst$$4.operand1 = walker$$5.walk(preAst$$4.operand1, preAst$$4);
        }
        if (preAst$$4.operand2 && walker$$5.options.goNextSibling) {
          preAst$$4.operand2 = walker$$5.walk(preAst$$4.operand2, preAst$$4);
        }
      }
    }
    function walkTypeReferenceChildren(preAst$$5, parent$$6, walker$$6) {
      if (preAst$$5.term) {
        preAst$$5.term = walker$$6.walk(preAst$$5.term, preAst$$5);
      }
    }
    function walkCallExpressionChildren(preAst$$6, parent$$7, walker$$7) {
      if (!walker$$7.options.reverseSiblings) {
        preAst$$6.target = walker$$7.walk(preAst$$6.target, preAst$$6);
      }
      if (preAst$$6.arguments && walker$$7.options.goNextSibling) {
        preAst$$6.arguments = walker$$7.walk(preAst$$6.arguments, preAst$$6);
      }
      if (walker$$7.options.reverseSiblings && walker$$7.options.goNextSibling) {
        preAst$$6.target = walker$$7.walk(preAst$$6.target, preAst$$6);
      }
    }
    function walkTrinaryExpressionChildren(preAst$$7, parent$$8, walker$$8) {
      if (preAst$$7.operand1) {
        preAst$$7.operand1 = walker$$8.walk(preAst$$7.operand1, preAst$$7);
      }
      if (preAst$$7.operand2 && walker$$8.options.goNextSibling) {
        preAst$$7.operand2 = walker$$8.walk(preAst$$7.operand2, preAst$$7);
      }
      if (preAst$$7.operand3 && walker$$8.options.goNextSibling) {
        preAst$$7.operand3 = walker$$8.walk(preAst$$7.operand3, preAst$$7);
      }
    }
    function walkFuncDeclChildren(preAst$$8, parent$$9, walker$$9) {
      if (preAst$$8.name) {
        preAst$$8.name = walker$$9.walk(preAst$$8.name, preAst$$8);
      }
      if (preAst$$8.arguments && preAst$$8.arguments.members.length > 0 && walker$$9.options.goNextSibling) {
        preAst$$8.arguments = walker$$9.walk(preAst$$8.arguments, preAst$$8);
      }
      if (preAst$$8.returnTypeAnnotation && walker$$9.options.goNextSibling) {
        preAst$$8.returnTypeAnnotation = walker$$9.walk(preAst$$8.returnTypeAnnotation, preAst$$8);
      }
      if (preAst$$8.bod && preAst$$8.bod.members.length > 0 && walker$$9.options.goNextSibling) {
        preAst$$8.bod = walker$$9.walk(preAst$$8.bod, preAst$$8);
      }
    }
    function walkBoundDeclChildren(preAst$$9, parent$$10, walker$$10) {
      if (preAst$$9.id) {
        preAst$$9.id = walker$$10.walk(preAst$$9.id, preAst$$9);
      }
      if (preAst$$9.init) {
        preAst$$9.init = walker$$10.walk(preAst$$9.init, preAst$$9);
      }
      if (preAst$$9.typeExpr && walker$$10.options.goNextSibling) {
        preAst$$9.typeExpr = walker$$10.walk(preAst$$9.typeExpr, preAst$$9);
      }
    }
    function walkReturnStatementChildren(preAst$$10, parent$$11, walker$$11) {
      if (preAst$$10.returnExpression) {
        preAst$$10.returnExpression = walker$$11.walk(preAst$$10.returnExpression, preAst$$10);
      }
    }
    function walkForStatementChildren(preAst$$11, parent$$12, walker$$12) {
      if (preAst$$11.init) {
        preAst$$11.init = walker$$12.walk(preAst$$11.init, preAst$$11);
      }
      if (preAst$$11.cond && walker$$12.options.goNextSibling) {
        preAst$$11.cond = walker$$12.walk(preAst$$11.cond, preAst$$11);
      }
      if (preAst$$11.incr && walker$$12.options.goNextSibling) {
        preAst$$11.incr = walker$$12.walk(preAst$$11.incr, preAst$$11);
      }
      if (preAst$$11.body && walker$$12.options.goNextSibling) {
        preAst$$11.body = walker$$12.walk(preAst$$11.body, preAst$$11);
      }
    }
    function walkForInStatementChildren(preAst$$12, parent$$13, walker$$13) {
      preAst$$12.lval = walker$$13.walk(preAst$$12.lval, preAst$$12);
      if (walker$$13.options.goNextSibling) {
        preAst$$12.obj = walker$$13.walk(preAst$$12.obj, preAst$$12);
      }
      if (preAst$$12.body && walker$$13.options.goNextSibling) {
        preAst$$12.body = walker$$13.walk(preAst$$12.body, preAst$$12);
      }
    }
    function walkIfStatementChildren(preAst$$13, parent$$14, walker$$14) {
      preAst$$13.cond = walker$$14.walk(preAst$$13.cond, preAst$$13);
      if (preAst$$13.thenBod && walker$$14.options.goNextSibling) {
        preAst$$13.thenBod = walker$$14.walk(preAst$$13.thenBod, preAst$$13);
      }
      if (preAst$$13.elseBod && walker$$14.options.goNextSibling) {
        preAst$$13.elseBod = walker$$14.walk(preAst$$13.elseBod, preAst$$13);
      }
    }
    function walkWhileStatementChildren(preAst$$14, parent$$15, walker$$15) {
      preAst$$14.cond = walker$$15.walk(preAst$$14.cond, preAst$$14);
      if (preAst$$14.body && walker$$15.options.goNextSibling) {
        preAst$$14.body = walker$$15.walk(preAst$$14.body, preAst$$14);
      }
    }
    function walkDoWhileStatementChildren(preAst$$15, parent$$16, walker$$16) {
      preAst$$15.cond = walker$$16.walk(preAst$$15.cond, preAst$$15);
      if (preAst$$15.body && walker$$16.options.goNextSibling) {
        preAst$$15.body = walker$$16.walk(preAst$$15.body, preAst$$15);
      }
    }
    function walkBlockChildren(preAst$$16, parent$$17, walker$$17) {
      if (preAst$$16.statements) {
        preAst$$16.statements = walker$$17.walk(preAst$$16.statements, preAst$$16);
      }
    }
    function walkCaseStatementChildren(preAst$$17, parent$$18, walker$$18) {
      if (preAst$$17.expr) {
        preAst$$17.expr = walker$$18.walk(preAst$$17.expr, preAst$$17);
      }
      if (preAst$$17.body && walker$$18.options.goNextSibling) {
        preAst$$17.body = walker$$18.walk(preAst$$17.body, preAst$$17);
      }
    }
    function walkSwitchStatementChildren(preAst$$18, parent$$19, walker$$19) {
      if (preAst$$18.val) {
        preAst$$18.val = walker$$19.walk(preAst$$18.val, preAst$$18);
      }
      if (preAst$$18.caseList && walker$$19.options.goNextSibling) {
        preAst$$18.caseList = walker$$19.walk(preAst$$18.caseList, preAst$$18);
      }
    }
    function walkTryChildren(preAst$$19, parent$$20, walker$$20) {
      if (preAst$$19.body) {
        preAst$$19.body = walker$$20.walk(preAst$$19.body, preAst$$19);
      }
    }
    function walkTryCatchChildren(preAst$$20, parent$$21, walker$$21) {
      if (preAst$$20.tryNode) {
        preAst$$20.tryNode = walker$$21.walk(preAst$$20.tryNode, preAst$$20);
      }
      if (preAst$$20.catchNode && walker$$21.options.goNextSibling) {
        preAst$$20.catchNode = walker$$21.walk(preAst$$20.catchNode, preAst$$20);
      }
    }
    function walkTryFinallyChildren(preAst$$21, parent$$22, walker$$22) {
      if (preAst$$21.tryNode) {
        preAst$$21.tryNode = walker$$22.walk(preAst$$21.tryNode, preAst$$21);
      }
      if (preAst$$21.finallyNode && walker$$22.options.goNextSibling) {
        preAst$$21.finallyNode = walker$$22.walk(preAst$$21.finallyNode, preAst$$21);
      }
    }
    function walkFinallyChildren(preAst$$22, parent$$23, walker$$23) {
      if (preAst$$22.body) {
        preAst$$22.body = walker$$23.walk(preAst$$22.body, preAst$$22);
      }
    }
    function walkCatchChildren(preAst$$23, parent$$24, walker$$24) {
      if (preAst$$23.param) {
        preAst$$23.param = walker$$24.walk(preAst$$23.param, preAst$$23);
      }
      if (preAst$$23.body && walker$$24.options.goNextSibling) {
        preAst$$23.body = walker$$24.walk(preAst$$23.body, preAst$$23);
      }
    }
    function walkRecordChildren(preAst$$24, parent$$25, walker$$25) {
      preAst$$24.name = walker$$25.walk(preAst$$24.name, preAst$$24);
      if (walker$$25.options.goNextSibling && preAst$$24.members) {
        preAst$$24.members = walker$$25.walk(preAst$$24.members, preAst$$24);
      }
    }
    function walkNamedTypeChildren(preAst$$25, parent$$26, walker$$26) {
      walkRecordChildren(preAst$$25, parent$$26, walker$$26);
    }
    function walkClassDeclChildren(preAst$$26, parent$$27, walker$$27) {
      walkNamedTypeChildren(preAst$$26, parent$$27, walker$$27);
      if (walker$$27.options.goNextSibling && preAst$$26.extendsList) {
        preAst$$26.extendsList = walker$$27.walk(preAst$$26.extendsList, preAst$$26);
      }
      if (walker$$27.options.goNextSibling && preAst$$26.implementsList) {
        preAst$$26.implementsList = walker$$27.walk(preAst$$26.implementsList, preAst$$26);
      }
    }
    function walkScriptChildren(preAst$$27, parent$$28, walker$$28) {
      if (preAst$$27.bod) {
        preAst$$27.bod = walker$$28.walk(preAst$$27.bod, preAst$$27);
      }
    }
    function walkTypeDeclChildren(preAst$$28, parent$$29, walker$$29) {
      walkNamedTypeChildren(preAst$$28, parent$$29, walker$$29);
      if (walker$$29.options.goNextSibling && preAst$$28.extendsList) {
        preAst$$28.extendsList = walker$$29.walk(preAst$$28.extendsList, preAst$$28);
      }
      if (walker$$29.options.goNextSibling && preAst$$28.implementsList) {
        preAst$$28.implementsList = walker$$29.walk(preAst$$28.implementsList, preAst$$28);
      }
    }
    function walkModuleDeclChildren(preAst$$29, parent$$30, walker$$30) {
      walkRecordChildren(preAst$$29, parent$$30, walker$$30);
    }
    function walkImportDeclChildren(preAst$$30, parent$$31, walker$$31) {
      if (preAst$$30.id) {
        preAst$$30.id = walker$$31.walk(preAst$$30.id, preAst$$30);
      }
      if (preAst$$30.alias) {
        preAst$$30.alias = walker$$31.walk(preAst$$30.alias, preAst$$30);
      }
    }
    function walkWithStatementChildren(preAst$$31, parent$$32, walker$$32) {
      if (preAst$$31.expr) {
        preAst$$31.expr = walker$$32.walk(preAst$$31.expr, preAst$$31);
      }
      if (preAst$$31.body && walker$$32.options.goNextSibling) {
        preAst$$31.body = walker$$32.walk(preAst$$31.body, preAst$$31);
      }
    }
    function walkLabelChildren(preAst$$32, parent$$33, walker$$33) {
    }
    function walkLabeledStatementChildren(preAst$$33, parent$$34, walker$$34) {
      preAst$$33.labels = walker$$34.walk(preAst$$33.labels, preAst$$33);
      if (walker$$34.options.goNextSibling) {
        preAst$$33.stmt = walker$$34.walk(preAst$$33.stmt, preAst$$33);
      }
    }
    ChildrenWalkers$$1.walkNone = walkNone;
    ChildrenWalkers$$1.walkListChildren = walkListChildren;
    ChildrenWalkers$$1.walkUnaryExpressionChildren = walkUnaryExpressionChildren;
    ChildrenWalkers$$1.walkBinaryExpressionChildren = walkBinaryExpressionChildren;
    ChildrenWalkers$$1.walkTypeReferenceChildren = walkTypeReferenceChildren;
    ChildrenWalkers$$1.walkCallExpressionChildren = walkCallExpressionChildren;
    ChildrenWalkers$$1.walkTrinaryExpressionChildren = walkTrinaryExpressionChildren;
    ChildrenWalkers$$1.walkFuncDeclChildren = walkFuncDeclChildren;
    ChildrenWalkers$$1.walkBoundDeclChildren = walkBoundDeclChildren;
    ChildrenWalkers$$1.walkReturnStatementChildren = walkReturnStatementChildren;
    ChildrenWalkers$$1.walkForStatementChildren = walkForStatementChildren;
    ChildrenWalkers$$1.walkForInStatementChildren = walkForInStatementChildren;
    ChildrenWalkers$$1.walkIfStatementChildren = walkIfStatementChildren;
    ChildrenWalkers$$1.walkWhileStatementChildren = walkWhileStatementChildren;
    ChildrenWalkers$$1.walkDoWhileStatementChildren = walkDoWhileStatementChildren;
    ChildrenWalkers$$1.walkBlockChildren = walkBlockChildren;
    ChildrenWalkers$$1.walkCaseStatementChildren = walkCaseStatementChildren;
    ChildrenWalkers$$1.walkSwitchStatementChildren = walkSwitchStatementChildren;
    ChildrenWalkers$$1.walkTryChildren = walkTryChildren;
    ChildrenWalkers$$1.walkTryCatchChildren = walkTryCatchChildren;
    ChildrenWalkers$$1.walkTryFinallyChildren = walkTryFinallyChildren;
    ChildrenWalkers$$1.walkFinallyChildren = walkFinallyChildren;
    ChildrenWalkers$$1.walkCatchChildren = walkCatchChildren;
    ChildrenWalkers$$1.walkRecordChildren = walkRecordChildren;
    ChildrenWalkers$$1.walkNamedTypeChildren = walkNamedTypeChildren;
    ChildrenWalkers$$1.walkClassDeclChildren = walkClassDeclChildren;
    ChildrenWalkers$$1.walkScriptChildren = walkScriptChildren;
    ChildrenWalkers$$1.walkTypeDeclChildren = walkTypeDeclChildren;
    ChildrenWalkers$$1.walkModuleDeclChildren = walkModuleDeclChildren;
    ChildrenWalkers$$1.walkImportDeclChildren = walkImportDeclChildren;
    ChildrenWalkers$$1.walkWithStatementChildren = walkWithStatementChildren;
    ChildrenWalkers$$1.walkLabelChildren = walkLabelChildren;
    ChildrenWalkers$$1.walkLabeledStatementChildren = walkLabeledStatementChildren;
  })(ChildrenWalkers || (ChildrenWalkers = {}));
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$6) {
  (function(AstWalkerWithDetailCallback$$1) {
    function walk(script, callback$$25) {
      var pre$$4 = function(cur, parent$$35) {
        walker$$35.options.goChildren = AstWalkerCallback(true, cur, callback$$25);
        return cur;
      };
      var post$$4 = function(cur$$1, parent$$36) {
        AstWalkerCallback(false, cur$$1, callback$$25);
        return cur$$1;
      };
      var walker$$35 = TypeScript$$6.getAstWalkerFactory().getWalker(pre$$4, post$$4);
      walker$$35.walk(script, null);
    }
    function AstWalkerCallback(pre$$5, ast$$5, callback$$26) {
      var nodeType$$12 = ast$$5.nodeType;
      var callbackString = TypeScript$$6.NodeType._map[nodeType$$12] + "Callback";
      if (callback$$26[callbackString]) {
        return callback$$26[callbackString](pre$$5, ast$$5);
      }
      if (callback$$26.DefaultCallback) {
        return callback$$26.DefaultCallback(pre$$5, ast$$5);
      }
      return true;
    }
    AstWalkerWithDetailCallback$$1.walk = walk;
  })(TypeScript$$6.AstWalkerWithDetailCallback || (TypeScript$$6.AstWalkerWithDetailCallback = {}));
  var AstWalkerWithDetailCallback = TypeScript$$6.AstWalkerWithDetailCallback;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$7) {
  function lastOf(items) {
    return items === null || items.length === 0 ? null : items[items.length - 1];
  }
  function max(a, b$$1) {
    return a >= b$$1 ? a : b$$1;
  }
  function min$$1(a$$1, b$$2) {
    return a$$1 <= b$$2 ? a$$1 : b$$2;
  }
  function isValidAstNode(ast$$6) {
    if (ast$$6 === null) {
      return false;
    }
    if (ast$$6.minChar === -1 || ast$$6.limChar === -1) {
      return false;
    }
    return true;
  }
  function getAstPathToPosition(script$$1, pos, options$$5) {
    if (typeof options$$5 === "undefined") {
      options$$5 = GetAstPathOptions.Default;
    }
    var lookInComments = function(comments$$2) {
      if (comments$$2 && comments$$2.length > 0) {
        var i$$26 = 0;
        for (;i$$26 < comments$$2.length;i$$26++) {
          var minChar = comments$$2[i$$26].minChar;
          var limChar = comments$$2[i$$26].limChar;
          if (!comments$$2[i$$26].isBlockComment) {
            limChar++;
          }
          if (pos >= minChar && pos < limChar) {
            ctx.path.push(comments$$2[i$$26]);
          }
        }
      }
    };
    var pre$$6 = function(cur$$2, parent$$37, walker$$36) {
      if (isValidAstNode(cur$$2)) {
        var inclusive = TypeScript$$7.hasFlag(options$$5, GetAstPathOptions.EdgeInclusive) || cur$$2.nodeType === TypeScript$$7.NodeType.Name || pos === script$$1.limChar;
        var minChar$$1 = cur$$2.minChar;
        var limChar$$1 = cur$$2.limChar + (inclusive ? 1 : 0);
        if (pos >= minChar$$1 && pos < limChar$$1) {
          var previous = ctx.path.ast();
          if (previous == null || cur$$2.minChar >= previous.minChar && cur$$2.limChar <= previous.limChar) {
            ctx.path.push(cur$$2);
          } else {
          }
        }
        if (pos < limChar$$1) {
          lookInComments(cur$$2.preComments);
        }
        if (pos >= minChar$$1) {
          lookInComments(cur$$2.postComments);
        }
        if (!TypeScript$$7.hasFlag(options$$5, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {
          walker$$36.options.goChildren = minChar$$1 <= pos && pos <= limChar$$1;
        }
      }
      return cur$$2;
    };
    var ctx = new AstPathContext;
    TypeScript$$7.getAstWalkerFactory().walk(script$$1, pre$$6, null, null, ctx);
    return ctx.path;
  }
  function getTokenizationOffset(script$$2, position) {
    var bestOffset = 0;
    var pre$$7 = function(cur$$3, parent$$38, walker$$37) {
      if (TypeScript$$7.isValidAstNode(cur$$3)) {
        if (cur$$3.minChar <= position) {
          bestOffset = max(bestOffset, cur$$3.minChar);
        }
        if (cur$$3.minChar > position || cur$$3.limChar < bestOffset) {
          walker$$37.options.goChildren = false;
        }
      }
      return cur$$3;
    };
    TypeScript$$7.getAstWalkerFactory().walk(script$$2, pre$$7);
    return bestOffset;
  }
  function walkAST(ast$$7, callback$$27) {
    var pre$$8 = function(cur$$4, parent$$39, walker$$38) {
      var path$$4 = walker$$38.state;
      path$$4.push(cur$$4);
      callback$$27(path$$4, walker$$38);
      return cur$$4;
    };
    var post$$5 = function(cur$$5, parent$$40, walker$$39) {
      var path$$5 = walker$$39.state;
      path$$5.pop();
      return cur$$5;
    };
    var path$$3 = new AstPath;
    TypeScript$$7.getAstWalkerFactory().walk(ast$$7, pre$$8, post$$5, null, path$$3);
  }
  TypeScript$$7.lastOf = lastOf;
  TypeScript$$7.max = max;
  TypeScript$$7.min = min$$1;
  var AstPath = function() {
    function AstPath$$1() {
      this.asts = [];
      this.top = -1;
    }
    AstPath$$1.reverseIndexOf = function reverseIndexOf(items$$1, index$$42) {
      return items$$1 === null || items$$1.length <= index$$42 ? null : items$$1[items$$1.length - index$$42 - 1];
    };
    AstPath$$1.prototype.clone = function() {
      var clone = new AstPath$$1;
      clone.asts = this.asts.map(function(value$$30) {
        return value$$30;
      });
      clone.top = this.top;
      return clone;
    };
    AstPath$$1.prototype.pop = function() {
      var head = this.ast();
      this.up();
      for (;this.asts.length > this.count();) {
        this.asts.pop();
      }
      return head;
    };
    AstPath$$1.prototype.push = function(ast$$8) {
      for (;this.asts.length > this.count();) {
        this.asts.pop();
      }
      this.top = this.asts.length;
      this.asts.push(ast$$8);
    };
    AstPath$$1.prototype.up = function() {
      if (this.top <= -1) {
        throw new Error("Invalid call to 'up'");
      }
      this.top--;
    };
    AstPath$$1.prototype.down = function() {
      if (this.top == this.ast.length - 1) {
        throw new Error("Invalid call to 'down'");
      }
      this.top++;
    };
    AstPath$$1.prototype.nodeType = function() {
      if (this.ast() == null) {
        return TypeScript$$7.NodeType.None;
      }
      return this.ast().nodeType;
    };
    AstPath$$1.prototype.ast = function() {
      return AstPath$$1.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));
    };
    AstPath$$1.prototype.parent = function() {
      return AstPath$$1.reverseIndexOf(this.asts, this.asts.length - this.top);
    };
    AstPath$$1.prototype.count = function() {
      return this.top + 1;
    };
    AstPath$$1.prototype.get = function(index$$43) {
      return this.asts[index$$43];
    };
    AstPath$$1.prototype.isNameOfClass = function() {
      if (this.ast() === null || this.parent() === null) {
        return false;
      }
      return this.ast().nodeType === TypeScript$$7.NodeType.Name && this.parent().nodeType === TypeScript$$7.NodeType.ClassDeclaration && this.parent().name === this.ast();
    };
    AstPath$$1.prototype.isNameOfInterface = function() {
      if (this.ast() === null || this.parent() === null) {
        return false;
      }
      return this.ast().nodeType === TypeScript$$7.NodeType.Name && this.parent().nodeType === TypeScript$$7.NodeType.InterfaceDeclaration && this.parent().name === this.ast();
    };
    AstPath$$1.prototype.isNameOfArgument = function() {
      if (this.ast() === null || this.parent() === null) {
        return false;
      }
      return this.ast().nodeType === TypeScript$$7.NodeType.Name && this.parent().nodeType === TypeScript$$7.NodeType.ArgDecl && this.parent().id === this.ast();
    };
    AstPath$$1.prototype.isNameOfVariable = function() {
      if (this.ast() === null || this.parent() === null) {
        return false;
      }
      return this.ast().nodeType === TypeScript$$7.NodeType.Name && this.parent().nodeType === TypeScript$$7.NodeType.VarDecl && this.parent().id === this.ast();
    };
    AstPath$$1.prototype.isNameOfModule = function() {
      if (this.ast() === null || this.parent() === null) {
        return false;
      }
      return this.ast().nodeType === TypeScript$$7.NodeType.Name && this.parent().nodeType === TypeScript$$7.NodeType.ModuleDeclaration && this.parent().name === this.ast();
    };
    AstPath$$1.prototype.isNameOfFunction = function() {
      if (this.ast() === null || this.parent() === null) {
        return false;
      }
      return this.ast().nodeType === TypeScript$$7.NodeType.Name && this.parent().nodeType === TypeScript$$7.NodeType.FuncDecl && this.parent().name === this.ast();
    };
    AstPath$$1.prototype.isChildOfScript = function() {
      var ast$$9 = lastOf(this.asts);
      return this.count() >= 3 && this.asts[this.top] === ast$$9 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.Script;
    };
    AstPath$$1.prototype.isChildOfModule = function() {
      var ast$$10 = lastOf(this.asts);
      return this.count() >= 3 && this.asts[this.top] === ast$$10 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.ModuleDeclaration;
    };
    AstPath$$1.prototype.isChildOfClass = function() {
      var ast$$11 = lastOf(this.asts);
      return this.count() >= 3 && this.asts[this.top] === ast$$11 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.ClassDeclaration;
    };
    AstPath$$1.prototype.isArgumentOfClassConstructor = function() {
      var ast$$12 = lastOf(this.asts);
      return this.count() >= 5 && this.asts[this.top] === ast$$12 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.FuncDecl && this.asts[this.top - 3].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 4].nodeType === TypeScript$$7.NodeType.ClassDeclaration && this.asts[this.top - 2].isConstructor && this.asts[this.top - 2].arguments === this.asts[this.top - 1] && this.asts[this.top - 4].constructorDecl === 
      this.asts[this.top - 2];
    };
    AstPath$$1.prototype.isChildOfInterface = function() {
      var ast$$13 = lastOf(this.asts);
      return this.count() >= 3 && this.asts[this.top] === ast$$13 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.InterfaceDeclaration;
    };
    AstPath$$1.prototype.isTopLevelImplicitModule = function() {
      return this.count() >= 1 && this.asts[this.top].nodeType === TypeScript$$7.NodeType.ModuleDeclaration && TypeScript$$7.hasFlag(this.asts[this.top].modFlags, TypeScript$$7.ModuleFlags.IsWholeFile);
    };
    AstPath$$1.prototype.isBodyOfTopLevelImplicitModule = function() {
      return this.count() >= 2 && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.ModuleDeclaration && this.asts[this.top - 1].members == this.asts[this.top - 0] && TypeScript$$7.hasFlag(this.asts[this.top - 1].modFlags, TypeScript$$7.ModuleFlags.IsWholeFile);
    };
    AstPath$$1.prototype.isBodyOfScript = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Script && this.asts[this.top - 1].bod == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfSwitch = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Switch && this.asts[this.top - 1].caseList == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfModule = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.ModuleDeclaration && this.asts[this.top - 1].members == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfClass = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.ClassDeclaration && this.asts[this.top - 1].members == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfFunction = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.FuncDecl && this.asts[this.top - 1].bod == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfInterface = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.InterfaceDeclaration && this.asts[this.top - 1].members == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfBlock = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Block && this.asts[this.top - 1].statements == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfFor = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.For && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfCase = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Case && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfTry = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Try && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfCatch = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Catch && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfDoWhile = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.DoWhile && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfWhile = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.While && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfForIn = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.ForIn && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfWith = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.With && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfFinally = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Finally && this.asts[this.top - 1].body == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isCaseOfSwitch = function() {
      return this.count() >= 3 && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.Switch && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 2].caseList == this.asts[this.top - 1];
    };
    AstPath$$1.prototype.isDefaultCaseOfSwitch = function() {
      return this.count() >= 3 && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.Switch && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 2].caseList == this.asts[this.top - 1] && this.asts[this.top - 2].defaultCase == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isListOfObjectLit = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.ObjectLit && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 1].operand == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfObjectLit = function() {
      return this.isListOfObjectLit();
    };
    AstPath$$1.prototype.isEmptyListOfObjectLit = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.ObjectLit && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 1].operand == this.asts[this.top - 0] && this.asts[this.top - 0].members.length == 0;
    };
    AstPath$$1.prototype.isMemberOfObjectLit = function() {
      return this.count() >= 3 && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.ObjectLit && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.Member && this.asts[this.top - 2].operand == this.asts[this.top - 1];
    };
    AstPath$$1.prototype.isNameOfMemberOfObjectLit = function() {
      return this.count() >= 4 && this.asts[this.top - 3].nodeType === TypeScript$$7.NodeType.ObjectLit && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Member && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.Name && this.asts[this.top - 3].operand == this.asts[this.top - 2];
    };
    AstPath$$1.prototype.isListOfArrayLit = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.ArrayLit && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 1].operand == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isTargetOfMember = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Member && this.asts[this.top - 1].operand1 === this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isMemberOfMember = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Member && this.asts[this.top - 1].operand2 === this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isItemOfList = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List;
    };
    AstPath$$1.prototype.isThenOfIf = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.If && this.asts[this.top - 1].thenBod == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isElseOfIf = function() {
      return this.count() >= 2 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.If && this.asts[this.top - 1].elseBod == this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isBodyOfDefaultCase = function() {
      return this.isBodyOfCase();
    };
    AstPath$$1.prototype.isSingleStatementList = function() {
      return this.count() >= 1 && this.asts[this.top].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top].members.length === 1;
    };
    AstPath$$1.prototype.isArgumentListOfFunction = function() {
      return this.count() >= 2 && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.FuncDecl && this.asts[this.top - 1].arguments === this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isArgumentOfFunction = function() {
      return this.count() >= 3 && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 2].nodeType === TypeScript$$7.NodeType.FuncDecl && this.asts[this.top - 2].arguments === this.asts[this.top - 1];
    };
    AstPath$$1.prototype.isArgumentListOfCall = function() {
      return this.count() >= 2 && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.Call && this.asts[this.top - 1].arguments === this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isArgumentListOfNew = function() {
      return this.count() >= 2 && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.List && this.asts[this.top - 1].nodeType === TypeScript$$7.NodeType.New && this.asts[this.top - 1].arguments === this.asts[this.top - 0];
    };
    AstPath$$1.prototype.isSynthesizedBlock = function() {
      return this.count() >= 1 && this.asts[this.top - 0].nodeType === TypeScript$$7.NodeType.Block && this.asts[this.top - 0].isStatementBlock === false;
    };
    return AstPath$$1;
  }();
  TypeScript$$7.AstPath = AstPath;
  TypeScript$$7.isValidAstNode = isValidAstNode;
  var AstPathContext = function() {
    function AstPathContext$$1() {
      this.path = new TypeScript$$7.AstPath;
    }
    return AstPathContext$$1;
  }();
  TypeScript$$7.AstPathContext = AstPathContext;
  (function(GetAstPathOptions$$1) {
    GetAstPathOptions$$1._map = [];
    GetAstPathOptions$$1.Default = 0;
    GetAstPathOptions$$1.EdgeInclusive = 1;
    GetAstPathOptions$$1.DontPruneSearchBasedOnPosition = 1 << 1;
  })(TypeScript$$7.GetAstPathOptions || (TypeScript$$7.GetAstPathOptions = {}));
  var GetAstPathOptions = TypeScript$$7.GetAstPathOptions;
  TypeScript$$7.getAstPathToPosition = getAstPathToPosition;
  TypeScript$$7.getTokenizationOffset = getTokenizationOffset;
  TypeScript$$7.walkAST = walkAST;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$8) {
  var AstLogger = function() {
    function AstLogger$$1(logger) {
      this.logger = logger;
    }
    AstLogger$$1.prototype.logScript = function(script$$3) {
      var _this = this;
      this.logLinemap(script$$3.locationInfo.lineMap);
      var stack = [];
      var pre$$9 = function(cur$$6, parent$$41) {
        stack.push(cur$$6);
        var indent = (stack.length - 1) * 2;
        _this.logComments(script$$3, cur$$6.preComments, indent);
        _this.logNode(script$$3, cur$$6, indent);
        _this.logComments(script$$3, cur$$6.postComments, indent);
        return cur$$6;
      };
      var post$$6 = function(cur$$7, parent$$42) {
        stack.pop();
        return cur$$7;
      };
      TypeScript$$8.getAstWalkerFactory().walk(script$$3, pre$$9, post$$6);
    };
    AstLogger$$1.prototype.logNode = function(script$$4, cur$$8, indent$$1) {
      var msg = this.addPadding("", indent$$1, "| ", true);
      msg = msg.concat("+ " + cur$$8.treeViewLabel());
      msg = this.addPadding(msg, 70, " ", false);
      msg = msg + this.addLineColumn(script$$4, cur$$8.minChar);
      msg = this.addPadding(msg, 80, " ", false);
      msg = msg + "=> ";
      msg = msg + this.addLineColumn(script$$4, cur$$8.limChar);
      msg = this.addPadding(msg, 102, " ", false);
      msg = msg.concat("[" + this.addPadding(cur$$8.minChar.toString(), 1, " ", true) + ", " + this.addPadding(cur$$8.limChar.toString(), 1, " ", true) + "]");
      msg = this.addPadding(msg, 115, " ", false);
      msg = msg.concat("sym=" + cur$$8.sym);
      msg = this.addPadding(msg, 135, " ", false);
      msg = msg.concat("type=" + (cur$$8.type === null ? "null" : cur$$8.type.getTypeName()));
      this.logger.log(msg);
    };
    AstLogger$$1.prototype.logComments = function(script$$5, comments$$3, indent$$2) {
      if (comments$$3 == null) {
        return;
      }
      var i$$27 = 0;
      for (;i$$27 < comments$$3.length;i$$27++) {
        this.logNode(script$$5, comments$$3[i$$27], indent$$2);
      }
    };
    AstLogger$$1.prototype.logLinemap = function(linemap) {
      var result$$4 = "[";
      var i$$28 = 0;
      for (;i$$28 < linemap.length;i$$28++) {
        if (i$$28 > 0) {
          result$$4 += ",";
        }
        result$$4 += linemap[i$$28];
      }
      result$$4 += "]";
      this.logger.log("linemap: " + result$$4);
    };
    AstLogger$$1.prototype.addPadding = function(s$$9, targetLength, paddingString, leftPadding) {
      var result$$5 = leftPadding ? "" : s$$9;
      var i$$29 = s$$9.length;
      for (;i$$29 < targetLength;i$$29++) {
        result$$5 = result$$5 + paddingString;
      }
      result$$5 = result$$5 + (leftPadding ? s$$9 : "");
      return result$$5;
    };
    AstLogger$$1.prototype.addLineColumn = function(script$$6, position$$1) {
      var lineInfo = {line:-1, col:-1};
      TypeScript$$8.getSourceLineColFromMap(lineInfo, position$$1, script$$6.locationInfo.lineMap);
      if (lineInfo.col !== -1) {
        lineInfo.col++;
      }
      return "(" + lineInfo.line + ", " + lineInfo.col + ")";
    };
    return AstLogger$$1;
  }();
  TypeScript$$8.AstLogger = AstLogger;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$9) {
  var Binder = function() {
    function Binder$$1(checker$$1) {
      this.checker = checker$$1;
    }
    Binder$$1.prototype.resolveBaseTypeLinks = function(typeLinks, scope) {
      var extendsList$$3 = null;
      if (typeLinks) {
        extendsList$$3 = new Array;
        var i$$30 = 0;
        var len$$7 = typeLinks.length;
        for (;i$$30 < len$$7;i$$30++) {
          extendsList$$3[i$$30] = this.checker.resolveBaseTypeLink(typeLinks[i$$30], scope);
        }
      }
      return extendsList$$3;
    };
    Binder$$1.prototype.resolveBases = function(scope$$1, type$$25) {
      type$$25.extendsList = this.resolveBaseTypeLinks(type$$25.extendsTypeLinks, scope$$1);
      var i$$31 = 0;
      var len$$8 = type$$25.extendsList.length;
      var derivedIsClass = type$$25.isClassInstance();
      for (;i$$31 < len$$8;i$$31++) {
        var baseIsClass = type$$25.extendsList[i$$31].isClassInstance();
        if (type$$25.extendsList[i$$31] != this.checker.anyType) {
          var baseRef = type$$25.extendsTypeLinks[i$$31].ast;
          if (derivedIsClass) {
            if (!baseIsClass) {
              this.checker.errorReporter.simpleError(baseRef, "A class may only extend other classes, " + type$$25.extendsList[i$$31].symbol.fullName() + " is not a class.");
            }
          } else {
            if (baseIsClass) {
              this.checker.errorReporter.simpleError(baseRef, "An interface may only extend other interfaces, " + type$$25.extendsList[i$$31].symbol.fullName() + " is a class.");
            }
          }
        }
      }
      type$$25.implementsList = this.resolveBaseTypeLinks(type$$25.implementsTypeLinks, scope$$1);
      if (type$$25.implementsList) {
        i$$31 = 0, len$$8 = type$$25.implementsList.length;
        for (;i$$31 < len$$8;i$$31++) {
          var iface = type$$25.implementsList[i$$31];
          baseRef = type$$25.implementsTypeLinks[i$$31].ast;
          if (iface.isClassInstance()) {
            if (derivedIsClass) {
              this.checker.errorReporter.simpleError(baseRef, "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.");
            }
          }
        }
      }
    };
    Binder$$1.prototype.resolveSignatureGroup = function(signatureGroup, scope$$2, instanceType) {
      var supplyVar = !signatureGroup.hasImplementation;
      var i$$32 = 0;
      var len$$9 = signatureGroup.signatures.length;
      for (;i$$32 < len$$9;i$$32++) {
        var signature = signatureGroup.signatures[i$$32];
        if (instanceType) {
          signature.returnType.type = instanceType;
        } else {
          this.checker.resolveTypeLink(scope$$2, signature.returnType, supplyVar);
        }
        var paramLen = signature.parameters.length;
        var j$$1 = 0;
        for (;j$$1 < paramLen;j$$1++) {
          this.bindSymbol(scope$$2, signature.parameters[j$$1]);
        }
        if (signature.hasVariableArgList) {
          var lastParam = signature.parameters[paramLen - 1];
          lastParam.argsOffset = paramLen - 1;
          if (!lastParam.getType().isArray()) {
            this.checker.errorReporter.simpleErrorFromSym(lastParam, "... parameter must have array type");
            lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);
          }
        }
      }
    };
    Binder$$1.prototype.bindType = function(scope$$3, type$$26, instanceType$$1) {
      if (instanceType$$1) {
        this.bindType(scope$$3, instanceType$$1, null);
      }
      if (type$$26.hasMembers()) {
        var members$$5 = type$$26.members;
        var ambientMembers = type$$26.ambientMembers;
        var typeMembers = type$$26.getAllEnclosedTypes();
        var ambientTypeMembers = type$$26.getAllAmbientEnclosedTypes();
        var memberScope = new TypeScript$$9.SymbolTableScope(members$$5, ambientMembers, typeMembers, ambientTypeMembers, type$$26.symbol);
        var agg = new TypeScript$$9.SymbolAggregateScope(type$$26.symbol);
        var prevCurrentModDecl = this.checker.currentModDecl;
        var prevBindStatus = this.checker.inBind;
        agg.addParentScope(memberScope);
        agg.addParentScope(scope$$3);
        if (type$$26.isModuleType()) {
          this.checker.currentModDecl = type$$26.symbol.declAST;
          this.checker.inBind = true;
        }
        if (members$$5) {
          this.bind(agg, type$$26.members.allMembers);
        }
        if (typeMembers) {
          this.bind(agg, typeMembers.allMembers);
        }
        if (ambientMembers) {
          this.bind(agg, ambientMembers.allMembers);
        }
        if (ambientTypeMembers) {
          this.bind(agg, ambientTypeMembers.allMembers);
        }
        this.checker.currentModDecl = prevCurrentModDecl;
        this.checker.inBind = prevBindStatus;
      }
      if (type$$26.extendsTypeLinks) {
        this.resolveBases(scope$$3, type$$26);
      }
      if (type$$26.construct) {
        this.resolveSignatureGroup(type$$26.construct, scope$$3, instanceType$$1);
      }
      if (type$$26.call) {
        this.resolveSignatureGroup(type$$26.call, scope$$3, null);
      }
      if (type$$26.index) {
        this.resolveSignatureGroup(type$$26.index, scope$$3, null);
      }
      if (type$$26.elementType) {
        this.bindType(scope$$3, type$$26.elementType, null);
      }
    };
    Binder$$1.prototype.bindSymbol = function(scope$$4, symbol$$2) {
      if (!symbol$$2.bound) {
        var prevLocationInfo = this.checker.locationInfo;
        if (this.checker.units && symbol$$2.unitIndex >= 0 && symbol$$2.unitIndex < this.checker.units.length) {
          this.checker.locationInfo = this.checker.units[symbol$$2.unitIndex];
        }
        switch(symbol$$2.kind()) {
          case TypeScript$$9.SymbolKind.Type:
            if (symbol$$2.flags & TypeScript$$9.SymbolFlags.Bound) {
              break;
            }
            var typeSymbol = symbol$$2;
            typeSymbol.flags |= TypeScript$$9.SymbolFlags.Bound;
            if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == TypeScript$$9.NodeType.Name) {
              var modPath = typeSymbol.aliasLink.alias.text;
              var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, function(id$$7) {
                return scope$$4.find(id$$7, false, true);
              });
              if (modSym) {
                typeSymbol.type = modSym.getType();
              }
            }
            if (typeSymbol.type && typeSymbol.type != this.checker.gloModType) {
              this.bindType(scope$$4, typeSymbol.type, typeSymbol.instanceType);
              if (typeSymbol.type.isModuleType()) {
                var i$$33 = 0;
                for (;i$$33 < typeSymbol.expansions.length;i$$33++) {
                  this.bindType(scope$$4, typeSymbol.expansions[i$$33], typeSymbol.instanceType);
                }
              }
            }
            break;
          case TypeScript$$9.SymbolKind.Field:
            this.checker.resolveTypeLink(scope$$4, symbol$$2.field.typeLink, false);
            break;
          case TypeScript$$9.SymbolKind.Parameter:
            this.checker.resolveTypeLink(scope$$4, symbol$$2.parameter.typeLink, true);
            break;
        }
        this.checker.locationInfo = prevLocationInfo;
      }
      symbol$$2.bound = true;
    };
    Binder$$1.prototype.bind = function(scope$$5, table$$1) {
      table$$1.map(function(key$$27, sym$$2, binder) {
        binder.bindSymbol(scope$$5, sym$$2);
      }, this);
    };
    return Binder$$1;
  }();
  TypeScript$$9.Binder = Binder;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$10) {
  var Base64Format = function() {
    function Base64Format$$1() {
    }
    Base64Format$$1.encodedValues = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    Base64Format$$1.encode = function encode(inValue) {
      if (inValue < 64) {
        return Base64Format$$1.encodedValues.charAt(inValue);
      }
      throw TypeError(inValue + ": not a 64 based value");
    };
    Base64Format$$1.decodeChar = function decodeChar(inChar) {
      if (inChar.length === 1) {
        return Base64Format$$1.encodedValues.indexOf(inChar);
      } else {
        throw TypeError('"' + inChar + '" must have length 1');
      }
    };
    return Base64Format$$1;
  }();
  var Base64VLQFormat = function() {
    function Base64VLQFormat$$1() {
    }
    Base64VLQFormat$$1.encode = function encode$$1(inValue$$1) {
      if (inValue$$1 < 0) {
        inValue$$1 = (-inValue$$1 << 1) + 1;
      } else {
        inValue$$1 = inValue$$1 << 1;
      }
      var encodedStr = "";
      do {
        var currentDigit = inValue$$1 & 31;
        inValue$$1 = inValue$$1 >> 5;
        if (inValue$$1 > 0) {
          currentDigit = currentDigit | 32;
        }
        encodedStr = encodedStr + Base64Format.encode(currentDigit);
      } while (inValue$$1 > 0);
      return encodedStr;
    };
    Base64VLQFormat$$1.decode = function decode(inString) {
      var result$$6 = 0;
      var negative = false;
      var shift = 0;
      var i$$34 = 0;
      for (;i$$34 < inString.length;i$$34++) {
        var byte = Base64Format.decodeChar(inString[i$$34]);
        if (i$$34 === 0) {
          if ((byte & 1) === 1) {
            negative = true;
          }
          result$$6 = byte >> 1 & 15;
        } else {
          result$$6 = result$$6 | (byte & 31) << shift;
        }
        shift += i$$34 == 0 ? 4 : 5;
        if ((byte & 32) === 32) {
        } else {
          return{value:negative ? -result$$6 : result$$6, rest:inString.substr(i$$34 + 1)};
        }
      }
      throw new Error('Base64 value "' + inString + '" finished with a continuation bit');
    };
    return Base64VLQFormat$$1;
  }();
  TypeScript$$10.Base64VLQFormat = Base64VLQFormat;
})(TypeScript || (TypeScript = {}));
var JSON2 = {};
(function() {
  function f(n$$1) {
    return n$$1 < 10 ? "0" + n$$1 : n$$1;
  }
  function quote(string) {
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function(a$$2) {
      var c$$3 = meta[a$$2];
      return typeof c$$3 === "string" ? c$$3 : "\\u" + ("0000" + a$$2.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
  }
  function str$$6(key$$28, holder) {
    var i$$35;
    var k$$5 = null;
    var v;
    var length$$14;
    var mind = gap;
    var partial;
    var value$$31 = holder[key$$28];
    if (value$$31 && typeof value$$31 === "object" && typeof value$$31.toJSON === "function") {
      value$$31 = value$$31.toJSON(key$$28);
    }
    if (typeof rep === "function") {
      value$$31 = rep.call(holder, key$$28, value$$31);
    }
    switch(typeof value$$31) {
      case "string":
        return quote(value$$31);
      case "number":
        return isFinite(value$$31) ? String(value$$31) : "null";
      case "boolean":
      ;
      case "null":
        return String(value$$31);
      case "object":
        if (!value$$31) {
          return "null";
        }
        gap += indent$$3;
        partial = [];
        if (Object.prototype.toString.apply(value$$31, []) === "[object Array]") {
          length$$14 = value$$31.length;
          i$$35 = 0;
          for (;i$$35 < length$$14;i$$35 += 1) {
            partial[i$$35] = str$$6(i$$35, value$$31) || "null";
          }
          v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
          gap = mind;
          return v;
        }
        if (rep && typeof rep === "object") {
          length$$14 = rep.length;
          i$$35 = 0;
          for (;i$$35 < length$$14;i$$35 += 1) {
            if (typeof rep[i$$35] === "string") {
              k$$5 = rep[i$$35];
              v = str$$6(k$$5, value$$31);
              if (v) {
                partial.push(quote(k$$5) + (gap ? ": " : ":") + v);
              }
            }
          }
        } else {
          for (k$$5 in value$$31) {
            if (Object.prototype.hasOwnProperty.call(value$$31, k$$5)) {
              v = str$$6(k$$5, value$$31);
              if (v) {
                partial.push(quote(k$$5) + (gap ? ": " : ":") + v);
              }
            }
          }
        }
        v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
        gap = mind;
        return v;
    }
  }
  if (typeof Date.prototype.toJSON !== "function") {
    Date.prototype.toJSON = function(key$$29) {
      return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
    };
    var strProto = String.prototype;
    var numProto = Number.prototype;
    numProto.JSON = strProto.JSON = Boolean.prototype.toJSON = function(key$$30) {
      return this.valueOf();
    };
  }
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var gap;
  var indent$$3;
  var meta = {"\b":"\\b", "\t":"\\t", "\n":"\\n", "\f":"\\f", "\r":"\\r", '"':'\\"', "\\":"\\\\"};
  var rep;
  if (typeof JSON2.stringify !== "function") {
    JSON2.stringify = function(value$$32, replacer, space) {
      var i$$36;
      gap = "";
      indent$$3 = "";
      if (typeof space === "number") {
        i$$36 = 0;
        for (;i$$36 < space;i$$36 += 1) {
          indent$$3 += " ";
        }
      } else {
        if (typeof space === "string") {
          indent$$3 = space;
        }
      }
      rep = replacer;
      if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
        throw new Error("JSON.stringify");
      }
      return str$$6("", {"":value$$32});
    };
  }
  if (typeof JSON2.parse !== "function") {
    JSON2.parse = function(text$$9, reviver) {
      function walk$$1(holder$$1, key$$31) {
        var k$$6 = null;
        var v$$1;
        var value$$33 = holder$$1[key$$31];
        if (value$$33 && typeof value$$33 === "object") {
          for (k$$6 in value$$33) {
            if (Object.prototype.hasOwnProperty.call(value$$33, k$$6)) {
              v$$1 = walk$$1(value$$33, k$$6);
              if (v$$1 !== undefined) {
                value$$33[k$$6] = v$$1;
              } else {
                delete value$$33[k$$6];
              }
            }
          }
        }
        return reviver.call(holder$$1, key$$31, value$$33);
      }
      var j$$2;
      text$$9 = String(text$$9);
      cx.lastIndex = 0;
      if (cx.test(text$$9)) {
        text$$9 = text$$9.replace(cx, function(a$$3) {
          return "\\u" + ("0000" + a$$3.charCodeAt(0).toString(16)).slice(-4);
        });
      }
      if (/^[\],:{}\s]*$/.test(text$$9.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
        j$$2 = eval("(" + text$$9 + ")");
        return typeof reviver === "function" ? walk$$1({"":j$$2}, "") : j$$2;
      }
      throw new SyntaxError("JSON.parse");
    };
  }
})();
(function(TypeScript$$11) {
  var SourceMapPosition = function() {
    function SourceMapPosition$$1() {
    }
    return SourceMapPosition$$1;
  }();
  TypeScript$$11.SourceMapPosition = SourceMapPosition;
  var SourceMapping = function() {
    function SourceMapping$$1() {
      this.start = new SourceMapPosition;
      this.end = new SourceMapPosition;
      this.nameIndex = -1;
      this.childMappings = [];
    }
    return SourceMapping$$1;
  }();
  TypeScript$$11.SourceMapping = SourceMapping;
  var SourceMapper = function() {
    function SourceMapper$$1(tsFileName, jsFileName, jsFile, sourceMapOut, errorReporter) {
      this.jsFile = jsFile;
      this.sourceMapOut = sourceMapOut;
      this.errorReporter = errorReporter;
      this.sourceMappings = [];
      this.currentMappings = [];
      this.names = [];
      this.currentNameIndex = [];
      this.currentMappings.push(this.sourceMappings);
      jsFileName = TypeScript$$11.switchToForwardSlashes(jsFileName);
      this.jsFileName = TypeScript$$11.getPrettyName(jsFileName, false, true);
      var removalIndex = jsFileName.lastIndexOf(this.jsFileName);
      var fixedPath = jsFileName.substring(0, removalIndex);
      this.tsFileName = TypeScript$$11.getRelativePathToFixedPath(fixedPath, tsFileName);
    }
    SourceMapper$$1.MapFileExtension = ".map";
    SourceMapper$$1.EmitSourceMapping = function EmitSourceMapping(allSourceMappers) {
      var sourceMapper = allSourceMappers[0];
      sourceMapper.jsFile.WriteLine("//@ sourceMappingURL=" + sourceMapper.jsFileName + SourceMapper$$1.MapFileExtension);
      var sourceMapOut$$1 = sourceMapper.sourceMapOut;
      var mappingsString = "";
      var tsFiles = [];
      var prevEmittedColumn = 0;
      var prevEmittedLine = 0;
      var prevSourceColumn = 0;
      var prevSourceLine = 0;
      var prevSourceIndex = 0;
      var prevNameIndex = 0;
      var namesList = [];
      var namesCount = 0;
      var emitComma = false;
      var recordedPosition = null;
      var sourceMapperIndex = 0;
      for (;sourceMapperIndex < allSourceMappers.length;sourceMapperIndex++) {
        sourceMapper = allSourceMappers[sourceMapperIndex];
        var currentSourceIndex = tsFiles.length;
        tsFiles.push(sourceMapper.tsFileName);
        if (sourceMapper.names.length > 0) {
          namesList.push.apply(namesList, sourceMapper.names);
        }
        var recordSourceMapping = function(mappedPosition, nameIndex) {
          if (recordedPosition != null && recordedPosition.emittedColumn == mappedPosition.emittedColumn && recordedPosition.emittedLine == mappedPosition.emittedLine) {
            return;
          }
          if (prevEmittedLine !== mappedPosition.emittedLine) {
            for (;prevEmittedLine < mappedPosition.emittedLine;) {
              prevEmittedColumn = 0;
              mappingsString = mappingsString + ";";
              prevEmittedLine++;
            }
            emitComma = false;
          } else {
            if (emitComma) {
              mappingsString = mappingsString + ",";
            }
          }
          mappingsString = mappingsString + TypeScript$$11.Base64VLQFormat.encode(mappedPosition.emittedColumn - prevEmittedColumn);
          prevEmittedColumn = mappedPosition.emittedColumn;
          mappingsString = mappingsString + TypeScript$$11.Base64VLQFormat.encode(currentSourceIndex - prevSourceIndex);
          prevSourceIndex = currentSourceIndex;
          mappingsString = mappingsString + TypeScript$$11.Base64VLQFormat.encode(mappedPosition.sourceLine - 1 - prevSourceLine);
          prevSourceLine = mappedPosition.sourceLine - 1;
          mappingsString = mappingsString + TypeScript$$11.Base64VLQFormat.encode(mappedPosition.sourceColumn - prevSourceColumn);
          prevSourceColumn = mappedPosition.sourceColumn;
          if (nameIndex >= 0) {
            mappingsString = mappingsString + TypeScript$$11.Base64VLQFormat.encode(namesCount + nameIndex - prevNameIndex);
            prevNameIndex = namesCount + nameIndex;
          }
          emitComma = true;
          recordedPosition = mappedPosition;
        };
        var recordSourceMappingSiblings = function(sourceMappings) {
          var i$$37 = 0;
          for (;i$$37 < sourceMappings.length;i$$37++) {
            var sourceMapping = sourceMappings[i$$37];
            recordSourceMapping(sourceMapping.start, sourceMapping.nameIndex);
            recordSourceMappingSiblings(sourceMapping.childMappings);
            recordSourceMapping(sourceMapping.end, sourceMapping.nameIndex);
          }
        };
        recordSourceMappingSiblings(sourceMapper.sourceMappings, -1);
        namesCount = namesCount + sourceMapper.names.length;
      }
      if (mappingsString != "") {
        sourceMapOut$$1.Write(JSON2.stringify({version:3, file:sourceMapper.jsFileName, sources:tsFiles, names:namesList, mappings:mappingsString}));
      }
      try {
        sourceMapOut$$1.Close();
      } catch (ex) {
        sourceMapper.errorReporter.emitterError(null, ex.message);
      }
    };
    return SourceMapper$$1;
  }();
  TypeScript$$11.SourceMapper = SourceMapper;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$12) {
  (function(EmitContainer$$1) {
    EmitContainer$$1._map = [];
    EmitContainer$$1._map[0] = "Prog";
    EmitContainer$$1.Prog = 0;
    EmitContainer$$1._map[1] = "Module";
    EmitContainer$$1.Module = 1;
    EmitContainer$$1._map[2] = "DynamicModule";
    EmitContainer$$1.DynamicModule = 2;
    EmitContainer$$1._map[3] = "Class";
    EmitContainer$$1.Class = 3;
    EmitContainer$$1._map[4] = "Constructor";
    EmitContainer$$1.Constructor = 4;
    EmitContainer$$1._map[5] = "Function";
    EmitContainer$$1.Function = 5;
    EmitContainer$$1._map[6] = "Args";
    EmitContainer$$1.Args = 6;
    EmitContainer$$1._map[7] = "Interface";
    EmitContainer$$1.Interface = 7;
  })(TypeScript$$12.EmitContainer || (TypeScript$$12.EmitContainer = {}));
  var EmitContainer = TypeScript$$12.EmitContainer;
  var EmitState = function() {
    function EmitState$$1() {
      this.column = 0;
      this.line = 0;
      this.pretty = false;
      this.inObjectLiteral = false;
      this.container = EmitContainer.Prog;
    }
    return EmitState$$1;
  }();
  TypeScript$$12.EmitState = EmitState;
  var EmitOptions = function() {
    function EmitOptions$$1(settings$$1) {
      this.ioHost = null;
      this.outputMany = true;
      this.commonDirectoryPath = "";
      this.minWhitespace = settings$$1.minWhitespace;
      this.propagateConstants = settings$$1.propagateConstants;
      this.emitComments = settings$$1.emitComments;
      this.outputOption = settings$$1.outputOption;
    }
    EmitOptions$$1.prototype.mapOutputFileName = function(fileName$$1, extensionChanger) {
      if (this.outputMany) {
        var updatedFileName = fileName$$1;
        if (this.outputOption != "") {
          updatedFileName = fileName$$1.replace(this.commonDirectoryPath, "");
          updatedFileName = this.outputOption + updatedFileName;
        }
        return extensionChanger(updatedFileName, false);
      } else {
        return extensionChanger(this.outputOption, true);
      }
    };
    return EmitOptions$$1;
  }();
  TypeScript$$12.EmitOptions = EmitOptions;
  var Indenter = function() {
    function Indenter$$1() {
      this.indentAmt = 0;
    }
    Indenter$$1.indentStep = 4;
    Indenter$$1.indentStepString = "    ";
    Indenter$$1.indentStrings = [];
    Indenter$$1.prototype.increaseIndent = function() {
      this.indentAmt += Indenter$$1.indentStep;
    };
    Indenter$$1.prototype.decreaseIndent = function() {
      this.indentAmt -= Indenter$$1.indentStep;
    };
    Indenter$$1.prototype.getIndent = function() {
      var indentString = Indenter$$1.indentStrings[this.indentAmt];
      if (indentString === undefined) {
        indentString = "";
        var i$$38 = 0;
        for (;i$$38 < this.indentAmt;i$$38 = i$$38 + Indenter$$1.indentStep) {
          indentString += Indenter$$1.indentStepString;
        }
        Indenter$$1.indentStrings[this.indentAmt] = indentString;
      }
      return indentString;
    };
    return Indenter$$1;
  }();
  TypeScript$$12.Indenter = Indenter;
  var Emitter = function() {
    function Emitter$$1(checker$$2, emittingFileName, outfile$$1, emitOptions$$1, errorReporter$$1) {
      this.checker = checker$$2;
      this.emittingFileName = emittingFileName;
      this.outfile = outfile$$1;
      this.emitOptions = emitOptions$$1;
      this.errorReporter = errorReporter$$1;
      this.prologueEmitted = false;
      this.thisClassNode = null;
      this.thisFnc = null;
      this.moduleDeclList = [];
      this.moduleName = "";
      this.emitState = new EmitState;
      this.indenter = new Indenter;
      this.ambientModule = false;
      this.modAliasId = null;
      this.firstModAlias = null;
      this.allSourceMappers = [];
      this.sourceMapper = null;
      this.captureThisStmtString = "var _this = this;";
      this.varListCountStack = [0];
    }
    Emitter$$1.prototype.setSourceMappings = function(mapper) {
      this.allSourceMappers.push(mapper);
      this.sourceMapper = mapper;
    };
    Emitter$$1.prototype.writeToOutput = function(s$$10) {
      this.outfile.Write(s$$10);
      this.emitState.column += s$$10.length;
    };
    Emitter$$1.prototype.writeToOutputTrimmable = function(s$$11) {
      if (this.emitOptions.minWhitespace) {
        s$$11 = s$$11.replace(/[\s]*/g, "");
      }
      this.writeToOutput(s$$11);
    };
    Emitter$$1.prototype.writeLineToOutput = function(s$$12) {
      if (this.emitOptions.minWhitespace) {
        this.writeToOutput(s$$12);
        var c$$4 = s$$12.charCodeAt(s$$12.length - 1);
        if (!(c$$4 == TypeScript$$12.LexCodeSpace || c$$4 == TypeScript$$12.LexCodeSMC || c$$4 == TypeScript$$12.LexCodeLBR)) {
          this.writeToOutput(" ");
        }
      } else {
        this.outfile.WriteLine(s$$12);
        this.emitState.column = 0;
        this.emitState.line++;
      }
    };
    Emitter$$1.prototype.writeCaptureThisStatement = function(ast$$14) {
      this.emitIndent();
      this.recordSourceMappingStart(ast$$14);
      this.writeToOutput(this.captureThisStmtString);
      this.recordSourceMappingEnd(ast$$14);
      this.writeLineToOutput("");
    };
    Emitter$$1.prototype.setInVarBlock = function(count$$3) {
      this.varListCountStack[this.varListCountStack.length - 1] = count$$3;
    };
    Emitter$$1.prototype.setInObjectLiteral = function(val$$5) {
      var temp$$8 = this.emitState.inObjectLiteral;
      this.emitState.inObjectLiteral = val$$5;
      return temp$$8;
    };
    Emitter$$1.prototype.setContainer = function(c$$5) {
      var temp$$9 = this.emitState.container;
      this.emitState.container = c$$5;
      return temp$$9;
    };
    Emitter$$1.prototype.getIndentString = function() {
      if (this.emitOptions.minWhitespace) {
        return "";
      } else {
        return this.indenter.getIndent();
      }
    };
    Emitter$$1.prototype.emitIndent = function() {
      this.writeToOutput(this.getIndentString());
    };
    Emitter$$1.prototype.emitCommentInPlace = function(comment) {
      this.recordSourceMappingStart(comment);
      var text$$10 = comment.getText();
      var hadNewLine = false;
      if (comment.isBlockComment) {
        if (this.emitState.column == 0) {
          this.emitIndent();
        }
        this.writeToOutput(text$$10[0]);
        if (text$$10.length > 1 || comment.endsLine) {
          this.writeLineToOutput("");
          var i$$39 = 1;
          for (;i$$39 < text$$10.length;i$$39++) {
            this.emitIndent();
            this.writeLineToOutput(text$$10[i$$39]);
          }
          hadNewLine = true;
        }
      } else {
        if (this.emitState.column == 0) {
          this.emitIndent();
        }
        this.writeLineToOutput(text$$10[0]);
        hadNewLine = true;
      }
      if (hadNewLine) {
        this.emitIndent();
      } else {
        this.writeToOutput(" ");
      }
      this.recordSourceMappingEnd(comment);
    };
    Emitter$$1.prototype.emitParensAndCommentsInPlace = function(ast$$15, pre$$10) {
      var comments$$4 = pre$$10 ? ast$$15.preComments : ast$$15.postComments;
      if (ast$$15.isParenthesized && !pre$$10) {
        this.writeToOutput(")");
      }
      if (this.emitOptions.emitComments && comments$$4 && comments$$4.length != 0) {
        var i$$40 = 0;
        for (;i$$40 < comments$$4.length;i$$40++) {
          this.emitCommentInPlace(comments$$4[i$$40]);
        }
      }
      if (ast$$15.isParenthesized && pre$$10) {
        this.writeToOutput("(");
      }
    };
    Emitter$$1.prototype.emitObjectLiteral = function(content$$2) {
      this.writeLineToOutput("{");
      this.indenter.increaseIndent();
      var inObjectLiteral = this.setInObjectLiteral(true);
      this.emitJavascriptList(content$$2, ",", TypeScript$$12.TokenID.Comma, true, false, false);
      this.setInObjectLiteral(inObjectLiteral);
      this.indenter.decreaseIndent();
      this.emitIndent();
      this.writeToOutput("}");
    };
    Emitter$$1.prototype.emitArrayLiteral = function(content$$3) {
      this.writeToOutput("[");
      if (content$$3) {
        this.writeLineToOutput("");
        this.indenter.increaseIndent();
        this.emitJavascriptList(content$$3, ", ", TypeScript$$12.TokenID.Comma, true, false, false);
        this.indenter.decreaseIndent();
        this.emitIndent();
      }
      this.writeToOutput("]");
    };
    Emitter$$1.prototype.emitNew = function(target$$28, args$$3) {
      this.writeToOutput("new ");
      if (target$$28.nodeType == TypeScript$$12.NodeType.TypeRef) {
        var typeRef = target$$28;
        if (typeRef.arrayCount) {
          this.writeToOutput("Array()");
        } else {
          this.emitJavascript(typeRef.term, TypeScript$$12.TokenID.Tilde, false);
          this.writeToOutput("()");
        }
      } else {
        this.emitJavascript(target$$28, TypeScript$$12.TokenID.Tilde, false);
        this.recordSourceMappingStart(args$$3);
        this.writeToOutput("(");
        this.emitJavascriptList(args$$3, ", ", TypeScript$$12.TokenID.Comma, false, false, false);
        this.writeToOutput(")");
        this.recordSourceMappingEnd(args$$3);
      }
    };
    Emitter$$1.prototype.tryEmitConstant = function(dotExpr$$2) {
      if (!this.emitOptions.propagateConstants) {
        return false;
      }
      var propertyName$$7 = dotExpr$$2.operand2;
      if (propertyName$$7 && propertyName$$7.sym && propertyName$$7.sym.isVariable()) {
        if (TypeScript$$12.hasFlag(propertyName$$7.sym.flags, TypeScript$$12.SymbolFlags.Constant)) {
          if (propertyName$$7.sym.declAST) {
            var boundDecl = propertyName$$7.sym.declAST;
            if (boundDecl.init && boundDecl.init.nodeType == TypeScript$$12.NodeType.NumberLit) {
              var numLit = boundDecl.init;
              this.writeToOutput(numLit.value.toString());
              var comment$$1 = " /* ";
              comment$$1 += propertyName$$7.actualText;
              comment$$1 += " */ ";
              this.writeToOutput(comment$$1);
              return true;
            }
          }
        }
      }
      return false;
    };
    Emitter$$1.prototype.emitCall = function(callNode, target$$29, args$$4) {
      if (!this.emitSuperCall(callNode)) {
        if (!TypeScript$$12.hasFlag(callNode.flags, TypeScript$$12.ASTFlags.ClassBaseConstructorCall)) {
          if (target$$29.nodeType == TypeScript$$12.NodeType.FuncDecl && !target$$29.isParenthesized) {
            this.writeToOutput("(");
          }
          if (callNode.target.nodeType == TypeScript$$12.NodeType.Super && this.emitState.container == EmitContainer.Constructor) {
            this.writeToOutput("_super.call");
          } else {
            this.emitJavascript(target$$29, TypeScript$$12.TokenID.OpenParen, false);
          }
          if (target$$29.nodeType == TypeScript$$12.NodeType.FuncDecl && !target$$29.isParenthesized) {
            this.writeToOutput(")");
          }
          this.recordSourceMappingStart(args$$4);
          this.writeToOutput("(");
          if (callNode.target.nodeType == TypeScript$$12.NodeType.Super && this.emitState.container == EmitContainer.Constructor) {
            this.writeToOutput("this");
            if (args$$4 && args$$4.members.length) {
              this.writeToOutput(", ");
            }
          }
          this.emitJavascriptList(args$$4, ", ", TypeScript$$12.TokenID.Comma, false, false, false);
          this.writeToOutput(")");
          this.recordSourceMappingEnd(args$$4);
        } else {
          this.indenter.decreaseIndent();
          this.indenter.decreaseIndent();
          var constructorCall = new TypeScript$$12.ASTList;
          constructorCall.members[0] = callNode;
          this.emitConstructorCalls(constructorCall, this.thisClassNode);
          this.indenter.increaseIndent();
          this.indenter.increaseIndent();
        }
      }
    };
    Emitter$$1.prototype.emitConstructorCalls = function(bases, classDecl) {
      if (bases == null) {
        return;
      }
      var basesLen = bases.members.length;
      this.recordSourceMappingStart(classDecl);
      var i$$41 = 0;
      for (;i$$41 < basesLen;i$$41++) {
        var baseExpr = bases.members[i$$41];
        var baseSymbol = null;
        if (baseExpr.nodeType == TypeScript$$12.NodeType.Call) {
          baseSymbol = baseExpr.target.type.symbol;
        } else {
          baseSymbol = baseExpr.type.symbol;
        }
        var baseName = baseSymbol.name;
        if (baseSymbol.declModule != classDecl.type.symbol.declModule) {
          baseName = baseSymbol.fullName();
        }
        if (baseExpr.nodeType == TypeScript$$12.NodeType.Call) {
          this.emitIndent();
          this.writeToOutput("_super.call(this");
          var args$$5 = baseExpr.arguments;
          if (args$$5 && args$$5.members.length > 0) {
            this.writeToOutput(", ");
            this.emitJavascriptList(args$$5, ", ", TypeScript$$12.TokenID.Comma, false, false, false);
          }
          this.writeToOutput(")");
        } else {
          if (baseExpr.type && baseExpr.type.isClassInstance()) {
            this.emitIndent();
            this.writeToOutput(classDecl.name.actualText + "._super.constructor");
            this.writeToOutput(".call(this)");
          }
        }
      }
      this.recordSourceMappingEnd(classDecl);
    };
    Emitter$$1.prototype.emitInnerFunction = function(funcDecl$$1, printName, isMember, bases$$1, hasSelfRef, classDecl$$1) {
      var isClassConstructor = funcDecl$$1.isConstructor && TypeScript$$12.hasFlag(funcDecl$$1.fncFlags, TypeScript$$12.FncFlags.ClassMethod);
      var hasNonObjectBaseType = isClassConstructor && TypeScript$$12.hasFlag(this.thisClassNode.type.instanceType.typeFlags, TypeScript$$12.TypeFlags.HasBaseType) && !TypeScript$$12.hasFlag(this.thisClassNode.type.instanceType.typeFlags, TypeScript$$12.TypeFlags.HasBaseTypeOfObject);
      var classPropertiesMustComeAfterSuperCall = hasNonObjectBaseType && TypeScript$$12.hasFlag(this.thisClassNode.varFlags, TypeScript$$12.VarFlags.ClassSuperMustBeFirstCallInConstructor);
      var shouldParenthesize = TypeScript$$12.hasFlag(funcDecl$$1.fncFlags, TypeScript$$12.FncFlags.IsFunctionExpression) && !funcDecl$$1.isParenthesized && !funcDecl$$1.isAccessor() && (TypeScript$$12.hasFlag(funcDecl$$1.flags, TypeScript$$12.ASTFlags.ExplicitSemicolon) || TypeScript$$12.hasFlag(funcDecl$$1.flags, TypeScript$$12.ASTFlags.AutomaticSemicolon));
      this.emitParensAndCommentsInPlace(funcDecl$$1, true);
      if (shouldParenthesize) {
        this.writeToOutput("(");
      }
      this.recordSourceMappingStart(funcDecl$$1);
      if (!(funcDecl$$1.isAccessor() && funcDecl$$1.accessorSymbol.isObjectLitField)) {
        this.writeToOutput("function ");
      }
      if (printName) {
        var id$$8 = funcDecl$$1.getNameText();
        if (id$$8 && !funcDecl$$1.isAccessor()) {
          if (funcDecl$$1.name) {
            this.recordSourceMappingStart(funcDecl$$1.name);
          }
          this.writeToOutput(id$$8);
          if (funcDecl$$1.name) {
            this.recordSourceMappingEnd(funcDecl$$1.name);
          }
        }
      }
      this.writeToOutput("(");
      var argsLen = 0;
      var i$$42 = 0;
      var arg$$3;
      var defaultArgs = [];
      if (funcDecl$$1.arguments) {
        var tempContainer = this.setContainer(EmitContainer.Args);
        argsLen = funcDecl$$1.arguments.members.length;
        var printLen = argsLen;
        if (funcDecl$$1.variableArgList) {
          printLen--;
        }
        i$$42 = 0;
        for (;i$$42 < printLen;i$$42++) {
          arg$$3 = funcDecl$$1.arguments.members[i$$42];
          if (arg$$3.init) {
            defaultArgs.push(arg$$3);
          }
          this.emitJavascript(arg$$3, TypeScript$$12.TokenID.OpenParen, false);
          if (i$$42 < printLen - 1) {
            this.writeToOutput(", ");
          }
        }
        this.setContainer(tempContainer);
      }
      this.writeLineToOutput(") {");
      if (funcDecl$$1.isConstructor) {
        this.recordSourceMappingNameStart("constructor");
      } else {
        if (funcDecl$$1.isGetAccessor()) {
          this.recordSourceMappingNameStart("get_" + funcDecl$$1.getNameText());
        } else {
          if (funcDecl$$1.isSetAccessor()) {
            this.recordSourceMappingNameStart("set_" + funcDecl$$1.getNameText());
          } else {
            this.recordSourceMappingNameStart(funcDecl$$1.getNameText());
          }
        }
      }
      this.indenter.increaseIndent();
      i$$42 = 0;
      for (;i$$42 < defaultArgs.length;i$$42++) {
        arg$$3 = defaultArgs[i$$42];
        this.emitIndent();
        this.recordSourceMappingStart(arg$$3);
        this.writeToOutput("if (typeof " + arg$$3.id.actualText + ' === "undefined") { ');
        this.recordSourceMappingStart(arg$$3.id);
        this.writeToOutput(arg$$3.id.actualText);
        this.recordSourceMappingEnd(arg$$3.id);
        this.writeToOutput(" = ");
        this.emitJavascript(arg$$3.init, TypeScript$$12.TokenID.OpenParen, false);
        this.writeLineToOutput("; }");
        this.recordSourceMappingEnd(arg$$3);
      }
      if (funcDecl$$1.isConstructor && funcDecl$$1.classDecl.varFlags & TypeScript$$12.VarFlags.MustCaptureThis) {
        this.writeCaptureThisStatement(funcDecl$$1);
      }
      if (funcDecl$$1.isConstructor && !classPropertiesMustComeAfterSuperCall) {
        if (funcDecl$$1.arguments) {
          argsLen = funcDecl$$1.arguments.members.length;
          i$$42 = 0;
          for (;i$$42 < argsLen;i$$42++) {
            arg$$3 = funcDecl$$1.arguments.members[i$$42];
            if ((arg$$3.varFlags & TypeScript$$12.VarFlags.Property) != TypeScript$$12.VarFlags.None) {
              this.emitIndent();
              this.recordSourceMappingStart(arg$$3);
              this.recordSourceMappingStart(arg$$3.id);
              this.writeToOutput("this." + arg$$3.id.actualText);
              this.recordSourceMappingEnd(arg$$3.id);
              this.writeToOutput(" = ");
              this.recordSourceMappingStart(arg$$3.id);
              this.writeToOutput(arg$$3.id.actualText);
              this.recordSourceMappingEnd(arg$$3.id);
              this.writeLineToOutput(";");
              this.recordSourceMappingEnd(arg$$3);
            }
          }
        }
        if (!TypeScript$$12.hasFlag(funcDecl$$1.fncFlags, TypeScript$$12.FncFlags.ClassMethod)) {
          this.emitConstructorCalls(bases$$1, classDecl$$1);
        }
      }
      if (hasSelfRef) {
        this.writeCaptureThisStatement(funcDecl$$1);
      }
      if (funcDecl$$1.variableArgList) {
        argsLen = funcDecl$$1.arguments.members.length;
        var lastArg = funcDecl$$1.arguments.members[argsLen - 1];
        this.emitIndent();
        this.recordSourceMappingStart(lastArg);
        this.writeToOutput("var ");
        this.recordSourceMappingStart(lastArg.id);
        this.writeToOutput(lastArg.id.actualText);
        this.recordSourceMappingEnd(lastArg.id);
        this.writeLineToOutput(" = [];");
        this.recordSourceMappingEnd(lastArg);
        this.emitIndent();
        this.writeToOutput("for (");
        this.recordSourceMappingStart(lastArg);
        this.writeToOutput("var _i = 0;");
        this.recordSourceMappingEnd(lastArg);
        this.writeToOutput(" ");
        this.recordSourceMappingStart(lastArg);
        this.writeToOutput("_i < (arguments.length - " + (argsLen - 1) + ")");
        this.recordSourceMappingEnd(lastArg);
        this.writeToOutput("; ");
        this.recordSourceMappingStart(lastArg);
        this.writeToOutput("_i++");
        this.recordSourceMappingEnd(lastArg);
        this.writeLineToOutput(") {");
        this.indenter.increaseIndent();
        this.emitIndent();
        this.recordSourceMappingStart(lastArg);
        this.writeToOutput(lastArg.id.actualText + "[_i] = arguments[_i + " + (argsLen - 1) + "];");
        this.recordSourceMappingEnd(lastArg);
        this.writeLineToOutput("");
        this.indenter.decreaseIndent();
        this.emitIndent();
        this.writeLineToOutput("}");
      }
      if (funcDecl$$1.isConstructor && TypeScript$$12.hasFlag(funcDecl$$1.fncFlags, TypeScript$$12.FncFlags.ClassMethod) && !classPropertiesMustComeAfterSuperCall) {
        var nProps = this.thisClassNode.members.members.length;
        i$$42 = 0;
        for (;i$$42 < nProps;i$$42++) {
          if (this.thisClassNode.members.members[i$$42].nodeType == TypeScript$$12.NodeType.VarDecl) {
            var varDecl = this.thisClassNode.members.members[i$$42];
            if (!TypeScript$$12.hasFlag(varDecl.varFlags, TypeScript$$12.VarFlags.Static) && varDecl.init) {
              this.emitIndent();
              this.emitJavascriptVarDecl(varDecl, TypeScript$$12.TokenID.Tilde);
              this.writeLineToOutput("");
            }
          }
        }
      }
      this.emitBareJavascriptStatements(funcDecl$$1.bod, classPropertiesMustComeAfterSuperCall);
      this.indenter.decreaseIndent();
      this.emitIndent();
      this.recordSourceMappingStart(funcDecl$$1.endingToken);
      this.writeToOutput("}");
      this.recordSourceMappingNameEnd();
      this.recordSourceMappingEnd(funcDecl$$1.endingToken);
      this.recordSourceMappingEnd(funcDecl$$1);
      if (shouldParenthesize) {
        this.writeToOutput(")");
      }
      this.recordSourceMappingEnd(funcDecl$$1);
      this.emitParensAndCommentsInPlace(funcDecl$$1, false);
      if (!isMember && !TypeScript$$12.hasFlag(funcDecl$$1.fncFlags, TypeScript$$12.FncFlags.IsFunctionExpression) && (TypeScript$$12.hasFlag(funcDecl$$1.fncFlags, TypeScript$$12.FncFlags.Definition) || funcDecl$$1.isConstructor)) {
        this.writeLineToOutput("");
      } else {
        if (TypeScript$$12.hasFlag(funcDecl$$1.fncFlags, TypeScript$$12.FncFlags.IsFunctionExpression)) {
          if (TypeScript$$12.hasFlag(funcDecl$$1.flags, TypeScript$$12.ASTFlags.ExplicitSemicolon) || TypeScript$$12.hasFlag(funcDecl$$1.flags, TypeScript$$12.ASTFlags.AutomaticSemicolon)) {
            this.writeLineToOutput(";");
          }
        }
      }
    };
    Emitter$$1.prototype.emitJavascriptModule = function(moduleDecl) {
      var modName = moduleDecl.name.actualText;
      if (TypeScript$$12.isTSFile(modName)) {
        moduleDecl.name.setText(modName.substring(0, modName.length - 3));
      } else {
        if (TypeScript$$12.isSTRFile(modName)) {
          moduleDecl.name.setText(modName.substring(0, modName.length - 4));
        }
      }
      if (!TypeScript$$12.hasFlag(moduleDecl.modFlags, TypeScript$$12.ModuleFlags.Ambient)) {
        var isDynamicMod = TypeScript$$12.hasFlag(moduleDecl.modFlags, TypeScript$$12.ModuleFlags.IsDynamic);
        var prevOutFile = this.outfile;
        var prevOutFileName = this.emittingFileName;
        var prevAllSourceMappers = this.allSourceMappers;
        var prevSourceMapper = this.sourceMapper;
        var prevColumn = this.emitState.column;
        var prevLine = this.emitState.line;
        var temp$$10 = this.setContainer(EmitContainer.Module);
        var svModuleName = this.moduleName;
        var isExported = TypeScript$$12.hasFlag(moduleDecl.modFlags, TypeScript$$12.ModuleFlags.Exported);
        this.moduleDeclList[this.moduleDeclList.length] = moduleDecl;
        var isWholeFile = TypeScript$$12.hasFlag(moduleDecl.modFlags, TypeScript$$12.ModuleFlags.IsWholeFile);
        this.moduleName = moduleDecl.name.actualText;
        if (isDynamicMod) {
          var tsModFileName = TypeScript$$12.stripQuotes(moduleDecl.name.actualText);
          var modFilePath = TypeScript$$12.trimModName(tsModFileName) + ".js";
          modFilePath = this.emitOptions.mapOutputFileName(modFilePath, TypeScript$$12.TypeScriptCompiler.mapToJSFileName);
          if (this.emitOptions.ioHost) {
            if (TypeScript$$12.switchToForwardSlashes(modFilePath) != TypeScript$$12.switchToForwardSlashes(this.emittingFileName)) {
              this.emittingFileName = modFilePath;
              var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment;
              this.outfile = this.createFile(this.emittingFileName, useUTF8InOutputfile);
              if (prevSourceMapper != null) {
                this.allSourceMappers = [];
                var sourceMappingFile = this.createFile(this.emittingFileName + TypeScript$$12.SourceMapper.MapFileExtension, false);
                this.setSourceMappings(new TypeScript$$12.SourceMapper(tsModFileName, this.emittingFileName, this.outfile, sourceMappingFile, this.errorReporter));
                this.emitState.column = 0;
                this.emitState.line = 0;
              }
            } else {
              TypeScript$$12.CompilerDiagnostics.assert(this.emitOptions.outputMany, "Cannot have dynamic modules compiling into single file");
            }
          }
          this.setContainer(EmitContainer.DynamicModule);
          this.recordSourceMappingStart(moduleDecl);
          if (TypeScript$$12.moduleGenTarget == TypeScript$$12.ModuleGenTarget.Asynchronous) {
            var dependencyList = '["require", "exports"';
            var importList = "require, exports";
            var importStatement = null;
            var i$$43 = 0;
            for (;i$$43 < moduleDecl.mod.importedModules.length;i$$43++) {
              importStatement = moduleDecl.mod.importedModules[i$$43];
              if (importStatement.id.sym && !importStatement.id.sym.onlyReferencedAsTypeRef) {
                if (i$$43 <= moduleDecl.mod.importedModules.length - 1) {
                  dependencyList += ", ";
                  importList += ", ";
                }
                importList += "__" + importStatement.id.actualText + "__";
                dependencyList += importStatement.firstAliasedModToString();
              }
            }
            i$$43 = 0;
            for (;i$$43 < moduleDecl.amdDependencies.length;i$$43++) {
              dependencyList += ', "' + moduleDecl.amdDependencies[i$$43] + '"';
            }
            dependencyList += "]";
            this.writeLineToOutput("define(" + dependencyList + "," + " function(" + importList + ") {");
          } else {
          }
        } else {
          if (!isExported) {
            this.recordSourceMappingStart(moduleDecl);
            this.writeToOutput("var ");
            this.recordSourceMappingStart(moduleDecl.name);
            this.writeToOutput(this.moduleName);
            this.recordSourceMappingEnd(moduleDecl.name);
            this.writeLineToOutput(";");
            this.recordSourceMappingEnd(moduleDecl);
            this.emitIndent();
          }
          this.writeToOutput("(");
          this.recordSourceMappingStart(moduleDecl);
          this.writeToOutput("function (");
          this.recordSourceMappingStart(moduleDecl.name);
          this.writeToOutput(this.moduleName);
          this.recordSourceMappingEnd(moduleDecl.name);
          this.writeLineToOutput(") {");
        }
        if (!isWholeFile) {
          this.recordSourceMappingNameStart(this.moduleName);
        }
        if (!isDynamicMod || TypeScript$$12.moduleGenTarget == TypeScript$$12.ModuleGenTarget.Asynchronous) {
          this.indenter.increaseIndent();
        }
        if (moduleDecl.modFlags & TypeScript$$12.ModuleFlags.MustCaptureThis) {
          this.writeCaptureThisStatement(moduleDecl);
        }
        this.emitJavascriptList(moduleDecl.members, null, TypeScript$$12.TokenID.Semicolon, true, false, false);
        if (!isDynamicMod || TypeScript$$12.moduleGenTarget == TypeScript$$12.ModuleGenTarget.Asynchronous) {
          this.indenter.decreaseIndent();
        }
        this.emitIndent();
        if (isDynamicMod) {
          if (TypeScript$$12.moduleGenTarget == TypeScript$$12.ModuleGenTarget.Asynchronous) {
            this.writeLineToOutput("})");
          } else {
          }
          if (!isWholeFile) {
            this.recordSourceMappingNameEnd();
          }
          this.recordSourceMappingEnd(moduleDecl);
          if (this.outfile != prevOutFile) {
            this.Close();
            if (prevSourceMapper != null) {
              this.allSourceMappers = prevAllSourceMappers;
              this.sourceMapper = prevSourceMapper;
              this.emitState.column = prevColumn;
              this.emitState.line = prevLine;
            }
            this.outfile = prevOutFile;
            this.emittingFileName = prevOutFileName;
          }
        } else {
          var containingMod = null;
          if (moduleDecl.type && moduleDecl.type.symbol.container && moduleDecl.type.symbol.container.declAST) {
            containingMod = moduleDecl.type.symbol.container.declAST;
          }
          var parentIsDynamic = containingMod && TypeScript$$12.hasFlag(containingMod.modFlags, TypeScript$$12.ModuleFlags.IsDynamic);
          this.recordSourceMappingStart(moduleDecl.endingToken);
          if (temp$$10 == EmitContainer.Prog && isExported) {
            this.writeToOutput("}");
            if (!isWholeFile) {
              this.recordSourceMappingNameEnd();
            }
            this.recordSourceMappingEnd(moduleDecl.endingToken);
            this.writeLineToOutput(")(this." + this.moduleName + " || (this." + this.moduleName + " = {}));");
          } else {
            if (isExported || temp$$10 == EmitContainer.Prog) {
              var dotMod = svModuleName != "" ? (parentIsDynamic ? "exports" : svModuleName) + "." : svModuleName;
              this.writeToOutput("}");
              if (!isWholeFile) {
                this.recordSourceMappingNameEnd();
              }
              this.recordSourceMappingEnd(moduleDecl.endingToken);
              this.writeLineToOutput(")(" + dotMod + this.moduleName + " || (" + dotMod + this.moduleName + " = {}));");
            } else {
              if (!isExported && temp$$10 != EmitContainer.Prog) {
                this.writeToOutput("}");
                if (!isWholeFile) {
                  this.recordSourceMappingNameEnd();
                }
                this.recordSourceMappingEnd(moduleDecl.endingToken);
                this.writeLineToOutput(")(" + this.moduleName + " || (" + this.moduleName + " = {}));");
              } else {
                this.writeToOutput("}");
                if (!isWholeFile) {
                  this.recordSourceMappingNameEnd();
                }
                this.recordSourceMappingEnd(moduleDecl.endingToken);
                this.writeLineToOutput(")();");
              }
            }
          }
          this.recordSourceMappingEnd(moduleDecl);
          if (temp$$10 != EmitContainer.Prog && isExported) {
            this.emitIndent();
            this.recordSourceMappingStart(moduleDecl);
            if (parentIsDynamic) {
              this.writeLineToOutput("var " + this.moduleName + " = exports." + this.moduleName + ";");
            } else {
              this.writeLineToOutput("var " + this.moduleName + " = " + svModuleName + "." + this.moduleName + ";");
            }
            this.recordSourceMappingEnd(moduleDecl);
          }
        }
        this.setContainer(temp$$10);
        this.moduleName = svModuleName;
        this.moduleDeclList.length--;
      }
    };
    Emitter$$1.prototype.emitIndex = function(operand1$$2, operand2$$2) {
      var temp$$11 = this.setInObjectLiteral(false);
      this.emitJavascript(operand1$$2, TypeScript$$12.TokenID.Tilde, false);
      this.writeToOutput("[");
      this.emitJavascriptList(operand2$$2, ", ", TypeScript$$12.TokenID.Comma, false, false, false);
      this.writeToOutput("]");
      this.setInObjectLiteral(temp$$11);
    };
    Emitter$$1.prototype.emitStringLiteral = function(text$$11) {
      this.writeToOutput(text$$11);
    };
    Emitter$$1.prototype.emitJavascriptFunction = function(funcDecl$$2) {
      if (TypeScript$$12.hasFlag(funcDecl$$2.fncFlags, TypeScript$$12.FncFlags.Signature) || funcDecl$$2.isOverload) {
        return;
      }
      var temp$$12;
      var tempFnc = this.thisFnc;
      this.thisFnc = funcDecl$$2;
      if (funcDecl$$2.isConstructor) {
        temp$$12 = this.setContainer(EmitContainer.Constructor);
      } else {
        temp$$12 = this.setContainer(EmitContainer.Function);
      }
      var bases$$2 = null;
      var hasSelfRef$$1 = false;
      var funcName = funcDecl$$2.getNameText();
      if ((this.emitState.inObjectLiteral || !funcDecl$$2.isAccessor()) && (temp$$12 != EmitContainer.Constructor || (funcDecl$$2.fncFlags & TypeScript$$12.FncFlags.Method) == TypeScript$$12.FncFlags.None)) {
        var tempLit = this.setInObjectLiteral(false);
        if (this.thisClassNode) {
          bases$$2 = this.thisClassNode.extendsList;
        }
        hasSelfRef$$1 = Emitter$$1.shouldCaptureThis(funcDecl$$2);
        this.recordSourceMappingStart(funcDecl$$2);
        if (TypeScript$$12.hasFlag(funcDecl$$2.fncFlags, TypeScript$$12.FncFlags.Exported | TypeScript$$12.FncFlags.ClassPropertyMethodExported) && funcDecl$$2.type.symbol.container == this.checker.gloMod && !funcDecl$$2.isConstructor) {
          this.writeToOutput("this." + funcName + " = ");
          this.emitInnerFunction(funcDecl$$2, false, false, bases$$2, hasSelfRef$$1, this.thisClassNode);
        } else {
          this.emitInnerFunction(funcDecl$$2, funcDecl$$2.name && !funcDecl$$2.name.isMissing(), false, bases$$2, hasSelfRef$$1, this.thisClassNode);
        }
        this.setInObjectLiteral(tempLit);
      }
      this.setContainer(temp$$12);
      this.thisFnc = tempFnc;
      if (TypeScript$$12.hasFlag(funcDecl$$2.fncFlags, TypeScript$$12.FncFlags.Definition)) {
        if (TypeScript$$12.hasFlag(funcDecl$$2.fncFlags, TypeScript$$12.FncFlags.Static)) {
          if (this.thisClassNode) {
            if (funcDecl$$2.isAccessor()) {
              this.emitPropertyAccessor(funcDecl$$2, this.thisClassNode.name.actualText, false);
            } else {
              this.emitIndent();
              this.recordSourceMappingStart(funcDecl$$2);
              this.writeLineToOutput(this.thisClassNode.name.actualText + "." + funcName + " = " + funcName + ";");
              this.recordSourceMappingEnd(funcDecl$$2);
            }
          }
        } else {
          if ((this.emitState.container == EmitContainer.Module || this.emitState.container == EmitContainer.DynamicModule) && TypeScript$$12.hasFlag(funcDecl$$2.fncFlags, TypeScript$$12.FncFlags.Exported | TypeScript$$12.FncFlags.ClassPropertyMethodExported)) {
            this.emitIndent();
            var modName$$1 = this.emitState.container == EmitContainer.Module ? this.moduleName : "exports";
            this.recordSourceMappingStart(funcDecl$$2);
            this.writeLineToOutput(modName$$1 + "." + funcName + " = " + funcName + ";");
            this.recordSourceMappingEnd(funcDecl$$2);
          }
        }
      }
    };
    Emitter$$1.prototype.emitAmbientVarDecl = function(varDecl$$1) {
      if (varDecl$$1.init) {
        this.emitParensAndCommentsInPlace(varDecl$$1, true);
        this.recordSourceMappingStart(varDecl$$1);
        this.recordSourceMappingStart(varDecl$$1.id);
        this.writeToOutput(varDecl$$1.id.actualText);
        this.recordSourceMappingEnd(varDecl$$1.id);
        this.writeToOutput(" = ");
        this.emitJavascript(varDecl$$1.init, TypeScript$$12.TokenID.Comma, false);
        this.recordSourceMappingEnd(varDecl$$1);
        this.writeToOutput(";");
        this.emitParensAndCommentsInPlace(varDecl$$1, false);
      }
    };
    Emitter$$1.prototype.varListCount = function() {
      return this.varListCountStack[this.varListCountStack.length - 1];
    };
    Emitter$$1.prototype.emitVarDeclVar = function() {
      if (this.varListCount() >= 0) {
        this.writeToOutput("var ");
        this.setInVarBlock(-this.varListCount());
      }
      return true;
    };
    Emitter$$1.prototype.onEmitVar = function() {
      if (this.varListCount() > 0) {
        this.setInVarBlock(this.varListCount() - 1);
      } else {
        if (this.varListCount() < 0) {
          this.setInVarBlock(this.varListCount() + 1);
        }
      }
    };
    Emitter$$1.prototype.emitJavascriptVarDecl = function(varDecl$$2, tokenId$$39) {
      if ((varDecl$$2.varFlags & TypeScript$$12.VarFlags.Ambient) == TypeScript$$12.VarFlags.Ambient) {
        this.emitAmbientVarDecl(varDecl$$2);
        this.onEmitVar();
      } else {
        var sym$$3 = varDecl$$2.sym;
        var hasInitializer = varDecl$$2.init != null;
        this.emitParensAndCommentsInPlace(varDecl$$2, true);
        this.recordSourceMappingStart(varDecl$$2);
        if (sym$$3 && sym$$3.isMember() && sym$$3.container && sym$$3.container.kind() == TypeScript$$12.SymbolKind.Type) {
          var type$$27 = sym$$3.container.type;
          if (type$$27.isClass() && !TypeScript$$12.hasFlag(sym$$3.flags, TypeScript$$12.SymbolFlags.ModuleMember)) {
            if (this.emitState.container != EmitContainer.Args) {
              if (TypeScript$$12.hasFlag(sym$$3.flags, TypeScript$$12.SymbolFlags.Static)) {
                this.writeToOutput(sym$$3.container.name + ".");
              } else {
                this.writeToOutput("this.");
              }
            }
          } else {
            if (type$$27.hasImplementation()) {
              if (!TypeScript$$12.hasFlag(sym$$3.flags, TypeScript$$12.SymbolFlags.Exported) && (sym$$3.container == this.checker.gloMod || !TypeScript$$12.hasFlag(sym$$3.flags, TypeScript$$12.SymbolFlags.Property))) {
                this.emitVarDeclVar();
              } else {
                if (TypeScript$$12.hasFlag(varDecl$$2.varFlags, TypeScript$$12.VarFlags.LocalStatic)) {
                  this.writeToOutput(".");
                } else {
                  if (this.emitState.container == EmitContainer.DynamicModule) {
                    this.writeToOutput("exports.");
                  } else {
                    this.writeToOutput(this.moduleName + ".");
                  }
                }
              }
            } else {
              if (tokenId$$39 != TypeScript$$12.TokenID.OpenParen) {
                if (TypeScript$$12.hasFlag(sym$$3.flags, TypeScript$$12.SymbolFlags.Exported) && sym$$3.container == this.checker.gloMod) {
                  this.writeToOutput("this.");
                } else {
                  this.emitVarDeclVar();
                }
              }
            }
          }
        } else {
          if (tokenId$$39 != TypeScript$$12.TokenID.OpenParen) {
            this.emitVarDeclVar();
          }
        }
        this.recordSourceMappingStart(varDecl$$2.id);
        this.writeToOutput(varDecl$$2.id.actualText);
        this.recordSourceMappingEnd(varDecl$$2.id);
        if (hasInitializer) {
          this.writeToOutputTrimmable(" = ");
          this.varListCountStack.push(0);
          this.emitJavascript(varDecl$$2.init, TypeScript$$12.TokenID.Comma, false);
          this.varListCountStack.pop();
        }
        this.onEmitVar();
        if (tokenId$$39 != TypeScript$$12.TokenID.OpenParen) {
          if (this.varListCount() < 0) {
            this.writeToOutput(", ");
          } else {
            if (tokenId$$39 != TypeScript$$12.TokenID.For) {
              this.writeToOutputTrimmable(";");
            }
          }
        }
        this.recordSourceMappingEnd(varDecl$$2);
        this.emitParensAndCommentsInPlace(varDecl$$2, false);
      }
    };
    Emitter$$1.prototype.declEnclosed = function(moduleDecl$$1) {
      if (moduleDecl$$1 == null) {
        return true;
      }
      var i$$44 = 0;
      var len$$10 = this.moduleDeclList.length;
      for (;i$$44 < len$$10;i$$44++) {
        if (this.moduleDeclList[i$$44] == moduleDecl$$1) {
          return true;
        }
      }
      return false;
    };
    Emitter$$1.prototype.emitJavascriptName = function(name$$39, addThis) {
      var sym$$4 = name$$39.sym;
      this.emitParensAndCommentsInPlace(name$$39, true);
      this.recordSourceMappingStart(name$$39);
      if (!name$$39.isMissing()) {
        if (addThis && this.emitState.container != EmitContainer.Args && sym$$4) {
          if (sym$$4.container && sym$$4.container.name != TypeScript$$12.globalId) {
            if (TypeScript$$12.hasFlag(sym$$4.flags, TypeScript$$12.SymbolFlags.Static) && TypeScript$$12.hasFlag(sym$$4.flags, TypeScript$$12.SymbolFlags.Property)) {
              if (sym$$4.declModule && TypeScript$$12.hasFlag(sym$$4.declModule.modFlags, TypeScript$$12.ModuleFlags.IsDynamic)) {
                this.writeToOutput("exports.");
              } else {
                this.writeToOutput(sym$$4.container.name + ".");
              }
            } else {
              if (sym$$4.kind() == TypeScript$$12.SymbolKind.Field) {
                var fieldSym = sym$$4;
                if (TypeScript$$12.hasFlag(fieldSym.flags, TypeScript$$12.SymbolFlags.ModuleMember)) {
                  if (sym$$4.container != this.checker.gloMod && (TypeScript$$12.hasFlag(sym$$4.flags, TypeScript$$12.SymbolFlags.Property) || TypeScript$$12.hasFlag(sym$$4.flags, TypeScript$$12.SymbolFlags.Exported))) {
                    if (TypeScript$$12.hasFlag(sym$$4.declModule.modFlags, TypeScript$$12.ModuleFlags.IsDynamic)) {
                      this.writeToOutput("exports.");
                    } else {
                      this.writeToOutput(sym$$4.container.name + ".");
                    }
                  }
                } else {
                  if (sym$$4.isInstanceProperty()) {
                    this.emitThis();
                    this.writeToOutput(".");
                  }
                }
              } else {
                if (sym$$4.kind() == TypeScript$$12.SymbolKind.Type) {
                  if (sym$$4.isInstanceProperty()) {
                    var typeSym = sym$$4;
                    var type$$28 = typeSym.type;
                    if (type$$28.call && !TypeScript$$12.hasFlag(sym$$4.flags, TypeScript$$12.SymbolFlags.ModuleMember)) {
                      this.emitThis();
                      this.writeToOutput(".");
                    }
                  } else {
                    if (sym$$4.unitIndex != this.checker.locationInfo.unitIndex || !this.declEnclosed(sym$$4.declModule)) {
                      this.writeToOutput(sym$$4.container.name + ".");
                    }
                  }
                }
              }
            }
          } else {
            if (sym$$4.container == this.checker.gloMod && TypeScript$$12.hasFlag(sym$$4.flags, TypeScript$$12.SymbolFlags.Exported) && !TypeScript$$12.hasFlag(sym$$4.flags, TypeScript$$12.SymbolFlags.Ambient) && !((sym$$4.isType() || sym$$4.isMember()) && sym$$4.declModule && TypeScript$$12.hasFlag(sym$$4.declModule.modFlags, TypeScript$$12.ModuleFlags.Ambient)) && this.emitState.container == EmitContainer.Prog && sym$$4.declAST.nodeType != TypeScript$$12.NodeType.FuncDecl) {
              this.writeToOutput("this.");
            }
          }
        }
        if (sym$$4 && sym$$4.declAST && sym$$4.declAST.nodeType == TypeScript$$12.NodeType.ModuleDeclaration && TypeScript$$12.hasFlag(sym$$4.declAST.modFlags, TypeScript$$12.ModuleFlags.IsDynamic)) {
          var moduleDecl$$2 = sym$$4.declAST;
          if (TypeScript$$12.moduleGenTarget == TypeScript$$12.ModuleGenTarget.Asynchronous) {
            this.writeLineToOutput("__" + this.modAliasId + "__;");
          } else {
            var modPath$$1 = name$$39.actualText;
            var isAmbient = moduleDecl$$2.mod.symbol.declAST && TypeScript$$12.hasFlag(moduleDecl$$2.mod.symbol.declAST.modFlags, TypeScript$$12.ModuleFlags.Ambient);
            modPath$$1 = isAmbient ? modPath$$1 : this.firstModAlias ? this.firstModAlias : TypeScript$$12.quoteBaseName(modPath$$1);
            modPath$$1 = isAmbient ? modPath$$1 : !TypeScript$$12.isRelative(TypeScript$$12.stripQuotes(modPath$$1)) ? TypeScript$$12.quoteStr("./" + TypeScript$$12.stripQuotes(modPath$$1)) : modPath$$1;
            this.writeToOutput("require(" + modPath$$1 + ")");
          }
        } else {
          this.writeToOutput(name$$39.actualText);
        }
      }
      this.recordSourceMappingEnd(name$$39);
      this.emitParensAndCommentsInPlace(name$$39, false);
    };
    Emitter$$1.prototype.emitJavascriptStatements = function(stmts$$1, emitEmptyBod) {
      if (stmts$$1) {
        if (stmts$$1.nodeType != TypeScript$$12.NodeType.Block) {
          var hasContents = stmts$$1 && (stmts$$1.nodeType != TypeScript$$12.NodeType.List || stmts$$1.members.length > 0);
          if (emitEmptyBod || hasContents) {
            var hasOnlyBlockStatement = stmts$$1.nodeType == TypeScript$$12.NodeType.Block || stmts$$1.nodeType == TypeScript$$12.NodeType.List && stmts$$1.members.length == 1 && stmts$$1.members[0].nodeType == TypeScript$$12.NodeType.Block;
            this.recordSourceMappingStart(stmts$$1);
            if (!hasOnlyBlockStatement) {
              this.writeLineToOutput(" {");
              this.indenter.increaseIndent();
            }
            this.emitJavascriptList(stmts$$1, null, TypeScript$$12.TokenID.Semicolon, true, false, false);
            if (!hasOnlyBlockStatement) {
              this.writeLineToOutput("");
              this.indenter.decreaseIndent();
              this.emitIndent();
              this.writeToOutput("}");
            }
            this.recordSourceMappingEnd(stmts$$1);
          }
        } else {
          this.emitJavascript(stmts$$1, TypeScript$$12.TokenID.Semicolon, true);
        }
      } else {
        if (emitEmptyBod) {
          this.writeToOutput("{ }");
        }
      }
    };
    Emitter$$1.prototype.emitBareJavascriptStatements = function(stmts$$2, emitClassPropertiesAfterSuperCall) {
      if (typeof emitClassPropertiesAfterSuperCall === "undefined") {
        emitClassPropertiesAfterSuperCall = false;
      }
      if (stmts$$2.nodeType != TypeScript$$12.NodeType.Block) {
        if (stmts$$2.nodeType == TypeScript$$12.NodeType.List) {
          var stmtList = stmts$$2;
          if (stmtList.members.length == 2 && stmtList.members[0].nodeType == TypeScript$$12.NodeType.Block && stmtList.members[1].nodeType == TypeScript$$12.NodeType.EndCode) {
            this.emitJavascript(stmtList.members[0], TypeScript$$12.TokenID.Semicolon, true);
            this.writeLineToOutput("");
          } else {
            this.emitJavascriptList(stmts$$2, null, TypeScript$$12.TokenID.Semicolon, true, false, emitClassPropertiesAfterSuperCall);
          }
        } else {
          this.emitJavascript(stmts$$2, TypeScript$$12.TokenID.Semicolon, true);
        }
      } else {
        this.emitJavascript(stmts$$2, TypeScript$$12.TokenID.Semicolon, true);
      }
    };
    Emitter$$1.prototype.recordSourceMappingNameStart = function(name$$40) {
      if (this.sourceMapper) {
        var finalName = name$$40;
        if (!name$$40) {
          finalName = "";
        } else {
          if (this.sourceMapper.currentNameIndex.length > 0) {
            finalName = this.sourceMapper.names[this.sourceMapper.currentNameIndex.length - 1] + "." + name$$40;
          }
        }
        this.sourceMapper.names.push(finalName);
        this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);
      }
    };
    Emitter$$1.prototype.recordSourceMappingNameEnd = function() {
      if (this.sourceMapper) {
        this.sourceMapper.currentNameIndex.pop();
      }
    };
    Emitter$$1.prototype.recordSourceMappingStart = function(ast$$16) {
      if (this.sourceMapper && TypeScript$$12.isValidAstNode(ast$$16)) {
        var lineCol$$1 = {line:-1, col:-1};
        var sourceMapping$$1 = new TypeScript$$12.SourceMapping;
        sourceMapping$$1.start.emittedColumn = this.emitState.column;
        sourceMapping$$1.start.emittedLine = this.emitState.line;
        TypeScript$$12.getSourceLineColFromMap(lineCol$$1, ast$$16.minChar, this.checker.locationInfo.lineMap);
        sourceMapping$$1.start.sourceColumn = lineCol$$1.col;
        sourceMapping$$1.start.sourceLine = lineCol$$1.line;
        TypeScript$$12.getSourceLineColFromMap(lineCol$$1, ast$$16.limChar, this.checker.locationInfo.lineMap);
        sourceMapping$$1.end.sourceColumn = lineCol$$1.col;
        sourceMapping$$1.end.sourceLine = lineCol$$1.line;
        if (this.sourceMapper.currentNameIndex.length > 0) {
          sourceMapping$$1.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];
        }
        var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];
        siblings.push(sourceMapping$$1);
        this.sourceMapper.currentMappings.push(sourceMapping$$1.childMappings);
      }
    };
    Emitter$$1.prototype.recordSourceMappingEnd = function(ast$$17) {
      if (this.sourceMapper && TypeScript$$12.isValidAstNode(ast$$17)) {
        this.sourceMapper.currentMappings.pop();
        var siblings$$1 = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];
        var sourceMapping$$2 = siblings$$1[siblings$$1.length - 1];
        sourceMapping$$2.end.emittedColumn = this.emitState.column;
        sourceMapping$$2.end.emittedLine = this.emitState.line;
      }
    };
    Emitter$$1.prototype.Close = function() {
      if (this.sourceMapper != null) {
        TypeScript$$12.SourceMapper.EmitSourceMapping(this.allSourceMappers);
      }
      try {
        this.outfile.Close();
      } catch (ex$$1) {
        this.errorReporter.emitterError(null, ex$$1.message);
      }
    };
    Emitter$$1.prototype.emitJavascriptList = function(ast$$18, delimiter, tokenId$$40, startLine$$39, onlyStatics, emitClassPropertiesAfterSuperCall$$1, emitPrologue, requiresExtendsBlock) {
      if (typeof emitClassPropertiesAfterSuperCall$$1 === "undefined") {
        emitClassPropertiesAfterSuperCall$$1 = false;
      }
      if (typeof emitPrologue === "undefined") {
        emitPrologue = false;
      }
      if (ast$$18 == null) {
        return;
      } else {
        if (ast$$18.nodeType != TypeScript$$12.NodeType.List) {
          this.emitPrologue(emitPrologue);
          this.emitJavascript(ast$$18, tokenId$$40, startLine$$39);
        } else {
          var list$$1 = ast$$18;
          if (list$$1.members.length == 0) {
            return;
          }
          this.emitParensAndCommentsInPlace(ast$$18, true);
          var len$$11 = list$$1.members.length;
          var i$$45 = 0;
          for (;i$$45 < len$$11;i$$45++) {
            if (emitPrologue) {
              if (i$$45 == 1 || !TypeScript$$12.hasFlag(list$$1.flags, TypeScript$$12.ASTFlags.StrictMode)) {
                this.emitPrologue(requiresExtendsBlock);
                emitPrologue = false;
              }
            }
            if (i$$45 == 1 && emitClassPropertiesAfterSuperCall$$1) {
              var constructorDecl = this.thisClassNode.constructorDecl;
              if (constructorDecl && constructorDecl.arguments) {
                var argsLen$$1 = constructorDecl.arguments.members.length;
                var iArg = 0;
                for (;iArg < argsLen$$1;iArg++) {
                  var arg$$4 = constructorDecl.arguments.members[iArg];
                  if ((arg$$4.varFlags & TypeScript$$12.VarFlags.Property) != TypeScript$$12.VarFlags.None) {
                    this.emitIndent();
                    this.recordSourceMappingStart(arg$$4);
                    this.recordSourceMappingStart(arg$$4.id);
                    this.writeToOutput("this." + arg$$4.id.actualText);
                    this.recordSourceMappingEnd(arg$$4.id);
                    this.writeToOutput(" = ");
                    this.recordSourceMappingStart(arg$$4.id);
                    this.writeToOutput(arg$$4.id.actualText);
                    this.recordSourceMappingEnd(arg$$4.id);
                    this.writeLineToOutput(";");
                    this.recordSourceMappingEnd(arg$$4);
                  }
                }
              }
              var nProps$$1 = this.thisClassNode.members.members.length;
              var iMember = 0;
              for (;iMember < nProps$$1;iMember++) {
                if (this.thisClassNode.members.members[iMember].nodeType == TypeScript$$12.NodeType.VarDecl) {
                  var varDecl$$3 = this.thisClassNode.members.members[iMember];
                  if (!TypeScript$$12.hasFlag(varDecl$$3.varFlags, TypeScript$$12.VarFlags.Static) && varDecl$$3.init) {
                    this.emitIndent();
                    this.emitJavascriptVarDecl(varDecl$$3, TypeScript$$12.TokenID.Tilde);
                    this.writeLineToOutput("");
                  }
                }
              }
            }
            var emitNode = list$$1.members[i$$45];
            var isStaticDecl = emitNode.nodeType == TypeScript$$12.NodeType.FuncDecl && TypeScript$$12.hasFlag(emitNode.fncFlags, TypeScript$$12.FncFlags.Static) || emitNode.nodeType == TypeScript$$12.NodeType.VarDecl && TypeScript$$12.hasFlag(emitNode.varFlags, TypeScript$$12.VarFlags.Static);
            if (onlyStatics ? !isStaticDecl : isStaticDecl) {
              continue;
            }
            this.emitJavascript(emitNode, tokenId$$40, startLine$$39);
            if (delimiter && i$$45 < len$$11 - 1) {
              if (startLine$$39) {
                this.writeLineToOutput(delimiter);
              } else {
                this.writeToOutput(delimiter);
              }
            } else {
              if (startLine$$39 && emitNode.nodeType != TypeScript$$12.NodeType.ModuleDeclaration && emitNode.nodeType != TypeScript$$12.NodeType.InterfaceDeclaration && (!(emitNode.nodeType == TypeScript$$12.NodeType.VarDecl && (emitNode.varFlags & TypeScript$$12.VarFlags.Ambient) == TypeScript$$12.VarFlags.Ambient && emitNode.init == null) && this.varListCount() >= 0) && (emitNode.nodeType != TypeScript$$12.NodeType.Block || emitNode.isStatementBlock) && emitNode.nodeType != TypeScript$$12.NodeType.EndCode && 
              emitNode.nodeType != TypeScript$$12.NodeType.FuncDecl) {
                this.writeLineToOutput("");
              }
            }
          }
          this.emitParensAndCommentsInPlace(ast$$18, false);
        }
      }
    };
    Emitter$$1.prototype.emitJavascript = function(ast$$19, tokenId$$41, startLine$$40) {
      if (ast$$19 == null) {
        return;
      }
      if (startLine$$40 && this.indenter.indentAmt > 0 && ast$$19.nodeType != TypeScript$$12.NodeType.List && ast$$19.nodeType != TypeScript$$12.NodeType.Block) {
        if (ast$$19.nodeType != TypeScript$$12.NodeType.InterfaceDeclaration && (!(ast$$19.nodeType == TypeScript$$12.NodeType.VarDecl && (ast$$19.varFlags & TypeScript$$12.VarFlags.Ambient) == TypeScript$$12.VarFlags.Ambient && ast$$19.init == null) && this.varListCount() >= 0) && ast$$19.nodeType != TypeScript$$12.NodeType.EndCode && (ast$$19.nodeType != TypeScript$$12.NodeType.FuncDecl || this.emitState.container != EmitContainer.Constructor)) {
          this.emitIndent();
        }
      }
      ast$$19.emit(this, tokenId$$41, startLine$$40);
      if (tokenId$$41 == TypeScript$$12.TokenID.Semicolon && ast$$19.nodeType < TypeScript$$12.NodeType.GeneralNode) {
        this.writeToOutput(";");
      }
    };
    Emitter$$1.prototype.emitPropertyAccessor = function(funcDecl$$3, className, isProto) {
      if (!funcDecl$$3.accessorSymbol.hasBeenEmitted) {
        var accessorSymbol = funcDecl$$3.accessorSymbol;
        this.emitIndent();
        this.recordSourceMappingStart(funcDecl$$3);
        this.writeLineToOutput("Object.defineProperty(" + className + (isProto ? '.prototype, "' : ', "') + funcDecl$$3.name.actualText + '"' + ", {");
        this.indenter.increaseIndent();
        if (accessorSymbol.getter) {
          var getter = accessorSymbol.getter.declAST;
          this.emitIndent();
          this.recordSourceMappingStart(getter);
          this.writeToOutput("get: ");
          this.emitInnerFunction(getter, false, isProto, null, Emitter$$1.shouldCaptureThis(getter), null);
          this.writeLineToOutput(",");
        }
        if (accessorSymbol.setter) {
          var setter = accessorSymbol.setter.declAST;
          this.emitIndent();
          this.recordSourceMappingStart(setter);
          this.writeToOutput("set: ");
          this.emitInnerFunction(setter, false, isProto, null, Emitter$$1.shouldCaptureThis(setter), null);
          this.writeLineToOutput(",");
        }
        this.emitIndent();
        this.writeLineToOutput("enumerable: true,");
        this.emitIndent();
        this.writeLineToOutput("configurable: true");
        this.indenter.decreaseIndent();
        this.emitIndent();
        this.writeLineToOutput("});");
        this.recordSourceMappingEnd(funcDecl$$3);
        accessorSymbol.hasBeenEmitted = true;
      }
    };
    Emitter$$1.prototype.emitPrototypeMember = function(member, className$$1) {
      if (member.nodeType == TypeScript$$12.NodeType.FuncDecl) {
        var funcDecl$$4 = member;
        if (funcDecl$$4.isAccessor()) {
          this.emitPropertyAccessor(funcDecl$$4, className$$1, true);
        } else {
          this.emitIndent();
          this.recordSourceMappingStart(funcDecl$$4);
          this.writeToOutput(className$$1 + ".prototype." + funcDecl$$4.getNameText() + " = ");
          this.emitInnerFunction(funcDecl$$4, false, true, null, Emitter$$1.shouldCaptureThis(funcDecl$$4), null);
          this.writeLineToOutput(";");
        }
      } else {
        if (member.nodeType == TypeScript$$12.NodeType.VarDecl) {
          var varDecl$$4 = member;
          if (varDecl$$4.init) {
            this.emitIndent();
            this.recordSourceMappingStart(varDecl$$4);
            this.recordSourceMappingStart(varDecl$$4.id);
            this.writeToOutput(className$$1 + ".prototype." + varDecl$$4.id.actualText);
            this.recordSourceMappingEnd(varDecl$$4.id);
            this.writeToOutput(" = ");
            this.emitJavascript(varDecl$$4.init, TypeScript$$12.TokenID.Equals, false);
            this.recordSourceMappingEnd(varDecl$$4);
            this.writeLineToOutput(";");
          }
        }
      }
    };
    Emitter$$1.prototype.emitAddBaseMethods = function(className$$2, base$$1, classDecl$$2) {
      if (base$$1.members) {
        var baseSymbol$$1 = base$$1.symbol;
        var baseName$$1 = baseSymbol$$1.name;
        if (baseSymbol$$1.declModule != classDecl$$2.type.symbol.declModule) {
          baseName$$1 = baseSymbol$$1.fullName();
        }
        base$$1.members.allMembers.map(function(key$$32, s$$13, c$$6) {
          var sym$$5 = s$$13;
          if (sym$$5.kind() == TypeScript$$12.SymbolKind.Type && sym$$5.type.call) {
            this.recordSourceMappingStart(sym$$5.declAST);
            this.writeLineToOutput(className$$2 + ".prototype." + sym$$5.name + " = " + baseName$$1 + ".prototype." + sym$$5.name + ";");
            this.recordSourceMappingEnd(sym$$5.declAST);
          }
        }, null);
      }
      if (base$$1.extendsList) {
        var i$$46 = 0;
        var len$$12 = base$$1.extendsList.length;
        for (;i$$46 < len$$12;i$$46++) {
          this.emitAddBaseMethods(className$$2, base$$1.extendsList[i$$46], classDecl$$2);
        }
      }
    };
    Emitter$$1.prototype.emitJavascriptClass = function(classDecl$$3) {
      if (!TypeScript$$12.hasFlag(classDecl$$3.varFlags, TypeScript$$12.VarFlags.Ambient)) {
        var svClassNode = this.thisClassNode;
        var i$$47 = 0;
        this.thisClassNode = classDecl$$3;
        var className$$3 = classDecl$$3.name.actualText;
        this.emitParensAndCommentsInPlace(classDecl$$3, true);
        var temp$$13 = this.setContainer(EmitContainer.Class);
        this.recordSourceMappingStart(classDecl$$3);
        if (TypeScript$$12.hasFlag(classDecl$$3.varFlags, TypeScript$$12.VarFlags.Exported) && classDecl$$3.type.symbol.container == this.checker.gloMod) {
          this.writeToOutput("this." + className$$3);
        } else {
          this.writeToOutput("var " + className$$3);
        }
        var hasBaseClass = classDecl$$3.extendsList && classDecl$$3.extendsList.members.length;
        var baseNameDecl = null;
        var baseName$$2 = null;
        if (hasBaseClass) {
          this.writeLineToOutput(" = (function (_super) {");
        } else {
          this.writeLineToOutput(" = (function () {");
        }
        this.recordSourceMappingNameStart(className$$3);
        this.indenter.increaseIndent();
        if (hasBaseClass) {
          baseNameDecl = classDecl$$3.extendsList.members[0];
          baseName$$2 = baseNameDecl.nodeType == TypeScript$$12.NodeType.Call ? baseNameDecl.target : baseNameDecl;
          this.emitIndent();
          this.writeLineToOutput("__extends(" + className$$3 + ", _super);");
        }
        this.emitIndent();
        var constrDecl = classDecl$$3.constructorDecl;
        if (constrDecl) {
          this.emitJavascript(classDecl$$3.constructorDecl, TypeScript$$12.TokenID.OpenParen, false);
        } else {
          var wroteProps = 0;
          this.recordSourceMappingStart(classDecl$$3);
          this.indenter.increaseIndent();
          this.writeToOutput("function " + classDecl$$3.name.actualText + "() {");
          this.recordSourceMappingNameStart("constructor");
          if (hasBaseClass) {
            this.writeLineToOutput("");
            this.emitIndent();
            this.writeLineToOutput("_super.apply(this, arguments);");
            wroteProps++;
          }
          if (classDecl$$3.varFlags & TypeScript$$12.VarFlags.MustCaptureThis) {
            this.writeCaptureThisStatement(classDecl$$3);
          }
          var members$$6 = this.thisClassNode.members.members;
          i$$47 = 0;
          for (;i$$47 < members$$6.length;i$$47++) {
            if (members$$6[i$$47].nodeType == TypeScript$$12.NodeType.VarDecl) {
              var varDecl$$5 = members$$6[i$$47];
              if (!TypeScript$$12.hasFlag(varDecl$$5.varFlags, TypeScript$$12.VarFlags.Static) && varDecl$$5.init) {
                this.writeLineToOutput("");
                this.emitIndent();
                this.emitJavascriptVarDecl(varDecl$$5, TypeScript$$12.TokenID.Tilde);
                wroteProps++;
              }
            }
          }
          if (wroteProps) {
            this.writeLineToOutput("");
            this.indenter.decreaseIndent();
            this.emitIndent();
            this.writeLineToOutput("}");
          } else {
            this.writeLineToOutput(" }");
            this.indenter.decreaseIndent();
          }
          this.recordSourceMappingNameEnd();
          this.recordSourceMappingEnd(classDecl$$3);
        }
        var membersLen = classDecl$$3.members.members.length;
        var j$$3 = 0;
        for (;j$$3 < membersLen;j$$3++) {
          var memberDecl = classDecl$$3.members.members[j$$3];
          if (memberDecl.nodeType == TypeScript$$12.NodeType.FuncDecl) {
            var fn$$6 = memberDecl;
            if (TypeScript$$12.hasFlag(fn$$6.fncFlags, TypeScript$$12.FncFlags.Method) && !fn$$6.isSignature()) {
              if (!TypeScript$$12.hasFlag(fn$$6.fncFlags, TypeScript$$12.FncFlags.Static)) {
                this.emitPrototypeMember(fn$$6, className$$3);
              } else {
                if (fn$$6.isAccessor()) {
                  this.emitPropertyAccessor(fn$$6, this.thisClassNode.name.actualText, false);
                } else {
                  this.emitIndent();
                  this.recordSourceMappingStart(fn$$6);
                  this.writeToOutput(classDecl$$3.name.actualText + "." + fn$$6.name.actualText + " = ");
                  this.emitInnerFunction(fn$$6, fn$$6.name && !fn$$6.name.isMissing(), true, null, Emitter$$1.shouldCaptureThis(fn$$6), null);
                  this.writeLineToOutput(";");
                }
              }
            }
          } else {
            if (memberDecl.nodeType == TypeScript$$12.NodeType.VarDecl) {
              varDecl$$5 = memberDecl;
              if (TypeScript$$12.hasFlag(varDecl$$5.varFlags, TypeScript$$12.VarFlags.Static)) {
                if (varDecl$$5.init) {
                  this.emitIndent();
                  this.recordSourceMappingStart(varDecl$$5);
                  this.writeToOutput(classDecl$$3.name.actualText + "." + varDecl$$5.id.actualText + " = ");
                  this.emitJavascript(varDecl$$5.init, TypeScript$$12.TokenID.Equals, false);
                  this.writeLineToOutput(";");
                  this.recordSourceMappingEnd(varDecl$$5);
                }
              }
            } else {
              throw Error("We want to catch this");
            }
          }
        }
        this.emitIndent();
        this.recordSourceMappingStart(classDecl$$3.endingToken);
        this.writeLineToOutput("return " + className$$3 + ";");
        this.recordSourceMappingEnd(classDecl$$3.endingToken);
        this.indenter.decreaseIndent();
        this.emitIndent();
        this.recordSourceMappingStart(classDecl$$3.endingToken);
        this.writeToOutput("}");
        this.recordSourceMappingNameEnd();
        this.recordSourceMappingEnd(classDecl$$3.endingToken);
        this.recordSourceMappingStart(classDecl$$3);
        this.writeToOutput(")(");
        if (hasBaseClass) {
          this.emitJavascript(baseName$$2, TypeScript$$12.TokenID.Tilde, false);
        }
        this.writeToOutput(");");
        this.recordSourceMappingEnd(classDecl$$3);
        if ((temp$$13 == EmitContainer.Module || temp$$13 == EmitContainer.DynamicModule) && TypeScript$$12.hasFlag(classDecl$$3.varFlags, TypeScript$$12.VarFlags.Exported)) {
          this.writeLineToOutput("");
          this.emitIndent();
          var modName$$2 = temp$$13 == EmitContainer.Module ? this.moduleName : "exports";
          this.recordSourceMappingStart(classDecl$$3);
          this.writeToOutput(modName$$2 + "." + className$$3 + " = " + className$$3 + ";");
          this.recordSourceMappingEnd(classDecl$$3);
        }
        this.emitIndent();
        this.recordSourceMappingEnd(classDecl$$3);
        this.emitParensAndCommentsInPlace(classDecl$$3, false);
        this.setContainer(temp$$13);
        this.thisClassNode = svClassNode;
      }
    };
    Emitter$$1.prototype.emitPrologue = function(reqInherits) {
      if (!this.prologueEmitted) {
        if (reqInherits) {
          this.prologueEmitted = true;
          this.writeLineToOutput("var __extends = this.__extends || function (d, b) {");
          this.writeLineToOutput("    function __() { this.constructor = d; }");
          this.writeLineToOutput("    __.prototype = b.prototype;");
          this.writeLineToOutput("    d.prototype = new __();");
          this.writeLineToOutput("};");
        }
        if (this.checker.mustCaptureGlobalThis) {
          this.prologueEmitted = true;
          this.writeLineToOutput(this.captureThisStmtString);
        }
      }
    };
    Emitter$$1.prototype.emitSuperReference = function() {
      this.writeToOutput("_super.prototype");
    };
    Emitter$$1.prototype.emitSuperCall = function(callEx) {
      if (callEx.target.nodeType == TypeScript$$12.NodeType.Dot) {
        var dotNode = callEx.target;
        if (dotNode.operand1.nodeType == TypeScript$$12.NodeType.Super) {
          this.emitJavascript(dotNode, TypeScript$$12.TokenID.OpenParen, false);
          this.writeToOutput(".call(");
          this.emitThis();
          if (callEx.arguments && callEx.arguments.members.length > 0) {
            this.writeToOutput(", ");
            this.emitJavascriptList(callEx.arguments, ", ", TypeScript$$12.TokenID.Comma, false, false, false);
          }
          this.writeToOutput(")");
          return true;
        }
      }
      return false;
    };
    Emitter$$1.prototype.emitThis = function() {
      if (this.thisFnc && !this.thisFnc.isMethod() && !this.thisFnc.isConstructor) {
        this.writeToOutput("_this");
      } else {
        this.writeToOutput("this");
      }
    };
    Emitter$$1.shouldCaptureThis = function shouldCaptureThis(func$$3) {
      return func$$3.hasSelfReference() || func$$3.hasSuperReferenceInFatArrowFunction();
    };
    Emitter$$1.prototype.createFile = function(fileName$$2, useUTF8) {
      try {
        return this.emitOptions.ioHost.createFile(fileName$$2, useUTF8);
      } catch (ex$$2) {
        this.errorReporter.emitterError(null, ex$$2.message);
      }
    };
    return Emitter$$1;
  }();
  TypeScript$$12.Emitter = Emitter;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$13) {
  var ErrorReporter = function() {
    function ErrorReporter$$1(outfile$$2) {
      this.outfile = outfile$$2;
      this.parser = null;
      this.checker = null;
      this.lineCol = {line:0, col:0};
      this.emitAsComments = true;
      this.hasErrors = false;
      this.pushToErrorSink = false;
      this.errorSink = [];
    }
    ErrorReporter$$1.prototype.getCapturedErrors = function() {
      return this.errorSink;
    };
    ErrorReporter$$1.prototype.freeCapturedErrors = function() {
      this.errorSink = [];
    };
    ErrorReporter$$1.prototype.captureError = function(emsg) {
      this.errorSink[this.errorSink.length] = emsg;
    };
    ErrorReporter$$1.prototype.setErrOut = function(outerr$$1) {
      this.outfile = outerr$$1;
      this.emitAsComments = false;
    };
    ErrorReporter$$1.prototype.emitPrefix = function() {
      if (this.emitAsComments) {
        this.outfile.Write("// ");
      }
      this.outfile.Write(this.checker.locationInfo.filename + "(" + this.lineCol.line + "," + this.lineCol.col + "): ");
    };
    ErrorReporter$$1.prototype.writePrefix = function(ast$$20) {
      if (ast$$20) {
        this.setError(ast$$20);
      } else {
        this.lineCol.line = 0;
        this.lineCol.col = 0;
      }
      this.emitPrefix();
    };
    ErrorReporter$$1.prototype.writePrefixFromSym = function(symbol$$3) {
      if (symbol$$3 && this.checker.locationInfo.lineMap) {
        TypeScript$$13.getSourceLineColFromMap(this.lineCol, symbol$$3.location, this.checker.locationInfo.lineMap);
      } else {
        this.lineCol.line = -1;
        this.lineCol.col = -1;
      }
      this.emitPrefix();
    };
    ErrorReporter$$1.prototype.setError = function(ast$$21) {
      if (ast$$21) {
        ast$$21.flags |= TypeScript$$13.ASTFlags.Error;
        if (this.checker.locationInfo.lineMap) {
          TypeScript$$13.getSourceLineColFromMap(this.lineCol, ast$$21.minChar, this.checker.locationInfo.lineMap);
        }
      }
    };
    ErrorReporter$$1.prototype.reportError = function(ast$$22, message$$10) {
      if (this.pushToErrorSink) {
        this.captureError(message$$10);
        return;
      }
      this.hasErrors = true;
      if (ast$$22 && this.parser.errorRecovery && this.parser.errorCallback) {
        var len$$13 = ast$$22.limChar - ast$$22.minChar;
        this.parser.errorCallback(ast$$22.minChar, len$$13, message$$10, this.checker.locationInfo.unitIndex);
      } else {
        this.writePrefix(ast$$22);
        this.outfile.WriteLine(message$$10);
      }
    };
    ErrorReporter$$1.prototype.reportErrorFromSym = function(symbol$$4, message$$11) {
      if (this.pushToErrorSink) {
        this.captureError(message$$11);
        return;
      }
      this.hasErrors = true;
      if (this.parser.errorRecovery && this.parser.errorCallback) {
        this.parser.errorCallback(symbol$$4.location, symbol$$4.length, message$$11, this.checker.locationInfo.unitIndex);
      } else {
        this.writePrefixFromSym(symbol$$4);
        this.outfile.WriteLine(message$$11);
      }
    };
    ErrorReporter$$1.prototype.emitterError = function(ast$$23, message$$12) {
      this.reportError(ast$$23, message$$12);
      throw Error("EmitError");
    };
    ErrorReporter$$1.prototype.duplicateIdentifier = function(ast$$24, name$$41) {
      this.reportError(ast$$24, "Duplicate identifier '" + name$$41 + "'");
    };
    ErrorReporter$$1.prototype.showRef = function(ast$$25, text$$12, symbol$$5) {
      var defLineCol = {line:-1, col:-1};
      this.parser.getSourceLineCol(defLineCol, symbol$$5.location);
      this.reportError(ast$$25, "symbol " + text$$12 + " defined at (" + defLineCol.line + "," + defLineCol.col + ")");
    };
    ErrorReporter$$1.prototype.unresolvedSymbol = function(ast$$26, name$$42) {
      this.reportError(ast$$26, "The name '" + name$$42 + "' does not exist in the current scope");
    };
    ErrorReporter$$1.prototype.symbolDoesNotReferToAValue = function(ast$$27, name$$43) {
      this.reportError(ast$$27, "The name '" + name$$43 + "' does not refer to a value");
    };
    ErrorReporter$$1.prototype.styleError = function(ast$$28, msg$$1) {
      var bkThrow = this.pushToErrorSink;
      this.pushToErrorSink = false;
      this.reportError(ast$$28, "STYLE: " + msg$$1);
      this.pushToErrorSink = bkThrow;
    };
    ErrorReporter$$1.prototype.simpleError = function(ast$$29, msg$$2) {
      this.reportError(ast$$29, msg$$2);
    };
    ErrorReporter$$1.prototype.simpleErrorFromSym = function(sym$$6, msg$$3) {
      this.reportErrorFromSym(sym$$6, msg$$3);
    };
    ErrorReporter$$1.prototype.invalidSuperReference = function(ast$$30) {
      this.simpleError(ast$$30, "Keyword 'super' can only be used inside a class instance method");
    };
    ErrorReporter$$1.prototype.valueCannotBeModified = function(ast$$31) {
      this.simpleError(ast$$31, "The left-hand side of an assignment expression must be a variable, property or indexer");
    };
    ErrorReporter$$1.prototype.invalidCall = function(ast$$32, nodeType$$13, scope$$6) {
      var targetType$$1 = ast$$32.target.type;
      var typeName = targetType$$1.getScopedTypeName(scope$$6);
      if (targetType$$1.construct && nodeType$$13 == TypeScript$$13.NodeType.Call) {
        this.reportError(ast$$32, "Value of type '" + typeName + "' is not callable.  Did you mean to include 'new'?");
      } else {
        var catString = nodeType$$13 == TypeScript$$13.NodeType.Call ? "callable" : "newable";
        this.reportError(ast$$32, "Value of type '" + typeName + "' is not " + catString);
      }
    };
    ErrorReporter$$1.prototype.indexLHS = function(ast$$33, scope$$7) {
      var targetType$$2 = ast$$33.operand1.type.getScopedTypeName(scope$$7);
      var indexType = ast$$33.operand2.type.getScopedTypeName(scope$$7);
      this.simpleError(ast$$33, "Value of type '" + targetType$$2 + "' is not indexable by type '" + indexType + "'");
    };
    ErrorReporter$$1.prototype.incompatibleTypes = function(ast$$34, t1, t2, op, scope$$8, comparisonInfo) {
      if (!t1) {
        t1 = this.checker.anyType;
      }
      if (!t2) {
        t2 = this.checker.anyType;
      }
      var reason = comparisonInfo ? comparisonInfo.message : "";
      if (op) {
        this.reportError(ast$$34, "Operator '" + op + "' cannot be applied to types '" + t1.getScopedTypeName(scope$$8) + "' and '" + t2.getScopedTypeName(scope$$8) + "'" + (reason ? ": " + reason : ""));
      } else {
        this.reportError(ast$$34, "Cannot convert '" + t1.getScopedTypeName(scope$$8) + "' to '" + t2.getScopedTypeName(scope$$8) + "'" + (reason ? ": " + reason : ""));
      }
    };
    ErrorReporter$$1.prototype.expectedClassOrInterface = function(ast$$35) {
      this.simpleError(ast$$35, "Expected var, class, interface, or module");
    };
    ErrorReporter$$1.prototype.unaryOperatorTypeError = function(ast$$36, op$$1, type$$29) {
      this.reportError(ast$$36, "Operator '" + op$$1 + "' cannot be applied to type '" + type$$29.getTypeName() + "'");
    };
    return ErrorReporter$$1;
  }();
  TypeScript$$13.ErrorReporter = ErrorReporter;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$14) {
  function quickParse(logger$$1, scopeStartAST, sourceText, minChar$$2, limChar$$2, errorCapture) {
    var fragment = sourceText.getText(minChar$$2, limChar$$2);
    logger$$1.log("Quick parse range (" + minChar$$2 + "," + limChar$$2 + '): "' + TypeScript$$14.stringToLiteral(fragment, 100) + '"');
    var quickParser = new Parser;
    quickParser.setErrorRecovery(null);
    quickParser.errorCallback = errorCapture;
    var quickClassDecl = new TypeScript$$14.ClassDeclaration(null, null, null, null);
    quickParser.currentClassDecl = quickClassDecl;
    var result$$7 = quickParser.quickParse(new TypeScript$$14.StringSourceText(fragment), "", 0);
    return result$$7;
  }
  (function(TypeContext$$1) {
    TypeContext$$1._map = [];
    TypeContext$$1.NoTypes = 0;
    TypeContext$$1.ArraySuffix = 1;
    TypeContext$$1.Primitive = 2;
    TypeContext$$1.Named = 4;
    TypeContext$$1.AllSimpleTypes = TypeContext$$1.Primitive | TypeContext$$1.Named;
    TypeContext$$1.AllTypes = TypeContext$$1.Primitive | TypeContext$$1.Named | TypeContext$$1.ArraySuffix;
  })(TypeScript$$14.TypeContext || (TypeScript$$14.TypeContext = {}));
  var TypeContext = TypeScript$$14.TypeContext;
  (function(ParseState$$1) {
    ParseState$$1._map = [];
    ParseState$$1._map[0] = "None";
    ParseState$$1.None = 0;
    ParseState$$1._map[1] = "StartScript";
    ParseState$$1.StartScript = 1;
    ParseState$$1._map[2] = "StartStatementList";
    ParseState$$1.StartStatementList = 2;
    ParseState$$1._map[3] = "StartStatement";
    ParseState$$1.StartStatement = 3;
    ParseState$$1._map[4] = "StartFncDecl";
    ParseState$$1.StartFncDecl = 4;
    ParseState$$1._map[5] = "FncDeclName";
    ParseState$$1.FncDeclName = 5;
    ParseState$$1._map[6] = "FncDeclArgs";
    ParseState$$1.FncDeclArgs = 6;
    ParseState$$1._map[7] = "FncDeclReturnType";
    ParseState$$1.FncDeclReturnType = 7;
    ParseState$$1._map[8] = "ForInit";
    ParseState$$1.ForInit = 8;
    ParseState$$1._map[9] = "ForInitAfterVar";
    ParseState$$1.ForInitAfterVar = 9;
    ParseState$$1._map[10] = "ForCondStart";
    ParseState$$1.ForCondStart = 10;
    ParseState$$1._map[11] = "EndStmtList";
    ParseState$$1.EndStmtList = 11;
    ParseState$$1._map[12] = "EndScript";
    ParseState$$1.EndScript = 12;
  })(TypeScript$$14.ParseState || (TypeScript$$14.ParseState = {}));
  var ParseState = TypeScript$$14.ParseState;
  var QuickParseResult = function() {
    function QuickParseResult$$1(Script$$2, endLexState) {
      this.Script = Script$$2;
      this.endLexState = endLexState;
    }
    return QuickParseResult$$1;
  }();
  TypeScript$$14.QuickParseResult = QuickParseResult;
  var Parser = function() {
    function Parser$$1() {
      this.varLists = [];
      this.scopeLists = [];
      this.staticsLists = [];
      this.scanner = new TypeScript$$14.Scanner;
      this.currentToken = null;
      this.needTerminator = false;
      this.inFunction = false;
      this.inInterfaceDecl = false;
      this.currentClassDecl = null;
      this.inFncDecl = false;
      this.anonId = new TypeScript$$14.Identifier("_anonymous");
      this.style_requireSemi = false;
      this.style_funcInLoop = true;
      this.incremental = false;
      this.errorRecovery = false;
      this.outfile = undefined;
      this.errorCallback = null;
      this.state = ParseState.StartStatementList;
      this.ambientModule = false;
      this.ambientClass = false;
      this.topLevel = true;
      this.allowImportDeclaration = true;
      this.currentUnitIndex = -1;
      this.prevIDTok = null;
      this.statementInfoStack = new Array;
      this.hasTopLevelImportOrExport = false;
      this.strictMode = false;
      this.nestingLevel = 0;
      this.prevExpr = null;
      this.currentClassDefinition = null;
      this.parsingClassConstructorDefinition = false;
      this.parsingDeclareFile = false;
      this.amdDependencies = [];
      this.inferPropertiesFromThisAssignment = false;
      this.requiresExtendsBlock = false;
      this.fname = "";
    }
    Parser$$1.prototype.resetStmtStack = function() {
      this.statementInfoStack = new Array;
    };
    Parser$$1.prototype.inLoop = function() {
      var j$$4 = this.statementInfoStack.length - 1;
      for (;j$$4 >= 0;j$$4--) {
        if (this.statementInfoStack[j$$4].stmt.isLoop()) {
          return true;
        }
      }
      return false;
    };
    Parser$$1.prototype.pushStmt = function(stmt$$3, labels$$1) {
      var info = {stmt:stmt$$3, labels:labels$$1};
      this.statementInfoStack.push(info);
    };
    Parser$$1.prototype.popStmt = function() {
      return this.statementInfoStack.pop();
    };
    Parser$$1.prototype.resolveJumpTarget = function(jump) {
      var resolvedTarget = TypeScript$$14.AST.getResolvedIdentifierName(jump.target);
      var len$$14 = this.statementInfoStack.length;
      var i$$48 = len$$14 - 1;
      for (;i$$48 >= 0;i$$48--) {
        var info$$1 = this.statementInfoStack[i$$48];
        if (jump.target) {
          if (info$$1.labels && info$$1.labels.members.length > 0) {
            var j$$5 = 0;
            var labLen = info$$1.labels.members.length;
            for (;j$$5 < labLen;j$$5++) {
              var label = info$$1.labels.members[j$$5];
              if (label.id.text == resolvedTarget) {
                jump.setResolvedTarget(this, info$$1.stmt);
                return;
              }
            }
          }
        } else {
          if (info$$1.stmt.isLoop()) {
            jump.setResolvedTarget(this, info$$1.stmt);
            return;
          } else {
            if (info$$1.stmt.nodeType == TypeScript$$14.NodeType.Switch && jump.nodeType == TypeScript$$14.NodeType.Break) {
              jump.setResolvedTarget(this, info$$1.stmt);
              return;
            }
          }
        }
      }
      if (jump.target) {
        this.reportParseError("could not find enclosing statement with label " + jump.target);
      } else {
        if (jump.nodeType == TypeScript$$14.NodeType.Break) {
          this.reportParseError("break statement requires enclosing loop or switch");
        } else {
          this.reportParseError("continue statement requires enclosing loop");
        }
      }
    };
    Parser$$1.prototype.setErrorRecovery = function(outfile$$3) {
      this.outfile = outfile$$3;
      this.errorRecovery = true;
    };
    Parser$$1.prototype.getSourceLineCol = function(lineCol$$2, minChar$$3) {
      TypeScript$$14.getSourceLineColFromMap(lineCol$$2, minChar$$3, this.scanner.lineMap);
    };
    Parser$$1.prototype.createRef = function(text$$13, hasEscapeSequence$$2, minChar$$4) {
      var id$$9 = new TypeScript$$14.Identifier(text$$13, hasEscapeSequence$$2);
      id$$9.minChar = minChar$$4;
      return id$$9;
    };
    Parser$$1.prototype.reportParseStyleError = function(message$$13) {
      this.reportParseError("STYLE: " + message$$13);
    };
    Parser$$1.prototype.reportParseError = function(message$$14, startPos, pos$$1) {
      if (typeof startPos === "undefined") {
        startPos = this.scanner.startPos;
      }
      if (typeof pos$$1 === "undefined") {
        pos$$1 = this.scanner.pos;
      }
      var len$$15 = Math.max(1, pos$$1 - startPos);
      if (this.errorCallback) {
        this.errorCallback(startPos, len$$15, message$$14, this.currentUnitIndex);
      } else {
        if (this.errorRecovery) {
          var lineCol$$3 = {line:-1, col:-1};
          this.getSourceLineCol(lineCol$$3, startPos);
          if (this.outfile) {
            this.outfile.WriteLine("// " + this.fname + " (" + lineCol$$3.line + "," + lineCol$$3.col + "): " + message$$14);
          }
        } else {
          throw new SyntaxError(this.fname + " (" + this.scanner.line + "," + this.scanner.col + "): " + message$$14);
        }
      }
    };
    Parser$$1.prototype.checkNextToken = function(tokenId$$42, errorRecoverySet, errorText) {
      if (typeof errorText === "undefined") {
        errorText = null;
      }
      this.currentToken = this.scanner.scan();
      this.checkCurrentToken(tokenId$$42, errorRecoverySet, errorText);
    };
    Parser$$1.prototype.skip = function(errorRecoverySet$$1) {
      errorRecoverySet$$1 |= TypeScript$$14.ErrorRecoverySet.EOF;
      var ersTok = TypeScript$$14.ErrorRecoverySet.None;
      var tokenInfo = TypeScript$$14.lookupToken(this.currentToken.tokenId);
      if (tokenInfo != undefined) {
        ersTok = tokenInfo.ers;
      }
      var pendingRightCurlies = 0;
      for (;(ersTok & errorRecoverySet$$1) == TypeScript$$14.ErrorRecoverySet.None || this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace && pendingRightCurlies > 0;) {
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenBrace) {
          pendingRightCurlies++;
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace) {
            pendingRightCurlies--;
          }
        }
        this.currentToken = this.scanner.scan();
        ersTok = TypeScript$$14.ErrorRecoverySet.None;
        tokenInfo = TypeScript$$14.lookupToken(this.currentToken.tokenId);
        if (tokenInfo != undefined) {
          ersTok = tokenInfo.ers;
        }
      }
    };
    Parser$$1.prototype.checkCurrentToken = function(tokenId$$43, errorRecoverySet$$2, errorText$$1) {
      if (typeof errorText$$1 === "undefined") {
        errorText$$1 = null;
      }
      if (this.currentToken.tokenId != tokenId$$43) {
        errorText$$1 = errorText$$1 == null ? "Expected '" + TypeScript$$14.tokenTable[tokenId$$43].text + "'" : errorText$$1;
        this.reportParseError(errorText$$1);
        if (this.errorRecovery) {
          this.skip(errorRecoverySet$$2);
        }
      } else {
        this.currentToken = this.scanner.scan();
      }
    };
    Parser$$1.prototype.pushDeclLists = function() {
      this.staticsLists.push(new TypeScript$$14.ASTList);
      this.varLists.push(new TypeScript$$14.ASTList);
      this.scopeLists.push(new TypeScript$$14.ASTList);
    };
    Parser$$1.prototype.popDeclLists = function() {
      this.staticsLists.pop();
      this.varLists.pop();
      this.scopeLists.pop();
    };
    Parser$$1.prototype.topVarList = function() {
      return this.varLists[this.varLists.length - 1];
    };
    Parser$$1.prototype.topScopeList = function() {
      return this.scopeLists[this.scopeLists.length - 1];
    };
    Parser$$1.prototype.topStaticsList = function() {
      return this.staticsLists[this.staticsLists.length - 1];
    };
    Parser$$1.prototype.parseComment = function(comment$$2) {
      if (comment$$2) {
        var c$$7 = new TypeScript$$14.Comment(comment$$2.value, comment$$2.isBlock, comment$$2.endsLine);
        c$$7.minChar = comment$$2.startPos;
        c$$7.limChar = comment$$2.startPos + comment$$2.value.length;
        var lineCol$$4 = {line:-1, col:-1};
        this.getSourceLineCol(lineCol$$4, c$$7.minChar);
        c$$7.minLine = lineCol$$4.line;
        this.getSourceLineCol(lineCol$$4, c$$7.limChar);
        c$$7.limLine = lineCol$$4.line;
        if (!comment$$2.isBlock && comment$$2.value.length > 3 && comment$$2.value.substring(0, 3) == "///") {
          var dependencyPath = TypeScript$$14.getAdditionalDependencyPath(comment$$2.value);
          if (dependencyPath) {
            this.amdDependencies.push(dependencyPath);
          }
          if (TypeScript$$14.getImplicitImport(comment$$2.value)) {
            this.hasTopLevelImportOrExport = true;
          }
        }
        return c$$7;
      } else {
        return null;
      }
    };
    Parser$$1.prototype.parseCommentsInner = function(comments$$5) {
      if (comments$$5) {
        var commentASTs = new Array;
        var i$$49 = 0;
        for (;i$$49 < comments$$5.length;i$$49++) {
          commentASTs.push(this.parseComment(comments$$5[i$$49]));
        }
        return commentASTs;
      } else {
        return null;
      }
    };
    Parser$$1.prototype.parseComments = function() {
      var comments$$6 = this.scanner.getComments();
      return this.parseCommentsInner(comments$$6);
    };
    Parser$$1.prototype.parseCommentsForLine = function(line$$4) {
      var comments$$7 = this.scanner.getCommentsForLine(line$$4);
      return this.parseCommentsInner(comments$$7);
    };
    Parser$$1.prototype.combineComments = function(comment1, comment2) {
      if (comment1 == null) {
        return comment2;
      } else {
        if (comment2 == null) {
          return comment1;
        } else {
          return comment1.concat(comment2);
        }
      }
    };
    Parser$$1.prototype.parseEnumDecl = function(errorRecoverySet$$3, modifiers) {
      var leftCurlyCount = this.scanner.leftCurlyCount;
      var rightCurlyCount = this.scanner.rightCurlyCount;
      var name$$44 = null;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
        name$$44 = TypeScript$$14.Identifier.fromToken(this.currentToken);
        name$$44.minChar = this.scanner.startPos;
        name$$44.limChar = this.scanner.pos;
        this.currentToken = this.scanner.scan();
      } else {
        this.reportParseError("Enum declaration requires identifier");
        if (this.errorRecovery) {
          name$$44 = new TypeScript$$14.MissingIdentifier;
          name$$44.minChar = this.scanner.startPos;
          name$$44.limChar = this.scanner.startPos;
          name$$44.flags |= TypeScript$$14.ASTFlags.Error;
        }
      }
      var membersMinChar = this.scanner.startPos;
      this.checkCurrentToken(TypeScript$$14.TokenID.OpenBrace, errorRecoverySet$$3 | TypeScript$$14.ErrorRecoverySet.ID);
      this.pushDeclLists();
      var members$$7 = new TypeScript$$14.ASTList;
      members$$7.minChar = membersMinChar;
      var mapDecl = new TypeScript$$14.VarDecl(new TypeScript$$14.Identifier("_map"), 0);
      mapDecl.varFlags |= TypeScript$$14.VarFlags.Exported;
      mapDecl.varFlags |= TypeScript$$14.VarFlags.Private;
      mapDecl.varFlags |= TypeScript$$14.VarFlags.Property | TypeScript$$14.VarFlags.Public;
      mapDecl.init = new TypeScript$$14.UnaryExpression(TypeScript$$14.NodeType.ArrayLit, null);
      members$$7.append(mapDecl);
      var lastValue = null;
      for (;;) {
        var minChar$$5 = this.scanner.startPos;
        var limChar$$3;
        var memberName = null;
        var memberValue = null;
        var preComments = null;
        var postComments = null;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToIDName(this.currentToken)) {
          memberName = TypeScript$$14.Identifier.fromToken(this.currentToken);
          memberName.minChar = this.scanner.startPos;
          memberName.limChar = this.scanner.pos;
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace) {
            break;
          } else {
            this.reportParseError("Expected identifer of enum member");
            if (this.errorRecovery) {
              memberName = new TypeScript$$14.MissingIdentifier;
              memberName.minChar = this.scanner.startPos;
              memberName.limChar = this.scanner.startPos;
              memberName.flags |= TypeScript$$14.ASTFlags.Error;
            }
          }
        }
        limChar$$3 = this.scanner.pos;
        preComments = this.parseComments();
        this.currentToken = this.scanner.scan();
        postComments = this.parseComments();
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Equals) {
          this.currentToken = this.scanner.scan();
          memberValue = this.parseExpr(errorRecoverySet$$3, TypeScript$$14.OperatorPrecedence.Comma, true, TypeContext.NoTypes);
          lastValue = memberValue;
          limChar$$3 = memberValue.limChar;
        } else {
          if (lastValue == null) {
            memberValue = new TypeScript$$14.NumberLiteral(0);
            lastValue = memberValue;
          } else {
            memberValue = new TypeScript$$14.NumberLiteral(lastValue.value + 1);
            lastValue = memberValue;
          }
          var map = new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Asg, new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Index, new TypeScript$$14.Identifier("_map"), memberValue), new TypeScript$$14.StringLiteral('"' + memberName.actualText + '"'));
          members$$7.append(map);
        }
        var member$$1 = new TypeScript$$14.VarDecl(memberName, this.nestingLevel);
        member$$1.minChar = minChar$$5;
        member$$1.limChar = limChar$$3;
        member$$1.init = memberValue;
        member$$1.typeExpr = new TypeScript$$14.TypeReference(this.createRef(name$$44.actualText, name$$44.hasEscapeSequence, -1), 0);
        member$$1.varFlags |= TypeScript$$14.VarFlags.Readonly | TypeScript$$14.VarFlags.Property;
        if (memberValue.nodeType == TypeScript$$14.NodeType.NumberLit) {
          member$$1.varFlags |= TypeScript$$14.VarFlags.Constant;
        }
        member$$1.preComments = preComments;
        members$$7.append(member$$1);
        member$$1.postComments = postComments;
        member$$1.varFlags |= TypeScript$$14.VarFlags.Exported;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Comma) {
          this.currentToken = this.scanner.scan();
          member$$1.postComments = this.combineComments(member$$1.postComments, this.parseCommentsForLine(this.scanner.prevLine));
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToIDName(this.currentToken)) {
            continue;
          }
        }
        break;
      }
      var endingToken$$1 = new TypeScript$$14.ASTSpan;
      endingToken$$1.minChar = this.scanner.startPos;
      endingToken$$1.limChar = this.scanner.pos;
      this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$3);
      members$$7.limChar = this.scanner.lastTokenLimChar();
      var modDecl = new TypeScript$$14.ModuleDeclaration(name$$44, members$$7, this.topVarList(), this.topScopeList(), endingToken$$1);
      modDecl.modFlags |= TypeScript$$14.ModuleFlags.IsEnum;
      this.popDeclLists();
      modDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;
      modDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;
      return modDecl;
    };
    Parser$$1.prototype.parseDottedName = function(enclosedList) {
      this.currentToken = this.scanner.scan();
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
        var id$$10 = TypeScript$$14.Identifier.fromToken(this.currentToken);
        id$$10.preComments = this.parseComments();
        enclosedList[enclosedList.length] = id$$10;
        id$$10.minChar = this.scanner.startPos;
        id$$10.limChar = this.scanner.pos;
        this.currentToken = this.scanner.scan();
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Dot) {
          this.parseDottedName(enclosedList);
        }
      } else {
        this.reportParseError("need identifier after '.'");
      }
    };
    Parser$$1.prototype.isValidImportPath = function(importPath) {
      importPath = TypeScript$$14.stripQuotes(importPath);
      if (!importPath || importPath.indexOf(":") != -1 || importPath.indexOf("\\") != -1 || importPath.charAt(0) == "/") {
        return false;
      }
      return true;
    };
    Parser$$1.prototype.parseImportDeclaration = function(errorRecoverySet$$4, modifiers$$1) {
      var name$$45 = null;
      var alias$$1 = null;
      var importDecl = null;
      var minChar$$6 = this.scanner.startPos;
      var isDynamicImport = false;
      this.currentToken = this.scanner.scan();
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
        name$$45 = TypeScript$$14.Identifier.fromToken(this.currentToken);
      } else {
        this.reportParseError("Expected identifer after 'import'");
        name$$45 = new TypeScript$$14.MissingIdentifier;
      }
      name$$45.minChar = this.scanner.startPos;
      name$$45.limChar = this.scanner.pos;
      this.currentToken = this.scanner.scan();
      this.checkCurrentToken(TypeScript$$14.TokenID.Equals, errorRecoverySet$$4 | TypeScript$$14.ErrorRecoverySet.ID);
      var aliasPreComments = this.parseComments();
      var limChar$$4;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Module) {
          limChar$$4 = this.scanner.pos;
          this.currentToken = this.scanner.scan();
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen) {
            this.currentToken = this.scanner.scan();
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.StringLiteral || this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.StringLiteral) {
                if (this.topLevel) {
                  this.hasTopLevelImportOrExport = true;
                } else {
                  if (!this.allowImportDeclaration) {
                    this.reportParseError("Import declaration of external module is permitted only in global or top level dynamic modules");
                  }
                }
                var aliasText = this.currentToken.getText();
                alias$$1 = TypeScript$$14.Identifier.fromToken(this.currentToken);
                alias$$1.minChar = this.scanner.startPos;
                alias$$1.limChar = this.scanner.pos;
                if (!this.isValidImportPath(alias$$1.text)) {
                  this.reportParseError("Invalid import path");
                }
                isDynamicImport = true;
                this.currentToken = this.scanner.scan();
                alias$$1.preComments = aliasPreComments;
              } else {
                alias$$1 = this.parseExpr(errorRecoverySet$$4 | TypeScript$$14.ErrorRecoverySet.SColon, TypeScript$$14.OperatorPrecedence.Assignment, true, TypeContext.NoTypes);
                alias$$1.preComments = aliasPreComments;
              }
            }
            limChar$$4 = this.scanner.pos;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$4 | TypeScript$$14.ErrorRecoverySet.ID);
            if (alias$$1) {
              alias$$1.postComments = this.parseComments();
            }
          }
        } else {
          alias$$1 = this.parseExpr(errorRecoverySet$$4 | TypeScript$$14.ErrorRecoverySet.SColon, TypeScript$$14.OperatorPrecedence.Assignment, true, TypeContext.NoTypes);
          limChar$$4 = this.scanner.pos;
        }
      } else {
        this.reportParseError("Expected module name");
        alias$$1 = new TypeScript$$14.MissingIdentifier;
        alias$$1.minChar = this.scanner.startPos;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Semicolon) {
          alias$$1.limChar = this.scanner.startPos;
        } else {
          alias$$1.limChar = this.scanner.pos;
          this.currentToken = this.scanner.scan();
        }
        alias$$1.flags |= TypeScript$$14.ASTFlags.Error;
        limChar$$4 = alias$$1.limChar;
      }
      importDecl = new TypeScript$$14.ImportDeclaration(name$$45, alias$$1);
      importDecl.isDynamicImport = isDynamicImport;
      importDecl.minChar = minChar$$6;
      importDecl.limChar = limChar$$4;
      return importDecl;
    };
    Parser$$1.prototype.parseModuleDecl = function(errorRecoverySet$$5, modifiers$$2, preComments$$1) {
      var leftCurlyCount$$1 = this.scanner.leftCurlyCount;
      var rightCurlyCount$$1 = this.scanner.rightCurlyCount;
      var svAmbient = this.ambientModule;
      var svTopLevel = this.topLevel;
      this.topLevel = false;
      if (this.parsingDeclareFile || svAmbient || TypeScript$$14.hasFlag(modifiers$$2, TypeScript$$14.Modifiers.Ambient)) {
        this.ambientModule = true;
      }
      this.currentToken = this.scanner.scan();
      var name$$46 = null;
      var enclosedList$$1 = null;
      this.pushDeclLists();
      var minChar$$7 = this.scanner.startPos;
      var isDynamicMod$$1 = false;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || this.currentToken.tokenId == TypeScript$$14.TokenID.StringLiteral || !TypeScript$$14.isPrimitiveTypeToken(this.currentToken) && TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
        var nameText = this.currentToken.getText();
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.StringLiteral) {
          isDynamicMod$$1 = true;
          if (!this.ambientModule) {
            this.reportParseError("Only ambient dynamic modules may have string literal names");
          }
          if (!svTopLevel) {
            this.reportParseError("Dynamic modules may not be nested within other modules");
          }
        }
        name$$46 = TypeScript$$14.Identifier.fromToken(this.currentToken);
        name$$46.minChar = this.scanner.startPos;
        name$$46.limChar = this.scanner.pos;
        this.currentToken = this.scanner.scan();
      } else {
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenBrace) {
          this.reportParseError("Module name missing");
          name$$46 = new TypeScript$$14.Identifier("");
          name$$46.minChar = minChar$$7;
          name$$46.limChar = minChar$$7;
        }
      }
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Dot) {
        enclosedList$$1 = new Array;
        this.parseDottedName(enclosedList$$1);
      }
      if (name$$46 == null) {
        name$$46 = new TypeScript$$14.MissingIdentifier;
      }
      var moduleBody = new TypeScript$$14.ASTList;
      var bodyMinChar = this.scanner.startPos;
      this.checkCurrentToken(TypeScript$$14.TokenID.OpenBrace, errorRecoverySet$$5 | TypeScript$$14.ErrorRecoverySet.ID);
      if (svTopLevel && isDynamicMod$$1) {
        this.allowImportDeclaration = true;
      } else {
        this.allowImportDeclaration = false;
      }
      this.parseStatementList(errorRecoverySet$$5 | TypeScript$$14.ErrorRecoverySet.RCurly, moduleBody, true, true, TypeScript$$14.AllowedElements.Global, modifiers$$2);
      moduleBody.minChar = bodyMinChar;
      moduleBody.limChar = this.scanner.pos;
      var endingToken$$2 = new TypeScript$$14.ASTSpan;
      endingToken$$2.minChar = this.scanner.startPos;
      endingToken$$2.limChar = this.scanner.pos;
      this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$5);
      var limChar$$5 = this.scanner.lastTokenLimChar();
      var moduleDecl$$3;
      this.allowImportDeclaration = svTopLevel;
      if (enclosedList$$1 && enclosedList$$1.length > 0) {
        var len$$16 = enclosedList$$1.length;
        var innerName = enclosedList$$1[len$$16 - 1];
        var innerDecl = new TypeScript$$14.ModuleDeclaration(innerName, moduleBody, this.topVarList(), this.topScopeList(), endingToken$$2);
        innerDecl.preComments = preComments$$1;
        if (this.parsingDeclareFile || TypeScript$$14.hasFlag(modifiers$$2, TypeScript$$14.Modifiers.Ambient)) {
          innerDecl.modFlags |= TypeScript$$14.ModuleFlags.Ambient;
        }
        innerDecl.modFlags |= TypeScript$$14.ModuleFlags.Exported;
        innerDecl.minChar = minChar$$7;
        innerDecl.limChar = limChar$$5;
        this.popDeclLists();
        var outerModBod;
        var i$$50 = len$$16 - 2;
        for (;i$$50 >= 0;i$$50--) {
          outerModBod = new TypeScript$$14.ASTList;
          outerModBod.append(innerDecl);
          innerName = enclosedList$$1[i$$50];
          innerDecl = new TypeScript$$14.ModuleDeclaration(innerName, outerModBod, new TypeScript$$14.ASTList, new TypeScript$$14.ASTList, endingToken$$2);
          outerModBod.minChar = innerDecl.minChar = minChar$$7;
          outerModBod.limChar = innerDecl.limChar = limChar$$5;
          if (this.parsingDeclareFile || TypeScript$$14.hasFlag(modifiers$$2, TypeScript$$14.Modifiers.Ambient)) {
            innerDecl.modFlags |= TypeScript$$14.ModuleFlags.Ambient;
          }
          innerDecl.modFlags |= TypeScript$$14.ModuleFlags.Exported;
        }
        outerModBod = new TypeScript$$14.ASTList;
        outerModBod.append(innerDecl);
        outerModBod.minChar = minChar$$7;
        outerModBod.limChar = limChar$$5;
        moduleDecl$$3 = new TypeScript$$14.ModuleDeclaration(name$$46, outerModBod, new TypeScript$$14.ASTList, new TypeScript$$14.ASTList, endingToken$$2);
      } else {
        moduleDecl$$3 = new TypeScript$$14.ModuleDeclaration(name$$46, moduleBody, this.topVarList(), this.topScopeList(), endingToken$$2);
        moduleDecl$$3.preComments = preComments$$1;
        this.popDeclLists();
      }
      if (this.parsingDeclareFile || svAmbient || TypeScript$$14.hasFlag(modifiers$$2, TypeScript$$14.Modifiers.Ambient)) {
        moduleDecl$$3.modFlags |= TypeScript$$14.ModuleFlags.Ambient;
      }
      if (svAmbient || TypeScript$$14.hasFlag(modifiers$$2, TypeScript$$14.Modifiers.Exported)) {
        moduleDecl$$3.modFlags |= TypeScript$$14.ModuleFlags.Exported;
      }
      if (isDynamicMod$$1) {
        moduleDecl$$3.modFlags |= TypeScript$$14.ModuleFlags.IsDynamic;
      }
      this.ambientModule = svAmbient;
      this.topLevel = svTopLevel;
      moduleDecl$$3.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount$$1;
      moduleDecl$$3.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount$$1;
      moduleDecl$$3.limChar = moduleBody.limChar;
      return moduleDecl$$3;
    };
    Parser$$1.prototype.parseTypeReferenceTail = function(errorRecoverySet$$6, minChar$$8, term$$1) {
      var result$$8 = new TypeScript$$14.TypeReference(term$$1, 0);
      result$$8.minChar = minChar$$8;
      for (;this.currentToken.tokenId == TypeScript$$14.TokenID.OpenBracket;) {
        this.currentToken = this.scanner.scan();
        result$$8.arrayCount++;
        this.checkCurrentToken(TypeScript$$14.TokenID.CloseBracket, errorRecoverySet$$6 | TypeScript$$14.ErrorRecoverySet.LBrack);
      }
      result$$8.limChar = this.scanner.lastTokenLimChar();
      return result$$8;
    };
    Parser$$1.prototype.parseNamedType = function(errorRecoverySet$$7, minChar$$9, term$$2, tail) {
      this.currentToken = this.scanner.scan();
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Dot) {
        var curpos = this.scanner.pos;
        this.currentToken = this.scanner.scan();
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || (!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
          var op2 = TypeScript$$14.Identifier.fromToken(this.currentToken);
          op2.minChar = this.scanner.startPos;
          op2.limChar = this.scanner.pos;
          var dotNode$$1 = new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Dot, term$$2, op2);
          dotNode$$1.minChar = term$$2.minChar;
          dotNode$$1.limChar = op2.limChar;
          return this.parseNamedType(errorRecoverySet$$7, minChar$$9, dotNode$$1, tail);
        } else {
          this.reportParseError("need identifier after '.'");
          if (this.errorRecovery) {
            term$$2.flags |= TypeScript$$14.ASTFlags.DotLHS;
            term$$2.limChar = this.scanner.lastTokenLimChar();
            return term$$2;
          } else {
            var eop2 = new TypeScript$$14.MissingIdentifier;
            eop2.minChar = this.scanner.pos;
            eop2.limChar = this.scanner.pos;
            var edotNode = new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Dot, term$$2, eop2);
            edotNode.flags |= TypeScript$$14.ASTFlags.Error;
            edotNode.minChar = term$$2.minChar;
            edotNode.limChar = eop2.limChar;
            return this.parseNamedType(errorRecoverySet$$7, minChar$$9, edotNode, tail);
          }
        }
      } else {
        if (tail) {
          return this.parseTypeReferenceTail(errorRecoverySet$$7, minChar$$9, term$$2);
        } else {
          return term$$2;
        }
      }
    };
    Parser$$1.prototype.parseTypeReference = function(errorRecoverySet$$8, allowVoid) {
      var minChar$$10 = this.scanner.startPos;
      var isConstructorMember = false;
      switch(this.currentToken.tokenId) {
        case TypeScript$$14.TokenID.Void:
          if (!allowVoid) {
            this.reportParseError("void not a valid type in this context");
          }
        ;
        case TypeScript$$14.TokenID.Any:
        ;
        case TypeScript$$14.TokenID.Number:
        ;
        case TypeScript$$14.TokenID.Bool:
        ;
        case TypeScript$$14.TokenID.String:
          var text$$14 = TypeScript$$14.tokenTable[this.currentToken.tokenId].text;
          var predefinedIdentifier = new TypeScript$$14.Identifier(text$$14);
          predefinedIdentifier.minChar = minChar$$10;
          predefinedIdentifier.limChar = this.scanner.pos;
          this.currentToken = this.scanner.scan();
          return this.parseTypeReferenceTail(errorRecoverySet$$8, minChar$$10, predefinedIdentifier);
        case TypeScript$$14.TokenID.Identifier:
          var ident = this.createRef(this.currentToken.getText(), this.currentToken.hasEscapeSequence, minChar$$10);
          ident.limChar = this.scanner.pos;
          return this.parseNamedType(errorRecoverySet$$8, minChar$$10, ident, true);
        case TypeScript$$14.TokenID.OpenBrace:
          return this.parseObjectType(minChar$$10, errorRecoverySet$$8);
        case TypeScript$$14.TokenID.New:
          this.currentToken = this.scanner.scan();
          if (this.currentToken.tokenId != TypeScript$$14.TokenID.OpenParen) {
            this.reportParseError("Expected '('");
          } else {
            isConstructorMember = true;
          }
        ;
        case TypeScript$$14.TokenID.OpenParen:
          var formals = new TypeScript$$14.ASTList;
          var variableArgList = this.parseFormalParameterList(errorRecoverySet$$8 | TypeScript$$14.ErrorRecoverySet.RParen, formals, false, true, false, false, false, false, null, true);
          this.checkCurrentToken(TypeScript$$14.TokenID.EqualsGreaterThan, errorRecoverySet$$8);
          var returnType = this.parseTypeReference(errorRecoverySet$$8, true);
          var funcDecl$$5 = new TypeScript$$14.FuncDecl(null, null, false, formals, null, null, null, TypeScript$$14.NodeType.FuncDecl);
          funcDecl$$5.returnTypeAnnotation = returnType;
          funcDecl$$5.variableArgList = variableArgList;
          funcDecl$$5.fncFlags |= TypeScript$$14.FncFlags.Signature;
          if (isConstructorMember) {
            funcDecl$$5.fncFlags |= TypeScript$$14.FncFlags.ConstructMember;
            funcDecl$$5.hint = "_construct";
            funcDecl$$5.classDecl = null;
          }
          funcDecl$$5.minChar = minChar$$10;
          return this.parseTypeReferenceTail(errorRecoverySet$$8, minChar$$10, funcDecl$$5);
        default:
          this.reportParseError("Expected type name");
          var etr = new TypeScript$$14.TypeReference(null, 0);
          etr.flags |= TypeScript$$14.ASTFlags.Error;
          etr.minChar = this.scanner.pos;
          etr.limChar = this.scanner.pos;
          return etr;
      }
    };
    Parser$$1.prototype.parseObjectType = function(minChar$$11, errorRecoverySet$$9) {
      this.currentToken = this.scanner.scan();
      var members$$8 = new TypeScript$$14.ASTList;
      members$$8.minChar = minChar$$11;
      var prevInInterfaceDecl = this.inInterfaceDecl;
      this.inInterfaceDecl = true;
      this.parseTypeMemberList(errorRecoverySet$$9 | TypeScript$$14.ErrorRecoverySet.RCurly, members$$8);
      this.inInterfaceDecl = prevInInterfaceDecl;
      this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$9);
      var interfaceDecl = new TypeScript$$14.InterfaceDeclaration(this.anonId, members$$8, null, null);
      interfaceDecl.minChar = minChar$$11;
      interfaceDecl.limChar = members$$8.limChar;
      return this.parseTypeReferenceTail(errorRecoverySet$$9, minChar$$11, interfaceDecl);
    };
    Parser$$1.prototype.parseFunctionBlock = function(errorRecoverySet$$10, allowedElements, parentModifiers, bod$$1, bodMinChar) {
      this.state = ParseState.StartStatementList;
      this.checkCurrentToken(TypeScript$$14.TokenID.OpenBrace, errorRecoverySet$$10 | TypeScript$$14.ErrorRecoverySet.StmtStart);
      var savedInFunction = this.inFunction;
      this.inFunction = true;
      this.parseStatementList(errorRecoverySet$$10 | TypeScript$$14.ErrorRecoverySet.RCurly | TypeScript$$14.ErrorRecoverySet.StmtStart, bod$$1, true, false, allowedElements, parentModifiers);
      bod$$1.minChar = bodMinChar;
      bod$$1.limChar = this.scanner.pos;
      this.inFunction = savedInFunction;
      var ec = new TypeScript$$14.EndCode;
      ec.minChar = bod$$1.limChar;
      ec.limChar = ec.minChar;
      bod$$1.append(ec);
    };
    Parser$$1.prototype.parseFunctionStatements = function(errorRecoverySet$$11, name$$47, isConstructor$$1, isMethod, args$$6, allowedElements$$1, minChar$$12, requiresSignature, parentModifiers$$1) {
      this.pushDeclLists();
      var svStmtStack = this.statementInfoStack;
      this.resetStmtStack();
      var bod$$2 = null;
      var wasShorthand = false;
      var isAnonLambda = false;
      var limChar$$6;
      if (requiresSignature) {
        limChar$$6 = this.scanner.pos;
        if (this.currentToken.tokenId === TypeScript$$14.TokenID.OpenBrace) {
          this.reportParseError("Function declarations are not permitted within interfaces, ambient modules or classes");
          bod$$2 = new TypeScript$$14.ASTList;
          var bodMinChar$$1 = this.scanner.startPos;
          this.parseFunctionBlock(errorRecoverySet$$11, allowedElements$$1, parentModifiers$$1, bod$$2, bodMinChar$$1);
          this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$11);
          if (this.currentToken.tokenId === TypeScript$$14.TokenID.Semicolon) {
            this.currentToken = this.scanner.scan();
          }
        } else {
          this.checkCurrentToken(TypeScript$$14.TokenID.Semicolon, errorRecoverySet$$11, "Expected ';'");
        }
      } else {
        bod$$2 = new TypeScript$$14.ASTList;
        bodMinChar$$1 = this.scanner.startPos;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.EqualsGreaterThan) {
          if (isMethod) {
            this.reportParseError("'=>' may not be used for class methods");
          }
          wasShorthand = true;
          this.currentToken = this.scanner.scan();
        }
        if (wasShorthand && this.currentToken.tokenId != TypeScript$$14.TokenID.OpenBrace) {
          var retExpr = this.parseExpr(errorRecoverySet$$11 | TypeScript$$14.ErrorRecoverySet.SColon, TypeScript$$14.OperatorPrecedence.Assignment, true, TypeContext.NoTypes);
          var retStmt = new TypeScript$$14.ReturnStatement;
          retStmt.returnExpression = retExpr;
          retStmt.minChar = retExpr.minChar;
          retStmt.limChar = retExpr.limChar;
          bod$$2.minChar = bodMinChar$$1;
          bod$$2.append(retStmt);
        } else {
          isAnonLambda = wasShorthand;
          this.parseFunctionBlock(errorRecoverySet$$11, allowedElements$$1, parentModifiers$$1, bod$$2, bodMinChar$$1);
        }
        limChar$$6 = this.scanner.pos;
      }
      var funcDecl$$6 = new TypeScript$$14.FuncDecl(name$$47, bod$$2, isConstructor$$1, args$$6, this.topVarList(), this.topScopeList(), this.topStaticsList(), TypeScript$$14.NodeType.FuncDecl);
      this.popDeclLists();
      var scopeList = this.topScopeList();
      scopeList.append(funcDecl$$6);
      var staticFuncDecl = false;
      if (!requiresSignature) {
        if (!wasShorthand || isAnonLambda) {
          funcDecl$$6.endingToken = new TypeScript$$14.ASTSpan;
          funcDecl$$6.endingToken.minChar = this.scanner.startPos;
          funcDecl$$6.endingToken.limChar = this.scanner.pos;
          this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$11);
          if (isAnonLambda) {
            funcDecl$$6.fncFlags |= TypeScript$$14.FncFlags.IsFatArrowFunction;
          }
        } else {
          funcDecl$$6.fncFlags |= TypeScript$$14.FncFlags.IsFatArrowFunction;
          funcDecl$$6.endingToken = new TypeScript$$14.ASTSpan;
          funcDecl$$6.endingToken.minChar = bod$$2.members[0].minChar;
          funcDecl$$6.endingToken.limChar = bod$$2.members[0].limChar;
        }
      }
      funcDecl$$6.minChar = minChar$$12;
      funcDecl$$6.limChar = limChar$$6;
      if (!requiresSignature) {
        funcDecl$$6.fncFlags |= TypeScript$$14.FncFlags.Definition;
      }
      this.statementInfoStack = svStmtStack;
      return funcDecl$$6;
    };
    Parser$$1.prototype.transformAnonymousArgsIntoFormals = function(formals$$1, argList) {
      var _this$$1 = this;
      var translateBinExOperand = function(operand$$1) {
        if (operand$$1.nodeType == TypeScript$$14.NodeType.Comma) {
          return _this$$1.transformAnonymousArgsIntoFormals(formals$$1, operand$$1);
        } else {
          if (operand$$1.nodeType == TypeScript$$14.NodeType.Name || operand$$1.nodeType == TypeScript$$14.NodeType.Asg) {
            var opArg = operand$$1.nodeType == TypeScript$$14.NodeType.Asg ? operand$$1.operand1 : operand$$1;
            var arg$$5 = new TypeScript$$14.ArgDecl(opArg);
            arg$$5.preComments = opArg.preComments;
            arg$$5.postComments = opArg.postComments;
            arg$$5.minChar = operand$$1.minChar;
            arg$$5.limChar = operand$$1.limChar;
            if (TypeScript$$14.hasFlag(opArg.flags, TypeScript$$14.ASTFlags.PossibleOptionalParameter)) {
              arg$$5.isOptional = true;
            }
            if (operand$$1.nodeType == TypeScript$$14.NodeType.Asg) {
              arg$$5.init = operand$$1.operand2;
            }
            formals$$1.append(arg$$5);
            return arg$$5.isOptional || arg$$5.init;
          } else {
            _this$$1.reportParseError("Invalid lambda argument");
          }
        }
        return false;
      };
      if (argList) {
        if (argList.nodeType == TypeScript$$14.NodeType.Comma) {
          var commaList = argList;
          if (commaList.operand1.isParenthesized) {
            this.reportParseError("Invalid lambda argument", commaList.operand1.minChar, commaList.operand1.limChar);
          }
          if (commaList.operand2.isParenthesized) {
            this.reportParseError("Invalid lambda argument", commaList.operand2.minChar, commaList.operand2.limChar);
          }
          var isOptional = translateBinExOperand(commaList.operand1);
          isOptional = translateBinExOperand(commaList.operand2) || isOptional;
          return isOptional;
        } else {
          return translateBinExOperand(argList);
        }
      }
    };
    Parser$$1.prototype.parseFormalParameterList = function(errorRecoverySet$$12, formals$$2, isClassConstr, isSig, isIndexer, isGetter, isSetter, isLambda, preProcessedLambdaArgs, expectClosingRParen) {
      formals$$2.minChar = this.scanner.startPos;
      if (isIndexer) {
        this.currentToken = this.scanner.scan();
      } else {
        if (!isLambda) {
          this.checkCurrentToken(TypeScript$$14.TokenID.OpenParen, errorRecoverySet$$12 | TypeScript$$14.ErrorRecoverySet.RParen);
        }
      }
      var sawEllipsis = false;
      var firstArg = true;
      var hasOptional = false;
      var haveFirstArgID = false;
      if (isLambda && preProcessedLambdaArgs && preProcessedLambdaArgs.nodeType != TypeScript$$14.NodeType.EmptyExpr) {
        hasOptional = this.transformAnonymousArgsIntoFormals(formals$$2, preProcessedLambdaArgs);
        haveFirstArgID = true;
      }
      for (;true;) {
        var munchedArg = false;
        var argFlags = TypeScript$$14.VarFlags.None;
        var argMinChar = this.scanner.startPos;
        if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TypeScript$$14.TokenID.This) {
          if (!isClassConstr) {
            this.reportParseError("Instance property declarations using 'this' may only be used in class constructors");
          }
          this.currentToken = this.scanner.scan();
          argFlags |= TypeScript$$14.VarFlags.Public | TypeScript$$14.VarFlags.Property;
          if (this.currentClassDefinition) {
            this.currentClassDefinition.varFlags |= TypeScript$$14.VarFlags.ClassSuperMustBeFirstCallInConstructor;
          }
        }
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Public) {
          argFlags |= TypeScript$$14.VarFlags.Public | TypeScript$$14.VarFlags.Property;
          if (this.currentClassDefinition) {
            this.currentClassDefinition.varFlags |= TypeScript$$14.VarFlags.ClassSuperMustBeFirstCallInConstructor;
          }
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Private) {
            argFlags |= TypeScript$$14.VarFlags.Private | TypeScript$$14.VarFlags.Property;
            if (this.currentClassDefinition) {
              this.currentClassDefinition.varFlags |= TypeScript$$14.VarFlags.ClassSuperMustBeFirstCallInConstructor;
            }
          } else {
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Static && isClassConstr) {
              this.reportParseError("Static properties can not be declared as parameter properties");
              this.currentToken = this.scanner.scan();
            }
          }
        }
        if (argFlags != TypeScript$$14.VarFlags.None) {
          if (!isClassConstr) {
            this.reportParseError("only constructor parameters can be properties");
          }
          this.currentToken = this.scanner.scan();
          if (TypeScript$$14.isModifier(this.currentToken)) {
            this.reportParseError("Multiple modifiers may not be applied to parameters");
            this.currentToken = this.scanner.scan();
          }
          if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TypeScript$$14.TokenID.This) {
            if (!isClassConstr) {
              this.reportParseError("Instance property declarations using 'this' may only be used in class constructors");
            }
            this.currentToken = this.scanner.scan();
            this.currentToken = this.scanner.scan();
          }
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.DotDotDot) {
            sawEllipsis = true;
            this.currentToken = this.scanner.scan();
            if (!(this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier) || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
              this.reportParseError("'...' parameters require both a parameter name and an array type annotation to be specified");
              sawEllipsis = false;
            }
          }
        }
        var argId = null;
        if (!haveFirstArgID && this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
          argId = TypeScript$$14.Identifier.fromToken(this.currentToken);
          argId.minChar = this.scanner.startPos;
          argId.limChar = this.scanner.pos;
        }
        if (haveFirstArgID || argId) {
          munchedArg = true;
          var type$$30 = null;
          var arg$$6 = null;
          if (haveFirstArgID && formals$$2.members.length) {
            arg$$6 = formals$$2.members[formals$$2.members.length - 1];
            if (arg$$6.isOptional) {
              hasOptional = true;
            }
          } else {
            arg$$6 = new TypeScript$$14.ArgDecl(argId);
            if (isGetter) {
              this.reportParseError("Property getters may not take any arguments");
            }
            if (isSetter && !firstArg) {
              this.reportParseError("Property setters may only take one argument");
            }
            arg$$6.minChar = argMinChar;
            arg$$6.preComments = this.parseComments();
            this.currentToken = this.scanner.scan();
          }
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Question) {
            arg$$6.isOptional = true;
            hasOptional = true;
            this.currentToken = this.scanner.scan();
          }
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon) {
            this.currentToken = this.scanner.scan();
            type$$30 = this.parseTypeReference(errorRecoverySet$$12, false);
          }
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Equals) {
            if (isSig) {
              this.reportParseError("Arguments in signatures may not have default values");
            }
            hasOptional = true;
            this.currentToken = this.scanner.scan();
            arg$$6.init = this.parseExpr(TypeScript$$14.ErrorRecoverySet.Comma | errorRecoverySet$$12, TypeScript$$14.OperatorPrecedence.Comma, false, TypeContext.NoTypes);
          }
          if (hasOptional && !arg$$6.isOptionalArg() && !sawEllipsis) {
            this.reportParseError("Optional parameters may only be followed by other optional parameters");
          }
          if (sawEllipsis && arg$$6.isOptionalArg()) {
            this.reportParseError("Varargs may not be optional or have default parameters");
          }
          if (sawEllipsis && !type$$30) {
            this.reportParseError("'...' parameters require both a parameter name and an array type annotation to be specified");
          }
          arg$$6.postComments = this.parseComments();
          arg$$6.typeExpr = type$$30;
          arg$$6.limChar = this.scanner.lastTokenLimChar();
          arg$$6.varFlags |= argFlags;
          if (!haveFirstArgID) {
            formals$$2.append(arg$$6);
          } else {
            haveFirstArgID = false;
          }
        }
        firstArg = false;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Comma) {
          if (munchedArg && !sawEllipsis) {
            this.currentToken = this.scanner.scan();
            continue;
          } else {
            this.reportParseError("Unexpected ',' in argument list");
            if (this.errorRecovery) {
              this.currentToken = this.scanner.scan();
              continue;
            }
          }
        } else {
          break;
        }
      }
      if (isIndexer) {
        this.checkCurrentToken(TypeScript$$14.TokenID.CloseBracket, errorRecoverySet$$12 | TypeScript$$14.ErrorRecoverySet.LCurly | TypeScript$$14.ErrorRecoverySet.SColon);
      } else {
        if (expectClosingRParen) {
          this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$12 | TypeScript$$14.ErrorRecoverySet.LCurly | TypeScript$$14.ErrorRecoverySet.SColon);
        }
      }
      formals$$2.limChar = this.scanner.lastTokenLimChar();
      return sawEllipsis;
    };
    Parser$$1.prototype.parseFncDecl = function(errorRecoverySet$$13, isDecl, requiresSignature$$1, isMethod$$1, methodName, indexer, isStatic, markedAsAmbient, modifiers$$3, lambdaArgContext, expectClosingRParen$$1) {
      var leftCurlyCount$$2 = this.scanner.leftCurlyCount;
      var rightCurlyCount$$2 = this.scanner.rightCurlyCount;
      var prevInConstr = this.parsingClassConstructorDefinition;
      this.parsingClassConstructorDefinition = false;
      var name$$48 = null;
      var fnMin = this.scanner.startPos;
      var minChar$$13 = this.scanner.pos;
      var prevNestingLevel = this.nestingLevel;
      var preComments$$2 = this.parseComments();
      var isLambda$$1 = !!lambdaArgContext;
      this.nestingLevel = 0;
      if (!this.style_funcInLoop && this.inLoop()) {
        this.reportParseStyleError("function declaration in loop");
      }
      if (!isMethod$$1 && !isStatic && !indexer && !lambdaArgContext) {
        this.currentToken = this.scanner.scan();
        this.state = ParseState.StartFncDecl;
        if (this.currentToken.tokenId != TypeScript$$14.TokenID.Identifier && !TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
          if (isDecl) {
            this.reportParseError("Function declaration must include identifier");
            this.nestingLevel = prevNestingLevel;
            return new TypeScript$$14.IncompleteAST(fnMin, this.scanner.pos);
          }
        } else {
          name$$48 = TypeScript$$14.Identifier.fromToken(this.currentToken);
          name$$48.minChar = this.scanner.startPos;
          name$$48.limChar = this.scanner.pos;
          this.currentToken = this.scanner.scan();
        }
      } else {
        if (methodName) {
          name$$48 = methodName;
        }
      }
      this.state = ParseState.FncDeclName;
      var args$$7 = new TypeScript$$14.ASTList;
      var variableArgList$$1 = false;
      var isOverload = false;
      var isGetter$$1 = TypeScript$$14.hasFlag(modifiers$$3, TypeScript$$14.Modifiers.Getter);
      var isSetter$$1 = TypeScript$$14.hasFlag(modifiers$$3, TypeScript$$14.Modifiers.Setter);
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen || indexer && this.currentToken.tokenId == TypeScript$$14.TokenID.OpenBracket || lambdaArgContext && (lambdaArgContext.preProcessedLambdaArgs || this.currentToken.tokenId == TypeScript$$14.TokenID.DotDotDot)) {
        variableArgList$$1 = this.parseFormalParameterList(errorRecoverySet$$13, args$$7, false, requiresSignature$$1, indexer, isGetter$$1, isSetter$$1, isLambda$$1, lambdaArgContext ? lambdaArgContext.preProcessedLambdaArgs : null, expectClosingRParen$$1);
      }
      this.state = ParseState.FncDeclArgs;
      var returnType$$1 = null;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon) {
        this.currentToken = this.scanner.scan();
        if (TypeScript$$14.hasFlag(modifiers$$3, TypeScript$$14.Modifiers.Setter)) {
          this.reportParseError("Property setters may not declare a return type");
        }
        returnType$$1 = this.parseTypeReference(errorRecoverySet$$13, true);
      }
      if (indexer && args$$7.members.length == 0) {
        this.reportParseError("Index signatures require a parameter type to be specified");
      }
      this.state = ParseState.FncDeclReturnType;
      if (isLambda$$1 && this.currentToken.tokenId != TypeScript$$14.TokenID.EqualsGreaterThan) {
        this.reportParseError("Expected '=>'");
      }
      if (isDecl && !(this.parsingDeclareFile || markedAsAmbient) && (!isMethod$$1 || !(this.ambientModule || this.ambientClass || this.inInterfaceDecl)) && this.currentToken.tokenId == TypeScript$$14.TokenID.Semicolon) {
        isOverload = true;
        isDecl = false;
        requiresSignature$$1 = true;
      }
      var svInFncDecl = this.inFncDecl;
      this.inFncDecl = true;
      var funcDecl$$7 = this.parseFunctionStatements(errorRecoverySet$$13 | TypeScript$$14.ErrorRecoverySet.RCurly, name$$48, false, isMethod$$1, args$$7, TypeScript$$14.AllowedElements.None, minChar$$13, requiresSignature$$1, TypeScript$$14.Modifiers.None);
      this.inFncDecl = svInFncDecl;
      funcDecl$$7.variableArgList = variableArgList$$1;
      funcDecl$$7.isOverload = isOverload;
      if (!requiresSignature$$1) {
        funcDecl$$7.fncFlags |= TypeScript$$14.FncFlags.Definition;
      }
      if (isStatic) {
        funcDecl$$7.fncFlags |= TypeScript$$14.FncFlags.Static;
      }
      if (requiresSignature$$1) {
        funcDecl$$7.fncFlags |= TypeScript$$14.FncFlags.Signature;
      }
      if (indexer) {
        funcDecl$$7.fncFlags |= TypeScript$$14.FncFlags.IndexerMember;
      }
      funcDecl$$7.returnTypeAnnotation = returnType$$1;
      if (isMethod$$1) {
        funcDecl$$7.fncFlags |= TypeScript$$14.FncFlags.Method;
        funcDecl$$7.fncFlags |= TypeScript$$14.FncFlags.ClassPropertyMethodExported;
      }
      funcDecl$$7.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount$$2;
      funcDecl$$7.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount$$2;
      this.nestingLevel = prevNestingLevel;
      this.parsingClassConstructorDefinition = prevInConstr;
      funcDecl$$7.preComments = preComments$$2;
      return funcDecl$$7;
    };
    Parser$$1.prototype.convertToTypeReference = function(ast$$37) {
      var result$$9;
      switch(ast$$37.nodeType) {
        case TypeScript$$14.NodeType.TypeRef:
          return ast$$37;
        case TypeScript$$14.NodeType.Name:
          result$$9 = new TypeScript$$14.TypeReference(ast$$37, 0);
          result$$9.minChar = ast$$37.minChar;
          result$$9.limChar = ast$$37.limChar;
          return result$$9;
        case TypeScript$$14.NodeType.Index:
          var expr$$4 = ast$$37;
          result$$9 = this.convertToTypeReference(expr$$4.operand1);
          if (result$$9) {
            result$$9.arrayCount++;
            result$$9.minChar = expr$$4.minChar;
            result$$9.limChar = expr$$4.limChar;
            return result$$9;
          } else {
            var etr$$1 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
            return etr$$1;
          }
        ;
      }
      return null;
    };
    Parser$$1.prototype.parseArgList = function(errorRecoverySet$$14) {
      var args$$8 = new TypeScript$$14.ASTList;
      args$$8.minChar = this.scanner.startPos;
      this.currentToken = this.scanner.scan();
      if (this.currentToken.tokenId !== TypeScript$$14.TokenID.CloseParen) {
        for (;true;) {
          if (args$$8.members.length > 65535) {
            this.reportParseError("max number of args exceeded");
            break;
          }
          var arg$$7 = this.parseExpr(TypeScript$$14.ErrorRecoverySet.Comma | errorRecoverySet$$14, TypeScript$$14.OperatorPrecedence.Comma, true, TypeContext.NoTypes);
          args$$8.append(arg$$7);
          if (this.currentToken.tokenId != TypeScript$$14.TokenID.Comma) {
            break;
          }
          this.currentToken = this.scanner.scan();
        }
      }
      args$$8.limChar = this.scanner.pos;
      return args$$8;
    };
    Parser$$1.prototype.parseBaseList = function(extendsList$$4, implementsList$$3, errorRecoverySet$$15, isClass) {
      var keyword = true;
      var currentList = extendsList$$4;
      for (;;) {
        if (keyword) {
          if (this.currentToken.tokenId === TypeScript$$14.TokenID.Implements) {
            currentList = implementsList$$3;
          } else {
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Extends && !this.requiresExtendsBlock) {
              this.requiresExtendsBlock = isClass;
            }
          }
          this.currentToken = this.scanner.scan();
          keyword = false;
        }
        var baseName$$3 = null;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
          var minChar$$14 = this.scanner.startPos;
          baseName$$3 = TypeScript$$14.Identifier.fromToken(this.currentToken);
          baseName$$3.minChar = minChar$$14;
          baseName$$3.limChar = this.scanner.pos;
          baseName$$3 = this.parseNamedType(errorRecoverySet$$15 | TypeScript$$14.ErrorRecoverySet.LCurly, minChar$$14, baseName$$3, false);
        } else {
          this.reportParseError("Expected base name");
          if (this.errorRecovery) {
            baseName$$3 = new TypeScript$$14.MissingIdentifier;
            baseName$$3.minChar = this.scanner.pos;
            baseName$$3.limChar = this.scanner.pos;
            baseName$$3.flags |= TypeScript$$14.ASTFlags.Error;
          }
        }
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen) {
          if (isClass) {
            this.reportParseError("Base classes may only be initialized via a 'super' call within the constructor body");
          } else {
            this.reportParseError("Interfaces may not be extended with a call expression");
          }
        } else {
          currentList.append(baseName$$3);
        }
        if (isClass && currentList == extendsList$$4 && extendsList$$4.members.length > 1) {
          this.reportParseError("A class may only extend one other class");
        }
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Comma) {
          this.currentToken = this.scanner.scan();
          continue;
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Extends || this.currentToken.tokenId == TypeScript$$14.TokenID.Implements) {
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Extends && !this.requiresExtendsBlock) {
              this.requiresExtendsBlock = isClass;
            }
            currentList = extendsList$$4;
            keyword = true;
            continue;
          }
        }
        break;
      }
    };
    Parser$$1.prototype.parseClassDecl = function(errorRecoverySet$$16, minChar$$15, modifiers$$4) {
      var leftCurlyCount$$3 = this.scanner.leftCurlyCount;
      var rightCurlyCount$$3 = this.scanner.rightCurlyCount;
      if ((modifiers$$4 & TypeScript$$14.Modifiers.Readonly) != TypeScript$$14.Modifiers.None) {
        this.reportParseError("const modifier is implicit for class");
      }
      if (this.parsingDeclareFile || this.ambientModule) {
        modifiers$$4 |= TypeScript$$14.Modifiers.Ambient;
        modifiers$$4 |= TypeScript$$14.Modifiers.Exported;
      }
      var classIsMarkedAsAmbient = this.parsingDeclareFile || (modifiers$$4 & TypeScript$$14.Modifiers.Ambient) != TypeScript$$14.Modifiers.None;
      var svAmbientClass = this.ambientClass;
      this.ambientClass = classIsMarkedAsAmbient;
      this.currentToken = this.scanner.scan();
      var name$$49 = null;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || !TypeScript$$14.isPrimitiveTypeToken(this.currentToken) && TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
        name$$49 = TypeScript$$14.Identifier.fromToken(this.currentToken);
        name$$49.minChar = this.scanner.startPos;
        name$$49.limChar = this.scanner.pos;
        this.currentToken = this.scanner.scan();
      } else {
        this.reportParseError("class missing name");
        if (this.errorRecovery) {
          name$$49 = new TypeScript$$14.MissingIdentifier;
          name$$49.minChar = this.scanner.pos;
          name$$49.limChar = this.scanner.pos;
          name$$49.flags |= TypeScript$$14.ASTFlags.Error;
        }
      }
      var extendsList$$5 = null;
      var implementsList$$4 = null;
      var requiresSignature$$2 = false;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Extends || this.currentToken.tokenId == TypeScript$$14.TokenID.Implements) {
        extendsList$$5 = new TypeScript$$14.ASTList;
        implementsList$$4 = new TypeScript$$14.ASTList;
        this.parseBaseList(extendsList$$5, implementsList$$4, errorRecoverySet$$16, true);
      }
      var classDecl$$4 = new TypeScript$$14.ClassDeclaration(name$$49, new TypeScript$$14.ASTList, extendsList$$5, implementsList$$4);
      this.currentClassDefinition = classDecl$$4;
      this.parseClassElements(classDecl$$4, errorRecoverySet$$16, modifiers$$4);
      if (this.ambientModule || this.parsingDeclareFile || TypeScript$$14.hasFlag(modifiers$$4, TypeScript$$14.Modifiers.Exported)) {
        classDecl$$4.varFlags |= TypeScript$$14.VarFlags.Exported;
      }
      if (this.ambientModule || TypeScript$$14.hasFlag(modifiers$$4, TypeScript$$14.Modifiers.Ambient)) {
        classDecl$$4.varFlags |= TypeScript$$14.VarFlags.Ambient;
      }
      classDecl$$4.varFlags |= TypeScript$$14.VarFlags.Class;
      this.ambientClass = svAmbientClass;
      classDecl$$4.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount$$3;
      classDecl$$4.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount$$3;
      return classDecl$$4;
    };
    Parser$$1.prototype.parseClassElements = function(classDecl$$5, errorRecoverySet$$17, parentModifiers$$2) {
      var modifiers$$5 = parentModifiers$$2;
      var resetModifiers = false;
      var membersMinChar$$1 = this.scanner.startPos;
      this.checkCurrentToken(TypeScript$$14.TokenID.OpenBrace, errorRecoverySet$$17);
      this.nestingLevel++;
      var currentMemberMinChar = this.scanner.startPos;
      var wasGetOrSetId = false;
      for (;!(this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace || this.currentToken.tokenId == TypeScript$$14.TokenID.EndOfFile);) {
        var scanNext = true;
        var publicOrPrivateFlags = TypeScript$$14.Modifiers.Public | TypeScript$$14.Modifiers.Private;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Get) {
          if (modifiers$$5 & TypeScript$$14.Modifiers.Getter) {
            this.reportParseError("Duplicate 'get' declaration in class body");
          }
          if (modifiers$$5 & TypeScript$$14.Modifiers.Setter) {
            this.reportParseError("Getter already marked as a setter");
          }
          modifiers$$5 |= TypeScript$$14.Modifiers.Getter;
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Set) {
            if (modifiers$$5 & TypeScript$$14.Modifiers.Setter) {
              this.reportParseError("Duplicate 'set' declaration in class body");
            }
            if (modifiers$$5 & TypeScript$$14.Modifiers.Getter) {
              this.reportParseError("Setter already marked as a getter");
            }
            modifiers$$5 |= TypeScript$$14.Modifiers.Setter;
          } else {
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Private) {
              if (modifiers$$5 & publicOrPrivateFlags) {
                this.reportParseError("Multiple modifiers may not be applied to class members");
              }
              modifiers$$5 |= TypeScript$$14.Modifiers.Private;
            } else {
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.Public) {
                if (modifiers$$5 & publicOrPrivateFlags) {
                  this.reportParseError("Multiple modifiers may not be applied to class members");
                }
                modifiers$$5 |= TypeScript$$14.Modifiers.Public;
              } else {
                if (this.currentToken.tokenId == TypeScript$$14.TokenID.Static) {
                  if (modifiers$$5 & TypeScript$$14.Modifiers.Static) {
                    this.reportParseError("Multiple modifiers may not be applied to class members");
                  }
                  modifiers$$5 |= TypeScript$$14.Modifiers.Static;
                } else {
                  if (this.currentToken.tokenId == TypeScript$$14.TokenID.Constructor) {
                    if (modifiers$$5 != parentModifiers$$2) {
                      this.reportParseError("Constructors may not have modifiers");
                    }
                    this.parseClassConstructorDeclaration(currentMemberMinChar, errorRecoverySet$$17, modifiers$$5);
                    scanNext = false;
                    resetModifiers = true;
                  } else {
                    if (wasGetOrSetId || this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToIDName(this.currentToken)) {
                      var idText = wasGetOrSetId ? modifiers$$5 & TypeScript$$14.Modifiers.Getter ? "get" : "set" : this.currentToken.getText();
                      var id$$11 = wasGetOrSetId ? new TypeScript$$14.Identifier(idText) : TypeScript$$14.Identifier.fromToken(this.currentToken);
                      id$$11.minChar = this.scanner.startPos;
                      id$$11.limChar = this.scanner.pos;
                      if (wasGetOrSetId) {
                        modifiers$$5 = modifiers$$5 ^ (modifiers$$5 & TypeScript$$14.Modifiers.Getter ? TypeScript$$14.Modifiers.Getter : TypeScript$$14.Modifiers.Setter);
                        wasGetOrSetId = false;
                      } else {
                        this.currentToken = this.scanner.scan();
                      }
                      if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen) {
                        this.parseClassMemberFunctionDeclaration(id$$11, currentMemberMinChar, errorRecoverySet$$17, modifiers$$5);
                        scanNext = false;
                      } else {
                        if (modifiers$$5 & TypeScript$$14.Modifiers.Getter || modifiers$$5 & TypeScript$$14.Modifiers.Setter) {
                          this.reportParseError("Property accessors must be functions");
                        }
                        var varDecl$$6 = this.parseClassMemberVariableDeclaration(id$$11, currentMemberMinChar, false, errorRecoverySet$$17, modifiers$$5);
                        if (varDecl$$6.init && varDecl$$6.init.nodeType == TypeScript$$14.NodeType.FuncDecl) {
                          if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace) {
                            scanNext = false;
                          }
                        } else {
                          if (varDecl$$6.init && varDecl$$6.init.nodeType == TypeScript$$14.NodeType.ObjectLit && this.currentToken.tokenId != TypeScript$$14.TokenID.Semicolon) {
                            scanNext = false;
                            varDecl$$6.init.flags |= TypeScript$$14.ASTFlags.AutomaticSemicolon;
                          } else {
                            if (this.currentToken.tokenId != TypeScript$$14.TokenID.Semicolon) {
                              this.reportParseError("Expected ';'");
                              scanNext = false;
                            }
                          }
                        }
                      }
                      resetModifiers = true;
                    } else {
                      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Super) {
                        this.reportParseError("Base class initializers must be the first statement in a class definition");
                      } else {
                        if (!wasGetOrSetId && (modifiers$$5 & TypeScript$$14.Modifiers.Getter || modifiers$$5 & TypeScript$$14.Modifiers.Setter) && (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen || this.currentToken.tokenId == TypeScript$$14.TokenID.Equals || this.currentToken.tokenId == TypeScript$$14.TokenID.Colon || this.currentToken.tokenId == TypeScript$$14.TokenID.Semicolon)) {
                          wasGetOrSetId = true;
                          scanNext = false;
                        } else {
                          if (this.currentToken.tokenId != TypeScript$$14.TokenID.Semicolon) {
                            this.reportParseError("Unexpected '" + this.currentToken.getText() + "' in class definition");
                            resetModifiers = true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (scanNext) {
          this.currentToken = this.scanner.scan();
          if (this.currentToken === undefined) {
            this.currentToken = this.scanner.scan();
          }
        }
        if (resetModifiers) {
          modifiers$$5 = parentModifiers$$2;
          currentMemberMinChar = this.scanner.startPos;
          resetModifiers = false;
        }
      }
      var membersLimChar = this.scanner.pos;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace) {
        classDecl$$5.endingToken = new TypeScript$$14.ASTSpan;
        classDecl$$5.endingToken.minChar = this.scanner.startPos;
        classDecl$$5.endingToken.limChar = this.scanner.pos;
        if (!this.currentClassDefinition.members.members.length) {
          this.currentClassDefinition.preComments = this.parseComments();
        }
        this.currentToken = this.scanner.scan();
      }
      this.nestingLevel--;
      this.currentClassDefinition.members.minChar = membersMinChar$$1;
      this.currentClassDefinition.members.limChar = membersLimChar;
      this.currentClassDefinition.limChar = membersLimChar;
      this.currentClassDefinition = null;
    };
    Parser$$1.prototype.parseClassConstructorDeclaration = function(minChar$$16, errorRecoverySet$$18, modifiers$$6) {
      this.parsingClassConstructorDefinition = true;
      var isAmbient$$1 = this.parsingDeclareFile || TypeScript$$14.hasFlag(modifiers$$6, TypeScript$$14.Modifiers.Ambient);
      var args$$9 = new TypeScript$$14.ASTList;
      var variableArgList$$2 = false;
      var preComments$$3 = this.parseComments();
      this.currentToken = this.scanner.scan();
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen) {
        variableArgList$$2 = this.parseFormalParameterList(errorRecoverySet$$18, args$$9, true, isAmbient$$1, false, false, false, false, null, true);
        if (args$$9.members.length > 0) {
          var lastArg$$1 = args$$9.members[args$$9.members.length - 1]
        }
      }
      var requiresSignature$$3 = isAmbient$$1 || this.currentToken.tokenId == TypeScript$$14.TokenID.Semicolon;
      if (requiresSignature$$3) {
        var i$$51 = 0;
        for (;i$$51 < args$$9.members.length;i$$51++) {
          var arg$$8 = args$$9.members[i$$51];
          if (TypeScript$$14.hasFlag(arg$$8.varFlags, TypeScript$$14.VarFlags.Property)) {
            this.reportParseError("Overload or ambient signatures may not specify parameter properties", arg$$8.minChar, arg$$8.limChar);
          }
        }
      }
      if (!requiresSignature$$3) {
        this.currentClassDefinition.constructorNestingLevel = this.nestingLevel + 1;
      }
      var constructorFuncDecl = this.parseFunctionStatements(errorRecoverySet$$18 | TypeScript$$14.ErrorRecoverySet.RCurly, this.currentClassDefinition.name, true, false, args$$9, TypeScript$$14.AllowedElements.Properties, minChar$$16, requiresSignature$$3, modifiers$$6);
      constructorFuncDecl.preComments = preComments$$3;
      if (requiresSignature$$3 && !isAmbient$$1) {
        constructorFuncDecl.isOverload = true;
      }
      constructorFuncDecl.variableArgList = variableArgList$$2;
      this.currentClassDecl = null;
      constructorFuncDecl.returnTypeAnnotation = this.convertToTypeReference(this.currentClassDefinition.name);
      constructorFuncDecl.classDecl = this.currentClassDefinition;
      if (isAmbient$$1) {
        constructorFuncDecl.fncFlags |= TypeScript$$14.FncFlags.Ambient;
      }
      if (requiresSignature$$3) {
        constructorFuncDecl.fncFlags |= TypeScript$$14.FncFlags.Signature;
      }
      if (this.ambientModule || TypeScript$$14.hasFlag(modifiers$$6, TypeScript$$14.Modifiers.Exported)) {
        constructorFuncDecl.fncFlags |= TypeScript$$14.FncFlags.Exported;
      }
      if (this.currentClassDefinition.constructorDecl) {
        if (!isAmbient$$1 && !this.currentClassDefinition.constructorDecl.isSignature() && !constructorFuncDecl.isSignature()) {
          this.reportParseError("Duplicate constructor definition");
        }
      }
      if (isAmbient$$1 || !constructorFuncDecl.isSignature()) {
        this.currentClassDefinition.constructorDecl = constructorFuncDecl;
      }
      constructorFuncDecl.fncFlags |= TypeScript$$14.FncFlags.ClassMethod;
      this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = constructorFuncDecl;
      this.parsingClassConstructorDefinition = false;
      return constructorFuncDecl;
    };
    Parser$$1.prototype.parseClassMemberVariableDeclaration = function(text$$15, minChar$$17, isDeclaredInConstructor, errorRecoverySet$$19, modifiers$$7) {
      var varDecl$$7 = new TypeScript$$14.VarDecl(text$$15, this.nestingLevel);
      varDecl$$7.minChar = minChar$$17;
      var isStatic$$1 = false;
      varDecl$$7.preComments = this.parseComments();
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon) {
        this.currentToken = this.scanner.scan();
        varDecl$$7.typeExpr = this.parseTypeReference(errorRecoverySet$$19 | TypeScript$$14.ErrorRecoverySet.Asg | TypeScript$$14.ErrorRecoverySet.Comma, false);
        if (varDecl$$7.typeExpr && varDecl$$7.typeExpr.nodeType == TypeScript$$14.NodeType.TypeRef) {
          var typeExpr = varDecl$$7.typeExpr;
          if (typeExpr.term && typeExpr.term.nodeType == TypeScript$$14.NodeType.FuncDecl) {
            typeExpr.term.preComments = varDecl$$7.preComments;
          }
        }
      }
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Equals) {
        if (this.parsingDeclareFile || TypeScript$$14.hasFlag(modifiers$$7, TypeScript$$14.Modifiers.Ambient)) {
          this.reportParseError("context does not permit variable initializer");
          if (this.errorRecovery) {
            this.skip(errorRecoverySet$$19);
            varDecl$$7.flags |= TypeScript$$14.ASTFlags.Error;
            varDecl$$7.limChar = this.scanner.lastTokenLimChar();
            return varDecl$$7;
          }
        }
        this.currentToken = this.scanner.scan();
        varDecl$$7.init = this.parseExpr(TypeScript$$14.ErrorRecoverySet.Comma | errorRecoverySet$$19, TypeScript$$14.OperatorPrecedence.Comma, true, TypeContext.NoTypes);
        varDecl$$7.limChar = varDecl$$7.init.limChar;
        if (!(modifiers$$7 & TypeScript$$14.Modifiers.Static)) {
          this.currentClassDefinition.varFlags |= TypeScript$$14.VarFlags.ClassSuperMustBeFirstCallInConstructor;
        }
      } else {
        varDecl$$7.limChar = this.scanner.pos;
      }
      if (modifiers$$7 & TypeScript$$14.Modifiers.Static) {
        varDecl$$7.varFlags |= TypeScript$$14.VarFlags.Static;
        isStatic$$1 = true;
      }
      if ((modifiers$$7 & TypeScript$$14.Modifiers.Private) != TypeScript$$14.Modifiers.None) {
        varDecl$$7.varFlags |= TypeScript$$14.VarFlags.Private;
      } else {
        varDecl$$7.varFlags |= TypeScript$$14.VarFlags.Public;
      }
      varDecl$$7.varFlags |= TypeScript$$14.VarFlags.Property;
      if (isDeclaredInConstructor) {
        varDecl$$7.varFlags |= TypeScript$$14.VarFlags.ClassConstructorProperty;
      }
      if (!isDeclaredInConstructor && !isStatic$$1) {
        varDecl$$7.varFlags |= TypeScript$$14.VarFlags.ClassBodyProperty;
      }
      this.currentClassDefinition.knownMemberNames[text$$15.actualText] = true;
      if (!isDeclaredInConstructor) {
        this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = varDecl$$7;
      }
      varDecl$$7.postComments = this.parseComments();
      return varDecl$$7;
    };
    Parser$$1.prototype.parseClassMemberFunctionDeclaration = function(methodName$$1, minChar$$18, errorRecoverySet$$20, modifiers$$8) {
      var wasAccessorID = this.prevIDTok != null;
      var isAccessor = TypeScript$$14.hasFlag(modifiers$$8, TypeScript$$14.Modifiers.Getter) || TypeScript$$14.hasFlag(modifiers$$8, TypeScript$$14.Modifiers.Setter);
      var isStatic$$2 = TypeScript$$14.hasFlag(modifiers$$8, TypeScript$$14.Modifiers.Static);
      var isAmbient$$2 = this.ambientModule || TypeScript$$14.hasFlag(modifiers$$8, TypeScript$$14.Modifiers.Ambient);
      errorRecoverySet$$20 |= TypeScript$$14.ErrorRecoverySet.RParen;
      if (isAccessor && modifiers$$8 & TypeScript$$14.Modifiers.Ambient) {
        this.reportParseError("Property accessors may not be declared in ambient classes");
      }
      var ast$$38 = this.parseFncDecl(errorRecoverySet$$20, true, isAmbient$$2, true, methodName$$1, false, isStatic$$2, isAmbient$$2, modifiers$$8, null, true);
      if (ast$$38.nodeType == TypeScript$$14.NodeType.Error) {
        return ast$$38;
      }
      var funcDecl$$8 = ast$$38;
      funcDecl$$8.minChar = minChar$$18;
      if (funcDecl$$8.bod !== null) {
        funcDecl$$8.limChar = funcDecl$$8.bod.limChar;
      }
      if (modifiers$$8 & TypeScript$$14.Modifiers.Private) {
        funcDecl$$8.fncFlags |= TypeScript$$14.FncFlags.Private;
      } else {
        funcDecl$$8.fncFlags |= TypeScript$$14.FncFlags.Public;
      }
      if (isStatic$$2) {
        funcDecl$$8.fncFlags |= TypeScript$$14.FncFlags.Static;
      }
      if (isAccessor) {
        if (TypeScript$$14.hasFlag(modifiers$$8, TypeScript$$14.Modifiers.Getter)) {
          funcDecl$$8.fncFlags |= TypeScript$$14.FncFlags.GetAccessor;
          funcDecl$$8.hint = "get" + funcDecl$$8.name.actualText;
        } else {
          funcDecl$$8.fncFlags |= TypeScript$$14.FncFlags.SetAccessor;
          funcDecl$$8.hint = "set" + funcDecl$$8.name.actualText;
        }
        funcDecl$$8.fncFlags |= TypeScript$$14.FncFlags.IsFunctionExpression;
        if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
          this.reportParseError("Property accessors are only available when targeting ES5 or greater", funcDecl$$8.minChar, funcDecl$$8.limChar);
        }
      }
      funcDecl$$8.fncFlags |= TypeScript$$14.FncFlags.ClassMethod;
      this.currentClassDefinition.knownMemberNames[methodName$$1.actualText] = true;
      this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = funcDecl$$8;
      return funcDecl$$8;
    };
    Parser$$1.prototype.parseTypeMember = function(errorRecoverySet$$21) {
      var minChar$$19 = this.scanner.startPos;
      var propertyDecl = this.parsePropertyDeclaration(errorRecoverySet$$21, TypeScript$$14.Modifiers.Public, true, false);
      if (propertyDecl) {
        propertyDecl.minChar = minChar$$19;
        if (propertyDecl.nodeType == TypeScript$$14.NodeType.VarDecl) {
          this.checkCurrentToken(TypeScript$$14.TokenID.Semicolon, errorRecoverySet$$21);
        }
      }
      return propertyDecl;
    };
    Parser$$1.prototype.parseTypeMemberList = function(errorRecoverySet$$22, members$$9) {
      errorRecoverySet$$22 |= TypeScript$$14.ErrorRecoverySet.TypeScriptS;
      for (;true;) {
        switch(this.currentToken.tokenId) {
          case TypeScript$$14.TokenID.CloseBrace:
          ;
          case TypeScript$$14.TokenID.EndOfFile:
            members$$9.limChar = this.scanner.pos;
            return;
        }
        var element$$2 = this.parseTypeMember(errorRecoverySet$$22);
        if (element$$2) {
          members$$9.append(element$$2);
        }
      }
    };
    Parser$$1.prototype.parseInterfaceDecl = function(errorRecoverySet$$23, modifiers$$9) {
      var leftCurlyCount$$4 = this.scanner.leftCurlyCount;
      var rightCurlyCount$$4 = this.scanner.rightCurlyCount;
      this.currentToken = this.scanner.scan();
      var minChar$$20 = this.scanner.pos;
      var name$$50 = null;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || !TypeScript$$14.isPrimitiveTypeToken(this.currentToken) && TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
        name$$50 = TypeScript$$14.Identifier.fromToken(this.currentToken);
        name$$50.minChar = this.scanner.startPos;
        name$$50.limChar = this.scanner.pos;
        this.currentToken = this.scanner.scan();
      } else {
        this.reportParseError("interface missing name");
        if (this.errorRecovery) {
          name$$50 = new TypeScript$$14.MissingIdentifier;
          name$$50.minChar = this.scanner.pos;
          name$$50.limChar = this.scanner.pos;
          name$$50.flags |= TypeScript$$14.ASTFlags.Error;
        }
      }
      var extendsList$$6 = null;
      var implementsList$$5 = null;
      if (this.currentToken.tokenId === TypeScript$$14.TokenID.Extends || this.currentToken.tokenId === TypeScript$$14.TokenID.Implements) {
        if (this.currentToken.tokenId === TypeScript$$14.TokenID.Implements) {
          this.reportParseError("Expected 'extends'");
        }
        extendsList$$6 = new TypeScript$$14.ASTList;
        implementsList$$5 = new TypeScript$$14.ASTList;
        extendsList$$6.minChar = this.scanner.startPos;
        this.parseBaseList(extendsList$$6, implementsList$$5, errorRecoverySet$$23, false);
      }
      var membersMinChar$$2 = this.scanner.startPos;
      this.checkCurrentToken(TypeScript$$14.TokenID.OpenBrace, errorRecoverySet$$23 | TypeScript$$14.ErrorRecoverySet.TypeScriptS);
      var members$$10 = new TypeScript$$14.ASTList;
      members$$10.minChar = membersMinChar$$2;
      var prevInInterfaceDecl$$1 = this.inInterfaceDecl;
      this.inInterfaceDecl = true;
      this.parseTypeMemberList(errorRecoverySet$$23 | TypeScript$$14.ErrorRecoverySet.RCurly, members$$10);
      this.inInterfaceDecl = prevInInterfaceDecl$$1;
      this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$23);
      var interfaceDecl$$1 = new TypeScript$$14.InterfaceDeclaration(name$$50, members$$10, extendsList$$6, null);
      if (TypeScript$$14.hasFlag(modifiers$$9, TypeScript$$14.Modifiers.Private)) {
        interfaceDecl$$1.varFlags |= TypeScript$$14.VarFlags.Private;
      }
      if (TypeScript$$14.hasFlag(modifiers$$9, TypeScript$$14.Modifiers.Public)) {
        interfaceDecl$$1.varFlags |= TypeScript$$14.VarFlags.Public;
      }
      if (this.parsingDeclareFile || this.ambientModule || TypeScript$$14.hasFlag(modifiers$$9, TypeScript$$14.Modifiers.Exported)) {
        interfaceDecl$$1.varFlags |= TypeScript$$14.VarFlags.Exported;
      }
      interfaceDecl$$1.limChar = members$$10.limChar;
      interfaceDecl$$1.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount$$4;
      interfaceDecl$$1.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount$$4;
      return interfaceDecl$$1;
    };
    Parser$$1.prototype.makeVarDecl = function(id$$12, nest$$1) {
      var varDecl$$8 = new TypeScript$$14.VarDecl(id$$12, nest$$1);
      var currentVarList = this.topVarList();
      if (currentVarList) {
        currentVarList.append(varDecl$$8);
      }
      return varDecl$$8;
    };
    Parser$$1.prototype.parsePropertyDeclaration = function(errorRecoverySet$$24, modifiers$$10, requireSignature, isStatic$$3) {
      var text$$16 = null;
      var minChar$$21 = this.scanner.startPos;
      var nameLimChar = minChar$$21;
      var isNew = false;
      var isIndexer$$1 = false;
      var wasAccessorID$$1 = this.prevIDTok != null;
      var isAccessor$$1 = TypeScript$$14.hasFlag(modifiers$$10, TypeScript$$14.Modifiers.Getter) || TypeScript$$14.hasFlag(modifiers$$10, TypeScript$$14.Modifiers.Setter);
      if (this.parsingDeclareFile || this.ambientModule || TypeScript$$14.hasFlag(modifiers$$10, TypeScript$$14.Modifiers.Ambient)) {
        requireSignature = true;
      }
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen && !wasAccessorID$$1) {
        if (!requireSignature && !isStatic$$3) {
          this.reportParseError("Expected identifier in property declaration");
          if (this.errorRecovery) {
            this.skip(errorRecoverySet$$24);
            text$$16 = new TypeScript$$14.MissingIdentifier;
          }
        }
      } else {
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.New) {
          if (requireSignature) {
            this.currentToken = this.scanner.scan();
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen) {
              isNew = true;
            }
          }
          if (!isNew) {
            if (!requireSignature) {
              this.currentToken = this.scanner.scan();
            }
            text$$16 = new TypeScript$$14.Identifier("new");
            text$$16.minChar = this.scanner.pos - 3;
            text$$16.limChar = this.scanner.pos;
            nameLimChar = this.scanner.pos;
          }
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenBracket && requireSignature) {
            isIndexer$$1 = true;
            text$$16 = new TypeScript$$14.Identifier("__item");
          } else {
            if (this.currentToken.tokenId != TypeScript$$14.TokenID.Identifier && !TypeScript$$14.convertTokToIDName(this.currentToken) && !wasAccessorID$$1) {
              this.reportParseError("Expected identifier in property declaration");
              if (this.errorRecovery) {
                var eminChar = this.scanner.startPos;
                var curpos$$1 = this.scanner.pos;
                this.skip(errorRecoverySet$$24 & ~TypeScript$$14.ErrorRecoverySet.Comma);
                if (this.scanner.pos == curpos$$1) {
                  this.currentToken = this.scanner.scan();
                }
                var epd = new TypeScript$$14.VarDecl(new TypeScript$$14.MissingIdentifier, this.nestingLevel);
                epd.flags |= TypeScript$$14.ASTFlags.Error;
                epd.minChar = eminChar;
                epd.limChar = this.scanner.lastTokenLimChar();
                return epd;
              }
            } else {
              if (wasAccessorID$$1) {
                text$$16 = TypeScript$$14.Identifier.fromToken(this.prevIDTok);
                text$$16.minChar = this.scanner.lastTokenLimChar() - 3;
                text$$16.limChar = this.scanner.lastTokenLimChar();
                nameLimChar = text$$16.limChar;
                if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
                  this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                }
                if (this.currentToken.getText() == text$$16.actualText && this.currentToken != this.prevIDTok) {
                  this.currentToken = this.scanner.scan();
                }
                this.prevIDTok = null;
              } else {
                text$$16 = TypeScript$$14.Identifier.fromToken(this.currentToken);
                text$$16.minChar = this.scanner.startPos;
                text$$16.limChar = this.scanner.pos;
                nameLimChar = this.scanner.pos;
                this.currentToken = this.scanner.scan();
              }
            }
          }
        }
      }
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Question) {
        if (this.inInterfaceDecl && text$$16) {
          text$$16.flags |= TypeScript$$14.ASTFlags.OptionalName;
        } else {
          this.reportParseError("Optional properties may only be declared on interface or object types");
        }
        this.currentToken = this.scanner.scan();
      }
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.OpenParen || isIndexer$$1 && this.currentToken.tokenId == TypeScript$$14.TokenID.OpenBracket) {
        var ers = errorRecoverySet$$24 | TypeScript$$14.ErrorRecoverySet.RParen;
        if (isIndexer$$1) {
          ers = errorRecoverySet$$24 | TypeScript$$14.ErrorRecoverySet.RBrack;
        }
        var ast$$39 = this.parseFncDecl(ers, true, requireSignature, !this.inFncDecl, text$$16, isIndexer$$1, isStatic$$3, this.parsingDeclareFile || TypeScript$$14.hasFlag(modifiers$$10, TypeScript$$14.Modifiers.Ambient), modifiers$$10, null, true);
        var funcDecl$$9;
        if (ast$$39.nodeType == TypeScript$$14.NodeType.Error) {
          return ast$$39;
        } else {
          funcDecl$$9 = ast$$39;
        }
        if (funcDecl$$9.name) {
          funcDecl$$9.name.minChar = minChar$$21;
          funcDecl$$9.name.limChar = nameLimChar;
        }
        if ((modifiers$$10 & TypeScript$$14.Modifiers.Public) != TypeScript$$14.Modifiers.None) {
          funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.Public;
        }
        if ((modifiers$$10 & TypeScript$$14.Modifiers.Private) != TypeScript$$14.Modifiers.None) {
          funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.Private;
        }
        if (isStatic$$3) {
          funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.Static;
        }
        if (this.parsingDeclareFile || TypeScript$$14.hasFlag(modifiers$$10, TypeScript$$14.Modifiers.Ambient)) {
          funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.Ambient;
        }
        if (isAccessor$$1) {
          if (TypeScript$$14.hasFlag(modifiers$$10, TypeScript$$14.Modifiers.Getter)) {
            funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.GetAccessor;
            funcDecl$$9.hint = "get" + funcDecl$$9.name.actualText;
          } else {
            funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.SetAccessor;
            funcDecl$$9.hint = "set" + funcDecl$$9.name.actualText;
          }
          funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.IsFunctionExpression;
          if (modifiers$$10 & TypeScript$$14.Modifiers.Ambient) {
            this.reportParseError("Property accessors may not be declared in ambient types");
          }
        }
        if (text$$16 == null) {
          if (isNew) {
            funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.ConstructMember;
            funcDecl$$9.hint = "_construct";
            funcDecl$$9.classDecl = this.currentClassDecl;
          } else {
            funcDecl$$9.hint = "_call";
            funcDecl$$9.fncFlags |= TypeScript$$14.FncFlags.CallMember;
          }
        }
        return funcDecl$$9;
      } else {
        var varDecl$$9 = new TypeScript$$14.VarDecl(text$$16, this.nestingLevel);
        varDecl$$9.preComments = this.parseComments();
        varDecl$$9.minChar = minChar$$21;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon) {
          this.currentToken = this.scanner.scan();
          varDecl$$9.typeExpr = this.parseTypeReference(errorRecoverySet$$24 | TypeScript$$14.ErrorRecoverySet.Asg | TypeScript$$14.ErrorRecoverySet.Comma, false);
          if (varDecl$$9.typeExpr && varDecl$$9.typeExpr.nodeType == TypeScript$$14.NodeType.TypeRef) {
            var typeExpr$$1 = varDecl$$9.typeExpr;
            if (typeExpr$$1.term && typeExpr$$1.term.nodeType == TypeScript$$14.NodeType.FuncDecl) {
              typeExpr$$1.term.preComments = varDecl$$9.preComments;
            }
          }
        }
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Equals) {
          if (requireSignature) {
            this.reportParseError("context does not permit variable initializer");
            if (this.errorRecovery) {
              this.skip(errorRecoverySet$$24);
              varDecl$$9.flags |= TypeScript$$14.ASTFlags.Error;
              varDecl$$9.limChar = this.scanner.lastTokenLimChar();
              return varDecl$$9;
            }
          }
          this.currentToken = this.scanner.scan();
          varDecl$$9.init = this.parseExpr(TypeScript$$14.ErrorRecoverySet.Comma | errorRecoverySet$$24, TypeScript$$14.OperatorPrecedence.Comma, true, TypeContext.NoTypes);
          varDecl$$9.limChar = varDecl$$9.init.limChar;
          if (varDecl$$9.init.nodeType == TypeScript$$14.NodeType.FuncDecl) {
            funcDecl$$9 = varDecl$$9.init;
            funcDecl$$9.hint = varDecl$$9.id.text;
            funcDecl$$9.boundToProperty = varDecl$$9;
          } else {
            if (isAccessor$$1) {
              this.reportParseError("Accessors may only be functions");
            }
          }
        } else {
          varDecl$$9.limChar = this.scanner.pos;
        }
        if ((modifiers$$10 & TypeScript$$14.Modifiers.Readonly) != TypeScript$$14.Modifiers.None) {
          varDecl$$9.varFlags |= TypeScript$$14.VarFlags.Readonly;
        }
        if (isStatic$$3) {
          varDecl$$9.varFlags |= TypeScript$$14.VarFlags.Static;
        }
        if ((modifiers$$10 & TypeScript$$14.Modifiers.Public) != TypeScript$$14.Modifiers.None) {
          varDecl$$9.varFlags |= TypeScript$$14.VarFlags.Public;
        }
        if ((modifiers$$10 & TypeScript$$14.Modifiers.Private) != TypeScript$$14.Modifiers.None) {
          varDecl$$9.varFlags |= TypeScript$$14.VarFlags.Private;
        }
        varDecl$$9.varFlags |= TypeScript$$14.VarFlags.Property;
        return varDecl$$9;
      }
    };
    Parser$$1.prototype.parseVariableDeclaration = function(errorRecoverySet$$25, modifiers$$11, allowIn, isStatic$$4) {
      var isConst = TypeScript$$14.hasFlag(modifiers$$11, TypeScript$$14.Modifiers.Readonly);
      var minChar$$22 = this.scanner.startPos;
      var varDecl$$10 = null;
      var declList = null;
      var multivar = false;
      this.currentToken = this.scanner.scan();
      var varDeclPreComments = this.parseComments();
      for (;true;) {
        if (this.currentToken.tokenId != TypeScript$$14.TokenID.Identifier && !TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
          this.reportParseError("Expected identifier in variable declaration");
          if (this.errorRecovery) {
            varDecl$$10 = new TypeScript$$14.VarDecl(new TypeScript$$14.MissingIdentifier, this.nestingLevel);
            varDecl$$10.minChar = minChar$$22;
            this.skip(errorRecoverySet$$25);
            varDecl$$10.flags |= TypeScript$$14.ASTFlags.Error;
            varDecl$$10.limChar = this.scanner.lastTokenLimChar();
            return varDecl$$10;
          }
        }
        var varDeclName = TypeScript$$14.Identifier.fromToken(this.currentToken);
        if (this.strictMode && varDeclName.text == "eval") {
          this.reportParseError("'eval' may not name a variable in strict mode");
        }
        varDecl$$10 = this.makeVarDecl(varDeclName, this.nestingLevel);
        varDecl$$10.id.minChar = this.scanner.startPos;
        varDecl$$10.id.limChar = this.scanner.pos;
        varDecl$$10.preComments = varDeclPreComments;
        if (isStatic$$4) {
          varDecl$$10.varFlags |= TypeScript$$14.VarFlags.Static;
        }
        if (TypeScript$$14.hasFlag(modifiers$$11, TypeScript$$14.Modifiers.Readonly)) {
          varDecl$$10.varFlags |= TypeScript$$14.VarFlags.Readonly;
        }
        if (this.parsingDeclareFile || this.ambientModule || TypeScript$$14.hasFlag(modifiers$$11, TypeScript$$14.Modifiers.Ambient)) {
          varDecl$$10.varFlags |= TypeScript$$14.VarFlags.Ambient;
        }
        if (this.parsingDeclareFile || this.ambientModule || TypeScript$$14.hasFlag(modifiers$$11, TypeScript$$14.Modifiers.Exported)) {
          varDecl$$10.varFlags |= TypeScript$$14.VarFlags.Exported;
        }
        varDecl$$10.minChar = minChar$$22;
        if (declList) {
          declList.append(varDecl$$10);
        }
        this.currentToken = this.scanner.scan();
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon) {
          this.currentToken = this.scanner.scan();
          var prevInFncDecl = this.inFncDecl;
          this.inFncDecl = false;
          varDecl$$10.typeExpr = this.parseTypeReference(errorRecoverySet$$25 | TypeScript$$14.ErrorRecoverySet.Asg | TypeScript$$14.ErrorRecoverySet.Comma, false);
          this.inFncDecl = prevInFncDecl;
        }
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Equals) {
          if (TypeScript$$14.hasFlag(varDecl$$10.varFlags, TypeScript$$14.VarFlags.Ambient)) {
            this.reportParseError("Ambient variable can not have an initializer");
          }
          this.currentToken = this.scanner.scan();
          varDecl$$10.init = this.parseExpr(TypeScript$$14.ErrorRecoverySet.Comma | errorRecoverySet$$25, TypeScript$$14.OperatorPrecedence.Comma, allowIn, TypeContext.NoTypes);
          varDecl$$10.limChar = varDecl$$10.init.limChar;
          if (varDecl$$10.init.nodeType == TypeScript$$14.NodeType.FuncDecl) {
            var funcDecl$$10 = varDecl$$10.init;
            funcDecl$$10.hint = varDecl$$10.id.actualText;
          }
        } else {
          if (isConst) {
            this.reportParseError("const declaration requires initializer");
          }
          varDecl$$10.limChar = this.scanner.pos;
        }
        varDecl$$10.postComments = this.parseCommentsForLine(this.scanner.line);
        if (this.currentToken.tokenId != TypeScript$$14.TokenID.Comma) {
          if (declList) {
            declList.limChar = varDecl$$10.limChar;
            return declList;
          } else {
            return varDecl$$10;
          }
        }
        if (!multivar) {
          declList = new TypeScript$$14.ASTList;
          declList.minChar = varDecl$$10.minChar;
          declList.append(varDecl$$10);
          multivar = true;
        }
        this.currentToken = this.scanner.scan();
        minChar$$22 = this.scanner.startPos;
      }
    };
    Parser$$1.prototype.parseMemberList = function(errorRecoverySet$$26) {
      var elements = new TypeScript$$14.ASTList;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace) {
        return elements;
      }
      var idHint = null;
      var memberName$$1 = null;
      var memberExpr = null;
      var member$$2 = null;
      var minChar$$23 = this.scanner.startPos;
      var isSet = false;
      var skippedTokenForGetSetId = false;
      var getSetTok = null;
      var getSetStartPos = 0;
      var getSetPos = 0;
      for (;;) {
        var accessorPattern = false;
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Get || this.currentToken.tokenId == TypeScript$$14.TokenID.Set) {
          isSet = this.currentToken.tokenId == TypeScript$$14.TokenID.Set;
          getSetTok = this.currentToken;
          getSetStartPos = this.scanner.startPos;
          getSetPos = this.scanner.pos;
          this.currentToken = this.scanner.scan();
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToIDName(this.currentToken)) {
            idHint = isSet ? "set" : "get";
            idHint = idHint + this.currentToken.getText();
            memberName$$1 = TypeScript$$14.Identifier.fromToken(this.currentToken);
            memberName$$1.minChar = this.scanner.startPos;
            accessorPattern = true;
            if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
              this.reportParseError("Property accessors are only available when targeting ES5 or greater");
            }
          } else {
            if (this.currentToken.tokenId != TypeScript$$14.TokenID.Colon) {
              this.reportParseError("Expected identifier, string or number as accessor name");
            } else {
              skippedTokenForGetSetId = true;
              memberName$$1 = TypeScript$$14.Identifier.fromToken(getSetTok);
              memberName$$1.minChar = getSetStartPos;
              memberName$$1.limChar = getSetPos;
            }
          }
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToIDName(this.currentToken)) {
            idHint = this.currentToken.getText();
            memberName$$1 = TypeScript$$14.Identifier.fromToken(this.currentToken);
            memberName$$1.minChar = this.scanner.startPos;
            memberName$$1.limChar = this.scanner.pos;
          } else {
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.StringLiteral) {
              idHint = this.currentToken.getText();
              memberName$$1 = new TypeScript$$14.StringLiteral(idHint);
              memberName$$1.minChar = this.scanner.startPos;
              memberName$$1.limChar = this.scanner.pos;
            } else {
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.NumberLiteral) {
                var ntok = this.currentToken;
                idHint = ntok.value.toString();
                memberName$$1 = new TypeScript$$14.StringLiteral(idHint);
                memberName$$1.minChar = this.scanner.startPos;
                memberName$$1.limChar = this.scanner.pos;
              } else {
                this.reportParseError("Expected identifier, string or number as member name");
                if (this.errorRecovery) {
                  memberName$$1 = new TypeScript$$14.MissingIdentifier;
                  memberName$$1.minChar = this.scanner.startPos;
                  memberName$$1.flags |= TypeScript$$14.ASTFlags.Error;
                  this.skip(errorRecoverySet$$26 | TypeScript$$14.ErrorRecoverySet.Comma);
                  memberName$$1.limChar = this.scanner.lastTokenLimChar();
                }
              }
            }
          }
        }
        if (!skippedTokenForGetSetId) {
          this.currentToken = this.scanner.scan();
        } else {
          skippedTokenForGetSetId = false;
        }
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Question) {
          memberName$$1.flags |= TypeScript$$14.ASTFlags.OptionalName;
          this.currentToken = this.scanner.scan();
        }
        if (accessorPattern) {
          var args$$10 = new TypeScript$$14.ASTList;
          this.parseFormalParameterList(errorRecoverySet$$26 | TypeScript$$14.ErrorRecoverySet.RParen, args$$10, false, true, false, !isSet, isSet, false, null, true);
          var funcDecl$$11 = this.parseFunctionStatements(errorRecoverySet$$26 | TypeScript$$14.ErrorRecoverySet.RCurly, memberName$$1, false, true, args$$10, TypeScript$$14.AllowedElements.None, this.scanner.startPos, false, TypeScript$$14.Modifiers.None);
          if (isSet && funcDecl$$11.returnTypeAnnotation) {
            this.reportParseError("Property setters may not declare a return type");
          }
          funcDecl$$11.fncFlags |= isSet ? TypeScript$$14.FncFlags.SetAccessor : TypeScript$$14.FncFlags.GetAccessor;
          funcDecl$$11.fncFlags |= TypeScript$$14.FncFlags.IsFunctionExpression;
          funcDecl$$11.hint = idHint;
          memberExpr = funcDecl$$11;
          member$$2 = new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Member, memberName$$1, memberExpr);
          member$$2.minChar = memberName$$1.minChar;
          if (memberExpr.nodeType == TypeScript$$14.NodeType.FuncDecl) {
            funcDecl$$11 = memberExpr;
            funcDecl$$11.hint = idHint;
          }
        } else {
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon) {
            this.currentToken = this.scanner.scan();
            memberExpr = this.parseExpr(TypeScript$$14.ErrorRecoverySet.Comma | errorRecoverySet$$26, TypeScript$$14.OperatorPrecedence.Comma, true, TypeContext.NoTypes);
            if (memberExpr.nodeType == TypeScript$$14.NodeType.TypeRef) {
              this.reportParseError("Expected 'new' on array declaration in member definition");
            }
            member$$2 = new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Member, memberName$$1, memberExpr);
            member$$2.minChar = memberName$$1.minChar;
            if (memberExpr.nodeType == TypeScript$$14.NodeType.FuncDecl) {
              funcDecl$$11 = memberExpr;
              funcDecl$$11.hint = idHint;
            }
          } else {
            this.reportParseError("Expected ':' in member definition");
            if (this.errorRecovery) {
              this.skip(errorRecoverySet$$26);
              elements.flags |= TypeScript$$14.ASTFlags.Error;
              elements.minChar = minChar$$23;
              elements.limChar = this.scanner.lastTokenLimChar();
              return elements;
            }
          }
        }
        idHint = null;
        elements.append(member$$2);
        member$$2.limChar = this.scanner.lastTokenLimChar();
        if (this.currentToken.tokenId != TypeScript$$14.TokenID.Comma) {
          break;
        } else {
          this.currentToken = this.scanner.scan();
        }
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace) {
          break;
        }
      }
      if (member$$2) {
        elements.limChar = member$$2.limChar;
      }
      elements.minChar = minChar$$23;
      return elements;
    };
    Parser$$1.prototype.parseArrayList = function(errorRecoverySet$$27) {
      var elements$$1 = null;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBracket) {
        return elements$$1;
      } else {
        elements$$1 = new TypeScript$$14.ASTList;
        elements$$1.minChar = this.scanner.startPos;
      }
      var arg$$9;
      for (;;) {
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Comma || this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBracket) {
          arg$$9 = new TypeScript$$14.AST(TypeScript$$14.NodeType.EmptyExpr);
        } else {
          arg$$9 = this.parseExpr(TypeScript$$14.ErrorRecoverySet.Comma | errorRecoverySet$$27, TypeScript$$14.OperatorPrecedence.Comma, true, TypeContext.NoTypes);
        }
        elements$$1.append(arg$$9);
        if (this.currentToken.tokenId != TypeScript$$14.TokenID.Comma) {
          break;
        }
        this.currentToken = this.scanner.scan();
      }
      elements$$1.limChar = this.scanner.lastTokenLimChar();
      return elements$$1;
    };
    Parser$$1.prototype.parseArrayLiteral = function(errorRecoverySet$$28) {
      var arrayLiteral = null;
      arrayLiteral = new TypeScript$$14.UnaryExpression(TypeScript$$14.NodeType.ArrayLit, this.parseArrayList(errorRecoverySet$$28));
      return arrayLiteral;
    };
    Parser$$1.prototype.parseTerm = function(errorRecoverySet$$29, allowCall, typeContext, inCast) {
      var ast$$40 = null;
      var sawId = false;
      var inNew = false;
      var minChar$$24 = this.scanner.startPos;
      var limChar$$7 = this.scanner.pos;
      var parseAsLambda = false;
      var expectlambdaRParen = false;
      switch(this.currentToken.tokenId) {
        case TypeScript$$14.TokenID.Number:
        ;
        case TypeScript$$14.TokenID.Bool:
        ;
        case TypeScript$$14.TokenID.Any:
        ;
        case TypeScript$$14.TokenID.String:
          var tid = new TypeScript$$14.Identifier(TypeScript$$14.tokenTable[this.currentToken.tokenId].text);
          if (TypeScript$$14.hasFlag(typeContext, TypeContext.Primitive)) {
            ast$$40 = new TypeScript$$14.TypeReference(tid, 0);
            sawId = true;
          } else {
            ast$$40 = tid;
            sawId = true;
          }
          ast$$40.minChar = minChar$$24;
          this.currentToken = this.scanner.scan();
          limChar$$7 = this.scanner.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.This:
          ast$$40 = new TypeScript$$14.AST(TypeScript$$14.NodeType.This);
          ast$$40.minChar = minChar$$24;
          this.currentToken = this.scanner.scan();
          limChar$$7 = this.scanner.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.Super:
          ast$$40 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Super);
          ast$$40.minChar = minChar$$24;
          this.currentToken = this.scanner.scan();
          limChar$$7 = this.scanner.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.True:
          ast$$40 = new TypeScript$$14.AST(TypeScript$$14.NodeType.True);
          this.currentToken = this.scanner.scan();
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.False:
          ast$$40 = new TypeScript$$14.AST(TypeScript$$14.NodeType.False);
          this.currentToken = this.scanner.scan();
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.Null:
          ast$$40 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Null);
          this.currentToken = this.scanner.scan();
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.New:
          minChar$$24 = this.scanner.pos;
          this.currentToken = this.scanner.scan();
          var target$$30 = this.parseTerm(errorRecoverySet$$29, false, TypeContext.AllSimpleTypes, inCast);
          if (target$$30.nodeType == TypeScript$$14.NodeType.Error || target$$30.nodeType == TypeScript$$14.NodeType.Index && target$$30.operand1.nodeType == TypeScript$$14.NodeType.TypeRef) {
            this.reportParseError("Cannot invoke 'new' on this expression");
          } else {
            ast$$40 = new TypeScript$$14.CallExpression(TypeScript$$14.NodeType.New, target$$30, null);
            ast$$40.minChar = minChar$$24;
            limChar$$7 = this.scanner.lastTokenLimChar();
            inNew = true;
          }
          break;
        case TypeScript$$14.TokenID.Function:
          minChar$$24 = this.scanner.pos;
          ast$$40 = this.parseFncDecl(errorRecoverySet$$29, false, false, false, null, false, false, false, TypeScript$$14.Modifiers.None, null, true);
          ast$$40.fncFlags |= TypeScript$$14.FncFlags.IsFunctionExpression;
          ast$$40.minChar = minChar$$24;
          limChar$$7 = this.scanner.lastTokenLimChar();
          ast$$40.limChar = limChar$$7;
          break;
      }
      if (ast$$40 == null) {
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
          var idText$$1 = this.currentToken.getText();
          ast$$40 = this.createRef(idText$$1, this.currentToken.hasEscapeSequence, minChar$$24);
          sawId = true;
          ast$$40.minChar = minChar$$24;
          this.currentToken = this.scanner.scan();
          if (this.currentToken.tokenId == TypeScript$$14.TokenID.Question) {
            ast$$40.flags |= TypeScript$$14.ASTFlags.PossibleOptionalParameter;
          }
          limChar$$7 = this.scanner.lastTokenLimChar();
        }
      }
      if (inCast) {
        this.checkCurrentToken(TypeScript$$14.TokenID.GreaterThan, errorRecoverySet$$29);
      }
      if (ast$$40 == null) {
        switch(this.currentToken.tokenId) {
          case TypeScript$$14.TokenID.OpenParen:
            minChar$$24 = this.scanner.pos;
            var prevTokId = this.scanner.previousToken().tokenId;
            this.currentToken = this.scanner.scan();
            var couldBeLambda = prevTokId == TypeScript$$14.TokenID.OpenParen || prevTokId == TypeScript$$14.TokenID.Comma || prevTokId == TypeScript$$14.TokenID.EqualsEquals || prevTokId == TypeScript$$14.TokenID.Colon;
            if (couldBeLambda && this.currentToken.tokenId == TypeScript$$14.TokenID.CloseParen) {
              parseAsLambda = true;
              expectlambdaRParen = false;
              this.currentToken = this.scanner.scan();
            } else {
              if (couldBeLambda && this.currentToken.tokenId == TypeScript$$14.TokenID.DotDotDot) {
                parseAsLambda = true;
                expectlambdaRParen = true;
              } else {
                ast$$40 = this.parseExpr(errorRecoverySet$$29 | TypeScript$$14.ErrorRecoverySet.RParen, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes, couldBeLambda);
                limChar$$7 = this.scanner.lastTokenLimChar();
                parseAsLambda = couldBeLambda && (ast$$40.nodeType == TypeScript$$14.NodeType.Name || ast$$40.nodeType == TypeScript$$14.NodeType.Comma) && (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon || this.currentToken.tokenId == TypeScript$$14.TokenID.Question);
                expectlambdaRParen = true;
              }
            }
            if (ast$$40 && !parseAsLambda) {
              if (TypeScript$$14.hasFlag(ast$$40.flags, TypeScript$$14.ASTFlags.SkipNextRParen)) {
                ast$$40.flags = ast$$40.flags & ~TypeScript$$14.ASTFlags.SkipNextRParen;
                break;
              }
              this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$29);
              ast$$40.isParenthesized = true;
            }
            break;
          case TypeScript$$14.TokenID.NumberLiteral:
            var numTok = this.currentToken;
            this.currentToken = this.scanner.scan();
            ast$$40 = new TypeScript$$14.NumberLiteral(numTok.value, numTok.hasEmptyFraction);
            ast$$40.minChar = minChar$$24;
            limChar$$7 = this.scanner.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.StringLiteral:
            ast$$40 = new TypeScript$$14.StringLiteral(this.currentToken.getText());
            this.currentToken = this.scanner.scan();
            ast$$40.minChar = minChar$$24;
            limChar$$7 = this.scanner.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.RegularExpressionLiteral:
            var rtok = this.currentToken;
            ast$$40 = new TypeScript$$14.RegexLiteral(rtok.regex);
            this.currentToken = this.scanner.scan();
            ast$$40.minChar = minChar$$24;
            limChar$$7 = this.scanner.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.OpenBracket:
            minChar$$24 = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            ast$$40 = this.parseArrayLiteral(TypeScript$$14.ErrorRecoverySet.RBrack | errorRecoverySet$$29);
            ast$$40.minChar = minChar$$24;
            limChar$$7 = this.scanner.pos;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseBracket, errorRecoverySet$$29);
            break;
          case TypeScript$$14.TokenID.OpenBrace:
            minChar$$24 = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            var members$$11 = this.parseMemberList(TypeScript$$14.ErrorRecoverySet.RCurly | errorRecoverySet$$29);
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$29);
            ast$$40 = new TypeScript$$14.UnaryExpression(TypeScript$$14.NodeType.ObjectLit, members$$11);
            ast$$40.minChar = minChar$$24;
            limChar$$7 = this.scanner.lastTokenLimChar();
            members$$11.minChar = minChar$$24;
            members$$11.limChar = limChar$$7;
            break;
          case TypeScript$$14.TokenID.LessThan:
            minChar$$24 = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            var term$$3 = this.parseTypeReference(TypeScript$$14.ErrorRecoverySet.BinOp, false);
            this.checkCurrentToken(TypeScript$$14.TokenID.GreaterThan, errorRecoverySet$$29);
            ast$$40 = new TypeScript$$14.UnaryExpression(TypeScript$$14.NodeType.TypeAssertion, this.parseExpr(errorRecoverySet$$29, TypeScript$$14.OperatorPrecedence.Unary, false, TypeContext.NoTypes));
            ast$$40.castTerm = term$$3;
            break;
          default:
            if (this.prevExpr && TypeScript$$14.hasFlag(this.prevExpr.flags, TypeScript$$14.ASTFlags.PossibleOptionalParameter)) {
              parseAsLambda = true;
              ast$$40 = this.prevExpr;
            } else {
              this.reportParseError("Check format of expression term");
              if (this.errorRecovery) {
                var ident$$1 = new TypeScript$$14.MissingIdentifier;
                ident$$1.minChar = minChar$$24;
                ident$$1.flags |= TypeScript$$14.ASTFlags.Error;
                this.skip(errorRecoverySet$$29 | TypeScript$$14.ErrorRecoverySet.Postfix);
                if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
                  ident$$1.setText(this.currentToken.getText(), this.currentToken.hasEscapeSequence);
                  this.currentToken = this.scanner.scan();
                  limChar$$7 = this.scanner.lastTokenLimChar();
                } else {
                  limChar$$7 = this.scanner.lastTokenLimChar();
                }
                ast$$40 = ident$$1;
              }
            }
          ;
        }
      }
      if (parseAsLambda) {
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon || this.currentToken.tokenId == TypeScript$$14.TokenID.Comma || this.currentToken.tokenId == TypeScript$$14.TokenID.CloseParen || this.currentToken.tokenId == TypeScript$$14.TokenID.DotDotDot) {
          ast$$40 = this.parseLambdaExpr(errorRecoverySet$$29, ast$$40, true, expectlambdaRParen);
          ast$$40.minChar = minChar$$24;
          limChar$$7 = this.scanner.lastTokenLimChar();
          ast$$40.limChar = limChar$$7;
        } else {
          if (ast$$40) {
            ast$$40.isParenthesized = true;
          }
        }
      }
      if (sawId && typeContext != TypeContext.NoTypes) {
        typeContext |= TypeContext.ArraySuffix;
      }
      var postFix = this.parsePostfixOperators(errorRecoverySet$$29, ast$$40, allowCall, inNew, typeContext, minChar$$24, limChar$$7);
      if (postFix) {
        if (sawId && postFix.nodeType == TypeScript$$14.NodeType.Index) {
          var binExpr = postFix;
          if (binExpr.operand2 == null) {
            postFix = this.convertToTypeReference(postFix);
          }
        }
        postFix.minChar = minChar$$24;
        postFix.limChar = TypeScript$$14.max(postFix.limChar, this.scanner.lastTokenLimChar());
        return postFix;
      } else {
        return new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
      }
    };
    Parser$$1.prototype.parseLambdaExpr = function(errorRecoverySet$$30, lambdaArgs, skipNextRParen, expectClosingRParen$$2) {
      var ast$$41 = this.parseFncDecl(errorRecoverySet$$30, false, false, false, null, false, false, false, TypeScript$$14.Modifiers.None, {preProcessedLambdaArgs:lambdaArgs}, expectClosingRParen$$2);
      ast$$41.fncFlags |= TypeScript$$14.FncFlags.IsFunctionExpression;
      ast$$41.fncFlags |= TypeScript$$14.FncFlags.IsFatArrowFunction;
      if (!skipNextRParen) {
        ast$$41.flags |= TypeScript$$14.ASTFlags.SkipNextRParen;
      }
      ast$$41.limChar = this.scanner.lastTokenLimChar();
      return ast$$41;
    };
    Parser$$1.prototype.parseExpr = function(errorRecoverySet$$31, minPrecedence, allowIn$$1, typeContext$$1, possiblyInLambda) {
      if (typeof possiblyInLambda === "undefined") {
        possiblyInLambda = false;
      }
      var ast$$42 = null;
      var tokenInfo$$1 = TypeScript$$14.lookupToken(this.currentToken.tokenId);
      var canAssign = true;
      var idHint$$1 = null;
      var minChar$$25 = this.scanner.startPos;
      var preComments$$4 = this.parseComments();
      var exprIsAnonLambda = false;
      if (tokenInfo$$1 != undefined && tokenInfo$$1.unopNodeType != TypeScript$$14.NodeType.None) {
        canAssign = false;
        this.currentToken = this.scanner.scan();
        var tempExpr = this.parseExpr(TypeScript$$14.ErrorRecoverySet.BinOp | errorRecoverySet$$31, tokenInfo$$1.unopPrecedence, allowIn$$1, TypeContext.NoTypes);
        if (tokenInfo$$1.unopNodeType == TypeScript$$14.NodeType.Pos && tempExpr.nodeType == TypeScript$$14.NodeType.NumberLit) {
          ast$$42 = tempExpr;
        } else {
          if (tokenInfo$$1.unopNodeType == TypeScript$$14.NodeType.Neg && tempExpr.nodeType == TypeScript$$14.NodeType.NumberLit) {
            var numLit$$1 = tempExpr;
            numLit$$1.value = -numLit$$1.value;
            if (numLit$$1.value == 0) {
              numLit$$1.isNegativeZero = true;
            }
            ast$$42 = tempExpr;
          } else {
            ast$$42 = new TypeScript$$14.UnaryExpression(tokenInfo$$1.unopNodeType, tempExpr);
            ast$$42.limChar = tempExpr.limChar;
          }
        }
        ast$$42.minChar = minChar$$25;
      } else {
        ast$$42 = this.parseTerm(TypeScript$$14.ErrorRecoverySet.BinOp | TypeScript$$14.ErrorRecoverySet.AddOp | errorRecoverySet$$31, true, typeContext$$1, false);
        var id$$13;
        var temp$$14;
        if (ast$$42.nodeType == TypeScript$$14.NodeType.Name) {
          id$$13 = ast$$42;
          idHint$$1 = id$$13.actualText;
        } else {
          if (ast$$42.nodeType == TypeScript$$14.NodeType.Dot) {
            var subsumedExpr = false;
            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon || this.currentToken.tokenId == TypeScript$$14.TokenID.Equals) && this.parsingClassConstructorDefinition && this.nestingLevel == this.currentClassDefinition.constructorNestingLevel && ast$$42.operand1.nodeType == TypeScript$$14.NodeType.This) {
              if (ast$$42.operand2.nodeType == TypeScript$$14.NodeType.Name) {
                var op2ID = ast$$42.operand2;
                if (!this.currentClassDefinition.knownMemberNames[op2ID.actualText]) {
                  ast$$42 = this.parseClassMemberVariableDeclaration(op2ID, ast$$42.minChar, true, errorRecoverySet$$31, TypeScript$$14.Modifiers.Public);
                  subsumedExpr = true;
                }
              }
            }
            if (!subsumedExpr) {
              temp$$14 = ast$$42;
              for (;temp$$14.nodeType == TypeScript$$14.NodeType.Dot;) {
                var binExpr$$1 = temp$$14;
                temp$$14 = binExpr$$1.operand2;
              }
              if (temp$$14.nodeType == TypeScript$$14.NodeType.Name) {
                id$$13 = temp$$14;
                idHint$$1 = id$$13.actualText;
              }
            }
          }
        }
        if (!this.scanner.lastTokenHadNewline() && (this.currentToken.tokenId == TypeScript$$14.TokenID.PlusPlus || this.currentToken.tokenId == TypeScript$$14.TokenID.MinusMinus)) {
          canAssign = false;
          var operand$$2 = ast$$42;
          ast$$42 = new TypeScript$$14.UnaryExpression(this.currentToken.tokenId == TypeScript$$14.TokenID.PlusPlus ? TypeScript$$14.NodeType.IncPost : TypeScript$$14.NodeType.DecPost, operand$$2);
          ast$$42.limChar = this.scanner.pos;
          ast$$42.minChar = operand$$2.minChar;
          this.currentToken = this.scanner.scan();
        }
      }
      for (;;) {
        tokenInfo$$1 = TypeScript$$14.lookupToken(this.currentToken.tokenId);
        if (tokenInfo$$1 == undefined || tokenInfo$$1.binopNodeType == TypeScript$$14.NodeType.None) {
          break;
        }
        if (!allowIn$$1 && tokenInfo$$1.binopNodeType == TypeScript$$14.NodeType.In) {
          break;
        }
        if (tokenInfo$$1.binopPrecedence == TypeScript$$14.OperatorPrecedence.Assignment) {
          if (tokenInfo$$1.binopPrecedence < minPrecedence) {
            break;
          }
          if (!canAssign) {
            this.reportParseError("illegal assignment");
          }
        } else {
          if (tokenInfo$$1.binopPrecedence <= minPrecedence) {
            break;
          }
        }
        if (possiblyInLambda && this.currentToken.tokenId == TypeScript$$14.TokenID.Comma && this.scanner.getLookAheadToken().tokenId == TypeScript$$14.TokenID.DotDotDot) {
          exprIsAnonLambda = true;
          canAssign = false;
          ast$$42 = this.parseLambdaExpr(errorRecoverySet$$31, ast$$42, false, true);
          break;
        }
        this.currentToken = this.scanner.scan();
        canAssign = false;
        if (tokenInfo$$1.binopNodeType == TypeScript$$14.NodeType.ConditionalExpression) {
          if (possiblyInLambda && (this.currentToken.tokenId == TypeScript$$14.TokenID.Equals || this.currentToken.tokenId == TypeScript$$14.TokenID.Colon || this.currentToken.tokenId == TypeScript$$14.TokenID.CloseParen || this.currentToken.tokenId == TypeScript$$14.TokenID.Comma)) {
            exprIsAnonLambda = true;
            canAssign = true;
          } else {
            this.prevExpr = ast$$42;
            var whenTrue = this.parseExpr(errorRecoverySet$$31 | TypeScript$$14.ErrorRecoverySet.Colon, TypeScript$$14.OperatorPrecedence.Assignment, allowIn$$1, TypeContext.NoTypes);
            this.prevExpr = null;
            this.checkCurrentToken(TypeScript$$14.TokenID.Colon, errorRecoverySet$$31 | TypeScript$$14.ErrorRecoverySet.ExprStart);
            var whenFalse = this.parseExpr(errorRecoverySet$$31 | TypeScript$$14.ErrorRecoverySet.BinOp, TypeScript$$14.OperatorPrecedence.Assignment, allowIn$$1, TypeContext.NoTypes);
            ast$$42 = new TypeScript$$14.ConditionalExpression(ast$$42, whenTrue, whenFalse);
          }
        } else {
          var tc = TypeContext.NoTypes;
          var binExpr2;
          binExpr2 = new TypeScript$$14.BinaryExpression(tokenInfo$$1.binopNodeType, ast$$42, this.parseExpr(errorRecoverySet$$31 | TypeScript$$14.ErrorRecoverySet.BinOp, tokenInfo$$1.binopPrecedence, allowIn$$1, TypeContext.NoTypes, possiblyInLambda));
          if (binExpr2.operand2.nodeType == TypeScript$$14.NodeType.FuncDecl) {
            var funcDecl$$12 = binExpr2.operand2;
            funcDecl$$12.hint = idHint$$1;
          }
          binExpr2.minChar = ast$$42.minChar;
          binExpr2.limChar = this.scanner.lastTokenLimChar();
          idHint$$1 = null;
          ast$$42 = binExpr2;
        }
      }
      if (canAssign) {
        ast$$42.flags |= TypeScript$$14.ASTFlags.Writeable;
      }
      if (!exprIsAnonLambda) {
        ast$$42.minChar = minChar$$25;
        ast$$42.limChar = TypeScript$$14.max(ast$$42.limChar, this.scanner.lastTokenLimChar());
        ast$$42.preComments = preComments$$4;
        ast$$42.postComments = this.parseCommentsForLine(this.scanner.line);
      }
      return ast$$42;
    };
    Parser$$1.prototype.parsePostfixOperators = function(errorRecoverySet$$32, ast$$43, allowCall$$1, inNew$$1, typeContext$$2, lhsMinChar, lhsLimChar) {
      var count$$4 = 0;
      if (!ast$$43) {
        ast$$43 = new TypeScript$$14.AST(TypeScript$$14.NodeType.EmptyExpr);
        ast$$43.isParenthesized = true;
      }
      ast$$43.minChar = lhsMinChar;
      ast$$43.limChar = lhsLimChar;
      for (;;) {
        switch(this.currentToken.tokenId) {
          case TypeScript$$14.TokenID.OpenParen:
            if (inNew$$1) {
              var callExpr = ast$$43;
              callExpr.arguments = this.parseArgList(errorRecoverySet$$32);
              inNew$$1 = false;
            } else {
              if (!allowCall$$1) {
                return ast$$43;
              }
              ast$$43 = new TypeScript$$14.CallExpression(TypeScript$$14.NodeType.Call, ast$$43, this.parseArgList(errorRecoverySet$$32));
              ast$$43.minChar = lhsMinChar;
            }
            ast$$43.limChar = this.scanner.pos;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$32);
            break;
          case TypeScript$$14.TokenID.OpenBracket:
            this.currentToken = this.scanner.scan();
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBracket) {
              if (TypeScript$$14.hasFlag(typeContext$$2, TypeContext.ArraySuffix)) {
                this.currentToken = this.scanner.scan();
                if (ast$$43.nodeType == TypeScript$$14.NodeType.TypeRef) {
                  var typeRef$$1 = ast$$43;
                  typeRef$$1.arrayCount++;
                } else {
                  ast$$43 = new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Index, ast$$43, null);
                }
                ast$$43.limChar = this.scanner.pos;
                break;
              }
            }
            ast$$43 = new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Index, ast$$43, this.parseExpr(errorRecoverySet$$32 | TypeScript$$14.ErrorRecoverySet.RBrack, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes));
            ast$$43.minChar = lhsMinChar;
            ast$$43.limChar = this.scanner.pos;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseBracket, errorRecoverySet$$32);
            break;
          case TypeScript$$14.TokenID.Dot:
            var name$$51 = null;
            var curpos$$2 = this.scanner.pos;
            this.currentToken = this.scanner.scan();
            if (this.currentToken === undefined) {
              this.currentToken = this.scanner.scan();
              continue;
            }
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || (!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && TypeScript$$14.convertTokToIDName(this.currentToken)) {
              ast$$43.flags |= TypeScript$$14.ASTFlags.DotLHS;
              name$$51 = this.createRef(this.currentToken.getText(), this.currentToken.hasEscapeSequence, this.scanner.startPos);
              name$$51.limChar = this.scanner.pos;
              this.currentToken = this.scanner.scan();
            } else {
              this.reportParseError("Expected identifier following dot");
              if (this.errorRecovery) {
                this.skip(errorRecoverySet$$32);
                ast$$43.flags |= TypeScript$$14.ASTFlags.Error | TypeScript$$14.ASTFlags.DotLHS;
                return ast$$43;
              } else {
                name$$51 = new TypeScript$$14.MissingIdentifier;
              }
            }
            ast$$43 = new TypeScript$$14.BinaryExpression(TypeScript$$14.NodeType.Dot, ast$$43, name$$51);
            ast$$43.minChar = lhsMinChar;
            ast$$43.limChar = this.scanner.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.EqualsGreaterThan:
            ast$$43 = this.parseFncDecl(errorRecoverySet$$32, false, false, false, null, false, false, false, TypeScript$$14.Modifiers.None, {preProcessedLambdaArgs:ast$$43}, false);
            ast$$43.fncFlags |= TypeScript$$14.FncFlags.IsFunctionExpression;
            ast$$43.minChar = lhsMinChar;
            ast$$43.limChar = this.scanner.lastTokenLimChar();
            break;
          default:
            return ast$$43;
        }
      }
    };
    Parser$$1.prototype.parseTry = function(tryNode$$2, errorRecoverySet$$33, parentModifiers$$3) {
      var minChar$$26 = this.scanner.startPos;
      var preComments$$5 = this.parseComments();
      this.currentToken = this.scanner.scan();
      if (this.currentToken.tokenId != TypeScript$$14.TokenID.OpenBrace) {
        this.reportParseError("Expected '{'");
        if (this.errorRecovery) {
          var etryNode = tryNode$$2;
          etryNode.minChar = minChar$$26;
          etryNode.limChar = this.scanner.lastTokenLimChar();
          etryNode.flags |= TypeScript$$14.ASTFlags.Error;
          return etryNode;
        }
      }
      tryNode$$2.body = this.parseStatement(errorRecoverySet$$33, TypeScript$$14.AllowedElements.None, parentModifiers$$3);
      tryNode$$2.minChar = minChar$$26;
      tryNode$$2.limChar = tryNode$$2.body.limChar;
      tryNode$$2.preComments = preComments$$5;
      tryNode$$2.postComments = this.parseComments();
      return tryNode$$2;
    };
    Parser$$1.prototype.parseCatch = function(errorRecoverySet$$34, parentModifiers$$4) {
      var catchMinChar = this.scanner.startPos;
      var preComments$$6 = this.parseComments();
      this.currentToken = this.scanner.scan();
      this.checkCurrentToken(TypeScript$$14.TokenID.OpenParen, errorRecoverySet$$34 | TypeScript$$14.ErrorRecoverySet.ExprStart);
      if (this.currentToken.tokenId != TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
        this.reportParseError("Expected identifier in catch header");
        if (this.errorRecovery) {
          this.skip(errorRecoverySet$$34);
          var ecatch = new TypeScript$$14.Catch(new TypeScript$$14.VarDecl(new TypeScript$$14.MissingIdentifier, this.nestingLevel), new TypeScript$$14.Statement(TypeScript$$14.NodeType.Empty));
          ecatch.statement.minChar = catchMinChar;
          ecatch.statement.limChar = this.scanner.pos;
          ecatch.minChar = this.scanner.startPos;
          ecatch.limChar = this.scanner.pos;
          ecatch.flags |= TypeScript$$14.ASTFlags.Error;
          return ecatch;
        }
      }
      var param$$5 = new TypeScript$$14.VarDecl(TypeScript$$14.Identifier.fromToken(this.currentToken), this.nestingLevel);
      param$$5.id.minChar = this.scanner.startPos;
      param$$5.id.limChar = this.scanner.pos;
      param$$5.minChar = param$$5.id.minChar;
      param$$5.limChar = param$$5.id.limChar;
      this.currentToken = this.scanner.scan();
      var statementPos = this.scanner.pos;
      this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$34 | TypeScript$$14.ErrorRecoverySet.StmtStart);
      if (this.currentToken.tokenId != TypeScript$$14.TokenID.OpenBrace) {
        this.reportParseError("Expected '{' to start catch body");
        if (this.errorRecovery) {
          this.skip(errorRecoverySet$$34);
          ecatch = new TypeScript$$14.Catch(new TypeScript$$14.VarDecl(new TypeScript$$14.MissingIdentifier, this.nestingLevel), new TypeScript$$14.Statement(TypeScript$$14.NodeType.Empty));
          ecatch.statement.minChar = catchMinChar;
          ecatch.statement.limChar = statementPos;
          ecatch.minChar = this.scanner.startPos;
          ecatch.limChar = this.scanner.pos;
          ecatch.flags |= TypeScript$$14.ASTFlags.Error;
          return ecatch;
        }
      }
      var catchStmt = this.parseStatement(errorRecoverySet$$34, TypeScript$$14.AllowedElements.None, parentModifiers$$4);
      var catchNode$$1 = new TypeScript$$14.Catch(param$$5, catchStmt);
      catchNode$$1.statement.minChar = catchMinChar;
      catchNode$$1.statement.limChar = statementPos;
      catchNode$$1.minChar = catchMinChar;
      catchNode$$1.limChar = catchStmt.limChar;
      catchNode$$1.preComments = preComments$$6;
      catchNode$$1.postComments = this.parseComments();
      return catchNode$$1;
    };
    Parser$$1.prototype.parseFinally = function(errorRecoverySet$$35, parentModifiers$$5) {
      var finMinChar = this.scanner.startPos;
      var preComments$$7 = this.parseComments();
      this.currentToken = this.scanner.scan();
      if (this.currentToken.tokenId != TypeScript$$14.TokenID.OpenBrace) {
        this.reportParseError("Expected '{' to start body of finally statement");
        if (this.errorRecovery) {
          this.skip(errorRecoverySet$$35);
          var efin = new TypeScript$$14.Finally(new TypeScript$$14.Statement(TypeScript$$14.NodeType.Empty));
          efin.flags |= TypeScript$$14.ASTFlags.Error;
          efin.minChar = this.scanner.startPos;
          efin.limChar = this.scanner.pos;
          return efin;
        }
      }
      var finBody = this.parseStatement(errorRecoverySet$$35, TypeScript$$14.AllowedElements.None, parentModifiers$$5);
      var fin = new TypeScript$$14.Finally(finBody);
      fin.minChar = finMinChar;
      fin.limChar = fin.body.limChar;
      fin.preComments = preComments$$7;
      fin.postComments = this.parseComments();
      return fin;
    };
    Parser$$1.prototype.parseTryCatchFinally = function(errorRecoverySet$$36, parentModifiers$$6, labelList) {
      var tryPart = new TypeScript$$14.Try(null);
      var tryMinChar = this.scanner.startPos;
      this.pushStmt(tryPart, labelList);
      this.parseTry(tryPart, errorRecoverySet$$36 | TypeScript$$14.ErrorRecoverySet.Catch, parentModifiers$$6);
      this.popStmt();
      var tc$$1 = null;
      var tf = null;
      if (this.currentToken.tokenId == TypeScript$$14.TokenID.Catch) {
        var catchPart = this.parseCatch(errorRecoverySet$$36 | TypeScript$$14.ErrorRecoverySet.Catch, parentModifiers$$6);
        tc$$1 = new TypeScript$$14.TryCatch(tryPart, catchPart);
        tc$$1.minChar = tryPart.minChar;
        tc$$1.limChar = catchPart.limChar;
      }
      if (this.currentToken.tokenId != TypeScript$$14.TokenID.Finally) {
        if (tc$$1 == null) {
          this.reportParseError("try with neither catch nor finally");
          if (this.errorRecovery) {
            var etf = new TypeScript$$14.TryFinally(tryPart, new TypeScript$$14.Finally(new TypeScript$$14.AST(TypeScript$$14.NodeType.Empty)));
            etf.flags |= TypeScript$$14.ASTFlags.Error;
            etf.minChar = this.scanner.startPos;
            etf.limChar = this.scanner.pos;
            return etf;
          }
          return new TypeScript$$14.TryFinally(tryPart, new TypeScript$$14.Finally(new TypeScript$$14.AST(TypeScript$$14.NodeType.Empty)));
        } else {
          return tc$$1;
        }
      } else {
        if (tc$$1) {
          tryPart = tc$$1;
        }
        var finallyPart = this.parseFinally(errorRecoverySet$$36, parentModifiers$$6);
        tf = new TypeScript$$14.TryFinally(tryPart, finallyPart);
        tf.minChar = tryMinChar;
        tf.limChar = finallyPart.limChar;
        return tf;
      }
    };
    Parser$$1.prototype.parseStatement = function(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7) {
      function isAmbient$$3() {
        return TypeScript$$14.hasFlag(modifiers$$12, TypeScript$$14.Modifiers.Ambient) || TypeScript$$14.hasFlag(parentModifiers$$7, TypeScript$$14.Modifiers.Ambient);
      }
      function mayNotBeExported() {
        if (TypeScript$$14.hasFlag(modifiers$$12, TypeScript$$14.Modifiers.Exported)) {
          this.reportError("Statement may not be exported");
        }
      }
      var ast$$44 = null;
      var labelList$$1 = null;
      var astList = null;
      var temp$$15;
      var modifiers$$12 = TypeScript$$14.Modifiers.None;
      var minChar$$27 = this.scanner.startPos;
      var forInOk = false;
      var needTerminator = false;
      var fnOrVar = null;
      var preComments$$8 = this.parseComments();
      this.state = ParseState.StartStatement;
      for (;;) {
        switch(this.currentToken.tokenId) {
          case TypeScript$$14.TokenID.EndOfFile:
            ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
            ast$$44.minChar = minChar$$27;
            ast$$44.limChar = this.scanner.pos;
            break;
          case TypeScript$$14.TokenID.Function:
            if (this.parsingDeclareFile || isAmbient$$3() || this.ambientModule) {
              this.currentToken = this.scanner.scan();
              fnOrVar = this.parsePropertyDeclaration(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon, modifiers$$12, true, false);
              if (fnOrVar.nodeType == TypeScript$$14.NodeType.VarDecl) {
                this.reportParseError("function keyword can only introduce function declaration");
              } else {
                if (fnOrVar.nodeType == TypeScript$$14.NodeType.FuncDecl && (fnOrVar.fncFlags, TypeScript$$14.FncFlags.IsFatArrowFunction)) {
                  needTerminator = true;
                }
              }
              ast$$44 = fnOrVar;
              if (this.parsingDeclareFile || this.ambientModule && ast$$44.nodeType == TypeScript$$14.NodeType.FuncDecl) {
                ast$$44.fncFlags |= TypeScript$$14.FncFlags.Exported;
              }
            } else {
              ast$$44 = this.parseFncDecl(errorRecoverySet$$37, true, false, false, null, false, false, isAmbient$$3(), modifiers$$12, null, true);
              if (TypeScript$$14.hasFlag(ast$$44.fncFlags, TypeScript$$14.FncFlags.IsFatArrowFunction)) {
                needTerminator = true;
              }
              if (this.ambientModule) {
                this.reportParseError("function declaration not permitted within ambient module");
              }
              if (TypeScript$$14.hasFlag(modifiers$$12, TypeScript$$14.Modifiers.Exported)) {
                ast$$44.fncFlags |= TypeScript$$14.FncFlags.Exported;
              }
            }
            break;
          case TypeScript$$14.TokenID.Module:
            if ((allowedElements$$2 & TypeScript$$14.AllowedElements.ModuleDeclarations) == TypeScript$$14.AllowedElements.None) {
              this.reportParseError("module not allowed in this context");
              this.currentToken = this.scanner.scan();
              ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
              ast$$44.minChar = minChar$$27;
              ast$$44.limChar = this.scanner.lastTokenLimChar();
            } else {
              ast$$44 = this.parseModuleDecl(errorRecoverySet$$37, modifiers$$12, preComments$$8);
              preComments$$8 = null;
            }
            break;
          case TypeScript$$14.TokenID.Import:
            if ((allowedElements$$2 & TypeScript$$14.AllowedElements.ModuleDeclarations) == TypeScript$$14.AllowedElements.None) {
              this.reportParseError("module not allowed in this context");
              this.currentToken = this.scanner.scan();
              ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
              ast$$44.minChar = minChar$$27;
              ast$$44.limChar = this.scanner.lastTokenLimChar();
            } else {
              if (TypeScript$$14.hasFlag(modifiers$$12, TypeScript$$14.Modifiers.Exported)) {
                this.reportParseError("export keyword not permitted on import declaration");
              }
              ast$$44 = this.parseImportDeclaration(errorRecoverySet$$37, modifiers$$12);
              needTerminator = true;
            }
            break;
          case TypeScript$$14.TokenID.Export:
            if ((allowedElements$$2 & TypeScript$$14.AllowedElements.ModuleDeclarations) == TypeScript$$14.AllowedElements.None) {
              this.reportParseError("'export' statements are only allowed at the global and module levels");
              this.currentToken = this.scanner.scan();
              ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
              ast$$44.minChar = minChar$$27;
              ast$$44.limChar = this.scanner.lastTokenLimChar();
            }
            if (this.topLevel) {
              this.hasTopLevelImportOrExport = true;
            }
            modifiers$$12 |= TypeScript$$14.Modifiers.Exported;
            this.currentToken = this.scanner.scan();
            break;
          case TypeScript$$14.TokenID.Private:
            modifiers$$12 |= TypeScript$$14.Modifiers.Private;
            this.currentToken = this.scanner.scan();
            if (this.parsingClassConstructorDefinition) {
              if (!this.inferPropertiesFromThisAssignment) {
                this.reportParseError("Property declarations are not permitted within constructor bodies");
              }
              minChar$$27 = this.scanner.pos;
              if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TypeScript$$14.TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TypeScript$$14.TokenID.Dot)) {
                this.reportParseError("Expected 'this.' for property declaration");
                this.currentToken = this.scanner.scan();
                ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
                ast$$44.minChar = minChar$$27;
                ast$$44.limChar = this.scanner.lastTokenLimChar();
              } else {
                this.currentToken = this.scanner.scan();
                var id$$14 = TypeScript$$14.Identifier.fromToken(this.currentToken);
                id$$14.minChar = this.scanner.startPos;
                id$$14.limChar = this.scanner.pos;
                this.currentToken = this.scanner.scan();
                ast$$44 = this.parseClassMemberVariableDeclaration(id$$14, minChar$$27, this.parsingClassConstructorDefinition, errorRecoverySet$$37, modifiers$$12);
              }
            } else {
              if (this.currentToken.tokenId != TypeScript$$14.TokenID.Interface) {
                if (this.currentToken.tokenId == TypeScript$$14.TokenID.Get) {
                  this.prevIDTok = this.currentToken;
                  this.currentToken = this.scanner.scan();
                  if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
                    this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                  }
                  if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
                    modifiers$$12 |= TypeScript$$14.Modifiers.Getter;
                    this.prevIDTok = null;
                  }
                } else {
                  if (this.currentToken.tokenId == TypeScript$$14.TokenID.Set) {
                    this.prevIDTok = this.currentToken;
                    this.currentToken = this.scanner.scan();
                    if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
                      this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                    }
                    if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
                      modifiers$$12 |= TypeScript$$14.Modifiers.Setter;
                      this.prevIDTok = null;
                    }
                  }
                }
                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon, modifiers$$12, isAmbient$$3(), false);
                if (fnOrVar.nodeType == TypeScript$$14.NodeType.VarDecl || fnOrVar.nodeType == TypeScript$$14.NodeType.FuncDecl && TypeScript$$14.hasFlag(fnOrVar.fncFlags, TypeScript$$14.FncFlags.IsFatArrowFunction)) {
                  needTerminator = true;
                }
                ast$$44 = fnOrVar;
              }
            }
            break;
          case TypeScript$$14.TokenID.Public:
            if (this.parsingClassConstructorDefinition) {
              if (!this.inferPropertiesFromThisAssignment) {
                this.reportParseError("Property declarations are not permitted within constructor bodies");
              }
              this.currentToken = this.scanner.scan();
              minChar$$27 = this.scanner.pos;
              modifiers$$12 |= TypeScript$$14.Modifiers.Public;
              if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TypeScript$$14.TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TypeScript$$14.TokenID.Dot)) {
                this.reportParseError("Expected 'this.' for property declaration");
                this.currentToken = this.scanner.scan();
                ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
                ast$$44.minChar = minChar$$27;
                ast$$44.limChar = this.scanner.lastTokenLimChar();
              } else {
                this.currentToken = this.scanner.scan();
                id$$14 = TypeScript$$14.Identifier.fromToken(this.currentToken);
                id$$14.minChar = this.scanner.startPos;
                id$$14.limChar = this.scanner.pos;
                this.currentToken = this.scanner.scan();
                ast$$44 = this.parseClassMemberVariableDeclaration(id$$14, minChar$$27, this.parsingClassConstructorDefinition, errorRecoverySet$$37, modifiers$$12);
              }
            } else {
              if ((allowedElements$$2 & TypeScript$$14.AllowedElements.Properties) == TypeScript$$14.AllowedElements.None) {
                this.reportParseError("'property' statements are only allowed within classes");
                this.currentToken = this.scanner.scan();
                ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
                ast$$44.minChar = minChar$$27;
                ast$$44.limChar = this.scanner.lastTokenLimChar();
              } else {
                modifiers$$12 |= TypeScript$$14.Modifiers.Public;
                this.currentToken = this.scanner.scan();
                if (this.currentToken.tokenId == TypeScript$$14.TokenID.Get) {
                  this.prevIDTok = this.currentToken;
                  this.currentToken = this.scanner.scan();
                  if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
                    this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                  }
                  if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
                    modifiers$$12 |= TypeScript$$14.Modifiers.Getter;
                    this.prevIDTok = null;
                  }
                } else {
                  if (this.currentToken.tokenId == TypeScript$$14.TokenID.Set) {
                    this.prevIDTok = this.currentToken;
                    this.currentToken = this.scanner.scan();
                    if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
                      this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                    }
                    if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
                      modifiers$$12 |= TypeScript$$14.Modifiers.Setter;
                      this.prevIDTok = null;
                    }
                  }
                }
                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon, modifiers$$12, isAmbient$$3(), false);
                if (fnOrVar.nodeType == TypeScript$$14.NodeType.VarDecl || fnOrVar.nodeType == TypeScript$$14.NodeType.FuncDecl && TypeScript$$14.hasFlag(fnOrVar.fncFlags, TypeScript$$14.FncFlags.IsFatArrowFunction)) {
                  needTerminator = true;
                }
                ast$$44 = fnOrVar;
              }
            }
            break;
          case TypeScript$$14.TokenID.Declare:
            if (!(allowedElements$$2 & TypeScript$$14.AllowedElements.AmbientDeclarations)) {
              this.reportParseError("Ambient declarations are only allowed at the top-level or module scopes");
            }
            if (!this.parsingDeclareFile && TypeScript$$14.hasFlag(parentModifiers$$7, TypeScript$$14.Modifiers.Ambient)) {
              this.reportParseError("Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)");
            }
            modifiers$$12 |= TypeScript$$14.Modifiers.Ambient;
            this.currentToken = this.scanner.scan();
            break;
          case TypeScript$$14.TokenID.Class:
            if ((allowedElements$$2 & TypeScript$$14.AllowedElements.ClassDeclarations) == TypeScript$$14.AllowedElements.None) {
              this.reportParseError("class not allowed in this context");
              this.currentToken = this.scanner.scan();
              ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
              ast$$44.minChar = minChar$$27;
              ast$$44.limChar = this.scanner.lastTokenLimChar();
            } else {
              ast$$44 = this.parseClassDecl(errorRecoverySet$$37, minChar$$27, modifiers$$12);
            }
            break;
          case TypeScript$$14.TokenID.Interface:
            if ((allowedElements$$2 & TypeScript$$14.AllowedElements.InterfaceDeclarations) == TypeScript$$14.AllowedElements.None) {
              this.reportParseError("interface not allowed in this context");
              this.currentToken = this.scanner.scan();
              ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Error);
              ast$$44.minChar = minChar$$27;
              ast$$44.limChar = this.scanner.lastTokenLimChar();
            } else {
              ast$$44 = this.parseInterfaceDecl(errorRecoverySet$$37, modifiers$$12);
            }
            break;
          case TypeScript$$14.TokenID.Var:
            var declAst = this.parseVariableDeclaration(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.StmtStart, modifiers$$12, true, false);
            if (declAst.nodeType == TypeScript$$14.NodeType.VarDecl) {
              ast$$44 = declAst;
            } else {
              ast$$44 = new TypeScript$$14.Block(declAst, false);
            }
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Static:
            if (this.currentClassDecl == null) {
              this.reportParseError("Statics may only be class members");
            }
            mayNotBeExported();
            modifiers$$12 |= TypeScript$$14.Modifiers.Public;
            this.currentToken = this.scanner.scan();
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Get) {
              this.prevIDTok = this.currentToken;
              this.currentToken = this.scanner.scan();
              if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
                this.reportParseError("Property accessors are only available when targeting ES5 or greater");
              }
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
                modifiers$$12 |= TypeScript$$14.Modifiers.Getter;
                this.prevIDTok = null;
              }
            } else {
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.Set) {
                this.currentToken = this.scanner.scan();
                if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
                  this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                }
                if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier || TypeScript$$14.convertTokToID(this.currentToken, this.strictMode)) {
                  modifiers$$12 |= TypeScript$$14.Modifiers.Setter;
                }
              }
            }
            if (isAmbient$$3()) {
              modifiers$$12 |= TypeScript$$14.Modifiers.Ambient;
            }
            fnOrVar = this.parsePropertyDeclaration(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon, modifiers$$12, this.parsingDeclareFile || (modifiers$$12 & TypeScript$$14.Modifiers.Ambient) != TypeScript$$14.Modifiers.None, true);
            var staticsList = this.topStaticsList();
            if (staticsList && fnOrVar.nodeType == TypeScript$$14.NodeType.VarDecl) {
              staticsList.append(fnOrVar);
            }
            if (fnOrVar.nodeType == TypeScript$$14.NodeType.VarDecl || fnOrVar.nodeType == TypeScript$$14.NodeType.FuncDecl && TypeScript$$14.hasFlag(fnOrVar.fncFlags, TypeScript$$14.FncFlags.IsFatArrowFunction)) {
              needTerminator = true;
            }
            ast$$44 = fnOrVar;
            break;
          case TypeScript$$14.TokenID.For:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("syntax error: for statement does not take modifiers");
            }
            minChar$$27 = this.scanner.startPos;
            this.checkNextToken(TypeScript$$14.TokenID.OpenParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.ExprStart | TypeScript$$14.ErrorRecoverySet.Var);
            this.state = ParseState.ForInit;
            forInOk = true;
            switch(this.currentToken.tokenId) {
              case TypeScript$$14.TokenID.Var:
                temp$$15 = this.parseVariableDeclaration(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon | TypeScript$$14.ErrorRecoverySet.In, TypeScript$$14.Modifiers.None, false, false);
                break;
              case TypeScript$$14.TokenID.Semicolon:
                temp$$15 = null;
                this.state = ParseState.ForCondStart;
                break;
              default:
                temp$$15 = this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon | TypeScript$$14.ErrorRecoverySet.In, TypeScript$$14.OperatorPrecedence.None, false, TypeContext.NoTypes);
                break;
            }
            this.state = ParseState.ForInitAfterVar;
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.In) {
              if (temp$$15 == null || !forInOk) {
                this.reportParseError("malformed for statement");
                if (this.errorRecovery) {
                  this.skip(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.StmtStart);
                  ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Empty);
                  ast$$44.flags |= TypeScript$$14.ASTFlags.Error;
                }
              } else {
                this.currentToken = this.scanner.scan();
                var forInStmt = new TypeScript$$14.ForInStatement(temp$$15, this.parseExpr(TypeScript$$14.ErrorRecoverySet.RParen | errorRecoverySet$$37, TypeScript$$14.OperatorPrecedence.Comma, false, TypeContext.NoTypes));
                forInStmt.limChar = this.scanner.pos;
                forInStmt.statement.minChar = minChar$$27;
                forInStmt.statement.limChar = this.scanner.pos;
                this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, TypeScript$$14.ErrorRecoverySet.StmtStart | errorRecoverySet$$37);
                this.pushStmt(forInStmt, labelList$$1);
                forInStmt.body = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
                this.popStmt();
                forInStmt.minChar = minChar$$27;
                ast$$44 = forInStmt;
              }
            } else {
              var forStmt = new TypeScript$$14.ForStatement(temp$$15);
              forStmt.minChar = minChar$$27;
              this.checkCurrentToken(TypeScript$$14.TokenID.Semicolon, errorRecoverySet$$37);
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.Semicolon) {
                forStmt.cond = null;
              } else {
                forStmt.cond = this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon | TypeScript$$14.ErrorRecoverySet.RParen, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes);
                if (this.currentToken.tokenId != TypeScript$$14.TokenID.Semicolon) {
                  this.skip(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.StmtStart);
                  ast$$44 = forStmt;
                  ast$$44.flags |= TypeScript$$14.ASTFlags.Error;
                }
              }
              this.currentToken = this.scanner.scan();
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseParen) {
                forStmt.incr = null;
              } else {
                forStmt.incr = this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon | TypeScript$$14.ErrorRecoverySet.RParen, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes);
              }
              this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.LCurly);
              this.pushStmt(forStmt, labelList$$1);
              forStmt.body = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
              this.popStmt();
              forStmt.limChar = forStmt.body.limChar;
              ast$$44 = forStmt;
            }
            break;
          case TypeScript$$14.TokenID.With:
            if (TypeScript$$14.codeGenTarget < TypeScript$$14.CodeGenTarget.ES5) {
              this.reportParseError("'with' statements are only available in ES5 codegen mode or better");
            }
            if (this.strictMode) {
              this.reportParseError("'with' statements are not available in strict mode");
            }
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("'with' statement does not take modifiers");
            }
            minChar$$27 = this.scanner.startPos;
            this.checkNextToken(TypeScript$$14.TokenID.OpenParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.ExprStart | TypeScript$$14.ErrorRecoverySet.Var);
            var expr$$5 = this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.Colon, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes);
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.LCurly);
            var withStmt = new TypeScript$$14.WithStatement(expr$$5);
            withStmt.body = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
            withStmt.minChar = minChar$$27;
            withStmt.limChar = withStmt.body.limChar;
            ast$$44 = withStmt;
            break;
          case TypeScript$$14.TokenID.Switch:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("'switch' statement does not take modifiers");
            }
            this.checkNextToken(TypeScript$$14.TokenID.OpenParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.ExprStart);
            var switchStmt = new TypeScript$$14.SwitchStatement(this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.RParen, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes));
            switchStmt.statement.minChar = minChar$$27;
            switchStmt.statement.limChar = this.scanner.pos;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.LCurly);
            var caseListMinChar = this.scanner.startPos;
            this.checkCurrentToken(TypeScript$$14.TokenID.OpenBrace, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SCase);
            switchStmt.defaultCase = null;
            switchStmt.caseList = new TypeScript$$14.ASTList;
            var caseStmt = null;
            this.pushStmt(switchStmt, labelList$$1);
            for (;;) {
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.Case || this.currentToken.tokenId == TypeScript$$14.TokenID.Default) {
                var isDefault = this.currentToken.tokenId == TypeScript$$14.TokenID.Default;
                caseStmt = new TypeScript$$14.CaseStatement;
                caseStmt.minChar = this.scanner.startPos;
                this.currentToken = this.scanner.scan();
                if (isDefault) {
                  switchStmt.defaultCase = caseStmt;
                } else {
                  caseStmt.expr = this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.Colon, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes);
                }
                this.checkCurrentToken(TypeScript$$14.TokenID.Colon, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.StmtStart);
                caseStmt.body = new TypeScript$$14.ASTList;
                this.parseStatementList(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.RCurly, caseStmt.body, false, true, allowedElements$$2, modifiers$$12);
                caseStmt.limChar = caseStmt.body.limChar;
                switchStmt.caseList.append(caseStmt);
              } else {
                break;
              }
            }
            switchStmt.caseList.minChar = caseListMinChar;
            switchStmt.caseList.limChar = this.scanner.pos;
            switchStmt.limChar = switchStmt.caseList.limChar;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$37);
            this.popStmt();
            ast$$44 = switchStmt;
            break;
          case TypeScript$$14.TokenID.While:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("'while' statement does not take modifiers");
            }
            minChar$$27 = this.scanner.startPos;
            this.checkNextToken(TypeScript$$14.TokenID.OpenParen, TypeScript$$14.ErrorRecoverySet.ExprStart | errorRecoverySet$$37);
            var whileStmt = new TypeScript$$14.WhileStatement(this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.RParen, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes));
            whileStmt.minChar = minChar$$27;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.StmtStart);
            this.pushStmt(whileStmt, labelList$$1);
            whileStmt.body = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
            whileStmt.limChar = whileStmt.body.limChar;
            this.popStmt();
            ast$$44 = whileStmt;
            break;
          case TypeScript$$14.TokenID.Do:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("'do' statement does not take modifiers");
            }
            minChar$$27 = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            var doStmt = new TypeScript$$14.DoWhileStatement;
            doStmt.minChar = minChar$$27;
            this.pushStmt(doStmt, labelList$$1);
            doStmt.body = this.parseStatement(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.While, allowedElements$$2, parentModifiers$$7);
            this.popStmt();
            doStmt.whileAST = new TypeScript$$14.Identifier("while");
            doStmt.whileAST.minChar = this.scanner.startPos;
            this.checkCurrentToken(TypeScript$$14.TokenID.While, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.LParen);
            doStmt.whileAST.limChar = doStmt.whileAST.minChar + 5;
            this.checkCurrentToken(TypeScript$$14.TokenID.OpenParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.ExprStart);
            doStmt.cond = this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.RParen, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes);
            doStmt.limChar = this.scanner.pos;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$37);
            ast$$44 = doStmt;
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Semicolon) {
              this.currentToken = this.scanner.scan();
            }
            break;
          case TypeScript$$14.TokenID.If:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("if statement does not take modifiers");
            }
            minChar$$27 = this.scanner.startPos;
            this.checkNextToken(TypeScript$$14.TokenID.OpenParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.ExprStart);
            var ifStmt = new TypeScript$$14.IfStatement(this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.LParen, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes));
            ifStmt.minChar = minChar$$27;
            ifStmt.statement.minChar = minChar$$27;
            ifStmt.statement.limChar = this.scanner.pos;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseParen, errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.StmtStart);
            this.pushStmt(ifStmt, labelList$$1);
            ifStmt.thenBod = this.parseStatement(TypeScript$$14.ErrorRecoverySet.Else | errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
            ifStmt.limChar = ifStmt.thenBod.limChar;
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Else) {
              this.currentToken = this.scanner.scan();
              ifStmt.elseBod = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
              ifStmt.limChar = ifStmt.elseBod.limChar;
            }
            this.popStmt();
            ast$$44 = ifStmt;
            break;
          case TypeScript$$14.TokenID.Try:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("try statement does not take modifiers");
            }
            minChar$$27 = this.scanner.startPos;
            ast$$44 = this.parseTryCatchFinally(errorRecoverySet$$37, parentModifiers$$7, labelList$$1);
            break;
          case TypeScript$$14.TokenID.OpenBrace:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("block does not take modifiers");
            }
            minChar$$27 = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            var block$$1 = new TypeScript$$14.Block(new TypeScript$$14.ASTList, true);
            this.pushStmt(block$$1, labelList$$1);
            this.parseStatementList(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.RCurly, block$$1.statements, false, false, TypeScript$$14.AllowedElements.None, modifiers$$12);
            this.popStmt();
            block$$1.statements.minChar = minChar$$27;
            block$$1.statements.limChar = this.scanner.pos;
            block$$1.minChar = block$$1.statements.minChar;
            block$$1.limChar = block$$1.statements.limChar;
            this.checkCurrentToken(TypeScript$$14.TokenID.CloseBrace, errorRecoverySet$$37);
            ast$$44 = block$$1;
            break;
          case TypeScript$$14.TokenID.Semicolon:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("modifier can not appear here");
            }
            ast$$44 = new TypeScript$$14.AST(TypeScript$$14.NodeType.Empty);
            this.currentToken = this.scanner.scan();
            break;
          case TypeScript$$14.TokenID.Break:
          ;
          case TypeScript$$14.TokenID.Continue:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("modifiers can not appear before jump statement");
            }
            var jump$$1 = new TypeScript$$14.Jump(this.currentToken.tokenId == TypeScript$$14.TokenID.Break ? TypeScript$$14.NodeType.Break : TypeScript$$14.NodeType.Continue);
            this.currentToken = this.scanner.scan();
            if (this.currentToken.tokenId == TypeScript$$14.TokenID.Identifier && !this.scanner.lastTokenHadNewline()) {
              jump$$1.target = this.currentToken.getText();
              this.currentToken = this.scanner.scan();
            }
            this.resolveJumpTarget(jump$$1);
            ast$$44 = jump$$1;
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Return:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("modifiers can not appear before return statement");
            }
            if (!this.inFunction) {
              this.reportParseError("return statement outside of function body");
            }
            minChar$$27 = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            var retStmt$$1 = new TypeScript$$14.ReturnStatement;
            retStmt$$1.minChar = minChar$$27;
            if (this.currentToken.tokenId != TypeScript$$14.TokenID.Semicolon && this.currentToken.tokenId != TypeScript$$14.TokenID.CloseBrace && !this.scanner.lastTokenHadNewline()) {
              retStmt$$1.returnExpression = this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes);
            }
            needTerminator = true;
            retStmt$$1.limChar = this.scanner.lastTokenLimChar();
            ast$$44 = retStmt$$1;
            break;
          case TypeScript$$14.TokenID.Throw:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("modifiers can not appear before a throw statement");
            }
            minChar$$27 = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            if (this.currentToken.tokenId != TypeScript$$14.TokenID.Semicolon && this.currentToken.tokenId != TypeScript$$14.TokenID.CloseBrace && !this.scanner.lastTokenHadNewline()) {
              temp$$15 = this.parseExpr(errorRecoverySet$$37 | TypeScript$$14.ErrorRecoverySet.SColon, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes);
            } else {
              this.reportParseError("throw with no target");
              temp$$15 = null;
            }
            ast$$44 = new TypeScript$$14.UnaryExpression(TypeScript$$14.NodeType.Throw, temp$$15);
            ast$$44.limChar = this.scanner.lastTokenLimChar();
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Enum:
            this.currentToken = this.scanner.scan();
            ast$$44 = this.parseEnumDecl(errorRecoverySet$$37, modifiers$$12);
            ast$$44.minChar = minChar$$27;
            ast$$44.limChar = this.scanner.lastTokenLimChar();
            if (this.parsingDeclareFile || this.ambientModule || TypeScript$$14.hasFlag(modifiers$$12, TypeScript$$14.Modifiers.Ambient)) {
              ast$$44.modFlags |= TypeScript$$14.ModuleFlags.Ambient;
            }
            if (this.parsingDeclareFile || this.ambientModule || TypeScript$$14.hasFlag(modifiers$$12, TypeScript$$14.Modifiers.Exported)) {
              ast$$44.modFlags |= TypeScript$$14.ModuleFlags.Exported;
            }
            break;
          case TypeScript$$14.TokenID.Debugger:
            mayNotBeExported();
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("modifiers can not appear before debugger statement");
            }
            minChar$$27 = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            var debuggerStmt = new TypeScript$$14.DebuggerStatement;
            debuggerStmt.minChar = minChar$$27;
            needTerminator = true;
            debuggerStmt.limChar = this.scanner.lastTokenLimChar();
            ast$$44 = debuggerStmt;
            break;
          default:
            if (modifiers$$12 != TypeScript$$14.Modifiers.None) {
              this.reportParseError("modifiers can not appear before an expression statement or label");
            }
            minChar$$27 = this.scanner.startPos;
            var svPos = this.scanner.pos;
            temp$$15 = this.parseExpr(TypeScript$$14.ErrorRecoverySet.Colon | TypeScript$$14.ErrorRecoverySet.StmtStart | errorRecoverySet$$37, TypeScript$$14.OperatorPrecedence.None, true, TypeContext.NoTypes);
            if (this.scanner.pos == svPos) {
              this.currentToken = this.scanner.scan();
              ast$$44 = temp$$15;
            } else {
              if (this.currentToken.tokenId == TypeScript$$14.TokenID.Colon && !this.scanner.lastTokenHadNewline() && temp$$15 && temp$$15.nodeType == TypeScript$$14.NodeType.Name) {
                if (labelList$$1 == null) {
                  labelList$$1 = new TypeScript$$14.ASTList;
                }
                labelList$$1.append(new TypeScript$$14.Label(temp$$15));
                this.currentToken = this.scanner.scan();
              } else {
                ast$$44 = temp$$15;
                needTerminator = true;
              }
            }
          ;
        }
        if (ast$$44) {
          break;
        }
      }
      if (needTerminator) {
        switch(this.currentToken.tokenId) {
          case TypeScript$$14.TokenID.Semicolon:
            this.currentToken = this.scanner.scan();
            ast$$44.flags |= TypeScript$$14.ASTFlags.ExplicitSemicolon;
            break;
          case TypeScript$$14.TokenID.EndOfFile:
            ast$$44.limChar = this.scanner.pos;
          case TypeScript$$14.TokenID.CloseBrace:
            ast$$44.flags |= TypeScript$$14.ASTFlags.AutomaticSemicolon;
            if (this.style_requireSemi) {
              this.reportParseStyleError("no automatic semicolon");
            }
            break;
          default:
            if (!this.scanner.lastTokenHadNewline()) {
              this.reportParseError("Expected ';'");
            } else {
              ast$$44.flags |= TypeScript$$14.ASTFlags.AutomaticSemicolon;
              if (this.style_requireSemi) {
                this.reportParseStyleError("no automatic semicolon");
              }
            }
            break;
        }
      }
      if (labelList$$1) {
        ast$$44 = new TypeScript$$14.LabeledStatement(labelList$$1, ast$$44);
      }
      ast$$44.minChar = minChar$$27;
      ast$$44.limChar = TypeScript$$14.max(ast$$44.limChar, this.scanner.lastTokenLimChar());
      if (preComments$$8) {
        ast$$44.preComments = preComments$$8;
      }
      if (this.ambientModule && !this.okAmbientModuleMember(ast$$44)) {
        this.reportParseError("statement not permitted within ambient module");
      }
      ast$$44.flags |= TypeScript$$14.ASTFlags.IsStatement;
      return ast$$44;
    };
    Parser$$1.prototype.okAmbientModuleMember = function(ast$$45) {
      var nt = ast$$45.nodeType;
      return nt == TypeScript$$14.NodeType.ClassDeclaration || nt == TypeScript$$14.NodeType.ImportDeclaration || nt == TypeScript$$14.NodeType.InterfaceDeclaration || nt == TypeScript$$14.NodeType.ModuleDeclaration || nt == TypeScript$$14.NodeType.Empty || nt == TypeScript$$14.NodeType.VarDecl || nt == TypeScript$$14.NodeType.Block && !ast$$45.isStatementBlock || nt == TypeScript$$14.NodeType.FuncDecl && ast$$45.isMethod();
    };
    Parser$$1.prototype.parseStatementList = function(errorRecoverySet$$38, statements$$1, sourceElms, noLeadingCase, allowedElements$$3, parentModifiers$$8) {
      var directivePrologue = sourceElms;
      statements$$1.minChar = this.scanner.startPos;
      var limChar$$8 = this.scanner.pos;
      var innerStmts = (allowedElements$$3 & TypeScript$$14.AllowedElements.ModuleDeclarations) == TypeScript$$14.AllowedElements.None;
      var classNope = (allowedElements$$3 & TypeScript$$14.AllowedElements.ClassDeclarations) == TypeScript$$14.AllowedElements.None;
      errorRecoverySet$$38 |= TypeScript$$14.ErrorRecoverySet.TypeScriptS | TypeScript$$14.ErrorRecoverySet.RCurly;
      this.state = ParseState.StartStatementList;
      var oldStrictMode = this.strictMode;
      this.nestingLevel++;
      for (;;) {
        if (this.currentToken.tokenId == TypeScript$$14.TokenID.CloseBrace || noLeadingCase && (this.currentToken.tokenId == TypeScript$$14.TokenID.Case || this.currentToken.tokenId == TypeScript$$14.TokenID.Default) || innerStmts && this.currentToken.tokenId == TypeScript$$14.TokenID.Export || classNope && this.currentToken.tokenId == TypeScript$$14.TokenID.Class || this.currentToken.tokenId == TypeScript$$14.TokenID.EndOfFile) {
          this.state = ParseState.EndStmtList;
          statements$$1.limChar = limChar$$8;
          if (statements$$1.members.length == 0) {
            statements$$1.preComments = this.parseComments();
          } else {
            statements$$1.postComments = this.parseComments();
          }
          this.strictMode = oldStrictMode;
          this.nestingLevel--;
          return;
        }
        var stmt$$4 = this.parseStatement(errorRecoverySet$$38 & ~(TypeScript$$14.ErrorRecoverySet.Else | TypeScript$$14.ErrorRecoverySet.RParen | TypeScript$$14.ErrorRecoverySet.Catch | TypeScript$$14.ErrorRecoverySet.Colon), allowedElements$$3, parentModifiers$$8);
        if (stmt$$4) {
          stmt$$4.postComments = this.combineComments(stmt$$4.postComments, this.parseCommentsForLine(this.scanner.prevLine));
          statements$$1.append(stmt$$4);
          limChar$$8 = stmt$$4.limChar;
          if (directivePrologue) {
            if (stmt$$4.nodeType == TypeScript$$14.NodeType.QString) {
              var qstring = stmt$$4;
              if (qstring.text == '"use strict"') {
                statements$$1.flags |= TypeScript$$14.ASTFlags.StrictMode;
                this.strictMode = true;
              } else {
                directivePrologue = false;
              }
            } else {
              directivePrologue = false;
            }
          }
        }
      }
    };
    Parser$$1.prototype.quickParse = function(sourceText$$1, filename$$1, unitIndex$$1) {
      var svGenTarget = TypeScript$$14.moduleGenTarget;
      try {
        TypeScript$$14.moduleGenTarget = TypeScript$$14.ModuleGenTarget.Local;
        var script$$7 = this.parse(sourceText$$1, filename$$1, unitIndex$$1, TypeScript$$14.AllowedElements.QuickParse);
        return new QuickParseResult(script$$7, this.scanner.lexState);
      } finally {
        TypeScript$$14.moduleGenTarget = svGenTarget;
      }
    };
    Parser$$1.prototype.parse = function(sourceText$$2, filename$$2, unitIndex$$2, allowedElements$$4) {
      if (typeof allowedElements$$4 === "undefined") {
        allowedElements$$4 = TypeScript$$14.AllowedElements.Global;
      }
      var _this$$2 = this;
      this.ambientModule = false;
      this.topLevel = true;
      this.hasTopLevelImportOrExport = false;
      this.requiresExtendsBlock = false;
      this.fname = filename$$2;
      this.currentUnitIndex = unitIndex$$2;
      this.amdDependencies = [];
      this.scanner.resetComments();
      this.scanner.setErrorHandler(function(message$$15) {
        return _this$$2.reportParseError(message$$15);
      });
      this.scanner.setSourceText(sourceText$$2, TypeScript$$14.LexMode.File);
      var leftCurlyCount$$5 = this.scanner.leftCurlyCount;
      var rightCurlyCount$$5 = this.scanner.rightCurlyCount;
      var minChar$$28 = this.scanner.pos;
      this.currentToken = this.scanner.scan();
      this.pushDeclLists();
      var bod$$3 = new TypeScript$$14.ASTList;
      bod$$3.minChar = minChar$$28;
      this.state = ParseState.StartScript;
      this.parsingDeclareFile = TypeScript$$14.isDSTRFile(filename$$2) || TypeScript$$14.isDTSFile(filename$$2);
      for (;true;) {
        this.parseStatementList(TypeScript$$14.ErrorRecoverySet.EOF | TypeScript$$14.ErrorRecoverySet.Func, bod$$3, true, false, allowedElements$$4, TypeScript$$14.Modifiers.None);
        if (this.currentToken.tokenId === TypeScript$$14.TokenID.EndOfFile) {
          break;
        }
        var badToken = TypeScript$$14.tokenTable[this.currentToken.tokenId];
        this.reportParseError("Unexpected statement block terminator '" + badToken.text + "'");
        this.currentToken = this.scanner.scan();
      }
      this.state = ParseState.EndScript;
      bod$$3.limChar = this.scanner.pos;
      var topLevelMod = null;
      if (TypeScript$$14.moduleGenTarget != TypeScript$$14.ModuleGenTarget.Local && this.hasTopLevelImportOrExport) {
        var correctedFileName = TypeScript$$14.switchToForwardSlashes(filename$$2);
        var id$$15 = new TypeScript$$14.Identifier(correctedFileName);
        topLevelMod = new TypeScript$$14.ModuleDeclaration(id$$15, bod$$3, this.topVarList(), this.topScopeList(), null);
        topLevelMod.modFlags |= TypeScript$$14.ModuleFlags.IsDynamic;
        topLevelMod.modFlags |= TypeScript$$14.ModuleFlags.IsWholeFile;
        topLevelMod.modFlags |= TypeScript$$14.ModuleFlags.Exported;
        if (this.parsingDeclareFile) {
          topLevelMod.modFlags |= TypeScript$$14.ModuleFlags.Ambient;
        }
        topLevelMod.minChar = minChar$$28;
        topLevelMod.limChar = this.scanner.pos;
        topLevelMod.prettyName = TypeScript$$14.getPrettyName(correctedFileName);
        topLevelMod.containsUnicodeChar = this.scanner.seenUnicodeChar;
        topLevelMod.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;
        topLevelMod.amdDependencies = this.amdDependencies;
        bod$$3 = new TypeScript$$14.ASTList;
        bod$$3.minChar = topLevelMod.minChar;
        bod$$3.limChar = topLevelMod.limChar;
        bod$$3.append(topLevelMod);
      }
      var script$$8 = new TypeScript$$14.Script(this.topVarList(), this.topScopeList());
      script$$8.bod = bod$$3;
      this.popDeclLists();
      script$$8.minChar = minChar$$28;
      script$$8.limChar = this.scanner.pos;
      script$$8.locationInfo = new TypeScript$$14.LocationInfo(filename$$2, this.scanner.lineMap, unitIndex$$2);
      script$$8.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount$$5;
      script$$8.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount$$5;
      script$$8.isDeclareFile = this.parsingDeclareFile;
      script$$8.topLevelMod = topLevelMod;
      script$$8.containsUnicodeChar = this.scanner.seenUnicodeChar;
      script$$8.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;
      script$$8.requiresExtendsBlock = this.requiresExtendsBlock;
      return script$$8;
    };
    return Parser$$1;
  }();
  TypeScript$$14.Parser = Parser;
  TypeScript$$14.quickParse = quickParse;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$15) {
  function prePrintAST(ast$$46, parent$$43, walker$$40) {
    var pc = walker$$40.state;
    ast$$46.print(pc);
    pc.increaseIndent();
    return ast$$46;
  }
  function postPrintAST(ast$$47, parent$$44, walker$$41) {
    var pc$$1 = walker$$41.state;
    pc$$1.decreaseIndent();
    return ast$$47;
  }
  var PrintContext = function() {
    function PrintContext$$1(outfile$$4, parser$$1) {
      this.outfile = outfile$$4;
      this.parser = parser$$1;
      this.builder = "";
      this.indent1 = "  ";
      this.indentStrings = [];
      this.indentAmt = 0;
    }
    PrintContext$$1.prototype.increaseIndent = function() {
      this.indentAmt++;
    };
    PrintContext$$1.prototype.decreaseIndent = function() {
      this.indentAmt--;
    };
    PrintContext$$1.prototype.startLine = function() {
      if (this.builder.length > 0) {
        TypeScript$$15.CompilerDiagnostics.Alert(this.builder);
      }
      var indentString$$1 = this.indentStrings[this.indentAmt];
      if (indentString$$1 === undefined) {
        indentString$$1 = "";
        var i$$52 = 0;
        for (;i$$52 < this.indentAmt;i$$52++) {
          indentString$$1 += this.indent1;
        }
        this.indentStrings[this.indentAmt] = indentString$$1;
      }
      this.builder += indentString$$1;
    };
    PrintContext$$1.prototype.write = function(s$$14) {
      this.builder += s$$14;
    };
    PrintContext$$1.prototype.writeLine = function(s$$15) {
      this.builder += s$$15;
      this.outfile.WriteLine(this.builder);
      this.builder = "";
    };
    return PrintContext$$1;
  }();
  TypeScript$$15.PrintContext = PrintContext;
  TypeScript$$15.prePrintAST = prePrintAST;
  TypeScript$$15.postPrintAST = postPrintAST;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$16) {
  function LexLookUpUnicodeMap(code$$2, map$$1) {
    var lo = 0;
    var hi = map$$1.length;
    var mid;
    for (;lo + 1 < hi;) {
      mid = lo + (hi - lo) / 2;
      mid -= mid % 2;
      if (map$$1[mid] <= code$$2 && code$$2 <= map$$1[mid + 1]) {
        return true;
      }
      if (code$$2 < map$$1[mid]) {
        hi = mid;
      } else {
        lo = mid + 2;
      }
    }
    return false;
  }
  function LexIsUnicodeDigit(code$$3) {
    if (TypeScript$$16.codeGenTarget == TypeScript$$16.CodeGenTarget.ES3) {
      return LexLookUpUnicodeMap(code$$3, unicodeES3IdCont);
    } else {
      return LexLookUpUnicodeMap(code$$3, unicodeES5IdCont);
    }
  }
  function LexIsUnicodeIdStart(code$$4) {
    if (TypeScript$$16.codeGenTarget == TypeScript$$16.CodeGenTarget.ES3) {
      return LexLookUpUnicodeMap(code$$4, unicodeES3IdStart);
    } else {
      return LexLookUpUnicodeMap(code$$4, unicodeES5IdStart);
    }
  }
  function LexInitialize() {
    TypeScript$$16.initializeStaticTokens();
    autoToken[TypeScript$$16.LexCodeLPR] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.OpenParen];
    autoToken[TypeScript$$16.LexCodeRPR] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.CloseParen];
    autoToken[TypeScript$$16.LexCodeCMA] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Comma];
    autoToken[TypeScript$$16.LexCodeSMC] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Semicolon];
    autoToken[TypeScript$$16.LexCodeLBR] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.OpenBracket];
    autoToken[TypeScript$$16.LexCodeRBR] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.CloseBracket];
    autoToken[TypeScript$$16.LexCodeTIL] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Tilde];
    autoToken[TypeScript$$16.LexCodeQUE] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Question];
    autoToken[TypeScript$$16.LexCodeLC] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.OpenBrace];
    autoToken[TypeScript$$16.LexCodeRC] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.CloseBrace];
    autoToken[TypeScript$$16.LexCodeCOL] = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Colon];
    TypeScript$$16.LexKeywordTable = new TypeScript$$16.StringHashTable;
    var i$$53;
    for (i$$53 in TypeScript$$16.TokenID._map) {
      if (i$$53 <= TypeScript$$16.TokenID.LimKeyword) {
        TypeScript$$16.LexKeywordTable.add(TypeScript$$16.TokenID._map[i$$53].toLowerCase(), i$$53);
      }
    }
    var j$$6 = 0;
    for (;j$$6 < TypeScript$$16.LexCodeASCIIChars;j$$6++) {
      if (LexIsIdentifierStartChar(j$$6)) {
        lexIdStartTable[j$$6] = true;
      } else {
        lexIdStartTable[j$$6] = false;
      }
    }
  }
  function LexAdjustIndent(code$$5, indentAmt) {
    if (code$$5 == TypeScript$$16.LexCodeLBR || code$$5 == TypeScript$$16.LexCodeLC || code$$5 == TypeScript$$16.LexCodeLPR) {
      return indentAmt + 1;
    } else {
      if (code$$5 == TypeScript$$16.LexCodeRBR || code$$5 == TypeScript$$16.LexCodeRC || code$$5 == TypeScript$$16.LexCodeRPR) {
        return indentAmt - 1;
      } else {
        return indentAmt;
      }
    }
  }
  function LexIsIdentifierStartChar(code$$6) {
    return code$$6 >= 97 && code$$6 <= 122 || code$$6 >= 65 && code$$6 <= 90 || code$$6 == TypeScript$$16.LexCodeDollar || code$$6 == TypeScript$$16.LexCodeUnderscore;
  }
  function LexIsDigit(code$$7) {
    return code$$7 >= 48 && code$$7 <= 57;
  }
  function LexIsIdentifierChar(code$$8) {
    return lexIdStartTable[code$$8] || LexIsDigit(code$$8);
  }
  function LexMatchingOpen(code$$9) {
    if (code$$9 == TypeScript$$16.LexCodeRBR) {
      return TypeScript$$16.LexCodeLBR;
    } else {
      if (code$$9 == TypeScript$$16.LexCodeRC) {
        return TypeScript$$16.LexCodeLC;
      } else {
        if (code$$9 == TypeScript$$16.LexCodeRPR) {
          return TypeScript$$16.LexCodeLPR;
        } else {
          return 0;
        }
      }
    }
  }
  function convertTokToIDName(tok) {
    return convertTokToIDBase(tok, true, false);
  }
  function convertTokToID(tok$$1, strictMode) {
    return convertTokToIDBase(tok$$1, false, strictMode);
  }
  function convertTokToIDBase(tok$$2, identifierName, strictMode$$1) {
    if (tok$$2.tokenId <= TypeScript$$16.TokenID.LimKeyword) {
      var tokInfo = TypeScript$$16.lookupToken(tok$$2.tokenId);
      if (tokInfo != undefined) {
        var resFlags = TypeScript$$16.Reservation.Javascript | TypeScript$$16.Reservation.JavascriptFuture;
        if (strictMode$$1) {
          resFlags |= TypeScript$$16.Reservation.JavascriptFutureStrict;
        }
        if (identifierName || !TypeScript$$16.hasFlag(tokInfo.reservation, resFlags)) {
          return true;
        }
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
  function getLineNumberFromPosition(lineMap$$1, position$$2) {
    if (position$$2 === -1) {
      return 0;
    }
    var min$$2 = 0;
    var max$$1 = lineMap$$1.length - 1;
    for (;min$$2 < max$$1;) {
      var med = min$$2 + max$$1 >> 1;
      if (position$$2 < lineMap$$1[med]) {
        max$$1 = med - 1;
      } else {
        if (position$$2 < lineMap$$1[med + 1]) {
          min$$2 = max$$1 = med;
        } else {
          min$$2 = med + 1;
        }
      }
    }
    return min$$2;
  }
  function getSourceLineColFromMap(lineCol$$5, minChar$$29, lineMap$$2) {
    var line$$5 = getLineNumberFromPosition(lineMap$$2, minChar$$29);
    if (line$$5 > 0) {
      lineCol$$5.line = line$$5;
      lineCol$$5.col = minChar$$29 - lineMap$$2[line$$5];
    }
  }
  function getLineColumnFromPosition(script$$9, position$$3) {
    var result$$10 = {line:-1, col:-1};
    getSourceLineColFromMap(result$$10, position$$3, script$$9.locationInfo.lineMap);
    if (result$$10.col >= 0) {
      result$$10.col++;
    }
    return result$$10;
  }
  function getPositionFromLineColumn(script$$10, line$$6, column) {
    return script$$10.locationInfo.lineMap[line$$6] + (column - 1);
  }
  function isPrimitiveTypeToken(token$$5) {
    switch(token$$5.tokenId) {
      case TypeScript$$16.TokenID.Any:
      ;
      case TypeScript$$16.TokenID.Bool:
      ;
      case TypeScript$$16.TokenID.Number:
      ;
      case TypeScript$$16.TokenID.String:
        return true;
    }
    return false;
  }
  function isModifier(token$$6) {
    switch(token$$6.tokenId) {
      case TypeScript$$16.TokenID.Public:
      ;
      case TypeScript$$16.TokenID.Private:
      ;
      case TypeScript$$16.TokenID.Static:
        return true;
    }
    return false;
  }
  TypeScript$$16.LexEOF = -1;
  TypeScript$$16.LexCodeNWL = 10;
  TypeScript$$16.LexCodeRET = 13;
  TypeScript$$16.LexCodeLS = 8232;
  TypeScript$$16.LexCodePS = 8233;
  TypeScript$$16.LexCodeTAB = 9;
  TypeScript$$16.LexCodeVTAB = 11;
  TypeScript$$16.LexCode_e = "e".charCodeAt(0);
  TypeScript$$16.LexCode_E = "E".charCodeAt(0);
  TypeScript$$16.LexCode_x = "x".charCodeAt(0);
  TypeScript$$16.LexCode_X = "X".charCodeAt(0);
  TypeScript$$16.LexCode_a = "a".charCodeAt(0);
  TypeScript$$16.LexCode_A = "A".charCodeAt(0);
  TypeScript$$16.LexCode_f = "f".charCodeAt(0);
  TypeScript$$16.LexCode_F = "F".charCodeAt(0);
  TypeScript$$16.LexCode_g = "g".charCodeAt(0);
  TypeScript$$16.LexCode_m = "m".charCodeAt(0);
  TypeScript$$16.LexCode_i = "i".charCodeAt(0);
  TypeScript$$16.LexCode_u = "u".charCodeAt(0);
  TypeScript$$16.LexCode_0 = "0".charCodeAt(0);
  TypeScript$$16.LexCode_9 = "9".charCodeAt(0);
  TypeScript$$16.LexCode_8 = "8".charCodeAt(0);
  TypeScript$$16.LexCode_7 = "7".charCodeAt(0);
  TypeScript$$16.LexCodeBSL = "\\".charCodeAt(0);
  TypeScript$$16.LexCodeSHP = "#".charCodeAt(0);
  TypeScript$$16.LexCodeBNG = "!".charCodeAt(0);
  TypeScript$$16.LexCodeQUO = '"'.charCodeAt(0);
  TypeScript$$16.LexCodeAPO = "'".charCodeAt(0);
  TypeScript$$16.LexCodePCT = "%".charCodeAt(0);
  TypeScript$$16.LexCodeAMP = "&".charCodeAt(0);
  TypeScript$$16.LexCodeLPR = "(".charCodeAt(0);
  TypeScript$$16.LexCodeRPR = ")".charCodeAt(0);
  TypeScript$$16.LexCodePLS = "+".charCodeAt(0);
  TypeScript$$16.LexCodeMIN = "-".charCodeAt(0);
  TypeScript$$16.LexCodeMUL = "*".charCodeAt(0);
  TypeScript$$16.LexCodeSLH = "/".charCodeAt(0);
  TypeScript$$16.LexCodeXOR = "^".charCodeAt(0);
  TypeScript$$16.LexCodeCMA = ",".charCodeAt(0);
  TypeScript$$16.LexCodeDOT = ".".charCodeAt(0);
  TypeScript$$16.LexCodeLT = "<".charCodeAt(0);
  TypeScript$$16.LexCodeEQ = "=".charCodeAt(0);
  TypeScript$$16.LexCodeGT = ">".charCodeAt(0);
  TypeScript$$16.LexCodeQUE = "?".charCodeAt(0);
  TypeScript$$16.LexCodeLBR = "[".charCodeAt(0);
  TypeScript$$16.LexCodeRBR = "]".charCodeAt(0);
  TypeScript$$16.LexCodeUSC = "_".charCodeAt(0);
  TypeScript$$16.LexCodeLC = "{".charCodeAt(0);
  TypeScript$$16.LexCodeRC = "}".charCodeAt(0);
  TypeScript$$16.LexCodeBAR = "|".charCodeAt(0);
  TypeScript$$16.LexCodeTIL = "~".charCodeAt(0);
  TypeScript$$16.LexCodeCOL = ":".charCodeAt(0);
  TypeScript$$16.LexCodeSMC = ";".charCodeAt(0);
  TypeScript$$16.LexCodeUnderscore = "_".charCodeAt(0);
  TypeScript$$16.LexCodeDollar = "$".charCodeAt(0);
  TypeScript$$16.LexCodeSpace = 32;
  TypeScript$$16.LexCodeAtSign = "@".charCodeAt(0);
  TypeScript$$16.LexCodeASCIIChars = 128;
  TypeScript$$16.LexKeywordTable = undefined;
  var autoToken = new Array(TypeScript$$16.LexCodeASCIIChars);
  var lexIdStartTable = new Array(TypeScript$$16.LexCodeASCIIChars);
  var unicodeES3IdStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 
  2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 
  2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 
  3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 
  4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 
  8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 13312, 19893, 19893, 19968, 19968, 40869, 40869, 40960, 42124, 44032, 44032, 55203, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 
  64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
  var unicodeES3IdCont = [768, 846, 864, 866, 1155, 1158, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1611, 1621, 1632, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 2305, 2307, 2364, 2364, 2366, 2381, 2385, 2388, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2562, 2562, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2662, 2673, 
  2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2918, 2927, 2946, 2947, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3174, 3183, 3202, 3203, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3302, 3311, 3330, 3331, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 
  3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3984, 3991, 3993, 4028, 4038, 4038, 4140, 4146, 4150, 4153, 4160, 4169, 4182, 4185, 4969, 4977, 6068, 6099, 6112, 6121, 6160, 6169, 6313, 6313, 8255, 8256, 8400, 8412, 8417, 8417, 12330, 12335, 12441, 12442, 12539, 12539, 64286, 64286, 65056, 65059, 65075, 65076, 65101, 65103, 65296, 
  65305, 65343, 65343, 65381, 65381];
  var unicodeES5IdStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 
  2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 
  2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 
  3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 
  4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6E3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 
  6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 
  8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 
  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 13312, 19893, 19893, 19968, 19968, 40908, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43E3, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 
  43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032, 55203, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 
  64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
  var unicodeES5IdCont = [768, 879, 1155, 1159, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1552, 1562, 1611, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 1984, 1993, 2027, 2035, 2070, 2073, 2075, 2083, 2085, 2087, 2089, 2093, 2137, 2139, 2276, 2302, 2304, 2307, 2362, 2364, 2366, 2383, 2385, 2391, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 
  2561, 2563, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2662, 2673, 2677, 2677, 2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2786, 2787, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2914, 2915, 2918, 2927, 2946, 2946, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3046, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3170, 3171, 3174, 3183, 3202, 3203, 3260, 3260, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 
  3298, 3299, 3302, 3311, 3330, 3331, 3390, 3396, 3398, 3400, 3402, 3405, 3415, 3415, 3426, 3427, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3981, 3991, 3993, 4028, 4038, 4038, 4139, 4158, 4160, 4169, 4182, 4185, 4190, 4192, 4194, 4196, 4199, 4205, 4209, 4212, 
  4226, 4237, 4239, 4253, 4957, 4959, 5906, 5908, 5938, 5940, 5970, 5971, 6002, 6003, 6068, 6099, 6109, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6313, 6313, 6432, 6443, 6448, 6459, 6470, 6479, 6576, 6592, 6600, 6601, 6608, 6617, 6679, 6683, 6741, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6912, 6916, 6964, 6980, 6992, 7001, 7019, 7027, 7040, 7042, 7073, 7085, 7088, 7097, 7142, 7155, 7204, 7223, 7232, 7241, 7248, 7257, 7376, 7378, 7380, 7400, 7405, 7405, 7410, 7412, 7616, 7654, 7676, 7679, 8204, 8205, 
  8255, 8256, 8276, 8276, 8400, 8412, 8417, 8417, 8421, 8432, 11503, 11505, 11647, 11647, 11744, 11775, 12330, 12335, 12441, 12442, 42528, 42537, 42607, 42607, 42612, 42621, 42655, 42655, 42736, 42737, 43010, 43010, 43014, 43014, 43019, 43019, 43043, 43047, 43136, 43137, 43188, 43204, 43216, 43225, 43232, 43249, 43264, 43273, 43302, 43309, 43335, 43347, 43392, 43395, 43443, 43456, 43472, 43481, 43561, 43574, 43587, 43587, 43596, 43597, 43600, 43609, 43643, 43643, 43696, 43696, 43698, 43700, 43703, 
  43704, 43710, 43711, 43713, 43713, 43755, 43759, 43765, 43766, 44003, 44010, 44012, 44013, 44016, 44025, 64286, 64286, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65296, 65305, 65343, 65343];
  TypeScript$$16.LexLookUpUnicodeMap = LexLookUpUnicodeMap;
  TypeScript$$16.LexIsUnicodeDigit = LexIsUnicodeDigit;
  TypeScript$$16.LexIsUnicodeIdStart = LexIsUnicodeIdStart;
  TypeScript$$16.LexInitialize = LexInitialize;
  TypeScript$$16.LexAdjustIndent = LexAdjustIndent;
  TypeScript$$16.LexIsIdentifierStartChar = LexIsIdentifierStartChar;
  TypeScript$$16.LexIsDigit = LexIsDigit;
  TypeScript$$16.LexIsIdentifierChar = LexIsIdentifierChar;
  TypeScript$$16.LexMatchingOpen = LexMatchingOpen;
  (function(NumberScanState$$1) {
    NumberScanState$$1._map = [];
    NumberScanState$$1._map[0] = "Start";
    NumberScanState$$1.Start = 0;
    NumberScanState$$1._map[1] = "InFraction";
    NumberScanState$$1.InFraction = 1;
    NumberScanState$$1._map[2] = "InEmptyFraction";
    NumberScanState$$1.InEmptyFraction = 2;
    NumberScanState$$1._map[3] = "InExponent";
    NumberScanState$$1.InExponent = 3;
  })(TypeScript$$16.NumberScanState || (TypeScript$$16.NumberScanState = {}));
  var NumberScanState = TypeScript$$16.NumberScanState;
  (function(LexState$$1) {
    LexState$$1._map = [];
    LexState$$1._map[0] = "Start";
    LexState$$1.Start = 0;
    LexState$$1._map[1] = "InMultilineComment";
    LexState$$1.InMultilineComment = 1;
    LexState$$1._map[2] = "InMultilineSingleQuoteString";
    LexState$$1.InMultilineSingleQuoteString = 2;
    LexState$$1._map[3] = "InMultilineDoubleQuoteString";
    LexState$$1.InMultilineDoubleQuoteString = 3;
  })(TypeScript$$16.LexState || (TypeScript$$16.LexState = {}));
  var LexState = TypeScript$$16.LexState;
  (function(LexMode$$1) {
    LexMode$$1._map = [];
    LexMode$$1._map[0] = "Line";
    LexMode$$1.Line = 0;
    LexMode$$1._map[1] = "File";
    LexMode$$1.File = 1;
  })(TypeScript$$16.LexMode || (TypeScript$$16.LexMode = {}));
  var LexMode = TypeScript$$16.LexMode;
  (function(CommentStyle$$1) {
    CommentStyle$$1._map = [];
    CommentStyle$$1._map[0] = "Line";
    CommentStyle$$1.Line = 0;
    CommentStyle$$1._map[1] = "Block";
    CommentStyle$$1.Block = 1;
  })(TypeScript$$16.CommentStyle || (TypeScript$$16.CommentStyle = {}));
  var CommentStyle = TypeScript$$16.CommentStyle;
  var StringSourceText = function() {
    function StringSourceText$$1(text$$17) {
      this.text = text$$17;
    }
    StringSourceText$$1.prototype.getText = function(start$$7, end$$1) {
      return this.text.substring(start$$7, end$$1);
    };
    StringSourceText$$1.prototype.getLength = function() {
      return this.text.length;
    };
    return StringSourceText$$1;
  }();
  TypeScript$$16.StringSourceText = StringSourceText;
  var SourceTextSegment = function() {
    function SourceTextSegment$$1(segmentStart, segmentEnd, segment) {
      this.segmentStart = segmentStart;
      this.segmentEnd = segmentEnd;
      this.segment = segment;
    }
    SourceTextSegment$$1.prototype.charCodeAt = function(index$$44) {
      return this.segment.charCodeAt(index$$44 - this.segmentStart);
    };
    SourceTextSegment$$1.prototype.substring = function(start$$8, end$$2) {
      return this.segment.substring(start$$8 - this.segmentStart, end$$2 - this.segmentStart);
    };
    return SourceTextSegment$$1;
  }();
  TypeScript$$16.SourceTextSegment = SourceTextSegment;
  var AggerateSourceTextSegment = function() {
    function AggerateSourceTextSegment$$1(seg1, seg2) {
      this.seg1 = seg1;
      this.seg2 = seg2;
    }
    AggerateSourceTextSegment$$1.prototype.charCodeAt = function(index$$45) {
      if (this.seg1.segmentStart <= index$$45 && index$$45 < this.seg1.segmentEnd) {
        return this.seg1.segment.charCodeAt(index$$45 - this.seg1.segmentStart);
      }
      return this.seg2.segment.charCodeAt(index$$45 - this.seg2.segmentStart);
    };
    AggerateSourceTextSegment$$1.prototype.substring = function(start$$9, end$$3) {
      if (this.seg1.segmentStart <= start$$9 && end$$3 <= this.seg1.segmentEnd) {
        return this.seg1.segment.substring(start$$9 - this.seg1.segmentStart, end$$3 - this.seg1.segmentStart);
      }
      return this.seg2.segment.substring(start$$9 - this.seg2.segmentStart) + this.seg1.segment.substring(0, end$$3 - this.seg1.segmentStart);
    };
    return AggerateSourceTextSegment$$1;
  }();
  TypeScript$$16.AggerateSourceTextSegment = AggerateSourceTextSegment;
  var ScannerTextStream = function() {
    function ScannerTextStream$$1(sourceText$$3) {
      this.sourceText = sourceText$$3;
      this.agg = new AggerateSourceTextSegment(ScannerTextStream$$1.emptySegment, ScannerTextStream$$1.emptySegment);
      this.len = this.sourceText.getLength();
    }
    ScannerTextStream$$1.emptySegment = new SourceTextSegment(0, 0, "");
    ScannerTextStream$$1.prototype.max = function(a$$4, b$$3) {
      return a$$4 >= b$$3 ? a$$4 : b$$3;
    };
    ScannerTextStream$$1.prototype.min = function(a$$5, b$$4) {
      return a$$5 <= b$$4 ? a$$5 : b$$4;
    };
    ScannerTextStream$$1.prototype.fetchSegment = function(start$$10, end$$4) {
      if (this.agg.seg1.segmentStart <= start$$10 && end$$4 <= this.agg.seg1.segmentEnd) {
        return this.agg.seg1;
      }
      if (this.agg.seg2.segmentStart <= start$$10 && end$$4 <= this.agg.seg1.segmentEnd) {
        return this.agg;
      }
      var prev = this.agg.seg1;
      var s$$16 = prev.segmentEnd;
      var e$$9 = TypeScript$$16.max(s$$16 + 512, end$$4);
      e$$9 = TypeScript$$16.min(e$$9, this.len);
      var src$$1 = this.sourceText.getText(s$$16, e$$9);
      var newSeg = new SourceTextSegment(s$$16, e$$9, src$$1);
      this.agg.seg2 = prev;
      this.agg.seg1 = newSeg;
      return this.agg;
    };
    ScannerTextStream$$1.prototype.charCodeAt = function(index$$46) {
      return this.fetchSegment(index$$46, index$$46 + 1).charCodeAt(index$$46);
    };
    ScannerTextStream$$1.prototype.substring = function(start$$11, end$$5) {
      return this.fetchSegment(start$$11, end$$5).substring(start$$11, end$$5);
    };
    return ScannerTextStream$$1;
  }();
  TypeScript$$16.ScannerTextStream = ScannerTextStream;
  var SavedTokens = function() {
    function SavedTokens$$1() {
      this.prevToken = null;
      this.curSavedToken = null;
      this.prevSavedToken = null;
      this.prevToken = null;
      this.currentToken = 0;
      this.tokens = new Array;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      this.prevLine = 1;
      this.line = 1;
      this.col = 0;
      this.lexState = LexState.Start;
      this.commentStack = new Array;
      this.lineMap = [];
    }
    SavedTokens$$1.prototype.previousToken = function() {
      return this.prevToken;
    };
    SavedTokens$$1.prototype.close = function() {
      this.currentToken = 0;
    };
    SavedTokens$$1.prototype.addToken = function(tok$$3, scanner) {
      this.tokens[this.currentToken++] = new TypeScript$$16.SavedToken(tok$$3, scanner.startPos, scanner.pos);
    };
    SavedTokens$$1.prototype.scan = function() {
      this.startLine = this.line;
      this.startPos = this.col;
      if (this.currentTokenIndex == this.currentTokens.length) {
        if (this.line < this.lineMap.length) {
          this.line++;
          this.col = 0;
          this.currentTokenIndex = 0;
          this.currentTokens = this.tokensByLine[this.line];
        } else {
          return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EndOfFile];
        }
      }
      if (this.currentTokenIndex < this.currentTokens.length) {
        this.prevToken = this.curSavedToken.tok;
        this.prevSavedToken = this.curSavedToken;
        this.curSavedToken = this.currentTokens[this.currentTokenIndex++];
        var curToken = this.curSavedToken.tok;
        this.pos = this.curSavedToken.limChar;
        this.col += this.curSavedToken.limChar - this.curSavedToken.minChar;
        this.startPos = this.curSavedToken.minChar;
        this.prevLine = this.line;
        return curToken;
      } else {
        return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EndOfFile];
      }
    };
    SavedTokens$$1.prototype.syncToTok = function(offset$$8) {
      this.line = getLineNumberFromPosition(this.lineMap, offset$$8);
      this.currentTokenIndex = 0;
      var tmpCol = offset$$8 - this.lineMap[this.line];
      for (;this.lexStateByLine[this.line] == LexState.InMultilineComment && this.line > 0;) {
        this.line--;
        tmpCol = 0;
      }
      var lenMin1 = this.lineMap.length - 1;
      this.currentTokens = this.tokensByLine[this.line];
      for (;this.currentTokens.length == 0 && this.line < lenMin1;) {
        this.line++;
        this.currentTokens = this.tokensByLine[this.line];
        tmpCol = 0;
      }
      if (this.line <= lenMin1) {
        for (;this.currentTokenIndex < this.currentTokens.length && tmpCol > this.currentTokens[this.currentTokenIndex].limChar;) {
          this.currentTokenIndex++;
        }
        if (this.currentTokenIndex < this.currentTokens.length) {
          this.col = this.currentTokens[this.currentTokenIndex].minChar;
          return this.col + this.lineMap[this.line];
        }
      }
      return-1;
    };
    SavedTokens$$1.prototype.lastTokenLimChar = function() {
      if (this.prevSavedToken !== null) {
        return this.prevSavedToken.limChar;
      } else {
        return 0;
      }
    };
    SavedTokens$$1.prototype.lastTokenHadNewline = function() {
      return this.prevLine != this.startLine;
    };
    SavedTokens$$1.prototype.pushComment = function(comment$$3) {
      this.commentStack.push(comment$$3);
    };
    SavedTokens$$1.prototype.getComments = function() {
      var stack$$1 = this.commentStack;
      this.commentStack = [];
      return stack$$1;
    };
    SavedTokens$$1.prototype.getCommentsForLine = function(line$$7) {
      var comments$$8 = null;
      for (;this.commentStack.length > 0 && this.commentStack[0].line == line$$7;) {
        if (comments$$8 == null) {
          comments$$8 = [this.commentStack.shift()];
        } else {
          comments$$8 = comments$$8.concat([this.commentStack.shift()]);
        }
      }
      return comments$$8;
    };
    SavedTokens$$1.prototype.resetComments = function() {
      this.commentStack = [];
    };
    SavedTokens$$1.prototype.setSourceText = function(newSrc, textMode) {
    };
    SavedTokens$$1.prototype.setErrorHandler = function(reportError) {
    };
    SavedTokens$$1.prototype.getLookAheadToken = function() {
      throw new Error("Invalid operation.");
    };
    return SavedTokens$$1;
  }();
  TypeScript$$16.SavedTokens = SavedTokens;
  var Scanner = function() {
    function Scanner$$1() {
      this.prevLine = 1;
      this.line = 1;
      this.col = 0;
      this.pos = 0;
      this.startPos = 0;
      this.len = 0;
      this.lineMap = [];
      this.ch = TypeScript$$16.LexEOF;
      this.lexState = LexState.Start;
      this.mode = LexMode.File;
      this.scanComments = true;
      this.interveningWhitespace = false;
      this.interveningWhitespacePos = 0;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.commentStack = new Array;
      this.saveScan = null;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      this.prevTok = TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EndOfFile];
      this.startCol = this.col;
      this.startLine = this.line;
      this.lineMap[1] = 0;
      if (!TypeScript$$16.LexKeywordTable) {
        LexInitialize();
      }
    }
    Scanner$$1.prototype.previousToken = function() {
      return this.prevTok;
    };
    Scanner$$1.prototype.setSourceText = function(newSrc$$1, textMode$$1) {
      this.mode = textMode$$1;
      this.scanComments = this.mode === LexMode.Line;
      this.pos = 0;
      this.interveningWhitespacePos = 0;
      this.startPos = 0;
      this.line = 1;
      this.col = 0;
      this.startCol = this.col;
      this.startLine = this.line;
      this.len = 0;
      this.src = newSrc$$1.getText(0, newSrc$$1.getLength());
      this.len = this.src.length;
      this.lineMap = [];
      this.lineMap[1] = 0;
      this.commentStack = [];
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
    };
    Scanner$$1.prototype.setErrorHandler = function(reportError$$1) {
      this.reportError = reportError$$1;
    };
    Scanner$$1.prototype.setSaveScan = function(savedTokens) {
      this.saveScan = savedTokens;
    };
    Scanner$$1.prototype.setText = function(newSrc$$2, textMode$$2) {
      this.setSourceText(new StringSourceText(newSrc$$2), textMode$$2);
    };
    Scanner$$1.prototype.setScanComments = function(value$$34) {
      this.scanComments = value$$34;
    };
    Scanner$$1.prototype.getLexState = function() {
      return this.lexState;
    };
    Scanner$$1.prototype.tokenStart = function() {
      this.startPos = this.pos;
      this.startLine = this.line;
      this.startCol = this.col;
      this.interveningWhitespace = false;
    };
    Scanner$$1.prototype.peekChar = function() {
      if (this.pos < this.len) {
        return this.src.charCodeAt(this.pos);
      } else {
        return TypeScript$$16.LexEOF;
      }
    };
    Scanner$$1.prototype.peekCharAt = function(index$$47) {
      if (index$$47 < this.len) {
        return this.src.charCodeAt(index$$47);
      } else {
        return TypeScript$$16.LexEOF;
      }
    };
    Scanner$$1.prototype.IsHexDigit = function(c$$8) {
      return c$$8 >= TypeScript$$16.LexCode_0 && c$$8 <= TypeScript$$16.LexCode_9 || c$$8 >= TypeScript$$16.LexCode_A && c$$8 <= TypeScript$$16.LexCode_F || c$$8 >= TypeScript$$16.LexCode_a && c$$8 <= TypeScript$$16.LexCode_f;
    };
    Scanner$$1.prototype.IsOctalDigit = function(c$$9) {
      return c$$9 >= TypeScript$$16.LexCode_0 && c$$9 <= TypeScript$$16.LexCode_7 || c$$9 >= TypeScript$$16.LexCode_a && c$$9 <= TypeScript$$16.LexCode_f;
    };
    Scanner$$1.prototype.scanHexDigits = function() {
      var atLeastOneDigit = false;
      for (;;) {
        if (this.IsHexDigit(this.ch)) {
          this.nextChar();
          atLeastOneDigit = true;
        } else {
          if (atLeastOneDigit) {
            return new TypeScript$$16.NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));
          } else {
            return null;
          }
        }
      }
    };
    Scanner$$1.prototype.scanOctalDigits = function() {
      var atLeastOneDigit$$1 = false;
      for (;;) {
        if (this.IsOctalDigit(this.ch)) {
          this.nextChar();
          atLeastOneDigit$$1 = true;
        } else {
          if (atLeastOneDigit$$1) {
            return new TypeScript$$16.NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));
          } else {
            return null;
          }
        }
      }
    };
    Scanner$$1.prototype.scanDecimalNumber = function(state$$4) {
      var atLeastOneDigit$$2 = false;
      var svPos$$1 = this.pos;
      var svCol = this.col;
      for (;;) {
        if (LexIsDigit(this.ch)) {
          atLeastOneDigit$$2 = true;
          if (this.ch != TypeScript$$16.LexCode_0 && state$$4 == NumberScanState.InEmptyFraction) {
            state$$4 = NumberScanState.InFraction;
          }
          this.nextChar();
        } else {
          if (this.ch == TypeScript$$16.LexCodeDOT) {
            if (state$$4 == NumberScanState.Start) {
              this.nextChar();
              state$$4 = NumberScanState.InEmptyFraction;
            } else {
              if (atLeastOneDigit$$2) {
                return new TypeScript$$16.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state$$4 == NumberScanState.InEmptyFraction);
              } else {
                this.pos = svPos$$1;
                this.col = svCol;
                return null;
              }
            }
          } else {
            if (this.ch == TypeScript$$16.LexCode_e || this.ch == TypeScript$$16.LexCode_E) {
              if (state$$4 == NumberScanState.Start) {
                if (atLeastOneDigit$$2) {
                  atLeastOneDigit$$2 = false;
                  this.nextChar();
                  state$$4 = NumberScanState.InExponent;
                } else {
                  this.pos = svPos$$1;
                  this.col = svCol;
                  return null;
                }
              } else {
                if (state$$4 == NumberScanState.InFraction || state$$4 == NumberScanState.InEmptyFraction) {
                  this.nextChar();
                  state$$4 = NumberScanState.InExponent;
                  atLeastOneDigit$$2 = false;
                } else {
                  if (atLeastOneDigit$$2) {
                    return new TypeScript$$16.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));
                  } else {
                    this.pos = svPos$$1;
                    this.col = svCol;
                    return null;
                  }
                }
              }
            } else {
              if (this.ch == TypeScript$$16.LexCodePLS || this.ch == TypeScript$$16.LexCodeMIN) {
                if (state$$4 == NumberScanState.InExponent) {
                  if (!atLeastOneDigit$$2) {
                    this.nextChar();
                  } else {
                    this.pos = svPos$$1;
                    this.col = svCol;
                    return null;
                  }
                } else {
                  if (state$$4 == NumberScanState.InEmptyFraction || state$$4 == NumberScanState.InFraction) {
                    return new TypeScript$$16.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state$$4 == NumberScanState.InEmptyFraction);
                  } else {
                    if (!atLeastOneDigit$$2) {
                      this.pos = svPos$$1;
                      this.col = svCol;
                      return null;
                    } else {
                      return new TypeScript$$16.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));
                    }
                  }
                }
              } else {
                if (!atLeastOneDigit$$2) {
                  this.pos = svPos$$1;
                  this.col = svCol;
                  return null;
                } else {
                  return new TypeScript$$16.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state$$4 == NumberScanState.InEmptyFraction);
                }
              }
            }
          }
        }
      }
    };
    Scanner$$1.prototype.scanNumber = function() {
      if (this.peekChar() == TypeScript$$16.LexCode_0) {
        switch(this.peekCharAt(this.pos + 1)) {
          case TypeScript$$16.LexCode_x:
          ;
          case TypeScript$$16.LexCode_X:
            this.advanceChar(2);
            return this.scanHexDigits();
          case TypeScript$$16.LexCode_8:
          ;
          case TypeScript$$16.LexCode_9:
          ;
          case TypeScript$$16.LexCodeDOT:
            return this.scanDecimalNumber(NumberScanState.Start);
          default:
            return this.scanOctalDigits();
        }
      } else {
        return this.scanDecimalNumber(NumberScanState.Start);
      }
    };
    Scanner$$1.prototype.scanFraction = function() {
      return this.scanDecimalNumber(NumberScanState.InFraction);
    };
    Scanner$$1.prototype.newLine = function() {
      this.col = 0;
      if (this.mode == LexMode.File) {
        this.line++;
        this.lineMap[this.line] = this.pos + 1;
      }
    };
    Scanner$$1.prototype.finishMultilineComment = function() {
      var ch2;
      this.lexState = LexState.InMultilineComment;
      for (;this.pos < this.len;) {
        if (this.ch == TypeScript$$16.LexCodeMUL) {
          ch2 = this.peekCharAt(this.pos + 1);
          if (ch2 == TypeScript$$16.LexCodeSLH) {
            this.advanceChar(2);
            if (this.mode == LexMode.File) {
              this.tokenStart();
            }
            this.lexState = LexState.Start;
            return true;
          }
        } else {
          if (this.ch == TypeScript$$16.LexCodeNWL) {
            this.newLine();
            if (this.mode == LexMode.Line) {
              this.nextChar();
              return false;
            }
          } else {
            if (this.ch >= TypeScript$$16.LexCodeASCIIChars) {
              this.seenUnicodeCharInComment = true;
            }
          }
        }
        this.nextChar();
      }
      return false;
    };
    Scanner$$1.prototype.pushComment = function(comment$$4) {
      this.commentStack.push(comment$$4);
    };
    Scanner$$1.prototype.getComments = function() {
      var stack$$2 = this.commentStack;
      this.commentStack = [];
      return stack$$2;
    };
    Scanner$$1.prototype.getCommentsForLine = function(line$$8) {
      var comments$$9 = null;
      for (;this.commentStack.length > 0 && this.commentStack[0].line == line$$8;) {
        if (comments$$9 == null) {
          comments$$9 = [this.commentStack.shift()];
        } else {
          comments$$9 = comments$$9.concat([this.commentStack.shift()]);
        }
      }
      return comments$$9;
    };
    Scanner$$1.prototype.resetComments = function() {
      this.commentStack = [];
    };
    Scanner$$1.prototype.endsLine = function(c$$10) {
      return c$$10 == TypeScript$$16.LexCodeNWL || c$$10 == TypeScript$$16.LexCodeRET || c$$10 == TypeScript$$16.LexCodeLS || c$$10 == TypeScript$$16.LexCodePS;
    };
    Scanner$$1.prototype.finishSinglelineComment = function() {
      for (;this.pos < this.len;) {
        if (this.endsLine(this.ch)) {
          break;
        }
        if (this.ch >= TypeScript$$16.LexCodeASCIIChars) {
          this.seenUnicodeCharInComment = true;
        }
        this.nextChar();
      }
      if (this.mode == LexMode.File) {
        this.tokenStart();
      }
    };
    Scanner$$1.prototype.tokenText = function() {
      return this.src.substring(this.startPos, this.pos);
    };
    Scanner$$1.prototype.findClosingSLH = function() {
      var index$$48 = this.pos;
      var ch2$$1 = this.src.charCodeAt(index$$48);
      var prevCh = 0;
      var liveEsc = false;
      for (;!this.endsLine(ch2$$1) && index$$48 < this.len;) {
        if (ch2$$1 == TypeScript$$16.LexCodeSLH && !liveEsc) {
          return index$$48;
        }
        prevCh = ch2$$1;
        index$$48++;
        if (liveEsc) {
          liveEsc = false;
        } else {
          liveEsc = prevCh == TypeScript$$16.LexCodeBSL;
        }
        ch2$$1 = this.src.charCodeAt(index$$48);
      }
      return-1;
    };
    Scanner$$1.prototype.speculateRegex = function() {
      if (TypeScript$$16.noRegexTable[this.prevTok.tokenId] != undefined) {
        return null;
      }
      var svPos$$2 = this.pos;
      var svCol$$1 = this.col;
      var index$$49 = this.findClosingSLH();
      if (index$$49 > 0) {
        var pattern$$1 = this.src.substring(svPos$$2, index$$49);
        var flags$$2 = "";
        this.pos = index$$49 + 1;
        this.ch = this.peekChar();
        var flagsStart = this.pos;
        for (;this.ch == TypeScript$$16.LexCode_i || this.ch == TypeScript$$16.LexCode_g || this.ch == TypeScript$$16.LexCode_m;) {
          this.nextChar();
        }
        if (this.pos - flagsStart > 3) {
          return null;
        } else {
          flags$$2 = this.src.substring(flagsStart, this.pos);
        }
        var regex$$2 = undefined;
        try {
          regex$$2 = new RegExp(pattern$$1, flags$$2);
        } catch (regexException) {
        }
        if (regex$$2) {
          this.col = svCol$$1 + (this.pos - this.startPos);
          return new TypeScript$$16.RegularExpressionLiteralToken(regex$$2);
        }
      }
      this.pos = svPos$$2;
      this.col = svCol$$1;
      return null;
    };
    Scanner$$1.prototype.lastTokenHadNewline = function() {
      return this.prevLine != this.startLine;
    };
    Scanner$$1.prototype.lastTokenLimChar = function() {
      return this.interveningWhitespace ? this.interveningWhitespacePos : this.startPos;
    };
    Scanner$$1.prototype.advanceChar = function(amt) {
      this.pos += amt;
      this.col += amt;
      this.ch = this.peekChar();
    };
    Scanner$$1.prototype.nextChar = function() {
      this.pos++;
      this.col++;
      this.ch = this.peekChar();
    };
    Scanner$$1.prototype.getLookAheadToken = function() {
      var prevLine$$1 = this.prevLine;
      var line$$9 = this.line;
      var col = this.col;
      var pos$$2 = this.pos;
      var startPos$$1 = this.startPos;
      var startCol = this.startCol;
      var startLine$$41 = this.startLine;
      var ch = this.ch;
      var prevTok = this.prevTok;
      var lexState = this.lexState;
      var interveningWhitespace = this.interveningWhitespace;
      var interveningWhitespacePos = this.interveningWhitespacePos;
      var leftCurlyCount$$6 = this.leftCurlyCount;
      var rightCurlyCount$$6 = this.rightCurlyCount;
      var seenUnicodeChar = this.seenUnicodeChar;
      var seenUnicodeCharInComment = this.seenUnicodeCharInComment;
      var commentStackLength = this.commentStack.length;
      var lookAheadToken = this.scan();
      this.prevLine = prevLine$$1;
      this.line = line$$9;
      this.col = col;
      this.pos = pos$$2;
      this.startPos = startPos$$1;
      this.startCol = startCol;
      this.startLine = startLine$$41;
      this.ch = ch;
      this.prevTok = prevTok;
      this.lexState = lexState;
      this.interveningWhitespace = interveningWhitespace;
      this.interveningWhitespacePos = interveningWhitespacePos;
      this.leftCurlyCount = leftCurlyCount$$6;
      this.rightCurlyCount = rightCurlyCount$$6;
      this.seenUnicodeChar = seenUnicodeChar;
      this.seenUnicodeCharInComment = seenUnicodeCharInComment;
      this.commentStack.length = commentStackLength;
      return lookAheadToken;
    };
    Scanner$$1.prototype.scanInLine = function() {
      if (this.lexState == LexState.InMultilineComment && this.scanComments) {
        this.ch = this.peekChar();
        var commentLine = this.line;
        this.finishMultilineComment();
        if (this.startPos < this.pos) {
          var commentText$$1 = this.src.substring(this.startPos, this.pos);
          this.tokenStart();
          return new TypeScript$$16.CommentToken(TypeScript$$16.TokenID.Comment, commentText$$1, true, this.startPos, commentLine, true);
        } else {
          return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EndOfFile];
        }
      } else {
        if (this.lexState == LexState.InMultilineSingleQuoteString && this.pos < this.len) {
          this.ch = TypeScript$$16.LexCodeAPO;
          this.lexState = LexState.Start;
          return this.scanStringConstant();
        } else {
          if (this.lexState == LexState.InMultilineDoubleQuoteString && this.pos < this.len) {
            this.ch = TypeScript$$16.LexCodeQUO;
            this.lexState = LexState.Start;
            return this.scanStringConstant();
          }
        }
      }
      this.prevLine = this.line;
      var prevTok$$1 = this.innerScan();
      if (prevTok$$1.tokenId != TypeScript$$16.TokenID.Whitespace) {
        this.prevTok = prevTok$$1;
      }
      return prevTok$$1;
    };
    Scanner$$1.prototype.scan = function() {
      this.prevLine = this.line;
      this.prevTok = this.innerScan();
      if (this.saveScan) {
        this.saveScan.addToken(this.prevTok, this);
      }
      return this.prevTok;
    };
    Scanner$$1.prototype.isValidUnicodeIdentifierChar = function() {
      var valid = LexIsUnicodeIdStart(this.ch) || LexIsUnicodeDigit(this.ch);
      this.seenUnicodeChar = this.seenUnicodeChar || valid;
      return valid;
    };
    Scanner$$1.prototype.scanStringConstant = function() {
      var endCode = this.ch;
      this.nextChar();
      scanStringConstantLoop: for (;;) {
        switch(this.ch) {
          case TypeScript$$16.LexEOF:
            this.reportScannerError("Unterminated string constant");
            break scanStringConstantLoop;
          case TypeScript$$16.LexCodeLS:
          ;
          case TypeScript$$16.LexCodePS:
            this.seenUnicodeChar = true;
          case TypeScript$$16.LexCodeRET:
          ;
          case TypeScript$$16.LexCodeNWL:
            this.reportScannerError("Unterminated string constant");
            break scanStringConstantLoop;
          case TypeScript$$16.LexCodeAPO:
          ;
          case TypeScript$$16.LexCodeQUO:
            if (this.ch == endCode) {
              this.nextChar();
              break scanStringConstantLoop;
            }
            break;
          case TypeScript$$16.LexCodeBSL:
            this.nextChar();
            switch(this.ch) {
              case TypeScript$$16.LexCodeAPO:
              ;
              case TypeScript$$16.LexCodeQUO:
              ;
              case TypeScript$$16.LexCodeBSL:
                this.nextChar();
                continue scanStringConstantLoop;
              case TypeScript$$16.LexCodeLS:
              ;
              case TypeScript$$16.LexCodePS:
                this.seenUnicodeChar = true;
              case TypeScript$$16.LexCodeRET:
              ;
              case TypeScript$$16.LexCodeNWL:
                if (this.ch == TypeScript$$16.LexCodeRET && this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeNWL) {
                  this.nextChar();
                }
                this.nextChar();
                this.newLine();
                if (this.mode == LexMode.Line) {
                  this.lexState = endCode == TypeScript$$16.LexCodeAPO ? LexState.InMultilineSingleQuoteString : LexState.InMultilineDoubleQuoteString;
                  break scanStringConstantLoop;
                }
                break;
              case TypeScript$$16.LexCode_x:
              ;
              case TypeScript$$16.LexCode_u:
                var expectedHexDigits = this.ch == TypeScript$$16.LexCode_x ? 2 : 4;
                this.nextChar();
                var i$$54 = 0;
                for (;i$$54 < expectedHexDigits;i$$54++) {
                  if (this.IsHexDigit(this.ch)) {
                    this.nextChar();
                  } else {
                    this.reportScannerError("Invalid Unicode escape sequence");
                    break;
                  }
                }
                continue scanStringConstantLoop;
            }
            break;
        }
        if (this.ch >= TypeScript$$16.LexCodeASCIIChars) {
          this.seenUnicodeChar = true;
        }
        this.nextChar();
      }
      return new TypeScript$$16.StringLiteralToken(this.src.substring(this.startPos, this.pos));
    };
    Scanner$$1.prototype.scanIdentifier = function() {
      var hasEscape = false;
      var isFirstChar = this.ch == TypeScript$$16.LexCodeBSL;
      var hasUnicode = false;
      for (;;) {
        for (;lexIdStartTable[this.ch] || LexIsDigit(this.ch) || this.ch >= TypeScript$$16.LexCodeASCIIChars && this.isValidUnicodeIdentifierChar();) {
          this.nextChar();
        }
        if (this.ch == TypeScript$$16.LexCodeBSL) {
          this.nextChar();
          if (this.ch == TypeScript$$16.LexCode_u) {
            this.nextChar();
            var h$$4 = 0;
            for (;h$$4 < 4;h$$4++) {
              if (this.IsHexDigit(this.ch)) {
                this.nextChar();
              } else {
                this.reportScannerError("Invalid Unicode escape sequence");
                return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Error];
              }
            }
            var hexChar = parseInt(this.src.substring(this.pos - 4, this.pos), 16);
            if (lexIdStartTable[hexChar] || !isFirstChar && LexIsDigit(hexChar) || hexChar >= TypeScript$$16.LexCodeASCIIChars && (LexIsUnicodeIdStart(hexChar) || !isFirstChar && LexIsUnicodeDigit(hexChar))) {
            } else {
              this.reportScannerError("Invalid identifier character");
              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Error];
            }
            hasEscape = true;
            isFirstChar = false;
            continue;
          }
          this.reportScannerError("Invalid Unicode escape sequence");
          return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Error];
        }
        break;
      }
      var id$$16;
      var text$$18 = this.src.substring(this.startPos, this.pos);
      if (!hasEscape && (id$$16 = TypeScript$$16.LexKeywordTable.lookup(text$$18)) != null) {
        return TypeScript$$16.staticTokens[id$$16];
      } else {
        return new TypeScript$$16.IdentifierToken(text$$18, hasEscape);
      }
    };
    Scanner$$1.prototype.innerScan = function() {
      var rtok$$1;
      this.tokenStart();
      this.ch = this.peekChar();
      start: for (;this.pos < this.len;) {
        if (lexIdStartTable[this.ch] || this.ch == TypeScript$$16.LexCodeBSL || this.ch >= TypeScript$$16.LexCodeASCIIChars && LexIsUnicodeIdStart(this.ch)) {
          return this.scanIdentifier();
        } else {
          if (this.ch == TypeScript$$16.LexCodeSpace) {
            if (!this.interveningWhitespace) {
              this.interveningWhitespacePos = this.pos;
            }
            do {
              this.nextChar();
            } while (this.ch == TypeScript$$16.LexCodeSpace);
            if (this.mode == LexMode.Line) {
              var whitespaceText = this.src.substring(this.startPos, this.pos);
              return new TypeScript$$16.WhitespaceToken(TypeScript$$16.TokenID.Whitespace, whitespaceText);
            } else {
              this.tokenStart();
              this.interveningWhitespace = true;
            }
          } else {
            if (this.ch == TypeScript$$16.LexCodeSLH) {
              this.nextChar();
              var commentText$$2;
              if (this.ch == TypeScript$$16.LexCodeSLH) {
                if (!this.interveningWhitespace) {
                  this.interveningWhitespacePos = this.pos - 1;
                }
                var commentStartPos = this.pos - 1;
                var commentStartLine = this.line;
                this.finishSinglelineComment();
                commentText$$2 = this.src.substring(commentStartPos, this.pos);
                var commentToken = new TypeScript$$16.CommentToken(TypeScript$$16.TokenID.Comment, commentText$$2, false, commentStartPos, commentStartLine, false);
                if (this.scanComments) {
                  this.startPos = commentStartPos;
                  return commentToken;
                } else {
                  this.pushComment(commentToken);
                }
                this.interveningWhitespace = true;
              } else {
                if (this.ch == TypeScript$$16.LexCodeMUL) {
                  if (!this.interveningWhitespace) {
                    this.interveningWhitespacePos = this.pos - 1;
                  }
                  commentStartPos = this.pos - 1;
                  commentStartLine = this.line;
                  this.nextChar();
                  this.finishMultilineComment();
                  commentText$$2 = this.src.substring(commentStartPos, this.pos);
                  var endsLine$$1 = this.endsLine(this.peekChar());
                  commentToken = new TypeScript$$16.CommentToken(TypeScript$$16.TokenID.Comment, commentText$$2, true, commentStartPos, commentStartLine, endsLine$$1);
                  if (this.scanComments) {
                    this.startPos = commentStartPos;
                    return commentToken;
                  } else {
                    this.pushComment(commentToken);
                  }
                  this.interveningWhitespace = true;
                } else {
                  var regexTok = this.speculateRegex();
                  if (regexTok) {
                    return regexTok;
                  } else {
                    if (this.peekCharAt(this.pos) == TypeScript$$16.LexCodeEQ) {
                      this.nextChar();
                      return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.SlashEquals];
                    } else {
                      return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Slash];
                    }
                  }
                }
              }
            } else {
              if (this.ch == TypeScript$$16.LexCodeSMC) {
                this.nextChar();
                return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Semicolon];
              } else {
                if (this.ch == TypeScript$$16.LexCodeAPO || this.ch == TypeScript$$16.LexCodeQUO) {
                  return this.scanStringConstant();
                } else {
                  if (autoToken[this.ch]) {
                    var atok = autoToken[this.ch];
                    if (atok.tokenId == TypeScript$$16.TokenID.OpenBrace) {
                      this.leftCurlyCount++;
                    } else {
                      if (atok.tokenId == TypeScript$$16.TokenID.CloseBrace) {
                        this.rightCurlyCount++;
                      }
                    }
                    this.nextChar();
                    return atok;
                  } else {
                    if (this.ch >= TypeScript$$16.LexCode_0 && this.ch <= TypeScript$$16.LexCode_9) {
                      rtok$$1 = this.scanNumber();
                      if (rtok$$1) {
                        return rtok$$1;
                      } else {
                        this.nextChar();
                        return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Error];
                      }
                    } else {
                      switch(this.ch) {
                        case TypeScript$$16.LexCodeTAB:
                        ;
                        case TypeScript$$16.LexCodeVTAB:
                          if (!this.interveningWhitespace) {
                            this.interveningWhitespacePos = this.pos;
                          }
                          if (this.mode == LexMode.Line) {
                            do {
                              this.nextChar();
                            } while (this.ch == TypeScript$$16.LexCodeSpace || this.ch == 9);
                            var wsText = this.src.substring(this.startPos, this.pos);
                            return new TypeScript$$16.WhitespaceToken(TypeScript$$16.TokenID.Whitespace, wsText);
                          } else {
                            this.interveningWhitespace = true;
                          }
                        ;
                        case 255:
                        ;
                        case 254:
                        ;
                        case 239:
                        ;
                        case 187:
                        ;
                        case 191:
                        ;
                        case TypeScript$$16.LexCodeLS:
                        ;
                        case TypeScript$$16.LexCodePS:
                        ;
                        case TypeScript$$16.LexCodeNWL:
                        ;
                        case TypeScript$$16.LexCodeRET:
                          if (this.ch == TypeScript$$16.LexCodeNWL) {
                            this.newLine();
                            if (this.mode == LexMode.Line) {
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EndOfFile];
                            }
                          }
                          if (!this.interveningWhitespace) {
                            this.interveningWhitespacePos = this.pos;
                          }
                          this.nextChar();
                          this.tokenStart();
                          this.interveningWhitespace = true;
                          break;
                        case TypeScript$$16.LexCodeDOT:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeDOT) {
                            if (this.peekCharAt(this.pos + 2) == TypeScript$$16.LexCodeDOT) {
                              this.advanceChar(3);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.DotDotDot];
                            } else {
                              this.nextChar();
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Dot];
                            }
                          } else {
                            this.nextChar();
                            rtok$$1 = this.scanFraction();
                            if (rtok$$1) {
                              return rtok$$1;
                            } else {
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Dot];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeEQ:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            if (this.peekCharAt(this.pos + 2) == TypeScript$$16.LexCodeEQ) {
                              this.advanceChar(3);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EqualsEqualsEquals];
                            } else {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EqualsEquals];
                            }
                          } else {
                            if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeGT) {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EqualsGreaterThan];
                            } else {
                              this.nextChar();
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Equals];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeBNG:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            if (this.peekCharAt(this.pos + 2) == TypeScript$$16.LexCodeEQ) {
                              this.advanceChar(3);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.ExclamationEqualsEquals];
                            } else {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.ExclamationEquals];
                            }
                          } else {
                            this.nextChar();
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Exclamation];
                          }
                        ;
                        case TypeScript$$16.LexCodePLS:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            this.advanceChar(2);
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.PlusEquals];
                          } else {
                            if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodePLS) {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.PlusPlus];
                            } else {
                              this.nextChar();
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Plus];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeMIN:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            this.advanceChar(2);
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.MinusEquals];
                          } else {
                            if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeMIN) {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.MinusMinus];
                            } else {
                              this.nextChar();
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Minus];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeMUL:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            this.advanceChar(2);
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.AsteriskEquals];
                          } else {
                            this.nextChar();
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Asterisk];
                          }
                        ;
                        case TypeScript$$16.LexCodePCT:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            this.advanceChar(2);
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.PercentEquals];
                          } else {
                            this.nextChar();
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Percent];
                          }
                        ;
                        case TypeScript$$16.LexCodeLT:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeLT) {
                            if (this.peekCharAt(this.pos + 2) == TypeScript$$16.LexCodeEQ) {
                              this.advanceChar(3);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.LessThanLessThanEquals];
                            } else {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.LessThanLessThan];
                            }
                          } else {
                            if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.LessThanEquals];
                            } else {
                              this.nextChar();
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.LessThan];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeGT:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeGT) {
                            if (this.peekCharAt(this.pos + 2) == TypeScript$$16.LexCodeEQ) {
                              this.advanceChar(3);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.GreaterThanGreaterThanEquals];
                            } else {
                              if (this.peekCharAt(this.pos + 2) == TypeScript$$16.LexCodeGT) {
                                if (this.peekCharAt(this.pos + 3) == TypeScript$$16.LexCodeEQ) {
                                  this.advanceChar(4);
                                  return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.GreaterThanGreaterThanGreaterThanEquals];
                                } else {
                                  this.advanceChar(3);
                                  return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.GreaterThanGreaterThanGreaterThan];
                                }
                              } else {
                                this.advanceChar(2);
                                return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.GreaterThanGreaterThan];
                              }
                            }
                          } else {
                            if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.GreaterThanEquals];
                            } else {
                              this.nextChar();
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.GreaterThan];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeXOR:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            this.advanceChar(2);
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.CaretEquals];
                          } else {
                            this.nextChar();
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Caret];
                          }
                        ;
                        case TypeScript$$16.LexCodeBAR:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            this.advanceChar(2);
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.BarEquals];
                          } else {
                            if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeBAR) {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.BarBar];
                            } else {
                              this.nextChar();
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.Bar];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeAMP:
                          if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeEQ) {
                            this.advanceChar(2);
                            return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.AmpersandEquals];
                          } else {
                            if (this.peekCharAt(this.pos + 1) == TypeScript$$16.LexCodeAMP) {
                              this.advanceChar(2);
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.AmpersandAmpersand];
                            } else {
                              this.nextChar();
                              return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.And];
                            }
                          }
                        ;
                        default:
                          this.reportScannerError("Invalid character");
                          this.nextChar();
                          continue start;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return TypeScript$$16.staticTokens[TypeScript$$16.TokenID.EndOfFile];
    };
    Scanner$$1.prototype.reportScannerError = function(message$$16) {
      if (this.reportError) {
        this.reportError(message$$16);
      }
    };
    return Scanner$$1;
  }();
  TypeScript$$16.Scanner = Scanner;
  TypeScript$$16.convertTokToIDName = convertTokToIDName;
  TypeScript$$16.convertTokToID = convertTokToID;
  TypeScript$$16.getLineNumberFromPosition = getLineNumberFromPosition;
  TypeScript$$16.getSourceLineColFromMap = getSourceLineColFromMap;
  TypeScript$$16.getLineColumnFromPosition = getLineColumnFromPosition;
  TypeScript$$16.getPositionFromLineColumn = getPositionFromLineColumn;
  TypeScript$$16.isPrimitiveTypeToken = isPrimitiveTypeToken;
  TypeScript$$16.isModifier = isModifier;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$17) {
  function pushAssignScope(scope$$9, context$$27, type$$31, classType, fnc) {
    var chain = new TypeScript$$17.ScopeChain(null, context$$27.scopeChain, scope$$9);
    chain.thisType = type$$31;
    chain.classType = classType;
    chain.fnc = fnc;
    context$$27.scopeChain = chain;
  }
  function popAssignScope(context$$28) {
    context$$28.scopeChain = context$$28.scopeChain.previous;
  }
  function instanceCompare(a$$6, b$$5) {
    if (a$$6 == null || !a$$6.isInstanceProperty()) {
      return b$$5;
    } else {
      return a$$6;
    }
  }
  function instanceFilterStop(s$$17) {
    return s$$17.isInstanceProperty();
  }
  function preAssignModuleScopes(ast$$48, context$$29) {
    var moduleDecl$$4 = ast$$48;
    var memberScope$$1 = null;
    var aggScope = null;
    if (moduleDecl$$4.name && moduleDecl$$4.mod) {
      moduleDecl$$4.name.sym = moduleDecl$$4.mod.symbol;
    }
    var mod$$1 = moduleDecl$$4.mod;
    if (!mod$$1) {
      return;
    }
    memberScope$$1 = new TypeScript$$17.SymbolTableScope(mod$$1.members, mod$$1.ambientMembers, mod$$1.enclosedTypes, mod$$1.ambientEnclosedTypes, mod$$1.symbol);
    mod$$1.memberScope = memberScope$$1;
    context$$29.modDeclChain.push(moduleDecl$$4);
    context$$29.typeFlow.checker.currentModDecl = moduleDecl$$4;
    aggScope = new TypeScript$$17.SymbolAggregateScope(mod$$1.symbol);
    aggScope.addParentScope(memberScope$$1);
    aggScope.addParentScope(context$$29.scopeChain.scope);
    pushAssignScope(aggScope, context$$29, null, null, null);
    mod$$1.containedScope = aggScope;
    if (mod$$1.symbol) {
      context$$29.typeFlow.addLocalsFromScope(mod$$1.containedScope, mod$$1.symbol, moduleDecl$$4.vars, mod$$1.members.privateMembers, true);
    }
  }
  function preAssignClassScopes(ast$$49, context$$30) {
    var classDecl$$6 = ast$$49;
    var memberScope$$2 = null;
    var aggScope$$1 = null;
    if (classDecl$$6.name && classDecl$$6.type) {
      classDecl$$6.name.sym = classDecl$$6.type.symbol;
    }
    var classType$$1 = ast$$49.type;
    if (classType$$1) {
      var classSym = classType$$1.symbol;
      memberScope$$2 = context$$30.typeFlow.checker.scopeOf(classType$$1);
      aggScope$$1 = new TypeScript$$17.SymbolAggregateScope(classType$$1.symbol);
      aggScope$$1.addParentScope(memberScope$$2);
      aggScope$$1.addParentScope(context$$30.scopeChain.scope);
      classType$$1.containedScope = aggScope$$1;
      classType$$1.memberScope = memberScope$$2;
      var instanceType$$2 = classType$$1.instanceType;
      memberScope$$2 = context$$30.typeFlow.checker.scopeOf(instanceType$$2);
      instanceType$$2.memberScope = memberScope$$2;
      aggScope$$1 = new TypeScript$$17.SymbolAggregateScope(instanceType$$2.symbol);
      aggScope$$1.addParentScope(context$$30.scopeChain.scope);
      pushAssignScope(aggScope$$1, context$$30, instanceType$$2, classType$$1, null);
      instanceType$$2.containedScope = aggScope$$1;
    } else {
      ast$$49.type = context$$30.typeFlow.anyType;
    }
  }
  function preAssignInterfaceScopes(ast$$50, context$$31) {
    var interfaceDecl$$2 = ast$$50;
    var memberScope$$3 = null;
    var aggScope$$2 = null;
    if (interfaceDecl$$2.name && interfaceDecl$$2.type) {
      interfaceDecl$$2.name.sym = interfaceDecl$$2.type.symbol;
    }
    var interfaceType = ast$$50.type;
    memberScope$$3 = context$$31.typeFlow.checker.scopeOf(interfaceType);
    interfaceType.memberScope = memberScope$$3;
    aggScope$$2 = new TypeScript$$17.SymbolAggregateScope(interfaceType.symbol);
    aggScope$$2.addParentScope(memberScope$$3);
    aggScope$$2.addParentScope(context$$31.scopeChain.scope);
    pushAssignScope(aggScope$$2, context$$31, null, null, null);
    interfaceType.containedScope = aggScope$$2;
  }
  function preAssignWithScopes(ast$$51, context$$32) {
    var withStmt$$1 = ast$$51;
    var withType = withStmt$$1.type;
    var members$$12 = new TypeScript$$17.ScopedMembers(new TypeScript$$17.DualStringHashTable(new TypeScript$$17.StringHashTable, new TypeScript$$17.StringHashTable));
    var ambientMembers$$1 = new TypeScript$$17.ScopedMembers(new TypeScript$$17.DualStringHashTable(new TypeScript$$17.StringHashTable, new TypeScript$$17.StringHashTable));
    withType = new TypeScript$$17.Type;
    var withSymbol = new TypeScript$$17.WithSymbol(withStmt$$1.minChar, context$$32.typeFlow.checker.locationInfo.unitIndex, withType);
    withType.members = members$$12;
    withType.ambientMembers = ambientMembers$$1;
    withType.symbol = withSymbol;
    withType.setHasImplementation();
    withStmt$$1.type = withType;
    var withScope = new TypeScript$$17.SymbolScopeBuilder(withType.members, withType.ambientMembers, null, null, context$$32.scopeChain.scope, withType.symbol);
    pushAssignScope(withScope, context$$32, null, null, null);
    withType.containedScope = withScope;
  }
  function preAssignFuncDeclScopes(ast$$52, context$$33) {
    var funcDecl$$13 = ast$$52;
    var container$$1 = null;
    var localContainer = null;
    if (funcDecl$$13.type) {
      localContainer = ast$$52.type.symbol;
    }
    var isStatic$$5 = TypeScript$$17.hasFlag(funcDecl$$13.fncFlags, TypeScript$$17.FncFlags.Static);
    var isInnerStatic = isStatic$$5 && context$$33.scopeChain.fnc != null;
    var parentScope = isInnerStatic ? context$$33.scopeChain.fnc.type.memberScope : context$$33.scopeChain.scope;
    if (context$$33.scopeChain.thisType && (!funcDecl$$13.isConstructor || TypeScript$$17.hasFlag(funcDecl$$13.fncFlags, TypeScript$$17.FncFlags.ClassMethod))) {
      var instType = context$$33.scopeChain.thisType;
      if (!(instType.typeFlags & TypeScript$$17.TypeFlags.IsClass) && !TypeScript$$17.hasFlag(funcDecl$$13.fncFlags, TypeScript$$17.FncFlags.ClassMethod)) {
        if (!funcDecl$$13.isMethod() || isStatic$$5) {
          parentScope = instType.constructorScope;
        } else {
          parentScope = instType.containedScope;
        }
      } else {
        if (context$$33.scopeChain.previous.scope.container && context$$33.scopeChain.previous.scope.container.declAST && context$$33.scopeChain.previous.scope.container.declAST.nodeType == TypeScript$$17.NodeType.FuncDecl && context$$33.scopeChain.previous.scope.container.declAST.isConstructor) {
          parentScope = instType.constructorScope;
        } else {
          if (isStatic$$5 && context$$33.scopeChain.classType) {
            parentScope = context$$33.scopeChain.classType.containedScope;
          } else {
            parentScope = instType.containedScope;
          }
        }
      }
      container$$1 = instType.symbol;
    } else {
      if (funcDecl$$13.isConstructor && context$$33.scopeChain.thisType) {
        container$$1 = context$$33.scopeChain.thisType.symbol;
      }
    }
    if (funcDecl$$13.type == null || TypeScript$$17.hasFlag(funcDecl$$13.type.symbol.flags, TypeScript$$17.SymbolFlags.TypeSetDuringScopeAssignment)) {
      if (context$$33.scopeChain.fnc && context$$33.scopeChain.fnc.type) {
        container$$1 = context$$33.scopeChain.fnc.type.symbol;
      }
      var funcScope = null;
      var outerFnc$$1 = context$$33.scopeChain.fnc;
      var nameText$$1 = funcDecl$$13.name ? funcDecl$$13.name.actualText : null;
      var fgSym = null;
      if (isStatic$$5) {
        if (outerFnc$$1.type.members == null && container$$1.getType().memberScope) {
          outerFnc$$1.type.members = container$$1.type.memberScope.valueMembers;
        }
        funcScope = context$$33.scopeChain.fnc.type.memberScope;
        outerFnc$$1.innerStaticFuncs[outerFnc$$1.innerStaticFuncs.length] = funcDecl$$13;
      } else {
        funcScope = context$$33.scopeChain.scope;
      }
      if (nameText$$1 && nameText$$1 != "__missing" && !funcDecl$$13.isAccessor()) {
        if (isStatic$$5) {
          fgSym = funcScope.findLocal(nameText$$1, false, false);
        } else {
          fgSym = funcScope.findLocal(nameText$$1, false, false);
        }
      }
      context$$33.typeFlow.checker.createFunctionSignature(funcDecl$$13, container$$1, funcScope, fgSym, fgSym == null);
      if (!funcDecl$$13.accessorSymbol && funcDecl$$13.fncFlags & TypeScript$$17.FncFlags.ClassMethod && container$$1 && ((!fgSym || fgSym.declAST.nodeType != TypeScript$$17.NodeType.FuncDecl) && funcDecl$$13.isAccessor()) || fgSym && fgSym.isAccessor()) {
        funcDecl$$13.accessorSymbol = context$$33.typeFlow.checker.createAccessorSymbol(funcDecl$$13, fgSym, container$$1.getType(), funcDecl$$13.isMethod() && isStatic$$5, true, funcScope, container$$1);
      }
      funcDecl$$13.type.symbol.flags |= TypeScript$$17.SymbolFlags.TypeSetDuringScopeAssignment;
    }
    if (funcDecl$$13.name && funcDecl$$13.type) {
      funcDecl$$13.name.sym = funcDecl$$13.type.symbol;
    }
    funcDecl$$13.scopeType = funcDecl$$13.type;
    if (funcDecl$$13.isOverload) {
      return;
    }
    var funcTable = new TypeScript$$17.StringHashTable;
    var funcMembers = new TypeScript$$17.ScopedMembers(new TypeScript$$17.DualStringHashTable(funcTable, new TypeScript$$17.StringHashTable));
    var ambientFuncTable = new TypeScript$$17.StringHashTable;
    var ambientFuncMembers = new TypeScript$$17.ScopedMembers(new TypeScript$$17.DualStringHashTable(ambientFuncTable, new TypeScript$$17.StringHashTable));
    var funcStaticTable = new TypeScript$$17.StringHashTable;
    var funcStaticMembers = new TypeScript$$17.ScopedMembers(new TypeScript$$17.DualStringHashTable(funcStaticTable, new TypeScript$$17.StringHashTable));
    var ambientFuncStaticTable = new TypeScript$$17.StringHashTable;
    var ambientFuncStaticMembers = new TypeScript$$17.ScopedMembers(new TypeScript$$17.DualStringHashTable(ambientFuncStaticTable, new TypeScript$$17.StringHashTable));
    funcDecl$$13.unitIndex = context$$33.typeFlow.checker.locationInfo.unitIndex;
    var locals = new TypeScript$$17.SymbolScopeBuilder(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);
    var statics$$1 = new TypeScript$$17.SymbolScopeBuilder(funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null);
    if (funcDecl$$13.isConstructor && context$$33.scopeChain.thisType) {
      context$$33.scopeChain.thisType.constructorScope = locals;
    }
    funcDecl$$13.symbols = funcTable;
    if (!funcDecl$$13.isSpecialFn()) {
      var group = funcDecl$$13.type;
      var signature$$1 = funcDecl$$13.signature;
      if (!funcDecl$$13.isConstructor) {
        group.containedScope = locals;
        locals.container = group.symbol;
        group.memberScope = statics$$1;
        statics$$1.container = group.symbol;
      }
      funcDecl$$13.enclosingFnc = context$$33.scopeChain.fnc;
      group.enclosingType = isStatic$$5 ? context$$33.scopeChain.classType : context$$33.scopeChain.thisType;
      fgSym = ast$$52.type.symbol;
      if ((funcDecl$$13.fncFlags & TypeScript$$17.FncFlags.Signature) == TypeScript$$17.FncFlags.None && funcDecl$$13.vars) {
        context$$33.typeFlow.addLocalsFromScope(locals, fgSym, funcDecl$$13.vars, funcTable, false);
        context$$33.typeFlow.addLocalsFromScope(statics$$1, fgSym, funcDecl$$13.statics, funcStaticTable, false);
      }
      if (signature$$1.parameters) {
        var len$$17 = signature$$1.parameters.length;
        var i$$55 = 0;
        for (;i$$55 < len$$17;i$$55++) {
          var paramSym = signature$$1.parameters[i$$55];
          context$$33.typeFlow.checker.resolveTypeLink(locals, paramSym.parameter.typeLink, true);
        }
      }
      context$$33.typeFlow.checker.resolveTypeLink(locals, signature$$1.returnType, funcDecl$$13.isSignature());
    }
    if (!funcDecl$$13.isConstructor || TypeScript$$17.hasFlag(funcDecl$$13.fncFlags, TypeScript$$17.FncFlags.ClassMethod)) {
      var thisType = funcDecl$$13.isConstructor && TypeScript$$17.hasFlag(funcDecl$$13.fncFlags, TypeScript$$17.FncFlags.ClassMethod) ? context$$33.scopeChain.thisType : null;
      pushAssignScope(locals, context$$33, thisType, null, funcDecl$$13);
    }
    if (funcDecl$$13.name && TypeScript$$17.hasFlag(funcDecl$$13.fncFlags, TypeScript$$17.FncFlags.IsFunctionExpression)) {
      if (funcDecl$$13.name.sym) {
        funcTable.add(funcDecl$$13.name.actualText, funcDecl$$13.name.sym);
      }
    }
  }
  function preAssignCatchScopes(ast$$53, context$$34) {
    var catchBlock = ast$$53;
    if (catchBlock.param) {
      var catchTable = new TypeScript$$17.ScopedMembers(new TypeScript$$17.DualStringHashTable(new TypeScript$$17.StringHashTable, new TypeScript$$17.StringHashTable));
      var catchLocals = new TypeScript$$17.SymbolScopeBuilder(catchTable, null, null, null, context$$34.scopeChain.scope, context$$34.scopeChain.scope.container);
      catchBlock.containedScope = catchLocals;
      pushAssignScope(catchLocals, context$$34, context$$34.scopeChain.thisType, context$$34.scopeChain.classType, context$$34.scopeChain.fnc);
    }
  }
  function preAssignScopes(ast$$54, parent$$45, walker$$42) {
    var context$$35 = walker$$42.state;
    var go = true;
    if (ast$$54) {
      if (ast$$54.nodeType == TypeScript$$17.NodeType.List) {
        var list$$2 = ast$$54;
        list$$2.enclosingScope = context$$35.scopeChain.scope;
      } else {
        if (ast$$54.nodeType == TypeScript$$17.NodeType.ModuleDeclaration) {
          preAssignModuleScopes(ast$$54, context$$35);
        } else {
          if (ast$$54.nodeType == TypeScript$$17.NodeType.ClassDeclaration) {
            preAssignClassScopes(ast$$54, context$$35);
          } else {
            if (ast$$54.nodeType == TypeScript$$17.NodeType.InterfaceDeclaration) {
              preAssignInterfaceScopes(ast$$54, context$$35);
            } else {
              if (ast$$54.nodeType == TypeScript$$17.NodeType.With) {
                preAssignWithScopes(ast$$54, context$$35);
              } else {
                if (ast$$54.nodeType == TypeScript$$17.NodeType.FuncDecl) {
                  preAssignFuncDeclScopes(ast$$54, context$$35);
                } else {
                  if (ast$$54.nodeType == TypeScript$$17.NodeType.Catch) {
                    preAssignCatchScopes(ast$$54, context$$35);
                  } else {
                    if (ast$$54.nodeType == TypeScript$$17.NodeType.TypeRef) {
                      go = false;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    walker$$42.options.goChildren = go;
    return ast$$54;
  }
  function postAssignScopes(ast$$55, parent$$46, walker$$43) {
    var context$$36 = walker$$43.state;
    var go$$1 = true;
    if (ast$$55) {
      if (ast$$55.nodeType == TypeScript$$17.NodeType.ModuleDeclaration) {
        var prevModDecl = ast$$55;
        popAssignScope(context$$36);
        context$$36.modDeclChain.pop();
        if (context$$36.modDeclChain.length >= 1) {
          context$$36.typeFlow.checker.currentModDecl = context$$36.modDeclChain[context$$36.modDeclChain.length - 1];
        }
      } else {
        if (ast$$55.nodeType == TypeScript$$17.NodeType.ClassDeclaration) {
          popAssignScope(context$$36);
        } else {
          if (ast$$55.nodeType == TypeScript$$17.NodeType.InterfaceDeclaration) {
            popAssignScope(context$$36);
          } else {
            if (ast$$55.nodeType == TypeScript$$17.NodeType.With) {
              popAssignScope(context$$36);
            } else {
              if (ast$$55.nodeType == TypeScript$$17.NodeType.FuncDecl) {
                var funcDecl$$14 = ast$$55;
                if ((!funcDecl$$14.isConstructor || TypeScript$$17.hasFlag(funcDecl$$14.fncFlags, TypeScript$$17.FncFlags.ClassMethod)) && !funcDecl$$14.isOverload) {
                  popAssignScope(context$$36);
                }
              } else {
                if (ast$$55.nodeType == TypeScript$$17.NodeType.Catch) {
                  var catchBlock$$1 = ast$$55;
                  if (catchBlock$$1.param) {
                    popAssignScope(context$$36);
                  }
                } else {
                  go$$1 = false;
                }
              }
            }
          }
        }
      }
    }
    walker$$43.options.goChildren = go$$1;
    return ast$$55;
  }
  var AssignScopeContext = function() {
    function AssignScopeContext$$1(scopeChain, typeFlow$$36, modDeclChain) {
      this.scopeChain = scopeChain;
      this.typeFlow = typeFlow$$36;
      this.modDeclChain = modDeclChain;
    }
    return AssignScopeContext$$1;
  }();
  TypeScript$$17.AssignScopeContext = AssignScopeContext;
  TypeScript$$17.pushAssignScope = pushAssignScope;
  TypeScript$$17.popAssignScope = popAssignScope;
  TypeScript$$17.instanceCompare = instanceCompare;
  TypeScript$$17.instanceFilterStop = instanceFilterStop;
  var ScopeSearchFilter = function() {
    function ScopeSearchFilter$$1(select, stop$$1) {
      this.select = select;
      this.stop = stop$$1;
      this.result = null;
    }
    ScopeSearchFilter$$1.prototype.reset = function() {
      this.result = null;
    };
    ScopeSearchFilter$$1.prototype.update = function(b$$6) {
      this.result = this.select(this.result, b$$6);
      if (this.result) {
        return this.stop(this.result);
      } else {
        return false;
      }
    };
    return ScopeSearchFilter$$1;
  }();
  TypeScript$$17.ScopeSearchFilter = ScopeSearchFilter;
  TypeScript$$17.instanceFilter = new ScopeSearchFilter(instanceCompare, instanceFilterStop);
  TypeScript$$17.preAssignModuleScopes = preAssignModuleScopes;
  TypeScript$$17.preAssignClassScopes = preAssignClassScopes;
  TypeScript$$17.preAssignInterfaceScopes = preAssignInterfaceScopes;
  TypeScript$$17.preAssignWithScopes = preAssignWithScopes;
  TypeScript$$17.preAssignFuncDeclScopes = preAssignFuncDeclScopes;
  TypeScript$$17.preAssignCatchScopes = preAssignCatchScopes;
  TypeScript$$17.preAssignScopes = preAssignScopes;
  TypeScript$$17.postAssignScopes = postAssignScopes;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$18) {
  function preFindMemberScope(ast$$56, parent$$47, walker$$44) {
    var memScope = walker$$44.state;
    if (TypeScript$$18.hasFlag(ast$$56.flags, memScope.matchFlag) && (memScope.pos < 0 || memScope.pos == ast$$56.limChar)) {
      memScope.ast = ast$$56;
      if (ast$$56.type == null && memScope.pos >= 0) {
        memScope.flow.inScopeTypeCheck(ast$$56, memScope.scope);
      }
      memScope.type = ast$$56.type;
      memScope.options.stopWalk();
    }
    return ast$$56;
  }
  function pushTypeCollectionScope(container$$2, valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, context$$37, thisType$$1, classType$$2, moduleDecl$$5) {
    var builder$$1 = new TypeScript$$18.SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container$$2);
    var chain$$1 = new TypeScript$$18.ScopeChain(container$$2, context$$37.scopeChain, builder$$1);
    chain$$1.thisType = thisType$$1;
    chain$$1.classType = classType$$2;
    chain$$1.moduleDecl = moduleDecl$$5;
    context$$37.scopeChain = chain$$1;
  }
  function popTypeCollectionScope(context$$38) {
    context$$38.scopeChain = context$$38.scopeChain.previous;
  }
  function preFindEnclosingScope(ast$$57, parent$$48, walker$$45) {
    var context$$39 = walker$$45.state;
    var minChar$$30 = ast$$57.minChar;
    var limChar$$9 = ast$$57.limChar;
    if (ast$$57.nodeType == TypeScript$$18.NodeType.Script && context$$39.pos > limChar$$9) {
      limChar$$9 = context$$39.pos;
    }
    if (minChar$$30 <= context$$39.pos && limChar$$9 >= context$$39.pos) {
      switch(ast$$57.nodeType) {
        case TypeScript$$18.NodeType.Script:
          var script$$11 = ast$$57;
          context$$39.scopeGetter = function() {
            return script$$11.bod === null ? null : script$$11.bod.enclosingScope;
          };
          context$$39.scopeStartAST = script$$11;
          break;
        case TypeScript$$18.NodeType.ClassDeclaration:
          context$$39.scopeGetter = function() {
            return ast$$57.type === null || ast$$57.type.instanceType.containedScope === null ? null : ast$$57.type.instanceType.containedScope;
          };
          context$$39.scopeStartAST = ast$$57;
          context$$39.enclosingClassDecl = ast$$57;
          break;
        case TypeScript$$18.NodeType.ObjectLit:
          var objectLit = ast$$57;
          if (objectLit.targetType) {
            context$$39.scopeGetter = function() {
              return objectLit.targetType.containedScope;
            };
            context$$39.objectLiteralScopeGetter = function() {
              return objectLit.targetType.memberScope;
            };
            context$$39.enclosingObjectLit = objectLit;
          }
          break;
        case TypeScript$$18.NodeType.ModuleDeclaration:
          context$$39.deepestModuleDecl = ast$$57;
          context$$39.scopeGetter = function() {
            return ast$$57.type === null ? null : ast$$57.type.containedScope;
          };
          context$$39.scopeStartAST = ast$$57;
          break;
        case TypeScript$$18.NodeType.InterfaceDeclaration:
          context$$39.scopeGetter = function() {
            return ast$$57.type === null ? null : ast$$57.type.containedScope;
          };
          context$$39.scopeStartAST = ast$$57;
          break;
        case TypeScript$$18.NodeType.FuncDecl:
          var funcDecl$$15 = ast$$57;
          if (context$$39.skipNextFuncDeclForClass) {
            context$$39.skipNextFuncDeclForClass = false;
          } else {
            context$$39.scopeGetter = function() {
              if (funcDecl$$15.isConstructor && TypeScript$$18.hasFlag(funcDecl$$15.fncFlags, TypeScript$$18.FncFlags.ClassMethod)) {
                if (ast$$57.type && ast$$57.type.enclosingType) {
                  return ast$$57.type.enclosingType.constructorScope;
                }
              }
              if (funcDecl$$15.scopeType) {
                return funcDecl$$15.scopeType.containedScope;
              }
              if (funcDecl$$15.type) {
                return funcDecl$$15.type.containedScope;
              }
              return null;
            };
            context$$39.scopeStartAST = ast$$57;
          }
          break;
      }
      walker$$45.options.goChildren = true;
    } else {
      walker$$45.options.goChildren = false;
    }
    return ast$$57;
  }
  function findEnclosingScopeAt(logger$$2, script$$12, text$$19, pos$$3, isMemberCompletion) {
    var context$$40 = new EnclosingScopeContext(logger$$2, script$$12, text$$19, pos$$3, isMemberCompletion);
    TypeScript$$18.getAstWalkerFactory().walk(script$$12, preFindEnclosingScope, null, null, context$$40);
    if (context$$40.scopeStartAST === null) {
      return null;
    }
    return context$$40;
  }
  var TypeCollectionContext = function() {
    function TypeCollectionContext$$1(scopeChain$$1, checker$$3) {
      this.scopeChain = scopeChain$$1;
      this.checker = checker$$3;
      this.script = null;
    }
    return TypeCollectionContext$$1;
  }();
  TypeScript$$18.TypeCollectionContext = TypeCollectionContext;
  var MemberScopeContext = function() {
    function MemberScopeContext$$1(flow, pos$$4, matchFlag) {
      this.flow = flow;
      this.pos = pos$$4;
      this.matchFlag = matchFlag;
      this.type = null;
      this.ast = null;
      this.options = new TypeScript$$18.AstWalkOptions;
    }
    return MemberScopeContext$$1;
  }();
  TypeScript$$18.MemberScopeContext = MemberScopeContext;
  var EnclosingScopeContext = function() {
    function EnclosingScopeContext$$1(logger$$3, script$$13, text$$20, pos$$5, isMemberCompletion$$1) {
      this.logger = logger$$3;
      this.script = script$$13;
      this.text = text$$20;
      this.pos = pos$$5;
      this.isMemberCompletion = isMemberCompletion$$1;
      this.scopeGetter = null;
      this.objectLiteralScopeGetter = null;
      this.scopeStartAST = null;
      this.skipNextFuncDeclForClass = false;
      this.deepestModuleDecl = null;
      this.enclosingClassDecl = null;
      this.enclosingObjectLit = null;
      this.publicsOnly = true;
      this.useFullAst = false;
    }
    EnclosingScopeContext$$1.prototype.getScope = function() {
      return this.scopeGetter();
    };
    EnclosingScopeContext$$1.prototype.getObjectLiteralScope = function() {
      return this.objectLiteralScopeGetter();
    };
    EnclosingScopeContext$$1.prototype.getScopeAST = function() {
      return this.scopeStartAST;
    };
    EnclosingScopeContext$$1.prototype.getScopePosition = function() {
      return this.scopeStartAST.minChar;
    };
    EnclosingScopeContext$$1.prototype.getScriptFragmentStartAST = function() {
      return this.scopeStartAST;
    };
    EnclosingScopeContext$$1.prototype.getScriptFragmentPosition = function() {
      return this.getScriptFragmentStartAST().minChar;
    };
    EnclosingScopeContext$$1.prototype.getScriptFragment = function() {
      if (this.scriptFragment == null) {
        var ast$$58 = this.getScriptFragmentStartAST();
        var minChar$$31 = ast$$58.minChar;
        var limChar$$10 = this.isMemberCompletion ? this.pos : this.pos + 1;
        this.scriptFragment = TypeScript$$18.quickParse(this.logger, ast$$58, this.text, minChar$$31, limChar$$10, null).Script;
      }
      return this.scriptFragment;
    };
    return EnclosingScopeContext$$1;
  }();
  TypeScript$$18.EnclosingScopeContext = EnclosingScopeContext;
  TypeScript$$18.preFindMemberScope = preFindMemberScope;
  TypeScript$$18.pushTypeCollectionScope = pushTypeCollectionScope;
  TypeScript$$18.popTypeCollectionScope = popTypeCollectionScope;
  TypeScript$$18.preFindEnclosingScope = preFindEnclosingScope;
  TypeScript$$18.findEnclosingScopeAt = findEnclosingScopeAt;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$19) {
  var Signature = function() {
    function Signature$$1() {
      this.hasVariableArgList = false;
      this.parameters = null;
      this.declAST = null;
      this.typeCheckStatus = TypeScript$$19.TypeCheckStatus.NotStarted;
      this.nonOptionalParameterCount = 0;
    }
    Signature$$1.prototype.specializeType = function(pattern$$2, replacement, checker$$4) {
      var result$$11 = new Signature$$1;
      if (this.hasVariableArgList) {
        result$$11.hasVariableArgList = true;
      }
      result$$11.returnType = new TypeScript$$19.TypeLink;
      if (this.returnType.type) {
        result$$11.returnType.type = this.returnType.type.specializeType(pattern$$2, replacement, checker$$4, false);
      } else {
        result$$11.returnType.type = checker$$4.anyType;
      }
      if (this.parameters) {
        result$$11.parameters = [];
        var i$$56 = 0;
        var len$$18 = this.parameters.length;
        for (;i$$56 < len$$18;i$$56++) {
          var oldSym = this.parameters[i$$56];
          var paramDef = new TypeScript$$19.ValueLocation;
          var paramSym$$1 = new TypeScript$$19.ParameterSymbol(oldSym.name, oldSym.location, checker$$4.locationInfo.unitIndex, paramDef);
          paramSym$$1.declAST = this.declAST;
          paramDef.symbol = paramSym$$1;
          paramDef.typeLink = new TypeScript$$19.TypeLink;
          result$$11.parameters[i$$56] = paramSym$$1;
          var oldType = oldSym.getType();
          if (oldType) {
            paramDef.typeLink.type = oldType.specializeType(pattern$$2, replacement, checker$$4, false);
            paramSym$$1.declAST.type = paramDef.typeLink.type;
          } else {
            paramDef.typeLink.type = checker$$4.anyType;
          }
        }
      }
      result$$11.nonOptionalParameterCount = this.nonOptionalParameterCount;
      result$$11.declAST = this.declAST;
      return result$$11;
    };
    Signature$$1.prototype.toString = function() {
      return this.toStringHelper(false, false, null);
    };
    Signature$$1.prototype.toStringHelper = function(shortform, brackets, scope$$10) {
      return this.toStringHelperEx(shortform, brackets, scope$$10).toString();
    };
    Signature$$1.prototype.toStringHelperEx = function(shortform$$1, brackets$$1, scope$$11, prefix$$2) {
      if (typeof prefix$$2 === "undefined") {
        prefix$$2 = "";
      }
      var builder$$2 = new TypeScript$$19.MemberNameArray;
      if (brackets$$1) {
        builder$$2.prefix = prefix$$2 + "[";
      } else {
        builder$$2.prefix = prefix$$2 + "(";
      }
      var paramLen$$1 = this.parameters.length;
      var len$$19 = this.hasVariableArgList ? paramLen$$1 - 1 : paramLen$$1;
      var i$$57 = 0;
      for (;i$$57 < len$$19;i$$57++) {
        builder$$2.add(TypeScript$$19.MemberName.create(this.parameters[i$$57].name + (this.parameters[i$$57].isOptional() ? "?" : "") + ": "));
        builder$$2.add(this.parameters[i$$57].getType().getScopedTypeNameEx(scope$$11));
        if (i$$57 < paramLen$$1 - 1) {
          builder$$2.add(TypeScript$$19.MemberName.create(", "));
        }
      }
      if (this.hasVariableArgList) {
        builder$$2.add(TypeScript$$19.MemberName.create("..." + this.parameters[i$$57].name + ": "));
        builder$$2.add(this.parameters[i$$57].getType().getScopedTypeNameEx(scope$$11));
      }
      if (shortform$$1) {
        if (brackets$$1) {
          builder$$2.add(TypeScript$$19.MemberName.create("] => "));
        } else {
          builder$$2.add(TypeScript$$19.MemberName.create(") => "));
        }
      } else {
        if (brackets$$1) {
          builder$$2.add(TypeScript$$19.MemberName.create("]: "));
        } else {
          builder$$2.add(TypeScript$$19.MemberName.create("): "));
        }
      }
      if (this.returnType.type) {
        builder$$2.add(this.returnType.type.getScopedTypeNameEx(scope$$11));
      } else {
        builder$$2.add(TypeScript$$19.MemberName.create("any"));
      }
      return builder$$2;
    };
    return Signature$$1;
  }();
  TypeScript$$19.Signature = Signature;
  var SignatureGroup = function() {
    function SignatureGroup$$1() {
      this.signatures = [];
      this.hasImplementation = true;
      this.definitionSignature = null;
      this.hasBeenTypechecked = false;
      this.flags = TypeScript$$19.SignatureFlags.None;
    }
    SignatureGroup$$1.prototype.addSignature = function(signature$$2) {
      if (this.signatures == null) {
        this.signatures = new Array;
      }
      this.signatures[this.signatures.length] = signature$$2;
      if (signature$$2.declAST && !signature$$2.declAST.isOverload && !signature$$2.declAST.isSignature() && !TypeScript$$19.hasFlag(signature$$2.declAST.fncFlags, TypeScript$$19.FncFlags.Ambient) && TypeScript$$19.hasFlag(signature$$2.declAST.fncFlags, TypeScript$$19.FncFlags.Definition)) {
        this.definitionSignature = signature$$2;
      }
    };
    SignatureGroup$$1.prototype.toString = function() {
      return this.signatures.toString();
    };
    SignatureGroup$$1.prototype.toStrings = function(prefix$$3, shortform$$2, scope$$12) {
      var result$$12 = [];
      var len$$20 = this.signatures.length;
      if (len$$20 > 1) {
        shortform$$2 = false;
      }
      var i$$58 = 0;
      for (;i$$58 < len$$20;i$$58++) {
        if (len$$20 > 1 && this.signatures[i$$58] == this.definitionSignature) {
          continue;
        }
        if (this.flags & TypeScript$$19.SignatureFlags.IsIndexer) {
          result$$12.push(this.signatures[i$$58].toStringHelperEx(shortform$$2, true, scope$$12));
        } else {
          result$$12.push(this.signatures[i$$58].toStringHelperEx(shortform$$2, false, scope$$12, prefix$$3));
        }
      }
      return result$$12;
    };
    SignatureGroup$$1.prototype.specializeType = function(pattern$$3, replacement$$1, checker$$5) {
      var result$$13 = new SignatureGroup$$1;
      if (this.signatures) {
        var i$$59 = 0;
        var len$$21 = this.signatures.length;
        for (;i$$59 < len$$21;i$$59++) {
          result$$13.addSignature(this.signatures[i$$59].specializeType(pattern$$3, replacement$$1, checker$$5));
        }
      }
      return result$$13;
    };
    SignatureGroup$$1.prototype.verifySignatures = function(checker$$6) {
      var len$$22 = 0;
      if (this.signatures && (len$$22 = this.signatures.length) > 0) {
        var i$$60 = 0;
        for (;i$$60 < len$$22;i$$60++) {
          var j$$7 = i$$60 + 1;
          for (;j$$7 < len$$22;j$$7++) {
            if (this.signatures[i$$60].declAST && this.signatures[j$$7].declAST && (!TypeScript$$19.hasFlag(this.signatures[i$$60].declAST.fncFlags, TypeScript$$19.FncFlags.Definition) && !TypeScript$$19.hasFlag(this.signatures[j$$7].declAST.fncFlags, TypeScript$$19.FncFlags.Definition)) && checker$$6.signaturesAreIdentical(this.signatures[i$$60], this.signatures[j$$7])) {
              checker$$6.errorReporter.simpleError(this.signatures[i$$60].declAST, this.signatures[i$$60].declAST && this.signatures[i$$60].declAST.name ? "Signature for '" + this.signatures[i$$60].declAST.name.actualText + "' is duplicated" : "Signature is duplicated");
            }
          }
          if (this.definitionSignature) {
            if (!checker$$6.signatureIsAssignableToTarget(this.definitionSignature, this.signatures[i$$60])) {
              checker$$6.errorReporter.simpleError(this.signatures[i$$60].declAST, "Overload signature is not compatible with function definition");
            }
          }
        }
      }
    };
    SignatureGroup$$1.prototype.typeCheck = function(checker$$7, ast$$59, hasConstruct) {
      if (this.hasBeenTypechecked) {
        return;
      }
      this.hasBeenTypechecked = true;
      var len$$23 = 0;
      if (this.signatures && (len$$23 = this.signatures.length) > 0) {
        var i$$61 = 0;
        for (;i$$61 < len$$23;i$$61++) {
          if (!hasConstruct && !this.definitionSignature && this.signatures[i$$61].declAST && this.signatures[i$$61].declAST.isOverload && !TypeScript$$19.hasFlag(this.signatures[i$$61].declAST.fncFlags, TypeScript$$19.FncFlags.Ambient)) {
            checker$$7.errorReporter.simpleError(this.signatures[i$$61].declAST, "Overload declaration lacks definition");
          }
          if (this.signatures[i$$61].declAST && this.signatures[i$$61].declAST.isConstructor && this.signatures[i$$61].declAST.classDecl && this.signatures[i$$61].declAST.classDecl.type.symbol.typeCheckStatus == TypeScript$$19.TypeCheckStatus.NotStarted) {
            checker$$7.typeFlow.typeCheck(this.signatures[i$$61].declAST.classDecl);
          }
          checker$$7.typeFlow.typeCheck(this.signatures[i$$61].declAST);
        }
        this.verifySignatures(checker$$7);
      }
    };
    return SignatureGroup$$1;
  }();
  TypeScript$$19.SignatureGroup = SignatureGroup;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$20) {
  function aLexicallyEnclosesB(a$$7, b$$7) {
    if (a$$7.declAST && b$$7 && b$$7.declAST && a$$7.declAST.nodeType == TypeScript$$20.NodeType.FuncDecl) {
      return a$$7.declAST.minChar <= b$$7.declAST.minChar && a$$7.declAST.limChar >= b$$7.declAST.limChar;
    } else {
      return false;
    }
  }
  function aEnclosesB(a$$8, b$$8) {
    for (;a$$8.container;) {
      if (a$$8 == b$$8 || aLexicallyEnclosesB(a$$8.container, b$$8)) {
        return true;
      }
      a$$8 = a$$8.container;
    }
    return false;
  }
  (function(TypeCheckStatus$$1) {
    TypeCheckStatus$$1._map = [];
    TypeCheckStatus$$1._map[0] = "NotStarted";
    TypeCheckStatus$$1.NotStarted = 0;
    TypeCheckStatus$$1._map[1] = "Started";
    TypeCheckStatus$$1.Started = 1;
    TypeCheckStatus$$1._map[2] = "Finished";
    TypeCheckStatus$$1.Finished = 2;
  })(TypeScript$$20.TypeCheckStatus || (TypeScript$$20.TypeCheckStatus = {}));
  var TypeCheckStatus = TypeScript$$20.TypeCheckStatus;
  TypeScript$$20.aLexicallyEnclosesB = aLexicallyEnclosesB;
  TypeScript$$20.aEnclosesB = aEnclosesB;
  var Symbol = function() {
    function Symbol$$1(name$$52, location$$21, length$$15, unitIndex$$3) {
      this.name = name$$52;
      this.location = location$$21;
      this.length = length$$15;
      this.unitIndex = unitIndex$$3;
      this.bound = false;
      this.flags = TypeScript$$20.SymbolFlags.None;
      this.isObjectLitField = false;
      this.declAST = null;
      this.declModule = null;
      this.passSymbolCreated = TypeScript$$20.CompilerDiagnostics.analysisPass;
    }
    Symbol$$1.prototype.instanceScope = function() {
      return null;
    };
    Symbol$$1.prototype.isVariable = function() {
      return false;
    };
    Symbol$$1.prototype.isMember = function() {
      return false;
    };
    Symbol$$1.prototype.isInferenceSymbol = function() {
      return false;
    };
    Symbol$$1.prototype.isWith = function() {
      return false;
    };
    Symbol$$1.prototype.writeable = function() {
      return false;
    };
    Symbol$$1.prototype.isType = function() {
      return false;
    };
    Symbol$$1.prototype.getType = function() {
      return null;
    };
    Symbol$$1.prototype.isAccessor = function() {
      return false;
    };
    Symbol$$1.prototype.isInstanceProperty = function() {
      return TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.Property) && !TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.ModuleMember);
    };
    Symbol$$1.prototype.getTypeName = function(scope$$13) {
      return this.getTypeNameEx(scope$$13).toString();
    };
    Symbol$$1.prototype.getTypeNameEx = function(scope$$14) {
      return TypeScript$$20.MemberName.create(this.toString());
    };
    Symbol$$1.prototype.getOptionalNameString = function() {
      return TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.Optional) ? "?" : "";
    };
    Symbol$$1.prototype.pathToRoot = function() {
      var path$$6 = new Array;
      var node$$2 = this;
      for (;node$$2 && node$$2.name != TypeScript$$20.globalId;) {
        path$$6[path$$6.length] = node$$2;
        node$$2 = node$$2.container;
      }
      return path$$6;
    };
    Symbol$$1.prototype.findCommonAncestorPath = function(b$$9) {
      if (this.container == null) {
        return new Array;
      }
      var aPath = this.container.pathToRoot();
      var bPath;
      if (b$$9) {
        bPath = b$$9.pathToRoot();
      } else {
        bPath = new Array;
      }
      var commonNodeIndex = -1;
      var i$$62 = 0;
      var aLen = aPath.length;
      for (;i$$62 < aLen;i$$62++) {
        var aNode = aPath[i$$62];
        var j$$8 = 0;
        var bLen = bPath.length;
        for (;j$$8 < bLen;j$$8++) {
          var bNode = bPath[j$$8];
          if (aNode == bNode) {
            commonNodeIndex = i$$62;
            break;
          }
        }
        if (commonNodeIndex >= 0) {
          break;
        }
      }
      if (commonNodeIndex >= 0) {
        return aPath.slice(0, commonNodeIndex);
      } else {
        return aPath;
      }
    };
    Symbol$$1.prototype.getPrettyName = function(scopeSymbol) {
      return this.name;
    };
    Symbol$$1.prototype.scopeRelativeName = function(scope$$15) {
      if (scope$$15 == null) {
        return this.getPrettyName(null) + this.getOptionalNameString();
      }
      var lca = this.findCommonAncestorPath(scope$$15.container);
      var builder$$3 = "";
      var i$$63 = 0;
      var len$$24 = lca.length;
      for (;i$$63 < len$$24;i$$63++) {
        var prettyName = lca[i$$63].getPrettyName(i$$63 == len$$24 - 1 ? scope$$15.container : lca[i$$63 + 1]);
        builder$$3 = prettyName + "." + builder$$3;
      }
      builder$$3 += this.getPrettyName(len$$24 == 0 ? scope$$15.container : lca[0]) + this.getOptionalNameString();
      return builder$$3;
    };
    Symbol$$1.prototype.fullName = function() {
      var builder$$4 = this.name;
      var ancestor = this.container;
      for (;ancestor && ancestor.name != TypeScript$$20.globalId;) {
        builder$$4 = ancestor.name + "." + builder$$4;
        ancestor = ancestor.container;
      }
      return builder$$4;
    };
    Symbol$$1.prototype.isExternallyVisible = function(checker$$8) {
      if (this == checker$$8.gloMod) {
        return true;
      }
      if (TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.Private)) {
        return false;
      }
      if (!TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.Exported)) {
        return this.container == checker$$8.gloMod;
      }
      return this.container.isExternallyVisible(checker$$8);
    };
    Symbol$$1.prototype.visible = function(scope$$16, checker$$9) {
      if (checker$$9 == null || this.container == checker$$9.gloMod) {
        return true;
      }
      if (TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.ModuleMember)) {
        if (TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.Exported)) {
          if (!TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.Private)) {
            return true;
          } else {
            return aEnclosesB(this, scope$$16.container);
          }
        } else {
          return checker$$9 && checker$$9.currentModDecl == this.declModule || checker$$9.currentModDecl && checker$$9.currentModDecl.mod && checker$$9.currentModDecl.mod.symbol && this.declModule && this.declModule.mod && this.declModule.mod.symbol && aEnclosesB(checker$$9.currentModDecl.mod.symbol, this.declModule.mod.symbol);
        }
      } else {
        var isFunction = this.declAST && this.declAST.nodeType == TypeScript$$20.NodeType.FuncDecl;
        var isMethod$$2 = isFunction && this.declAST.isMethod();
        var isStaticFunction = isFunction && TypeScript$$20.hasFlag(this.declAST.fncFlags, TypeScript$$20.FncFlags.Static);
        var isPrivateMethod = isMethod$$2 && TypeScript$$20.hasFlag(this.declAST.fncFlags, TypeScript$$20.FncFlags.Private);
        var isAlias = this.isType() && this.aliasLink;
        if (this.isMember() || isMethod$$2 || isStaticFunction || isAlias) {
          if (TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.Private) || isPrivateMethod) {
            if (scope$$16.container == null && this.container != scope$$16.container) {
              return false;
            } else {
              return this.container == null ? true : aEnclosesB(scope$$16.container, this.container);
            }
          } else {
            return true;
          }
        } else {
          if (this.container) {
            return aEnclosesB(this, scope$$16.container);
          } else {
            return true;
          }
        }
      }
    };
    Symbol$$1.prototype.addRef = function(identifier) {
      if (!this.refs) {
        this.refs = [];
      }
      this.refs[this.refs.length] = identifier;
    };
    Symbol$$1.prototype.toString = function() {
      if (this.name) {
        return this.name;
      } else {
        return "_anonymous";
      }
    };
    Symbol$$1.prototype.print = function(outfile$$5) {
      outfile$$5.Write(this.toString());
    };
    Symbol$$1.prototype.specializeType = function(pattern$$4, replacement$$2, checker$$10) {
      throw new Error("please implement in derived class");
    };
    Symbol$$1.prototype.setType = function(type$$32) {
      throw new Error("please implement in derived class");
    };
    Symbol$$1.prototype.kind = function() {
      throw new Error("please implement in derived class");
    };
    Symbol$$1.prototype.getInterfaceDeclFromSymbol = function(checker$$11) {
      if (this.declAST != null) {
        if (this.declAST.nodeType == TypeScript$$20.NodeType.InterfaceDeclaration) {
          return this.declAST;
        } else {
          if (this.container != null && this.container != checker$$11.gloMod && this.container.declAST.nodeType == TypeScript$$20.NodeType.InterfaceDeclaration) {
            return this.container.declAST;
          }
        }
      }
      return null;
    };
    Symbol$$1.prototype.getVarDeclFromSymbol = function() {
      if (this.declAST != null && this.declAST.nodeType == TypeScript$$20.NodeType.VarDecl) {
        return this.declAST;
      }
      return null;
    };
    Symbol$$1.prototype.getDocComments = function() {
      if (this.declAST != null) {
        return this.declAST.getDocComments();
      }
      return[];
    };
    Symbol$$1.prototype.isStatic = function() {
      return TypeScript$$20.hasFlag(this.flags, TypeScript$$20.SymbolFlags.Static);
    };
    return Symbol$$1;
  }();
  TypeScript$$20.Symbol = Symbol;
  var ValueLocation = function() {
    function ValueLocation$$1() {
    }
    return ValueLocation$$1;
  }();
  TypeScript$$20.ValueLocation = ValueLocation;
  var InferenceSymbol = function(_super$$48) {
    function InferenceSymbol$$1(name$$53, location$$22, length$$16, unitIndex$$4) {
      _super$$48.call(this, name$$53, location$$22, length$$16, unitIndex$$4);
      this.typeCheckStatus = TypeCheckStatus.NotStarted;
    }
    __extends(InferenceSymbol$$1, _super$$48);
    InferenceSymbol$$1.prototype.isInferenceSymbol = function() {
      return true;
    };
    InferenceSymbol$$1.prototype.transferVarFlags = function(varFlags) {
      if (TypeScript$$20.hasFlag(varFlags, TypeScript$$20.VarFlags.Ambient)) {
        this.flags |= TypeScript$$20.SymbolFlags.Ambient;
      }
      if (TypeScript$$20.hasFlag(varFlags, TypeScript$$20.VarFlags.Constant)) {
        this.flags |= TypeScript$$20.SymbolFlags.Constant;
      }
      if (TypeScript$$20.hasFlag(varFlags, TypeScript$$20.VarFlags.Static)) {
        this.flags |= TypeScript$$20.SymbolFlags.Static;
      }
      if (TypeScript$$20.hasFlag(varFlags, TypeScript$$20.VarFlags.Property)) {
        this.flags |= TypeScript$$20.SymbolFlags.Property;
      }
      if (TypeScript$$20.hasFlag(varFlags, TypeScript$$20.VarFlags.Private)) {
        this.flags |= TypeScript$$20.SymbolFlags.Private;
      }
      if (TypeScript$$20.hasFlag(varFlags, TypeScript$$20.VarFlags.Public)) {
        this.flags |= TypeScript$$20.SymbolFlags.Public;
      }
      if (TypeScript$$20.hasFlag(varFlags, TypeScript$$20.VarFlags.Readonly)) {
        this.flags |= TypeScript$$20.SymbolFlags.Readonly;
      }
      if (TypeScript$$20.hasFlag(varFlags, TypeScript$$20.VarFlags.Exported)) {
        this.flags |= TypeScript$$20.SymbolFlags.Exported;
      }
    };
    return InferenceSymbol$$1;
  }(Symbol);
  TypeScript$$20.InferenceSymbol = InferenceSymbol;
  var TypeSymbol = function(_super$$49) {
    function TypeSymbol$$1(locName, location$$23, length$$17, unitIndex$$5, type$$33) {
      _super$$49.call(this, locName, location$$23, length$$17, unitIndex$$5);
      this.type = type$$33;
      this.expansions = [];
      this.expansionsDeclAST = [];
      this.isDynamic = false;
      this.isMethod = false;
      this.aliasLink = null;
      this.onlyReferencedAsTypeRef = TypeScript$$20.optimizeModuleCodeGen;
      this.prettyName = this.name;
    }
    __extends(TypeSymbol$$1, _super$$49);
    TypeSymbol$$1.prototype.addLocation = function(loc) {
      if (this.additionalLocations == null) {
        this.additionalLocations = [];
      }
      this.additionalLocations[this.additionalLocations.length] = loc;
    };
    TypeSymbol$$1.prototype.kind = function() {
      return TypeScript$$20.SymbolKind.Type;
    };
    TypeSymbol$$1.prototype.isType = function() {
      return true;
    };
    TypeSymbol$$1.prototype.getType = function() {
      return this.type;
    };
    TypeSymbol$$1.prototype.getTypeNameEx = function(scope$$17) {
      return this.type.getMemberTypeNameEx(this.name ? this.name + this.getOptionalNameString() : "", false, false, scope$$17);
    };
    TypeSymbol$$1.prototype.instanceScope = function() {
      if (!(this.type.typeFlags & TypeScript$$20.TypeFlags.IsClass) && this.type.isClass()) {
        return this.type.instanceType.constructorScope;
      } else {
        return this.type.containedScope;
      }
    };
    TypeSymbol$$1.prototype.toString = function() {
      var result$$14 = this.type.getTypeName();
      if (this.name) {
        result$$14 = this.name + ":" + result$$14;
      }
      return result$$14;
    };
    TypeSymbol$$1.prototype.isClass = function() {
      return this.instanceType != null;
    };
    TypeSymbol$$1.prototype.isFunction = function() {
      return this.declAST != null && this.declAST.nodeType == TypeScript$$20.NodeType.FuncDecl;
    };
    TypeSymbol$$1.prototype.specializeType = function(pattern$$5, replacement$$3, checker$$12) {
      if (this.type == pattern$$5) {
        return replacement$$3.symbol;
      } else {
        var replType = this.type.specializeType(pattern$$5, replacement$$3, checker$$12, false);
        if (replType != this.type) {
          var result$$15 = new TypeSymbol$$1(this.name, -1, 0, -1, replType);
          return result$$15;
        } else {
          return this;
        }
      }
    };
    TypeSymbol$$1.prototype.getPrettyName = function(scopeSymbol$$1) {
      if (!!scopeSymbol$$1 && TypeScript$$20.isQuoted(this.prettyName) && this.type.isModuleType()) {
        var symbolPath = scopeSymbol$$1.pathToRoot();
        var prettyName$$1 = this.getPrettyNameOfDynamicModule(symbolPath);
        if (prettyName$$1 != null) {
          return prettyName$$1.name;
        }
      }
      return this.prettyName;
    };
    TypeSymbol$$1.prototype.getPrettyNameOfDynamicModule = function(scopeSymbolPath) {
      var scopeSymbolPathLength = scopeSymbolPath.length;
      var externalSymbol = null;
      if (scopeSymbolPath.length > 0 && scopeSymbolPath[scopeSymbolPathLength - 1].getType().isModuleType() && scopeSymbolPath[scopeSymbolPathLength - 1].isDynamic) {
        if (scopeSymbolPathLength > 1 && scopeSymbolPath[scopeSymbolPathLength - 2].getType().isModuleType() && scopeSymbolPath[scopeSymbolPathLength - 2].isDynamic) {
          var moduleType = scopeSymbolPath[scopeSymbolPathLength - 2].getType();
          externalSymbol = moduleType.findDynamicModuleName(this.type);
        }
        if (externalSymbol == null) {
          moduleType = scopeSymbolPath[scopeSymbolPathLength - 1].getType();
          externalSymbol = moduleType.findDynamicModuleName(this.type);
        }
      }
      return externalSymbol;
    };
    TypeSymbol$$1.prototype.getDocComments = function() {
      var comments$$10 = [];
      if (this.declAST != null) {
        comments$$10 = comments$$10.concat(this.declAST.getDocComments());
      }
      var i$$64 = 0;
      for (;i$$64 < this.expansionsDeclAST.length;i$$64++) {
        comments$$10 = comments$$10.concat(this.expansionsDeclAST[i$$64].getDocComments());
      }
      return comments$$10;
    };
    return TypeSymbol$$1;
  }(InferenceSymbol);
  TypeScript$$20.TypeSymbol = TypeSymbol;
  var WithSymbol = function(_super$$50) {
    function WithSymbol$$1(location$$24, unitIndex$$6, withType$$1) {
      _super$$50.call(this, "with", location$$24, 4, unitIndex$$6, withType$$1);
    }
    __extends(WithSymbol$$1, _super$$50);
    WithSymbol$$1.prototype.isWith = function() {
      return true;
    };
    return WithSymbol$$1;
  }(TypeSymbol);
  TypeScript$$20.WithSymbol = WithSymbol;
  var FieldSymbol = function(_super$$51) {
    function FieldSymbol$$1(name$$54, location$$25, unitIndex$$7, canWrite, field) {
      _super$$51.call(this, name$$54, location$$25, name$$54.length, unitIndex$$7);
      this.canWrite = canWrite;
      this.field = field;
      this.getter = null;
      this.setter = null;
      this.hasBeenEmitted = false;
      this.name = name$$54;
      this.location = location$$25;
    }
    __extends(FieldSymbol$$1, _super$$51);
    FieldSymbol$$1.prototype.kind = function() {
      return TypeScript$$20.SymbolKind.Field;
    };
    FieldSymbol$$1.prototype.writeable = function() {
      return this.isAccessor() ? this.setter != null : this.canWrite;
    };
    FieldSymbol$$1.prototype.getType = function() {
      return this.field.typeLink.type;
    };
    FieldSymbol$$1.prototype.getTypeNameEx = function(scope$$18) {
      return TypeScript$$20.MemberName.create(this.field.typeLink.type.getScopedTypeNameEx(scope$$18), this.name + this.getOptionalNameString() + ": ", "");
    };
    FieldSymbol$$1.prototype.isMember = function() {
      return true;
    };
    FieldSymbol$$1.prototype.setType = function(type$$34) {
      this.field.typeLink.type = type$$34;
    };
    FieldSymbol$$1.prototype.isAccessor = function() {
      return this.getter != null || this.setter != null;
    };
    FieldSymbol$$1.prototype.isVariable = function() {
      return true;
    };
    FieldSymbol$$1.prototype.toString = function() {
      return this.getTypeNameEx(null).toString();
    };
    FieldSymbol$$1.prototype.specializeType = function(pattern$$6, replacement$$4, checker$$13) {
      var rType = this.field.typeLink.type.specializeType(pattern$$6, replacement$$4, checker$$13, false);
      if (rType != this.field.typeLink.type) {
        var fieldDef = new ValueLocation;
        var result$$16 = new FieldSymbol$$1(this.name, 0, checker$$13.locationInfo.unitIndex, this.canWrite, fieldDef);
        result$$16.flags = this.flags;
        fieldDef.symbol = result$$16;
        fieldDef.typeLink = new TypeScript$$20.TypeLink;
        result$$16.setType(rType);
        result$$16.typeCheckStatus = TypeCheckStatus.Finished;
        return result$$16;
      } else {
        return this;
      }
    };
    FieldSymbol$$1.prototype.getDocComments = function() {
      if (this.getter != null || this.setter != null) {
        var comments$$11 = [];
        if (this.getter != null) {
          comments$$11 = comments$$11.concat(this.getter.getDocComments());
        }
        if (this.setter != null) {
          comments$$11 = comments$$11.concat(this.setter.getDocComments());
        }
        return comments$$11;
      } else {
        if (this.declAST != null) {
          return this.declAST.getDocComments();
        }
      }
      return[];
    };
    return FieldSymbol$$1;
  }(InferenceSymbol);
  TypeScript$$20.FieldSymbol = FieldSymbol;
  var ParameterSymbol = function(_super$$52) {
    function ParameterSymbol$$1(name$$55, location$$26, unitIndex$$8, parameter) {
      _super$$52.call(this, name$$55, location$$26, name$$55.length, unitIndex$$8);
      this.parameter = parameter;
      this.paramDocComment = null;
      this.funcDecl = null;
      this.argsOffset = -1;
      this.name = name$$55;
      this.location = location$$26;
    }
    __extends(ParameterSymbol$$1, _super$$52);
    ParameterSymbol$$1.prototype.kind = function() {
      return TypeScript$$20.SymbolKind.Parameter;
    };
    ParameterSymbol$$1.prototype.writeable = function() {
      return true;
    };
    ParameterSymbol$$1.prototype.getType = function() {
      return this.parameter.typeLink.type;
    };
    ParameterSymbol$$1.prototype.setType = function(type$$35) {
      this.parameter.typeLink.type = type$$35;
    };
    ParameterSymbol$$1.prototype.isVariable = function() {
      return true;
    };
    ParameterSymbol$$1.prototype.isOptional = function() {
      if (this.parameter && this.parameter.symbol && this.parameter.symbol.declAST) {
        return this.parameter.symbol.declAST.isOptional;
      } else {
        return false;
      }
    };
    ParameterSymbol$$1.prototype.getTypeNameEx = function(scope$$19) {
      return TypeScript$$20.MemberName.create(this.getType().getScopedTypeNameEx(scope$$19), this.name + (this.isOptional() ? "?" : "") + ": ", "");
    };
    ParameterSymbol$$1.prototype.toString = function() {
      return this.getTypeNameEx(null).toString();
    };
    ParameterSymbol$$1.prototype.specializeType = function(pattern$$7, replacement$$5, checker$$14) {
      var rType$$1 = this.parameter.typeLink.type.specializeType(pattern$$7, replacement$$5, checker$$14, false);
      if (this.parameter.typeLink.type != rType$$1) {
        var paramDef$$1 = new ValueLocation;
        var result$$17 = new ParameterSymbol$$1(this.name, 0, checker$$14.locationInfo.unitIndex, paramDef$$1);
        paramDef$$1.symbol = result$$17;
        result$$17.setType(rType$$1);
        return result$$17;
      } else {
        return this;
      }
    };
    ParameterSymbol$$1.prototype.getParameterDocComments = function() {
      if (!this.paramDocComment) {
        var parameterComments = [];
        if (this.funcDecl) {
          var fncDocComments$$1 = this.funcDecl.getDocComments();
          var paramComment = TypeScript$$20.Comment.getParameterDocCommentText(this.name, fncDocComments$$1);
          if (paramComment != "") {
            parameterComments.push(paramComment);
          }
        }
        var docComments$$1 = TypeScript$$20.Comment.getDocCommentText(this.getDocComments());
        if (docComments$$1 != "") {
          parameterComments.push(docComments$$1);
        }
        this.paramDocComment = parameterComments.join("\n");
      }
      return this.paramDocComment;
    };
    return ParameterSymbol$$1;
  }(InferenceSymbol);
  TypeScript$$20.ParameterSymbol = ParameterSymbol;
  var VariableSymbol = function(_super$$53) {
    function VariableSymbol$$1(name$$56, location$$27, unitIndex$$9, variable) {
      _super$$53.call(this, name$$56, location$$27, name$$56.length, unitIndex$$9);
      this.variable = variable;
    }
    __extends(VariableSymbol$$1, _super$$53);
    VariableSymbol$$1.prototype.kind = function() {
      return TypeScript$$20.SymbolKind.Variable;
    };
    VariableSymbol$$1.prototype.writeable = function() {
      return true;
    };
    VariableSymbol$$1.prototype.getType = function() {
      return this.variable.typeLink.type;
    };
    VariableSymbol$$1.prototype.getTypeNameEx = function(scope$$20) {
      return TypeScript$$20.MemberName.create(this.getType().getScopedTypeNameEx(scope$$20), this.name + ": ", "");
    };
    VariableSymbol$$1.prototype.setType = function(type$$36) {
      this.variable.typeLink.type = type$$36;
    };
    VariableSymbol$$1.prototype.isVariable = function() {
      return true;
    };
    return VariableSymbol$$1;
  }(InferenceSymbol);
  TypeScript$$20.VariableSymbol = VariableSymbol;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$21) {
  function symbolCanBeUsed(sym$$7, publicOnly) {
    return publicOnly ? !(TypeScript$$21.hasFlag(sym$$7.flags, TypeScript$$21.SymbolFlags.Private) || sym$$7.declAST && sym$$7.declAST.nodeType == TypeScript$$21.NodeType.FuncDecl && TypeScript$$21.hasFlag(sym$$7.declAST.fncFlags, TypeScript$$21.FncFlags.Private)) : true;
  }
  var ScopedMembers = function() {
    function ScopedMembers$$1(dualMembers) {
      this.dualMembers = dualMembers;
      this.allMembers = this.dualMembers;
      this.publicMembers = this.dualMembers.primaryTable;
      this.privateMembers = this.dualMembers.secondaryTable;
    }
    ScopedMembers$$1.prototype.addPublicMember = function(key$$33, data$$33) {
      return this.dualMembers.primaryTable.add(key$$33, data$$33);
    };
    ScopedMembers$$1.prototype.addPrivateMember = function(key$$34, data$$34) {
      return this.dualMembers.secondaryTable.add(key$$34, data$$34);
    };
    return ScopedMembers$$1;
  }();
  TypeScript$$21.ScopedMembers = ScopedMembers;
  (function(SymbolKind$$1) {
    SymbolKind$$1._map = [];
    SymbolKind$$1._map[0] = "None";
    SymbolKind$$1.None = 0;
    SymbolKind$$1._map[1] = "Type";
    SymbolKind$$1.Type = 1;
    SymbolKind$$1._map[2] = "Field";
    SymbolKind$$1.Field = 2;
    SymbolKind$$1._map[3] = "Parameter";
    SymbolKind$$1.Parameter = 3;
    SymbolKind$$1._map[4] = "Variable";
    SymbolKind$$1.Variable = 4;
  })(TypeScript$$21.SymbolKind || (TypeScript$$21.SymbolKind = {}));
  var SymbolKind = TypeScript$$21.SymbolKind;
  var SymbolScope = function() {
    function SymbolScope$$1(container$$3) {
      this.container = container$$3;
    }
    SymbolScope$$1.prototype.printLabel = function() {
      return "base";
    };
    SymbolScope$$1.prototype.getAllSymbolNames = function(members$$13) {
      return["please", "implement", "in", "derived", "classes"];
    };
    SymbolScope$$1.prototype.getAllTypeSymbolNames = function(members$$14) {
      return["please", "implement", "in", "derived", "classes"];
    };
    SymbolScope$$1.prototype.getAllValueSymbolNames = function(members$$15) {
      return["please", "implement", "in", "derived", "classes"];
    };
    SymbolScope$$1.prototype.search = function(filter, name$$57, publicOnly$$1, typespace) {
      return null;
    };
    SymbolScope$$1.prototype.findLocal = function(name$$58, publicOnly$$2, typespace$$1) {
      return null;
    };
    SymbolScope$$1.prototype.find = function(name$$59, publicOnly$$3, typespace$$2) {
      return null;
    };
    SymbolScope$$1.prototype.findImplementation = function(name$$60, publicOnly$$4, typespace$$3) {
      return null;
    };
    SymbolScope$$1.prototype.findAmbient = function(name$$61, publicOnly$$5, typespace$$4) {
      return null;
    };
    SymbolScope$$1.prototype.print = function(outfile$$6) {
      if (this.container) {
        outfile$$6.WriteLine(this.printLabel() + " scope with container: " + this.container.name + "...");
      } else {
        outfile$$6.WriteLine(this.printLabel() + " scope...");
      }
    };
    SymbolScope$$1.prototype.enter = function(container$$4, ast$$60, symbol$$6, errorReporter$$2, publicOnly$$6, typespace$$5, ambient) {
      throw new Error("please implement in derived class");
    };
    SymbolScope$$1.prototype.getTable = function() {
      throw new Error("please implement in derived class");
    };
    return SymbolScope$$1;
  }();
  TypeScript$$21.SymbolScope = SymbolScope;
  var SymbolAggregateScope = function(_super$$54) {
    function SymbolAggregateScope$$1(container$$5) {
      _super$$54.call(this, container$$5);
      this.valueCache = null;
      this.valueImplCache = null;
      this.valueAmbientCache = null;
      this.typeCache = null;
      this.typeImplCache = null;
      this.typeAmbientCache = null;
      this.parents = null;
      this.container = container$$5;
    }
    __extends(SymbolAggregateScope$$1, _super$$54);
    SymbolAggregateScope$$1.prototype.printLabel = function() {
      return "agg";
    };
    SymbolAggregateScope$$1.prototype.search = function(filter$$1, name$$62, publicOnly$$7, typespace$$6) {
      if (this.parents) {
        var i$$65 = 0;
        for (;i$$65 < this.parents.length;i$$65++) {
          var sym$$8 = this.parents[i$$65].search(filter$$1, name$$62, publicOnly$$7, typespace$$6);
          if (sym$$8) {
            if (filter$$1.update(sym$$8)) {
              return sym$$8;
            }
          }
        }
      }
      return filter$$1.result;
    };
    SymbolAggregateScope$$1.prototype.getAllSymbolNames = function(members$$16) {
      var result$$18 = [];
      if (this.parents) {
        var i$$66 = 0;
        for (;i$$66 < this.parents.length;i$$66++) {
          var parentResult = this.parents[i$$66].getAllSymbolNames(members$$16);
          if (parentResult) {
            result$$18 = result$$18.concat(parentResult);
          }
        }
      }
      return result$$18;
    };
    SymbolAggregateScope$$1.prototype.getAllTypeSymbolNames = function(members$$17) {
      var result$$19 = [];
      if (this.parents) {
        var i$$67 = 0;
        for (;i$$67 < this.parents.length;i$$67++) {
          var parentResult$$1 = this.parents[i$$67].getAllTypeSymbolNames(members$$17);
          if (parentResult$$1) {
            result$$19 = result$$19.concat(parentResult$$1);
          }
        }
      }
      return result$$19;
    };
    SymbolAggregateScope$$1.prototype.getAllValueSymbolNames = function(members$$18) {
      var result$$20 = [];
      if (this.parents) {
        var i$$68 = 0;
        for (;i$$68 < this.parents.length;i$$68++) {
          var parentResult$$2 = this.parents[i$$68].getAllValueSymbolNames(members$$18);
          if (parentResult$$2) {
            result$$20 = result$$20.concat(parentResult$$2);
          }
        }
      }
      return result$$20;
    };
    SymbolAggregateScope$$1.prototype.print = function(outfile$$7) {
      _super$$54.prototype.print.call(this, outfile$$7);
      if (this.parents) {
        var i$$69 = 0;
        for (;i$$69 < this.parents.length;i$$69++) {
          this.parents[i$$69].print(outfile$$7);
        }
      }
    };
    SymbolAggregateScope$$1.prototype.findImplementation = function(name$$63, publicOnly$$8, typespace$$7) {
      var sym$$9 = null;
      var i$$70 = 0;
      var implCache = this.valueImplCache;
      if (typespace$$7) {
        implCache = this.typeImplCache;
      }
      if (implCache && (sym$$9 = implCache.lookup(name$$63)) != null && (publicOnly$$8 ? !(TypeScript$$21.hasFlag(sym$$9.flags, TypeScript$$21.SymbolFlags.Private) || sym$$9.declAST && sym$$9.declAST.nodeType == TypeScript$$21.NodeType.FuncDecl && TypeScript$$21.hasFlag(sym$$9.declAST.fncFlags, TypeScript$$21.FncFlags.Private)) : true)) {
        return sym$$9;
      }
      if (this.parents) {
        i$$70 = 0;
        for (;i$$70 < this.parents.length;i$$70++) {
          sym$$9 = this.parents[i$$70].findImplementation(name$$63, publicOnly$$8, typespace$$7);
          if (sym$$9) {
            break;
          }
        }
      }
      if (implCache) {
        if (typespace$$7) {
          this.typeImplCache = new TypeScript$$21.StringHashTable;
          implCache = this.typeImplCache;
        } else {
          this.valueImplCache = new TypeScript$$21.StringHashTable;
          implCache = this.valueImplCache;
        }
      }
      implCache.add(name$$63, sym$$9);
      return sym$$9;
    };
    SymbolAggregateScope$$1.prototype.find = function(name$$64, publicOnly$$9, typespace$$8) {
      var sym$$10 = null;
      var i$$71 = 0;
      var cache = this.valueCache;
      if (typespace$$8) {
        cache = this.typeCache;
      }
      if (cache && (sym$$10 = cache.lookup(name$$64)) != null && (publicOnly$$9 ? !(TypeScript$$21.hasFlag(sym$$10.flags, TypeScript$$21.SymbolFlags.Private) || sym$$10.declAST && sym$$10.declAST.nodeType == TypeScript$$21.NodeType.FuncDecl && TypeScript$$21.hasFlag(sym$$10.declAST.fncFlags, TypeScript$$21.FncFlags.Private)) : true)) {
        return sym$$10;
      }
      if (this.parents) {
        i$$71 = 0;
        for (;i$$71 < this.parents.length;i$$71++) {
          sym$$10 = this.parents[i$$71].find(name$$64, publicOnly$$9, typespace$$8);
          if (sym$$10) {
            break;
          }
        }
      }
      if (cache == null) {
        if (typespace$$8) {
          this.typeCache = new TypeScript$$21.StringHashTable;
          cache = this.typeCache;
        } else {
          this.valueCache = new TypeScript$$21.StringHashTable;
          cache = this.valueCache;
        }
      }
      cache.add(name$$64, sym$$10);
      return sym$$10;
    };
    SymbolAggregateScope$$1.prototype.findAmbient = function(name$$65, publicOnly$$10, typespace$$9) {
      var sym$$11 = null;
      var i$$72 = 0;
      var cache$$1 = this.valueAmbientCache;
      if (typespace$$9) {
        cache$$1 = this.typeAmbientCache;
      }
      if (cache$$1 && (sym$$11 = cache$$1.lookup(name$$65)) != null) {
        return sym$$11;
      }
      if (this.parents) {
        i$$72 = 0;
        for (;i$$72 < this.parents.length;i$$72++) {
          sym$$11 = this.parents[i$$72].findAmbient(name$$65, publicOnly$$10, typespace$$9);
          if (sym$$11) {
            break;
          }
        }
      }
      if (cache$$1 == null) {
        if (typespace$$9) {
          this.typeAmbientCache = new TypeScript$$21.StringHashTable;
          cache$$1 = this.typeAmbientCache;
        } else {
          this.valueAmbientCache = new TypeScript$$21.StringHashTable;
          cache$$1 = this.valueAmbientCache;
        }
      }
      cache$$1.add(name$$65, sym$$11);
      return sym$$11;
    };
    SymbolAggregateScope$$1.prototype.addParentScope = function(parent$$49) {
      if (this.parents == null) {
        this.parents = new Array;
      }
      this.parents[this.parents.length] = parent$$49;
    };
    return SymbolAggregateScope$$1;
  }(SymbolScope);
  TypeScript$$21.SymbolAggregateScope = SymbolAggregateScope;
  var SymbolTableScope = function(_super$$55) {
    function SymbolTableScope$$1(valueMembers$$1, ambientValueMembers$$1, enclosedTypes$$1, ambientEnclosedTypes$$1, container$$6) {
      _super$$55.call(this, container$$6);
      this.valueMembers = valueMembers$$1;
      this.ambientValueMembers = ambientValueMembers$$1;
      this.enclosedTypes = enclosedTypes$$1;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$1;
      this.container = container$$6;
    }
    __extends(SymbolTableScope$$1, _super$$55);
    SymbolTableScope$$1.prototype.printLabel = function() {
      return "table";
    };
    SymbolTableScope$$1.prototype.getAllSymbolNames = function(members$$19) {
      var result$$21 = this.getAllTypeSymbolNames(members$$19);
      return result$$21.concat(this.getAllValueSymbolNames(members$$19));
    };
    SymbolTableScope$$1.prototype.getAllTypeSymbolNames = function(members$$20) {
      var result$$22 = [];
      if (this.ambientEnclosedTypes) {
        result$$22 = result$$22.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());
      }
      if (this.enclosedTypes) {
        result$$22 = result$$22.concat(this.enclosedTypes.allMembers.getAllKeys());
      }
      return result$$22;
    };
    SymbolTableScope$$1.prototype.getAllValueSymbolNames = function(members$$21) {
      var result$$23 = [];
      if (this.ambientValueMembers) {
        result$$23 = result$$23.concat(this.ambientValueMembers.allMembers.getAllKeys());
      }
      if (this.valueMembers) {
        result$$23 = result$$23.concat(this.valueMembers.allMembers.getAllKeys());
      }
      return result$$23;
    };
    SymbolTableScope$$1.prototype.search = function(filter$$2, name$$66, publicOnly$$11, typespace$$10) {
      var sym$$12 = this.find(name$$66, publicOnly$$11, typespace$$10);
      filter$$2.update(sym$$12);
      return filter$$2.result;
    };
    SymbolTableScope$$1.prototype.find = function(name$$67, publicOnly$$12, typespace$$11) {
      var table$$2 = null;
      var ambientTable = null;
      if (typespace$$11) {
        table$$2 = this.enclosedTypes == null ? null : publicOnly$$12 ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;
        ambientTable = this.ambientEnclosedTypes == null ? null : publicOnly$$12 ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
      } else {
        table$$2 = this.valueMembers == null ? null : publicOnly$$12 ? this.valueMembers.publicMembers : this.valueMembers.allMembers;
        ambientTable = this.ambientValueMembers == null ? null : publicOnly$$12 ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
      }
      if (ambientTable) {
        var s$$18 = ambientTable.lookup(name$$67);
        if (s$$18) {
          return s$$18;
        }
      }
      if (table$$2) {
        s$$18 = table$$2.lookup(name$$67);
        if (s$$18) {
          return s$$18;
        }
      }
      return null;
    };
    SymbolTableScope$$1.prototype.findAmbient = function(name$$68, publicOnly$$13, typespace$$12) {
      var ambientTable$$1 = this.ambientValueMembers == null ? null : publicOnly$$13 ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
      if (typespace$$12) {
        ambientTable$$1 = this.ambientEnclosedTypes == null ? null : publicOnly$$13 ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
      }
      if (ambientTable$$1) {
        var s$$19 = ambientTable$$1.lookup(name$$68);
        if (s$$19) {
          return s$$19;
        }
      }
      return null;
    };
    SymbolTableScope$$1.prototype.print = function(outfile$$8) {
      _super$$55.prototype.print.call(this, outfile$$8);
      if (this.ambientValueMembers) {
        this.ambientValueMembers.allMembers.map(function(key$$35, sym$$13, context$$41) {
          outfile$$8.WriteLine("  " + key$$35);
        }, null);
      }
      if (this.valueMembers) {
        this.valueMembers.allMembers.map(function(key$$36, sym$$14, context$$42) {
          outfile$$8.WriteLine("  " + key$$36);
        }, null);
      }
      if (this.ambientEnclosedTypes) {
        this.ambientEnclosedTypes.allMembers.map(function(key$$37, sym$$15, context$$43) {
          outfile$$8.WriteLine("  " + key$$37);
        }, null);
      }
      if (this.enclosedTypes) {
        this.enclosedTypes.allMembers.map(function(key$$38, sym$$16, context$$44) {
          outfile$$8.WriteLine("  " + key$$38);
        }, null);
      }
    };
    SymbolTableScope$$1.prototype.findImplementation = function(name$$69, publicOnly$$14, typespace$$13) {
      var sym$$17 = this.find(name$$69, publicOnly$$14, typespace$$13);
      if (sym$$17) {
        if (sym$$17.kind() == SymbolKind.Type) {
          var typeSym$$1 = sym$$17;
          if (!typeSym$$1.type.hasImplementation()) {
            sym$$17 = null;
          }
        } else {
          if (sym$$17.container) {
            if (sym$$17.container.kind() == SymbolKind.Type) {
              var ctypeSym = sym$$17.container;
              if (!ctypeSym.type.hasImplementation()) {
                sym$$17 = null;
              }
            }
          }
        }
      }
      return sym$$17;
    };
    SymbolTableScope$$1.prototype.getTable = function() {
      return this.valueMembers.publicMembers;
    };
    return SymbolTableScope$$1;
  }(SymbolScope);
  TypeScript$$21.SymbolTableScope = SymbolTableScope;
  var SymbolScopeBuilder = function(_super$$56) {
    function SymbolScopeBuilder$$1(valueMembers$$2, ambientValueMembers$$2, enclosedTypes$$2, ambientEnclosedTypes$$2, parent$$50, container$$7) {
      _super$$56.call(this, container$$7);
      this.valueMembers = valueMembers$$2;
      this.ambientValueMembers = ambientValueMembers$$2;
      this.enclosedTypes = enclosedTypes$$2;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$2;
      this.parent = parent$$50;
      this.container = container$$7;
    }
    __extends(SymbolScopeBuilder$$1, _super$$56);
    SymbolScopeBuilder$$1.prototype.printLabel = function() {
      return "builder";
    };
    SymbolScopeBuilder$$1.prototype.getAllSymbolNames = function(members$$22) {
      var result$$24 = this.getAllTypeSymbolNames(members$$22);
      return result$$24.concat(this.getAllValueSymbolNames(members$$22));
    };
    SymbolScopeBuilder$$1.prototype.getAllTypeSymbolNames = function(members$$23) {
      var result$$25 = [];
      if (this.ambientEnclosedTypes) {
        result$$25 = result$$25.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());
      }
      if (this.enclosedTypes) {
        result$$25 = result$$25.concat(this.enclosedTypes.allMembers.getAllKeys());
      }
      if (!members$$23 && this.parent) {
        var parentResult$$3 = this.parent.getAllTypeSymbolNames(members$$23);
        if (parentResult$$3) {
          result$$25 = result$$25.concat(parentResult$$3);
        }
      }
      return result$$25;
    };
    SymbolScopeBuilder$$1.prototype.getAllValueSymbolNames = function(members$$24) {
      var result$$26 = [];
      if (this.ambientValueMembers) {
        result$$26 = result$$26.concat(this.ambientValueMembers.allMembers.getAllKeys());
      }
      if (this.valueMembers) {
        result$$26 = result$$26.concat(this.valueMembers.allMembers.getAllKeys());
      }
      if (!members$$24 && this.parent) {
        var parentResult$$4 = this.parent.getAllValueSymbolNames(members$$24);
        if (parentResult$$4) {
          result$$26 = result$$26.concat(parentResult$$4);
        }
      }
      return result$$26;
    };
    SymbolScopeBuilder$$1.prototype.search = function(filter$$3, name$$70, publicOnly$$15, typespace$$14) {
      var sym$$18 = null;
      var table$$3 = this.valueMembers == null ? null : publicOnly$$15 ? this.valueMembers.publicMembers : this.valueMembers.allMembers;
      var ambientTable$$2 = this.ambientValueMembers == null ? null : publicOnly$$15 ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
      if (typespace$$14) {
        table$$3 = this.enclosedTypes == null ? null : publicOnly$$15 ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;
        ambientTable$$2 = this.ambientEnclosedTypes == null ? null : publicOnly$$15 ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
      }
      if (ambientTable$$2) {
        if ((sym$$18 = ambientTable$$2.lookup(name$$70)) != null) {
          if (filter$$3.update(sym$$18)) {
            return sym$$18;
          }
        }
      }
      if (table$$3) {
        if ((sym$$18 = table$$3.lookup(name$$70)) != null) {
          if (filter$$3.update(sym$$18)) {
            return sym$$18;
          }
        }
      }
      if (this.parent) {
        sym$$18 = this.parent.search(filter$$3, name$$70, publicOnly$$15, typespace$$14);
        if (sym$$18) {
          if (filter$$3.update(sym$$18)) {
            return sym$$18;
          }
        }
      }
      return filter$$3.result;
    };
    SymbolScopeBuilder$$1.prototype.print = function(outfile$$9) {
      _super$$56.prototype.print.call(this, outfile$$9);
      if (this.ambientValueMembers) {
        this.ambientValueMembers.allMembers.map(function(key$$39, s$$20, context$$45) {
          var sym$$19 = s$$20;
          outfile$$9.WriteLine("  " + key$$39);
        }, null);
      }
      if (this.valueMembers) {
        this.valueMembers.allMembers.map(function(key$$40, s$$21, context$$46) {
          var sym$$20 = s$$21;
          outfile$$9.WriteLine("  " + key$$40);
        }, null);
      }
      if (this.ambientEnclosedTypes) {
        this.ambientEnclosedTypes.allMembers.map(function(key$$41, s$$22, context$$47) {
          var sym$$21 = s$$22;
          outfile$$9.WriteLine("  " + key$$41);
        }, null);
      }
      if (this.enclosedTypes) {
        this.enclosedTypes.allMembers.map(function(key$$42, s$$23, context$$48) {
          var sym$$22 = s$$23;
          outfile$$9.WriteLine("  " + key$$42);
        }, null);
      }
      if (this.parent) {
        this.parent.print(outfile$$9);
      }
    };
    SymbolScopeBuilder$$1.prototype.find = function(name$$71, publicOnly$$16, typespace$$15) {
      var sym$$23 = null;
      var table$$4 = this.valueMembers == null ? null : publicOnly$$16 ? this.valueMembers.publicMembers : this.valueMembers.allMembers;
      var ambientTable$$3 = this.ambientValueMembers == null ? null : publicOnly$$16 ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
      if (typespace$$15) {
        table$$4 = this.enclosedTypes == null ? null : publicOnly$$16 ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;
        ambientTable$$3 = this.ambientEnclosedTypes == null ? null : publicOnly$$16 ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
      }
      if (ambientTable$$3 && (sym$$23 = ambientTable$$3.lookup(name$$71)) != null) {
        return sym$$23;
      }
      if (table$$4 && (sym$$23 = table$$4.lookup(name$$71)) != null) {
        return sym$$23;
      }
      if (this.parent) {
        return this.parent.find(name$$71, publicOnly$$16, typespace$$15);
      }
      return null;
    };
    SymbolScopeBuilder$$1.prototype.findAmbient = function(name$$72, publicOnly$$17, typespace$$16) {
      var sym$$24 = null;
      var ambientTable$$4 = this.ambientValueMembers == null ? null : publicOnly$$17 ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
      if (typespace$$16) {
        ambientTable$$4 = this.ambientEnclosedTypes == null ? null : publicOnly$$17 ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
      }
      if (ambientTable$$4 && (sym$$24 = ambientTable$$4.lookup(name$$72)) != null) {
        return sym$$24;
      }
      if (this.parent) {
        return this.parent.findAmbient(name$$72, publicOnly$$17, typespace$$16);
      }
      return null;
    };
    SymbolScopeBuilder$$1.prototype.findLocal = function(name$$73, publicOnly$$18, typespace$$17) {
      var sym$$25 = null;
      var table$$5 = this.valueMembers == null ? null : publicOnly$$18 ? this.valueMembers.publicMembers : this.valueMembers.allMembers;
      var ambientTable$$5 = this.ambientValueMembers == null ? null : publicOnly$$18 ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
      if (typespace$$17) {
        table$$5 = this.enclosedTypes == null ? null : publicOnly$$18 ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;
        ambientTable$$5 = this.ambientEnclosedTypes == null ? null : publicOnly$$18 ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
      }
      if (table$$5) {
        if ((sym$$25 = table$$5.lookup(name$$73)) != null) {
          if (sym$$25) {
            return sym$$25;
          }
        }
      }
      if (ambientTable$$5) {
        if ((sym$$25 = ambientTable$$5.lookup(name$$73)) != null) {
          if (sym$$25) {
            return sym$$25;
          }
        }
      }
      return null;
    };
    SymbolScopeBuilder$$1.prototype.enter = function(container$$8, ast$$61, symbol$$7, errorReporter$$3, insertAsPublic, typespace$$18, ambient$$1) {
      var table$$6 = null;
      if (ambient$$1) {
        if (typespace$$18) {
          table$$6 = this.ambientEnclosedTypes == null ? null : insertAsPublic ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.privateMembers;
        } else {
          table$$6 = this.ambientValueMembers == null ? null : insertAsPublic ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.privateMembers;
        }
      } else {
        if (typespace$$18) {
          table$$6 = this.enclosedTypes == null ? null : insertAsPublic ? this.enclosedTypes.publicMembers : this.enclosedTypes.privateMembers;
        } else {
          table$$6 = this.valueMembers == null ? null : insertAsPublic ? this.valueMembers.publicMembers : this.valueMembers.privateMembers;
        }
      }
      if (table$$6) {
        if (!table$$6.add(symbol$$7.name, symbol$$7)) {
          errorReporter$$3.duplicateIdentifier(ast$$61, symbol$$7.name);
        }
      } else {
        TypeScript$$21.CompilerDiagnostics.Alert("YYYYY");
      }
      symbol$$7.container = container$$8;
    };
    SymbolScopeBuilder$$1.prototype.getTable = function() {
      return this.valueMembers.allMembers;
    };
    return SymbolScopeBuilder$$1;
  }(SymbolScope);
  TypeScript$$21.SymbolScopeBuilder = SymbolScopeBuilder;
  var FilteredSymbolScope = function(_super$$57) {
    function FilteredSymbolScope$$1(scope$$21, container$$9, filter$$4) {
      _super$$57.call(this, container$$9);
      this.scope = scope$$21;
      this.filter = filter$$4;
    }
    __extends(FilteredSymbolScope$$1, _super$$57);
    FilteredSymbolScope$$1.prototype.print = function(outfile$$10) {
      this.scope.print(outfile$$10);
    };
    FilteredSymbolScope$$1.prototype.find = function(name$$74, publicOnly$$19, typespace$$19) {
      this.filter.reset();
      return this.scope.search(this.filter, name$$74, publicOnly$$19, typespace$$19);
    };
    FilteredSymbolScope$$1.prototype.findLocal = function(name$$75, publicOnly$$20, typespace$$20) {
      return this.scope.findLocal(name$$75, publicOnly$$20, typespace$$20);
    };
    return FilteredSymbolScope$$1;
  }(SymbolScope);
  TypeScript$$21.FilteredSymbolScope = FilteredSymbolScope;
  var FilteredSymbolScopeBuilder = function(_super$$58) {
    function FilteredSymbolScopeBuilder$$1(valueMembers$$3, parent$$51, container$$10, filter$$5) {
      _super$$58.call(this, valueMembers$$3, null, null, null, parent$$51, container$$10);
      this.filter = filter$$5;
    }
    __extends(FilteredSymbolScopeBuilder$$1, _super$$58);
    FilteredSymbolScopeBuilder$$1.prototype.findLocal = function(name$$76, publicOnly$$21, typespace$$21) {
      var sym$$26 = _super$$58.prototype.findLocal.call(this, name$$76, publicOnly$$21, typespace$$21);
      if (sym$$26) {
        if (!this.filter(sym$$26)) {
          return null;
        }
      }
      return sym$$26;
    };
    FilteredSymbolScopeBuilder$$1.prototype.search = function(filter$$6, name$$77, publicOnly$$22, typespace$$22) {
      throw new Error("please implement");
    };
    FilteredSymbolScopeBuilder$$1.prototype.find = function(name$$78, publicOnly$$23, typespace$$23) {
      var sym$$27 = _super$$58.prototype.findLocal.call(this, name$$78, publicOnly$$23, typespace$$23);
      if (sym$$27) {
        if (!this.filter(sym$$27)) {
          return null;
        }
      }
      return _super$$58.prototype.find.call(this, name$$78, publicOnly$$23, typespace$$23);
    };
    return FilteredSymbolScopeBuilder$$1;
  }(SymbolScopeBuilder);
  TypeScript$$21.FilteredSymbolScopeBuilder = FilteredSymbolScopeBuilder;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$22) {
  function setTokenInfo(tokenId$$44, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text$$21, ers$$1) {
    if (tokenId$$44 !== undefined) {
      TypeScript$$22.tokenTable[tokenId$$44] = new TokenInfo(tokenId$$44, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text$$21, ers$$1);
      if (binopNodeType != TypeScript$$22.NodeType.None) {
        TypeScript$$22.nodeTypeTable[binopNodeType] = text$$21;
        TypeScript$$22.nodeTypeToTokTable[binopNodeType] = tokenId$$44;
      }
      if (unopNodeType != TypeScript$$22.NodeType.None) {
        TypeScript$$22.nodeTypeTable[unopNodeType] = text$$21;
      }
    }
  }
  function lookupToken(tokenId$$45) {
    return TypeScript$$22.tokenTable[tokenId$$45];
  }
  function initializeStaticTokens() {
    var i$$73 = 0;
    for (;i$$73 <= TokenID.LimFixed;i$$73++) {
      TypeScript$$22.staticTokens[i$$73] = new Token(i$$73);
    }
  }
  (function(TokenID$$1) {
    TokenID$$1._map = [];
    TokenID$$1._map[0] = "Any";
    TokenID$$1.Any = 0;
    TokenID$$1._map[1] = "Bool";
    TokenID$$1.Bool = 1;
    TokenID$$1._map[2] = "Break";
    TokenID$$1.Break = 2;
    TokenID$$1._map[3] = "Case";
    TokenID$$1.Case = 3;
    TokenID$$1._map[4] = "Catch";
    TokenID$$1.Catch = 4;
    TokenID$$1._map[5] = "Class";
    TokenID$$1.Class = 5;
    TokenID$$1._map[6] = "Const";
    TokenID$$1.Const = 6;
    TokenID$$1._map[7] = "Continue";
    TokenID$$1.Continue = 7;
    TokenID$$1._map[8] = "Debugger";
    TokenID$$1.Debugger = 8;
    TokenID$$1._map[9] = "Default";
    TokenID$$1.Default = 9;
    TokenID$$1._map[10] = "Delete";
    TokenID$$1.Delete = 10;
    TokenID$$1._map[11] = "Do";
    TokenID$$1.Do = 11;
    TokenID$$1._map[12] = "Else";
    TokenID$$1.Else = 12;
    TokenID$$1._map[13] = "Enum";
    TokenID$$1.Enum = 13;
    TokenID$$1._map[14] = "Export";
    TokenID$$1.Export = 14;
    TokenID$$1._map[15] = "Extends";
    TokenID$$1.Extends = 15;
    TokenID$$1._map[16] = "Declare";
    TokenID$$1.Declare = 16;
    TokenID$$1._map[17] = "False";
    TokenID$$1.False = 17;
    TokenID$$1._map[18] = "Finally";
    TokenID$$1.Finally = 18;
    TokenID$$1._map[19] = "For";
    TokenID$$1.For = 19;
    TokenID$$1._map[20] = "Function";
    TokenID$$1.Function = 20;
    TokenID$$1._map[21] = "Constructor";
    TokenID$$1.Constructor = 21;
    TokenID$$1._map[22] = "Get";
    TokenID$$1.Get = 22;
    TokenID$$1._map[23] = "If";
    TokenID$$1.If = 23;
    TokenID$$1._map[24] = "Implements";
    TokenID$$1.Implements = 24;
    TokenID$$1._map[25] = "Import";
    TokenID$$1.Import = 25;
    TokenID$$1._map[26] = "In";
    TokenID$$1.In = 26;
    TokenID$$1._map[27] = "InstanceOf";
    TokenID$$1.InstanceOf = 27;
    TokenID$$1._map[28] = "Interface";
    TokenID$$1.Interface = 28;
    TokenID$$1._map[29] = "Let";
    TokenID$$1.Let = 29;
    TokenID$$1._map[30] = "Module";
    TokenID$$1.Module = 30;
    TokenID$$1._map[31] = "New";
    TokenID$$1.New = 31;
    TokenID$$1._map[32] = "Number";
    TokenID$$1.Number = 32;
    TokenID$$1._map[33] = "Null";
    TokenID$$1.Null = 33;
    TokenID$$1._map[34] = "Package";
    TokenID$$1.Package = 34;
    TokenID$$1._map[35] = "Private";
    TokenID$$1.Private = 35;
    TokenID$$1._map[36] = "Protected";
    TokenID$$1.Protected = 36;
    TokenID$$1._map[37] = "Public";
    TokenID$$1.Public = 37;
    TokenID$$1._map[38] = "Return";
    TokenID$$1.Return = 38;
    TokenID$$1._map[39] = "Set";
    TokenID$$1.Set = 39;
    TokenID$$1._map[40] = "Static";
    TokenID$$1.Static = 40;
    TokenID$$1._map[41] = "String";
    TokenID$$1.String = 41;
    TokenID$$1._map[42] = "Super";
    TokenID$$1.Super = 42;
    TokenID$$1._map[43] = "Switch";
    TokenID$$1.Switch = 43;
    TokenID$$1._map[44] = "This";
    TokenID$$1.This = 44;
    TokenID$$1._map[45] = "Throw";
    TokenID$$1.Throw = 45;
    TokenID$$1._map[46] = "True";
    TokenID$$1.True = 46;
    TokenID$$1._map[47] = "Try";
    TokenID$$1.Try = 47;
    TokenID$$1._map[48] = "TypeOf";
    TokenID$$1.TypeOf = 48;
    TokenID$$1._map[49] = "Var";
    TokenID$$1.Var = 49;
    TokenID$$1._map[50] = "Void";
    TokenID$$1.Void = 50;
    TokenID$$1._map[51] = "With";
    TokenID$$1.With = 51;
    TokenID$$1._map[52] = "While";
    TokenID$$1.While = 52;
    TokenID$$1._map[53] = "Yield";
    TokenID$$1.Yield = 53;
    TokenID$$1._map[54] = "Semicolon";
    TokenID$$1.Semicolon = 54;
    TokenID$$1._map[55] = "OpenParen";
    TokenID$$1.OpenParen = 55;
    TokenID$$1._map[56] = "CloseParen";
    TokenID$$1.CloseParen = 56;
    TokenID$$1._map[57] = "OpenBracket";
    TokenID$$1.OpenBracket = 57;
    TokenID$$1._map[58] = "CloseBracket";
    TokenID$$1.CloseBracket = 58;
    TokenID$$1._map[59] = "OpenBrace";
    TokenID$$1.OpenBrace = 59;
    TokenID$$1._map[60] = "CloseBrace";
    TokenID$$1.CloseBrace = 60;
    TokenID$$1._map[61] = "Comma";
    TokenID$$1.Comma = 61;
    TokenID$$1._map[62] = "Equals";
    TokenID$$1.Equals = 62;
    TokenID$$1._map[63] = "PlusEquals";
    TokenID$$1.PlusEquals = 63;
    TokenID$$1._map[64] = "MinusEquals";
    TokenID$$1.MinusEquals = 64;
    TokenID$$1._map[65] = "AsteriskEquals";
    TokenID$$1.AsteriskEquals = 65;
    TokenID$$1._map[66] = "SlashEquals";
    TokenID$$1.SlashEquals = 66;
    TokenID$$1._map[67] = "PercentEquals";
    TokenID$$1.PercentEquals = 67;
    TokenID$$1._map[68] = "AmpersandEquals";
    TokenID$$1.AmpersandEquals = 68;
    TokenID$$1._map[69] = "CaretEquals";
    TokenID$$1.CaretEquals = 69;
    TokenID$$1._map[70] = "BarEquals";
    TokenID$$1.BarEquals = 70;
    TokenID$$1._map[71] = "LessThanLessThanEquals";
    TokenID$$1.LessThanLessThanEquals = 71;
    TokenID$$1._map[72] = "GreaterThanGreaterThanEquals";
    TokenID$$1.GreaterThanGreaterThanEquals = 72;
    TokenID$$1._map[73] = "GreaterThanGreaterThanGreaterThanEquals";
    TokenID$$1.GreaterThanGreaterThanGreaterThanEquals = 73;
    TokenID$$1._map[74] = "Question";
    TokenID$$1.Question = 74;
    TokenID$$1._map[75] = "Colon";
    TokenID$$1.Colon = 75;
    TokenID$$1._map[76] = "BarBar";
    TokenID$$1.BarBar = 76;
    TokenID$$1._map[77] = "AmpersandAmpersand";
    TokenID$$1.AmpersandAmpersand = 77;
    TokenID$$1._map[78] = "Bar";
    TokenID$$1.Bar = 78;
    TokenID$$1._map[79] = "Caret";
    TokenID$$1.Caret = 79;
    TokenID$$1._map[80] = "And";
    TokenID$$1.And = 80;
    TokenID$$1._map[81] = "EqualsEquals";
    TokenID$$1.EqualsEquals = 81;
    TokenID$$1._map[82] = "ExclamationEquals";
    TokenID$$1.ExclamationEquals = 82;
    TokenID$$1._map[83] = "EqualsEqualsEquals";
    TokenID$$1.EqualsEqualsEquals = 83;
    TokenID$$1._map[84] = "ExclamationEqualsEquals";
    TokenID$$1.ExclamationEqualsEquals = 84;
    TokenID$$1._map[85] = "LessThan";
    TokenID$$1.LessThan = 85;
    TokenID$$1._map[86] = "LessThanEquals";
    TokenID$$1.LessThanEquals = 86;
    TokenID$$1._map[87] = "GreaterThan";
    TokenID$$1.GreaterThan = 87;
    TokenID$$1._map[88] = "GreaterThanEquals";
    TokenID$$1.GreaterThanEquals = 88;
    TokenID$$1._map[89] = "LessThanLessThan";
    TokenID$$1.LessThanLessThan = 89;
    TokenID$$1._map[90] = "GreaterThanGreaterThan";
    TokenID$$1.GreaterThanGreaterThan = 90;
    TokenID$$1._map[91] = "GreaterThanGreaterThanGreaterThan";
    TokenID$$1.GreaterThanGreaterThanGreaterThan = 91;
    TokenID$$1._map[92] = "Plus";
    TokenID$$1.Plus = 92;
    TokenID$$1._map[93] = "Minus";
    TokenID$$1.Minus = 93;
    TokenID$$1._map[94] = "Asterisk";
    TokenID$$1.Asterisk = 94;
    TokenID$$1._map[95] = "Slash";
    TokenID$$1.Slash = 95;
    TokenID$$1._map[96] = "Percent";
    TokenID$$1.Percent = 96;
    TokenID$$1._map[97] = "Tilde";
    TokenID$$1.Tilde = 97;
    TokenID$$1._map[98] = "Exclamation";
    TokenID$$1.Exclamation = 98;
    TokenID$$1._map[99] = "PlusPlus";
    TokenID$$1.PlusPlus = 99;
    TokenID$$1._map[100] = "MinusMinus";
    TokenID$$1.MinusMinus = 100;
    TokenID$$1._map[101] = "Dot";
    TokenID$$1.Dot = 101;
    TokenID$$1._map[102] = "DotDotDot";
    TokenID$$1.DotDotDot = 102;
    TokenID$$1._map[103] = "Error";
    TokenID$$1.Error = 103;
    TokenID$$1._map[104] = "EndOfFile";
    TokenID$$1.EndOfFile = 104;
    TokenID$$1._map[105] = "EqualsGreaterThan";
    TokenID$$1.EqualsGreaterThan = 105;
    TokenID$$1._map[106] = "Identifier";
    TokenID$$1.Identifier = 106;
    TokenID$$1._map[107] = "StringLiteral";
    TokenID$$1.StringLiteral = 107;
    TokenID$$1._map[108] = "RegularExpressionLiteral";
    TokenID$$1.RegularExpressionLiteral = 108;
    TokenID$$1._map[109] = "NumberLiteral";
    TokenID$$1.NumberLiteral = 109;
    TokenID$$1._map[110] = "Whitespace";
    TokenID$$1.Whitespace = 110;
    TokenID$$1._map[111] = "Comment";
    TokenID$$1.Comment = 111;
    TokenID$$1._map[112] = "Lim";
    TokenID$$1.Lim = 112;
    TokenID$$1.LimFixed = TokenID$$1.EqualsGreaterThan;
    TokenID$$1.LimKeyword = TokenID$$1.Yield;
  })(TypeScript$$22.TokenID || (TypeScript$$22.TokenID = {}));
  var TokenID = TypeScript$$22.TokenID;
  TypeScript$$22.tokenTable = new Array;
  TypeScript$$22.nodeTypeTable = new Array;
  TypeScript$$22.nodeTypeToTokTable = new Array;
  TypeScript$$22.noRegexTable = new Array;
  TypeScript$$22.noRegexTable[TokenID.Identifier] = true;
  TypeScript$$22.noRegexTable[TokenID.StringLiteral] = true;
  TypeScript$$22.noRegexTable[TokenID.NumberLiteral] = true;
  TypeScript$$22.noRegexTable[TokenID.RegularExpressionLiteral] = true;
  TypeScript$$22.noRegexTable[TokenID.This] = true;
  TypeScript$$22.noRegexTable[TokenID.PlusPlus] = true;
  TypeScript$$22.noRegexTable[TokenID.MinusMinus] = true;
  TypeScript$$22.noRegexTable[TokenID.CloseParen] = true;
  TypeScript$$22.noRegexTable[TokenID.CloseBracket] = true;
  TypeScript$$22.noRegexTable[TokenID.CloseBrace] = true;
  TypeScript$$22.noRegexTable[TokenID.True] = true;
  TypeScript$$22.noRegexTable[TokenID.False] = true;
  (function(OperatorPrecedence$$1) {
    OperatorPrecedence$$1._map = [];
    OperatorPrecedence$$1._map[0] = "None";
    OperatorPrecedence$$1.None = 0;
    OperatorPrecedence$$1._map[1] = "Comma";
    OperatorPrecedence$$1.Comma = 1;
    OperatorPrecedence$$1._map[2] = "Assignment";
    OperatorPrecedence$$1.Assignment = 2;
    OperatorPrecedence$$1._map[3] = "Conditional";
    OperatorPrecedence$$1.Conditional = 3;
    OperatorPrecedence$$1._map[4] = "LogicalOr";
    OperatorPrecedence$$1.LogicalOr = 4;
    OperatorPrecedence$$1._map[5] = "LogicalAnd";
    OperatorPrecedence$$1.LogicalAnd = 5;
    OperatorPrecedence$$1._map[6] = "BitwiseOr";
    OperatorPrecedence$$1.BitwiseOr = 6;
    OperatorPrecedence$$1._map[7] = "BitwiseExclusiveOr";
    OperatorPrecedence$$1.BitwiseExclusiveOr = 7;
    OperatorPrecedence$$1._map[8] = "BitwiseAnd";
    OperatorPrecedence$$1.BitwiseAnd = 8;
    OperatorPrecedence$$1._map[9] = "Equality";
    OperatorPrecedence$$1.Equality = 9;
    OperatorPrecedence$$1._map[10] = "Relational";
    OperatorPrecedence$$1.Relational = 10;
    OperatorPrecedence$$1._map[11] = "Shift";
    OperatorPrecedence$$1.Shift = 11;
    OperatorPrecedence$$1._map[12] = "Additive";
    OperatorPrecedence$$1.Additive = 12;
    OperatorPrecedence$$1._map[13] = "Multiplicative";
    OperatorPrecedence$$1.Multiplicative = 13;
    OperatorPrecedence$$1._map[14] = "Unary";
    OperatorPrecedence$$1.Unary = 14;
    OperatorPrecedence$$1._map[15] = "Lim";
    OperatorPrecedence$$1.Lim = 15;
  })(TypeScript$$22.OperatorPrecedence || (TypeScript$$22.OperatorPrecedence = {}));
  var OperatorPrecedence = TypeScript$$22.OperatorPrecedence;
  (function(Reservation$$1) {
    Reservation$$1._map = [];
    Reservation$$1.None = 0;
    Reservation$$1.Javascript = 1;
    Reservation$$1.JavascriptFuture = 2;
    Reservation$$1.TypeScript = 4;
    Reservation$$1.JavascriptFutureStrict = 8;
    Reservation$$1.TypeScriptAndJS = Reservation$$1.Javascript | Reservation$$1.TypeScript;
    Reservation$$1.TypeScriptAndJSFuture = Reservation$$1.JavascriptFuture | Reservation$$1.TypeScript;
    Reservation$$1.TypeScriptAndJSFutureStrict = Reservation$$1.JavascriptFutureStrict | Reservation$$1.TypeScript;
  })(TypeScript$$22.Reservation || (TypeScript$$22.Reservation = {}));
  var Reservation = TypeScript$$22.Reservation;
  var TokenInfo = function() {
    function TokenInfo$$1(tokenId$$46, reservation$$1, binopPrecedence$$1, binopNodeType$$1, unopPrecedence$$1, unopNodeType$$1, text$$22, ers$$2) {
      this.tokenId = tokenId$$46;
      this.reservation = reservation$$1;
      this.binopPrecedence = binopPrecedence$$1;
      this.binopNodeType = binopNodeType$$1;
      this.unopPrecedence = unopPrecedence$$1;
      this.unopNodeType = unopNodeType$$1;
      this.text = text$$22;
      this.ers = ers$$2;
    }
    return TokenInfo$$1;
  }();
  TypeScript$$22.TokenInfo = TokenInfo;
  setTokenInfo(TokenID.Any, Reservation.TypeScript, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "any", TypeScript$$22.ErrorRecoverySet.PrimType);
  setTokenInfo(TokenID.Bool, Reservation.TypeScript, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "bool", TypeScript$$22.ErrorRecoverySet.PrimType);
  setTokenInfo(TokenID.Break, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "break", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.Case, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "case", TypeScript$$22.ErrorRecoverySet.SCase);
  setTokenInfo(TokenID.Catch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "catch", TypeScript$$22.ErrorRecoverySet.Catch);
  setTokenInfo(TokenID.Class, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "class", TypeScript$$22.ErrorRecoverySet.TypeScriptS);
  setTokenInfo(TokenID.Const, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "const", TypeScript$$22.ErrorRecoverySet.Var);
  setTokenInfo(TokenID.Continue, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "continue", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.Debugger, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.Debugger, "debugger", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.Default, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "default", TypeScript$$22.ErrorRecoverySet.SCase);
  setTokenInfo(TokenID.Delete, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.Unary, TypeScript$$22.NodeType.Delete, "delete", TypeScript$$22.ErrorRecoverySet.Prefix);
  setTokenInfo(TokenID.Do, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "do", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.Else, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "else", TypeScript$$22.ErrorRecoverySet.Else);
  setTokenInfo(TokenID.Enum, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "enum", TypeScript$$22.ErrorRecoverySet.TypeScriptS);
  setTokenInfo(TokenID.Export, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "export", TypeScript$$22.ErrorRecoverySet.TypeScriptS);
  setTokenInfo(TokenID.Extends, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "extends", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.Declare, Reservation.TypeScript, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "declare", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.False, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "false", TypeScript$$22.ErrorRecoverySet.RLit);
  setTokenInfo(TokenID.Finally, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "finally", TypeScript$$22.ErrorRecoverySet.Catch);
  setTokenInfo(TokenID.For, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "for", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.Function, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "function", TypeScript$$22.ErrorRecoverySet.Func);
  setTokenInfo(TokenID.Constructor, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "constructor", TypeScript$$22.ErrorRecoverySet.Func);
  setTokenInfo(TokenID.Get, Reservation.TypeScript, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "get", TypeScript$$22.ErrorRecoverySet.Func);
  setTokenInfo(TokenID.Set, Reservation.TypeScript, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "set", TypeScript$$22.ErrorRecoverySet.Func);
  setTokenInfo(TokenID.If, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "if", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.Implements, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "implements", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.Import, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "import", TypeScript$$22.ErrorRecoverySet.TypeScriptS);
  setTokenInfo(TokenID.In, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, TypeScript$$22.NodeType.In, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "in", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.InstanceOf, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, TypeScript$$22.NodeType.InstOf, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "instanceof", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Interface, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "interface", TypeScript$$22.ErrorRecoverySet.TypeScriptS);
  setTokenInfo(TokenID.Let, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "let", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.Module, Reservation.TypeScript, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "module", TypeScript$$22.ErrorRecoverySet.TypeScriptS);
  setTokenInfo(TokenID.New, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "new", TypeScript$$22.ErrorRecoverySet.PreOp);
  setTokenInfo(TokenID.Number, Reservation.TypeScript, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "number", TypeScript$$22.ErrorRecoverySet.PrimType);
  setTokenInfo(TokenID.Null, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "null", TypeScript$$22.ErrorRecoverySet.RLit);
  setTokenInfo(TokenID.Package, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "package", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.Private, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "private", TypeScript$$22.ErrorRecoverySet.TypeScriptS);
  setTokenInfo(TokenID.Protected, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "protected", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.Public, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "public", TypeScript$$22.ErrorRecoverySet.TypeScriptS);
  setTokenInfo(TokenID.Return, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "return", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.Static, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "static", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.String, Reservation.TypeScript, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "string", TypeScript$$22.ErrorRecoverySet.PrimType);
  setTokenInfo(TokenID.Super, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "super", TypeScript$$22.ErrorRecoverySet.RLit);
  setTokenInfo(TokenID.Switch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "switch", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.This, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "this", TypeScript$$22.ErrorRecoverySet.RLit);
  setTokenInfo(TokenID.Throw, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "throw", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.True, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "true", TypeScript$$22.ErrorRecoverySet.RLit);
  setTokenInfo(TokenID.Try, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "try", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.TypeOf, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.Unary, TypeScript$$22.NodeType.Typeof, "typeof", TypeScript$$22.ErrorRecoverySet.Prefix);
  setTokenInfo(TokenID.Var, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "var", TypeScript$$22.ErrorRecoverySet.Var);
  setTokenInfo(TokenID.Void, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.Unary, TypeScript$$22.NodeType.Void, "void", TypeScript$$22.ErrorRecoverySet.Prefix);
  setTokenInfo(TokenID.With, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.With, "with", TypeScript$$22.ErrorRecoverySet.Stmt);
  setTokenInfo(TokenID.While, Reservation.TypeScriptAndJS, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "while", TypeScript$$22.ErrorRecoverySet.While);
  setTokenInfo(TokenID.Yield, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "yield", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.Identifier, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "identifier", TypeScript$$22.ErrorRecoverySet.ID);
  setTokenInfo(TokenID.NumberLiteral, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "numberLiteral", TypeScript$$22.ErrorRecoverySet.Literal);
  setTokenInfo(TokenID.RegularExpressionLiteral, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "regex", TypeScript$$22.ErrorRecoverySet.RegExp);
  setTokenInfo(TokenID.StringLiteral, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "qstring", TypeScript$$22.ErrorRecoverySet.Literal);
  setTokenInfo(TokenID.Semicolon, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ";", TypeScript$$22.ErrorRecoverySet.SColon);
  setTokenInfo(TokenID.CloseParen, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ")", TypeScript$$22.ErrorRecoverySet.RParen);
  setTokenInfo(TokenID.CloseBracket, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "]", TypeScript$$22.ErrorRecoverySet.RBrack);
  setTokenInfo(TokenID.OpenBrace, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "{", TypeScript$$22.ErrorRecoverySet.LCurly);
  setTokenInfo(TokenID.CloseBrace, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "}", TypeScript$$22.ErrorRecoverySet.RCurly);
  setTokenInfo(TokenID.DotDotDot, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "...", TypeScript$$22.ErrorRecoverySet.None);
  setTokenInfo(TokenID.Comma, Reservation.None, OperatorPrecedence.Comma, TypeScript$$22.NodeType.Comma, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ",", TypeScript$$22.ErrorRecoverySet.Comma);
  setTokenInfo(TokenID.Equals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.Asg, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "=", TypeScript$$22.ErrorRecoverySet.Asg);
  setTokenInfo(TokenID.PlusEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgAdd, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "+=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.MinusEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgSub, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "-=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.AsteriskEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgMul, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "*=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.SlashEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgDiv, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "/=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.PercentEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgMod, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "%=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.AmpersandEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgAnd, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "&=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.CaretEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgXor, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "^=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.BarEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgOr, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "|=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.LessThanLessThanEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgLsh, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "<<=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.GreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgRsh, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ">>=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, TypeScript$$22.NodeType.AsgRs2, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ">>>=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Question, Reservation.None, OperatorPrecedence.Conditional, TypeScript$$22.NodeType.ConditionalExpression, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "?", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Colon, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ":", TypeScript$$22.ErrorRecoverySet.Colon);
  setTokenInfo(TokenID.BarBar, Reservation.None, OperatorPrecedence.LogicalOr, TypeScript$$22.NodeType.LogOr, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "||", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.AmpersandAmpersand, Reservation.None, OperatorPrecedence.LogicalAnd, TypeScript$$22.NodeType.LogAnd, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "&&", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Bar, Reservation.None, OperatorPrecedence.BitwiseOr, TypeScript$$22.NodeType.Or, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "|", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Caret, Reservation.None, OperatorPrecedence.BitwiseExclusiveOr, TypeScript$$22.NodeType.Xor, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "^", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.And, Reservation.None, OperatorPrecedence.BitwiseAnd, TypeScript$$22.NodeType.And, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "&", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.EqualsEquals, Reservation.None, OperatorPrecedence.Equality, TypeScript$$22.NodeType.Eq, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "==", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.ExclamationEquals, Reservation.None, OperatorPrecedence.Equality, TypeScript$$22.NodeType.Ne, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "!=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.EqualsEqualsEquals, Reservation.None, OperatorPrecedence.Equality, TypeScript$$22.NodeType.Eqv, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "===", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.ExclamationEqualsEquals, Reservation.None, OperatorPrecedence.Equality, TypeScript$$22.NodeType.NEqv, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "!==", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.LessThan, Reservation.None, OperatorPrecedence.Relational, TypeScript$$22.NodeType.Lt, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "<", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.LessThanEquals, Reservation.None, OperatorPrecedence.Relational, TypeScript$$22.NodeType.Le, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "<=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.GreaterThan, Reservation.None, OperatorPrecedence.Relational, TypeScript$$22.NodeType.Gt, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ">", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.GreaterThanEquals, Reservation.None, OperatorPrecedence.Relational, TypeScript$$22.NodeType.Ge, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ">=", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.LessThanLessThan, Reservation.None, OperatorPrecedence.Shift, TypeScript$$22.NodeType.Lsh, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "<<", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.GreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, TypeScript$$22.NodeType.Rsh, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ">>", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, TypeScript$$22.NodeType.Rs2, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ">>>", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Plus, Reservation.None, OperatorPrecedence.Additive, TypeScript$$22.NodeType.Add, OperatorPrecedence.Unary, TypeScript$$22.NodeType.Pos, "+", TypeScript$$22.ErrorRecoverySet.AddOp);
  setTokenInfo(TokenID.Minus, Reservation.None, OperatorPrecedence.Additive, TypeScript$$22.NodeType.Sub, OperatorPrecedence.Unary, TypeScript$$22.NodeType.Neg, "-", TypeScript$$22.ErrorRecoverySet.AddOp);
  setTokenInfo(TokenID.Asterisk, Reservation.None, OperatorPrecedence.Multiplicative, TypeScript$$22.NodeType.Mul, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "*", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Slash, Reservation.None, OperatorPrecedence.Multiplicative, TypeScript$$22.NodeType.Div, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "/", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Percent, Reservation.None, OperatorPrecedence.Multiplicative, TypeScript$$22.NodeType.Mod, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "%", TypeScript$$22.ErrorRecoverySet.BinOp);
  setTokenInfo(TokenID.Tilde, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.Unary, TypeScript$$22.NodeType.Not, "~", TypeScript$$22.ErrorRecoverySet.PreOp);
  setTokenInfo(TokenID.Exclamation, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.Unary, TypeScript$$22.NodeType.LogNot, "!", TypeScript$$22.ErrorRecoverySet.PreOp);
  setTokenInfo(TokenID.PlusPlus, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.Unary, TypeScript$$22.NodeType.IncPre, "++", TypeScript$$22.ErrorRecoverySet.PreOp);
  setTokenInfo(TokenID.MinusMinus, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.Unary, TypeScript$$22.NodeType.DecPre, "--", TypeScript$$22.ErrorRecoverySet.PreOp);
  setTokenInfo(TokenID.OpenParen, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "(", TypeScript$$22.ErrorRecoverySet.LParen);
  setTokenInfo(TokenID.OpenBracket, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "[", TypeScript$$22.ErrorRecoverySet.LBrack);
  setTokenInfo(TokenID.Dot, Reservation.None, OperatorPrecedence.Unary, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, ".", TypeScript$$22.ErrorRecoverySet.Dot);
  setTokenInfo(TokenID.EndOfFile, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "<EOF>", TypeScript$$22.ErrorRecoverySet.EOF);
  setTokenInfo(TokenID.EqualsGreaterThan, Reservation.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, OperatorPrecedence.None, TypeScript$$22.NodeType.None, "=>", TypeScript$$22.ErrorRecoverySet.None);
  TypeScript$$22.lookupToken = lookupToken;
  (function(TokenClass$$1) {
    TokenClass$$1._map = [];
    TokenClass$$1._map[0] = "Punctuation";
    TokenClass$$1.Punctuation = 0;
    TokenClass$$1._map[1] = "Keyword";
    TokenClass$$1.Keyword = 1;
    TokenClass$$1._map[2] = "Operator";
    TokenClass$$1.Operator = 2;
    TokenClass$$1._map[3] = "Comment";
    TokenClass$$1.Comment = 3;
    TokenClass$$1._map[4] = "Whitespace";
    TokenClass$$1.Whitespace = 4;
    TokenClass$$1._map[5] = "Identifier";
    TokenClass$$1.Identifier = 5;
    TokenClass$$1._map[6] = "NumberLiteral";
    TokenClass$$1.NumberLiteral = 6;
    TokenClass$$1._map[7] = "StringLiteral";
    TokenClass$$1.StringLiteral = 7;
    TokenClass$$1._map[8] = "RegExpLiteral";
    TokenClass$$1.RegExpLiteral = 8;
  })(TypeScript$$22.TokenClass || (TypeScript$$22.TokenClass = {}));
  var TokenClass = TypeScript$$22.TokenClass;
  var SavedToken = function() {
    function SavedToken$$1(tok$$4, minChar$$32, limChar$$11) {
      this.tok = tok$$4;
      this.minChar = minChar$$32;
      this.limChar = limChar$$11;
    }
    return SavedToken$$1;
  }();
  TypeScript$$22.SavedToken = SavedToken;
  var Token = function() {
    function Token$$1(tokenId$$47) {
      this.tokenId = tokenId$$47;
    }
    Token$$1.prototype.toString = function() {
      return "token: " + this.tokenId + " " + this.getText() + " (" + TokenID._map[this.tokenId] + ")";
    };
    Token$$1.prototype.print = function(line$$10, outfile$$11) {
      outfile$$11.WriteLine(this.toString() + ",on line" + line$$10);
    };
    Token$$1.prototype.getText = function() {
      return TypeScript$$22.tokenTable[this.tokenId].text;
    };
    Token$$1.prototype.classification = function() {
      if (this.tokenId <= TokenID.LimKeyword) {
        return TokenClass.Keyword;
      } else {
        var tokenInfo$$2 = lookupToken(this.tokenId);
        if (tokenInfo$$2 != undefined) {
          if (tokenInfo$$2.unopNodeType != TypeScript$$22.NodeType.None || tokenInfo$$2.binopNodeType != TypeScript$$22.NodeType.None) {
            return TokenClass.Operator;
          }
        }
      }
      return TokenClass.Punctuation;
    };
    return Token$$1;
  }();
  TypeScript$$22.Token = Token;
  var NumberLiteralToken = function(_super$$59) {
    function NumberLiteralToken$$1(value$$35, hasEmptyFraction$$1) {
      _super$$59.call(this, TokenID.NumberLiteral);
      this.value = value$$35;
      this.hasEmptyFraction = hasEmptyFraction$$1;
    }
    __extends(NumberLiteralToken$$1, _super$$59);
    NumberLiteralToken$$1.prototype.getText = function() {
      return this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString();
    };
    NumberLiteralToken$$1.prototype.classification = function() {
      return TokenClass.NumberLiteral;
    };
    return NumberLiteralToken$$1;
  }(Token);
  TypeScript$$22.NumberLiteralToken = NumberLiteralToken;
  var StringLiteralToken = function(_super$$60) {
    function StringLiteralToken$$1(value$$36) {
      _super$$60.call(this, TokenID.StringLiteral);
      this.value = value$$36;
    }
    __extends(StringLiteralToken$$1, _super$$60);
    StringLiteralToken$$1.prototype.getText = function() {
      return this.value;
    };
    StringLiteralToken$$1.prototype.classification = function() {
      return TokenClass.StringLiteral;
    };
    return StringLiteralToken$$1;
  }(Token);
  TypeScript$$22.StringLiteralToken = StringLiteralToken;
  var IdentifierToken = function(_super$$61) {
    function IdentifierToken$$1(value$$37, hasEscapeSequence$$3) {
      _super$$61.call(this, TokenID.Identifier);
      this.value = value$$37;
      this.hasEscapeSequence = hasEscapeSequence$$3;
    }
    __extends(IdentifierToken$$1, _super$$61);
    IdentifierToken$$1.prototype.getText = function() {
      return this.value;
    };
    IdentifierToken$$1.prototype.classification = function() {
      return TokenClass.Identifier;
    };
    return IdentifierToken$$1;
  }(Token);
  TypeScript$$22.IdentifierToken = IdentifierToken;
  var WhitespaceToken = function(_super$$62) {
    function WhitespaceToken$$1(tokenId$$48, value$$38) {
      _super$$62.call(this, tokenId$$48);
      this.value = value$$38;
    }
    __extends(WhitespaceToken$$1, _super$$62);
    WhitespaceToken$$1.prototype.getText = function() {
      return this.value;
    };
    WhitespaceToken$$1.prototype.classification = function() {
      return TokenClass.Whitespace;
    };
    return WhitespaceToken$$1;
  }(Token);
  TypeScript$$22.WhitespaceToken = WhitespaceToken;
  var CommentToken = function(_super$$63) {
    function CommentToken$$1(tokenID, value$$39, isBlock, startPos$$2, line$$11, endsLine$$2) {
      _super$$63.call(this, tokenID);
      this.value = value$$39;
      this.isBlock = isBlock;
      this.startPos = startPos$$2;
      this.line = line$$11;
      this.endsLine = endsLine$$2;
    }
    __extends(CommentToken$$1, _super$$63);
    CommentToken$$1.prototype.getText = function() {
      return this.value;
    };
    CommentToken$$1.prototype.classification = function() {
      return TokenClass.Comment;
    };
    return CommentToken$$1;
  }(Token);
  TypeScript$$22.CommentToken = CommentToken;
  var RegularExpressionLiteralToken = function(_super$$64) {
    function RegularExpressionLiteralToken$$1(regex$$3) {
      _super$$64.call(this, TokenID.RegularExpressionLiteral);
      this.regex = regex$$3;
    }
    __extends(RegularExpressionLiteralToken$$1, _super$$64);
    RegularExpressionLiteralToken$$1.prototype.getText = function() {
      return this.regex.toString();
    };
    RegularExpressionLiteralToken$$1.prototype.classification = function() {
      return TokenClass.RegExpLiteral;
    };
    return RegularExpressionLiteralToken$$1;
  }(Token);
  TypeScript$$22.RegularExpressionLiteralToken = RegularExpressionLiteralToken;
  TypeScript$$22.staticTokens = new Array;
  TypeScript$$22.initializeStaticTokens = initializeStaticTokens;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$23) {
  var ArrayCache = function() {
    function ArrayCache$$1() {
      this.arrayBase = null;
    }
    ArrayCache$$1.prototype.specialize = function(arrInstType, checker$$15) {
      if (this.arrayBase == null) {
        this.arrayBase = arrInstType.specializeType(checker$$15.wildElm.type, this.arrayType.elementType, checker$$15, true);
      }
      return this.arrayBase;
    };
    return ArrayCache$$1;
  }();
  TypeScript$$23.ArrayCache = ArrayCache;
  var TypeComparisonInfo = function() {
    function TypeComparisonInfo$$1() {
      this.onlyCaptureFirstError = false;
      this.flags = TypeScript$$23.TypeRelationshipFlags.SuccessfulComparison;
      this.message = "";
    }
    TypeComparisonInfo$$1.prototype.addMessageToFront = function(message$$17) {
      if (!this.onlyCaptureFirstError) {
        this.message = this.message ? message$$17 + ":\n\t" + this.message : message$$17;
      } else {
        this.setMessage(message$$17);
      }
    };
    TypeComparisonInfo$$1.prototype.setMessage = function(message$$18) {
      this.message = message$$18;
    };
    return TypeComparisonInfo$$1;
  }();
  TypeScript$$23.TypeComparisonInfo = TypeComparisonInfo;
  (function(TypeCheckCollectionMode$$1) {
    TypeCheckCollectionMode$$1._map = [];
    TypeCheckCollectionMode$$1._map[0] = "Resident";
    TypeCheckCollectionMode$$1.Resident = 0;
    TypeCheckCollectionMode$$1._map[1] = "Transient";
    TypeCheckCollectionMode$$1.Transient = 1;
  })(TypeScript$$23.TypeCheckCollectionMode || (TypeScript$$23.TypeCheckCollectionMode = {}));
  var TypeCheckCollectionMode = TypeScript$$23.TypeCheckCollectionMode;
  var PersistentGlobalTypeState = function() {
    function PersistentGlobalTypeState$$1(errorReporter$$4) {
      this.errorReporter = errorReporter$$4;
      this.importedGlobalsTable = new TypeScript$$23.ScopedMembers(new TypeScript$$23.DualStringHashTable(new TypeScript$$23.StringHashTable, new TypeScript$$23.StringHashTable));
      this.importedGlobalsTypeTable = new TypeScript$$23.ScopedMembers(new TypeScript$$23.DualStringHashTable(new TypeScript$$23.StringHashTable, new TypeScript$$23.StringHashTable));
      this.globals = null;
      this.globalTypes = null;
      this.ambientGlobals = null;
      this.ambientGlobalTypes = null;
      this.residentGlobalValues = new TypeScript$$23.StringHashTable;
      this.residentGlobalTypes = new TypeScript$$23.StringHashTable;
      this.residentGlobalAmbientValues = new TypeScript$$23.StringHashTable;
      this.residentGlobalAmbientTypes = new TypeScript$$23.StringHashTable;
      this.residentTypeCheck = true;
      this.mod = null;
      this.gloMod = null;
      this.wildElm = null;
      this.importedGlobals = new TypeScript$$23.SymbolScopeBuilder(null, this.importedGlobalsTable, null, this.importedGlobalsTypeTable, null, null);
      this.dualGlobalValues = new TypeScript$$23.DualStringHashTable(this.residentGlobalValues, new TypeScript$$23.StringHashTable);
      this.dualGlobalTypes = new TypeScript$$23.DualStringHashTable(this.residentGlobalTypes, new TypeScript$$23.StringHashTable);
      this.dualAmbientGlobalValues = new TypeScript$$23.DualStringHashTable(this.residentGlobalAmbientValues, new TypeScript$$23.StringHashTable);
      this.dualAmbientGlobalTypes = new TypeScript$$23.DualStringHashTable(this.residentGlobalAmbientTypes, new TypeScript$$23.StringHashTable);
      var dualGlobalScopedMembers = new TypeScript$$23.ScopedMembers(new TypeScript$$23.DualStringHashTable(this.dualGlobalValues, new TypeScript$$23.StringHashTable));
      var dualGlobalScopedAmbientMembers = new TypeScript$$23.ScopedMembers(new TypeScript$$23.DualStringHashTable(this.dualAmbientGlobalValues, new TypeScript$$23.StringHashTable));
      var dualGlobalScopedEnclosedTypes = new TypeScript$$23.ScopedMembers(new TypeScript$$23.DualStringHashTable(this.dualGlobalTypes, new TypeScript$$23.StringHashTable));
      var dualGlobalScopedAmbientEnclosedTypes = new TypeScript$$23.ScopedMembers(new TypeScript$$23.DualStringHashTable(this.dualAmbientGlobalTypes, new TypeScript$$23.StringHashTable));
      this.globalScope = new TypeScript$$23.SymbolScopeBuilder(dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, this.importedGlobals, null);
      this.voidType = this.enterPrimitive(TypeScript$$23.Primitive.Void, "void");
      this.booleanType = this.enterPrimitive(TypeScript$$23.Primitive.Boolean, "bool");
      this.doubleType = this.enterPrimitive(TypeScript$$23.Primitive.Double, "number");
      this.importedGlobals.ambientEnclosedTypes.addPublicMember("number", this.doubleType.symbol);
      this.stringType = this.enterPrimitive(TypeScript$$23.Primitive.String, "string");
      this.anyType = this.enterPrimitive(TypeScript$$23.Primitive.Any, "any");
      this.nullType = this.enterPrimitive(TypeScript$$23.Primitive.Null, "null");
      this.undefinedType = this.enterPrimitive(TypeScript$$23.Primitive.Undefined, "undefined");
      this.setCollectionMode(TypeCheckCollectionMode.Resident);
      this.wildElm = new TypeScript$$23.TypeSymbol("_element", -1, 0, -1, new TypeScript$$23.Type);
      this.importedGlobalsTypeTable.addPublicMember(this.wildElm.name, this.wildElm);
      this.mod = new TypeScript$$23.ModuleType(dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes);
      this.mod.members = dualGlobalScopedMembers;
      this.mod.ambientMembers = dualGlobalScopedAmbientMembers;
      this.mod.containedScope = this.globalScope;
      this.gloMod = new TypeScript$$23.TypeSymbol(TypeScript$$23.globalId, -1, 0, -1, this.mod);
      this.mod.members.addPublicMember(this.gloMod.name, this.gloMod);
      this.defineGlobalValue("undefined", this.undefinedType);
    }
    PersistentGlobalTypeState$$1.prototype.enterPrimitive = function(flags$$3, name$$79) {
      var primitive = new TypeScript$$23.Type;
      primitive.primitiveTypeClass = flags$$3;
      var symbol$$8 = new TypeScript$$23.TypeSymbol(name$$79, -1, name$$79.length, -1, primitive);
      symbol$$8.typeCheckStatus = TypeScript$$23.TypeCheckStatus.Finished;
      primitive.symbol = symbol$$8;
      this.importedGlobals.enter(null, null, symbol$$8, this.errorReporter, true, true, true);
      return primitive;
    };
    PersistentGlobalTypeState$$1.prototype.setCollectionMode = function(mode$$7) {
      this.residentTypeCheck = this.dualGlobalValues.insertPrimary = this.dualGlobalTypes.insertPrimary = this.dualAmbientGlobalValues.insertPrimary = this.dualAmbientGlobalTypes.insertPrimary = mode$$7 == TypeCheckCollectionMode.Resident;
    };
    PersistentGlobalTypeState$$1.prototype.refreshPersistentState = function() {
      this.globals = new TypeScript$$23.StringHashTable;
      this.globalTypes = new TypeScript$$23.StringHashTable;
      this.ambientGlobals = new TypeScript$$23.StringHashTable;
      this.ambientGlobalTypes = new TypeScript$$23.StringHashTable;
      this.globalTypes.add(this.voidType.symbol.name, this.voidType.symbol);
      this.globalTypes.add(this.booleanType.symbol.name, this.booleanType.symbol);
      this.globalTypes.add(this.doubleType.symbol.name, this.doubleType.symbol);
      this.globalTypes.add("number", this.doubleType.symbol);
      this.globalTypes.add(this.stringType.symbol.name, this.stringType.symbol);
      this.globalTypes.add(this.anyType.symbol.name, this.anyType.symbol);
      this.globalTypes.add(this.nullType.symbol.name, this.nullType.symbol);
      this.globalTypes.add(this.undefinedType.symbol.name, this.undefinedType.symbol);
      this.dualGlobalValues.secondaryTable = this.globals;
      this.dualGlobalTypes.secondaryTable = this.globalTypes;
      this.dualAmbientGlobalValues.secondaryTable = this.ambientGlobals;
      this.dualAmbientGlobalTypes.secondaryTable = this.ambientGlobalTypes;
    };
    PersistentGlobalTypeState$$1.prototype.defineGlobalValue = function(name$$80, type$$37) {
      var valueLocation = new TypeScript$$23.ValueLocation;
      valueLocation.typeLink = new TypeScript$$23.TypeLink;
      var sym$$28 = new TypeScript$$23.VariableSymbol(name$$80, 0, -1, valueLocation);
      sym$$28.setType(type$$37);
      sym$$28.typeCheckStatus = TypeScript$$23.TypeCheckStatus.Finished;
      sym$$28.container = this.gloMod;
      this.importedGlobalsTable.addPublicMember(name$$80, sym$$28);
    };
    return PersistentGlobalTypeState$$1;
  }();
  TypeScript$$23.PersistentGlobalTypeState = PersistentGlobalTypeState;
  var ContextualTypeContext = function() {
    function ContextualTypeContext$$1(contextualType, provisional, contextID) {
      this.contextualType = contextualType;
      this.provisional = provisional;
      this.contextID = contextID;
      this.targetSig = null;
      this.targetThis = null;
      this.targetAccessorType = null;
    }
    return ContextualTypeContext$$1;
  }();
  TypeScript$$23.ContextualTypeContext = ContextualTypeContext;
  var ContextualTypingContextStack = function() {
    function ContextualTypingContextStack$$1(checker$$16) {
      this.checker = checker$$16;
      this.contextStack = [];
      this.hadProvisionalErrors = false;
    }
    ContextualTypingContextStack$$1.contextID = TypeScript$$23.TypeCheckStatus.Finished + 1;
    ContextualTypingContextStack$$1.prototype.pushContextualType = function(type$$38, provisional$$1) {
      this.contextStack.push(new ContextualTypeContext(type$$38, provisional$$1, ContextualTypingContextStack$$1.contextID++));
      this.checker.errorReporter.pushToErrorSink = provisional$$1;
    };
    ContextualTypingContextStack$$1.prototype.popContextualType = function() {
      var tc$$2 = this.contextStack.pop();
      this.checker.errorReporter.pushToErrorSink = this.isProvisional();
      this.hadProvisionalErrors = this.hadProvisionalErrors || tc$$2.provisional && this.checker.errorReporter.getCapturedErrors().length;
      this.checker.errorReporter.freeCapturedErrors();
      return tc$$2;
    };
    ContextualTypingContextStack$$1.prototype.getContextualType = function() {
      return!this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1];
    };
    ContextualTypingContextStack$$1.prototype.getContextID = function() {
      return!this.contextStack.length ? TypeScript$$23.TypeCheckStatus.Finished : this.contextStack[this.contextStack.length - 1].contextID;
    };
    ContextualTypingContextStack$$1.prototype.isProvisional = function() {
      return!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional;
    };
    return ContextualTypingContextStack$$1;
  }();
  TypeScript$$23.ContextualTypingContextStack = ContextualTypingContextStack;
  var TypeChecker = function() {
    function TypeChecker$$1(persistentState) {
      this.persistentState = persistentState;
      this.errorReporter = null;
      this.checkControlFlow = false;
      this.printControlFlowGraph = false;
      this.checkControlFlowUseDef = false;
      this.styleSettings = null;
      this.units = null;
      this.anon = "_anonymous";
      this.locationInfo = null;
      this.typeFlow = null;
      this.currentCompareA = null;
      this.currentCompareB = null;
      this.currentModDecl = null;
      this.inBind = false;
      this.inWith = false;
      this.errorsOnWith = true;
      this.currentContextualTypeContext = null;
      this.resolvingBases = false;
      this.canCallDefinitionSignature = false;
      this.assignableCache = {};
      this.subtypeCache = {};
      this.identicalCache = {};
      this.provisionalStartedTypecheckObjects = [];
      this.mustCaptureGlobalThis = false;
      this.voidType = this.persistentState.voidType;
      this.booleanType = this.persistentState.booleanType;
      this.numberType = this.persistentState.doubleType;
      this.stringType = this.persistentState.stringType;
      this.anyType = this.persistentState.anyType;
      this.nullType = this.persistentState.nullType;
      this.undefinedType = this.persistentState.undefinedType;
      this.globals = this.persistentState.dualGlobalValues;
      this.globalTypes = this.persistentState.dualGlobalTypes;
      this.ambientGlobals = this.persistentState.dualAmbientGlobalValues;
      this.ambientGlobalTypes = this.persistentState.dualAmbientGlobalTypes;
      this.gloModType = this.persistentState.mod;
      this.gloMod = this.persistentState.gloMod;
      this.wildElm = this.persistentState.wildElm;
      this.globalScope = this.persistentState.globalScope;
      this.typingContextStack = new ContextualTypingContextStack(this);
    }
    TypeChecker$$1.prototype.setStyleOptions = function(style) {
      this.styleSettings = style;
    };
    TypeChecker$$1.prototype.setContextualType = function(type$$39, provisional$$2) {
      this.typingContextStack.pushContextualType(type$$39, provisional$$2);
      this.currentContextualTypeContext = this.typingContextStack.getContextualType();
    };
    TypeChecker$$1.prototype.unsetContextualType = function() {
      var lastTC = this.typingContextStack.popContextualType();
      this.currentContextualTypeContext = this.typingContextStack.getContextualType();
      return lastTC;
    };
    TypeChecker$$1.prototype.hadProvisionalErrors = function() {
      return this.typingContextStack.hadProvisionalErrors;
    };
    TypeChecker$$1.prototype.resetProvisionalErrors = function() {
      if (!this.typingContextStack.getContextualType()) {
        this.typingContextStack.hadProvisionalErrors = false;
      }
    };
    TypeChecker$$1.prototype.typeCheckWithContextualType = function(contextType, provisional$$3, condition, ast$$62) {
      if (condition) {
        this.setContextualType(contextType, this.typingContextStack.isProvisional() || provisional$$3);
      }
      this.typeFlow.typeCheck(ast$$62);
      if (condition) {
        this.unsetContextualType();
      }
    };
    TypeChecker$$1.prototype.resetTargetType = function() {
      this.currentContextualTypeContext = this.typingContextStack.getContextualType();
    };
    TypeChecker$$1.prototype.killCurrentContextualType = function() {
      this.currentContextualTypeContext = null;
      this.errorReporter.pushToErrorSink = false;
    };
    TypeChecker$$1.prototype.hasTargetType = function() {
      return this.currentContextualTypeContext && this.currentContextualTypeContext.contextualType;
    };
    TypeChecker$$1.prototype.getTargetTypeContext = function() {
      return this.currentContextualTypeContext;
    };
    TypeChecker$$1.prototype.inProvisionalTypecheckMode = function() {
      return this.typingContextStack.isProvisional();
    };
    TypeChecker$$1.prototype.getTypeCheckFinishedStatus = function() {
      if (this.inProvisionalTypecheckMode()) {
        return this.typingContextStack.getContextID();
      }
      return TypeScript$$23.TypeCheckStatus.Finished;
    };
    TypeChecker$$1.prototype.typeStatusIsFinished = function(status) {
      return status == TypeScript$$23.TypeCheckStatus.Finished || this.inProvisionalTypecheckMode() && status == this.typingContextStack.getContextID();
    };
    TypeChecker$$1.prototype.addStartedPTO = function(pto) {
      if (this.inProvisionalTypecheckMode()) {
        this.provisionalStartedTypecheckObjects[this.provisionalStartedTypecheckObjects.length] = pto;
      }
    };
    TypeChecker$$1.prototype.cleanStartedPTO = function() {
      var i$$74 = 0;
      for (;i$$74 < this.provisionalStartedTypecheckObjects.length;i$$74++) {
        if (this.provisionalStartedTypecheckObjects[i$$74].typeCheckStatus >= this.typingContextStack.getContextID()) {
          this.provisionalStartedTypecheckObjects[i$$74].typeCheckStatus = TypeScript$$23.TypeCheckStatus.NotStarted;
        }
      }
      this.provisionalStartedTypecheckObjects = [];
    };
    TypeChecker$$1.prototype.collectTypes = function(ast$$63) {
      if (ast$$63.nodeType == TypeScript$$23.NodeType.Script) {
        var script$$14 = ast$$63;
        this.locationInfo = script$$14.locationInfo;
      }
      var globalChain = new TypeScript$$23.ScopeChain(this.gloMod, null, this.globalScope);
      var context$$49 = new TypeScript$$23.TypeCollectionContext(globalChain, this);
      TypeScript$$23.getAstWalkerFactory().walk(ast$$63, TypeScript$$23.preCollectTypes, TypeScript$$23.postCollectTypes, null, context$$49);
    };
    TypeChecker$$1.prototype.makeArrayType = function(type$$40) {
      if (type$$40.arrayCache == null) {
        type$$40.arrayCache = new ArrayCache;
        type$$40.arrayCache.arrayType = new TypeScript$$23.Type;
        type$$40.arrayCache.arrayType.elementType = type$$40;
        type$$40.arrayCache.arrayType.symbol = type$$40.symbol;
      }
      return type$$40.arrayCache.arrayType;
    };
    TypeChecker$$1.prototype.getParameterList = function(funcDecl$$16, container$$11) {
      var args$$11 = funcDecl$$16.arguments;
      var parameterTable = null;
      var parameterBuilder = null;
      var len$$25 = args$$11.members.length;
      var nonOptionalParams = 0;
      var result$$27 = [];
      if (len$$25 > 0) {
        parameterTable = new TypeScript$$23.ScopedMembers(new TypeScript$$23.DualStringHashTable(new TypeScript$$23.StringHashTable, new TypeScript$$23.StringHashTable));
        parameterBuilder = new TypeScript$$23.SymbolScopeBuilder(parameterTable, null, null, null, null, container$$11);
        var i$$75 = 0;
        for (;i$$75 < len$$25;i$$75++) {
          var parameter$$1 = args$$11.members[i$$75];
          var paramDef$$2 = new TypeScript$$23.ValueLocation;
          var parameterSymbol = new TypeScript$$23.ParameterSymbol(parameter$$1.id.text, parameter$$1.minChar, this.locationInfo.unitIndex, paramDef$$2);
          parameterSymbol.declAST = parameter$$1;
          parameterSymbol.funcDecl = funcDecl$$16;
          parameter$$1.id.sym = parameterSymbol;
          parameter$$1.sym = parameterSymbol;
          paramDef$$2.symbol = parameterSymbol;
          paramDef$$2.typeLink = TypeScript$$23.getTypeLink(parameter$$1.typeExpr, this, false);
          parameterBuilder.enter(null, parameter$$1, parameterSymbol, this.errorReporter, true, false, false);
          result$$27[result$$27.length] = parameterSymbol;
          if (!parameter$$1.isOptionalArg()) {
            nonOptionalParams++;
          }
        }
      }
      return{parameters:result$$27, nonOptionalParameterCount:nonOptionalParams};
    };
    TypeChecker$$1.prototype.createFunctionSignature = function(funcDecl$$17, container$$12, scope$$22, overloadGroupSym, addToScope) {
      var isExported$$1 = TypeScript$$23.hasFlag(funcDecl$$17.fncFlags, TypeScript$$23.FncFlags.Exported | TypeScript$$23.FncFlags.ClassPropertyMethodExported) || container$$12 == this.gloMod;
      var isStatic$$6 = TypeScript$$23.hasFlag(funcDecl$$17.fncFlags, TypeScript$$23.FncFlags.Static);
      var isPrivate = TypeScript$$23.hasFlag(funcDecl$$17.fncFlags, TypeScript$$23.FncFlags.Private);
      var isDefinition = TypeScript$$23.hasFlag(funcDecl$$17.fncFlags, TypeScript$$23.FncFlags.Definition);
      var isAmbient$$4 = TypeScript$$23.hasFlag(funcDecl$$17.fncFlags, TypeScript$$23.FncFlags.Ambient);
      var isConstructor$$2 = funcDecl$$17.isConstructMember() || funcDecl$$17.isConstructor;
      var isGlobal = container$$12 == this.gloMod;
      var signature$$3 = new TypeScript$$23.Signature;
      var isLambda$$2 = funcDecl$$17.fncFlags & TypeScript$$23.FncFlags.IsFunctionExpression;
      if (funcDecl$$17.returnTypeAnnotation || isDefinition) {
        signature$$3.returnType = TypeScript$$23.getTypeLink(funcDecl$$17.returnTypeAnnotation, this, false);
      } else {
        signature$$3.returnType = new TypeScript$$23.TypeLink;
        signature$$3.returnType.type = this.anyType;
      }
      signature$$3.hasVariableArgList = funcDecl$$17.variableArgList;
      var sigData = this.getParameterList(funcDecl$$17, container$$12);
      signature$$3.parameters = sigData.parameters;
      signature$$3.nonOptionalParameterCount = sigData.nonOptionalParameterCount;
      funcDecl$$17.signature = signature$$3;
      signature$$3.declAST = funcDecl$$17;
      var useOverloadGroupSym = overloadGroupSym && overloadGroupSym.getType() && !overloadGroupSym.isAccessor() && (funcDecl$$17.isSignature() || isAmbient$$4 == TypeScript$$23.hasFlag(overloadGroupSym.flags, TypeScript$$23.SymbolFlags.Ambient));
      if (useOverloadGroupSym && isPrivate != TypeScript$$23.hasFlag(overloadGroupSym.flags, TypeScript$$23.SymbolFlags.Private)) {
        this.errorReporter.simpleError(funcDecl$$17, "Public/Private visibility of overloads does not agree");
      }
      var groupType = useOverloadGroupSym ? overloadGroupSym.getType() : new TypeScript$$23.Type;
      if (isConstructor$$2) {
        if (groupType.construct == null) {
          groupType.construct = new TypeScript$$23.SignatureGroup;
        }
        groupType.construct.addSignature(signature$$3);
        groupType.construct.hasImplementation = !funcDecl$$17.isSignature();
        if (groupType.construct.hasImplementation) {
          groupType.setHasImplementation();
        }
      } else {
        if (funcDecl$$17.isIndexerMember()) {
          if (groupType.index == null) {
            groupType.index = new TypeScript$$23.SignatureGroup;
            groupType.index.flags |= TypeScript$$23.SignatureFlags.IsIndexer;
          }
          groupType.index.addSignature(signature$$3);
          groupType.index.hasImplementation = !funcDecl$$17.isSignature();
          if (groupType.index.hasImplementation) {
            groupType.setHasImplementation();
          }
        } else {
          if (groupType.call == null) {
            groupType.call = new TypeScript$$23.SignatureGroup;
          }
          groupType.call.addSignature(signature$$3);
          groupType.call.hasImplementation = !funcDecl$$17.isSignature();
          if (groupType.call.hasImplementation) {
            groupType.setHasImplementation();
          }
        }
      }
      var instanceType$$3 = groupType.instanceType;
      var funcName$$1 = null;
      var usedHint = false;
      if (funcDecl$$17.name && !funcDecl$$17.name.isMissing()) {
        funcName$$1 = funcDecl$$17.name.text;
      } else {
        if (funcDecl$$17.hint) {
          funcName$$1 = funcDecl$$17.hint;
          usedHint = true;
        }
      }
      if (groupType.symbol == null) {
        groupType.symbol = new TypeScript$$23.TypeSymbol(funcName$$1 ? funcName$$1 : this.anon, funcDecl$$17.minChar, funcDecl$$17.limChar - funcDecl$$17.minChar, this.locationInfo.unitIndex, groupType);
        if (!useOverloadGroupSym) {
          groupType.symbol.declAST = funcDecl$$17;
        }
      }
      if (isStatic$$6) {
        groupType.symbol.flags |= TypeScript$$23.SymbolFlags.Static;
      }
      if (isAmbient$$4) {
        groupType.symbol.flags |= TypeScript$$23.SymbolFlags.Ambient;
      }
      if (isPrivate) {
        groupType.symbol.flags |= TypeScript$$23.SymbolFlags.Private;
      }
      groupType.symbol.isMethod = funcDecl$$17.isMethod();
      if (groupType.symbol.isMethod) {
        groupType.symbol.flags |= TypeScript$$23.SymbolFlags.Property;
      }
      funcDecl$$17.type = groupType;
      if (!isConstructor$$2) {
        if (funcName$$1 && !isLambda$$2 && !funcDecl$$17.isAccessor() && !usedHint) {
          if (addToScope) {
            if (funcDecl$$17.isMethod() && isStatic$$6) {
              if (!container$$12.type.members.publicMembers.add(funcName$$1, groupType.symbol)) {
                this.errorReporter.duplicateIdentifier(funcDecl$$17, funcName$$1);
              }
              groupType.symbol.container = container$$12;
            } else {
              if (overloadGroupSym == null || overloadGroupSym.declAST && !overloadGroupSym.declAST.isOverload && container$$12.isType()) {
                scope$$22.enter(container$$12, funcDecl$$17, groupType.symbol, this.errorReporter, !isPrivate && (isExported$$1 || isStatic$$6 || isGlobal), false, isAmbient$$4);
              }
            }
          } else {
            if (!funcDecl$$17.isSpecialFn()) {
              groupType.symbol.container = container$$12;
            }
          }
        } else {
          if (!funcDecl$$17.isSpecialFn()) {
            groupType.symbol.container = container$$12;
          }
        }
      }
      if (useOverloadGroupSym) {
        var overloadGroupType = overloadGroupSym ? overloadGroupSym.getType() : null;
        var classType$$3 = groupType;
        if (classType$$3 != overloadGroupType) {
          if (classType$$3.construct == null) {
            if (overloadGroupType && overloadGroupType.construct) {
              classType$$3.construct = overloadGroupType.construct;
            } else {
              classType$$3.construct = new TypeScript$$23.SignatureGroup;
            }
          } else {
            if (overloadGroupType) {
              if (overloadGroupType.construct) {
                classType$$3.construct.signatures.concat(overloadGroupType.construct.signatures);
              }
            }
          }
          if (overloadGroupType) {
            if (classType$$3.call == null) {
              classType$$3.call = overloadGroupType.call;
            } else {
              if (overloadGroupType.call) {
                classType$$3.call.signatures.concat(overloadGroupType.call.signatures);
              }
            }
            if (!isStatic$$6) {
              if (classType$$3.instanceType == null) {
                classType$$3.instanceType = overloadGroupType.instanceType;
              }
              instanceType$$3 = classType$$3.instanceType;
              if (instanceType$$3) {
                if (instanceType$$3.call == null) {
                  instanceType$$3.call = overloadGroupType.call;
                } else {
                  if (overloadGroupType.call) {
                    instanceType$$3.call.signatures.concat(overloadGroupType.call.signatures);
                  }
                }
              }
            }
            if (classType$$3.index == null) {
              classType$$3.index = overloadGroupType.index;
            } else {
              if (overloadGroupType.index) {
                classType$$3.index.signatures.concat(overloadGroupType.index.signatures);
              }
            }
          }
        }
      }
      return signature$$3;
    };
    TypeChecker$$1.prototype.createAccessorSymbol = function(funcDecl$$18, fgSym$$1, enclosingClass, addToMembers, isClassProperty, scope$$23, container$$13) {
      var accessorSym = null;
      var sig = funcDecl$$18.signature;
      var nameText$$2 = funcDecl$$18.name.text;
      var isStatic$$7 = TypeScript$$23.hasFlag(funcDecl$$18.fncFlags, TypeScript$$23.FncFlags.Static);
      var isPrivate$$1 = TypeScript$$23.hasFlag(funcDecl$$18.fncFlags, TypeScript$$23.FncFlags.Private);
      if (fgSym$$1 == null) {
        var field$$1 = new TypeScript$$23.ValueLocation;
        accessorSym = new TypeScript$$23.FieldSymbol(nameText$$2, funcDecl$$18.minChar, this.locationInfo.unitIndex, false, field$$1);
        field$$1.symbol = accessorSym;
        accessorSym.declAST = funcDecl$$18;
        if (TypeScript$$23.hasFlag(funcDecl$$18.fncFlags, TypeScript$$23.FncFlags.GetAccessor)) {
          if (accessorSym.getter) {
            this.errorReporter.simpleError(funcDecl$$18, "Redeclaration of property getter");
          }
          accessorSym.getter = sig.declAST.type.symbol;
        } else {
          if (accessorSym.setter) {
            this.errorReporter.simpleError(funcDecl$$18, "Redeclaration of property setter");
          }
          accessorSym.setter = sig.declAST.type.symbol;
        }
        field$$1.typeLink = TypeScript$$23.getTypeLink(null, this, false);
        if (addToMembers) {
          if (enclosingClass) {
            if (!enclosingClass.members.publicMembers.add(nameText$$2, accessorSym)) {
              this.errorReporter.duplicateIdentifier(funcDecl$$18, accessorSym.name);
            }
            accessorSym.container = enclosingClass.symbol;
          } else {
            this.errorReporter.simpleError(funcDecl$$18, "Accessor property may not be added in this context");
          }
        } else {
          scope$$23.enter(container$$13, funcDecl$$18, accessorSym, this.errorReporter, !isPrivate$$1 || isStatic$$7, false, false);
        }
        if (isClassProperty) {
          accessorSym.flags |= TypeScript$$23.SymbolFlags.Property;
        }
        if (isStatic$$7) {
          accessorSym.flags |= TypeScript$$23.SymbolFlags.Static;
        }
        if (isPrivate$$1) {
          accessorSym.flags |= TypeScript$$23.SymbolFlags.Private;
        } else {
          accessorSym.flags |= TypeScript$$23.SymbolFlags.Public;
        }
      } else {
        accessorSym = fgSym$$1;
        if (isPrivate$$1 != TypeScript$$23.hasFlag(accessorSym.flags, TypeScript$$23.SymbolFlags.Private)) {
          this.errorReporter.simpleError(funcDecl$$18, "Getter and setter accessors do not agree in visibility");
        }
        if (TypeScript$$23.hasFlag(funcDecl$$18.fncFlags, TypeScript$$23.FncFlags.GetAccessor)) {
          if (accessorSym.getter) {
            this.errorReporter.simpleError(funcDecl$$18, "Redeclaration of property getter");
          }
          accessorSym.getter = funcDecl$$18.type.symbol;
        } else {
          if (accessorSym.setter) {
            this.errorReporter.simpleError(funcDecl$$18, "Redeclaration of property setter");
          }
          accessorSym.setter = funcDecl$$18.type.symbol;
        }
      }
      return accessorSym;
    };
    TypeChecker$$1.prototype.addBases = function(resultScope, type$$41, baseContext) {
      resultScope.addParentScope(new TypeScript$$23.SymbolTableScope(type$$41.members, type$$41.ambientMembers, type$$41.getAllEnclosedTypes(), type$$41.getAllAmbientEnclosedTypes(), type$$41.symbol));
      var i$$76 = 0;
      var parent$$52;
      if (type$$41.extendsList) {
        var len$$26 = type$$41.extendsList.length;
        for (;i$$76 < len$$26;i$$76++) {
          parent$$52 = type$$41.extendsList[i$$76];
          if (baseContext.baseId == parent$$52.typeID) {
            this.errorReporter.reportErrorFromSym(parent$$52.symbol, "Type '" + baseContext.base + "' is recursively referenced as a base class of itself");
            parent$$52.symbol.flags |= TypeScript$$23.SymbolFlags.RecursivelyReferenced;
            break;
          }
          this.addBases(resultScope, parent$$52, baseContext);
        }
      }
    };
    TypeChecker$$1.prototype.scopeOf = function(type$$42) {
      var resultScope$$1 = new TypeScript$$23.SymbolAggregateScope(type$$42.symbol);
      var baseContext$$1 = {base:type$$42.symbol && type$$42.symbol.name ? type$$42.symbol.name : "{}", baseId:type$$42.typeID};
      this.addBases(resultScope$$1, type$$42, baseContext$$1);
      return resultScope$$1;
    };
    TypeChecker$$1.prototype.lookupMemberTypeSymbol = function(containingType, name$$81) {
      var symbol$$9 = null;
      if (containingType.containedScope) {
        symbol$$9 = containingType.containedScope.find(name$$81, false, true);
      } else {
        if (containingType.members) {
          symbol$$9 = containingType.members.allMembers.lookup(name$$81);
          if (symbol$$9 == null && containingType.ambientMembers) {
            symbol$$9 = containingType.ambientMembers.allMembers.lookup(name$$81);
          }
        }
      }
      if (symbol$$9 == null) {
        var typeMembers$$1 = containingType.getAllEnclosedTypes();
        var ambientTypeMembers$$1 = containingType.getAllAmbientEnclosedTypes();
        if (typeMembers$$1) {
          symbol$$9 = typeMembers$$1.allMembers.lookup(name$$81);
          if (symbol$$9 == null && ambientTypeMembers$$1) {
            symbol$$9 = ambientTypeMembers$$1.allMembers.lookup(name$$81);
          }
        }
      }
      if (symbol$$9 && symbol$$9.isType()) {
        return symbol$$9;
      } else {
        return null;
      }
    };
    TypeChecker$$1.prototype.findSymbolForDynamicModule = function(idText$$2, currentFileName, search) {
      var originalIdText = idText$$2;
      var symbol$$10 = search(idText$$2);
      if (symbol$$10 == null) {
        if (!symbol$$10) {
          idText$$2 = TypeScript$$23.swapQuotes(originalIdText);
          symbol$$10 = search(idText$$2);
        }
        if (!symbol$$10) {
          idText$$2 = TypeScript$$23.stripQuotes(originalIdText) + ".ts";
          symbol$$10 = search(idText$$2);
        }
        if (!symbol$$10) {
          idText$$2 = TypeScript$$23.stripQuotes(originalIdText) + ".str";
          symbol$$10 = search(idText$$2);
        }
        if (!symbol$$10) {
          idText$$2 = TypeScript$$23.stripQuotes(originalIdText) + ".d.ts";
          symbol$$10 = search(idText$$2);
        }
        if (!symbol$$10) {
          idText$$2 = TypeScript$$23.stripQuotes(originalIdText) + ".d.str";
          symbol$$10 = search(idText$$2);
        }
        if (!symbol$$10 && !TypeScript$$23.isRelative(originalIdText)) {
          idText$$2 = originalIdText;
          var strippedIdText = TypeScript$$23.stripQuotes(idText$$2);
          var path$$7 = TypeScript$$23.getRootFilePath(TypeScript$$23.switchToForwardSlashes(currentFileName));
          for (;symbol$$10 == null && path$$7 != "";) {
            idText$$2 = TypeScript$$23.normalizePath(path$$7 + strippedIdText + ".ts");
            symbol$$10 = search(idText$$2);
            if (symbol$$10 == null) {
              idText$$2 = TypeScript$$23.changePathToSTR(idText$$2);
              symbol$$10 = search(idText$$2);
            }
            if (symbol$$10 == null) {
              idText$$2 = TypeScript$$23.changePathToDTS(idText$$2);
              symbol$$10 = search(idText$$2);
            }
            if (symbol$$10 == null) {
              idText$$2 = TypeScript$$23.changePathToDSTR(idText$$2);
              symbol$$10 = search(idText$$2);
            }
            if (symbol$$10 == null) {
              if (path$$7 === "/") {
                path$$7 = "";
              } else {
                path$$7 = TypeScript$$23.normalizePath(path$$7 + "..");
                path$$7 = path$$7 && path$$7 != "/" ? path$$7 + "/" : path$$7;
              }
            }
          }
        }
      }
      return symbol$$10;
    };
    TypeChecker$$1.prototype.resolveTypeMember = function(scope$$24, dotNode$$2) {
      var lhs = dotNode$$2.operand1;
      var rhs = dotNode$$2.operand2;
      var resultType = this.anyType;
      var lhsType = this.anyType;
      if (lhs && rhs && rhs.nodeType == TypeScript$$23.NodeType.Name) {
        if (lhs.nodeType == TypeScript$$23.NodeType.Dot) {
          lhsType = this.resolveTypeMember(scope$$24, lhs);
        } else {
          if (lhs.nodeType == TypeScript$$23.NodeType.Name) {
            var identifier$$1 = lhs;
            var symbol$$11 = scope$$24.find(identifier$$1.text, false, true);
            if (symbol$$11 == null) {
              this.errorReporter.unresolvedSymbol(identifier$$1, identifier$$1.actualText);
            } else {
              if (symbol$$11.isType()) {
                var typeSymbol$$1 = symbol$$11;
                if (typeSymbol$$1.aliasLink && !typeSymbol$$1.type && typeSymbol$$1.aliasLink.alias.nodeType == TypeScript$$23.NodeType.Name) {
                  var modPath$$2 = typeSymbol$$1.aliasLink.alias.text;
                  var modSym$$1 = this.findSymbolForDynamicModule(modPath$$2, this.locationInfo.filename, function(id$$17) {
                    return scope$$24.find(id$$17, false, true);
                  });
                  if (modSym$$1) {
                    typeSymbol$$1.type = modSym$$1.getType();
                  }
                }
                if (TypeScript$$23.optimizeModuleCodeGen && symbol$$11) {
                  var symType = symbol$$11.getType();
                  if (symType && typeSymbol$$1.aliasLink && typeSymbol$$1.onlyReferencedAsTypeRef) {
                    var modDecl$$1 = symType.symbol.declAST;
                    if (modDecl$$1 && TypeScript$$23.hasFlag(modDecl$$1.modFlags, TypeScript$$23.ModuleFlags.IsDynamic)) {
                      typeSymbol$$1.onlyReferencedAsTypeRef = !this.resolvingBases;
                    }
                  }
                }
                if (!symbol$$11.visible(scope$$24, this)) {
                  this.errorReporter.simpleError(lhs, "The symbol '" + identifier$$1.actualText + "' is not visible at this point");
                }
                lhsType = symbol$$11.getType();
                identifier$$1.sym = symbol$$11;
              } else {
                this.errorReporter.simpleError(lhs, "Expected type");
              }
            }
          }
        }
        if (!lhsType) {
          lhsType = this.anyType;
        }
        if (lhsType != this.anyType) {
          var rhsIdentifier = rhs;
          var resultSymbol = this.lookupMemberTypeSymbol(lhsType, rhsIdentifier.text);
          if (resultSymbol == null) {
            resultType = this.anyType;
            this.errorReporter.simpleError(dotNode$$2, "Expected type");
          } else {
            resultType = resultSymbol.getType();
            if (!resultSymbol.visible(scope$$24, this)) {
              this.errorReporter.simpleError(lhs, "The symbol '" + rhs.actualText + "' is not visible at this point");
            }
          }
          rhsIdentifier.sym = resultType.symbol;
        }
      }
      if (resultType.isClass()) {
        resultType = resultType.instanceType;
      }
      return resultType;
    };
    TypeChecker$$1.prototype.resolveFuncDecl = function(funcDecl$$19, scope$$25, fgSym$$2) {
      var functionGroupSymbol = this.createFunctionSignature(funcDecl$$19, scope$$25.container, scope$$25, fgSym$$2, false).declAST.type.symbol;
      var signatures$$1;
      if (funcDecl$$19.isConstructMember()) {
        signatures$$1 = functionGroupSymbol.type.construct.signatures;
      } else {
        if (funcDecl$$19.isIndexerMember()) {
          signatures$$1 = functionGroupSymbol.type.getInstanceType().index.signatures;
        } else {
          signatures$$1 = functionGroupSymbol.type.call.signatures;
        }
      }
      var signature$$4 = signatures$$1[signatures$$1.length - 1];
      var len$$27 = signature$$4.parameters.length;
      var i$$77 = 0;
      for (;i$$77 < len$$27;i$$77++) {
        var paramSym$$2 = signature$$4.parameters[i$$77];
        this.resolveTypeLink(scope$$25, paramSym$$2.parameter.typeLink, true);
      }
      if (len$$27 && funcDecl$$19.variableArgList) {
        if (!signature$$4.parameters[len$$27 - 1].parameter.typeLink.type.elementType) {
          this.errorReporter.simpleErrorFromSym(signature$$4.parameters[len$$27 - 1].parameter.symbol, "... parameter must have array type");
          signature$$4.parameters[len$$27 - 1].parameter.typeLink.type = this.makeArrayType(signature$$4.parameters[len$$27 - 1].parameter.typeLink.type);
        }
      }
      this.resolveTypeLink(scope$$25, signature$$4.returnType, funcDecl$$19.isSignature());
      return functionGroupSymbol;
    };
    TypeChecker$$1.prototype.resolveVarDecl = function(varDecl$$11, scope$$26) {
      var field$$2 = new TypeScript$$23.ValueLocation;
      var fieldSymbol = new TypeScript$$23.FieldSymbol(varDecl$$11.id.text, varDecl$$11.minChar, this.locationInfo.unitIndex, (varDecl$$11.varFlags & TypeScript$$23.VarFlags.Readonly) == TypeScript$$23.VarFlags.None, field$$2);
      fieldSymbol.transferVarFlags(varDecl$$11.varFlags);
      field$$2.symbol = fieldSymbol;
      fieldSymbol.declAST = varDecl$$11;
      field$$2.typeLink = TypeScript$$23.getTypeLink(varDecl$$11.typeExpr, this, varDecl$$11.init == null);
      this.resolveTypeLink(scope$$26, field$$2.typeLink, true);
      varDecl$$11.sym = fieldSymbol;
      varDecl$$11.type = field$$2.typeLink.type;
      return fieldSymbol;
    };
    TypeChecker$$1.prototype.resolveTypeLink = function(scope$$27, typeLink$$1, supplyVar$$1) {
      var arrayCount$$1 = 0;
      if (typeLink$$1.type == null) {
        var ast$$64 = typeLink$$1.ast;
        if (ast$$64) {
          for (;typeLink$$1.type == null;) {
            switch(ast$$64.nodeType) {
              case TypeScript$$23.NodeType.Name:
                var identifier$$2 = ast$$64;
                var symbol$$12 = scope$$27.find(identifier$$2.text, false, true);
                if (symbol$$12 == null) {
                  typeLink$$1.type = this.anyType;
                  this.errorReporter.unresolvedSymbol(identifier$$2, identifier$$2.actualText);
                } else {
                  if (symbol$$12.isType()) {
                    if (!symbol$$12.visible(scope$$27, this)) {
                      this.errorReporter.simpleError(ast$$64, "The symbol '" + identifier$$2.actualText + "' is not visible at this point");
                    }
                    identifier$$2.sym = symbol$$12;
                    typeLink$$1.type = symbol$$12.getType();
                    if (typeLink$$1.type) {
                      if (typeLink$$1.type.isClass()) {
                        typeLink$$1.type = typeLink$$1.type.instanceType;
                      }
                    } else {
                      typeLink$$1.type = this.anyType;
                    }
                  } else {
                    typeLink$$1.type = this.anyType;
                    this.errorReporter.simpleError(ast$$64, "Expected type");
                  }
                }
                break;
              case TypeScript$$23.NodeType.Dot:
                typeLink$$1.type = this.resolveTypeMember(scope$$27, ast$$64);
                break;
              case TypeScript$$23.NodeType.TypeRef:
                var typeRef$$2 = ast$$64;
                arrayCount$$1 = typeRef$$2.arrayCount;
                ast$$64 = typeRef$$2.term;
                if (ast$$64 == null) {
                  typeLink$$1.type = this.anyType;
                }
                break;
              case TypeScript$$23.NodeType.InterfaceDeclaration:
                var interfaceDecl$$3 = ast$$64;
                var interfaceType$$1 = new TypeScript$$23.Type;
                var interfaceSymbol = new TypeScript$$23.TypeSymbol(interfaceDecl$$3.name.text, ast$$64.minChar, ast$$64.limChar - ast$$64.minChar, this.locationInfo.unitIndex, interfaceType$$1);
                interfaceType$$1.symbol = interfaceSymbol;
                interfaceType$$1.members = new TypeScript$$23.ScopedMembers(new TypeScript$$23.DualStringHashTable(new TypeScript$$23.StringHashTable, new TypeScript$$23.StringHashTable));
                interfaceType$$1.containedScope = new TypeScript$$23.SymbolTableScope(interfaceType$$1.members, null, null, null, interfaceSymbol);
                interfaceType$$1.containedScope.container = interfaceSymbol;
                interfaceType$$1.memberScope = interfaceType$$1.containedScope;
                var memberList = interfaceDecl$$3.members;
                var props$$1 = memberList.members;
                var propsLen = props$$1.length;
                var j$$9 = 0;
                for (;j$$9 < propsLen;j$$9++) {
                  var propDecl = props$$1[j$$9];
                  var propSym = null;
                  var addMember = true;
                  var id$$18 = null;
                  if (propDecl.nodeType == TypeScript$$23.NodeType.FuncDecl) {
                    var funcDecl$$20 = propDecl;
                    id$$18 = funcDecl$$20.name;
                    propSym = interfaceType$$1.members.allMembers.lookup(funcDecl$$20.getNameText());
                    addMember = propSym == null;
                    if (funcDecl$$20.isSpecialFn()) {
                      addMember = false;
                      propSym = this.resolveFuncDecl(funcDecl$$20, scope$$27, interfaceSymbol);
                    } else {
                      propSym = this.resolveFuncDecl(funcDecl$$20, scope$$27, propSym);
                    }
                    funcDecl$$20.type = propSym.type;
                  } else {
                    id$$18 = propDecl.id;
                    propSym = this.resolveVarDecl(propDecl, scope$$27);
                    addMember = !id$$18.isMissing();
                  }
                  if (addMember) {
                    if (id$$18 && TypeScript$$23.hasFlag(id$$18.flags, TypeScript$$23.ASTFlags.OptionalName)) {
                      propSym.flags |= TypeScript$$23.SymbolFlags.Optional;
                    }
                    if (!interfaceType$$1.members.allMembers.add(propSym.name, propSym)) {
                      this.errorReporter.duplicateIdentifier(ast$$64, propSym.name);
                    }
                  }
                }
                ast$$64.type = interfaceType$$1;
                typeLink$$1.type = interfaceType$$1;
                break;
              case TypeScript$$23.NodeType.FuncDecl:
                var tsym = this.resolveFuncDecl(ast$$64, scope$$27, null);
                typeLink$$1.type = tsym.type;
                break;
              default:
                typeLink$$1.type = this.anyType;
                this.errorReporter.simpleError(ast$$64, "Expected type");
                break;
            }
          }
        }
        var count$$5 = arrayCount$$1;
        for (;count$$5 > 0;count$$5--) {
          typeLink$$1.type = this.makeArrayType(typeLink$$1.type);
        }
        if (supplyVar$$1 && typeLink$$1.type == null) {
          typeLink$$1.type = this.anyType;
        }
        if (typeLink$$1.ast) {
          typeLink$$1.ast.type = typeLink$$1.type;
        }
      }
    };
    TypeChecker$$1.prototype.resolveBaseTypeLink = function(typeLink$$2, scope$$28) {
      this.resolvingBases = true;
      this.resolveTypeLink(scope$$28, typeLink$$2, true);
      this.resolvingBases = false;
      var extendsType = null;
      if (typeLink$$2.type.isClass()) {
        extendsType = typeLink$$2.type.instanceType;
      } else {
        extendsType = typeLink$$2.type;
      }
      return extendsType;
    };
    TypeChecker$$1.prototype.findMostApplicableSignature = function(signatures$$2, args$$12) {
      if (signatures$$2.length == 1) {
        return{sig:signatures$$2[0].signature, ambiguous:false};
      }
      var best = signatures$$2[0];
      var Q = null;
      var AType = null;
      var PType = null;
      var QType = null;
      var ambiguous = false;
      var qSig = 1;
      for (;qSig < signatures$$2.length;qSig++) {
        Q = signatures$$2[qSig];
        var i$$78 = 0;
        i$$78 = 0;
        for (;args$$12 && i$$78 < args$$12.members.length;i$$78++) {
          AType = args$$12.members[i$$78].type;
          PType = i$$78 < best.signature.parameters.length ? best.signature.parameters[i$$78].getType() : best.signature.parameters[best.signature.parameters.length - 1].getType().elementType;
          QType = i$$78 < Q.signature.parameters.length ? Q.signature.parameters[i$$78].getType() : Q.signature.parameters[Q.signature.parameters.length - 1].getType().elementType;
          if (this.typesAreIdentical(PType, QType)) {
            continue;
          } else {
            if (this.typesAreIdentical(AType, PType)) {
              break;
            } else {
              if (this.typesAreIdentical(AType, QType)) {
                best = Q;
                break;
              } else {
                if (this.sourceIsSubtypeOfTarget(PType, QType)) {
                  break;
                } else {
                  if (this.sourceIsSubtypeOfTarget(QType, PType)) {
                    best = Q;
                    break;
                  } else {
                    if (Q.hadProvisionalErrors) {
                      break;
                    } else {
                      if (best.hadProvisionalErrors) {
                        best = Q;
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (!args$$12 || i$$78 == args$$12.members.length) {
          var collection = {getLength:function() {
            return 2;
          }, setTypeAtIndex:function(index$$50, type$$43) {
          }, getTypeAtIndex:function(index$$51) {
            return index$$51 ? Q.signature.returnType.type : best.signature.returnType.type;
          }};
          var bct = this.findBestCommonType(best.signature.returnType.type, null, collection, true);
          ambiguous = !bct;
        } else {
          ambiguous = false;
        }
      }
      return{sig:best.signature, ambiguous:ambiguous};
    };
    TypeChecker$$1.prototype.getApplicableSignatures = function(signatures$$3, args$$13, comparisonInfo$$1) {
      var applicableSigs = [];
      var memberType = null;
      var miss = false;
      var cxt = null;
      var hadProvisionalErrors = false;
      var i$$79 = 0;
      for (;i$$79 < signatures$$3.length;i$$79++) {
        miss = false;
        var j$$10 = 0;
        for (;j$$10 < args$$13.members.length;j$$10++) {
          if (j$$10 >= signatures$$3[i$$79].parameters.length) {
            continue;
          }
          memberType = signatures$$3[i$$79].parameters[j$$10].getType();
          if (signatures$$3[i$$79].declAST.variableArgList && j$$10 >= signatures$$3[i$$79].nonOptionalParameterCount - 1 && memberType.isArray()) {
            memberType = memberType.elementType;
          }
          if (memberType == this.anyType) {
            continue;
          } else {
            if (args$$13.members[j$$10].nodeType == TypeScript$$23.NodeType.FuncDecl) {
              if (this.typeFlow.functionInterfaceType && memberType == this.typeFlow.functionInterfaceType) {
                continue;
              }
              if (!this.canContextuallyTypeFunction(memberType, args$$13.members[j$$10], true)) {
                if (this.canContextuallyTypeFunction(memberType, args$$13.members[j$$10], false)) {
                  this.typeFlow.typeCheck(args$$13.members[j$$10]);
                  if (!this.sourceIsAssignableToTarget(args$$13.members[j$$10].type, memberType, comparisonInfo$$1)) {
                    break;
                  }
                } else {
                  break;
                }
              } else {
                this.typeCheckWithContextualType(memberType, true, true, args$$13.members[j$$10]);
                this.cleanStartedPTO();
                hadProvisionalErrors = this.hadProvisionalErrors();
                if (!this.sourceIsAssignableToTarget(args$$13.members[j$$10].type, memberType, comparisonInfo$$1)) {
                  if (comparisonInfo$$1) {
                    comparisonInfo$$1.setMessage("Could not apply type '" + memberType.getTypeName() + "' to argument " + (j$$10 + 1) + ", which is of type '" + args$$13.members[j$$10].type.getTypeName() + "'");
                  }
                  miss = true;
                }
                this.resetProvisionalErrors();
                if (miss) {
                  break;
                }
              }
            } else {
              if (args$$13.members[j$$10].nodeType == TypeScript$$23.NodeType.ObjectLit) {
                if (this.typeFlow.objectInterfaceType && memberType == this.typeFlow.objectInterfaceType) {
                  continue;
                }
                this.typeCheckWithContextualType(memberType, true, true, args$$13.members[j$$10]);
                this.cleanStartedPTO();
                hadProvisionalErrors = this.hadProvisionalErrors();
                if (!this.sourceIsAssignableToTarget(args$$13.members[j$$10].type, memberType, comparisonInfo$$1)) {
                  if (comparisonInfo$$1) {
                    comparisonInfo$$1.setMessage("Could not apply type '" + memberType.getTypeName() + "' to argument " + (j$$10 + 1) + ", which is of type '" + args$$13.members[j$$10].type.getTypeName() + "'");
                  }
                  miss = true;
                }
                this.resetProvisionalErrors();
                if (miss) {
                  break;
                }
              } else {
                if (args$$13.members[j$$10].nodeType == TypeScript$$23.NodeType.ArrayLit) {
                  if (this.typeFlow.arrayInterfaceType && memberType == this.typeFlow.arrayInterfaceType) {
                    continue;
                  }
                  this.typeCheckWithContextualType(memberType, true, true, args$$13.members[j$$10]);
                  this.cleanStartedPTO();
                  hadProvisionalErrors = this.hadProvisionalErrors();
                  if (!this.sourceIsAssignableToTarget(args$$13.members[j$$10].type, memberType, comparisonInfo$$1)) {
                    if (comparisonInfo$$1) {
                      comparisonInfo$$1.setMessage("Could not apply type '" + memberType.getTypeName() + "' to argument " + (j$$10 + 1) + ", which is of type '" + args$$13.members[j$$10].type.getTypeName() + "'");
                    }
                    break;
                  }
                  this.resetProvisionalErrors();
                  if (miss) {
                    break;
                  }
                }
              }
            }
          }
        }
        if (j$$10 == args$$13.members.length) {
          applicableSigs[applicableSigs.length] = {signature:signatures$$3[i$$79], hadProvisionalErrors:hadProvisionalErrors};
        }
        hadProvisionalErrors = false;
      }
      return applicableSigs;
    };
    TypeChecker$$1.prototype.canContextuallyTypeFunction = function(candidateType, funcDecl$$21, beStringent) {
      if (funcDecl$$21.isParenthesized || funcDecl$$21.isMethod() || beStringent && funcDecl$$21.returnTypeAnnotation || funcDecl$$21.isInlineCallLiteral) {
        return false;
      }
      beStringent = beStringent || this.typeFlow.functionInterfaceType == candidateType;
      if (!beStringent) {
        return true;
      }
      if (!funcDecl$$21.signature) {
        this.createFunctionSignature(funcDecl$$21, this.typeFlow.scope.container, this.typeFlow.scope, null, null);
        this.typeFlow.typeCheck(funcDecl$$21);
      }
      var signature$$5 = funcDecl$$21.signature;
      var paramLen$$2 = signature$$5.parameters.length;
      var i$$80 = 0;
      for (;i$$80 < paramLen$$2;i$$80++) {
        var param$$6 = signature$$5.parameters[i$$80];
        var symbol$$13 = param$$6;
        var argDecl = symbol$$13.declAST;
        if (beStringent && argDecl.typeExpr) {
          return false;
        }
      }
      if (candidateType.construct && candidateType.call) {
        return false;
      }
      var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;
      if (!candidateSigs || candidateSigs.signatures.length > 1) {
        return false;
      }
      return true;
    };
    TypeChecker$$1.prototype.canContextuallyTypeObjectLiteral = function(targetType$$3, objectLit$$1) {
      if (targetType$$3 == this.typeFlow.objectInterfaceType) {
        return true;
      }
      var memberDecls = objectLit$$1.operand;
      if (!(memberDecls && targetType$$3.memberScope)) {
        return false;
      }
      var id$$19 = null;
      var targetMember = null;
      var text$$23 = "";
      var foundSyms = {};
      var i$$81 = 0;
      for (;i$$81 < memberDecls.members.length;i$$81++) {
        id$$19 = memberDecls.members[i$$81].operand1;
        if (id$$19.nodeType == TypeScript$$23.NodeType.Name) {
          text$$23 = id$$19.text;
        } else {
          if (id$$19.nodeType == TypeScript$$23.NodeType.QString) {
            var idText$$3 = id$$19.text;
            text$$23 = idText$$3.substring(1, idText$$3.length - 1);
          } else {
            return false;
          }
        }
        targetMember = targetType$$3.memberScope.find(text$$23, true, false);
        if (!targetMember) {
          return false;
        }
        foundSyms[text$$23] = true;
      }
      var targetMembers = targetType$$3.memberScope.getAllValueSymbolNames(true);
      i$$81 = 0;
      for (;i$$81 < targetMembers.length;i$$81++) {
        var memberName$$2 = targetMembers[i$$81];
        var memberSym = targetType$$3.memberScope.find(memberName$$2, true, false);
        if (!foundSyms[targetMembers[i$$81]] && !TypeScript$$23.hasFlag(memberSym.flags, TypeScript$$23.SymbolFlags.Optional)) {
          return false;
        }
      }
      return true;
    };
    TypeChecker$$1.prototype.widenType = function(t) {
      if (t == this.undefinedType || t == this.nullType) {
        return this.anyType;
      }
      return t;
    };
    TypeChecker$$1.prototype.isNullOrUndefinedType = function(t$$1) {
      return t$$1 == this.undefinedType || t$$1 == this.nullType;
    };
    TypeChecker$$1.prototype.findBestCommonType = function(initialType, targetType$$4, collection$$1, acceptVoid, comparisonInfo$$2) {
      var i$$82 = 0;
      var len$$28 = collection$$1.getLength();
      var nlastChecked = 0;
      var bestCommonType = initialType;
      if (targetType$$4) {
        bestCommonType = bestCommonType ? bestCommonType.mergeOrdered(targetType$$4, this, acceptVoid) : targetType$$4;
      }
      var convergenceType = bestCommonType;
      for (;nlastChecked < len$$28;) {
        i$$82 = 0;
        for (;i$$82 < len$$28;i$$82++) {
          if (i$$82 == nlastChecked) {
            continue;
          }
          if (convergenceType && (bestCommonType = convergenceType.mergeOrdered(collection$$1.getTypeAtIndex(i$$82), this, acceptVoid, comparisonInfo$$2))) {
            convergenceType = bestCommonType;
          }
          if (bestCommonType == this.anyType || bestCommonType == null) {
            break;
          } else {
            if (targetType$$4) {
              collection$$1.setTypeAtIndex(i$$82, targetType$$4);
            }
          }
        }
        if (convergenceType && bestCommonType) {
          break;
        }
        nlastChecked++;
        if (nlastChecked < len$$28) {
          convergenceType = collection$$1.getTypeAtIndex(nlastChecked);
        }
      }
      return acceptVoid ? bestCommonType : bestCommonType == this.voidType ? null : bestCommonType;
    };
    TypeChecker$$1.prototype.typesAreIdentical = function(t1$$1, t2$$1) {
      if (t1$$1 == t2$$1) {
        return true;
      }
      if (!t1$$1 || !t2$$1) {
        return false;
      }
      if (t1$$1.isClass() || t1$$1.isClassInstance()) {
        return false;
      }
      var comboId = t2$$1.typeID << 16 | t1$$1.typeID;
      if (this.identicalCache[comboId]) {
        return true;
      }
      if (t1$$1.typeFlags & TypeScript$$23.TypeFlags.IsEnum || t2$$1.typeFlags & TypeScript$$23.TypeFlags.IsEnum) {
        return false;
      }
      if (t1$$1.isArray() || t2$$1.isArray()) {
        if (!(t1$$1.isArray() && t2$$1.isArray())) {
          return false;
        }
        this.identicalCache[comboId] = false;
        var ret = this.typesAreIdentical(t1$$1.elementType, t2$$1.elementType);
        if (ret) {
          this.subtypeCache[comboId] = true;
        } else {
          this.subtypeCache[comboId] = undefined;
        }
        return ret;
      }
      if (t1$$1.primitiveTypeClass != t2$$1.primitiveTypeClass) {
        return false;
      }
      this.identicalCache[comboId] = false;
      if (t1$$1.memberScope && t2$$1.memberScope) {
        var t1MemberKeys = t1$$1.memberScope.getAllValueSymbolNames(true).sort();
        var t2MemberKeys = t2$$1.memberScope.getAllValueSymbolNames(true).sort();
        if (t1MemberKeys.length != t2MemberKeys.length) {
          this.identicalCache[comboId] = undefined;
          return false;
        }
        var t1MemberSymbol = null;
        var t2MemberSymbol = null;
        var t1MemberType = null;
        var t2MemberType = null;
        var iMember$$1 = 0;
        for (;iMember$$1 < t1MemberKeys.length;iMember$$1++) {
          if (t1MemberKeys[iMember$$1] != t2MemberKeys[iMember$$1]) {
            this.identicalCache[comboId] = undefined;
            return false;
          }
          t1MemberSymbol = t1$$1.memberScope.find(t1MemberKeys[iMember$$1], false, false);
          t2MemberSymbol = t2$$1.memberScope.find(t2MemberKeys[iMember$$1], false, false);
          if ((t1MemberSymbol.flags & TypeScript$$23.SymbolFlags.Optional) != (t2MemberSymbol.flags & TypeScript$$23.SymbolFlags.Optional)) {
            this.identicalCache[comboId] = undefined;
            return false;
          }
          t1MemberType = t1MemberSymbol.getType();
          t2MemberType = t2MemberSymbol.getType();
          if (t1MemberType && t2MemberType && this.identicalCache[t2MemberType.typeID << 16 | t1MemberType.typeID] != undefined) {
            continue;
          }
          if (!this.typesAreIdentical(t1MemberType, t2MemberType)) {
            this.identicalCache[comboId] = undefined;
            return false;
          }
        }
      } else {
        if (t1$$1.memberScope || t2$$1.memberScope) {
          this.identicalCache[comboId] = undefined;
          return false;
        }
      }
      if (!this.signatureGroupsAreIdentical(t1$$1.call, t2$$1.call)) {
        this.identicalCache[comboId] = undefined;
        return false;
      }
      if (!this.signatureGroupsAreIdentical(t1$$1.construct, t2$$1.construct)) {
        this.identicalCache[comboId] = undefined;
        return false;
      }
      if (!this.signatureGroupsAreIdentical(t1$$1.index, t2$$1.index)) {
        this.identicalCache[comboId] = undefined;
        return false;
      }
      this.identicalCache[comboId] = true;
      return true;
    };
    TypeChecker$$1.prototype.signatureGroupsAreIdentical = function(sg1, sg2) {
      if (sg1 == sg2) {
        return true;
      }
      if (!sg1 || !sg2) {
        return false;
      }
      if (sg1.signatures.length != sg2.signatures.length) {
        return false;
      }
      var sig1 = null;
      var sig2 = null;
      var sigsMatch = false;
      var iSig1 = 0;
      for (;iSig1 < sg1.signatures.length;iSig1++) {
        sig1 = sg1.signatures[iSig1];
        var iSig2 = 0;
        for (;iSig2 < sg2.signatures.length;iSig2++) {
          sig2 = sg2.signatures[iSig2];
          if (this.signaturesAreIdentical(sig1, sig2)) {
            sigsMatch = true;
            break;
          }
        }
        if (sigsMatch) {
          sigsMatch = false;
          continue;
        }
        return false;
      }
      return true;
    };
    TypeChecker$$1.prototype.signaturesAreIdentical = function(s1, s2) {
      if (s1.hasVariableArgList != s2.hasVariableArgList) {
        return false;
      }
      if (s1.nonOptionalParameterCount != s2.nonOptionalParameterCount) {
        return false;
      }
      if (s1.parameters.length != s2.parameters.length) {
        return false;
      }
      if (!this.typesAreIdentical(s1.returnType.type, s2.returnType.type)) {
        return false;
      }
      var iParam = 0;
      for (;iParam < s1.parameters.length;iParam++) {
        if (!this.typesAreIdentical(s1.parameters[iParam].parameter.typeLink.type, s2.parameters[iParam].parameter.typeLink.type)) {
          return false;
        }
      }
      return true;
    };
    TypeChecker$$1.prototype.sourceIsSubtypeOfTarget = function(source$$1, target$$31, comparisonInfo$$3) {
      return this.sourceIsRelatableToTarget(source$$1, target$$31, false, this.subtypeCache, comparisonInfo$$3);
    };
    TypeChecker$$1.prototype.signatureGroupIsSubtypeOfTarget = function(sg1$$1, sg2$$1, comparisonInfo$$4) {
      return this.signatureGroupIsRelatableToTarget(sg1$$1, sg2$$1, false, this.subtypeCache, comparisonInfo$$4);
    };
    TypeChecker$$1.prototype.signatureIsSubtypeOfTarget = function(s1$$1, s2$$1, comparisonInfo$$5) {
      return this.signatureIsRelatableToTarget(s1$$1, s2$$1, false, this.subtypeCache, comparisonInfo$$5);
    };
    TypeChecker$$1.prototype.sourceIsAssignableToTarget = function(source$$2, target$$32, comparisonInfo$$6) {
      return this.sourceIsRelatableToTarget(source$$2, target$$32, true, this.assignableCache, comparisonInfo$$6);
    };
    TypeChecker$$1.prototype.signatureGroupIsAssignableToTarget = function(sg1$$2, sg2$$2, comparisonInfo$$7) {
      return this.signatureGroupIsRelatableToTarget(sg1$$2, sg2$$2, true, this.assignableCache, comparisonInfo$$7);
    };
    TypeChecker$$1.prototype.signatureIsAssignableToTarget = function(s1$$2, s2$$2, comparisonInfo$$8) {
      return this.signatureIsRelatableToTarget(s1$$2, s2$$2, true, this.assignableCache, comparisonInfo$$8);
    };
    TypeChecker$$1.prototype.sourceIsRelatableToTarget = function(source$$3, target$$33, assignableTo, comparisonCache, comparisonInfo$$9) {
      if (source$$3 == target$$33) {
        return true;
      }
      if (!(source$$3 && target$$33)) {
        return true;
      }
      var comboId$$1 = source$$3.typeID << 16 | target$$33.typeID;
      if (comparisonCache[comboId$$1] != undefined) {
        return true;
      }
      if (assignableTo) {
        if (source$$3 == this.anyType || target$$33 == this.anyType) {
          return true;
        }
      } else {
        if (target$$33 == this.anyType) {
          return true;
        }
      }
      if (source$$3 == this.undefinedType) {
        return true;
      }
      if (source$$3 == this.nullType && (target$$33 != this.undefinedType && target$$33 != this.voidType)) {
        return true;
      }
      if (target$$33 == this.numberType && source$$3.typeFlags & TypeScript$$23.TypeFlags.IsEnum) {
        return true;
      }
      if (source$$3 == this.numberType && target$$33.typeFlags & TypeScript$$23.TypeFlags.IsEnum) {
        return true;
      }
      if (source$$3.typeFlags & TypeScript$$23.TypeFlags.IsEnum || target$$33.typeFlags & TypeScript$$23.TypeFlags.IsEnum) {
        return false;
      }
      if (source$$3.isArray() || target$$33.isArray()) {
        if (!(source$$3.isArray() && target$$33.isArray())) {
          return false;
        }
        comparisonCache[comboId$$1] = false;
        var ret$$1 = this.sourceIsRelatableToTarget(source$$3.elementType, target$$33.elementType, assignableTo, comparisonCache, comparisonInfo$$9);
        if (ret$$1) {
          comparisonCache[comboId$$1] = true;
        } else {
          comparisonCache[comboId$$1] = undefined;
        }
        return ret$$1;
      }
      if (source$$3.primitiveTypeClass != target$$33.primitiveTypeClass) {
        if (target$$33.primitiveTypeClass == TypeScript$$23.Primitive.None) {
          if (source$$3 == this.numberType && this.typeFlow.numberInterfaceType) {
            source$$3 = this.typeFlow.numberInterfaceType;
          } else {
            if (source$$3 == this.stringType && this.typeFlow.stringInterfaceType) {
              source$$3 = this.typeFlow.stringInterfaceType;
            } else {
              if (source$$3 == this.booleanType && this.typeFlow.booleanInterfaceType) {
                source$$3 = this.typeFlow.booleanInterfaceType;
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
      comparisonCache[comboId$$1] = false;
      if (source$$3.hasBase(target$$33)) {
        comparisonCache[comboId$$1] = true;
        return true;
      }
      if (this.typeFlow.objectInterfaceType && target$$33 == this.typeFlow.objectInterfaceType) {
        return true;
      }
      if (this.typeFlow.functionInterfaceType && (source$$3.call || source$$3.construct) && target$$33 == this.typeFlow.functionInterfaceType) {
        return true;
      }
      if (target$$33.isClass() || target$$33.isClassInstance()) {
        comparisonCache[comboId$$1] = undefined;
        return false;
      }
      if (target$$33.memberScope && source$$3.memberScope) {
        var mPropKeys = target$$33.memberScope.getAllValueSymbolNames(true);
        var mProp = null;
        var nProp = null;
        var mPropType = null;
        var nPropType = null;
        var inferenceSymbol = null;
        var iMProp = 0;
        for (;iMProp < mPropKeys.length;iMProp++) {
          mProp = target$$33.memberScope.find(mPropKeys[iMProp], false, false);
          nProp = source$$3.memberScope.find(mPropKeys[iMProp], false, false);
          if (mProp.name == "arguments" && this.typeFlow.iargumentsInterfaceType && this.typeFlow.iargumentsInterfaceType.symbol.flags & TypeScript$$23.SymbolFlags.CompilerGenerated && mProp.kind() == TypeScript$$23.SymbolKind.Variable && mProp.variable.typeLink.type == this.typeFlow.iargumentsInterfaceType) {
            continue;
          }
          if (mProp.isInferenceSymbol()) {
            inferenceSymbol = mProp;
            if (inferenceSymbol.typeCheckStatus == TypeScript$$23.TypeCheckStatus.NotStarted) {
              this.typeFlow.typeCheck(mProp.declAST);
            }
          }
          mPropType = mProp.getType();
          if (!nProp) {
            if (this.typeFlow.objectInterfaceType) {
              nProp = this.typeFlow.objectInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);
            }
            if (!nProp) {
              if (this.typeFlow.functionInterfaceType && (mPropType.call || mPropType.construct)) {
                nProp = this.typeFlow.functionInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);
              }
              if (!nProp) {
                if (!(mProp.flags & TypeScript$$23.SymbolFlags.Optional)) {
                  comparisonCache[comboId$$1] = undefined;
                  if (comparisonInfo$$9) {
                    comparisonInfo$$9.flags |= TypeScript$$23.TypeRelationshipFlags.RequiredPropertyIsMissing;
                    comparisonInfo$$9.addMessageToFront("Type '" + source$$3.getTypeName() + "' is missing property '" + mPropKeys[iMProp] + "' from type '" + target$$33.getTypeName() + "'");
                  }
                  return false;
                } else {
                  continue;
                }
              }
            }
          }
          if (nProp.isInferenceSymbol()) {
            inferenceSymbol = nProp;
            if (inferenceSymbol.typeCheckStatus == TypeScript$$23.TypeCheckStatus.NotStarted) {
              this.typeFlow.typeCheck(nProp.declAST);
            }
          }
          nPropType = nProp.getType();
          if (mPropType && nPropType && comparisonCache[nPropType.typeID << 16 | mPropType.typeID] != undefined) {
            continue;
          }
          if (!this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo$$9)) {
            comparisonCache[comboId$$1] = undefined;
            if (comparisonInfo$$9) {
              comparisonInfo$$9.flags |= TypeScript$$23.TypeRelationshipFlags.IncompatiblePropertyTypes;
              comparisonInfo$$9.addMessageToFront("Types of property '" + mProp.name + "' of types '" + source$$3.getTypeName() + "' and '" + target$$33.getTypeName() + "' are incompatible");
            }
            return false;
          }
        }
      }
      if (source$$3.call || target$$33.call) {
        if (!this.signatureGroupIsRelatableToTarget(source$$3.call, target$$33.call, assignableTo, comparisonCache, comparisonInfo$$9)) {
          if (comparisonInfo$$9) {
            if (source$$3.call && target$$33.call) {
              comparisonInfo$$9.addMessageToFront("Call signatures of types '" + source$$3.getTypeName() + "' and '" + target$$33.getTypeName() + "' are incompatible");
            } else {
              var hasSig = target$$33.call ? target$$33.getTypeName() : source$$3.getTypeName();
              var lacksSig = !target$$33.call ? target$$33.getTypeName() : source$$3.getTypeName();
              comparisonInfo$$9.setMessage("Type '" + hasSig + "' requires a call signature, but Type '" + lacksSig + "' lacks one");
            }
            comparisonInfo$$9.flags |= TypeScript$$23.TypeRelationshipFlags.IncompatibleSignatures;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      if (source$$3.construct || target$$33.construct) {
        if (!this.signatureGroupIsRelatableToTarget(source$$3.construct, target$$33.construct, assignableTo, comparisonCache, comparisonInfo$$9)) {
          if (comparisonInfo$$9) {
            if (source$$3.construct && target$$33.construct) {
              comparisonInfo$$9.addMessageToFront("Construct signatures of types '" + source$$3.getTypeName() + "' and '" + target$$33.getTypeName() + "' are incompatible");
            } else {
              hasSig = target$$33.construct ? target$$33.getTypeName() : source$$3.getTypeName();
              lacksSig = !target$$33.construct ? target$$33.getTypeName() : source$$3.getTypeName();
              comparisonInfo$$9.setMessage("Type '" + hasSig + "' requires a construct signature, but Type '" + lacksSig + "' lacks one");
            }
            comparisonInfo$$9.flags |= TypeScript$$23.TypeRelationshipFlags.IncompatibleSignatures;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      if (target$$33.index) {
        var targetIndex = !target$$33.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : target$$33.index;
        var sourceIndex = !source$$3.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : source$$3.index;
        if (!this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo$$9)) {
          if (comparisonInfo$$9) {
            comparisonInfo$$9.addMessageToFront("Index signatures of types '" + source$$3.getTypeName() + "' and '" + target$$33.getTypeName() + "' are incompatible");
            comparisonInfo$$9.flags |= TypeScript$$23.TypeRelationshipFlags.IncompatibleSignatures;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      comparisonCache[comboId$$1] = true;
      return true;
    };
    TypeChecker$$1.prototype.signatureGroupIsRelatableToTarget = function(sourceSG, targetSG, assignableTo$$1, comparisonCache$$1, comparisonInfo$$10) {
      if (sourceSG == targetSG) {
        return true;
      }
      if (!(sourceSG && targetSG)) {
        return false;
      }
      var mSig = null;
      var nSig = null;
      var foundMatch = false;
      var iMSig = 0;
      for (;iMSig < targetSG.signatures.length;iMSig++) {
        mSig = targetSG.signatures[iMSig];
        var iNSig = 0;
        for (;iNSig < sourceSG.signatures.length;iNSig++) {
          nSig = sourceSG.signatures[iNSig];
          if (this.signatureIsRelatableToTarget(nSig, mSig, assignableTo$$1, comparisonCache$$1, comparisonInfo$$10)) {
            foundMatch = true;
            break;
          }
        }
        if (foundMatch) {
          foundMatch = false;
          continue;
        }
        return false;
      }
      return true;
    };
    TypeChecker$$1.prototype.signatureIsRelatableToTarget = function(sourceSig, targetSig, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11) {
      if (!sourceSig.parameters || !targetSig.parameters) {
        return false;
      }
      var targetVarArgCount = targetSig.hasVariableArgList ? targetSig.nonOptionalParameterCount - 1 : targetSig.nonOptionalParameterCount;
      var sourceVarArgCount = sourceSig.hasVariableArgList ? sourceSig.nonOptionalParameterCount - 1 : sourceSig.nonOptionalParameterCount;
      if (sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableArgList) {
        if (comparisonInfo$$11) {
          comparisonInfo$$11.flags |= TypeScript$$23.TypeRelationshipFlags.SourceSignatureHasTooManyParameters;
          comparisonInfo$$11.addMessageToFront("Call signature expects " + targetVarArgCount + " or fewer parameters");
        }
        return false;
      }
      var sourceReturnType = sourceSig.returnType.type;
      var targetReturnType = targetSig.returnType.type;
      if (targetReturnType != this.voidType) {
        if (!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11)) {
          if (comparisonInfo$$11) {
            comparisonInfo$$11.flags |= TypeScript$$23.TypeRelationshipFlags.IncompatibleReturnTypes;
          }
          return false;
        }
      }
      var len$$29 = sourceVarArgCount < targetVarArgCount && sourceSig.hasVariableArgList ? targetVarArgCount : sourceVarArgCount;
      var sourceParamType = null;
      var targetParamType = null;
      var sourceParamName = "";
      var targetParamName = "";
      var iSource = 0;
      var iTarget = 0;
      for (;iSource < len$$29;iSource++, iTarget++) {
        if (!sourceSig.hasVariableArgList || iSource < sourceVarArgCount) {
          sourceParamType = sourceSig.parameters[iSource].parameter.typeLink.type;
          sourceParamName = sourceSig.parameters[iSource].parameter.symbol.name;
        } else {
          if (iSource == sourceVarArgCount) {
            sourceParamType = sourceSig.parameters[iSource].parameter.typeLink.type;
            if (sourceParamType.elementType) {
              sourceParamType = sourceParamType.elementType;
            }
            sourceParamName = sourceSig.parameters[iSource].parameter.symbol.name;
          }
        }
        if (iTarget < targetSig.parameters.length && iTarget < targetVarArgCount) {
          targetParamType = targetSig.parameters[iTarget].parameter.typeLink.type;
          targetParamName = targetSig.parameters[iTarget].parameter.symbol.name;
        } else {
          if (targetSig.hasVariableArgList && iTarget == targetVarArgCount) {
            targetParamType = targetSig.parameters[iTarget].parameter.typeLink.type;
            if (targetParamType.elementType) {
              targetParamType = targetParamType.elementType;
            }
            targetParamName = targetSig.parameters[iTarget].parameter.symbol.name;
          }
        }
        if (!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11) || this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11))) {
          if (comparisonInfo$$11) {
            comparisonInfo$$11.flags |= TypeScript$$23.TypeRelationshipFlags.IncompatibleParameterTypes;
          }
          return false;
        }
      }
      return true;
    };
    return TypeChecker$$1;
  }();
  TypeScript$$23.TypeChecker = TypeChecker;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$24) {
  function getBaseTypeLinks(bases$$3, baseTypeLinks) {
    if (bases$$3) {
      var len$$30 = bases$$3.members.length;
      if (baseTypeLinks == null) {
        baseTypeLinks = new Array;
      }
      var i$$83 = 0;
      for (;i$$83 < len$$30;i$$83++) {
        var baseExpr$$1 = bases$$3.members[i$$83];
        var name$$82 = baseExpr$$1;
        var typeLink$$3 = new TypeScript$$24.TypeLink;
        typeLink$$3.ast = name$$82;
        baseTypeLinks[baseTypeLinks.length] = typeLink$$3;
      }
    }
    return baseTypeLinks;
  }
  function getBases(type$$44, typeDecl) {
    type$$44.extendsTypeLinks = getBaseTypeLinks(typeDecl.extendsList, type$$44.extendsTypeLinks);
    type$$44.implementsTypeLinks = getBaseTypeLinks(typeDecl.implementsList, type$$44.implementsTypeLinks);
  }
  function addPrototypeField(classType$$4, ast$$65, context$$50) {
    var field$$3 = new TypeScript$$24.ValueLocation;
    field$$3.typeLink = new TypeScript$$24.TypeLink;
    field$$3.typeLink.ast = ast$$65;
    field$$3.typeLink.type = classType$$4.instanceType;
    var fieldSymbol$$1 = new TypeScript$$24.FieldSymbol("prototype", ast$$65.minChar, context$$50.checker.locationInfo.unitIndex, true, field$$3);
    fieldSymbol$$1.flags |= TypeScript$$24.SymbolFlags.Property | TypeScript$$24.SymbolFlags.BuiltIn;
    field$$3.symbol = fieldSymbol$$1;
    fieldSymbol$$1.declAST = ast$$65;
    classType$$4.members.addPublicMember("prototype", fieldSymbol$$1);
  }
  function createNewConstructGroupForType(type$$45) {
    var signature$$6 = new TypeScript$$24.Signature;
    signature$$6.returnType = new TypeScript$$24.TypeLink;
    signature$$6.returnType.type = type$$45.instanceType;
    signature$$6.parameters = [];
    type$$45.construct = new TypeScript$$24.SignatureGroup;
    type$$45.construct.addSignature(signature$$6);
  }
  function cloneParentConstructGroupForChildType(child$$1, parent$$53) {
    child$$1.construct = new TypeScript$$24.SignatureGroup;
    var sig$$1 = null;
    if (!parent$$53.construct) {
      createNewConstructGroupForType(parent$$53);
    }
    var i$$84 = 0;
    for (;i$$84 < parent$$53.construct.signatures.length;i$$84++) {
      sig$$1 = new TypeScript$$24.Signature;
      sig$$1.parameters = parent$$53.construct.signatures[i$$84].parameters;
      sig$$1.nonOptionalParameterCount = parent$$53.construct.signatures[i$$84].nonOptionalParameterCount;
      sig$$1.typeCheckStatus = parent$$53.construct.signatures[i$$84].typeCheckStatus;
      sig$$1.declAST = parent$$53.construct.signatures[i$$84].declAST;
      sig$$1.returnType = new TypeScript$$24.TypeLink;
      sig$$1.returnType.type = child$$1.instanceType;
      child$$1.construct.addSignature(sig$$1);
    }
  }
  function findTypeSymbolInScopeChain(name$$83, scopeChain$$2) {
    var symbol$$14 = scopeChain$$2.scope.find(name$$83, false, true);
    if (symbol$$14 == null && scopeChain$$2.previous) {
      symbol$$14 = findTypeSymbolInScopeChain(name$$83, scopeChain$$2.previous);
    }
    return symbol$$14;
  }
  function findSymbolFromAlias(alias$$2, context$$51) {
    var symbol$$15 = null;
    switch(alias$$2.nodeType) {
      case TypeScript$$24.NodeType.Name:
        var name$$84 = alias$$2.text;
        var isDynamic = TypeScript$$24.isQuoted(name$$84);
        var findSym = function(id$$20) {
          if (context$$51.members) {
            return context$$51.members.lookup(name$$84);
          } else {
            return findTypeSymbolInScopeChain(name$$84, context$$51.topLevelScope);
          }
        };
        if (isDynamic) {
          symbol$$15 = context$$51.tcContext.checker.findSymbolForDynamicModule(name$$84, context$$51.tcContext.script.locationInfo.filename, findSym);
        } else {
          symbol$$15 = findSym(name$$84);
        }
        break;
      case TypeScript$$24.NodeType.Dot:
        var dottedExpr = alias$$2;
        var op1Sym = findSymbolFromAlias(dottedExpr.operand1, context$$51);
        if (op1Sym && op1Sym.getType()) {
          symbol$$15 = findSymbolFromAlias(dottedExpr.operand2, context$$51);
        }
        break;
      default:
        break;
    }
    if (symbol$$15) {
      var symType$$1 = symbol$$15.getType();
      if (symType$$1) {
        var members$$25 = symType$$1.members;
        if (members$$25) {
          context$$51.members = members$$25.publicMembers;
        }
      }
    }
    return symbol$$15;
  }
  function preCollectImportTypes(ast$$66, parent$$54, context$$52) {
    var scopeChain$$3 = context$$52.scopeChain;
    var typeSymbol$$2 = null;
    var modType = null;
    var importDecl$$1 = ast$$66;
    var aliasedModSymbol = findSymbolFromAlias(importDecl$$1.alias, {topLevelScope:scopeChain$$3, members:null, tcContext:context$$52});
    var isGlobal$$1 = context$$52.scopeChain.container == context$$52.checker.gloMod;
    if (aliasedModSymbol) {
      var aliasedModType = aliasedModSymbol.getType();
      if (aliasedModType) {
        modType = aliasedModType;
      }
    }
    typeSymbol$$2 = new TypeScript$$24.TypeSymbol(importDecl$$1.id.text, importDecl$$1.id.minChar, importDecl$$1.limChar - importDecl$$1.minChar, context$$52.checker.locationInfo.unitIndex, modType);
    typeSymbol$$2.aliasLink = importDecl$$1;
    if (context$$52.scopeChain.moduleDecl) {
      typeSymbol$$2.flags |= TypeScript$$24.SymbolFlags.ModuleMember;
      typeSymbol$$2.declModule = context$$52.scopeChain.moduleDecl;
    }
    typeSymbol$$2.declAST = importDecl$$1;
    importDecl$$1.id.sym = typeSymbol$$2;
    scopeChain$$3.scope.enter(scopeChain$$3.container, ast$$66, typeSymbol$$2, context$$52.checker.errorReporter, isGlobal$$1, true, false);
    scopeChain$$3.scope.enter(scopeChain$$3.container, ast$$66, typeSymbol$$2, context$$52.checker.errorReporter, isGlobal$$1, false, false);
    return true;
  }
  function preCollectModuleTypes(ast$$67, parent$$55, context$$53) {
    var scopeChain$$4 = context$$53.scopeChain;
    var moduleDecl$$6 = ast$$67;
    var isAmbient$$5 = TypeScript$$24.hasFlag(moduleDecl$$6.modFlags, TypeScript$$24.ModuleFlags.Ambient);
    var isEnum = TypeScript$$24.hasFlag(moduleDecl$$6.modFlags, TypeScript$$24.ModuleFlags.IsEnum);
    var isGlobal$$2 = context$$53.scopeChain.container == context$$53.checker.gloMod;
    var isExported$$2 = TypeScript$$24.hasFlag(moduleDecl$$6.modFlags, TypeScript$$24.ModuleFlags.Exported);
    var modName$$3 = moduleDecl$$6.name.text;
    var isDynamic$$1 = TypeScript$$24.isQuoted(modName$$3);
    var symbol$$16 = scopeChain$$4.scope.findLocal(modName$$3, false, false);
    var typeSymbol$$3 = null;
    var modType$$1 = null;
    if (symbol$$16 == null || symbol$$16.kind() != TypeScript$$24.SymbolKind.Type) {
      if (modType$$1 == null) {
        var enclosedTypes$$3 = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
        var ambientEnclosedTypes$$3 = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
        modType$$1 = new TypeScript$$24.ModuleType(enclosedTypes$$3, ambientEnclosedTypes$$3);
        if (isEnum) {
          modType$$1.typeFlags |= TypeScript$$24.TypeFlags.IsEnum;
        }
        modType$$1.members = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
        modType$$1.ambientMembers = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
        modType$$1.setHasImplementation();
      }
      typeSymbol$$3 = new TypeScript$$24.TypeSymbol(modName$$3, moduleDecl$$6.name.minChar, modName$$3.length, context$$53.checker.locationInfo.unitIndex, modType$$1);
      typeSymbol$$3.isDynamic = TypeScript$$24.isQuoted(moduleDecl$$6.prettyName);
      if (context$$53.scopeChain.moduleDecl) {
        typeSymbol$$3.declModule = context$$53.scopeChain.moduleDecl;
      }
      typeSymbol$$3.declAST = moduleDecl$$6;
      typeSymbol$$3.prettyName = moduleDecl$$6.prettyName;
      scopeChain$$4.scope.enter(scopeChain$$4.container, ast$$67, typeSymbol$$3, context$$53.checker.errorReporter, isExported$$2 || isGlobal$$2, true, isAmbient$$5);
      scopeChain$$4.scope.enter(scopeChain$$4.container, ast$$67, typeSymbol$$3, context$$53.checker.errorReporter, isExported$$2 || isGlobal$$2, false, isAmbient$$5);
      modType$$1.symbol = typeSymbol$$3;
    } else {
      if (symbol$$16 && symbol$$16.declAST && symbol$$16.declAST.nodeType != TypeScript$$24.NodeType.ModuleDeclaration) {
        context$$53.checker.errorReporter.simpleError(moduleDecl$$6, "Conflicting symbol name for module '" + modName$$3 + "'");
      }
      typeSymbol$$3 = symbol$$16;
      var publicEnclosedTypes = typeSymbol$$3.type.getAllEnclosedTypes().publicMembers;
      var publicEnclosedTypesTable = publicEnclosedTypes == null ? new TypeScript$$24.StringHashTable : publicEnclosedTypes;
      enclosedTypes$$3 = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(publicEnclosedTypesTable, new TypeScript$$24.StringHashTable));
      var publicEnclosedAmbientTypes = typeSymbol$$3.type.getAllAmbientEnclosedTypes().publicMembers;
      var publicAmbientEnclosedTypesTable = publicEnclosedAmbientTypes == null ? new TypeScript$$24.StringHashTable : publicEnclosedAmbientTypes;
      ambientEnclosedTypes$$3 = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(publicAmbientEnclosedTypesTable, new TypeScript$$24.StringHashTable));
      var publicMembers = typeSymbol$$3.type.members.publicMembers;
      var publicMembersTable = publicMembers == null ? new TypeScript$$24.StringHashTable : publicMembers;
      var members$$26 = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(publicMembersTable, new TypeScript$$24.StringHashTable));
      var publicAmbientMembers = typeSymbol$$3.type.ambientMembers.publicMembers;
      var publicAmbientMembersTable = publicAmbientMembers == null ? new TypeScript$$24.StringHashTable : publicAmbientMembers;
      var ambientMembers$$2 = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(publicAmbientMembersTable, new TypeScript$$24.StringHashTable));
      modType$$1 = new TypeScript$$24.ModuleType(enclosedTypes$$3, ambientEnclosedTypes$$3);
      if (isEnum) {
        modType$$1.typeFlags |= TypeScript$$24.TypeFlags.IsEnum;
      }
      modType$$1.members = members$$26;
      modType$$1.ambientMembers = ambientMembers$$2;
      modType$$1.setHasImplementation();
      modType$$1.symbol = typeSymbol$$3;
      typeSymbol$$3.addLocation(moduleDecl$$6.minChar);
      typeSymbol$$3.expansions.push(modType$$1);
      typeSymbol$$3.expansionsDeclAST.push(moduleDecl$$6);
    }
    if (context$$53.scopeChain.moduleDecl) {
      context$$53.scopeChain.moduleDecl.recordNonInterface();
    }
    if (isExported$$2) {
      typeSymbol$$3.flags |= TypeScript$$24.SymbolFlags.Exported;
    }
    if (context$$53.scopeChain.moduleDecl || context$$53.scopeChain.container == context$$53.checker.gloMod) {
      typeSymbol$$3.flags |= TypeScript$$24.SymbolFlags.ModuleMember;
    }
    moduleDecl$$6.mod = modType$$1;
    TypeScript$$24.pushTypeCollectionScope(typeSymbol$$3, modType$$1.members, modType$$1.ambientMembers, modType$$1.enclosedTypes, modType$$1.ambientEnclosedTypes, context$$53, null, null, moduleDecl$$6);
    return true;
  }
  function preCollectClassTypes(ast$$68, parent$$56, context$$54) {
    var scopeChain$$5 = context$$54.scopeChain;
    var classDecl$$7 = ast$$68;
    var classType$$5;
    var instanceType$$4;
    var typeSymbol$$4 = null;
    var className$$4 = classDecl$$7.name.text;
    var alreadyInScope = false;
    var isAmbient$$6 = TypeScript$$24.hasFlag(classDecl$$7.varFlags, TypeScript$$24.VarFlags.Ambient);
    var isExported$$3 = TypeScript$$24.hasFlag(classDecl$$7.varFlags, TypeScript$$24.VarFlags.Exported);
    var isGlobal$$3 = context$$54.scopeChain.container == context$$54.checker.gloMod;
    var containerMod = scopeChain$$5.container;
    var foundValSymbol = false;
    typeSymbol$$4 = scopeChain$$5.scope.findLocal(className$$4, false, true);
    if (!typeSymbol$$4) {
      var valTypeSymbol = scopeChain$$5.scope.findLocal(className$$4, false, false);
      if (valTypeSymbol && valTypeSymbol.isType() && valTypeSymbol.declAST && valTypeSymbol.declAST.nodeType == TypeScript$$24.NodeType.FuncDecl && valTypeSymbol.declAST.isSignature()) {
        typeSymbol$$4 = valTypeSymbol;
        foundValSymbol = true;
        if (isExported$$3) {
          typeSymbol$$4.flags |= TypeScript$$24.SymbolFlags.Exported;
        }
        if (isAmbient$$6) {
          typeSymbol$$4.flags |= TypeScript$$24.SymbolFlags.Ambient;
        }
        context$$54.scopeChain.scope.enter(context$$54.scopeChain.container, ast$$68, typeSymbol$$4, context$$54.checker.errorReporter, isExported$$3 || isGlobal$$3, true, isAmbient$$6);
      }
    }
    if (typeSymbol$$4 && !foundValSymbol && typeSymbol$$4.declAST != classDecl$$7) {
      typeSymbol$$4 = null;
    }
    if (typeSymbol$$4 == null) {
      var valueSymbol = scopeChain$$5.scope.findLocal(className$$4, false, false);
      classType$$5 = new TypeScript$$24.Type;
      classType$$5.setHasImplementation();
      instanceType$$4 = new TypeScript$$24.Type;
      instanceType$$4.setHasImplementation();
      classType$$5.instanceType = instanceType$$4;
      classType$$5.members = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
      classType$$5.ambientMembers = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
      addPrototypeField(classType$$5, classDecl$$7, context$$54);
      instanceType$$4.members = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
      instanceType$$4.ambientMembers = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
      typeSymbol$$4 = new TypeScript$$24.TypeSymbol(className$$4, classDecl$$7.name.minChar, className$$4.length, context$$54.checker.locationInfo.unitIndex, classType$$5);
      typeSymbol$$4.declAST = classDecl$$7;
      typeSymbol$$4.instanceType = instanceType$$4;
      classType$$5.symbol = typeSymbol$$4;
      instanceType$$4.symbol = typeSymbol$$4;
      if (context$$54.scopeChain.moduleDecl) {
        context$$54.scopeChain.moduleDecl.recordNonInterface();
        typeSymbol$$4.declModule = context$$54.scopeChain.moduleDecl;
        typeSymbol$$4.flags |= TypeScript$$24.SymbolFlags.ModuleMember;
      }
      if (isExported$$3) {
        typeSymbol$$4.flags |= TypeScript$$24.SymbolFlags.Exported;
      }
      if (isAmbient$$6) {
        typeSymbol$$4.flags |= TypeScript$$24.SymbolFlags.Ambient;
      }
      ast$$68.type = classType$$5;
      context$$54.scopeChain.scope.enter(context$$54.scopeChain.container, ast$$68, typeSymbol$$4, context$$54.checker.errorReporter, isExported$$3 || isGlobal$$3, true, isAmbient$$6);
      if (valueSymbol == null) {
        context$$54.scopeChain.scope.enter(context$$54.scopeChain.container, ast$$68, typeSymbol$$4, context$$54.checker.errorReporter, isExported$$3 || isGlobal$$3, false, isAmbient$$6);
      }
    } else {
      classType$$5 = typeSymbol$$4.type;
      if (classType$$5.instanceType == null) {
        classType$$5.instanceType = new TypeScript$$24.Type;
        classType$$5.instanceType.setHasImplementation();
        classType$$5.instanceType.members = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
        classType$$5.instanceType.symbol = classType$$5.symbol;
        classType$$5.members = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
        classType$$5.ambientMembers = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
      }
      instanceType$$4 = classType$$5.instanceType;
      ast$$68.type = classType$$5;
    }
    if (!classDecl$$7.constructorDecl) {
      if (typeSymbol$$4 && typeSymbol$$4.declAST && typeSymbol$$4.declAST.type && typeSymbol$$4.declAST.type.call && !typeSymbol$$4.declAST.isOverload) {
        context$$54.checker.errorReporter.duplicateIdentifier(typeSymbol$$4.declAST, typeSymbol$$4.name);
      }
      createNewConstructGroupForType(classDecl$$7.type);
    }
    classType$$5.typeFlags |= TypeScript$$24.TypeFlags.IsClass;
    instanceType$$4.typeFlags |= TypeScript$$24.TypeFlags.IsClass;
    getBases(instanceType$$4, classDecl$$7);
    TypeScript$$24.pushTypeCollectionScope(typeSymbol$$4, instanceType$$4.members, instanceType$$4.ambientMembers, null, null, context$$54, instanceType$$4, classType$$5, null);
    return true;
  }
  function preCollectInterfaceTypes(ast$$69, parent$$57, context$$55) {
    var scopeChain$$6 = context$$55.scopeChain;
    var interfaceDecl$$4 = ast$$69;
    var interfaceSymbol$$1 = null;
    var interfaceType$$2 = null;
    var isExported$$4 = TypeScript$$24.hasFlag(interfaceDecl$$4.varFlags, TypeScript$$24.VarFlags.Exported);
    var isGlobal$$4 = context$$55.scopeChain.container == context$$55.checker.gloMod;
    var alreadyInScope$$1 = true;
    alreadyInScope$$1 = false;
    var interfaceName = interfaceDecl$$4.name.text;
    interfaceSymbol$$1 = scopeChain$$6.scope.findLocal(interfaceName, false, true);
    if (interfaceSymbol$$1 == null) {
      interfaceType$$2 = new TypeScript$$24.Type;
      interfaceSymbol$$1 = new TypeScript$$24.TypeSymbol(interfaceName, interfaceDecl$$4.name.minChar, interfaceName.length, context$$55.checker.locationInfo.unitIndex, interfaceType$$2);
      interfaceType$$2.symbol = interfaceSymbol$$1;
      interfaceType$$2.members = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
      interfaceType$$2.ambientMembers = new TypeScript$$24.ScopedMembers(new TypeScript$$24.DualStringHashTable(new TypeScript$$24.StringHashTable, new TypeScript$$24.StringHashTable));
      interfaceSymbol$$1.declAST = interfaceDecl$$4;
      interfaceSymbol$$1.declModule = context$$55.scopeChain.moduleDecl;
    } else {
      alreadyInScope$$1 = true;
      interfaceType$$2 = interfaceSymbol$$1.type;
    }
    if (!interfaceType$$2) {
      interfaceType$$2 = context$$55.checker.anyType;
    }
    ast$$69.type = interfaceType$$2;
    getBases(interfaceType$$2, interfaceDecl$$4);
    if (isExported$$4) {
      interfaceSymbol$$1.flags |= TypeScript$$24.SymbolFlags.Exported;
    }
    if (context$$55.scopeChain.moduleDecl) {
      interfaceSymbol$$1.flags |= TypeScript$$24.SymbolFlags.ModuleMember;
    }
    if (!alreadyInScope$$1) {
      context$$55.scopeChain.scope.enter(context$$55.scopeChain.container, ast$$69, interfaceSymbol$$1, context$$55.checker.errorReporter, isGlobal$$4 || isExported$$4, true, false);
    }
    TypeScript$$24.pushTypeCollectionScope(interfaceSymbol$$1, interfaceType$$2.members, interfaceType$$2.ambientMembers, null, null, context$$55, interfaceType$$2, null, null);
    return true;
  }
  function preCollectArgDeclTypes(ast$$70, parent$$58, context$$56) {
    var scopeChain$$7 = context$$56.scopeChain;
    var argDecl$$1 = ast$$70;
    if (TypeScript$$24.hasFlag(argDecl$$1.varFlags, TypeScript$$24.VarFlags.Public | TypeScript$$24.VarFlags.Private)) {
      var field$$4 = new TypeScript$$24.ValueLocation;
      var isPrivate$$2 = TypeScript$$24.hasFlag(argDecl$$1.varFlags, TypeScript$$24.VarFlags.Private);
      var fieldSymbol$$2 = new TypeScript$$24.FieldSymbol(argDecl$$1.id.text, argDecl$$1.id.minChar, context$$56.checker.locationInfo.unitIndex, !TypeScript$$24.hasFlag(argDecl$$1.varFlags, TypeScript$$24.VarFlags.Readonly), field$$4);
      fieldSymbol$$2.transferVarFlags(argDecl$$1.varFlags);
      field$$4.symbol = fieldSymbol$$2;
      fieldSymbol$$2.declAST = ast$$70;
      argDecl$$1.parameterPropertySym = fieldSymbol$$2;
      context$$56.scopeChain.scope.enter(context$$56.scopeChain.container, ast$$70, fieldSymbol$$2, context$$56.checker.errorReporter, !isPrivate$$2, false, false);
      field$$4.typeLink = TypeScript$$24.getTypeLink(argDecl$$1.typeExpr, context$$56.checker, argDecl$$1.init == null);
      argDecl$$1.sym = fieldSymbol$$2;
    }
    return false;
  }
  function preCollectVarDeclTypes(ast$$71, parent$$59, context$$57) {
    var scopeChain$$8 = context$$57.scopeChain;
    var varDecl$$12 = ast$$71;
    var isAmbient$$7 = TypeScript$$24.hasFlag(varDecl$$12.varFlags, TypeScript$$24.VarFlags.Ambient);
    var isExported$$5 = TypeScript$$24.hasFlag(varDecl$$12.varFlags, TypeScript$$24.VarFlags.Exported);
    var isGlobal$$5 = context$$57.scopeChain.container == context$$57.checker.gloMod;
    var isProperty = TypeScript$$24.hasFlag(varDecl$$12.varFlags, TypeScript$$24.VarFlags.Property);
    var isStatic$$8 = TypeScript$$24.hasFlag(varDecl$$12.varFlags, TypeScript$$24.VarFlags.Static);
    var isPrivate$$3 = TypeScript$$24.hasFlag(varDecl$$12.varFlags, TypeScript$$24.VarFlags.Private);
    var isOptional$$1 = TypeScript$$24.hasFlag(varDecl$$12.id.flags, TypeScript$$24.ASTFlags.OptionalName);
    if (context$$57.scopeChain.moduleDecl) {
      context$$57.scopeChain.moduleDecl.recordNonInterface();
    }
    if (isProperty || isExported$$5 || context$$57.scopeChain.container == context$$57.checker.gloMod || context$$57.scopeChain.moduleDecl) {
      if (isAmbient$$7) {
        var existingSym = scopeChain$$8.scope.findLocal(varDecl$$12.id.text, false, false);
        if (existingSym) {
          varDecl$$12.sym = existingSym;
          return false;
        }
      }
      if (varDecl$$12.id == null) {
        context$$57.checker.errorReporter.simpleError(varDecl$$12, "Expected variable identifier at this location");
        return false;
      }
      var field$$5 = new TypeScript$$24.ValueLocation;
      var fieldSymbol$$3 = new TypeScript$$24.FieldSymbol(varDecl$$12.id.text, varDecl$$12.id.minChar, context$$57.checker.locationInfo.unitIndex, (varDecl$$12.varFlags & TypeScript$$24.VarFlags.Readonly) == TypeScript$$24.VarFlags.None, field$$5);
      fieldSymbol$$3.transferVarFlags(varDecl$$12.varFlags);
      if (isOptional$$1) {
        fieldSymbol$$3.flags |= TypeScript$$24.SymbolFlags.Optional;
      }
      field$$5.symbol = fieldSymbol$$3;
      fieldSymbol$$3.declAST = ast$$71;
      if (context$$57.scopeChain.moduleDecl || context$$57.scopeChain.container == context$$57.checker.gloMod) {
        fieldSymbol$$3.flags |= TypeScript$$24.SymbolFlags.ModuleMember;
        fieldSymbol$$3.declModule = context$$57.scopeChain.moduleDecl;
      }
      if (TypeScript$$24.hasFlag(varDecl$$12.varFlags, TypeScript$$24.VarFlags.Property) && isStatic$$8 && context$$57.scopeChain.classType) {
        if (!context$$57.scopeChain.classType.members.publicMembers.add(varDecl$$12.id.text, fieldSymbol$$3)) {
          context$$57.checker.errorReporter.duplicateIdentifier(ast$$71, fieldSymbol$$3.name);
        }
        fieldSymbol$$3.container = context$$57.scopeChain.classType.symbol;
      } else {
        context$$57.scopeChain.scope.enter(context$$57.scopeChain.container, ast$$71, fieldSymbol$$3, context$$57.checker.errorReporter, !isPrivate$$3 && (isProperty || isExported$$5 || isGlobal$$5 || isStatic$$8), false, isAmbient$$7);
      }
      if (TypeScript$$24.hasFlag(varDecl$$12.varFlags, TypeScript$$24.VarFlags.Exported)) {
        fieldSymbol$$3.flags |= TypeScript$$24.SymbolFlags.Exported;
      }
      field$$5.typeLink = TypeScript$$24.getTypeLink(varDecl$$12.typeExpr, context$$57.checker, varDecl$$12.init == null);
      varDecl$$12.sym = fieldSymbol$$3;
    }
    return false;
  }
  function preCollectFuncDeclTypes(ast$$72, parent$$60, context$$58) {
    var scopeChain$$9 = context$$58.scopeChain;
    if (context$$58.scopeChain.moduleDecl) {
      context$$58.scopeChain.moduleDecl.recordNonInterface();
    }
    var funcDecl$$22 = ast$$72;
    var fgSym$$3 = null;
    var nameText$$3 = funcDecl$$22.getNameText();
    var isExported$$6 = TypeScript$$24.hasFlag(funcDecl$$22.fncFlags, TypeScript$$24.FncFlags.Exported | TypeScript$$24.FncFlags.ClassPropertyMethodExported);
    var isStatic$$9 = TypeScript$$24.hasFlag(funcDecl$$22.fncFlags, TypeScript$$24.FncFlags.Static);
    var isPrivate$$4 = TypeScript$$24.hasFlag(funcDecl$$22.fncFlags, TypeScript$$24.FncFlags.Private);
    var isConstructor$$3 = funcDecl$$22.isConstructMember() || funcDecl$$22.isConstructor;
    var containerSym = (funcDecl$$22.isMethod() && isStatic$$9 || funcDecl$$22.isAccessor()) && context$$58.scopeChain.classType ? context$$58.scopeChain.classType.symbol : context$$58.scopeChain.container;
    var containerScope = context$$58.scopeChain.scope;
    var isGlobal$$6 = containerSym == context$$58.checker.gloMod;
    var isOptional$$2 = funcDecl$$22.name && TypeScript$$24.hasFlag(funcDecl$$22.name.flags, TypeScript$$24.ASTFlags.OptionalName);
    var go$$2 = false;
    var foundSymbol = false;
    if (isConstructor$$3 && TypeScript$$24.hasFlag(funcDecl$$22.fncFlags, TypeScript$$24.FncFlags.ClassMethod)) {
      containerSym = containerSym.container;
      containerScope = scopeChain$$9.previous.scope;
    }
    funcDecl$$22.unitIndex = context$$58.checker.locationInfo.unitIndex;
    if (!funcDecl$$22.isConstructor && containerSym && containerSym.declAST && containerSym.declAST.nodeType == TypeScript$$24.NodeType.FuncDecl && containerSym.declAST.isConstructor && !funcDecl$$22.isMethod()) {
      return go$$2;
    }
    if (TypeScript$$24.hasFlag(funcDecl$$22.fncFlags, TypeScript$$24.FncFlags.Signature)) {
      var instType$$1 = context$$58.scopeChain.thisType;
      if (nameText$$3 && nameText$$3 != "__missing") {
        if (isStatic$$9) {
          fgSym$$3 = containerSym.type.members.allMembers.lookup(nameText$$3);
        } else {
          fgSym$$3 = containerScope.findLocal(nameText$$3, false, false);
          if (fgSym$$3 == null) {
            fgSym$$3 = containerScope.findLocal(nameText$$3, false, true);
          }
        }
        if (fgSym$$3) {
          foundSymbol = true;
          if (!funcDecl$$22.isSignature() && TypeScript$$24.hasFlag(funcDecl$$22.fncFlags, TypeScript$$24.FncFlags.Ambient) != TypeScript$$24.hasFlag(fgSym$$3.flags, TypeScript$$24.SymbolFlags.Ambient)) {
            fgSym$$3 = null;
          }
        }
      }
      if (fgSym$$3 == null) {
        if (!funcDecl$$22.isSpecialFn()) {
          fgSym$$3 = context$$58.checker.createFunctionSignature(funcDecl$$22, containerSym, containerScope, null, !foundSymbol).declAST.type.symbol;
        } else {
          fgSym$$3 = context$$58.checker.createFunctionSignature(funcDecl$$22, containerSym, containerScope, containerSym, false).declAST.type.symbol;
        }
        if (fgSym$$3.declAST == null || !funcDecl$$22.isSpecialFn()) {
          fgSym$$3.declAST = ast$$72;
        }
      } else {
        if (fgSym$$3.kind() == TypeScript$$24.SymbolKind.Type) {
          fgSym$$3 = context$$58.checker.createFunctionSignature(funcDecl$$22, containerSym, containerScope, fgSym$$3, false).declAST.type.symbol;
        } else {
          context$$58.checker.errorReporter.simpleError(funcDecl$$22, "Function or method '" + funcDecl$$22.name.actualText + "' already declared as a property");
        }
      }
      if (funcDecl$$22.isSpecialFn() && !isStatic$$9) {
        funcDecl$$22.type = instType$$1 ? instType$$1 : fgSym$$3.type;
      } else {
        funcDecl$$22.type = fgSym$$3.type;
      }
    } else {
      if (nameText$$3) {
        if (isStatic$$9) {
          fgSym$$3 = containerSym.type.members.allMembers.lookup(nameText$$3);
        } else {
          if (funcDecl$$22.isConstructor && context$$58.scopeChain.previous) {
            fgSym$$3 = context$$58.scopeChain.previous.scope.findLocal(nameText$$3, false, false);
          }
          if (fgSym$$3 == null) {
            fgSym$$3 = containerScope.findLocal(nameText$$3, false, false);
          }
        }
        if (fgSym$$3) {
          foundSymbol = true;
          if (!isConstructor$$3 && fgSym$$3.declAST.nodeType == TypeScript$$24.NodeType.FuncDecl && !fgSym$$3.declAST.isAccessor() && !fgSym$$3.declAST.isSignature()) {
            fgSym$$3 = null;
            foundSymbol = false;
          }
        }
      }
      if (fgSym$$3 && !fgSym$$3.isAccessor() && fgSym$$3.type && fgSym$$3.type.construct && fgSym$$3.type.construct.signatures != [] && (fgSym$$3.type.construct.signatures[0].declAST == null || !TypeScript$$24.hasFlag(fgSym$$3.type.construct.signatures[0].declAST.fncFlags, TypeScript$$24.FncFlags.Ambient)) && !funcDecl$$22.isConstructor) {
        context$$58.checker.errorReporter.simpleError(funcDecl$$22, "Functions may not have class overloads");
      }
      if (fgSym$$3 && !(fgSym$$3.kind() == TypeScript$$24.SymbolKind.Type) && funcDecl$$22.isMethod() && !funcDecl$$22.isAccessor() && !funcDecl$$22.isConstructor) {
        context$$58.checker.errorReporter.simpleError(funcDecl$$22, "Function or method '" + funcDecl$$22.name.actualText + "' already declared as a property");
        fgSym$$3.type = context$$58.checker.anyType;
      }
      var sig$$2 = context$$58.checker.createFunctionSignature(funcDecl$$22, containerSym, containerScope, fgSym$$3, !foundSymbol);
      if ((!fgSym$$3 || fgSym$$3.declAST.nodeType != TypeScript$$24.NodeType.FuncDecl) && funcDecl$$22.isAccessor() || fgSym$$3 && fgSym$$3.isAccessor()) {
        funcDecl$$22.accessorSymbol = context$$58.checker.createAccessorSymbol(funcDecl$$22, fgSym$$3, containerSym.type, funcDecl$$22.isMethod() && isStatic$$9, true, containerScope, containerSym);
      }
      funcDecl$$22.type.symbol.declAST = ast$$72;
      if (funcDecl$$22.isConstructor) {
        go$$2 = true;
      }
    }
    if (isExported$$6) {
      if (funcDecl$$22.type.call) {
        funcDecl$$22.type.symbol.flags |= TypeScript$$24.SymbolFlags.Exported;
      }
      if (fgSym$$3 && !fgSym$$3.isAccessor() && fgSym$$3.kind() == TypeScript$$24.SymbolKind.Type && fgSym$$3.type.call) {
        fgSym$$3.flags |= TypeScript$$24.SymbolFlags.Exported;
      }
    }
    if (context$$58.scopeChain.moduleDecl && !funcDecl$$22.isSpecialFn()) {
      funcDecl$$22.type.symbol.flags |= TypeScript$$24.SymbolFlags.ModuleMember;
      funcDecl$$22.type.symbol.declModule = context$$58.scopeChain.moduleDecl;
    }
    if (fgSym$$3 && isOptional$$2) {
      fgSym$$3.flags |= TypeScript$$24.SymbolFlags.Optional;
    }
    return go$$2;
  }
  function preCollectTypes(ast$$73, parent$$61, walker$$46) {
    var context$$59 = walker$$46.state;
    var go$$3 = false;
    var scopeChain$$10 = context$$59.scopeChain;
    if (ast$$73.nodeType == TypeScript$$24.NodeType.Script) {
      var script$$15 = ast$$73;
      context$$59.script = script$$15;
      go$$3 = true;
    } else {
      if (ast$$73.nodeType == TypeScript$$24.NodeType.List) {
        go$$3 = true;
      } else {
        if (ast$$73.nodeType == TypeScript$$24.NodeType.ImportDeclaration) {
          go$$3 = preCollectImportTypes(ast$$73, parent$$61, context$$59);
        } else {
          if (ast$$73.nodeType == TypeScript$$24.NodeType.With) {
            go$$3 = false;
          } else {
            if (ast$$73.nodeType == TypeScript$$24.NodeType.ModuleDeclaration) {
              go$$3 = preCollectModuleTypes(ast$$73, parent$$61, context$$59);
            } else {
              if (ast$$73.nodeType == TypeScript$$24.NodeType.ClassDeclaration) {
                go$$3 = preCollectClassTypes(ast$$73, parent$$61, context$$59);
              } else {
                if (ast$$73.nodeType == TypeScript$$24.NodeType.Block) {
                  go$$3 = true;
                } else {
                  if (ast$$73.nodeType == TypeScript$$24.NodeType.InterfaceDeclaration) {
                    go$$3 = preCollectInterfaceTypes(ast$$73, parent$$61, context$$59);
                  } else {
                    if (ast$$73.nodeType == TypeScript$$24.NodeType.ArgDecl) {
                      go$$3 = preCollectArgDeclTypes(ast$$73, parent$$61, context$$59);
                    } else {
                      if (ast$$73.nodeType == TypeScript$$24.NodeType.VarDecl) {
                        go$$3 = preCollectVarDeclTypes(ast$$73, parent$$61, context$$59);
                      } else {
                        if (ast$$73.nodeType == TypeScript$$24.NodeType.FuncDecl) {
                          go$$3 = preCollectFuncDeclTypes(ast$$73, parent$$61, context$$59);
                        } else {
                          if (ast$$73.isStatementOrExpression() && context$$59.scopeChain.moduleDecl) {
                            context$$59.scopeChain.moduleDecl.recordNonInterface();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    walker$$46.options.goChildren = go$$3;
    return ast$$73;
  }
  function postCollectTypes(ast$$74, parent$$62, walker$$47) {
    var context$$60 = walker$$47.state;
    if (ast$$74.nodeType == TypeScript$$24.NodeType.ModuleDeclaration) {
      TypeScript$$24.popTypeCollectionScope(context$$60);
    } else {
      if (ast$$74.nodeType == TypeScript$$24.NodeType.ClassDeclaration) {
        TypeScript$$24.popTypeCollectionScope(context$$60);
      } else {
        if (ast$$74.nodeType == TypeScript$$24.NodeType.InterfaceDeclaration) {
          TypeScript$$24.popTypeCollectionScope(context$$60);
        }
      }
    }
    return ast$$74;
  }
  var Continuation = function() {
    function Continuation$$1(normalBlock) {
      this.normalBlock = normalBlock;
      this.exceptionBlock = -1;
    }
    return Continuation$$1;
  }();
  TypeScript$$24.Continuation = Continuation;
  TypeScript$$24.createNewConstructGroupForType = createNewConstructGroupForType;
  TypeScript$$24.cloneParentConstructGroupForChildType = cloneParentConstructGroupForChildType;
  TypeScript$$24.globalId = "__GLO";
  TypeScript$$24.preCollectImportTypes = preCollectImportTypes;
  TypeScript$$24.preCollectModuleTypes = preCollectModuleTypes;
  TypeScript$$24.preCollectClassTypes = preCollectClassTypes;
  TypeScript$$24.preCollectInterfaceTypes = preCollectInterfaceTypes;
  TypeScript$$24.preCollectArgDeclTypes = preCollectArgDeclTypes;
  TypeScript$$24.preCollectVarDeclTypes = preCollectVarDeclTypes;
  TypeScript$$24.preCollectFuncDeclTypes = preCollectFuncDeclTypes;
  TypeScript$$24.preCollectTypes = preCollectTypes;
  TypeScript$$24.postCollectTypes = postCollectTypes;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$25) {
  var ScopeChain = function() {
    function ScopeChain$$1(container$$14, previous$$1, scope$$29) {
      this.container = container$$14;
      this.previous = previous$$1;
      this.scope = scope$$29;
    }
    return ScopeChain$$1;
  }();
  TypeScript$$25.ScopeChain = ScopeChain;
  var BBUseDefInfo = function() {
    function BBUseDefInfo$$1(bb$$1) {
      this.bb = bb$$1;
      this.defsBySymbol = new Array;
      this.useIndexBySymbol = new Array;
    }
    BBUseDefInfo$$1.prototype.updateTop = function() {
      var temp$$16 = new BitVector(this.top.bitCount);
      var i$$85 = 0;
      var succLen = this.bb.successors.length;
      for (;i$$85 < succLen;i$$85++) {
        var succ = this.bb.successors[i$$85];
        if (succ.useDef) {
          temp$$16.union(succ.useDef.top);
        }
      }
      temp$$16.difference(this.kill);
      temp$$16.union(this.gen);
      var changed = temp$$16.notEq(this.top);
      this.top = temp$$16;
      return changed;
    };
    BBUseDefInfo$$1.prototype.initialize = function(useDefContext) {
      function initUseDefPre(cur$$9, parent$$63, walker$$48) {
        var context$$61 = walker$$48.state;
        if (cur$$9 == null) {
          cur$$9 = null;
        }
        if (cur$$9.nodeType == TypeScript$$25.NodeType.VarDecl) {
          var varDecl$$13 = cur$$9;
          if (varDecl$$13.init || TypeScript$$25.hasFlag(varDecl$$13.varFlags, TypeScript$$25.VarFlags.AutoInit)) {
            defSym(varDecl$$13.sym, context$$61);
          }
        } else {
          if (cur$$9.nodeType == TypeScript$$25.NodeType.Name) {
            if (parent$$63) {
              if (parent$$63.nodeType == TypeScript$$25.NodeType.Asg) {
                var asg = parent$$63;
                if (asg.operand1 == cur$$9) {
                  return cur$$9;
                }
              } else {
                if (parent$$63.nodeType == TypeScript$$25.NodeType.VarDecl) {
                  var parentDecl = parent$$63;
                  if (parentDecl.id == cur$$9) {
                    return cur$$9;
                  }
                }
              }
            }
            var id$$21 = cur$$9;
            useSym(id$$21.sym, context$$61, cur$$9);
          } else {
            if (cur$$9.nodeType >= TypeScript$$25.NodeType.Asg && cur$$9.nodeType <= TypeScript$$25.NodeType.LastAsg) {
              asg = cur$$9;
              if (asg.operand1 && asg.operand1.nodeType == TypeScript$$25.NodeType.Name) {
                id$$21 = asg.operand1;
                defSym(id$$21.sym, context$$61);
              }
            } else {
              if (cur$$9.nodeType == TypeScript$$25.NodeType.FuncDecl) {
                walker$$48.options.goChildren = false;
              }
            }
          }
        }
        return cur$$9;
      }
      var _this$$3 = this;
      var defSym = function(sym$$29, context$$62) {
        if (context$$62.isLocalSym(sym$$29)) {
          var index$$52 = context$$62.getSymbolIndex(sym$$29);
          _this$$3.useIndexBySymbol[index$$52] = new Array;
          _this$$3.defsBySymbol[index$$52] = true;
        }
      };
      var useSym = function(sym$$30, context$$63, ast$$75) {
        if (context$$63.isLocalSym(sym$$30)) {
          var symIndex = context$$63.getSymbolIndex(sym$$30);
          if (_this$$3.useIndexBySymbol[symIndex] == undefined) {
            _this$$3.useIndexBySymbol[symIndex] = new Array;
          }
          var symUses = _this$$3.useIndexBySymbol[symIndex];
          var astIndex = context$$63.getUseIndex(ast$$75);
          context$$63.addUse(symIndex, astIndex);
          symUses.push(astIndex);
        }
      };
      var options$$6 = new TypeScript$$25.AstWalkOptions;
      options$$6.reverseSiblings = true;
      TypeScript$$25.getAstWalkerFactory().walk(this.bb.content, initUseDefPre, null, options$$6, useDefContext);
    };
    BBUseDefInfo$$1.prototype.initializeGen = function(useDefContext$$1) {
      var symbolLen = this.useIndexBySymbol.length;
      var bitCount = useDefContext$$1.uses.length;
      this.gen = new BitVector(bitCount);
      var s$$24 = 0;
      for (;s$$24 < symbolLen;s$$24++) {
        var symUses$$1 = this.useIndexBySymbol[s$$24];
        if (symUses$$1 != undefined && symUses$$1.length > 0) {
          var u = 0;
          var uLen = symUses$$1.length;
          for (;u < uLen;u++) {
            this.gen.set(symUses$$1[u], true);
          }
        }
      }
      this.top = this.gen;
    };
    BBUseDefInfo$$1.prototype.initializeKill = function(useDefContext$$2) {
      this.kill = new BitVector(this.gen.bitCount);
      var s$$25 = 0;
      var symbolLen$$1 = this.defsBySymbol.length;
      for (;s$$25 < symbolLen$$1;s$$25++) {
        if (this.defsBySymbol[s$$25]) {
          var globalSymUses = useDefContext$$2.useIndexBySymbol[s$$25];
          if (globalSymUses) {
            var u$$1 = 0;
            var useLen = globalSymUses.length;
            for (;u$$1 < useLen;u$$1++) {
              this.kill.set(globalSymUses[u$$1], true);
            }
          }
        }
      }
    };
    return BBUseDefInfo$$1;
  }();
  TypeScript$$25.BBUseDefInfo = BBUseDefInfo;
  var UseDefContext = function() {
    function UseDefContext$$1() {
      this.useIndexBySymbol = new Array;
      this.uses = new Array;
      this.symbols = new Array;
      this.symbolMap = new TypeScript$$25.StringHashTable;
      this.symbolCount = 0;
    }
    UseDefContext$$1.prototype.getSymbolIndex = function(sym$$31) {
      var name$$85 = sym$$31.name;
      var index$$53 = this.symbolMap.lookup(name$$85);
      if (index$$53 == null) {
        index$$53 = this.symbolCount++;
        this.symbols[index$$53] = sym$$31;
        this.symbolMap.add(name$$85, index$$53);
      }
      return index$$53;
    };
    UseDefContext$$1.prototype.addUse = function(symIndex$$1, astIndex$$1) {
      var useBySym = this.useIndexBySymbol[symIndex$$1];
      if (useBySym == undefined) {
        useBySym = new Array;
        this.useIndexBySymbol[symIndex$$1] = useBySym;
      }
      useBySym[useBySym.length] = astIndex$$1;
    };
    UseDefContext$$1.prototype.getUseIndex = function(ast$$76) {
      this.uses[this.uses.length] = ast$$76;
      return this.uses.length - 1;
    };
    UseDefContext$$1.prototype.isLocalSym = function(sym$$32) {
      return sym$$32 && sym$$32.container == this.func && sym$$32.kind() == TypeScript$$25.SymbolKind.Variable;
    };
    UseDefContext$$1.prototype.killSymbol = function(sym$$33, bbUses) {
      var index$$54 = this.symbolMap.lookup(sym$$33.name);
      var usesOfSym = this.useIndexBySymbol[index$$54];
      var k$$7 = 0;
      var len$$31 = usesOfSym.length;
      for (;k$$7 < len$$31;k$$7++) {
        bbUses.set(usesOfSym[k$$7], true);
      }
    };
    return UseDefContext$$1;
  }();
  TypeScript$$25.UseDefContext = UseDefContext;
  var BitVector = function() {
    function BitVector$$1(bitCount$$1) {
      this.bitCount = bitCount$$1;
      this.firstBits = 0;
      this.restOfBits = null;
      if (this.bitCount > BitVector$$1.packBits) {
        this.restOfBits = new Array;
        var len$$32 = Math.floor(this.bitCount / BitVector$$1.packBits);
        var i$$86 = 0;
        for (;i$$86 < len$$32;i$$86++) {
          this.restOfBits[i$$86] = 0;
        }
      }
    }
    BitVector$$1.packBits = 30;
    BitVector$$1.prototype.set = function(bitIndex, value$$40) {
      if (bitIndex < BitVector$$1.packBits) {
        if (value$$40) {
          this.firstBits |= 1 << bitIndex;
        } else {
          this.firstBits &= ~(1 << bitIndex);
        }
      } else {
        var offset$$9 = Math.floor(bitIndex / BitVector$$1.packBits) - 1;
        var localIndex = bitIndex % BitVector$$1.packBits;
        if (value$$40) {
          this.restOfBits[offset$$9] |= 1 << localIndex;
        } else {
          this.restOfBits[offset$$9] &= ~(1 << localIndex);
        }
      }
    };
    BitVector$$1.prototype.map = function(fn$$7) {
      var k$$8;
      k$$8 = 0;
      for (;k$$8 < BitVector$$1.packBits;k$$8++) {
        if (k$$8 == this.bitCount) {
          return;
        }
        if ((1 << k$$8 & this.firstBits) != 0) {
          fn$$7(k$$8);
        }
      }
      if (this.restOfBits) {
        var len$$33;
        var cumu = BitVector$$1.packBits;
        k$$8 = 0, len$$33 = this.restOfBits.length;
        for (;k$$8 < len$$33;k$$8++) {
          var myBits = this.restOfBits[k$$8];
          var j$$11 = 0;
          for (;j$$11 < BitVector$$1.packBits;j$$11++) {
            if ((1 << j$$11 & myBits) != 0) {
              fn$$7(cumu);
            }
            cumu++;
            if (cumu == this.bitCount) {
              return;
            }
          }
        }
      }
    };
    BitVector$$1.prototype.union = function(b$$10) {
      this.firstBits |= b$$10.firstBits;
      if (this.restOfBits) {
        var k$$9 = 0;
        var len$$34 = this.restOfBits.length;
        for (;k$$9 < len$$34;k$$9++) {
          var myBits$$1 = this.restOfBits[k$$9];
          var bBits = b$$10.restOfBits[k$$9];
          this.restOfBits[k$$9] = myBits$$1 | bBits;
        }
      }
    };
    BitVector$$1.prototype.intersection = function(b$$11) {
      this.firstBits &= b$$11.firstBits;
      if (this.restOfBits) {
        var k$$10 = 0;
        var len$$35 = this.restOfBits.length;
        for (;k$$10 < len$$35;k$$10++) {
          var myBits$$2 = this.restOfBits[k$$10];
          var bBits$$1 = b$$11.restOfBits[k$$10];
          this.restOfBits[k$$10] = myBits$$2 & bBits$$1;
        }
      }
    };
    BitVector$$1.prototype.notEq = function(b$$12) {
      if (this.firstBits != b$$12.firstBits) {
        return true;
      }
      if (this.restOfBits) {
        var k$$11 = 0;
        var len$$36 = this.restOfBits.length;
        for (;k$$11 < len$$36;k$$11++) {
          var myBits$$3 = this.restOfBits[k$$11];
          var bBits$$2 = b$$12.restOfBits[k$$11];
          if (myBits$$3 != bBits$$2) {
            return true;
          }
        }
      }
      return false;
    };
    BitVector$$1.prototype.difference = function(b$$13) {
      var oldFirstBits = this.firstBits;
      this.firstBits &= ~b$$13.firstBits;
      if (this.restOfBits) {
        var k$$12 = 0;
        var len$$37 = this.restOfBits.length;
        for (;k$$12 < len$$37;k$$12++) {
          var myBits$$4 = this.restOfBits[k$$12];
          var bBits$$3 = b$$13.restOfBits[k$$12];
          this.restOfBits[k$$12] &= ~bBits$$3;
        }
      }
    };
    return BitVector$$1;
  }();
  TypeScript$$25.BitVector = BitVector;
  var BasicBlock = function() {
    function BasicBlock$$1() {
      this.predecessors = new Array;
      this.index = -1;
      this.markValue = 0;
      this.successors = new Array;
      this.useDef = null;
      this.content = new TypeScript$$25.ASTList;
    }
    BasicBlock$$1.prototype.marked = function(markBase) {
      return this.markValue > markBase;
    };
    BasicBlock$$1.prototype.mark = function() {
      this.markValue++;
    };
    BasicBlock$$1.prototype.addSuccessor = function(successor) {
      this.successors[this.successors.length] = successor;
      successor.predecessors[successor.predecessors.length] = this;
    };
    return BasicBlock$$1;
  }();
  TypeScript$$25.BasicBlock = BasicBlock;
  var ControlFlowContext = function() {
    function ControlFlowContext$$1(current$$3, exit$$1) {
      this.current = current$$3;
      this.exit = exit$$1;
      this.entry = null;
      this.unreachable = null;
      this.noContinuation = false;
      this.statementStack = new Array;
      this.currentSwitch = new Array;
      this.markBase = 0;
      this.linearBBs = new Array;
      this.entry = this.current;
    }
    ControlFlowContext$$1.prototype.walk = function(ast$$77, parent$$64) {
      return this.walker.walk(ast$$77, parent$$64);
    };
    ControlFlowContext$$1.prototype.pushSwitch = function(bb$$2) {
      this.currentSwitch.push(bb$$2);
    };
    ControlFlowContext$$1.prototype.popSwitch = function() {
      return this.currentSwitch.pop();
    };
    ControlFlowContext$$1.prototype.reportUnreachable = function(er) {
      if (this.unreachable && this.unreachable.length > 0) {
        var len$$38 = this.unreachable.length;
        var i$$87 = 0;
        for (;i$$87 < len$$38;i$$87++) {
          var unreachableAST = this.unreachable[i$$87];
          if (unreachableAST.nodeType != TypeScript$$25.NodeType.EndCode) {
            er.simpleError(unreachableAST, "unreachable code");
          }
        }
      }
    };
    ControlFlowContext$$1.prototype.printAST = function(ast$$78, outfile$$12) {
      var printContext = new TypeScript$$25.PrintContext(outfile$$12, null);
      printContext.increaseIndent();
      TypeScript$$25.getAstWalkerFactory().walk(ast$$78, TypeScript$$25.prePrintAST, TypeScript$$25.postPrintAST, null, printContext);
      printContext.decreaseIndent();
    };
    ControlFlowContext$$1.prototype.printBlockContent = function(bb$$3, outfile$$13) {
      var content$$4 = bb$$3.content;
      var i$$88 = 0;
      var len$$39 = content$$4.members.length;
      for (;i$$88 < len$$39;i$$88++) {
        var ast$$79 = content$$4.members[i$$88];
        this.printAST(ast$$79, outfile$$13);
      }
    };
    ControlFlowContext$$1.prototype.bfs = function(nodeFunc, edgeFunc, preEdges, postEdges) {
      var markValue = this.markBase++;
      var q = new Array;
      q[q.length] = this.entry;
      for (;q.length > 0;) {
        var bb$$4 = q.pop();
        if (!bb$$4.marked(markValue)) {
          bb$$4.mark();
          if (nodeFunc) {
            nodeFunc(bb$$4);
          }
          var succLen$$1 = bb$$4.successors.length;
          if (succLen$$1 > 0) {
            if (preEdges) {
              preEdges();
            }
            var j$$12 = succLen$$1 - 1;
            for (;j$$12 >= 0;j$$12--) {
              var successor$$1 = bb$$4.successors[j$$12];
              if (!successor$$1.marked(this.markBase)) {
                if (edgeFunc) {
                  edgeFunc(bb$$4, successor$$1);
                }
                q[q.length] = successor$$1;
              }
            }
            if (postEdges) {
              postEdges();
            }
          }
        }
      }
    };
    ControlFlowContext$$1.prototype.useDef = function(er$$1, funcSym) {
      var _this$$4 = this;
      var useDefContext$$3 = new UseDefContext;
      useDefContext$$3.func = funcSym;
      var useDefInit = function(bb$$5) {
        bb$$5.useDef = new BBUseDefInfo(bb$$5);
        bb$$5.useDef.initialize(useDefContext$$3);
        _this$$4.linearBBs[_this$$4.linearBBs.length] = bb$$5;
      };
      this.bfs(useDefInit, null, null, null);
      var i$$89;
      var bbLen;
      i$$89 = 0, bbLen = this.linearBBs.length;
      for (;i$$89 < bbLen;i$$89++) {
        this.linearBBs[i$$89].useDef.initializeGen(useDefContext$$3);
        this.linearBBs[i$$89].useDef.initializeKill(useDefContext$$3);
      }
      var changed$$1 = true;
      for (;changed$$1;) {
        changed$$1 = false;
        i$$89 = 0;
        for (;i$$89 < bbLen;i$$89++) {
          changed$$1 = this.linearBBs[i$$89].useDef.updateTop() || changed$$1;
        }
      }
      var top$$1 = this.entry.useDef.top;
      top$$1.map(function(index$$55) {
        var ast$$80 = useDefContext$$3.uses[index$$55];
        er$$1.simpleError(ast$$80, "use of variable '" + ast$$80.actualText + "' that is not definitely assigned");
      });
    };
    ControlFlowContext$$1.prototype.print = function(outfile$$14) {
      function preEdges$$1() {
        outfile$$14.Write("  Branches to ");
      }
      function postEdges$$1() {
        outfile$$14.WriteLine("");
      }
      function edge(node1, node2) {
        if (node2.index < 0) {
          node2.index = index$$56++;
        }
        outfile$$14.Write(node2.index + " ");
      }
      var _this$$5 = this;
      var index$$56 = 0;
      var node$$3 = function(bb$$6) {
        if (bb$$6.index < 0) {
          bb$$6.index = index$$56++;
        }
        if (bb$$6 == _this$$5.exit) {
          outfile$$14.WriteLine("Exit block with index " + bb$$6.index);
        } else {
          outfile$$14.WriteLine("Basic block with index " + bb$$6.index);
          _this$$5.printBlockContent(bb$$6, outfile$$14);
        }
      };
      this.bfs(node$$3, edge, preEdges$$1, postEdges$$1);
      if (this.unreachable != null) {
        var i$$90 = 0;
        var len$$40 = this.unreachable.length;
        for (;i$$90 < len$$40;i$$90++) {
          outfile$$14.WriteLine("Unreachable basic block ...");
          this.printAST(this.unreachable[i$$90], outfile$$14);
        }
      }
    };
    ControlFlowContext$$1.prototype.pushStatement = function(stmt$$5, continueBB, breakBB) {
      this.statementStack.push({stmt:stmt$$5, continueBB:continueBB, breakBB:breakBB});
    };
    ControlFlowContext$$1.prototype.popStatement = function() {
      return this.statementStack.pop();
    };
    ControlFlowContext$$1.prototype.returnStmt = function() {
      this.current.addSuccessor(this.exit);
      this.setUnreachable();
    };
    ControlFlowContext$$1.prototype.setUnreachable = function() {
      this.current = null;
      this.noContinuation = true;
    };
    ControlFlowContext$$1.prototype.addUnreachable = function(ast$$81) {
      if (this.unreachable === null) {
        this.unreachable = new Array;
      }
      this.unreachable[this.unreachable.length] = ast$$81;
    };
    ControlFlowContext$$1.prototype.unconditionalBranch = function(target$$34, isContinue) {
      var targetBB = null;
      var i$$91 = 0;
      var len$$41 = this.statementStack.length;
      for (;i$$91 < len$$41;i$$91++) {
        var targetInfo$$5 = this.statementStack[i$$91];
        if (targetInfo$$5.stmt == target$$34) {
          if (isContinue) {
            targetBB = targetInfo$$5.continueBB;
          } else {
            targetBB = targetInfo$$5.breakBB;
          }
          break;
        }
      }
      if (targetBB) {
        this.current.addSuccessor(targetBB);
      }
      this.setUnreachable();
    };
    ControlFlowContext$$1.prototype.addContent = function(ast$$82) {
      if (this.current) {
        this.current.content.append(ast$$82);
      }
    };
    return ControlFlowContext$$1;
  }();
  TypeScript$$25.ControlFlowContext = ControlFlowContext;
  var ResolutionDataCache = function() {
    function ResolutionDataCache$$1() {
      this.cacheSize = 16;
      this.rdCache = [];
      this.nextUp = 0;
      var i$$92 = 0;
      for (;i$$92 < this.cacheSize;i$$92++) {
        this.rdCache[i$$92] = {actuals:new Array, exactCandidates:new Array, conversionCandidates:new Array, id:i$$92};
      }
    }
    ResolutionDataCache$$1.prototype.getResolutionData = function() {
      var rd = null;
      if (this.nextUp < this.cacheSize) {
        rd = this.rdCache[this.nextUp];
      }
      if (rd == null) {
        this.cacheSize++;
        rd = {actuals:new Array, exactCandidates:new Array, conversionCandidates:new Array, id:this.cacheSize};
        this.rdCache[this.cacheSize] = rd;
      }
      this.nextUp++;
      return rd;
    };
    ResolutionDataCache$$1.prototype.returnResolutionData = function(rd$$1) {
      rd$$1.actuals.length = 0;
      rd$$1.exactCandidates.length = 0;
      rd$$1.conversionCandidates.length = 0;
      this.nextUp = rd$$1.id;
    };
    return ResolutionDataCache$$1;
  }();
  TypeScript$$25.ResolutionDataCache = ResolutionDataCache;
  var TypeFlow = function() {
    function TypeFlow$$1(logger$$4, initScope, parser$$2, checker$$17) {
      this.logger = logger$$4;
      this.initScope = initScope;
      this.parser = parser$$2;
      this.checker = checker$$17;
      this.thisFnc = null;
      this.thisClassNode = null;
      this.enclosingFncIsMethod = false;
      this.arrayInterfaceType = null;
      this.stringInterfaceType = null;
      this.objectInterfaceType = null;
      this.functionInterfaceType = null;
      this.numberInterfaceType = null;
      this.booleanInterfaceType = null;
      this.iargumentsInterfaceType = null;
      this.currentScript = null;
      this.inImportTypeCheck = false;
      this.inTypeRefTypeCheck = false;
      this.inArrayElementTypeCheck = false;
      this.resolutionDataCache = new ResolutionDataCache;
      this.nestingLevel = 0;
      this.inSuperCall = false;
      this.checker.typeFlow = this;
      this.scope = this.initScope;
      this.globalScope = this.initScope;
      this.doubleType = this.checker.numberType;
      this.booleanType = this.checker.booleanType;
      this.stringType = this.checker.stringType;
      this.anyType = this.checker.anyType;
      this.regexType = this.anyType;
      this.nullType = this.checker.nullType;
      this.voidType = this.checker.voidType;
      this.arrayAnyType = this.checker.makeArrayType(this.anyType);
    }
    TypeFlow$$1.prototype.initLibs = function() {
      var arraySym = this.globalScope.find("Array", false, true);
      if (arraySym && arraySym.kind() == TypeScript$$25.SymbolKind.Type) {
        this.arrayInterfaceType = arraySym.type;
      }
      var stringSym = this.globalScope.find("String", false, true);
      if (stringSym && stringSym.kind() == TypeScript$$25.SymbolKind.Type) {
        this.stringInterfaceType = stringSym.type;
      }
      var objectSym = this.globalScope.find("Object", false, true);
      if (objectSym && objectSym.kind() == TypeScript$$25.SymbolKind.Type) {
        this.objectInterfaceType = objectSym.type;
      }
      var fnSym = this.globalScope.find("Function", false, true);
      if (fnSym && fnSym.kind() == TypeScript$$25.SymbolKind.Type) {
        this.functionInterfaceType = fnSym.type;
      }
      var numberSym = this.globalScope.find("Number", false, true);
      if (numberSym && numberSym.kind() == TypeScript$$25.SymbolKind.Type) {
        this.numberInterfaceType = numberSym.type;
      }
      var booleanSym = this.globalScope.find("Boolean", false, true);
      if (booleanSym && booleanSym.kind() == TypeScript$$25.SymbolKind.Type) {
        this.booleanInterfaceType = booleanSym.type;
      }
      var regexSym = this.globalScope.find("RegExp", false, true);
      if (regexSym && regexSym.kind() == TypeScript$$25.SymbolKind.Type) {
        this.regexType = regexSym.type;
      }
    };
    TypeFlow$$1.prototype.cast = function(ast$$83, type$$46) {
      return this.castWithCoercion(ast$$83, type$$46, true, false);
    };
    TypeFlow$$1.prototype.castWithCoercion = function(ast$$84, type$$47, applyCoercion, typeAssertion) {
      var comparisonInfo$$12 = new TypeScript$$25.TypeComparisonInfo;
      if (this.checker.sourceIsAssignableToTarget(ast$$84.type, type$$47, comparisonInfo$$12) || typeAssertion && this.checker.sourceIsAssignableToTarget(type$$47, ast$$84.type, comparisonInfo$$12)) {
        if (applyCoercion) {
          if (type$$47 == null) {
            ast$$84.type = this.anyType;
          } else {
            if (type$$47.isClass()) {
              ast$$84.type = type$$47.instanceType;
            } else {
              ast$$84.type = type$$47;
            }
          }
        }
        return ast$$84;
      } else {
        this.checker.errorReporter.incompatibleTypes(ast$$84, ast$$84.type, type$$47, null, this.scope, comparisonInfo$$12);
        return ast$$84;
      }
    };
    TypeFlow$$1.prototype.inScopeTypeCheck = function(ast$$85, enclosingScope) {
      var prevScope$$1 = this.scope;
      this.scope = enclosingScope;
      var svThisFnc = this.thisFnc;
      var svThisType = this.thisType;
      var svThisClassNode = this.thisClassNode;
      var svCurrentModDecl = this.checker.currentModDecl;
      var prevMethodStatus = this.enclosingFncIsMethod;
      var container$$15 = this.scope.container;
      var fnc$$1 = null;
      for (;container$$15;) {
        if (container$$15.kind() == TypeScript$$25.SymbolKind.Type) {
          var typeSym$$2 = container$$15;
          var type$$48 = typeSym$$2.type;
          if (type$$48.call) {
            if (fnc$$1 == null) {
              this.enclosingFncIsMethod = typeSym$$2.isMethod;
              fnc$$1 = container$$15.declAST;
            }
          }
          if (type$$48.isClass()) {
            this.thisType = type$$48.instanceType;
            if (typeSym$$2.declAST && typeSym$$2.declAST.nodeType == TypeScript$$25.NodeType.ClassDeclaration) {
              this.thisClassNode = typeSym$$2.declAST;
            }
            break;
          }
          if (type$$48.isModuleType()) {
            this.checker.currentModDecl = typeSym$$2.declAST;
            break;
          }
        }
        container$$15 = container$$15.container;
      }
      this.thisFnc = fnc$$1;
      var updated = this.typeCheck(ast$$85);
      this.thisFnc = svThisFnc;
      this.thisType = svThisType;
      this.thisClassNode = svThisClassNode;
      this.checker.currentModDecl = svCurrentModDecl;
      this.enclosingFncIsMethod = prevMethodStatus;
      this.scope = prevScope$$1;
      return updated;
    };
    TypeFlow$$1.prototype.typeCheck = function(ast$$86) {
      if (ast$$86) {
        return ast$$86.typeCheck(this);
      } else {
        return null;
      }
    };
    TypeFlow$$1.prototype.inScopeTypeCheckDecl = function(ast$$87) {
      if (ast$$87.nodeType == TypeScript$$25.NodeType.VarDecl || ast$$87.nodeType == TypeScript$$25.NodeType.ArgDecl) {
        this.inScopeTypeCheckBoundDecl(ast$$87);
      } else {
        if (ast$$87.nodeType == TypeScript$$25.NodeType.FuncDecl) {
          var funcDecl$$23 = ast$$87;
          if (funcDecl$$23.isAccessor()) {
            this.typeCheckFunction(funcDecl$$23);
          }
        }
      }
    };
    TypeFlow$$1.prototype.inScopeTypeCheckBoundDecl = function(varDecl$$14) {
      var sym$$34 = varDecl$$14.sym;
      var svThisFnc$$1 = this.thisFnc;
      var svThisType$$1 = this.thisType;
      var prevMethodStatus$$1 = this.enclosingFncIsMethod;
      var prevLocationInfo$$1 = this.checker.locationInfo;
      if (sym$$34 && sym$$34.container) {
        var instanceScope = TypeScript$$25.hasFlag(varDecl$$14.varFlags, TypeScript$$25.VarFlags.ClassConstructorProperty) ? sym$$34.container.getType().constructorScope : sym$$34.container.instanceScope();
        if (TypeScript$$25.hasFlag(varDecl$$14.varFlags, TypeScript$$25.VarFlags.Property) && sym$$34.container.declAST.nodeType == TypeScript$$25.NodeType.FuncDecl) {
          this.thisFnc = sym$$34.container.declAST;
        }
        if (instanceScope) {
          var prevScope$$2 = this.scope;
          this.scope = instanceScope;
          var container$$16 = sym$$34.container;
          if (this.checker.units && sym$$34.unitIndex >= 0 && sym$$34.unitIndex < this.checker.units.length) {
            this.checker.locationInfo = this.checker.units[sym$$34.unitIndex];
          } else {
            this.checker.locationInfo = TypeScript$$25.unknownLocationInfo;
          }
          for (;container$$16;) {
            if (container$$16.kind() == TypeScript$$25.SymbolKind.Type) {
              var typeSym$$3 = container$$16;
              var type$$49 = typeSym$$3.type;
              if (type$$49.call) {
                this.enclosingFncIsMethod = typeSym$$3.isMethod;
              }
              if (type$$49.isClass()) {
                this.thisType = type$$49.instanceType;
                break;
              }
            }
            container$$16 = container$$16.container;
          }
          this.typeCheckBoundDecl(varDecl$$14);
          this.scope = prevScope$$2;
        }
      }
      this.thisFnc = svThisFnc$$1;
      this.thisType = svThisType$$1;
      this.checker.locationInfo = prevLocationInfo$$1;
      this.enclosingFncIsMethod = prevMethodStatus$$1;
    };
    TypeFlow$$1.prototype.resolveBoundDecl = function(varDecl$$15) {
      if (varDecl$$15.typeExpr) {
        if (varDecl$$15.typeExpr.type == null || varDecl$$15.typeExpr.type && varDecl$$15.typeExpr.type == this.anyType && this.scope || varDecl$$15.typeExpr.type.symbol == null || !this.checker.typeStatusIsFinished(varDecl$$15.typeExpr.type.symbol.typeCheckStatus)) {
          this.typeCheck(varDecl$$15.typeExpr);
        }
        varDecl$$15.type = varDecl$$15.typeExpr.type;
        if (varDecl$$15.sym) {
          varDecl$$15.sym.setType(varDecl$$15.type);
        }
      } else {
        if (varDecl$$15.init == null) {
          if (this.checker.styleSettings.implicitAny) {
            this.checker.errorReporter.styleError(varDecl$$15, "type implicitly set to 'any'");
          }
          varDecl$$15.type = this.anyType;
          if (varDecl$$15.sym) {
            if (varDecl$$15.sym.isType()) {
              var tsym$$1 = varDecl$$15.sym;
              if (tsym$$1.isMethod) {
                this.checker.errorReporter.simpleError(varDecl$$15, "Cannot bind method group to variable.  (Did you mean to use 'declare function' instead of 'declare var'?)");
                return;
              } else {
                this.checker.errorReporter.simpleError(varDecl$$15, "Cannot bind type to variable");
                return;
              }
            }
            varDecl$$15.sym.setType(varDecl$$15.type);
          }
        }
      }
    };
    TypeFlow$$1.prototype.typeCheckBoundDecl = function(varDecl$$16) {
      var _this$$6 = this;
      var infSym = varDecl$$16.sym;
      if (infSym == null) {
        if (varDecl$$16.init) {
          varDecl$$16.init = this.typeCheck(varDecl$$16.init);
          varDecl$$16.type = this.checker.widenType(varDecl$$16.init.type);
        } else {
          if (this.checker.styleSettings.implicitAny) {
            this.checker.errorReporter.styleError(varDecl$$16, "type implicitly set to 'any'");
          }
          varDecl$$16.type = this.anyType;
        }
      } else {
        if (infSym.typeCheckStatus == TypeScript$$25.TypeCheckStatus.Started) {
          if (this.checker.styleSettings.implicitAny) {
            this.checker.errorReporter.styleError(varDecl$$16, "type implicitly set to 'any'");
          }
          varDecl$$16.type = this.anyType;
          infSym.setType(this.anyType);
        } else {
          if (infSym.typeCheckStatus == TypeScript$$25.TypeCheckStatus.NotStarted) {
            infSym.typeCheckStatus = TypeScript$$25.TypeCheckStatus.Started;
            this.checker.addStartedPTO(infSym);
            var resolved$$1 = false;
            if (varDecl$$16.type == null) {
              if (varDecl$$16.typeExpr) {
                this.resolveBoundDecl(varDecl$$16);
                resolved$$1 = true;
                varDecl$$16.type = varDecl$$16.typeExpr.type;
                infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
              }
            }
            if (varDecl$$16.init) {
              var isLocalStatic = TypeScript$$25.hasFlag(varDecl$$16.varFlags, TypeScript$$25.VarFlags.LocalStatic);
              var prevScope$$3 = this.scope;
              var applyTargetType$$1 = !varDecl$$16.init.isParenthesized;
              if (isLocalStatic) {
                this.scope = varDecl$$16.sym.container.getType().memberScope;
              }
              if (TypeScript$$25.hasFlag(varDecl$$16.varFlags, TypeScript$$25.VarFlags.Property) && this.thisClassNode) {
                TypeScript$$25.getAstWalkerFactory().walk(varDecl$$16.init, function(ast$$88, parent$$65, walker$$49) {
                  if (ast$$88 && ast$$88.nodeType == TypeScript$$25.NodeType.FuncDecl) {
                    if (TypeScript$$25.hasFlag(ast$$88.fncFlags, TypeScript$$25.FncFlags.IsFatArrowFunction)) {
                      ast$$88.fncFlags |= TypeScript$$25.FncFlags.IsPropertyBound;
                    }
                    walker$$49.options.goChildren = false;
                  }
                  return ast$$88;
                });
              }
              this.checker.typeCheckWithContextualType(varDecl$$16.type, this.checker.inProvisionalTypecheckMode(), applyTargetType$$1, varDecl$$16.init);
              this.scope = prevScope$$3;
              if (varDecl$$16.type) {
                var preserveScope = false;
                var preservedContainedScope = null;
                if (varDecl$$16.init.type) {
                  preservedContainedScope = varDecl$$16.init.type.containedScope;
                  preserveScope = true;
                  if (varDecl$$16.init.type == this.voidType) {
                    this.checker.errorReporter.simpleError(varDecl$$16, "Cannot assign type 'void' to variable '" + varDecl$$16.id.actualText + "'");
                  }
                }
                varDecl$$16.init = this.castWithCoercion(varDecl$$16.init, varDecl$$16.type, applyTargetType$$1 && !this.checker.inProvisionalTypecheckMode(), false);
                if (preserveScope && varDecl$$16.init.type.containedScope == null) {
                  varDecl$$16.init.type.containedScope = preservedContainedScope;
                }
              } else {
                varDecl$$16.type = this.checker.widenType(varDecl$$16.init.type);
                if (varDecl$$16.type == this.voidType) {
                  this.checker.errorReporter.simpleError(varDecl$$16, "Cannot assign type 'void' to variable '" + varDecl$$16.id.actualText + "'");
                  varDecl$$16.type = this.anyType;
                }
              }
              infSym.setType(varDecl$$16.type);
            } else {
              if (!resolved$$1) {
                this.resolveBoundDecl(varDecl$$16);
              }
            }
            infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
          } else {
            if (this.checker.typeStatusIsFinished(infSym.typeCheckStatus) && infSym.declAST != varDecl$$16) {
              if (varDecl$$16.init) {
                varDecl$$16.init = this.typeCheck(varDecl$$16.init);
                varDecl$$16.type = infSym.getType();
                varDecl$$16.init = this.cast(varDecl$$16.init, varDecl$$16.type);
              }
            }
          }
        }
      }
      if (varDecl$$16.id && varDecl$$16.sym) {
        varDecl$$16.id.sym = varDecl$$16.sym;
      }
      if (varDecl$$16.sym && varDecl$$16.sym.container) {
        this.checkTypePrivacy(varDecl$$16.sym.getType(), varDecl$$16.sym, function(typeName$$1, isModuleName) {
          return _this$$6.varPrivacyErrorReporter(varDecl$$16, typeName$$1, isModuleName);
        });
      }
      return varDecl$$16;
    };
    TypeFlow$$1.prototype.varPrivacyErrorReporter = function(varDecl$$17, typeName$$2, isModuleName$$1) {
      var typestring = "";
      if (isModuleName$$1) {
        var quotestring = "";
        if (!TypeScript$$25.isQuoted(typeName$$2)) {
          quotestring = "'";
        }
        typestring = " is using inaccessible module " + quotestring + typeName$$2 + quotestring;
      } else {
        typestring = " has or is using private type '" + typeName$$2 + "'";
      }
      if (TypeScript$$25.hasFlag(varDecl$$17.varFlags, TypeScript$$25.VarFlags.Public)) {
        if (varDecl$$17.sym.container.declAST.nodeType == TypeScript$$25.NodeType.InterfaceDeclaration) {
          this.checker.errorReporter.simpleError(varDecl$$17, "property '" + varDecl$$17.sym.name + "' of exported interface" + typestring);
        } else {
          this.checker.errorReporter.simpleError(varDecl$$17, "public member '" + varDecl$$17.sym.name + "' of exported class" + typestring);
        }
      } else {
        this.checker.errorReporter.simpleError(varDecl$$17, "exported variable '" + varDecl$$17.sym.name + "'" + typestring);
      }
    };
    TypeFlow$$1.prototype.typeCheckSuper = function(ast$$89) {
      if (this.thisType && (this.enclosingFncIsMethod && !this.thisFnc.isStatic()) && this.thisType.baseClass()) {
        ast$$89.type = this.thisType.baseClass();
      } else {
        if (!this.enclosingFncIsMethod && this.thisType && this.thisType.baseClass() && this.thisFnc && TypeScript$$25.hasFlag(this.thisFnc.fncFlags, TypeScript$$25.FncFlags.IsFatArrowFunction)) {
          var enclosingFnc = this.thisFnc.enclosingFnc;
          for (;TypeScript$$25.hasFlag(enclosingFnc.fncFlags, TypeScript$$25.FncFlags.IsFatArrowFunction);) {
            enclosingFnc = enclosingFnc.enclosingFnc;
          }
          if (enclosingFnc && (enclosingFnc.isMethod() || enclosingFnc.isConstructor) && !enclosingFnc.isStatic()) {
            ast$$89.type = this.thisType.baseClass();
            enclosingFnc.setHasSuperReferenceInFatArrowFunction();
            return ast$$89;
          }
        }
        ast$$89.type = this.anyType;
        this.checker.errorReporter.invalidSuperReference(ast$$89);
      }
      return ast$$89;
    };
    TypeFlow$$1.prototype.typeCheckThis = function(ast$$90) {
      ast$$90.type = this.anyType;
      var illegalThisRef = false;
      if (this.thisFnc == null) {
        if (this.thisType) {
          if (this.thisClassNode && this.thisClassNode.nodeType == TypeScript$$25.NodeType.ClassDeclaration) {
            illegalThisRef = true;
          } else {
            ast$$90.type = this.thisType;
          }
        } else {
          if (this.checker.currentModDecl) {
            this.checker.errorReporter.simpleError(ast$$90, "'this' may not be referenced within module bodies");
          }
        }
      } else {
        if (this.thisClassNode && (TypeScript$$25.hasFlag(this.thisFnc.fncFlags, TypeScript$$25.FncFlags.IsPropertyBound) || this.inSuperCall && TypeScript$$25.hasFlag(this.thisClassNode.varFlags, TypeScript$$25.VarFlags.ClassSuperMustBeFirstCallInConstructor))) {
          illegalThisRef = true;
        }
        if (this.thisFnc.isMethod() || this.thisFnc.isConstructor || this.thisFnc.isTargetTypedAsMethod) {
          if (this.thisType && !(this.thisFnc.fncFlags & TypeScript$$25.FncFlags.Static)) {
            ast$$90.type = this.thisType;
          }
        }
      }
      if (!this.enclosingFncIsMethod && this.thisFnc && TypeScript$$25.hasFlag(this.thisFnc.fncFlags, TypeScript$$25.FncFlags.IsFatArrowFunction)) {
        if (this.thisFnc.boundToProperty) {
          var container$$17 = this.thisFnc.boundToProperty.sym.container;
          if (container$$17.declAST.nodeType == TypeScript$$25.NodeType.FuncDecl) {
            container$$17.declAST.setHasSelfReference();
          }
        } else {
          var encFnc = this.thisFnc.enclosingFnc;
          var firstEncFnc = encFnc;
          for (;encFnc;) {
            if (this.thisClassNode && TypeScript$$25.hasFlag(encFnc.fncFlags, TypeScript$$25.FncFlags.IsPropertyBound)) {
              illegalThisRef = true;
            }
            if (!TypeScript$$25.hasFlag(encFnc.fncFlags, TypeScript$$25.FncFlags.IsFatArrowFunction) || encFnc.hasSelfReference()) {
              encFnc.setHasSelfReference();
              break;
            }
            encFnc = encFnc.enclosingFnc;
          }
          if (!encFnc && firstEncFnc) {
            encFnc = firstEncFnc;
            encFnc.setHasSelfReference();
          } else {
            if (!encFnc) {
              if (this.thisClassNode) {
                this.thisClassNode.varFlags |= TypeScript$$25.VarFlags.MustCaptureThis;
              } else {
                if (this.checker.currentModDecl) {
                  this.checker.currentModDecl.modFlags |= TypeScript$$25.ModuleFlags.MustCaptureThis;
                } else {
                  this.checker.mustCaptureGlobalThis = true;
                }
              }
            }
          }
          if (encFnc && (encFnc.isMethod() || encFnc.isConstructor) && this.thisType && !TypeScript$$25.hasFlag(encFnc.fncFlags, TypeScript$$25.FncFlags.Static)) {
            ast$$90.type = this.thisType;
          }
        }
      }
      if (illegalThisRef) {
        this.checker.errorReporter.simpleError(ast$$90, "Keyword 'this' cannot be referenced in initializers in a class body, or in super constructor calls");
      }
      return ast$$90;
    };
    TypeFlow$$1.prototype.setTypeFromSymbol = function(ast$$91, symbol$$17) {
      if (symbol$$17.isVariable()) {
        if (symbol$$17.isInferenceSymbol()) {
          var infSym$$1 = symbol$$17;
          if (infSym$$1.declAST && !this.checker.typeStatusIsFinished(infSym$$1.typeCheckStatus)) {
            this.inScopeTypeCheckDecl(infSym$$1.declAST);
          }
          if (!this.checker.styleSettings.innerScopeDeclEscape) {
            if (infSym$$1.declAST && infSym$$1.declAST.nodeType == TypeScript$$25.NodeType.VarDecl) {
              if (this.nestingLevel < infSym$$1.declAST.nestingLevel) {
                this.checker.errorReporter.styleError(ast$$91, "Illegal reference to a variable defined in more nested scope");
              }
            }
          }
        }
        ast$$91.type = symbol$$17.getType();
        if (!symbol$$17.writeable()) {
          ast$$91.flags = ast$$91.flags & ~TypeScript$$25.ASTFlags.Writeable;
        }
      } else {
        if (symbol$$17.isType()) {
          ast$$91.type = symbol$$17.getType();
          ast$$91.flags = ast$$91.flags & ~TypeScript$$25.ASTFlags.Writeable;
        } else {
          ast$$91.type = this.anyType;
          this.checker.errorReporter.symbolDoesNotReferToAValue(ast$$91, symbol$$17.name);
        }
      }
    };
    TypeFlow$$1.prototype.typeCheckName = function(ast$$92) {
      var _this$$7 = this;
      var identifier$$3 = ast$$92;
      if (this.checker.inWith) {
        identifier$$3.type = this.anyType;
      } else {
        var typespace$$24 = this.inTypeRefTypeCheck;
        var idText$$4 = identifier$$3.text;
        var originalIdText$$1 = idText$$4;
        var isDynamicModuleName = TypeScript$$25.isQuoted(identifier$$3.text);
        var symbol$$18 = this.scope.find(idText$$4, false, typespace$$24);
        if (symbol$$18 == null && isDynamicModuleName) {
          symbol$$18 = this.checker.findSymbolForDynamicModule(idText$$4, this.currentScript.locationInfo.filename, function(id$$22) {
            return _this$$7.scope.find(id$$22, false, typespace$$24);
          });
        }
        if (!symbol$$18) {
          if (!identifier$$3.isMissing()) {
            this.checker.errorReporter.unresolvedSymbol(identifier$$3, identifier$$3.text);
          }
          identifier$$3.type = this.anyType;
        } else {
          if (TypeScript$$25.optimizeModuleCodeGen && symbol$$18 && symbol$$18.isType()) {
            var symType$$2 = symbol$$18.getType();
            if (symType$$2 && symbol$$18.aliasLink && symbol$$18.onlyReferencedAsTypeRef) {
              var modDecl$$2 = symType$$2.symbol.declAST;
              if (modDecl$$2 && TypeScript$$25.hasFlag(modDecl$$2.modFlags, TypeScript$$25.ModuleFlags.IsDynamic)) {
                symbol$$18.onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;
              }
            }
          }
          if (symbol$$18.declAST && symbol$$18.declAST.nodeType == TypeScript$$25.NodeType.FuncDecl && !symbol$$18.declAST.returnTypeAnnotation && symbol$$18.declAST.signature.typeCheckStatus == TypeScript$$25.TypeCheckStatus.Started) {
            symbol$$18.declAST.type.symbol.flags |= TypeScript$$25.SymbolFlags.RecursivelyReferenced;
            symbol$$18.declAST.signature.returnType.type = this.anyType;
          }
          this.setTypeFromSymbol(ast$$92, symbol$$18);
          identifier$$3.sym = symbol$$18;
          if (this.thisFnc) {
            if (this.thisFnc.type && symbol$$18.container != this.thisFnc.type.symbol) {
              this.thisFnc.freeVariables[this.thisFnc.freeVariables.length] = symbol$$18;
            }
          }
        }
      }
      return ast$$92;
    };
    TypeFlow$$1.prototype.typeCheckScript = function(script$$16) {
      this.checker.locationInfo = script$$16.locationInfo;
      this.scope = this.checker.globalScope;
      if (!script$$16.topLevelMod) {
        this.addLocalsFromScope(this.scope, this.checker.gloMod, script$$16.vars, this.checker.globals, true);
      }
      this.currentScript = script$$16;
      script$$16.bod = this.typeCheck(script$$16.bod);
      this.currentScript = null;
      return script$$16;
    };
    TypeFlow$$1.prototype.typeCheckBitNot = function(ast$$93) {
      var unex = ast$$93;
      unex.operand = this.typeCheck(unex.operand);
      unex.type = this.doubleType;
      return unex;
    };
    TypeFlow$$1.prototype.typeCheckUnaryNumberOperator = function(ast$$94) {
      var unex$$1 = ast$$94;
      unex$$1.operand = this.typeCheck(unex$$1.operand);
      unex$$1.type = this.doubleType;
      return ast$$94;
    };
    TypeFlow$$1.prototype.typeCheckLogNot = function(ast$$95) {
      var unex$$2 = ast$$95;
      unex$$2.operand = this.typeCheck(unex$$2.operand);
      unex$$2.type = this.booleanType;
      return unex$$2;
    };
    TypeFlow$$1.prototype.astIsWriteable = function(ast$$96) {
      return TypeScript$$25.hasFlag(ast$$96.flags, TypeScript$$25.ASTFlags.Writeable);
    };
    TypeFlow$$1.prototype.typeCheckIncOrDec = function(ast$$97) {
      var unex$$3 = ast$$97;
      var lval$$1 = unex$$3.operand;
      if (!this.astIsWriteable(unex$$3)) {
        this.checker.errorReporter.valueCannotBeModified(unex$$3);
        unex$$3.type = this.doubleType;
      } else {
        unex$$3 = this.typeCheckUnaryNumberOperator(ast$$97);
        if (unex$$3.operand.type != this.checker.numberType && unex$$3.operand.type != this.checker.anyType && !(unex$$3.operand.type.typeFlags & TypeScript$$25.TypeFlags.IsEnum)) {
          this.checker.errorReporter.simpleError(ast$$97, "'++' and '--' may only be applied to operands of type 'number' or 'any'");
        }
      }
      return unex$$3;
    };
    TypeFlow$$1.prototype.typeCheckBitwiseOperator = function(ast$$98, assignment) {
      var binex$$1 = ast$$98;
      var resultType$$1 = null;
      binex$$1.operand1 = this.typeCheck(binex$$1.operand1);
      binex$$1.operand2 = this.typeCheck(binex$$1.operand2);
      var leftType = binex$$1.operand1.type;
      var rightType = binex$$1.operand2.type;
      if (assignment && !this.astIsWriteable(binex$$1)) {
        this.checker.errorReporter.valueCannotBeModified(binex$$1);
      }
      if (this.checker.styleSettings.bitwise) {
        this.checker.errorReporter.styleError(ast$$98, "use of " + TypeScript$$25.nodeTypeTable[binex$$1.nodeType]);
      }
      if (this.checker.sourceIsSubtypeOfTarget(leftType, this.doubleType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.doubleType)) {
        resultType$$1 = this.doubleType;
      } else {
        if (leftType == this.booleanType && rightType == this.booleanType) {
          resultType$$1 = this.booleanType;
        } else {
          if (leftType == this.anyType) {
            if (rightType == this.anyType || rightType == this.doubleType || rightType == this.booleanType) {
              resultType$$1 = this.anyType;
            }
          } else {
            if (rightType == this.anyType) {
              if (leftType == this.anyType || leftType == this.doubleType || leftType == this.booleanType) {
                resultType$$1 = this.anyType;
              }
            }
          }
        }
      }
      if (resultType$$1 == null) {
        resultType$$1 = this.anyType;
        this.checker.errorReporter.incompatibleTypes(binex$$1, leftType, rightType, binex$$1.printLabel(), this.scope);
      }
      binex$$1.type = resultType$$1;
      return binex$$1;
    };
    TypeFlow$$1.prototype.typeCheckArithmeticOperator = function(ast$$99, assignment$$1) {
      var binex$$2 = ast$$99;
      binex$$2.operand1 = this.typeCheck(binex$$2.operand1);
      binex$$2.operand2 = this.typeCheck(binex$$2.operand2);
      var leftType$$1 = binex$$2.operand1.type;
      var rightType$$1 = binex$$2.operand2.type;
      if (assignment$$1 && !this.astIsWriteable(binex$$2.operand1)) {
        this.checker.errorReporter.valueCannotBeModified(binex$$2);
      }
      if (this.checker.styleSettings.bitwise && (binex$$2.nodeType == TypeScript$$25.NodeType.And || binex$$2.nodeType == TypeScript$$25.NodeType.Or || binex$$2.nodeType == TypeScript$$25.NodeType.AsgAnd || binex$$2.nodeType == TypeScript$$25.NodeType.AsgOr)) {
        this.checker.errorReporter.styleError(ast$$99, "use of " + TypeScript$$25.nodeTypeTable[binex$$2.nodeType]);
      }
      if (leftType$$1 == null || rightType$$1 == null) {
        this.checker.errorReporter.simpleError(binex$$2, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?");
        binex$$2.type = this.anyType;
        return binex$$2;
      }
      var nodeType$$14 = binex$$2.nodeType;
      if (this.checker.isNullOrUndefinedType(leftType$$1)) {
        leftType$$1 = rightType$$1;
      }
      if (this.checker.isNullOrUndefinedType(rightType$$1)) {
        rightType$$1 = leftType$$1;
      }
      leftType$$1 = this.checker.widenType(leftType$$1);
      rightType$$1 = this.checker.widenType(rightType$$1);
      if (nodeType$$14 == TypeScript$$25.NodeType.Add || nodeType$$14 == TypeScript$$25.NodeType.AsgAdd) {
        if (leftType$$1 == this.checker.stringType || rightType$$1 == this.checker.stringType) {
          binex$$2.type = this.checker.stringType;
        } else {
          if (leftType$$1 == this.checker.numberType && rightType$$1 == this.checker.numberType) {
            binex$$2.type = this.checker.numberType;
          } else {
            if (this.checker.sourceIsSubtypeOfTarget(leftType$$1, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType$$1, this.checker.numberType)) {
              binex$$2.type = this.checker.numberType;
            } else {
              if (leftType$$1 == this.checker.anyType || rightType$$1 == this.checker.anyType) {
                binex$$2.type = this.checker.anyType;
              } else {
                binex$$2.type = this.anyType;
                this.checker.errorReporter.incompatibleTypes(binex$$2, leftType$$1, rightType$$1, binex$$2.printLabel(), this.scope);
              }
            }
          }
        }
      } else {
        if (leftType$$1 == this.checker.numberType && rightType$$1 == this.checker.numberType) {
          binex$$2.type = this.checker.numberType;
        } else {
          if (this.checker.sourceIsSubtypeOfTarget(leftType$$1, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType$$1, this.checker.numberType)) {
            binex$$2.type = this.checker.numberType;
          } else {
            if (leftType$$1 == this.checker.anyType || rightType$$1 == this.checker.anyType) {
              binex$$2.type = this.checker.numberType;
            } else {
              binex$$2.type = this.anyType;
              this.checker.errorReporter.incompatibleTypes(binex$$2, leftType$$1, rightType$$1, binex$$2.printLabel(), this.scope);
            }
          }
        }
      }
      return binex$$2;
    };
    TypeFlow$$1.prototype.typeCheckDotOperator = function(ast$$100) {
      var binex$$3 = ast$$100;
      var leftIsFnc = false;
      binex$$3.operand1 = this.typeCheck(binex$$3.operand1);
      var leftType$$2 = binex$$3.operand1.type;
      var leftScope = null;
      if (leftType$$2) {
        if (leftType$$2 == this.anyType) {
          binex$$3.type = this.anyType;
          return binex$$3;
        } else {
          if (leftType$$2 == this.stringType) {
            if (this.stringInterfaceType) {
              leftScope = this.stringInterfaceType.memberScope;
            } else {
              binex$$3.type = this.anyType;
              return binex$$3;
            }
          } else {
            if (leftType$$2 == this.doubleType) {
              if (this.numberInterfaceType) {
                leftScope = this.numberInterfaceType.memberScope;
              } else {
                binex$$3.type = this.anyType;
                return binex$$3;
              }
            } else {
              if (leftType$$2 == this.booleanType) {
                if (this.booleanInterfaceType) {
                  leftScope = this.booleanInterfaceType.memberScope;
                } else {
                  binex$$3.type = this.anyType;
                  return binex$$3;
                }
              } else {
                if ((leftType$$2.call || leftType$$2.construct) && leftType$$2.members == null) {
                  if (this.functionInterfaceType) {
                    leftScope = this.functionInterfaceType.memberScope;
                  } else {
                    binex$$3.type = this.anyType;
                    return binex$$3;
                  }
                } else {
                  if (leftType$$2.elementType) {
                    if (this.arrayInterfaceType) {
                      var arrInstType$$1 = leftType$$2.elementType.getArrayBase(this.arrayInterfaceType, this.checker);
                      leftScope = arrInstType$$1.memberScope;
                    } else {
                      binex$$3.type = this.anyType;
                      return binex$$3;
                    }
                  } else {
                    leftScope = leftType$$2.memberScope;
                  }
                }
              }
            }
          }
        }
      }
      if (leftScope == null) {
        this.checker.errorReporter.expectedClassOrInterface(binex$$3);
        binex$$3.type = this.anyType;
      } else {
        var propertyName$$8 = binex$$3.operand2;
        var lhsIsEnclosingType = this.thisClassNode && binex$$3.operand1.type == this.thisClassNode.type.instanceType || this.inTypeRefTypeCheck;
        var symbol$$19 = leftScope.find(propertyName$$8.text, !lhsIsEnclosingType, this.inTypeRefTypeCheck);
        if (!symbol$$19) {
          if (this.objectInterfaceType && leftType$$2) {
            if (leftType$$2.isReferenceType()) {
              symbol$$19 = this.objectInterfaceType.memberScope.find(propertyName$$8.text, false, this.inTypeRefTypeCheck);
            }
            if (!symbol$$19) {
              if (this.functionInterfaceType && (leftType$$2.call || leftType$$2.construct)) {
                symbol$$19 = this.functionInterfaceType.memberScope.find(propertyName$$8.text, false, this.inTypeRefTypeCheck);
              }
            }
          }
        }
        if (!symbol$$19 || !symbol$$19.visible(leftScope, this.checker)) {
          binex$$3.type = this.anyType;
          if (symbol$$19 == null) {
            this.checker.errorReporter.simpleError(propertyName$$8, "The property '" + propertyName$$8.actualText + "' does not exist on value of type '" + leftType$$2.getScopedTypeName(this.scope) + "'");
          } else {
            if (!this.inTypeRefTypeCheck) {
              this.checker.errorReporter.simpleError(binex$$3, "The property '" + propertyName$$8.actualText + " on type '" + leftType$$2.getScopedTypeName(this.scope) + "' is not visible");
            }
          }
        } else {
          if (symbol$$19.isVariable()) {
            if (symbol$$19.isInferenceSymbol()) {
              var infSym$$2 = symbol$$19;
              if (infSym$$2.declAST && !this.checker.typeStatusIsFinished(infSym$$2.typeCheckStatus)) {
                this.inScopeTypeCheckDecl(infSym$$2.declAST);
              }
            }
          }
          propertyName$$8.sym = symbol$$19;
          binex$$3.type = symbol$$19.getType();
        }
      }
      if (binex$$3.type == null) {
        binex$$3.type = this.anyType;
      }
      return binex$$3;
    };
    TypeFlow$$1.prototype.typeCheckBooleanOperator = function(ast$$101) {
      var binex$$4 = ast$$101;
      binex$$4.operand1 = this.typeCheck(binex$$4.operand1);
      binex$$4.operand2 = this.typeCheck(binex$$4.operand2);
      var leftType$$3 = binex$$4.operand1.type;
      var rightType$$2 = binex$$4.operand2.type;
      if (!this.checker.sourceIsAssignableToTarget(leftType$$3, rightType$$2) && !this.checker.sourceIsAssignableToTarget(rightType$$2, leftType$$3)) {
        this.checker.errorReporter.incompatibleTypes(binex$$4, leftType$$3, rightType$$2, binex$$4.printLabel(), this.scope);
      }
      binex$$4.type = this.booleanType;
      return binex$$4;
    };
    TypeFlow$$1.prototype.typeCheckAsgOperator = function(ast$$102) {
      var binex$$5 = ast$$102;
      var applyTargetType$$2 = !binex$$5.operand2.isParenthesized;
      binex$$5.operand1 = this.typeCheck(binex$$5.operand1);
      this.checker.typeCheckWithContextualType(binex$$5.operand1.type, this.checker.inProvisionalTypecheckMode(), applyTargetType$$2, binex$$5.operand2);
      var leftType$$4 = binex$$5.operand1.type;
      var rightType$$3 = binex$$5.operand2.type;
      if (!this.astIsWriteable(binex$$5.operand1)) {
        this.checker.errorReporter.valueCannotBeModified(binex$$5);
      }
      if (binex$$5.operand1.nodeType == TypeScript$$25.NodeType.Call) {
        var callEx$$1 = binex$$5.operand1
      }
      var preserveScope$$1 = false;
      var preservedContainedScope$$1 = null;
      if (binex$$5.operand2.type) {
        preservedContainedScope$$1 = binex$$5.operand2.type.containedScope;
        preserveScope$$1 = true;
      }
      binex$$5.operand2 = this.castWithCoercion(binex$$5.operand2, leftType$$4, applyTargetType$$2 && !this.checker.inProvisionalTypecheckMode(), false);
      if (preserveScope$$1 && binex$$5.operand2.type.containedScope == null) {
        binex$$5.operand2.type.containedScope = preservedContainedScope$$1;
      }
      binex$$5.type = rightType$$3;
      return binex$$5;
    };
    TypeFlow$$1.prototype.typeCheckIndex = function(ast$$103) {
      var binex$$6 = ast$$103;
      binex$$6.operand1 = this.typeCheck(binex$$6.operand1);
      binex$$6.operand2 = this.typeCheck(binex$$6.operand2);
      if (!this.checker.styleSettings.literalSubscript) {
        if (binex$$6.operand2.nodeType == TypeScript$$25.NodeType.QString) {
          this.checker.errorReporter.styleError(ast$$103, "use literal subscript ('.') notation instead)");
        }
      }
      var objExprType = binex$$6.operand1.type;
      var indexExprType = binex$$6.operand2.type;
      if (objExprType.elementType) {
        if (indexExprType == this.checker.anyType || indexExprType == this.checker.numberType || TypeScript$$25.hasFlag(indexExprType.typeFlags, TypeScript$$25.TypeFlags.IsEnum)) {
          binex$$6.type = objExprType.elementType;
        } else {
          if (indexExprType == this.checker.stringType) {
            binex$$6.type = this.checker.anyType;
          } else {
            this.checker.errorReporter.simpleError(binex$$6, "Illegal property access");
            binex$$6.type = this.checker.anyType;
          }
        }
      } else {
        if (objExprType.index) {
          if (indexExprType == this.checker.anyType || !(objExprType.index.flags & TypeScript$$25.SignatureFlags.IsStringIndexer || objExprType.index.flags & TypeScript$$25.SignatureFlags.IsNumberIndexer) || objExprType.index.flags & TypeScript$$25.SignatureFlags.IsStringIndexer && indexExprType == this.checker.stringType || objExprType.index.flags & TypeScript$$25.SignatureFlags.IsNumberIndexer && (indexExprType == this.checker.numberType || TypeScript$$25.hasFlag(indexExprType.typeFlags, TypeScript$$25.TypeFlags.IsEnum))) {
            var sig$$3 = this.resolveOverload(ast$$103, objExprType.index);
            if (sig$$3) {
              binex$$6.type = sig$$3.returnType.type;
            } else {
              binex$$6.type = this.checker.anyType;
            }
          } else {
            if (indexExprType == this.checker.stringType) {
              binex$$6.type = this.checker.anyType;
            } else {
              this.checker.errorReporter.simpleError(binex$$6, "Illegal property access");
              binex$$6.type = this.checker.anyType;
            }
          }
        } else {
          if ((objExprType == this.checker.anyType || objExprType == this.checker.stringType || objExprType == this.checker.numberType || objExprType == this.checker.booleanType || objExprType.isReferenceType()) && (indexExprType == this.checker.anyType || indexExprType == this.checker.stringType || (indexExprType == this.checker.numberType || TypeScript$$25.hasFlag(indexExprType.typeFlags, TypeScript$$25.TypeFlags.IsEnum)))) {
            binex$$6.type = this.checker.anyType;
          } else {
            this.checker.errorReporter.simpleError(binex$$6, "Illegal property access");
            binex$$6.type = this.checker.anyType;
          }
        }
      }
      return binex$$6;
    };
    TypeFlow$$1.prototype.typeCheckInOperator = function(binex$$7) {
      binex$$7.operand1 = this.cast(this.typeCheck(binex$$7.operand1), this.stringType);
      binex$$7.operand2 = this.typeCheck(binex$$7.operand2);
      if (!((binex$$7.operand1.type == this.checker.anyType || binex$$7.operand1.type == this.checker.stringType) && (binex$$7.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex$$7.operand2.type, this.objectInterfaceType)))) {
        this.checker.errorReporter.simpleError(binex$$7, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type");
      }
      binex$$7.type = this.booleanType;
      return binex$$7;
    };
    TypeFlow$$1.prototype.typeCheckShift = function(binex$$8, assignment$$2) {
      binex$$8.operand1 = this.cast(this.typeCheck(binex$$8.operand1), this.doubleType);
      binex$$8.operand2 = this.cast(this.typeCheck(binex$$8.operand2), this.doubleType);
      if (assignment$$2 && !this.astIsWriteable(binex$$8.operand1)) {
        this.checker.errorReporter.valueCannotBeModified(binex$$8);
      }
      binex$$8.type = this.doubleType;
      return binex$$8;
    };
    TypeFlow$$1.prototype.typeCheckQMark = function(trinex) {
      trinex.operand1 = this.typeCheck(trinex.operand1);
      trinex.operand2 = this.typeCheck(trinex.operand2);
      trinex.operand3 = this.typeCheck(trinex.operand3);
      var leftType$$5 = trinex.operand2.type;
      var rightType$$4 = trinex.operand3.type;
      if (leftType$$5 == rightType$$4) {
        trinex.type = leftType$$5;
      } else {
        if (this.checker.sourceIsSubtypeOfTarget(leftType$$5, rightType$$4)) {
          trinex.type = rightType$$4;
        } else {
          if (this.checker.sourceIsSubtypeOfTarget(rightType$$4, leftType$$5)) {
            trinex.type = leftType$$5;
          } else {
            trinex.type = this.anyType;
            this.checker.errorReporter.incompatibleTypes(trinex, leftType$$5, rightType$$4, trinex.printLabel(), this.scope);
          }
        }
      }
      return trinex;
    };
    TypeFlow$$1.prototype.addFormals = function(container$$18, signature$$7, table$$7) {
      var len$$42 = signature$$7.parameters.length;
      var i$$93 = 0;
      for (;i$$93 < len$$42;i$$93++) {
        var symbol$$20 = signature$$7.parameters[i$$93];
        symbol$$20.container = container$$18;
        table$$7.add(symbol$$20.name, symbol$$20);
      }
    };
    TypeFlow$$1.prototype.addLocalsFromScope = function(scope$$30, container$$19, vars$$3, table$$8, isModContainer) {
      var len$$43 = vars$$3.members.length;
      var hasArgsDef = false;
      var i$$94 = 0;
      for (;i$$94 < len$$43;i$$94++) {
        var local = vars$$3.members[i$$94];
        if (local.sym == null || local.sym.kind() != TypeScript$$25.SymbolKind.Field) {
          var result$$28 = null;
          if ((result$$28 = table$$8.lookup(local.id.text)) == null) {
            var localVar = new TypeScript$$25.ValueLocation;
            localVar.typeLink = new TypeScript$$25.TypeLink;
            var varSym$$1 = null;
            if (TypeScript$$25.hasFlag(local.varFlags, TypeScript$$25.VarFlags.Static)) {
              local.varFlags |= TypeScript$$25.VarFlags.LocalStatic;
              varSym$$1 = new TypeScript$$25.FieldSymbol(local.id.text, local.minChar, this.checker.locationInfo.unitIndex, true, localVar);
            } else {
              varSym$$1 = new TypeScript$$25.VariableSymbol(local.id.text, local.minChar, this.checker.locationInfo.unitIndex, localVar);
            }
            varSym$$1.transferVarFlags(local.varFlags);
            localVar.symbol = varSym$$1;
            varSym$$1.declAST = local;
            localVar.typeLink.ast = local.typeExpr;
            this.checker.resolveTypeLink(scope$$30, localVar.typeLink, false);
            if (local.type == null && local.init == null) {
              local.type = this.anyType;
            }
            localVar.typeLink.type = local.type;
            localVar.symbol.container = container$$19;
            local.sym = localVar.symbol;
            table$$8.add(local.id.text, varSym$$1);
            if (local.id.text == "arguments") {
              hasArgsDef = true;
            }
          } else {
            local.type = result$$28.getType();
            local.sym = result$$28;
          }
        }
      }
      if (!isModContainer) {
        if (!hasArgsDef) {
          var argLoc = new TypeScript$$25.ValueLocation;
          argLoc.typeLink = new TypeScript$$25.TypeLink;
          var theArgSym = new TypeScript$$25.VariableSymbol("arguments", vars$$3.minChar, this.checker.locationInfo.unitIndex, argLoc);
          if (!this.iargumentsInterfaceType) {
            var argumentsSym = scope$$30.find("IArguments", false, true);
            if (argumentsSym) {
              argumentsSym.flags |= TypeScript$$25.SymbolFlags.CompilerGenerated;
              this.iargumentsInterfaceType = argumentsSym.getType();
            } else {
              this.iargumentsInterfaceType = this.anyType;
            }
          }
          argLoc.typeLink.type = this.iargumentsInterfaceType;
          table$$8.add("arguments", theArgSym);
        }
      }
    };
    TypeFlow$$1.prototype.addConstructorLocalArgs = function(container$$20, args$$14, table$$9, isClass$$1) {
      if (args$$14) {
        var len$$44 = args$$14.members.length;
        var i$$95 = 0;
        for (;i$$95 < len$$44;i$$95++) {
          var local$$1 = args$$14.members[i$$95];
          if (local$$1.sym == null || (isClass$$1 || local$$1.sym.kind() != TypeScript$$25.SymbolKind.Field)) {
            var result$$29 = null;
            if ((result$$29 = table$$9.lookup(local$$1.id.text)) == null) {
              this.resolveBoundDecl(local$$1);
              var localVar$$1 = new TypeScript$$25.ValueLocation;
              localVar$$1.typeLink = new TypeScript$$25.TypeLink;
              var varSym$$2 = new TypeScript$$25.ParameterSymbol(local$$1.id.text, local$$1.minChar, this.checker.locationInfo.unitIndex, localVar$$1);
              varSym$$2.declAST = local$$1;
              localVar$$1.symbol = varSym$$2;
              localVar$$1.typeLink.type = local$$1.type;
              localVar$$1.symbol.container = container$$20;
              local$$1.sym = localVar$$1.symbol;
              table$$9.add(local$$1.id.text, varSym$$2);
            } else {
              local$$1.type = result$$29.getType();
              local$$1.sym = result$$29;
            }
          }
        }
      }
    };
    TypeFlow$$1.prototype.checkInitSelf = function(funcDecl$$24) {
      if (!funcDecl$$24.isMethod()) {
        var freeVars = funcDecl$$24.freeVariables;
        var k$$13 = 0;
        var len$$45 = freeVars.length;
        for (;k$$13 < len$$45;k$$13++) {
          var sym$$35 = freeVars[k$$13];
          if (sym$$35.isInstanceProperty()) {
            return true;
          }
        }
      }
      var fns = funcDecl$$24.scopes;
      var fnsLen = fns.members.length;
      var j$$13 = 0;
      for (;j$$13 < fnsLen;j$$13++) {
        var fn$$8 = fns.members[j$$13];
        if (this.checkInitSelf(fn$$8)) {
          return true;
        }
      }
      return false;
    };
    TypeFlow$$1.prototype.checkPromoteFreeVars = function(funcDecl$$25, constructorSym) {
      var freeVars$$1 = funcDecl$$25.freeVariables;
      var k$$14 = 0;
      var len$$46 = freeVars$$1.length;
      for (;k$$14 < len$$46;k$$14++) {
        var sym$$36 = freeVars$$1[k$$14];
        if (!sym$$36.isInstanceProperty() && sym$$36.container == constructorSym) {
          TypeScript$$25.instanceFilter.reset();
          if (this.scope.search(TypeScript$$25.instanceFilter, sym$$36.name, false, false)) {
            this.checker.errorReporter.simpleError(funcDecl$$25, "Constructor-local variable shadows class property '" + sym$$36.name + "'. To access the class property, use 'self." + sym$$36.name + "'");
          }
          this.checker.errorReporter.simpleError(funcDecl$$25, "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable '" + sym$$36.name + "' to a class property");
        }
      }
    };
    TypeFlow$$1.prototype.allReturnsAreVoid = function(funcDecl$$26) {
      var allReturnsAreVoid = true;
      if (funcDecl$$26.signature.returnType.type == null) {
        var preFindReturnExpressionTypes = function(ast$$104, parent$$66, walker$$50) {
          var go$$4 = true;
          switch(ast$$104.nodeType) {
            case TypeScript$$25.NodeType.FuncDecl:
              go$$4 = false;
              break;
            case TypeScript$$25.NodeType.Return:
              var returnStmt = ast$$104;
              if (returnStmt.returnExpression) {
                allReturnsAreVoid = false;
                go$$4 = false;
              }
            ;
            default:
              break;
          }
          walker$$50.options.goChildren = go$$4;
          walker$$50.options.goNextSibling = go$$4;
          return ast$$104;
        };
        TypeScript$$25.getAstWalkerFactory().walk(funcDecl$$26.bod, preFindReturnExpressionTypes);
      }
      return allReturnsAreVoid;
    };
    TypeFlow$$1.prototype.classConstructorHasSuperCall = function(funcDecl$$27) {
      var foundSuper = false;
      var preFindSuperCall = function(ast$$105, parent$$67, walker$$51) {
        var go$$5 = true;
        switch(ast$$105.nodeType) {
          case TypeScript$$25.NodeType.FuncDecl:
            go$$5 = false;
            break;
          case TypeScript$$25.NodeType.Call:
            var call = ast$$105;
            if (call.target.nodeType == TypeScript$$25.NodeType.Super) {
              go$$5 = false;
              foundSuper = true;
              break;
            }
            break;
          default:
            break;
        }
        walker$$51.options.goChildren = go$$5;
        return ast$$105;
      };
      TypeScript$$25.getAstWalkerFactory().walk(funcDecl$$27.bod, preFindSuperCall);
      return foundSuper;
    };
    TypeFlow$$1.prototype.baseListPrivacyErrorReporter = function(bases$$4, i$$96, declSymbol, extendsList$$7, typeName$$3, isModuleName$$2) {
      var baseSymbol$$2 = bases$$4.members[i$$96].type.symbol;
      var declTypeString = declSymbol.declAST.nodeType == TypeScript$$25.NodeType.InterfaceDeclaration ? "interface" : "class";
      var baseListTypeString = extendsList$$7 ? "extends" : "implements";
      var baseTypeString = baseSymbol$$2.declAST.nodeType == TypeScript$$25.NodeType.InterfaceDeclaration ? "interface" : "class";
      var typestring$$1 = "";
      if (isModuleName$$2) {
        var quotestring$$1 = "";
        if (!TypeScript$$25.isQuoted(typeName$$3)) {
          quotestring$$1 = "'";
        }
        typestring$$1 = " is using inaccessible module ";
        baseTypeString = " " + baseTypeString + " from private module " + quotestring$$1 + typeName$$3 + quotestring$$1;
      } else {
        baseTypeString = " private " + baseTypeString + " '" + typeName$$3 + "'";
      }
      this.checker.errorReporter.simpleError(bases$$4.members[i$$96], "exported " + declTypeString + " '" + declSymbol.name + "' " + baseListTypeString + baseTypeString);
    };
    TypeFlow$$1.prototype.typeCheckBaseListPrivacy = function(bases$$5, declSymbol$$1, extendsList$$8) {
      var _this$$8 = this;
      if (bases$$5) {
        var basesLen$$1 = bases$$5.members.length;
        var i$$97 = 0;
        for (;i$$97 < basesLen$$1;i$$97++) {
          if (!bases$$5.members[i$$97].type || bases$$5.members[i$$97].type == this.checker.anyType) {
            continue;
          }
          this.checkSymbolPrivacy(bases$$5.members[i$$97].type.symbol, declSymbol$$1, function(typeName$$4, isModuleName$$3) {
            return _this$$8.baseListPrivacyErrorReporter(bases$$5, i$$97, declSymbol$$1, extendsList$$8, typeName$$4, isModuleName$$3);
          });
        }
      }
    };
    TypeFlow$$1.prototype.checkSymbolPrivacy = function(typeSymbol$$5, declSymbol$$2, errorCallback$$4) {
      var externalModuleSymbol = null;
      var declSymbolPath = null;
      if (typeSymbol$$5.isExternallyVisible(this.checker)) {
        var typeSymbolPath = typeSymbol$$5.pathToRoot();
        declSymbolPath = declSymbol$$2.pathToRoot();
        var typeSymbolLength = typeSymbolPath.length;
        var declSymbolPathLength = declSymbolPath.length;
        if (typeSymbolLength > 0) {
          if (typeSymbolPath[typeSymbolLength - 1].getType().isModuleType() && typeSymbolPath[typeSymbolLength - 1].isDynamic && typeSymbolPath[typeSymbolLength - 1] != declSymbolPath[declSymbolPathLength - 1]) {
            externalModuleSymbol = typeSymbolPath[typeSymbolLength - 1];
          } else {
            if (typeSymbolLength > 1) {
              if (typeSymbolPath[typeSymbolLength - 2].getType().isModuleType() && typeSymbolPath[typeSymbolLength - 2].isDynamic && (declSymbolPathLength == 1 || typeSymbolPath[typeSymbolLength - 2] != declSymbolPath[declSymbolPathLength - 2])) {
                externalModuleSymbol = typeSymbolPath[typeSymbolLength - 2];
              }
            }
          }
        }
        if (externalModuleSymbol == null) {
          return;
        }
      }
      var interfaceDecl$$5 = declSymbol$$2.getInterfaceDeclFromSymbol(this.checker);
      if (interfaceDecl$$5 && !TypeScript$$25.hasFlag(interfaceDecl$$5.varFlags, TypeScript$$25.VarFlags.Exported)) {
        return;
      }
      var checkVisibilitySymbol = declSymbol$$2;
      var varDecl$$18 = declSymbol$$2.getVarDeclFromSymbol();
      if (varDecl$$18) {
        if (TypeScript$$25.hasFlag(varDecl$$18.varFlags, TypeScript$$25.VarFlags.Private)) {
          return;
        } else {
          if (TypeScript$$25.hasFlag(varDecl$$18.varFlags, TypeScript$$25.VarFlags.Public)) {
            checkVisibilitySymbol = declSymbol$$2.container;
          }
        }
      }
      if (checkVisibilitySymbol.isExternallyVisible(this.checker)) {
        var privateSymbolName = typeSymbol$$5.name;
        if (externalModuleSymbol != null) {
          var prettyName$$2 = externalModuleSymbol.getPrettyNameOfDynamicModule(declSymbolPath);
          if (prettyName$$2 != null) {
            this.currentScript.AddExternallyVisibleImportedSymbol(prettyName$$2.symbol, this.checker);
            return;
          } else {
            privateSymbolName = externalModuleSymbol.prettyName;
          }
        }
        errorCallback$$4(privateSymbolName, typeSymbol$$5.name != privateSymbolName);
      }
    };
    TypeFlow$$1.prototype.checkTypePrivacy = function(type$$50, declSymbol$$3, errorCallback$$5) {
      var _this$$9 = this;
      if (!(type$$50 && type$$50.primitiveTypeClass == TypeScript$$25.Primitive.None)) {
        return;
      }
      if (type$$50.isArray()) {
        return this.checkTypePrivacy(type$$50.elementType, declSymbol$$3, errorCallback$$5);
      }
      if (type$$50.symbol && type$$50.symbol.name && type$$50.symbol.name != "_anonymous" && (type$$50.call == null && type$$50.construct == null && type$$50.index == null || type$$50.members && !type$$50.isClass())) {
        return this.checkSymbolPrivacy(type$$50.symbol, declSymbol$$3, errorCallback$$5);
      }
      if (type$$50.members) {
        type$$50.members.allMembers.map(function(key$$43, s$$26, unused) {
          var sym$$37 = s$$26;
          if (!TypeScript$$25.hasFlag(sym$$37.flags, TypeScript$$25.SymbolFlags.BuiltIn)) {
            _this$$9.checkTypePrivacy(sym$$37.getType(), declSymbol$$3, errorCallback$$5);
          }
        }, null);
      }
      this.checkSignatureGroupPrivacy(type$$50.call, declSymbol$$3, errorCallback$$5);
      this.checkSignatureGroupPrivacy(type$$50.construct, declSymbol$$3, errorCallback$$5);
      this.checkSignatureGroupPrivacy(type$$50.index, declSymbol$$3, errorCallback$$5);
    };
    TypeFlow$$1.prototype.checkSignatureGroupPrivacy = function(sgroup, declSymbol$$4, errorCallback$$6) {
      if (sgroup) {
        var len$$47 = sgroup.signatures.length;
        var i$$98 = 0;
        for (;i$$98 < sgroup.signatures.length;i$$98++) {
          var signature$$8 = sgroup.signatures[i$$98];
          if (len$$47 > 1 && signature$$8 == sgroup.definitionSignature) {
            continue;
          }
          if (signature$$8.returnType) {
            this.checkTypePrivacy(signature$$8.returnType.type, declSymbol$$4, errorCallback$$6);
          }
          var paramLen$$3 = signature$$8.parameters.length;
          var j$$14 = 0;
          for (;j$$14 < paramLen$$3;j$$14++) {
            var param$$7 = signature$$8.parameters[j$$14];
            this.checkTypePrivacy(param$$7.getType(), declSymbol$$4, errorCallback$$6);
          }
        }
      }
    };
    TypeFlow$$1.prototype.functionArgumentPrivacyErrorReporter = function(funcDecl$$28, p, paramSymbol, typeName$$5, isModuleName$$4) {
      var isGetter$$2 = funcDecl$$28.isAccessor() && TypeScript$$25.hasFlag(funcDecl$$28.fncFlags, TypeScript$$25.FncFlags.GetAccessor);
      var isSetter$$2 = funcDecl$$28.isAccessor() && TypeScript$$25.hasFlag(funcDecl$$28.fncFlags, TypeScript$$25.FncFlags.SetAccessor);
      var isPublicFunc = TypeScript$$25.hasFlag(funcDecl$$28.fncFlags, TypeScript$$25.FncFlags.Public);
      var isContainerInterface = funcDecl$$28.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;
      var typestring$$2 = "";
      if (isModuleName$$4) {
        var quotestring$$2 = "";
        if (!TypeScript$$25.isQuoted(typeName$$5)) {
          quotestring$$2 = "'";
        }
        typestring$$2 = " is using inaccessible module " + quotestring$$2 + typeName$$5 + quotestring$$2;
      } else {
        typestring$$2 = " has or is using private type '" + typeName$$5 + "'";
      }
      if (!isContainerInterface) {
        if (funcDecl$$28.isConstructor) {
          this.checker.errorReporter.simpleError(funcDecl$$28.arguments.members[p], "exported class's constructor parameter '" + paramSymbol.name + "'" + typestring$$2);
        } else {
          if (isSetter$$2) {
            this.checker.errorReporter.simpleError(funcDecl$$28.arguments.members[p], (isPublicFunc ? "public" : "exported") + " setter parameter '" + paramSymbol.name + "'" + typestring$$2);
          } else {
            if (!isGetter$$2) {
              this.checker.errorReporter.simpleError(funcDecl$$28.arguments.members[p], (isPublicFunc ? "public" : "exported") + " function parameter '" + paramSymbol.name + "'" + typestring$$2);
            }
          }
        }
      } else {
        if (funcDecl$$28.isConstructMember()) {
          this.checker.errorReporter.simpleError(funcDecl$$28.arguments.members[p], "exported interface's constructor parameter '" + paramSymbol.name + "'" + typestring$$2);
        } else {
          if (funcDecl$$28.isCallMember()) {
            this.checker.errorReporter.simpleError(funcDecl$$28.arguments.members[p], "exported interface's call parameter '" + paramSymbol.name + "'" + typestring$$2);
          } else {
            if (!funcDecl$$28.isIndexerMember()) {
              this.checker.errorReporter.simpleError(funcDecl$$28.arguments.members[p], "exported interface's function parameter '" + paramSymbol.name + "'" + typestring$$2);
            }
          }
        }
      }
    };
    TypeFlow$$1.prototype.returnTypePrivacyError = function(astError, funcDecl$$29, typeName$$6, isModuleName$$5) {
      var isGetter$$3 = funcDecl$$29.isAccessor() && TypeScript$$25.hasFlag(funcDecl$$29.fncFlags, TypeScript$$25.FncFlags.GetAccessor);
      var isSetter$$3 = funcDecl$$29.isAccessor() && TypeScript$$25.hasFlag(funcDecl$$29.fncFlags, TypeScript$$25.FncFlags.SetAccessor);
      var isPublicFunc$$1 = TypeScript$$25.hasFlag(funcDecl$$29.fncFlags, TypeScript$$25.FncFlags.Public);
      var isContainerInterface$$1 = funcDecl$$29.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;
      var typestring$$3 = "";
      if (isModuleName$$5) {
        var quotestring$$3 = "";
        if (!TypeScript$$25.isQuoted(typeName$$6)) {
          quotestring$$3 = "'";
        }
        typestring$$3 = " is using inaccessible module " + quotestring$$3 + typeName$$6 + quotestring$$3;
      } else {
        typestring$$3 = " has or is using private type '" + typeName$$6 + "'";
      }
      if (!isContainerInterface$$1) {
        if (isGetter$$3) {
          this.checker.errorReporter.simpleError(astError, (isPublicFunc$$1 ? "public" : "exported") + " getter return type" + typestring$$3);
        } else {
          if (!isSetter$$3) {
            this.checker.errorReporter.simpleError(astError, (isPublicFunc$$1 ? "public" : "exported") + " function return type" + typestring$$3);
          }
        }
      } else {
        if (funcDecl$$29.isConstructMember()) {
          this.checker.errorReporter.simpleError(astError, "exported interface's constructor return type" + typestring$$3);
        } else {
          if (funcDecl$$29.isCallMember()) {
            this.checker.errorReporter.simpleError(astError, "exported interface's call return type" + typestring$$3);
          } else {
            if (funcDecl$$29.isIndexerMember()) {
              this.checker.errorReporter.simpleError(astError, "exported interface's indexer return type" + typestring$$3);
            } else {
              this.checker.errorReporter.simpleError(astError, "exported interface's function return type" + typestring$$3);
            }
          }
        }
      }
    };
    TypeFlow$$1.prototype.functionReturnTypePrivacyErrorReporter = function(funcDecl$$30, signature$$9, typeName$$7, isModuleName$$6) {
      var reportOnFuncDecl = false;
      if (funcDecl$$30.returnTypeAnnotation != null && funcDecl$$30.returnTypeAnnotation.type == signature$$9.returnType.type) {
        this.returnTypePrivacyError(funcDecl$$30.returnTypeAnnotation, funcDecl$$30, typeName$$7, isModuleName$$6);
      }
      var i$$99 = 0;
      for (;i$$99 < funcDecl$$30.returnStatementsWithExpressions.length;i$$99++) {
        if (funcDecl$$30.returnStatementsWithExpressions[i$$99].type == signature$$9.returnType.type) {
          this.returnTypePrivacyError(funcDecl$$30.returnStatementsWithExpressions[i$$99], funcDecl$$30, typeName$$7, isModuleName$$6);
        } else {
          reportOnFuncDecl = true;
        }
      }
      if (reportOnFuncDecl) {
        this.returnTypePrivacyError(funcDecl$$30, funcDecl$$30, typeName$$7, isModuleName$$6);
      }
    };
    TypeFlow$$1.prototype.typeCheckFunction = function(funcDecl$$31) {
      var _this$$10 = this;
      this.nestingLevel = 0;
      var fnType = funcDecl$$31.type;
      var fgSym$$4 = fnType.symbol;
      var signature$$10 = funcDecl$$31.signature;
      if (this.checker.typeStatusIsFinished(signature$$10.typeCheckStatus)) {
        return funcDecl$$31;
      } else {
        if (signature$$10.typeCheckStatus == TypeScript$$25.TypeCheckStatus.Started) {
          if (!funcDecl$$31.returnTypeAnnotation && funcDecl$$31.bod && !funcDecl$$31.isSignature() && !funcDecl$$31.isConstructor && this.allReturnsAreVoid(funcDecl$$31)) {
            signature$$10.returnType.type = this.voidType;
            return funcDecl$$31;
          } else {
            if (funcDecl$$31.returnTypeAnnotation == null) {
              if (this.checker.styleSettings.implicitAny) {
                this.checker.errorReporter.styleError(funcDecl$$31, "type implicitly set to 'any'");
              }
              signature$$10.returnType.type = this.anyType;
              fgSym$$4.flags |= TypeScript$$25.SymbolFlags.RecursivelyReferenced;
            }
            return funcDecl$$31;
          }
        }
      }
      signature$$10.typeCheckStatus = TypeScript$$25.TypeCheckStatus.Started;
      this.checker.addStartedPTO(signature$$10);
      var prevScope$$4 = this.scope;
      var prevFnc = this.thisFnc;
      var prevMethodStatus$$2 = this.enclosingFncIsMethod;
      var prevClassNode = this.thisClassNode;
      this.enclosingFncIsMethod = funcDecl$$31.isMethod() || funcDecl$$31.isConstructor;
      this.thisFnc = funcDecl$$31;
      var container$$21 = funcDecl$$31.type.symbol;
      var prevThisType = this.thisType;
      var prevLocationInfo$$2 = this.checker.locationInfo;
      var funcTable$$1 = null;
      var acceptedContextualType = false;
      var targetParams = null;
      var targetReturnType$$1 = null;
      var isGetter$$4 = funcDecl$$31.isAccessor() && TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.GetAccessor);
      var isSetter$$4 = funcDecl$$31.isAccessor() && TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.SetAccessor);
      var accessorType = (isGetter$$4 || isSetter$$4) && funcDecl$$31.accessorSymbol ? funcDecl$$31.accessorSymbol.getType() : null;
      var prevModDecl$$1 = this.checker.currentModDecl;
      if (funcDecl$$31.isConstructor && !funcDecl$$31.isOverload) {
        if (fnType.instanceType == null) {
          this.checker.errorReporter.simpleError(funcDecl$$31, "Malformed function body (is this a class named the same as an existing interface?)");
          return funcDecl$$31;
        }
        this.scope = fnType.instanceType.constructorScope;
        var ssb = this.scope;
        funcTable$$1 = ssb.valueMembers.allMembers;
      } else {
        if (funcDecl$$31.isSpecialFn() && !(funcDecl$$31.fncFlags & TypeScript$$25.FncFlags.Signature) || funcDecl$$31.isOverload) {
          funcTable$$1 = funcDecl$$31.symbols;
          if (!TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.Static) && fnType.containedScope) {
            this.scope = fnType.containedScope;
          }
        } else {
          if (funcDecl$$31.bod) {
            this.scope = fnType.containedScope;
          }
          ssb = this.scope;
          if (ssb && ssb.valueMembers) {
            funcTable$$1 = ssb.valueMembers.allMembers;
          }
        }
      }
      if (funcDecl$$31.isConstructor && funcDecl$$31.bod && TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.ClassMethod)) {
        var hasBaseType = TypeScript$$25.hasFlag(funcDecl$$31.classDecl.type.instanceType.typeFlags, TypeScript$$25.TypeFlags.HasBaseType);
        var noSuperCallAllowed = !hasBaseType || TypeScript$$25.hasFlag(funcDecl$$31.classDecl.type.instanceType.typeFlags, TypeScript$$25.TypeFlags.HasBaseTypeOfObject);
        var superCallMustBeFirst = TypeScript$$25.hasFlag(funcDecl$$31.classDecl.varFlags, TypeScript$$25.VarFlags.ClassSuperMustBeFirstCallInConstructor);
        if (noSuperCallAllowed && this.classConstructorHasSuperCall(funcDecl$$31)) {
          this.checker.errorReporter.simpleError(funcDecl$$31, "Calls to 'super' constructor are not allowed in classes that either inherit directly from 'Object' or have no base class");
        } else {
          if (hasBaseType) {
            if (superCallMustBeFirst) {
              if (!funcDecl$$31.bod || !funcDecl$$31.bod.members.length || !(funcDecl$$31.bod.members[0].nodeType == TypeScript$$25.NodeType.Call && funcDecl$$31.bod.members[0].target.nodeType == TypeScript$$25.NodeType.Super || TypeScript$$25.hasFlag(funcDecl$$31.bod.flags, TypeScript$$25.ASTFlags.StrictMode) && funcDecl$$31.bod.members.length > 1 && funcDecl$$31.bod.members[1].nodeType == TypeScript$$25.NodeType.Call && funcDecl$$31.bod.members[1].target.nodeType == TypeScript$$25.NodeType.Super)) {
                this.checker.errorReporter.simpleError(funcDecl$$31, "If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor");
              }
            } else {
              if (!this.classConstructorHasSuperCall(funcDecl$$31)) {
                this.checker.errorReporter.simpleError(funcDecl$$31, "Constructors for derived classes must contain a call to the class's 'super' constructor");
              }
            }
          }
        }
      }
      if (funcDecl$$31.isMethod() && funcDecl$$31.type.enclosingType) {
        var enclosingClassNode = null;
        if (funcDecl$$31.type.enclosingType.symbol.declAST.nodeType == TypeScript$$25.NodeType.FuncDecl) {
          enclosingClassNode = funcDecl$$31.type.enclosingType.symbol.declAST.classDecl;
        } else {
          if (funcDecl$$31.type.enclosingType.symbol.declAST.nodeType == TypeScript$$25.NodeType.ClassDeclaration) {
            enclosingClassNode = funcDecl$$31.type.enclosingType.symbol.declAST;
          }
        }
        if (enclosingClassNode) {
          this.thisClassNode = enclosingClassNode;
        }
      }
      if (fnType.enclosingType) {
        var enclosingSym = fnType.symbol.container;
        if (enclosingSym && enclosingSym.isType() && enclosingSym.getType().isClass()) {
          enclosingSym = enclosingSym.container;
        }
        if (enclosingSym && enclosingSym.declAST && enclosingSym.declAST.nodeType == TypeScript$$25.NodeType.ModuleDeclaration) {
          this.checker.currentModDecl = enclosingSym.declAST;
        }
      }
      if (funcDecl$$31.unitIndex > 0) {
        if (this.checker.units && funcDecl$$31.unitIndex < this.checker.units.length) {
          this.checker.locationInfo = this.checker.units[funcDecl$$31.unitIndex];
        } else {
          this.checker.locationInfo = TypeScript$$25.unknownLocationInfo;
        }
      }
      if (fnType.enclosingType) {
        this.thisType = fnType.enclosingType;
      } else {
        this.thisType = prevThisType;
      }
      var paramLen$$4 = signature$$10.parameters.length;
      if (!funcDecl$$31.isConstructor && funcDecl$$31.bod && !funcDecl$$31.isSignature()) {
        var tmpParamScope = this.scope;
        ssb = this.scope;
        if (!funcDecl$$31.isMethod() && funcDecl$$31.returnTypeAnnotation == null) {
          if (prevScope$$4 && funcDecl$$31.name && !funcDecl$$31.name.isMissing()) {
            var considerSym = prevScope$$4.findAmbient(funcDecl$$31.name.text, false, false);
            if (considerSym && considerSym.declAST && considerSym.declAST.type) {
              this.checker.setContextualType(considerSym.declAST.type, false);
            }
          }
          if (this.checker.hasTargetType()) {
            var candidateTypeContext = this.checker.getTargetTypeContext();
            var candidateType$$1 = candidateTypeContext.contextualType;
            if (this.checker.canContextuallyTypeFunction(candidateType$$1, funcDecl$$31, true)) {
              var candidateSigs$$1 = candidateType$$1.construct ? candidateType$$1.construct : candidateType$$1.call;
              candidateTypeContext.targetSig = candidateSigs$$1.signatures[0];
              var candidateParams = candidateTypeContext.targetSig.parameters;
              targetParams = candidateParams;
              targetReturnType$$1 = candidateTypeContext.targetSig.returnType.type;
              if (candidateTypeContext.targetSig.declAST) {
                if (candidateTypeContext.targetSig.declAST.isConstructor) {
                  funcDecl$$31.isTargetTypedAsMethod = true;
                } else {
                  if (candidateTypeContext.targetSig.declAST.isMethod()) {
                    funcDecl$$31.isTargetTypedAsMethod = true;
                  }
                }
              }
              fgSym$$4.type = candidateTypeContext.contextualType;
              acceptedContextualType = true;
            } else {
              if (candidateType$$1 && funcDecl$$31.isAccessor()) {
                accessorType = candidateType$$1;
                candidateTypeContext.targetAccessorType = accessorType;
              } else {
                this.checker.killCurrentContextualType();
              }
            }
          }
        }
        var paramTable = ssb.valueMembers;
        this.scope = new TypeScript$$25.SymbolScopeBuilder(paramTable, null, null, null, prevScope$$4, container$$21);
        var p$$1 = 0;
        for (;p$$1 < paramLen$$4;p$$1++) {
          var symbol$$21 = signature$$10.parameters[p$$1];
          var ast$$106 = symbol$$21.declAST;
          if (this.checker.hasTargetType() && (targetParams && (this.checker.getTargetTypeContext().targetSig.hasVariableArgList || p$$1 < targetParams.length))) {
            candidateTypeContext = this.checker.getTargetTypeContext();
            var hasVarArgList = candidateTypeContext.targetSig.hasVariableArgList;
            ast$$106.type = hasVarArgList && p$$1 >= targetParams.length - 1 ? targetParams[targetParams.length - 1].getType().elementType : targetParams[p$$1].getType();
            ast$$106.sym.setType(ast$$106.type);
            ast$$106.sym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
          } else {
            this.typeCheck(ast$$106);
          }
          if (isSetter$$4 && accessorType) {
            ast$$106 = this.cast(ast$$106, accessorType);
          }
          symbol$$21.container = container$$21;
          this.checkTypePrivacy(symbol$$21.getType(), container$$21, function(typeName$$8, isModuleName$$7) {
            return _this$$10.functionArgumentPrivacyErrorReporter(funcDecl$$31, p$$1, symbol$$21, typeName$$8, isModuleName$$7);
          });
          paramTable.publicMembers.add(symbol$$21.name, symbol$$21);
        }
        this.scope = tmpParamScope;
      } else {
        this.typeCheck(funcDecl$$31.arguments);
        p$$1 = 0;
        for (;p$$1 < paramLen$$4;p$$1++) {
          signature$$10.parameters[p$$1].parameter.typeLink.type = funcDecl$$31.arguments.members[p$$1].type;
          this.checkTypePrivacy(signature$$10.parameters[p$$1].getType(), container$$21, function(typeName$$9, isModuleName$$8) {
            return _this$$10.functionArgumentPrivacyErrorReporter(funcDecl$$31, p$$1, signature$$10.parameters[p$$1], typeName$$9, isModuleName$$8);
          });
          if (funcDecl$$31.arguments.members[p$$1].parameterPropertySym) {
            funcDecl$$31.arguments.members[p$$1].parameterPropertySym.setType(funcDecl$$31.arguments.members[p$$1].type);
          }
        }
        if (funcDecl$$31.fncFlags & TypeScript$$25.FncFlags.IndexerMember) {
          if (!paramLen$$4 || paramLen$$4 > 1) {
            this.checker.errorReporter.simpleError(funcDecl$$31, "Index signatures may take one and only one parameter");
          } else {
            if (funcDecl$$31.arguments.members[0].type == this.checker.numberType) {
              fnType.index.flags |= TypeScript$$25.SignatureFlags.IsNumberIndexer;
            } else {
              if (funcDecl$$31.arguments.members[0].type == this.checker.stringType) {
                fnType.index.flags |= TypeScript$$25.SignatureFlags.IsStringIndexer;
              } else {
                this.checker.errorReporter.simpleError(funcDecl$$31.arguments.members[0], "Index signatures may only take 'string' or 'number' as their parameter");
              }
            }
          }
        }
      }
      if (funcDecl$$31.bod && !funcDecl$$31.isSignature()) {
        if (!funcDecl$$31.isConstructor) {
          this.addFormals(container$$21, signature$$10, funcTable$$1);
        } else {
          this.addConstructorLocalArgs(funcDecl$$31.type.symbol, funcDecl$$31.arguments, funcTable$$1, TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.ClassMethod));
          if (this.thisClassNode && this.thisClassNode.extendsList) {
            var tmpScope = this.scope;
            var funcMembers$$1 = new TypeScript$$25.ScopedMembers(funcTable$$1);
            this.scope = new TypeScript$$25.FilteredSymbolScopeBuilder(funcMembers$$1, prevScope$$4, funcDecl$$31.type.symbol, function(sym$$39) {
              return sym$$39.kind() == TypeScript$$25.SymbolKind.Parameter;
            });
            this.typeCheckBaseCalls(this.thisClassNode.extendsList);
            this.scope = tmpScope;
          }
        }
        var prevMod = this.checker.currentModDecl;
        if (funcDecl$$31.type && funcDecl$$31.type.symbol && !funcDecl$$31.isMethod() && funcDecl$$31.type.symbol.declModule) {
          this.checker.currentModDecl = funcDecl$$31.type.symbol.declModule;
        }
        if (acceptedContextualType) {
          this.checker.setContextualType(null, this.checker.inProvisionalTypecheckMode());
        }
        this.typeCheck(funcDecl$$31.bod);
        if (acceptedContextualType) {
          this.checker.unsetContextualType();
        }
        this.checker.currentModDecl = prevMod;
        if (this.checker.checkControlFlow) {
          var cfg = funcDecl$$31.buildControlFlow();
          if (this.checker.printControlFlowGraph) {
            cfg.print(this.checker.errorReporter.outfile);
          }
          cfg.reportUnreachable(this.checker.errorReporter);
          if (this.checker.checkControlFlowUseDef) {
            cfg.useDef(this.checker.errorReporter, funcDecl$$31.type.symbol);
          }
        }
        if (funcDecl$$31.isConstructor) {
          var fns$$1 = funcDecl$$31.scopes;
          var fnsLen$$1 = fns$$1.members.length;
          var freeVars$$2;
          var sym$$38;
          var j$$15 = 0;
          for (;j$$15 < fnsLen$$1;j$$15++) {
            var fn$$9 = fns$$1.members[j$$15];
            if (!fn$$9.isSignature()) {
              if (TypeScript$$25.hasFlag(fn$$9.fncFlags, TypeScript$$25.FncFlags.Method) && !TypeScript$$25.hasFlag(fn$$9.fncFlags, TypeScript$$25.FncFlags.Static)) {
                this.checkPromoteFreeVars(fn$$9, funcDecl$$31.type.symbol);
              }
            }
          }
        }
      }
      this.scope = prevScope$$4;
      this.thisFnc = prevFnc;
      this.thisClassNode = prevClassNode;
      this.enclosingFncIsMethod = prevMethodStatus$$2;
      this.thisType = prevThisType;
      this.checker.locationInfo = prevLocationInfo$$2;
      this.checker.currentModDecl = prevModDecl$$1;
      signature$$10.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
      if (funcDecl$$31.returnTypeAnnotation) {
        this.checkForVoidConstructor(funcDecl$$31.returnTypeAnnotation.type, funcDecl$$31.returnTypeAnnotation);
        if (signature$$10.returnType.type == null) {
          this.checker.resolveTypeLink(this.scope, signature$$10.returnType, false);
        }
      } else {
        if (targetReturnType$$1) {
          signature$$10.returnType.type = targetReturnType$$1;
        }
      }
      if (!(fgSym$$4.flags & TypeScript$$25.SymbolFlags.RecursivelyReferenced) && funcDecl$$31.returnStatementsWithExpressions.length > 0) {
        var collection$$2 = {getLength:function() {
          return funcDecl$$31.returnStatementsWithExpressions.length;
        }, setTypeAtIndex:function(index$$57, type$$51) {
          funcDecl$$31.returnStatementsWithExpressions[index$$57].type = type$$51;
        }, getTypeAtIndex:function(index$$58) {
          return funcDecl$$31.returnStatementsWithExpressions[index$$58].type;
        }};
        var bestCommonReturnType = funcDecl$$31.returnStatementsWithExpressions[0].type;
        bestCommonReturnType = this.checker.findBestCommonType(bestCommonReturnType, null, collection$$2, true);
        if (bestCommonReturnType) {
          signature$$10.returnType.type = this.checker.widenType(bestCommonReturnType);
        } else {
          var i$$100 = 0;
          for (;i$$100 < funcDecl$$31.returnStatementsWithExpressions.length;i$$100++) {
            this.checker.errorReporter.simpleError(funcDecl$$31.returnStatementsWithExpressions[i$$100], "Incompatible return type");
          }
          signature$$10.returnType.type = this.anyType;
        }
      }
      var onlyHasThrow = false;
      if (signature$$10.returnType.type == null) {
        if (TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.HasReturnExpression)) {
          if (this.checker.styleSettings.implicitAny) {
            this.checker.errorReporter.styleError(funcDecl$$31, "type implicitly set to 'any'");
          }
          signature$$10.returnType.type = this.anyType;
        } else {
          signature$$10.returnType.type = this.voidType;
        }
      } else {
        if (signature$$10.returnType.type == this.nullType || signature$$10.returnType.type == this.checker.undefinedType) {
          signature$$10.returnType.type = this.anyType;
        } else {
          if (signature$$10.returnType.type != this.voidType && signature$$10.returnType.type != this.checker.undefinedType && signature$$10.returnType.type != this.anyType) {
            if (!funcDecl$$31.isSignature() && !funcDecl$$31.isConstructor && !TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.HasReturnExpression) && !TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.IsFatArrowFunction)) {
              onlyHasThrow = funcDecl$$31.bod.members.length > 0 && funcDecl$$31.bod.members[0].nodeType == TypeScript$$25.NodeType.Throw;
              if (!onlyHasThrow) {
                this.checker.errorReporter.simpleError(funcDecl$$31.returnTypeAnnotation || funcDecl$$31, "Function declared a non-void return type, but has no return expression");
              }
            }
            this.checkTypePrivacy(signature$$10.returnType.type, container$$21, function(typeName$$10, isModuleName$$9) {
              return _this$$10.functionReturnTypePrivacyErrorReporter(funcDecl$$31, signature$$10, typeName$$10, isModuleName$$9);
            });
          }
        }
      }
      if (funcDecl$$31.accessorSymbol) {
        accessorType = funcDecl$$31.accessorSymbol.getType();
        if (!onlyHasThrow && TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.GetAccessor) && !TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.HasReturnExpression)) {
          this.checker.errorReporter.simpleError(funcDecl$$31, "Getters must return a value");
        }
        if (accessorType) {
          if (TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.GetAccessor) && accessorType != signature$$10.returnType.type || funcDecl$$31.arguments.members.length > 0 && accessorType != funcDecl$$31.arguments.members[0].type) {
            this.checker.errorReporter.simpleError(funcDecl$$31, "Getter and setter types do not agree");
          }
        } else {
          if (TypeScript$$25.hasFlag(funcDecl$$31.fncFlags, TypeScript$$25.FncFlags.GetAccessor)) {
            funcDecl$$31.accessorSymbol.setType(signature$$10.returnType.type);
          } else {
            if (funcDecl$$31.arguments.members.length != 1) {
              this.checker.errorReporter.simpleError(funcDecl$$31, "Setters may have one and only one argument");
            } else {
              funcDecl$$31.accessorSymbol.setType(funcDecl$$31.arguments.members[0].type);
            }
          }
        }
      }
      this.typeCheckOverloadSignatures(fnType, funcDecl$$31);
      return funcDecl$$31;
    };
    TypeFlow$$1.prototype.typeCheckBases = function(type$$52) {
      var seenInterface = false;
      var bases$$6 = type$$52.extendsList;
      var baseLinks = type$$52.extendsTypeLinks;
      if (bases$$6) {
        var len$$48 = bases$$6.length;
        if (len$$48 > 0) {
          type$$52.typeFlags |= TypeScript$$25.TypeFlags.HasBaseType;
        }
        var i$$101 = 0;
        for (;i$$101 < len$$48;i$$101++) {
          if (bases$$6[i$$101] == this.checker.anyType) {
            baseLinks[i$$101].type = null;
            var oldErrors = this.checker.errorReporter.getCapturedErrors();
            TypeScript$$25.CompilerDiagnostics.assert(oldErrors.length == 0, "There shouldnt be any contextual errors when typechecking base type names");
            this.checker.errorReporter.pushToErrorSink = true;
            bases$$6[i$$101] = this.checker.resolveBaseTypeLink(baseLinks[i$$101], type$$52.containedScope);
            this.checker.errorReporter.pushToErrorSink = false;
            this.checker.errorReporter.freeCapturedErrors();
          }
          var base$$2 = bases$$6[i$$101];
          var baseRef$$1 = baseLinks[i$$101].ast;
          var baseTypeOfObject = base$$2.symbol && base$$2.symbol.name == "Object" && base$$2.symbol.container == this.checker.gloMod;
          if (baseTypeOfObject) {
            type$$52.typeFlags |= TypeScript$$25.TypeFlags.HasBaseTypeOfObject;
          }
          if (base$$2.isClassInstance()) {
            if (!type$$52.isClassInstance()) {
              this.checker.errorReporter.simpleError(baseRef$$1, "Interface base type must be interface");
            } else {
              if (seenInterface) {
                this.checker.errorReporter.simpleError(baseRef$$1, "Class may not follow interface as base type");
              }
            }
          } else {
            if (base$$2.isModuleType()) {
              this.checker.errorReporter.simpleError(baseRef$$1, "Types may not be derived from module types");
            } else {
              if (base$$2.members) {
                if (!seenInterface) {
                  seenInterface = true;
                }
              } else {
                if (!type$$52.isClassInstance()) {
                  this.checker.errorReporter.simpleError(baseRef$$1, "Interface base type must be interface");
                } else {
                  this.checker.errorReporter.simpleError(baseRef$$1, "Base type must be interface or class");
                }
                break;
              }
            }
          }
        }
      }
    };
    TypeFlow$$1.prototype.checkMembersImplementInterfaces = function(implementingType) {
      var instanceType$$5 = implementingType.getInstanceType();
      if (instanceType$$5.implementsList) {
        var len$$49 = instanceType$$5.implementsList.length;
        var i$$102 = 0;
        for (;i$$102 < len$$49;i$$102++) {
          var interfaceType$$3 = instanceType$$5.implementsList[i$$102];
          var comparisonInfo$$13 = new TypeScript$$25.TypeComparisonInfo;
          if (!this.checker.sourceIsSubtypeOfTarget(instanceType$$5, interfaceType$$3, comparisonInfo$$13)) {
            var emsg$$1 = "Class '" + instanceType$$5.getTypeName() + "' declares interface '" + interfaceType$$3.getTypeName() + "' but does not implement it";
            if (!comparisonInfo$$13.message) {
              this.checker.errorReporter.simpleErrorFromSym(instanceType$$5.symbol, emsg$$1);
            } else {
              this.checker.errorReporter.simpleErrorFromSym(instanceType$$5.symbol, emsg$$1 + ": " + comparisonInfo$$13.message);
            }
          }
        }
      }
    };
    TypeFlow$$1.prototype.typeCheckBaseCalls = function(bases$$7) {
      if (bases$$7 == null) {
        return;
      }
      var basesLen$$2 = bases$$7.members.length;
      var i$$103 = 0;
      for (;i$$103 < basesLen$$2;i$$103++) {
        var baseExpr$$2 = bases$$7.members[i$$103];
        var baseSymbol$$3 = null;
        if (baseExpr$$2.nodeType == TypeScript$$25.NodeType.Call) {
          this.typeCheckNew(baseExpr$$2);
        }
      }
    };
    TypeFlow$$1.prototype.assertUniqueNamesInBaseTypes = function(names, type$$53, classDecl$$8, checkUnique) {
      var _this$$11 = this;
      if (type$$53) {
        if (type$$53.members) {
          type$$53.members.publicMembers.map(function(key$$44, s$$27, c$$11) {
            var sym$$40 = s$$27;
            var dup = names.lookup(sym$$40.name);
            if (dup) {
              if (checkUnique) {
                _this$$11.checker.errorReporter.simpleError(classDecl$$8, "duplicate member name in bases for " + classDecl$$8.name.actualText + ": " + type$$53.symbol.name + " and " + dup.container.name + " both contain member with name " + sym$$40.name);
              }
            } else {
              names.add(sym$$40.name, sym$$40);
            }
          }, null);
        }
        if (type$$53.extendsList) {
          var len$$50 = type$$53.extendsList.length;
          var i$$104 = 0;
          for (;i$$104 < len$$50;i$$104++) {
            if (!(type$$53.extendsList[i$$104].symbol.flags & TypeScript$$25.SymbolFlags.RecursivelyReferenced)) {
              this.assertUniqueNamesInBaseTypes(names, type$$53.extendsList[i$$104], classDecl$$8, checkUnique);
            }
          }
        }
      }
    };
    TypeFlow$$1.prototype.checkBaseTypeMemberInheritance = function(derivedType, derivedTypeDecl) {
      var _this$$12 = this;
      var instanceType$$6 = derivedType.getInstanceType();
      if (instanceType$$6.extendsList == null) {
        return;
      }
      var len$$51 = instanceType$$6.extendsList.length;
      if (len$$51 > 0) {
        var names$$1 = new TypeScript$$25.StringHashTable;
        if (instanceType$$6.isClassInstance()) {
          var i$$105 = 0;
          for (;i$$105 < len$$51;i$$105++) {
            this.assertUniqueNamesInBaseTypes(names$$1, instanceType$$6.extendsList[i$$105], derivedTypeDecl, i$$105 > 0);
          }
        }
        if (instanceType$$6.members) {
          instanceType$$6.members.publicMembers.map(function(key$$45, s$$28, c$$12) {
            var sym$$41 = s$$28;
            var j$$16 = 0;
            for (;j$$16 < len$$51;j$$16++) {
              var base$$3 = instanceType$$6.extendsList[j$$16];
              if (base$$3.memberScope == null) {
                _this$$12.checker.errorReporter.simpleError(derivedTypeDecl, "Base type '" + base$$3.symbol.name + "' lacks an implementation.");
              } else {
                var bSym = base$$3.memberScope.find(sym$$41.name, false, false);
                if (bSym) {
                  var aType = sym$$41.getType();
                  var bType = bSym.getType();
                  if (!_this$$12.checker.sourceIsSubtypeOfTarget(aType, bType)) {
                    _this$$12.checker.errorReporter.simpleErrorFromSym(sym$$41, "Type of overridden member '" + sym$$41.name + "' is not subtype of original member defined by type '" + bSym.container.name + "'");
                  } else {
                    if (sym$$41.kind() == TypeScript$$25.SymbolKind.Type && bSym.kind() == TypeScript$$25.SymbolKind.Field) {
                      _this$$12.checker.errorReporter.simpleErrorFromSym(sym$$41, "Cannot override field '" + sym$$41.name + "' with method");
                    }
                  }
                }
              }
            }
          }, null);
        }
      }
    };
    TypeFlow$$1.prototype.typeCheckClass = function(classDecl$$9) {
      var typeSymbol$$6 = classDecl$$9.type.symbol;
      if (typeSymbol$$6.typeCheckStatus == TypeScript$$25.TypeCheckStatus.Finished) {
        return classDecl$$9;
      } else {
        if (typeSymbol$$6.typeCheckStatus == TypeScript$$25.TypeCheckStatus.Started) {
          return classDecl$$9;
        } else {
          typeSymbol$$6.typeCheckStatus = TypeScript$$25.TypeCheckStatus.Started;
          this.checker.addStartedPTO(typeSymbol$$6);
        }
      }
      var prevScope$$5 = this.scope;
      var svClassNode$$1 = this.thisClassNode;
      this.thisClassNode = classDecl$$9;
      var classType$$6 = classDecl$$9.type;
      this.typeCheckBases(classType$$6.instanceType);
      this.typeCheckBaseListPrivacy(classDecl$$9.extendsList, typeSymbol$$6, true);
      this.typeCheckBaseListPrivacy(classDecl$$9.implementsList, typeSymbol$$6, false);
      var prevThisType$$1 = this.thisType;
      this.thisType = classType$$6.instanceType;
      this.scope = classType$$6.instanceType.containedScope;
      if (classDecl$$9.constructorDecl) {
        this.scope = classType$$6.instanceType.constructorScope;
        var ssb$$1 = this.scope;
        var funcTable$$2 = ssb$$1.valueMembers.allMembers;
        this.addConstructorLocalArgs(classDecl$$9.constructorDecl.type.symbol, classDecl$$9.constructorDecl.arguments, funcTable$$2, true);
      }
      this.typeCheck(classDecl$$9.members);
      typeSymbol$$6.typeCheckStatus = TypeScript$$25.TypeCheckStatus.Finished;
      this.checkBaseTypeMemberInheritance(classType$$6, classDecl$$9);
      this.checkMembersImplementInterfaces(classType$$6);
      this.typeCheckOverloadSignatures(classType$$6, classDecl$$9);
      this.typeCheckOverloadSignatures(classType$$6.instanceType, classDecl$$9);
      if (!classDecl$$9.constructorDecl) {
        if (classDecl$$9.extendsList && classDecl$$9.extendsList.members.length && classDecl$$9.extendsList.members[0].type && classDecl$$9.extendsList.members[0].type.symbol.type.isClass()) {
          TypeScript$$25.cloneParentConstructGroupForChildType(classDecl$$9.type, classDecl$$9.extendsList.members[0].type.symbol.type);
        }
      }
      this.thisType = prevThisType$$1;
      this.thisClassNode = svClassNode$$1;
      this.scope = prevScope$$5;
      return classDecl$$9;
    };
    TypeFlow$$1.prototype.typeCheckOverloadSignatures = function(type$$54, ast$$107) {
      if (type$$54.call) {
        type$$54.call.typeCheck(this.checker, ast$$107, type$$54.construct != null);
      }
      if (type$$54.construct) {
        type$$54.construct.typeCheck(this.checker, ast$$107, false);
      }
      if (type$$54.index) {
        type$$54.index.typeCheck(this.checker, ast$$107, false);
      }
    };
    TypeFlow$$1.prototype.typeCheckInterface = function(interfaceDecl$$6) {
      this.typeCheckBases(interfaceDecl$$6.type);
      this.typeCheckBaseListPrivacy(interfaceDecl$$6.extendsList, interfaceDecl$$6.type.symbol, true);
      this.typeCheck(interfaceDecl$$6.members);
      this.checkBaseTypeMemberInheritance(interfaceDecl$$6.type, interfaceDecl$$6);
      if (interfaceDecl$$6.extendsList) {
        var i$$106 = 0;
        for (;i$$106 < interfaceDecl$$6.extendsList.members.length;i$$106++) {
          if (interfaceDecl$$6.extendsList.members[i$$106].type.call) {
            if (interfaceDecl$$6.type.call) {
              interfaceDecl$$6.type.call.signatures = interfaceDecl$$6.type.call.signatures.concat(interfaceDecl$$6.extendsList.members[i$$106].type.call.signatures);
            } else {
              interfaceDecl$$6.type.call = interfaceDecl$$6.extendsList.members[i$$106].type.call;
            }
          }
          if (interfaceDecl$$6.extendsList.members[i$$106].type.construct) {
            if (interfaceDecl$$6.type.construct) {
              interfaceDecl$$6.type.construct.signatures = interfaceDecl$$6.type.construct.signatures.concat(interfaceDecl$$6.extendsList.members[i$$106].type.construct.signatures);
            } else {
              interfaceDecl$$6.type.construct = interfaceDecl$$6.extendsList.members[i$$106].type.construct;
            }
          }
          if (interfaceDecl$$6.extendsList.members[i$$106].type.index) {
            if (interfaceDecl$$6.type.index) {
              interfaceDecl$$6.type.index.signatures = interfaceDecl$$6.type.index.signatures.concat(interfaceDecl$$6.extendsList.members[i$$106].type.index.signatures);
            } else {
              interfaceDecl$$6.type.index = interfaceDecl$$6.extendsList.members[i$$106].type.index;
            }
          }
        }
      }
      return interfaceDecl$$6;
    };
    TypeFlow$$1.prototype.typeCheckImportDecl = function(importDecl$$2) {
      var mod$$2 = importDecl$$2.alias.type;
      var sym$$42 = null;
      var prevInImportTC = this.inImportTypeCheck;
      this.inImportTypeCheck = true;
      this.typeCheck(importDecl$$2.alias);
      mod$$2 = importDecl$$2.alias.type;
      if (mod$$2 == null) {
        this.checker.errorReporter.simpleError(importDecl$$2.alias, "Could not resolve module alias '" + importDecl$$2.id.actualText + "'");
        mod$$2 = this.checker.anyType;
        importDecl$$2.id.sym.type = mod$$2;
      }
      importDecl$$2.id.type = mod$$2;
      sym$$42 = mod$$2.symbol;
      if (!mod$$2.isModuleType()) {
        this.checker.errorReporter.simpleError(importDecl$$2.alias, "A module cannot be aliased to a non-module type");
      } else {
        sym$$42.type = mod$$2;
        if (this.checker.typeFlow.currentScript && this.checker.typeFlow.currentScript.topLevelMod && this.checker.typeFlow.currentScript.topLevelMod.mod) {
          this.checker.typeFlow.currentScript.topLevelMod.mod.importedModules.push(importDecl$$2);
        }
        importDecl$$2.id.sym.type = mod$$2;
        if (mod$$2.symbol && mod$$2.symbol.declAST) {
          mod$$2.symbol.declAST.modFlags &= ~TypeScript$$25.ModuleFlags.ShouldEmitModuleDecl;
        }
      }
      this.inImportTypeCheck = prevInImportTC;
      return importDecl$$2;
    };
    TypeFlow$$1.prototype.typeCheckModule = function(moduleDecl$$7) {
      if (!moduleDecl$$7.mod) {
        return moduleDecl$$7;
      }
      if (this.currentScript) {
        this.currentScript.requiresGlobal = true;
      }
      var mod$$3 = moduleDecl$$7.mod;
      var sym$$43 = null;
      var prevScope$$6 = this.scope;
      var prevThisType$$2 = this.thisType;
      var prevCurrentModDecl$$1 = this.checker.currentModDecl;
      this.checker.currentModDecl = moduleDecl$$7;
      this.thisType = null;
      this.scope = mod$$3.containedScope;
      this.typeCheck(moduleDecl$$7.members);
      sym$$43 = mod$$3.symbol;
      this.checker.currentModDecl = prevCurrentModDecl$$1;
      this.thisType = prevThisType$$2;
      this.scope = prevScope$$6;
      moduleDecl$$7.type = mod$$3;
      if (sym$$43) {
        sym$$43.typeCheckStatus = TypeScript$$25.TypeCheckStatus.Finished;
      }
      return moduleDecl$$7;
    };
    TypeFlow$$1.prototype.typeCheckFor = function(forStmt$$1) {
      forStmt$$1.init = this.typeCheck(forStmt$$1.init);
      this.nestingLevel++;
      forStmt$$1.cond = this.typeCheck(forStmt$$1.cond);
      this.typeCheckCondExpr(forStmt$$1.cond);
      forStmt$$1.incr = this.typeCheck(forStmt$$1.incr);
      this.nestingLevel--;
      forStmt$$1.body = this.typeCheck(forStmt$$1.body);
      this.typeCheckCompoundStmtBlock(forStmt$$1.body, "for statement");
      forStmt$$1.type = this.voidType;
      return forStmt$$1;
    };
    TypeFlow$$1.prototype.typeCheckWith = function(withStmt$$2) {
      if (this.checker.errorsOnWith) {
        this.checker.errorReporter.simpleError(withStmt$$2.expr, "All symbols within a 'with' block will be typed as 'any'");
      }
      withStmt$$2.expr = this.typeCheck(withStmt$$2.expr);
      this.checker.inWith = true;
      withStmt$$2.body = this.typeCheck(withStmt$$2.body);
      this.typeCheckCompoundStmtBlock(withStmt$$2.body, "with statement");
      this.checker.inWith = false;
      return withStmt$$2;
    };
    TypeFlow$$1.prototype.typeCheckForIn = function(forInStmt$$1) {
      forInStmt$$1.obj = this.typeCheck(forInStmt$$1.obj);
      forInStmt$$1.lval = this.cast(this.typeCheck(forInStmt$$1.lval), this.checker.stringType);
      if (forInStmt$$1.lval.nodeType == TypeScript$$25.NodeType.VarDecl) {
        var varDecl$$19 = forInStmt$$1.lval;
        if (varDecl$$19.typeExpr) {
          this.checker.errorReporter.simpleError(varDecl$$19, "Variable declarations for for/in expressions may not contain a type annotation");
        }
        if (varDecl$$19.sym) {
          varDecl$$19.sym.setType(this.checker.stringType);
        }
      }
      forInStmt$$1.body = this.typeCheck(forInStmt$$1.body);
      this.typeCheckCompoundStmtBlock(forInStmt$$1.body, "for in statement");
      return forInStmt$$1;
    };
    TypeFlow$$1.prototype.typeCheckWhile = function(whileStmt$$1) {
      whileStmt$$1.cond = this.typeCheck(whileStmt$$1.cond);
      this.typeCheckCondExpr(whileStmt$$1.cond);
      whileStmt$$1.body = this.typeCheck(whileStmt$$1.body);
      this.typeCheckCompoundStmtBlock(whileStmt$$1.body, "while statement");
      whileStmt$$1.type = this.voidType;
      return whileStmt$$1;
    };
    TypeFlow$$1.prototype.typeCheckDoWhile = function(doWhileStmt) {
      doWhileStmt.cond = this.typeCheck(doWhileStmt.cond);
      this.typeCheckCondExpr(doWhileStmt.cond);
      doWhileStmt.body = this.typeCheck(doWhileStmt.body);
      this.typeCheckCompoundStmtBlock(doWhileStmt.body, "do while statement");
      doWhileStmt.type = this.voidType;
      return doWhileStmt;
    };
    TypeFlow$$1.prototype.typeCheckCondExpr = function(cond$$3) {
      if (this.checker.styleSettings.assignmentInCond) {
        if (cond$$3 !== null && cond$$3.nodeType >= TypeScript$$25.NodeType.Asg && cond$$3.nodeType <= TypeScript$$25.NodeType.LastAsg) {
          this.checker.errorReporter.simpleError(cond$$3, "top-level assignment statement in conditional expression");
        }
      }
    };
    TypeFlow$$1.prototype.typeCheckCompoundStmtBlock = function(stmts$$3, stmtType) {
      if (this.checker.styleSettings.blockInCompoundStmt && stmts$$3) {
        if (stmts$$3.nodeType != TypeScript$$25.NodeType.Block) {
          this.checker.errorReporter.styleError(stmts$$3, stmtType + " requires a block");
        }
      }
    };
    TypeFlow$$1.prototype.typeCheckIf = function(ifStmt$$1) {
      ifStmt$$1.cond = this.typeCheck(ifStmt$$1.cond);
      this.typeCheckCondExpr(ifStmt$$1.cond);
      ifStmt$$1.thenBod = this.typeCheck(ifStmt$$1.thenBod);
      ifStmt$$1.elseBod = this.typeCheck(ifStmt$$1.elseBod);
      this.typeCheckCompoundStmtBlock(ifStmt$$1.thenBod, "if statement");
      this.typeCheckCompoundStmtBlock(ifStmt$$1.elseBod, "if statement");
      ifStmt$$1.type = this.voidType;
      return ifStmt$$1;
    };
    TypeFlow$$1.prototype.typeFromAccessorFuncDecl = function(funcDecl$$32) {
      if (!funcDecl$$32.isAccessor()) {
        return null;
      }
      if (TypeScript$$25.hasFlag(funcDecl$$32.fncFlags, TypeScript$$25.FncFlags.GetAccessor)) {
        return funcDecl$$32.type.call.signatures[0].returnType.type;
      } else {
        return funcDecl$$32.type.call.signatures[0].parameters[0].getType();
      }
    };
    TypeFlow$$1.prototype.typeCheckObjectLit = function(objectLit$$2) {
      var resultType$$2 = new TypeScript$$25.Type;
      resultType$$2.symbol = new TypeScript$$25.TypeSymbol(this.checker.anon, objectLit$$2.minChar, objectLit$$2.limChar - objectLit$$2.minChar, this.checker.locationInfo.unitIndex, resultType$$2);
      resultType$$2.members = new TypeScript$$25.ScopedMembers(new TypeScript$$25.DualStringHashTable(new TypeScript$$25.StringHashTable, new TypeScript$$25.StringHashTable));
      resultType$$2.memberScope = new TypeScript$$25.SymbolTableScope(resultType$$2.members, null, null, null, null);
      var aggScope$$3 = new TypeScript$$25.SymbolAggregateScope(resultType$$2.symbol);
      aggScope$$3.addParentScope(resultType$$2.memberScope);
      aggScope$$3.addParentScope(this.scope);
      resultType$$2.containedScope = aggScope$$3;
      var memberDecls$$1 = objectLit$$2.operand;
      var prevThisType$$3 = this.thisType;
      var acceptTargetType = false;
      var targetType$$5 = null;
      if (this.checker.hasTargetType()) {
        targetType$$5 = this.checker.getTargetTypeContext().contextualType;
        if (targetType$$5 && targetType$$5.symbol && !this.checker.typeStatusIsFinished(targetType$$5.symbol.typeCheckStatus)) {
          if (targetType$$5.symbol.declAST) {
            this.typeCheck(targetType$$5.symbol.declAST);
          }
        }
        acceptTargetType = true;
      }
      if (memberDecls$$1) {
        var i$$107 = 0;
        var len$$52 = memberDecls$$1.members.length;
        for (;i$$107 < len$$52;i$$107++) {
          var binex$$9 = memberDecls$$1.members[i$$107];
          var id$$23 = binex$$9.operand1;
          var text$$24;
          var targetMember$$1 = null;
          var fieldSymbol$$4 = null;
          if (id$$23.nodeType == TypeScript$$25.NodeType.Name) {
            text$$24 = id$$23.text;
          } else {
            if (id$$23.nodeType == TypeScript$$25.NodeType.QString) {
              var idText$$5 = id$$23.text;
              text$$24 = idText$$5.substring(1, idText$$5.length - 1);
            } else {
              this.checker.errorReporter.simpleError(objectLit$$2, "malformed object literal");
              resultType$$2 = this.anyType;
              break;
            }
          }
          if (acceptTargetType && targetType$$5.memberScope) {
            targetMember$$1 = targetType$$5.memberScope.find(text$$24, false, false);
          }
          if (binex$$9.operand2.nodeType == TypeScript$$25.NodeType.FuncDecl && binex$$9.operand2.isAccessor()) {
            var funcDecl$$33 = binex$$9.operand2;
            var accessorSym$$1 = resultType$$2.members.publicMembers.lookup(text$$24);
            accessorSym$$1 = this.checker.createAccessorSymbol(funcDecl$$33, accessorSym$$1, resultType$$2, true, false, resultType$$2.memberScope, null);
            funcDecl$$33.accessorSymbol = accessorSym$$1;
            fieldSymbol$$4 = accessorSym$$1;
            if (id$$23.nodeType == TypeScript$$25.NodeType.Name) {
              id$$23.sym = accessorSym$$1;
            }
          }
          this.checker.typeCheckWithContextualType(acceptTargetType && targetMember$$1 ? targetMember$$1.getType() : null, false, acceptTargetType, binex$$9.operand2);
          if (acceptTargetType && targetMember$$1) {
            if (binex$$9.operand2.type == this.anyType || this.checker.sourceIsAssignableToTarget(binex$$9.operand2.type, targetMember$$1.getType()) || binex$$9.operand2.nodeType == TypeScript$$25.NodeType.FuncDecl && binex$$9.operand2.isAccessor() && this.typeFromAccessorFuncDecl(binex$$9.operand2) == targetMember$$1.getType()) {
              binex$$9.operand1.type = targetMember$$1.getType();
            }
          } else {
            binex$$9.operand2.type = binex$$9.operand2.type == this.checker.undefinedType ? this.anyType : binex$$9.operand2.type;
          }
          if (fieldSymbol$$4 == null) {
            var memberType$$1 = binex$$9.operand2.type;
            var field$$6 = new TypeScript$$25.ValueLocation;
            fieldSymbol$$4 = new TypeScript$$25.FieldSymbol(text$$24, id$$23.minChar, this.checker.locationInfo.unitIndex, true, field$$6);
            fieldSymbol$$4.flags |= TypeScript$$25.SymbolFlags.Property;
            field$$6.symbol = fieldSymbol$$4;
            fieldSymbol$$4.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
            field$$6.typeLink = new TypeScript$$25.TypeLink;
            field$$6.typeLink.type = memberType$$1;
            resultType$$2.members.publicMembers.add(text$$24, fieldSymbol$$4);
          }
          fieldSymbol$$4.isObjectLitField = true;
        }
      }
      this.thisType = prevThisType$$3;
      objectLit$$2.type = resultType$$2;
      if (targetType$$5) {
        objectLit$$2.targetType = targetType$$5;
      }
    };
    TypeFlow$$1.prototype.typeCheckArrayLit = function(arrayLit) {
      var elements$$2 = arrayLit.operand;
      var elementType = this.anyType;
      var targetElementType = null;
      var comparisonInfo$$14 = new TypeScript$$25.TypeComparisonInfo;
      comparisonInfo$$14.onlyCaptureFirstError = true;
      if (this.checker.hasTargetType()) {
        var targetType$$6 = this.checker.getTargetTypeContext().contextualType;
        if (targetType$$6.elementType) {
          targetElementType = targetType$$6.elementType;
        }
      }
      if (elements$$2) {
        var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;
        this.inArrayElementTypeCheck = true;
        this.checker.typeCheckWithContextualType(targetElementType, this.checker.inProvisionalTypecheckMode(), targetElementType != null, elements$$2);
        this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;
        elementType = elements$$2.members[0].type;
        var collection$$3 = {getLength:function() {
          return elements$$2.members.length;
        }, setTypeAtIndex:function(index$$59, type$$55) {
          elements$$2.members[index$$59].type = type$$55;
        }, getTypeAtIndex:function(index$$60) {
          return elements$$2.members[index$$60].type;
        }};
        elementType = this.checker.findBestCommonType(elementType, targetElementType, collection$$3, false, comparisonInfo$$14);
        if (elementType == this.checker.undefinedType || !prevInArrayElemTypeCheck && elementType == this.nullType) {
          elementType = this.anyType;
        }
      }
      if (!elementType) {
        var emsg$$2 = "Incompatible types in array literal expression";
        if (!comparisonInfo$$14.message) {
          this.checker.errorReporter.simpleError(arrayLit, emsg$$2);
        } else {
          this.checker.errorReporter.simpleError(arrayLit, emsg$$2 + ": " + comparisonInfo$$14.message);
        }
        elementType = this.anyType;
      } else {
        if (targetElementType) {
          if (this.checker.sourceIsAssignableToTarget(elementType, targetElementType)) {
            elementType = targetElementType;
          }
        }
      }
      arrayLit.type = this.checker.makeArrayType(elementType);
    };
    TypeFlow$$1.prototype.checkForVoidConstructor = function(type$$56, ast$$108) {
      if (type$$56 && type$$56.construct && type$$56.construct.signatures.length > 0) {
        var i$$108 = 0;
        for (;i$$108 < type$$56.construct.signatures.length;i$$108++) {
          if (type$$56.construct.signatures[i$$108].returnType.type == this.checker.voidType) {
            this.checker.errorReporter.simpleError(ast$$108, "Constructors may not have a return type of 'void'");
            break;
          }
        }
      }
    };
    TypeFlow$$1.prototype.typeCheckReturn = function(returnStmt$$1) {
      if (this.thisFnc) {
        var targetType$$7 = null;
        if (this.checker.hasTargetType()) {
          var tcContext = this.checker.getTargetTypeContext();
          var accessorType$$1 = tcContext.targetAccessorType;
          if (accessorType$$1) {
            targetType$$7 = accessorType$$1;
          } else {
            var targetSig$$1 = this.checker.getTargetTypeContext().targetSig;
            if (targetSig$$1 && targetSig$$1.returnType.type != this.voidType) {
              targetType$$7 = targetSig$$1.returnType.type;
            }
          }
        }
        if (returnStmt$$1.returnExpression) {
          this.thisFnc.fncFlags |= TypeScript$$25.FncFlags.HasReturnExpression;
          if (targetType$$7 == null && this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type && this.thisFnc.returnTypeAnnotation.type != this.voidType) {
            targetType$$7 = this.thisFnc.returnTypeAnnotation.type;
          }
          this.checker.typeCheckWithContextualType(targetType$$7, this.checker.inProvisionalTypecheckMode(), targetType$$7 != null, returnStmt$$1.returnExpression);
          var expectedReturnType = this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type ? this.thisFnc.returnTypeAnnotation.type : targetType$$7;
          if (expectedReturnType) {
            if (expectedReturnType == this.voidType && returnStmt$$1.returnExpression.type != this.voidType) {
              this.checker.errorReporter.simpleError(returnStmt$$1, "Return with value expression in void function");
              returnStmt$$1.type = returnStmt$$1.returnExpression.type;
            } else {
              returnStmt$$1.returnExpression = this.cast(returnStmt$$1.returnExpression, expectedReturnType);
              returnStmt$$1.type = expectedReturnType;
            }
          } else {
            if (targetType$$7) {
              if (returnStmt$$1.returnExpression.type != this.voidType) {
                returnStmt$$1.returnExpression = this.cast(returnStmt$$1.returnExpression, targetType$$7);
              } else {
                returnStmt$$1.returnExpression.type = targetType$$7;
              }
            }
            returnStmt$$1.type = returnStmt$$1.returnExpression.type;
          }
          this.thisFnc.returnStatementsWithExpressions[this.thisFnc.returnStatementsWithExpressions.length] = returnStmt$$1;
        } else {
          returnStmt$$1.type = targetType$$7 == null ? this.checker.voidType : targetType$$7;
        }
      }
      return returnStmt$$1;
    };
    TypeFlow$$1.prototype.typeCheckInstOf = function(ast$$109) {
      var binex$$10 = ast$$109;
      binex$$10.operand1 = this.typeCheck(binex$$10.operand1);
      binex$$10.operand2 = this.typeCheck(binex$$10.operand2);
      if (!((binex$$10.operand1.type == this.checker.anyType || this.checker.sourceIsSubtypeOfTarget(binex$$10.operand1.type, this.objectInterfaceType)) && (binex$$10.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex$$10.operand2.type, this.functionInterfaceType)))) {
        this.checker.errorReporter.simpleError(ast$$109, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type");
      }
      binex$$10.type = this.booleanType;
      return binex$$10;
    };
    TypeFlow$$1.prototype.typeCheckCommaOperator = function(ast$$110) {
      var binex$$11 = ast$$110;
      binex$$11.operand1 = this.typeCheck(binex$$11.operand1);
      binex$$11.operand2 = this.typeCheck(binex$$11.operand2);
      binex$$11.type = binex$$11.operand2.type;
      return binex$$11;
    };
    TypeFlow$$1.prototype.typeCheckLogOr = function(binex$$12) {
      binex$$12.operand1 = this.typeCheck(binex$$12.operand1);
      binex$$12.operand2 = this.typeCheck(binex$$12.operand2);
      var leftType$$6 = binex$$12.operand1.type;
      var rightType$$5 = binex$$12.operand2.type;
      if (leftType$$6 == this.checker.anyType || rightType$$5 == this.checker.anyType) {
        binex$$12.type = this.checker.anyType;
      } else {
        if (leftType$$6 == this.checker.booleanType) {
          if (rightType$$5 == this.checker.booleanType) {
            binex$$12.type = this.checker.booleanType;
          } else {
            binex$$12.type = this.checker.anyType;
          }
        } else {
          if (leftType$$6 == this.checker.numberType) {
            if (rightType$$5 == this.checker.numberType) {
              binex$$12.type = this.checker.numberType;
            } else {
              binex$$12.type = this.checker.anyType;
            }
          } else {
            if (leftType$$6 == this.checker.stringType) {
              if (rightType$$5 == this.checker.stringType) {
                binex$$12.type = this.checker.stringType;
              } else {
                binex$$12.type = this.checker.anyType;
              }
            } else {
              if (this.checker.sourceIsSubtypeOfTarget(leftType$$6, rightType$$5)) {
                binex$$12.type = rightType$$5;
              } else {
                if (this.checker.sourceIsSubtypeOfTarget(rightType$$5, leftType$$6)) {
                  binex$$12.type = leftType$$6;
                } else {
                  binex$$12.type = this.checker.anyType;
                }
              }
            }
          }
        }
      }
      return binex$$12;
    };
    TypeFlow$$1.prototype.typeCheckLogAnd = function(binex$$13) {
      binex$$13.operand1 = this.typeCheck(binex$$13.operand1);
      binex$$13.operand2 = this.typeCheck(binex$$13.operand2);
      binex$$13.type = binex$$13.operand2.type;
      return binex$$13;
    };
    TypeFlow$$1.prototype.tryAddCandidates = function(signature$$11, actuals, exactCandidates, conversionCandidates, comparisonInfo$$15) {
      var lowerBound = signature$$11.nonOptionalParameterCount;
      var upperBound = signature$$11.parameters.length;
      var formalLen = lowerBound;
      var acceptable = false;
      if (actuals.length >= lowerBound && (signature$$11.hasVariableArgList || actuals.length <= upperBound)) {
        formalLen = signature$$11.hasVariableArgList ? signature$$11.parameters.length : actuals.length;
        acceptable = true;
      }
      var repeatType = null;
      if (acceptable || signature$$11.hasVariableArgList) {
        if (signature$$11.hasVariableArgList) {
          formalLen -= 1;
          repeatType = signature$$11.parameters[formalLen].parameter.typeLink.type;
          repeatType = repeatType.elementType;
          acceptable = actuals.length >= formalLen;
        }
        var len$$53 = actuals.length;
        var exact = acceptable;
        var convert = acceptable;
        var i$$109 = 0;
        for (;i$$109 < len$$53;i$$109++) {
          var typeA;
          if (i$$109 < formalLen) {
            typeA = signature$$11.parameters[i$$109].parameter.typeLink.type;
          } else {
            typeA = repeatType;
          }
          var typeB = actuals[i$$109];
          if (!typeA || !typeB || !this.checker.typesAreIdentical(typeA, typeB)) {
            exact = false;
          }
          if (!this.checker.sourceIsAssignableToTarget(typeB, typeA, comparisonInfo$$15)) {
            convert = false;
          }
          if (!(exact || convert)) {
            break;
          }
        }
        if (exact) {
          exactCandidates[exactCandidates.length] = signature$$11;
        } else {
          if (convert && exactCandidates.length == 0) {
            conversionCandidates[conversionCandidates.length] = signature$$11;
          }
        }
      }
    };
    TypeFlow$$1.prototype.resolveOverload = function(application, group$$1) {
      var rd$$2 = this.resolutionDataCache.getResolutionData();
      var actuals$$1 = rd$$2.actuals;
      var exactCandidates$$1 = rd$$2.exactCandidates;
      var conversionCandidates$$1 = rd$$2.conversionCandidates;
      var candidate = null;
      var hasOverloads = group$$1.signatures.length > 1;
      var comparisonInfo$$16 = new TypeScript$$25.TypeComparisonInfo;
      var args$$15 = null;
      var target$$35 = null;
      if (application.nodeType == TypeScript$$25.NodeType.Call || application.nodeType == TypeScript$$25.NodeType.New) {
        var callEx$$2 = application;
        args$$15 = callEx$$2.arguments;
        target$$35 = callEx$$2.target;
        if (callEx$$2.arguments) {
          var len$$54 = callEx$$2.arguments.members.length;
          var i$$110 = 0;
          for (;i$$110 < len$$54;i$$110++) {
            actuals$$1[i$$110] = callEx$$2.arguments.members[i$$110].type;
          }
        }
      } else {
        if (application.nodeType == TypeScript$$25.NodeType.Index) {
          var binExp = application;
          target$$35 = binExp.operand1;
          args$$15 = new TypeScript$$25.ASTList;
          args$$15.members[0] = binExp.operand2;
          actuals$$1[0] = binExp.operand2.type;
        }
      }
      var j$$17 = 0;
      var groupLen = group$$1.signatures.length;
      for (;j$$17 < groupLen;j$$17++) {
        var signature$$12 = group$$1.signatures[j$$17];
        if (hasOverloads && signature$$12 == group$$1.definitionSignature && !this.checker.canCallDefinitionSignature) {
          continue;
        }
        if (!signature$$12.returnType.type && signature$$12.declAST && signature$$12.typeCheckStatus != TypeScript$$25.TypeCheckStatus.Finished) {
          this.typeCheckFunction(signature$$12.declAST);
        }
        this.tryAddCandidates(signature$$12, actuals$$1, exactCandidates$$1, conversionCandidates$$1, comparisonInfo$$16);
      }
      if (exactCandidates$$1.length == 0) {
        var applicableCandidates = this.checker.getApplicableSignatures(conversionCandidates$$1, args$$15, comparisonInfo$$16);
        if (applicableCandidates.length > 0) {
          var candidateInfo = this.checker.findMostApplicableSignature(applicableCandidates, args$$15);
          if (candidateInfo.ambiguous) {
            this.checker.errorReporter.simpleError(target$$35, "Ambiguous call expression - could not choose overload");
          }
          candidate = candidateInfo.sig;
        } else {
          var emsg$$3 = "Supplied parameters do not match any signature of call target";
          if (comparisonInfo$$16.message) {
            this.checker.errorReporter.simpleError(target$$35, emsg$$3 + ":\n\t" + comparisonInfo$$16.message);
          } else {
            this.checker.errorReporter.simpleError(target$$35, emsg$$3);
          }
        }
      } else {
        if (exactCandidates$$1.length > 1) {
          var applicableSigs$$1 = [];
          i$$110 = 0;
          for (;i$$110 < exactCandidates$$1.length;i$$110++) {
            applicableSigs$$1[i$$110] = {signature:exactCandidates$$1[i$$110], hadProvisionalErrors:false};
          }
          candidateInfo = this.checker.findMostApplicableSignature(applicableSigs$$1, args$$15);
          if (candidateInfo.ambiguous) {
            this.checker.errorReporter.simpleError(target$$35, "Ambiguous call expression - could not choose overload");
          }
          candidate = candidateInfo.sig;
        } else {
          candidate = exactCandidates$$1[0];
        }
      }
      this.resolutionDataCache.returnResolutionData(rd$$2);
      return candidate;
    };
    TypeFlow$$1.prototype.typeCheckNew = function(ast$$111) {
      var callEx$$3 = ast$$111;
      callEx$$3.target = this.typeCheck(callEx$$3.target);
      var target$$36 = callEx$$3.target;
      if (target$$36.type.construct || target$$36.type.call) {
        this.preTypeCheckCallArgs(callEx$$3.arguments);
      } else {
        callEx$$3.arguments = this.typeCheck(callEx$$3.arguments);
      }
      if (target$$36.type == this.anyType) {
        callEx$$3.type = this.anyType;
        callEx$$3.arguments = this.typeCheck(callEx$$3.arguments);
      } else {
        if (target$$36.type.construct) {
          var signature$$13 = this.resolveOverload(callEx$$3, target$$36.type.construct);
          if (signature$$13 == null) {
            callEx$$3.type = this.anyType;
          } else {
            if (signature$$13.returnType.type == this.voidType) {
              callEx$$3.type = this.anyType;
              callEx$$3.signature = signature$$13;
            } else {
              callEx$$3.type = signature$$13.returnType.type;
              callEx$$3.signature = signature$$13;
            }
          }
        } else {
          if (target$$36.type.call) {
            signature$$13 = this.resolveOverload(callEx$$3, target$$36.type.call);
            if (signature$$13 == null) {
              callEx$$3.type = this.anyType;
            } else {
              if (signature$$13.returnType.type == this.voidType || signature$$13.returnType.type == this.anyType) {
                callEx$$3.type = this.anyType;
                callEx$$3.signature = signature$$13;
              } else {
                this.checker.errorReporter.simpleError(callEx$$3.target, "new expression only valid on constructors");
              }
            }
          } else {
            if (target$$36.type.elementType) {
              callEx$$3.type = target$$36.type;
            } else {
              this.checker.errorReporter.invalidCall(callEx$$3, callEx$$3.nodeType, this.scope);
              callEx$$3.type = this.anyType;
            }
          }
        }
      }
      this.postTypeCheckCallArgs(callEx$$3);
      return callEx$$3;
    };
    TypeFlow$$1.prototype.preTypeCheckCallArgs = function(args$$16) {
      if (!args$$16) {
        return;
      }
      var i$$111 = 0;
      for (;i$$111 < args$$16.members.length;i$$111++) {
        switch(args$$16.members[i$$111].nodeType) {
          case TypeScript$$25.NodeType.FuncDecl:
          ;
          case TypeScript$$25.NodeType.ObjectLit:
          ;
          case TypeScript$$25.NodeType.ArrayLit:
            continue;
          default:
            this.typeCheck(args$$16.members[i$$111]);
            break;
        }
      }
    };
    TypeFlow$$1.prototype.postTypeCheckCallArgs = function(callEx$$4) {
      var acceptedTargetType = false;
      var i$$112 = 0;
      if (callEx$$4.target && callEx$$4.target.type && callEx$$4.signature && callEx$$4.arguments) {
        var sig$$4 = callEx$$4.signature;
        if (sig$$4 && callEx$$4.arguments.members.length >= sig$$4.nonOptionalParameterCount) {
          acceptedTargetType = true;
          var targetType$$8 = null;
          var nonVarArgFormalParamLength = sig$$4.hasVariableArgList ? sig$$4.parameters.length - 1 : sig$$4.parameters.length;
          var nonVarArgActualParamLength = callEx$$4.arguments.members.length < nonVarArgFormalParamLength ? callEx$$4.arguments.members.length : nonVarArgFormalParamLength;
          i$$112 = 0;
          for (;i$$112 < nonVarArgActualParamLength;i$$112++) {
            targetType$$8 = sig$$4.parameters[i$$112].getType();
            switch(callEx$$4.arguments.members[i$$112].nodeType) {
              case TypeScript$$25.NodeType.FuncDecl:
              ;
              case TypeScript$$25.NodeType.ObjectLit:
              ;
              case TypeScript$$25.NodeType.ArrayLit:
                this.checker.typeCheckWithContextualType(targetType$$8, this.checker.inProvisionalTypecheckMode(), !sig$$4.parameters[i$$112].declAST.isParenthesized, callEx$$4.arguments.members[i$$112]);
                break;
            }
          }
          if (sig$$4.hasVariableArgList) {
            var varArgParamIndex = sig$$4.nonOptionalParameterCount - 1;
            targetType$$8 = sig$$4.parameters[varArgParamIndex].getType();
            if (targetType$$8) {
              targetType$$8 = targetType$$8.elementType;
            }
            var isParenthesized = !sig$$4.parameters[varArgParamIndex].declAST.isParenthesized;
            i$$112 = nonVarArgActualParamLength;
            for (;i$$112 < callEx$$4.arguments.members.length;i$$112++) {
              switch(callEx$$4.arguments.members[i$$112].nodeType) {
                case TypeScript$$25.NodeType.FuncDecl:
                ;
                case TypeScript$$25.NodeType.ObjectLit:
                ;
                case TypeScript$$25.NodeType.ArrayLit:
                  this.checker.typeCheckWithContextualType(targetType$$8, this.checker.inProvisionalTypecheckMode(), isParenthesized, callEx$$4.arguments.members[i$$112]);
                  break;
              }
            }
          }
        }
      }
      if (!acceptedTargetType && callEx$$4.arguments) {
        this.checker.killCurrentContextualType();
        i$$112 = 0;
        for (;i$$112 < callEx$$4.arguments.members.length;i$$112++) {
          switch(callEx$$4.arguments.members[i$$112].nodeType) {
            case TypeScript$$25.NodeType.FuncDecl:
            ;
            case TypeScript$$25.NodeType.ObjectLit:
            ;
            case TypeScript$$25.NodeType.ArrayLit:
              this.typeCheck(callEx$$4.arguments.members[i$$112]);
              break;
            default:
              continue;
          }
        }
      }
    };
    TypeFlow$$1.prototype.typeCheckCall = function(ast$$112) {
      var callEx$$5 = ast$$112;
      if (this.checker.styleSettings.newMustBeUsed && ast$$112.nodeType == TypeScript$$25.NodeType.New) {
        if (TypeScript$$25.hasFlag(ast$$112.flags, TypeScript$$25.ASTFlags.IsStatement)) {
          this.checker.errorReporter.styleError(ast$$112, "use of new expression as a statement");
        }
      } else {
        if (!this.checker.styleSettings.evalOK && ast$$112.nodeType == TypeScript$$25.NodeType.Call) {
          if (callEx$$5.target.nodeType == TypeScript$$25.NodeType.Name && callEx$$5.target.text == "eval") {
            this.checker.errorReporter.styleError(callEx$$5, "eval not permitted");
          }
        }
      }
      if (callEx$$5.target.nodeType == TypeScript$$25.NodeType.FuncDecl) {
        callEx$$5.target.isInlineCallLiteral = true;
      }
      var prevInSuperCall = this.inSuperCall;
      if (callEx$$5.target.nodeType == TypeScript$$25.NodeType.Super) {
        this.inSuperCall = true;
      }
      callEx$$5.target = this.typeCheck(callEx$$5.target);
      this.preTypeCheckCallArgs(callEx$$5.arguments);
      var target$$37 = callEx$$5.target;
      if (target$$37.type == null || target$$37.type == this.anyType || this.functionInterfaceType && target$$37.type == this.functionInterfaceType) {
        callEx$$5.type = this.anyType;
      } else {
        var fnType$$1 = target$$37.type;
        if (fnType$$1.call) {
          var signature$$14 = this.resolveOverload(callEx$$5, fnType$$1.call);
          if (signature$$14 == null) {
            callEx$$5.type = this.anyType;
          } else {
            callEx$$5.type = signature$$14.returnType.type;
            callEx$$5.signature = signature$$14;
          }
        } else {
          if (callEx$$5.target.nodeType == TypeScript$$25.NodeType.Super && this.thisFnc && this.thisFnc.isConstructor && TypeScript$$25.hasFlag(this.thisFnc.fncFlags, TypeScript$$25.FncFlags.ClassMethod)) {
            signature$$14 = fnType$$1.symbol.type.construct ? this.resolveOverload(callEx$$5, fnType$$1.symbol.type.construct) : null;
            if (signature$$14 == null) {
              callEx$$5.type = this.anyType;
            } else {
              callEx$$5.flags |= TypeScript$$25.ASTFlags.ClassBaseConstructorCall;
              callEx$$5.type = signature$$14.returnType.type;
              callEx$$5.signature = signature$$14;
            }
          } else {
            callEx$$5.type = this.anyType;
            this.checker.errorReporter.invalidCall(callEx$$5, callEx$$5.nodeType, this.scope);
          }
        }
      }
      this.postTypeCheckCallArgs(callEx$$5);
      this.inSuperCall = prevInSuperCall;
      return callEx$$5;
    };
    TypeFlow$$1.prototype.assignScopes = function(ast$$113) {
      var script$$17 = ast$$113;
      this.checker.locationInfo = script$$17.locationInfo;
      var globalChain$$1 = new ScopeChain(this.checker.gloMod, null, this.globalScope);
      var context$$64 = new TypeScript$$25.AssignScopeContext(globalChain$$1, this, [this.checker.currentModDecl]);
      TypeScript$$25.getAstWalkerFactory().walk(ast$$113, TypeScript$$25.preAssignScopes, TypeScript$$25.postAssignScopes, null, context$$64);
    };
    TypeFlow$$1.prototype.findMemberScope = function(enclosingScopeContext, matchFlag$$1) {
      var enclosingScope$$1 = enclosingScopeContext.getScope();
      var pos$$6 = enclosingScopeContext.pos - enclosingScopeContext.getScriptFragmentPosition();
      var scriptFragment = enclosingScopeContext.getScriptFragment();
      var memContext = new TypeScript$$25.MemberScopeContext(this, pos$$6, matchFlag$$1);
      memContext.scope = enclosingScope$$1;
      if (scriptFragment.nodeType == TypeScript$$25.NodeType.Name) {
        return scriptFragment.type.getMemberScope(this);
      } else {
        TypeScript$$25.getAstWalkerFactory().walk(scriptFragment, TypeScript$$25.preFindMemberScope, null, null, memContext);
        if (memContext.ast && enclosingScopeContext.enclosingClassDecl && memContext.ast.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {
          enclosingScopeContext.publicsOnly = false;
        }
        if (memContext.type) {
          return memContext.type.getMemberScope(this);
        } else {
          return null;
        }
      }
    };
    TypeFlow$$1.prototype.findMemberScopeAt = function(enclosingScopeContext$$1) {
      return this.findMemberScope(enclosingScopeContext$$1, TypeScript$$25.ASTFlags.DotLHS);
    };
    TypeFlow$$1.prototype.findMemberScopeAtFullAst = function(enclosingScopeContext$$2) {
      var matchFlag$$2 = TypeScript$$25.ASTFlags.DotLHS;
      var pos$$7 = enclosingScopeContext$$2.pos;
      var astResult = null;
      var preFindMemberScopeFullAst = function(ast$$114, parent$$68, walker$$52) {
        if (TypeScript$$25.isValidAstNode(ast$$114)) {
          if (TypeScript$$25.hasFlag(ast$$114.flags, matchFlag$$2) && (pos$$7 == ast$$114.limChar || pos$$7 - 1 == ast$$114.limChar)) {
            astResult = ast$$114;
            walker$$52.options.stopWalk();
          }
          walker$$52.options.goChildren = ast$$114.minChar <= pos$$7 && pos$$7 <= ast$$114.limChar;
        }
        return ast$$114;
      };
      var preFindMemberScopeFullAstFuzy = function(ast$$115, parent$$69, walker$$53) {
        if (TypeScript$$25.isValidAstNode(ast$$115)) {
          if (TypeScript$$25.hasFlag(ast$$115.flags, matchFlag$$2) && (ast$$115.minChar < pos$$7 && pos$$7 <= ast$$115.limChar)) {
            astResult = ast$$115;
          }
          walker$$53.options.goChildren = ast$$115.minChar <= pos$$7 && pos$$7 <= ast$$115.limChar;
        }
        return ast$$115;
      };
      TypeScript$$25.getAstWalkerFactory().walk(enclosingScopeContext$$2.script, preFindMemberScopeFullAst);
      if (astResult == null) {
        TypeScript$$25.getAstWalkerFactory().walk(enclosingScopeContext$$2.script, preFindMemberScopeFullAstFuzy);
      }
      if (astResult && enclosingScopeContext$$2.enclosingClassDecl && astResult.type == enclosingScopeContext$$2.enclosingClassDecl.type.instanceType) {
        enclosingScopeContext$$2.publicsOnly = false;
      }
      if (astResult && astResult.type) {
        return astResult.type.getMemberScope(this);
      } else {
        return null;
      }
    };
    return TypeFlow$$1;
  }();
  TypeScript$$25.TypeFlow = TypeFlow;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$26) {
  function getTypeLink(ast$$116, checker$$18, autoVar) {
    var result$$30 = new TypeLink;
    result$$30.ast = ast$$116;
    if (ast$$116 == null && autoVar) {
      result$$30.type = checker$$18.anyType;
    } else {
      result$$30.type = null;
    }
    return result$$30;
  }
  (function(Primitive$$1) {
    Primitive$$1._map = [];
    Primitive$$1.None = 0;
    Primitive$$1.Void = 1;
    Primitive$$1.Double = 2;
    Primitive$$1.String = 4;
    Primitive$$1.Boolean = 8;
    Primitive$$1.Any = 16;
    Primitive$$1.Null = 32;
    Primitive$$1.Undefined = 64;
  })(TypeScript$$26.Primitive || (TypeScript$$26.Primitive = {}));
  var Primitive = TypeScript$$26.Primitive;
  var MemberName = function() {
    function MemberName$$1() {
      this.prefix = "";
      this.suffix = "";
    }
    MemberName$$1.prototype.isString = function() {
      return false;
    };
    MemberName$$1.prototype.isArray = function() {
      return false;
    };
    MemberName$$1.prototype.toString = function() {
      return MemberName$$1.memberNameToString(this);
    };
    MemberName$$1.memberNameToString = function memberNameToString(memberName$$3) {
      var result$$31 = memberName$$3.prefix;
      if (memberName$$3.isString()) {
        result$$31 += memberName$$3.text;
      } else {
        var ar = memberName$$3;
        var index$$61 = 0;
        for (;index$$61 < ar.entries.length;index$$61++) {
          result$$31 += MemberName$$1.memberNameToString(ar.entries[index$$61]);
          result$$31 += ar.delim;
        }
      }
      result$$31 += memberName$$3.suffix;
      return result$$31;
    };
    MemberName$$1.create = function create(arg1, arg2, arg3) {
      if (typeof arg1 == "string") {
        return new MemberNameString(arg1);
      } else {
        var result$$32 = new MemberNameArray;
        if (arg2) {
          result$$32.prefix = arg2;
        }
        if (arg3) {
          result$$32.suffix = arg3;
        }
        result$$32.entries.push(arg1);
        return result$$32;
      }
    };
    return MemberName$$1;
  }();
  TypeScript$$26.MemberName = MemberName;
  var MemberNameString = function(_super$$65) {
    function MemberNameString$$1(text$$25) {
      _super$$65.call(this);
      this.text = text$$25;
    }
    __extends(MemberNameString$$1, _super$$65);
    MemberNameString$$1.prototype.isString = function() {
      return true;
    };
    return MemberNameString$$1;
  }(MemberName);
  TypeScript$$26.MemberNameString = MemberNameString;
  var MemberNameArray = function(_super$$66) {
    function MemberNameArray$$1() {
      _super$$66.apply(this, arguments);
      this.delim = "";
      this.entries = [];
    }
    __extends(MemberNameArray$$1, _super$$66);
    MemberNameArray$$1.prototype.isArray = function() {
      return true;
    };
    MemberNameArray$$1.prototype.add = function(entry$$2) {
      this.entries.push(entry$$2);
    };
    MemberNameArray$$1.prototype.addAll = function(entries) {
      var i$$113 = 0;
      for (;i$$113 < entries.length;i$$113++) {
        this.entries.push(entries[i$$113]);
      }
    };
    return MemberNameArray$$1;
  }(MemberName);
  TypeScript$$26.MemberNameArray = MemberNameArray;
  var currentTypeID = -1;
  var Type = function() {
    function Type$$1() {
      this.typeID = currentTypeID++;
      this.construct = null;
      this.call = null;
      this.index = null;
      this.passTypeCreated = TypeScript$$26.CompilerDiagnostics.analysisPass;
      this.primitiveTypeClass = Primitive.None;
      this.typeFlags = TypeScript$$26.TypeFlags.None;
    }
    Type$$1.prototype.baseClass = function() {
      if (this.extendsList && this.extendsList.length > 0) {
        return this.extendsList[0];
      } else {
        return null;
      }
    };
    Type$$1.prototype.getArrayBase = function(arrInstType$$2, checker$$19) {
      return this.arrayCache.specialize(arrInstType$$2, checker$$19);
    };
    Type$$1.prototype.isClass = function() {
      return this.instanceType != null;
    };
    Type$$1.prototype.isArray = function() {
      return this.elementType != null;
    };
    Type$$1.prototype.isClassInstance = function() {
      return this.symbol && !this.elementType && this.symbol.type.isClass();
    };
    Type$$1.prototype.getInstanceType = function() {
      if (this.isClass()) {
        return this.instanceType;
      } else {
        return this;
      }
    };
    Type$$1.prototype.hasImplementation = function() {
      return TypeScript$$26.hasFlag(this.typeFlags, TypeScript$$26.TypeFlags.HasImplementation);
    };
    Type$$1.prototype.setHasImplementation = function() {
      this.typeFlags |= TypeScript$$26.TypeFlags.HasImplementation;
    };
    Type$$1.prototype.isDouble = function() {
      return TypeScript$$26.hasFlag(this.primitiveTypeClass, Primitive.Double);
    };
    Type$$1.prototype.isString = function() {
      return TypeScript$$26.hasFlag(this.primitiveTypeClass, Primitive.String);
    };
    Type$$1.prototype.isBoolean = function() {
      return TypeScript$$26.hasFlag(this.primitiveTypeClass, Primitive.Boolean);
    };
    Type$$1.prototype.isNull = function() {
      return TypeScript$$26.hasFlag(this.primitiveTypeClass, Primitive.Null);
    };
    Type$$1.prototype.getTypeName = function() {
      return this.getMemberTypeName("", true, false, null);
    };
    Type$$1.prototype.getScopedTypeName = function(scope$$31) {
      return this.getMemberTypeName("", true, false, scope$$31);
    };
    Type$$1.prototype.getScopedTypeNameEx = function(scope$$32) {
      return this.getMemberTypeNameEx("", true, false, scope$$32);
    };
    Type$$1.prototype.callCount = function() {
      var total = 0;
      if (this.call) {
        total += this.call.signatures.length;
      }
      if (this.construct) {
        total += this.construct.signatures.length;
      }
      if (this.index) {
        total += this.index.signatures.length;
      }
      return total;
    };
    Type$$1.prototype.getMemberTypeName = function(prefix$$4, topLevel, isElementType, scope$$33) {
      var memberName$$4 = this.getMemberTypeNameEx(prefix$$4, topLevel, isElementType, scope$$33);
      return memberName$$4.toString();
    };
    Type$$1.prototype.getMemberTypeNameEx = function(prefix$$5, topLevel$$1, isElementType$$1, scope$$34) {
      if (this.elementType) {
        return MemberName.create(this.elementType.getMemberTypeNameEx(prefix$$5, false, true, scope$$34), "", "[]");
      } else {
        if (this.symbol && this.symbol.name && this.symbol.name != "_anonymous" && (this.call == null && this.construct == null && this.index == null || TypeScript$$26.hasFlag(this.typeFlags, TypeScript$$26.TypeFlags.BuildingName) || this.members && !this.isClass())) {
          var tn = this.symbol.scopeRelativeName(scope$$34);
          return MemberName.create(tn == "null" ? "any" : tn);
        } else {
          if (this.members || this.call || this.construct) {
            if (TypeScript$$26.hasFlag(this.typeFlags, TypeScript$$26.TypeFlags.BuildingName)) {
              return MemberName.create("this");
            }
            this.typeFlags |= TypeScript$$26.TypeFlags.BuildingName;
            var builder$$5 = "";
            var allMemberNames = new MemberNameArray;
            var curlies$$1 = isElementType$$1 || this.index != null;
            var memCount = 0;
            var delim = "; ";
            if (this.members) {
              this.members.allMembers.map(function(key$$46, s$$29, unused$$1) {
                var sym$$44 = s$$29;
                if (!TypeScript$$26.hasFlag(sym$$44.flags, TypeScript$$26.SymbolFlags.BuiltIn)) {
                  var typeNameMember = sym$$44.getTypeNameEx(scope$$34);
                  if (typeNameMember.isArray() && typeNameMember.delim == delim) {
                    allMemberNames.addAll(typeNameMember.entries);
                  } else {
                    allMemberNames.add(typeNameMember);
                  }
                  memCount++;
                  curlies$$1 = true;
                }
              }, null);
            }
            var signatureCount = this.callCount();
            var j$$18;
            var len$$55 = 0;
            var shortform$$3 = !curlies$$1 && signatureCount == 1 && topLevel$$1;
            if (this.call) {
              allMemberNames.addAll(this.call.toStrings(prefix$$5, shortform$$3, scope$$34));
            }
            if (this.construct) {
              allMemberNames.addAll(this.construct.toStrings("new", shortform$$3, scope$$34));
            }
            if (this.index) {
              allMemberNames.addAll(this.index.toStrings("", shortform$$3, scope$$34));
            }
            if (curlies$$1 || signatureCount > 1 && topLevel$$1) {
              allMemberNames.prefix = "{ ";
              allMemberNames.suffix = "}";
              allMemberNames.delim = delim;
            } else {
              if (allMemberNames.entries.length > 1) {
                allMemberNames.delim = delim;
              }
            }
            this.typeFlags &= ~TypeScript$$26.TypeFlags.BuildingName;
            if (signatureCount == 0 && memCount == 0) {
              return MemberName.create("{}");
            } else {
              return allMemberNames;
            }
          } else {
            return MemberName.create("{}");
          }
        }
      }
    };
    Type$$1.prototype.checkDecl = function(checker$$20) {
      if (this.isClassInstance() || this.isClass()) {
        if (this.symbol.declAST) {
          checker$$20.typeFlow.inScopeTypeCheckDecl(this.symbol.declAST);
        }
      }
    };
    Type$$1.prototype.getMemberScope = function(flow$$1) {
      if (this == flow$$1.anyType) {
        return null;
      } else {
        if (this.isDouble()) {
          if (flow$$1.numberInterfaceType) {
            return flow$$1.numberInterfaceType.memberScope;
          } else {
            return null;
          }
        } else {
          if (this.isBoolean()) {
            if (flow$$1.booleanInterfaceType) {
              return flow$$1.booleanInterfaceType.memberScope;
            } else {
              return null;
            }
          } else {
            if (this == flow$$1.stringType) {
              if (flow$$1.stringInterfaceType) {
                return flow$$1.stringInterfaceType.memberScope;
              } else {
                return null;
              }
            } else {
              if (this.elementType) {
                if (flow$$1.arrayInterfaceType) {
                  var arrInstType$$3 = this.elementType.getArrayBase(flow$$1.arrayInterfaceType, flow$$1.checker);
                  return arrInstType$$3.memberScope;
                } else {
                  return null;
                }
              } else {
                return this.memberScope;
              }
            }
          }
        }
      }
    };
    Type$$1.prototype.isReferenceType = function() {
      return this.members || this.extendsList || this.construct || this.call || this.index || this.elementType;
    };
    Type$$1.prototype.specializeType = function(pattern$$8, replacement$$6, checker$$21, membersOnly) {
      if (pattern$$8 == this) {
        return replacement$$6;
      }
      var result$$33 = this;
      if (membersOnly) {
        if (this.isReferenceType()) {
          result$$33 = new Type$$1;
          if (this.members) {
            result$$33.members = new TypeScript$$26.ScopedMembers(new TypeScript$$26.DualStringHashTable(new TypeScript$$26.StringHashTable, new TypeScript$$26.StringHashTable));
            this.members.publicMembers.map(function(key$$47, s$$30, unused$$2) {
              var sym$$45 = s$$30;
              var bSym$$1 = sym$$45.specializeType(pattern$$8, replacement$$6, checker$$21);
              result$$33.members.addPublicMember(bSym$$1.name, bSym$$1);
            }, null);
            this.members.privateMembers.map(function(key$$48, s$$31, unused$$3) {
              var sym$$46 = s$$31;
              var bSym$$2 = sym$$46.specializeType(pattern$$8, replacement$$6, checker$$21);
              result$$33.members.addPrivateMember(bSym$$2.name, bSym$$2);
            }, null);
          }
          if (this.ambientMembers) {
            result$$33.ambientMembers = new TypeScript$$26.ScopedMembers(new TypeScript$$26.DualStringHashTable(new TypeScript$$26.StringHashTable, new TypeScript$$26.StringHashTable));
            this.ambientMembers.publicMembers.map(function(key$$49, s$$32, unused$$4) {
              var sym$$47 = s$$32;
              var bSym$$3 = sym$$47.specializeType(pattern$$8, replacement$$6, checker$$21);
              result$$33.ambientMembers.addPublicMember(bSym$$3.name, bSym$$3);
            }, null);
            this.ambientMembers.privateMembers.map(function(key$$50, s$$33, unused$$5) {
              var sym$$48 = s$$33;
              var bSym$$4 = sym$$48.specializeType(pattern$$8, replacement$$6, checker$$21);
              result$$33.ambientMembers.addPrivateMember(bSym$$4.name, bSym$$4);
            }, null);
          }
          result$$33.containedScope = checker$$21.scopeOf(result$$33);
          result$$33.memberScope = result$$33.containedScope;
        }
      } else {
        if (this.elementType) {
          if (this.elementType == pattern$$8) {
            result$$33 = checker$$21.makeArrayType(replacement$$6);
          } else {
            if (this.elementType.elementType == pattern$$8) {
              result$$33 = checker$$21.makeArrayType(checker$$21.makeArrayType(replacement$$6));
            }
          }
        } else {
          if (this.call) {
            result$$33 = new Type$$1;
            result$$33.call = this.call.specializeType(pattern$$8, replacement$$6, checker$$21);
          }
        }
      }
      return result$$33;
    };
    Type$$1.prototype.hasBase = function(baseType) {
      if (baseType == this) {
        return true;
      } else {
        if (this.extendsList) {
          var i$$114 = 0;
          var len$$56 = this.extendsList.length;
          for (;i$$114 < len$$56;i$$114++) {
            if (this.extendsList[i$$114].hasBase(baseType)) {
              return true;
            }
          }
        }
      }
      return false;
    };
    Type$$1.prototype.mergeOrdered = function(b$$14, checker$$22, acceptVoid$$1, comparisonInfo$$17) {
      if (this == checker$$22.anyType || b$$14 == checker$$22.anyType) {
        return checker$$22.anyType;
      } else {
        if (this == b$$14) {
          return this;
        } else {
          if (b$$14 == checker$$22.nullType && this != checker$$22.nullType) {
            return this;
          } else {
            if (this == checker$$22.nullType && b$$14 != checker$$22.nullType) {
              return b$$14;
            } else {
              if (acceptVoid$$1 && b$$14 == checker$$22.voidType && this != checker$$22.voidType) {
                return this;
              } else {
                if (acceptVoid$$1 && this == checker$$22.voidType && b$$14 != checker$$22.voidType) {
                  return b$$14;
                } else {
                  if (b$$14 == checker$$22.undefinedType && this != checker$$22.undefinedType) {
                    return this;
                  } else {
                    if (this == checker$$22.undefinedType && b$$14 != checker$$22.undefinedType) {
                      return b$$14;
                    } else {
                      if (this.elementType && b$$14.elementType) {
                        if (this.elementType == b$$14.elementType) {
                          return this;
                        } else {
                          var mergedET = this.elementType.mergeOrdered(b$$14.elementType, checker$$22, acceptVoid$$1, comparisonInfo$$17);
                          if (mergedET == null) {
                            return checker$$22.makeArrayType(checker$$22.anyType);
                          } else {
                            return checker$$22.makeArrayType(mergedET);
                          }
                        }
                      } else {
                        if (checker$$22.sourceIsSubtypeOfTarget(this, b$$14, comparisonInfo$$17)) {
                          return b$$14;
                        } else {
                          if (checker$$22.sourceIsSubtypeOfTarget(b$$14, this, comparisonInfo$$17)) {
                            return this;
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    Type$$1.prototype.isModuleType = function() {
      return false;
    };
    Type$$1.prototype.hasMembers = function() {
      return this.members != null;
    };
    Type$$1.prototype.getAllEnclosedTypes = function() {
      return null;
    };
    Type$$1.prototype.getAllAmbientEnclosedTypes = function() {
      return null;
    };
    Type$$1.prototype.getPublicEnclosedTypes = function() {
      return null;
    };
    Type$$1.prototype.getpublicAmbientEnclosedTypes = function() {
      return null;
    };
    Type$$1.prototype.getDocComments = function() {
      if (this.elementType || !this.symbol) {
        return[];
      }
      if (this.isClassInstance() || this.isClass()) {
        if (this.symbol.declAST.nodeType == TypeScript$$26.NodeType.FuncDecl) {
          return this.symbol.declAST.classDecl.getDocComments();
        } else {
          return this.symbol.getDocComments();
        }
      }
      if (this.symbol.name && this.symbol.name != "_anonymous" && (this.call == null && this.construct == null && this.index == null || this.members)) {
        return this.symbol.getDocComments();
      }
      return[];
    };
    return Type$$1;
  }();
  TypeScript$$26.Type = Type;
  var ModuleType = function(_super$$67) {
    function ModuleType$$1(enclosedTypes$$4, ambientEnclosedTypes$$4) {
      _super$$67.call(this);
      this.enclosedTypes = enclosedTypes$$4;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$4;
      this.importedModules = [];
    }
    __extends(ModuleType$$1, _super$$67);
    ModuleType$$1.prototype.isModuleType = function() {
      return true;
    };
    ModuleType$$1.prototype.hasMembers = function() {
      return this.members != null || this.enclosedTypes != null;
    };
    ModuleType$$1.prototype.getAllEnclosedTypes = function() {
      return this.enclosedTypes;
    };
    ModuleType$$1.prototype.getAllAmbientEnclosedTypes = function() {
      return this.ambientEnclosedTypes;
    };
    ModuleType$$1.prototype.getPublicEnclosedTypes = function() {
      return null;
    };
    ModuleType$$1.prototype.getpublicAmbientEnclosedTypes = function() {
      return null;
    };
    ModuleType$$1.findDynamicModuleNameInHashTable = function findDynamicModuleNameInHashTable(moduleType$$1, members$$27) {
      var moduleName$$1 = null;
      members$$27.map(function(key$$51, s$$34, c$$13) {
        if (moduleName$$1 == null && !TypeScript$$26.isQuoted(key$$51)) {
          var symbol$$22 = s$$34;
          var type$$57 = symbol$$22.getType();
          if (type$$57 == moduleType$$1) {
            moduleName$$1 = {name:key$$51, symbol:symbol$$22};
          }
        }
      }, null);
      return moduleName$$1;
    };
    ModuleType$$1.prototype.findDynamicModuleName = function(moduleType$$2) {
      var moduleName$$2 = null;
      moduleName$$2 = ModuleType$$1.findDynamicModuleNameInHashTable(moduleType$$2, this.members.allMembers);
      if (moduleName$$2 == null) {
        moduleName$$2 = ModuleType$$1.findDynamicModuleNameInHashTable(moduleType$$2, this.ambientMembers.allMembers);
      }
      return moduleName$$2;
    };
    return ModuleType$$1;
  }(Type);
  TypeScript$$26.ModuleType = ModuleType;
  var TypeLink = function() {
    function TypeLink$$1() {
      this.type = null;
      this.ast = null;
    }
    return TypeLink$$1;
  }();
  TypeScript$$26.TypeLink = TypeLink;
  TypeScript$$26.getTypeLink = getTypeLink;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$27) {
  function stripQuotes(str$$7) {
    return str$$7.replace('"', "").replace("'", "").replace("'", "").replace('"', "");
  }
  function isQuoted(str$$8) {
    return str$$8.indexOf('"') != -1 || str$$8.indexOf("'") != -1 || str$$8.indexOf("'") != -1 || str$$8.indexOf('"') != -1;
  }
  function quoteStr(str$$9) {
    return'"' + str$$9 + '"';
  }
  function swapQuotes(str$$10) {
    if (str$$10.indexOf('"') != -1) {
      str$$10 = str$$10.replace('"', "'");
      str$$10 = str$$10.replace('"', "'");
    } else {
      str$$10 = str$$10.replace("'", '"');
      str$$10 = str$$10.replace("'", '"');
    }
    return str$$10;
  }
  function switchToForwardSlashes(path$$8) {
    return path$$8.replace(/\\/g, "/");
  }
  function trimModName(modName$$4) {
    if (modName$$4.length > 6 && modName$$4.substring(modName$$4.length - 6, modName$$4.length) == ".d.str") {
      return modName$$4.substring(0, modName$$4.length - 6);
    }
    if (modName$$4.length > 4 && modName$$4.substring(modName$$4.length - 4, modName$$4.length) == ".str") {
      return modName$$4.substring(0, modName$$4.length - 4);
    }
    if (modName$$4.length > 5 && modName$$4.substring(modName$$4.length - 5, modName$$4.length) == ".d.ts") {
      return modName$$4.substring(0, modName$$4.length - 5);
    }
    if (modName$$4.length > 3 && modName$$4.substring(modName$$4.length - 3, modName$$4.length) == ".ts") {
      return modName$$4.substring(0, modName$$4.length - 3);
    }
    if (modName$$4.length > 3 && modName$$4.substring(modName$$4.length - 3, modName$$4.length) == ".js") {
      return modName$$4.substring(0, modName$$4.length - 3);
    }
    return modName$$4;
  }
  function getDeclareFilePath(fname) {
    return isSTRFile(fname) ? changePathToDSTR(fname) : isTSFile(fname) ? changePathToDTS(fname) : changePathToDTS(fname);
  }
  function isFileOfExtension(fname$$1, ext) {
    var invariantFname = fname$$1.toLocaleUpperCase();
    var invariantExt = ext.toLocaleUpperCase();
    var extLength = invariantExt.length;
    return invariantFname.length > extLength && invariantFname.substring(invariantFname.length - extLength, invariantFname.length) == invariantExt;
  }
  function isJSFile(fname$$2) {
    return isFileOfExtension(fname$$2, ".js");
  }
  function isSTRFile(fname$$3) {
    return isFileOfExtension(fname$$3, ".str");
  }
  function isTSFile(fname$$4) {
    return isFileOfExtension(fname$$4, ".ts");
  }
  function isDSTRFile(fname$$5) {
    return isFileOfExtension(fname$$5, ".d.str");
  }
  function isDTSFile(fname$$6) {
    return isFileOfExtension(fname$$6, ".d.ts");
  }
  function getPrettyName(modPath$$3, quote$$1, treatAsFileName) {
    if (typeof quote$$1 === "undefined") {
      quote$$1 = true;
    }
    if (typeof treatAsFileName === "undefined") {
      treatAsFileName = false;
    }
    var modName$$5 = treatAsFileName ? switchToForwardSlashes(modPath$$3) : trimModName(stripQuotes(modPath$$3));
    var components = this.getPathComponents(modName$$5);
    return components.length ? quote$$1 ? quoteStr(components[components.length - 1]) : components[components.length - 1] : modPath$$3;
  }
  function getPathComponents(path$$9) {
    return path$$9.split("/");
  }
  function getRelativePathToFixedPath(fixedModFilePath, absoluteModPath) {
    absoluteModPath = switchToForwardSlashes(absoluteModPath);
    var modComponents = this.getPathComponents(absoluteModPath);
    var fixedModComponents = this.getPathComponents(fixedModFilePath);
    var joinStartIndex = 0;
    for (;joinStartIndex < modComponents.length && joinStartIndex < fixedModComponents.length;joinStartIndex++) {
      if (fixedModComponents[joinStartIndex] != modComponents[joinStartIndex]) {
        break;
      }
    }
    if (joinStartIndex != 0) {
      var relativePath = "";
      var relativePathComponents = modComponents.slice(joinStartIndex, modComponents.length);
      for (;joinStartIndex < fixedModComponents.length;joinStartIndex++) {
        if (fixedModComponents[joinStartIndex] != "") {
          relativePath = relativePath + "../";
        }
      }
      return relativePath + relativePathComponents.join("/");
    }
    return absoluteModPath;
  }
  function quoteBaseName(modPath$$4) {
    var modName$$6 = trimModName(stripQuotes(modPath$$4));
    var path$$10 = getRootFilePath(modName$$6);
    if (path$$10 == "") {
      return modPath$$4;
    } else {
      var components$$1 = modName$$6.split(path$$10);
      var fileIndex = components$$1.length > 1 ? 1 : 0;
      return quoteStr(components$$1[fileIndex]);
    }
  }
  function changePathToSTR(modPath$$5) {
    return trimModName(stripQuotes(modPath$$5)) + ".str";
  }
  function changePathToDSTR(modPath$$6) {
    return trimModName(stripQuotes(modPath$$6)) + ".d.str";
  }
  function changePathToTS(modPath$$7) {
    return trimModName(stripQuotes(modPath$$7)) + ".ts";
  }
  function changePathToDTS(modPath$$8) {
    return trimModName(stripQuotes(modPath$$8)) + ".d.ts";
  }
  function isRelative(path$$11) {
    return path$$11.charAt(0) == ".";
  }
  function isRooted(path$$12) {
    return path$$12.charAt(0) == "\\" || path$$12.charAt(0) == "/" || path$$12.indexOf(":\\") != -1 || path$$12.indexOf(":/") != -1;
  }
  function getRootFilePath(outFname) {
    if (outFname == "") {
      return outFname;
    } else {
      var isPath = outFname.indexOf("/") != -1;
      return isPath ? filePath(outFname) : "";
    }
  }
  function filePathComponents(fullPath) {
    fullPath = switchToForwardSlashes(fullPath);
    var components$$2 = getPathComponents(fullPath);
    return components$$2.slice(0, components$$2.length - 1);
  }
  function filePath(fullPath$$1) {
    var path$$13 = filePathComponents(fullPath$$1);
    return path$$13.join("/") + "/";
  }
  function normalizeURL(url$$2) {
    var hostDomainAndPortRegex = /^(https?:\/\/[\-\w\.]+(:\d+)?\/)(.*)$/i;
    var matches = hostDomainAndPortRegex.exec(url$$2);
    if (matches) {
      var hostDomainAndPort = matches[1];
      var actualPath = matches[3];
      return hostDomainAndPort + normalizePath(actualPath);
    }
    return normalizePath(url$$2);
  }
  function normalizePath(path$$14) {
    path$$14 = switchToForwardSlashes(path$$14);
    var startedWithSep = path$$14.charAt(0) === "/";
    var parts = this.getPathComponents(path$$14);
    var i$$115 = 0;
    for (;i$$115 < parts.length;i$$115++) {
      if (parts[i$$115] === "." || parts[i$$115] === "") {
        parts.splice(i$$115, 1);
        i$$115--;
      }
      if (i$$115 > 0 && parts[i$$115] === ".." && parts[i$$115 - 1] !== "..") {
        parts.splice(i$$115 - 1, 2);
        i$$115 -= 2;
      }
    }
    return(startedWithSep ? "/" : "") + parts.join("/");
  }
  function normalizeImportPath(path$$15) {
    return normalizePath(path$$15);
  }
  TypeScript$$27.stripQuotes = stripQuotes;
  TypeScript$$27.isQuoted = isQuoted;
  TypeScript$$27.quoteStr = quoteStr;
  TypeScript$$27.swapQuotes = swapQuotes;
  TypeScript$$27.switchToForwardSlashes = switchToForwardSlashes;
  TypeScript$$27.trimModName = trimModName;
  TypeScript$$27.getDeclareFilePath = getDeclareFilePath;
  TypeScript$$27.isJSFile = isJSFile;
  TypeScript$$27.isSTRFile = isSTRFile;
  TypeScript$$27.isTSFile = isTSFile;
  TypeScript$$27.isDSTRFile = isDSTRFile;
  TypeScript$$27.isDTSFile = isDTSFile;
  TypeScript$$27.getPrettyName = getPrettyName;
  TypeScript$$27.getPathComponents = getPathComponents;
  TypeScript$$27.getRelativePathToFixedPath = getRelativePathToFixedPath;
  TypeScript$$27.quoteBaseName = quoteBaseName;
  TypeScript$$27.changePathToSTR = changePathToSTR;
  TypeScript$$27.changePathToDSTR = changePathToDSTR;
  TypeScript$$27.changePathToTS = changePathToTS;
  TypeScript$$27.changePathToDTS = changePathToDTS;
  TypeScript$$27.isRelative = isRelative;
  TypeScript$$27.isRooted = isRooted;
  TypeScript$$27.getRootFilePath = getRootFilePath;
  TypeScript$$27.filePathComponents = filePathComponents;
  TypeScript$$27.filePath = filePath;
  TypeScript$$27.normalizeURL = normalizeURL;
  TypeScript$$27.pathNormalizeRegExp = /\//g;
  TypeScript$$27.normalizePath = normalizePath;
  TypeScript$$27.normalizeImportPath = normalizeImportPath;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$28) {
  var SourceUnit = function() {
    function SourceUnit$$1(path$$16, content$$5) {
      this.path = path$$16;
      this.content = content$$5;
      this.referencedFiles = null;
    }
    SourceUnit$$1.prototype.getText = function(start$$12, end$$6) {
      return this.content.substring(start$$12, end$$6);
    };
    SourceUnit$$1.prototype.getLength = function() {
      return this.content.length;
    };
    return SourceUnit$$1;
  }();
  TypeScript$$28.SourceUnit = SourceUnit;
  var CompilationEnvironment = function() {
    function CompilationEnvironment$$1(compilationSettings, ioHost) {
      this.compilationSettings = compilationSettings;
      this.ioHost = ioHost;
      this.residentCode = [];
      this.code = [];
    }
    return CompilationEnvironment$$1;
  }();
  TypeScript$$28.CompilationEnvironment = CompilationEnvironment;
  var CodeResolver = function() {
    function CodeResolver$$1(environment) {
      this.environment = environment;
      this.visited = {};
    }
    CodeResolver$$1.prototype.resolveCode = function(referencePath, parentPath, performSearch, resolutionDispatcher) {
      var resolvedFile = {content:"", path:referencePath};
      var ioHost$$1 = this.environment.ioHost;
      var isRelativePath = TypeScript$$28.isRelative(referencePath);
      var isRootedPath = isRelativePath ? false : TypeScript$$28.isRooted(referencePath);
      var normalizedPath = isRelativePath ? ioHost$$1.resolvePath(parentPath + "/" + referencePath) : isRootedPath || !parentPath || performSearch ? referencePath : parentPath + "/" + referencePath;
      if (!TypeScript$$28.isSTRFile(normalizedPath) && !TypeScript$$28.isTSFile(normalizedPath)) {
        normalizedPath += ".ts";
      }
      normalizedPath = TypeScript$$28.switchToForwardSlashes(TypeScript$$28.stripQuotes(normalizedPath));
      var absoluteModuleID = this.environment.compilationSettings.useCaseSensitiveFileResolution ? normalizedPath : normalizedPath.toLocaleUpperCase();
      if (!this.visited[absoluteModuleID]) {
        if (isRelativePath || isRootedPath || !performSearch) {
          try {
            TypeScript$$28.CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);
            try {
              resolvedFile.content = ioHost$$1.readFile(normalizedPath);
            } catch (err) {
              try {
                if (TypeScript$$28.isSTRFile(normalizedPath)) {
                  normalizedPath = TypeScript$$28.changePathToTS(normalizedPath);
                } else {
                  if (TypeScript$$28.isTSFile(normalizedPath)) {
                    normalizedPath = TypeScript$$28.changePathToSTR(normalizedPath);
                  }
                }
                TypeScript$$28.CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);
                resolvedFile.content = ioHost$$1.readFile(normalizedPath);
              } catch (err$$1) {
                normalizedPath = TypeScript$$28.changePathToDSTR(normalizedPath);
                TypeScript$$28.CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);
                try {
                  resolvedFile.content = ioHost$$1.readFile(normalizedPath);
                } catch (err$$2) {
                  normalizedPath = TypeScript$$28.changePathToDTS(normalizedPath);
                  TypeScript$$28.CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);
                  resolvedFile.content = ioHost$$1.readFile(normalizedPath);
                }
              }
            }
            TypeScript$$28.CompilerDiagnostics.debugPrint("   Found code at " + normalizedPath);
            resolvedFile.path = normalizedPath;
            this.visited[absoluteModuleID] = true;
          } catch (err$$3) {
            TypeScript$$28.CompilerDiagnostics.debugPrint("   Did not find code for " + referencePath);
          }
        } else {
          resolvedFile = ioHost$$1.findFile(parentPath, normalizedPath);
          if (!resolvedFile) {
            if (TypeScript$$28.isSTRFile(normalizedPath)) {
              normalizedPath = TypeScript$$28.changePathToTS(normalizedPath);
            } else {
              if (TypeScript$$28.isTSFile(normalizedPath)) {
                normalizedPath = TypeScript$$28.changePathToSTR(normalizedPath);
              }
            }
            resolvedFile = ioHost$$1.findFile(parentPath, normalizedPath);
          }
          if (!resolvedFile) {
            normalizedPath = TypeScript$$28.changePathToDTS(normalizedPath);
            resolvedFile = ioHost$$1.findFile(parentPath, normalizedPath);
            if (!resolvedFile) {
              normalizedPath = TypeScript$$28.changePathToDSTR(normalizedPath);
              resolvedFile = ioHost$$1.findFile(parentPath, normalizedPath);
            }
          }
          if (resolvedFile) {
            resolvedFile.path = TypeScript$$28.switchToForwardSlashes(TypeScript$$28.stripQuotes(resolvedFile.path));
            TypeScript$$28.CompilerDiagnostics.debugPrint(referencePath + " resolved to: " + resolvedFile.path);
            resolvedFile.content = resolvedFile.content;
            this.visited[absoluteModuleID] = true;
          } else {
            TypeScript$$28.CompilerDiagnostics.debugPrint("Could not find " + referencePath);
          }
        }
        if (resolvedFile && resolvedFile.content) {
          var rootDir = ioHost$$1.dirName(resolvedFile.path);
          var sourceUnit = new SourceUnit(resolvedFile.path, resolvedFile.content);
          var preProcessedFileInfo = TypeScript$$28.preProcessFile(sourceUnit, this.environment.compilationSettings);
          sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;
          var i$$116 = 0;
          for (;i$$116 < preProcessedFileInfo.referencedFiles.length;i$$116++) {
            var referencedFile = preProcessedFileInfo.referencedFiles[i$$116];
            normalizedPath = TypeScript$$28.isRooted(referencedFile.path) ? referencedFile.path : rootDir + "/" + referencedFile.path;
            normalizedPath = ioHost$$1.resolvePath(normalizedPath);
            if (referencePath == normalizedPath) {
              resolutionDispatcher.postResolutionError(normalizedPath, "File contains reference to itself", null);
              continue;
            }
            this.resolveCode(referencedFile.path, rootDir, false, resolutionDispatcher);
          }
          i$$116 = 0;
          for (;i$$116 < preProcessedFileInfo.importedFiles.length;i$$116++) {
            this.resolveCode(preProcessedFileInfo.importedFiles[i$$116].path, rootDir, true, resolutionDispatcher);
          }
          resolutionDispatcher.postResolution(sourceUnit.path, sourceUnit);
        }
      }
    };
    return CodeResolver$$1;
  }();
  TypeScript$$28.CodeResolver = CodeResolver;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$29) {
  function getFileReferenceFromReferencePath(comment$$5) {
    var referencesRegEx = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
    var match = referencesRegEx.exec(comment$$5);
    if (match) {
      var path$$17 = TypeScript$$29.normalizePath(match[3]);
      var adjustedPath = TypeScript$$29.normalizePath(path$$17);
      var isResident = match.length >= 7 && match[6] == "true";
      if (isResident) {
        TypeScript$$29.CompilerDiagnostics.debugPrint(path$$17 + " is resident");
      }
      return{minChar:0, limChar:0, path:TypeScript$$29.switchToForwardSlashes(adjustedPath), isResident:isResident};
    } else {
      return null;
    }
  }
  function getAdditionalDependencyPath(comment$$6) {
    var amdDependencyRegEx = /^(\/\/\/\s*<amd-dependency\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
    var match$$1 = amdDependencyRegEx.exec(comment$$6);
    if (match$$1) {
      var path$$18 = match$$1[3];
      return path$$18;
    } else {
      return null;
    }
  }
  function getImplicitImport(comment$$7) {
    var implicitImportRegEx = /^(\/\/\/\s*<implicit-import\s*)*\/>/igm;
    var match$$2 = implicitImportRegEx.exec(comment$$7);
    if (match$$2) {
      return true;
    }
    return false;
  }
  function getStyleSettings(comment$$8, styleSettings) {
    var styleRegEx = /^(\/\/\/\s*<style\s+)(([a-zA-Z])+=('|").+('|"))\s*\/>/igm;
    var settings$$2 = styleRegEx.exec(comment$$8);
    if (settings$$2) {
      var settingsRegEx = /^([a-zA-Z]+=['"]on['|"])/igm;
      settings$$2 = settingsRegEx.exec(settings$$2[2]);
      if (settings$$2) {
        var i$$117 = 0;
        for (;i$$117 < settings$$2.length;i$$117++) {
          var setting = settings$$2[i$$117].split("=");
          var on = '"on"';
          switch(setting[0]) {
            case "blockInCompoundStmt":
              styleSettings.blockInCompoundStmt = setting[1] == on;
              break;
            case "eqeqeq":
              styleSettings.eqeqeq = setting[1] == on;
              break;
            case "forin":
              styleSettings.forin = setting[1] == on;
              break;
            case "emptyBlocks":
              styleSettings.emptyBlocks = setting[1] == on;
              break;
            case "newMustBeUsed":
              styleSettings.newMustBeUsed = setting[1] == on;
              break;
            case "requireSemi":
              styleSettings.requireSemi = setting[1] == on;
              break;
            case "assignmentInCond":
              styleSettings.assignmentInCond = setting[1] == on;
              break;
            case "eqnull":
              styleSettings.eqnull = setting[1] == on;
              break;
            case "evalOK":
              styleSettings.evalOK = setting[1] == on;
              break;
            case "innerScopeDeclEscape":
              styleSettings.innerScopeDeclEscape = setting[1] == on;
              break;
            case "funcInLoop":
              styleSettings.funcInLoop = setting[1] == on;
              break;
            case "reDeclareLocal":
              styleSettings.reDeclareLocal = setting[1] == on;
              break;
            case "literalSubscript":
              styleSettings.literalSubscript = setting[1] == on;
              break;
            case "implicitAny":
              styleSettings.implicitAny = setting[1] == on;
              break;
          }
        }
      }
    }
  }
  function getReferencedFiles(sourceText$$4) {
    var preProcessInfo = preProcessFile(sourceText$$4, null, false);
    return preProcessInfo.referencedFiles;
  }
  function preProcessFile(sourceText$$5, options$$7, readImportFiles) {
    if (typeof options$$7 === "undefined") {
      options$$7 = new CompilationSettings;
    }
    if (typeof readImportFiles === "undefined") {
      readImportFiles = true;
    }
    var scanner$$1 = new TypeScript$$29.Scanner;
    scanner$$1.resetComments();
    scanner$$1.setSourceText(sourceText$$5, TypeScript$$29.LexMode.File);
    var tok$$5 = scanner$$1.scan();
    var comments$$12 = [];
    var comment$$9 = null;
    var leftCurlies = [];
    var settings$$3 = options$$7;
    var referencedFiles = [];
    var importedFiles = [];
    var isLibFile = false;
    for (;tok$$5.tokenId != TypeScript$$29.TokenID.EndOfFile;) {
      if (readImportFiles && tok$$5.tokenId == TypeScript$$29.TokenID.Import) {
        tok$$5 = scanner$$1.scan();
        if (tok$$5.tokenId == TypeScript$$29.TokenID.Identifier || TypeScript$$29.convertTokToID(tok$$5, false)) {
          tok$$5 = scanner$$1.scan();
          if (tok$$5.tokenId == TypeScript$$29.TokenID.Equals) {
            tok$$5 = scanner$$1.scan();
            if (tok$$5.tokenId == TypeScript$$29.TokenID.Module) {
              tok$$5 = scanner$$1.scan();
              if (tok$$5.tokenId == TypeScript$$29.TokenID.OpenParen) {
                tok$$5 = scanner$$1.scan();
                if (tok$$5.tokenId == TypeScript$$29.TokenID.StringLiteral) {
                  var ref$$2 = {minChar:scanner$$1.startPos, limChar:scanner$$1.pos, path:TypeScript$$29.stripQuotes(TypeScript$$29.switchToForwardSlashes(tok$$5.getText())), isResident:false};
                  importedFiles.push(ref$$2);
                }
              }
            }
          }
        }
      }
      if (tok$$5.tokenId == TypeScript$$29.TokenID.OpenBrace) {
        leftCurlies.push(tok$$5);
      }
      if (tok$$5.tokenId == TypeScript$$29.TokenID.CloseBrace) {
        leftCurlies.pop();
      }
      tok$$5 = scanner$$1.scan();
    }
    comments$$12 = scanner$$1.getComments();
    var iComment = 0;
    for (;iComment < comments$$12.length;iComment++) {
      comment$$9 = comments$$12[iComment];
      if (!comment$$9.isBlock) {
        var referencedCode = getFileReferenceFromReferencePath(comment$$9.getText());
        if (referencedCode) {
          referencedCode.minChar = comment$$9.startPos;
          referencedCode.limChar = referencedCode.minChar + comment$$9.value.length;
          referencedFiles.push(referencedCode);
        }
        if (settings$$3) {
          getStyleSettings(comment$$9.getText(), settings$$3.styleSettings);
          var isNoLibRegex = /^(\/\/\/\s*<reference\s+no-default-lib=)('|")(.+?)\2\s*\/>/igm;
          var isNoLibMatch = isNoLibRegex.exec(comment$$9.getText());
          if (isNoLibMatch) {
            isLibFile = isNoLibMatch[3] == "true";
          }
        }
      }
    }
    return{settings:settings$$3, referencedFiles:referencedFiles, importedFiles:importedFiles, isLibFile:isLibFile};
  }
  var StyleSettings = function() {
    function StyleSettings$$1() {
      this.bitwise = false;
      this.blockInCompoundStmt = false;
      this.eqeqeq = false;
      this.forin = false;
      this.emptyBlocks = true;
      this.newMustBeUsed = false;
      this.requireSemi = false;
      this.assignmentInCond = false;
      this.eqnull = false;
      this.evalOK = true;
      this.innerScopeDeclEscape = true;
      this.funcInLoop = true;
      this.reDeclareLocal = true;
      this.literalSubscript = true;
      this.implicitAny = false;
    }
    StyleSettings$$1.prototype.setOption = function(opt, val$$6) {
      var optExists = this[opt];
      if (optExists !== undefined) {
        this[opt] = val$$6;
        return true;
      } else {
        return false;
      }
    };
    StyleSettings$$1.prototype.parseOptions = function(str$$11) {
      var opts = str$$11.split(";");
      var i$$118 = 0;
      var len$$57 = opts.length;
      for (;i$$118 < len$$57;i$$118++) {
        var opt$$1 = opts[i$$118];
        var val$$7 = true;
        var colonIndex = opt$$1.lastIndexOf(":");
        if (colonIndex >= 0) {
          var valStr = opt$$1.substring(colonIndex + 1);
          opt$$1 = opt$$1.substring(0, colonIndex);
          if (valStr == "off") {
            val$$7 = false;
          }
        }
        if (!this.setOption(opt$$1, val$$7)) {
          return false;
        }
      }
      return true;
    };
    return StyleSettings$$1;
  }();
  TypeScript$$29.StyleSettings = StyleSettings;
  var CompilationSettings = function() {
    function CompilationSettings$$1() {
      this.styleSettings = new StyleSettings;
      this.propagateConstants = false;
      this.minWhitespace = false;
      this.parseOnly = false;
      this.errorRecovery = false;
      this.emitComments = false;
      this.watch = false;
      this.exec = false;
      this.resolve = true;
      this.controlFlow = false;
      this.printControlFlow = false;
      this.controlFlowUseDef = false;
      this.errorOnWith = true;
      this.preprocess = true;
      this.canCallDefinitionSignature = false;
      this.inferPropertiesFromThisAssignment = false;
      this.useDefaultLib = true;
      this.codeGenTarget = TypeScript$$29.CodeGenTarget.ES3;
      this.moduleGenTarget = TypeScript$$29.ModuleGenTarget.Synchronous;
      this.outputOption = "";
      this.mapSourceFiles = false;
      this.generateDeclarationFiles = false;
      this.useCaseSensitiveFileResolution = false;
    }
    CompilationSettings$$1.prototype.setStyleOptions = function(str$$12) {
      this.styleSettings.parseOptions(str$$12);
    };
    return CompilationSettings$$1;
  }();
  TypeScript$$29.CompilationSettings = CompilationSettings;
  TypeScript$$29.getAdditionalDependencyPath = getAdditionalDependencyPath;
  TypeScript$$29.getImplicitImport = getImplicitImport;
  TypeScript$$29.getStyleSettings = getStyleSettings;
  TypeScript$$29.getReferencedFiles = getReferencedFiles;
  TypeScript$$29.preProcessFile = preProcessFile;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$30) {
  var IncrementalParser = function() {
    function IncrementalParser$$1(logger$$5) {
      this.logger = logger$$5;
      this.astLogger = new TypeScript$$30.AstLogger(this.logger);
    }
    IncrementalParser$$1.prototype.getEnclosingScopeContextIfSingleScopeEdit = function(previousScript, scriptId, newSourceText, editRange) {
      this.logger.log('checkEditsInsideSingleScope("' + scriptId + '")');
      if (editRange === null) {
        throw new Error("editRange should be valid");
      }
      if (editRange.isUnknown()) {
        this.logger.log("  Bailing out because edit range is unknown");
        return null;
      }
      var scope1 = TypeScript$$30.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.minChar, false);
      var scope2 = TypeScript$$30.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.limChar, false);
      if (scope1 == null || scope2 == null) {
        this.logger.log("  Bailing out because containing scopes cannot be determined");
        return null;
      }
      if (scope1.scopeStartAST !== scope2.scopeStartAST) {
        this.logger.log("  Bailing out because edit overlaps 2 disctint scopes");
        return null;
      }
      var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;
      if (newScopeLength <= 0) {
        this.logger.log("  Bailing out because scope has been entirely removed from new source text");
        return null;
      }
      return scope1;
    };
    IncrementalParser$$1.prototype.attemptIncrementalUpdateUnit = function(previousScript$$1, scriptId$$1, newSourceText$$1, editRange$$1) {
      this.logger.log('attemptIncrementalUpdateUnit("' + scriptId$$1 + '")');
      if (editRange$$1 === null) {
        throw new Error("editRange should be valid");
      }
      var scope1$$1 = this.getEnclosingScopeContextIfSingleScopeEdit(previousScript$$1, scriptId$$1, newSourceText$$1, editRange$$1);
      if (scope1$$1 === null) {
        return null;
      }
      var newScopeLength$$1 = scope1$$1.scopeStartAST.limChar - scope1$$1.scopeStartAST.minChar + editRange$$1.delta;
      if (newScopeLength$$1 >= newSourceText$$1.getLength() / 2) {
        this.logger.log("  Bailing out because range of scope to reparse (" + newScopeLength$$1 + " characters) is greater than half the size of the source text");
        return null;
      }
      var parseErrors$$1 = [];
      var errorCapture$$1 = function(minChar$$33, charLen, message$$19, unitIndex$$10) {
        parseErrors$$1.push(new TypeScript$$30.ErrorEntry(unitIndex$$10, minChar$$33, minChar$$33 + charLen, message$$19));
      };
      var quickParseResult = TypeScript$$30.quickParse(this.logger, scope1$$1.scopeStartAST, newSourceText$$1, scope1$$1.scopeStartAST.minChar, scope1$$1.scopeStartAST.minChar + newScopeLength$$1, errorCapture$$1);
      if (quickParseResult.endLexState != TypeScript$$30.LexState.Start) {
        this.logger.log("  Bailing out because scope contains unterminated comment");
        return null;
      }
      var scriptFragment$$1 = quickParseResult.Script;
      if (scriptFragment$$1.vars.members.length !== 0) {
        this.logger.log("  Bailing out because new source text defines variables");
        return null;
      }
      if (scriptFragment$$1.bod.members.length !== 1) {
        this.logger.log("  Bailing out because new source text defines more than one scope (or none)");
        return null;
      }
      var oldScope = scope1$$1.scopeStartAST;
      var newScope = scriptFragment$$1.bod.members[0];
      if (oldScope.nodeType != newScope.nodeType) {
        this.logger.log("  Bailing out because new source text does not define the same scope type as the existing scope");
        return null;
      }
      if (!oldScope.leftCurlyCount || !oldScope.rightCurlyCount) {
        this.logger.log("  Bailing out because sopce doesn't have left/right curly count");
        return null;
      }
      if (oldScope.leftCurlyCount !== newScope.leftCurlyCount) {
        this.logger.log("  Bailing out because new source text contains more (or fewer) left curly braces");
        return null;
      }
      if (oldScope.rightCurlyCount !== newScope.rightCurlyCount) {
        this.logger.log("  Bailing out because new source text contains more (or fewer) right curly braces");
        return null;
      }
      if (newScope.minChar !== 0) {
        this.logger.log("  Bailing out because new function declaration does not start at position 0");
        return null;
      }
      if (newScope.limChar !== newScopeLength$$1) {
        this.logger.log("  Bailing out because new function declaration does not end at the new end position");
        return null;
      }
      return TypeScript$$30.UpdateUnitResult.singleScopeEdits(previousScript$$1, scriptFragment$$1, oldScope, newScope, editRange$$1, parseErrors$$1);
    };
    IncrementalParser$$1.prototype.mergeTrees = function(updateResult) {
      var _this$$13 = this;
      TypeScript$$30.timeFunction(this.logger, "mergeTrees()", function() {
        var editRange$$2 = new TypeScript$$30.ScriptEditRange(updateResult.scope1.minChar, updateResult.scope1.limChar, updateResult.editRange.delta);
        _this$$13.applyDeltaPosition(updateResult.script1, editRange$$2.limChar, editRange$$2.delta);
        _this$$13.applyDeltaPosition(updateResult.script2, 0, editRange$$2.minChar);
        _this$$13.mergeLocationInfo(updateResult.script1, updateResult.script2, editRange$$2);
        _this$$13.replaceAST(updateResult.script1, updateResult.scope1, updateResult.scope2);
      });
    };
    IncrementalParser$$1.prototype.replaceAST = function(script$$18, oldAst, newAst) {
      var _this$$14 = this;
      var pre$$11 = function(cur$$10, parent$$70, walker$$54) {
        if (cur$$10 === oldAst) {
          newAst.preComments = cur$$10.preComments;
          newAst.postComments = cur$$10.postComments;
          _this$$14.logger.log("replaced old AST node with new one in script AST");
          walker$$54.options.stopWalk();
          return newAst;
        }
        if (TypeScript$$30.isValidAstNode(cur$$10)) {
          if (cur$$10.limChar < oldAst.minChar || cur$$10.minChar > oldAst.limChar) {
            walker$$54.options.goChildren = false;
          }
        }
        return cur$$10;
      };
      TypeScript$$30.getAstWalkerFactory().walk(script$$18, pre$$11);
    };
    IncrementalParser$$1.prototype.mergeLocationInfo = function(script$$19, partial$$1, editRange$$3) {
      var lineMap1 = script$$19.locationInfo.lineMap;
      var lineMap2 = partial$$1.locationInfo.lineMap;
      if (this.logger.information()) {
        this.logger.log("lineMap1 (before):");
        this.astLogger.logLinemap(lineMap1);
        this.logger.log("lineMap2 (quick parse):");
        this.astLogger.logLinemap(lineMap2);
        this.logger.log("EditRange=" + editRange$$3);
      }
      var i1 = 2;
      var i2 = 2;
      var len1 = lineMap1.length;
      var len2 = lineMap2.length;
      for (;i1 < len1;) {
        if (lineMap1[i1] <= editRange$$3.minChar) {
          i1++;
        } else {
          if (lineMap1[i1] >= editRange$$3.limChar) {
            lineMap1[i1] += editRange$$3.delta;
            i1++;
          } else {
            if (i2 < len2) {
              lineMap1.splice(i1, 0, lineMap2[i2] + editRange$$3.minChar);
              i1++;
              len1++;
              i2++;
            } else {
              lineMap1.splice(i1, 1);
              len1--;
            }
          }
        }
      }
      if (i2 < len2) {
        if (lineMap1[len1 - 1] >= lineMap2[i2] + editRange$$3.minChar) {
          i1 = 2;
          for (;i1 < len1 && i2 < len2;) {
            if (lineMap1[i1] < lineMap2[i2] + editRange$$3.minChar) {
              i1++;
            } else {
              lineMap1.splice(i1, 0, lineMap2[i2] + editRange$$3.minChar);
              i1++;
              len1++;
              i2++;
            }
          }
        }
        for (;i2 < len2;i2++) {
          lineMap1.push(lineMap2[i2] + editRange$$3.minChar);
        }
      }
      if (this.logger.information()) {
        this.logger.log("lineMap1 (after merge):");
        this.astLogger.logLinemap(lineMap1);
      }
    };
    IncrementalParser$$1.prototype.applyDeltaPosition = function(ast$$117, start$$13, delta$$1) {
      var applyDelta = function(ast$$118) {
        if (ast$$118.minChar !== -1 && ast$$118.minChar >= start$$13) {
          ast$$118.minChar += delta$$1;
        }
        if (ast$$118.limChar !== -1 && ast$$118.limChar >= start$$13) {
          ast$$118.limChar += delta$$1;
        }
      };
      var applyDeltaToComments = function(comments$$13) {
        if (comments$$13 && comments$$13.length > 0) {
          var i$$119 = 0;
          for (;i$$119 < comments$$13.length;i$$119++) {
            applyDelta(comments$$13[i$$119]);
          }
        }
      };
      var pre$$12 = function(cur$$11, parent$$71, walker$$55) {
        if (cur$$11.limChar !== -1 && cur$$11.limChar < start$$13) {
          walker$$55.options.goChildren = false;
        }
        applyDelta(cur$$11);
        applyDeltaToComments(cur$$11.preComments);
        applyDeltaToComments(cur$$11.postComments);
        return cur$$11;
      };
      TypeScript$$30.getAstWalkerFactory().walk(ast$$117, pre$$12);
    };
    return IncrementalParser$$1;
  }();
  TypeScript$$30.IncrementalParser = IncrementalParser;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$31) {
  var DeclFileWriter = function() {
    function DeclFileWriter$$1(declFile) {
      this.declFile = declFile;
      this.onNewLine = true;
    }
    DeclFileWriter$$1.prototype.Write = function(s$$35) {
      this.declFile.Write(s$$35);
      this.onNewLine = false;
    };
    DeclFileWriter$$1.prototype.WriteLine = function(s$$36) {
      this.declFile.WriteLine(s$$36);
      this.onNewLine = true;
    };
    DeclFileWriter$$1.prototype.Close = function() {
      this.declFile.Close();
    };
    return DeclFileWriter$$1;
  }();
  TypeScript$$31.DeclFileWriter = DeclFileWriter;
  var DeclarationEmitter = function() {
    function DeclarationEmitter$$1(checker$$23, emitOptions$$2, errorReporter$$5) {
      this.checker = checker$$23;
      this.emitOptions = emitOptions$$2;
      this.errorReporter = errorReporter$$5;
      this.declFile = null;
      this.indenter = new TypeScript$$31.Indenter;
      this.declarationContainerStack = [];
      this.isDottedModuleName = [];
      this.ignoreCallbackAst = null;
      this.singleDeclFile = null;
      this.varListCount = 0;
    }
    DeclarationEmitter$$1.prototype.getAstDeclarationContainer = function() {
      return this.declarationContainerStack[this.declarationContainerStack.length - 1];
    };
    DeclarationEmitter$$1.prototype.emitDottedModuleName = function() {
      return this.isDottedModuleName.length == 0 ? false : this.isDottedModuleName[this.isDottedModuleName.length - 1];
    };
    DeclarationEmitter$$1.prototype.setDeclarationFile = function(file) {
      this.declFile = new DeclFileWriter(file);
    };
    DeclarationEmitter$$1.prototype.Close = function() {
      try {
        this.declFile.Close();
      } catch (ex$$3) {
        this.errorReporter.emitterError(null, ex$$3.message);
      }
    };
    DeclarationEmitter$$1.prototype.emitDeclarations = function(script$$20) {
      TypeScript$$31.AstWalkerWithDetailCallback.walk(script$$20, this);
    };
    DeclarationEmitter$$1.prototype.getIndentString = function(declIndent) {
      if (typeof declIndent === "undefined") {
        declIndent = false;
      }
      if (this.emitOptions.minWhitespace) {
        return "";
      } else {
        return this.indenter.getIndent();
      }
    };
    DeclarationEmitter$$1.prototype.emitIndent = function() {
      this.declFile.Write(this.getIndentString());
    };
    DeclarationEmitter$$1.prototype.canEmitSignature = function(declFlags, canEmitGlobalAmbientDecl, useDeclarationContainerTop) {
      if (typeof canEmitGlobalAmbientDecl === "undefined") {
        canEmitGlobalAmbientDecl = true;
      }
      if (typeof useDeclarationContainerTop === "undefined") {
        useDeclarationContainerTop = true;
      }
      var container$$22;
      if (useDeclarationContainerTop) {
        container$$22 = this.getAstDeclarationContainer();
      } else {
        container$$22 = this.declarationContainerStack[this.declarationContainerStack.length - 2];
      }
      if (container$$22.nodeType == TypeScript$$31.NodeType.ModuleDeclaration && !TypeScript$$31.hasFlag(declFlags, TypeScript$$31.DeclFlags.Exported)) {
        return false;
      }
      if (!canEmitGlobalAmbientDecl && container$$22.nodeType == TypeScript$$31.NodeType.Script && TypeScript$$31.hasFlag(declFlags, TypeScript$$31.DeclFlags.Ambient)) {
        return false;
      }
      return true;
    };
    DeclarationEmitter$$1.prototype.canEmitPrePostAstSignature = function(declFlags$$1, astWithPrePostCallback, preCallback) {
      if (this.ignoreCallbackAst) {
        TypeScript$$31.CompilerDiagnostics.assert(this.ignoreCallbackAst != astWithPrePostCallback, "Ignore Callback AST mismatch");
        this.ignoreCallbackAst = null;
        return false;
      } else {
        if (preCallback && !this.canEmitSignature(declFlags$$1, true, preCallback)) {
          this.ignoreCallbackAst = astWithPrePostCallback;
          return false;
        }
      }
      return true;
    };
    DeclarationEmitter$$1.prototype.getDeclFlagsString = function(declFlags$$2, typeString) {
      var result$$34 = this.getIndentString();
      var accessorString = "";
      if (TypeScript$$31.hasFlag(declFlags$$2, TypeScript$$31.DeclFlags.GetAccessor)) {
        accessorString = "get ";
      } else {
        if (TypeScript$$31.hasFlag(declFlags$$2, TypeScript$$31.DeclFlags.SetAccessor)) {
          accessorString = "set ";
        }
      }
      var container$$23 = this.getAstDeclarationContainer();
      if (container$$23.nodeType == TypeScript$$31.NodeType.ModuleDeclaration && TypeScript$$31.hasFlag(container$$23.modFlags, TypeScript$$31.ModuleFlags.IsWholeFile) && TypeScript$$31.hasFlag(declFlags$$2, TypeScript$$31.DeclFlags.Exported)) {
        result$$34 += "export ";
      }
      if (TypeScript$$31.hasFlag(declFlags$$2, TypeScript$$31.DeclFlags.LocalStatic) || TypeScript$$31.hasFlag(declFlags$$2, TypeScript$$31.DeclFlags.Static)) {
        result$$34 += "static " + accessorString;
      } else {
        if (TypeScript$$31.hasFlag(declFlags$$2, TypeScript$$31.DeclFlags.Private)) {
          result$$34 += "private " + accessorString;
        } else {
          if (TypeScript$$31.hasFlag(declFlags$$2, TypeScript$$31.DeclFlags.Public)) {
            result$$34 += "public " + accessorString;
          } else {
            if (accessorString == "") {
              result$$34 += typeString + " ";
            } else {
              result$$34 += accessorString;
            }
          }
        }
      }
      return result$$34;
    };
    DeclarationEmitter$$1.prototype.emitDeclFlags = function(declFlags$$3, typeString$$1) {
      this.declFile.Write(this.getDeclFlagsString(declFlags$$3, typeString$$1));
    };
    DeclarationEmitter$$1.prototype.canEmitTypeAnnotationSignature = function(declFlag) {
      if (typeof declFlag === "undefined") {
        declFlag = TypeScript$$31.DeclFlags.None;
      }
      return!TypeScript$$31.hasFlag(declFlag, TypeScript$$31.DeclFlags.Private);
    };
    DeclarationEmitter$$1.prototype.pushDeclarationContainer = function(ast$$119) {
      this.declarationContainerStack.push(ast$$119);
    };
    DeclarationEmitter$$1.prototype.popDeclarationContainer = function(ast$$120) {
      TypeScript$$31.CompilerDiagnostics.assert(ast$$120 != this.getAstDeclarationContainer(), "Declaration container mismatch");
      this.declarationContainerStack.pop();
    };
    DeclarationEmitter$$1.prototype.emitTypeNamesMember = function(memberName$$5, emitIndent) {
      if (typeof emitIndent === "undefined") {
        emitIndent = false;
      }
      if (memberName$$5.prefix == "{ ") {
        if (emitIndent) {
          this.emitIndent();
        }
        this.declFile.WriteLine("{");
        this.indenter.increaseIndent();
        emitIndent = true;
      } else {
        if (memberName$$5.prefix != "") {
          if (emitIndent) {
            this.emitIndent();
          }
          this.declFile.Write(memberName$$5.prefix);
          emitIndent = false;
        }
      }
      if (memberName$$5.isString()) {
        if (emitIndent) {
          this.emitIndent();
        }
        this.declFile.Write(memberName$$5.text);
      } else {
        var ar$$1 = memberName$$5;
        var index$$62 = 0;
        for (;index$$62 < ar$$1.entries.length;index$$62++) {
          this.emitTypeNamesMember(ar$$1.entries[index$$62], emitIndent);
          if (ar$$1.delim == "; ") {
            this.declFile.WriteLine(";");
          }
        }
      }
      if (memberName$$5.suffix == "}") {
        this.indenter.decreaseIndent();
        this.emitIndent();
        this.declFile.Write(memberName$$5.suffix);
      } else {
        this.declFile.Write(memberName$$5.suffix);
      }
    };
    DeclarationEmitter$$1.prototype.emitTypeSignature = function(type$$58) {
      var containingScope = null;
      var declarationContainerAst = this.getAstDeclarationContainer();
      switch(declarationContainerAst.nodeType) {
        case TypeScript$$31.NodeType.ModuleDeclaration:
        ;
        case TypeScript$$31.NodeType.InterfaceDeclaration:
        ;
        case TypeScript$$31.NodeType.FuncDecl:
          if (declarationContainerAst.type) {
            containingScope = declarationContainerAst.type.containedScope;
          }
          break;
        case TypeScript$$31.NodeType.Script:
          var script$$21 = declarationContainerAst;
          if (script$$21.bod) {
            containingScope = script$$21.bod.enclosingScope;
          }
          break;
        case TypeScript$$31.NodeType.ClassDeclaration:
          if (declarationContainerAst.type) {
            containingScope = declarationContainerAst.type.instanceType.containedScope;
          }
          break;
        default:
          TypeScript$$31.CompilerDiagnostics.debugPrint("Unknown containing scope");
      }
      var typeNameMembers = type$$58.getScopedTypeNameEx(containingScope);
      this.emitTypeNamesMember(typeNameMembers);
    };
    DeclarationEmitter$$1.prototype.emitComment = function(comment$$10) {
      var text$$26 = comment$$10.getText();
      if (this.declFile.onNewLine) {
        this.emitIndent();
      } else {
        if (!comment$$10.isBlockComment) {
          this.declFile.WriteLine("");
          this.emitIndent();
        }
      }
      this.declFile.Write(text$$26[0]);
      var i$$120 = 1;
      for (;i$$120 < text$$26.length;i$$120++) {
        this.declFile.WriteLine("");
        this.emitIndent();
        this.declFile.Write(text$$26[i$$120]);
      }
      if (comment$$10.endsLine || !comment$$10.isBlockComment) {
        this.declFile.WriteLine("");
      } else {
        this.declFile.Write(" ");
      }
    };
    DeclarationEmitter$$1.prototype.emitDeclarationComments = function(astOrSymbol, endLine) {
      if (typeof endLine === "undefined") {
        endLine = true;
      }
      if (!this.emitOptions.emitComments) {
        return;
      }
      var declComments = astOrSymbol.getDocComments();
      if (declComments.length > 0) {
        var i$$121 = 0;
        for (;i$$121 < declComments.length;i$$121++) {
          this.emitComment(declComments[i$$121]);
        }
        if (endLine) {
          if (!this.declFile.onNewLine) {
            this.declFile.WriteLine("");
          }
        } else {
          if (this.declFile.onNewLine) {
            this.emitIndent();
          }
        }
      }
    };
    DeclarationEmitter$$1.prototype.VarDeclCallback = function(pre$$13, varDecl$$20) {
      if (pre$$13 && this.canEmitSignature(TypeScript$$31.ToDeclFlags(varDecl$$20.varFlags), false)) {
        var interfaceMember = this.getAstDeclarationContainer().nodeType == TypeScript$$31.NodeType.InterfaceDeclaration;
        this.emitDeclarationComments(varDecl$$20);
        if (!interfaceMember) {
          if (this.varListCount >= 0) {
            this.emitDeclFlags(TypeScript$$31.ToDeclFlags(varDecl$$20.varFlags), "var");
            this.varListCount = -this.varListCount;
          }
          this.declFile.Write(varDecl$$20.id.text);
        } else {
          this.emitIndent();
          this.declFile.Write(varDecl$$20.id.text);
          if (TypeScript$$31.hasFlag(varDecl$$20.id.flags, TypeScript$$31.ASTFlags.OptionalName)) {
            this.declFile.Write("?");
          }
        }
        var type$$59 = null;
        if (varDecl$$20.typeExpr && varDecl$$20.typeExpr.type) {
          type$$59 = varDecl$$20.typeExpr.type;
        } else {
          if (varDecl$$20.sym) {
            type$$59 = varDecl$$20.sym.getType();
            if (type$$59 == this.checker.anyType) {
              type$$59 = null;
            }
          }
        }
        if (type$$59 && this.canEmitTypeAnnotationSignature(TypeScript$$31.ToDeclFlags(varDecl$$20.varFlags))) {
          this.declFile.Write(": ");
          this.emitTypeSignature(type$$59);
        }
        if (this.varListCount > 0) {
          this.varListCount--;
        } else {
          if (this.varListCount < 0) {
            this.varListCount++;
          }
        }
        if (this.varListCount < 0) {
          this.declFile.Write(", ");
        } else {
          this.declFile.WriteLine(";");
        }
      }
      return false;
    };
    DeclarationEmitter$$1.prototype.BlockCallback = function(pre$$14, block$$2) {
      if (!block$$2.isStatementBlock) {
        if (pre$$14) {
          this.varListCount = block$$2.statements.members.length;
        } else {
          this.varListCount = 0;
        }
        return true;
      }
      return false;
    };
    DeclarationEmitter$$1.prototype.emitArgDecl = function(argDecl$$2, funcDecl$$34) {
      this.emitDeclarationComments(argDecl$$2, false);
      this.declFile.Write(argDecl$$2.id.text);
      if (argDecl$$2.isOptionalArg()) {
        this.declFile.Write("?");
      }
      if ((argDecl$$2.typeExpr || argDecl$$2.type != this.checker.anyType) && this.canEmitTypeAnnotationSignature(TypeScript$$31.ToDeclFlags(funcDecl$$34.fncFlags))) {
        this.declFile.Write(": ");
        this.emitTypeSignature(argDecl$$2.type);
      }
    };
    DeclarationEmitter$$1.prototype.FuncDeclCallback = function(pre$$15, funcDecl$$35) {
      if (!pre$$15) {
        return false;
      }
      if (funcDecl$$35.isAccessor()) {
        return this.emitPropertyAccessorSignature(funcDecl$$35);
      }
      var isInterfaceMember = this.getAstDeclarationContainer().nodeType == TypeScript$$31.NodeType.InterfaceDeclaration;
      if (funcDecl$$35.bod) {
        if (funcDecl$$35.isConstructor) {
          if (funcDecl$$35.type.construct && funcDecl$$35.type.construct.signatures.length > 1) {
            return false;
          }
        } else {
          if (funcDecl$$35.type.call && funcDecl$$35.type.call.signatures.length > 1) {
            return false;
          }
        }
      } else {
        if (!isInterfaceMember && TypeScript$$31.hasFlag(funcDecl$$35.fncFlags, TypeScript$$31.FncFlags.Private) && funcDecl$$35.type.call && funcDecl$$35.type.call.signatures.length > 1) {
          var signatures$$4 = funcDecl$$35.type.call.signatures;
          var firstSignature = signatures$$4[0].declAST;
          if (firstSignature.bod) {
            firstSignature = signatures$$4[1].declAST;
          }
          if (firstSignature != funcDecl$$35) {
            return false;
          }
        }
      }
      if (!this.canEmitSignature(TypeScript$$31.ToDeclFlags(funcDecl$$35.fncFlags), false)) {
        return false;
      }
      this.emitDeclarationComments(funcDecl$$35);
      if (funcDecl$$35.isConstructor) {
        this.emitIndent();
        this.declFile.Write("constructor");
      } else {
        var id$$24 = funcDecl$$35.getNameText();
        if (!isInterfaceMember) {
          this.emitDeclFlags(TypeScript$$31.ToDeclFlags(funcDecl$$35.fncFlags), "function");
          this.declFile.Write(id$$24);
        } else {
          this.emitIndent();
          if (funcDecl$$35.isConstructMember()) {
            this.declFile.Write("new");
          } else {
            if (!funcDecl$$35.isCallMember() && !funcDecl$$35.isIndexerMember()) {
              this.declFile.Write(id$$24);
              if (TypeScript$$31.hasFlag(funcDecl$$35.name.flags, TypeScript$$31.ASTFlags.OptionalName)) {
                this.declFile.Write("? ");
              }
            }
          }
        }
      }
      if (!funcDecl$$35.isIndexerMember()) {
        this.declFile.Write("(");
      } else {
        this.declFile.Write("[");
      }
      this.indenter.increaseIndent();
      if (funcDecl$$35.arguments) {
        var argsLen$$2 = funcDecl$$35.arguments.members.length;
        if (funcDecl$$35.variableArgList) {
          argsLen$$2--;
        }
        var i$$122 = 0;
        for (;i$$122 < argsLen$$2;i$$122++) {
          var argDecl$$3 = funcDecl$$35.arguments.members[i$$122];
          this.emitArgDecl(argDecl$$3, funcDecl$$35);
          if (i$$122 < argsLen$$2 - 1) {
            this.declFile.Write(", ");
          }
        }
      }
      if (funcDecl$$35.variableArgList) {
        var lastArg$$2 = funcDecl$$35.arguments.members[funcDecl$$35.arguments.members.length - 1];
        if (funcDecl$$35.arguments.members.length > 1) {
          this.declFile.Write(", ...");
        } else {
          this.declFile.Write("...");
        }
        this.emitArgDecl(lastArg$$2, funcDecl$$35);
      }
      this.indenter.decreaseIndent();
      if (!funcDecl$$35.isIndexerMember()) {
        this.declFile.Write(")");
      } else {
        this.declFile.Write("]");
      }
      if (!funcDecl$$35.isConstructor && (funcDecl$$35.returnTypeAnnotation || funcDecl$$35.signature.returnType.type != this.checker.anyType) && this.canEmitTypeAnnotationSignature(TypeScript$$31.ToDeclFlags(funcDecl$$35.fncFlags))) {
        this.declFile.Write(": ");
        this.emitTypeSignature(funcDecl$$35.signature.returnType.type);
      }
      this.declFile.WriteLine(";");
      return false;
    };
    DeclarationEmitter$$1.prototype.emitBaseList = function(bases$$8, qual) {
      if (bases$$8 && bases$$8.members.length > 0) {
        this.declFile.Write(" " + qual + " ");
        var basesLen$$3 = bases$$8.members.length;
        var i$$123 = 0;
        for (;i$$123 < basesLen$$3;i$$123++) {
          var baseExpr$$3 = bases$$8.members[i$$123];
          var baseSymbol$$4 = baseExpr$$3.type.symbol;
          var baseType$$1 = baseExpr$$3.type;
          if (i$$123 > 0) {
            this.declFile.Write(", ");
          }
          this.emitTypeSignature(baseType$$1);
        }
      }
    };
    DeclarationEmitter$$1.prototype.emitPropertyAccessorSignature = function(funcDecl$$36) {
      var accessorSymbol$$1 = funcDecl$$36.accessorSymbol;
      if (accessorSymbol$$1.getter && accessorSymbol$$1.getter.declAST != funcDecl$$36) {
        return false;
      }
      this.emitDeclarationComments(accessorSymbol$$1);
      this.emitDeclFlags(TypeScript$$31.ToDeclFlags(accessorSymbol$$1.flags), "var");
      this.declFile.Write(funcDecl$$36.name.text);
      var propertyType = accessorSymbol$$1.getType();
      if (this.canEmitTypeAnnotationSignature(TypeScript$$31.ToDeclFlags(accessorSymbol$$1.flags))) {
        this.declFile.Write(" : ");
        this.emitTypeSignature(propertyType);
      }
      this.declFile.WriteLine(";");
      return false;
    };
    DeclarationEmitter$$1.prototype.emitClassMembersFromConstructorDefinition = function(funcDecl$$37) {
      if (funcDecl$$37.arguments) {
        var argsLen$$3 = funcDecl$$37.arguments.members.length;
        if (funcDecl$$37.variableArgList) {
          argsLen$$3--;
        }
        var i$$124 = 0;
        for (;i$$124 < argsLen$$3;i$$124++) {
          var argDecl$$4 = funcDecl$$37.arguments.members[i$$124];
          if (TypeScript$$31.hasFlag(argDecl$$4.varFlags, TypeScript$$31.VarFlags.Property)) {
            this.emitDeclarationComments(argDecl$$4);
            this.emitDeclFlags(TypeScript$$31.ToDeclFlags(argDecl$$4.varFlags), "var");
            this.declFile.Write(argDecl$$4.id.text);
            if (argDecl$$4.typeExpr && this.canEmitTypeAnnotationSignature(TypeScript$$31.ToDeclFlags(argDecl$$4.varFlags))) {
              this.declFile.Write(": ");
              this.emitTypeSignature(argDecl$$4.type);
            }
            this.declFile.WriteLine(";");
          }
        }
      }
    };
    DeclarationEmitter$$1.prototype.ClassDeclarationCallback = function(pre$$16, classDecl$$10) {
      if (!this.canEmitPrePostAstSignature(TypeScript$$31.ToDeclFlags(classDecl$$10.varFlags), classDecl$$10, pre$$16)) {
        return false;
      }
      if (pre$$16) {
        var className$$5 = classDecl$$10.name.text;
        this.emitDeclarationComments(classDecl$$10);
        this.emitDeclFlags(TypeScript$$31.ToDeclFlags(classDecl$$10.varFlags), "class");
        this.declFile.Write(className$$5);
        this.emitBaseList(classDecl$$10.extendsList, "extends");
        this.emitBaseList(classDecl$$10.implementsList, "implements");
        this.declFile.WriteLine(" {");
        this.pushDeclarationContainer(classDecl$$10);
        this.indenter.increaseIndent();
        if (classDecl$$10.constructorDecl) {
          this.emitClassMembersFromConstructorDefinition(classDecl$$10.constructorDecl);
        }
      } else {
        this.indenter.decreaseIndent();
        this.popDeclarationContainer(classDecl$$10);
        this.emitIndent();
        this.declFile.WriteLine("}");
      }
      return true;
    };
    DeclarationEmitter$$1.prototype.InterfaceDeclarationCallback = function(pre$$17, interfaceDecl$$7) {
      if (!this.canEmitPrePostAstSignature(TypeScript$$31.ToDeclFlags(interfaceDecl$$7.varFlags), interfaceDecl$$7, pre$$17)) {
        return false;
      }
      if (pre$$17) {
        var interfaceName$$1 = interfaceDecl$$7.name.text;
        this.emitDeclarationComments(interfaceDecl$$7);
        this.emitDeclFlags(TypeScript$$31.ToDeclFlags(interfaceDecl$$7.varFlags), "interface");
        this.declFile.Write(interfaceName$$1);
        this.emitBaseList(interfaceDecl$$7.extendsList, "extends");
        this.declFile.WriteLine(" {");
        this.indenter.increaseIndent();
        this.pushDeclarationContainer(interfaceDecl$$7);
      } else {
        this.indenter.decreaseIndent();
        this.popDeclarationContainer(interfaceDecl$$7);
        this.emitIndent();
        this.declFile.WriteLine("}");
      }
      return true;
    };
    DeclarationEmitter$$1.prototype.ImportDeclarationCallback = function(pre$$18, importDecl$$3) {
      if (pre$$18) {
        if (this.declarationContainerStack[0].isExternallyVisibleSymbol(importDecl$$3.id.sym)) {
          this.emitDeclarationComments(importDecl$$3);
          this.emitIndent();
          this.declFile.Write("import ");
          this.declFile.Write(importDecl$$3.id.text + " = ");
          if (importDecl$$3.isDynamicImport) {
            this.declFile.WriteLine("module (" + importDecl$$3.getAliasName() + ");");
          } else {
            this.declFile.WriteLine(importDecl$$3.getAliasName() + ";");
          }
        }
      }
      return false;
    };
    DeclarationEmitter$$1.prototype.emitEnumSignature = function(moduleDecl$$8) {
      if (!this.canEmitSignature(TypeScript$$31.ToDeclFlags(moduleDecl$$8.modFlags))) {
        return false;
      }
      this.emitDeclarationComments(moduleDecl$$8);
      this.emitDeclFlags(TypeScript$$31.ToDeclFlags(moduleDecl$$8.modFlags), "enum");
      this.declFile.WriteLine(moduleDecl$$8.name.text + " {");
      this.indenter.increaseIndent();
      var membersLen$$1 = moduleDecl$$8.members.members.length;
      var j$$19 = 1;
      for (;j$$19 < membersLen$$1;j$$19++) {
        var memberDecl$$1 = moduleDecl$$8.members.members[j$$19];
        if (memberDecl$$1.nodeType == TypeScript$$31.NodeType.VarDecl) {
          this.emitDeclarationComments(memberDecl$$1);
          this.emitIndent();
          this.declFile.WriteLine(memberDecl$$1.id.text + ",");
        } else {
          TypeScript$$31.CompilerDiagnostics.assert(memberDecl$$1.nodeType != TypeScript$$31.NodeType.Asg, "We want to catch this");
        }
      }
      this.indenter.decreaseIndent();
      this.emitIndent();
      this.declFile.WriteLine("}");
      return false;
    };
    DeclarationEmitter$$1.prototype.ModuleDeclarationCallback = function(pre$$19, moduleDecl$$9) {
      if (TypeScript$$31.hasFlag(moduleDecl$$9.modFlags, TypeScript$$31.ModuleFlags.IsWholeFile)) {
        if (TypeScript$$31.hasFlag(moduleDecl$$9.modFlags, TypeScript$$31.ModuleFlags.IsDynamic)) {
          if (pre$$19) {
            if (!this.emitOptions.outputMany) {
              this.singleDeclFile = this.declFile;
              TypeScript$$31.CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");
              var declareFileName = this.emitOptions.mapOutputFileName(TypeScript$$31.stripQuotes(moduleDecl$$9.name.sym.name), TypeScript$$31.TypeScriptCompiler.mapToDTSFileName);
              var useUTF8InOutputfile$$1 = moduleDecl$$9.containsUnicodeChar || this.emitOptions.emitComments && moduleDecl$$9.containsUnicodeCharInComment;
              try {
                this.declFile = new DeclFileWriter(this.emitOptions.ioHost.createFile(declareFileName, useUTF8InOutputfile$$1));
              } catch (ex$$4) {
                this.errorReporter.emitterError(null, ex$$4.message);
              }
            }
            this.pushDeclarationContainer(moduleDecl$$9);
          } else {
            if (!this.emitOptions.outputMany) {
              TypeScript$$31.CompilerDiagnostics.assert(this.singleDeclFile != this.declFile, "singleDeclFile cannot be null as we are going to revert back to it");
              TypeScript$$31.CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");
              try {
                this.declFile.Close();
              } catch (ex$$5) {
                this.errorReporter.emitterError(null, ex$$5.message);
              }
              this.declFile = this.singleDeclFile;
            }
            this.popDeclarationContainer(moduleDecl$$9);
          }
        }
        return true;
      }
      if (moduleDecl$$9.isEnum()) {
        if (pre$$19) {
          this.emitEnumSignature(moduleDecl$$9);
        }
        return false;
      }
      if (!this.canEmitPrePostAstSignature(TypeScript$$31.ToDeclFlags(moduleDecl$$9.modFlags), moduleDecl$$9, pre$$19)) {
        return false;
      }
      if (pre$$19) {
        if (this.emitDottedModuleName()) {
          this.dottedModuleEmit += ".";
        } else {
          this.dottedModuleEmit = this.getDeclFlagsString(TypeScript$$31.ToDeclFlags(moduleDecl$$9.modFlags), "module");
        }
        this.dottedModuleEmit += moduleDecl$$9.name.text;
        var isCurrentModuleDotted = moduleDecl$$9.members.members.length == 1 && moduleDecl$$9.members.members[0].nodeType == TypeScript$$31.NodeType.ModuleDeclaration && !moduleDecl$$9.members.members[0].isEnum() && TypeScript$$31.hasFlag(moduleDecl$$9.members.members[0].modFlags, TypeScript$$31.ModuleFlags.Exported);
        var moduleDeclComments = moduleDecl$$9.getDocComments();
        isCurrentModuleDotted = isCurrentModuleDotted && (moduleDeclComments == null || moduleDeclComments.length == 0);
        this.isDottedModuleName.push(isCurrentModuleDotted);
        this.pushDeclarationContainer(moduleDecl$$9);
        if (!isCurrentModuleDotted) {
          this.emitDeclarationComments(moduleDecl$$9);
          this.declFile.Write(this.dottedModuleEmit);
          this.declFile.WriteLine(" {");
          this.indenter.increaseIndent();
        }
      } else {
        if (!this.emitDottedModuleName()) {
          this.indenter.decreaseIndent();
          this.emitIndent();
          this.declFile.WriteLine("}");
        }
        this.popDeclarationContainer(moduleDecl$$9);
        this.isDottedModuleName.pop();
      }
      return true;
    };
    DeclarationEmitter$$1.prototype.ScriptCallback = function(pre$$20, script$$22) {
      if (pre$$20) {
        if (this.emitOptions.outputMany) {
          var i$$125 = 0;
          for (;i$$125 < script$$22.referencedFiles.length;i$$125++) {
            var referencePath$$1 = script$$22.referencedFiles[i$$125].path;
            var declareFileName$$1;
            if (TypeScript$$31.isRooted(referencePath$$1)) {
              declareFileName$$1 = this.emitOptions.mapOutputFileName(referencePath$$1, TypeScript$$31.TypeScriptCompiler.mapToDTSFileName);
            } else {
              declareFileName$$1 = TypeScript$$31.getDeclareFilePath(script$$22.referencedFiles[i$$125].path);
            }
            this.declFile.WriteLine('/// <reference path="' + declareFileName$$1 + '" />');
          }
        }
        this.pushDeclarationContainer(script$$22);
      } else {
        this.popDeclarationContainer(script$$22);
      }
      return true;
    };
    DeclarationEmitter$$1.prototype.DefaultCallback = function(pre$$21, ast$$121) {
      return!TypeScript$$31.hasFlag(ast$$121.flags, TypeScript$$31.ASTFlags.IsStatement);
    };
    return DeclarationEmitter$$1;
  }();
  TypeScript$$31.DeclarationEmitter = DeclarationEmitter;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$32) {
  (function(UpdateUnitKind$$1) {
    UpdateUnitKind$$1._map = [];
    UpdateUnitKind$$1._map[0] = "Unknown";
    UpdateUnitKind$$1.Unknown = 0;
    UpdateUnitKind$$1._map[1] = "NoEdits";
    UpdateUnitKind$$1.NoEdits = 1;
    UpdateUnitKind$$1._map[2] = "EditsInsideSingleScope";
    UpdateUnitKind$$1.EditsInsideSingleScope = 2;
  })(TypeScript$$32.UpdateUnitKind || (TypeScript$$32.UpdateUnitKind = {}));
  var UpdateUnitKind = TypeScript$$32.UpdateUnitKind;
  var ScriptEditRange = function() {
    function ScriptEditRange$$1(minChar$$34, limChar$$12, delta$$2) {
      this.minChar = minChar$$34;
      this.limChar = limChar$$12;
      this.delta = delta$$2;
    }
    ScriptEditRange$$1.unknown = function unknown() {
      return new ScriptEditRange$$1(-1, -1, -1);
    };
    ScriptEditRange$$1.prototype.isUnknown = function() {
      return this.minChar === -1 && this.limChar === -1 && this.delta === -1;
    };
    ScriptEditRange$$1.prototype.containsPosition = function(pos$$8) {
      return this.minChar <= pos$$8 && pos$$8 < this.limChar || this.minChar <= pos$$8 && pos$$8 < this.limChar + this.delta;
    };
    ScriptEditRange$$1.prototype.toString = function() {
      return "editRange(minChar=" + this.minChar + ", limChar=" + this.limChar + ", delta=" + this.delta + ")";
    };
    return ScriptEditRange$$1;
  }();
  TypeScript$$32.ScriptEditRange = ScriptEditRange;
  var UpdateUnitResult = function() {
    function UpdateUnitResult$$1(kind, unitIndex$$11, script1, script2) {
      this.kind = kind;
      this.unitIndex = unitIndex$$11;
      this.script1 = script1;
      this.script2 = script2;
      this.scope1 = null;
      this.scope2 = null;
      this.editRange = null;
      this.parseErrors = [];
    }
    UpdateUnitResult$$1.noEdits = function noEdits(unitIndex$$12) {
      return new UpdateUnitResult$$1(UpdateUnitKind.NoEdits, unitIndex$$12, null, null);
    };
    UpdateUnitResult$$1.unknownEdits = function unknownEdits(script1$$1, script2$$1, parseErrors$$2) {
      var result$$35 = new UpdateUnitResult$$1(UpdateUnitKind.Unknown, script1$$1.locationInfo.unitIndex, script1$$1, script2$$1);
      result$$35.parseErrors = parseErrors$$2;
      return result$$35;
    };
    UpdateUnitResult$$1.singleScopeEdits = function singleScopeEdits(script1$$2, script2$$2, scope1$$2, scope2$$1, editRange$$4, parseErrors$$3) {
      var result$$36 = new UpdateUnitResult$$1(UpdateUnitKind.EditsInsideSingleScope, script1$$2.locationInfo.unitIndex, script1$$2, script2$$2);
      result$$36.scope1 = scope1$$2;
      result$$36.scope2 = scope2$$1;
      result$$36.editRange = editRange$$4;
      result$$36.parseErrors = parseErrors$$3;
      return result$$36;
    };
    return UpdateUnitResult$$1;
  }();
  TypeScript$$32.UpdateUnitResult = UpdateUnitResult;
  var ErrorEntry = function() {
    function ErrorEntry$$1(unitIndex$$13, minChar$$35, limChar$$13, message$$20) {
      this.unitIndex = unitIndex$$13;
      this.minChar = minChar$$35;
      this.limChar = limChar$$13;
      this.message = message$$20;
    }
    return ErrorEntry$$1;
  }();
  TypeScript$$32.ErrorEntry = ErrorEntry;
  TypeScript$$32.defaultSettings = new TypeScript$$32.CompilationSettings;
  var TypeScriptCompiler = function() {
    function TypeScriptCompiler$$1(errorOutput, logger$$6, settings$$4) {
      if (typeof logger$$6 === "undefined") {
        logger$$6 = new TypeScript$$32.NullLogger;
      }
      if (typeof settings$$4 === "undefined") {
        settings$$4 = TypeScript$$32.defaultSettings;
      }
      this.errorOutput = errorOutput;
      this.logger = logger$$6;
      this.settings = settings$$4;
      this.parser = new TypeScript$$32.Parser;
      this.typeFlow = null;
      this.scripts = new TypeScript$$32.ASTList;
      this.units = new Array;
      this.errorReporter = new TypeScript$$32.ErrorReporter(this.errorOutput);
      this.persistentTypeState = new TypeScript$$32.PersistentGlobalTypeState(this.errorReporter);
      this.errorReporter.parser = this.parser;
      this.initTypeChecker(this.errorOutput);
      this.parser.style_requireSemi = this.settings.styleSettings.requireSemi;
      this.parser.style_funcInLoop = this.settings.styleSettings.funcInLoop;
      this.parser.inferPropertiesFromThisAssignment = this.settings.inferPropertiesFromThisAssignment;
      this.emitSettings = new TypeScript$$32.EmitOptions(this.settings);
      TypeScript$$32.codeGenTarget = settings$$4.codeGenTarget;
    }
    TypeScriptCompiler$$1.prototype.timeFunction = function(funcDescription, func$$4) {
      return TypeScript$$32.timeFunction(this.logger, funcDescription, func$$4);
    };
    TypeScriptCompiler$$1.prototype.initTypeChecker = function(errorOutput$$1) {
      this.persistentTypeState.refreshPersistentState();
      this.typeChecker = new TypeScript$$32.TypeChecker(this.persistentTypeState);
      this.typeChecker.errorReporter = this.errorReporter;
      this.typeChecker.checkControlFlow = this.settings.controlFlow;
      this.typeChecker.checkControlFlowUseDef = this.settings.controlFlowUseDef;
      this.typeChecker.printControlFlowGraph = this.settings.printControlFlow;
      this.typeChecker.errorsOnWith = this.settings.errorOnWith;
      this.typeChecker.styleSettings = this.settings.styleSettings;
      this.typeChecker.canCallDefinitionSignature = this.settings.canCallDefinitionSignature;
      this.errorReporter.checker = this.typeChecker;
      this.setErrorOutput(this.errorOutput);
    };
    TypeScriptCompiler$$1.prototype.setErrorOutput = function(outerr$$2) {
      this.errorOutput = outerr$$2;
      this.errorReporter.setErrOut(outerr$$2);
      this.parser.outfile = outerr$$2;
    };
    TypeScriptCompiler$$1.prototype.emitCommentsToOutput = function() {
      this.emitSettings = new TypeScript$$32.EmitOptions(this.settings);
    };
    TypeScriptCompiler$$1.prototype.setErrorCallback = function(fn$$10) {
      this.parser.errorCallback = fn$$10;
    };
    TypeScriptCompiler$$1.prototype.updateUnit = function(prog, filename$$3, setRecovery) {
      return this.updateSourceUnit(new TypeScript$$32.StringSourceText(prog), filename$$3, setRecovery);
    };
    TypeScriptCompiler$$1.prototype.updateSourceUnit = function(sourceText$$6, filename$$4, setRecovery$$1) {
      var _this$$15 = this;
      return this.timeFunction("updateSourceUnit(" + filename$$4 + ")", function() {
        var updateResult$$1 = _this$$15.partialUpdateUnit(sourceText$$6, filename$$4, setRecovery$$1);
        return _this$$15.applyUpdateResult(updateResult$$1);
      });
    };
    TypeScriptCompiler$$1.prototype.applyUpdateResult = function(updateResult$$2) {
      switch(updateResult$$2.kind) {
        case UpdateUnitKind.NoEdits:
          return false;
        case UpdateUnitKind.Unknown:
          this.scripts.members[updateResult$$2.unitIndex] = updateResult$$2.script2;
          this.units[updateResult$$2.unitIndex] = updateResult$$2.script2.locationInfo;
          var i$$126 = 0;
          var len$$58 = updateResult$$2.parseErrors.length;
          for (;i$$126 < len$$58;i$$126++) {
            var e$$10 = updateResult$$2.parseErrors[i$$126];
            if (this.parser.errorCallback) {
              this.parser.errorCallback(e$$10.minChar, e$$10.limChar - e$$10.minChar, e$$10.message, e$$10.unitIndex);
            }
          }
          return true;
        case UpdateUnitKind.EditsInsideSingleScope:
          (new TypeScript$$32.IncrementalParser(this.logger)).mergeTrees(updateResult$$2);
          return true;
      }
    };
    TypeScriptCompiler$$1.prototype.partialUpdateUnit = function(sourceText$$7, filename$$5, setRecovery$$2) {
      var _this$$16 = this;
      return this.timeFunction("partialUpdateUnit(" + filename$$5 + ")", function() {
        var i$$127 = 0;
        var len$$59 = _this$$16.units.length;
        for (;i$$127 < len$$59;i$$127++) {
          if (_this$$16.units[i$$127].filename == filename$$5) {
            if (_this$$16.scripts.members[i$$127].isResident) {
              return UpdateUnitResult.noEdits(i$$127);
            }
            if (setRecovery$$2) {
              _this$$16.parser.setErrorRecovery(null);
            }
            var updateResult$$3;
            var parseErrors$$4 = [];
            var errorCapture$$2 = function(minChar$$36, charLen$$1, message$$21, unitIndex$$14) {
              parseErrors$$4.push(new ErrorEntry(unitIndex$$14, minChar$$36, minChar$$36 + charLen$$1, message$$21));
            };
            var svErrorCallback = _this$$16.parser.errorCallback;
            if (svErrorCallback) {
              _this$$16.parser.errorCallback = errorCapture$$2;
            }
            var oldScript = _this$$16.scripts.members[i$$127];
            var newScript = _this$$16.parser.parse(sourceText$$7, filename$$5, i$$127);
            if (svErrorCallback) {
              _this$$16.parser.errorCallback = svErrorCallback;
            }
            updateResult$$3 = UpdateUnitResult.unknownEdits(oldScript, newScript, parseErrors$$4);
            return updateResult$$3;
          }
        }
        throw new Error('Unknown file "' + filename$$5 + '"');
      });
    };
    TypeScriptCompiler$$1.prototype.addUnit = function(prog$$1, filename$$6, keepResident, referencedFiles$$1) {
      if (typeof keepResident === "undefined") {
        keepResident = false;
      }
      if (typeof referencedFiles$$1 === "undefined") {
        referencedFiles$$1 = [];
      }
      return this.addSourceUnit(new TypeScript$$32.StringSourceText(prog$$1), filename$$6, keepResident, referencedFiles$$1);
    };
    TypeScriptCompiler$$1.prototype.addSourceUnit = function(sourceText$$8, filename$$7, keepResident$$1, referencedFiles$$2) {
      if (typeof referencedFiles$$2 === "undefined") {
        referencedFiles$$2 = [];
      }
      var _this$$17 = this;
      return this.timeFunction("addSourceUnit(" + filename$$7 + ", " + keepResident$$1 + ")", function() {
        var script$$23 = _this$$17.parser.parse(sourceText$$8, filename$$7, _this$$17.units.length, TypeScript$$32.AllowedElements.Global);
        script$$23.referencedFiles = referencedFiles$$2;
        script$$23.isResident = keepResident$$1;
        _this$$17.persistentTypeState.setCollectionMode(keepResident$$1 ? TypeScript$$32.TypeCheckCollectionMode.Resident : TypeScript$$32.TypeCheckCollectionMode.Transient);
        var index$$63 = _this$$17.units.length;
        _this$$17.units[index$$63] = script$$23.locationInfo;
        _this$$17.typeChecker.collectTypes(script$$23);
        _this$$17.scripts.append(script$$23);
        return script$$23;
      });
    };
    TypeScriptCompiler$$1.prototype.parseUnit = function(prog$$2, filename$$8) {
      return this.parseSourceUnit(new TypeScript$$32.StringSourceText(prog$$2), filename$$8);
    };
    TypeScriptCompiler$$1.prototype.parseSourceUnit = function(sourceText$$9, filename$$9) {
      this.parser.setErrorRecovery(this.errorOutput);
      var script$$24 = this.parser.parse(sourceText$$9, filename$$9, 0);
      var index$$64 = this.units.length;
      this.units[index$$64] = script$$24.locationInfo;
      this.typeChecker.collectTypes(script$$24);
      this.scripts.append(script$$24);
    };
    TypeScriptCompiler$$1.prototype.typeCheck = function() {
      var _this$$18 = this;
      return this.timeFunction("typeCheck()", function() {
        var binder$$1 = new TypeScript$$32.Binder(_this$$18.typeChecker);
        _this$$18.typeChecker.units = _this$$18.units;
        binder$$1.bind(_this$$18.typeChecker.globalScope, _this$$18.typeChecker.globals);
        binder$$1.bind(_this$$18.typeChecker.globalScope, _this$$18.typeChecker.ambientGlobals);
        binder$$1.bind(_this$$18.typeChecker.globalScope, _this$$18.typeChecker.globalTypes);
        binder$$1.bind(_this$$18.typeChecker.globalScope, _this$$18.typeChecker.ambientGlobalTypes);
        _this$$18.typeFlow = new TypeScript$$32.TypeFlow(_this$$18.logger, _this$$18.typeChecker.globalScope, _this$$18.parser, _this$$18.typeChecker);
        var i$$128 = 0;
        var script$$25 = null;
        var len$$60 = _this$$18.scripts.members.length;
        _this$$18.persistentTypeState.setCollectionMode(TypeScript$$32.TypeCheckCollectionMode.Resident);
        i$$128 = 0;
        for (;i$$128 < len$$60;i$$128++) {
          script$$25 = _this$$18.scripts.members[i$$128];
          if (!script$$25.isResident || script$$25.hasBeenTypeChecked) {
            continue;
          }
          _this$$18.typeFlow.assignScopes(script$$25);
          _this$$18.typeFlow.initLibs();
        }
        i$$128 = 0;
        for (;i$$128 < len$$60;i$$128++) {
          script$$25 = _this$$18.scripts.members[i$$128];
          if (!script$$25.isResident || script$$25.hasBeenTypeChecked) {
            continue;
          }
          _this$$18.typeFlow.typeCheck(script$$25);
          script$$25.hasBeenTypeChecked = true;
        }
        _this$$18.persistentTypeState.setCollectionMode(TypeScript$$32.TypeCheckCollectionMode.Transient);
        len$$60 = _this$$18.scripts.members.length;
        i$$128 = 0;
        for (;i$$128 < len$$60;i$$128++) {
          script$$25 = _this$$18.scripts.members[i$$128];
          if (script$$25.isResident) {
            continue;
          }
          _this$$18.typeFlow.assignScopes(script$$25);
          _this$$18.typeFlow.initLibs();
        }
        i$$128 = 0;
        for (;i$$128 < len$$60;i$$128++) {
          script$$25 = _this$$18.scripts.members[i$$128];
          if (script$$25.isResident) {
            continue;
          }
          _this$$18.typeFlow.typeCheck(script$$25);
        }
        return null;
      });
    };
    TypeScriptCompiler$$1.prototype.cleanASTTypesForReTypeCheck = function(ast$$122) {
      function cleanASTType(ast$$123, parent$$72) {
        ast$$123.type = null;
        if (ast$$123.nodeType == TypeScript$$32.NodeType.VarDecl) {
          var vardecl = ast$$123;
          vardecl.sym = null;
        } else {
          if (ast$$123.nodeType == TypeScript$$32.NodeType.ArgDecl) {
            var argdecl = ast$$123;
            argdecl.sym = null;
          } else {
            if (ast$$123.nodeType == TypeScript$$32.NodeType.Name) {
              var name$$86 = ast$$123;
              name$$86.sym = null;
            } else {
              if (ast$$123.nodeType == TypeScript$$32.NodeType.FuncDecl) {
                var funcdecl = ast$$123;
                funcdecl.signature = null;
                funcdecl.freeVariables = new Array;
                funcdecl.symbols = null;
                funcdecl.accessorSymbol = null;
                funcdecl.scopeType = null;
              } else {
                if (ast$$123.nodeType == TypeScript$$32.NodeType.ModuleDeclaration) {
                  var modDecl$$3 = ast$$123;
                  modDecl$$3.mod = null;
                } else {
                  if (ast$$123.nodeType == TypeScript$$32.NodeType.With) {
                    ast$$123.withSym = null;
                  } else {
                    if (ast$$123.nodeType == TypeScript$$32.NodeType.Catch) {
                      ast$$123.containedScope = null;
                    }
                  }
                }
              }
            }
          }
        }
        return ast$$123;
      }
      TypeScript$$32.getAstWalkerFactory().walk(ast$$122, cleanASTType);
    };
    TypeScriptCompiler$$1.prototype.cleanTypesForReTypeCheck = function() {
      var _this$$19 = this;
      return this.timeFunction("cleanTypesForReTypeCheck()", function() {
        var i$$129 = 0;
        var len$$61 = _this$$19.scripts.members.length;
        for (;i$$129 < len$$61;i$$129++) {
          var script$$26 = _this$$19.scripts.members[i$$129];
          if (script$$26.isResident) {
            continue;
          }
          _this$$19.cleanASTTypesForReTypeCheck(script$$26);
          _this$$19.typeChecker.collectTypes(script$$26);
        }
        return null;
      });
    };
    TypeScriptCompiler$$1.prototype.attemptIncrementalTypeCheck = function(updateResult$$4) {
      return this.timeFunction("attemptIncrementalTypeCheck()", function() {
        return false;
      });
    };
    TypeScriptCompiler$$1.prototype.reTypeCheck = function() {
      var _this$$20 = this;
      return this.timeFunction("reTypeCheck()", function() {
        TypeScript$$32.CompilerDiagnostics.analysisPass++;
        _this$$20.initTypeChecker(_this$$20.errorOutput);
        _this$$20.persistentTypeState.setCollectionMode(TypeScript$$32.TypeCheckCollectionMode.Transient);
        _this$$20.cleanTypesForReTypeCheck();
        return _this$$20.typeCheck();
      });
    };
    TypeScriptCompiler$$1.prototype.isDynamicModuleCompilation = function() {
      var i$$130 = 0;
      var len$$62 = this.scripts.members.length;
      for (;i$$130 < len$$62;i$$130++) {
        var script$$27 = this.scripts.members[i$$130];
        if (!script$$27.isDeclareFile && script$$27.topLevelMod != null) {
          return true;
        }
      }
      return false;
    };
    TypeScriptCompiler$$1.prototype.updateCommonDirectoryPath = function() {
      var commonComponents = [];
      var commonComponentsLength = -1;
      var i$$131 = 0;
      var len$$63 = this.scripts.members.length;
      for (;i$$131 < len$$63;i$$131++) {
        var script$$28 = this.scripts.members[i$$131];
        if (script$$28.emitRequired(this.emitSettings)) {
          var fileName$$3 = script$$28.locationInfo.filename;
          var fileComponents = TypeScript$$32.filePathComponents(fileName$$3);
          if (commonComponentsLength == -1) {
            commonComponents = fileComponents;
            commonComponentsLength = commonComponents.length;
          } else {
            var updatedPath = false;
            var j$$20 = 0;
            for (;j$$20 < commonComponentsLength && j$$20 < fileComponents.length;j$$20++) {
              if (commonComponents[j$$20] != fileComponents[j$$20]) {
                commonComponentsLength = j$$20;
                updatedPath = true;
                if (j$$20 == 0) {
                  this.errorReporter.emitterError(null, "Cannot find the common subdirectory path for the input files");
                  return;
                }
                break;
              }
            }
            if (!updatedPath && fileComponents.length < commonComponentsLength) {
              commonComponentsLength = fileComponents.length;
            }
          }
        }
      }
      this.emitSettings.commonDirectoryPath = commonComponents.slice(0, commonComponentsLength).join("/") + "/";
      if (this.emitSettings.outputOption.charAt(this.emitSettings.outputOption.length - 1) != "/") {
        this.emitSettings.outputOption += "/";
      }
    };
    TypeScriptCompiler$$1.prototype.parseEmitOption = function(ioHost$$2) {
      this.emitSettings.ioHost = ioHost$$2;
      if (this.emitSettings.outputOption == "") {
        this.emitSettings.outputMany = true;
        this.emitSettings.commonDirectoryPath = "";
        return;
      }
      this.emitSettings.outputOption = TypeScript$$32.switchToForwardSlashes(this.emitSettings.ioHost.resolvePath(this.emitSettings.outputOption));
      if (this.emitSettings.ioHost.directoryExists(this.emitSettings.outputOption)) {
        this.emitSettings.outputMany = true;
      } else {
        if (this.emitSettings.ioHost.fileExists(this.emitSettings.outputOption)) {
          this.emitSettings.outputMany = false;
        } else {
          this.emitSettings.outputMany = !TypeScript$$32.isJSFile(this.emitSettings.outputOption);
        }
      }
      if (this.isDynamicModuleCompilation() && !this.emitSettings.outputMany) {
        this.errorReporter.emitterError(null, "Cannot compile dynamic modules when emitting into single file");
      }
      if (this.emitSettings.outputMany) {
        this.updateCommonDirectoryPath();
      }
    };
    TypeScriptCompiler$$1.prototype.useUTF8ForFile = function(script$$29) {
      if (this.emitSettings.outputMany) {
        return this.outputScriptToUTF8(script$$29);
      } else {
        return this.outputScriptsToUTF8(this.scripts.members);
      }
    };
    TypeScriptCompiler$$1.mapToDTSFileName = function mapToDTSFileName(fileName$$4, wholeFileNameReplaced) {
      return TypeScript$$32.getDeclareFilePath(fileName$$4);
    };
    TypeScriptCompiler$$1.prototype.canEmitDeclarations = function(script$$30) {
      if (!this.settings.generateDeclarationFiles) {
        return false;
      }
      if (!!script$$30 && (script$$30.isDeclareFile || script$$30.isResident || script$$30.bod == null)) {
        return false;
      }
      return true;
    };
    TypeScriptCompiler$$1.prototype.emitDeclarationsUnit = function(script$$31, reuseEmitter, declarationEmitter) {
      if (!this.canEmitDeclarations(script$$31)) {
        return null;
      }
      if (!declarationEmitter) {
        var declareFileName$$2 = this.emitSettings.mapOutputFileName(script$$31.locationInfo.filename, TypeScriptCompiler$$1.mapToDTSFileName);
        var declareFile = this.createFile(declareFileName$$2, this.useUTF8ForFile(script$$31));
        declarationEmitter = new TypeScript$$32.DeclarationEmitter(this.typeChecker, this.emitSettings, this.errorReporter);
        declarationEmitter.setDeclarationFile(declareFile);
      }
      declarationEmitter.emitDeclarations(script$$31);
      if (!reuseEmitter) {
        declarationEmitter.Close();
        return null;
      } else {
        return declarationEmitter;
      }
    };
    TypeScriptCompiler$$1.prototype.emitDeclarations = function() {
      if (!this.canEmitDeclarations()) {
        return;
      }
      if (this.errorReporter.hasErrors) {
        return;
      }
      if (this.scripts.members.length == 0) {
        return;
      }
      var declarationEmitter$$1 = null;
      var i$$132 = 0;
      var len$$64 = this.scripts.members.length;
      for (;i$$132 < len$$64;i$$132++) {
        var script$$32 = this.scripts.members[i$$132];
        if (this.emitSettings.outputMany || declarationEmitter$$1 == null) {
          declarationEmitter$$1 = this.emitDeclarationsUnit(script$$32, !this.emitSettings.outputMany);
        } else {
          this.emitDeclarationsUnit(script$$32, true, declarationEmitter$$1);
        }
      }
      if (declarationEmitter$$1) {
        declarationEmitter$$1.Close();
      }
    };
    TypeScriptCompiler$$1.mapToFileNameExtension = function mapToFileNameExtension(extension, fileName$$5, wholeFileNameReplaced$$1) {
      if (wholeFileNameReplaced$$1) {
        return fileName$$5;
      } else {
        var splitFname = fileName$$5.split(".");
        splitFname.pop();
        return splitFname.join(".") + extension;
      }
    };
    TypeScriptCompiler$$1.mapToJSFileName = function mapToJSFileName(fileName$$6, wholeFileNameReplaced$$2) {
      return TypeScriptCompiler$$1.mapToFileNameExtension(".js", fileName$$6, wholeFileNameReplaced$$2);
    };
    TypeScriptCompiler$$1.prototype.emitUnit = function(script$$33, reuseEmitter$$1, emitter$$39) {
      if (!script$$33.emitRequired(this.emitSettings)) {
        return null;
      }
      var fname$$7 = script$$33.locationInfo.filename;
      if (!emitter$$39) {
        var outFname$$1 = this.emitSettings.mapOutputFileName(fname$$7, TypeScriptCompiler$$1.mapToJSFileName);
        var outFile = this.createFile(outFname$$1, this.useUTF8ForFile(script$$33));
        emitter$$39 = new TypeScript$$32.Emitter(this.typeChecker, outFname$$1, outFile, this.emitSettings, this.errorReporter);
        if (this.settings.mapSourceFiles) {
          emitter$$39.setSourceMappings(new TypeScript$$32.SourceMapper(fname$$7, outFname$$1, outFile, this.createFile(outFname$$1 + TypeScript$$32.SourceMapper.MapFileExtension, false), this.errorReporter));
        }
      } else {
        if (this.settings.mapSourceFiles) {
          emitter$$39.setSourceMappings(new TypeScript$$32.SourceMapper(fname$$7, emitter$$39.emittingFileName, emitter$$39.outfile, emitter$$39.sourceMapper.sourceMapOut, this.errorReporter));
        }
      }
      this.typeChecker.locationInfo = script$$33.locationInfo;
      emitter$$39.emitJavascript(script$$33, TypeScript$$32.TokenID.Comma, false);
      if (!reuseEmitter$$1) {
        emitter$$39.Close();
        return null;
      } else {
        return emitter$$39;
      }
    };
    TypeScriptCompiler$$1.prototype.emit = function(ioHost$$3) {
      this.parseEmitOption(ioHost$$3);
      var emitter$$40 = null;
      var i$$133 = 0;
      var len$$65 = this.scripts.members.length;
      for (;i$$133 < len$$65;i$$133++) {
        var script$$34 = this.scripts.members[i$$133];
        if (this.emitSettings.outputMany || emitter$$40 == null) {
          emitter$$40 = this.emitUnit(script$$34, !this.emitSettings.outputMany);
        } else {
          this.emitUnit(script$$34, true, emitter$$40);
        }
      }
      if (emitter$$40) {
        emitter$$40.Close();
      }
    };
    TypeScriptCompiler$$1.prototype.emitToOutfile = function(outputFile) {
      if (this.settings.mapSourceFiles) {
        throw Error("Cannot generate source map");
      }
      if (this.settings.generateDeclarationFiles) {
        throw Error("Cannot generate declaration files");
      }
      if (this.settings.outputOption != "") {
        throw Error("Cannot parse output option");
      }
      var emitter$$41 = emitter$$41 = new TypeScript$$32.Emitter(this.typeChecker, "stdout", outputFile, this.emitSettings, this.errorReporter);
      var i$$134 = 0;
      var len$$66 = this.scripts.members.length;
      for (;i$$134 < len$$66;i$$134++) {
        var script$$35 = this.scripts.members[i$$134];
        this.typeChecker.locationInfo = script$$35.locationInfo;
        emitter$$41.emitJavascript(script$$35, TypeScript$$32.TokenID.Comma, false);
      }
    };
    TypeScriptCompiler$$1.prototype.emitAST = function(ioHost$$4) {
      this.parseEmitOption(ioHost$$4);
      var outFile$$1 = null;
      var context$$65 = null;
      var i$$135 = 0;
      var len$$67 = this.scripts.members.length;
      for (;i$$135 < len$$67;i$$135++) {
        var script$$36 = this.scripts.members[i$$135];
        if (this.emitSettings.outputMany || context$$65 == null) {
          var fname$$8 = this.units[i$$135].filename;
          var mapToTxtFileName = function(fileName$$7, wholeFileNameReplaced$$3) {
            return TypeScriptCompiler$$1.mapToFileNameExtension(".txt", fileName$$7, wholeFileNameReplaced$$3);
          };
          var outFname$$2 = this.emitSettings.mapOutputFileName(fname$$8, mapToTxtFileName);
          outFile$$1 = this.createFile(outFname$$2, this.useUTF8ForFile(script$$36));
          context$$65 = new TypeScript$$32.PrintContext(outFile$$1, this.parser);
        }
        TypeScript$$32.getAstWalkerFactory().walk(script$$36, TypeScript$$32.prePrintAST, TypeScript$$32.postPrintAST, null, context$$65);
        if (this.emitSettings.outputMany) {
          try {
            outFile$$1.Close();
          } catch (e$$11) {
            this.errorReporter.emitterError(null, e$$11.message);
          }
        }
      }
      if (!this.emitSettings.outputMany) {
        try {
          outFile$$1.Close();
        } catch (e$$12) {
          this.errorReporter.emitterError(null, e$$12.message);
        }
      }
    };
    TypeScriptCompiler$$1.prototype.outputScriptToUTF8 = function(script$$37) {
      return script$$37.containsUnicodeChar || this.emitSettings.emitComments && script$$37.containsUnicodeCharInComment;
    };
    TypeScriptCompiler$$1.prototype.outputScriptsToUTF8 = function(scripts) {
      var i$$136 = 0;
      var len$$68 = scripts.length;
      for (;i$$136 < len$$68;i$$136++) {
        var script$$38 = scripts[i$$136];
        if (this.outputScriptToUTF8(script$$38)) {
          return true;
        }
      }
      return false;
    };
    TypeScriptCompiler$$1.prototype.createFile = function(fileName$$8, useUTF8$$1) {
      try {
        return this.emitSettings.ioHost.createFile(fileName$$8, useUTF8$$1);
      } catch (ex$$6) {
        this.errorReporter.emitterError(null, ex$$6.message);
      }
    };
    return TypeScriptCompiler$$1;
  }();
  TypeScript$$32.TypeScriptCompiler = TypeScriptCompiler;
  var ScopeEntry = function() {
    function ScopeEntry$$1(name$$87, type$$60, sym$$49) {
      this.name = name$$87;
      this.type = type$$60;
      this.sym = sym$$49;
    }
    return ScopeEntry$$1;
  }();
  TypeScript$$32.ScopeEntry = ScopeEntry;
  var ScopeTraversal = function() {
    function ScopeTraversal$$1(compiler$$2) {
      this.compiler = compiler$$2;
    }
    ScopeTraversal$$1.prototype.getScope = function(enclosingScopeContext$$3) {
      if (enclosingScopeContext$$3.enclosingObjectLit && enclosingScopeContext$$3.isMemberCompletion) {
        return enclosingScopeContext$$3.getObjectLiteralScope();
      } else {
        if (enclosingScopeContext$$3.isMemberCompletion) {
          if (enclosingScopeContext$$3.useFullAst) {
            return this.compiler.typeFlow.findMemberScopeAtFullAst(enclosingScopeContext$$3);
          } else {
            return this.compiler.typeFlow.findMemberScopeAt(enclosingScopeContext$$3);
          }
        } else {
          return enclosingScopeContext$$3.getScope();
        }
      }
    };
    ScopeTraversal$$1.prototype.getScopeEntries = function(enclosingScopeContext$$4) {
      var scope$$35 = this.getScope(enclosingScopeContext$$4);
      if (scope$$35 == null) {
        return[];
      }
      var inScopeNames = new TypeScript$$32.StringHashTable;
      var allSymbolNames = scope$$35.getAllSymbolNames(enclosingScopeContext$$4.isMemberCompletion);
      var i$$137 = 0;
      for (;i$$137 < allSymbolNames.length;i$$137++) {
        var name$$88 = allSymbolNames[i$$137];
        if (name$$88 == TypeScript$$32.globalId || name$$88 == "_Core" || name$$88 == "_element") {
          continue;
        }
        inScopeNames.add(name$$88, "");
      }
      var svModuleDecl = this.compiler.typeChecker.currentModDecl;
      this.compiler.typeChecker.currentModDecl = enclosingScopeContext$$4.deepestModuleDecl;
      var result$$37 = this.getTypeNamesForNames(enclosingScopeContext$$4, inScopeNames.getAllKeys(), scope$$35);
      this.compiler.typeChecker.currentModDecl = svModuleDecl;
      return result$$37;
    };
    ScopeTraversal$$1.prototype.getTypeNamesForNames = function(enclosingScopeContext$$5, allNames, scope$$36) {
      var result$$38 = [];
      var enclosingScope$$2 = enclosingScopeContext$$5.getScope();
      var i$$138 = 0;
      for (;i$$138 < allNames.length;i$$138++) {
        var name$$89 = allNames[i$$138];
        var publicsOnly = enclosingScopeContext$$5.publicsOnly && enclosingScopeContext$$5.isMemberCompletion;
        var symbol$$23 = scope$$36.find(name$$89, publicsOnly, false);
        if (symbol$$23 == null) {
          symbol$$23 = scope$$36.find(name$$89, publicsOnly, true);
        }
        var displayThisMember = symbol$$23 && symbol$$23.flags & TypeScript$$32.SymbolFlags.Private ? symbol$$23.container == scope$$36.container : true;
        if (symbol$$23) {
          if (displayThisMember && !TypeScript$$32.isQuoted(symbol$$23.name) && !TypeScript$$32.isRelative(symbol$$23.name)) {
            var typeName$$11 = symbol$$23.getType().getScopedTypeName(enclosingScope$$2);
            result$$38.push(new ScopeEntry(name$$89, typeName$$11, symbol$$23));
          }
        } else {
          if (name$$89 == "true" || name$$89 == "false") {
            result$$38.push(new ScopeEntry(name$$89, "bool", this.compiler.typeChecker.booleanType.symbol));
          }
        }
      }
      return result$$38;
    };
    return ScopeTraversal$$1;
  }();
  TypeScript$$32.ScopeTraversal = ScopeTraversal;
})(TypeScript || (TypeScript = {}));
(function(TypeScript$$33) {
  function timeFunction(logger$$7, funcDescription$$1, func$$5) {
    var start$$14 = +new Date;
    var result$$39 = func$$5();
    var end$$7 = +new Date;
    logger$$7.log(funcDescription$$1 + " completed in " + (end$$7 - start$$14) + " msec");
    return result$$39;
  }
  function stringToLiteral(value$$41, length$$18) {
    var result$$40 = "";
    var addChar = function(index$$65) {
      var ch$$1 = value$$41.charCodeAt(index$$65);
      switch(ch$$1) {
        case 9:
          result$$40 += "\\t";
          break;
        case 10:
          result$$40 += "\\n";
          break;
        case 11:
          result$$40 += "\\v";
          break;
        case 12:
          result$$40 += "\\f";
          break;
        case 13:
          result$$40 += "\\r";
          break;
        case 34:
          result$$40 += '\\"';
          break;
        case 39:
          result$$40 += "\\'";
          break;
        case 92:
          result$$40 += "\\";
          break;
        default:
          result$$40 += value$$41.charAt(index$$65);
      }
    };
    var tooLong = value$$41.length > length$$18;
    if (tooLong) {
      var mid$$1 = length$$18 >> 1;
      var i$$139 = 0;
      for (;i$$139 < mid$$1;i$$139++) {
        addChar(i$$139);
      }
      result$$40 += "(...)";
      i$$139 = value$$41.length - mid$$1;
      for (;i$$139 < value$$41.length;i$$139++) {
        addChar(i$$139);
      }
    } else {
      length$$18 = value$$41.length;
      i$$139 = 0;
      for (;i$$139 < length$$18;i$$139++) {
        addChar(i$$139);
      }
    }
    return result$$40;
  }
  (function(CompilerDiagnostics$$1) {
    function Alert(output) {
      if (CompilerDiagnostics$$1.diagnosticWriter) {
        CompilerDiagnostics$$1.diagnosticWriter.Alert(output);
      }
    }
    function debugPrint(s$$37) {
      if (CompilerDiagnostics$$1.debug) {
        Alert(s$$37);
      }
    }
    function assert(condition$$1, s$$38) {
      if (CompilerDiagnostics$$1.debug) {
        if (!condition$$1) {
          Alert(s$$38);
        }
      }
    }
    CompilerDiagnostics$$1.debug = false;
    CompilerDiagnostics$$1.diagnosticWriter = null;
    CompilerDiagnostics$$1.analysisPass = 0;
    CompilerDiagnostics$$1.Alert = Alert;
    CompilerDiagnostics$$1.debugPrint = debugPrint;
    CompilerDiagnostics$$1.assert = assert;
  })(TypeScript$$33.CompilerDiagnostics || (TypeScript$$33.CompilerDiagnostics = {}));
  var CompilerDiagnostics = TypeScript$$33.CompilerDiagnostics;
  var NullLogger = function() {
    function NullLogger$$1() {
    }
    NullLogger$$1.prototype.information = function() {
      return false;
    };
    NullLogger$$1.prototype.debug = function() {
      return false;
    };
    NullLogger$$1.prototype.warning = function() {
      return false;
    };
    NullLogger$$1.prototype.error = function() {
      return false;
    };
    NullLogger$$1.prototype.fatal = function() {
      return false;
    };
    NullLogger$$1.prototype.log = function(s$$39) {
    };
    return NullLogger$$1;
  }();
  TypeScript$$33.NullLogger = NullLogger;
  var LoggerAdapter = function() {
    function LoggerAdapter$$1(logger$$8) {
      this.logger = logger$$8;
      this._information = this.logger.information();
      this._debug = this.logger.debug();
      this._warning = this.logger.warning();
      this._error = this.logger.error();
      this._fatal = this.logger.fatal();
    }
    LoggerAdapter$$1.prototype.information = function() {
      return this._information;
    };
    LoggerAdapter$$1.prototype.debug = function() {
      return this._debug;
    };
    LoggerAdapter$$1.prototype.warning = function() {
      return this._warning;
    };
    LoggerAdapter$$1.prototype.error = function() {
      return this._error;
    };
    LoggerAdapter$$1.prototype.fatal = function() {
      return this._fatal;
    };
    LoggerAdapter$$1.prototype.log = function(s$$40) {
      this.logger.log(s$$40);
    };
    return LoggerAdapter$$1;
  }();
  TypeScript$$33.LoggerAdapter = LoggerAdapter;
  var BufferedLogger = function() {
    function BufferedLogger$$1() {
      this.logContents = [];
    }
    BufferedLogger$$1.prototype.information = function() {
      return false;
    };
    BufferedLogger$$1.prototype.debug = function() {
      return false;
    };
    BufferedLogger$$1.prototype.warning = function() {
      return false;
    };
    BufferedLogger$$1.prototype.error = function() {
      return false;
    };
    BufferedLogger$$1.prototype.fatal = function() {
      return false;
    };
    BufferedLogger$$1.prototype.log = function(s$$41) {
      this.logContents.push(s$$41);
    };
    return BufferedLogger$$1;
  }();
  TypeScript$$33.BufferedLogger = BufferedLogger;
  TypeScript$$33.timeFunction = timeFunction;
  TypeScript$$33.stringToLiteral = stringToLiteral;
})(TypeScript || (TypeScript = {}));
var IOUtils;
(function(IOUtils$$1) {
  function createDirectoryStructure(ioHost$$5, dirName) {
    if (ioHost$$5.directoryExists(dirName)) {
      return;
    }
    var parentDirectory = ioHost$$5.dirName(dirName);
    if (parentDirectory != "") {
      createDirectoryStructure(ioHost$$5, parentDirectory);
    }
    ioHost$$5.createDirectory(dirName);
  }
  function createFileAndFolderStructure(ioHost$$6, fileName$$9, useUTF8$$2) {
    var path$$19 = ioHost$$6.resolvePath(fileName$$9);
    var dirName$$1 = ioHost$$6.dirName(path$$19);
    createDirectoryStructure(ioHost$$6, dirName$$1);
    return ioHost$$6.createFile(path$$19, useUTF8$$2);
  }
  function throwIOError(message$$22, error$$2) {
    var errorMessage = message$$22;
    if (error$$2 && error$$2.message) {
      errorMessage += " " + error$$2.message;
    }
    throw new Error(errorMessage);
  }
  IOUtils$$1.createFileAndFolderStructure = createFileAndFolderStructure;
  IOUtils$$1.throwIOError = throwIOError;
})(IOUtils || (IOUtils = {}));
var IO = function() {
  function getWindowsScriptHostIO() {
    function getStreamObject() {
      if (streamObjectPool.length > 0) {
        return streamObjectPool.pop();
      } else {
        return new ActiveXObject("ADODB.Stream");
      }
    }
    function releaseStreamObject(obj$$17) {
      streamObjectPool.push(obj$$17);
    }
    var fso = new ActiveXObject("Scripting.FileSystemObject");
    var streamObjectPool = [];
    var args$$17 = [];
    var i$$140 = 0;
    for (;i$$140 < WScript.Arguments.length;i$$140++) {
      args$$17[i$$140] = WScript.Arguments.Item(i$$140);
    }
    return{readFile:function(path$$20) {
      try {
        var streamObj = getStreamObject();
        streamObj.Open();
        streamObj.Type = 2;
        streamObj.Charset = "x-ansi";
        streamObj.LoadFromFile(path$$20);
        var bomChar = streamObj.ReadText(2);
        streamObj.Position = 0;
        if (bomChar.charCodeAt(0) == 254 && bomChar.charCodeAt(1) == 255 || bomChar.charCodeAt(0) == 255 && bomChar.charCodeAt(1) == 254) {
          streamObj.Charset = "unicode";
        } else {
          if (bomChar.charCodeAt(0) == 239 && bomChar.charCodeAt(1) == 187) {
            streamObj.Charset = "utf-8";
          }
        }
        var str$$13 = streamObj.ReadText(-1);
        streamObj.Close();
        releaseStreamObject(streamObj);
        return str$$13;
      } catch (err$$4) {
        IOUtils.throwIOError('Error reading file "' + path$$20 + '".', err$$4);
      }
    }, writeFile:function(path$$21, contents) {
      var file$$1 = this.createFile(path$$21);
      file$$1.Write(contents);
      file$$1.Close();
    }, fileExists:function(path$$22) {
      return fso.FileExists(path$$22);
    }, resolvePath:function(path$$23) {
      return fso.GetAbsolutePathName(path$$23);
    }, dirName:function(path$$24) {
      return fso.GetParentFolderName(path$$24);
    }, findFile:function(rootPath, partialFilePath) {
      var path$$25 = fso.GetAbsolutePathName(rootPath) + "/" + partialFilePath;
      for (;true;) {
        if (fso.FileExists(path$$25)) {
          try {
            var content$$6 = this.readFile(path$$25);
            return{content:content$$6, path:path$$25};
          } catch (err$$5) {
          }
        } else {
          rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));
          if (rootPath == "") {
            return null;
          } else {
            path$$25 = fso.BuildPath(rootPath, partialFilePath);
          }
        }
      }
    }, deleteFile:function(path$$26) {
      try {
        if (fso.FileExists(path$$26)) {
          fso.DeleteFile(path$$26, true);
        }
      } catch (e$$13) {
        IOUtils.throwIOError("Couldn't delete file '" + path$$26 + "'.", e$$13);
      }
    }, createFile:function(path$$27, useUTF8$$3) {
      try {
        var streamObj$$1 = getStreamObject();
        streamObj$$1.Charset = useUTF8$$3 ? "utf-8" : "x-ansi";
        streamObj$$1.Open();
        return{Write:function(str$$14) {
          streamObj$$1.WriteText(str$$14, 0);
        }, WriteLine:function(str$$15) {
          streamObj$$1.WriteText(str$$15, 1);
        }, Close:function() {
          try {
            streamObj$$1.SaveToFile(path$$27, 2);
          } catch (saveError) {
            IOUtils.throwIOError("Couldn't write to file '" + path$$27 + "'.", saveError);
          } finally {
            if (streamObj$$1.State != 0) {
              streamObj$$1.Close();
            }
            releaseStreamObject(streamObj$$1);
          }
        }};
      } catch (creationError) {
        IOUtils.throwIOError("Couldn't write to file '" + path$$27 + "'.", creationError);
      }
    }, directoryExists:function(path$$28) {
      return fso.FolderExists(path$$28);
    }, createDirectory:function(path$$29) {
      try {
        if (!this.directoryExists(path$$29)) {
          fso.CreateFolder(path$$29);
        }
      } catch (e$$14) {
        IOUtils.throwIOError("Couldn't create directory '" + path$$29 + "'.", e$$14);
      }
    }, dir:function(path$$30, spec, options$$8) {
      function filesInFolder(folder$$1, root) {
        var paths$$1 = [];
        var fc;
        if (options$$8.recursive) {
          fc = new Enumerator(folder$$1.subfolders);
          for (;!fc.atEnd();fc.moveNext()) {
            paths$$1 = paths$$1.concat(filesInFolder(fc.item(), root + "/" + fc.item().Name));
          }
        }
        fc = new Enumerator(folder$$1.files);
        for (;!fc.atEnd();fc.moveNext()) {
          if (!spec || fc.item().Name.match(spec)) {
            paths$$1.push(root + "/" + fc.item().Name);
          }
        }
        return paths$$1;
      }
      options$$8 = options$$8 || {};
      var folder = fso.GetFolder(path$$30);
      var paths = [];
      return filesInFolder(folder, path$$30);
    }, print:function(str$$16) {
      WScript.StdOut.Write(str$$16);
    }, printLine:function(str$$17) {
      WScript.Echo(str$$17);
    }, arguments:args$$17, stderr:WScript.StdErr, stdout:WScript.StdOut, watchFile:null, run:function(source$$4, filename$$10) {
      try {
        eval(source$$4);
      } catch (e$$15) {
        IOUtils.throwIOError("Error while executing file '" + filename$$10 + "'.", e$$15);
      }
    }, getExecutingFilePath:function() {
      return WScript.ScriptFullName;
    }, quit:function(exitCode) {
      if (typeof exitCode === "undefined") {
        exitCode = 0;
      }
      try {
        WScript.Quit(exitCode);
      } catch (e$$16) {
      }
    }};
  }
  function getNodeIO() {
    var _fs = require("fs");
    var _path = require("path");
    var _module = require("module");
    return{readFile:function(file$$2) {
      try {
        var buffer$$8 = _fs.readFileSync(file$$2);
        switch(buffer$$8[0]) {
          case 254:
            if (buffer$$8[1] == 255) {
              var i$$141 = 0;
              for (;i$$141 + 1 < buffer$$8.length;) {
                var temp$$17 = buffer$$8[i$$141];
                buffer$$8[i$$141] = buffer$$8[i$$141 + 1];
                buffer$$8[i$$141 + 1] = temp$$17;
                i$$141 += 2;
              }
              return buffer$$8.toString("ucs2", 2);
            }
            break;
          case 255:
            if (buffer$$8[1] == 254) {
              return buffer$$8.toString("ucs2", 2);
            }
            break;
          case 239:
            if (buffer$$8[1] == 187) {
              return buffer$$8.toString("utf8", 3);
            }
          ;
        }
        return buffer$$8.toString();
      } catch (e$$17) {
        IOUtils.throwIOError('Error reading file "' + file$$2 + '".', e$$17);
      }
    }, writeFile:_fs.writeFileSync, deleteFile:function(path$$31) {
      try {
        _fs.unlinkSync(path$$31);
      } catch (e$$18) {
        IOUtils.throwIOError("Couldn't delete file '" + path$$31 + "'.", e$$18);
      }
    }, fileExists:function(path$$32) {
      return _fs.existsSync(path$$32);
    }, createFile:function(path$$33, useUTF8$$4) {
      function mkdirRecursiveSync(path$$34) {
        var stats = _fs.statSync(path$$34);
        if (stats.isFile()) {
          IOUtils.throwIOError('"' + path$$34 + "\" exists but isn't a directory.", null);
        } else {
          if (stats.isDirectory()) {
            return;
          } else {
            mkdirRecursiveSync(_path.dirname(path$$34));
            _fs.mkdirSync(path$$34, 509);
          }
        }
      }
      mkdirRecursiveSync(_path.dirname(path$$33));
      try {
        var fd = _fs.openSync(path$$33, "w");
      } catch (e$$19) {
        IOUtils.throwIOError("Couldn't write to file '" + path$$33 + "'.", e$$19);
      }
      return{Write:function(str$$18) {
        _fs.writeSync(fd, str$$18);
      }, WriteLine:function(str$$19) {
        _fs.writeSync(fd, str$$19 + "\r\n");
      }, Close:function() {
        _fs.closeSync(fd);
        fd = null;
      }};
    }, dir:function dir(path$$35, spec$$1, options$$9) {
      function filesInFolder$$1(folder$$2) {
        var paths$$2 = [];
        var files = _fs.readdirSync(folder$$2);
        var i$$142 = 0;
        for (;i$$142 < files.length;i$$142++) {
          var stat = _fs.statSync(folder$$2 + "/" + files[i$$142]);
          if (options$$9.recursive && stat.isDirectory()) {
            paths$$2 = paths$$2.concat(filesInFolder$$1(folder$$2 + "/" + files[i$$142]));
          } else {
            if (stat.isFile() && (!spec$$1 || files[i$$142].match(spec$$1))) {
              paths$$2.push(folder$$2 + "/" + files[i$$142]);
            }
          }
        }
        return paths$$2;
      }
      options$$9 = options$$9 || {};
      return filesInFolder$$1(path$$35);
    }, createDirectory:function(path$$36) {
      try {
        if (!this.directoryExists(path$$36)) {
          _fs.mkdirSync(path$$36);
        }
      } catch (e$$20) {
        IOUtils.throwIOError("Couldn't create directory '" + path$$36 + "'.", e$$20);
      }
    }, directoryExists:function(path$$37) {
      return _fs.existsSync(path$$37) && _fs.lstatSync(path$$37).isDirectory();
    }, resolvePath:function(path$$38) {
      return _path.resolve(path$$38);
    }, dirName:function(path$$39) {
      return _path.dirname(path$$39);
    }, findFile:function(rootPath$$1, partialFilePath$$1) {
      var path$$40 = rootPath$$1 + "/" + partialFilePath$$1;
      for (;true;) {
        if (_fs.existsSync(path$$40)) {
          try {
            var content$$7 = this.readFile(path$$40);
            return{content:content$$7, path:path$$40};
          } catch (err$$6) {
          }
        } else {
          var parentPath$$1 = _path.resolve(rootPath$$1, "..");
          if (rootPath$$1 === parentPath$$1) {
            return null;
          } else {
            rootPath$$1 = parentPath$$1;
            path$$40 = _path.resolve(rootPath$$1, partialFilePath$$1);
          }
        }
      }
    }, print:function(str$$20) {
      process.stdout.write(str$$20);
    }, printLine:function(str$$21) {
      process.stdout.write(str$$21 + "\n");
    }, arguments:process.argv.slice(2), stderr:{Write:function(str$$22) {
      process.stderr.write(str$$22);
    }, WriteLine:function(str$$23) {
      process.stderr.write(str$$23 + "\n");
    }, Close:function() {
    }}, stdout:{Write:function(str$$24) {
      process.stdout.write(str$$24);
    }, WriteLine:function(str$$25) {
      process.stdout.write(str$$25 + "\n");
    }, Close:function() {
    }}, watchFile:function(filename$$11, callback$$28) {
      var firstRun = true;
      var processingChange = false;
      var fileChanged = function(curr, prev$$1) {
        if (!firstRun) {
          if (curr.mtime < prev$$1.mtime) {
            return;
          }
          _fs.unwatchFile(filename$$11, fileChanged);
          if (!processingChange) {
            processingChange = true;
            callback$$28(filename$$11);
            setTimeout(function() {
              processingChange = false;
            }, 100);
          }
        }
        firstRun = false;
        _fs.watchFile(filename$$11, {persistent:true, interval:500}, fileChanged);
      };
      fileChanged();
      return{filename:filename$$11, close:function() {
        _fs.unwatchFile(filename$$11, fileChanged);
      }};
    }, run:function(source$$5, filename$$12) {
      require.main.filename = filename$$12;
      require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(filename$$12)));
      require.main._compile(source$$5, filename$$12);
    }, getExecutingFilePath:function() {
      return process.mainModule.filename;
    }, quit:process.exit};
  }
  if (typeof ActiveXObject === "function") {
    return getWindowsScriptHostIO();
  } else {
    if (typeof require === "function") {
      return getNodeIO();
    } else {
      return null;
    }
  }
}();
var OptionsParser = function() {
  function OptionsParser$$1(host) {
    this.host = host;
    this.DEFAULT_SHORT_FLAG = "-";
    this.DEFAULT_LONG_FLAG = "--";
    this.unnamed = [];
    this.options = [];
  }
  OptionsParser$$1.prototype.findOption = function(arg$$10) {
    var i$$143 = 0;
    for (;i$$143 < this.options.length;i$$143++) {
      if (arg$$10 === this.options[i$$143].short || arg$$10 === this.options[i$$143].name) {
        return this.options[i$$143];
      }
    }
    return null;
  };
  OptionsParser$$1.prototype.printUsage = function() {
    this.host.printLine("Syntax:   tsc [options] [file ..]");
    this.host.printLine("");
    this.host.printLine("Examples: tsc hello.ts");
    this.host.printLine("          tsc --out foo.js foo.ts");
    this.host.printLine("          tsc @args.txt");
    this.host.printLine("");
    this.host.printLine("Options:");
    var output$$1 = [];
    var maxLength = 0;
    this.options = this.options.sort(function(a$$9, b$$15) {
      var aName = a$$9.name.toLowerCase();
      var bName = b$$15.name.toLowerCase();
      if (aName > bName) {
        return 1;
      } else {
        if (aName < bName) {
          return-1;
        } else {
          return 0;
        }
      }
    });
    var i$$144 = 0;
    for (;i$$144 < this.options.length;i$$144++) {
      var option = this.options[i$$144];
      if (option.experimental) {
        continue;
      }
      if (!option.usage) {
        break;
      }
      var usageString = "  ";
      var type$$61 = option.type ? " " + option.type.toUpperCase() : "";
      if (option.short) {
        usageString += this.DEFAULT_SHORT_FLAG + option.short + type$$61 + ", ";
      }
      usageString += this.DEFAULT_LONG_FLAG + option.name + type$$61;
      output$$1.push([usageString, option.usage]);
      if (usageString.length > maxLength) {
        maxLength = usageString.length;
      }
    }
    output$$1.push(["  @<file>", "Insert command line options and files from a file."]);
    i$$144 = 0;
    for (;i$$144 < output$$1.length;i$$144++) {
      this.host.printLine(output$$1[i$$144][0] + (new Array(maxLength - output$$1[i$$144][0].length + 3)).join(" ") + output$$1[i$$144][1]);
    }
  };
  OptionsParser$$1.prototype.option = function(name$$90, config$$1, short) {
    if (!config$$1) {
      config$$1 = short;
      short = null;
    }
    config$$1.name = name$$90;
    config$$1.short = short;
    config$$1.flag = false;
    this.options.push(config$$1);
  };
  OptionsParser$$1.prototype.flag = function(name$$91, config$$2, short$$1) {
    if (!config$$2) {
      config$$2 = short$$1;
      short$$1 = null;
    }
    config$$2.name = name$$91;
    config$$2.short = short$$1;
    config$$2.flag = true;
    this.options.push(config$$2);
  };
  OptionsParser$$1.prototype.parseString = function(argString) {
    function peek() {
      return tokens[position$$4];
    }
    function consume() {
      return tokens[position$$4++];
    }
    function consumeQuotedString() {
      var value$$42 = "";
      consume();
      var token$$8 = peek();
      for (;token$$8 && token$$8 !== '"';) {
        consume();
        value$$42 += token$$8;
        token$$8 = peek();
      }
      consume();
      return value$$42;
    }
    var position$$4 = 0;
    var tokens = argString.match(/\s+|"|[^\s"]+/g);
    var args$$18 = [];
    var currentArg = "";
    for (;position$$4 < tokens.length;) {
      var token$$7 = peek();
      if (token$$7 === '"') {
        currentArg += consumeQuotedString();
      } else {
        if (token$$7.match(/\s/)) {
          if (currentArg.length > 0) {
            args$$18.push(currentArg);
            currentArg = "";
          }
          consume();
        } else {
          consume();
          currentArg += token$$7;
        }
      }
    }
    if (currentArg.length > 0) {
      args$$18.push(currentArg);
    }
    this.parse(args$$18);
  };
  OptionsParser$$1.prototype.parse = function(args$$19) {
    function consume$$1() {
      return args$$19[position$$5++];
    }
    var position$$5 = 0;
    for (;position$$5 < args$$19.length;) {
      var current$$4 = consume$$1();
      var match$$3 = current$$4.match(/^(--?|@)(.*)/);
      var value$$43 = null;
      if (match$$3) {
        if (match$$3[1] === "@") {
          this.parseString(this.host.readFile(match$$3[2]));
        } else {
          var arg$$11 = match$$3[2];
          var option$$1 = this.findOption(arg$$11);
          if (option$$1 === null) {
            this.host.printLine("Unknown option '" + arg$$11 + "'");
            this.host.printLine("Use the '--help' flag to see options");
          } else {
            if (!option$$1.flag) {
              value$$43 = consume$$1();
            }
            option$$1.set(value$$43);
          }
        }
      } else {
        this.unnamed.push(current$$4);
      }
    }
  };
  return OptionsParser$$1;
}();
var CommandLineHost = function() {
  function CommandLineHost$$1(compilationSettings$$1) {
    this.compilationSettings = compilationSettings$$1;
    this.pathMap = {};
    this.resolvedPaths = {};
  }
  CommandLineHost$$1.prototype.getPathIdentifier = function(path$$41) {
    return this.compilationSettings.useCaseSensitiveFileResolution ? path$$41 : path$$41.toLocaleUpperCase();
  };
  CommandLineHost$$1.prototype.isResolved = function(path$$42) {
    return this.resolvedPaths[this.getPathIdentifier(this.pathMap[path$$42])] != undefined;
  };
  CommandLineHost$$1.prototype.resolveCompilationEnvironment = function(preEnv, resolver, traceDependencies) {
    var _this$$21 = this;
    var resolvedEnv = new TypeScript.CompilationEnvironment(preEnv.compilationSettings, preEnv.ioHost);
    var nCode = preEnv.code.length;
    var path$$43 = "";
    var postResolutionError = function(errorFile, errorMessage$$1) {
      TypeScript.CompilerDiagnostics.debugPrint("Could not resolve file '" + errorFile + "'" + (errorMessage$$1 == "" ? "" : ": " + errorMessage$$1));
    };
    var resolutionDispatcher$$1 = {postResolutionError:postResolutionError, postResolution:function(path$$44, code$$10) {
      var pathId = _this$$21.getPathIdentifier(path$$44);
      if (!_this$$21.resolvedPaths[pathId]) {
        resolvedEnv.code.push(code$$10);
        _this$$21.resolvedPaths[pathId] = true;
      }
    }};
    var i$$145 = 0;
    for (;i$$145 < nCode;i$$145++) {
      path$$43 = TypeScript.switchToForwardSlashes(preEnv.ioHost.resolvePath(preEnv.code[i$$145].path));
      this.pathMap[preEnv.code[i$$145].path] = path$$43;
      resolver.resolveCode(path$$43, "", false, resolutionDispatcher$$1);
    }
    return resolvedEnv;
  };
  return CommandLineHost$$1;
}();
var BatchCompiler = function() {
  function BatchCompiler$$1(ioHost$$7) {
    this.ioHost = ioHost$$7;
    this.resolvedEnvironment = null;
    this.hasResolveErrors = false;
    this.compilerVersion = "0.8.2.0";
    this.printedVersion = false;
    this.compilationSettings = new TypeScript.CompilationSettings;
    this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);
  }
  BatchCompiler$$1.prototype.resolve = function() {
    var resolver$$1 = new TypeScript.CodeResolver(this.compilationEnvironment);
    var commandLineHost = new CommandLineHost(this.compilationSettings);
    var ret$$2 = commandLineHost.resolveCompilationEnvironment(this.compilationEnvironment, resolver$$1, true);
    this.hasResolveErrors = false;
    var i$$146 = 0;
    for (;i$$146 < this.compilationEnvironment.code.length;i$$146++) {
      if (!commandLineHost.isResolved(this.compilationEnvironment.code[i$$146].path)) {
        this.hasResolveErrors = true;
        var path$$45 = this.compilationEnvironment.code[i$$146].path;
        if (!TypeScript.isSTRFile(path$$45) && !TypeScript.isDSTRFile(path$$45) && !TypeScript.isTSFile(path$$45) && !TypeScript.isDTSFile(path$$45)) {
          this.ioHost.stderr.WriteLine('Unknown extension for file: "' + path$$45 + '". Only .ts and .d.ts extensions are allowed.');
        } else {
          this.ioHost.stderr.WriteLine('Error reading file "' + path$$45 + '": File not found');
        }
      }
    }
    return ret$$2;
  };
  BatchCompiler$$1.prototype.compile = function() {
    var _this$$22 = this;
    var compiler$$3;
    compiler$$3 = new TypeScript.TypeScriptCompiler(this.ioHost.stderr, new TypeScript.NullLogger, this.compilationSettings);
    compiler$$3.setErrorOutput(this.ioHost.stderr);
    compiler$$3.setErrorCallback(function(minChar$$37, charLen$$2, message$$23, unitIndex$$15) {
      compiler$$3.errorReporter.hasErrors = true;
      var fname$$9 = _this$$22.resolvedEnvironment.code[unitIndex$$15].path;
      var lineCol$$6 = {line:-1, col:-1};
      compiler$$3.parser.getSourceLineCol(lineCol$$6, minChar$$37);
      var msg$$4 = fname$$9 + " (" + lineCol$$6.line + "," + (lineCol$$6.col + 1) + "): " + message$$23;
      if (_this$$22.compilationSettings.errorRecovery) {
        _this$$22.ioHost.stderr.WriteLine(msg$$4);
      } else {
        throw new SyntaxError(msg$$4);
      }
    });
    if (this.compilationSettings.emitComments) {
      compiler$$3.emitCommentsToOutput();
    }
    var consumeUnit = function(code$$11, addAsResident) {
      try {
        if (!_this$$22.compilationSettings.resolve) {
          code$$11.content = _this$$22.ioHost.readFile(code$$11.path);
          if (_this$$22.compilationSettings.generateDeclarationFiles) {
            TypeScript.CompilerDiagnostics.assert(code$$11.referencedFiles == null, "With no resolve option, referenced files need to null");
            code$$11.referencedFiles = TypeScript.getReferencedFiles(code$$11);
          }
        }
        if (code$$11.content) {
          if (_this$$22.compilationSettings.parseOnly) {
            compiler$$3.parseUnit(code$$11.content, code$$11.path);
          } else {
            if (_this$$22.compilationSettings.errorRecovery) {
              compiler$$3.parser.setErrorRecovery(_this$$22.ioHost.stderr);
            }
            compiler$$3.addUnit(code$$11.content, code$$11.path, addAsResident, code$$11.referencedFiles);
          }
        }
      } catch (err$$7) {
        compiler$$3.errorReporter.hasErrors = true;
        _this$$22.ioHost.stderr.WriteLine(err$$7.message);
      }
    };
    var iCode = 0;
    for (;iCode < this.resolvedEnvironment.code.length;iCode++) {
      if (!this.compilationSettings.parseOnly || iCode > 0) {
        consumeUnit(this.resolvedEnvironment.code[iCode], false);
      }
    }
    var emitterIOHost = {createFile:function(fileName$$10, useUTF8$$5) {
      return IOUtils.createFileAndFolderStructure(_this$$22.ioHost, fileName$$10, useUTF8$$5);
    }, directoryExists:this.ioHost.directoryExists, fileExists:this.ioHost.fileExists, resolvePath:this.ioHost.resolvePath};
    try {
      if (!this.compilationSettings.parseOnly) {
        compiler$$3.typeCheck();
        compiler$$3.emit(emitterIOHost);
        compiler$$3.emitDeclarations();
      } else {
        compiler$$3.emitAST(emitterIOHost);
      }
    } catch (err$$8) {
      compiler$$3.errorReporter.hasErrors = true;
      if (err$$8.message != "EmitError") {
        throw err$$8;
      }
    }
    return compiler$$3.errorReporter.hasErrors;
  };
  BatchCompiler$$1.prototype.run = function() {
    var i$$147 = 0;
    for (;i$$147 < this.compilationEnvironment.code.length;i$$147++) {
      var unit = this.compilationEnvironment.code[i$$147];
      var outputFileName = unit.path;
      if (TypeScript.isTSFile(outputFileName)) {
        outputFileName = outputFileName.replace(/\.ts$/, ".js");
      } else {
        if (TypeScript.isSTRFile(outputFileName)) {
          outputFileName = outputFileName.replace(/\.str$/, ".js");
        }
      }
      if (this.ioHost.fileExists(outputFileName)) {
        var unitRes = this.ioHost.readFile(outputFileName);
        this.ioHost.run(unitRes, outputFileName);
      }
    }
  };
  BatchCompiler$$1.prototype.batchCompile = function() {
    var _this$$23 = this;
    TypeScript.CompilerDiagnostics.diagnosticWriter = {Alert:function(s$$42) {
      _this$$23.ioHost.printLine(s$$42);
    }};
    var code$$12;
    var opts$$1 = new OptionsParser(this.ioHost);
    opts$$1.option("out", {usage:"Concatenate and emit output to single file | Redirect output structure to the directory", type:"file|directory", set:function(str$$26) {
      _this$$23.compilationSettings.outputOption = str$$26;
    }});
    opts$$1.option("style", {usage:'Select style checking options (examples --style requireSemi:off or --style "eqeqeq;bitwise:off")', experimental:true, set:function(str$$27) {
      _this$$23.compilationSettings.setStyleOptions(str$$27);
    }});
    opts$$1.flag("sourcemap", {usage:"Generates corresponding .map file", set:function() {
      _this$$23.compilationSettings.mapSourceFiles = true;
    }});
    opts$$1.flag("declaration", {usage:"Generates corresponding .d.ts file", set:function() {
      _this$$23.compilationSettings.generateDeclarationFiles = true;
    }});
    if (this.ioHost.watchFile) {
      opts$$1.flag("watch", {usage:"Watch output files", set:function() {
        _this$$23.compilationSettings.watch = true;
      }}, "w");
    }
    opts$$1.flag("exec", {usage:"Execute the script after compilation", set:function() {
      _this$$23.compilationSettings.exec = true;
    }}, "e");
    opts$$1.flag("parse", {usage:"Parse only", experimental:true, set:function() {
      _this$$23.compilationSettings.parseOnly = true;
    }});
    opts$$1.flag("minw", {usage:"Minimize whitespace", experimental:true, set:function() {
      _this$$23.compilationSettings.minWhitespace = true;
    }}, "mw");
    opts$$1.flag("const", {usage:"Propagate constants to emitted code", experimental:true, set:function() {
      _this$$23.compilationSettings.propagateConstants = true;
    }});
    opts$$1.flag("errorrecovery", {usage:"Enable error recovery", experimental:true, set:function() {
      _this$$23.compilationSettings.errorRecovery = true;
    }}, "er");
    opts$$1.flag("comments", {usage:"Emit comments to output", set:function() {
      _this$$23.compilationSettings.emitComments = true;
    }}, "c");
    opts$$1.flag("cflow", {usage:"Control flow", experimental:true, set:function() {
      _this$$23.compilationSettings.controlFlow = true;
    }});
    opts$$1.flag("cflowp", {usage:"Print control flow", experimental:true, set:function() {
      _this$$23.compilationSettings.controlFlow = true;
      _this$$23.compilationSettings.printControlFlow = true;
    }});
    opts$$1.flag("cflowu", {usage:"Print Use Def control flow", experimental:true, set:function() {
      _this$$23.compilationSettings.controlFlow = true;
      _this$$23.compilationSettings.controlFlowUseDef = true;
    }});
    opts$$1.flag("noerroronwith", {usage:"Allow with statements", experimental:true, set:function() {
      _this$$23.compilationSettings.errorOnWith = false;
    }});
    opts$$1.flag("noresolve", {usage:"Skip resolution and preprocessing", experimental:true, set:function() {
      _this$$23.compilationSettings.resolve = false;
      _this$$23.compilationSettings.preprocess = false;
    }});
    opts$$1.flag("debug", {usage:"Print debug output", experimental:true, set:function() {
      TypeScript.CompilerDiagnostics.debug = true;
    }});
    opts$$1.flag("canCallDefinitionSignature", {usage:"Allows you to call the definition signature of an overload group", experimental:true, set:function() {
      _this$$23.compilationSettings.canCallDefinitionSignature = true;
    }});
    opts$$1.flag("nooptimizemodules", {usage:"Do not optimize module codegen", experimental:true, set:function() {
      TypeScript.optimizeModuleCodeGen = false;
    }});
    opts$$1.flag("nolib", {usage:"Do not include a default lib.d.ts with global declarations", set:function() {
      _this$$23.compilationSettings.useDefaultLib = false;
    }});
    opts$$1.flag("inferProperties", {usage:"Infer class properties from top-level assignments to 'this'", experimental:true, set:function() {
      _this$$23.compilationSettings.inferPropertiesFromThisAssignment = true;
    }});
    opts$$1.option("target", {usage:'Specify ECMAScript target version: "ES3" (default), or "ES5"', type:"VER", set:function(type$$62) {
      type$$62 = type$$62.toLowerCase();
      if (type$$62 === "es3") {
        _this$$23.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES3;
      } else {
        if (type$$62 === "es5") {
          _this$$23.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES5;
        } else {
          _this$$23.ioHost.printLine("ECMAScript target version '" + type$$62 + "' not supported.  Using default 'ES3' code generation");
        }
      }
    }});
    opts$$1.option("module", {usage:'Specify module code generation: "commonjs" (default) or "amd"', type:"kind", set:function(type$$63) {
      type$$63 = type$$63.toLowerCase();
      if (type$$63 === "commonjs" || type$$63 === "node") {
        TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;
      } else {
        if (type$$63 === "amd") {
          TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Asynchronous;
        } else {
          _this$$23.ioHost.printLine("Module code generation '" + type$$63 + "' not supported.  Using default 'commonjs' code generation");
        }
      }
    }});
    var printedUsage = false;
    opts$$1.flag("help", {usage:"Print this message", set:function() {
      _this$$23.printVersion();
      opts$$1.printUsage();
      printedUsage = true;
    }}, "h");
    opts$$1.flag("useCaseSensitiveFileResolution", {usage:"Force file resolution to be case sensitive", experimental:true, set:function() {
      _this$$23.compilationSettings.useCaseSensitiveFileResolution = true;
    }});
    opts$$1.flag("version", {usage:"Print the compiler's version: " + this.compilerVersion, set:function() {
      _this$$23.printVersion();
    }}, "v");
    opts$$1.parse(this.ioHost.arguments);
    if (this.compilationSettings.useDefaultLib) {
      var compilerFilePath = this.ioHost.getExecutingFilePath();
      var binDirPath = this.ioHost.dirName(compilerFilePath);
      var libStrPath = this.ioHost.resolvePath(binDirPath + "/lib.d.ts");
      code$$12 = new TypeScript.SourceUnit(libStrPath, null);
      this.compilationEnvironment.code.push(code$$12);
    }
    var i$$148 = 0;
    for (;i$$148 < opts$$1.unnamed.length;i$$148++) {
      code$$12 = new TypeScript.SourceUnit(opts$$1.unnamed[i$$148], null);
      this.compilationEnvironment.code.push(code$$12);
    }
    if (this.compilationEnvironment.code.length == (this.compilationSettings.useDefaultLib ? 1 : 0)) {
      if (!printedUsage && !this.printedVersion) {
        this.printVersion();
        opts$$1.printUsage();
        this.ioHost.quit(1);
      }
      return;
    }
    var sourceFiles = [];
    if (this.compilationSettings.watch) {
      sourceFiles = this.compilationEnvironment.code.slice(0);
    }
    this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;
    var hasCompileErrors = this.compile();
    var hasErrors = hasCompileErrors || this.hasResolveErrors;
    if (!hasErrors) {
      if (this.compilationSettings.exec) {
        this.run();
      }
    }
    if (this.compilationSettings.watch) {
      this.watchFiles(sourceFiles);
    } else {
      this.ioHost.quit(hasErrors ? 1 : 0);
    }
  };
  BatchCompiler$$1.prototype.printVersion = function() {
    if (!this.printedVersion) {
      this.ioHost.printLine("Version " + this.compilerVersion);
      this.printedVersion = true;
    }
  };
  BatchCompiler$$1.prototype.watchFiles = function(soruceFiles) {
    var _this$$24 = this;
    if (!this.ioHost.watchFile) {
      this.ioHost.printLine("Error: Current host does not support -w[atch] option");
      return;
    }
    var resolvedFiles = [];
    var watchers = {};
    var addWatcher = function(filename$$13) {
      if (!watchers[filename$$13]) {
        var watcher = _this$$24.ioHost.watchFile(filename$$13, onWatchedFileChange);
        watchers[filename$$13] = watcher;
      } else {
        throw new Error("Cannot watch file, it is already watched.");
      }
    };
    var removeWatcher = function(filename$$14) {
      if (watchers[filename$$14]) {
        watchers[filename$$14].close();
        delete watchers[filename$$14];
      } else {
        throw new Error("Cannot stop watching file, it is not being watched.");
      }
    };
    var onWatchedFileChange = function() {
      _this$$24.compilationEnvironment.code = soruceFiles;
      _this$$24.resolvedEnvironment = _this$$24.compilationSettings.resolve ? _this$$24.resolve() : _this$$24.compilationEnvironment;
      var oldFiles = resolvedFiles;
      var newFiles = [];
      _this$$24.resolvedEnvironment.code.forEach(function(sf) {
        return newFiles.push(sf.path);
      });
      newFiles = newFiles.sort();
      var i$$149 = 0;
      var j$$21 = 0;
      for (;i$$149 < oldFiles.length && j$$21 < newFiles.length;) {
        var compareResult = oldFiles[i$$149].localeCompare(newFiles[j$$21]);
        if (compareResult == 0) {
          i$$149++;
          j$$21++;
        } else {
          if (compareResult < 0) {
            removeWatcher(oldFiles[i$$149]);
            i$$149++;
          } else {
            addWatcher(newFiles[j$$21]);
            j$$21++;
          }
        }
      }
      var k$$15 = i$$149;
      for (;k$$15 < oldFiles.length;k$$15++) {
        removeWatcher(oldFiles[k$$15]);
      }
      k$$15 = j$$21;
      for (;k$$15 < newFiles.length;k$$15++) {
        addWatcher(newFiles[k$$15]);
      }
      resolvedFiles = newFiles;
      _this$$24.ioHost.printLine("");
      _this$$24.ioHost.printLine("Recompiling (" + new Date + "): ");
      resolvedFiles.forEach(function(f$$1) {
        return _this$$24.ioHost.printLine("    " + f$$1);
      });
      var hasCompileErrors$$1 = _this$$24.compile();
      var hasErrors$$1 = hasCompileErrors$$1 || _this$$24.hasResolveErrors;
      if (!hasErrors$$1) {
        if (_this$$24.compilationSettings.exec) {
          _this$$24.run();
        }
      }
    };
    this.ioHost.stderr = this.ioHost.stdout;
    this.resolvedEnvironment.code.forEach(function(sf$$1) {
      resolvedFiles.push(sf$$1.path);
      addWatcher(sf$$1.path);
    });
    resolvedFiles.sort();
  };
  return BatchCompiler$$1;
}();
var completed = 0;
var benchmarks = BenchmarkSuite.CountBenchmarks();
var success = true;
var latencyBenchmarks = ["Splay", "Mandreel"];
var skipBenchmarks = typeof skipBenchmarks === "undefined" ? [] : skipBenchmarks;
function ShowBox(name$$92) {
  var box = document.getElementById("Box-" + name$$92);
  box.style.visibility = "visible";
  var bar = document.getElementById("progress-bar").style.width = "" + ++completed / benchmarks * 100 + "%";
  latencyBenchmarks.forEach(function(entry$$3) {
    if (name$$92.valueOf() === entry$$3.valueOf()) {
      var box1 = document.getElementById("Box-" + name$$92 + "Latency");
      box1.style.visibility = "visible";
    }
  });
}
function AddResult(name$$93, result$$41) {
  console.log(name$$93 + ": " + result$$41);
  var box$$1 = document.getElementById("Result-" + name$$93);
  box$$1.innerHTML = result$$41;
}
function AddError(name$$94, error$$3) {
  console.log(name$$94 + ": " + error$$3.message);
  if (error$$3 == "TypedArrayUnsupported") {
    AddResult(name$$94, "<b>Unsupported</b>");
  } else {
    if (error$$3 == "PerformanceNowUnsupported") {
      AddResult(name$$94, "<b>Timer error</b>");
    } else {
      AddResult(name$$94, "<b>Error</b>");
    }
  }
  success = false;
}
function AddScore(score$$2) {
  var status$$1 = document.getElementById("main-banner");
  if (success) {
    status$$1.innerHTML = "Octane Score: " + score$$2;
  } else {
    status$$1.innerHTML = "Octane Score (incomplete): " + score$$2;
  }
  document.getElementById("progress-bar-container").style.visibility = "hidden";
  document.getElementById("bottom-text").style.visibility = "visible";
  document.getElementById("inside-anchor").removeChild(document.getElementById("bar-appendix"));
  document.getElementById("alertbox").style.visibility = "hidden";
}
function Run() {
  document.getElementById("main-banner").innerHTML = "Running Octane...";
  document.getElementById("bar-appendix").innerHTML = '<br/><div class="progress progress-striped" id="progress-bar-container" style="visibility:hidden"><div class="bar"style="width: 0%;" id="progress-bar"></div></div>';
  var anchor = document.getElementById("run-octane");
  var parent$$73 = document.getElementById("main-container");
  parent$$73.appendChild(document.getElementById("inside-anchor"));
  parent$$73.removeChild(anchor);
  document.getElementById("startup-text").innerHTML = "";
  document.getElementById("progress-bar-container").style.visibility = "visible";
  BenchmarkSuite.RunSuites({NotifyStart:ShowBox, NotifyError:AddError, NotifyResult:AddResult, NotifyScore:AddScore}, skipBenchmarks);
}
function CheckCompatibility() {
  var hasTypedArrays = typeof Uint8Array != "undefined" && typeof Float64Array != "undefined" && typeof(new Uint8Array(0)).subarray != "undefined";
  if (!hasTypedArrays) {
    console.log("Typed Arrays not supported");
    document.getElementById("alertbox").style.display = "block";
  }
  if (window.document.URL.indexOf("skip_zlib=1") >= 0) {
    skipBenchmarks.push("zlib");
  }
  if (window.document.URL.indexOf("auto=1") >= 0) {
    Run();
  }
}
function Load() {
  setTimeout(CheckCompatibility, 200);
}

}

JAM.stopProfile('load');
