
JAM.startProfile('load');
function v1409() {
  function v1408(soruceFiles) {
    function v1407(sf$$1) {
      var v1410 = sf$$1.path;
      resolvedFiles.push(v1410);
      var v1411 = sf$$1.path;
      addWatcher(v1411);
      return;
    }
    function onWatchedFileChange() {
      function v1406(f$$1) {
        var v1412 = _this$$24.ioHost;
        var v1413 = "    " + f$$1;
        return v1412.printLine(v1413);
      }
      function v1405(sf) {
        var v1414 = sf.path;
        return newFiles.push(v1414);
      }
      var v1415 = _this$$24.compilationEnvironment;
      v1415.code = soruceFiles;
      var v1416 = _this$$24;
      var v12381;
      var v22786 = _this$$24.compilationSettings;
      var v18639 = v22786.resolve;
      if (v18639) {
        v12381 = _this$$24.resolve();
      } else {
        v12381 = _this$$24.compilationEnvironment;
      }
      v1416.resolvedEnvironment = v12381;
      var oldFiles = resolvedFiles;
      var newFiles = [];
      var v12382 = _this$$24.resolvedEnvironment;
      var v1417 = v12382.code;
      v1417.forEach(v1405);
      newFiles = newFiles.sort();
      var i$$149 = 0;
      var j$$21 = 0;
      var v18640 = oldFiles.length;
      var v12383 = i$$149 < v18640;
      if (v12383) {
        var v18641 = newFiles.length;
        v12383 = j$$21 < v18641;
      }
      var v1424 = v12383;
      for (;v1424;) {
        var v1418 = oldFiles[i$$149];
        var v1419 = newFiles[j$$21];
        var compareResult = v1418.localeCompare(v1419);
        var v1423 = compareResult == 0;
        if (v1423) {
          i$$149++;
          j$$21++;
        } else {
          var v1422 = compareResult < 0;
          if (v1422) {
            var v1420 = oldFiles[i$$149];
            removeWatcher(v1420);
            i$$149++;
          } else {
            var v1421 = newFiles[j$$21];
            addWatcher(v1421);
            j$$21++;
          }
        }
        var v18642 = oldFiles.length;
        var v12384 = i$$149 < v18642;
        if (v12384) {
          var v18643 = newFiles.length;
          v12384 = j$$21 < v18643;
        }
        v1424 = v12384;
      }
      var k$$15 = i$$149;
      var v12385 = oldFiles.length;
      var v1426 = k$$15 < v12385;
      for (;v1426;) {
        var v1425 = oldFiles[k$$15];
        removeWatcher(v1425);
        k$$15++;
        var v12386 = oldFiles.length;
        v1426 = k$$15 < v12386;
      }
      k$$15 = j$$21;
      var v12387 = newFiles.length;
      var v1428 = k$$15 < v12387;
      for (;v1428;) {
        var v1427 = newFiles[k$$15];
        addWatcher(v1427);
        k$$15++;
        var v12388 = newFiles.length;
        v1428 = k$$15 < v12388;
      }
      resolvedFiles = newFiles;
      var v1429 = _this$$24.ioHost;
      v1429.printLine("");
      var v1430 = _this$$24.ioHost;
      var v18644 = new Date;
      var v12389 = "Recompiling (" + v18644;
      var v1431 = v12389 + "): ";
      v1430.printLine(v1431);
      resolvedFiles.forEach(v1406);
      var hasCompileErrors$$1 = _this$$24.compile();
      var v1432 = hasCompileErrors$$1;
      var v12390 = !v1432;
      if (v12390) {
        v1432 = _this$$24.hasResolveErrors;
      }
      var hasErrors$$1 = v1432;
      var v1434 = !hasErrors$$1;
      if (v1434) {
        var v12391 = _this$$24.compilationSettings;
        var v1433 = v12391.exec;
        if (v1433) {
          _this$$24.run();
        }
      }
      return;
    }
    function removeWatcher(filename$$14) {
      var v1436 = watchers[filename$$14];
      if (v1436) {
        var v1435 = watchers[filename$$14];
        v1435.close();
        delete watchers[filename$$14];
      } else {
        throw new Error("Cannot stop watching file, it is not being watched.");
      }
      return;
    }
    function addWatcher(filename$$13) {
      var v12392 = watchers[filename$$13];
      var v1438 = !v12392;
      if (v1438) {
        var v1437 = _this$$24.ioHost;
        var watcher = v1437.watchFile(filename$$13, onWatchedFileChange);
        watchers[filename$$13] = watcher;
      } else {
        throw new Error("Cannot watch file, it is already watched.");
      }
      return;
    }
    var _this$$24 = this;
    var v18645 = this.ioHost;
    var v12393 = v18645.watchFile;
    var v1440 = !v12393;
    if (v1440) {
      var v1439 = this.ioHost;
      v1439.printLine("Error: Current host does not support -w[atch] option");
      return;
    }
    var resolvedFiles = [];
    var watchers = {};
    var v1441 = this.ioHost;
    var v12394 = this.ioHost;
    v1441.stderr = v12394.stdout;
    var v12395 = this.resolvedEnvironment;
    var v1442 = v12395.code;
    v1442.forEach(v1407);
    resolvedFiles.sort();
    return;
  }
  function v1404() {
    var v12396 = this.printedVersion;
    var v1445 = !v12396;
    if (v1445) {
      var v1443 = this.ioHost;
      var v12397 = this.compilerVersion;
      var v1444 = "Version " + v12397;
      v1443.printLine(v1444);
      this.printedVersion = true;
    }
    return;
  }
  function v1403() {
    function v1402() {
      _this$$23.printVersion();
      return;
    }
    function v1401() {
      var v1446 = _this$$23.compilationSettings;
      v1446.useCaseSensitiveFileResolution = true;
      return;
    }
    function v1400() {
      _this$$23.printVersion();
      opts$$1.printUsage();
      printedUsage = true;
      return;
    }
    function v1399(type$$63) {
      type$$63 = type$$63.toLowerCase();
      var v12398 = type$$63 === "commonjs";
      var v18646 = !v12398;
      if (v18646) {
        v12398 = type$$63 === "node";
      }
      var v1452 = v12398;
      if (v1452) {
        var v1447 = TypeScript.ModuleGenTarget;
        TypeScript.moduleGenTarget = v1447.Synchronous;
      } else {
        var v1451 = type$$63 === "amd";
        if (v1451) {
          var v1448 = TypeScript.ModuleGenTarget;
          TypeScript.moduleGenTarget = v1448.Asynchronous;
        } else {
          var v1449 = _this$$23.ioHost;
          var v12399 = "Module code generation '" + type$$63;
          var v1450 = v12399 + "' not supported.  Using default 'commonjs' code generation";
          v1449.printLine(v1450);
        }
      }
      return;
    }
    function v1398(type$$62) {
      type$$62 = type$$62.toLowerCase();
      var v1458 = type$$62 === "es3";
      if (v1458) {
        var v1453 = _this$$23.compilationSettings;
        var v12400 = TypeScript.CodeGenTarget;
        v1453.codeGenTarget = v12400.ES3;
      } else {
        var v1457 = type$$62 === "es5";
        if (v1457) {
          var v1454 = _this$$23.compilationSettings;
          var v12401 = TypeScript.CodeGenTarget;
          v1454.codeGenTarget = v12401.ES5;
        } else {
          var v1455 = _this$$23.ioHost;
          var v12402 = "ECMAScript target version '" + type$$62;
          var v1456 = v12402 + "' not supported.  Using default 'ES3' code generation";
          v1455.printLine(v1456);
        }
      }
      return;
    }
    function v1397() {
      var v1459 = _this$$23.compilationSettings;
      v1459.inferPropertiesFromThisAssignment = true;
      return;
    }
    function v1396() {
      var v1460 = _this$$23.compilationSettings;
      v1460.useDefaultLib = false;
      return;
    }
    function v1395() {
      TypeScript.optimizeModuleCodeGen = false;
      return;
    }
    function v1394() {
      var v1461 = _this$$23.compilationSettings;
      v1461.canCallDefinitionSignature = true;
      return;
    }
    function v1393() {
      var v1462 = TypeScript.CompilerDiagnostics;
      v1462.debug = true;
      return;
    }
    function v1392() {
      var v1463 = _this$$23.compilationSettings;
      v1463.resolve = false;
      var v1464 = _this$$23.compilationSettings;
      v1464.preprocess = false;
      return;
    }
    function v1391() {
      var v1465 = _this$$23.compilationSettings;
      v1465.errorOnWith = false;
      return;
    }
    function v1390() {
      var v1466 = _this$$23.compilationSettings;
      v1466.controlFlow = true;
      var v1467 = _this$$23.compilationSettings;
      v1467.controlFlowUseDef = true;
      return;
    }
    function v1389() {
      var v1468 = _this$$23.compilationSettings;
      v1468.controlFlow = true;
      var v1469 = _this$$23.compilationSettings;
      v1469.printControlFlow = true;
      return;
    }
    function v1388() {
      var v1470 = _this$$23.compilationSettings;
      v1470.controlFlow = true;
      return;
    }
    function v1387() {
      var v1471 = _this$$23.compilationSettings;
      v1471.emitComments = true;
      return;
    }
    function v1386() {
      var v1472 = _this$$23.compilationSettings;
      v1472.errorRecovery = true;
      return;
    }
    function v1385() {
      var v1473 = _this$$23.compilationSettings;
      v1473.propagateConstants = true;
      return;
    }
    function v1384() {
      var v1474 = _this$$23.compilationSettings;
      v1474.minWhitespace = true;
      return;
    }
    function v1383() {
      var v1475 = _this$$23.compilationSettings;
      v1475.parseOnly = true;
      return;
    }
    function v1382() {
      var v1476 = _this$$23.compilationSettings;
      v1476.exec = true;
      return;
    }
    function v1381() {
      var v1477 = _this$$23.compilationSettings;
      v1477.watch = true;
      return;
    }
    function v1380() {
      var v1478 = _this$$23.compilationSettings;
      v1478.generateDeclarationFiles = true;
      return;
    }
    function v1379() {
      var v1479 = _this$$23.compilationSettings;
      v1479.mapSourceFiles = true;
      return;
    }
    function v1378(str$$27) {
      var v1480 = _this$$23.compilationSettings;
      v1480.setStyleOptions(str$$27);
      return;
    }
    function v1377(str$$26) {
      var v1481 = _this$$23.compilationSettings;
      v1481.outputOption = str$$26;
      return;
    }
    function v1376(s$$42) {
      var v1482 = _this$$23.ioHost;
      v1482.printLine(s$$42);
      return;
    }
    var _this$$23 = this;
    var v1483 = TypeScript.CompilerDiagnostics;
    v1483.diagnosticWriter = {Alert:v1376};
    var code$$12;
    var v1484 = this.ioHost;
    var opts$$1 = new OptionsParser(v1484);
    var v1485 = {usage:"Concatenate and emit output to single file | Redirect output structure to the directory", type:"file|directory", set:v1377};
    opts$$1.option("out", v1485);
    var v1486 = {usage:'Select style checking options (examples --style requireSemi:off or --style "eqeqeq;bitwise:off")', experimental:true, set:v1378};
    opts$$1.option("style", v1486);
    var v1487 = {usage:"Generates corresponding .map file", set:v1379};
    opts$$1.flag("sourcemap", v1487);
    var v1488 = {usage:"Generates corresponding .d.ts file", set:v1380};
    opts$$1.flag("declaration", v1488);
    var v12403 = this.ioHost;
    var v1490 = v12403.watchFile;
    if (v1490) {
      var v1489 = {usage:"Watch output files", set:v1381};
      opts$$1.flag("watch", v1489, "w");
    }
    var v1491 = {usage:"Execute the script after compilation", set:v1382};
    opts$$1.flag("exec", v1491, "e");
    var v1492 = {usage:"Parse only", experimental:true, set:v1383};
    opts$$1.flag("parse", v1492);
    var v1493 = {usage:"Minimize whitespace", experimental:true, set:v1384};
    opts$$1.flag("minw", v1493, "mw");
    var v1494 = {usage:"Propagate constants to emitted code", experimental:true, set:v1385};
    opts$$1.flag("const", v1494);
    var v1495 = {usage:"Enable error recovery", experimental:true, set:v1386};
    opts$$1.flag("errorrecovery", v1495, "er");
    var v1496 = {usage:"Emit comments to output", set:v1387};
    opts$$1.flag("comments", v1496, "c");
    var v1497 = {usage:"Control flow", experimental:true, set:v1388};
    opts$$1.flag("cflow", v1497);
    var v1498 = {usage:"Print control flow", experimental:true, set:v1389};
    opts$$1.flag("cflowp", v1498);
    var v1499 = {usage:"Print Use Def control flow", experimental:true, set:v1390};
    opts$$1.flag("cflowu", v1499);
    var v1500 = {usage:"Allow with statements", experimental:true, set:v1391};
    opts$$1.flag("noerroronwith", v1500);
    var v1501 = {usage:"Skip resolution and preprocessing", experimental:true, set:v1392};
    opts$$1.flag("noresolve", v1501);
    var v1502 = {usage:"Print debug output", experimental:true, set:v1393};
    opts$$1.flag("debug", v1502);
    var v1503 = {usage:"Allows you to call the definition signature of an overload group", experimental:true, set:v1394};
    opts$$1.flag("canCallDefinitionSignature", v1503);
    var v1504 = {usage:"Do not optimize module codegen", experimental:true, set:v1395};
    opts$$1.flag("nooptimizemodules", v1504);
    var v1505 = {usage:"Do not include a default lib.d.ts with global declarations", set:v1396};
    opts$$1.flag("nolib", v1505);
    var v1506 = {usage:"Infer class properties from top-level assignments to 'this'", experimental:true, set:v1397};
    opts$$1.flag("inferProperties", v1506);
    var v1507 = {usage:'Specify ECMAScript target version: "ES3" (default), or "ES5"', type:"VER", set:v1398};
    opts$$1.option("target", v1507);
    var v1508 = {usage:'Specify module code generation: "commonjs" (default) or "amd"', type:"kind", set:v1399};
    opts$$1.option("module", v1508);
    var printedUsage = false;
    var v1509 = {usage:"Print this message", set:v1400};
    opts$$1.flag("help", v1509, "h");
    var v1510 = {usage:"Force file resolution to be case sensitive", experimental:true, set:v1401};
    opts$$1.flag("useCaseSensitiveFileResolution", v1510);
    var v18647 = this.compilerVersion;
    var v12404 = "Print the compiler's version: " + v18647;
    var v1511 = {usage:v12404, set:v1402};
    opts$$1.flag("version", v1511, "v");
    var v12405 = this.ioHost;
    var v1512 = v12405.arguments;
    opts$$1.parse(v1512);
    var v12406 = this.compilationSettings;
    var v1519 = v12406.useDefaultLib;
    if (v1519) {
      var v1513 = this.ioHost;
      var compilerFilePath = v1513.getExecutingFilePath();
      var v1514 = this.ioHost;
      var binDirPath = v1514.dirName(compilerFilePath);
      var v1515 = this.ioHost;
      var v1516 = binDirPath + "/lib.d.ts";
      var libStrPath = v1515.resolvePath(v1516);
      var v1517 = TypeScript.SourceUnit;
      code$$12 = new v1517(libStrPath, null);
      var v12407 = this.compilationEnvironment;
      var v1518 = v12407.code;
      v1518.push(code$$12);
    }
    var i$$148 = 0;
    var v18648 = opts$$1.unnamed;
    var v12408 = v18648.length;
    var v1523 = i$$148 < v12408;
    for (;v1523;) {
      var v1520 = TypeScript.SourceUnit;
      var v12409 = opts$$1.unnamed;
      var v1521 = v12409[i$$148];
      code$$12 = new v1520(v1521, null);
      var v12410 = this.compilationEnvironment;
      var v1522 = v12410.code;
      v1522.push(code$$12);
      i$$148++;
      var v18649 = opts$$1.unnamed;
      var v12411 = v18649.length;
      v1523 = i$$148 < v12411;
    }
    var v22787 = this.compilationEnvironment;
    var v18650 = v22787.code;
    var v12412 = v18650.length;
    var v18651;
    var v24813 = this.compilationSettings;
    var v22788 = v24813.useDefaultLib;
    if (v22788) {
      v18651 = 1;
    } else {
      v18651 = 0;
    }
    var v12413 = v18651;
    var v1526 = v12412 == v12413;
    if (v1526) {
      var v12414 = !printedUsage;
      if (v12414) {
        var v18652 = this.printedVersion;
        v12414 = !v18652;
      }
      var v1525 = v12414;
      if (v1525) {
        this.printVersion();
        opts$$1.printUsage();
        var v1524 = this.ioHost;
        v1524.quit(1);
      }
      return;
    }
    var sourceFiles = [];
    var v12415 = this.compilationSettings;
    var v1528 = v12415.watch;
    if (v1528) {
      var v12416 = this.compilationEnvironment;
      var v1527 = v12416.code;
      sourceFiles = v1527.slice(0);
    }
    var v1529;
    var v18653 = this.compilationSettings;
    var v12417 = v18653.resolve;
    if (v12417) {
      v1529 = this.resolve();
    } else {
      v1529 = this.compilationEnvironment;
    }
    this.resolvedEnvironment = v1529;
    var hasCompileErrors = this.compile();
    var v1530 = hasCompileErrors;
    var v12418 = !v1530;
    if (v12418) {
      v1530 = this.hasResolveErrors;
    }
    var hasErrors = v1530;
    var v1532 = !hasErrors;
    if (v1532) {
      var v12419 = this.compilationSettings;
      var v1531 = v12419.exec;
      if (v1531) {
        this.run();
      }
    }
    var v12420 = this.compilationSettings;
    var v1535 = v12420.watch;
    if (v1535) {
      this.watchFiles(sourceFiles);
    } else {
      var v1533 = this.ioHost;
      var v12421;
      if (hasErrors) {
        v12421 = 1;
      } else {
        v12421 = 0;
      }
      var v1534 = v12421;
      v1533.quit(v1534);
    }
    return;
  }
  function v1375() {
    var i$$147 = 0;
    var v22789 = this.compilationEnvironment;
    var v18654 = v22789.code;
    var v12422 = v18654.length;
    var v1542 = i$$147 < v12422;
    for (;v1542;) {
      var v12423 = this.compilationEnvironment;
      var v1536 = v12423.code;
      var unit = v1536[i$$147];
      var outputFileName = unit.path;
      var v1538 = TypeScript.isTSFile(outputFileName);
      if (v1538) {
        outputFileName = outputFileName.replace(/\.ts$/, ".js");
      } else {
        var v1537 = TypeScript.isSTRFile(outputFileName);
        if (v1537) {
          outputFileName = outputFileName.replace(/\.str$/, ".js");
        }
      }
      var v12424 = this.ioHost;
      var v1541 = v12424.fileExists(outputFileName);
      if (v1541) {
        var v1539 = this.ioHost;
        var unitRes = v1539.readFile(outputFileName);
        var v1540 = this.ioHost;
        v1540.run(unitRes, outputFileName);
      }
      i$$147++;
      var v22790 = this.compilationEnvironment;
      var v18655 = v22790.code;
      var v12425 = v18655.length;
      v1542 = i$$147 < v12425;
    }
    return;
  }
  function v1374() {
    function v1373(fileName$$10, useUTF8$$5) {
      var v1543 = _this$$22.ioHost;
      return IOUtils.createFileAndFolderStructure(v1543, fileName$$10, useUTF8$$5);
    }
    function v1372(minChar$$37, charLen$$2, message$$23, unitIndex$$15) {
      var v1544 = compiler$$3.errorReporter;
      v1544.hasErrors = true;
      var v18656 = _this$$22.resolvedEnvironment;
      var v12426 = v18656.code;
      var v1545 = v12426[unitIndex$$15];
      var fname$$9 = v1545.path;
      var lineCol$$6 = {line:-1, col:-1};
      var v1546 = compiler$$3.parser;
      v1546.getSourceLineCol(lineCol$$6, minChar$$37);
      var v24814 = fname$$9 + " (";
      var v24815 = lineCol$$6.line;
      var v22791 = v24814 + v24815;
      var v18657 = v22791 + ",";
      var v22792 = lineCol$$6.col;
      var v18658 = v22792 + 1;
      var v12427 = v18657 + v18658;
      var v1547 = v12427 + "): ";
      var msg$$4 = v1547 + message$$23;
      var v12428 = _this$$22.compilationSettings;
      var v1549 = v12428.errorRecovery;
      if (v1549) {
        var v12429 = _this$$22.ioHost;
        var v1548 = v12429.stderr;
        v1548.WriteLine(msg$$4);
      } else {
        throw new SyntaxError(msg$$4);
      }
      return;
    }
    function consumeUnit(code$$11, addAsResident) {
      try {
        var v18659 = _this$$22.compilationSettings;
        var v12430 = v18659.resolve;
        var v1555 = !v12430;
        if (v1555) {
          var v1550 = _this$$22.ioHost;
          var v1551 = code$$11.path;
          var v26437 = v1550.readFile(v1551);
          code$$11.content = v26437;
          var v12431 = _this$$22.compilationSettings;
          var v1554 = v12431.generateDeclarationFiles;
          if (v1554) {
            var v1552 = TypeScript.CompilerDiagnostics;
            var v12432 = code$$11.referencedFiles;
            var v1553 = v12432 == null;
            v1552.assert(v1553, "With no resolve option, referenced files need to null");
            var v26438 = TypeScript.getReferencedFiles(code$$11);
            code$$11.referencedFiles = v26438;
          }
        }
        var v1565 = code$$11.content;
        if (v1565) {
          var v12433 = _this$$22.compilationSettings;
          var v1564 = v12433.parseOnly;
          if (v1564) {
            var v1556 = code$$11.content;
            var v1557 = code$$11.path;
            compiler$$3.parseUnit(v1556, v1557);
          } else {
            var v12434 = _this$$22.compilationSettings;
            var v1560 = v12434.errorRecovery;
            if (v1560) {
              var v1558 = compiler$$3.parser;
              var v12435 = _this$$22.ioHost;
              var v1559 = v12435.stderr;
              v1558.setErrorRecovery(v1559);
            }
            var v1561 = code$$11.content;
            var v1562 = code$$11.path;
            var v1563 = code$$11.referencedFiles;
            compiler$$3.addUnit(v1561, v1562, addAsResident, v1563);
          }
        }
      } catch (err$$7) {
        var v1566 = compiler$$3.errorReporter;
        v1566.hasErrors = true;
        var v12436 = _this$$22.ioHost;
        var v1567 = v12436.stderr;
        var v1568 = err$$7.message;
        v1567.WriteLine(v1568);
      }
      return;
    }
    var _this$$22 = this;
    var compiler$$3;
    var v1569 = TypeScript.TypeScriptCompiler;
    var v12437 = this.ioHost;
    var v1570 = v12437.stderr;
    var v12438 = TypeScript.NullLogger;
    var v1571 = new v12438;
    var v1572 = this.compilationSettings;
    compiler$$3 = new v1569(v1570, v1571, v1572);
    var v12439 = this.ioHost;
    var v1573 = v12439.stderr;
    compiler$$3.setErrorOutput(v1573);
    compiler$$3.setErrorCallback(v1372);
    var v12440 = this.compilationSettings;
    var v1574 = v12440.emitComments;
    if (v1574) {
      compiler$$3.emitCommentsToOutput();
    }
    var iCode = 0;
    var v22793 = this.resolvedEnvironment;
    var v18660 = v22793.code;
    var v12441 = v18660.length;
    var v1577 = iCode < v12441;
    for (;v1577;) {
      var v22794 = this.compilationSettings;
      var v18661 = v22794.parseOnly;
      var v12442 = !v18661;
      var v18662 = !v12442;
      if (v18662) {
        v12442 = iCode > 0;
      }
      var v1576 = v12442;
      if (v1576) {
        var v18663 = this.resolvedEnvironment;
        var v12443 = v18663.code;
        var v1575 = v12443[iCode];
        consumeUnit(v1575, false);
      }
      iCode++;
      var v22795 = this.resolvedEnvironment;
      var v18664 = v22795.code;
      var v12444 = v18664.length;
      v1577 = iCode < v12444;
    }
    var v12445 = this.ioHost;
    var v1578 = v12445.directoryExists;
    var v12446 = this.ioHost;
    var v1579 = v12446.fileExists;
    var v12447 = this.ioHost;
    var v1580 = v12447.resolvePath;
    var emitterIOHost = {createFile:v1373, directoryExists:v1578, fileExists:v1579, resolvePath:v1580};
    try {
      var v18665 = this.compilationSettings;
      var v12448 = v18665.parseOnly;
      var v1581 = !v12448;
      if (v1581) {
        compiler$$3.typeCheck();
        compiler$$3.emit(emitterIOHost);
        compiler$$3.emitDeclarations();
      } else {
        compiler$$3.emitAST(emitterIOHost);
      }
    } catch (err$$8) {
      var v1582 = compiler$$3.errorReporter;
      v1582.hasErrors = true;
      var v12449 = err$$8.message;
      var v1583 = v12449 != "EmitError";
      if (v1583) {
        throw err$$8;
      }
    }
    var v1584 = compiler$$3.errorReporter;
    return v1584.hasErrors;
  }
  function v1371() {
    var v1585 = TypeScript.CodeResolver;
    var v1586 = this.compilationEnvironment;
    var resolver$$1 = new v1585(v1586);
    var v1587 = this.compilationSettings;
    var commandLineHost = new CommandLineHost(v1587);
    var v1588 = this.compilationEnvironment;
    var ret$$2 = commandLineHost.resolveCompilationEnvironment(v1588, resolver$$1, true);
    this.hasResolveErrors = false;
    var i$$146 = 0;
    var v22796 = this.compilationEnvironment;
    var v18666 = v22796.code;
    var v12450 = v18666.length;
    var v1596 = i$$146 < v12450;
    for (;v1596;) {
      var v25694 = this.compilationEnvironment;
      var v24816 = v25694.code;
      var v22797 = v24816[i$$146];
      var v18667 = v22797.path;
      var v12451 = commandLineHost.isResolved(v18667);
      var v1595 = !v12451;
      if (v1595) {
        this.hasResolveErrors = true;
        var v18668 = this.compilationEnvironment;
        var v12452 = v18668.code;
        var v1589 = v12452[i$$146];
        var path$$45 = v1589.path;
        var v24817 = TypeScript.isSTRFile(path$$45);
        var v22798 = !v24817;
        if (v22798) {
          var v24818 = TypeScript.isDSTRFile(path$$45);
          v22798 = !v24818;
        }
        var v18669 = v22798;
        if (v18669) {
          var v22799 = TypeScript.isTSFile(path$$45);
          v18669 = !v22799;
        }
        var v12453 = v18669;
        if (v12453) {
          var v18670 = TypeScript.isDTSFile(path$$45);
          v12453 = !v18670;
        }
        var v1594 = v12453;
        if (v1594) {
          var v12454 = this.ioHost;
          var v1590 = v12454.stderr;
          var v12455 = 'Unknown extension for file: "' + path$$45;
          var v1591 = v12455 + '". Only .ts and .d.ts extensions are allowed.';
          v1590.WriteLine(v1591);
        } else {
          var v12456 = this.ioHost;
          var v1592 = v12456.stderr;
          var v12457 = 'Error reading file "' + path$$45;
          var v1593 = v12457 + '": File not found';
          v1592.WriteLine(v1593);
        }
      }
      i$$146++;
      var v22800 = this.compilationEnvironment;
      var v18671 = v22800.code;
      var v12458 = v18671.length;
      v1596 = i$$146 < v12458;
    }
    return ret$$2;
  }
  function BatchCompiler$$1(ioHost$$7) {
    this.ioHost = ioHost$$7;
    this.resolvedEnvironment = null;
    this.hasResolveErrors = false;
    this.compilerVersion = "0.8.2.0";
    this.printedVersion = false;
    var v1597 = TypeScript.CompilationSettings;
    var v26439 = new v1597;
    this.compilationSettings = v26439;
    var v1598 = TypeScript.CompilationEnvironment;
    var v1599 = this.compilationSettings;
    var v1600 = this.ioHost;
    var v26440 = new v1598(v1599, v1600);
    this.compilationEnvironment = v26440;
    return;
  }
  var v1601 = BatchCompiler$$1.prototype;
  v1601.resolve = v1371;
  var v1602 = BatchCompiler$$1.prototype;
  v1602.compile = v1374;
  var v1603 = BatchCompiler$$1.prototype;
  v1603.run = v1375;
  var v1604 = BatchCompiler$$1.prototype;
  v1604.batchCompile = v1403;
  var v1605 = BatchCompiler$$1.prototype;
  v1605.printVersion = v1404;
  var v1606 = BatchCompiler$$1.prototype;
  v1606.watchFiles = v1408;
  return BatchCompiler$$1;
}
function v1370() {
  function v1369(preEnv, resolver, traceDependencies) {
    function v1368(path$$44, code$$10) {
      var pathId = _this$$21.getPathIdentifier(path$$44);
      var v18672 = _this$$21.resolvedPaths;
      var v12459 = v18672[pathId];
      var v1609 = !v12459;
      if (v1609) {
        var v1607 = resolvedEnv.code;
        v1607.push(code$$10);
        var v1608 = _this$$21.resolvedPaths;
        v1608[pathId] = true;
      }
      return;
    }
    function postResolutionError(errorFile, errorMessage$$1) {
      var v1610 = TypeScript.CompilerDiagnostics;
      var v18673 = "Could not resolve file '" + errorFile;
      var v12460 = v18673 + "'";
      var v18674;
      var v22801 = errorMessage$$1 == "";
      if (v22801) {
        v18674 = "";
      } else {
        v18674 = ": " + errorMessage$$1;
      }
      var v12461 = v18674;
      var v1611 = v12460 + v12461;
      v1610.debugPrint(v1611);
      return;
    }
    var _this$$21 = this;
    var v1612 = TypeScript.CompilationEnvironment;
    var v1613 = preEnv.compilationSettings;
    var v1614 = preEnv.ioHost;
    var resolvedEnv = new v1612(v1613, v1614);
    var v1615 = preEnv.code;
    var nCode = v1615.length;
    var path$$43 = "";
    var resolutionDispatcher$$1 = {postResolutionError:postResolutionError, postResolution:v1368};
    var i$$145 = 0;
    var v1619 = i$$145 < nCode;
    for (;v1619;) {
      var v12462 = preEnv.ioHost;
      var v22802 = preEnv.code;
      var v18675 = v22802[i$$145];
      var v12463 = v18675.path;
      var v1616 = v12462.resolvePath(v12463);
      path$$43 = TypeScript.switchToForwardSlashes(v1616);
      var v1617 = this.pathMap;
      var v18676 = preEnv.code;
      var v12464 = v18676[i$$145];
      var v1618 = v12464.path;
      v1617[v1618] = path$$43;
      resolver.resolveCode(path$$43, "", false, resolutionDispatcher$$1);
      i$$145++;
      v1619 = i$$145 < nCode;
    }
    return resolvedEnv;
  }
  function v1367(path$$42) {
    var v12465 = this.resolvedPaths;
    var v22803 = this.pathMap;
    var v18677 = v22803[path$$42];
    var v12466 = this.getPathIdentifier(v18677);
    var v1620 = v12465[v12466];
    return v1620 != undefined;
  }
  function v1366(path$$41) {
    var v1621;
    var v18678 = this.compilationSettings;
    var v12467 = v18678.useCaseSensitiveFileResolution;
    if (v12467) {
      v1621 = path$$41;
    } else {
      v1621 = path$$41.toLocaleUpperCase();
    }
    return v1621;
  }
  function CommandLineHost$$1(compilationSettings$$1) {
    this.compilationSettings = compilationSettings$$1;
    this.pathMap = {};
    this.resolvedPaths = {};
    return;
  }
  var v1622 = CommandLineHost$$1.prototype;
  v1622.getPathIdentifier = v1366;
  var v1623 = CommandLineHost$$1.prototype;
  v1623.isResolved = v1367;
  var v1624 = CommandLineHost$$1.prototype;
  v1624.resolveCompilationEnvironment = v1369;
  return CommandLineHost$$1;
}
function v1365() {
  function v1364(args$$19) {
    var position$$5 = 0;
    var v12468 = args$$19.length;
    var v1635 = position$$5 < v12468;
    for (;v1635;) {
      var v1625 = position$$5;
      position$$5 = position$$5 + 1;
      var current$$4 = args$$19[v1625];
      var match$$3 = current$$4.match(/^(--?|@)(.*)/);
      var value$$43 = null;
      if (match$$3) {
        var v12469 = match$$3[1];
        var v1633 = v12469 === "@";
        if (v1633) {
          var v12470 = this.host;
          var v12471 = match$$3[2];
          var v1626 = v12470.readFile(v12471);
          this.parseString(v1626);
        } else {
          var arg$$11 = match$$3[2];
          var option$$1 = this.findOption(arg$$11);
          var v1632 = option$$1 === null;
          if (v1632) {
            var v1627 = this.host;
            var v12472 = "Unknown option '" + arg$$11;
            var v1628 = v12472 + "'";
            v1627.printLine(v1628);
            var v1629 = this.host;
            v1629.printLine("Use the '--help' flag to see options");
          } else {
            var v12473 = option$$1.flag;
            var v1631 = !v12473;
            if (v1631) {
              var v1630 = position$$5;
              position$$5 = position$$5 + 1;
              value$$43 = args$$19[v1630];
            }
            option$$1.set(value$$43);
          }
        }
      } else {
        var v1634 = this.unnamed;
        v1634.push(current$$4);
      }
      var v12474 = args$$19.length;
      v1635 = position$$5 < v12474;
    }
    return;
  }
  function v1363(argString) {
    var position$$4 = 0;
    var tokens = argString.match(/\s+|"|[^\s"]+/g);
    var args$$18 = [];
    var currentArg = "";
    var v12475 = tokens.length;
    var v1645 = position$$4 < v12475;
    for (;v1645;) {
      var token$$7 = tokens[position$$4];
      var v1644 = token$$7 === '"';
      if (v1644) {
        var JSCompiler_temp_const$$34 = currentArg;
        var JSCompiler_inline_result$$35;
        var value$$inline_36 = "";
        var v1636 = position$$4;
        position$$4 = position$$4 + 1;
        tokens[v1636];
        var token$$inline_37 = tokens[position$$4];
        var v12476 = token$$inline_37;
        if (v12476) {
          v12476 = token$$inline_37 !== '"';
        }
        var v1638 = v12476;
        for (;v1638;) {
          var v1637 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1637];
          value$$inline_36 = value$$inline_36 + token$$inline_37;
          token$$inline_37 = tokens[position$$4];
          var v12477 = token$$inline_37;
          if (v12477) {
            v12477 = token$$inline_37 !== '"';
          }
          v1638 = v12477;
        }
        var v1639 = position$$4;
        position$$4 = position$$4 + 1;
        tokens[v1639];
        JSCompiler_inline_result$$35 = value$$inline_36;
        currentArg = JSCompiler_temp_const$$34 + JSCompiler_inline_result$$35;
      } else {
        var v1643 = token$$7.match(/\s/);
        if (v1643) {
          var v12478 = currentArg.length;
          var v1640 = v12478 > 0;
          if (v1640) {
            args$$18.push(currentArg);
            currentArg = "";
          }
          var v1641 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1641];
        } else {
          var v1642 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1642];
          currentArg = currentArg + token$$7;
        }
      }
      var v12479 = tokens.length;
      v1645 = position$$4 < v12479;
    }
    var v12480 = currentArg.length;
    var v1646 = v12480 > 0;
    if (v1646) {
      args$$18.push(currentArg);
    }
    this.parse(args$$18);
    return;
  }
  function v1362(name$$91, config$$2, short$$1) {
    var v1647 = !config$$2;
    if (v1647) {
      config$$2 = short$$1;
      short$$1 = null;
    }
    config$$2.name = name$$91;
    config$$2.short = short$$1;
    config$$2.flag = true;
    var v1648 = this.options;
    v1648.push(config$$2);
    return;
  }
  function v1361(name$$90, config$$1, short) {
    var v1649 = !config$$1;
    if (v1649) {
      config$$1 = short;
      short = null;
    }
    config$$1.name = name$$90;
    config$$1.short = short;
    config$$1.flag = false;
    var v1650 = this.options;
    v1650.push(config$$1);
    return;
  }
  function v1360() {
    function v1359(a$$9, b$$15) {
      var v1651 = a$$9.name;
      var aName = v1651.toLowerCase();
      var v1652 = b$$15.name;
      var bName = v1652.toLowerCase();
      var v1654 = aName > bName;
      if (v1654) {
        return 1;
      } else {
        var v1653 = aName < bName;
        if (v1653) {
          return-1;
        } else {
          return 0;
        }
      }
      return;
    }
    var v1655 = this.host;
    v1655.printLine("Syntax:   tsc [options] [file ..]");
    var v1656 = this.host;
    v1656.printLine("");
    var v1657 = this.host;
    v1657.printLine("Examples: tsc hello.ts");
    var v1658 = this.host;
    v1658.printLine("          tsc --out foo.js foo.ts");
    var v1659 = this.host;
    v1659.printLine("          tsc @args.txt");
    var v1660 = this.host;
    v1660.printLine("");
    var v1661 = this.host;
    v1661.printLine("Options:");
    var output$$1 = [];
    var maxLength = 0;
    var v1662 = this.options;
    var v26441 = v1662.sort(v1359);
    this.options = v26441;
    var i$$144 = 0;
    var v18679 = this.options;
    var v12481 = v18679.length;
    var v1670 = i$$144 < v12481;
    for (;v1670;) {
      var v1663 = this.options;
      var option = v1663[i$$144];
      var v1664 = option.experimental;
      if (v1664) {
        i$$144++;
        var v18680 = this.options;
        var v12482 = v18680.length;
        v1670 = i$$144 < v12482;
        continue;
      }
      var v12483 = option.usage;
      var v1665 = !v12483;
      if (v1665) {
        break;
      }
      var usageString = "  ";
      var v1666;
      var v12485 = option.type;
      if (v12485) {
        var v18681 = option.type;
        var v12484 = v18681.toUpperCase();
        v1666 = " " + v12484;
      } else {
        v1666 = "";
      }
      var type$$61 = v1666;
      var v1667 = option.short;
      if (v1667) {
        var v24819 = this.DEFAULT_SHORT_FLAG;
        var v24820 = option.short;
        var v22804 = v24819 + v24820;
        var v18682 = v22804 + type$$61;
        var v12486 = v18682 + ", ";
        usageString = usageString + v12486;
      }
      var v22805 = this.DEFAULT_LONG_FLAG;
      var v22806 = option.name;
      var v18683 = v22805 + v22806;
      var v12487 = v18683 + type$$61;
      usageString = usageString + v12487;
      var v12488 = option.usage;
      var v1668 = [usageString, v12488];
      output$$1.push(v1668);
      var v12489 = usageString.length;
      var v1669 = v12489 > maxLength;
      if (v1669) {
        maxLength = usageString.length;
      }
      i$$144++;
      var v18684 = this.options;
      var v12490 = v18684.length;
      v1670 = i$$144 < v12490;
    }
    var v1671 = ["  @<file>", "Insert command line options and files from a file."];
    output$$1.push(v1671);
    i$$144 = 0;
    var v12491 = output$$1.length;
    var v1674 = i$$144 < v12491;
    for (;v1674;) {
      var v1672 = this.host;
      var v22807 = output$$1[i$$144];
      var v18685 = v22807[0];
      var v26353 = output$$1[i$$144];
      var v26263 = v26353[0];
      var v26084 = v26263.length;
      var v25695 = maxLength - v26084;
      var v24821 = v25695 + 3;
      var v22808 = new Array(v24821);
      var v18686 = v22808.join(" ");
      var v12492 = v18685 + v18686;
      var v18687 = output$$1[i$$144];
      var v12493 = v18687[1];
      var v1673 = v12492 + v12493;
      v1672.printLine(v1673);
      i$$144++;
      var v12494 = output$$1.length;
      v1674 = i$$144 < v12494;
    }
    return;
  }
  function v1358(arg$$10) {
    var i$$143 = 0;
    var v18688 = this.options;
    var v12495 = v18688.length;
    var v1677 = i$$143 < v12495;
    for (;v1677;) {
      var v24822 = this.options;
      var v22809 = v24822[i$$143];
      var v18689 = v22809.short;
      var v12496 = arg$$10 === v18689;
      var v18691 = !v12496;
      if (v18691) {
        var v24823 = this.options;
        var v22810 = v24823[i$$143];
        var v18690 = v22810.name;
        v12496 = arg$$10 === v18690;
      }
      var v1676 = v12496;
      if (v1676) {
        var v1675 = this.options;
        return v1675[i$$143];
      }
      i$$143++;
      var v18692 = this.options;
      var v12497 = v18692.length;
      v1677 = i$$143 < v12497;
    }
    return null;
  }
  function OptionsParser$$1(host) {
    this.host = host;
    this.DEFAULT_SHORT_FLAG = "-";
    this.DEFAULT_LONG_FLAG = "--";
    this.unnamed = [];
    this.options = [];
    return;
  }
  var v1678 = OptionsParser$$1.prototype;
  v1678.findOption = v1358;
  var v1679 = OptionsParser$$1.prototype;
  v1679.printUsage = v1360;
  var v1680 = OptionsParser$$1.prototype;
  v1680.option = v1361;
  var v1681 = OptionsParser$$1.prototype;
  v1681.flag = v1362;
  var v1682 = OptionsParser$$1.prototype;
  v1682.parseString = v1363;
  var v1683 = OptionsParser$$1.prototype;
  v1683.parse = v1364;
  return OptionsParser$$1;
}
function v1357() {
  function getWindowsScriptHostIO() {
    function v1331(exitCode) {
      var v12498 = typeof exitCode;
      var v1684 = v12498 === "undefined";
      if (v1684) {
        exitCode = 0;
      }
      try {
        WScript.Quit(exitCode);
      } catch (e$$16) {
      }
      return;
    }
    function v1330() {
      return WScript.ScriptFullName;
    }
    function v1329(source$$4, filename$$10) {
      try {
        eval(source$$4);
      } catch (e$$15) {
        var v12499 = "Error while executing file '" + filename$$10;
        var v1685 = v12499 + "'.";
        IOUtils.throwIOError(v1685, e$$15);
      }
      return;
    }
    function v1328(str$$17) {
      WScript.Echo(str$$17);
      return;
    }
    function v1327(str$$16) {
      var v1686 = WScript.StdOut;
      v1686.Write(str$$16);
      return;
    }
    function v1326(path$$30, spec, options$$8) {
      function filesInFolder(folder$$1, root) {
        var paths$$1 = [];
        var fc;
        var v1690 = options$$8.recursive;
        if (v1690) {
          var v1687 = folder$$1.subfolders;
          fc = new Enumerator(v1687);
          var v12500 = fc.atEnd();
          var v1689 = !v12500;
          for (;v1689;) {
            var v12501 = fc.item();
            var v18693 = root + "/";
            var v22811 = fc.item();
            var v18694 = v22811.Name;
            var v12502 = v18693 + v18694;
            var v1688 = filesInFolder(v12501, v12502);
            paths$$1 = paths$$1.concat(v1688);
            fc.moveNext();
            var v12503 = fc.atEnd();
            v1689 = !v12503;
          }
        }
        var v1691 = folder$$1.files;
        fc = new Enumerator(v1691);
        var v12504 = fc.atEnd();
        var v1694 = !v12504;
        for (;v1694;) {
          var v12505 = !spec;
          var v18696 = !v12505;
          if (v18696) {
            var v22812 = fc.item();
            var v18695 = v22812.Name;
            v12505 = v18695.match(spec);
          }
          var v1693 = v12505;
          if (v1693) {
            var v12506 = root + "/";
            var v18697 = fc.item();
            var v12507 = v18697.Name;
            var v1692 = v12506 + v12507;
            paths$$1.push(v1692);
          }
          fc.moveNext();
          var v12508 = fc.atEnd();
          v1694 = !v12508;
        }
        return paths$$1;
      }
      options$$8 = options$$8 || {};
      var folder = fso.GetFolder(path$$30);
      var paths = [];
      return filesInFolder(folder, path$$30);
    }
    function v1325(path$$29) {
      try {
        var v12509 = this.directoryExists(path$$29);
        var v1695 = !v12509;
        if (v1695) {
          fso.CreateFolder(path$$29);
        }
      } catch (e$$14) {
        var v12510 = "Couldn't create directory '" + path$$29;
        var v1696 = v12510 + "'.";
        IOUtils.throwIOError(v1696, e$$14);
      }
      return;
    }
    function v1324(path$$28) {
      return fso.FolderExists(path$$28);
    }
    function v1323(path$$27, useUTF8$$3) {
      function v1322() {
        try {
          streamObj$$1.SaveToFile(path$$27, 2);
        } catch (saveError) {
          var v12511 = "Couldn't write to file '" + path$$27;
          var v1697 = v12511 + "'.";
          IOUtils.throwIOError(v1697, saveError);
        } finally {
          var v12512 = streamObj$$1.State;
          var v1698 = v12512 != 0;
          if (v1698) {
            streamObj$$1.Close();
          }
          streamObjectPool.push(streamObj$$1);
        }
        return;
      }
      function v1321(str$$15) {
        streamObj$$1.WriteText(str$$15, 1);
        return;
      }
      function v1320(str$$14) {
        streamObj$$1.WriteText(str$$14, 0);
        return;
      }
      try {
        var streamObj$$1 = getStreamObject();
        var v1699;
        if (useUTF8$$3) {
          v1699 = "utf-8";
        } else {
          v1699 = "x-ansi";
        }
        streamObj$$1.Charset = v1699;
        streamObj$$1.Open();
        return{Write:v1320, WriteLine:v1321, Close:v1322};
      } catch (creationError) {
        var v12513 = "Couldn't write to file '" + path$$27;
        var v1700 = v12513 + "'.";
        IOUtils.throwIOError(v1700, creationError);
      }
      return;
    }
    function v1319(path$$26) {
      try {
        var v1701 = fso.FileExists(path$$26);
        if (v1701) {
          fso.DeleteFile(path$$26, true);
        }
      } catch (e$$13) {
        var v12514 = "Couldn't delete file '" + path$$26;
        var v1702 = v12514 + "'.";
        IOUtils.throwIOError(v1702, e$$13);
      }
      return;
    }
    function v1318(rootPath, partialFilePath) {
      var v12515 = fso.GetAbsolutePathName(rootPath);
      var v1703 = v12515 + "/";
      var path$$25 = v1703 + partialFilePath;
      for (;true;) {
        var v1706 = fso.FileExists(path$$25);
        if (v1706) {
          try {
            var content$$6 = this.readFile(path$$25);
            return{content:content$$6, path:path$$25};
          } catch (err$$5) {
          }
        } else {
          var v1704 = fso.GetAbsolutePathName(rootPath);
          rootPath = fso.GetParentFolderName(v1704);
          var v1705 = rootPath == "";
          if (v1705) {
            return null;
          } else {
            path$$25 = fso.BuildPath(rootPath, partialFilePath);
          }
        }
      }
      return;
    }
    function v1317(path$$24) {
      return fso.GetParentFolderName(path$$24);
    }
    function v1316(path$$23) {
      return fso.GetAbsolutePathName(path$$23);
    }
    function v1315(path$$22) {
      return fso.FileExists(path$$22);
    }
    function v1314(path$$21, contents) {
      var file$$1 = this.createFile(path$$21);
      file$$1.Write(contents);
      file$$1.Close();
      return;
    }
    function v1313(path$$20) {
      try {
        var streamObj = getStreamObject();
        streamObj.Open();
        streamObj.Type = 2;
        streamObj.Charset = "x-ansi";
        streamObj.LoadFromFile(path$$20);
        var bomChar = streamObj.ReadText(2);
        streamObj.Position = 0;
        var v22813 = bomChar.charCodeAt(0);
        var v18698 = v22813 == 254;
        if (v18698) {
          var v22814 = bomChar.charCodeAt(1);
          v18698 = v22814 == 255;
        }
        var v12516 = v18698;
        var v18700 = !v12516;
        if (v18700) {
          var v22815 = bomChar.charCodeAt(0);
          var v18699 = v22815 == 255;
          if (v18699) {
            var v22816 = bomChar.charCodeAt(1);
            v18699 = v22816 == 254;
          }
          v12516 = v18699;
        }
        var v1708 = v12516;
        if (v1708) {
          streamObj.Charset = "unicode";
        } else {
          var v18701 = bomChar.charCodeAt(0);
          var v12517 = v18701 == 239;
          if (v12517) {
            var v18702 = bomChar.charCodeAt(1);
            v12517 = v18702 == 187;
          }
          var v1707 = v12517;
          if (v1707) {
            streamObj.Charset = "utf-8";
          }
        }
        var str$$13 = streamObj.ReadText(-1);
        streamObj.Close();
        streamObjectPool.push(streamObj);
        return str$$13;
      } catch (err$$4) {
        var v12518 = 'Error reading file "' + path$$20;
        var v1709 = v12518 + '".';
        IOUtils.throwIOError(v1709, err$$4);
      }
      return;
    }
    function getStreamObject() {
      var v12519 = streamObjectPool.length;
      var v1710 = v12519 > 0;
      if (v1710) {
        return streamObjectPool.pop();
      } else {
        return new ActiveXObject("ADODB.Stream");
      }
      return;
    }
    var fso = new ActiveXObject("Scripting.FileSystemObject");
    var streamObjectPool = [];
    var args$$17 = [];
    var i$$140 = 0;
    var v18703 = WScript.Arguments;
    var v12520 = v18703.length;
    var v1713 = i$$140 < v12520;
    for (;v1713;) {
      var v1711 = args$$17;
      var v1712 = i$$140;
      var v12521 = WScript.Arguments;
      var v26442 = v12521.Item(i$$140);
      v1711[v1712] = v26442;
      i$$140++;
      var v18704 = WScript.Arguments;
      var v12522 = v18704.length;
      v1713 = i$$140 < v12522;
    }
    var v1714 = WScript.StdErr;
    var v1715 = WScript.StdOut;
    return{readFile:v1313, writeFile:v1314, fileExists:v1315, resolvePath:v1316, dirName:v1317, findFile:v1318, deleteFile:v1319, createFile:v1323, directoryExists:v1324, createDirectory:v1325, dir:v1326, print:v1327, printLine:v1328, arguments:args$$17, stderr:v1714, stdout:v1715, watchFile:null, run:v1329, getExecutingFilePath:v1330, quit:v1331};
  }
  function getNodeIO() {
    function v1356() {
      var v1716 = process.mainModule;
      return v1716.filename;
    }
    function v1355(source$$5, filename$$12) {
      var v1717 = require.main;
      v1717.filename = filename$$12;
      var v1718 = require.main;
      var v18705 = _fs.realpathSync(filename$$12);
      var v12523 = _path.dirname(v18705);
      var v26443 = _module._nodeModulePaths(v12523);
      v1718.paths = v26443;
      var v1719 = require.main;
      v1719._compile(source$$5, filename$$12);
      return;
    }
    function v1354(filename$$11, callback$$28) {
      function v1353() {
        _fs.unwatchFile(filename$$11, fileChanged);
        return;
      }
      function fileChanged(curr, prev$$1) {
        function v1352() {
          processingChange = false;
          return;
        }
        var v1722 = !firstRun;
        if (v1722) {
          var v12524 = curr.mtime;
          var v12525 = prev$$1.mtime;
          var v1720 = v12524 < v12525;
          if (v1720) {
            return;
          }
          _fs.unwatchFile(filename$$11, fileChanged);
          var v1721 = !processingChange;
          if (v1721) {
            processingChange = true;
            callback$$28(filename$$11);
            setTimeout(v1352, 100);
          }
        }
        firstRun = false;
        var v1723 = {persistent:true, interval:500};
        _fs.watchFile(filename$$11, v1723, fileChanged);
        return;
      }
      var firstRun = true;
      var processingChange = false;
      fileChanged();
      return{filename:filename$$11, close:v1353};
    }
    function v1351() {
      return;
    }
    function v1350(str$$25) {
      var v1724 = process.stdout;
      var v1725 = str$$25 + "\n";
      v1724.write(v1725);
      return;
    }
    function v1349(str$$24) {
      var v1726 = process.stdout;
      v1726.write(str$$24);
      return;
    }
    function v1348() {
      return;
    }
    function v1347(str$$23) {
      var v1727 = process.stderr;
      var v1728 = str$$23 + "\n";
      v1727.write(v1728);
      return;
    }
    function v1346(str$$22) {
      var v1729 = process.stderr;
      v1729.write(str$$22);
      return;
    }
    function v1345(str$$21) {
      var v1730 = process.stdout;
      var v1731 = str$$21 + "\n";
      v1730.write(v1731);
      return;
    }
    function v1344(str$$20) {
      var v1732 = process.stdout;
      v1732.write(str$$20);
      return;
    }
    function v1343(rootPath$$1, partialFilePath$$1) {
      var v1733 = rootPath$$1 + "/";
      var path$$40 = v1733 + partialFilePath$$1;
      for (;true;) {
        var v1735 = _fs.existsSync(path$$40);
        if (v1735) {
          try {
            var content$$7 = this.readFile(path$$40);
            return{content:content$$7, path:path$$40};
          } catch (err$$6) {
          }
        } else {
          var parentPath$$1 = _path.resolve(rootPath$$1, "..");
          var v1734 = rootPath$$1 === parentPath$$1;
          if (v1734) {
            return null;
          } else {
            rootPath$$1 = parentPath$$1;
            path$$40 = _path.resolve(rootPath$$1, partialFilePath$$1);
          }
        }
      }
      return;
    }
    function v1342(path$$39) {
      return _path.dirname(path$$39);
    }
    function v1341(path$$38) {
      return _path.resolve(path$$38);
    }
    function v1340(path$$37) {
      var v1736 = _fs.existsSync(path$$37);
      if (v1736) {
        var v12526 = _fs.lstatSync(path$$37);
        v1736 = v12526.isDirectory();
      }
      return v1736;
    }
    function v1339(path$$36) {
      try {
        var v12527 = this.directoryExists(path$$36);
        var v1737 = !v12527;
        if (v1737) {
          _fs.mkdirSync(path$$36);
        }
      } catch (e$$20) {
        var v12528 = "Couldn't create directory '" + path$$36;
        var v1738 = v12528 + "'.";
        IOUtils.throwIOError(v1738, e$$20);
      }
      return;
    }
    function dir(path$$35, spec$$1, options$$9) {
      function filesInFolder$$1(folder$$2) {
        var paths$$2 = [];
        var files = _fs.readdirSync(folder$$2);
        var i$$142 = 0;
        var v12529 = files.length;
        var v1744 = i$$142 < v12529;
        for (;v1744;) {
          var v12530 = folder$$2 + "/";
          var v12531 = files[i$$142];
          var v1739 = v12530 + v12531;
          var stat = _fs.statSync(v1739);
          var v12532 = options$$9.recursive;
          if (v12532) {
            v12532 = stat.isDirectory();
          }
          var v1743 = v12532;
          if (v1743) {
            var v18706 = folder$$2 + "/";
            var v18707 = files[i$$142];
            var v12533 = v18706 + v18707;
            var v1740 = filesInFolder$$1(v12533);
            paths$$2 = paths$$2.concat(v1740);
          } else {
            var v12534 = stat.isFile();
            if (v12534) {
              var v18708 = !spec$$1;
              var v22818 = !v18708;
              if (v22818) {
                var v22817 = files[i$$142];
                v18708 = v22817.match(spec$$1);
              }
              v12534 = v18708;
            }
            var v1742 = v12534;
            if (v1742) {
              var v12535 = folder$$2 + "/";
              var v12536 = files[i$$142];
              var v1741 = v12535 + v12536;
              paths$$2.push(v1741);
            }
          }
          i$$142++;
          var v12537 = files.length;
          v1744 = i$$142 < v12537;
        }
        return paths$$2;
      }
      options$$9 = options$$9 || {};
      return filesInFolder$$1(path$$35);
    }
    function v1338(path$$33, useUTF8$$4) {
      function v1337() {
        _fs.closeSync(fd);
        fd = null;
        return;
      }
      function v1336(str$$19) {
        var v1745 = str$$19 + "\r\n";
        _fs.writeSync(fd, v1745);
        return;
      }
      function v1335(str$$18) {
        _fs.writeSync(fd, str$$18);
        return;
      }
      function mkdirRecursiveSync(path$$34) {
        var stats = _fs.statSync(path$$34);
        var v1749 = stats.isFile();
        if (v1749) {
          var v12538 = '"' + path$$34;
          var v1746 = v12538 + "\" exists but isn't a directory.";
          IOUtils.throwIOError(v1746, null);
        } else {
          var v1748 = stats.isDirectory();
          if (v1748) {
          } else {
            var v1747 = _path.dirname(path$$34);
            mkdirRecursiveSync(v1747);
            _fs.mkdirSync(path$$34, 509);
          }
        }
        return;
      }
      var v1750 = _path.dirname(path$$33);
      mkdirRecursiveSync(v1750);
      try {
        var fd = _fs.openSync(path$$33, "w");
      } catch (e$$19) {
        var v12539 = "Couldn't write to file '" + path$$33;
        var v1751 = v12539 + "'.";
        IOUtils.throwIOError(v1751, e$$19);
      }
      return{Write:v1335, WriteLine:v1336, Close:v1337};
    }
    function v1334(path$$32) {
      return _fs.existsSync(path$$32);
    }
    function v1333(path$$31) {
      try {
        _fs.unlinkSync(path$$31);
      } catch (e$$18) {
        var v12540 = "Couldn't delete file '" + path$$31;
        var v1752 = v12540 + "'.";
        IOUtils.throwIOError(v1752, e$$18);
      }
      return;
    }
    function v1332(file$$2) {
      try {
        var buffer$$8 = _fs.readFileSync(file$$2);
        var v1759 = buffer$$8[0];
        switch(v1759) {
          case 254:
            var v12541 = buffer$$8[1];
            var v1756 = v12541 == 255;
            if (v1756) {
              var i$$141 = 0;
              var v12542 = i$$141 + 1;
              var v12543 = buffer$$8.length;
              var v1755 = v12542 < v12543;
              for (;v1755;) {
                var temp$$17 = buffer$$8[i$$141];
                var v1753 = i$$141 + 1;
                buffer$$8[i$$141] = buffer$$8[v1753];
                var v1754 = i$$141 + 1;
                buffer$$8[v1754] = temp$$17;
                i$$141 = i$$141 + 2;
                var v12544 = i$$141 + 1;
                var v12545 = buffer$$8.length;
                v1755 = v12544 < v12545;
              }
              return buffer$$8.toString("ucs2", 2);
            }
            break;
          case 255:
            var v12546 = buffer$$8[1];
            var v1757 = v12546 == 254;
            if (v1757) {
              return buffer$$8.toString("ucs2", 2);
            }
            break;
          case 239:
            var v12547 = buffer$$8[1];
            var v1758 = v12547 == 187;
            if (v1758) {
              return buffer$$8.toString("utf8", 3);
            }
          ;
        }
        return buffer$$8.toString();
      } catch (e$$17) {
        var v12548 = 'Error reading file "' + file$$2;
        var v1760 = v12548 + '".';
        IOUtils.throwIOError(v1760, e$$17);
      }
      return;
    }
    var _fs = require("fs");
    var _path = require("path");
    var _module = require("module");
    var v1761 = _fs.writeFileSync;
    var v12549 = process.argv;
    var v1762 = v12549.slice(2);
    var v1763 = {Write:v1346, WriteLine:v1347, Close:v1348};
    var v1764 = {Write:v1349, WriteLine:v1350, Close:v1351};
    var v1765 = process.exit;
    return{readFile:v1332, writeFile:v1761, deleteFile:v1333, fileExists:v1334, createFile:v1338, dir:dir, createDirectory:v1339, directoryExists:v1340, resolvePath:v1341, dirName:v1342, findFile:v1343, print:v1344, printLine:v1345, arguments:v1762, stderr:v1763, stdout:v1764, watchFile:v1354, run:v1355, getExecutingFilePath:v1356, quit:v1765};
  }
  var v12550 = typeof ActiveXObject;
  var v1767 = v12550 === "function";
  if (v1767) {
    return getWindowsScriptHostIO();
  } else {
    var v12551 = typeof require;
    var v1766 = v12551 === "function";
    if (v1766) {
      return getNodeIO();
    } else {
      return null;
    }
  }
  return;
}
function v1312(IOUtils$$1) {
  function createDirectoryStructure(ioHost$$5, dirName) {
    var v1768 = ioHost$$5.directoryExists(dirName);
    if (v1768) {
      return;
    }
    var parentDirectory = ioHost$$5.dirName(dirName);
    var v1769 = parentDirectory != "";
    if (v1769) {
      createDirectoryStructure(ioHost$$5, parentDirectory);
    }
    ioHost$$5.createDirectory(dirName);
    return;
  }
  function createFileAndFolderStructure(ioHost$$6, fileName$$9, useUTF8$$2) {
    var path$$19 = ioHost$$6.resolvePath(fileName$$9);
    var dirName$$1 = ioHost$$6.dirName(path$$19);
    createDirectoryStructure(ioHost$$6, dirName$$1);
    return ioHost$$6.createFile(path$$19, useUTF8$$2);
  }
  function throwIOError(message$$22, error$$2) {
    var errorMessage = message$$22;
    var v12552 = error$$2;
    if (v12552) {
      v12552 = error$$2.message;
    }
    var v1770 = v12552;
    if (v1770) {
      var v18709 = error$$2.message;
      var v12553 = " " + v18709;
      errorMessage = errorMessage + v12553;
    }
    throw new Error(errorMessage);
  }
  IOUtils$$1.createFileAndFolderStructure = createFileAndFolderStructure;
  IOUtils$$1.throwIOError = throwIOError;
  return;
}
function v1311(TypeScript$$33) {
  function v1310() {
    function v1309(s$$41) {
      var v1771 = this.logContents;
      v1771.push(s$$41);
      return;
    }
    function v1308() {
      return false;
    }
    function v1307() {
      return false;
    }
    function v1306() {
      return false;
    }
    function v1305() {
      return false;
    }
    function v1304() {
      return false;
    }
    function BufferedLogger$$1() {
      this.logContents = [];
      return;
    }
    var v1772 = BufferedLogger$$1.prototype;
    v1772.information = v1304;
    var v1773 = BufferedLogger$$1.prototype;
    v1773.debug = v1305;
    var v1774 = BufferedLogger$$1.prototype;
    v1774.warning = v1306;
    var v1775 = BufferedLogger$$1.prototype;
    v1775.error = v1307;
    var v1776 = BufferedLogger$$1.prototype;
    v1776.fatal = v1308;
    var v1777 = BufferedLogger$$1.prototype;
    v1777.log = v1309;
    return BufferedLogger$$1;
  }
  function v1303() {
    function v1302(s$$40) {
      var v1778 = this.logger;
      v1778.log(s$$40);
      return;
    }
    function v1301() {
      return this._fatal;
    }
    function v1300() {
      return this._error;
    }
    function v1299() {
      return this._warning;
    }
    function v1298() {
      return this._debug;
    }
    function v1297() {
      return this._information;
    }
    function LoggerAdapter$$1(logger$$8) {
      this.logger = logger$$8;
      var v1779 = this.logger;
      var v26444 = v1779.information();
      this._information = v26444;
      var v1780 = this.logger;
      var v26445 = v1780.debug();
      this._debug = v26445;
      var v1781 = this.logger;
      var v26446 = v1781.warning();
      this._warning = v26446;
      var v1782 = this.logger;
      var v26447 = v1782.error();
      this._error = v26447;
      var v1783 = this.logger;
      var v26448 = v1783.fatal();
      this._fatal = v26448;
      return;
    }
    var v1784 = LoggerAdapter$$1.prototype;
    v1784.information = v1297;
    var v1785 = LoggerAdapter$$1.prototype;
    v1785.debug = v1298;
    var v1786 = LoggerAdapter$$1.prototype;
    v1786.warning = v1299;
    var v1787 = LoggerAdapter$$1.prototype;
    v1787.error = v1300;
    var v1788 = LoggerAdapter$$1.prototype;
    v1788.fatal = v1301;
    var v1789 = LoggerAdapter$$1.prototype;
    v1789.log = v1302;
    return LoggerAdapter$$1;
  }
  function v1296() {
    function v1295(s$$39) {
      return;
    }
    function v1294() {
      return false;
    }
    function v1293() {
      return false;
    }
    function v1292() {
      return false;
    }
    function v1291() {
      return false;
    }
    function v1290() {
      return false;
    }
    function NullLogger$$1() {
      return;
    }
    var v1790 = NullLogger$$1.prototype;
    v1790.information = v1290;
    var v1791 = NullLogger$$1.prototype;
    v1791.debug = v1291;
    var v1792 = NullLogger$$1.prototype;
    v1792.warning = v1292;
    var v1793 = NullLogger$$1.prototype;
    v1793.error = v1293;
    var v1794 = NullLogger$$1.prototype;
    v1794.fatal = v1294;
    var v1795 = NullLogger$$1.prototype;
    v1795.log = v1295;
    return NullLogger$$1;
  }
  function v1289(CompilerDiagnostics$$1) {
    function Alert(output) {
      var v1797 = CompilerDiagnostics$$1.diagnosticWriter;
      if (v1797) {
        var v1796 = CompilerDiagnostics$$1.diagnosticWriter;
        v1796.Alert(output);
      }
      return;
    }
    function debugPrint(s$$37) {
      var v1798 = CompilerDiagnostics$$1.debug;
      if (v1798) {
        Alert(s$$37);
      }
      return;
    }
    function assert(condition$$1, s$$38) {
      var v1800 = CompilerDiagnostics$$1.debug;
      if (v1800) {
        var v1799 = !condition$$1;
        if (v1799) {
          Alert(s$$38);
        }
      }
      return;
    }
    CompilerDiagnostics$$1.debug = false;
    CompilerDiagnostics$$1.diagnosticWriter = null;
    CompilerDiagnostics$$1.analysisPass = 0;
    CompilerDiagnostics$$1.Alert = Alert;
    CompilerDiagnostics$$1.debugPrint = debugPrint;
    CompilerDiagnostics$$1.assert = assert;
    return;
  }
  function timeFunction(logger$$7, funcDescription$$1, func$$5) {
    var v1801 = new Date;
    var start$$14 = +v1801;
    var result$$39 = func$$5();
    var v1802 = new Date;
    var end$$7 = +v1802;
    var v18710 = funcDescription$$1 + " completed in ";
    var v18711 = end$$7 - start$$14;
    var v12554 = v18710 + v18711;
    var v1803 = v12554 + " msec";
    logger$$7.log(v1803);
    return result$$39;
  }
  function stringToLiteral(value$$41, length$$18) {
    function addChar(index$$65) {
      var ch$$1 = value$$41.charCodeAt(index$$65);
      switch(ch$$1) {
        case 9:
          result$$40 = result$$40 + "\\t";
          break;
        case 10:
          result$$40 = result$$40 + "\\n";
          break;
        case 11:
          result$$40 = result$$40 + "\\v";
          break;
        case 12:
          result$$40 = result$$40 + "\\f";
          break;
        case 13:
          result$$40 = result$$40 + "\\r";
          break;
        case 34:
          result$$40 = result$$40 + '\\"';
          break;
        case 39:
          result$$40 = result$$40 + "\\'";
          break;
        case 92:
          result$$40 = result$$40 + "\\";
          break;
        default:
          var v12555 = result$$40;
          var v12556 = value$$41.charAt(index$$65);
          result$$40 = v12555 + v12556;
      }
      return;
    }
    var result$$40 = "";
    var v1804 = value$$41.length;
    var tooLong = v1804 > length$$18;
    if (tooLong) {
      var mid$$1 = length$$18 >> 1;
      var i$$139 = 0;
      var v1805 = i$$139 < mid$$1;
      for (;v1805;) {
        addChar(i$$139);
        i$$139++;
        v1805 = i$$139 < mid$$1;
      }
      result$$40 = result$$40 + "(...)";
      var v1806 = value$$41.length;
      i$$139 = v1806 - mid$$1;
      var v12557 = value$$41.length;
      var v1807 = i$$139 < v12557;
      for (;v1807;) {
        addChar(i$$139);
        i$$139++;
        var v12558 = value$$41.length;
        v1807 = i$$139 < v12558;
      }
    } else {
      length$$18 = value$$41.length;
      i$$139 = 0;
      var v1808 = i$$139 < length$$18;
      for (;v1808;) {
        addChar(i$$139);
        i$$139++;
        v1808 = i$$139 < length$$18;
      }
    }
    return result$$40;
  }
  var v12559 = TypeScript$$33.CompilerDiagnostics;
  var v18712 = !v12559;
  if (v18712) {
    v12559 = TypeScript$$33.CompilerDiagnostics = {};
  }
  var v1809 = v12559;
  v1289(v1809);
  var CompilerDiagnostics = TypeScript$$33.CompilerDiagnostics;
  var NullLogger = v1296();
  TypeScript$$33.NullLogger = NullLogger;
  var LoggerAdapter = v1303();
  TypeScript$$33.LoggerAdapter = LoggerAdapter;
  var BufferedLogger = v1310();
  TypeScript$$33.BufferedLogger = BufferedLogger;
  TypeScript$$33.timeFunction = timeFunction;
  TypeScript$$33.stringToLiteral = stringToLiteral;
  return;
}
function v1288(TypeScript$$32) {
  function v1287() {
    function v1286(enclosingScopeContext$$5, allNames, scope$$36) {
      var result$$38 = [];
      var enclosingScope$$2 = enclosingScopeContext$$5.getScope();
      var i$$138 = 0;
      var v12560 = allNames.length;
      var v1818 = i$$138 < v12560;
      for (;v1818;) {
        var name$$89 = allNames[i$$138];
        var v1810 = enclosingScopeContext$$5.publicsOnly;
        if (v1810) {
          v1810 = enclosingScopeContext$$5.isMemberCompletion;
        }
        var publicsOnly = v1810;
        var symbol$$23 = scope$$36.find(name$$89, publicsOnly, false);
        var v1811 = symbol$$23 == null;
        if (v1811) {
          symbol$$23 = scope$$36.find(name$$89, publicsOnly, true);
        }
        var v1812;
        var v18713 = symbol$$23;
        if (v18713) {
          var v22819 = symbol$$23.flags;
          var v24824 = TypeScript$$32.SymbolFlags;
          var v22820 = v24824.Private;
          v18713 = v22819 & v22820;
        }
        var v12563 = v18713;
        if (v12563) {
          var v12561 = symbol$$23.container;
          var v12562 = scope$$36.container;
          v1812 = v12561 == v12562;
        } else {
          v1812 = true;
        }
        var displayThisMember = v1812;
        if (symbol$$23) {
          var v18714 = displayThisMember;
          if (v18714) {
            var v24825 = symbol$$23.name;
            var v22821 = TypeScript$$32.isQuoted(v24825);
            v18714 = !v22821;
          }
          var v12564 = v18714;
          if (v12564) {
            var v22822 = symbol$$23.name;
            var v18715 = TypeScript$$32.isRelative(v22822);
            v12564 = !v18715;
          }
          var v1815 = v12564;
          if (v1815) {
            var v1813 = symbol$$23.getType();
            var typeName$$11 = v1813.getScopedTypeName(enclosingScope$$2);
            var v1814 = new ScopeEntry(name$$89, typeName$$11, symbol$$23);
            result$$38.push(v1814);
          }
        } else {
          var v12565 = name$$89 == "true";
          var v18716 = !v12565;
          if (v18716) {
            v12565 = name$$89 == "false";
          }
          var v1817 = v12565;
          if (v1817) {
            var v24826 = this.compiler;
            var v22823 = v24826.typeChecker;
            var v18717 = v22823.booleanType;
            var v12566 = v18717.symbol;
            var v1816 = new ScopeEntry(name$$89, "bool", v12566);
            result$$38.push(v1816);
          }
        }
        i$$138++;
        var v12567 = allNames.length;
        v1818 = i$$138 < v12567;
      }
      return result$$38;
    }
    function v1285(enclosingScopeContext$$4) {
      var scope$$35 = this.getScope(enclosingScopeContext$$4);
      var v1819 = scope$$35 == null;
      if (v1819) {
        return[];
      }
      var v1820 = TypeScript$$32.StringHashTable;
      var inScopeNames = new v1820;
      var v1821 = enclosingScopeContext$$4.isMemberCompletion;
      var allSymbolNames = scope$$35.getAllSymbolNames(v1821);
      var i$$137 = 0;
      var v12568 = allSymbolNames.length;
      var v1823 = i$$137 < v12568;
      for (;v1823;) {
        var name$$88 = allSymbolNames[i$$137];
        var v22824 = TypeScript$$32.globalId;
        var v18718 = name$$88 == v22824;
        var v22825 = !v18718;
        if (v22825) {
          v18718 = name$$88 == "_Core";
        }
        var v12569 = v18718;
        var v18719 = !v12569;
        if (v18719) {
          v12569 = name$$88 == "_element";
        }
        var v1822 = v12569;
        if (v1822) {
          i$$137++;
          var v12570 = allSymbolNames.length;
          v1823 = i$$137 < v12570;
          continue;
        }
        inScopeNames.add(name$$88, "");
        i$$137++;
        var v12571 = allSymbolNames.length;
        v1823 = i$$137 < v12571;
      }
      var v12572 = this.compiler;
      var v1824 = v12572.typeChecker;
      var svModuleDecl = v1824.currentModDecl;
      var v12573 = this.compiler;
      var v1825 = v12573.typeChecker;
      v1825.currentModDecl = enclosingScopeContext$$4.deepestModuleDecl;
      var v1826 = inScopeNames.getAllKeys();
      var result$$37 = this.getTypeNamesForNames(enclosingScopeContext$$4, v1826, scope$$35);
      var v12574 = this.compiler;
      var v1827 = v12574.typeChecker;
      v1827.currentModDecl = svModuleDecl;
      return result$$37;
    }
    function v1284(enclosingScopeContext$$3) {
      var v12575 = enclosingScopeContext$$3.enclosingObjectLit;
      if (v12575) {
        v12575 = enclosingScopeContext$$3.isMemberCompletion;
      }
      var v1832 = v12575;
      if (v1832) {
        return enclosingScopeContext$$3.getObjectLiteralScope();
      } else {
        var v1831 = enclosingScopeContext$$3.isMemberCompletion;
        if (v1831) {
          var v1830 = enclosingScopeContext$$3.useFullAst;
          if (v1830) {
            var v12576 = this.compiler;
            var v1828 = v12576.typeFlow;
            return v1828.findMemberScopeAtFullAst(enclosingScopeContext$$3);
          } else {
            var v12577 = this.compiler;
            var v1829 = v12577.typeFlow;
            return v1829.findMemberScopeAt(enclosingScopeContext$$3);
          }
        } else {
          return enclosingScopeContext$$3.getScope();
        }
      }
      return;
    }
    function ScopeTraversal$$1(compiler$$2) {
      this.compiler = compiler$$2;
      return;
    }
    var v1833 = ScopeTraversal$$1.prototype;
    v1833.getScope = v1284;
    var v1834 = ScopeTraversal$$1.prototype;
    v1834.getScopeEntries = v1285;
    var v1835 = ScopeTraversal$$1.prototype;
    v1835.getTypeNamesForNames = v1286;
    return ScopeTraversal$$1;
  }
  function v1283() {
    function ScopeEntry$$1(name$$87, type$$60, sym$$49) {
      this.name = name$$87;
      this.type = type$$60;
      this.sym = sym$$49;
      return;
    }
    return ScopeEntry$$1;
  }
  function v1282() {
    function v1281(fileName$$8, useUTF8$$1) {
      try {
        var v12578 = this.emitSettings;
        var v1836 = v12578.ioHost;
        return v1836.createFile(fileName$$8, useUTF8$$1);
      } catch (ex$$6) {
        var v1837 = this.errorReporter;
        var v1838 = ex$$6.message;
        v1837.emitterError(null, v1838);
      }
      return;
    }
    function v1280(scripts) {
      var i$$136 = 0;
      var len$$68 = scripts.length;
      var v1840 = i$$136 < len$$68;
      for (;v1840;) {
        var script$$38 = scripts[i$$136];
        var v1839 = this.outputScriptToUTF8(script$$38);
        if (v1839) {
          return true;
        }
        i$$136++;
        v1840 = i$$136 < len$$68;
      }
      return false;
    }
    function v1279(script$$37) {
      var v1841 = script$$37.containsUnicodeChar;
      var v12580 = !v1841;
      if (v12580) {
        var v18720 = this.emitSettings;
        var v12579 = v18720.emitComments;
        if (v12579) {
          v12579 = script$$37.containsUnicodeCharInComment;
        }
        v1841 = v12579;
      }
      return v1841;
    }
    function v1278(ioHost$$4) {
      function v1277(fileName$$7, wholeFileNameReplaced$$3) {
        return TypeScriptCompiler$$1.mapToFileNameExtension(".txt", fileName$$7, wholeFileNameReplaced$$3);
      }
      this.parseEmitOption(ioHost$$4);
      var outFile$$1 = null;
      var context$$65 = null;
      var i$$135 = 0;
      var v12581 = this.scripts;
      var v1842 = v12581.members;
      var len$$67 = v1842.length;
      var v1856 = i$$135 < len$$67;
      for (;v1856;) {
        var v12582 = this.scripts;
        var v1843 = v12582.members;
        var script$$36 = v1843[i$$135];
        var v18721 = this.emitSettings;
        var v12583 = v18721.outputMany;
        var v18722 = !v12583;
        if (v18722) {
          v12583 = context$$65 == null;
        }
        var v1849 = v12583;
        if (v1849) {
          var v12584 = this.units;
          var v1844 = v12584[i$$135];
          var fname$$8 = v1844.filename;
          var mapToTxtFileName = v1277;
          var v1845 = this.emitSettings;
          var outFname$$2 = v1845.mapOutputFileName(fname$$8, mapToTxtFileName);
          var v1846 = this.useUTF8ForFile(script$$36);
          outFile$$1 = this.createFile(outFname$$2, v1846);
          var v1847 = TypeScript$$32.PrintContext;
          var v1848 = this.parser;
          context$$65 = new v1847(outFile$$1, v1848);
        }
        var v1850 = TypeScript$$32.getAstWalkerFactory();
        var v1851 = TypeScript$$32.prePrintAST;
        var v1852 = TypeScript$$32.postPrintAST;
        v1850.walk(script$$36, v1851, v1852, null, context$$65);
        var v12585 = this.emitSettings;
        var v1855 = v12585.outputMany;
        if (v1855) {
          try {
            outFile$$1.Close();
          } catch (e$$11) {
            var v1853 = this.errorReporter;
            var v1854 = e$$11.message;
            v1853.emitterError(null, v1854);
          }
        }
        i$$135++;
        v1856 = i$$135 < len$$67;
      }
      var v18723 = this.emitSettings;
      var v12586 = v18723.outputMany;
      var v1859 = !v12586;
      if (v1859) {
        try {
          outFile$$1.Close();
        } catch (e$$12) {
          var v1857 = this.errorReporter;
          var v1858 = e$$12.message;
          v1857.emitterError(null, v1858);
        }
      }
      return;
    }
    function v1276(outputFile) {
      var v12587 = this.settings;
      var v1860 = v12587.mapSourceFiles;
      if (v1860) {
        throw Error("Cannot generate source map");
      }
      var v12588 = this.settings;
      var v1861 = v12588.generateDeclarationFiles;
      if (v1861) {
        throw Error("Cannot generate declaration files");
      }
      var v18724 = this.settings;
      var v12589 = v18724.outputOption;
      var v1862 = v12589 != "";
      if (v1862) {
        throw Error("Cannot parse output option");
      }
      var v1863 = TypeScript$$32.Emitter;
      var v1864 = this.typeChecker;
      var v1865 = this.emitSettings;
      var v1866 = this.errorReporter;
      var emitter$$41 = emitter$$41 = new v1863(v1864, "stdout", outputFile, v1865, v1866);
      var i$$134 = 0;
      var v12590 = this.scripts;
      var v1867 = v12590.members;
      var len$$66 = v1867.length;
      var v1871 = i$$134 < len$$66;
      for (;v1871;) {
        var v12591 = this.scripts;
        var v1868 = v12591.members;
        var script$$35 = v1868[i$$134];
        var v1869 = this.typeChecker;
        v1869.locationInfo = script$$35.locationInfo;
        var v12592 = TypeScript$$32.TokenID;
        var v1870 = v12592.Comma;
        emitter$$41.emitJavascript(script$$35, v1870, false);
        i$$134++;
        v1871 = i$$134 < len$$66;
      }
      return;
    }
    function v1275(ioHost$$3) {
      this.parseEmitOption(ioHost$$3);
      var emitter$$40 = null;
      var i$$133 = 0;
      var v12593 = this.scripts;
      var v1872 = v12593.members;
      var len$$65 = v1872.length;
      var v1876 = i$$133 < len$$65;
      for (;v1876;) {
        var v12594 = this.scripts;
        var v1873 = v12594.members;
        var script$$34 = v1873[i$$133];
        var v18725 = this.emitSettings;
        var v12595 = v18725.outputMany;
        var v18726 = !v12595;
        if (v18726) {
          v12595 = emitter$$40 == null;
        }
        var v1875 = v12595;
        if (v1875) {
          var v18727 = this.emitSettings;
          var v12596 = v18727.outputMany;
          var v1874 = !v12596;
          emitter$$40 = this.emitUnit(script$$34, v1874);
        } else {
          this.emitUnit(script$$34, true, emitter$$40);
        }
        i$$133++;
        v1876 = i$$133 < len$$65;
      }
      if (emitter$$40) {
        emitter$$40.Close();
      }
      return;
    }
    function v1274(script$$33, reuseEmitter$$1, emitter$$39) {
      var v18728 = this.emitSettings;
      var v12597 = script$$33.emitRequired(v18728);
      var v1877 = !v12597;
      if (v1877) {
        return null;
      }
      var v1878 = script$$33.locationInfo;
      var fname$$7 = v1878.filename;
      var v1890 = !emitter$$39;
      if (v1890) {
        var v1879 = this.emitSettings;
        var v1880 = TypeScriptCompiler$$1.mapToJSFileName;
        var outFname$$1 = v1879.mapOutputFileName(fname$$7, v1880);
        var v1881 = this.useUTF8ForFile(script$$33);
        var outFile = this.createFile(outFname$$1, v1881);
        var v1882 = TypeScript$$32.Emitter;
        var v1883 = this.typeChecker;
        var v1884 = this.emitSettings;
        var v1885 = this.errorReporter;
        emitter$$39 = new v1882(v1883, outFname$$1, outFile, v1884, v1885);
        var v12598 = this.settings;
        var v1887 = v12598.mapSourceFiles;
        if (v1887) {
          var v12599 = TypeScript$$32.SourceMapper;
          var v24827 = TypeScript$$32.SourceMapper;
          var v22826 = v24827.MapFileExtension;
          var v18729 = outFname$$1 + v22826;
          var v12600 = this.createFile(v18729, false);
          var v12601 = this.errorReporter;
          var v1886 = new v12599(fname$$7, outFname$$1, outFile, v12600, v12601);
          emitter$$39.setSourceMappings(v1886);
        }
      } else {
        var v12602 = this.settings;
        var v1889 = v12602.mapSourceFiles;
        if (v1889) {
          var v12603 = TypeScript$$32.SourceMapper;
          var v12604 = emitter$$39.emittingFileName;
          var v12605 = emitter$$39.outfile;
          var v18730 = emitter$$39.sourceMapper;
          var v12606 = v18730.sourceMapOut;
          var v12607 = this.errorReporter;
          var v1888 = new v12603(fname$$7, v12604, v12605, v12606, v12607);
          emitter$$39.setSourceMappings(v1888);
        }
      }
      var v1891 = this.typeChecker;
      v1891.locationInfo = script$$33.locationInfo;
      var v12608 = TypeScript$$32.TokenID;
      var v1892 = v12608.Comma;
      emitter$$39.emitJavascript(script$$33, v1892, false);
      var v1893 = !reuseEmitter$$1;
      if (v1893) {
        emitter$$39.Close();
        return null;
      } else {
        return emitter$$39;
      }
      return;
    }
    function mapToJSFileName(fileName$$6, wholeFileNameReplaced$$2) {
      return TypeScriptCompiler$$1.mapToFileNameExtension(".js", fileName$$6, wholeFileNameReplaced$$2);
    }
    function mapToFileNameExtension(extension, fileName$$5, wholeFileNameReplaced$$1) {
      if (wholeFileNameReplaced$$1) {
        return fileName$$5;
      } else {
        var splitFname = fileName$$5.split(".");
        splitFname.pop();
        var v1894 = splitFname.join(".");
        return v1894 + extension;
      }
      return;
    }
    function v1273() {
      var v12609 = this.canEmitDeclarations();
      var v1895 = !v12609;
      if (v1895) {
        return;
      }
      var v12610 = this.errorReporter;
      var v1896 = v12610.hasErrors;
      if (v1896) {
        return;
      }
      var v22827 = this.scripts;
      var v18731 = v22827.members;
      var v12611 = v18731.length;
      var v1897 = v12611 == 0;
      if (v1897) {
        return;
      }
      var declarationEmitter$$1 = null;
      var i$$132 = 0;
      var v12612 = this.scripts;
      var v1898 = v12612.members;
      var len$$64 = v1898.length;
      var v1902 = i$$132 < len$$64;
      for (;v1902;) {
        var v12613 = this.scripts;
        var v1899 = v12613.members;
        var script$$32 = v1899[i$$132];
        var v18732 = this.emitSettings;
        var v12614 = v18732.outputMany;
        var v18733 = !v12614;
        if (v18733) {
          v12614 = declarationEmitter$$1 == null;
        }
        var v1901 = v12614;
        if (v1901) {
          var v18734 = this.emitSettings;
          var v12615 = v18734.outputMany;
          var v1900 = !v12615;
          declarationEmitter$$1 = this.emitDeclarationsUnit(script$$32, v1900);
        } else {
          this.emitDeclarationsUnit(script$$32, true, declarationEmitter$$1);
        }
        i$$132++;
        v1902 = i$$132 < len$$64;
      }
      if (declarationEmitter$$1) {
        declarationEmitter$$1.Close();
      }
      return;
    }
    function v1272(script$$31, reuseEmitter, declarationEmitter) {
      var v12616 = this.canEmitDeclarations(script$$31);
      var v1903 = !v12616;
      if (v1903) {
        return null;
      }
      var v1912 = !declarationEmitter;
      if (v1912) {
        var v1904 = this.emitSettings;
        var v12617 = script$$31.locationInfo;
        var v1905 = v12617.filename;
        var v1906 = TypeScriptCompiler$$1.mapToDTSFileName;
        var declareFileName$$2 = v1904.mapOutputFileName(v1905, v1906);
        var v1907 = this.useUTF8ForFile(script$$31);
        var declareFile = this.createFile(declareFileName$$2, v1907);
        var v1908 = TypeScript$$32.DeclarationEmitter;
        var v1909 = this.typeChecker;
        var v1910 = this.emitSettings;
        var v1911 = this.errorReporter;
        declarationEmitter = new v1908(v1909, v1910, v1911);
        declarationEmitter.setDeclarationFile(declareFile);
      }
      declarationEmitter.emitDeclarations(script$$31);
      var v1913 = !reuseEmitter;
      if (v1913) {
        declarationEmitter.Close();
        return null;
      } else {
        return declarationEmitter;
      }
      return;
    }
    function v1271(script$$30) {
      var v18735 = this.settings;
      var v12618 = v18735.generateDeclarationFiles;
      var v1914 = !v12618;
      if (v1914) {
        return false;
      }
      var v18736 = !script$$30;
      var v12619 = !v18736;
      if (v12619) {
        var v22828 = script$$30.isDeclareFile;
        var v24828 = !v22828;
        if (v24828) {
          v22828 = script$$30.isResident;
        }
        var v18737 = v22828;
        var v22830 = !v18737;
        if (v22830) {
          var v22829 = script$$30.bod;
          v18737 = v22829 == null;
        }
        v12619 = v18737;
      }
      var v1915 = v12619;
      if (v1915) {
        return false;
      }
      return true;
    }
    function mapToDTSFileName(fileName$$4, wholeFileNameReplaced) {
      return TypeScript$$32.getDeclareFilePath(fileName$$4);
    }
    function v1270(script$$29) {
      var v12620 = this.emitSettings;
      var v1917 = v12620.outputMany;
      if (v1917) {
        return this.outputScriptToUTF8(script$$29);
      } else {
        var v12621 = this.scripts;
        var v1916 = v12621.members;
        return this.outputScriptsToUTF8(v1916);
      }
      return;
    }
    function v1269(ioHost$$2) {
      var v1918 = this.emitSettings;
      v1918.ioHost = ioHost$$2;
      var v18738 = this.emitSettings;
      var v12622 = v18738.outputOption;
      var v1921 = v12622 == "";
      if (v1921) {
        var v1919 = this.emitSettings;
        v1919.outputMany = true;
        var v1920 = this.emitSettings;
        v1920.commonDirectoryPath = "";
        return;
      }
      var v1922 = this.emitSettings;
      var v22831 = this.emitSettings;
      var v18739 = v22831.ioHost;
      var v22832 = this.emitSettings;
      var v18740 = v22832.outputOption;
      var v12623 = v18739.resolvePath(v18740);
      var v26449 = TypeScript$$32.switchToForwardSlashes(v12623);
      v1922.outputOption = v26449;
      var v18741 = this.emitSettings;
      var v12624 = v18741.ioHost;
      var v18742 = this.emitSettings;
      var v12625 = v18742.outputOption;
      var v1927 = v12624.directoryExists(v12625);
      if (v1927) {
        var v1923 = this.emitSettings;
        v1923.outputMany = true;
      } else {
        var v18743 = this.emitSettings;
        var v12626 = v18743.ioHost;
        var v18744 = this.emitSettings;
        var v12627 = v18744.outputOption;
        var v1926 = v12626.fileExists(v12627);
        if (v1926) {
          var v1924 = this.emitSettings;
          v1924.outputMany = false;
        } else {
          var v1925 = this.emitSettings;
          var v22833 = this.emitSettings;
          var v18745 = v22833.outputOption;
          var v12628 = TypeScript$$32.isJSFile(v18745);
          v1925.outputMany = !v12628;
        }
      }
      var v12629 = this.isDynamicModuleCompilation();
      if (v12629) {
        var v22834 = this.emitSettings;
        var v18746 = v22834.outputMany;
        v12629 = !v18746;
      }
      var v1929 = v12629;
      if (v1929) {
        var v1928 = this.errorReporter;
        v1928.emitterError(null, "Cannot compile dynamic modules when emitting into single file");
      }
      var v12630 = this.emitSettings;
      var v1930 = v12630.outputMany;
      if (v1930) {
        this.updateCommonDirectoryPath();
      }
      return;
    }
    function v1268() {
      var commonComponents = [];
      var commonComponentsLength = -1;
      var i$$131 = 0;
      var v12631 = this.scripts;
      var v1931 = v12631.members;
      var len$$63 = v1931.length;
      var v1941 = i$$131 < len$$63;
      for (;v1941;) {
        var v12632 = this.scripts;
        var v1932 = v12632.members;
        var script$$28 = v1932[i$$131];
        var v12633 = this.emitSettings;
        var v1940 = script$$28.emitRequired(v12633);
        if (v1940) {
          var v1933 = script$$28.locationInfo;
          var fileName$$3 = v1933.filename;
          var fileComponents = TypeScript$$32.filePathComponents(fileName$$3);
          var v1939 = commonComponentsLength == -1;
          if (v1939) {
            commonComponents = fileComponents;
            commonComponentsLength = commonComponents.length;
          } else {
            var updatedPath = false;
            var j$$20 = 0;
            var v12634 = j$$20 < commonComponentsLength;
            if (v12634) {
              var v18747 = fileComponents.length;
              v12634 = j$$20 < v18747;
            }
            var v1937 = v12634;
            for (;v1937;) {
              var v12635 = commonComponents[j$$20];
              var v12636 = fileComponents[j$$20];
              var v1936 = v12635 != v12636;
              if (v1936) {
                commonComponentsLength = j$$20;
                updatedPath = true;
                var v1935 = j$$20 == 0;
                if (v1935) {
                  var v1934 = this.errorReporter;
                  v1934.emitterError(null, "Cannot find the common subdirectory path for the input files");
                  return;
                }
                break;
              }
              j$$20++;
              var v12637 = j$$20 < commonComponentsLength;
              if (v12637) {
                var v18748 = fileComponents.length;
                v12637 = j$$20 < v18748;
              }
              v1937 = v12637;
            }
            var v12638 = !updatedPath;
            if (v12638) {
              var v18749 = fileComponents.length;
              v12638 = v18749 < commonComponentsLength;
            }
            var v1938 = v12638;
            if (v1938) {
              commonComponentsLength = fileComponents.length;
            }
          }
        }
        i$$131++;
        v1941 = i$$131 < len$$63;
      }
      var v1942 = this.emitSettings;
      var v18750 = commonComponents.slice(0, commonComponentsLength);
      var v12639 = v18750.join("/");
      v1942.commonDirectoryPath = v12639 + "/";
      var v22835 = this.emitSettings;
      var v18751 = v22835.outputOption;
      var v25696 = this.emitSettings;
      var v24829 = v25696.outputOption;
      var v22836 = v24829.length;
      var v18752 = v22836 - 1;
      var v12640 = v18751.charAt(v18752);
      var v1944 = v12640 != "/";
      if (v1944) {
        var v1943 = this.emitSettings;
        var v18753 = v1943.outputOption;
        v1943.outputOption = v18753 + "/";
      }
      return;
    }
    function v1267() {
      var i$$130 = 0;
      var v12641 = this.scripts;
      var v1945 = v12641.members;
      var len$$62 = v1945.length;
      var v1948 = i$$130 < len$$62;
      for (;v1948;) {
        var v12642 = this.scripts;
        var v1946 = v12642.members;
        var script$$27 = v1946[i$$130];
        var v18754 = script$$27.isDeclareFile;
        var v12643 = !v18754;
        if (v12643) {
          var v18755 = script$$27.topLevelMod;
          v12643 = v18755 != null;
        }
        var v1947 = v12643;
        if (v1947) {
          return true;
        }
        i$$130++;
        v1948 = i$$130 < len$$62;
      }
      return false;
    }
    function v1266() {
      function v1265() {
        TypeScript$$32.CompilerDiagnostics.analysisPass++;
        var v1949 = _this$$20.errorOutput;
        _this$$20.initTypeChecker(v1949);
        var v1950 = _this$$20.persistentTypeState;
        var v12644 = TypeScript$$32.TypeCheckCollectionMode;
        var v1951 = v12644.Transient;
        v1950.setCollectionMode(v1951);
        _this$$20.cleanTypesForReTypeCheck();
        return _this$$20.typeCheck();
      }
      var _this$$20 = this;
      return this.timeFunction("reTypeCheck()", v1265);
    }
    function v1264(updateResult$$4) {
      function v1263() {
        return false;
      }
      return this.timeFunction("attemptIncrementalTypeCheck()", v1263);
    }
    function v1262() {
      function v1261() {
        var i$$129 = 0;
        var v12645 = _this$$19.scripts;
        var v1952 = v12645.members;
        var len$$61 = v1952.length;
        var v1956 = i$$129 < len$$61;
        for (;v1956;) {
          var v12646 = _this$$19.scripts;
          var v1953 = v12646.members;
          var script$$26 = v1953[i$$129];
          var v1954 = script$$26.isResident;
          if (v1954) {
            i$$129++;
            v1956 = i$$129 < len$$61;
            continue;
          }
          _this$$19.cleanASTTypesForReTypeCheck(script$$26);
          var v1955 = _this$$19.typeChecker;
          v1955.collectTypes(script$$26);
          i$$129++;
          v1956 = i$$129 < len$$61;
        }
        return null;
      }
      var _this$$19 = this;
      return this.timeFunction("cleanTypesForReTypeCheck()", v1261);
    }
    function v1260(ast$$122) {
      function cleanASTType(ast$$123, parent$$72) {
        ast$$123.type = null;
        var v12647 = ast$$123.nodeType;
        var v18756 = TypeScript$$32.NodeType;
        var v12648 = v18756.VarDecl;
        var v1963 = v12647 == v12648;
        if (v1963) {
          var vardecl = ast$$123;
          vardecl.sym = null;
        } else {
          var v12649 = ast$$123.nodeType;
          var v18757 = TypeScript$$32.NodeType;
          var v12650 = v18757.ArgDecl;
          var v1962 = v12649 == v12650;
          if (v1962) {
            var argdecl = ast$$123;
            argdecl.sym = null;
          } else {
            var v12651 = ast$$123.nodeType;
            var v18758 = TypeScript$$32.NodeType;
            var v12652 = v18758.Name;
            var v1961 = v12651 == v12652;
            if (v1961) {
              var name$$86 = ast$$123;
              name$$86.sym = null;
            } else {
              var v12653 = ast$$123.nodeType;
              var v18759 = TypeScript$$32.NodeType;
              var v12654 = v18759.FuncDecl;
              var v1960 = v12653 == v12654;
              if (v1960) {
                var funcdecl = ast$$123;
                funcdecl.signature = null;
                var v26450 = new Array;
                funcdecl.freeVariables = v26450;
                funcdecl.symbols = null;
                funcdecl.accessorSymbol = null;
                funcdecl.scopeType = null;
              } else {
                var v12655 = ast$$123.nodeType;
                var v18760 = TypeScript$$32.NodeType;
                var v12656 = v18760.ModuleDeclaration;
                var v1959 = v12655 == v12656;
                if (v1959) {
                  var modDecl$$3 = ast$$123;
                  modDecl$$3.mod = null;
                } else {
                  var v12657 = ast$$123.nodeType;
                  var v18761 = TypeScript$$32.NodeType;
                  var v12658 = v18761.With;
                  var v1958 = v12657 == v12658;
                  if (v1958) {
                    ast$$123.withSym = null;
                  } else {
                    var v12659 = ast$$123.nodeType;
                    var v18762 = TypeScript$$32.NodeType;
                    var v12660 = v18762.Catch;
                    var v1957 = v12659 == v12660;
                    if (v1957) {
                      ast$$123.containedScope = null;
                    }
                  }
                }
              }
            }
          }
        }
        return ast$$123;
      }
      var v1964 = TypeScript$$32.getAstWalkerFactory();
      v1964.walk(ast$$122, cleanASTType);
      return;
    }
    function v1259() {
      function v1258() {
        var v1965 = TypeScript$$32.Binder;
        var v1966 = _this$$18.typeChecker;
        var binder$$1 = new v1965(v1966);
        var v1967 = _this$$18.typeChecker;
        v1967.units = _this$$18.units;
        var v12661 = _this$$18.typeChecker;
        var v1968 = v12661.globalScope;
        var v12662 = _this$$18.typeChecker;
        var v1969 = v12662.globals;
        binder$$1.bind(v1968, v1969);
        var v12663 = _this$$18.typeChecker;
        var v1970 = v12663.globalScope;
        var v12664 = _this$$18.typeChecker;
        var v1971 = v12664.ambientGlobals;
        binder$$1.bind(v1970, v1971);
        var v12665 = _this$$18.typeChecker;
        var v1972 = v12665.globalScope;
        var v12666 = _this$$18.typeChecker;
        var v1973 = v12666.globalTypes;
        binder$$1.bind(v1972, v1973);
        var v12667 = _this$$18.typeChecker;
        var v1974 = v12667.globalScope;
        var v12668 = _this$$18.typeChecker;
        var v1975 = v12668.ambientGlobalTypes;
        binder$$1.bind(v1974, v1975);
        var v1976 = _this$$18;
        var v12669 = TypeScript$$32.TypeFlow;
        var v12670 = _this$$18.logger;
        var v18763 = _this$$18.typeChecker;
        var v12671 = v18763.globalScope;
        var v12672 = _this$$18.parser;
        var v12673 = _this$$18.typeChecker;
        var v26451 = new v12669(v12670, v12671, v12672, v12673);
        v1976.typeFlow = v26451;
        var i$$128 = 0;
        var script$$25 = null;
        var v12674 = _this$$18.scripts;
        var v1977 = v12674.members;
        var len$$60 = v1977.length;
        var v1978 = _this$$18.persistentTypeState;
        var v12675 = TypeScript$$32.TypeCheckCollectionMode;
        var v1979 = v12675.Resident;
        v1978.setCollectionMode(v1979);
        i$$128 = 0;
        var v1984 = i$$128 < len$$60;
        for (;v1984;) {
          var v12676 = _this$$18.scripts;
          var v1980 = v12676.members;
          script$$25 = v1980[i$$128];
          var v18764 = script$$25.isResident;
          var v12677 = !v18764;
          var v18765 = !v12677;
          if (v18765) {
            v12677 = script$$25.hasBeenTypeChecked;
          }
          var v1981 = v12677;
          if (v1981) {
            i$$128++;
            v1984 = i$$128 < len$$60;
            continue;
          }
          var v1982 = _this$$18.typeFlow;
          v1982.assignScopes(script$$25);
          var v1983 = _this$$18.typeFlow;
          v1983.initLibs();
          i$$128++;
          v1984 = i$$128 < len$$60;
        }
        i$$128 = 0;
        var v1988 = i$$128 < len$$60;
        for (;v1988;) {
          var v12678 = _this$$18.scripts;
          var v1985 = v12678.members;
          script$$25 = v1985[i$$128];
          var v18766 = script$$25.isResident;
          var v12679 = !v18766;
          var v18767 = !v12679;
          if (v18767) {
            v12679 = script$$25.hasBeenTypeChecked;
          }
          var v1986 = v12679;
          if (v1986) {
            i$$128++;
            v1988 = i$$128 < len$$60;
            continue;
          }
          var v1987 = _this$$18.typeFlow;
          v1987.typeCheck(script$$25);
          script$$25.hasBeenTypeChecked = true;
          i$$128++;
          v1988 = i$$128 < len$$60;
        }
        var v1989 = _this$$18.persistentTypeState;
        var v12680 = TypeScript$$32.TypeCheckCollectionMode;
        var v1990 = v12680.Transient;
        v1989.setCollectionMode(v1990);
        var v12681 = _this$$18.scripts;
        var v1991 = v12681.members;
        len$$60 = v1991.length;
        i$$128 = 0;
        var v1996 = i$$128 < len$$60;
        for (;v1996;) {
          var v12682 = _this$$18.scripts;
          var v1992 = v12682.members;
          script$$25 = v1992[i$$128];
          var v1993 = script$$25.isResident;
          if (v1993) {
            i$$128++;
            v1996 = i$$128 < len$$60;
            continue;
          }
          var v1994 = _this$$18.typeFlow;
          v1994.assignScopes(script$$25);
          var v1995 = _this$$18.typeFlow;
          v1995.initLibs();
          i$$128++;
          v1996 = i$$128 < len$$60;
        }
        i$$128 = 0;
        var v2000 = i$$128 < len$$60;
        for (;v2000;) {
          var v12683 = _this$$18.scripts;
          var v1997 = v12683.members;
          script$$25 = v1997[i$$128];
          var v1998 = script$$25.isResident;
          if (v1998) {
            i$$128++;
            v2000 = i$$128 < len$$60;
            continue;
          }
          var v1999 = _this$$18.typeFlow;
          v1999.typeCheck(script$$25);
          i$$128++;
          v2000 = i$$128 < len$$60;
        }
        return null;
      }
      var _this$$18 = this;
      return this.timeFunction("typeCheck()", v1258);
    }
    function v1257(sourceText$$9, filename$$9) {
      var v2001 = this.parser;
      var v2002 = this.errorOutput;
      v2001.setErrorRecovery(v2002);
      var v2003 = this.parser;
      var script$$24 = v2003.parse(sourceText$$9, filename$$9, 0);
      var v2004 = this.units;
      var index$$64 = v2004.length;
      var v2005 = this.units;
      v2005[index$$64] = script$$24.locationInfo;
      var v2006 = this.typeChecker;
      v2006.collectTypes(script$$24);
      var v2007 = this.scripts;
      v2007.append(script$$24);
      return;
    }
    function v1256(prog$$2, filename$$8) {
      var v12684 = TypeScript$$32.StringSourceText;
      var v2008 = new v12684(prog$$2);
      return this.parseSourceUnit(v2008, filename$$8);
    }
    function v1255(sourceText$$8, filename$$7, keepResident$$1, referencedFiles$$2) {
      function v1254() {
        var v2009 = _this$$17.parser;
        var v12685 = _this$$17.units;
        var v2010 = v12685.length;
        var v12686 = TypeScript$$32.AllowedElements;
        var v2011 = v12686.Global;
        var script$$23 = v2009.parse(sourceText$$8, filename$$7, v2010, v2011);
        script$$23.referencedFiles = referencedFiles$$2;
        script$$23.isResident = keepResident$$1;
        var v2012 = _this$$17.persistentTypeState;
        var v12687;
        if (keepResident$$1) {
          var v18768 = TypeScript$$32.TypeCheckCollectionMode;
          v12687 = v18768.Resident;
        } else {
          var v18769 = TypeScript$$32.TypeCheckCollectionMode;
          v12687 = v18769.Transient;
        }
        var v2013 = v12687;
        v2012.setCollectionMode(v2013);
        var v2014 = _this$$17.units;
        var index$$63 = v2014.length;
        var v2015 = _this$$17.units;
        v2015[index$$63] = script$$23.locationInfo;
        var v2016 = _this$$17.typeChecker;
        v2016.collectTypes(script$$23);
        var v2017 = _this$$17.scripts;
        v2017.append(script$$23);
        return script$$23;
      }
      var v12688 = typeof referencedFiles$$2;
      var v2018 = v12688 === "undefined";
      if (v2018) {
        referencedFiles$$2 = [];
      }
      var _this$$17 = this;
      var v22837 = "addSourceUnit(" + filename$$7;
      var v18770 = v22837 + ", ";
      var v12689 = v18770 + keepResident$$1;
      var v2019 = v12689 + ")";
      return this.timeFunction(v2019, v1254);
    }
    function v1253(prog$$1, filename$$6, keepResident, referencedFiles$$1) {
      var v12690 = typeof keepResident;
      var v2020 = v12690 === "undefined";
      if (v2020) {
        keepResident = false;
      }
      var v12691 = typeof referencedFiles$$1;
      var v2021 = v12691 === "undefined";
      if (v2021) {
        referencedFiles$$1 = [];
      }
      var v12692 = TypeScript$$32.StringSourceText;
      var v2022 = new v12692(prog$$1);
      return this.addSourceUnit(v2022, filename$$6, keepResident, referencedFiles$$1);
    }
    function v1252(sourceText$$7, filename$$5, setRecovery$$2) {
      function v1251() {
        function v1250(minChar$$36, charLen$$1, message$$21, unitIndex$$14) {
          var v12693 = minChar$$36 + charLen$$1;
          var v2023 = new ErrorEntry(unitIndex$$14, minChar$$36, v12693, message$$21);
          parseErrors$$4.push(v2023);
          return;
        }
        var i$$127 = 0;
        var v2024 = _this$$16.units;
        var len$$59 = v2024.length;
        var v2033 = i$$127 < len$$59;
        for (;v2033;) {
          var v22838 = _this$$16.units;
          var v18771 = v22838[i$$127];
          var v12694 = v18771.filename;
          var v2032 = v12694 == filename$$5;
          if (v2032) {
            var v22839 = _this$$16.scripts;
            var v18772 = v22839.members;
            var v12695 = v18772[i$$127];
            var v2025 = v12695.isResident;
            if (v2025) {
              return UpdateUnitResult.noEdits(i$$127);
            }
            if (setRecovery$$2) {
              var v2026 = _this$$16.parser;
              v2026.setErrorRecovery(null);
            }
            var updateResult$$3;
            var parseErrors$$4 = [];
            var errorCapture$$2 = v1250;
            var v2027 = _this$$16.parser;
            var svErrorCallback = v2027.errorCallback;
            if (svErrorCallback) {
              var v2028 = _this$$16.parser;
              v2028.errorCallback = errorCapture$$2;
            }
            var v12696 = _this$$16.scripts;
            var v2029 = v12696.members;
            var oldScript = v2029[i$$127];
            var v2030 = _this$$16.parser;
            var newScript = v2030.parse(sourceText$$7, filename$$5, i$$127);
            if (svErrorCallback) {
              var v2031 = _this$$16.parser;
              v2031.errorCallback = svErrorCallback;
            }
            updateResult$$3 = UpdateUnitResult.unknownEdits(oldScript, newScript, parseErrors$$4);
            return updateResult$$3;
          }
          i$$127++;
          v2033 = i$$127 < len$$59;
        }
        var v12697 = 'Unknown file "' + filename$$5;
        var v2034 = v12697 + '"';
        throw new Error(v2034);
      }
      var _this$$16 = this;
      var v12698 = "partialUpdateUnit(" + filename$$5;
      var v2035 = v12698 + ")";
      return this.timeFunction(v2035, v1251);
    }
    function v1249(updateResult$$2) {
      var v2050 = updateResult$$2.kind;
      switch(v2050) {
        case UpdateUnitKind.NoEdits:
          return false;
        case UpdateUnitKind.Unknown:
          var v12699 = this.scripts;
          var v2036 = v12699.members;
          var v2037 = updateResult$$2.unitIndex;
          v2036[v2037] = updateResult$$2.script2;
          var v2038 = this.units;
          var v2039 = updateResult$$2.unitIndex;
          var v12700 = updateResult$$2.script2;
          v2038[v2039] = v12700.locationInfo;
          var i$$126 = 0;
          var v2040 = updateResult$$2.parseErrors;
          var len$$58 = v2040.length;
          var v2048 = i$$126 < len$$58;
          for (;v2048;) {
            var v2041 = updateResult$$2.parseErrors;
            var e$$10 = v2041[i$$126];
            var v12701 = this.parser;
            var v2047 = v12701.errorCallback;
            if (v2047) {
              var v2042 = this.parser;
              var v2043 = e$$10.minChar;
              var v12702 = e$$10.limChar;
              var v12703 = e$$10.minChar;
              var v2044 = v12702 - v12703;
              var v2045 = e$$10.message;
              var v2046 = e$$10.unitIndex;
              v2042.errorCallback(v2043, v2044, v2045, v2046);
            }
            i$$126++;
            v2048 = i$$126 < len$$58;
          }
          return true;
        case UpdateUnitKind.EditsInsideSingleScope:
          var v12704 = TypeScript$$32.IncrementalParser;
          var v12705 = this.logger;
          var v2049 = new v12704(v12705);
          v2049.mergeTrees(updateResult$$2);
          return true;
      }
      return;
    }
    function v1248(sourceText$$6, filename$$4, setRecovery$$1) {
      function v1247() {
        var updateResult$$1 = _this$$15.partialUpdateUnit(sourceText$$6, filename$$4, setRecovery$$1);
        return _this$$15.applyUpdateResult(updateResult$$1);
      }
      var _this$$15 = this;
      var v12706 = "updateSourceUnit(" + filename$$4;
      var v2051 = v12706 + ")";
      return this.timeFunction(v2051, v1247);
    }
    function v1246(prog, filename$$3, setRecovery) {
      var v12707 = TypeScript$$32.StringSourceText;
      var v2052 = new v12707(prog);
      return this.updateSourceUnit(v2052, filename$$3, setRecovery);
    }
    function v1245(fn$$10) {
      var v2053 = this.parser;
      v2053.errorCallback = fn$$10;
      return;
    }
    function v1244() {
      var v2054 = TypeScript$$32.EmitOptions;
      var v2055 = this.settings;
      var v26452 = new v2054(v2055);
      this.emitSettings = v26452;
      return;
    }
    function v1243(outerr$$2) {
      this.errorOutput = outerr$$2;
      var v2056 = this.errorReporter;
      v2056.setErrOut(outerr$$2);
      var v2057 = this.parser;
      v2057.outfile = outerr$$2;
      return;
    }
    function v1242(errorOutput$$1) {
      var v2058 = this.persistentTypeState;
      v2058.refreshPersistentState();
      var v2059 = TypeScript$$32.TypeChecker;
      var v2060 = this.persistentTypeState;
      var v26453 = new v2059(v2060);
      this.typeChecker = v26453;
      var v2061 = this.typeChecker;
      v2061.errorReporter = this.errorReporter;
      var v2062 = this.typeChecker;
      var v12708 = this.settings;
      v2062.checkControlFlow = v12708.controlFlow;
      var v2063 = this.typeChecker;
      var v12709 = this.settings;
      v2063.checkControlFlowUseDef = v12709.controlFlowUseDef;
      var v2064 = this.typeChecker;
      var v12710 = this.settings;
      v2064.printControlFlowGraph = v12710.printControlFlow;
      var v2065 = this.typeChecker;
      var v12711 = this.settings;
      v2065.errorsOnWith = v12711.errorOnWith;
      var v2066 = this.typeChecker;
      var v12712 = this.settings;
      v2066.styleSettings = v12712.styleSettings;
      var v2067 = this.typeChecker;
      var v12713 = this.settings;
      v2067.canCallDefinitionSignature = v12713.canCallDefinitionSignature;
      var v2068 = this.errorReporter;
      v2068.checker = this.typeChecker;
      var v2069 = this.errorOutput;
      this.setErrorOutput(v2069);
      return;
    }
    function v1241(funcDescription, func$$4) {
      var v2070 = this.logger;
      return TypeScript$$32.timeFunction(v2070, funcDescription, func$$4);
    }
    function TypeScriptCompiler$$1(errorOutput, logger$$6, settings$$4) {
      var v12714 = typeof logger$$6;
      var v2072 = v12714 === "undefined";
      if (v2072) {
        var v2071 = TypeScript$$32.NullLogger;
        logger$$6 = new v2071;
      }
      var v12715 = typeof settings$$4;
      var v2073 = v12715 === "undefined";
      if (v2073) {
        settings$$4 = TypeScript$$32.defaultSettings;
      }
      this.errorOutput = errorOutput;
      this.logger = logger$$6;
      this.settings = settings$$4;
      var v2074 = TypeScript$$32.Parser;
      var v26454 = new v2074;
      this.parser = v26454;
      this.typeFlow = null;
      var v2075 = TypeScript$$32.ASTList;
      var v26455 = new v2075;
      this.scripts = v26455;
      var v26456 = new Array;
      this.units = v26456;
      var v2076 = TypeScript$$32.ErrorReporter;
      var v2077 = this.errorOutput;
      var v26457 = new v2076(v2077);
      this.errorReporter = v26457;
      var v2078 = TypeScript$$32.PersistentGlobalTypeState;
      var v2079 = this.errorReporter;
      var v26458 = new v2078(v2079);
      this.persistentTypeState = v26458;
      var v2080 = this.errorReporter;
      v2080.parser = this.parser;
      var v2081 = this.errorOutput;
      this.initTypeChecker(v2081);
      var v2082 = this.parser;
      var v18773 = this.settings;
      var v12716 = v18773.styleSettings;
      v2082.style_requireSemi = v12716.requireSemi;
      var v2083 = this.parser;
      var v18774 = this.settings;
      var v12717 = v18774.styleSettings;
      v2083.style_funcInLoop = v12717.funcInLoop;
      var v2084 = this.parser;
      var v12718 = this.settings;
      v2084.inferPropertiesFromThisAssignment = v12718.inferPropertiesFromThisAssignment;
      var v2085 = TypeScript$$32.EmitOptions;
      var v2086 = this.settings;
      var v26459 = new v2085(v2086);
      this.emitSettings = v26459;
      TypeScript$$32.codeGenTarget = settings$$4.codeGenTarget;
      return;
    }
    var v2087 = TypeScriptCompiler$$1.prototype;
    v2087.timeFunction = v1241;
    var v2088 = TypeScriptCompiler$$1.prototype;
    v2088.initTypeChecker = v1242;
    var v2089 = TypeScriptCompiler$$1.prototype;
    v2089.setErrorOutput = v1243;
    var v2090 = TypeScriptCompiler$$1.prototype;
    v2090.emitCommentsToOutput = v1244;
    var v2091 = TypeScriptCompiler$$1.prototype;
    v2091.setErrorCallback = v1245;
    var v2092 = TypeScriptCompiler$$1.prototype;
    v2092.updateUnit = v1246;
    var v2093 = TypeScriptCompiler$$1.prototype;
    v2093.updateSourceUnit = v1248;
    var v2094 = TypeScriptCompiler$$1.prototype;
    v2094.applyUpdateResult = v1249;
    var v2095 = TypeScriptCompiler$$1.prototype;
    v2095.partialUpdateUnit = v1252;
    var v2096 = TypeScriptCompiler$$1.prototype;
    v2096.addUnit = v1253;
    var v2097 = TypeScriptCompiler$$1.prototype;
    v2097.addSourceUnit = v1255;
    var v2098 = TypeScriptCompiler$$1.prototype;
    v2098.parseUnit = v1256;
    var v2099 = TypeScriptCompiler$$1.prototype;
    v2099.parseSourceUnit = v1257;
    var v2100 = TypeScriptCompiler$$1.prototype;
    v2100.typeCheck = v1259;
    var v2101 = TypeScriptCompiler$$1.prototype;
    v2101.cleanASTTypesForReTypeCheck = v1260;
    var v2102 = TypeScriptCompiler$$1.prototype;
    v2102.cleanTypesForReTypeCheck = v1262;
    var v2103 = TypeScriptCompiler$$1.prototype;
    v2103.attemptIncrementalTypeCheck = v1264;
    var v2104 = TypeScriptCompiler$$1.prototype;
    v2104.reTypeCheck = v1266;
    var v2105 = TypeScriptCompiler$$1.prototype;
    v2105.isDynamicModuleCompilation = v1267;
    var v2106 = TypeScriptCompiler$$1.prototype;
    v2106.updateCommonDirectoryPath = v1268;
    var v2107 = TypeScriptCompiler$$1.prototype;
    v2107.parseEmitOption = v1269;
    var v2108 = TypeScriptCompiler$$1.prototype;
    v2108.useUTF8ForFile = v1270;
    TypeScriptCompiler$$1.mapToDTSFileName = mapToDTSFileName;
    var v2109 = TypeScriptCompiler$$1.prototype;
    v2109.canEmitDeclarations = v1271;
    var v2110 = TypeScriptCompiler$$1.prototype;
    v2110.emitDeclarationsUnit = v1272;
    var v2111 = TypeScriptCompiler$$1.prototype;
    v2111.emitDeclarations = v1273;
    TypeScriptCompiler$$1.mapToFileNameExtension = mapToFileNameExtension;
    TypeScriptCompiler$$1.mapToJSFileName = mapToJSFileName;
    var v2112 = TypeScriptCompiler$$1.prototype;
    v2112.emitUnit = v1274;
    var v2113 = TypeScriptCompiler$$1.prototype;
    v2113.emit = v1275;
    var v2114 = TypeScriptCompiler$$1.prototype;
    v2114.emitToOutfile = v1276;
    var v2115 = TypeScriptCompiler$$1.prototype;
    v2115.emitAST = v1278;
    var v2116 = TypeScriptCompiler$$1.prototype;
    v2116.outputScriptToUTF8 = v1279;
    var v2117 = TypeScriptCompiler$$1.prototype;
    v2117.outputScriptsToUTF8 = v1280;
    var v2118 = TypeScriptCompiler$$1.prototype;
    v2118.createFile = v1281;
    return TypeScriptCompiler$$1;
  }
  function v1240() {
    function ErrorEntry$$1(unitIndex$$13, minChar$$35, limChar$$13, message$$20) {
      this.unitIndex = unitIndex$$13;
      this.minChar = minChar$$35;
      this.limChar = limChar$$13;
      this.message = message$$20;
      return;
    }
    return ErrorEntry$$1;
  }
  function v1239() {
    function singleScopeEdits(script1$$2, script2$$2, scope1$$2, scope2$$1, editRange$$4, parseErrors$$3) {
      var v2119 = UpdateUnitKind.EditsInsideSingleScope;
      var v12719 = script1$$2.locationInfo;
      var v2120 = v12719.unitIndex;
      var result$$36 = new UpdateUnitResult$$1(v2119, v2120, script1$$2, script2$$2);
      result$$36.scope1 = scope1$$2;
      result$$36.scope2 = scope2$$1;
      result$$36.editRange = editRange$$4;
      result$$36.parseErrors = parseErrors$$3;
      return result$$36;
    }
    function unknownEdits(script1$$1, script2$$1, parseErrors$$2) {
      var v2121 = UpdateUnitKind.Unknown;
      var v12720 = script1$$1.locationInfo;
      var v2122 = v12720.unitIndex;
      var result$$35 = new UpdateUnitResult$$1(v2121, v2122, script1$$1, script2$$1);
      result$$35.parseErrors = parseErrors$$2;
      return result$$35;
    }
    function noEdits(unitIndex$$12) {
      var v2123 = UpdateUnitKind.NoEdits;
      return new UpdateUnitResult$$1(v2123, unitIndex$$12, null, null);
    }
    function UpdateUnitResult$$1(kind, unitIndex$$11, script1, script2) {
      this.kind = kind;
      this.unitIndex = unitIndex$$11;
      this.script1 = script1;
      this.script2 = script2;
      this.scope1 = null;
      this.scope2 = null;
      this.editRange = null;
      this.parseErrors = [];
      return;
    }
    UpdateUnitResult$$1.noEdits = noEdits;
    UpdateUnitResult$$1.unknownEdits = unknownEdits;
    UpdateUnitResult$$1.singleScopeEdits = singleScopeEdits;
    return UpdateUnitResult$$1;
  }
  function v1238() {
    function v1237() {
      var v25697 = this.minChar;
      var v24830 = "editRange(minChar=" + v25697;
      var v22840 = v24830 + ", limChar=";
      var v22841 = this.limChar;
      var v18775 = v22840 + v22841;
      var v12721 = v18775 + ", delta=";
      var v12722 = this.delta;
      var v2124 = v12721 + v12722;
      return v2124 + ")";
    }
    function v1236(pos$$8) {
      var v18776 = this.minChar;
      var v12723 = v18776 <= pos$$8;
      if (v12723) {
        var v18777 = this.limChar;
        v12723 = pos$$8 < v18777;
      }
      var v2125 = v12723;
      var v12725 = !v2125;
      if (v12725) {
        var v18778 = this.minChar;
        var v12724 = v18778 <= pos$$8;
        if (v12724) {
          var v22842 = this.limChar;
          var v22843 = this.delta;
          var v18779 = v22842 + v22843;
          v12724 = pos$$8 < v18779;
        }
        v2125 = v12724;
      }
      return v2125;
    }
    function v1235() {
      var v18780 = this.minChar;
      var v12726 = v18780 === -1;
      if (v12726) {
        var v18781 = this.limChar;
        v12726 = v18781 === -1;
      }
      var v2126 = v12726;
      if (v2126) {
        var v12727 = this.delta;
        v2126 = v12727 === -1;
      }
      return v2126;
    }
    function unknown() {
      return new ScriptEditRange$$1(-1, -1, -1);
    }
    function ScriptEditRange$$1(minChar$$34, limChar$$12, delta$$2) {
      this.minChar = minChar$$34;
      this.limChar = limChar$$12;
      this.delta = delta$$2;
      return;
    }
    ScriptEditRange$$1.unknown = unknown;
    var v2127 = ScriptEditRange$$1.prototype;
    v2127.isUnknown = v1235;
    var v2128 = ScriptEditRange$$1.prototype;
    v2128.containsPosition = v1236;
    var v2129 = ScriptEditRange$$1.prototype;
    v2129.toString = v1237;
    return ScriptEditRange$$1;
  }
  function v1234(UpdateUnitKind$$1) {
    UpdateUnitKind$$1._map = [];
    var v2130 = UpdateUnitKind$$1._map;
    v2130[0] = "Unknown";
    UpdateUnitKind$$1.Unknown = 0;
    var v2131 = UpdateUnitKind$$1._map;
    v2131[1] = "NoEdits";
    UpdateUnitKind$$1.NoEdits = 1;
    var v2132 = UpdateUnitKind$$1._map;
    v2132[2] = "EditsInsideSingleScope";
    UpdateUnitKind$$1.EditsInsideSingleScope = 2;
    return;
  }
  var v12728 = TypeScript$$32.UpdateUnitKind;
  var v18782 = !v12728;
  if (v18782) {
    v12728 = TypeScript$$32.UpdateUnitKind = {};
  }
  var v2133 = v12728;
  v1234(v2133);
  var UpdateUnitKind = TypeScript$$32.UpdateUnitKind;
  var ScriptEditRange = v1238();
  TypeScript$$32.ScriptEditRange = ScriptEditRange;
  var UpdateUnitResult = v1239();
  TypeScript$$32.UpdateUnitResult = UpdateUnitResult;
  var ErrorEntry = v1240();
  TypeScript$$32.ErrorEntry = ErrorEntry;
  var v2134 = TypeScript$$32;
  var v12729 = TypeScript$$32.CompilationSettings;
  var v26460 = new v12729;
  v2134.defaultSettings = v26460;
  var TypeScriptCompiler = v1282();
  TypeScript$$32.TypeScriptCompiler = TypeScriptCompiler;
  var ScopeEntry = v1283();
  TypeScript$$32.ScopeEntry = ScopeEntry;
  var ScopeTraversal = v1287();
  TypeScript$$32.ScopeTraversal = ScopeTraversal;
  return;
}
function v1233(TypeScript$$31) {
  function v1232() {
    function v1231(pre$$21, ast$$121) {
      var v12730 = ast$$121.flags;
      var v18783 = TypeScript$$31.ASTFlags;
      var v12731 = v18783.IsStatement;
      var v2135 = TypeScript$$31.hasFlag(v12730, v12731);
      return!v2135;
    }
    function v1230(pre$$20, script$$22) {
      if (pre$$20) {
        var v12732 = this.emitOptions;
        var v2144 = v12732.outputMany;
        if (v2144) {
          var i$$125 = 0;
          var v18784 = script$$22.referencedFiles;
          var v12733 = v18784.length;
          var v2143 = i$$125 < v12733;
          for (;v2143;) {
            var v12734 = script$$22.referencedFiles;
            var v2136 = v12734[i$$125];
            var referencePath$$1 = v2136.path;
            var declareFileName$$1;
            var v2140 = TypeScript$$31.isRooted(referencePath$$1);
            if (v2140) {
              var v2137 = this.emitOptions;
              var v12735 = TypeScript$$31.TypeScriptCompiler;
              var v2138 = v12735.mapToDTSFileName;
              declareFileName$$1 = v2137.mapOutputFileName(referencePath$$1, v2138);
            } else {
              var v18785 = script$$22.referencedFiles;
              var v12736 = v18785[i$$125];
              var v2139 = v12736.path;
              declareFileName$$1 = TypeScript$$31.getDeclareFilePath(v2139);
            }
            var v2141 = this.declFile;
            var v12737 = '/// <reference path="' + declareFileName$$1;
            var v2142 = v12737 + '" />';
            v2141.WriteLine(v2142);
            i$$125++;
            var v18786 = script$$22.referencedFiles;
            var v12738 = v18786.length;
            v2143 = i$$125 < v12738;
          }
        }
        this.pushDeclarationContainer(script$$22);
      } else {
        this.popDeclarationContainer(script$$22);
      }
      return true;
    }
    function v1229(pre$$19, moduleDecl$$9) {
      var v12739 = moduleDecl$$9.modFlags;
      var v18787 = TypeScript$$31.ModuleFlags;
      var v12740 = v18787.IsWholeFile;
      var v2164 = TypeScript$$31.hasFlag(v12739, v12740);
      if (v2164) {
        var v12741 = moduleDecl$$9.modFlags;
        var v18788 = TypeScript$$31.ModuleFlags;
        var v12742 = v18788.IsDynamic;
        var v2163 = TypeScript$$31.hasFlag(v12741, v12742);
        if (v2163) {
          if (pre$$19) {
            var v18789 = this.emitOptions;
            var v12743 = v18789.outputMany;
            var v2154 = !v12743;
            if (v2154) {
              this.singleDeclFile = this.declFile;
              var v2145 = TypeScript$$31.CompilerDiagnostics;
              var v18790 = this.indenter;
              var v12744 = v18790.indentAmt;
              var v2146 = v12744 == 0;
              v2145.assert(v2146, "Indent has to be 0 when outputing new file");
              var v2147 = this.emitOptions;
              var v22844 = moduleDecl$$9.name;
              var v18791 = v22844.sym;
              var v12745 = v18791.name;
              var v2148 = TypeScript$$31.stripQuotes(v12745);
              var v12746 = TypeScript$$31.TypeScriptCompiler;
              var v2149 = v12746.mapToDTSFileName;
              var declareFileName = v2147.mapOutputFileName(v2148, v2149);
              var v2150 = moduleDecl$$9.containsUnicodeChar;
              var v12748 = !v2150;
              if (v12748) {
                var v18792 = this.emitOptions;
                var v12747 = v18792.emitComments;
                if (v12747) {
                  v12747 = moduleDecl$$9.containsUnicodeCharInComment;
                }
                v2150 = v12747;
              }
              var useUTF8InOutputfile$$1 = v2150;
              try {
                var v18793 = this.emitOptions;
                var v12749 = v18793.ioHost;
                var v2151 = v12749.createFile(declareFileName, useUTF8InOutputfile$$1);
                var v26461 = new DeclFileWriter(v2151);
                this.declFile = v26461;
              } catch (ex$$4) {
                var v2152 = this.errorReporter;
                var v2153 = ex$$4.message;
                v2152.emitterError(null, v2153);
              }
            }
            this.pushDeclarationContainer(moduleDecl$$9);
          } else {
            var v18794 = this.emitOptions;
            var v12750 = v18794.outputMany;
            var v2162 = !v12750;
            if (v2162) {
              var v2155 = TypeScript$$31.CompilerDiagnostics;
              var v12751 = this.singleDeclFile;
              var v12752 = this.declFile;
              var v2156 = v12751 != v12752;
              v2155.assert(v2156, "singleDeclFile cannot be null as we are going to revert back to it");
              var v2157 = TypeScript$$31.CompilerDiagnostics;
              var v18795 = this.indenter;
              var v12753 = v18795.indentAmt;
              var v2158 = v12753 == 0;
              v2157.assert(v2158, "Indent has to be 0 when outputing new file");
              try {
                var v2159 = this.declFile;
                v2159.Close();
              } catch (ex$$5) {
                var v2160 = this.errorReporter;
                var v2161 = ex$$5.message;
                v2160.emitterError(null, v2161);
              }
              this.declFile = this.singleDeclFile;
            }
            this.popDeclarationContainer(moduleDecl$$9);
          }
        }
        return true;
      }
      var v2165 = moduleDecl$$9.isEnum();
      if (v2165) {
        if (pre$$19) {
          this.emitEnumSignature(moduleDecl$$9);
        }
        return false;
      }
      var v22845 = moduleDecl$$9.modFlags;
      var v18796 = TypeScript$$31.ToDeclFlags(v22845);
      var v12754 = this.canEmitPrePostAstSignature(v18796, moduleDecl$$9, pre$$19);
      var v2166 = !v12754;
      if (v2166) {
        return false;
      }
      if (pre$$19) {
        var v2168 = this.emitDottedModuleName();
        if (v2168) {
          var v12755 = this.dottedModuleEmit;
          this.dottedModuleEmit = v12755 + ".";
        } else {
          var v12756 = moduleDecl$$9.modFlags;
          var v2167 = TypeScript$$31.ToDeclFlags(v12756);
          var v26462 = this.getDeclFlagsString(v2167, "module");
          this.dottedModuleEmit = v26462;
        }
        var v12757 = this.dottedModuleEmit;
        var v18797 = moduleDecl$$9.name;
        var v12758 = v18797.text;
        this.dottedModuleEmit = v12757 + v12758;
        var v25698 = moduleDecl$$9.members;
        var v24831 = v25698.members;
        var v22846 = v24831.length;
        var v18798 = v22846 == 1;
        if (v18798) {
          var v26085 = moduleDecl$$9.members;
          var v25699 = v26085.members;
          var v24832 = v25699[0];
          var v22847 = v24832.nodeType;
          var v24833 = TypeScript$$31.NodeType;
          var v22848 = v24833.ModuleDeclaration;
          v18798 = v22847 == v22848;
        }
        var v12759 = v18798;
        if (v12759) {
          var v25700 = moduleDecl$$9.members;
          var v24834 = v25700.members;
          var v22849 = v24834[0];
          var v18799 = v22849.isEnum();
          v12759 = !v18799;
        }
        var v2169 = v12759;
        if (v2169) {
          var v24835 = moduleDecl$$9.members;
          var v22850 = v24835.members;
          var v18800 = v22850[0];
          var v12760 = v18800.modFlags;
          var v18801 = TypeScript$$31.ModuleFlags;
          var v12761 = v18801.Exported;
          v2169 = TypeScript$$31.hasFlag(v12760, v12761);
        }
        var isCurrentModuleDotted = v2169;
        var moduleDeclComments = moduleDecl$$9.getDocComments();
        var v2170 = isCurrentModuleDotted;
        if (v2170) {
          var v12762 = moduleDeclComments == null;
          var v18803 = !v12762;
          if (v18803) {
            var v18802 = moduleDeclComments.length;
            v12762 = v18802 == 0;
          }
          v2170 = v12762;
        }
        isCurrentModuleDotted = v2170;
        var v2171 = this.isDottedModuleName;
        v2171.push(isCurrentModuleDotted);
        this.pushDeclarationContainer(moduleDecl$$9);
        var v2176 = !isCurrentModuleDotted;
        if (v2176) {
          this.emitDeclarationComments(moduleDecl$$9);
          var v2172 = this.declFile;
          var v2173 = this.dottedModuleEmit;
          v2172.Write(v2173);
          var v2174 = this.declFile;
          v2174.WriteLine(" {");
          var v2175 = this.indenter;
          v2175.increaseIndent();
        }
      } else {
        var v12763 = this.emitDottedModuleName();
        var v2179 = !v12763;
        if (v2179) {
          var v2177 = this.indenter;
          v2177.decreaseIndent();
          this.emitIndent();
          var v2178 = this.declFile;
          v2178.WriteLine("}");
        }
        this.popDeclarationContainer(moduleDecl$$9);
        var v2180 = this.isDottedModuleName;
        v2180.pop();
      }
      return true;
    }
    function v1228(moduleDecl$$8) {
      var v22851 = moduleDecl$$8.modFlags;
      var v18804 = TypeScript$$31.ToDeclFlags(v22851);
      var v12764 = this.canEmitSignature(v18804);
      var v2181 = !v12764;
      if (v2181) {
        return false;
      }
      this.emitDeclarationComments(moduleDecl$$8);
      var v12765 = moduleDecl$$8.modFlags;
      var v2182 = TypeScript$$31.ToDeclFlags(v12765);
      this.emitDeclFlags(v2182, "enum");
      var v2183 = this.declFile;
      var v18805 = moduleDecl$$8.name;
      var v12766 = v18805.text;
      var v2184 = v12766 + " {";
      v2183.WriteLine(v2184);
      var v2185 = this.indenter;
      v2185.increaseIndent();
      var v12767 = moduleDecl$$8.members;
      var v2186 = v12767.members;
      var membersLen$$1 = v2186.length;
      var j$$19 = 1;
      var v2193 = j$$19 < membersLen$$1;
      for (;v2193;) {
        var v12768 = moduleDecl$$8.members;
        var v2187 = v12768.members;
        var memberDecl$$1 = v2187[j$$19];
        var v12769 = memberDecl$$1.nodeType;
        var v18806 = TypeScript$$31.NodeType;
        var v12770 = v18806.VarDecl;
        var v2192 = v12769 == v12770;
        if (v2192) {
          this.emitDeclarationComments(memberDecl$$1);
          this.emitIndent();
          var v2188 = this.declFile;
          var v18807 = memberDecl$$1.id;
          var v12771 = v18807.text;
          var v2189 = v12771 + ",";
          v2188.WriteLine(v2189);
        } else {
          var v2190 = TypeScript$$31.CompilerDiagnostics;
          var v12772 = memberDecl$$1.nodeType;
          var v18808 = TypeScript$$31.NodeType;
          var v12773 = v18808.Asg;
          var v2191 = v12772 != v12773;
          v2190.assert(v2191, "We want to catch this");
        }
        j$$19++;
        v2193 = j$$19 < membersLen$$1;
      }
      var v2194 = this.indenter;
      v2194.decreaseIndent();
      this.emitIndent();
      var v2195 = this.declFile;
      v2195.WriteLine("}");
      return false;
    }
    function v1227(pre$$18, importDecl$$3) {
      if (pre$$18) {
        var v18809 = this.declarationContainerStack;
        var v12774 = v18809[0];
        var v18810 = importDecl$$3.id;
        var v12775 = v18810.sym;
        var v2204 = v12774.isExternallyVisibleSymbol(v12775);
        if (v2204) {
          this.emitDeclarationComments(importDecl$$3);
          this.emitIndent();
          var v2196 = this.declFile;
          v2196.Write("import ");
          var v2197 = this.declFile;
          var v18811 = importDecl$$3.id;
          var v12776 = v18811.text;
          var v2198 = v12776 + " = ";
          v2197.Write(v2198);
          var v2203 = importDecl$$3.isDynamicImport;
          if (v2203) {
            var v2199 = this.declFile;
            var v18812 = importDecl$$3.getAliasName();
            var v12777 = "module (" + v18812;
            var v2200 = v12777 + ");";
            v2199.WriteLine(v2200);
          } else {
            var v2201 = this.declFile;
            var v12778 = importDecl$$3.getAliasName();
            var v2202 = v12778 + ";";
            v2201.WriteLine(v2202);
          }
        }
      }
      return false;
    }
    function v1226(pre$$17, interfaceDecl$$7) {
      var v22852 = interfaceDecl$$7.varFlags;
      var v18813 = TypeScript$$31.ToDeclFlags(v22852);
      var v12779 = this.canEmitPrePostAstSignature(v18813, interfaceDecl$$7, pre$$17);
      var v2205 = !v12779;
      if (v2205) {
        return false;
      }
      if (pre$$17) {
        var v2206 = interfaceDecl$$7.name;
        var interfaceName$$1 = v2206.text;
        this.emitDeclarationComments(interfaceDecl$$7);
        var v12780 = interfaceDecl$$7.varFlags;
        var v2207 = TypeScript$$31.ToDeclFlags(v12780);
        this.emitDeclFlags(v2207, "interface");
        var v2208 = this.declFile;
        v2208.Write(interfaceName$$1);
        var v2209 = interfaceDecl$$7.extendsList;
        this.emitBaseList(v2209, "extends");
        var v2210 = this.declFile;
        v2210.WriteLine(" {");
        var v2211 = this.indenter;
        v2211.increaseIndent();
        this.pushDeclarationContainer(interfaceDecl$$7);
      } else {
        var v2212 = this.indenter;
        v2212.decreaseIndent();
        this.popDeclarationContainer(interfaceDecl$$7);
        this.emitIndent();
        var v2213 = this.declFile;
        v2213.WriteLine("}");
      }
      return true;
    }
    function v1225(pre$$16, classDecl$$10) {
      var v22853 = classDecl$$10.varFlags;
      var v18814 = TypeScript$$31.ToDeclFlags(v22853);
      var v12781 = this.canEmitPrePostAstSignature(v18814, classDecl$$10, pre$$16);
      var v2214 = !v12781;
      if (v2214) {
        return false;
      }
      if (pre$$16) {
        var v2215 = classDecl$$10.name;
        var className$$5 = v2215.text;
        this.emitDeclarationComments(classDecl$$10);
        var v12782 = classDecl$$10.varFlags;
        var v2216 = TypeScript$$31.ToDeclFlags(v12782);
        this.emitDeclFlags(v2216, "class");
        var v2217 = this.declFile;
        v2217.Write(className$$5);
        var v2218 = classDecl$$10.extendsList;
        this.emitBaseList(v2218, "extends");
        var v2219 = classDecl$$10.implementsList;
        this.emitBaseList(v2219, "implements");
        var v2220 = this.declFile;
        v2220.WriteLine(" {");
        this.pushDeclarationContainer(classDecl$$10);
        var v2221 = this.indenter;
        v2221.increaseIndent();
        var v2223 = classDecl$$10.constructorDecl;
        if (v2223) {
          var v2222 = classDecl$$10.constructorDecl;
          this.emitClassMembersFromConstructorDefinition(v2222);
        }
      } else {
        var v2224 = this.indenter;
        v2224.decreaseIndent();
        this.popDeclarationContainer(classDecl$$10);
        this.emitIndent();
        var v2225 = this.declFile;
        v2225.WriteLine("}");
      }
      return true;
    }
    function v1224(funcDecl$$37) {
      var v2238 = funcDecl$$37.arguments;
      if (v2238) {
        var v12783 = funcDecl$$37.arguments;
        var v2226 = v12783.members;
        var argsLen$$3 = v2226.length;
        var v2227 = funcDecl$$37.variableArgList;
        if (v2227) {
          argsLen$$3--;
        }
        var i$$124 = 0;
        var v2237 = i$$124 < argsLen$$3;
        for (;v2237;) {
          var v12784 = funcDecl$$37.arguments;
          var v2228 = v12784.members;
          var argDecl$$4 = v2228[i$$124];
          var v12785 = argDecl$$4.varFlags;
          var v18815 = TypeScript$$31.VarFlags;
          var v12786 = v18815.Property;
          var v2236 = TypeScript$$31.hasFlag(v12785, v12786);
          if (v2236) {
            this.emitDeclarationComments(argDecl$$4);
            var v12787 = argDecl$$4.varFlags;
            var v2229 = TypeScript$$31.ToDeclFlags(v12787);
            this.emitDeclFlags(v2229, "var");
            var v2230 = this.declFile;
            var v12788 = argDecl$$4.id;
            var v2231 = v12788.text;
            v2230.Write(v2231);
            var v12789 = argDecl$$4.typeExpr;
            if (v12789) {
              var v22854 = argDecl$$4.varFlags;
              var v18816 = TypeScript$$31.ToDeclFlags(v22854);
              v12789 = this.canEmitTypeAnnotationSignature(v18816);
            }
            var v2234 = v12789;
            if (v2234) {
              var v2232 = this.declFile;
              v2232.Write(": ");
              var v2233 = argDecl$$4.type;
              this.emitTypeSignature(v2233);
            }
            var v2235 = this.declFile;
            v2235.WriteLine(";");
          }
          i$$124++;
          v2237 = i$$124 < argsLen$$3;
        }
      }
      return;
    }
    function v1223(funcDecl$$36) {
      var accessorSymbol$$1 = funcDecl$$36.accessorSymbol;
      var v12790 = accessorSymbol$$1.getter;
      if (v12790) {
        var v22855 = accessorSymbol$$1.getter;
        var v18817 = v22855.declAST;
        v12790 = v18817 != funcDecl$$36;
      }
      var v2239 = v12790;
      if (v2239) {
        return false;
      }
      this.emitDeclarationComments(accessorSymbol$$1);
      var v12791 = accessorSymbol$$1.flags;
      var v2240 = TypeScript$$31.ToDeclFlags(v12791);
      this.emitDeclFlags(v2240, "var");
      var v2241 = this.declFile;
      var v12792 = funcDecl$$36.name;
      var v2242 = v12792.text;
      v2241.Write(v2242);
      var propertyType = accessorSymbol$$1.getType();
      var v18818 = accessorSymbol$$1.flags;
      var v12793 = TypeScript$$31.ToDeclFlags(v18818);
      var v2244 = this.canEmitTypeAnnotationSignature(v12793);
      if (v2244) {
        var v2243 = this.declFile;
        v2243.Write(" : ");
        this.emitTypeSignature(propertyType);
      }
      var v2245 = this.declFile;
      v2245.WriteLine(";");
      return false;
    }
    function v1222(bases$$8, qual) {
      var v12794 = bases$$8;
      if (v12794) {
        var v22856 = bases$$8.members;
        var v18819 = v22856.length;
        v12794 = v18819 > 0;
      }
      var v2254 = v12794;
      if (v2254) {
        var v2246 = this.declFile;
        var v12795 = " " + qual;
        var v2247 = v12795 + " ";
        v2246.Write(v2247);
        var v2248 = bases$$8.members;
        var basesLen$$3 = v2248.length;
        var i$$123 = 0;
        var v2253 = i$$123 < basesLen$$3;
        for (;v2253;) {
          var v2249 = bases$$8.members;
          var baseExpr$$3 = v2249[i$$123];
          var v2250 = baseExpr$$3.type;
          var baseSymbol$$4 = v2250.symbol;
          var baseType$$1 = baseExpr$$3.type;
          var v2252 = i$$123 > 0;
          if (v2252) {
            var v2251 = this.declFile;
            v2251.Write(", ");
          }
          this.emitTypeSignature(baseType$$1);
          i$$123++;
          v2253 = i$$123 < basesLen$$3;
        }
      }
      return;
    }
    function v1221(pre$$15, funcDecl$$35) {
      var v2255 = !pre$$15;
      if (v2255) {
        return false;
      }
      var v2256 = funcDecl$$35.isAccessor();
      if (v2256) {
        return this.emitPropertyAccessorSignature(funcDecl$$35);
      }
      var v12796 = this.getAstDeclarationContainer();
      var v2257 = v12796.nodeType;
      var v12797 = TypeScript$$31.NodeType;
      var v2258 = v12797.InterfaceDeclaration;
      var isInterfaceMember = v2257 == v2258;
      var v2268 = funcDecl$$35.bod;
      if (v2268) {
        var v2261 = funcDecl$$35.isConstructor;
        if (v2261) {
          var v18820 = funcDecl$$35.type;
          var v12798 = v18820.construct;
          if (v12798) {
            var v25701 = funcDecl$$35.type;
            var v24836 = v25701.construct;
            var v22857 = v24836.signatures;
            var v18821 = v22857.length;
            v12798 = v18821 > 1;
          }
          var v2259 = v12798;
          if (v2259) {
            return false;
          }
        } else {
          var v18822 = funcDecl$$35.type;
          var v12799 = v18822.call;
          if (v12799) {
            var v25702 = funcDecl$$35.type;
            var v24837 = v25702.call;
            var v22858 = v24837.signatures;
            var v18823 = v22858.length;
            v12799 = v18823 > 1;
          }
          var v2260 = v12799;
          if (v2260) {
            return false;
          }
        }
      } else {
        var v22859 = !isInterfaceMember;
        if (v22859) {
          var v24838 = funcDecl$$35.fncFlags;
          var v25703 = TypeScript$$31.FncFlags;
          var v24839 = v25703.Private;
          v22859 = TypeScript$$31.hasFlag(v24838, v24839);
        }
        var v18824 = v22859;
        if (v18824) {
          var v22860 = funcDecl$$35.type;
          v18824 = v22860.call;
        }
        var v12800 = v18824;
        if (v12800) {
          var v25704 = funcDecl$$35.type;
          var v24840 = v25704.call;
          var v22861 = v24840.signatures;
          var v18825 = v22861.length;
          v12800 = v18825 > 1;
        }
        var v2267 = v12800;
        if (v2267) {
          var v12801 = funcDecl$$35.type;
          var v2262 = v12801.call;
          var signatures$$4 = v2262.signatures;
          var v2263 = signatures$$4[0];
          var firstSignature = v2263.declAST;
          var v2265 = firstSignature.bod;
          if (v2265) {
            var v2264 = signatures$$4[1];
            firstSignature = v2264.declAST;
          }
          var v2266 = firstSignature != funcDecl$$35;
          if (v2266) {
            return false;
          }
        }
      }
      var v22862 = funcDecl$$35.fncFlags;
      var v18826 = TypeScript$$31.ToDeclFlags(v22862);
      var v12802 = this.canEmitSignature(v18826, false);
      var v2269 = !v12802;
      if (v2269) {
        return false;
      }
      this.emitDeclarationComments(funcDecl$$35);
      var v2280 = funcDecl$$35.isConstructor;
      if (v2280) {
        this.emitIndent();
        var v2270 = this.declFile;
        v2270.Write("constructor");
      } else {
        var id$$24 = funcDecl$$35.getNameText();
        var v2279 = !isInterfaceMember;
        if (v2279) {
          var v12803 = funcDecl$$35.fncFlags;
          var v2271 = TypeScript$$31.ToDeclFlags(v12803);
          this.emitDeclFlags(v2271, "function");
          var v2272 = this.declFile;
          v2272.Write(id$$24);
        } else {
          this.emitIndent();
          var v2278 = funcDecl$$35.isConstructMember();
          if (v2278) {
            var v2273 = this.declFile;
            v2273.Write("new");
          } else {
            var v18827 = funcDecl$$35.isCallMember();
            var v12804 = !v18827;
            if (v12804) {
              var v18828 = funcDecl$$35.isIndexerMember();
              v12804 = !v18828;
            }
            var v2277 = v12804;
            if (v2277) {
              var v2274 = this.declFile;
              v2274.Write(id$$24);
              var v18829 = funcDecl$$35.name;
              var v12805 = v18829.flags;
              var v18830 = TypeScript$$31.ASTFlags;
              var v12806 = v18830.OptionalName;
              var v2276 = TypeScript$$31.hasFlag(v12805, v12806);
              if (v2276) {
                var v2275 = this.declFile;
                v2275.Write("? ");
              }
            }
          }
        }
      }
      var v12807 = funcDecl$$35.isIndexerMember();
      var v2283 = !v12807;
      if (v2283) {
        var v2281 = this.declFile;
        v2281.Write("(");
      } else {
        var v2282 = this.declFile;
        v2282.Write("[");
      }
      var v2284 = this.indenter;
      v2284.increaseIndent();
      var v2291 = funcDecl$$35.arguments;
      if (v2291) {
        var v12808 = funcDecl$$35.arguments;
        var v2285 = v12808.members;
        var argsLen$$2 = v2285.length;
        var v2286 = funcDecl$$35.variableArgList;
        if (v2286) {
          argsLen$$2--;
        }
        var i$$122 = 0;
        var v2290 = i$$122 < argsLen$$2;
        for (;v2290;) {
          var v12809 = funcDecl$$35.arguments;
          var v2287 = v12809.members;
          var argDecl$$3 = v2287[i$$122];
          this.emitArgDecl(argDecl$$3, funcDecl$$35);
          var v12810 = argsLen$$2 - 1;
          var v2289 = i$$122 < v12810;
          if (v2289) {
            var v2288 = this.declFile;
            v2288.Write(", ");
          }
          i$$122++;
          v2290 = i$$122 < argsLen$$2;
        }
      }
      var v2297 = funcDecl$$35.variableArgList;
      if (v2297) {
        var v12811 = funcDecl$$35.arguments;
        var v2292 = v12811.members;
        var v22863 = funcDecl$$35.arguments;
        var v18831 = v22863.members;
        var v12812 = v18831.length;
        var v2293 = v12812 - 1;
        var lastArg$$2 = v2292[v2293];
        var v22864 = funcDecl$$35.arguments;
        var v18832 = v22864.members;
        var v12813 = v18832.length;
        var v2296 = v12813 > 1;
        if (v2296) {
          var v2294 = this.declFile;
          v2294.Write(", ...");
        } else {
          var v2295 = this.declFile;
          v2295.Write("...");
        }
        this.emitArgDecl(lastArg$$2, funcDecl$$35);
      }
      var v2298 = this.indenter;
      v2298.decreaseIndent();
      var v12814 = funcDecl$$35.isIndexerMember();
      var v2301 = !v12814;
      if (v2301) {
        var v2299 = this.declFile;
        v2299.Write(")");
      } else {
        var v2300 = this.declFile;
        v2300.Write("]");
      }
      var v22865 = funcDecl$$35.isConstructor;
      var v18833 = !v22865;
      if (v18833) {
        var v22866 = funcDecl$$35.returnTypeAnnotation;
        var v24843 = !v22866;
        if (v24843) {
          var v26086 = funcDecl$$35.signature;
          var v25705 = v26086.returnType;
          var v24841 = v25705.type;
          var v25706 = this.checker;
          var v24842 = v25706.anyType;
          v22866 = v24841 != v24842;
        }
        v18833 = v22866;
      }
      var v12815 = v18833;
      if (v12815) {
        var v22867 = funcDecl$$35.fncFlags;
        var v18834 = TypeScript$$31.ToDeclFlags(v22867);
        v12815 = this.canEmitTypeAnnotationSignature(v18834);
      }
      var v2304 = v12815;
      if (v2304) {
        var v2302 = this.declFile;
        v2302.Write(": ");
        var v18835 = funcDecl$$35.signature;
        var v12816 = v18835.returnType;
        var v2303 = v12816.type;
        this.emitTypeSignature(v2303);
      }
      var v2305 = this.declFile;
      v2305.WriteLine(";");
      return false;
    }
    function v1220(argDecl$$2, funcDecl$$34) {
      this.emitDeclarationComments(argDecl$$2, false);
      var v2306 = this.declFile;
      var v12817 = argDecl$$2.id;
      var v2307 = v12817.text;
      v2306.Write(v2307);
      var v2309 = argDecl$$2.isOptionalArg();
      if (v2309) {
        var v2308 = this.declFile;
        v2308.Write("?");
      }
      var v18836 = argDecl$$2.typeExpr;
      var v22870 = !v18836;
      if (v22870) {
        var v22868 = argDecl$$2.type;
        var v24844 = this.checker;
        var v22869 = v24844.anyType;
        v18836 = v22868 != v22869;
      }
      var v12818 = v18836;
      if (v12818) {
        var v22871 = funcDecl$$34.fncFlags;
        var v18837 = TypeScript$$31.ToDeclFlags(v22871);
        v12818 = this.canEmitTypeAnnotationSignature(v18837);
      }
      var v2312 = v12818;
      if (v2312) {
        var v2310 = this.declFile;
        v2310.Write(": ");
        var v2311 = argDecl$$2.type;
        this.emitTypeSignature(v2311);
      }
      return;
    }
    function v1219(pre$$14, block$$2) {
      var v12819 = block$$2.isStatementBlock;
      var v2314 = !v12819;
      if (v2314) {
        if (pre$$14) {
          var v12820 = block$$2.statements;
          var v2313 = v12820.members;
          this.varListCount = v2313.length;
        } else {
          this.varListCount = 0;
        }
        return true;
      }
      return false;
    }
    function v1218(pre$$13, varDecl$$20) {
      var v12821 = pre$$13;
      if (v12821) {
        var v22872 = varDecl$$20.varFlags;
        var v18838 = TypeScript$$31.ToDeclFlags(v22872);
        v12821 = this.canEmitSignature(v18838, false);
      }
      var v2339 = v12821;
      if (v2339) {
        var v12822 = this.getAstDeclarationContainer();
        var v2315 = v12822.nodeType;
        var v12823 = TypeScript$$31.NodeType;
        var v2316 = v12823.InterfaceDeclaration;
        var interfaceMember = v2315 == v2316;
        this.emitDeclarationComments(varDecl$$20);
        var v2326 = !interfaceMember;
        if (v2326) {
          var v12824 = this.varListCount;
          var v2319 = v12824 >= 0;
          if (v2319) {
            var v12825 = varDecl$$20.varFlags;
            var v2317 = TypeScript$$31.ToDeclFlags(v12825);
            this.emitDeclFlags(v2317, "var");
            var v2318 = this.varListCount;
            this.varListCount = -v2318;
          }
          var v2320 = this.declFile;
          var v12826 = varDecl$$20.id;
          var v2321 = v12826.text;
          v2320.Write(v2321);
        } else {
          this.emitIndent();
          var v2322 = this.declFile;
          var v12827 = varDecl$$20.id;
          var v2323 = v12827.text;
          v2322.Write(v2323);
          var v18839 = varDecl$$20.id;
          var v12828 = v18839.flags;
          var v18840 = TypeScript$$31.ASTFlags;
          var v12829 = v18840.OptionalName;
          var v2325 = TypeScript$$31.hasFlag(v12828, v12829);
          if (v2325) {
            var v2324 = this.declFile;
            v2324.Write("?");
          }
        }
        var type$$59 = null;
        var v12830 = varDecl$$20.typeExpr;
        if (v12830) {
          var v18841 = varDecl$$20.typeExpr;
          v12830 = v18841.type;
        }
        var v2331 = v12830;
        if (v2331) {
          var v2327 = varDecl$$20.typeExpr;
          type$$59 = v2327.type;
        } else {
          var v2330 = varDecl$$20.sym;
          if (v2330) {
            var v2328 = varDecl$$20.sym;
            type$$59 = v2328.getType();
            var v18842 = this.checker;
            var v12831 = v18842.anyType;
            var v2329 = type$$59 == v12831;
            if (v2329) {
              type$$59 = null;
            }
          }
        }
        var v12832 = type$$59;
        if (v12832) {
          var v22873 = varDecl$$20.varFlags;
          var v18843 = TypeScript$$31.ToDeclFlags(v22873);
          v12832 = this.canEmitTypeAnnotationSignature(v18843);
        }
        var v2333 = v12832;
        if (v2333) {
          var v2332 = this.declFile;
          v2332.Write(": ");
          this.emitTypeSignature(type$$59);
        }
        var v12833 = this.varListCount;
        var v2335 = v12833 > 0;
        if (v2335) {
          this.varListCount--;
        } else {
          var v12834 = this.varListCount;
          var v2334 = v12834 < 0;
          if (v2334) {
            this.varListCount++;
          }
        }
        var v12835 = this.varListCount;
        var v2338 = v12835 < 0;
        if (v2338) {
          var v2336 = this.declFile;
          v2336.Write(", ");
        } else {
          var v2337 = this.declFile;
          v2337.WriteLine(";");
        }
      }
      return false;
    }
    function v1217(astOrSymbol, endLine) {
      var v12836 = typeof endLine;
      var v2340 = v12836 === "undefined";
      if (v2340) {
        endLine = true;
      }
      var v18844 = this.emitOptions;
      var v12837 = v18844.emitComments;
      var v2341 = !v12837;
      if (v2341) {
        return;
      }
      var declComments = astOrSymbol.getDocComments();
      var v12838 = declComments.length;
      var v2347 = v12838 > 0;
      if (v2347) {
        var i$$121 = 0;
        var v12839 = declComments.length;
        var v2343 = i$$121 < v12839;
        for (;v2343;) {
          var v2342 = declComments[i$$121];
          this.emitComment(v2342);
          i$$121++;
          var v12840 = declComments.length;
          v2343 = i$$121 < v12840;
        }
        if (endLine) {
          var v18845 = this.declFile;
          var v12841 = v18845.onNewLine;
          var v2345 = !v12841;
          if (v2345) {
            var v2344 = this.declFile;
            v2344.WriteLine("");
          }
        } else {
          var v12842 = this.declFile;
          var v2346 = v12842.onNewLine;
          if (v2346) {
            this.emitIndent();
          }
        }
      }
      return;
    }
    function v1216(comment$$10) {
      var text$$26 = comment$$10.getText();
      var v12843 = this.declFile;
      var v2350 = v12843.onNewLine;
      if (v2350) {
        this.emitIndent();
      } else {
        var v12844 = comment$$10.isBlockComment;
        var v2349 = !v12844;
        if (v2349) {
          var v2348 = this.declFile;
          v2348.WriteLine("");
          this.emitIndent();
        }
      }
      var v2351 = this.declFile;
      var v2352 = text$$26[0];
      v2351.Write(v2352);
      var i$$120 = 1;
      var v12845 = text$$26.length;
      var v2356 = i$$120 < v12845;
      for (;v2356;) {
        var v2353 = this.declFile;
        v2353.WriteLine("");
        this.emitIndent();
        var v2354 = this.declFile;
        var v2355 = text$$26[i$$120];
        v2354.Write(v2355);
        i$$120++;
        var v12846 = text$$26.length;
        v2356 = i$$120 < v12846;
      }
      var v12847 = comment$$10.endsLine;
      var v18847 = !v12847;
      if (v18847) {
        var v18846 = comment$$10.isBlockComment;
        v12847 = !v18846;
      }
      var v2359 = v12847;
      if (v2359) {
        var v2357 = this.declFile;
        v2357.WriteLine("");
      } else {
        var v2358 = this.declFile;
        v2358.Write(" ");
      }
      return;
    }
    function v1215(type$$58) {
      var containingScope = null;
      var declarationContainerAst = this.getAstDeclarationContainer();
      var v2367 = declarationContainerAst.nodeType;
      switch(v2367) {
        case TypeScript$$31.NodeType.ModuleDeclaration:
        ;
        case TypeScript$$31.NodeType.InterfaceDeclaration:
        ;
        case TypeScript$$31.NodeType.FuncDecl:
          var v2361 = declarationContainerAst.type;
          if (v2361) {
            var v2360 = declarationContainerAst.type;
            containingScope = v2360.containedScope;
          }
          break;
        case TypeScript$$31.NodeType.Script:
          var script$$21 = declarationContainerAst;
          var v2363 = script$$21.bod;
          if (v2363) {
            var v2362 = script$$21.bod;
            containingScope = v2362.enclosingScope;
          }
          break;
        case TypeScript$$31.NodeType.ClassDeclaration:
          var v2365 = declarationContainerAst.type;
          if (v2365) {
            var v12848 = declarationContainerAst.type;
            var v2364 = v12848.instanceType;
            containingScope = v2364.containedScope;
          }
          break;
        default:
          var v2366 = TypeScript$$31.CompilerDiagnostics;
          v2366.debugPrint("Unknown containing scope");
      }
      var typeNameMembers = type$$58.getScopedTypeNameEx(containingScope);
      this.emitTypeNamesMember(typeNameMembers);
      return;
    }
    function v1214(memberName$$5, emitIndent) {
      var v12849 = typeof emitIndent;
      var v2368 = v12849 === "undefined";
      if (v2368) {
        emitIndent = false;
      }
      var v12850 = memberName$$5.prefix;
      var v2374 = v12850 == "{ ";
      if (v2374) {
        if (emitIndent) {
          this.emitIndent();
        }
        var v2369 = this.declFile;
        v2369.WriteLine("{");
        var v2370 = this.indenter;
        v2370.increaseIndent();
        emitIndent = true;
      } else {
        var v12851 = memberName$$5.prefix;
        var v2373 = v12851 != "";
        if (v2373) {
          if (emitIndent) {
            this.emitIndent();
          }
          var v2371 = this.declFile;
          var v2372 = memberName$$5.prefix;
          v2371.Write(v2372);
          emitIndent = false;
        }
      }
      var v2381 = memberName$$5.isString();
      if (v2381) {
        if (emitIndent) {
          this.emitIndent();
        }
        var v2375 = this.declFile;
        var v2376 = memberName$$5.text;
        v2375.Write(v2376);
      } else {
        var ar$$1 = memberName$$5;
        var index$$62 = 0;
        var v18848 = ar$$1.entries;
        var v12852 = v18848.length;
        var v2380 = index$$62 < v12852;
        for (;v2380;) {
          var v12853 = ar$$1.entries;
          var v2377 = v12853[index$$62];
          this.emitTypeNamesMember(v2377, emitIndent);
          var v12854 = ar$$1.delim;
          var v2379 = v12854 == "; ";
          if (v2379) {
            var v2378 = this.declFile;
            v2378.WriteLine(";");
          }
          index$$62++;
          var v18849 = ar$$1.entries;
          var v12855 = v18849.length;
          v2380 = index$$62 < v12855;
        }
      }
      var v12856 = memberName$$5.suffix;
      var v2387 = v12856 == "}";
      if (v2387) {
        var v2382 = this.indenter;
        v2382.decreaseIndent();
        this.emitIndent();
        var v2383 = this.declFile;
        var v2384 = memberName$$5.suffix;
        v2383.Write(v2384);
      } else {
        var v2385 = this.declFile;
        var v2386 = memberName$$5.suffix;
        v2385.Write(v2386);
      }
      return;
    }
    function v1213(ast$$120) {
      var v2388 = TypeScript$$31.CompilerDiagnostics;
      var v12857 = this.getAstDeclarationContainer();
      var v2389 = ast$$120 != v12857;
      v2388.assert(v2389, "Declaration container mismatch");
      var v2390 = this.declarationContainerStack;
      v2390.pop();
      return;
    }
    function v1212(ast$$119) {
      var v2391 = this.declarationContainerStack;
      v2391.push(ast$$119);
      return;
    }
    function v1211(declFlag) {
      var v12858 = typeof declFlag;
      var v2393 = v12858 === "undefined";
      if (v2393) {
        var v2392 = TypeScript$$31.DeclFlags;
        declFlag = v2392.None;
      }
      var v18850 = TypeScript$$31.DeclFlags;
      var v12859 = v18850.Private;
      var v2394 = TypeScript$$31.hasFlag(declFlag, v12859);
      return!v2394;
    }
    function v1210(declFlags$$3, typeString$$1) {
      var v2395 = this.declFile;
      var v2396 = this.getDeclFlagsString(declFlags$$3, typeString$$1);
      v2395.Write(v2396);
      return;
    }
    function v1209(declFlags$$2, typeString) {
      var result$$34 = this.getIndentString();
      var accessorString = "";
      var v18851 = TypeScript$$31.DeclFlags;
      var v12860 = v18851.GetAccessor;
      var v2398 = TypeScript$$31.hasFlag(declFlags$$2, v12860);
      if (v2398) {
        accessorString = "get ";
      } else {
        var v18852 = TypeScript$$31.DeclFlags;
        var v12861 = v18852.SetAccessor;
        var v2397 = TypeScript$$31.hasFlag(declFlags$$2, v12861);
        if (v2397) {
          accessorString = "set ";
        }
      }
      var container$$23 = this.getAstDeclarationContainer();
      var v22874 = container$$23.nodeType;
      var v24845 = TypeScript$$31.NodeType;
      var v22875 = v24845.ModuleDeclaration;
      var v18853 = v22874 == v22875;
      if (v18853) {
        var v22876 = container$$23.modFlags;
        var v24846 = TypeScript$$31.ModuleFlags;
        var v22877 = v24846.IsWholeFile;
        v18853 = TypeScript$$31.hasFlag(v22876, v22877);
      }
      var v12862 = v18853;
      if (v12862) {
        var v22878 = TypeScript$$31.DeclFlags;
        var v18854 = v22878.Exported;
        v12862 = TypeScript$$31.hasFlag(declFlags$$2, v18854);
      }
      var v2399 = v12862;
      if (v2399) {
        result$$34 = result$$34 + "export ";
      }
      var v22879 = TypeScript$$31.DeclFlags;
      var v18855 = v22879.LocalStatic;
      var v12863 = TypeScript$$31.hasFlag(declFlags$$2, v18855);
      var v18857 = !v12863;
      if (v18857) {
        var v22880 = TypeScript$$31.DeclFlags;
        var v18856 = v22880.Static;
        v12863 = TypeScript$$31.hasFlag(declFlags$$2, v18856);
      }
      var v2403 = v12863;
      if (v2403) {
        var v12864 = "static " + accessorString;
        result$$34 = result$$34 + v12864;
      } else {
        var v18858 = TypeScript$$31.DeclFlags;
        var v12865 = v18858.Private;
        var v2402 = TypeScript$$31.hasFlag(declFlags$$2, v12865);
        if (v2402) {
          var v12866 = "private " + accessorString;
          result$$34 = result$$34 + v12866;
        } else {
          var v18859 = TypeScript$$31.DeclFlags;
          var v12867 = v18859.Public;
          var v2401 = TypeScript$$31.hasFlag(declFlags$$2, v12867);
          if (v2401) {
            var v12868 = "public " + accessorString;
            result$$34 = result$$34 + v12868;
          } else {
            var v2400 = accessorString == "";
            if (v2400) {
              var v12869 = typeString + " ";
              result$$34 = result$$34 + v12869;
            } else {
              result$$34 = result$$34 + accessorString;
            }
          }
        }
      }
      return result$$34;
    }
    function v1208(declFlags$$1, astWithPrePostCallback, preCallback) {
      var v2407 = this.ignoreCallbackAst;
      if (v2407) {
        var v2404 = TypeScript$$31.CompilerDiagnostics;
        var v12870 = this.ignoreCallbackAst;
        var v2405 = v12870 != astWithPrePostCallback;
        v2404.assert(v2405, "Ignore Callback AST mismatch");
        this.ignoreCallbackAst = null;
        return false;
      } else {
        var v12871 = preCallback;
        if (v12871) {
          var v18860 = this.canEmitSignature(declFlags$$1, true, preCallback);
          v12871 = !v18860;
        }
        var v2406 = v12871;
        if (v2406) {
          this.ignoreCallbackAst = astWithPrePostCallback;
          return false;
        }
      }
      return true;
    }
    function v1207(declFlags, canEmitGlobalAmbientDecl, useDeclarationContainerTop) {
      var v12872 = typeof canEmitGlobalAmbientDecl;
      var v2408 = v12872 === "undefined";
      if (v2408) {
        canEmitGlobalAmbientDecl = true;
      }
      var v12873 = typeof useDeclarationContainerTop;
      var v2409 = v12873 === "undefined";
      if (v2409) {
        useDeclarationContainerTop = true;
      }
      var container$$22;
      if (useDeclarationContainerTop) {
        container$$22 = this.getAstDeclarationContainer();
      } else {
        var v2410 = this.declarationContainerStack;
        var v18861 = this.declarationContainerStack;
        var v12874 = v18861.length;
        var v2411 = v12874 - 2;
        container$$22 = v2410[v2411];
      }
      var v18862 = container$$22.nodeType;
      var v22881 = TypeScript$$31.NodeType;
      var v18863 = v22881.ModuleDeclaration;
      var v12875 = v18862 == v18863;
      if (v12875) {
        var v24847 = TypeScript$$31.DeclFlags;
        var v22882 = v24847.Exported;
        var v18864 = TypeScript$$31.hasFlag(declFlags, v22882);
        v12875 = !v18864;
      }
      var v2412 = v12875;
      if (v2412) {
        return false;
      }
      var v18865 = !canEmitGlobalAmbientDecl;
      if (v18865) {
        var v22883 = container$$22.nodeType;
        var v24848 = TypeScript$$31.NodeType;
        var v22884 = v24848.Script;
        v18865 = v22883 == v22884;
      }
      var v12876 = v18865;
      if (v12876) {
        var v22885 = TypeScript$$31.DeclFlags;
        var v18866 = v22885.Ambient;
        v12876 = TypeScript$$31.hasFlag(declFlags, v18866);
      }
      var v2413 = v12876;
      if (v2413) {
        return false;
      }
      return true;
    }
    function v1206() {
      var v2414 = this.declFile;
      var v2415 = this.getIndentString();
      v2414.Write(v2415);
      return;
    }
    function v1205(declIndent) {
      var v12877 = typeof declIndent;
      var v2416 = v12877 === "undefined";
      if (v2416) {
        declIndent = false;
      }
      var v12878 = this.emitOptions;
      var v2418 = v12878.minWhitespace;
      if (v2418) {
        return "";
      } else {
        var v2417 = this.indenter;
        return v2417.getIndent();
      }
      return;
    }
    function v1204(script$$20) {
      var v2419 = TypeScript$$31.AstWalkerWithDetailCallback;
      v2419.walk(script$$20, this);
      return;
    }
    function v1203() {
      try {
        var v2420 = this.declFile;
        v2420.Close();
      } catch (ex$$3) {
        var v2421 = this.errorReporter;
        var v2422 = ex$$3.message;
        v2421.emitterError(null, v2422);
      }
      return;
    }
    function v1202(file) {
      var v26463 = new DeclFileWriter(file);
      this.declFile = v26463;
      return;
    }
    function v1201() {
      var v2423;
      var v22886 = this.isDottedModuleName;
      var v18867 = v22886.length;
      var v12881 = v18867 == 0;
      if (v12881) {
        v2423 = false;
      } else {
        var v12879 = this.isDottedModuleName;
        var v22887 = this.isDottedModuleName;
        var v18868 = v22887.length;
        var v12880 = v18868 - 1;
        v2423 = v12879[v12880];
      }
      return v2423;
    }
    function v1200() {
      var v2424 = this.declarationContainerStack;
      var v18869 = this.declarationContainerStack;
      var v12882 = v18869.length;
      var v2425 = v12882 - 1;
      return v2424[v2425];
    }
    function DeclarationEmitter$$1(checker$$23, emitOptions$$2, errorReporter$$5) {
      this.checker = checker$$23;
      this.emitOptions = emitOptions$$2;
      this.errorReporter = errorReporter$$5;
      this.declFile = null;
      var v2426 = TypeScript$$31.Indenter;
      var v26464 = new v2426;
      this.indenter = v26464;
      this.declarationContainerStack = [];
      this.isDottedModuleName = [];
      this.ignoreCallbackAst = null;
      this.singleDeclFile = null;
      this.varListCount = 0;
      return;
    }
    var v2427 = DeclarationEmitter$$1.prototype;
    v2427.getAstDeclarationContainer = v1200;
    var v2428 = DeclarationEmitter$$1.prototype;
    v2428.emitDottedModuleName = v1201;
    var v2429 = DeclarationEmitter$$1.prototype;
    v2429.setDeclarationFile = v1202;
    var v2430 = DeclarationEmitter$$1.prototype;
    v2430.Close = v1203;
    var v2431 = DeclarationEmitter$$1.prototype;
    v2431.emitDeclarations = v1204;
    var v2432 = DeclarationEmitter$$1.prototype;
    v2432.getIndentString = v1205;
    var v2433 = DeclarationEmitter$$1.prototype;
    v2433.emitIndent = v1206;
    var v2434 = DeclarationEmitter$$1.prototype;
    v2434.canEmitSignature = v1207;
    var v2435 = DeclarationEmitter$$1.prototype;
    v2435.canEmitPrePostAstSignature = v1208;
    var v2436 = DeclarationEmitter$$1.prototype;
    v2436.getDeclFlagsString = v1209;
    var v2437 = DeclarationEmitter$$1.prototype;
    v2437.emitDeclFlags = v1210;
    var v2438 = DeclarationEmitter$$1.prototype;
    v2438.canEmitTypeAnnotationSignature = v1211;
    var v2439 = DeclarationEmitter$$1.prototype;
    v2439.pushDeclarationContainer = v1212;
    var v2440 = DeclarationEmitter$$1.prototype;
    v2440.popDeclarationContainer = v1213;
    var v2441 = DeclarationEmitter$$1.prototype;
    v2441.emitTypeNamesMember = v1214;
    var v2442 = DeclarationEmitter$$1.prototype;
    v2442.emitTypeSignature = v1215;
    var v2443 = DeclarationEmitter$$1.prototype;
    v2443.emitComment = v1216;
    var v2444 = DeclarationEmitter$$1.prototype;
    v2444.emitDeclarationComments = v1217;
    var v2445 = DeclarationEmitter$$1.prototype;
    v2445.VarDeclCallback = v1218;
    var v2446 = DeclarationEmitter$$1.prototype;
    v2446.BlockCallback = v1219;
    var v2447 = DeclarationEmitter$$1.prototype;
    v2447.emitArgDecl = v1220;
    var v2448 = DeclarationEmitter$$1.prototype;
    v2448.FuncDeclCallback = v1221;
    var v2449 = DeclarationEmitter$$1.prototype;
    v2449.emitBaseList = v1222;
    var v2450 = DeclarationEmitter$$1.prototype;
    v2450.emitPropertyAccessorSignature = v1223;
    var v2451 = DeclarationEmitter$$1.prototype;
    v2451.emitClassMembersFromConstructorDefinition = v1224;
    var v2452 = DeclarationEmitter$$1.prototype;
    v2452.ClassDeclarationCallback = v1225;
    var v2453 = DeclarationEmitter$$1.prototype;
    v2453.InterfaceDeclarationCallback = v1226;
    var v2454 = DeclarationEmitter$$1.prototype;
    v2454.ImportDeclarationCallback = v1227;
    var v2455 = DeclarationEmitter$$1.prototype;
    v2455.emitEnumSignature = v1228;
    var v2456 = DeclarationEmitter$$1.prototype;
    v2456.ModuleDeclarationCallback = v1229;
    var v2457 = DeclarationEmitter$$1.prototype;
    v2457.ScriptCallback = v1230;
    var v2458 = DeclarationEmitter$$1.prototype;
    v2458.DefaultCallback = v1231;
    return DeclarationEmitter$$1;
  }
  function v1199() {
    function v1198() {
      var v2459 = this.declFile;
      v2459.Close();
      return;
    }
    function v1197(s$$36) {
      var v2460 = this.declFile;
      v2460.WriteLine(s$$36);
      this.onNewLine = true;
      return;
    }
    function v1196(s$$35) {
      var v2461 = this.declFile;
      v2461.Write(s$$35);
      this.onNewLine = false;
      return;
    }
    function DeclFileWriter$$1(declFile) {
      this.declFile = declFile;
      this.onNewLine = true;
      return;
    }
    var v2462 = DeclFileWriter$$1.prototype;
    v2462.Write = v1196;
    var v2463 = DeclFileWriter$$1.prototype;
    v2463.WriteLine = v1197;
    var v2464 = DeclFileWriter$$1.prototype;
    v2464.Close = v1198;
    return DeclFileWriter$$1;
  }
  var DeclFileWriter = v1199();
  TypeScript$$31.DeclFileWriter = DeclFileWriter;
  var DeclarationEmitter = v1232();
  TypeScript$$31.DeclarationEmitter = DeclarationEmitter;
  return;
}
function v1195(TypeScript$$30) {
  function v1194() {
    function v1193(ast$$117, start$$13, delta$$1) {
      function pre$$12(cur$$11, parent$$71, walker$$55) {
        var v18870 = cur$$11.limChar;
        var v12883 = v18870 !== -1;
        if (v12883) {
          var v18871 = cur$$11.limChar;
          v12883 = v18871 < start$$13;
        }
        var v2466 = v12883;
        if (v2466) {
          var v2465 = walker$$55.options;
          v2465.goChildren = false;
        }
        applyDelta(cur$$11);
        var v2467 = cur$$11.preComments;
        applyDeltaToComments(v2467);
        var v2468 = cur$$11.postComments;
        applyDeltaToComments(v2468);
        return cur$$11;
      }
      function applyDeltaToComments(comments$$13) {
        var v12884 = comments$$13;
        if (v12884) {
          var v18872 = comments$$13.length;
          v12884 = v18872 > 0;
        }
        var v2471 = v12884;
        if (v2471) {
          var i$$119 = 0;
          var v12885 = comments$$13.length;
          var v2470 = i$$119 < v12885;
          for (;v2470;) {
            var v2469 = comments$$13[i$$119];
            applyDelta(v2469);
            i$$119++;
            var v12886 = comments$$13.length;
            v2470 = i$$119 < v12886;
          }
        }
        return;
      }
      function applyDelta(ast$$118) {
        var v18873 = ast$$118.minChar;
        var v12887 = v18873 !== -1;
        if (v12887) {
          var v18874 = ast$$118.minChar;
          v12887 = v18874 >= start$$13;
        }
        var v2472 = v12887;
        if (v2472) {
          var v12888 = ast$$118.minChar;
          ast$$118.minChar = v12888 + delta$$1;
        }
        var v18875 = ast$$118.limChar;
        var v12889 = v18875 !== -1;
        if (v12889) {
          var v18876 = ast$$118.limChar;
          v12889 = v18876 >= start$$13;
        }
        var v2473 = v12889;
        if (v2473) {
          var v12890 = ast$$118.limChar;
          ast$$118.limChar = v12890 + delta$$1;
        }
        return;
      }
      var v2474 = TypeScript$$30.getAstWalkerFactory();
      v2474.walk(ast$$117, pre$$12);
      return;
    }
    function v1192(script$$19, partial$$1, editRange$$3) {
      var v2475 = script$$19.locationInfo;
      var lineMap1 = v2475.lineMap;
      var v2476 = partial$$1.locationInfo;
      var lineMap2 = v2476.lineMap;
      var v12891 = this.logger;
      var v2483 = v12891.information();
      if (v2483) {
        var v2477 = this.logger;
        v2477.log("lineMap1 (before):");
        var v2478 = this.astLogger;
        v2478.logLinemap(lineMap1);
        var v2479 = this.logger;
        v2479.log("lineMap2 (quick parse):");
        var v2480 = this.astLogger;
        v2480.logLinemap(lineMap2);
        var v2481 = this.logger;
        var v2482 = "EditRange=" + editRange$$3;
        v2481.log(v2482);
      }
      var i1 = 2;
      var i2 = 2;
      var len1 = lineMap1.length;
      var len2 = lineMap2.length;
      var v2488 = i1 < len1;
      for (;v2488;) {
        var v12892 = lineMap1[i1];
        var v12893 = editRange$$3.minChar;
        var v2487 = v12892 <= v12893;
        if (v2487) {
          i1++;
        } else {
          var v12894 = lineMap1[i1];
          var v12895 = editRange$$3.limChar;
          var v2486 = v12894 >= v12895;
          if (v2486) {
            var v12896 = lineMap1[i1];
            var v12897 = editRange$$3.delta;
            lineMap1[i1] = v12896 + v12897;
            i1++;
          } else {
            var v2485 = i2 < len2;
            if (v2485) {
              var v12898 = lineMap2[i2];
              var v12899 = editRange$$3.minChar;
              var v2484 = v12898 + v12899;
              lineMap1.splice(i1, 0, v2484);
              i1++;
              len1++;
              i2++;
            } else {
              lineMap1.splice(i1, 1);
              len1--;
            }
          }
        }
        v2488 = i1 < len1;
      }
      var v2495 = i2 < len2;
      if (v2495) {
        var v18877 = len1 - 1;
        var v12900 = lineMap1[v18877];
        var v18878 = lineMap2[i2];
        var v18879 = editRange$$3.minChar;
        var v12901 = v18878 + v18879;
        var v2492 = v12900 >= v12901;
        if (v2492) {
          i1 = 2;
          var v12902 = i1 < len1;
          if (v12902) {
            v12902 = i2 < len2;
          }
          var v2491 = v12902;
          for (;v2491;) {
            var v12903 = lineMap1[i1];
            var v18880 = lineMap2[i2];
            var v18881 = editRange$$3.minChar;
            var v12904 = v18880 + v18881;
            var v2490 = v12903 < v12904;
            if (v2490) {
              i1++;
            } else {
              var v12905 = lineMap2[i2];
              var v12906 = editRange$$3.minChar;
              var v2489 = v12905 + v12906;
              lineMap1.splice(i1, 0, v2489);
              i1++;
              len1++;
              i2++;
            }
            var v12907 = i1 < len1;
            if (v12907) {
              v12907 = i2 < len2;
            }
            v2491 = v12907;
          }
        }
        var v2494 = i2 < len2;
        for (;v2494;) {
          var v12908 = lineMap2[i2];
          var v12909 = editRange$$3.minChar;
          var v2493 = v12908 + v12909;
          lineMap1.push(v2493);
          i2++;
          v2494 = i2 < len2;
        }
      }
      var v12910 = this.logger;
      var v2498 = v12910.information();
      if (v2498) {
        var v2496 = this.logger;
        v2496.log("lineMap1 (after merge):");
        var v2497 = this.astLogger;
        v2497.logLinemap(lineMap1);
      }
      return;
    }
    function v1191(script$$18, oldAst, newAst) {
      function pre$$11(cur$$10, parent$$70, walker$$54) {
        var v2501 = cur$$10 === oldAst;
        if (v2501) {
          newAst.preComments = cur$$10.preComments;
          newAst.postComments = cur$$10.postComments;
          var v2499 = _this$$14.logger;
          v2499.log("replaced old AST node with new one in script AST");
          var v2500 = walker$$54.options;
          v2500.stopWalk();
          return newAst;
        }
        var v2504 = TypeScript$$30.isValidAstNode(cur$$10);
        if (v2504) {
          var v18882 = cur$$10.limChar;
          var v18883 = oldAst.minChar;
          var v12911 = v18882 < v18883;
          var v18886 = !v12911;
          if (v18886) {
            var v18884 = cur$$10.minChar;
            var v18885 = oldAst.limChar;
            v12911 = v18884 > v18885;
          }
          var v2503 = v12911;
          if (v2503) {
            var v2502 = walker$$54.options;
            v2502.goChildren = false;
          }
        }
        return cur$$10;
      }
      var _this$$14 = this;
      var v2505 = TypeScript$$30.getAstWalkerFactory();
      v2505.walk(script$$18, pre$$11);
      return;
    }
    function v1190(updateResult) {
      function v1189() {
        var v2506 = TypeScript$$30.ScriptEditRange;
        var v12912 = updateResult.scope1;
        var v2507 = v12912.minChar;
        var v12913 = updateResult.scope1;
        var v2508 = v12913.limChar;
        var v12914 = updateResult.editRange;
        var v2509 = v12914.delta;
        var editRange$$2 = new v2506(v2507, v2508, v2509);
        var v2510 = updateResult.script1;
        var v2511 = editRange$$2.limChar;
        var v2512 = editRange$$2.delta;
        _this$$13.applyDeltaPosition(v2510, v2511, v2512);
        var v2513 = updateResult.script2;
        var v2514 = editRange$$2.minChar;
        _this$$13.applyDeltaPosition(v2513, 0, v2514);
        var v2515 = updateResult.script1;
        var v2516 = updateResult.script2;
        _this$$13.mergeLocationInfo(v2515, v2516, editRange$$2);
        var v2517 = updateResult.script1;
        var v2518 = updateResult.scope1;
        var v2519 = updateResult.scope2;
        _this$$13.replaceAST(v2517, v2518, v2519);
        return;
      }
      var _this$$13 = this;
      var v2520 = this.logger;
      TypeScript$$30.timeFunction(v2520, "mergeTrees()", v1189);
      return;
    }
    function v1188(previousScript$$1, scriptId$$1, newSourceText$$1, editRange$$1) {
      function errorCapture$$1(minChar$$33, charLen, message$$19, unitIndex$$10) {
        var v12915 = TypeScript$$30.ErrorEntry;
        var v12916 = minChar$$33 + charLen;
        var v2521 = new v12915(unitIndex$$10, minChar$$33, v12916, message$$19);
        parseErrors$$1.push(v2521);
        return;
      }
      var v2522 = this.logger;
      var v12917 = 'attemptIncrementalUpdateUnit("' + scriptId$$1;
      var v2523 = v12917 + '")';
      v2522.log(v2523);
      var v2524 = editRange$$1 === null;
      if (v2524) {
        throw new Error("editRange should be valid");
      }
      var scope1$$1 = this.getEnclosingScopeContextIfSingleScopeEdit(previousScript$$1, scriptId$$1, newSourceText$$1, editRange$$1);
      var v2525 = scope1$$1 === null;
      if (v2525) {
        return null;
      }
      var v18887 = scope1$$1.scopeStartAST;
      var v12918 = v18887.limChar;
      var v18888 = scope1$$1.scopeStartAST;
      var v12919 = v18888.minChar;
      var v2526 = v12918 - v12919;
      var v2527 = editRange$$1.delta;
      var newScopeLength$$1 = v2526 + v2527;
      var v12920 = newScopeLength$$1;
      var v18889 = newSourceText$$1.getLength();
      var v12921 = v18889 / 2;
      var v2530 = v12920 >= v12921;
      if (v2530) {
        var v2528 = this.logger;
        var v12922 = "  Bailing out because range of scope to reparse (" + newScopeLength$$1;
        var v2529 = v12922 + " characters) is greater than half the size of the source text";
        v2528.log(v2529);
        return null;
      }
      var parseErrors$$1 = [];
      var v2531 = this.logger;
      var v2532 = scope1$$1.scopeStartAST;
      var v12923 = scope1$$1.scopeStartAST;
      var v2533 = v12923.minChar;
      var v18890 = scope1$$1.scopeStartAST;
      var v12924 = v18890.minChar;
      var v2534 = v12924 + newScopeLength$$1;
      var quickParseResult = TypeScript$$30.quickParse(v2531, v2532, newSourceText$$1, v2533, v2534, errorCapture$$1);
      var v12925 = quickParseResult.endLexState;
      var v18891 = TypeScript$$30.LexState;
      var v12926 = v18891.Start;
      var v2536 = v12925 != v12926;
      if (v2536) {
        var v2535 = this.logger;
        v2535.log("  Bailing out because scope contains unterminated comment");
        return null;
      }
      var scriptFragment$$1 = quickParseResult.Script;
      var v22888 = scriptFragment$$1.vars;
      var v18892 = v22888.members;
      var v12927 = v18892.length;
      var v2538 = v12927 !== 0;
      if (v2538) {
        var v2537 = this.logger;
        v2537.log("  Bailing out because new source text defines variables");
        return null;
      }
      var v22889 = scriptFragment$$1.bod;
      var v18893 = v22889.members;
      var v12928 = v18893.length;
      var v2540 = v12928 !== 1;
      if (v2540) {
        var v2539 = this.logger;
        v2539.log("  Bailing out because new source text defines more than one scope (or none)");
        return null;
      }
      var oldScope = scope1$$1.scopeStartAST;
      var v12929 = scriptFragment$$1.bod;
      var v2541 = v12929.members;
      var newScope = v2541[0];
      var v12930 = oldScope.nodeType;
      var v12931 = newScope.nodeType;
      var v2543 = v12930 != v12931;
      if (v2543) {
        var v2542 = this.logger;
        v2542.log("  Bailing out because new source text does not define the same scope type as the existing scope");
        return null;
      }
      var v18894 = oldScope.leftCurlyCount;
      var v12932 = !v18894;
      var v18896 = !v12932;
      if (v18896) {
        var v18895 = oldScope.rightCurlyCount;
        v12932 = !v18895;
      }
      var v2545 = v12932;
      if (v2545) {
        var v2544 = this.logger;
        v2544.log("  Bailing out because sopce doesn't have left/right curly count");
        return null;
      }
      var v12933 = oldScope.leftCurlyCount;
      var v12934 = newScope.leftCurlyCount;
      var v2547 = v12933 !== v12934;
      if (v2547) {
        var v2546 = this.logger;
        v2546.log("  Bailing out because new source text contains more (or fewer) left curly braces");
        return null;
      }
      var v12935 = oldScope.rightCurlyCount;
      var v12936 = newScope.rightCurlyCount;
      var v2549 = v12935 !== v12936;
      if (v2549) {
        var v2548 = this.logger;
        v2548.log("  Bailing out because new source text contains more (or fewer) right curly braces");
        return null;
      }
      var v12937 = newScope.minChar;
      var v2551 = v12937 !== 0;
      if (v2551) {
        var v2550 = this.logger;
        v2550.log("  Bailing out because new function declaration does not start at position 0");
        return null;
      }
      var v12938 = newScope.limChar;
      var v2553 = v12938 !== newScopeLength$$1;
      if (v2553) {
        var v2552 = this.logger;
        v2552.log("  Bailing out because new function declaration does not end at the new end position");
        return null;
      }
      var v2554 = TypeScript$$30.UpdateUnitResult;
      return v2554.singleScopeEdits(previousScript$$1, scriptFragment$$1, oldScope, newScope, editRange$$1, parseErrors$$1);
    }
    function v1187(previousScript, scriptId, newSourceText, editRange) {
      var v2555 = this.logger;
      var v12939 = 'checkEditsInsideSingleScope("' + scriptId;
      var v2556 = v12939 + '")';
      v2555.log(v2556);
      var v2557 = editRange === null;
      if (v2557) {
        throw new Error("editRange should be valid");
      }
      var v2559 = editRange.isUnknown();
      if (v2559) {
        var v2558 = this.logger;
        v2558.log("  Bailing out because edit range is unknown");
        return null;
      }
      var v2560 = this.logger;
      var v2561 = editRange.minChar;
      var scope1 = TypeScript$$30.findEnclosingScopeAt(v2560, previousScript, newSourceText, v2561, false);
      var v2562 = this.logger;
      var v2563 = editRange.limChar;
      var scope2 = TypeScript$$30.findEnclosingScopeAt(v2562, previousScript, newSourceText, v2563, false);
      var v12940 = scope1 == null;
      var v18897 = !v12940;
      if (v18897) {
        v12940 = scope2 == null;
      }
      var v2565 = v12940;
      if (v2565) {
        var v2564 = this.logger;
        v2564.log("  Bailing out because containing scopes cannot be determined");
        return null;
      }
      var v12941 = scope1.scopeStartAST;
      var v12942 = scope2.scopeStartAST;
      var v2567 = v12941 !== v12942;
      if (v2567) {
        var v2566 = this.logger;
        v2566.log("  Bailing out because edit overlaps 2 disctint scopes");
        return null;
      }
      var v18898 = scope1.scopeStartAST;
      var v12943 = v18898.limChar;
      var v18899 = scope1.scopeStartAST;
      var v12944 = v18899.minChar;
      var v2568 = v12943 - v12944;
      var v2569 = editRange.delta;
      var newScopeLength = v2568 + v2569;
      var v2571 = newScopeLength <= 0;
      if (v2571) {
        var v2570 = this.logger;
        v2570.log("  Bailing out because scope has been entirely removed from new source text");
        return null;
      }
      return scope1;
    }
    function IncrementalParser$$1(logger$$5) {
      this.logger = logger$$5;
      var v2572 = TypeScript$$30.AstLogger;
      var v2573 = this.logger;
      var v26465 = new v2572(v2573);
      this.astLogger = v26465;
      return;
    }
    var v2574 = IncrementalParser$$1.prototype;
    v2574.getEnclosingScopeContextIfSingleScopeEdit = v1187;
    var v2575 = IncrementalParser$$1.prototype;
    v2575.attemptIncrementalUpdateUnit = v1188;
    var v2576 = IncrementalParser$$1.prototype;
    v2576.mergeTrees = v1190;
    var v2577 = IncrementalParser$$1.prototype;
    v2577.replaceAST = v1191;
    var v2578 = IncrementalParser$$1.prototype;
    v2578.mergeLocationInfo = v1192;
    var v2579 = IncrementalParser$$1.prototype;
    v2579.applyDeltaPosition = v1193;
    return IncrementalParser$$1;
  }
  var IncrementalParser = v1194();
  TypeScript$$30.IncrementalParser = IncrementalParser;
  return;
}
function v1186(TypeScript$$29) {
  function v1185() {
    function v1184(str$$12) {
      var v2580 = this.styleSettings;
      v2580.parseOptions(str$$12);
      return;
    }
    function CompilationSettings$$1() {
      var v26466 = new StyleSettings;
      this.styleSettings = v26466;
      this.propagateConstants = false;
      this.minWhitespace = false;
      this.parseOnly = false;
      this.errorRecovery = false;
      this.emitComments = false;
      this.watch = false;
      this.exec = false;
      this.resolve = true;
      this.controlFlow = false;
      this.printControlFlow = false;
      this.controlFlowUseDef = false;
      this.errorOnWith = true;
      this.preprocess = true;
      this.canCallDefinitionSignature = false;
      this.inferPropertiesFromThisAssignment = false;
      this.useDefaultLib = true;
      var v2581 = TypeScript$$29.CodeGenTarget;
      this.codeGenTarget = v2581.ES3;
      var v2582 = TypeScript$$29.ModuleGenTarget;
      this.moduleGenTarget = v2582.Synchronous;
      this.outputOption = "";
      this.mapSourceFiles = false;
      this.generateDeclarationFiles = false;
      this.useCaseSensitiveFileResolution = false;
      return;
    }
    var v2583 = CompilationSettings$$1.prototype;
    v2583.setStyleOptions = v1184;
    return CompilationSettings$$1;
  }
  function v1183() {
    function v1182(str$$11) {
      var opts = str$$11.split(";");
      var i$$118 = 0;
      var len$$57 = opts.length;
      var v2588 = i$$118 < len$$57;
      for (;v2588;) {
        var opt$$1 = opts[i$$118];
        var val$$7 = true;
        var colonIndex = opt$$1.lastIndexOf(":");
        var v2586 = colonIndex >= 0;
        if (v2586) {
          var v2584 = colonIndex + 1;
          var valStr = opt$$1.substring(v2584);
          opt$$1 = opt$$1.substring(0, colonIndex);
          var v2585 = valStr == "off";
          if (v2585) {
            val$$7 = false;
          }
        }
        var v12945 = this.setOption(opt$$1, val$$7);
        var v2587 = !v12945;
        if (v2587) {
          return false;
        }
        i$$118++;
        v2588 = i$$118 < len$$57;
      }
      return true;
    }
    function v1181(opt, val$$6) {
      var optExists = this[opt];
      var v2589 = optExists !== undefined;
      if (v2589) {
        this[opt] = val$$6;
        return true;
      } else {
        return false;
      }
      return;
    }
    function StyleSettings$$1() {
      this.bitwise = false;
      this.blockInCompoundStmt = false;
      this.eqeqeq = false;
      this.forin = false;
      this.emptyBlocks = true;
      this.newMustBeUsed = false;
      this.requireSemi = false;
      this.assignmentInCond = false;
      this.eqnull = false;
      this.evalOK = true;
      this.innerScopeDeclEscape = true;
      this.funcInLoop = true;
      this.reDeclareLocal = true;
      this.literalSubscript = true;
      this.implicitAny = false;
      return;
    }
    var v2590 = StyleSettings$$1.prototype;
    v2590.setOption = v1181;
    var v2591 = StyleSettings$$1.prototype;
    v2591.parseOptions = v1182;
    return StyleSettings$$1;
  }
  function getAdditionalDependencyPath(comment$$6) {
    var amdDependencyRegEx = /^(\/\/\/\s*<amd-dependency\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
    var match$$1 = amdDependencyRegEx.exec(comment$$6);
    if (match$$1) {
      var path$$18 = match$$1[3];
      return path$$18;
    } else {
      return null;
    }
    return;
  }
  function getImplicitImport(comment$$7) {
    var implicitImportRegEx = /^(\/\/\/\s*<implicit-import\s*)*\/>/igm;
    var match$$2 = implicitImportRegEx.exec(comment$$7);
    if (match$$2) {
      return true;
    }
    return false;
  }
  function getStyleSettings(comment$$8, styleSettings) {
    var styleRegEx = /^(\/\/\/\s*<style\s+)(([a-zA-Z])+=('|").+('|"))\s*\/>/igm;
    var settings$$2 = styleRegEx.exec(comment$$8);
    if (settings$$2) {
      var settingsRegEx = /^([a-zA-Z]+=['"]on['|"])/igm;
      var v2592 = settings$$2[2];
      settings$$2 = settingsRegEx.exec(v2592);
      if (settings$$2) {
        var i$$117 = 0;
        var v12946 = settings$$2.length;
        var v2609 = i$$117 < v12946;
        for (;v2609;) {
          var v2593 = settings$$2[i$$117];
          var setting = v2593.split("=");
          var on = '"on"';
          var v2608 = setting[0];
          switch(v2608) {
            case "blockInCompoundStmt":
              var v2594 = setting[1];
              styleSettings.blockInCompoundStmt = v2594 == on;
              break;
            case "eqeqeq":
              var v2595 = setting[1];
              styleSettings.eqeqeq = v2595 == on;
              break;
            case "forin":
              var v2596 = setting[1];
              styleSettings.forin = v2596 == on;
              break;
            case "emptyBlocks":
              var v2597 = setting[1];
              styleSettings.emptyBlocks = v2597 == on;
              break;
            case "newMustBeUsed":
              var v2598 = setting[1];
              styleSettings.newMustBeUsed = v2598 == on;
              break;
            case "requireSemi":
              var v2599 = setting[1];
              styleSettings.requireSemi = v2599 == on;
              break;
            case "assignmentInCond":
              var v2600 = setting[1];
              styleSettings.assignmentInCond = v2600 == on;
              break;
            case "eqnull":
              var v2601 = setting[1];
              styleSettings.eqnull = v2601 == on;
              break;
            case "evalOK":
              var v2602 = setting[1];
              styleSettings.evalOK = v2602 == on;
              break;
            case "innerScopeDeclEscape":
              var v2603 = setting[1];
              styleSettings.innerScopeDeclEscape = v2603 == on;
              break;
            case "funcInLoop":
              var v2604 = setting[1];
              styleSettings.funcInLoop = v2604 == on;
              break;
            case "reDeclareLocal":
              var v2605 = setting[1];
              styleSettings.reDeclareLocal = v2605 == on;
              break;
            case "literalSubscript":
              var v2606 = setting[1];
              styleSettings.literalSubscript = v2606 == on;
              break;
            case "implicitAny":
              var v2607 = setting[1];
              styleSettings.implicitAny = v2607 == on;
          }
          i$$117++;
          var v12947 = settings$$2.length;
          v2609 = i$$117 < v12947;
        }
      }
    }
    return;
  }
  function getReferencedFiles(sourceText$$4) {
    var preProcessInfo = preProcessFile(sourceText$$4, null, false);
    return preProcessInfo.referencedFiles;
  }
  function preProcessFile(sourceText$$5, options$$7, readImportFiles) {
    var v12948 = typeof options$$7;
    var v2610 = v12948 === "undefined";
    if (v2610) {
      options$$7 = new CompilationSettings;
    }
    var v12949 = typeof readImportFiles;
    var v2611 = v12949 === "undefined";
    if (v2611) {
      readImportFiles = true;
    }
    var v2612 = TypeScript$$29.Scanner;
    var scanner$$1 = new v2612;
    scanner$$1.resetComments();
    var v12950 = TypeScript$$29.LexMode;
    var v2613 = v12950.File;
    scanner$$1.setSourceText(sourceText$$5, v2613);
    var tok$$5 = scanner$$1.scan();
    var comments$$12 = [];
    var comment$$9 = null;
    var leftCurlies = [];
    var settings$$3 = options$$7;
    var referencedFiles = [];
    var importedFiles = [];
    var isLibFile = false;
    var v12951 = tok$$5.tokenId;
    var v18900 = TypeScript$$29.TokenID;
    var v12952 = v18900.EndOfFile;
    var v2625 = v12951 != v12952;
    for (;v2625;) {
      var v12953 = readImportFiles;
      if (v12953) {
        var v18901 = tok$$5.tokenId;
        var v22890 = TypeScript$$29.TokenID;
        var v18902 = v22890.Import;
        v12953 = v18901 == v18902;
      }
      var v2622 = v12953;
      if (v2622) {
        tok$$5 = scanner$$1.scan();
        var v18903 = tok$$5.tokenId;
        var v22891 = TypeScript$$29.TokenID;
        var v18904 = v22891.Identifier;
        var v12954 = v18903 == v18904;
        var v18905 = !v12954;
        if (v18905) {
          v12954 = TypeScript$$29.convertTokToID(tok$$5, false);
        }
        var v2621 = v12954;
        if (v2621) {
          tok$$5 = scanner$$1.scan();
          var v12955 = tok$$5.tokenId;
          var v18906 = TypeScript$$29.TokenID;
          var v12956 = v18906.Equals;
          var v2620 = v12955 == v12956;
          if (v2620) {
            tok$$5 = scanner$$1.scan();
            var v12957 = tok$$5.tokenId;
            var v18907 = TypeScript$$29.TokenID;
            var v12958 = v18907.Module;
            var v2619 = v12957 == v12958;
            if (v2619) {
              tok$$5 = scanner$$1.scan();
              var v12959 = tok$$5.tokenId;
              var v18908 = TypeScript$$29.TokenID;
              var v12960 = v18908.OpenParen;
              var v2618 = v12959 == v12960;
              if (v2618) {
                tok$$5 = scanner$$1.scan();
                var v12961 = tok$$5.tokenId;
                var v18909 = TypeScript$$29.TokenID;
                var v12962 = v18909.StringLiteral;
                var v2617 = v12961 == v12962;
                if (v2617) {
                  var v2614 = scanner$$1.startPos;
                  var v2615 = scanner$$1.pos;
                  var v18910 = tok$$5.getText();
                  var v12963 = TypeScript$$29.switchToForwardSlashes(v18910);
                  var v2616 = TypeScript$$29.stripQuotes(v12963);
                  var ref$$2 = {minChar:v2614, limChar:v2615, path:v2616, isResident:false};
                  importedFiles.push(ref$$2);
                }
              }
            }
          }
        }
      }
      var v12964 = tok$$5.tokenId;
      var v18911 = TypeScript$$29.TokenID;
      var v12965 = v18911.OpenBrace;
      var v2623 = v12964 == v12965;
      if (v2623) {
        leftCurlies.push(tok$$5);
      }
      var v12966 = tok$$5.tokenId;
      var v18912 = TypeScript$$29.TokenID;
      var v12967 = v18912.CloseBrace;
      var v2624 = v12966 == v12967;
      if (v2624) {
        leftCurlies.pop();
      }
      tok$$5 = scanner$$1.scan();
      var v12968 = tok$$5.tokenId;
      var v18913 = TypeScript$$29.TokenID;
      var v12969 = v18913.EndOfFile;
      v2625 = v12968 != v12969;
    }
    comments$$12 = scanner$$1.getComments();
    var iComment = 0;
    var v12970 = comments$$12.length;
    var v2638 = iComment < v12970;
    for (;v2638;) {
      comment$$9 = comments$$12[iComment];
      var v12971 = comment$$9.isBlock;
      var v2637 = !v12971;
      if (v2637) {
        var referencedCode;
        JSCompiler_inline_label_getFileReferenceFromReferencePath_29: {
          var comment$$inline_23 = comment$$9.getText();
          var referencesRegEx$$inline_24 = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
          var match$$inline_25 = referencesRegEx$$inline_24.exec(comment$$inline_23);
          if (match$$inline_25) {
            var v2626 = match$$inline_25[3];
            var path$$inline_26 = TypeScript$$29.normalizePath(v2626);
            var adjustedPath$$inline_27 = TypeScript$$29.normalizePath(path$$inline_26);
            var v12972 = match$$inline_25.length;
            var v2627 = v12972 >= 7;
            if (v2627) {
              var v12973 = match$$inline_25[6];
              v2627 = v12973 == "true";
            }
            var isResident$$inline_28 = v2627;
            if (isResident$$inline_28) {
              var v2628 = TypeScript$$29.CompilerDiagnostics;
              var v2629 = path$$inline_26 + " is resident";
              v2628.debugPrint(v2629);
            }
            var v2630 = TypeScript$$29.switchToForwardSlashes(adjustedPath$$inline_27);
            referencedCode = {minChar:0, limChar:0, path:v2630, isResident:isResident$$inline_28};
          } else {
            referencedCode = null;
          }
        }
        if (referencedCode) {
          referencedCode.minChar = comment$$9.startPos;
          var v2631 = referencedCode.minChar;
          var v12974 = comment$$9.value;
          var v2632 = v12974.length;
          referencedCode.limChar = v2631 + v2632;
          referencedFiles.push(referencedCode);
        }
        if (settings$$3) {
          var v2633 = comment$$9.getText();
          var v2634 = settings$$3.styleSettings;
          getStyleSettings(v2633, v2634);
          var isNoLibRegex = /^(\/\/\/\s*<reference\s+no-default-lib=)('|")(.+?)\2\s*\/>/igm;
          var v2635 = comment$$9.getText();
          var isNoLibMatch = isNoLibRegex.exec(v2635);
          if (isNoLibMatch) {
            var v2636 = isNoLibMatch[3];
            isLibFile = v2636 == "true";
          }
        }
      }
      iComment++;
      var v12975 = comments$$12.length;
      v2638 = iComment < v12975;
    }
    return{settings:settings$$3, referencedFiles:referencedFiles, importedFiles:importedFiles, isLibFile:isLibFile};
  }
  var StyleSettings = v1183();
  TypeScript$$29.StyleSettings = StyleSettings;
  var CompilationSettings = v1185();
  TypeScript$$29.CompilationSettings = CompilationSettings;
  TypeScript$$29.getAdditionalDependencyPath = getAdditionalDependencyPath;
  TypeScript$$29.getImplicitImport = getImplicitImport;
  TypeScript$$29.getStyleSettings = getStyleSettings;
  TypeScript$$29.getReferencedFiles = getReferencedFiles;
  TypeScript$$29.preProcessFile = preProcessFile;
  return;
}
function v1180(TypeScript$$28) {
  function v1179() {
    function v1178(referencePath, parentPath, performSearch, resolutionDispatcher) {
      var resolvedFile = {content:"", path:referencePath};
      var v2639 = this.environment;
      var ioHost$$1 = v2639.ioHost;
      var isRelativePath = TypeScript$$28.isRelative(referencePath);
      var v2640;
      if (isRelativePath) {
        v2640 = false;
      } else {
        v2640 = TypeScript$$28.isRooted(referencePath);
      }
      var isRootedPath = v2640;
      var v2641;
      if (isRelativePath) {
        var v18914 = parentPath + "/";
        var v12976 = v18914 + referencePath;
        v2641 = ioHost$$1.resolvePath(v12976);
      } else {
        var v12977;
        var v24849 = isRootedPath;
        var v25707 = !v24849;
        if (v25707) {
          v24849 = !parentPath;
        }
        var v22892 = v24849;
        var v24850 = !v22892;
        if (v24850) {
          v22892 = performSearch;
        }
        var v18916 = v22892;
        if (v18916) {
          v12977 = referencePath;
        } else {
          var v18915 = parentPath + "/";
          v12977 = v18915 + referencePath;
        }
        v2641 = v12977;
      }
      var normalizedPath = v2641;
      var v18917 = TypeScript$$28.isSTRFile(normalizedPath);
      var v12978 = !v18917;
      if (v12978) {
        var v18918 = TypeScript$$28.isTSFile(normalizedPath);
        v12978 = !v18918;
      }
      var v2642 = v12978;
      if (v2642) {
        normalizedPath = normalizedPath + ".ts";
      }
      var v2643 = TypeScript$$28.stripQuotes(normalizedPath);
      normalizedPath = TypeScript$$28.switchToForwardSlashes(v2643);
      var v2644;
      var v22893 = this.environment;
      var v18919 = v22893.compilationSettings;
      var v12979 = v18919.useCaseSensitiveFileResolution;
      if (v12979) {
        v2644 = normalizedPath;
      } else {
        v2644 = normalizedPath.toLocaleUpperCase();
      }
      var absoluteModuleID = v2644;
      var v18920 = this.visited;
      var v12980 = v18920[absoluteModuleID];
      var v2685 = !v12980;
      if (v2685) {
        var v12981 = isRelativePath || isRootedPath;
        var v18921 = !v12981;
        if (v18921) {
          v12981 = !performSearch;
        }
        var v2671 = v12981;
        if (v2671) {
          try {
            var v2645 = TypeScript$$28.CompilerDiagnostics;
            var v2646 = "   Reading code from " + normalizedPath;
            v2645.debugPrint(v2646);
            try {
              var v26467 = ioHost$$1.readFile(normalizedPath);
              resolvedFile.content = v26467;
            } catch (err) {
              try {
                var v2648 = TypeScript$$28.isSTRFile(normalizedPath);
                if (v2648) {
                  normalizedPath = TypeScript$$28.changePathToTS(normalizedPath);
                } else {
                  var v2647 = TypeScript$$28.isTSFile(normalizedPath);
                  if (v2647) {
                    normalizedPath = TypeScript$$28.changePathToSTR(normalizedPath);
                  }
                }
                var v2649 = TypeScript$$28.CompilerDiagnostics;
                var v2650 = "   Reading code from " + normalizedPath;
                v2649.debugPrint(v2650);
                var v26468 = ioHost$$1.readFile(normalizedPath);
                resolvedFile.content = v26468;
              } catch (err$$1) {
                normalizedPath = TypeScript$$28.changePathToDSTR(normalizedPath);
                var v2651 = TypeScript$$28.CompilerDiagnostics;
                var v2652 = "   Reading code from " + normalizedPath;
                v2651.debugPrint(v2652);
                try {
                  var v26469 = ioHost$$1.readFile(normalizedPath);
                  resolvedFile.content = v26469;
                } catch (err$$2) {
                  normalizedPath = TypeScript$$28.changePathToDTS(normalizedPath);
                  var v2653 = TypeScript$$28.CompilerDiagnostics;
                  var v2654 = "   Reading code from " + normalizedPath;
                  v2653.debugPrint(v2654);
                  var v26470 = ioHost$$1.readFile(normalizedPath);
                  resolvedFile.content = v26470;
                }
              }
            }
            var v2655 = TypeScript$$28.CompilerDiagnostics;
            var v2656 = "   Found code at " + normalizedPath;
            v2655.debugPrint(v2656);
            resolvedFile.path = normalizedPath;
            var v2657 = this.visited;
            v2657[absoluteModuleID] = true;
          } catch (err$$3) {
            var v2658 = TypeScript$$28.CompilerDiagnostics;
            var v2659 = "   Did not find code for " + referencePath;
            v2658.debugPrint(v2659);
          }
        } else {
          resolvedFile = ioHost$$1.findFile(parentPath, normalizedPath);
          var v2662 = !resolvedFile;
          if (v2662) {
            var v2661 = TypeScript$$28.isSTRFile(normalizedPath);
            if (v2661) {
              normalizedPath = TypeScript$$28.changePathToTS(normalizedPath);
            } else {
              var v2660 = TypeScript$$28.isTSFile(normalizedPath);
              if (v2660) {
                normalizedPath = TypeScript$$28.changePathToSTR(normalizedPath);
              }
            }
            resolvedFile = ioHost$$1.findFile(parentPath, normalizedPath);
          }
          var v2664 = !resolvedFile;
          if (v2664) {
            normalizedPath = TypeScript$$28.changePathToDTS(normalizedPath);
            resolvedFile = ioHost$$1.findFile(parentPath, normalizedPath);
            var v2663 = !resolvedFile;
            if (v2663) {
              normalizedPath = TypeScript$$28.changePathToDSTR(normalizedPath);
              resolvedFile = ioHost$$1.findFile(parentPath, normalizedPath);
            }
          }
          if (resolvedFile) {
            var v12982 = resolvedFile.path;
            var v2665 = TypeScript$$28.stripQuotes(v12982);
            var v26471 = TypeScript$$28.switchToForwardSlashes(v2665);
            resolvedFile.path = v26471;
            var v2666 = TypeScript$$28.CompilerDiagnostics;
            var v12983 = referencePath + " resolved to: ";
            var v12984 = resolvedFile.path;
            var v2667 = v12983 + v12984;
            v2666.debugPrint(v2667);
            resolvedFile.content = resolvedFile.content;
            var v2668 = this.visited;
            v2668[absoluteModuleID] = true;
          } else {
            var v2669 = TypeScript$$28.CompilerDiagnostics;
            var v2670 = "Could not find " + referencePath;
            v2669.debugPrint(v2670);
          }
        }
        var v12985 = resolvedFile;
        if (v12985) {
          v12985 = resolvedFile.content;
        }
        var v2684 = v12985;
        if (v2684) {
          var v2672 = resolvedFile.path;
          var rootDir = ioHost$$1.dirName(v2672);
          var v2673 = resolvedFile.path;
          var v2674 = resolvedFile.content;
          var sourceUnit = new SourceUnit(v2673, v2674);
          var v12986 = this.environment;
          var v2675 = v12986.compilationSettings;
          var preProcessedFileInfo = TypeScript$$28.preProcessFile(sourceUnit, v2675);
          sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;
          var i$$116 = 0;
          var v18922 = preProcessedFileInfo.referencedFiles;
          var v12987 = v18922.length;
          var v2680 = i$$116 < v12987;
          for (;v2680;) {
            var v2676 = preProcessedFileInfo.referencedFiles;
            var referencedFile = v2676[i$$116];
            var v2677;
            var v18923 = referencedFile.path;
            var v12990 = TypeScript$$28.isRooted(v18923);
            if (v12990) {
              v2677 = referencedFile.path;
            } else {
              var v12988 = rootDir + "/";
              var v12989 = referencedFile.path;
              v2677 = v12988 + v12989;
            }
            normalizedPath = v2677;
            normalizedPath = ioHost$$1.resolvePath(normalizedPath);
            var v2678 = referencePath == normalizedPath;
            if (v2678) {
              resolutionDispatcher.postResolutionError(normalizedPath, "File contains reference to itself", null);
              i$$116++;
              var v18924 = preProcessedFileInfo.referencedFiles;
              var v12991 = v18924.length;
              v2680 = i$$116 < v12991;
              continue;
            }
            var v2679 = referencedFile.path;
            this.resolveCode(v2679, rootDir, false, resolutionDispatcher);
            i$$116++;
            var v18925 = preProcessedFileInfo.referencedFiles;
            var v12992 = v18925.length;
            v2680 = i$$116 < v12992;
          }
          i$$116 = 0;
          var v18926 = preProcessedFileInfo.importedFiles;
          var v12993 = v18926.length;
          var v2682 = i$$116 < v12993;
          for (;v2682;) {
            var v18927 = preProcessedFileInfo.importedFiles;
            var v12994 = v18927[i$$116];
            var v2681 = v12994.path;
            this.resolveCode(v2681, rootDir, true, resolutionDispatcher);
            i$$116++;
            var v18928 = preProcessedFileInfo.importedFiles;
            var v12995 = v18928.length;
            v2682 = i$$116 < v12995;
          }
          var v2683 = sourceUnit.path;
          resolutionDispatcher.postResolution(v2683, sourceUnit);
        }
      }
      return;
    }
    function CodeResolver$$1(environment) {
      this.environment = environment;
      this.visited = {};
      return;
    }
    var v2686 = CodeResolver$$1.prototype;
    v2686.resolveCode = v1178;
    return CodeResolver$$1;
  }
  function v1177() {
    function CompilationEnvironment$$1(compilationSettings, ioHost) {
      this.compilationSettings = compilationSettings;
      this.ioHost = ioHost;
      this.residentCode = [];
      this.code = [];
      return;
    }
    return CompilationEnvironment$$1;
  }
  function v1176() {
    function v1175() {
      var v2687 = this.content;
      return v2687.length;
    }
    function v1174(start$$12, end$$6) {
      var v2688 = this.content;
      return v2688.substring(start$$12, end$$6);
    }
    function SourceUnit$$1(path$$16, content$$5) {
      this.path = path$$16;
      this.content = content$$5;
      this.referencedFiles = null;
      return;
    }
    var v2689 = SourceUnit$$1.prototype;
    v2689.getText = v1174;
    var v2690 = SourceUnit$$1.prototype;
    v2690.getLength = v1175;
    return SourceUnit$$1;
  }
  var SourceUnit = v1176();
  TypeScript$$28.SourceUnit = SourceUnit;
  var CompilationEnvironment = v1177();
  TypeScript$$28.CompilationEnvironment = CompilationEnvironment;
  var CodeResolver = v1179();
  TypeScript$$28.CodeResolver = CodeResolver;
  return;
}
function v1173(TypeScript$$27) {
  function stripQuotes(str$$7) {
    var v18929 = str$$7.replace('"', "");
    var v12996 = v18929.replace("'", "");
    var v2691 = v12996.replace("'", "");
    return v2691.replace('"', "");
  }
  function isQuoted(str$$8) {
    var v22894 = str$$8.indexOf('"');
    var v18930 = v22894 != -1;
    var v22896 = !v18930;
    if (v22896) {
      var v22895 = str$$8.indexOf("'");
      v18930 = v22895 != -1;
    }
    var v12997 = v18930;
    var v18932 = !v12997;
    if (v18932) {
      var v18931 = str$$8.indexOf("'");
      v12997 = v18931 != -1;
    }
    var v2692 = v12997;
    var v12999 = !v2692;
    if (v12999) {
      var v12998 = str$$8.indexOf('"');
      v2692 = v12998 != -1;
    }
    return v2692;
  }
  function quoteStr(str$$9) {
    var v2693 = '"' + str$$9;
    return v2693 + '"';
  }
  function swapQuotes(str$$10) {
    var v13000 = str$$10.indexOf('"');
    var v2694 = v13000 != -1;
    if (v2694) {
      str$$10 = str$$10.replace('"', "'");
      str$$10 = str$$10.replace('"', "'");
    } else {
      str$$10 = str$$10.replace("'", '"');
      str$$10 = str$$10.replace("'", '"');
    }
    return str$$10;
  }
  function switchToForwardSlashes(path$$8) {
    return path$$8.replace(/\\/g, "/");
  }
  function trimModName(modName$$4) {
    var v18933 = modName$$4.length;
    var v13001 = v18933 > 6;
    if (v13001) {
      var v24851 = modName$$4.length;
      var v22897 = v24851 - 6;
      var v22898 = modName$$4.length;
      var v18934 = modName$$4.substring(v22897, v22898);
      v13001 = v18934 == ".d.str";
    }
    var v2696 = v13001;
    if (v2696) {
      var v13002 = modName$$4.length;
      var v2695 = v13002 - 6;
      return modName$$4.substring(0, v2695);
    }
    var v18935 = modName$$4.length;
    var v13003 = v18935 > 4;
    if (v13003) {
      var v24852 = modName$$4.length;
      var v22899 = v24852 - 4;
      var v22900 = modName$$4.length;
      var v18936 = modName$$4.substring(v22899, v22900);
      v13003 = v18936 == ".str";
    }
    var v2698 = v13003;
    if (v2698) {
      var v13004 = modName$$4.length;
      var v2697 = v13004 - 4;
      return modName$$4.substring(0, v2697);
    }
    var v18937 = modName$$4.length;
    var v13005 = v18937 > 5;
    if (v13005) {
      var v24853 = modName$$4.length;
      var v22901 = v24853 - 5;
      var v22902 = modName$$4.length;
      var v18938 = modName$$4.substring(v22901, v22902);
      v13005 = v18938 == ".d.ts";
    }
    var v2700 = v13005;
    if (v2700) {
      var v13006 = modName$$4.length;
      var v2699 = v13006 - 5;
      return modName$$4.substring(0, v2699);
    }
    var v18939 = modName$$4.length;
    var v13007 = v18939 > 3;
    if (v13007) {
      var v24854 = modName$$4.length;
      var v22903 = v24854 - 3;
      var v22904 = modName$$4.length;
      var v18940 = modName$$4.substring(v22903, v22904);
      v13007 = v18940 == ".ts";
    }
    var v2702 = v13007;
    if (v2702) {
      var v13008 = modName$$4.length;
      var v2701 = v13008 - 3;
      return modName$$4.substring(0, v2701);
    }
    var v18941 = modName$$4.length;
    var v13009 = v18941 > 3;
    if (v13009) {
      var v24855 = modName$$4.length;
      var v22905 = v24855 - 3;
      var v22906 = modName$$4.length;
      var v18942 = modName$$4.substring(v22905, v22906);
      v13009 = v18942 == ".js";
    }
    var v2704 = v13009;
    if (v2704) {
      var v13010 = modName$$4.length;
      var v2703 = v13010 - 3;
      return modName$$4.substring(0, v2703);
    }
    return modName$$4;
  }
  function getDeclareFilePath(fname) {
    var v2705;
    var v13012 = isSTRFile(fname);
    if (v13012) {
      v2705 = changePathToDSTR(fname);
    } else {
      var v13011;
      var v18943 = isTSFile(fname);
      if (v18943) {
        v13011 = changePathToDTS(fname);
      } else {
        v13011 = changePathToDTS(fname);
      }
      v2705 = v13011;
    }
    return v2705;
  }
  function isFileOfExtension(fname$$1, ext) {
    var invariantFname = fname$$1.toLocaleUpperCase();
    var invariantExt = ext.toLocaleUpperCase();
    var extLength = invariantExt.length;
    var v13013 = invariantFname.length;
    var v2706 = v13013 > extLength;
    if (v2706) {
      var v22907 = invariantFname.length;
      var v18944 = v22907 - extLength;
      var v18945 = invariantFname.length;
      var v13014 = invariantFname.substring(v18944, v18945);
      v2706 = v13014 == invariantExt;
    }
    return v2706;
  }
  function isJSFile(fname$$2) {
    return isFileOfExtension(fname$$2, ".js");
  }
  function isSTRFile(fname$$3) {
    return isFileOfExtension(fname$$3, ".str");
  }
  function isTSFile(fname$$4) {
    return isFileOfExtension(fname$$4, ".ts");
  }
  function isDSTRFile(fname$$5) {
    return isFileOfExtension(fname$$5, ".d.str");
  }
  function isDTSFile(fname$$6) {
    return isFileOfExtension(fname$$6, ".d.ts");
  }
  function getPrettyName(modPath$$3, quote$$1, treatAsFileName) {
    var v13015 = typeof quote$$1;
    var v2707 = v13015 === "undefined";
    if (v2707) {
      quote$$1 = true;
    }
    var v13016 = typeof treatAsFileName;
    var v2708 = v13016 === "undefined";
    if (v2708) {
      treatAsFileName = false;
    }
    var v2709;
    if (treatAsFileName) {
      v2709 = switchToForwardSlashes(modPath$$3);
    } else {
      var v13017 = stripQuotes(modPath$$3);
      v2709 = trimModName(v13017);
    }
    var modName$$5 = v2709;
    var components = this.getPathComponents(modName$$5);
    var v2710;
    var v13019 = components.length;
    if (v13019) {
      var v13018;
      if (quote$$1) {
        var v24856 = components.length;
        var v22908 = v24856 - 1;
        var v18946 = components[v22908];
        v13018 = quoteStr(v18946);
      } else {
        var v22909 = components.length;
        var v18947 = v22909 - 1;
        v13018 = components[v18947];
      }
      v2710 = v13018;
    } else {
      v2710 = modPath$$3;
    }
    return v2710;
  }
  function getPathComponents(path$$9) {
    return path$$9.split("/");
  }
  function getRelativePathToFixedPath(fixedModFilePath, absoluteModPath) {
    absoluteModPath = switchToForwardSlashes(absoluteModPath);
    var modComponents = this.getPathComponents(absoluteModPath);
    var fixedModComponents = this.getPathComponents(fixedModFilePath);
    var joinStartIndex = 0;
    var v18948 = modComponents.length;
    var v13020 = joinStartIndex < v18948;
    if (v13020) {
      var v18949 = fixedModComponents.length;
      v13020 = joinStartIndex < v18949;
    }
    var v2712 = v13020;
    for (;v2712;) {
      var v13021 = fixedModComponents[joinStartIndex];
      var v13022 = modComponents[joinStartIndex];
      var v2711 = v13021 != v13022;
      if (v2711) {
        break;
      }
      joinStartIndex++;
      var v18950 = modComponents.length;
      var v13023 = joinStartIndex < v18950;
      if (v13023) {
        var v18951 = fixedModComponents.length;
        v13023 = joinStartIndex < v18951;
      }
      v2712 = v13023;
    }
    var v2717 = joinStartIndex != 0;
    if (v2717) {
      var relativePath = "";
      var v2713 = modComponents.length;
      var relativePathComponents = modComponents.slice(joinStartIndex, v2713);
      var v13024 = fixedModComponents.length;
      var v2715 = joinStartIndex < v13024;
      for (;v2715;) {
        var v13025 = fixedModComponents[joinStartIndex];
        var v2714 = v13025 != "";
        if (v2714) {
          relativePath = relativePath + "../";
        }
        joinStartIndex++;
        var v13026 = fixedModComponents.length;
        v2715 = joinStartIndex < v13026;
      }
      var v2716 = relativePathComponents.join("/");
      return relativePath + v2716;
    }
    return absoluteModPath;
  }
  function quoteBaseName(modPath$$4) {
    var v2718 = stripQuotes(modPath$$4);
    var modName$$6 = trimModName(v2718);
    var path$$10 = getRootFilePath(modName$$6);
    var v2721 = path$$10 == "";
    if (v2721) {
      return modPath$$4;
    } else {
      var components$$1 = modName$$6.split(path$$10);
      var v2719;
      var v18952 = components$$1.length;
      var v13027 = v18952 > 1;
      if (v13027) {
        v2719 = 1;
      } else {
        v2719 = 0;
      }
      var fileIndex = v2719;
      var v2720 = components$$1[fileIndex];
      return quoteStr(v2720);
    }
    return;
  }
  function changePathToSTR(modPath$$5) {
    var v13028 = stripQuotes(modPath$$5);
    var v2722 = trimModName(v13028);
    return v2722 + ".str";
  }
  function changePathToDSTR(modPath$$6) {
    var v13029 = stripQuotes(modPath$$6);
    var v2723 = trimModName(v13029);
    return v2723 + ".d.str";
  }
  function changePathToTS(modPath$$7) {
    var v13030 = stripQuotes(modPath$$7);
    var v2724 = trimModName(v13030);
    return v2724 + ".ts";
  }
  function changePathToDTS(modPath$$8) {
    var v13031 = stripQuotes(modPath$$8);
    var v2725 = trimModName(v13031);
    return v2725 + ".d.ts";
  }
  function isRelative(path$$11) {
    var v2726 = path$$11.charAt(0);
    return v2726 == ".";
  }
  function isRooted(path$$12) {
    var v22910 = path$$12.charAt(0);
    var v18953 = v22910 == "\\";
    var v22912 = !v18953;
    if (v22912) {
      var v22911 = path$$12.charAt(0);
      v18953 = v22911 == "/";
    }
    var v13032 = v18953;
    var v18955 = !v13032;
    if (v18955) {
      var v18954 = path$$12.indexOf(":\\");
      v13032 = v18954 != -1;
    }
    var v2727 = v13032;
    var v13034 = !v2727;
    if (v13034) {
      var v13033 = path$$12.indexOf(":/");
      v2727 = v13033 != -1;
    }
    return v2727;
  }
  function getRootFilePath(outFname) {
    var v2730 = outFname == "";
    if (v2730) {
      return outFname;
    } else {
      var v2728 = outFname.indexOf("/");
      var isPath = v2728 != -1;
      var v2729;
      if (isPath) {
        v2729 = filePath(outFname);
      } else {
        v2729 = "";
      }
      return v2729;
    }
    return;
  }
  function filePathComponents(fullPath) {
    fullPath = switchToForwardSlashes(fullPath);
    var components$$2 = getPathComponents(fullPath);
    var v13035 = components$$2.length;
    var v2731 = v13035 - 1;
    return components$$2.slice(0, v2731);
  }
  function filePath(fullPath$$1) {
    var path$$13 = filePathComponents(fullPath$$1);
    var v2732 = path$$13.join("/");
    return v2732 + "/";
  }
  function normalizeURL(url$$2) {
    var hostDomainAndPortRegex = /^(https?:\/\/[\-\w\.]+(:\d+)?\/)(.*)$/i;
    var matches = hostDomainAndPortRegex.exec(url$$2);
    if (matches) {
      var hostDomainAndPort = matches[1];
      var actualPath = matches[3];
      var v2733 = normalizePath(actualPath);
      return hostDomainAndPort + v2733;
    }
    return normalizePath(url$$2);
  }
  function normalizePath(path$$14) {
    path$$14 = switchToForwardSlashes(path$$14);
    var v2734 = path$$14.charAt(0);
    var startedWithSep = v2734 === "/";
    var parts = this.getPathComponents(path$$14);
    var i$$115 = 0;
    var v13036 = parts.length;
    var v2738 = i$$115 < v13036;
    for (;v2738;) {
      var v18956 = parts[i$$115];
      var v13037 = v18956 === ".";
      var v18958 = !v13037;
      if (v18958) {
        var v18957 = parts[i$$115];
        v13037 = v18957 === "";
      }
      var v2735 = v13037;
      if (v2735) {
        parts.splice(i$$115, 1);
        i$$115--;
      }
      var v18959 = i$$115 > 0;
      if (v18959) {
        var v22913 = parts[i$$115];
        v18959 = v22913 === "..";
      }
      var v13038 = v18959;
      if (v13038) {
        var v22914 = i$$115 - 1;
        var v18960 = parts[v22914];
        v13038 = v18960 !== "..";
      }
      var v2737 = v13038;
      if (v2737) {
        var v2736 = i$$115 - 1;
        parts.splice(v2736, 2);
        i$$115 = i$$115 - 2;
      }
      i$$115++;
      var v13039 = parts.length;
      v2738 = i$$115 < v13039;
    }
    var v13040;
    if (startedWithSep) {
      v13040 = "/";
    } else {
      v13040 = "";
    }
    var v2739 = v13040;
    var v2740 = parts.join("/");
    return v2739 + v2740;
  }
  function normalizeImportPath(path$$15) {
    return normalizePath(path$$15);
  }
  TypeScript$$27.stripQuotes = stripQuotes;
  TypeScript$$27.isQuoted = isQuoted;
  TypeScript$$27.quoteStr = quoteStr;
  TypeScript$$27.swapQuotes = swapQuotes;
  TypeScript$$27.switchToForwardSlashes = switchToForwardSlashes;
  TypeScript$$27.trimModName = trimModName;
  TypeScript$$27.getDeclareFilePath = getDeclareFilePath;
  TypeScript$$27.isJSFile = isJSFile;
  TypeScript$$27.isSTRFile = isSTRFile;
  TypeScript$$27.isTSFile = isTSFile;
  TypeScript$$27.isDSTRFile = isDSTRFile;
  TypeScript$$27.isDTSFile = isDTSFile;
  TypeScript$$27.getPrettyName = getPrettyName;
  TypeScript$$27.getPathComponents = getPathComponents;
  TypeScript$$27.getRelativePathToFixedPath = getRelativePathToFixedPath;
  TypeScript$$27.quoteBaseName = quoteBaseName;
  TypeScript$$27.changePathToSTR = changePathToSTR;
  TypeScript$$27.changePathToDSTR = changePathToDSTR;
  TypeScript$$27.changePathToTS = changePathToTS;
  TypeScript$$27.changePathToDTS = changePathToDTS;
  TypeScript$$27.isRelative = isRelative;
  TypeScript$$27.isRooted = isRooted;
  TypeScript$$27.getRootFilePath = getRootFilePath;
  TypeScript$$27.filePathComponents = filePathComponents;
  TypeScript$$27.filePath = filePath;
  TypeScript$$27.normalizeURL = normalizeURL;
  TypeScript$$27.pathNormalizeRegExp = /\//g;
  TypeScript$$27.normalizePath = normalizePath;
  TypeScript$$27.normalizeImportPath = normalizeImportPath;
  return;
}
function v1172(TypeScript$$26) {
  function v1171() {
    function TypeLink$$1() {
      this.type = null;
      this.ast = null;
      return;
    }
    return TypeLink$$1;
  }
  function v1170(_super$$67) {
    function v1169(moduleType$$2) {
      var moduleName$$2 = null;
      var v13041 = this.members;
      var v2741 = v13041.allMembers;
      moduleName$$2 = ModuleType$$1.findDynamicModuleNameInHashTable(moduleType$$2, v2741);
      var v2743 = moduleName$$2 == null;
      if (v2743) {
        var v13042 = this.ambientMembers;
        var v2742 = v13042.allMembers;
        moduleName$$2 = ModuleType$$1.findDynamicModuleNameInHashTable(moduleType$$2, v2742);
      }
      return moduleName$$2;
    }
    function findDynamicModuleNameInHashTable(moduleType$$1, members$$27) {
      function v1168(key$$51, s$$34, c$$13) {
        var v13043 = moduleName$$1 == null;
        if (v13043) {
          var v18961 = TypeScript$$26.isQuoted(key$$51);
          v13043 = !v18961;
        }
        var v2745 = v13043;
        if (v2745) {
          var symbol$$22 = s$$34;
          var type$$57 = symbol$$22.getType();
          var v2744 = type$$57 == moduleType$$1;
          if (v2744) {
            moduleName$$1 = {name:key$$51, symbol:symbol$$22};
          }
        }
        return;
      }
      var moduleName$$1 = null;
      members$$27.map(v1168, null);
      return moduleName$$1;
    }
    function v1167() {
      return null;
    }
    function v1166() {
      return null;
    }
    function v1165() {
      return this.ambientEnclosedTypes;
    }
    function v1164() {
      return this.enclosedTypes;
    }
    function v1163() {
      var v13044 = this.members;
      var v2746 = v13044 != null;
      var v13046 = !v2746;
      if (v13046) {
        var v13045 = this.enclosedTypes;
        v2746 = v13045 != null;
      }
      return v2746;
    }
    function v1162() {
      return true;
    }
    function ModuleType$$1(enclosedTypes$$4, ambientEnclosedTypes$$4) {
      _super$$67.call(this);
      this.enclosedTypes = enclosedTypes$$4;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$4;
      this.importedModules = [];
      return;
    }
    __extends(ModuleType$$1, _super$$67);
    var v2747 = ModuleType$$1.prototype;
    v2747.isModuleType = v1162;
    var v2748 = ModuleType$$1.prototype;
    v2748.hasMembers = v1163;
    var v2749 = ModuleType$$1.prototype;
    v2749.getAllEnclosedTypes = v1164;
    var v2750 = ModuleType$$1.prototype;
    v2750.getAllAmbientEnclosedTypes = v1165;
    var v2751 = ModuleType$$1.prototype;
    v2751.getPublicEnclosedTypes = v1166;
    var v2752 = ModuleType$$1.prototype;
    v2752.getpublicAmbientEnclosedTypes = v1167;
    ModuleType$$1.findDynamicModuleNameInHashTable = findDynamicModuleNameInHashTable;
    var v2753 = ModuleType$$1.prototype;
    v2753.findDynamicModuleName = v1169;
    return ModuleType$$1;
  }
  function v1161() {
    function v1160() {
      var v13047 = this.elementType;
      var v18963 = !v13047;
      if (v18963) {
        var v18962 = this.symbol;
        v13047 = !v18962;
      }
      var v2754 = v13047;
      if (v2754) {
        return[];
      }
      var v13048 = this.isClassInstance();
      var v18964 = !v13048;
      if (v18964) {
        v13048 = this.isClass();
      }
      var v2758 = v13048;
      if (v2758) {
        var v22915 = this.symbol;
        var v18965 = v22915.declAST;
        var v13049 = v18965.nodeType;
        var v18966 = TypeScript$$26.NodeType;
        var v13050 = v18966.FuncDecl;
        var v2757 = v13049 == v13050;
        if (v2757) {
          var v18967 = this.symbol;
          var v13051 = v18967.declAST;
          var v2755 = v13051.classDecl;
          return v2755.getDocComments();
        } else {
          var v2756 = this.symbol;
          return v2756.getDocComments();
        }
      }
      var v22916 = this.symbol;
      var v18968 = v22916.name;
      if (v18968) {
        var v24857 = this.symbol;
        var v22917 = v24857.name;
        v18968 = v22917 != "_anonymous";
      }
      var v13052 = v18968;
      if (v13052) {
        var v25708 = this.call;
        var v24858 = v25708 == null;
        if (v24858) {
          var v25709 = this.construct;
          v24858 = v25709 == null;
        }
        var v22918 = v24858;
        if (v22918) {
          var v24859 = this.index;
          v22918 = v24859 == null;
        }
        var v18969 = v22918;
        var v22919 = !v18969;
        if (v22919) {
          v18969 = this.members;
        }
        v13052 = v18969;
      }
      var v2760 = v13052;
      if (v2760) {
        var v2759 = this.symbol;
        return v2759.getDocComments();
      }
      return[];
    }
    function v1159() {
      return null;
    }
    function v1158() {
      return null;
    }
    function v1157() {
      return null;
    }
    function v1156() {
      return null;
    }
    function v1155() {
      var v2761 = this.members;
      return v2761 != null;
    }
    function v1154() {
      return false;
    }
    function v1153(b$$14, checker$$22, acceptVoid$$1, comparisonInfo$$17) {
      var v18970 = checker$$22.anyType;
      var v13053 = this == v18970;
      var v18972 = !v13053;
      if (v18972) {
        var v18971 = checker$$22.anyType;
        v13053 = b$$14 == v18971;
      }
      var v2777 = v13053;
      if (v2777) {
        return checker$$22.anyType;
      } else {
        var v2776 = this == b$$14;
        if (v2776) {
          return this;
        } else {
          var v18973 = checker$$22.nullType;
          var v13054 = b$$14 == v18973;
          if (v13054) {
            var v18974 = checker$$22.nullType;
            v13054 = this != v18974;
          }
          var v2775 = v13054;
          if (v2775) {
            return this;
          } else {
            var v18975 = checker$$22.nullType;
            var v13055 = this == v18975;
            if (v13055) {
              var v18976 = checker$$22.nullType;
              v13055 = b$$14 != v18976;
            }
            var v2774 = v13055;
            if (v2774) {
              return b$$14;
            } else {
              var v18977 = acceptVoid$$1;
              if (v18977) {
                var v22920 = checker$$22.voidType;
                v18977 = b$$14 == v22920;
              }
              var v13056 = v18977;
              if (v13056) {
                var v18978 = checker$$22.voidType;
                v13056 = this != v18978;
              }
              var v2773 = v13056;
              if (v2773) {
                return this;
              } else {
                var v18979 = acceptVoid$$1;
                if (v18979) {
                  var v22921 = checker$$22.voidType;
                  v18979 = this == v22921;
                }
                var v13057 = v18979;
                if (v13057) {
                  var v18980 = checker$$22.voidType;
                  v13057 = b$$14 != v18980;
                }
                var v2772 = v13057;
                if (v2772) {
                  return b$$14;
                } else {
                  var v18981 = checker$$22.undefinedType;
                  var v13058 = b$$14 == v18981;
                  if (v13058) {
                    var v18982 = checker$$22.undefinedType;
                    v13058 = this != v18982;
                  }
                  var v2771 = v13058;
                  if (v2771) {
                    return this;
                  } else {
                    var v18983 = checker$$22.undefinedType;
                    var v13059 = this == v18983;
                    if (v13059) {
                      var v18984 = checker$$22.undefinedType;
                      v13059 = b$$14 != v18984;
                    }
                    var v2770 = v13059;
                    if (v2770) {
                      return b$$14;
                    } else {
                      var v13060 = this.elementType;
                      if (v13060) {
                        v13060 = b$$14.elementType;
                      }
                      var v2769 = v13060;
                      if (v2769) {
                        var v13061 = this.elementType;
                        var v13062 = b$$14.elementType;
                        var v2766 = v13061 == v13062;
                        if (v2766) {
                          return this;
                        } else {
                          var v2762 = this.elementType;
                          var v2763 = b$$14.elementType;
                          var mergedET = v2762.mergeOrdered(v2763, checker$$22, acceptVoid$$1, comparisonInfo$$17);
                          var v2765 = mergedET == null;
                          if (v2765) {
                            var v2764 = checker$$22.anyType;
                            return checker$$22.makeArrayType(v2764);
                          } else {
                            return checker$$22.makeArrayType(mergedET);
                          }
                        }
                      } else {
                        var v2768 = checker$$22.sourceIsSubtypeOfTarget(this, b$$14, comparisonInfo$$17);
                        if (v2768) {
                          return b$$14;
                        } else {
                          var v2767 = checker$$22.sourceIsSubtypeOfTarget(b$$14, this, comparisonInfo$$17);
                          if (v2767) {
                            return this;
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return;
    }
    function v1152(baseType) {
      var v2782 = baseType == this;
      if (v2782) {
        return true;
      } else {
        var v2781 = this.extendsList;
        if (v2781) {
          var i$$114 = 0;
          var v2778 = this.extendsList;
          var len$$56 = v2778.length;
          var v2780 = i$$114 < len$$56;
          for (;v2780;) {
            var v18985 = this.extendsList;
            var v13063 = v18985[i$$114];
            var v2779 = v13063.hasBase(baseType);
            if (v2779) {
              return true;
            }
            i$$114++;
            v2780 = i$$114 < len$$56;
          }
        }
      }
      return false;
    }
    function v1151(pattern$$8, replacement$$6, checker$$21, membersOnly) {
      function v1150(key$$50, s$$33, unused$$5) {
        var sym$$48 = s$$33;
        var bSym$$4 = sym$$48.specializeType(pattern$$8, replacement$$6, checker$$21);
        var v2783 = result$$33.ambientMembers;
        var v2784 = bSym$$4.name;
        v2783.addPrivateMember(v2784, bSym$$4);
        return;
      }
      function v1149(key$$49, s$$32, unused$$4) {
        var sym$$47 = s$$32;
        var bSym$$3 = sym$$47.specializeType(pattern$$8, replacement$$6, checker$$21);
        var v2785 = result$$33.ambientMembers;
        var v2786 = bSym$$3.name;
        v2785.addPublicMember(v2786, bSym$$3);
        return;
      }
      function v1148(key$$48, s$$31, unused$$3) {
        var sym$$46 = s$$31;
        var bSym$$2 = sym$$46.specializeType(pattern$$8, replacement$$6, checker$$21);
        var v2787 = result$$33.members;
        var v2788 = bSym$$2.name;
        v2787.addPrivateMember(v2788, bSym$$2);
        return;
      }
      function v1147(key$$47, s$$30, unused$$2) {
        var sym$$45 = s$$30;
        var bSym$$1 = sym$$45.specializeType(pattern$$8, replacement$$6, checker$$21);
        var v2789 = result$$33.members;
        var v2790 = bSym$$1.name;
        v2789.addPublicMember(v2790, bSym$$1);
        return;
      }
      var v2791 = pattern$$8 == this;
      if (v2791) {
        return replacement$$6;
      }
      var result$$33 = this;
      if (membersOnly) {
        var v2801 = this.isReferenceType();
        if (v2801) {
          result$$33 = new Type$$1;
          var v2795 = this.members;
          if (v2795) {
            var v2792 = result$$33;
            var v13064 = TypeScript$$26.ScopedMembers;
            var v18986 = TypeScript$$26.DualStringHashTable;
            var v22922 = TypeScript$$26.StringHashTable;
            var v18987 = new v22922;
            var v22923 = TypeScript$$26.StringHashTable;
            var v18988 = new v22923;
            var v13065 = new v18986(v18987, v18988);
            var v26472 = new v13064(v13065);
            v2792.members = v26472;
            var v13066 = this.members;
            var v2793 = v13066.publicMembers;
            v2793.map(v1147, null);
            var v13067 = this.members;
            var v2794 = v13067.privateMembers;
            v2794.map(v1148, null);
          }
          var v2799 = this.ambientMembers;
          if (v2799) {
            var v2796 = result$$33;
            var v13068 = TypeScript$$26.ScopedMembers;
            var v18989 = TypeScript$$26.DualStringHashTable;
            var v22924 = TypeScript$$26.StringHashTable;
            var v18990 = new v22924;
            var v22925 = TypeScript$$26.StringHashTable;
            var v18991 = new v22925;
            var v13069 = new v18989(v18990, v18991);
            var v26473 = new v13068(v13069);
            v2796.ambientMembers = v26473;
            var v13070 = this.ambientMembers;
            var v2797 = v13070.publicMembers;
            v2797.map(v1149, null);
            var v13071 = this.ambientMembers;
            var v2798 = v13071.privateMembers;
            v2798.map(v1150, null);
          }
          var v2800 = result$$33;
          var v26474 = checker$$21.scopeOf(result$$33);
          v2800.containedScope = v26474;
          result$$33.memberScope = result$$33.containedScope;
        }
      } else {
        var v2807 = this.elementType;
        if (v2807) {
          var v13072 = this.elementType;
          var v2804 = v13072 == pattern$$8;
          if (v2804) {
            result$$33 = checker$$21.makeArrayType(replacement$$6);
          } else {
            var v18992 = this.elementType;
            var v13073 = v18992.elementType;
            var v2803 = v13073 == pattern$$8;
            if (v2803) {
              var v2802 = checker$$21.makeArrayType(replacement$$6);
              result$$33 = checker$$21.makeArrayType(v2802);
            }
          }
        } else {
          var v2806 = this.call;
          if (v2806) {
            result$$33 = new Type$$1;
            var v2805 = result$$33;
            var v13074 = this.call;
            var v26475 = v13074.specializeType(pattern$$8, replacement$$6, checker$$21);
            v2805.call = v26475;
          }
        }
      }
      return result$$33;
    }
    function v1146() {
      var v24860 = this.members;
      var v25710 = !v24860;
      if (v25710) {
        v24860 = this.extendsList;
      }
      var v22926 = v24860;
      var v24861 = !v22926;
      if (v24861) {
        v22926 = this.construct;
      }
      var v18993 = v22926;
      var v22927 = !v18993;
      if (v22927) {
        v18993 = this.call;
      }
      var v13075 = v18993;
      var v18994 = !v13075;
      if (v18994) {
        v13075 = this.index;
      }
      var v2808 = v13075;
      var v13076 = !v2808;
      if (v13076) {
        v2808 = this.elementType;
      }
      return v2808;
    }
    function v1145(flow$$1) {
      var v13077 = flow$$1.anyType;
      var v2823 = this == v13077;
      if (v2823) {
        return null;
      } else {
        var v2822 = this.isDouble();
        if (v2822) {
          var v2810 = flow$$1.numberInterfaceType;
          if (v2810) {
            var v2809 = flow$$1.numberInterfaceType;
            return v2809.memberScope;
          } else {
            return null;
          }
        } else {
          var v2821 = this.isBoolean();
          if (v2821) {
            var v2812 = flow$$1.booleanInterfaceType;
            if (v2812) {
              var v2811 = flow$$1.booleanInterfaceType;
              return v2811.memberScope;
            } else {
              return null;
            }
          } else {
            var v13078 = flow$$1.stringType;
            var v2820 = this == v13078;
            if (v2820) {
              var v2814 = flow$$1.stringInterfaceType;
              if (v2814) {
                var v2813 = flow$$1.stringInterfaceType;
                return v2813.memberScope;
              } else {
                return null;
              }
            } else {
              var v2819 = this.elementType;
              if (v2819) {
                var v2818 = flow$$1.arrayInterfaceType;
                if (v2818) {
                  var v2815 = this.elementType;
                  var v2816 = flow$$1.arrayInterfaceType;
                  var v2817 = flow$$1.checker;
                  var arrInstType$$3 = v2815.getArrayBase(v2816, v2817);
                  return arrInstType$$3.memberScope;
                } else {
                  return null;
                }
              } else {
                return this.memberScope;
              }
            }
          }
        }
      }
      return;
    }
    function v1144(checker$$20) {
      var v13079 = this.isClassInstance();
      var v18995 = !v13079;
      if (v18995) {
        v13079 = this.isClass();
      }
      var v2827 = v13079;
      if (v2827) {
        var v13080 = this.symbol;
        var v2826 = v13080.declAST;
        if (v2826) {
          var v2824 = checker$$20.typeFlow;
          var v13081 = this.symbol;
          var v2825 = v13081.declAST;
          v2824.inScopeTypeCheckDecl(v2825);
        }
      }
      return;
    }
    function v1143(prefix$$5, topLevel$$1, isElementType$$1, scope$$34) {
      function v1142(key$$46, s$$29, unused$$1) {
        var sym$$44 = s$$29;
        var v18996 = sym$$44.flags;
        var v22928 = TypeScript$$26.SymbolFlags;
        var v18997 = v22928.BuiltIn;
        var v13082 = TypeScript$$26.hasFlag(v18996, v18997);
        var v2830 = !v13082;
        if (v2830) {
          var typeNameMember = sym$$44.getTypeNameEx(scope$$34);
          var v13083 = typeNameMember.isArray();
          if (v13083) {
            var v18998 = typeNameMember.delim;
            v13083 = v18998 == delim;
          }
          var v2829 = v13083;
          if (v2829) {
            var v2828 = typeNameMember.entries;
            allMemberNames.addAll(v2828);
          } else {
            allMemberNames.add(typeNameMember);
          }
          memCount++;
          curlies$$1 = true;
        }
        return;
      }
      var v2850 = this.elementType;
      if (v2850) {
        var v13084 = this.elementType;
        var v2831 = v13084.getMemberTypeNameEx(prefix$$5, false, true, scope$$34);
        return MemberName.create(v2831, "", "[]");
      } else {
        var v22929 = this.symbol;
        if (v22929) {
          var v24862 = this.symbol;
          v22929 = v24862.name;
        }
        var v18999 = v22929;
        if (v18999) {
          var v24863 = this.symbol;
          var v22930 = v24863.name;
          v18999 = v22930 != "_anonymous";
        }
        var v13085 = v18999;
        if (v13085) {
          var v26087 = this.call;
          var v25711 = v26087 == null;
          if (v25711) {
            var v26088 = this.construct;
            v25711 = v26088 == null;
          }
          var v24864 = v25711;
          if (v24864) {
            var v25712 = this.index;
            v24864 = v25712 == null;
          }
          var v22931 = v24864;
          var v24867 = !v22931;
          if (v24867) {
            var v24865 = this.typeFlags;
            var v25713 = TypeScript$$26.TypeFlags;
            var v24866 = v25713.BuildingName;
            v22931 = TypeScript$$26.hasFlag(v24865, v24866);
          }
          var v19000 = v22931;
          var v22933 = !v19000;
          if (v22933) {
            var v22932 = this.members;
            if (v22932) {
              var v24868 = this.isClass();
              v22932 = !v24868;
            }
            v19000 = v22932;
          }
          v13085 = v19000;
        }
        var v2849 = v13085;
        if (v2849) {
          var v2832 = this.symbol;
          var tn = v2832.scopeRelativeName(scope$$34);
          var v13086;
          var v19001 = tn == "null";
          if (v19001) {
            v13086 = "any";
          } else {
            v13086 = tn;
          }
          var v2833 = v13086;
          return MemberName.create(v2833);
        } else {
          var v19002 = this.members;
          var v22934 = !v19002;
          if (v22934) {
            v19002 = this.call;
          }
          var v13087 = v19002;
          var v19003 = !v13087;
          if (v19003) {
            v13087 = this.construct;
          }
          var v2848 = v13087;
          if (v2848) {
            var v13088 = this.typeFlags;
            var v19004 = TypeScript$$26.TypeFlags;
            var v13089 = v19004.BuildingName;
            var v2834 = TypeScript$$26.hasFlag(v13088, v13089);
            if (v2834) {
              return MemberName.create("this");
            }
            var v13090 = this.typeFlags;
            var v19005 = TypeScript$$26.TypeFlags;
            var v13091 = v19005.BuildingName;
            this.typeFlags = v13090 | v13091;
            var builder$$5 = "";
            var allMemberNames = new MemberNameArray;
            var v2835 = isElementType$$1;
            var v13093 = !v2835;
            if (v13093) {
              var v13092 = this.index;
              v2835 = v13092 != null;
            }
            var curlies$$1 = v2835;
            var memCount = 0;
            var delim = "; ";
            var v2837 = this.members;
            if (v2837) {
              var v13094 = this.members;
              var v2836 = v13094.allMembers;
              v2836.map(v1142, null);
            }
            var signatureCount = this.callCount();
            var j$$18;
            var len$$55 = 0;
            var v13095 = !curlies$$1;
            if (v13095) {
              v13095 = signatureCount == 1;
            }
            var v2838 = v13095;
            if (v2838) {
              v2838 = topLevel$$1;
            }
            var shortform$$3 = v2838;
            var v2840 = this.call;
            if (v2840) {
              var v13096 = this.call;
              var v2839 = v13096.toStrings(prefix$$5, shortform$$3, scope$$34);
              allMemberNames.addAll(v2839);
            }
            var v2842 = this.construct;
            if (v2842) {
              var v13097 = this.construct;
              var v2841 = v13097.toStrings("new", shortform$$3, scope$$34);
              allMemberNames.addAll(v2841);
            }
            var v2844 = this.index;
            if (v2844) {
              var v13098 = this.index;
              var v2843 = v13098.toStrings("", shortform$$3, scope$$34);
              allMemberNames.addAll(v2843);
            }
            var v13099 = curlies$$1;
            var v19007 = !v13099;
            if (v19007) {
              var v19006 = signatureCount > 1;
              if (v19006) {
                v19006 = topLevel$$1;
              }
              v13099 = v19006;
            }
            var v2846 = v13099;
            if (v2846) {
              allMemberNames.prefix = "{ ";
              allMemberNames.suffix = "}";
              allMemberNames.delim = delim;
            } else {
              var v19008 = allMemberNames.entries;
              var v13100 = v19008.length;
              var v2845 = v13100 > 1;
              if (v2845) {
                allMemberNames.delim = delim;
              }
            }
            var v13101 = this.typeFlags;
            var v22935 = TypeScript$$26.TypeFlags;
            var v19009 = v22935.BuildingName;
            var v13102 = ~v19009;
            this.typeFlags = v13101 & v13102;
            var v13103 = signatureCount == 0;
            if (v13103) {
              v13103 = memCount == 0;
            }
            var v2847 = v13103;
            if (v2847) {
              return MemberName.create("{}");
            } else {
              return allMemberNames;
            }
          } else {
            return MemberName.create("{}");
          }
        }
      }
      return;
    }
    function v1141(prefix$$4, topLevel, isElementType, scope$$33) {
      var memberName$$4 = this.getMemberTypeNameEx(prefix$$4, topLevel, isElementType, scope$$33);
      return memberName$$4.toString();
    }
    function v1140() {
      var total = 0;
      var v2851 = this.call;
      if (v2851) {
        var v22936 = this.call;
        var v19010 = v22936.signatures;
        var v13104 = v19010.length;
        total = total + v13104;
      }
      var v2852 = this.construct;
      if (v2852) {
        var v22937 = this.construct;
        var v19011 = v22937.signatures;
        var v13105 = v19011.length;
        total = total + v13105;
      }
      var v2853 = this.index;
      if (v2853) {
        var v22938 = this.index;
        var v19012 = v22938.signatures;
        var v13106 = v19012.length;
        total = total + v13106;
      }
      return total;
    }
    function v1139(scope$$32) {
      return this.getMemberTypeNameEx("", true, false, scope$$32);
    }
    function v1138(scope$$31) {
      return this.getMemberTypeName("", true, false, scope$$31);
    }
    function v1137() {
      return this.getMemberTypeName("", true, false, null);
    }
    function v1136() {
      var v2854 = this.primitiveTypeClass;
      var v2855 = Primitive.Null;
      return TypeScript$$26.hasFlag(v2854, v2855);
    }
    function v1135() {
      var v2856 = this.primitiveTypeClass;
      var v2857 = Primitive.Boolean;
      return TypeScript$$26.hasFlag(v2856, v2857);
    }
    function v1134() {
      var v2858 = this.primitiveTypeClass;
      var v2859 = Primitive.String;
      return TypeScript$$26.hasFlag(v2858, v2859);
    }
    function v1133() {
      var v2860 = this.primitiveTypeClass;
      var v2861 = Primitive.Double;
      return TypeScript$$26.hasFlag(v2860, v2861);
    }
    function v1132() {
      var v13107 = this.typeFlags;
      var v19013 = TypeScript$$26.TypeFlags;
      var v13108 = v19013.HasImplementation;
      this.typeFlags = v13107 | v13108;
      return;
    }
    function v1131() {
      var v2862 = this.typeFlags;
      var v13109 = TypeScript$$26.TypeFlags;
      var v2863 = v13109.HasImplementation;
      return TypeScript$$26.hasFlag(v2862, v2863);
    }
    function v1130() {
      var v2864 = this.isClass();
      if (v2864) {
        return this.instanceType;
      } else {
        return this;
      }
      return;
    }
    function v1129() {
      var v13110 = this.symbol;
      if (v13110) {
        var v19014 = this.elementType;
        v13110 = !v19014;
      }
      var v2865 = v13110;
      if (v2865) {
        var v19015 = this.symbol;
        var v13111 = v19015.type;
        v2865 = v13111.isClass();
      }
      return v2865;
    }
    function v1128() {
      var v2866 = this.elementType;
      return v2866 != null;
    }
    function v1127() {
      var v2867 = this.instanceType;
      return v2867 != null;
    }
    function v1126(arrInstType$$2, checker$$19) {
      var v2868 = this.arrayCache;
      return v2868.specialize(arrInstType$$2, checker$$19);
    }
    function v1125() {
      var v13112 = this.extendsList;
      if (v13112) {
        var v22939 = this.extendsList;
        var v19016 = v22939.length;
        v13112 = v19016 > 0;
      }
      var v2870 = v13112;
      if (v2870) {
        var v2869 = this.extendsList;
        return v2869[0];
      } else {
        return null;
      }
      return;
    }
    function Type$$1() {
      this.typeID = currentTypeID;
      currentTypeID = currentTypeID + 1;
      this.construct = null;
      this.call = null;
      this.index = null;
      var v2871 = TypeScript$$26.CompilerDiagnostics;
      this.passTypeCreated = v2871.analysisPass;
      this.primitiveTypeClass = Primitive.None;
      var v2872 = TypeScript$$26.TypeFlags;
      this.typeFlags = v2872.None;
      return;
    }
    var v2873 = Type$$1.prototype;
    v2873.baseClass = v1125;
    var v2874 = Type$$1.prototype;
    v2874.getArrayBase = v1126;
    var v2875 = Type$$1.prototype;
    v2875.isClass = v1127;
    var v2876 = Type$$1.prototype;
    v2876.isArray = v1128;
    var v2877 = Type$$1.prototype;
    v2877.isClassInstance = v1129;
    var v2878 = Type$$1.prototype;
    v2878.getInstanceType = v1130;
    var v2879 = Type$$1.prototype;
    v2879.hasImplementation = v1131;
    var v2880 = Type$$1.prototype;
    v2880.setHasImplementation = v1132;
    var v2881 = Type$$1.prototype;
    v2881.isDouble = v1133;
    var v2882 = Type$$1.prototype;
    v2882.isString = v1134;
    var v2883 = Type$$1.prototype;
    v2883.isBoolean = v1135;
    var v2884 = Type$$1.prototype;
    v2884.isNull = v1136;
    var v2885 = Type$$1.prototype;
    v2885.getTypeName = v1137;
    var v2886 = Type$$1.prototype;
    v2886.getScopedTypeName = v1138;
    var v2887 = Type$$1.prototype;
    v2887.getScopedTypeNameEx = v1139;
    var v2888 = Type$$1.prototype;
    v2888.callCount = v1140;
    var v2889 = Type$$1.prototype;
    v2889.getMemberTypeName = v1141;
    var v2890 = Type$$1.prototype;
    v2890.getMemberTypeNameEx = v1143;
    var v2891 = Type$$1.prototype;
    v2891.checkDecl = v1144;
    var v2892 = Type$$1.prototype;
    v2892.getMemberScope = v1145;
    var v2893 = Type$$1.prototype;
    v2893.isReferenceType = v1146;
    var v2894 = Type$$1.prototype;
    v2894.specializeType = v1151;
    var v2895 = Type$$1.prototype;
    v2895.hasBase = v1152;
    var v2896 = Type$$1.prototype;
    v2896.mergeOrdered = v1153;
    var v2897 = Type$$1.prototype;
    v2897.isModuleType = v1154;
    var v2898 = Type$$1.prototype;
    v2898.hasMembers = v1155;
    var v2899 = Type$$1.prototype;
    v2899.getAllEnclosedTypes = v1156;
    var v2900 = Type$$1.prototype;
    v2900.getAllAmbientEnclosedTypes = v1157;
    var v2901 = Type$$1.prototype;
    v2901.getPublicEnclosedTypes = v1158;
    var v2902 = Type$$1.prototype;
    v2902.getpublicAmbientEnclosedTypes = v1159;
    var v2903 = Type$$1.prototype;
    v2903.getDocComments = v1160;
    return Type$$1;
  }
  function v1124(_super$$66) {
    function v1123(entries) {
      var i$$113 = 0;
      var v13113 = entries.length;
      var v2906 = i$$113 < v13113;
      for (;v2906;) {
        var v2904 = this.entries;
        var v2905 = entries[i$$113];
        v2904.push(v2905);
        i$$113++;
        var v13114 = entries.length;
        v2906 = i$$113 < v13114;
      }
      return;
    }
    function v1122(entry$$2) {
      var v2907 = this.entries;
      v2907.push(entry$$2);
      return;
    }
    function v1121() {
      return true;
    }
    function MemberNameArray$$1() {
      _super$$66.apply(this, arguments);
      this.delim = "";
      this.entries = [];
      return;
    }
    __extends(MemberNameArray$$1, _super$$66);
    var v2908 = MemberNameArray$$1.prototype;
    v2908.isArray = v1121;
    var v2909 = MemberNameArray$$1.prototype;
    v2909.add = v1122;
    var v2910 = MemberNameArray$$1.prototype;
    v2910.addAll = v1123;
    return MemberNameArray$$1;
  }
  function v1120(_super$$65) {
    function v1119() {
      return true;
    }
    function MemberNameString$$1(text$$25) {
      _super$$65.call(this);
      this.text = text$$25;
      return;
    }
    __extends(MemberNameString$$1, _super$$65);
    var v2911 = MemberNameString$$1.prototype;
    v2911.isString = v1119;
    return MemberNameString$$1;
  }
  function v1118() {
    function create(arg1, arg2, arg3) {
      var v13115 = typeof arg1;
      var v2913 = v13115 == "string";
      if (v2913) {
        return new MemberNameString(arg1);
      } else {
        var result$$32 = new MemberNameArray;
        if (arg2) {
          result$$32.prefix = arg2;
        }
        if (arg3) {
          result$$32.suffix = arg3;
        }
        var v2912 = result$$32.entries;
        v2912.push(arg1);
        return result$$32;
      }
      return;
    }
    function memberNameToString(memberName$$3) {
      var result$$31 = memberName$$3.prefix;
      var v2915 = memberName$$3.isString();
      if (v2915) {
        var v13116 = memberName$$3.text;
        result$$31 = result$$31 + v13116;
      } else {
        var ar = memberName$$3;
        var index$$61 = 0;
        var v19017 = ar.entries;
        var v13117 = v19017.length;
        var v2914 = index$$61 < v13117;
        for (;v2914;) {
          var v22940 = ar.entries;
          var v19018 = v22940[index$$61];
          var v13118 = MemberName$$1.memberNameToString(v19018);
          result$$31 = result$$31 + v13118;
          var v13119 = ar.delim;
          result$$31 = result$$31 + v13119;
          index$$61++;
          var v19019 = ar.entries;
          var v13120 = v19019.length;
          v2914 = index$$61 < v13120;
        }
      }
      var v13121 = memberName$$3.suffix;
      result$$31 = result$$31 + v13121;
      return result$$31;
    }
    function v1117() {
      return MemberName$$1.memberNameToString(this);
    }
    function v1116() {
      return false;
    }
    function v1115() {
      return false;
    }
    function MemberName$$1() {
      this.prefix = "";
      this.suffix = "";
      return;
    }
    var v2916 = MemberName$$1.prototype;
    v2916.isString = v1115;
    var v2917 = MemberName$$1.prototype;
    v2917.isArray = v1116;
    var v2918 = MemberName$$1.prototype;
    v2918.toString = v1117;
    MemberName$$1.memberNameToString = memberNameToString;
    MemberName$$1.create = create;
    return MemberName$$1;
  }
  function v1114(Primitive$$1) {
    Primitive$$1._map = [];
    Primitive$$1.None = 0;
    Primitive$$1.Void = 1;
    Primitive$$1.Double = 2;
    Primitive$$1.String = 4;
    Primitive$$1.Boolean = 8;
    Primitive$$1.Any = 16;
    Primitive$$1.Null = 32;
    Primitive$$1.Undefined = 64;
    return;
  }
  function getTypeLink(ast$$116, checker$$18, autoVar) {
    var result$$30 = new TypeLink;
    result$$30.ast = ast$$116;
    var v13122 = ast$$116 == null;
    if (v13122) {
      v13122 = autoVar;
    }
    var v2919 = v13122;
    if (v2919) {
      result$$30.type = checker$$18.anyType;
    } else {
      result$$30.type = null;
    }
    return result$$30;
  }
  var v13123 = TypeScript$$26.Primitive;
  var v19020 = !v13123;
  if (v19020) {
    v13123 = TypeScript$$26.Primitive = {};
  }
  var v2920 = v13123;
  v1114(v2920);
  var Primitive = TypeScript$$26.Primitive;
  var MemberName = v1118();
  TypeScript$$26.MemberName = MemberName;
  var MemberNameString = v1120(MemberName);
  TypeScript$$26.MemberNameString = MemberNameString;
  var MemberNameArray = v1124(MemberName);
  TypeScript$$26.MemberNameArray = MemberNameArray;
  var currentTypeID = -1;
  var Type = v1161();
  TypeScript$$26.Type = Type;
  var ModuleType = v1170(Type);
  TypeScript$$26.ModuleType = ModuleType;
  var TypeLink = v1171();
  TypeScript$$26.TypeLink = TypeLink;
  TypeScript$$26.getTypeLink = getTypeLink;
  return;
}
function v1113(TypeScript$$25) {
  function v1112() {
    function v1111(enclosingScopeContext$$2) {
      function preFindMemberScopeFullAstFuzy(ast$$115, parent$$69, walker$$53) {
        var v2923 = TypeScript$$25.isValidAstNode(ast$$115);
        if (v2923) {
          var v19021 = ast$$115.flags;
          var v13124 = TypeScript$$25.hasFlag(v19021, matchFlag$$2);
          if (v13124) {
            var v22941 = ast$$115.minChar;
            var v19022 = v22941 < pos$$7;
            if (v19022) {
              var v22942 = ast$$115.limChar;
              v19022 = pos$$7 <= v22942;
            }
            v13124 = v19022;
          }
          var v2921 = v13124;
          if (v2921) {
            astResult = ast$$115;
          }
          var v2922 = walker$$53.options;
          var v19023 = ast$$115.minChar;
          var v13125 = v19023 <= pos$$7;
          if (v13125) {
            var v19024 = ast$$115.limChar;
            v13125 = pos$$7 <= v19024;
          }
          v2922.goChildren = v13125;
        }
        return ast$$115;
      }
      function preFindMemberScopeFullAst(ast$$114, parent$$68, walker$$52) {
        var v2927 = TypeScript$$25.isValidAstNode(ast$$114);
        if (v2927) {
          var v19025 = ast$$114.flags;
          var v13126 = TypeScript$$25.hasFlag(v19025, matchFlag$$2);
          if (v13126) {
            var v22943 = ast$$114.limChar;
            var v19026 = pos$$7 == v22943;
            var v22946 = !v19026;
            if (v22946) {
              var v22944 = pos$$7 - 1;
              var v22945 = ast$$114.limChar;
              v19026 = v22944 == v22945;
            }
            v13126 = v19026;
          }
          var v2925 = v13126;
          if (v2925) {
            astResult = ast$$114;
            var v2924 = walker$$52.options;
            v2924.stopWalk();
          }
          var v2926 = walker$$52.options;
          var v19027 = ast$$114.minChar;
          var v13127 = v19027 <= pos$$7;
          if (v13127) {
            var v19028 = ast$$114.limChar;
            v13127 = pos$$7 <= v19028;
          }
          v2926.goChildren = v13127;
        }
        return ast$$114;
      }
      var v2928 = TypeScript$$25.ASTFlags;
      var matchFlag$$2 = v2928.DotLHS;
      var pos$$7 = enclosingScopeContext$$2.pos;
      var astResult = null;
      var v2929 = TypeScript$$25.getAstWalkerFactory();
      var v2930 = enclosingScopeContext$$2.script;
      v2929.walk(v2930, preFindMemberScopeFullAst);
      var v2933 = astResult == null;
      if (v2933) {
        var v2931 = TypeScript$$25.getAstWalkerFactory();
        var v2932 = enclosingScopeContext$$2.script;
        v2931.walk(v2932, preFindMemberScopeFullAstFuzy);
      }
      var v19029 = astResult;
      if (v19029) {
        v19029 = enclosingScopeContext$$2.enclosingClassDecl;
      }
      var v13128 = v19029;
      if (v13128) {
        var v19030 = astResult.type;
        var v24869 = enclosingScopeContext$$2.enclosingClassDecl;
        var v22947 = v24869.type;
        var v19031 = v22947.instanceType;
        v13128 = v19030 == v19031;
      }
      var v2934 = v13128;
      if (v2934) {
        enclosingScopeContext$$2.publicsOnly = false;
      }
      var v13129 = astResult;
      if (v13129) {
        v13129 = astResult.type;
      }
      var v2936 = v13129;
      if (v2936) {
        var v2935 = astResult.type;
        return v2935.getMemberScope(this);
      } else {
        return null;
      }
      return;
    }
    function v1110(enclosingScopeContext$$1) {
      var v13130 = TypeScript$$25.ASTFlags;
      var v2937 = v13130.DotLHS;
      return this.findMemberScope(enclosingScopeContext$$1, v2937);
    }
    function v1109(enclosingScopeContext, matchFlag$$1) {
      var enclosingScope$$1 = enclosingScopeContext.getScope();
      var v2938 = enclosingScopeContext.pos;
      var v13131 = enclosingScopeContext.scopeStartAST;
      var v2939 = v13131.minChar;
      var pos$$6 = v2938 - v2939;
      var scriptFragment = enclosingScopeContext.getScriptFragment();
      var v2940 = TypeScript$$25.MemberScopeContext;
      var memContext = new v2940(this, pos$$6, matchFlag$$1);
      memContext.scope = enclosingScope$$1;
      var v13132 = scriptFragment.nodeType;
      var v19032 = TypeScript$$25.NodeType;
      var v13133 = v19032.Name;
      var v2947 = v13132 == v13133;
      if (v2947) {
        var v2941 = scriptFragment.type;
        return v2941.getMemberScope(this);
      } else {
        var v2942 = TypeScript$$25.getAstWalkerFactory();
        var v2943 = TypeScript$$25.preFindMemberScope;
        v2942.walk(scriptFragment, v2943, null, null, memContext);
        var v19033 = memContext.ast;
        if (v19033) {
          v19033 = enclosingScopeContext.enclosingClassDecl;
        }
        var v13134 = v19033;
        if (v13134) {
          var v22948 = memContext.ast;
          var v19034 = v22948.type;
          var v24870 = enclosingScopeContext.enclosingClassDecl;
          var v22949 = v24870.type;
          var v19035 = v22949.instanceType;
          v13134 = v19034 == v19035;
        }
        var v2944 = v13134;
        if (v2944) {
          enclosingScopeContext.publicsOnly = false;
        }
        var v2946 = memContext.type;
        if (v2946) {
          var v2945 = memContext.type;
          return v2945.getMemberScope(this);
        } else {
          return null;
        }
      }
      return;
    }
    function v1108(ast$$113) {
      var script$$17 = ast$$113;
      var v2948 = this.checker;
      v2948.locationInfo = script$$17.locationInfo;
      var v13135 = this.checker;
      var v2949 = v13135.gloMod;
      var v2950 = this.globalScope;
      var globalChain$$1 = new ScopeChain(v2949, null, v2950);
      var v2951 = TypeScript$$25.AssignScopeContext;
      var v19036 = this.checker;
      var v13136 = v19036.currentModDecl;
      var v2952 = [v13136];
      var context$$64 = new v2951(globalChain$$1, this, v2952);
      var v2953 = TypeScript$$25.getAstWalkerFactory();
      var v2954 = TypeScript$$25.preAssignScopes;
      var v2955 = TypeScript$$25.postAssignScopes;
      v2953.walk(ast$$113, v2954, v2955, null, context$$64);
      return;
    }
    function v1107(ast$$112) {
      var callEx$$5 = ast$$112;
      var v22950 = this.checker;
      var v19037 = v22950.styleSettings;
      var v13137 = v19037.newMustBeUsed;
      if (v13137) {
        var v19038 = ast$$112.nodeType;
        var v22951 = TypeScript$$25.NodeType;
        var v19039 = v22951.New;
        v13137 = v19038 == v19039;
      }
      var v2961 = v13137;
      if (v2961) {
        var v13138 = ast$$112.flags;
        var v19040 = TypeScript$$25.ASTFlags;
        var v13139 = v19040.IsStatement;
        var v2957 = TypeScript$$25.hasFlag(v13138, v13139);
        if (v2957) {
          var v13140 = this.checker;
          var v2956 = v13140.errorReporter;
          v2956.styleError(ast$$112, "use of new expression as a statement");
        }
      } else {
        var v24871 = this.checker;
        var v22952 = v24871.styleSettings;
        var v19041 = v22952.evalOK;
        var v13141 = !v19041;
        if (v13141) {
          var v19042 = ast$$112.nodeType;
          var v22953 = TypeScript$$25.NodeType;
          var v19043 = v22953.Call;
          v13141 = v19042 == v19043;
        }
        var v2960 = v13141;
        if (v2960) {
          var v22954 = callEx$$5.target;
          var v19044 = v22954.nodeType;
          var v22955 = TypeScript$$25.NodeType;
          var v19045 = v22955.Name;
          var v13142 = v19044 == v19045;
          if (v13142) {
            var v22956 = callEx$$5.target;
            var v19046 = v22956.text;
            v13142 = v19046 == "eval";
          }
          var v2959 = v13142;
          if (v2959) {
            var v13143 = this.checker;
            var v2958 = v13143.errorReporter;
            v2958.styleError(callEx$$5, "eval not permitted");
          }
        }
      }
      var v19047 = callEx$$5.target;
      var v13144 = v19047.nodeType;
      var v19048 = TypeScript$$25.NodeType;
      var v13145 = v19048.FuncDecl;
      var v2963 = v13144 == v13145;
      if (v2963) {
        var v2962 = callEx$$5.target;
        v2962.isInlineCallLiteral = true;
      }
      var prevInSuperCall = this.inSuperCall;
      var v19049 = callEx$$5.target;
      var v13146 = v19049.nodeType;
      var v19050 = TypeScript$$25.NodeType;
      var v13147 = v19050.Super;
      var v2964 = v13146 == v13147;
      if (v2964) {
        this.inSuperCall = true;
      }
      var v2965 = callEx$$5.target;
      var v26476 = this.typeCheck(v2965);
      callEx$$5.target = v26476;
      var v2966 = callEx$$5.arguments;
      this.preTypeCheckCallArgs(v2966);
      var target$$37 = callEx$$5.target;
      var v22957 = target$$37.type;
      var v19051 = v22957 == null;
      var v22960 = !v19051;
      if (v22960) {
        var v22958 = target$$37.type;
        var v22959 = this.anyType;
        v19051 = v22958 == v22959;
      }
      var v13148 = v19051;
      var v19053 = !v13148;
      if (v19053) {
        var v19052 = this.functionInterfaceType;
        if (v19052) {
          var v22961 = target$$37.type;
          var v22962 = this.functionInterfaceType;
          v19052 = v22961 == v22962;
        }
        v13148 = v19052;
      }
      var v2978 = v13148;
      if (v2978) {
        callEx$$5.type = this.anyType;
      } else {
        var fnType$$1 = target$$37.type;
        var v2977 = fnType$$1.call;
        if (v2977) {
          var v2967 = fnType$$1.call;
          var signature$$14 = this.resolveOverload(callEx$$5, v2967);
          var v2969 = signature$$14 == null;
          if (v2969) {
            callEx$$5.type = this.anyType;
          } else {
            var v2968 = signature$$14.returnType;
            callEx$$5.type = v2968.type;
            callEx$$5.signature = signature$$14;
          }
        } else {
          var v25714 = callEx$$5.target;
          var v24872 = v25714.nodeType;
          var v25715 = TypeScript$$25.NodeType;
          var v24873 = v25715.Super;
          var v22963 = v24872 == v24873;
          if (v22963) {
            v22963 = this.thisFnc;
          }
          var v19054 = v22963;
          if (v19054) {
            var v22964 = this.thisFnc;
            v19054 = v22964.isConstructor;
          }
          var v13149 = v19054;
          if (v13149) {
            var v22965 = this.thisFnc;
            var v19055 = v22965.fncFlags;
            var v22966 = TypeScript$$25.FncFlags;
            var v19056 = v22966.ClassMethod;
            v13149 = TypeScript$$25.hasFlag(v19055, v19056);
          }
          var v2976 = v13149;
          if (v2976) {
            var v2970;
            var v22967 = fnType$$1.symbol;
            var v19057 = v22967.type;
            var v13151 = v19057.construct;
            if (v13151) {
              var v22968 = fnType$$1.symbol;
              var v19058 = v22968.type;
              var v13150 = v19058.construct;
              v2970 = this.resolveOverload(callEx$$5, v13150);
            } else {
              v2970 = null;
            }
            signature$$14 = v2970;
            var v2972 = signature$$14 == null;
            if (v2972) {
              callEx$$5.type = this.anyType;
            } else {
              var v13152 = callEx$$5.flags;
              var v19059 = TypeScript$$25.ASTFlags;
              var v13153 = v19059.ClassBaseConstructorCall;
              callEx$$5.flags = v13152 | v13153;
              var v2971 = signature$$14.returnType;
              callEx$$5.type = v2971.type;
              callEx$$5.signature = signature$$14;
            }
          } else {
            callEx$$5.type = this.anyType;
            var v13154 = this.checker;
            var v2973 = v13154.errorReporter;
            var v2974 = callEx$$5.nodeType;
            var v2975 = this.scope;
            v2973.invalidCall(callEx$$5, v2974, v2975);
          }
        }
      }
      this.postTypeCheckCallArgs(callEx$$5);
      this.inSuperCall = prevInSuperCall;
      return callEx$$5;
    }
    function v1106(callEx$$4) {
      var acceptedTargetType = false;
      var i$$112 = 0;
      var v22969 = callEx$$4.target;
      if (v22969) {
        var v24874 = callEx$$4.target;
        v22969 = v24874.type;
      }
      var v19060 = v22969;
      if (v19060) {
        v19060 = callEx$$4.signature;
      }
      var v13155 = v19060;
      if (v13155) {
        v13155 = callEx$$4.arguments;
      }
      var v2998 = v13155;
      if (v2998) {
        var sig$$4 = callEx$$4.signature;
        var v13156 = sig$$4;
        if (v13156) {
          var v24875 = callEx$$4.arguments;
          var v22970 = v24875.members;
          var v19061 = v22970.length;
          var v19062 = sig$$4.nonOptionalParameterCount;
          v13156 = v19061 >= v19062;
        }
        var v2997 = v13156;
        if (v2997) {
          acceptedTargetType = true;
          var targetType$$8 = null;
          var v2979;
          var v13159 = sig$$4.hasVariableArgList;
          if (v13159) {
            var v19063 = sig$$4.parameters;
            var v13157 = v19063.length;
            v2979 = v13157 - 1;
          } else {
            var v13158 = sig$$4.parameters;
            v2979 = v13158.length;
          }
          var nonVarArgFormalParamLength = v2979;
          var v2980;
          var v24876 = callEx$$4.arguments;
          var v22971 = v24876.members;
          var v19064 = v22971.length;
          var v13161 = v19064 < nonVarArgFormalParamLength;
          if (v13161) {
            var v19065 = callEx$$4.arguments;
            var v13160 = v19065.members;
            v2980 = v13160.length;
          } else {
            v2980 = nonVarArgFormalParamLength;
          }
          var nonVarArgActualParamLength = v2980;
          i$$112 = 0;
          var v2987 = i$$112 < nonVarArgActualParamLength;
          for (;v2987;) {
            var v13162 = sig$$4.parameters;
            var v2981 = v13162[i$$112];
            targetType$$8 = v2981.getType();
            var v22972 = callEx$$4.arguments;
            var v19066 = v22972.members;
            var v13163 = v19066[i$$112];
            var v2986 = v13163.nodeType;
            switch(v2986) {
              case TypeScript$$25.NodeType.FuncDecl:
              ;
              case TypeScript$$25.NodeType.ObjectLit:
              ;
              case TypeScript$$25.NodeType.ArrayLit:
                var v2982 = this.checker;
                var v13164 = this.checker;
                var v2983 = v13164.inProvisionalTypecheckMode();
                var v24877 = sig$$4.parameters;
                var v22973 = v24877[i$$112];
                var v19067 = v22973.declAST;
                var v13165 = v19067.isParenthesized;
                var v2984 = !v13165;
                var v19068 = callEx$$4.arguments;
                var v13166 = v19068.members;
                var v2985 = v13166[i$$112];
                v2982.typeCheckWithContextualType(targetType$$8, v2983, v2984, v2985);
            }
            i$$112++;
            v2987 = i$$112 < nonVarArgActualParamLength;
          }
          var v2996 = sig$$4.hasVariableArgList;
          if (v2996) {
            var v2988 = sig$$4.nonOptionalParameterCount;
            var varArgParamIndex = v2988 - 1;
            var v13167 = sig$$4.parameters;
            var v2989 = v13167[varArgParamIndex];
            targetType$$8 = v2989.getType();
            if (targetType$$8) {
              targetType$$8 = targetType$$8.elementType;
            }
            var v22974 = sig$$4.parameters;
            var v19069 = v22974[varArgParamIndex];
            var v13168 = v19069.declAST;
            var v2990 = v13168.isParenthesized;
            var isParenthesized = !v2990;
            i$$112 = nonVarArgActualParamLength;
            var v22975 = callEx$$4.arguments;
            var v19070 = v22975.members;
            var v13169 = v19070.length;
            var v2995 = i$$112 < v13169;
            for (;v2995;) {
              var v22976 = callEx$$4.arguments;
              var v19071 = v22976.members;
              var v13170 = v19071[i$$112];
              var v2994 = v13170.nodeType;
              switch(v2994) {
                case TypeScript$$25.NodeType.FuncDecl:
                ;
                case TypeScript$$25.NodeType.ObjectLit:
                ;
                case TypeScript$$25.NodeType.ArrayLit:
                  var v2991 = this.checker;
                  var v13171 = this.checker;
                  var v2992 = v13171.inProvisionalTypecheckMode();
                  var v19072 = callEx$$4.arguments;
                  var v13172 = v19072.members;
                  var v2993 = v13172[i$$112];
                  v2991.typeCheckWithContextualType(targetType$$8, v2992, isParenthesized, v2993);
              }
              i$$112++;
              var v22977 = callEx$$4.arguments;
              var v19073 = v22977.members;
              var v13173 = v19073.length;
              v2995 = i$$112 < v13173;
            }
          }
        }
      }
      var v13174 = !acceptedTargetType;
      if (v13174) {
        v13174 = callEx$$4.arguments;
      }
      var v3003 = v13174;
      if (v3003) {
        var v2999 = this.checker;
        v2999.killCurrentContextualType();
        i$$112 = 0;
        var v22978 = callEx$$4.arguments;
        var v19074 = v22978.members;
        var v13175 = v19074.length;
        var v3002 = i$$112 < v13175;
        for (;v3002;) {
          var v22979 = callEx$$4.arguments;
          var v19075 = v22979.members;
          var v13176 = v19075[i$$112];
          var v3001 = v13176.nodeType;
          switch(v3001) {
            case TypeScript$$25.NodeType.FuncDecl:
            ;
            case TypeScript$$25.NodeType.ObjectLit:
            ;
            case TypeScript$$25.NodeType.ArrayLit:
              var v19076 = callEx$$4.arguments;
              var v13177 = v19076.members;
              var v3000 = v13177[i$$112];
              this.typeCheck(v3000);
            default:
            ;
          }
          i$$112++;
          var v22980 = callEx$$4.arguments;
          var v19077 = v22980.members;
          var v13178 = v19077.length;
          v3002 = i$$112 < v13178;
        }
      }
      return;
    }
    function v1105(args$$16) {
      var v3004 = !args$$16;
      if (v3004) {
        return;
      }
      var i$$111 = 0;
      var v19078 = args$$16.members;
      var v13179 = v19078.length;
      var v3007 = i$$111 < v13179;
      for (;v3007;) {
        var v19079 = args$$16.members;
        var v13180 = v19079[i$$111];
        var v3006 = v13180.nodeType;
        switch(v3006) {
          case TypeScript$$25.NodeType.FuncDecl:
          ;
          case TypeScript$$25.NodeType.ObjectLit:
          ;
          case TypeScript$$25.NodeType.ArrayLit:
            i$$111++;
            var v19080 = args$$16.members;
            var v13181 = v19080.length;
            v3007 = i$$111 < v13181;
            continue;
          default:
            var v13182 = args$$16.members;
            var v3005 = v13182[i$$111];
            this.typeCheck(v3005);
        }
        i$$111++;
        var v19081 = args$$16.members;
        var v13183 = v19081.length;
        v3007 = i$$111 < v13183;
      }
      return;
    }
    function v1104(ast$$111) {
      var callEx$$3 = ast$$111;
      var v3008 = callEx$$3.target;
      var v26477 = this.typeCheck(v3008);
      callEx$$3.target = v26477;
      var target$$36 = callEx$$3.target;
      var v19082 = target$$36.type;
      var v13184 = v19082.construct;
      var v19084 = !v13184;
      if (v19084) {
        var v19083 = target$$36.type;
        v13184 = v19083.call;
      }
      var v3011 = v13184;
      if (v3011) {
        var v3009 = callEx$$3.arguments;
        this.preTypeCheckCallArgs(v3009);
      } else {
        var v3010 = callEx$$3.arguments;
        var v26478 = this.typeCheck(v3010);
        callEx$$3.arguments = v26478;
      }
      var v13185 = target$$36.type;
      var v13186 = this.anyType;
      var v3028 = v13185 == v13186;
      if (v3028) {
        callEx$$3.type = this.anyType;
        var v3012 = callEx$$3.arguments;
        var v26479 = this.typeCheck(v3012);
        callEx$$3.arguments = v26479;
      } else {
        var v13187 = target$$36.type;
        var v3027 = v13187.construct;
        if (v3027) {
          var v13188 = target$$36.type;
          var v3013 = v13188.construct;
          var signature$$13 = this.resolveOverload(callEx$$3, v3013);
          var v3016 = signature$$13 == null;
          if (v3016) {
            callEx$$3.type = this.anyType;
          } else {
            var v19085 = signature$$13.returnType;
            var v13189 = v19085.type;
            var v13190 = this.voidType;
            var v3015 = v13189 == v13190;
            if (v3015) {
              callEx$$3.type = this.anyType;
              callEx$$3.signature = signature$$13;
            } else {
              var v3014 = signature$$13.returnType;
              callEx$$3.type = v3014.type;
              callEx$$3.signature = signature$$13;
            }
          }
        } else {
          var v13191 = target$$36.type;
          var v3026 = v13191.call;
          if (v3026) {
            var v13192 = target$$36.type;
            var v3017 = v13192.call;
            signature$$13 = this.resolveOverload(callEx$$3, v3017);
            var v3021 = signature$$13 == null;
            if (v3021) {
              callEx$$3.type = this.anyType;
            } else {
              var v22981 = signature$$13.returnType;
              var v19086 = v22981.type;
              var v19087 = this.voidType;
              var v13193 = v19086 == v19087;
              var v19090 = !v13193;
              if (v19090) {
                var v22982 = signature$$13.returnType;
                var v19088 = v22982.type;
                var v19089 = this.anyType;
                v13193 = v19088 == v19089;
              }
              var v3020 = v13193;
              if (v3020) {
                callEx$$3.type = this.anyType;
                callEx$$3.signature = signature$$13;
              } else {
                var v13194 = this.checker;
                var v3018 = v13194.errorReporter;
                var v3019 = callEx$$3.target;
                v3018.simpleError(v3019, "new expression only valid on constructors");
              }
            }
          } else {
            var v13195 = target$$36.type;
            var v3025 = v13195.elementType;
            if (v3025) {
              callEx$$3.type = target$$36.type;
            } else {
              var v13196 = this.checker;
              var v3022 = v13196.errorReporter;
              var v3023 = callEx$$3.nodeType;
              var v3024 = this.scope;
              v3022.invalidCall(callEx$$3, v3023, v3024);
              callEx$$3.type = this.anyType;
            }
          }
        }
      }
      this.postTypeCheckCallArgs(callEx$$3);
      return callEx$$3;
    }
    function v1103(application, group$$1) {
      var v3029 = this.resolutionDataCache;
      var rd$$2 = v3029.getResolutionData();
      var actuals$$1 = rd$$2.actuals;
      var exactCandidates$$1 = rd$$2.exactCandidates;
      var conversionCandidates$$1 = rd$$2.conversionCandidates;
      var candidate = null;
      var v13197 = group$$1.signatures;
      var v3030 = v13197.length;
      var hasOverloads = v3030 > 1;
      var v3031 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$16 = new v3031;
      var args$$15 = null;
      var target$$35 = null;
      var v19091 = application.nodeType;
      var v22983 = TypeScript$$25.NodeType;
      var v19092 = v22983.Call;
      var v13198 = v19091 == v19092;
      var v19095 = !v13198;
      if (v19095) {
        var v19093 = application.nodeType;
        var v22984 = TypeScript$$25.NodeType;
        var v19094 = v22984.New;
        v13198 = v19093 == v19094;
      }
      var v3040 = v13198;
      if (v3040) {
        var callEx$$2 = application;
        args$$15 = callEx$$2.arguments;
        target$$35 = callEx$$2.target;
        var v3035 = callEx$$2.arguments;
        if (v3035) {
          var v13199 = callEx$$2.arguments;
          var v3032 = v13199.members;
          var len$$54 = v3032.length;
          var i$$110 = 0;
          var v3034 = i$$110 < len$$54;
          for (;v3034;) {
            var v19096 = callEx$$2.arguments;
            var v13200 = v19096.members;
            var v3033 = v13200[i$$110];
            actuals$$1[i$$110] = v3033.type;
            i$$110++;
            v3034 = i$$110 < len$$54;
          }
        }
      } else {
        var v13201 = application.nodeType;
        var v19097 = TypeScript$$25.NodeType;
        var v13202 = v19097.Index;
        var v3039 = v13201 == v13202;
        if (v3039) {
          var binExp = application;
          target$$35 = binExp.operand1;
          var v3036 = TypeScript$$25.ASTList;
          args$$15 = new v3036;
          var v3037 = args$$15.members;
          v3037[0] = binExp.operand2;
          var v3038 = binExp.operand2;
          actuals$$1[0] = v3038.type;
        }
      }
      var j$$17 = 0;
      var v3041 = group$$1.signatures;
      var groupLen = v3041.length;
      var v3046 = j$$17 < groupLen;
      for (;v3046;) {
        var v3042 = group$$1.signatures;
        var signature$$12 = v3042[j$$17];
        var v19098 = hasOverloads;
        if (v19098) {
          var v22985 = group$$1.definitionSignature;
          v19098 = signature$$12 == v22985;
        }
        var v13203 = v19098;
        if (v13203) {
          var v22986 = this.checker;
          var v19099 = v22986.canCallDefinitionSignature;
          v13203 = !v19099;
        }
        var v3043 = v13203;
        if (v3043) {
          j$$17++;
          v3046 = j$$17 < groupLen;
          continue;
        }
        var v24878 = signature$$12.returnType;
        var v22987 = v24878.type;
        var v19100 = !v22987;
        if (v19100) {
          v19100 = signature$$12.declAST;
        }
        var v13204 = v19100;
        if (v13204) {
          var v19101 = signature$$12.typeCheckStatus;
          var v22988 = TypeScript$$25.TypeCheckStatus;
          var v19102 = v22988.Finished;
          v13204 = v19101 != v19102;
        }
        var v3045 = v13204;
        if (v3045) {
          var v3044 = signature$$12.declAST;
          this.typeCheckFunction(v3044);
        }
        this.tryAddCandidates(signature$$12, actuals$$1, exactCandidates$$1, conversionCandidates$$1, comparisonInfo$$16);
        j$$17++;
        v3046 = j$$17 < groupLen;
      }
      var v13205 = exactCandidates$$1.length;
      var v3062 = v13205 == 0;
      if (v3062) {
        var v3047 = this.checker;
        var applicableCandidates = v3047.getApplicableSignatures(conversionCandidates$$1, args$$15, comparisonInfo$$16);
        var v13206 = applicableCandidates.length;
        var v3055 = v13206 > 0;
        if (v3055) {
          var v3048 = this.checker;
          var candidateInfo = v3048.findMostApplicableSignature(applicableCandidates, args$$15);
          var v3050 = candidateInfo.ambiguous;
          if (v3050) {
            var v13207 = this.checker;
            var v3049 = v13207.errorReporter;
            v3049.simpleError(target$$35, "Ambiguous call expression - could not choose overload");
          }
          candidate = candidateInfo.sig;
        } else {
          var emsg$$3 = "Supplied parameters do not match any signature of call target";
          var v3054 = comparisonInfo$$16.message;
          if (v3054) {
            var v13208 = this.checker;
            var v3051 = v13208.errorReporter;
            var v13209 = emsg$$3 + ":\n\t";
            var v13210 = comparisonInfo$$16.message;
            var v3052 = v13209 + v13210;
            v3051.simpleError(target$$35, v3052);
          } else {
            var v13211 = this.checker;
            var v3053 = v13211.errorReporter;
            v3053.simpleError(target$$35, emsg$$3);
          }
        }
      } else {
        var v13212 = exactCandidates$$1.length;
        var v3061 = v13212 > 1;
        if (v3061) {
          var applicableSigs$$1 = [];
          i$$110 = 0;
          var v13213 = exactCandidates$$1.length;
          var v3057 = i$$110 < v13213;
          for (;v3057;) {
            var v3056 = exactCandidates$$1[i$$110];
            applicableSigs$$1[i$$110] = {signature:v3056, hadProvisionalErrors:false};
            i$$110++;
            var v13214 = exactCandidates$$1.length;
            v3057 = i$$110 < v13214;
          }
          var v3058 = this.checker;
          candidateInfo = v3058.findMostApplicableSignature(applicableSigs$$1, args$$15);
          var v3060 = candidateInfo.ambiguous;
          if (v3060) {
            var v13215 = this.checker;
            var v3059 = v13215.errorReporter;
            v3059.simpleError(target$$35, "Ambiguous call expression - could not choose overload");
          }
          candidate = candidateInfo.sig;
        } else {
          candidate = exactCandidates$$1[0];
        }
      }
      var v3063 = this.resolutionDataCache;
      v3063.returnResolutionData(rd$$2);
      return candidate;
    }
    function v1102(signature$$11, actuals, exactCandidates, conversionCandidates, comparisonInfo$$15) {
      var lowerBound = signature$$11.nonOptionalParameterCount;
      var v3064 = signature$$11.parameters;
      var upperBound = v3064.length;
      var formalLen = lowerBound;
      var acceptable = false;
      var v19103 = actuals.length;
      var v13216 = v19103 >= lowerBound;
      if (v13216) {
        var v19104 = signature$$11.hasVariableArgList;
        var v22990 = !v19104;
        if (v22990) {
          var v22989 = actuals.length;
          v19104 = v22989 <= upperBound;
        }
        v13216 = v19104;
      }
      var v3066 = v13216;
      if (v3066) {
        var v3065;
        var v13218 = signature$$11.hasVariableArgList;
        if (v13218) {
          var v13217 = signature$$11.parameters;
          v3065 = v13217.length;
        } else {
          v3065 = actuals.length;
        }
        formalLen = v3065;
        acceptable = true;
      }
      var repeatType = null;
      var v13219 = acceptable;
      var v19105 = !v13219;
      if (v19105) {
        v13219 = signature$$11.hasVariableArgList;
      }
      var v3079 = v13219;
      if (v3079) {
        var v3069 = signature$$11.hasVariableArgList;
        if (v3069) {
          formalLen = formalLen - 1;
          var v22991 = signature$$11.parameters;
          var v19106 = v22991[formalLen];
          var v13220 = v19106.parameter;
          var v3067 = v13220.typeLink;
          repeatType = v3067.type;
          repeatType = repeatType.elementType;
          var v3068 = actuals.length;
          acceptable = v3068 >= formalLen;
        }
        var len$$53 = actuals.length;
        var exact = acceptable;
        var convert = acceptable;
        var i$$109 = 0;
        var v3075 = i$$109 < len$$53;
        for (;v3075;) {
          var typeA;
          var v3071 = i$$109 < formalLen;
          if (v3071) {
            var v22992 = signature$$11.parameters;
            var v19107 = v22992[i$$109];
            var v13221 = v19107.parameter;
            var v3070 = v13221.typeLink;
            typeA = v3070.type;
          } else {
            typeA = repeatType;
          }
          var typeB = actuals[i$$109];
          var v19108 = !typeA;
          var v22993 = !v19108;
          if (v22993) {
            v19108 = !typeB;
          }
          var v13222 = v19108;
          var v19110 = !v13222;
          if (v19110) {
            var v22994 = this.checker;
            var v19109 = v22994.typesAreIdentical(typeA, typeB);
            v13222 = !v19109;
          }
          var v3072 = v13222;
          if (v3072) {
            exact = false;
          }
          var v19111 = this.checker;
          var v13223 = v19111.sourceIsAssignableToTarget(typeB, typeA, comparisonInfo$$15);
          var v3073 = !v13223;
          if (v3073) {
            convert = false;
          }
          var v13224 = exact || convert;
          var v3074 = !v13224;
          if (v3074) {
            break;
          }
          i$$109++;
          v3075 = i$$109 < len$$53;
        }
        if (exact) {
          var v3076 = exactCandidates.length;
          exactCandidates[v3076] = signature$$11;
        } else {
          var v13225 = convert;
          if (v13225) {
            var v19112 = exactCandidates.length;
            v13225 = v19112 == 0;
          }
          var v3078 = v13225;
          if (v3078) {
            var v3077 = conversionCandidates.length;
            conversionCandidates[v3077] = signature$$11;
          }
        }
      }
      return;
    }
    function v1101(binex$$13) {
      var v3080 = binex$$13.operand1;
      var v26480 = this.typeCheck(v3080);
      binex$$13.operand1 = v26480;
      var v3081 = binex$$13.operand2;
      var v26481 = this.typeCheck(v3081);
      binex$$13.operand2 = v26481;
      var v3082 = binex$$13.operand2;
      binex$$13.type = v3082.type;
      return binex$$13;
    }
    function v1100(binex$$12) {
      var v3083 = binex$$12.operand1;
      var v26482 = this.typeCheck(v3083);
      binex$$12.operand1 = v26482;
      var v3084 = binex$$12.operand2;
      var v26483 = this.typeCheck(v3084);
      binex$$12.operand2 = v26483;
      var v3085 = binex$$12.operand1;
      var leftType$$6 = v3085.type;
      var v3086 = binex$$12.operand2;
      var rightType$$5 = v3086.type;
      var v22995 = this.checker;
      var v19113 = v22995.anyType;
      var v13226 = leftType$$6 == v19113;
      var v19115 = !v13226;
      if (v19115) {
        var v22996 = this.checker;
        var v19114 = v22996.anyType;
        v13226 = rightType$$5 == v19114;
      }
      var v3103 = v13226;
      if (v3103) {
        var v3087 = this.checker;
        binex$$12.type = v3087.anyType;
      } else {
        var v19116 = this.checker;
        var v13227 = v19116.booleanType;
        var v3102 = leftType$$6 == v13227;
        if (v3102) {
          var v19117 = this.checker;
          var v13228 = v19117.booleanType;
          var v3090 = rightType$$5 == v13228;
          if (v3090) {
            var v3088 = this.checker;
            binex$$12.type = v3088.booleanType;
          } else {
            var v3089 = this.checker;
            binex$$12.type = v3089.anyType;
          }
        } else {
          var v19118 = this.checker;
          var v13229 = v19118.numberType;
          var v3101 = leftType$$6 == v13229;
          if (v3101) {
            var v19119 = this.checker;
            var v13230 = v19119.numberType;
            var v3093 = rightType$$5 == v13230;
            if (v3093) {
              var v3091 = this.checker;
              binex$$12.type = v3091.numberType;
            } else {
              var v3092 = this.checker;
              binex$$12.type = v3092.anyType;
            }
          } else {
            var v19120 = this.checker;
            var v13231 = v19120.stringType;
            var v3100 = leftType$$6 == v13231;
            if (v3100) {
              var v19121 = this.checker;
              var v13232 = v19121.stringType;
              var v3096 = rightType$$5 == v13232;
              if (v3096) {
                var v3094 = this.checker;
                binex$$12.type = v3094.stringType;
              } else {
                var v3095 = this.checker;
                binex$$12.type = v3095.anyType;
              }
            } else {
              var v13233 = this.checker;
              var v3099 = v13233.sourceIsSubtypeOfTarget(leftType$$6, rightType$$5);
              if (v3099) {
                binex$$12.type = rightType$$5;
              } else {
                var v13234 = this.checker;
                var v3098 = v13234.sourceIsSubtypeOfTarget(rightType$$5, leftType$$6);
                if (v3098) {
                  binex$$12.type = leftType$$6;
                } else {
                  var v3097 = this.checker;
                  binex$$12.type = v3097.anyType;
                }
              }
            }
          }
        }
      }
      return binex$$12;
    }
    function v1099(ast$$110) {
      var binex$$11 = ast$$110;
      var v3104 = binex$$11.operand1;
      var v26484 = this.typeCheck(v3104);
      binex$$11.operand1 = v26484;
      var v3105 = binex$$11.operand2;
      var v26485 = this.typeCheck(v3105);
      binex$$11.operand2 = v26485;
      var v3106 = binex$$11.operand2;
      binex$$11.type = v3106.type;
      return binex$$11;
    }
    function v1098(ast$$109) {
      var binex$$10 = ast$$109;
      var v3107 = binex$$10.operand1;
      var v26486 = this.typeCheck(v3107);
      binex$$10.operand1 = v26486;
      var v3108 = binex$$10.operand2;
      var v26487 = this.typeCheck(v3108);
      binex$$10.operand2 = v26487;
      var v25716 = binex$$10.operand1;
      var v24879 = v25716.type;
      var v25717 = this.checker;
      var v24880 = v25717.anyType;
      var v22997 = v24879 == v24880;
      var v24884 = !v22997;
      if (v24884) {
        var v24881 = this.checker;
        var v25718 = binex$$10.operand1;
        var v24882 = v25718.type;
        var v24883 = this.objectInterfaceType;
        v22997 = v24881.sourceIsSubtypeOfTarget(v24882, v24883);
      }
      var v19122 = v22997;
      if (v19122) {
        var v25719 = binex$$10.operand2;
        var v24885 = v25719.type;
        var v24886 = this.anyType;
        var v22998 = v24885 == v24886;
        var v24890 = !v22998;
        if (v24890) {
          var v24887 = this.checker;
          var v25720 = binex$$10.operand2;
          var v24888 = v25720.type;
          var v24889 = this.functionInterfaceType;
          v22998 = v24887.sourceIsSubtypeOfTarget(v24888, v24889);
        }
        v19122 = v22998;
      }
      var v13235 = v19122;
      var v3110 = !v13235;
      if (v3110) {
        var v13236 = this.checker;
        var v3109 = v13236.errorReporter;
        v3109.simpleError(ast$$109, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type");
      }
      binex$$10.type = this.booleanType;
      return binex$$10;
    }
    function v1097(returnStmt$$1) {
      var v3136 = this.thisFnc;
      if (v3136) {
        var targetType$$7 = null;
        var v13237 = this.checker;
        var v3115 = v13237.hasTargetType();
        if (v3115) {
          var v3111 = this.checker;
          var tcContext = v3111.currentContextualTypeContext;
          var accessorType$$1 = tcContext.targetAccessorType;
          if (accessorType$$1) {
            targetType$$7 = accessorType$$1;
          } else {
            var v13238 = this.checker;
            var v3112 = v13238.currentContextualTypeContext;
            var targetSig$$1 = v3112.targetSig;
            var v13239 = targetSig$$1;
            if (v13239) {
              var v22999 = targetSig$$1.returnType;
              var v19123 = v22999.type;
              var v19124 = this.voidType;
              v13239 = v19123 != v19124;
            }
            var v3114 = v13239;
            if (v3114) {
              var v3113 = targetSig$$1.returnType;
              targetType$$7 = v3113.type;
            }
          }
        }
        var v3135 = returnStmt$$1.returnExpression;
        if (v3135) {
          var v3116 = this.thisFnc;
          var v19125 = v3116.fncFlags;
          var v23000 = TypeScript$$25.FncFlags;
          var v19126 = v23000.HasReturnExpression;
          v3116.fncFlags = v19125 | v19126;
          var v23001 = targetType$$7 == null;
          if (v23001) {
            var v24891 = this.thisFnc;
            v23001 = v24891.returnTypeAnnotation;
          }
          var v19127 = v23001;
          if (v19127) {
            var v24892 = this.thisFnc;
            var v23002 = v24892.returnTypeAnnotation;
            v19127 = v23002.type;
          }
          var v13240 = v19127;
          if (v13240) {
            var v24893 = this.thisFnc;
            var v23003 = v24893.returnTypeAnnotation;
            var v19128 = v23003.type;
            var v19129 = this.voidType;
            v13240 = v19128 != v19129;
          }
          var v3118 = v13240;
          if (v3118) {
            var v13241 = this.thisFnc;
            var v3117 = v13241.returnTypeAnnotation;
            targetType$$7 = v3117.type;
          }
          var v3119 = this.checker;
          var v13242 = this.checker;
          var v3120 = v13242.inProvisionalTypecheckMode();
          var v3121 = targetType$$7 != null;
          var v3122 = returnStmt$$1.returnExpression;
          v3119.typeCheckWithContextualType(targetType$$7, v3120, v3121, v3122);
          var v3123;
          var v23004 = this.thisFnc;
          var v19130 = v23004.returnTypeAnnotation;
          if (v19130) {
            var v24894 = this.thisFnc;
            var v23005 = v24894.returnTypeAnnotation;
            v19130 = v23005.type;
          }
          var v13244 = v19130;
          if (v13244) {
            var v19131 = this.thisFnc;
            var v13243 = v19131.returnTypeAnnotation;
            v3123 = v13243.type;
          } else {
            v3123 = targetType$$7;
          }
          var expectedReturnType = v3123;
          if (expectedReturnType) {
            var v19132 = this.voidType;
            var v13245 = expectedReturnType == v19132;
            if (v13245) {
              var v23006 = returnStmt$$1.returnExpression;
              var v19133 = v23006.type;
              var v19134 = this.voidType;
              v13245 = v19133 != v19134;
            }
            var v3127 = v13245;
            if (v3127) {
              var v13246 = this.checker;
              var v3124 = v13246.errorReporter;
              v3124.simpleError(returnStmt$$1, "Return with value expression in void function");
              var v3125 = returnStmt$$1.returnExpression;
              returnStmt$$1.type = v3125.type;
            } else {
              var v3126 = returnStmt$$1.returnExpression;
              var v26488 = this.cast(v3126, expectedReturnType);
              returnStmt$$1.returnExpression = v26488;
              returnStmt$$1.type = expectedReturnType;
            }
          } else {
            if (targetType$$7) {
              var v19135 = returnStmt$$1.returnExpression;
              var v13247 = v19135.type;
              var v13248 = this.voidType;
              var v3130 = v13247 != v13248;
              if (v3130) {
                var v3128 = returnStmt$$1.returnExpression;
                var v26489 = this.cast(v3128, targetType$$7);
                returnStmt$$1.returnExpression = v26489;
              } else {
                var v3129 = returnStmt$$1.returnExpression;
                v3129.type = targetType$$7;
              }
            }
            var v3131 = returnStmt$$1.returnExpression;
            returnStmt$$1.type = v3131.type;
          }
          var v13249 = this.thisFnc;
          var v3132 = v13249.returnStatementsWithExpressions;
          var v19136 = this.thisFnc;
          var v13250 = v19136.returnStatementsWithExpressions;
          var v3133 = v13250.length;
          v3132[v3133] = returnStmt$$1;
        } else {
          var v3134;
          var v13252 = targetType$$7 == null;
          if (v13252) {
            var v13251 = this.checker;
            v3134 = v13251.voidType;
          } else {
            v3134 = targetType$$7;
          }
          returnStmt$$1.type = v3134;
        }
      }
      return returnStmt$$1;
    }
    function v1096(type$$56, ast$$108) {
      var v19137 = type$$56;
      if (v19137) {
        v19137 = type$$56.construct;
      }
      var v13253 = v19137;
      if (v13253) {
        var v24895 = type$$56.construct;
        var v23007 = v24895.signatures;
        var v19138 = v23007.length;
        v13253 = v19138 > 0;
      }
      var v3140 = v13253;
      if (v3140) {
        var i$$108 = 0;
        var v23008 = type$$56.construct;
        var v19139 = v23008.signatures;
        var v13254 = v19139.length;
        var v3139 = i$$108 < v13254;
        for (;v3139;) {
          var v25721 = type$$56.construct;
          var v24896 = v25721.signatures;
          var v23009 = v24896[i$$108];
          var v19140 = v23009.returnType;
          var v13255 = v19140.type;
          var v19141 = this.checker;
          var v13256 = v19141.voidType;
          var v3138 = v13255 == v13256;
          if (v3138) {
            var v13257 = this.checker;
            var v3137 = v13257.errorReporter;
            v3137.simpleError(ast$$108, "Constructors may not have a return type of 'void'");
            break;
          }
          i$$108++;
          var v23010 = type$$56.construct;
          var v19142 = v23010.signatures;
          var v13258 = v19142.length;
          v3139 = i$$108 < v13258;
        }
      }
      return;
    }
    function v1095(arrayLit) {
      function v1094(index$$60) {
        var v13259 = elements$$2.members;
        var v3141 = v13259[index$$60];
        return v3141.type;
      }
      function v1093(index$$59, type$$55) {
        var v13260 = elements$$2.members;
        var v3142 = v13260[index$$59];
        v3142.type = type$$55;
        return;
      }
      function v1092() {
        var v3143 = elements$$2.members;
        return v3143.length;
      }
      var elements$$2 = arrayLit.operand;
      var elementType = this.anyType;
      var targetElementType = null;
      var v3144 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$14 = new v3144;
      comparisonInfo$$14.onlyCaptureFirstError = true;
      var v13261 = this.checker;
      var v3147 = v13261.hasTargetType();
      if (v3147) {
        var v13262 = this.checker;
        var v3145 = v13262.currentContextualTypeContext;
        var targetType$$6 = v3145.contextualType;
        var v3146 = targetType$$6.elementType;
        if (v3146) {
          targetElementType = targetType$$6.elementType;
        }
      }
      if (elements$$2) {
        var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;
        this.inArrayElementTypeCheck = true;
        var v3148 = this.checker;
        var v13263 = this.checker;
        var v3149 = v13263.inProvisionalTypecheckMode();
        var v3150 = targetElementType != null;
        v3148.typeCheckWithContextualType(targetElementType, v3149, v3150, elements$$2);
        this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;
        var v13264 = elements$$2.members;
        var v3151 = v13264[0];
        elementType = v3151.type;
        var collection$$3 = {getLength:v1092, setTypeAtIndex:v1093, getTypeAtIndex:v1094};
        var v3152 = this.checker;
        elementType = v3152.findBestCommonType(elementType, targetElementType, collection$$3, false, comparisonInfo$$14);
        var v23011 = this.checker;
        var v19143 = v23011.undefinedType;
        var v13265 = elementType == v19143;
        var v19145 = !v13265;
        if (v19145) {
          var v19144 = !prevInArrayElemTypeCheck;
          if (v19144) {
            var v23012 = this.nullType;
            v19144 = elementType == v23012;
          }
          v13265 = v19144;
        }
        var v3153 = v13265;
        if (v3153) {
          elementType = this.anyType;
        }
      }
      var v3159 = !elementType;
      if (v3159) {
        var emsg$$2 = "Incompatible types in array literal expression";
        var v13266 = comparisonInfo$$14.message;
        var v3157 = !v13266;
        if (v3157) {
          var v13267 = this.checker;
          var v3154 = v13267.errorReporter;
          v3154.simpleError(arrayLit, emsg$$2);
        } else {
          var v13268 = this.checker;
          var v3155 = v13268.errorReporter;
          var v13269 = emsg$$2 + ": ";
          var v13270 = comparisonInfo$$14.message;
          var v3156 = v13269 + v13270;
          v3155.simpleError(arrayLit, v3156);
        }
        elementType = this.anyType;
      } else {
        if (targetElementType) {
          var v13271 = this.checker;
          var v3158 = v13271.sourceIsAssignableToTarget(elementType, targetElementType);
          if (v3158) {
            elementType = targetElementType;
          }
        }
      }
      var v3160 = arrayLit;
      var v13272 = this.checker;
      var v26490 = v13272.makeArrayType(elementType);
      v3160.type = v26490;
      return;
    }
    function v1091(objectLit$$2) {
      var v3161 = TypeScript$$25.Type;
      var resultType$$2 = new v3161;
      var v3162 = TypeScript$$25.TypeSymbol;
      var v13273 = this.checker;
      var v3163 = v13273.anon;
      var v3164 = objectLit$$2.minChar;
      var v13274 = objectLit$$2.limChar;
      var v13275 = objectLit$$2.minChar;
      var v3165 = v13274 - v13275;
      var v19146 = this.checker;
      var v13276 = v19146.locationInfo;
      var v3166 = v13276.unitIndex;
      var v26491 = new v3162(v3163, v3164, v3165, v3166, resultType$$2);
      resultType$$2.symbol = v26491;
      var v3167 = TypeScript$$25.ScopedMembers;
      var v13277 = TypeScript$$25.DualStringHashTable;
      var v19147 = TypeScript$$25.StringHashTable;
      var v13278 = new v19147;
      var v19148 = TypeScript$$25.StringHashTable;
      var v13279 = new v19148;
      var v3168 = new v13277(v13278, v13279);
      var v26492 = new v3167(v3168);
      resultType$$2.members = v26492;
      var v3169 = TypeScript$$25.SymbolTableScope;
      var v3170 = resultType$$2.members;
      var v26493 = new v3169(v3170, null, null, null, null);
      resultType$$2.memberScope = v26493;
      var v3171 = TypeScript$$25.SymbolAggregateScope;
      var v3172 = resultType$$2.symbol;
      var aggScope$$3 = new v3171(v3172);
      var v3173 = resultType$$2.memberScope;
      aggScope$$3.addParentScope(v3173);
      var v3174 = this.scope;
      aggScope$$3.addParentScope(v3174);
      resultType$$2.containedScope = aggScope$$3;
      var memberDecls$$1 = objectLit$$2.operand;
      var prevThisType$$3 = this.thisType;
      var acceptTargetType = false;
      var targetType$$5 = null;
      var v13280 = this.checker;
      var v3179 = v13280.hasTargetType();
      if (v3179) {
        var v13281 = this.checker;
        var v3175 = v13281.currentContextualTypeContext;
        targetType$$5 = v3175.contextualType;
        var v19149 = targetType$$5;
        if (v19149) {
          v19149 = targetType$$5.symbol;
        }
        var v13282 = v19149;
        if (v13282) {
          var v23013 = this.checker;
          var v24897 = targetType$$5.symbol;
          var v23014 = v24897.typeCheckStatus;
          var v19150 = v23013.typeStatusIsFinished(v23014);
          v13282 = !v19150;
        }
        var v3178 = v13282;
        if (v3178) {
          var v13283 = targetType$$5.symbol;
          var v3177 = v13283.declAST;
          if (v3177) {
            var v13284 = targetType$$5.symbol;
            var v3176 = v13284.declAST;
            this.typeCheck(v3176);
          }
        }
        acceptTargetType = true;
      }
      if (memberDecls$$1) {
        var i$$107 = 0;
        var v3180 = memberDecls$$1.members;
        var len$$52 = v3180.length;
        var v3210 = i$$107 < len$$52;
        for (;v3210;) {
          var v3181 = memberDecls$$1.members;
          var binex$$9 = v3181[i$$107];
          var id$$23 = binex$$9.operand1;
          var text$$24;
          var targetMember$$1 = null;
          var fieldSymbol$$4 = null;
          var v13285 = id$$23.nodeType;
          var v19151 = TypeScript$$25.NodeType;
          var v13286 = v19151.Name;
          var v3185 = v13285 == v13286;
          if (v3185) {
            text$$24 = id$$23.text;
          } else {
            var v13287 = id$$23.nodeType;
            var v19152 = TypeScript$$25.NodeType;
            var v13288 = v19152.QString;
            var v3184 = v13287 == v13288;
            if (v3184) {
              var idText$$5 = id$$23.text;
              var v13289 = idText$$5.length;
              var v3182 = v13289 - 1;
              text$$24 = idText$$5.substring(1, v3182);
            } else {
              var v13290 = this.checker;
              var v3183 = v13290.errorReporter;
              v3183.simpleError(objectLit$$2, "malformed object literal");
              resultType$$2 = this.anyType;
              break;
            }
          }
          var v13291 = acceptTargetType;
          if (v13291) {
            v13291 = targetType$$5.memberScope;
          }
          var v3187 = v13291;
          if (v3187) {
            var v3186 = targetType$$5.memberScope;
            targetMember$$1 = v3186.find(text$$24, false, false);
          }
          var v23015 = binex$$9.operand2;
          var v19153 = v23015.nodeType;
          var v23016 = TypeScript$$25.NodeType;
          var v19154 = v23016.FuncDecl;
          var v13292 = v19153 == v19154;
          if (v13292) {
            var v19155 = binex$$9.operand2;
            v13292 = v19155.isAccessor();
          }
          var v3192 = v13292;
          if (v3192) {
            var funcDecl$$33 = binex$$9.operand2;
            var v13293 = resultType$$2.members;
            var v3188 = v13293.publicMembers;
            var accessorSym$$1 = v3188.lookup(text$$24);
            var v3189 = this.checker;
            var v3190 = resultType$$2.memberScope;
            accessorSym$$1 = v3189.createAccessorSymbol(funcDecl$$33, accessorSym$$1, resultType$$2, true, false, v3190, null);
            funcDecl$$33.accessorSymbol = accessorSym$$1;
            fieldSymbol$$4 = accessorSym$$1;
            var v13294 = id$$23.nodeType;
            var v19156 = TypeScript$$25.NodeType;
            var v13295 = v19156.Name;
            var v3191 = v13294 == v13295;
            if (v3191) {
              id$$23.sym = accessorSym$$1;
            }
          }
          var v3193 = this.checker;
          var v13296;
          var v19157 = acceptTargetType && targetMember$$1;
          if (v19157) {
            v13296 = targetMember$$1.getType();
          } else {
            v13296 = null;
          }
          var v3194 = v13296;
          var v3195 = binex$$9.operand2;
          v3193.typeCheckWithContextualType(v3194, false, acceptTargetType, v3195);
          var v3199 = acceptTargetType && targetMember$$1;
          if (v3199) {
            var v24898 = binex$$9.operand2;
            var v23017 = v24898.type;
            var v23018 = this.anyType;
            var v19158 = v23017 == v23018;
            var v23022 = !v19158;
            if (v23022) {
              var v23019 = this.checker;
              var v24899 = binex$$9.operand2;
              var v23020 = v24899.type;
              var v23021 = targetMember$$1.getType();
              v19158 = v23019.sourceIsAssignableToTarget(v23020, v23021);
            }
            var v13297 = v19158;
            var v19160 = !v13297;
            if (v19160) {
              var v25722 = binex$$9.operand2;
              var v24900 = v25722.nodeType;
              var v25723 = TypeScript$$25.NodeType;
              var v24901 = v25723.FuncDecl;
              var v23023 = v24900 == v24901;
              if (v23023) {
                var v24902 = binex$$9.operand2;
                v23023 = v24902.isAccessor();
              }
              var v19159 = v23023;
              if (v19159) {
                var v24903 = binex$$9.operand2;
                var v23024 = this.typeFromAccessorFuncDecl(v24903);
                var v23025 = targetMember$$1.getType();
                v19159 = v23024 == v23025;
              }
              v13297 = v19159;
            }
            var v3197 = v13297;
            if (v3197) {
              var v3196 = binex$$9.operand1;
              var v26494 = targetMember$$1.getType();
              v3196.type = v26494;
            }
          } else {
            var v3198 = binex$$9.operand2;
            var v13298;
            var v24904 = binex$$9.operand2;
            var v23026 = v24904.type;
            var v24905 = this.checker;
            var v23027 = v24905.undefinedType;
            var v19162 = v23026 == v23027;
            if (v19162) {
              v13298 = this.anyType;
            } else {
              var v19161 = binex$$9.operand2;
              v13298 = v19161.type;
            }
            v3198.type = v13298;
          }
          var v3209 = fieldSymbol$$4 == null;
          if (v3209) {
            var v3200 = binex$$9.operand2;
            var memberType$$1 = v3200.type;
            var v3201 = TypeScript$$25.ValueLocation;
            var field$$6 = new v3201;
            var v3202 = TypeScript$$25.FieldSymbol;
            var v3203 = id$$23.minChar;
            var v19163 = this.checker;
            var v13299 = v19163.locationInfo;
            var v3204 = v13299.unitIndex;
            fieldSymbol$$4 = new v3202(text$$24, v3203, v3204, true, field$$6);
            var v13300 = fieldSymbol$$4.flags;
            var v19164 = TypeScript$$25.SymbolFlags;
            var v13301 = v19164.Property;
            fieldSymbol$$4.flags = v13300 | v13301;
            field$$6.symbol = fieldSymbol$$4;
            var v3205 = this.checker;
            var v26495 = v3205.getTypeCheckFinishedStatus();
            fieldSymbol$$4.typeCheckStatus = v26495;
            var v3206 = TypeScript$$25.TypeLink;
            var v26496 = new v3206;
            field$$6.typeLink = v26496;
            var v3207 = field$$6.typeLink;
            v3207.type = memberType$$1;
            var v13302 = resultType$$2.members;
            var v3208 = v13302.publicMembers;
            v3208.add(text$$24, fieldSymbol$$4);
          }
          fieldSymbol$$4.isObjectLitField = true;
          i$$107++;
          v3210 = i$$107 < len$$52;
        }
      }
      this.thisType = prevThisType$$3;
      objectLit$$2.type = resultType$$2;
      if (targetType$$5) {
        objectLit$$2.targetType = targetType$$5;
      }
      return;
    }
    function v1090(funcDecl$$32) {
      var v13303 = funcDecl$$32.isAccessor();
      var v3211 = !v13303;
      if (v3211) {
        return null;
      }
      var v13304 = funcDecl$$32.fncFlags;
      var v19165 = TypeScript$$25.FncFlags;
      var v13305 = v19165.GetAccessor;
      var v3214 = TypeScript$$25.hasFlag(v13304, v13305);
      if (v3214) {
        var v24906 = funcDecl$$32.type;
        var v23028 = v24906.call;
        var v19166 = v23028.signatures;
        var v13306 = v19166[0];
        var v3212 = v13306.returnType;
        return v3212.type;
      } else {
        var v25724 = funcDecl$$32.type;
        var v24907 = v25724.call;
        var v23029 = v24907.signatures;
        var v19167 = v23029[0];
        var v13307 = v19167.parameters;
        var v3213 = v13307[0];
        return v3213.getType();
      }
      return;
    }
    function v1089(ifStmt$$1) {
      var v3215 = ifStmt$$1.cond;
      var v26497 = this.typeCheck(v3215);
      ifStmt$$1.cond = v26497;
      var v3216 = ifStmt$$1.cond;
      this.typeCheckCondExpr(v3216);
      var v3217 = ifStmt$$1.thenBod;
      var v26498 = this.typeCheck(v3217);
      ifStmt$$1.thenBod = v26498;
      var v3218 = ifStmt$$1.elseBod;
      var v26499 = this.typeCheck(v3218);
      ifStmt$$1.elseBod = v26499;
      var v3219 = ifStmt$$1.thenBod;
      this.typeCheckCompoundStmtBlock(v3219, "if statement");
      var v3220 = ifStmt$$1.elseBod;
      this.typeCheckCompoundStmtBlock(v3220, "if statement");
      ifStmt$$1.type = this.voidType;
      return ifStmt$$1;
    }
    function v1088(stmts$$3, stmtType) {
      var v23030 = this.checker;
      var v19168 = v23030.styleSettings;
      var v13308 = v19168.blockInCompoundStmt;
      if (v13308) {
        v13308 = stmts$$3;
      }
      var v3224 = v13308;
      if (v3224) {
        var v13309 = stmts$$3.nodeType;
        var v19169 = TypeScript$$25.NodeType;
        var v13310 = v19169.Block;
        var v3223 = v13309 != v13310;
        if (v3223) {
          var v13311 = this.checker;
          var v3221 = v13311.errorReporter;
          var v3222 = stmtType + " requires a block";
          v3221.styleError(stmts$$3, v3222);
        }
      }
      return;
    }
    function v1087(cond$$3) {
      var v19170 = this.checker;
      var v13312 = v19170.styleSettings;
      var v3227 = v13312.assignmentInCond;
      if (v3227) {
        var v19171 = cond$$3 !== null;
        if (v19171) {
          var v23031 = cond$$3.nodeType;
          var v24908 = TypeScript$$25.NodeType;
          var v23032 = v24908.Asg;
          v19171 = v23031 >= v23032;
        }
        var v13313 = v19171;
        if (v13313) {
          var v19172 = cond$$3.nodeType;
          var v23033 = TypeScript$$25.NodeType;
          var v19173 = v23033.LastAsg;
          v13313 = v19172 <= v19173;
        }
        var v3226 = v13313;
        if (v3226) {
          var v13314 = this.checker;
          var v3225 = v13314.errorReporter;
          v3225.simpleError(cond$$3, "top-level assignment statement in conditional expression");
        }
      }
      return;
    }
    function v1086(doWhileStmt) {
      var v3228 = doWhileStmt.cond;
      var v26500 = this.typeCheck(v3228);
      doWhileStmt.cond = v26500;
      var v3229 = doWhileStmt.cond;
      this.typeCheckCondExpr(v3229);
      var v3230 = doWhileStmt.body;
      var v26501 = this.typeCheck(v3230);
      doWhileStmt.body = v26501;
      var v3231 = doWhileStmt.body;
      this.typeCheckCompoundStmtBlock(v3231, "do while statement");
      doWhileStmt.type = this.voidType;
      return doWhileStmt;
    }
    function v1085(whileStmt$$1) {
      var v3232 = whileStmt$$1.cond;
      var v26502 = this.typeCheck(v3232);
      whileStmt$$1.cond = v26502;
      var v3233 = whileStmt$$1.cond;
      this.typeCheckCondExpr(v3233);
      var v3234 = whileStmt$$1.body;
      var v26503 = this.typeCheck(v3234);
      whileStmt$$1.body = v26503;
      var v3235 = whileStmt$$1.body;
      this.typeCheckCompoundStmtBlock(v3235, "while statement");
      whileStmt$$1.type = this.voidType;
      return whileStmt$$1;
    }
    function v1084(forInStmt$$1) {
      var v3236 = forInStmt$$1.obj;
      var v26504 = this.typeCheck(v3236);
      forInStmt$$1.obj = v26504;
      var v13315 = forInStmt$$1.lval;
      var v3237 = this.typeCheck(v13315);
      var v13316 = this.checker;
      var v3238 = v13316.stringType;
      var v26505 = this.cast(v3237, v3238);
      forInStmt$$1.lval = v26505;
      var v19174 = forInStmt$$1.lval;
      var v13317 = v19174.nodeType;
      var v19175 = TypeScript$$25.NodeType;
      var v13318 = v19175.VarDecl;
      var v3244 = v13317 == v13318;
      if (v3244) {
        var varDecl$$19 = forInStmt$$1.lval;
        var v3240 = varDecl$$19.typeExpr;
        if (v3240) {
          var v13319 = this.checker;
          var v3239 = v13319.errorReporter;
          v3239.simpleError(varDecl$$19, "Variable declarations for for/in expressions may not contain a type annotation");
        }
        var v3243 = varDecl$$19.sym;
        if (v3243) {
          var v3241 = varDecl$$19.sym;
          var v13320 = this.checker;
          var v3242 = v13320.stringType;
          v3241.setType(v3242);
        }
      }
      var v3245 = forInStmt$$1.body;
      var v26506 = this.typeCheck(v3245);
      forInStmt$$1.body = v26506;
      var v3246 = forInStmt$$1.body;
      this.typeCheckCompoundStmtBlock(v3246, "for in statement");
      return forInStmt$$1;
    }
    function v1083(withStmt$$2) {
      var v13321 = this.checker;
      var v3249 = v13321.errorsOnWith;
      if (v3249) {
        var v13322 = this.checker;
        var v3247 = v13322.errorReporter;
        var v3248 = withStmt$$2.expr;
        v3247.simpleError(v3248, "All symbols within a 'with' block will be typed as 'any'");
      }
      var v3250 = withStmt$$2.expr;
      var v26507 = this.typeCheck(v3250);
      withStmt$$2.expr = v26507;
      var v3251 = this.checker;
      v3251.inWith = true;
      var v3252 = withStmt$$2.body;
      var v26508 = this.typeCheck(v3252);
      withStmt$$2.body = v26508;
      var v3253 = withStmt$$2.body;
      this.typeCheckCompoundStmtBlock(v3253, "with statement");
      var v3254 = this.checker;
      v3254.inWith = false;
      return withStmt$$2;
    }
    function v1082(forStmt$$1) {
      var v3255 = forStmt$$1.init;
      var v26509 = this.typeCheck(v3255);
      forStmt$$1.init = v26509;
      this.nestingLevel++;
      var v3256 = forStmt$$1.cond;
      var v26510 = this.typeCheck(v3256);
      forStmt$$1.cond = v26510;
      var v3257 = forStmt$$1.cond;
      this.typeCheckCondExpr(v3257);
      var v3258 = forStmt$$1.incr;
      var v26511 = this.typeCheck(v3258);
      forStmt$$1.incr = v26511;
      this.nestingLevel--;
      var v3259 = forStmt$$1.body;
      var v26512 = this.typeCheck(v3259);
      forStmt$$1.body = v26512;
      var v3260 = forStmt$$1.body;
      this.typeCheckCompoundStmtBlock(v3260, "for statement");
      forStmt$$1.type = this.voidType;
      return forStmt$$1;
    }
    function v1081(moduleDecl$$7) {
      var v13323 = moduleDecl$$7.mod;
      var v3261 = !v13323;
      if (v3261) {
        return moduleDecl$$7;
      }
      var v3263 = this.currentScript;
      if (v3263) {
        var v3262 = this.currentScript;
        v3262.requiresGlobal = true;
      }
      var mod$$3 = moduleDecl$$7.mod;
      var sym$$43 = null;
      var prevScope$$6 = this.scope;
      var prevThisType$$2 = this.thisType;
      var v3264 = this.checker;
      var prevCurrentModDecl$$1 = v3264.currentModDecl;
      var v3265 = this.checker;
      v3265.currentModDecl = moduleDecl$$7;
      this.thisType = null;
      this.scope = mod$$3.containedScope;
      var v3266 = moduleDecl$$7.members;
      this.typeCheck(v3266);
      sym$$43 = mod$$3.symbol;
      var v3267 = this.checker;
      v3267.currentModDecl = prevCurrentModDecl$$1;
      this.thisType = prevThisType$$2;
      this.scope = prevScope$$6;
      moduleDecl$$7.type = mod$$3;
      if (sym$$43) {
        var v3268 = TypeScript$$25.TypeCheckStatus;
        sym$$43.typeCheckStatus = v3268.Finished;
      }
      return moduleDecl$$7;
    }
    function v1080(importDecl$$2) {
      var v3269 = importDecl$$2.alias;
      var mod$$2 = v3269.type;
      var sym$$42 = null;
      var prevInImportTC = this.inImportTypeCheck;
      this.inImportTypeCheck = true;
      var v3270 = importDecl$$2.alias;
      this.typeCheck(v3270);
      var v3271 = importDecl$$2.alias;
      mod$$2 = v3271.type;
      var v3277 = mod$$2 == null;
      if (v3277) {
        var v13324 = this.checker;
        var v3272 = v13324.errorReporter;
        var v3273 = importDecl$$2.alias;
        var v23034 = importDecl$$2.id;
        var v19176 = v23034.actualText;
        var v13325 = "Could not resolve module alias '" + v19176;
        var v3274 = v13325 + "'";
        v3272.simpleError(v3273, v3274);
        var v3275 = this.checker;
        mod$$2 = v3275.anyType;
        var v13326 = importDecl$$2.id;
        var v3276 = v13326.sym;
        v3276.type = mod$$2;
      }
      var v3278 = importDecl$$2.id;
      v3278.type = mod$$2;
      sym$$42 = mod$$2.symbol;
      var v13327 = mod$$2.isModuleType();
      var v3286 = !v13327;
      if (v3286) {
        var v13328 = this.checker;
        var v3279 = v13328.errorReporter;
        var v3280 = importDecl$$2.alias;
        v3279.simpleError(v3280, "A module cannot be aliased to a non-module type");
      } else {
        sym$$42.type = mod$$2;
        var v24909 = this.checker;
        var v23035 = v24909.typeFlow;
        var v19177 = v23035.currentScript;
        if (v19177) {
          var v25725 = this.checker;
          var v24910 = v25725.typeFlow;
          var v23036 = v24910.currentScript;
          v19177 = v23036.topLevelMod;
        }
        var v13329 = v19177;
        if (v13329) {
          var v25726 = this.checker;
          var v24911 = v25726.typeFlow;
          var v23037 = v24911.currentScript;
          var v19178 = v23037.topLevelMod;
          v13329 = v19178.mod;
        }
        var v3282 = v13329;
        if (v3282) {
          var v25727 = this.checker;
          var v24912 = v25727.typeFlow;
          var v23038 = v24912.currentScript;
          var v19179 = v23038.topLevelMod;
          var v13330 = v19179.mod;
          var v3281 = v13330.importedModules;
          v3281.push(importDecl$$2);
        }
        var v13331 = importDecl$$2.id;
        var v3283 = v13331.sym;
        v3283.type = mod$$2;
        var v13332 = mod$$2.symbol;
        if (v13332) {
          var v19180 = mod$$2.symbol;
          v13332 = v19180.declAST;
        }
        var v3285 = v13332;
        if (v3285) {
          var v13333 = mod$$2.symbol;
          var v3284 = v13333.declAST;
          var v19181 = v3284.modFlags;
          var v24913 = TypeScript$$25.ModuleFlags;
          var v23039 = v24913.ShouldEmitModuleDecl;
          var v19182 = ~v23039;
          v3284.modFlags = v19181 & v19182;
        }
      }
      this.inImportTypeCheck = prevInImportTC;
      return importDecl$$2;
    }
    function v1079(interfaceDecl$$6) {
      var v3287 = interfaceDecl$$6.type;
      this.typeCheckBases(v3287);
      var v3288 = interfaceDecl$$6.extendsList;
      var v13334 = interfaceDecl$$6.type;
      var v3289 = v13334.symbol;
      this.typeCheckBaseListPrivacy(v3288, v3289, true);
      var v3290 = interfaceDecl$$6.members;
      this.typeCheck(v3290);
      var v3291 = interfaceDecl$$6.type;
      this.checkBaseTypeMemberInheritance(v3291, interfaceDecl$$6);
      var v3305 = interfaceDecl$$6.extendsList;
      if (v3305) {
        var i$$106 = 0;
        var v23040 = interfaceDecl$$6.extendsList;
        var v19183 = v23040.members;
        var v13335 = v19183.length;
        var v3304 = i$$106 < v13335;
        for (;v3304;) {
          var v24914 = interfaceDecl$$6.extendsList;
          var v23041 = v24914.members;
          var v19184 = v23041[i$$106];
          var v13336 = v19184.type;
          var v3295 = v13336.call;
          if (v3295) {
            var v13337 = interfaceDecl$$6.type;
            var v3294 = v13337.call;
            if (v3294) {
              var v13338 = interfaceDecl$$6.type;
              var v3292 = v13338.call;
              var v23042 = interfaceDecl$$6.type;
              var v19185 = v23042.call;
              var v13339 = v19185.signatures;
              var v26089 = interfaceDecl$$6.extendsList;
              var v25728 = v26089.members;
              var v24915 = v25728[i$$106];
              var v23043 = v24915.type;
              var v19186 = v23043.call;
              var v13340 = v19186.signatures;
              var v26513 = v13339.concat(v13340);
              v3292.signatures = v26513;
            } else {
              var v3293 = interfaceDecl$$6.type;
              var v24916 = interfaceDecl$$6.extendsList;
              var v23044 = v24916.members;
              var v19187 = v23044[i$$106];
              var v13341 = v19187.type;
              v3293.call = v13341.call;
            }
          }
          var v24917 = interfaceDecl$$6.extendsList;
          var v23045 = v24917.members;
          var v19188 = v23045[i$$106];
          var v13342 = v19188.type;
          var v3299 = v13342.construct;
          if (v3299) {
            var v13343 = interfaceDecl$$6.type;
            var v3298 = v13343.construct;
            if (v3298) {
              var v13344 = interfaceDecl$$6.type;
              var v3296 = v13344.construct;
              var v23046 = interfaceDecl$$6.type;
              var v19189 = v23046.construct;
              var v13345 = v19189.signatures;
              var v26090 = interfaceDecl$$6.extendsList;
              var v25729 = v26090.members;
              var v24918 = v25729[i$$106];
              var v23047 = v24918.type;
              var v19190 = v23047.construct;
              var v13346 = v19190.signatures;
              var v26514 = v13345.concat(v13346);
              v3296.signatures = v26514;
            } else {
              var v3297 = interfaceDecl$$6.type;
              var v24919 = interfaceDecl$$6.extendsList;
              var v23048 = v24919.members;
              var v19191 = v23048[i$$106];
              var v13347 = v19191.type;
              v3297.construct = v13347.construct;
            }
          }
          var v24920 = interfaceDecl$$6.extendsList;
          var v23049 = v24920.members;
          var v19192 = v23049[i$$106];
          var v13348 = v19192.type;
          var v3303 = v13348.index;
          if (v3303) {
            var v13349 = interfaceDecl$$6.type;
            var v3302 = v13349.index;
            if (v3302) {
              var v13350 = interfaceDecl$$6.type;
              var v3300 = v13350.index;
              var v23050 = interfaceDecl$$6.type;
              var v19193 = v23050.index;
              var v13351 = v19193.signatures;
              var v26091 = interfaceDecl$$6.extendsList;
              var v25730 = v26091.members;
              var v24921 = v25730[i$$106];
              var v23051 = v24921.type;
              var v19194 = v23051.index;
              var v13352 = v19194.signatures;
              var v26515 = v13351.concat(v13352);
              v3300.signatures = v26515;
            } else {
              var v3301 = interfaceDecl$$6.type;
              var v24922 = interfaceDecl$$6.extendsList;
              var v23052 = v24922.members;
              var v19195 = v23052[i$$106];
              var v13353 = v19195.type;
              v3301.index = v13353.index;
            }
          }
          i$$106++;
          var v23053 = interfaceDecl$$6.extendsList;
          var v19196 = v23053.members;
          var v13354 = v19196.length;
          v3304 = i$$106 < v13354;
        }
      }
      return interfaceDecl$$6;
    }
    function v1078(type$$54, ast$$107) {
      var v3309 = type$$54.call;
      if (v3309) {
        var v3306 = type$$54.call;
        var v3307 = this.checker;
        var v13355 = type$$54.construct;
        var v3308 = v13355 != null;
        v3306.typeCheck(v3307, ast$$107, v3308);
      }
      var v3312 = type$$54.construct;
      if (v3312) {
        var v3310 = type$$54.construct;
        var v3311 = this.checker;
        v3310.typeCheck(v3311, ast$$107, false);
      }
      var v3315 = type$$54.index;
      if (v3315) {
        var v3313 = type$$54.index;
        var v3314 = this.checker;
        v3313.typeCheck(v3314, ast$$107, false);
      }
      return;
    }
    function v1077(classDecl$$9) {
      var v3316 = classDecl$$9.type;
      var typeSymbol$$6 = v3316.symbol;
      var v13356 = typeSymbol$$6.typeCheckStatus;
      var v19197 = TypeScript$$25.TypeCheckStatus;
      var v13357 = v19197.Finished;
      var v3320 = v13356 == v13357;
      if (v3320) {
        return classDecl$$9;
      } else {
        var v13358 = typeSymbol$$6.typeCheckStatus;
        var v19198 = TypeScript$$25.TypeCheckStatus;
        var v13359 = v19198.Started;
        var v3319 = v13358 == v13359;
        if (v3319) {
          return classDecl$$9;
        } else {
          var v3317 = TypeScript$$25.TypeCheckStatus;
          typeSymbol$$6.typeCheckStatus = v3317.Started;
          var v3318 = this.checker;
          v3318.addStartedPTO(typeSymbol$$6);
        }
      }
      var prevScope$$5 = this.scope;
      var svClassNode$$1 = this.thisClassNode;
      this.thisClassNode = classDecl$$9;
      var classType$$6 = classDecl$$9.type;
      var v3321 = classType$$6.instanceType;
      this.typeCheckBases(v3321);
      var v3322 = classDecl$$9.extendsList;
      this.typeCheckBaseListPrivacy(v3322, typeSymbol$$6, true);
      var v3323 = classDecl$$9.implementsList;
      this.typeCheckBaseListPrivacy(v3323, typeSymbol$$6, false);
      var prevThisType$$1 = this.thisType;
      this.thisType = classType$$6.instanceType;
      var v3324 = classType$$6.instanceType;
      this.scope = v3324.containedScope;
      var v3329 = classDecl$$9.constructorDecl;
      if (v3329) {
        var v3325 = classType$$6.instanceType;
        this.scope = v3325.constructorScope;
        var ssb$$1 = this.scope;
        var v3326 = ssb$$1.valueMembers;
        var funcTable$$2 = v3326.allMembers;
        var v19199 = classDecl$$9.constructorDecl;
        var v13360 = v19199.type;
        var v3327 = v13360.symbol;
        var v13361 = classDecl$$9.constructorDecl;
        var v3328 = v13361.arguments;
        this.addConstructorLocalArgs(v3327, v3328, funcTable$$2, true);
      }
      var v3330 = classDecl$$9.members;
      this.typeCheck(v3330);
      var v3331 = TypeScript$$25.TypeCheckStatus;
      typeSymbol$$6.typeCheckStatus = v3331.Finished;
      this.checkBaseTypeMemberInheritance(classType$$6, classDecl$$9);
      this.checkMembersImplementInterfaces(classType$$6);
      this.typeCheckOverloadSignatures(classType$$6, classDecl$$9);
      var v3332 = classType$$6.instanceType;
      this.typeCheckOverloadSignatures(v3332, classDecl$$9);
      var v13362 = classDecl$$9.constructorDecl;
      var v3336 = !v13362;
      if (v3336) {
        var v23054 = classDecl$$9.extendsList;
        if (v23054) {
          var v25731 = classDecl$$9.extendsList;
          var v24923 = v25731.members;
          v23054 = v24923.length;
        }
        var v19200 = v23054;
        if (v19200) {
          var v25732 = classDecl$$9.extendsList;
          var v24924 = v25732.members;
          var v23055 = v24924[0];
          v19200 = v23055.type;
        }
        var v13363 = v19200;
        if (v13363) {
          var v26264 = classDecl$$9.extendsList;
          var v26092 = v26264.members;
          var v25733 = v26092[0];
          var v24925 = v25733.type;
          var v23056 = v24925.symbol;
          var v19201 = v23056.type;
          v13363 = v19201.isClass();
        }
        var v3335 = v13363;
        if (v3335) {
          var v3333 = classDecl$$9.type;
          var v25734 = classDecl$$9.extendsList;
          var v24926 = v25734.members;
          var v23057 = v24926[0];
          var v19202 = v23057.type;
          var v13364 = v19202.symbol;
          var v3334 = v13364.type;
          TypeScript$$25.cloneParentConstructGroupForChildType(v3333, v3334);
        }
      }
      this.thisType = prevThisType$$1;
      this.thisClassNode = svClassNode$$1;
      this.scope = prevScope$$5;
      return classDecl$$9;
    }
    function v1076(derivedType, derivedTypeDecl) {
      function v1075(key$$45, s$$28, c$$12) {
        var sym$$41 = s$$28;
        var j$$16 = 0;
        var v3349 = j$$16 < len$$51;
        for (;v3349;) {
          var v3337 = instanceType$$6.extendsList;
          var base$$3 = v3337[j$$16];
          var v13365 = base$$3.memberScope;
          var v3348 = v13365 == null;
          if (v3348) {
            var v13366 = _this$$12.checker;
            var v3338 = v13366.errorReporter;
            var v23058 = base$$3.symbol;
            var v19203 = v23058.name;
            var v13367 = "Base type '" + v19203;
            var v3339 = v13367 + "' lacks an implementation.";
            v3338.simpleError(derivedTypeDecl, v3339);
          } else {
            var v3340 = base$$3.memberScope;
            var v3341 = sym$$41.name;
            var bSym = v3340.find(v3341, false, false);
            if (bSym) {
              var aType = sym$$41.getType();
              var bType = bSym.getType();
              var v19204 = _this$$12.checker;
              var v13368 = v19204.sourceIsSubtypeOfTarget(aType, bType);
              var v3347 = !v13368;
              if (v3347) {
                var v13369 = _this$$12.checker;
                var v3342 = v13369.errorReporter;
                var v24927 = sym$$41.name;
                var v23059 = "Type of overridden member '" + v24927;
                var v19205 = v23059 + "' is not subtype of original member defined by type '";
                var v23060 = bSym.container;
                var v19206 = v23060.name;
                var v13370 = v19205 + v19206;
                var v3343 = v13370 + "'";
                v3342.simpleErrorFromSym(sym$$41, v3343);
              } else {
                var v19207 = sym$$41.kind();
                var v23061 = TypeScript$$25.SymbolKind;
                var v19208 = v23061.Type;
                var v13371 = v19207 == v19208;
                if (v13371) {
                  var v19209 = bSym.kind();
                  var v23062 = TypeScript$$25.SymbolKind;
                  var v19210 = v23062.Field;
                  v13371 = v19209 == v19210;
                }
                var v3346 = v13371;
                if (v3346) {
                  var v13372 = _this$$12.checker;
                  var v3344 = v13372.errorReporter;
                  var v19211 = sym$$41.name;
                  var v13373 = "Cannot override field '" + v19211;
                  var v3345 = v13373 + "' with method";
                  v3344.simpleErrorFromSym(sym$$41, v3345);
                }
              }
            }
          }
          j$$16++;
          v3349 = j$$16 < len$$51;
        }
        return;
      }
      var _this$$12 = this;
      var instanceType$$6 = derivedType.getInstanceType();
      var v13374 = instanceType$$6.extendsList;
      var v3350 = v13374 == null;
      if (v3350) {
        return;
      }
      var v3351 = instanceType$$6.extendsList;
      var len$$51 = v3351.length;
      var v3359 = len$$51 > 0;
      if (v3359) {
        var v3352 = TypeScript$$25.StringHashTable;
        var names$$1 = new v3352;
        var v3356 = instanceType$$6.isClassInstance();
        if (v3356) {
          var i$$105 = 0;
          var v3355 = i$$105 < len$$51;
          for (;v3355;) {
            var v13375 = instanceType$$6.extendsList;
            var v3353 = v13375[i$$105];
            var v3354 = i$$105 > 0;
            this.assertUniqueNamesInBaseTypes(names$$1, v3353, derivedTypeDecl, v3354);
            i$$105++;
            v3355 = i$$105 < len$$51;
          }
        }
        var v3358 = instanceType$$6.members;
        if (v3358) {
          var v13376 = instanceType$$6.members;
          var v3357 = v13376.publicMembers;
          v3357.map(v1075, null);
        }
      }
      return;
    }
    function v1074(names, type$$53, classDecl$$8, checkUnique) {
      function v1073(key$$44, s$$27, c$$11) {
        var sym$$40 = s$$27;
        var v3360 = sym$$40.name;
        var dup = names.lookup(v3360);
        if (dup) {
          if (checkUnique) {
            var v13377 = _this$$11.checker;
            var v3361 = v13377.errorReporter;
            var v26354 = classDecl$$8.name;
            var v26265 = v26354.actualText;
            var v26093 = "duplicate member name in bases for " + v26265;
            var v25735 = v26093 + ": ";
            var v26094 = type$$53.symbol;
            var v25736 = v26094.name;
            var v24928 = v25735 + v25736;
            var v23063 = v24928 + " and ";
            var v24929 = dup.container;
            var v23064 = v24929.name;
            var v19212 = v23063 + v23064;
            var v13378 = v19212 + " both contain member with name ";
            var v13379 = sym$$40.name;
            var v3362 = v13378 + v13379;
            v3361.simpleError(classDecl$$8, v3362);
          }
        } else {
          var v3363 = sym$$40.name;
          names.add(v3363, sym$$40);
        }
        return;
      }
      var _this$$11 = this;
      if (type$$53) {
        var v3365 = type$$53.members;
        if (v3365) {
          var v13380 = type$$53.members;
          var v3364 = v13380.publicMembers;
          v3364.map(v1073, null);
        }
        var v3370 = type$$53.extendsList;
        if (v3370) {
          var v3366 = type$$53.extendsList;
          var len$$50 = v3366.length;
          var i$$104 = 0;
          var v3369 = i$$104 < len$$50;
          for (;v3369;) {
            var v25737 = type$$53.extendsList;
            var v24930 = v25737[i$$104];
            var v23065 = v24930.symbol;
            var v19213 = v23065.flags;
            var v23066 = TypeScript$$25.SymbolFlags;
            var v19214 = v23066.RecursivelyReferenced;
            var v13381 = v19213 & v19214;
            var v3368 = !v13381;
            if (v3368) {
              var v13382 = type$$53.extendsList;
              var v3367 = v13382[i$$104];
              this.assertUniqueNamesInBaseTypes(names, v3367, classDecl$$8, checkUnique);
            }
            i$$104++;
            v3369 = i$$104 < len$$50;
          }
        }
      }
      return;
    }
    function v1072(bases$$7) {
      var v3371 = bases$$7 == null;
      if (v3371) {
        return;
      }
      var v3372 = bases$$7.members;
      var basesLen$$2 = v3372.length;
      var i$$103 = 0;
      var v3375 = i$$103 < basesLen$$2;
      for (;v3375;) {
        var v3373 = bases$$7.members;
        var baseExpr$$2 = v3373[i$$103];
        var baseSymbol$$3 = null;
        var v13383 = baseExpr$$2.nodeType;
        var v19215 = TypeScript$$25.NodeType;
        var v13384 = v19215.Call;
        var v3374 = v13383 == v13384;
        if (v3374) {
          this.typeCheckNew(baseExpr$$2);
        }
        i$$103++;
        v3375 = i$$103 < basesLen$$2;
      }
      return;
    }
    function v1071(implementingType) {
      var instanceType$$5 = implementingType.getInstanceType();
      var v3388 = instanceType$$5.implementsList;
      if (v3388) {
        var v3376 = instanceType$$5.implementsList;
        var len$$49 = v3376.length;
        var i$$102 = 0;
        var v3387 = i$$102 < len$$49;
        for (;v3387;) {
          var v3377 = instanceType$$5.implementsList;
          var interfaceType$$3 = v3377[i$$102];
          var v3378 = TypeScript$$25.TypeComparisonInfo;
          var comparisonInfo$$13 = new v3378;
          var v19216 = this.checker;
          var v13385 = v19216.sourceIsSubtypeOfTarget(instanceType$$5, interfaceType$$3, comparisonInfo$$13);
          var v3386 = !v13385;
          if (v3386) {
            var v23067 = instanceType$$5.getTypeName();
            var v19217 = "Class '" + v23067;
            var v13386 = v19217 + "' declares interface '";
            var v13387 = interfaceType$$3.getTypeName();
            var v3379 = v13386 + v13387;
            var emsg$$1 = v3379 + "' but does not implement it";
            var v13388 = comparisonInfo$$13.message;
            var v3385 = !v13388;
            if (v3385) {
              var v13389 = this.checker;
              var v3380 = v13389.errorReporter;
              var v3381 = instanceType$$5.symbol;
              v3380.simpleErrorFromSym(v3381, emsg$$1);
            } else {
              var v13390 = this.checker;
              var v3382 = v13390.errorReporter;
              var v3383 = instanceType$$5.symbol;
              var v13391 = emsg$$1 + ": ";
              var v13392 = comparisonInfo$$13.message;
              var v3384 = v13391 + v13392;
              v3382.simpleErrorFromSym(v3383, v3384);
            }
          }
          i$$102++;
          v3387 = i$$102 < len$$49;
        }
      }
      return;
    }
    function v1070(type$$52) {
      var seenInterface = false;
      var bases$$6 = type$$52.extendsList;
      var baseLinks = type$$52.extendsTypeLinks;
      if (bases$$6) {
        var len$$48 = bases$$6.length;
        var v3389 = len$$48 > 0;
        if (v3389) {
          var v13393 = type$$52.typeFlags;
          var v19218 = TypeScript$$25.TypeFlags;
          var v13394 = v19218.HasBaseType;
          type$$52.typeFlags = v13393 | v13394;
        }
        var i$$101 = 0;
        var v3414 = i$$101 < len$$48;
        for (;v3414;) {
          var v13395 = bases$$6[i$$101];
          var v19219 = this.checker;
          var v13396 = v19219.anyType;
          var v3400 = v13395 == v13396;
          if (v3400) {
            var v3390 = baseLinks[i$$101];
            v3390.type = null;
            var v13397 = this.checker;
            var v3391 = v13397.errorReporter;
            var oldErrors = v3391.errorSink;
            var v3392 = TypeScript$$25.CompilerDiagnostics;
            var v13398 = oldErrors.length;
            var v3393 = v13398 == 0;
            v3392.assert(v3393, "There shouldnt be any contextual errors when typechecking base type names");
            var v13399 = this.checker;
            var v3394 = v13399.errorReporter;
            v3394.pushToErrorSink = true;
            var v3395 = this.checker;
            var v3396 = baseLinks[i$$101];
            var v3397 = type$$52.containedScope;
            var v26516 = v3395.resolveBaseTypeLink(v3396, v3397);
            bases$$6[i$$101] = v26516;
            var v13400 = this.checker;
            var v3398 = v13400.errorReporter;
            v3398.pushToErrorSink = false;
            var v13401 = this.checker;
            var v3399 = v13401.errorReporter;
            v3399.freeCapturedErrors();
          }
          var base$$2 = bases$$6[i$$101];
          var v3401 = baseLinks[i$$101];
          var baseRef$$1 = v3401.ast;
          var v13402 = base$$2.symbol;
          if (v13402) {
            var v23068 = base$$2.symbol;
            var v19220 = v23068.name;
            v13402 = v19220 == "Object";
          }
          var v3402 = v13402;
          if (v3402) {
            var v19221 = base$$2.symbol;
            var v13403 = v19221.container;
            var v19222 = this.checker;
            var v13404 = v19222.gloMod;
            v3402 = v13403 == v13404;
          }
          var baseTypeOfObject = v3402;
          if (baseTypeOfObject) {
            var v13405 = type$$52.typeFlags;
            var v19223 = TypeScript$$25.TypeFlags;
            var v13406 = v19223.HasBaseTypeOfObject;
            type$$52.typeFlags = v13405 | v13406;
          }
          var v3413 = base$$2.isClassInstance();
          if (v3413) {
            var v13407 = type$$52.isClassInstance();
            var v3405 = !v13407;
            if (v3405) {
              var v13408 = this.checker;
              var v3403 = v13408.errorReporter;
              v3403.simpleError(baseRef$$1, "Interface base type must be interface");
            } else {
              if (seenInterface) {
                var v13409 = this.checker;
                var v3404 = v13409.errorReporter;
                v3404.simpleError(baseRef$$1, "Class may not follow interface as base type");
              }
            }
          } else {
            var v3412 = base$$2.isModuleType();
            if (v3412) {
              var v13410 = this.checker;
              var v3406 = v13410.errorReporter;
              v3406.simpleError(baseRef$$1, "Types may not be derived from module types");
            } else {
              var v3411 = base$$2.members;
              if (v3411) {
                var v3407 = !seenInterface;
                if (v3407) {
                  seenInterface = true;
                }
              } else {
                var v13411 = type$$52.isClassInstance();
                var v3410 = !v13411;
                if (v3410) {
                  var v13412 = this.checker;
                  var v3408 = v13412.errorReporter;
                  v3408.simpleError(baseRef$$1, "Interface base type must be interface");
                } else {
                  var v13413 = this.checker;
                  var v3409 = v13413.errorReporter;
                  v3409.simpleError(baseRef$$1, "Base type must be interface or class");
                }
                break;
              }
            }
          }
          i$$101++;
          v3414 = i$$101 < len$$48;
        }
      }
      return;
    }
    function v1069(funcDecl$$31) {
      function v1068(typeName$$10, isModuleName$$9) {
        return _this$$10.functionReturnTypePrivacyErrorReporter(funcDecl$$31, signature$$10, typeName$$10, isModuleName$$9);
      }
      function v1067(index$$58) {
        var v13414 = funcDecl$$31.returnStatementsWithExpressions;
        var v3415 = v13414[index$$58];
        return v3415.type;
      }
      function v1066(index$$57, type$$51) {
        var v13415 = funcDecl$$31.returnStatementsWithExpressions;
        var v3416 = v13415[index$$57];
        v3416.type = type$$51;
        return;
      }
      function v1065() {
        var v3417 = funcDecl$$31.returnStatementsWithExpressions;
        return v3417.length;
      }
      function v1064(sym$$39) {
        var v3418 = sym$$39.kind();
        var v13416 = TypeScript$$25.SymbolKind;
        var v3419 = v13416.Parameter;
        return v3418 == v3419;
      }
      function v1063(typeName$$9, isModuleName$$8) {
        var v13417 = signature$$10.parameters;
        var v3420 = v13417[p$$1];
        return _this$$10.functionArgumentPrivacyErrorReporter(funcDecl$$31, p$$1, v3420, typeName$$9, isModuleName$$8);
      }
      function v1062(typeName$$8, isModuleName$$7) {
        return _this$$10.functionArgumentPrivacyErrorReporter(funcDecl$$31, p$$1, symbol$$21, typeName$$8, isModuleName$$7);
      }
      var _this$$10 = this;
      this.nestingLevel = 0;
      var fnType = funcDecl$$31.type;
      var fgSym$$4 = fnType.symbol;
      var signature$$10 = funcDecl$$31.signature;
      var v13418 = this.checker;
      var v13419 = signature$$10.typeCheckStatus;
      var v3428 = v13418.typeStatusIsFinished(v13419);
      if (v3428) {
        return funcDecl$$31;
      } else {
        var v13420 = signature$$10.typeCheckStatus;
        var v19224 = TypeScript$$25.TypeCheckStatus;
        var v13421 = v19224.Started;
        var v3427 = v13420 == v13421;
        if (v3427) {
          var v25738 = funcDecl$$31.returnTypeAnnotation;
          var v24931 = !v25738;
          if (v24931) {
            v24931 = funcDecl$$31.bod;
          }
          var v23069 = v24931;
          if (v23069) {
            var v24932 = funcDecl$$31.isSignature();
            v23069 = !v24932;
          }
          var v19225 = v23069;
          if (v19225) {
            var v23070 = funcDecl$$31.isConstructor;
            v19225 = !v23070;
          }
          var v13422 = v19225;
          if (v13422) {
            v13422 = this.allReturnsAreVoid(funcDecl$$31);
          }
          var v3426 = v13422;
          if (v3426) {
            var v3421 = signature$$10.returnType;
            v3421.type = this.voidType;
            return funcDecl$$31;
          } else {
            var v13423 = funcDecl$$31.returnTypeAnnotation;
            var v3425 = v13423 == null;
            if (v3425) {
              var v19226 = this.checker;
              var v13424 = v19226.styleSettings;
              var v3423 = v13424.implicitAny;
              if (v3423) {
                var v13425 = this.checker;
                var v3422 = v13425.errorReporter;
                v3422.styleError(funcDecl$$31, "type implicitly set to 'any'");
              }
              var v3424 = signature$$10.returnType;
              v3424.type = this.anyType;
              var v13426 = fgSym$$4.flags;
              var v19227 = TypeScript$$25.SymbolFlags;
              var v13427 = v19227.RecursivelyReferenced;
              fgSym$$4.flags = v13426 | v13427;
            }
            return funcDecl$$31;
          }
        }
      }
      var v3429 = TypeScript$$25.TypeCheckStatus;
      signature$$10.typeCheckStatus = v3429.Started;
      var v3430 = this.checker;
      v3430.addStartedPTO(signature$$10);
      var prevScope$$4 = this.scope;
      var prevFnc = this.thisFnc;
      var prevMethodStatus$$2 = this.enclosingFncIsMethod;
      var prevClassNode = this.thisClassNode;
      var v3431 = funcDecl$$31.isMethod();
      var v13428 = !v3431;
      if (v13428) {
        v3431 = funcDecl$$31.isConstructor;
      }
      this.enclosingFncIsMethod = v3431;
      this.thisFnc = funcDecl$$31;
      var v3432 = funcDecl$$31.type;
      var container$$21 = v3432.symbol;
      var prevThisType = this.thisType;
      var v3433 = this.checker;
      var prevLocationInfo$$2 = v3433.locationInfo;
      var funcTable$$1 = null;
      var acceptedContextualType = false;
      var targetParams = null;
      var targetReturnType$$1 = null;
      var v3434 = funcDecl$$31.isAccessor();
      if (v3434) {
        var v13429 = funcDecl$$31.fncFlags;
        var v19228 = TypeScript$$25.FncFlags;
        var v13430 = v19228.GetAccessor;
        v3434 = TypeScript$$25.hasFlag(v13429, v13430);
      }
      var isGetter$$4 = v3434;
      var v3435 = funcDecl$$31.isAccessor();
      if (v3435) {
        var v13431 = funcDecl$$31.fncFlags;
        var v19229 = TypeScript$$25.FncFlags;
        var v13432 = v19229.SetAccessor;
        v3435 = TypeScript$$25.hasFlag(v13431, v13432);
      }
      var isSetter$$4 = v3435;
      var v3436;
      var v19230 = isGetter$$4 || isSetter$$4;
      if (v19230) {
        v19230 = funcDecl$$31.accessorSymbol;
      }
      var v13434 = v19230;
      if (v13434) {
        var v13433 = funcDecl$$31.accessorSymbol;
        v3436 = v13433.getType();
      } else {
        v3436 = null;
      }
      var accessorType = v3436;
      var v3437 = this.checker;
      var prevModDecl$$1 = v3437.currentModDecl;
      var v13435 = funcDecl$$31.isConstructor;
      if (v13435) {
        var v19231 = funcDecl$$31.isOverload;
        v13435 = !v19231;
      }
      var v3447 = v13435;
      if (v3447) {
        var v13436 = fnType.instanceType;
        var v3439 = v13436 == null;
        if (v3439) {
          var v13437 = this.checker;
          var v3438 = v13437.errorReporter;
          v3438.simpleError(funcDecl$$31, "Malformed function body (is this a class named the same as an existing interface?)");
          return funcDecl$$31;
        }
        var v3440 = fnType.instanceType;
        this.scope = v3440.constructorScope;
        var ssb = this.scope;
        var v3441 = ssb.valueMembers;
        funcTable$$1 = v3441.allMembers;
      } else {
        var v19232 = funcDecl$$31.isSpecialFn();
        if (v19232) {
          var v24933 = funcDecl$$31.fncFlags;
          var v25739 = TypeScript$$25.FncFlags;
          var v24934 = v25739.Signature;
          var v23071 = v24933 & v24934;
          v19232 = !v23071;
        }
        var v13438 = v19232;
        var v19233 = !v13438;
        if (v19233) {
          v13438 = funcDecl$$31.isOverload;
        }
        var v3446 = v13438;
        if (v3446) {
          funcTable$$1 = funcDecl$$31.symbols;
          var v23072 = funcDecl$$31.fncFlags;
          var v24935 = TypeScript$$25.FncFlags;
          var v23073 = v24935.Static;
          var v19234 = TypeScript$$25.hasFlag(v23072, v23073);
          var v13439 = !v19234;
          if (v13439) {
            v13439 = fnType.containedScope;
          }
          var v3442 = v13439;
          if (v3442) {
            this.scope = fnType.containedScope;
          }
        } else {
          var v3443 = funcDecl$$31.bod;
          if (v3443) {
            this.scope = fnType.containedScope;
          }
          ssb = this.scope;
          var v13440 = ssb;
          if (v13440) {
            v13440 = ssb.valueMembers;
          }
          var v3445 = v13440;
          if (v3445) {
            var v3444 = ssb.valueMembers;
            funcTable$$1 = v3444.allMembers;
          }
        }
      }
      var v19235 = funcDecl$$31.isConstructor;
      if (v19235) {
        v19235 = funcDecl$$31.bod;
      }
      var v13441 = v19235;
      if (v13441) {
        var v19236 = funcDecl$$31.fncFlags;
        var v23074 = TypeScript$$25.FncFlags;
        var v19237 = v23074.ClassMethod;
        v13441 = TypeScript$$25.hasFlag(v19236, v19237);
      }
      var v3459 = v13441;
      if (v3459) {
        var v23075 = funcDecl$$31.classDecl;
        var v19238 = v23075.type;
        var v13442 = v19238.instanceType;
        var v3448 = v13442.typeFlags;
        var v13443 = TypeScript$$25.TypeFlags;
        var v3449 = v13443.HasBaseType;
        var hasBaseType = TypeScript$$25.hasFlag(v3448, v3449);
        var v3450 = !hasBaseType;
        var v13446 = !v3450;
        if (v13446) {
          var v24936 = funcDecl$$31.classDecl;
          var v23076 = v24936.type;
          var v19239 = v23076.instanceType;
          var v13444 = v19239.typeFlags;
          var v19240 = TypeScript$$25.TypeFlags;
          var v13445 = v19240.HasBaseTypeOfObject;
          v3450 = TypeScript$$25.hasFlag(v13444, v13445);
        }
        var noSuperCallAllowed = v3450;
        var v13447 = funcDecl$$31.classDecl;
        var v3451 = v13447.varFlags;
        var v13448 = TypeScript$$25.VarFlags;
        var v3452 = v13448.ClassSuperMustBeFirstCallInConstructor;
        var superCallMustBeFirst = TypeScript$$25.hasFlag(v3451, v3452);
        var v13449 = noSuperCallAllowed;
        if (v13449) {
          v13449 = this.classConstructorHasSuperCall(funcDecl$$31);
        }
        var v3458 = v13449;
        if (v3458) {
          var v13450 = this.checker;
          var v3453 = v13450.errorReporter;
          v3453.simpleError(funcDecl$$31, "Calls to 'super' constructor are not allowed in classes that either inherit directly from 'Object' or have no base class");
        } else {
          if (hasBaseType) {
            if (superCallMustBeFirst) {
              var v23077 = funcDecl$$31.bod;
              var v19241 = !v23077;
              var v23079 = !v19241;
              if (v23079) {
                var v25740 = funcDecl$$31.bod;
                var v24937 = v25740.members;
                var v23078 = v24937.length;
                v19241 = !v23078;
              }
              var v13451 = v19241;
              var v19243 = !v13451;
              if (v19243) {
                var v26355 = funcDecl$$31.bod;
                var v26266 = v26355.members;
                var v26095 = v26266[0];
                var v25741 = v26095.nodeType;
                var v26096 = TypeScript$$25.NodeType;
                var v25742 = v26096.Call;
                var v24938 = v25741 == v25742;
                if (v24938) {
                  var v26399 = funcDecl$$31.bod;
                  var v26356 = v26399.members;
                  var v26267 = v26356[0];
                  var v26097 = v26267.target;
                  var v25743 = v26097.nodeType;
                  var v26098 = TypeScript$$25.NodeType;
                  var v25744 = v26098.Super;
                  v24938 = v25743 == v25744;
                }
                var v23080 = v24938;
                var v24940 = !v23080;
                if (v24940) {
                  var v26357 = funcDecl$$31.bod;
                  var v26268 = v26357.flags;
                  var v26358 = TypeScript$$25.ASTFlags;
                  var v26269 = v26358.StrictMode;
                  var v26099 = TypeScript$$25.hasFlag(v26268, v26269);
                  if (v26099) {
                    var v26400 = funcDecl$$31.bod;
                    var v26359 = v26400.members;
                    var v26270 = v26359.length;
                    v26099 = v26270 > 1;
                  }
                  var v25745 = v26099;
                  if (v25745) {
                    var v26401 = funcDecl$$31.bod;
                    var v26360 = v26401.members;
                    var v26271 = v26360[1];
                    var v26100 = v26271.nodeType;
                    var v26272 = TypeScript$$25.NodeType;
                    var v26101 = v26272.Call;
                    v25745 = v26100 == v26101;
                  }
                  var v24939 = v25745;
                  if (v24939) {
                    var v26402 = funcDecl$$31.bod;
                    var v26361 = v26402.members;
                    var v26273 = v26361[1];
                    var v26102 = v26273.target;
                    var v25746 = v26102.nodeType;
                    var v26103 = TypeScript$$25.NodeType;
                    var v25747 = v26103.Super;
                    v24939 = v25746 == v25747;
                  }
                  v23080 = v24939;
                }
                var v19242 = v23080;
                v13451 = !v19242;
              }
              var v3455 = v13451;
              if (v3455) {
                var v13452 = this.checker;
                var v3454 = v13452.errorReporter;
                v3454.simpleError(funcDecl$$31, "If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor");
              }
            } else {
              var v13453 = this.classConstructorHasSuperCall(funcDecl$$31);
              var v3457 = !v13453;
              if (v3457) {
                var v13454 = this.checker;
                var v3456 = v13454.errorReporter;
                v3456.simpleError(funcDecl$$31, "Constructors for derived classes must contain a call to the class's 'super' constructor");
              }
            }
          }
        }
      }
      var v13455 = funcDecl$$31.isMethod();
      if (v13455) {
        var v19244 = funcDecl$$31.type;
        v13455 = v19244.enclosingType;
      }
      var v3464 = v13455;
      if (v3464) {
        var enclosingClassNode = null;
        var v25748 = funcDecl$$31.type;
        var v24941 = v25748.enclosingType;
        var v23081 = v24941.symbol;
        var v19245 = v23081.declAST;
        var v13456 = v19245.nodeType;
        var v19246 = TypeScript$$25.NodeType;
        var v13457 = v19246.FuncDecl;
        var v3463 = v13456 == v13457;
        if (v3463) {
          var v23082 = funcDecl$$31.type;
          var v19247 = v23082.enclosingType;
          var v13458 = v19247.symbol;
          var v3460 = v13458.declAST;
          enclosingClassNode = v3460.classDecl;
        } else {
          var v25749 = funcDecl$$31.type;
          var v24942 = v25749.enclosingType;
          var v23083 = v24942.symbol;
          var v19248 = v23083.declAST;
          var v13459 = v19248.nodeType;
          var v19249 = TypeScript$$25.NodeType;
          var v13460 = v19249.ClassDeclaration;
          var v3462 = v13459 == v13460;
          if (v3462) {
            var v19250 = funcDecl$$31.type;
            var v13461 = v19250.enclosingType;
            var v3461 = v13461.symbol;
            enclosingClassNode = v3461.declAST;
          }
        }
        if (enclosingClassNode) {
          this.thisClassNode = enclosingClassNode;
        }
      }
      var v3469 = fnType.enclosingType;
      if (v3469) {
        var v3465 = fnType.symbol;
        var enclosingSym = v3465.container;
        var v19251 = enclosingSym;
        if (v19251) {
          v19251 = enclosingSym.isType();
        }
        var v13462 = v19251;
        if (v13462) {
          var v19252 = enclosingSym.getType();
          v13462 = v19252.isClass();
        }
        var v3466 = v13462;
        if (v3466) {
          enclosingSym = enclosingSym.container;
        }
        var v19253 = enclosingSym;
        if (v19253) {
          v19253 = enclosingSym.declAST;
        }
        var v13463 = v19253;
        if (v13463) {
          var v23084 = enclosingSym.declAST;
          var v19254 = v23084.nodeType;
          var v23085 = TypeScript$$25.NodeType;
          var v19255 = v23085.ModuleDeclaration;
          v13463 = v19254 == v19255;
        }
        var v3468 = v13463;
        if (v3468) {
          var v3467 = this.checker;
          v3467.currentModDecl = enclosingSym.declAST;
        }
      }
      var v13464 = funcDecl$$31.unitIndex;
      var v3473 = v13464 > 0;
      if (v3473) {
        var v19256 = this.checker;
        var v13465 = v19256.units;
        if (v13465) {
          var v19257 = funcDecl$$31.unitIndex;
          var v24943 = this.checker;
          var v23086 = v24943.units;
          var v19258 = v23086.length;
          v13465 = v19257 < v19258;
        }
        var v3472 = v13465;
        if (v3472) {
          var v3470 = this.checker;
          var v19259 = this.checker;
          var v13466 = v19259.units;
          var v13467 = funcDecl$$31.unitIndex;
          v3470.locationInfo = v13466[v13467];
        } else {
          var v3471 = this.checker;
          v3471.locationInfo = TypeScript$$25.unknownLocationInfo;
        }
      }
      var v3474 = fnType.enclosingType;
      if (v3474) {
        this.thisType = fnType.enclosingType;
      } else {
        this.thisType = prevThisType;
      }
      var v3475 = signature$$10.parameters;
      var paramLen$$4 = v3475.length;
      var v23087 = funcDecl$$31.isConstructor;
      var v19260 = !v23087;
      if (v19260) {
        v19260 = funcDecl$$31.bod;
      }
      var v13468 = v19260;
      if (v13468) {
        var v19261 = funcDecl$$31.isSignature();
        v13468 = !v19261;
      }
      var v3524 = v13468;
      if (v3524) {
        var tmpParamScope = this.scope;
        ssb = this.scope;
        var v19262 = funcDecl$$31.isMethod();
        var v13469 = !v19262;
        if (v13469) {
          var v19263 = funcDecl$$31.returnTypeAnnotation;
          v13469 = v19263 == null;
        }
        var v3493 = v13469;
        if (v3493) {
          var v19264 = prevScope$$4;
          if (v19264) {
            v19264 = funcDecl$$31.name;
          }
          var v13470 = v19264;
          if (v13470) {
            var v23088 = funcDecl$$31.name;
            var v19265 = v23088.isMissing();
            v13470 = !v19265;
          }
          var v3480 = v13470;
          if (v3480) {
            var v13471 = funcDecl$$31.name;
            var v3476 = v13471.text;
            var considerSym = prevScope$$4.findAmbient(v3476, false, false);
            var v19266 = considerSym;
            if (v19266) {
              v19266 = considerSym.declAST;
            }
            var v13472 = v19266;
            if (v13472) {
              var v19267 = considerSym.declAST;
              v13472 = v19267.type;
            }
            var v3479 = v13472;
            if (v3479) {
              var v3477 = this.checker;
              var v13473 = considerSym.declAST;
              var v3478 = v13473.type;
              v3477.setContextualType(v3478, false);
            }
          }
          var v13474 = this.checker;
          var v3492 = v13474.hasTargetType();
          if (v3492) {
            var v3481 = this.checker;
            var candidateTypeContext = v3481.currentContextualTypeContext;
            var candidateType$$1 = candidateTypeContext.contextualType;
            var v13475 = this.checker;
            var v3491 = v13475.canContextuallyTypeFunction(candidateType$$1, funcDecl$$31, true);
            if (v3491) {
              var v3482;
              var v13476 = candidateType$$1.construct;
              if (v13476) {
                v3482 = candidateType$$1.construct;
              } else {
                v3482 = candidateType$$1.call;
              }
              var candidateSigs$$1 = v3482;
              var v3483 = candidateSigs$$1.signatures;
              candidateTypeContext.targetSig = v3483[0];
              var v3484 = candidateTypeContext.targetSig;
              var candidateParams = v3484.parameters;
              targetParams = candidateParams;
              var v13477 = candidateTypeContext.targetSig;
              var v3485 = v13477.returnType;
              targetReturnType$$1 = v3485.type;
              var v13478 = candidateTypeContext.targetSig;
              var v3488 = v13478.declAST;
              if (v3488) {
                var v19268 = candidateTypeContext.targetSig;
                var v13479 = v19268.declAST;
                var v3487 = v13479.isConstructor;
                if (v3487) {
                  funcDecl$$31.isTargetTypedAsMethod = true;
                } else {
                  var v19269 = candidateTypeContext.targetSig;
                  var v13480 = v19269.declAST;
                  var v3486 = v13480.isMethod();
                  if (v3486) {
                    funcDecl$$31.isTargetTypedAsMethod = true;
                  }
                }
              }
              fgSym$$4.type = candidateTypeContext.contextualType;
              acceptedContextualType = true;
            } else {
              var v13481 = candidateType$$1;
              if (v13481) {
                v13481 = funcDecl$$31.isAccessor();
              }
              var v3490 = v13481;
              if (v3490) {
                accessorType = candidateType$$1;
                candidateTypeContext.targetAccessorType = accessorType;
              } else {
                var v3489 = this.checker;
                v3489.killCurrentContextualType();
              }
            }
          }
        }
        var paramTable = ssb.valueMembers;
        var v3494 = TypeScript$$25.SymbolScopeBuilder;
        var v26517 = new v3494(paramTable, null, null, null, prevScope$$4, container$$21);
        this.scope = v26517;
        var p$$1 = 0;
        var v3507 = p$$1 < paramLen$$4;
        for (;v3507;) {
          var v3495 = signature$$10.parameters;
          var symbol$$21 = v3495[p$$1];
          var ast$$106 = symbol$$21.declAST;
          var v19270 = this.checker;
          var v13482 = v19270.hasTargetType();
          if (v13482) {
            var v19271 = targetParams;
            if (v19271) {
              var v26104 = this.checker;
              var v25750 = v26104.currentContextualTypeContext;
              var v24944 = v25750.targetSig;
              var v23089 = v24944.hasVariableArgList;
              var v24946 = !v23089;
              if (v24946) {
                var v24945 = targetParams.length;
                v23089 = p$$1 < v24945;
              }
              v19271 = v23089;
            }
            v13482 = v19271;
          }
          var v3502 = v13482;
          if (v3502) {
            var v3496 = this.checker;
            candidateTypeContext = v3496.currentContextualTypeContext;
            var v3497 = candidateTypeContext.targetSig;
            var hasVarArgList = v3497.hasVariableArgList;
            var v3498 = ast$$106;
            var v13483;
            var v23090 = hasVarArgList;
            if (v23090) {
              var v25751 = targetParams.length;
              var v24947 = v25751 - 1;
              v23090 = p$$1 >= v24947;
            }
            var v19274 = v23090;
            if (v19274) {
              var v25752 = targetParams.length;
              var v24948 = v25752 - 1;
              var v23091 = targetParams[v24948];
              var v19272 = v23091.getType();
              v13483 = v19272.elementType;
            } else {
              var v19273 = targetParams[p$$1];
              v13483 = v19273.getType();
            }
            v3498.type = v13483;
            var v3499 = ast$$106.sym;
            var v3500 = ast$$106.type;
            v3499.setType(v3500);
            var v3501 = ast$$106.sym;
            var v13484 = this.checker;
            var v26518 = v13484.getTypeCheckFinishedStatus();
            v3501.typeCheckStatus = v26518;
          } else {
            this.typeCheck(ast$$106);
          }
          var v3503 = isSetter$$4 && accessorType;
          if (v3503) {
            ast$$106 = this.cast(ast$$106, accessorType);
          }
          symbol$$21.container = container$$21;
          var v3504 = symbol$$21.getType();
          this.checkTypePrivacy(v3504, container$$21, v1062);
          var v3505 = paramTable.publicMembers;
          var v3506 = symbol$$21.name;
          v3505.add(v3506, symbol$$21);
          p$$1++;
          v3507 = p$$1 < paramLen$$4;
        }
        this.scope = tmpParamScope;
      } else {
        var v3508 = funcDecl$$31.arguments;
        this.typeCheck(v3508);
        p$$1 = 0;
        var v3514 = p$$1 < paramLen$$4;
        for (;v3514;) {
          var v23092 = signature$$10.parameters;
          var v19275 = v23092[p$$1];
          var v13485 = v19275.parameter;
          var v3509 = v13485.typeLink;
          var v23093 = funcDecl$$31.arguments;
          var v19276 = v23093.members;
          var v13486 = v19276[p$$1];
          v3509.type = v13486.type;
          var v19277 = signature$$10.parameters;
          var v13487 = v19277[p$$1];
          var v3510 = v13487.getType();
          this.checkTypePrivacy(v3510, container$$21, v1063);
          var v23094 = funcDecl$$31.arguments;
          var v19278 = v23094.members;
          var v13488 = v19278[p$$1];
          var v3513 = v13488.parameterPropertySym;
          if (v3513) {
            var v23095 = funcDecl$$31.arguments;
            var v19279 = v23095.members;
            var v13489 = v19279[p$$1];
            var v3511 = v13489.parameterPropertySym;
            var v23096 = funcDecl$$31.arguments;
            var v19280 = v23096.members;
            var v13490 = v19280[p$$1];
            var v3512 = v13490.type;
            v3511.setType(v3512);
          }
          p$$1++;
          v3514 = p$$1 < paramLen$$4;
        }
        var v13491 = funcDecl$$31.fncFlags;
        var v19281 = TypeScript$$25.FncFlags;
        var v13492 = v19281.IndexerMember;
        var v3523 = v13491 & v13492;
        if (v3523) {
          var v13493 = !paramLen$$4;
          var v19282 = !v13493;
          if (v19282) {
            v13493 = paramLen$$4 > 1;
          }
          var v3522 = v13493;
          if (v3522) {
            var v13494 = this.checker;
            var v3515 = v13494.errorReporter;
            v3515.simpleError(funcDecl$$31, "Index signatures may take one and only one parameter");
          } else {
            var v24949 = funcDecl$$31.arguments;
            var v23097 = v24949.members;
            var v19283 = v23097[0];
            var v13495 = v19283.type;
            var v19284 = this.checker;
            var v13496 = v19284.numberType;
            var v3521 = v13495 == v13496;
            if (v3521) {
              var v3516 = fnType.index;
              var v19285 = v3516.flags;
              var v23098 = TypeScript$$25.SignatureFlags;
              var v19286 = v23098.IsNumberIndexer;
              v3516.flags = v19285 | v19286;
            } else {
              var v24950 = funcDecl$$31.arguments;
              var v23099 = v24950.members;
              var v19287 = v23099[0];
              var v13497 = v19287.type;
              var v19288 = this.checker;
              var v13498 = v19288.stringType;
              var v3520 = v13497 == v13498;
              if (v3520) {
                var v3517 = fnType.index;
                var v19289 = v3517.flags;
                var v23100 = TypeScript$$25.SignatureFlags;
                var v19290 = v23100.IsStringIndexer;
                v3517.flags = v19289 | v19290;
              } else {
                var v13499 = this.checker;
                var v3518 = v13499.errorReporter;
                var v19291 = funcDecl$$31.arguments;
                var v13500 = v19291.members;
                var v3519 = v13500[0];
                v3518.simpleError(v3519, "Index signatures may only take 'string' or 'number' as their parameter");
              }
            }
          }
        }
      }
      var v13501 = funcDecl$$31.bod;
      if (v13501) {
        var v19292 = funcDecl$$31.isSignature();
        v13501 = !v19292;
      }
      var v3556 = v13501;
      if (v3556) {
        var v13502 = funcDecl$$31.isConstructor;
        var v3533 = !v13502;
        if (v3533) {
          this.addFormals(container$$21, signature$$10, funcTable$$1);
        } else {
          var v13503 = funcDecl$$31.type;
          var v3525 = v13503.symbol;
          var v3526 = funcDecl$$31.arguments;
          var v13504 = funcDecl$$31.fncFlags;
          var v19293 = TypeScript$$25.FncFlags;
          var v13505 = v19293.ClassMethod;
          var v3527 = TypeScript$$25.hasFlag(v13504, v13505);
          this.addConstructorLocalArgs(v3525, v3526, funcTable$$1, v3527);
          var v13506 = this.thisClassNode;
          if (v13506) {
            var v19294 = this.thisClassNode;
            v13506 = v19294.extendsList;
          }
          var v3532 = v13506;
          if (v3532) {
            var tmpScope = this.scope;
            var v3528 = TypeScript$$25.ScopedMembers;
            var funcMembers$$1 = new v3528(funcTable$$1);
            var v3529 = TypeScript$$25.FilteredSymbolScopeBuilder;
            var v13507 = funcDecl$$31.type;
            var v3530 = v13507.symbol;
            var v26519 = new v3529(funcMembers$$1, prevScope$$4, v3530, v1064);
            this.scope = v26519;
            var v13508 = this.thisClassNode;
            var v3531 = v13508.extendsList;
            this.typeCheckBaseCalls(v3531);
            this.scope = tmpScope;
          }
        }
        var v3534 = this.checker;
        var prevMod = v3534.currentModDecl;
        var v23101 = funcDecl$$31.type;
        if (v23101) {
          var v24951 = funcDecl$$31.type;
          v23101 = v24951.symbol;
        }
        var v19295 = v23101;
        if (v19295) {
          var v23102 = funcDecl$$31.isMethod();
          v19295 = !v23102;
        }
        var v13509 = v19295;
        if (v13509) {
          var v23103 = funcDecl$$31.type;
          var v19296 = v23103.symbol;
          v13509 = v19296.declModule;
        }
        var v3536 = v13509;
        if (v3536) {
          var v3535 = this.checker;
          var v19297 = funcDecl$$31.type;
          var v13510 = v19297.symbol;
          v3535.currentModDecl = v13510.declModule;
        }
        if (acceptedContextualType) {
          var v3537 = this.checker;
          var v13511 = this.checker;
          var v3538 = v13511.inProvisionalTypecheckMode();
          v3537.setContextualType(null, v3538);
        }
        var v3539 = funcDecl$$31.bod;
        this.typeCheck(v3539);
        if (acceptedContextualType) {
          var v3540 = this.checker;
          v3540.unsetContextualType();
        }
        var v3541 = this.checker;
        v3541.currentModDecl = prevMod;
        var v13512 = this.checker;
        var v3548 = v13512.checkControlFlow;
        if (v3548) {
          var cfg = funcDecl$$31.buildControlFlow();
          var v13513 = this.checker;
          var v3543 = v13513.printControlFlowGraph;
          if (v3543) {
            var v19298 = this.checker;
            var v13514 = v19298.errorReporter;
            var v3542 = v13514.outfile;
            cfg.print(v3542);
          }
          var v13515 = this.checker;
          var v3544 = v13515.errorReporter;
          cfg.reportUnreachable(v3544);
          var v13516 = this.checker;
          var v3547 = v13516.checkControlFlowUseDef;
          if (v3547) {
            var v13517 = this.checker;
            var v3545 = v13517.errorReporter;
            var v13518 = funcDecl$$31.type;
            var v3546 = v13518.symbol;
            cfg.useDef(v3545, v3546);
          }
        }
        var v3555 = funcDecl$$31.isConstructor;
        if (v3555) {
          var fns$$1 = funcDecl$$31.scopes;
          var v3549 = fns$$1.members;
          var fnsLen$$1 = v3549.length;
          var freeVars$$2;
          var sym$$38;
          var j$$15 = 0;
          var v3554 = j$$15 < fnsLen$$1;
          for (;v3554;) {
            var v3550 = fns$$1.members;
            var fn$$9 = v3550[j$$15];
            var v13519 = fn$$9.isSignature();
            var v3553 = !v13519;
            if (v3553) {
              var v19299 = fn$$9.fncFlags;
              var v23104 = TypeScript$$25.FncFlags;
              var v19300 = v23104.Method;
              var v13520 = TypeScript$$25.hasFlag(v19299, v19300);
              if (v13520) {
                var v23105 = fn$$9.fncFlags;
                var v24952 = TypeScript$$25.FncFlags;
                var v23106 = v24952.Static;
                var v19301 = TypeScript$$25.hasFlag(v23105, v23106);
                v13520 = !v19301;
              }
              var v3552 = v13520;
              if (v3552) {
                var v13521 = funcDecl$$31.type;
                var v3551 = v13521.symbol;
                this.checkPromoteFreeVars(fn$$9, v3551);
              }
            }
            j$$15++;
            v3554 = j$$15 < fnsLen$$1;
          }
        }
      }
      this.scope = prevScope$$4;
      this.thisFnc = prevFnc;
      this.thisClassNode = prevClassNode;
      this.enclosingFncIsMethod = prevMethodStatus$$2;
      this.thisType = prevThisType;
      var v3557 = this.checker;
      v3557.locationInfo = prevLocationInfo$$2;
      var v3558 = this.checker;
      v3558.currentModDecl = prevModDecl$$1;
      var v3559 = signature$$10;
      var v13522 = this.checker;
      var v26520 = v13522.getTypeCheckFinishedStatus();
      v3559.typeCheckStatus = v26520;
      var v3567 = funcDecl$$31.returnTypeAnnotation;
      if (v3567) {
        var v13523 = funcDecl$$31.returnTypeAnnotation;
        var v3560 = v13523.type;
        var v3561 = funcDecl$$31.returnTypeAnnotation;
        this.checkForVoidConstructor(v3560, v3561);
        var v19302 = signature$$10.returnType;
        var v13524 = v19302.type;
        var v3565 = v13524 == null;
        if (v3565) {
          var v3562 = this.checker;
          var v3563 = this.scope;
          var v3564 = signature$$10.returnType;
          v3562.resolveTypeLink(v3563, v3564, false);
        }
      } else {
        if (targetReturnType$$1) {
          var v3566 = signature$$10.returnType;
          v3566.type = targetReturnType$$1;
        }
      }
      var v23107 = fgSym$$4.flags;
      var v24953 = TypeScript$$25.SymbolFlags;
      var v23108 = v24953.RecursivelyReferenced;
      var v19303 = v23107 & v23108;
      var v13525 = !v19303;
      if (v13525) {
        var v23109 = funcDecl$$31.returnStatementsWithExpressions;
        var v19304 = v23109.length;
        v13525 = v19304 > 0;
      }
      var v3575 = v13525;
      if (v3575) {
        var collection$$2 = {getLength:v1065, setTypeAtIndex:v1066, getTypeAtIndex:v1067};
        var v13526 = funcDecl$$31.returnStatementsWithExpressions;
        var v3568 = v13526[0];
        var bestCommonReturnType = v3568.type;
        var v3569 = this.checker;
        bestCommonReturnType = v3569.findBestCommonType(bestCommonReturnType, null, collection$$2, true);
        if (bestCommonReturnType) {
          var v3570 = signature$$10.returnType;
          var v13527 = this.checker;
          var v26521 = v13527.widenType(bestCommonReturnType);
          v3570.type = v26521;
        } else {
          var i$$100 = 0;
          var v19305 = funcDecl$$31.returnStatementsWithExpressions;
          var v13528 = v19305.length;
          var v3573 = i$$100 < v13528;
          for (;v3573;) {
            var v13529 = this.checker;
            var v3571 = v13529.errorReporter;
            var v13530 = funcDecl$$31.returnStatementsWithExpressions;
            var v3572 = v13530[i$$100];
            v3571.simpleError(v3572, "Incompatible return type");
            i$$100++;
            var v19306 = funcDecl$$31.returnStatementsWithExpressions;
            var v13531 = v19306.length;
            v3573 = i$$100 < v13531;
          }
          var v3574 = signature$$10.returnType;
          v3574.type = this.anyType;
        }
      }
      var onlyHasThrow = false;
      var v19307 = signature$$10.returnType;
      var v13532 = v19307.type;
      var v3590 = v13532 == null;
      if (v3590) {
        var v13533 = funcDecl$$31.fncFlags;
        var v19308 = TypeScript$$25.FncFlags;
        var v13534 = v19308.HasReturnExpression;
        var v3580 = TypeScript$$25.hasFlag(v13533, v13534);
        if (v3580) {
          var v19309 = this.checker;
          var v13535 = v19309.styleSettings;
          var v3577 = v13535.implicitAny;
          if (v3577) {
            var v13536 = this.checker;
            var v3576 = v13536.errorReporter;
            v3576.styleError(funcDecl$$31, "type implicitly set to 'any'");
          }
          var v3578 = signature$$10.returnType;
          v3578.type = this.anyType;
        } else {
          var v3579 = signature$$10.returnType;
          v3579.type = this.voidType;
        }
      } else {
        var v23110 = signature$$10.returnType;
        var v19310 = v23110.type;
        var v19311 = this.nullType;
        var v13537 = v19310 == v19311;
        var v19314 = !v13537;
        if (v19314) {
          var v23111 = signature$$10.returnType;
          var v19312 = v23111.type;
          var v23112 = this.checker;
          var v19313 = v23112.undefinedType;
          v13537 = v19312 == v19313;
        }
        var v3589 = v13537;
        if (v3589) {
          var v3581 = signature$$10.returnType;
          v3581.type = this.anyType;
        } else {
          var v24954 = signature$$10.returnType;
          var v23113 = v24954.type;
          var v23114 = this.voidType;
          var v19315 = v23113 != v23114;
          if (v19315) {
            var v24955 = signature$$10.returnType;
            var v23115 = v24955.type;
            var v24956 = this.checker;
            var v23116 = v24956.undefinedType;
            v19315 = v23115 != v23116;
          }
          var v13538 = v19315;
          if (v13538) {
            var v23117 = signature$$10.returnType;
            var v19316 = v23117.type;
            var v19317 = this.anyType;
            v13538 = v19316 != v19317;
          }
          var v3588 = v13538;
          if (v3588) {
            var v24957 = funcDecl$$31.isSignature();
            var v23118 = !v24957;
            if (v23118) {
              var v24958 = funcDecl$$31.isConstructor;
              v23118 = !v24958;
            }
            var v19318 = v23118;
            if (v19318) {
              var v24959 = funcDecl$$31.fncFlags;
              var v25753 = TypeScript$$25.FncFlags;
              var v24960 = v25753.HasReturnExpression;
              var v23119 = TypeScript$$25.hasFlag(v24959, v24960);
              v19318 = !v23119;
            }
            var v13539 = v19318;
            if (v13539) {
              var v23120 = funcDecl$$31.fncFlags;
              var v24961 = TypeScript$$25.FncFlags;
              var v23121 = v24961.IsFatArrowFunction;
              var v19319 = TypeScript$$25.hasFlag(v23120, v23121);
              v13539 = !v19319;
            }
            var v3586 = v13539;
            if (v3586) {
              var v23122 = funcDecl$$31.bod;
              var v19320 = v23122.members;
              var v13540 = v19320.length;
              var v3582 = v13540 > 0;
              if (v3582) {
                var v24962 = funcDecl$$31.bod;
                var v23123 = v24962.members;
                var v19321 = v23123[0];
                var v13541 = v19321.nodeType;
                var v19322 = TypeScript$$25.NodeType;
                var v13542 = v19322.Throw;
                v3582 = v13541 == v13542;
              }
              onlyHasThrow = v3582;
              var v3585 = !onlyHasThrow;
              if (v3585) {
                var v13543 = this.checker;
                var v3583 = v13543.errorReporter;
                var v13544 = funcDecl$$31.returnTypeAnnotation;
                var v19323 = !v13544;
                if (v19323) {
                  v13544 = funcDecl$$31;
                }
                var v3584 = v13544;
                v3583.simpleError(v3584, "Function declared a non-void return type, but has no return expression");
              }
            }
            var v13545 = signature$$10.returnType;
            var v3587 = v13545.type;
            this.checkTypePrivacy(v3587, container$$21, v1068);
          }
        }
      }
      var v3603 = funcDecl$$31.accessorSymbol;
      if (v3603) {
        var v3591 = funcDecl$$31.accessorSymbol;
        accessorType = v3591.getType();
        var v19324 = !onlyHasThrow;
        if (v19324) {
          var v23124 = funcDecl$$31.fncFlags;
          var v24963 = TypeScript$$25.FncFlags;
          var v23125 = v24963.GetAccessor;
          v19324 = TypeScript$$25.hasFlag(v23124, v23125);
        }
        var v13546 = v19324;
        if (v13546) {
          var v23126 = funcDecl$$31.fncFlags;
          var v24964 = TypeScript$$25.FncFlags;
          var v23127 = v24964.HasReturnExpression;
          var v19325 = TypeScript$$25.hasFlag(v23126, v23127);
          v13546 = !v19325;
        }
        var v3593 = v13546;
        if (v3593) {
          var v13547 = this.checker;
          var v3592 = v13547.errorReporter;
          v3592.simpleError(funcDecl$$31, "Getters must return a value");
        }
        if (accessorType) {
          var v23128 = funcDecl$$31.fncFlags;
          var v24965 = TypeScript$$25.FncFlags;
          var v23129 = v24965.GetAccessor;
          var v19326 = TypeScript$$25.hasFlag(v23128, v23129);
          if (v19326) {
            var v24966 = signature$$10.returnType;
            var v23130 = v24966.type;
            v19326 = accessorType != v23130;
          }
          var v13548 = v19326;
          var v19328 = !v13548;
          if (v19328) {
            var v25754 = funcDecl$$31.arguments;
            var v24967 = v25754.members;
            var v23131 = v24967.length;
            var v19327 = v23131 > 0;
            if (v19327) {
              var v26105 = funcDecl$$31.arguments;
              var v25755 = v26105.members;
              var v24968 = v25755[0];
              var v23132 = v24968.type;
              v19327 = accessorType != v23132;
            }
            v13548 = v19327;
          }
          var v3595 = v13548;
          if (v3595) {
            var v13549 = this.checker;
            var v3594 = v13549.errorReporter;
            v3594.simpleError(funcDecl$$31, "Getter and setter types do not agree");
          }
        } else {
          var v13550 = funcDecl$$31.fncFlags;
          var v19329 = TypeScript$$25.FncFlags;
          var v13551 = v19329.GetAccessor;
          var v3602 = TypeScript$$25.hasFlag(v13550, v13551);
          if (v3602) {
            var v3596 = funcDecl$$31.accessorSymbol;
            var v13552 = signature$$10.returnType;
            var v3597 = v13552.type;
            v3596.setType(v3597);
          } else {
            var v23133 = funcDecl$$31.arguments;
            var v19330 = v23133.members;
            var v13553 = v19330.length;
            var v3601 = v13553 != 1;
            if (v3601) {
              var v13554 = this.checker;
              var v3598 = v13554.errorReporter;
              v3598.simpleError(funcDecl$$31, "Setters may have one and only one argument");
            } else {
              var v3599 = funcDecl$$31.accessorSymbol;
              var v23134 = funcDecl$$31.arguments;
              var v19331 = v23134.members;
              var v13555 = v19331[0];
              var v3600 = v13555.type;
              v3599.setType(v3600);
            }
          }
        }
      }
      this.typeCheckOverloadSignatures(fnType, funcDecl$$31);
      return funcDecl$$31;
    }
    function v1061(funcDecl$$30, signature$$9, typeName$$7, isModuleName$$6) {
      var reportOnFuncDecl = false;
      var v19332 = funcDecl$$30.returnTypeAnnotation;
      var v13556 = v19332 != null;
      if (v13556) {
        var v23135 = funcDecl$$30.returnTypeAnnotation;
        var v19333 = v23135.type;
        var v23136 = signature$$9.returnType;
        var v19334 = v23136.type;
        v13556 = v19333 == v19334;
      }
      var v3605 = v13556;
      if (v3605) {
        var v3604 = funcDecl$$30.returnTypeAnnotation;
        this.returnTypePrivacyError(v3604, funcDecl$$30, typeName$$7, isModuleName$$6);
      }
      var i$$99 = 0;
      var v19335 = funcDecl$$30.returnStatementsWithExpressions;
      var v13557 = v19335.length;
      var v3608 = i$$99 < v13557;
      for (;v3608;) {
        var v23137 = funcDecl$$30.returnStatementsWithExpressions;
        var v19336 = v23137[i$$99];
        var v13558 = v19336.type;
        var v19337 = signature$$9.returnType;
        var v13559 = v19337.type;
        var v3607 = v13558 == v13559;
        if (v3607) {
          var v13560 = funcDecl$$30.returnStatementsWithExpressions;
          var v3606 = v13560[i$$99];
          this.returnTypePrivacyError(v3606, funcDecl$$30, typeName$$7, isModuleName$$6);
        } else {
          reportOnFuncDecl = true;
        }
        i$$99++;
        var v19338 = funcDecl$$30.returnStatementsWithExpressions;
        var v13561 = v19338.length;
        v3608 = i$$99 < v13561;
      }
      if (reportOnFuncDecl) {
        this.returnTypePrivacyError(funcDecl$$30, funcDecl$$30, typeName$$7, isModuleName$$6);
      }
      return;
    }
    function v1060(astError, funcDecl$$29, typeName$$6, isModuleName$$5) {
      var v3609 = funcDecl$$29.isAccessor();
      if (v3609) {
        var v13562 = funcDecl$$29.fncFlags;
        var v19339 = TypeScript$$25.FncFlags;
        var v13563 = v19339.GetAccessor;
        v3609 = TypeScript$$25.hasFlag(v13562, v13563);
      }
      var isGetter$$3 = v3609;
      var v3610 = funcDecl$$29.isAccessor();
      if (v3610) {
        var v13564 = funcDecl$$29.fncFlags;
        var v19340 = TypeScript$$25.FncFlags;
        var v13565 = v19340.SetAccessor;
        v3610 = TypeScript$$25.hasFlag(v13564, v13565);
      }
      var isSetter$$3 = v3610;
      var v3611 = funcDecl$$29.fncFlags;
      var v13566 = TypeScript$$25.FncFlags;
      var v3612 = v13566.Public;
      var isPublicFunc$$1 = TypeScript$$25.hasFlag(v3611, v3612);
      var v19341 = funcDecl$$29.type;
      var v13567 = v19341.symbol;
      var v13568 = this.checker;
      var v3613 = v13567.getInterfaceDeclFromSymbol(v13568);
      var isContainerInterface$$1 = v3613 != null;
      var typestring$$3 = "";
      if (isModuleName$$5) {
        var quotestring$$3 = "";
        var v13569 = TypeScript$$25.isQuoted(typeName$$6);
        var v3614 = !v13569;
        if (v3614) {
          quotestring$$3 = "'";
        }
        var v13570 = " is using inaccessible module " + quotestring$$3;
        var v3615 = v13570 + typeName$$6;
        typestring$$3 = v3615 + quotestring$$3;
      } else {
        var v3616 = " has or is using private type '" + typeName$$6;
        typestring$$3 = v3616 + "'";
      }
      var v3633 = !isContainerInterface$$1;
      if (v3633) {
        if (isGetter$$3) {
          var v13571 = this.checker;
          var v3617 = v13571.errorReporter;
          var v23138;
          if (isPublicFunc$$1) {
            v23138 = "public";
          } else {
            v23138 = "exported";
          }
          var v19342 = v23138;
          var v13572 = v19342 + " getter return type";
          var v3618 = v13572 + typestring$$3;
          v3617.simpleError(astError, v3618);
        } else {
          var v3621 = !isSetter$$3;
          if (v3621) {
            var v13573 = this.checker;
            var v3619 = v13573.errorReporter;
            var v23139;
            if (isPublicFunc$$1) {
              v23139 = "public";
            } else {
              v23139 = "exported";
            }
            var v19343 = v23139;
            var v13574 = v19343 + " function return type";
            var v3620 = v13574 + typestring$$3;
            v3619.simpleError(astError, v3620);
          }
        }
      } else {
        var v3632 = funcDecl$$29.isConstructMember();
        if (v3632) {
          var v13575 = this.checker;
          var v3622 = v13575.errorReporter;
          var v3623 = "exported interface's constructor return type" + typestring$$3;
          v3622.simpleError(astError, v3623);
        } else {
          var v3631 = funcDecl$$29.isCallMember();
          if (v3631) {
            var v13576 = this.checker;
            var v3624 = v13576.errorReporter;
            var v3625 = "exported interface's call return type" + typestring$$3;
            v3624.simpleError(astError, v3625);
          } else {
            var v3630 = funcDecl$$29.isIndexerMember();
            if (v3630) {
              var v13577 = this.checker;
              var v3626 = v13577.errorReporter;
              var v3627 = "exported interface's indexer return type" + typestring$$3;
              v3626.simpleError(astError, v3627);
            } else {
              var v13578 = this.checker;
              var v3628 = v13578.errorReporter;
              var v3629 = "exported interface's function return type" + typestring$$3;
              v3628.simpleError(astError, v3629);
            }
          }
        }
      }
      return;
    }
    function v1059(funcDecl$$28, p, paramSymbol, typeName$$5, isModuleName$$4) {
      var v3634 = funcDecl$$28.isAccessor();
      if (v3634) {
        var v13579 = funcDecl$$28.fncFlags;
        var v19344 = TypeScript$$25.FncFlags;
        var v13580 = v19344.GetAccessor;
        v3634 = TypeScript$$25.hasFlag(v13579, v13580);
      }
      var isGetter$$2 = v3634;
      var v3635 = funcDecl$$28.isAccessor();
      if (v3635) {
        var v13581 = funcDecl$$28.fncFlags;
        var v19345 = TypeScript$$25.FncFlags;
        var v13582 = v19345.SetAccessor;
        v3635 = TypeScript$$25.hasFlag(v13581, v13582);
      }
      var isSetter$$2 = v3635;
      var v3636 = funcDecl$$28.fncFlags;
      var v13583 = TypeScript$$25.FncFlags;
      var v3637 = v13583.Public;
      var isPublicFunc = TypeScript$$25.hasFlag(v3636, v3637);
      var v19346 = funcDecl$$28.type;
      var v13584 = v19346.symbol;
      var v13585 = this.checker;
      var v3638 = v13584.getInterfaceDeclFromSymbol(v13585);
      var isContainerInterface = v3638 != null;
      var typestring$$2 = "";
      if (isModuleName$$4) {
        var quotestring$$2 = "";
        var v13586 = TypeScript$$25.isQuoted(typeName$$5);
        var v3639 = !v13586;
        if (v3639) {
          quotestring$$2 = "'";
        }
        var v13587 = " is using inaccessible module " + quotestring$$2;
        var v3640 = v13587 + typeName$$5;
        typestring$$2 = v3640 + quotestring$$2;
      } else {
        var v3641 = " has or is using private type '" + typeName$$5;
        typestring$$2 = v3641 + "'";
      }
      var v3665 = !isContainerInterface;
      if (v3665) {
        var v3652 = funcDecl$$28.isConstructor;
        if (v3652) {
          var v13588 = this.checker;
          var v3642 = v13588.errorReporter;
          var v19347 = funcDecl$$28.arguments;
          var v13589 = v19347.members;
          var v3643 = v13589[p];
          var v23140 = paramSymbol.name;
          var v19348 = "exported class's constructor parameter '" + v23140;
          var v13590 = v19348 + "'";
          var v3644 = v13590 + typestring$$2;
          v3642.simpleError(v3643, v3644);
        } else {
          if (isSetter$$2) {
            var v13591 = this.checker;
            var v3645 = v13591.errorReporter;
            var v19349 = funcDecl$$28.arguments;
            var v13592 = v19349.members;
            var v3646 = v13592[p];
            var v25756;
            if (isPublicFunc) {
              v25756 = "public";
            } else {
              v25756 = "exported";
            }
            var v24969 = v25756;
            var v23141 = v24969 + " setter parameter '";
            var v23142 = paramSymbol.name;
            var v19350 = v23141 + v23142;
            var v13593 = v19350 + "'";
            var v3647 = v13593 + typestring$$2;
            v3645.simpleError(v3646, v3647);
          } else {
            var v3651 = !isGetter$$2;
            if (v3651) {
              var v13594 = this.checker;
              var v3648 = v13594.errorReporter;
              var v19351 = funcDecl$$28.arguments;
              var v13595 = v19351.members;
              var v3649 = v13595[p];
              var v25757;
              if (isPublicFunc) {
                v25757 = "public";
              } else {
                v25757 = "exported";
              }
              var v24970 = v25757;
              var v23143 = v24970 + " function parameter '";
              var v23144 = paramSymbol.name;
              var v19352 = v23143 + v23144;
              var v13596 = v19352 + "'";
              var v3650 = v13596 + typestring$$2;
              v3648.simpleError(v3649, v3650);
            }
          }
        }
      } else {
        var v3664 = funcDecl$$28.isConstructMember();
        if (v3664) {
          var v13597 = this.checker;
          var v3653 = v13597.errorReporter;
          var v19353 = funcDecl$$28.arguments;
          var v13598 = v19353.members;
          var v3654 = v13598[p];
          var v23145 = paramSymbol.name;
          var v19354 = "exported interface's constructor parameter '" + v23145;
          var v13599 = v19354 + "'";
          var v3655 = v13599 + typestring$$2;
          v3653.simpleError(v3654, v3655);
        } else {
          var v3663 = funcDecl$$28.isCallMember();
          if (v3663) {
            var v13600 = this.checker;
            var v3656 = v13600.errorReporter;
            var v19355 = funcDecl$$28.arguments;
            var v13601 = v19355.members;
            var v3657 = v13601[p];
            var v23146 = paramSymbol.name;
            var v19356 = "exported interface's call parameter '" + v23146;
            var v13602 = v19356 + "'";
            var v3658 = v13602 + typestring$$2;
            v3656.simpleError(v3657, v3658);
          } else {
            var v13603 = funcDecl$$28.isIndexerMember();
            var v3662 = !v13603;
            if (v3662) {
              var v13604 = this.checker;
              var v3659 = v13604.errorReporter;
              var v19357 = funcDecl$$28.arguments;
              var v13605 = v19357.members;
              var v3660 = v13605[p];
              var v23147 = paramSymbol.name;
              var v19358 = "exported interface's function parameter '" + v23147;
              var v13606 = v19358 + "'";
              var v3661 = v13606 + typestring$$2;
              v3659.simpleError(v3660, v3661);
            }
          }
        }
      }
      return;
    }
    function v1058(sgroup, declSymbol$$4, errorCallback$$6) {
      if (sgroup) {
        var v3666 = sgroup.signatures;
        var len$$47 = v3666.length;
        var i$$98 = 0;
        var v19359 = sgroup.signatures;
        var v13607 = v19359.length;
        var v3675 = i$$98 < v13607;
        for (;v3675;) {
          var v3667 = sgroup.signatures;
          var signature$$8 = v3667[i$$98];
          var v13608 = len$$47 > 1;
          if (v13608) {
            var v19360 = sgroup.definitionSignature;
            v13608 = signature$$8 == v19360;
          }
          var v3668 = v13608;
          if (v3668) {
            i$$98++;
            var v19361 = sgroup.signatures;
            var v13609 = v19361.length;
            v3675 = i$$98 < v13609;
            continue;
          }
          var v3670 = signature$$8.returnType;
          if (v3670) {
            var v13610 = signature$$8.returnType;
            var v3669 = v13610.type;
            this.checkTypePrivacy(v3669, declSymbol$$4, errorCallback$$6);
          }
          var v3671 = signature$$8.parameters;
          var paramLen$$3 = v3671.length;
          var j$$14 = 0;
          var v3674 = j$$14 < paramLen$$3;
          for (;v3674;) {
            var v3672 = signature$$8.parameters;
            var param$$7 = v3672[j$$14];
            var v3673 = param$$7.getType();
            this.checkTypePrivacy(v3673, declSymbol$$4, errorCallback$$6);
            j$$14++;
            v3674 = j$$14 < paramLen$$3;
          }
          i$$98++;
          var v19362 = sgroup.signatures;
          var v13611 = v19362.length;
          v3675 = i$$98 < v13611;
        }
      }
      return;
    }
    function v1057(type$$50, declSymbol$$3, errorCallback$$5) {
      function v1056(key$$43, s$$26, unused) {
        var sym$$37 = s$$26;
        var v19363 = sym$$37.flags;
        var v23148 = TypeScript$$25.SymbolFlags;
        var v19364 = v23148.BuiltIn;
        var v13612 = TypeScript$$25.hasFlag(v19363, v19364);
        var v3677 = !v13612;
        if (v3677) {
          var v3676 = sym$$37.getType();
          _this$$9.checkTypePrivacy(v3676, declSymbol$$3, errorCallback$$5);
        }
        return;
      }
      var _this$$9 = this;
      var v19365 = type$$50;
      if (v19365) {
        var v23149 = type$$50.primitiveTypeClass;
        var v24971 = TypeScript$$25.Primitive;
        var v23150 = v24971.None;
        v19365 = v23149 == v23150;
      }
      var v13613 = v19365;
      var v3678 = !v13613;
      if (v3678) {
        return;
      }
      var v3680 = type$$50.isArray();
      if (v3680) {
        var v3679 = type$$50.elementType;
        return this.checkTypePrivacy(v3679, declSymbol$$3, errorCallback$$5);
      }
      var v23151 = type$$50.symbol;
      if (v23151) {
        var v24972 = type$$50.symbol;
        v23151 = v24972.name;
      }
      var v19366 = v23151;
      if (v19366) {
        var v24973 = type$$50.symbol;
        var v23152 = v24973.name;
        v19366 = v23152 != "_anonymous";
      }
      var v13614 = v19366;
      if (v13614) {
        var v25758 = type$$50.call;
        var v24974 = v25758 == null;
        if (v24974) {
          var v25759 = type$$50.construct;
          v24974 = v25759 == null;
        }
        var v23153 = v24974;
        if (v23153) {
          var v24975 = type$$50.index;
          v23153 = v24975 == null;
        }
        var v19367 = v23153;
        var v23155 = !v19367;
        if (v23155) {
          var v23154 = type$$50.members;
          if (v23154) {
            var v24976 = type$$50.isClass();
            v23154 = !v24976;
          }
          v19367 = v23154;
        }
        v13614 = v19367;
      }
      var v3682 = v13614;
      if (v3682) {
        var v3681 = type$$50.symbol;
        return this.checkSymbolPrivacy(v3681, declSymbol$$3, errorCallback$$5);
      }
      var v3684 = type$$50.members;
      if (v3684) {
        var v13615 = type$$50.members;
        var v3683 = v13615.allMembers;
        v3683.map(v1056, null);
      }
      var v3685 = type$$50.call;
      this.checkSignatureGroupPrivacy(v3685, declSymbol$$3, errorCallback$$5);
      var v3686 = type$$50.construct;
      this.checkSignatureGroupPrivacy(v3686, declSymbol$$3, errorCallback$$5);
      var v3687 = type$$50.index;
      this.checkSignatureGroupPrivacy(v3687, declSymbol$$3, errorCallback$$5);
      return;
    }
    function v1055(typeSymbol$$5, declSymbol$$2, errorCallback$$4) {
      var externalModuleSymbol = null;
      var declSymbolPath = null;
      var v13616 = this.checker;
      var v3695 = typeSymbol$$5.isExternallyVisible(v13616);
      if (v3695) {
        var typeSymbolPath = typeSymbol$$5.pathToRoot();
        declSymbolPath = declSymbol$$2.pathToRoot();
        var typeSymbolLength = typeSymbolPath.length;
        var declSymbolPathLength = declSymbolPath.length;
        var v3693 = typeSymbolLength > 0;
        if (v3693) {
          var v25760 = typeSymbolLength - 1;
          var v24977 = typeSymbolPath[v25760];
          var v23156 = v24977.getType();
          var v19368 = v23156.isModuleType();
          if (v19368) {
            var v24978 = typeSymbolLength - 1;
            var v23157 = typeSymbolPath[v24978];
            v19368 = v23157.isDynamic;
          }
          var v13617 = v19368;
          if (v13617) {
            var v23158 = typeSymbolLength - 1;
            var v19369 = typeSymbolPath[v23158];
            var v23159 = declSymbolPathLength - 1;
            var v19370 = declSymbolPath[v23159];
            v13617 = v19369 != v19370;
          }
          var v3692 = v13617;
          if (v3692) {
            var v3688 = typeSymbolLength - 1;
            externalModuleSymbol = typeSymbolPath[v3688];
          } else {
            var v3691 = typeSymbolLength > 1;
            if (v3691) {
              var v25761 = typeSymbolLength - 2;
              var v24979 = typeSymbolPath[v25761];
              var v23160 = v24979.getType();
              var v19371 = v23160.isModuleType();
              if (v19371) {
                var v24980 = typeSymbolLength - 2;
                var v23161 = typeSymbolPath[v24980];
                v19371 = v23161.isDynamic;
              }
              var v13618 = v19371;
              if (v13618) {
                var v19372 = declSymbolPathLength == 1;
                var v23164 = !v19372;
                if (v23164) {
                  var v24981 = typeSymbolLength - 2;
                  var v23162 = typeSymbolPath[v24981];
                  var v24982 = declSymbolPathLength - 2;
                  var v23163 = declSymbolPath[v24982];
                  v19372 = v23162 != v23163;
                }
                v13618 = v19372;
              }
              var v3690 = v13618;
              if (v3690) {
                var v3689 = typeSymbolLength - 2;
                externalModuleSymbol = typeSymbolPath[v3689];
              }
            }
          }
        }
        var v3694 = externalModuleSymbol == null;
        if (v3694) {
          return;
        }
      }
      var v3696 = this.checker;
      var interfaceDecl$$5 = declSymbol$$2.getInterfaceDeclFromSymbol(v3696);
      var v13619 = interfaceDecl$$5;
      if (v13619) {
        var v23165 = interfaceDecl$$5.varFlags;
        var v24983 = TypeScript$$25.VarFlags;
        var v23166 = v24983.Exported;
        var v19373 = TypeScript$$25.hasFlag(v23165, v23166);
        v13619 = !v19373;
      }
      var v3697 = v13619;
      if (v3697) {
        return;
      }
      var checkVisibilitySymbol = declSymbol$$2;
      var varDecl$$18 = declSymbol$$2.getVarDeclFromSymbol();
      if (varDecl$$18) {
        var v13620 = varDecl$$18.varFlags;
        var v19374 = TypeScript$$25.VarFlags;
        var v13621 = v19374.Private;
        var v3699 = TypeScript$$25.hasFlag(v13620, v13621);
        if (v3699) {
          return;
        } else {
          var v13622 = varDecl$$18.varFlags;
          var v19375 = TypeScript$$25.VarFlags;
          var v13623 = v19375.Public;
          var v3698 = TypeScript$$25.hasFlag(v13622, v13623);
          if (v3698) {
            checkVisibilitySymbol = declSymbol$$2.container;
          }
        }
      }
      var v13624 = this.checker;
      var v3706 = checkVisibilitySymbol.isExternallyVisible(v13624);
      if (v3706) {
        var privateSymbolName = typeSymbol$$5.name;
        var v3704 = externalModuleSymbol != null;
        if (v3704) {
          var prettyName$$2 = externalModuleSymbol.getPrettyNameOfDynamicModule(declSymbolPath);
          var v3703 = prettyName$$2 != null;
          if (v3703) {
            var v3700 = this.currentScript;
            var v3701 = prettyName$$2.symbol;
            var v3702 = this.checker;
            v3700.AddExternallyVisibleImportedSymbol(v3701, v3702);
            return;
          } else {
            privateSymbolName = externalModuleSymbol.prettyName;
          }
        }
        var v13625 = typeSymbol$$5.name;
        var v3705 = v13625 != privateSymbolName;
        errorCallback$$4(privateSymbolName, v3705);
      }
      return;
    }
    function v1054(bases$$5, declSymbol$$1, extendsList$$8) {
      function v1053(typeName$$4, isModuleName$$3) {
        return _this$$8.baseListPrivacyErrorReporter(bases$$5, i$$97, declSymbol$$1, extendsList$$8, typeName$$4, isModuleName$$3);
      }
      var _this$$8 = this;
      if (bases$$5) {
        var v3707 = bases$$5.members;
        var basesLen$$1 = v3707.length;
        var i$$97 = 0;
        var v3710 = i$$97 < basesLen$$1;
        for (;v3710;) {
          var v24984 = bases$$5.members;
          var v23167 = v24984[i$$97];
          var v19376 = v23167.type;
          var v13626 = !v19376;
          var v19379 = !v13626;
          if (v19379) {
            var v24985 = bases$$5.members;
            var v23168 = v24985[i$$97];
            var v19377 = v23168.type;
            var v23169 = this.checker;
            var v19378 = v23169.anyType;
            v13626 = v19377 == v19378;
          }
          var v3708 = v13626;
          if (v3708) {
            i$$97++;
            v3710 = i$$97 < basesLen$$1;
            continue;
          }
          var v23170 = bases$$5.members;
          var v19380 = v23170[i$$97];
          var v13627 = v19380.type;
          var v3709 = v13627.symbol;
          this.checkSymbolPrivacy(v3709, declSymbol$$1, v1053);
          i$$97++;
          v3710 = i$$97 < basesLen$$1;
        }
      }
      return;
    }
    function v1052(bases$$4, i$$96, declSymbol, extendsList$$7, typeName$$3, isModuleName$$2) {
      var v19381 = bases$$4.members;
      var v13628 = v19381[i$$96];
      var v3711 = v13628.type;
      var baseSymbol$$2 = v3711.symbol;
      var v3712;
      var v23171 = declSymbol.declAST;
      var v19382 = v23171.nodeType;
      var v23172 = TypeScript$$25.NodeType;
      var v19383 = v23172.InterfaceDeclaration;
      var v13629 = v19382 == v19383;
      if (v13629) {
        v3712 = "interface";
      } else {
        v3712 = "class";
      }
      var declTypeString = v3712;
      var v3713;
      if (extendsList$$7) {
        v3713 = "extends";
      } else {
        v3713 = "implements";
      }
      var baseListTypeString = v3713;
      var v3714;
      var v23173 = baseSymbol$$2.declAST;
      var v19384 = v23173.nodeType;
      var v23174 = TypeScript$$25.NodeType;
      var v19385 = v23174.InterfaceDeclaration;
      var v13630 = v19384 == v19385;
      if (v13630) {
        v3714 = "interface";
      } else {
        v3714 = "class";
      }
      var baseTypeString = v3714;
      var typestring$$1 = "";
      if (isModuleName$$2) {
        var quotestring$$1 = "";
        var v13631 = TypeScript$$25.isQuoted(typeName$$3);
        var v3715 = !v13631;
        if (v3715) {
          quotestring$$1 = "'";
        }
        typestring$$1 = " is using inaccessible module ";
        var v23175 = " " + baseTypeString;
        var v19386 = v23175 + " from private module ";
        var v13632 = v19386 + quotestring$$1;
        var v3716 = v13632 + typeName$$3;
        baseTypeString = v3716 + quotestring$$1;
      } else {
        var v19387 = " private " + baseTypeString;
        var v13633 = v19387 + " '";
        var v3717 = v13633 + typeName$$3;
        baseTypeString = v3717 + "'";
      }
      var v13634 = this.checker;
      var v3718 = v13634.errorReporter;
      var v13635 = bases$$4.members;
      var v3719 = v13635[i$$96];
      var v25762 = "exported " + declTypeString;
      var v24986 = v25762 + " '";
      var v24987 = declSymbol.name;
      var v23176 = v24986 + v24987;
      var v19388 = v23176 + "' ";
      var v13636 = v19388 + baseListTypeString;
      var v3720 = v13636 + baseTypeString;
      v3718.simpleError(v3719, v3720);
      return;
    }
    function v1051(funcDecl$$27) {
      function preFindSuperCall(ast$$105, parent$$67, walker$$51) {
        var go$$5 = true;
        var v3722 = ast$$105.nodeType;
        switch(v3722) {
          case TypeScript$$25.NodeType.FuncDecl:
            go$$5 = false;
            break;
          case TypeScript$$25.NodeType.Call:
            var call = ast$$105;
            var v19389 = call.target;
            var v13637 = v19389.nodeType;
            var v19390 = TypeScript$$25.NodeType;
            var v13638 = v19390.Super;
            var v3721 = v13637 == v13638;
            if (v3721) {
              go$$5 = false;
              foundSuper = true;
            }
          ;
          default:
          ;
        }
        var v3723 = walker$$51.options;
        v3723.goChildren = go$$5;
        return ast$$105;
      }
      var foundSuper = false;
      var v3724 = TypeScript$$25.getAstWalkerFactory();
      var v3725 = funcDecl$$27.bod;
      v3724.walk(v3725, preFindSuperCall);
      return foundSuper;
    }
    function v1050(funcDecl$$26) {
      function v1049(ast$$104, parent$$66, walker$$50) {
        var go$$4 = true;
        var v3727 = ast$$104.nodeType;
        switch(v3727) {
          case TypeScript$$25.NodeType.FuncDecl:
            go$$4 = false;
            break;
          case TypeScript$$25.NodeType.Return:
            var returnStmt = ast$$104;
            var v3726 = returnStmt.returnExpression;
            if (v3726) {
              allReturnsAreVoid = false;
              go$$4 = false;
            }
          ;
          default:
          ;
        }
        var v3728 = walker$$50.options;
        v3728.goChildren = go$$4;
        var v3729 = walker$$50.options;
        v3729.goNextSibling = go$$4;
        return ast$$104;
      }
      var allReturnsAreVoid = true;
      var v23177 = funcDecl$$26.signature;
      var v19391 = v23177.returnType;
      var v13639 = v19391.type;
      var v3732 = v13639 == null;
      if (v3732) {
        var preFindReturnExpressionTypes = v1049;
        var v3730 = TypeScript$$25.getAstWalkerFactory();
        var v3731 = funcDecl$$26.bod;
        v3730.walk(v3731, preFindReturnExpressionTypes);
      }
      return allReturnsAreVoid;
    }
    function v1048(funcDecl$$25, constructorSym) {
      var freeVars$$1 = funcDecl$$25.freeVariables;
      var k$$14 = 0;
      var len$$46 = freeVars$$1.length;
      var v3740 = k$$14 < len$$46;
      for (;v3740;) {
        var sym$$36 = freeVars$$1[k$$14];
        var v19392 = sym$$36.isInstanceProperty();
        var v13640 = !v19392;
        if (v13640) {
          var v19393 = sym$$36.container;
          v13640 = v19393 == constructorSym;
        }
        var v3739 = v13640;
        if (v3739) {
          var v3733 = TypeScript$$25.instanceFilter;
          v3733.reset();
          var v13641 = this.scope;
          var v13642 = TypeScript$$25.instanceFilter;
          var v13643 = sym$$36.name;
          var v3736 = v13641.search(v13642, v13643, false, false);
          if (v3736) {
            var v13644 = this.checker;
            var v3734 = v13644.errorReporter;
            var v24988 = sym$$36.name;
            var v23178 = "Constructor-local variable shadows class property '" + v24988;
            var v19394 = v23178 + "'. To access the class property, use 'self.";
            var v19395 = sym$$36.name;
            var v13645 = v19394 + v19395;
            var v3735 = v13645 + "'";
            v3734.simpleError(funcDecl$$25, v3735);
          }
          var v13646 = this.checker;
          var v3737 = v13646.errorReporter;
          var v19396 = sym$$36.name;
          var v13647 = "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable '" + v19396;
          var v3738 = v13647 + "' to a class property";
          v3737.simpleError(funcDecl$$25, v3738);
        }
        k$$14++;
        v3740 = k$$14 < len$$46;
      }
      return;
    }
    function v1047(funcDecl$$24) {
      var v13648 = funcDecl$$24.isMethod();
      var v3743 = !v13648;
      if (v3743) {
        var freeVars = funcDecl$$24.freeVariables;
        var k$$13 = 0;
        var len$$45 = freeVars.length;
        var v3742 = k$$13 < len$$45;
        for (;v3742;) {
          var sym$$35 = freeVars[k$$13];
          var v3741 = sym$$35.isInstanceProperty();
          if (v3741) {
            return true;
          }
          k$$13++;
          v3742 = k$$13 < len$$45;
        }
      }
      var fns = funcDecl$$24.scopes;
      var v3744 = fns.members;
      var fnsLen = v3744.length;
      var j$$13 = 0;
      var v3747 = j$$13 < fnsLen;
      for (;v3747;) {
        var v3745 = fns.members;
        var fn$$8 = v3745[j$$13];
        var v3746 = this.checkInitSelf(fn$$8);
        if (v3746) {
          return true;
        }
        j$$13++;
        v3747 = j$$13 < fnsLen;
      }
      return false;
    }
    function v1046(container$$20, args$$14, table$$9, isClass$$1) {
      if (args$$14) {
        var v3748 = args$$14.members;
        var len$$44 = v3748.length;
        var i$$95 = 0;
        var v3761 = i$$95 < len$$44;
        for (;v3761;) {
          var v3749 = args$$14.members;
          var local$$1 = v3749[i$$95];
          var v19397 = local$$1.sym;
          var v13649 = v19397 == null;
          var v19399 = !v13649;
          if (v19399) {
            var v19398 = isClass$$1;
            var v23181 = !v19398;
            if (v23181) {
              var v24989 = local$$1.sym;
              var v23179 = v24989.kind();
              var v24990 = TypeScript$$25.SymbolKind;
              var v23180 = v24990.Field;
              v19398 = v23179 != v23180;
            }
            v13649 = v19398;
          }
          var v3760 = v13649;
          if (v3760) {
            var result$$29 = null;
            var v23182 = local$$1.id;
            var v19400 = v23182.text;
            var v13650 = result$$29 = table$$9.lookup(v19400);
            var v3759 = v13650 == null;
            if (v3759) {
              this.resolveBoundDecl(local$$1);
              var v3750 = TypeScript$$25.ValueLocation;
              var localVar$$1 = new v3750;
              var v3751 = TypeScript$$25.TypeLink;
              var v26522 = new v3751;
              localVar$$1.typeLink = v26522;
              var v3752 = TypeScript$$25.ParameterSymbol;
              var v13651 = local$$1.id;
              var v3753 = v13651.text;
              var v3754 = local$$1.minChar;
              var v19401 = this.checker;
              var v13652 = v19401.locationInfo;
              var v3755 = v13652.unitIndex;
              var varSym$$2 = new v3752(v3753, v3754, v3755, localVar$$1);
              varSym$$2.declAST = local$$1;
              localVar$$1.symbol = varSym$$2;
              var v3756 = localVar$$1.typeLink;
              v3756.type = local$$1.type;
              var v3757 = localVar$$1.symbol;
              v3757.container = container$$20;
              local$$1.sym = localVar$$1.symbol;
              var v13653 = local$$1.id;
              var v3758 = v13653.text;
              table$$9.add(v3758, varSym$$2);
            } else {
              var v26523 = result$$29.getType();
              local$$1.type = v26523;
              local$$1.sym = result$$29;
            }
          }
          i$$95++;
          v3761 = i$$95 < len$$44;
        }
      }
      return;
    }
    function v1045(scope$$30, container$$19, vars$$3, table$$8, isModContainer) {
      var v3762 = vars$$3.members;
      var len$$43 = v3762.length;
      var hasArgsDef = false;
      var i$$94 = 0;
      var v3786 = i$$94 < len$$43;
      for (;v3786;) {
        var v3763 = vars$$3.members;
        var local = v3763[i$$94];
        var v19402 = local.sym;
        var v13654 = v19402 == null;
        var v19405 = !v13654;
        if (v19405) {
          var v23183 = local.sym;
          var v19403 = v23183.kind();
          var v23184 = TypeScript$$25.SymbolKind;
          var v19404 = v23184.Field;
          v13654 = v19403 != v19404;
        }
        var v3785 = v13654;
        if (v3785) {
          var result$$28 = null;
          var v23185 = local.id;
          var v19406 = v23185.text;
          var v13655 = result$$28 = table$$8.lookup(v19406);
          var v3784 = v13655 == null;
          if (v3784) {
            var v3764 = TypeScript$$25.ValueLocation;
            var localVar = new v3764;
            var v3765 = TypeScript$$25.TypeLink;
            var v26524 = new v3765;
            localVar.typeLink = v26524;
            var varSym$$1 = null;
            var v13656 = local.varFlags;
            var v19407 = TypeScript$$25.VarFlags;
            var v13657 = v19407.Static;
            var v3774 = TypeScript$$25.hasFlag(v13656, v13657);
            if (v3774) {
              var v13658 = local.varFlags;
              var v19408 = TypeScript$$25.VarFlags;
              var v13659 = v19408.LocalStatic;
              local.varFlags = v13658 | v13659;
              var v3766 = TypeScript$$25.FieldSymbol;
              var v13660 = local.id;
              var v3767 = v13660.text;
              var v3768 = local.minChar;
              var v19409 = this.checker;
              var v13661 = v19409.locationInfo;
              var v3769 = v13661.unitIndex;
              varSym$$1 = new v3766(v3767, v3768, v3769, true, localVar);
            } else {
              var v3770 = TypeScript$$25.VariableSymbol;
              var v13662 = local.id;
              var v3771 = v13662.text;
              var v3772 = local.minChar;
              var v19410 = this.checker;
              var v13663 = v19410.locationInfo;
              var v3773 = v13663.unitIndex;
              varSym$$1 = new v3770(v3771, v3772, v3773, localVar);
            }
            var v3775 = local.varFlags;
            varSym$$1.transferVarFlags(v3775);
            localVar.symbol = varSym$$1;
            varSym$$1.declAST = local;
            var v3776 = localVar.typeLink;
            v3776.ast = local.typeExpr;
            var v3777 = this.checker;
            var v3778 = localVar.typeLink;
            v3777.resolveTypeLink(scope$$30, v3778, false);
            var v19411 = local.type;
            var v13664 = v19411 == null;
            if (v13664) {
              var v19412 = local.init;
              v13664 = v19412 == null;
            }
            var v3779 = v13664;
            if (v3779) {
              local.type = this.anyType;
            }
            var v3780 = localVar.typeLink;
            v3780.type = local.type;
            var v3781 = localVar.symbol;
            v3781.container = container$$19;
            local.sym = localVar.symbol;
            var v13665 = local.id;
            var v3782 = v13665.text;
            table$$8.add(v3782, varSym$$1);
            var v19413 = local.id;
            var v13666 = v19413.text;
            var v3783 = v13666 == "arguments";
            if (v3783) {
              hasArgsDef = true;
            }
          } else {
            var v26525 = result$$28.getType();
            local.type = v26525;
            local.sym = result$$28;
          }
        }
        i$$94++;
        v3786 = i$$94 < len$$43;
      }
      var v3795 = !isModContainer;
      if (v3795) {
        var v3794 = !hasArgsDef;
        if (v3794) {
          var v3787 = TypeScript$$25.ValueLocation;
          var argLoc = new v3787;
          var v3788 = TypeScript$$25.TypeLink;
          var v26526 = new v3788;
          argLoc.typeLink = v26526;
          var v3789 = TypeScript$$25.VariableSymbol;
          var v3790 = vars$$3.minChar;
          var v19414 = this.checker;
          var v13667 = v19414.locationInfo;
          var v3791 = v13667.unitIndex;
          var theArgSym = new v3789("arguments", v3790, v3791, argLoc);
          var v13668 = this.iargumentsInterfaceType;
          var v3792 = !v13668;
          if (v3792) {
            var argumentsSym = scope$$30.find("IArguments", false, true);
            if (argumentsSym) {
              var v13669 = argumentsSym.flags;
              var v19415 = TypeScript$$25.SymbolFlags;
              var v13670 = v19415.CompilerGenerated;
              argumentsSym.flags = v13669 | v13670;
              var v26527 = argumentsSym.getType();
              this.iargumentsInterfaceType = v26527;
            } else {
              this.iargumentsInterfaceType = this.anyType;
            }
          }
          var v3793 = argLoc.typeLink;
          v3793.type = this.iargumentsInterfaceType;
          table$$8.add("arguments", theArgSym);
        }
      }
      return;
    }
    function v1044(container$$18, signature$$7, table$$7) {
      var v3796 = signature$$7.parameters;
      var len$$42 = v3796.length;
      var i$$93 = 0;
      var v3799 = i$$93 < len$$42;
      for (;v3799;) {
        var v3797 = signature$$7.parameters;
        var symbol$$20 = v3797[i$$93];
        symbol$$20.container = container$$18;
        var v3798 = symbol$$20.name;
        table$$7.add(v3798, symbol$$20);
        i$$93++;
        v3799 = i$$93 < len$$42;
      }
      return;
    }
    function v1043(trinex) {
      var v3800 = trinex.operand1;
      var v26528 = this.typeCheck(v3800);
      trinex.operand1 = v26528;
      var v3801 = trinex.operand2;
      var v26529 = this.typeCheck(v3801);
      trinex.operand2 = v26529;
      var v3802 = trinex.operand3;
      var v26530 = this.typeCheck(v3802);
      trinex.operand3 = v26530;
      var v3803 = trinex.operand2;
      var leftType$$5 = v3803.type;
      var v3804 = trinex.operand3;
      var rightType$$4 = v3804.type;
      var v3810 = leftType$$5 == rightType$$4;
      if (v3810) {
        trinex.type = leftType$$5;
      } else {
        var v13671 = this.checker;
        var v3809 = v13671.sourceIsSubtypeOfTarget(leftType$$5, rightType$$4);
        if (v3809) {
          trinex.type = rightType$$4;
        } else {
          var v13672 = this.checker;
          var v3808 = v13672.sourceIsSubtypeOfTarget(rightType$$4, leftType$$5);
          if (v3808) {
            trinex.type = leftType$$5;
          } else {
            trinex.type = this.anyType;
            var v13673 = this.checker;
            var v3805 = v13673.errorReporter;
            var v3806 = trinex.printLabel();
            var v3807 = this.scope;
            v3805.incompatibleTypes(trinex, leftType$$5, rightType$$4, v3806, v3807);
          }
        }
      }
      return trinex;
    }
    function v1042(binex$$8, assignment$$2) {
      var v13674 = binex$$8.operand1;
      var v3811 = this.typeCheck(v13674);
      var v3812 = this.doubleType;
      var v26531 = this.cast(v3811, v3812);
      binex$$8.operand1 = v26531;
      var v13675 = binex$$8.operand2;
      var v3813 = this.typeCheck(v13675);
      var v3814 = this.doubleType;
      var v26532 = this.cast(v3813, v3814);
      binex$$8.operand2 = v26532;
      var v13676 = assignment$$2;
      if (v13676) {
        var v23186 = binex$$8.operand1;
        var v19416 = this.astIsWriteable(v23186);
        v13676 = !v19416;
      }
      var v3816 = v13676;
      if (v3816) {
        var v13677 = this.checker;
        var v3815 = v13677.errorReporter;
        v3815.valueCannotBeModified(binex$$8);
      }
      binex$$8.type = this.doubleType;
      return binex$$8;
    }
    function v1041(binex$$7) {
      var v13678 = binex$$7.operand1;
      var v3817 = this.typeCheck(v13678);
      var v3818 = this.stringType;
      var v26533 = this.cast(v3817, v3818);
      binex$$7.operand1 = v26533;
      var v3819 = binex$$7.operand2;
      var v26534 = this.typeCheck(v3819);
      binex$$7.operand2 = v26534;
      var v25763 = binex$$7.operand1;
      var v24991 = v25763.type;
      var v25764 = this.checker;
      var v24992 = v25764.anyType;
      var v23187 = v24991 == v24992;
      var v24995 = !v23187;
      if (v24995) {
        var v25765 = binex$$7.operand1;
        var v24993 = v25765.type;
        var v25766 = this.checker;
        var v24994 = v25766.stringType;
        v23187 = v24993 == v24994;
      }
      var v19417 = v23187;
      if (v19417) {
        var v25767 = binex$$7.operand2;
        var v24996 = v25767.type;
        var v24997 = this.anyType;
        var v23188 = v24996 == v24997;
        var v25001 = !v23188;
        if (v25001) {
          var v24998 = this.checker;
          var v25768 = binex$$7.operand2;
          var v24999 = v25768.type;
          var v25000 = this.objectInterfaceType;
          v23188 = v24998.sourceIsSubtypeOfTarget(v24999, v25000);
        }
        v19417 = v23188;
      }
      var v13679 = v19417;
      var v3821 = !v13679;
      if (v3821) {
        var v13680 = this.checker;
        var v3820 = v13680.errorReporter;
        v3820.simpleError(binex$$7, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type");
      }
      binex$$7.type = this.booleanType;
      return binex$$7;
    }
    function v1040(ast$$103) {
      var binex$$6 = ast$$103;
      var v3822 = binex$$6.operand1;
      var v26535 = this.typeCheck(v3822);
      binex$$6.operand1 = v26535;
      var v3823 = binex$$6.operand2;
      var v26536 = this.typeCheck(v3823);
      binex$$6.operand2 = v26536;
      var v23189 = this.checker;
      var v19418 = v23189.styleSettings;
      var v13681 = v19418.literalSubscript;
      var v3826 = !v13681;
      if (v3826) {
        var v19419 = binex$$6.operand2;
        var v13682 = v19419.nodeType;
        var v19420 = TypeScript$$25.NodeType;
        var v13683 = v19420.QString;
        var v3825 = v13682 == v13683;
        if (v3825) {
          var v13684 = this.checker;
          var v3824 = v13684.errorReporter;
          v3824.styleError(ast$$103, "use literal subscript ('.') notation instead)");
        }
      }
      var v3827 = binex$$6.operand1;
      var objExprType = v3827.type;
      var v3828 = binex$$6.operand2;
      var indexExprType = v3828.type;
      var v3847 = objExprType.elementType;
      if (v3847) {
        var v25002 = this.checker;
        var v23190 = v25002.anyType;
        var v19421 = indexExprType == v23190;
        var v23192 = !v19421;
        if (v23192) {
          var v25003 = this.checker;
          var v23191 = v25003.numberType;
          v19421 = indexExprType == v23191;
        }
        var v13685 = v19421;
        var v19424 = !v13685;
        if (v19424) {
          var v19422 = indexExprType.typeFlags;
          var v23193 = TypeScript$$25.TypeFlags;
          var v19423 = v23193.IsEnum;
          v13685 = TypeScript$$25.hasFlag(v19422, v19423);
        }
        var v3833 = v13685;
        if (v3833) {
          binex$$6.type = objExprType.elementType;
        } else {
          var v19425 = this.checker;
          var v13686 = v19425.stringType;
          var v3832 = indexExprType == v13686;
          if (v3832) {
            var v3829 = this.checker;
            binex$$6.type = v3829.anyType;
          } else {
            var v13687 = this.checker;
            var v3830 = v13687.errorReporter;
            v3830.simpleError(binex$$6, "Illegal property access");
            var v3831 = this.checker;
            binex$$6.type = v3831.anyType;
          }
        }
      } else {
        var v3846 = objExprType.index;
        if (v3846) {
          var v25769 = this.checker;
          var v25004 = v25769.anyType;
          var v23194 = indexExprType == v25004;
          var v25006 = !v23194;
          if (v25006) {
            var v26274 = objExprType.index;
            var v26106 = v26274.flags;
            var v26275 = TypeScript$$25.SignatureFlags;
            var v26107 = v26275.IsStringIndexer;
            var v25770 = v26106 & v26107;
            var v26110 = !v25770;
            if (v26110) {
              var v26276 = objExprType.index;
              var v26108 = v26276.flags;
              var v26277 = TypeScript$$25.SignatureFlags;
              var v26109 = v26277.IsNumberIndexer;
              v25770 = v26108 & v26109;
            }
            var v25005 = v25770;
            v23194 = !v25005;
          }
          var v19426 = v23194;
          var v23196 = !v19426;
          if (v23196) {
            var v25771 = objExprType.index;
            var v25007 = v25771.flags;
            var v25772 = TypeScript$$25.SignatureFlags;
            var v25008 = v25772.IsStringIndexer;
            var v23195 = v25007 & v25008;
            if (v23195) {
              var v25773 = this.checker;
              var v25009 = v25773.stringType;
              v23195 = indexExprType == v25009;
            }
            v19426 = v23195;
          }
          var v13688 = v19426;
          var v19428 = !v13688;
          if (v19428) {
            var v25010 = objExprType.index;
            var v23197 = v25010.flags;
            var v25011 = TypeScript$$25.SignatureFlags;
            var v23198 = v25011.IsNumberIndexer;
            var v19427 = v23197 & v23198;
            if (v19427) {
              var v25774 = this.checker;
              var v25012 = v25774.numberType;
              var v23199 = indexExprType == v25012;
              var v25015 = !v23199;
              if (v25015) {
                var v25013 = indexExprType.typeFlags;
                var v25775 = TypeScript$$25.TypeFlags;
                var v25014 = v25775.IsEnum;
                v23199 = TypeScript$$25.hasFlag(v25013, v25014);
              }
              v19427 = v23199;
            }
            v13688 = v19427;
          }
          var v3841 = v13688;
          if (v3841) {
            var v3834 = objExprType.index;
            var sig$$3 = this.resolveOverload(ast$$103, v3834);
            if (sig$$3) {
              var v3835 = sig$$3.returnType;
              binex$$6.type = v3835.type;
            } else {
              var v3836 = this.checker;
              binex$$6.type = v3836.anyType;
            }
          } else {
            var v19429 = this.checker;
            var v13689 = v19429.stringType;
            var v3840 = indexExprType == v13689;
            if (v3840) {
              var v3837 = this.checker;
              binex$$6.type = v3837.anyType;
            } else {
              var v13690 = this.checker;
              var v3838 = v13690.errorReporter;
              v3838.simpleError(binex$$6, "Illegal property access");
              var v3839 = this.checker;
              binex$$6.type = v3839.anyType;
            }
          }
        } else {
          var v26278 = this.checker;
          var v26111 = v26278.anyType;
          var v25776 = objExprType == v26111;
          var v26113 = !v25776;
          if (v26113) {
            var v26279 = this.checker;
            var v26112 = v26279.stringType;
            v25776 = objExprType == v26112;
          }
          var v25016 = v25776;
          var v25778 = !v25016;
          if (v25778) {
            var v26114 = this.checker;
            var v25777 = v26114.numberType;
            v25016 = objExprType == v25777;
          }
          var v23200 = v25016;
          var v25018 = !v23200;
          if (v25018) {
            var v25779 = this.checker;
            var v25017 = v25779.booleanType;
            v23200 = objExprType == v25017;
          }
          var v19430 = v23200;
          var v23201 = !v19430;
          if (v23201) {
            v19430 = objExprType.isReferenceType();
          }
          var v13691 = v19430;
          if (v13691) {
            var v25780 = this.checker;
            var v25019 = v25780.anyType;
            var v23202 = indexExprType == v25019;
            var v25021 = !v23202;
            if (v25021) {
              var v25781 = this.checker;
              var v25020 = v25781.stringType;
              v23202 = indexExprType == v25020;
            }
            var v19431 = v23202;
            var v23204 = !v19431;
            if (v23204) {
              var v25782 = this.checker;
              var v25022 = v25782.numberType;
              var v23203 = indexExprType == v25022;
              var v25025 = !v23203;
              if (v25025) {
                var v25023 = indexExprType.typeFlags;
                var v25783 = TypeScript$$25.TypeFlags;
                var v25024 = v25783.IsEnum;
                v23203 = TypeScript$$25.hasFlag(v25023, v25024);
              }
              v19431 = v23203;
            }
            v13691 = v19431;
          }
          var v3845 = v13691;
          if (v3845) {
            var v3842 = this.checker;
            binex$$6.type = v3842.anyType;
          } else {
            var v13692 = this.checker;
            var v3843 = v13692.errorReporter;
            v3843.simpleError(binex$$6, "Illegal property access");
            var v3844 = this.checker;
            binex$$6.type = v3844.anyType;
          }
        }
      }
      return binex$$6;
    }
    function v1039(ast$$102) {
      var binex$$5 = ast$$102;
      var v13693 = binex$$5.operand2;
      var v3848 = v13693.isParenthesized;
      var applyTargetType$$2 = !v3848;
      var v3849 = binex$$5.operand1;
      var v26537 = this.typeCheck(v3849);
      binex$$5.operand1 = v26537;
      var v3850 = this.checker;
      var v13694 = binex$$5.operand1;
      var v3851 = v13694.type;
      var v13695 = this.checker;
      var v3852 = v13695.inProvisionalTypecheckMode();
      var v3853 = binex$$5.operand2;
      v3850.typeCheckWithContextualType(v3851, v3852, applyTargetType$$2, v3853);
      var v3854 = binex$$5.operand1;
      var leftType$$4 = v3854.type;
      var v3855 = binex$$5.operand2;
      var rightType$$3 = v3855.type;
      var v19432 = binex$$5.operand1;
      var v13696 = this.astIsWriteable(v19432);
      var v3857 = !v13696;
      if (v3857) {
        var v13697 = this.checker;
        var v3856 = v13697.errorReporter;
        v3856.valueCannotBeModified(binex$$5);
      }
      var v19433 = binex$$5.operand1;
      var v13698 = v19433.nodeType;
      var v19434 = TypeScript$$25.NodeType;
      var v13699 = v19434.Call;
      var v3858 = v13698 == v13699;
      if (v3858) {
        var callEx$$1 = binex$$5.operand1
      }
      var preserveScope$$1 = false;
      var preservedContainedScope$$1 = null;
      var v13700 = binex$$5.operand2;
      var v3860 = v13700.type;
      if (v3860) {
        var v13701 = binex$$5.operand2;
        var v3859 = v13701.type;
        preservedContainedScope$$1 = v3859.containedScope;
        preserveScope$$1 = true;
      }
      var v3861 = binex$$5.operand2;
      var v13702 = applyTargetType$$2;
      if (v13702) {
        var v23205 = this.checker;
        var v19435 = v23205.inProvisionalTypecheckMode();
        v13702 = !v19435;
      }
      var v3862 = v13702;
      var v26538 = this.castWithCoercion(v3861, leftType$$4, v3862, false);
      binex$$5.operand2 = v26538;
      var v13703 = preserveScope$$1;
      if (v13703) {
        var v25026 = binex$$5.operand2;
        var v23206 = v25026.type;
        var v19436 = v23206.containedScope;
        v13703 = v19436 == null;
      }
      var v3864 = v13703;
      if (v3864) {
        var v13704 = binex$$5.operand2;
        var v3863 = v13704.type;
        v3863.containedScope = preservedContainedScope$$1;
      }
      binex$$5.type = rightType$$3;
      return binex$$5;
    }
    function v1038(ast$$101) {
      var binex$$4 = ast$$101;
      var v3865 = binex$$4.operand1;
      var v26539 = this.typeCheck(v3865);
      binex$$4.operand1 = v26539;
      var v3866 = binex$$4.operand2;
      var v26540 = this.typeCheck(v3866);
      binex$$4.operand2 = v26540;
      var v3867 = binex$$4.operand1;
      var leftType$$3 = v3867.type;
      var v3868 = binex$$4.operand2;
      var rightType$$2 = v3868.type;
      var v23207 = this.checker;
      var v19437 = v23207.sourceIsAssignableToTarget(leftType$$3, rightType$$2);
      var v13705 = !v19437;
      if (v13705) {
        var v23208 = this.checker;
        var v19438 = v23208.sourceIsAssignableToTarget(rightType$$2, leftType$$3);
        v13705 = !v19438;
      }
      var v3872 = v13705;
      if (v3872) {
        var v13706 = this.checker;
        var v3869 = v13706.errorReporter;
        var v3870 = binex$$4.printLabel();
        var v3871 = this.scope;
        v3869.incompatibleTypes(binex$$4, leftType$$3, rightType$$2, v3870, v3871);
      }
      binex$$4.type = this.booleanType;
      return binex$$4;
    }
    function v1037(ast$$100) {
      var binex$$3 = ast$$100;
      var leftIsFnc = false;
      var v3873 = binex$$3.operand1;
      var v26541 = this.typeCheck(v3873);
      binex$$3.operand1 = v26541;
      var v3874 = binex$$3.operand1;
      var leftType$$2 = v3874.type;
      var leftScope = null;
      if (leftType$$2) {
        var v13707 = this.anyType;
        var v3892 = leftType$$2 == v13707;
        if (v3892) {
          binex$$3.type = this.anyType;
          return binex$$3;
        } else {
          var v13708 = this.stringType;
          var v3891 = leftType$$2 == v13708;
          if (v3891) {
            var v3876 = this.stringInterfaceType;
            if (v3876) {
              var v3875 = this.stringInterfaceType;
              leftScope = v3875.memberScope;
            } else {
              binex$$3.type = this.anyType;
              return binex$$3;
            }
          } else {
            var v13709 = this.doubleType;
            var v3890 = leftType$$2 == v13709;
            if (v3890) {
              var v3878 = this.numberInterfaceType;
              if (v3878) {
                var v3877 = this.numberInterfaceType;
                leftScope = v3877.memberScope;
              } else {
                binex$$3.type = this.anyType;
                return binex$$3;
              }
            } else {
              var v13710 = this.booleanType;
              var v3889 = leftType$$2 == v13710;
              if (v3889) {
                var v3880 = this.booleanInterfaceType;
                if (v3880) {
                  var v3879 = this.booleanInterfaceType;
                  leftScope = v3879.memberScope;
                } else {
                  binex$$3.type = this.anyType;
                  return binex$$3;
                }
              } else {
                var v19439 = leftType$$2.call;
                var v23209 = !v19439;
                if (v23209) {
                  v19439 = leftType$$2.construct;
                }
                var v13711 = v19439;
                if (v13711) {
                  var v19440 = leftType$$2.members;
                  v13711 = v19440 == null;
                }
                var v3888 = v13711;
                if (v3888) {
                  var v3882 = this.functionInterfaceType;
                  if (v3882) {
                    var v3881 = this.functionInterfaceType;
                    leftScope = v3881.memberScope;
                  } else {
                    binex$$3.type = this.anyType;
                    return binex$$3;
                  }
                } else {
                  var v3887 = leftType$$2.elementType;
                  if (v3887) {
                    var v3886 = this.arrayInterfaceType;
                    if (v3886) {
                      var v3883 = leftType$$2.elementType;
                      var v3884 = this.arrayInterfaceType;
                      var v3885 = this.checker;
                      var arrInstType$$1 = v3883.getArrayBase(v3884, v3885);
                      leftScope = arrInstType$$1.memberScope;
                    } else {
                      binex$$3.type = this.anyType;
                      return binex$$3;
                    }
                  } else {
                    leftScope = leftType$$2.memberScope;
                  }
                }
              }
            }
          }
        }
      }
      var v3920 = leftScope == null;
      if (v3920) {
        var v13712 = this.checker;
        var v3893 = v13712.errorReporter;
        v3893.expectedClassOrInterface(binex$$3);
        binex$$3.type = this.anyType;
      } else {
        var propertyName$$8 = binex$$3.operand2;
        var v13713 = this.thisClassNode;
        if (v13713) {
          var v23210 = binex$$3.operand1;
          var v19441 = v23210.type;
          var v25027 = this.thisClassNode;
          var v23211 = v25027.type;
          var v19442 = v23211.instanceType;
          v13713 = v19441 == v19442;
        }
        var v3894 = v13713;
        var v13714 = !v3894;
        if (v13714) {
          v3894 = this.inTypeRefTypeCheck;
        }
        var lhsIsEnclosingType = v3894;
        var v3895 = propertyName$$8.text;
        var v3896 = !lhsIsEnclosingType;
        var v3897 = this.inTypeRefTypeCheck;
        var symbol$$19 = leftScope.find(v3895, v3896, v3897);
        var v3908 = !symbol$$19;
        if (v3908) {
          var v13715 = this.objectInterfaceType;
          if (v13715) {
            v13715 = leftType$$2;
          }
          var v3907 = v13715;
          if (v3907) {
            var v3901 = leftType$$2.isReferenceType();
            if (v3901) {
              var v13716 = this.objectInterfaceType;
              var v3898 = v13716.memberScope;
              var v3899 = propertyName$$8.text;
              var v3900 = this.inTypeRefTypeCheck;
              symbol$$19 = v3898.find(v3899, false, v3900);
            }
            var v3906 = !symbol$$19;
            if (v3906) {
              var v13717 = this.functionInterfaceType;
              if (v13717) {
                var v19443 = leftType$$2.call;
                var v23212 = !v19443;
                if (v23212) {
                  v19443 = leftType$$2.construct;
                }
                v13717 = v19443;
              }
              var v3905 = v13717;
              if (v3905) {
                var v13718 = this.functionInterfaceType;
                var v3902 = v13718.memberScope;
                var v3903 = propertyName$$8.text;
                var v3904 = this.inTypeRefTypeCheck;
                symbol$$19 = v3902.find(v3903, false, v3904);
              }
            }
          }
        }
        var v13719 = !symbol$$19;
        var v19445 = !v13719;
        if (v19445) {
          var v23213 = this.checker;
          var v19444 = symbol$$19.visible(leftScope, v23213);
          v13719 = !v19444;
        }
        var v3919 = v13719;
        if (v3919) {
          binex$$3.type = this.anyType;
          var v3914 = symbol$$19 == null;
          if (v3914) {
            var v13720 = this.checker;
            var v3909 = v13720.errorReporter;
            var v25028 = propertyName$$8.actualText;
            var v23214 = "The property '" + v25028;
            var v19446 = v23214 + "' does not exist on value of type '";
            var v23215 = this.scope;
            var v19447 = leftType$$2.getScopedTypeName(v23215);
            var v13721 = v19446 + v19447;
            var v3910 = v13721 + "'";
            v3909.simpleError(propertyName$$8, v3910);
          } else {
            var v13722 = this.inTypeRefTypeCheck;
            var v3913 = !v13722;
            if (v3913) {
              var v13723 = this.checker;
              var v3911 = v13723.errorReporter;
              var v25029 = propertyName$$8.actualText;
              var v23216 = "The property '" + v25029;
              var v19448 = v23216 + " on type '";
              var v23217 = this.scope;
              var v19449 = leftType$$2.getScopedTypeName(v23217);
              var v13724 = v19448 + v19449;
              var v3912 = v13724 + "' is not visible";
              v3911.simpleError(binex$$3, v3912);
            }
          }
        } else {
          var v3918 = symbol$$19.isVariable();
          if (v3918) {
            var v3917 = symbol$$19.isInferenceSymbol();
            if (v3917) {
              var infSym$$2 = symbol$$19;
              var v13725 = infSym$$2.declAST;
              if (v13725) {
                var v23218 = this.checker;
                var v23219 = infSym$$2.typeCheckStatus;
                var v19450 = v23218.typeStatusIsFinished(v23219);
                v13725 = !v19450;
              }
              var v3916 = v13725;
              if (v3916) {
                var v3915 = infSym$$2.declAST;
                this.inScopeTypeCheckDecl(v3915);
              }
            }
          }
          propertyName$$8.sym = symbol$$19;
          var v26542 = symbol$$19.getType();
          binex$$3.type = v26542;
        }
      }
      var v13726 = binex$$3.type;
      var v3921 = v13726 == null;
      if (v3921) {
        binex$$3.type = this.anyType;
      }
      return binex$$3;
    }
    function v1036(ast$$99, assignment$$1) {
      var binex$$2 = ast$$99;
      var v3922 = binex$$2.operand1;
      var v26543 = this.typeCheck(v3922);
      binex$$2.operand1 = v26543;
      var v3923 = binex$$2.operand2;
      var v26544 = this.typeCheck(v3923);
      binex$$2.operand2 = v26544;
      var v3924 = binex$$2.operand1;
      var leftType$$1 = v3924.type;
      var v3925 = binex$$2.operand2;
      var rightType$$1 = v3925.type;
      var v13727 = assignment$$1;
      if (v13727) {
        var v23220 = binex$$2.operand1;
        var v19451 = this.astIsWriteable(v23220);
        v13727 = !v19451;
      }
      var v3927 = v13727;
      if (v3927) {
        var v13728 = this.checker;
        var v3926 = v13728.errorReporter;
        v3926.valueCannotBeModified(binex$$2);
      }
      var v23221 = this.checker;
      var v19452 = v23221.styleSettings;
      var v13729 = v19452.bitwise;
      if (v13729) {
        var v25784 = binex$$2.nodeType;
        var v26115 = TypeScript$$25.NodeType;
        var v25785 = v26115.And;
        var v25030 = v25784 == v25785;
        var v25788 = !v25030;
        if (v25788) {
          var v25786 = binex$$2.nodeType;
          var v26116 = TypeScript$$25.NodeType;
          var v25787 = v26116.Or;
          v25030 = v25786 == v25787;
        }
        var v23222 = v25030;
        var v25033 = !v23222;
        if (v25033) {
          var v25031 = binex$$2.nodeType;
          var v25789 = TypeScript$$25.NodeType;
          var v25032 = v25789.AsgAnd;
          v23222 = v25031 == v25032;
        }
        var v19453 = v23222;
        var v23225 = !v19453;
        if (v23225) {
          var v23223 = binex$$2.nodeType;
          var v25034 = TypeScript$$25.NodeType;
          var v23224 = v25034.AsgOr;
          v19453 = v23223 == v23224;
        }
        v13729 = v19453;
      }
      var v3930 = v13729;
      if (v3930) {
        var v13730 = this.checker;
        var v3928 = v13730.errorReporter;
        var v19454 = TypeScript$$25.nodeTypeTable;
        var v19455 = binex$$2.nodeType;
        var v13731 = v19454[v19455];
        var v3929 = "use of " + v13731;
        v3928.styleError(ast$$99, v3929);
      }
      var v13732 = leftType$$1 == null;
      var v19456 = !v13732;
      if (v19456) {
        v13732 = rightType$$1 == null;
      }
      var v3932 = v13732;
      if (v3932) {
        var v13733 = this.checker;
        var v3931 = v13733.errorReporter;
        v3931.simpleError(binex$$2, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?");
        binex$$2.type = this.anyType;
        return binex$$2;
      }
      var nodeType$$14 = binex$$2.nodeType;
      var v13734 = this.checker;
      var v3933 = v13734.isNullOrUndefinedType(leftType$$1);
      if (v3933) {
        leftType$$1 = rightType$$1;
      }
      var v13735 = this.checker;
      var v3934 = v13735.isNullOrUndefinedType(rightType$$1);
      if (v3934) {
        rightType$$1 = leftType$$1;
      }
      var v3935 = this.checker;
      leftType$$1 = v3935.widenType(leftType$$1);
      var v3936 = this.checker;
      rightType$$1 = v3936.widenType(rightType$$1);
      var v23226 = TypeScript$$25.NodeType;
      var v19457 = v23226.Add;
      var v13736 = nodeType$$14 == v19457;
      var v19459 = !v13736;
      if (v19459) {
        var v23227 = TypeScript$$25.NodeType;
        var v19458 = v23227.AsgAdd;
        v13736 = nodeType$$14 == v19458;
      }
      var v3957 = v13736;
      if (v3957) {
        var v23228 = this.checker;
        var v19460 = v23228.stringType;
        var v13737 = leftType$$1 == v19460;
        var v19462 = !v13737;
        if (v19462) {
          var v23229 = this.checker;
          var v19461 = v23229.stringType;
          v13737 = rightType$$1 == v19461;
        }
        var v3947 = v13737;
        if (v3947) {
          var v3937 = this.checker;
          binex$$2.type = v3937.stringType;
        } else {
          var v23230 = this.checker;
          var v19463 = v23230.numberType;
          var v13738 = leftType$$1 == v19463;
          if (v13738) {
            var v23231 = this.checker;
            var v19464 = v23231.numberType;
            v13738 = rightType$$1 == v19464;
          }
          var v3946 = v13738;
          if (v3946) {
            var v3938 = this.checker;
            binex$$2.type = v3938.numberType;
          } else {
            var v19465 = this.checker;
            var v23232 = this.checker;
            var v19466 = v23232.numberType;
            var v13739 = v19465.sourceIsSubtypeOfTarget(leftType$$1, v19466);
            if (v13739) {
              var v19467 = this.checker;
              var v23233 = this.checker;
              var v19468 = v23233.numberType;
              v13739 = v19467.sourceIsSubtypeOfTarget(rightType$$1, v19468);
            }
            var v3945 = v13739;
            if (v3945) {
              var v3939 = this.checker;
              binex$$2.type = v3939.numberType;
            } else {
              var v23234 = this.checker;
              var v19469 = v23234.anyType;
              var v13740 = leftType$$1 == v19469;
              var v19471 = !v13740;
              if (v19471) {
                var v23235 = this.checker;
                var v19470 = v23235.anyType;
                v13740 = rightType$$1 == v19470;
              }
              var v3944 = v13740;
              if (v3944) {
                var v3940 = this.checker;
                binex$$2.type = v3940.anyType;
              } else {
                binex$$2.type = this.anyType;
                var v13741 = this.checker;
                var v3941 = v13741.errorReporter;
                var v3942 = binex$$2.printLabel();
                var v3943 = this.scope;
                v3941.incompatibleTypes(binex$$2, leftType$$1, rightType$$1, v3942, v3943);
              }
            }
          }
        }
      } else {
        var v23236 = this.checker;
        var v19472 = v23236.numberType;
        var v13742 = leftType$$1 == v19472;
        if (v13742) {
          var v23237 = this.checker;
          var v19473 = v23237.numberType;
          v13742 = rightType$$1 == v19473;
        }
        var v3956 = v13742;
        if (v3956) {
          var v3948 = this.checker;
          binex$$2.type = v3948.numberType;
        } else {
          var v19474 = this.checker;
          var v23238 = this.checker;
          var v19475 = v23238.numberType;
          var v13743 = v19474.sourceIsSubtypeOfTarget(leftType$$1, v19475);
          if (v13743) {
            var v19476 = this.checker;
            var v23239 = this.checker;
            var v19477 = v23239.numberType;
            v13743 = v19476.sourceIsSubtypeOfTarget(rightType$$1, v19477);
          }
          var v3955 = v13743;
          if (v3955) {
            var v3949 = this.checker;
            binex$$2.type = v3949.numberType;
          } else {
            var v23240 = this.checker;
            var v19478 = v23240.anyType;
            var v13744 = leftType$$1 == v19478;
            var v19480 = !v13744;
            if (v19480) {
              var v23241 = this.checker;
              var v19479 = v23241.anyType;
              v13744 = rightType$$1 == v19479;
            }
            var v3954 = v13744;
            if (v3954) {
              var v3950 = this.checker;
              binex$$2.type = v3950.numberType;
            } else {
              binex$$2.type = this.anyType;
              var v13745 = this.checker;
              var v3951 = v13745.errorReporter;
              var v3952 = binex$$2.printLabel();
              var v3953 = this.scope;
              v3951.incompatibleTypes(binex$$2, leftType$$1, rightType$$1, v3952, v3953);
            }
          }
        }
      }
      return binex$$2;
    }
    function v1035(ast$$98, assignment) {
      var binex$$1 = ast$$98;
      var resultType$$1 = null;
      var v3958 = binex$$1.operand1;
      var v26545 = this.typeCheck(v3958);
      binex$$1.operand1 = v26545;
      var v3959 = binex$$1.operand2;
      var v26546 = this.typeCheck(v3959);
      binex$$1.operand2 = v26546;
      var v3960 = binex$$1.operand1;
      var leftType = v3960.type;
      var v3961 = binex$$1.operand2;
      var rightType = v3961.type;
      var v13746 = assignment;
      if (v13746) {
        var v19481 = this.astIsWriteable(binex$$1);
        v13746 = !v19481;
      }
      var v3963 = v13746;
      if (v3963) {
        var v13747 = this.checker;
        var v3962 = v13747.errorReporter;
        v3962.valueCannotBeModified(binex$$1);
      }
      var v19482 = this.checker;
      var v13748 = v19482.styleSettings;
      var v3966 = v13748.bitwise;
      if (v3966) {
        var v13749 = this.checker;
        var v3964 = v13749.errorReporter;
        var v19483 = TypeScript$$25.nodeTypeTable;
        var v19484 = binex$$1.nodeType;
        var v13750 = v19483[v19484];
        var v3965 = "use of " + v13750;
        v3964.styleError(ast$$98, v3965);
      }
      var v19485 = this.checker;
      var v19486 = this.doubleType;
      var v13751 = v19485.sourceIsSubtypeOfTarget(leftType, v19486);
      if (v13751) {
        var v19487 = this.checker;
        var v19488 = this.doubleType;
        v13751 = v19487.sourceIsSubtypeOfTarget(rightType, v19488);
      }
      var v3972 = v13751;
      if (v3972) {
        resultType$$1 = this.doubleType;
      } else {
        var v19489 = this.booleanType;
        var v13752 = leftType == v19489;
        if (v13752) {
          var v19490 = this.booleanType;
          v13752 = rightType == v19490;
        }
        var v3971 = v13752;
        if (v3971) {
          resultType$$1 = this.booleanType;
        } else {
          var v13753 = this.anyType;
          var v3970 = leftType == v13753;
          if (v3970) {
            var v23242 = this.anyType;
            var v19491 = rightType == v23242;
            var v23244 = !v19491;
            if (v23244) {
              var v23243 = this.doubleType;
              v19491 = rightType == v23243;
            }
            var v13754 = v19491;
            var v19493 = !v13754;
            if (v19493) {
              var v19492 = this.booleanType;
              v13754 = rightType == v19492;
            }
            var v3967 = v13754;
            if (v3967) {
              resultType$$1 = this.anyType;
            }
          } else {
            var v13755 = this.anyType;
            var v3969 = rightType == v13755;
            if (v3969) {
              var v23245 = this.anyType;
              var v19494 = leftType == v23245;
              var v23247 = !v19494;
              if (v23247) {
                var v23246 = this.doubleType;
                v19494 = leftType == v23246;
              }
              var v13756 = v19494;
              var v19496 = !v13756;
              if (v19496) {
                var v19495 = this.booleanType;
                v13756 = leftType == v19495;
              }
              var v3968 = v13756;
              if (v3968) {
                resultType$$1 = this.anyType;
              }
            }
          }
        }
      }
      var v3976 = resultType$$1 == null;
      if (v3976) {
        resultType$$1 = this.anyType;
        var v13757 = this.checker;
        var v3973 = v13757.errorReporter;
        var v3974 = binex$$1.printLabel();
        var v3975 = this.scope;
        v3973.incompatibleTypes(binex$$1, leftType, rightType, v3974, v3975);
      }
      binex$$1.type = resultType$$1;
      return binex$$1;
    }
    function v1034(ast$$97) {
      var unex$$3 = ast$$97;
      var lval$$1 = unex$$3.operand;
      var v13758 = this.astIsWriteable(unex$$3);
      var v3980 = !v13758;
      if (v3980) {
        var v13759 = this.checker;
        var v3977 = v13759.errorReporter;
        v3977.valueCannotBeModified(unex$$3);
        unex$$3.type = this.doubleType;
      } else {
        unex$$3 = this.typeCheckUnaryNumberOperator(ast$$97);
        var v25035 = unex$$3.operand;
        var v23248 = v25035.type;
        var v25036 = this.checker;
        var v23249 = v25036.numberType;
        var v19497 = v23248 != v23249;
        if (v19497) {
          var v25037 = unex$$3.operand;
          var v23250 = v25037.type;
          var v25038 = this.checker;
          var v23251 = v25038.anyType;
          v19497 = v23250 != v23251;
        }
        var v13760 = v19497;
        if (v13760) {
          var v25790 = unex$$3.operand;
          var v25039 = v25790.type;
          var v23252 = v25039.typeFlags;
          var v25040 = TypeScript$$25.TypeFlags;
          var v23253 = v25040.IsEnum;
          var v19498 = v23252 & v23253;
          v13760 = !v19498;
        }
        var v3979 = v13760;
        if (v3979) {
          var v13761 = this.checker;
          var v3978 = v13761.errorReporter;
          v3978.simpleError(ast$$97, "'++' and '--' may only be applied to operands of type 'number' or 'any'");
        }
      }
      return unex$$3;
    }
    function v1033(ast$$96) {
      var v3981 = ast$$96.flags;
      var v13762 = TypeScript$$25.ASTFlags;
      var v3982 = v13762.Writeable;
      return TypeScript$$25.hasFlag(v3981, v3982);
    }
    function v1032(ast$$95) {
      var unex$$2 = ast$$95;
      var v3983 = unex$$2.operand;
      var v26547 = this.typeCheck(v3983);
      unex$$2.operand = v26547;
      unex$$2.type = this.booleanType;
      return unex$$2;
    }
    function v1031(ast$$94) {
      var unex$$1 = ast$$94;
      var v3984 = unex$$1.operand;
      var v26548 = this.typeCheck(v3984);
      unex$$1.operand = v26548;
      unex$$1.type = this.doubleType;
      return ast$$94;
    }
    function v1030(ast$$93) {
      var unex = ast$$93;
      var v3985 = unex.operand;
      var v26549 = this.typeCheck(v3985);
      unex.operand = v26549;
      unex.type = this.doubleType;
      return unex;
    }
    function v1029(script$$16) {
      var v3986 = this.checker;
      v3986.locationInfo = script$$16.locationInfo;
      var v3987 = this.checker;
      this.scope = v3987.globalScope;
      var v13763 = script$$16.topLevelMod;
      var v3992 = !v13763;
      if (v3992) {
        var v3988 = this.scope;
        var v13764 = this.checker;
        var v3989 = v13764.gloMod;
        var v3990 = script$$16.vars;
        var v13765 = this.checker;
        var v3991 = v13765.globals;
        this.addLocalsFromScope(v3988, v3989, v3990, v3991, true);
      }
      this.currentScript = script$$16;
      var v3993 = script$$16.bod;
      var v26550 = this.typeCheck(v3993);
      script$$16.bod = v26550;
      this.currentScript = null;
      return script$$16;
    }
    function v1028(ast$$92) {
      function v1027(id$$22) {
        var v3994 = _this$$7.scope;
        return v3994.find(id$$22, false, typespace$$24);
      }
      var _this$$7 = this;
      var identifier$$3 = ast$$92;
      var v13766 = this.checker;
      var v4015 = v13766.inWith;
      if (v4015) {
        identifier$$3.type = this.anyType;
      } else {
        var typespace$$24 = this.inTypeRefTypeCheck;
        var idText$$4 = identifier$$3.text;
        var originalIdText$$1 = idText$$4;
        var v3995 = identifier$$3.text;
        var isDynamicModuleName = TypeScript$$25.isQuoted(v3995);
        var v3996 = this.scope;
        var symbol$$18 = v3996.find(idText$$4, false, typespace$$24);
        var v13767 = symbol$$18 == null;
        if (v13767) {
          v13767 = isDynamicModuleName;
        }
        var v3999 = v13767;
        if (v3999) {
          var v3997 = this.checker;
          var v19499 = this.currentScript;
          var v13768 = v19499.locationInfo;
          var v3998 = v13768.filename;
          symbol$$18 = v3997.findSymbolForDynamicModule(idText$$4, v3998, v1027);
        }
        var v4014 = !symbol$$18;
        if (v4014) {
          var v13769 = identifier$$3.isMissing();
          var v4002 = !v13769;
          if (v4002) {
            var v13770 = this.checker;
            var v4000 = v13770.errorReporter;
            var v4001 = identifier$$3.text;
            v4000.unresolvedSymbol(identifier$$3, v4001);
          }
          identifier$$3.type = this.anyType;
        } else {
          var v19500 = TypeScript$$25.optimizeModuleCodeGen;
          if (v19500) {
            v19500 = symbol$$18;
          }
          var v13771 = v19500;
          if (v13771) {
            v13771 = symbol$$18.isType();
          }
          var v4006 = v13771;
          if (v4006) {
            var symType$$2 = symbol$$18.getType();
            var v19501 = symType$$2;
            if (v19501) {
              v19501 = symbol$$18.aliasLink;
            }
            var v13772 = v19501;
            if (v13772) {
              v13772 = symbol$$18.onlyReferencedAsTypeRef;
            }
            var v4005 = v13772;
            if (v4005) {
              var v4003 = symType$$2.symbol;
              var modDecl$$2 = v4003.declAST;
              var v13773 = modDecl$$2;
              if (v13773) {
                var v19502 = modDecl$$2.modFlags;
                var v23254 = TypeScript$$25.ModuleFlags;
                var v19503 = v23254.IsDynamic;
                v13773 = TypeScript$$25.hasFlag(v19502, v19503);
              }
              var v4004 = v13773;
              if (v4004) {
                symbol$$18.onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;
              }
            }
          }
          var v23255 = symbol$$18.declAST;
          if (v23255) {
            var v25791 = symbol$$18.declAST;
            var v25041 = v25791.nodeType;
            var v25792 = TypeScript$$25.NodeType;
            var v25042 = v25792.FuncDecl;
            v23255 = v25041 == v25042;
          }
          var v19504 = v23255;
          if (v19504) {
            var v25043 = symbol$$18.declAST;
            var v23256 = v25043.returnTypeAnnotation;
            v19504 = !v23256;
          }
          var v13774 = v19504;
          if (v13774) {
            var v25044 = symbol$$18.declAST;
            var v23257 = v25044.signature;
            var v19505 = v23257.typeCheckStatus;
            var v23258 = TypeScript$$25.TypeCheckStatus;
            var v19506 = v23258.Started;
            v13774 = v19505 == v19506;
          }
          var v4009 = v13774;
          if (v4009) {
            var v19507 = symbol$$18.declAST;
            var v13775 = v19507.type;
            var v4007 = v13775.symbol;
            var v19508 = v4007.flags;
            var v23259 = TypeScript$$25.SymbolFlags;
            var v19509 = v23259.RecursivelyReferenced;
            v4007.flags = v19508 | v19509;
            var v19510 = symbol$$18.declAST;
            var v13776 = v19510.signature;
            var v4008 = v13776.returnType;
            v4008.type = this.anyType;
          }
          this.setTypeFromSymbol(ast$$92, symbol$$18);
          identifier$$3.sym = symbol$$18;
          var v4013 = this.thisFnc;
          if (v4013) {
            var v19511 = this.thisFnc;
            var v13777 = v19511.type;
            if (v13777) {
              var v19512 = symbol$$18.container;
              var v25045 = this.thisFnc;
              var v23260 = v25045.type;
              var v19513 = v23260.symbol;
              v13777 = v19512 != v19513;
            }
            var v4012 = v13777;
            if (v4012) {
              var v13778 = this.thisFnc;
              var v4010 = v13778.freeVariables;
              var v19514 = this.thisFnc;
              var v13779 = v19514.freeVariables;
              var v4011 = v13779.length;
              v4010[v4011] = symbol$$18;
            }
          }
        }
      }
      return ast$$92;
    }
    function v1026(ast$$91, symbol$$17) {
      var v4031 = symbol$$17.isVariable();
      if (v4031) {
        var v4022 = symbol$$17.isInferenceSymbol();
        if (v4022) {
          var infSym$$1 = symbol$$17;
          var v13780 = infSym$$1.declAST;
          if (v13780) {
            var v23261 = this.checker;
            var v23262 = infSym$$1.typeCheckStatus;
            var v19515 = v23261.typeStatusIsFinished(v23262);
            v13780 = !v19515;
          }
          var v4017 = v13780;
          if (v4017) {
            var v4016 = infSym$$1.declAST;
            this.inScopeTypeCheckDecl(v4016);
          }
          var v23263 = this.checker;
          var v19516 = v23263.styleSettings;
          var v13781 = v19516.innerScopeDeclEscape;
          var v4021 = !v13781;
          if (v4021) {
            var v13782 = infSym$$1.declAST;
            if (v13782) {
              var v23264 = infSym$$1.declAST;
              var v19517 = v23264.nodeType;
              var v23265 = TypeScript$$25.NodeType;
              var v19518 = v23265.VarDecl;
              v13782 = v19517 == v19518;
            }
            var v4020 = v13782;
            if (v4020) {
              var v13783 = this.nestingLevel;
              var v19519 = infSym$$1.declAST;
              var v13784 = v19519.nestingLevel;
              var v4019 = v13783 < v13784;
              if (v4019) {
                var v13785 = this.checker;
                var v4018 = v13785.errorReporter;
                v4018.styleError(ast$$91, "Illegal reference to a variable defined in more nested scope");
              }
            }
          }
        }
        var v26551 = symbol$$17.getType();
        ast$$91.type = v26551;
        var v13786 = symbol$$17.writeable();
        var v4025 = !v13786;
        if (v4025) {
          var v4023 = ast$$91.flags;
          var v19520 = TypeScript$$25.ASTFlags;
          var v13787 = v19520.Writeable;
          var v4024 = ~v13787;
          ast$$91.flags = v4023 & v4024;
        }
      } else {
        var v4030 = symbol$$17.isType();
        if (v4030) {
          var v26552 = symbol$$17.getType();
          ast$$91.type = v26552;
          var v4026 = ast$$91.flags;
          var v19521 = TypeScript$$25.ASTFlags;
          var v13788 = v19521.Writeable;
          var v4027 = ~v13788;
          ast$$91.flags = v4026 & v4027;
        } else {
          ast$$91.type = this.anyType;
          var v13789 = this.checker;
          var v4028 = v13789.errorReporter;
          var v4029 = symbol$$17.name;
          v4028.symbolDoesNotReferToAValue(ast$$91, v4029);
        }
      }
      return;
    }
    function v1025(ast$$90) {
      ast$$90.type = this.anyType;
      var illegalThisRef = false;
      var v13790 = this.thisFnc;
      var v4039 = v13790 == null;
      if (v4039) {
        var v4035 = this.thisType;
        if (v4035) {
          var v13791 = this.thisClassNode;
          if (v13791) {
            var v23266 = this.thisClassNode;
            var v19522 = v23266.nodeType;
            var v23267 = TypeScript$$25.NodeType;
            var v19523 = v23267.ClassDeclaration;
            v13791 = v19522 == v19523;
          }
          var v4032 = v13791;
          if (v4032) {
            illegalThisRef = true;
          } else {
            ast$$90.type = this.thisType;
          }
        } else {
          var v13792 = this.checker;
          var v4034 = v13792.currentModDecl;
          if (v4034) {
            var v13793 = this.checker;
            var v4033 = v13793.errorReporter;
            v4033.simpleError(ast$$90, "'this' may not be referenced within module bodies");
          }
        }
      } else {
        var v13794 = this.thisClassNode;
        if (v13794) {
          var v25046 = this.thisFnc;
          var v23268 = v25046.fncFlags;
          var v25047 = TypeScript$$25.FncFlags;
          var v23269 = v25047.IsPropertyBound;
          var v19524 = TypeScript$$25.hasFlag(v23268, v23269);
          var v23271 = !v19524;
          if (v23271) {
            var v23270 = this.inSuperCall;
            if (v23270) {
              var v25793 = this.thisClassNode;
              var v25048 = v25793.varFlags;
              var v25794 = TypeScript$$25.VarFlags;
              var v25049 = v25794.ClassSuperMustBeFirstCallInConstructor;
              v23270 = TypeScript$$25.hasFlag(v25048, v25049);
            }
            v19524 = v23270;
          }
          v13794 = v19524;
        }
        var v4036 = v13794;
        if (v4036) {
          illegalThisRef = true;
        }
        var v23272 = this.thisFnc;
        var v19525 = v23272.isMethod();
        var v23274 = !v19525;
        if (v23274) {
          var v23273 = this.thisFnc;
          v19525 = v23273.isConstructor;
        }
        var v13795 = v19525;
        var v19527 = !v13795;
        if (v19527) {
          var v19526 = this.thisFnc;
          v13795 = v19526.isTargetTypedAsMethod;
        }
        var v4038 = v13795;
        if (v4038) {
          var v13796 = this.thisType;
          if (v13796) {
            var v25050 = this.thisFnc;
            var v23275 = v25050.fncFlags;
            var v25051 = TypeScript$$25.FncFlags;
            var v23276 = v25051.Static;
            var v19528 = v23275 & v23276;
            v13796 = !v19528;
          }
          var v4037 = v13796;
          if (v4037) {
            ast$$90.type = this.thisType;
          }
        }
      }
      var v23277 = this.enclosingFncIsMethod;
      var v19529 = !v23277;
      if (v19529) {
        v19529 = this.thisFnc;
      }
      var v13797 = v19529;
      if (v13797) {
        var v23278 = this.thisFnc;
        var v19530 = v23278.fncFlags;
        var v23279 = TypeScript$$25.FncFlags;
        var v19531 = v23279.IsFatArrowFunction;
        v13797 = TypeScript$$25.hasFlag(v19530, v19531);
      }
      var v4055 = v13797;
      if (v4055) {
        var v13798 = this.thisFnc;
        var v4054 = v13798.boundToProperty;
        if (v4054) {
          var v19532 = this.thisFnc;
          var v13799 = v19532.boundToProperty;
          var v4040 = v13799.sym;
          var container$$17 = v4040.container;
          var v19533 = container$$17.declAST;
          var v13800 = v19533.nodeType;
          var v19534 = TypeScript$$25.NodeType;
          var v13801 = v19534.FuncDecl;
          var v4042 = v13800 == v13801;
          if (v4042) {
            var v4041 = container$$17.declAST;
            v4041.setHasSelfReference();
          }
        } else {
          var v4043 = this.thisFnc;
          var encFnc = v4043.enclosingFnc;
          var firstEncFnc = encFnc;
          for (;encFnc;) {
            var v13802 = this.thisClassNode;
            if (v13802) {
              var v19535 = encFnc.fncFlags;
              var v23280 = TypeScript$$25.FncFlags;
              var v19536 = v23280.IsPropertyBound;
              v13802 = TypeScript$$25.hasFlag(v19535, v19536);
            }
            var v4044 = v13802;
            if (v4044) {
              illegalThisRef = true;
            }
            var v23281 = encFnc.fncFlags;
            var v25052 = TypeScript$$25.FncFlags;
            var v23282 = v25052.IsFatArrowFunction;
            var v19537 = TypeScript$$25.hasFlag(v23281, v23282);
            var v13803 = !v19537;
            var v19538 = !v13803;
            if (v19538) {
              v13803 = encFnc.hasSelfReference();
            }
            var v4045 = v13803;
            if (v4045) {
              encFnc.setHasSelfReference();
              break;
            }
            encFnc = encFnc.enclosingFnc;
          }
          var v13804 = !encFnc;
          if (v13804) {
            v13804 = firstEncFnc;
          }
          var v4052 = v13804;
          if (v4052) {
            encFnc = firstEncFnc;
            encFnc.setHasSelfReference();
          } else {
            var v4051 = !encFnc;
            if (v4051) {
              var v4050 = this.thisClassNode;
              if (v4050) {
                var v4046 = this.thisClassNode;
                var v19539 = v4046.varFlags;
                var v23283 = TypeScript$$25.VarFlags;
                var v19540 = v23283.MustCaptureThis;
                v4046.varFlags = v19539 | v19540;
              } else {
                var v13805 = this.checker;
                var v4049 = v13805.currentModDecl;
                if (v4049) {
                  var v13806 = this.checker;
                  var v4047 = v13806.currentModDecl;
                  var v19541 = v4047.modFlags;
                  var v23284 = TypeScript$$25.ModuleFlags;
                  var v19542 = v23284.MustCaptureThis;
                  v4047.modFlags = v19541 | v19542;
                } else {
                  var v4048 = this.checker;
                  v4048.mustCaptureGlobalThis = true;
                }
              }
            }
          }
          var v23285 = encFnc;
          if (v23285) {
            var v25053 = encFnc.isMethod();
            var v25795 = !v25053;
            if (v25795) {
              v25053 = encFnc.isConstructor;
            }
            v23285 = v25053;
          }
          var v19543 = v23285;
          if (v19543) {
            v19543 = this.thisType;
          }
          var v13807 = v19543;
          if (v13807) {
            var v23286 = encFnc.fncFlags;
            var v25054 = TypeScript$$25.FncFlags;
            var v23287 = v25054.Static;
            var v19544 = TypeScript$$25.hasFlag(v23286, v23287);
            v13807 = !v19544;
          }
          var v4053 = v13807;
          if (v4053) {
            ast$$90.type = this.thisType;
          }
        }
      }
      if (illegalThisRef) {
        var v13808 = this.checker;
        var v4056 = v13808.errorReporter;
        v4056.simpleError(ast$$90, "Keyword 'this' cannot be referenced in initializers in a class body, or in super constructor calls");
      }
      return ast$$90;
    }
    function v1024(ast$$89) {
      var v19545 = this.thisType;
      if (v19545) {
        var v23288 = this.enclosingFncIsMethod;
        if (v23288) {
          var v25796 = this.thisFnc;
          var v25055 = v25796.isStatic();
          v23288 = !v25055;
        }
        v19545 = v23288;
      }
      var v13809 = v19545;
      if (v13809) {
        var v19546 = this.thisType;
        v13809 = v19546.baseClass();
      }
      var v4064 = v13809;
      if (v4064) {
        var v4057 = this.thisType;
        var v26553 = v4057.baseClass();
        ast$$89.type = v26553;
      } else {
        var v25797 = this.enclosingFncIsMethod;
        var v25056 = !v25797;
        if (v25056) {
          v25056 = this.thisType;
        }
        var v23289 = v25056;
        if (v23289) {
          var v25057 = this.thisType;
          v23289 = v25057.baseClass();
        }
        var v19547 = v23289;
        if (v19547) {
          v19547 = this.thisFnc;
        }
        var v13810 = v19547;
        if (v13810) {
          var v23290 = this.thisFnc;
          var v19548 = v23290.fncFlags;
          var v23291 = TypeScript$$25.FncFlags;
          var v19549 = v23291.IsFatArrowFunction;
          v13810 = TypeScript$$25.hasFlag(v19548, v19549);
        }
        var v4062 = v13810;
        if (v4062) {
          var v4058 = this.thisFnc;
          var enclosingFnc = v4058.enclosingFnc;
          var v13811 = enclosingFnc.fncFlags;
          var v19550 = TypeScript$$25.FncFlags;
          var v13812 = v19550.IsFatArrowFunction;
          var v4059 = TypeScript$$25.hasFlag(v13811, v13812);
          for (;v4059;) {
            enclosingFnc = enclosingFnc.enclosingFnc;
            var v13813 = enclosingFnc.fncFlags;
            var v19551 = TypeScript$$25.FncFlags;
            var v13814 = v19551.IsFatArrowFunction;
            v4059 = TypeScript$$25.hasFlag(v13813, v13814);
          }
          var v19552 = enclosingFnc;
          if (v19552) {
            var v23292 = enclosingFnc.isMethod();
            var v25058 = !v23292;
            if (v25058) {
              v23292 = enclosingFnc.isConstructor;
            }
            v19552 = v23292;
          }
          var v13815 = v19552;
          if (v13815) {
            var v19553 = enclosingFnc.isStatic();
            v13815 = !v19553;
          }
          var v4061 = v13815;
          if (v4061) {
            var v4060 = this.thisType;
            var v26554 = v4060.baseClass();
            ast$$89.type = v26554;
            enclosingFnc.setHasSuperReferenceInFatArrowFunction();
            return ast$$89;
          }
        }
        ast$$89.type = this.anyType;
        var v13816 = this.checker;
        var v4063 = v13816.errorReporter;
        v4063.invalidSuperReference(ast$$89);
      }
      return ast$$89;
    }
    function v1023(varDecl$$17, typeName$$2, isModuleName$$1) {
      var typestring = "";
      if (isModuleName$$1) {
        var quotestring = "";
        var v13817 = TypeScript$$25.isQuoted(typeName$$2);
        var v4065 = !v13817;
        if (v4065) {
          quotestring = "'";
        }
        var v13818 = " is using inaccessible module " + quotestring;
        var v4066 = v13818 + typeName$$2;
        typestring = v4066 + quotestring;
      } else {
        var v4067 = " has or is using private type '" + typeName$$2;
        typestring = v4067 + "'";
      }
      var v13819 = varDecl$$17.varFlags;
      var v19554 = TypeScript$$25.VarFlags;
      var v13820 = v19554.Public;
      var v4075 = TypeScript$$25.hasFlag(v13819, v13820);
      if (v4075) {
        var v25059 = varDecl$$17.sym;
        var v23293 = v25059.container;
        var v19555 = v23293.declAST;
        var v13821 = v19555.nodeType;
        var v19556 = TypeScript$$25.NodeType;
        var v13822 = v19556.InterfaceDeclaration;
        var v4072 = v13821 == v13822;
        if (v4072) {
          var v13823 = this.checker;
          var v4068 = v13823.errorReporter;
          var v25060 = varDecl$$17.sym;
          var v23294 = v25060.name;
          var v19557 = "property '" + v23294;
          var v13824 = v19557 + "' of exported interface";
          var v4069 = v13824 + typestring;
          v4068.simpleError(varDecl$$17, v4069);
        } else {
          var v13825 = this.checker;
          var v4070 = v13825.errorReporter;
          var v25061 = varDecl$$17.sym;
          var v23295 = v25061.name;
          var v19558 = "public member '" + v23295;
          var v13826 = v19558 + "' of exported class";
          var v4071 = v13826 + typestring;
          v4070.simpleError(varDecl$$17, v4071);
        }
      } else {
        var v13827 = this.checker;
        var v4073 = v13827.errorReporter;
        var v25062 = varDecl$$17.sym;
        var v23296 = v25062.name;
        var v19559 = "exported variable '" + v23296;
        var v13828 = v19559 + "'";
        var v4074 = v13828 + typestring;
        v4073.simpleError(varDecl$$17, v4074);
      }
      return;
    }
    function v1022(varDecl$$16) {
      function v1021(typeName$$1, isModuleName) {
        return _this$$6.varPrivacyErrorReporter(varDecl$$16, typeName$$1, isModuleName);
      }
      function v1020(ast$$88, parent$$65, walker$$49) {
        var v13829 = ast$$88;
        if (v13829) {
          var v19560 = ast$$88.nodeType;
          var v23297 = TypeScript$$25.NodeType;
          var v19561 = v23297.FuncDecl;
          v13829 = v19560 == v19561;
        }
        var v4078 = v13829;
        if (v4078) {
          var v13830 = ast$$88.fncFlags;
          var v19562 = TypeScript$$25.FncFlags;
          var v13831 = v19562.IsFatArrowFunction;
          var v4076 = TypeScript$$25.hasFlag(v13830, v13831);
          if (v4076) {
            var v13832 = ast$$88.fncFlags;
            var v19563 = TypeScript$$25.FncFlags;
            var v13833 = v19563.IsPropertyBound;
            ast$$88.fncFlags = v13832 | v13833;
          }
          var v4077 = walker$$49.options;
          v4077.goChildren = false;
        }
        return ast$$88;
      }
      var _this$$6 = this;
      var infSym = varDecl$$16.sym;
      var v4128 = infSym == null;
      if (v4128) {
        var v4083 = varDecl$$16.init;
        if (v4083) {
          var v4079 = varDecl$$16;
          var v13834 = varDecl$$16.init;
          var v26555 = this.typeCheck(v13834);
          v4079.init = v26555;
          var v4080 = varDecl$$16;
          var v13835 = this.checker;
          var v19564 = varDecl$$16.init;
          var v13836 = v19564.type;
          var v26556 = v13835.widenType(v13836);
          v4080.type = v26556;
        } else {
          var v19565 = this.checker;
          var v13837 = v19565.styleSettings;
          var v4082 = v13837.implicitAny;
          if (v4082) {
            var v13838 = this.checker;
            var v4081 = v13838.errorReporter;
            v4081.styleError(varDecl$$16, "type implicitly set to 'any'");
          }
          varDecl$$16.type = this.anyType;
        }
      } else {
        var v13839 = infSym.typeCheckStatus;
        var v19566 = TypeScript$$25.TypeCheckStatus;
        var v13840 = v19566.Started;
        var v4127 = v13839 == v13840;
        if (v4127) {
          var v19567 = this.checker;
          var v13841 = v19567.styleSettings;
          var v4085 = v13841.implicitAny;
          if (v4085) {
            var v13842 = this.checker;
            var v4084 = v13842.errorReporter;
            v4084.styleError(varDecl$$16, "type implicitly set to 'any'");
          }
          varDecl$$16.type = this.anyType;
          var v4086 = this.anyType;
          infSym.setType(v4086);
        } else {
          var v13843 = infSym.typeCheckStatus;
          var v19568 = TypeScript$$25.TypeCheckStatus;
          var v13844 = v19568.NotStarted;
          var v4126 = v13843 == v13844;
          if (v4126) {
            var v4087 = TypeScript$$25.TypeCheckStatus;
            infSym.typeCheckStatus = v4087.Started;
            var v4088 = this.checker;
            v4088.addStartedPTO(infSym);
            var resolved$$1 = false;
            var v13845 = varDecl$$16.type;
            var v4092 = v13845 == null;
            if (v4092) {
              var v4091 = varDecl$$16.typeExpr;
              if (v4091) {
                this.resolveBoundDecl(varDecl$$16);
                resolved$$1 = true;
                var v4089 = varDecl$$16.typeExpr;
                varDecl$$16.type = v4089.type;
                var v4090 = infSym;
                var v13846 = this.checker;
                var v26557 = v13846.getTypeCheckFinishedStatus();
                v4090.typeCheckStatus = v26557;
              }
            }
            var v4119 = varDecl$$16.init;
            if (v4119) {
              var v4093 = varDecl$$16.varFlags;
              var v13847 = TypeScript$$25.VarFlags;
              var v4094 = v13847.LocalStatic;
              var isLocalStatic = TypeScript$$25.hasFlag(v4093, v4094);
              var prevScope$$3 = this.scope;
              var v13848 = varDecl$$16.init;
              var v4095 = v13848.isParenthesized;
              var applyTargetType$$1 = !v4095;
              if (isLocalStatic) {
                var v19569 = varDecl$$16.sym;
                var v13849 = v19569.container;
                var v4096 = v13849.getType();
                this.scope = v4096.memberScope;
              }
              var v19570 = varDecl$$16.varFlags;
              var v23298 = TypeScript$$25.VarFlags;
              var v19571 = v23298.Property;
              var v13850 = TypeScript$$25.hasFlag(v19570, v19571);
              if (v13850) {
                v13850 = this.thisClassNode;
              }
              var v4099 = v13850;
              if (v4099) {
                var v4097 = TypeScript$$25.getAstWalkerFactory();
                var v4098 = varDecl$$16.init;
                v4097.walk(v4098, v1020);
              }
              var v4100 = this.checker;
              var v4101 = varDecl$$16.type;
              var v13851 = this.checker;
              var v4102 = v13851.inProvisionalTypecheckMode();
              var v4103 = varDecl$$16.init;
              v4100.typeCheckWithContextualType(v4101, v4102, applyTargetType$$1, v4103);
              this.scope = prevScope$$3;
              var v4116 = varDecl$$16.type;
              if (v4116) {
                var preserveScope = false;
                var preservedContainedScope = null;
                var v13852 = varDecl$$16.init;
                var v4108 = v13852.type;
                if (v4108) {
                  var v13853 = varDecl$$16.init;
                  var v4104 = v13853.type;
                  preservedContainedScope = v4104.containedScope;
                  preserveScope = true;
                  var v19572 = varDecl$$16.init;
                  var v13854 = v19572.type;
                  var v13855 = this.voidType;
                  var v4107 = v13854 == v13855;
                  if (v4107) {
                    var v13856 = this.checker;
                    var v4105 = v13856.errorReporter;
                    var v23299 = varDecl$$16.id;
                    var v19573 = v23299.actualText;
                    var v13857 = "Cannot assign type 'void' to variable '" + v19573;
                    var v4106 = v13857 + "'";
                    v4105.simpleError(varDecl$$16, v4106);
                  }
                }
                var v4109 = varDecl$$16;
                var v13858 = varDecl$$16.init;
                var v13859 = varDecl$$16.type;
                var v19574 = applyTargetType$$1;
                if (v19574) {
                  var v25063 = this.checker;
                  var v23300 = v25063.inProvisionalTypecheckMode();
                  v19574 = !v23300;
                }
                var v13860 = v19574;
                var v26558 = this.castWithCoercion(v13858, v13859, v13860, false);
                v4109.init = v26558;
                var v13861 = preserveScope;
                if (v13861) {
                  var v25064 = varDecl$$16.init;
                  var v23301 = v25064.type;
                  var v19575 = v23301.containedScope;
                  v13861 = v19575 == null;
                }
                var v4111 = v13861;
                if (v4111) {
                  var v13862 = varDecl$$16.init;
                  var v4110 = v13862.type;
                  v4110.containedScope = preservedContainedScope;
                }
              } else {
                var v4112 = varDecl$$16;
                var v13863 = this.checker;
                var v19576 = varDecl$$16.init;
                var v13864 = v19576.type;
                var v26559 = v13863.widenType(v13864);
                v4112.type = v26559;
                var v13865 = varDecl$$16.type;
                var v13866 = this.voidType;
                var v4115 = v13865 == v13866;
                if (v4115) {
                  var v13867 = this.checker;
                  var v4113 = v13867.errorReporter;
                  var v23302 = varDecl$$16.id;
                  var v19577 = v23302.actualText;
                  var v13868 = "Cannot assign type 'void' to variable '" + v19577;
                  var v4114 = v13868 + "'";
                  v4113.simpleError(varDecl$$16, v4114);
                  varDecl$$16.type = this.anyType;
                }
              }
              var v4117 = varDecl$$16.type;
              infSym.setType(v4117);
            } else {
              var v4118 = !resolved$$1;
              if (v4118) {
                this.resolveBoundDecl(varDecl$$16);
              }
            }
            var v4120 = infSym;
            var v13869 = this.checker;
            var v26560 = v13869.getTypeCheckFinishedStatus();
            v4120.typeCheckStatus = v26560;
          } else {
            var v19578 = this.checker;
            var v19579 = infSym.typeCheckStatus;
            var v13870 = v19578.typeStatusIsFinished(v19579);
            if (v13870) {
              var v19580 = infSym.declAST;
              v13870 = v19580 != varDecl$$16;
            }
            var v4125 = v13870;
            if (v4125) {
              var v4124 = varDecl$$16.init;
              if (v4124) {
                var v4121 = varDecl$$16;
                var v13871 = varDecl$$16.init;
                var v26561 = this.typeCheck(v13871);
                v4121.init = v26561;
                var v4122 = varDecl$$16;
                var v26562 = infSym.getType();
                v4122.type = v26562;
                var v4123 = varDecl$$16;
                var v13872 = varDecl$$16.init;
                var v13873 = varDecl$$16.type;
                var v26563 = this.cast(v13872, v13873);
                v4123.init = v26563;
              }
            }
          }
        }
      }
      var v13874 = varDecl$$16.id;
      if (v13874) {
        v13874 = varDecl$$16.sym;
      }
      var v4130 = v13874;
      if (v4130) {
        var v4129 = varDecl$$16.id;
        v4129.sym = varDecl$$16.sym;
      }
      var v13875 = varDecl$$16.sym;
      if (v13875) {
        var v19581 = varDecl$$16.sym;
        v13875 = v19581.container;
      }
      var v4133 = v13875;
      if (v4133) {
        var v13876 = varDecl$$16.sym;
        var v4131 = v13876.getType();
        var v4132 = varDecl$$16.sym;
        this.checkTypePrivacy(v4131, v4132, v1021);
      }
      return varDecl$$16;
    }
    function v1019(varDecl$$15) {
      var v4150 = varDecl$$15.typeExpr;
      if (v4150) {
        var v25798 = varDecl$$15.typeExpr;
        var v25065 = v25798.type;
        var v23303 = v25065 == null;
        var v25067 = !v23303;
        if (v25067) {
          var v26117 = varDecl$$15.typeExpr;
          var v25799 = v26117.type;
          if (v25799) {
            var v26280 = varDecl$$15.typeExpr;
            var v26118 = v26280.type;
            var v26119 = this.anyType;
            v25799 = v26118 == v26119;
          }
          var v25066 = v25799;
          if (v25066) {
            v25066 = this.scope;
          }
          v23303 = v25066;
        }
        var v19582 = v23303;
        var v23305 = !v19582;
        if (v23305) {
          var v25800 = varDecl$$15.typeExpr;
          var v25068 = v25800.type;
          var v23304 = v25068.symbol;
          v19582 = v23304 == null;
        }
        var v13877 = v19582;
        var v19584 = !v13877;
        if (v19584) {
          var v23306 = this.checker;
          var v26120 = varDecl$$15.typeExpr;
          var v25801 = v26120.type;
          var v25069 = v25801.symbol;
          var v23307 = v25069.typeCheckStatus;
          var v19583 = v23306.typeStatusIsFinished(v23307);
          v13877 = !v19583;
        }
        var v4135 = v13877;
        if (v4135) {
          var v4134 = varDecl$$15.typeExpr;
          this.typeCheck(v4134);
        }
        var v4136 = varDecl$$15.typeExpr;
        varDecl$$15.type = v4136.type;
        var v4139 = varDecl$$15.sym;
        if (v4139) {
          var v4137 = varDecl$$15.sym;
          var v4138 = varDecl$$15.type;
          v4137.setType(v4138);
        }
      } else {
        var v13878 = varDecl$$15.init;
        var v4149 = v13878 == null;
        if (v4149) {
          var v19585 = this.checker;
          var v13879 = v19585.styleSettings;
          var v4141 = v13879.implicitAny;
          if (v4141) {
            var v13880 = this.checker;
            var v4140 = v13880.errorReporter;
            v4140.styleError(varDecl$$15, "type implicitly set to 'any'");
          }
          varDecl$$15.type = this.anyType;
          var v4148 = varDecl$$15.sym;
          if (v4148) {
            var v13881 = varDecl$$15.sym;
            var v4145 = v13881.isType();
            if (v4145) {
              var tsym$$1 = varDecl$$15.sym;
              var v4144 = tsym$$1.isMethod;
              if (v4144) {
                var v13882 = this.checker;
                var v4142 = v13882.errorReporter;
                v4142.simpleError(varDecl$$15, "Cannot bind method group to variable.  (Did you mean to use 'declare function' instead of 'declare var'?)");
                return;
              } else {
                var v13883 = this.checker;
                var v4143 = v13883.errorReporter;
                v4143.simpleError(varDecl$$15, "Cannot bind type to variable");
                return;
              }
            }
            var v4146 = varDecl$$15.sym;
            var v4147 = varDecl$$15.type;
            v4146.setType(v4147);
          }
        }
      }
      return;
    }
    function v1018(varDecl$$14) {
      var sym$$34 = varDecl$$14.sym;
      var svThisFnc$$1 = this.thisFnc;
      var svThisType$$1 = this.thisType;
      var prevMethodStatus$$1 = this.enclosingFncIsMethod;
      var v4151 = this.checker;
      var prevLocationInfo$$1 = v4151.locationInfo;
      var v13884 = sym$$34;
      if (v13884) {
        v13884 = sym$$34.container;
      }
      var v4161 = v13884;
      if (v4161) {
        var v4152;
        var v19586 = varDecl$$14.varFlags;
        var v23308 = TypeScript$$25.VarFlags;
        var v19587 = v23308.ClassConstructorProperty;
        var v13887 = TypeScript$$25.hasFlag(v19586, v19587);
        if (v13887) {
          var v19588 = sym$$34.container;
          var v13885 = v19588.getType();
          v4152 = v13885.constructorScope;
        } else {
          var v13886 = sym$$34.container;
          v4152 = v13886.instanceScope();
        }
        var instanceScope = v4152;
        var v19589 = varDecl$$14.varFlags;
        var v23309 = TypeScript$$25.VarFlags;
        var v19590 = v23309.Property;
        var v13888 = TypeScript$$25.hasFlag(v19589, v19590);
        if (v13888) {
          var v25070 = sym$$34.container;
          var v23310 = v25070.declAST;
          var v19591 = v23310.nodeType;
          var v23311 = TypeScript$$25.NodeType;
          var v19592 = v23311.FuncDecl;
          v13888 = v19591 == v19592;
        }
        var v4154 = v13888;
        if (v4154) {
          var v4153 = sym$$34.container;
          this.thisFnc = v4153.declAST;
        }
        if (instanceScope) {
          var prevScope$$2 = this.scope;
          this.scope = instanceScope;
          var container$$16 = sym$$34.container;
          var v23312 = this.checker;
          var v19593 = v23312.units;
          if (v19593) {
            var v23313 = sym$$34.unitIndex;
            v19593 = v23313 >= 0;
          }
          var v13889 = v19593;
          if (v13889) {
            var v19594 = sym$$34.unitIndex;
            var v25071 = this.checker;
            var v23314 = v25071.units;
            var v19595 = v23314.length;
            v13889 = v19594 < v19595;
          }
          var v4157 = v13889;
          if (v4157) {
            var v4155 = this.checker;
            var v19596 = this.checker;
            var v13890 = v19596.units;
            var v13891 = sym$$34.unitIndex;
            v4155.locationInfo = v13890[v13891];
          } else {
            var v4156 = this.checker;
            v4156.locationInfo = TypeScript$$25.unknownLocationInfo;
          }
          for (;container$$16;) {
            var v13892 = container$$16.kind();
            var v19597 = TypeScript$$25.SymbolKind;
            var v13893 = v19597.Type;
            var v4160 = v13892 == v13893;
            if (v4160) {
              var typeSym$$3 = container$$16;
              var type$$49 = typeSym$$3.type;
              var v4158 = type$$49.call;
              if (v4158) {
                this.enclosingFncIsMethod = typeSym$$3.isMethod;
              }
              var v4159 = type$$49.isClass();
              if (v4159) {
                this.thisType = type$$49.instanceType;
                break;
              }
            }
            container$$16 = container$$16.container;
          }
          this.typeCheckBoundDecl(varDecl$$14);
          this.scope = prevScope$$2;
        }
      }
      this.thisFnc = svThisFnc$$1;
      this.thisType = svThisType$$1;
      var v4162 = this.checker;
      v4162.locationInfo = prevLocationInfo$$1;
      this.enclosingFncIsMethod = prevMethodStatus$$1;
      return;
    }
    function v1017(ast$$87) {
      var v19598 = ast$$87.nodeType;
      var v23315 = TypeScript$$25.NodeType;
      var v19599 = v23315.VarDecl;
      var v13894 = v19598 == v19599;
      var v19602 = !v13894;
      if (v19602) {
        var v19600 = ast$$87.nodeType;
        var v23316 = TypeScript$$25.NodeType;
        var v19601 = v23316.ArgDecl;
        v13894 = v19600 == v19601;
      }
      var v4165 = v13894;
      if (v4165) {
        this.inScopeTypeCheckBoundDecl(ast$$87);
      } else {
        var v13895 = ast$$87.nodeType;
        var v19603 = TypeScript$$25.NodeType;
        var v13896 = v19603.FuncDecl;
        var v4164 = v13895 == v13896;
        if (v4164) {
          var funcDecl$$23 = ast$$87;
          var v4163 = funcDecl$$23.isAccessor();
          if (v4163) {
            this.typeCheckFunction(funcDecl$$23);
          }
        }
      }
      return;
    }
    function v1016(ast$$86) {
      if (ast$$86) {
        return ast$$86.typeCheck(this);
      } else {
        return null;
      }
      return;
    }
    function v1015(ast$$85, enclosingScope) {
      var prevScope$$1 = this.scope;
      this.scope = enclosingScope;
      var svThisFnc = this.thisFnc;
      var svThisType = this.thisType;
      var svThisClassNode = this.thisClassNode;
      var v4166 = this.checker;
      var svCurrentModDecl = v4166.currentModDecl;
      var prevMethodStatus = this.enclosingFncIsMethod;
      var v4167 = this.scope;
      var container$$15 = v4167.container;
      var fnc$$1 = null;
      for (;container$$15;) {
        var v13897 = container$$15.kind();
        var v19604 = TypeScript$$25.SymbolKind;
        var v13898 = v19604.Type;
        var v4174 = v13897 == v13898;
        if (v4174) {
          var typeSym$$2 = container$$15;
          var type$$48 = typeSym$$2.type;
          var v4169 = type$$48.call;
          if (v4169) {
            var v4168 = fnc$$1 == null;
            if (v4168) {
              this.enclosingFncIsMethod = typeSym$$2.isMethod;
              fnc$$1 = container$$15.declAST;
            }
          }
          var v4171 = type$$48.isClass();
          if (v4171) {
            this.thisType = type$$48.instanceType;
            var v13899 = typeSym$$2.declAST;
            if (v13899) {
              var v23317 = typeSym$$2.declAST;
              var v19605 = v23317.nodeType;
              var v23318 = TypeScript$$25.NodeType;
              var v19606 = v23318.ClassDeclaration;
              v13899 = v19605 == v19606;
            }
            var v4170 = v13899;
            if (v4170) {
              this.thisClassNode = typeSym$$2.declAST;
            }
            break;
          }
          var v4173 = type$$48.isModuleType();
          if (v4173) {
            var v4172 = this.checker;
            v4172.currentModDecl = typeSym$$2.declAST;
            break;
          }
        }
        container$$15 = container$$15.container;
      }
      this.thisFnc = fnc$$1;
      var updated = this.typeCheck(ast$$85);
      this.thisFnc = svThisFnc;
      this.thisType = svThisType;
      this.thisClassNode = svThisClassNode;
      var v4175 = this.checker;
      v4175.currentModDecl = svCurrentModDecl;
      this.enclosingFncIsMethod = prevMethodStatus;
      this.scope = prevScope$$1;
      return updated;
    }
    function v1014(ast$$84, type$$47, applyCoercion, typeAssertion) {
      var v4176 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$12 = new v4176;
      var v19607 = this.checker;
      var v19608 = ast$$84.type;
      var v13900 = v19607.sourceIsAssignableToTarget(v19608, type$$47, comparisonInfo$$12);
      var v19610 = !v13900;
      if (v19610) {
        var v19609 = typeAssertion;
        if (v19609) {
          var v23319 = this.checker;
          var v23320 = ast$$84.type;
          v19609 = v23319.sourceIsAssignableToTarget(type$$47, v23320, comparisonInfo$$12);
        }
        v13900 = v19609;
      }
      var v4182 = v13900;
      if (v4182) {
        if (applyCoercion) {
          var v4178 = type$$47 == null;
          if (v4178) {
            ast$$84.type = this.anyType;
          } else {
            var v4177 = type$$47.isClass();
            if (v4177) {
              ast$$84.type = type$$47.instanceType;
            } else {
              ast$$84.type = type$$47;
            }
          }
        }
        return ast$$84;
      } else {
        var v13901 = this.checker;
        var v4179 = v13901.errorReporter;
        var v4180 = ast$$84.type;
        var v4181 = this.scope;
        v4179.incompatibleTypes(ast$$84, v4180, type$$47, null, v4181, comparisonInfo$$12);
        return ast$$84;
      }
      return;
    }
    function v1013(ast$$83, type$$46) {
      return this.castWithCoercion(ast$$83, type$$46, true, false);
    }
    function v1012() {
      var v4183 = this.globalScope;
      var arraySym = v4183.find("Array", false, true);
      var v13902 = arraySym;
      if (v13902) {
        var v19611 = arraySym.kind();
        var v23321 = TypeScript$$25.SymbolKind;
        var v19612 = v23321.Type;
        v13902 = v19611 == v19612;
      }
      var v4184 = v13902;
      if (v4184) {
        this.arrayInterfaceType = arraySym.type;
      }
      var v4185 = this.globalScope;
      var stringSym = v4185.find("String", false, true);
      var v13903 = stringSym;
      if (v13903) {
        var v19613 = stringSym.kind();
        var v23322 = TypeScript$$25.SymbolKind;
        var v19614 = v23322.Type;
        v13903 = v19613 == v19614;
      }
      var v4186 = v13903;
      if (v4186) {
        this.stringInterfaceType = stringSym.type;
      }
      var v4187 = this.globalScope;
      var objectSym = v4187.find("Object", false, true);
      var v13904 = objectSym;
      if (v13904) {
        var v19615 = objectSym.kind();
        var v23323 = TypeScript$$25.SymbolKind;
        var v19616 = v23323.Type;
        v13904 = v19615 == v19616;
      }
      var v4188 = v13904;
      if (v4188) {
        this.objectInterfaceType = objectSym.type;
      }
      var v4189 = this.globalScope;
      var fnSym = v4189.find("Function", false, true);
      var v13905 = fnSym;
      if (v13905) {
        var v19617 = fnSym.kind();
        var v23324 = TypeScript$$25.SymbolKind;
        var v19618 = v23324.Type;
        v13905 = v19617 == v19618;
      }
      var v4190 = v13905;
      if (v4190) {
        this.functionInterfaceType = fnSym.type;
      }
      var v4191 = this.globalScope;
      var numberSym = v4191.find("Number", false, true);
      var v13906 = numberSym;
      if (v13906) {
        var v19619 = numberSym.kind();
        var v23325 = TypeScript$$25.SymbolKind;
        var v19620 = v23325.Type;
        v13906 = v19619 == v19620;
      }
      var v4192 = v13906;
      if (v4192) {
        this.numberInterfaceType = numberSym.type;
      }
      var v4193 = this.globalScope;
      var booleanSym = v4193.find("Boolean", false, true);
      var v13907 = booleanSym;
      if (v13907) {
        var v19621 = booleanSym.kind();
        var v23326 = TypeScript$$25.SymbolKind;
        var v19622 = v23326.Type;
        v13907 = v19621 == v19622;
      }
      var v4194 = v13907;
      if (v4194) {
        this.booleanInterfaceType = booleanSym.type;
      }
      var v4195 = this.globalScope;
      var regexSym = v4195.find("RegExp", false, true);
      var v13908 = regexSym;
      if (v13908) {
        var v19623 = regexSym.kind();
        var v23327 = TypeScript$$25.SymbolKind;
        var v19624 = v23327.Type;
        v13908 = v19623 == v19624;
      }
      var v4196 = v13908;
      if (v4196) {
        this.regexType = regexSym.type;
      }
      return;
    }
    function TypeFlow$$1(logger$$4, initScope, parser$$2, checker$$17) {
      this.logger = logger$$4;
      this.initScope = initScope;
      this.parser = parser$$2;
      this.checker = checker$$17;
      this.thisFnc = null;
      this.thisClassNode = null;
      this.enclosingFncIsMethod = false;
      this.arrayInterfaceType = null;
      this.stringInterfaceType = null;
      this.objectInterfaceType = null;
      this.functionInterfaceType = null;
      this.numberInterfaceType = null;
      this.booleanInterfaceType = null;
      this.iargumentsInterfaceType = null;
      this.currentScript = null;
      this.inImportTypeCheck = false;
      this.inTypeRefTypeCheck = false;
      this.inArrayElementTypeCheck = false;
      var v26564 = new ResolutionDataCache;
      this.resolutionDataCache = v26564;
      this.nestingLevel = 0;
      this.inSuperCall = false;
      var v4197 = this.checker;
      v4197.typeFlow = this;
      this.scope = this.initScope;
      this.globalScope = this.initScope;
      var v4198 = this.checker;
      this.doubleType = v4198.numberType;
      var v4199 = this.checker;
      this.booleanType = v4199.booleanType;
      var v4200 = this.checker;
      this.stringType = v4200.stringType;
      var v4201 = this.checker;
      this.anyType = v4201.anyType;
      this.regexType = this.anyType;
      var v4202 = this.checker;
      this.nullType = v4202.nullType;
      var v4203 = this.checker;
      this.voidType = v4203.voidType;
      var v4204 = this.checker;
      var v4205 = this.anyType;
      var v26565 = v4204.makeArrayType(v4205);
      this.arrayAnyType = v26565;
      return;
    }
    var v4206 = TypeFlow$$1.prototype;
    v4206.initLibs = v1012;
    var v4207 = TypeFlow$$1.prototype;
    v4207.cast = v1013;
    var v4208 = TypeFlow$$1.prototype;
    v4208.castWithCoercion = v1014;
    var v4209 = TypeFlow$$1.prototype;
    v4209.inScopeTypeCheck = v1015;
    var v4210 = TypeFlow$$1.prototype;
    v4210.typeCheck = v1016;
    var v4211 = TypeFlow$$1.prototype;
    v4211.inScopeTypeCheckDecl = v1017;
    var v4212 = TypeFlow$$1.prototype;
    v4212.inScopeTypeCheckBoundDecl = v1018;
    var v4213 = TypeFlow$$1.prototype;
    v4213.resolveBoundDecl = v1019;
    var v4214 = TypeFlow$$1.prototype;
    v4214.typeCheckBoundDecl = v1022;
    var v4215 = TypeFlow$$1.prototype;
    v4215.varPrivacyErrorReporter = v1023;
    var v4216 = TypeFlow$$1.prototype;
    v4216.typeCheckSuper = v1024;
    var v4217 = TypeFlow$$1.prototype;
    v4217.typeCheckThis = v1025;
    var v4218 = TypeFlow$$1.prototype;
    v4218.setTypeFromSymbol = v1026;
    var v4219 = TypeFlow$$1.prototype;
    v4219.typeCheckName = v1028;
    var v4220 = TypeFlow$$1.prototype;
    v4220.typeCheckScript = v1029;
    var v4221 = TypeFlow$$1.prototype;
    v4221.typeCheckBitNot = v1030;
    var v4222 = TypeFlow$$1.prototype;
    v4222.typeCheckUnaryNumberOperator = v1031;
    var v4223 = TypeFlow$$1.prototype;
    v4223.typeCheckLogNot = v1032;
    var v4224 = TypeFlow$$1.prototype;
    v4224.astIsWriteable = v1033;
    var v4225 = TypeFlow$$1.prototype;
    v4225.typeCheckIncOrDec = v1034;
    var v4226 = TypeFlow$$1.prototype;
    v4226.typeCheckBitwiseOperator = v1035;
    var v4227 = TypeFlow$$1.prototype;
    v4227.typeCheckArithmeticOperator = v1036;
    var v4228 = TypeFlow$$1.prototype;
    v4228.typeCheckDotOperator = v1037;
    var v4229 = TypeFlow$$1.prototype;
    v4229.typeCheckBooleanOperator = v1038;
    var v4230 = TypeFlow$$1.prototype;
    v4230.typeCheckAsgOperator = v1039;
    var v4231 = TypeFlow$$1.prototype;
    v4231.typeCheckIndex = v1040;
    var v4232 = TypeFlow$$1.prototype;
    v4232.typeCheckInOperator = v1041;
    var v4233 = TypeFlow$$1.prototype;
    v4233.typeCheckShift = v1042;
    var v4234 = TypeFlow$$1.prototype;
    v4234.typeCheckQMark = v1043;
    var v4235 = TypeFlow$$1.prototype;
    v4235.addFormals = v1044;
    var v4236 = TypeFlow$$1.prototype;
    v4236.addLocalsFromScope = v1045;
    var v4237 = TypeFlow$$1.prototype;
    v4237.addConstructorLocalArgs = v1046;
    var v4238 = TypeFlow$$1.prototype;
    v4238.checkInitSelf = v1047;
    var v4239 = TypeFlow$$1.prototype;
    v4239.checkPromoteFreeVars = v1048;
    var v4240 = TypeFlow$$1.prototype;
    v4240.allReturnsAreVoid = v1050;
    var v4241 = TypeFlow$$1.prototype;
    v4241.classConstructorHasSuperCall = v1051;
    var v4242 = TypeFlow$$1.prototype;
    v4242.baseListPrivacyErrorReporter = v1052;
    var v4243 = TypeFlow$$1.prototype;
    v4243.typeCheckBaseListPrivacy = v1054;
    var v4244 = TypeFlow$$1.prototype;
    v4244.checkSymbolPrivacy = v1055;
    var v4245 = TypeFlow$$1.prototype;
    v4245.checkTypePrivacy = v1057;
    var v4246 = TypeFlow$$1.prototype;
    v4246.checkSignatureGroupPrivacy = v1058;
    var v4247 = TypeFlow$$1.prototype;
    v4247.functionArgumentPrivacyErrorReporter = v1059;
    var v4248 = TypeFlow$$1.prototype;
    v4248.returnTypePrivacyError = v1060;
    var v4249 = TypeFlow$$1.prototype;
    v4249.functionReturnTypePrivacyErrorReporter = v1061;
    var v4250 = TypeFlow$$1.prototype;
    v4250.typeCheckFunction = v1069;
    var v4251 = TypeFlow$$1.prototype;
    v4251.typeCheckBases = v1070;
    var v4252 = TypeFlow$$1.prototype;
    v4252.checkMembersImplementInterfaces = v1071;
    var v4253 = TypeFlow$$1.prototype;
    v4253.typeCheckBaseCalls = v1072;
    var v4254 = TypeFlow$$1.prototype;
    v4254.assertUniqueNamesInBaseTypes = v1074;
    var v4255 = TypeFlow$$1.prototype;
    v4255.checkBaseTypeMemberInheritance = v1076;
    var v4256 = TypeFlow$$1.prototype;
    v4256.typeCheckClass = v1077;
    var v4257 = TypeFlow$$1.prototype;
    v4257.typeCheckOverloadSignatures = v1078;
    var v4258 = TypeFlow$$1.prototype;
    v4258.typeCheckInterface = v1079;
    var v4259 = TypeFlow$$1.prototype;
    v4259.typeCheckImportDecl = v1080;
    var v4260 = TypeFlow$$1.prototype;
    v4260.typeCheckModule = v1081;
    var v4261 = TypeFlow$$1.prototype;
    v4261.typeCheckFor = v1082;
    var v4262 = TypeFlow$$1.prototype;
    v4262.typeCheckWith = v1083;
    var v4263 = TypeFlow$$1.prototype;
    v4263.typeCheckForIn = v1084;
    var v4264 = TypeFlow$$1.prototype;
    v4264.typeCheckWhile = v1085;
    var v4265 = TypeFlow$$1.prototype;
    v4265.typeCheckDoWhile = v1086;
    var v4266 = TypeFlow$$1.prototype;
    v4266.typeCheckCondExpr = v1087;
    var v4267 = TypeFlow$$1.prototype;
    v4267.typeCheckCompoundStmtBlock = v1088;
    var v4268 = TypeFlow$$1.prototype;
    v4268.typeCheckIf = v1089;
    var v4269 = TypeFlow$$1.prototype;
    v4269.typeFromAccessorFuncDecl = v1090;
    var v4270 = TypeFlow$$1.prototype;
    v4270.typeCheckObjectLit = v1091;
    var v4271 = TypeFlow$$1.prototype;
    v4271.typeCheckArrayLit = v1095;
    var v4272 = TypeFlow$$1.prototype;
    v4272.checkForVoidConstructor = v1096;
    var v4273 = TypeFlow$$1.prototype;
    v4273.typeCheckReturn = v1097;
    var v4274 = TypeFlow$$1.prototype;
    v4274.typeCheckInstOf = v1098;
    var v4275 = TypeFlow$$1.prototype;
    v4275.typeCheckCommaOperator = v1099;
    var v4276 = TypeFlow$$1.prototype;
    v4276.typeCheckLogOr = v1100;
    var v4277 = TypeFlow$$1.prototype;
    v4277.typeCheckLogAnd = v1101;
    var v4278 = TypeFlow$$1.prototype;
    v4278.tryAddCandidates = v1102;
    var v4279 = TypeFlow$$1.prototype;
    v4279.resolveOverload = v1103;
    var v4280 = TypeFlow$$1.prototype;
    v4280.typeCheckNew = v1104;
    var v4281 = TypeFlow$$1.prototype;
    v4281.preTypeCheckCallArgs = v1105;
    var v4282 = TypeFlow$$1.prototype;
    v4282.postTypeCheckCallArgs = v1106;
    var v4283 = TypeFlow$$1.prototype;
    v4283.typeCheckCall = v1107;
    var v4284 = TypeFlow$$1.prototype;
    v4284.assignScopes = v1108;
    var v4285 = TypeFlow$$1.prototype;
    v4285.findMemberScope = v1109;
    var v4286 = TypeFlow$$1.prototype;
    v4286.findMemberScopeAt = v1110;
    var v4287 = TypeFlow$$1.prototype;
    v4287.findMemberScopeAtFullAst = v1111;
    return TypeFlow$$1;
  }
  function v1011() {
    function v1010(rd$$1) {
      var v4288 = rd$$1.actuals;
      v4288.length = 0;
      var v4289 = rd$$1.exactCandidates;
      v4289.length = 0;
      var v4290 = rd$$1.conversionCandidates;
      v4290.length = 0;
      this.nextUp = rd$$1.id;
      return;
    }
    function v1009() {
      var rd = null;
      var v13909 = this.nextUp;
      var v13910 = this.cacheSize;
      var v4293 = v13909 < v13910;
      if (v4293) {
        var v4291 = this.rdCache;
        var v4292 = this.nextUp;
        rd = v4291[v4292];
      }
      var v4300 = rd == null;
      if (v4300) {
        this.cacheSize++;
        var v4294 = new Array;
        var v4295 = new Array;
        var v4296 = new Array;
        var v4297 = this.cacheSize;
        rd = {actuals:v4294, exactCandidates:v4295, conversionCandidates:v4296, id:v4297};
        var v4298 = this.rdCache;
        var v4299 = this.cacheSize;
        v4298[v4299] = rd;
      }
      this.nextUp++;
      return rd;
    }
    function ResolutionDataCache$$1() {
      this.cacheSize = 16;
      this.rdCache = [];
      this.nextUp = 0;
      var i$$92 = 0;
      var v13911 = this.cacheSize;
      var v4302 = i$$92 < v13911;
      for (;v4302;) {
        var v4301 = this.rdCache;
        var v13912 = new Array;
        var v13913 = new Array;
        var v13914 = new Array;
        v4301[i$$92] = {actuals:v13912, exactCandidates:v13913, conversionCandidates:v13914, id:i$$92};
        i$$92++;
        var v13915 = this.cacheSize;
        v4302 = i$$92 < v13915;
      }
      return;
    }
    var v4303 = ResolutionDataCache$$1.prototype;
    v4303.getResolutionData = v1009;
    var v4304 = ResolutionDataCache$$1.prototype;
    v4304.returnResolutionData = v1010;
    return ResolutionDataCache$$1;
  }
  function v1008() {
    function v1007(ast$$82) {
      var v4306 = this.current;
      if (v4306) {
        var v13916 = this.current;
        var v4305 = v13916.content;
        v4305.append(ast$$82);
      }
      return;
    }
    function v1006(target$$34, isContinue) {
      var targetBB = null;
      var i$$91 = 0;
      var v4307 = this.statementStack;
      var len$$41 = v4307.length;
      var v4310 = i$$91 < len$$41;
      for (;v4310;) {
        var v4308 = this.statementStack;
        var targetInfo$$5 = v4308[i$$91];
        var v13917 = targetInfo$$5.stmt;
        var v4309 = v13917 == target$$34;
        if (v4309) {
          if (isContinue) {
            targetBB = targetInfo$$5.continueBB;
          } else {
            targetBB = targetInfo$$5.breakBB;
          }
          break;
        }
        i$$91++;
        v4310 = i$$91 < len$$41;
      }
      if (targetBB) {
        var v4311 = this.current;
        v4311.addSuccessor(targetBB);
      }
      this.setUnreachable();
      return;
    }
    function v1005(ast$$81) {
      var v13918 = this.unreachable;
      var v4312 = v13918 === null;
      if (v4312) {
        var v26566 = new Array;
        this.unreachable = v26566;
      }
      var v4313 = this.unreachable;
      var v13919 = this.unreachable;
      var v4314 = v13919.length;
      v4313[v4314] = ast$$81;
      return;
    }
    function v1004() {
      this.current = null;
      this.noContinuation = true;
      return;
    }
    function v1003() {
      var v4315 = this.current;
      var v4316 = this.exit;
      v4315.addSuccessor(v4316);
      this.setUnreachable();
      return;
    }
    function v1002() {
      var v4317 = this.statementStack;
      return v4317.pop();
    }
    function v1001(stmt$$5, continueBB, breakBB) {
      var v4318 = this.statementStack;
      var v4319 = {stmt:stmt$$5, continueBB:continueBB, breakBB:breakBB};
      v4318.push(v4319);
      return;
    }
    function v1000(outfile$$14) {
      function node$$3(bb$$6) {
        var v13920 = bb$$6.index;
        var v4320 = v13920 < 0;
        if (v4320) {
          bb$$6.index = index$$56;
          index$$56 = index$$56 + 1;
        }
        var v13921 = _this$$5.exit;
        var v4323 = bb$$6 == v13921;
        if (v4323) {
          var v13922 = bb$$6.index;
          var v4321 = "Exit block with index " + v13922;
          outfile$$14.WriteLine(v4321);
        } else {
          var v13923 = bb$$6.index;
          var v4322 = "Basic block with index " + v13923;
          outfile$$14.WriteLine(v4322);
          _this$$5.printBlockContent(bb$$6, outfile$$14);
        }
        return;
      }
      function preEdges$$1() {
        outfile$$14.Write("  Branches to ");
        return;
      }
      function postEdges$$1() {
        outfile$$14.WriteLine("");
        return;
      }
      function edge(node1, node2) {
        var v13924 = node2.index;
        var v4324 = v13924 < 0;
        if (v4324) {
          node2.index = index$$56;
          index$$56 = index$$56 + 1;
        }
        var v13925 = node2.index;
        var v4325 = v13925 + " ";
        outfile$$14.Write(v4325);
        return;
      }
      var _this$$5 = this;
      var index$$56 = 0;
      this.bfs(node$$3, edge, preEdges$$1, postEdges$$1);
      var v13926 = this.unreachable;
      var v4329 = v13926 != null;
      if (v4329) {
        var i$$90 = 0;
        var v4326 = this.unreachable;
        var len$$40 = v4326.length;
        var v4328 = i$$90 < len$$40;
        for (;v4328;) {
          outfile$$14.WriteLine("Unreachable basic block ...");
          var v13927 = this.unreachable;
          var v4327 = v13927[i$$90];
          this.printAST(v4327, outfile$$14);
          i$$90++;
          v4328 = i$$90 < len$$40;
        }
      }
      return;
    }
    function v999(er$$1, funcSym) {
      function v998(index$$55) {
        var v4330 = useDefContext$$3.uses;
        var ast$$80 = v4330[index$$55];
        var v19625 = ast$$80.actualText;
        var v13928 = "use of variable '" + v19625;
        var v4331 = v13928 + "' that is not definitely assigned";
        er$$1.simpleError(ast$$80, v4331);
        return;
      }
      function useDefInit(bb$$5) {
        var v26567 = new BBUseDefInfo(bb$$5);
        bb$$5.useDef = v26567;
        var v4332 = bb$$5.useDef;
        v4332.initialize(useDefContext$$3);
        var v4333 = _this$$4.linearBBs;
        var v13929 = _this$$4.linearBBs;
        var v4334 = v13929.length;
        v4333[v4334] = bb$$5;
        return;
      }
      var _this$$4 = this;
      var useDefContext$$3 = new UseDefContext;
      useDefContext$$3.func = funcSym;
      this.bfs(useDefInit, null, null, null);
      var i$$89;
      var bbLen;
      i$$89 = 0;
      var v13930 = this.linearBBs;
      bbLen = v13930.length;
      var v4337 = i$$89 < bbLen;
      for (;v4337;) {
        var v19626 = this.linearBBs;
        var v13931 = v19626[i$$89];
        var v4335 = v13931.useDef;
        v4335.initializeGen(useDefContext$$3);
        var v19627 = this.linearBBs;
        var v13932 = v19627[i$$89];
        var v4336 = v13932.useDef;
        v4336.initializeKill(useDefContext$$3);
        i$$89++;
        v4337 = i$$89 < bbLen;
      }
      var changed$$1 = true;
      for (;changed$$1;) {
        changed$$1 = false;
        i$$89 = 0;
        var v4339 = i$$89 < bbLen;
        for (;v4339;) {
          var v23328 = this.linearBBs;
          var v19628 = v23328[i$$89];
          var v13933 = v19628.useDef;
          var v4338 = v13933.updateTop();
          var v13934 = !v4338;
          if (v13934) {
            v4338 = changed$$1;
          }
          changed$$1 = v4338;
          i$$89++;
          v4339 = i$$89 < bbLen;
        }
      }
      var v13935 = this.entry;
      var v4340 = v13935.useDef;
      var top$$1 = v4340.top;
      top$$1.map(v998);
      return;
    }
    function v997(nodeFunc, edgeFunc, preEdges, postEdges) {
      var markValue = this.markBase;
      var v13936 = this.markBase;
      this.markBase = v13936 + 1;
      var q = new Array;
      var v4341 = q.length;
      q[v4341] = this.entry;
      var v13937 = q.length;
      var v4349 = v13937 > 0;
      for (;v4349;) {
        var bb$$4 = q.pop();
        var v13938 = bb$$4.marked(markValue);
        var v4348 = !v13938;
        if (v4348) {
          bb$$4.mark();
          if (nodeFunc) {
            nodeFunc(bb$$4);
          }
          var v4342 = bb$$4.successors;
          var succLen$$1 = v4342.length;
          var v4347 = succLen$$1 > 0;
          if (v4347) {
            if (preEdges) {
              preEdges();
            }
            var j$$12 = succLen$$1 - 1;
            var v4346 = j$$12 >= 0;
            for (;v4346;) {
              var v4343 = bb$$4.successors;
              var successor$$1 = v4343[j$$12];
              var v19629 = this.markBase;
              var v13939 = successor$$1.marked(v19629);
              var v4345 = !v13939;
              if (v4345) {
                if (edgeFunc) {
                  edgeFunc(bb$$4, successor$$1);
                }
                var v4344 = q.length;
                q[v4344] = successor$$1;
              }
              j$$12--;
              v4346 = j$$12 >= 0;
            }
            if (postEdges) {
              postEdges();
            }
          }
        }
        var v13940 = q.length;
        v4349 = v13940 > 0;
      }
      return;
    }
    function v996(bb$$3, outfile$$13) {
      var content$$4 = bb$$3.content;
      var i$$88 = 0;
      var v4350 = content$$4.members;
      var len$$39 = v4350.length;
      var v4352 = i$$88 < len$$39;
      for (;v4352;) {
        var v4351 = content$$4.members;
        var ast$$79 = v4351[i$$88];
        this.printAST(ast$$79, outfile$$13);
        i$$88++;
        v4352 = i$$88 < len$$39;
      }
      return;
    }
    function v995(ast$$78, outfile$$12) {
      var v4353 = TypeScript$$25.PrintContext;
      var printContext = new v4353(outfile$$12, null);
      printContext.increaseIndent();
      var v4354 = TypeScript$$25.getAstWalkerFactory();
      var v4355 = TypeScript$$25.prePrintAST;
      var v4356 = TypeScript$$25.postPrintAST;
      v4354.walk(ast$$78, v4355, v4356, null, printContext);
      printContext.decreaseIndent();
      return;
    }
    function v994(er) {
      var v13941 = this.unreachable;
      if (v13941) {
        var v23329 = this.unreachable;
        var v19630 = v23329.length;
        v13941 = v19630 > 0;
      }
      var v4361 = v13941;
      if (v4361) {
        var v4357 = this.unreachable;
        var len$$38 = v4357.length;
        var i$$87 = 0;
        var v4360 = i$$87 < len$$38;
        for (;v4360;) {
          var v4358 = this.unreachable;
          var unreachableAST = v4358[i$$87];
          var v13942 = unreachableAST.nodeType;
          var v19631 = TypeScript$$25.NodeType;
          var v13943 = v19631.EndCode;
          var v4359 = v13942 != v13943;
          if (v4359) {
            er.simpleError(unreachableAST, "unreachable code");
          }
          i$$87++;
          v4360 = i$$87 < len$$38;
        }
      }
      return;
    }
    function v993() {
      var v4362 = this.currentSwitch;
      return v4362.pop();
    }
    function v992(bb$$2) {
      var v4363 = this.currentSwitch;
      v4363.push(bb$$2);
      return;
    }
    function v991(ast$$77, parent$$64) {
      var v4364 = this.walker;
      return v4364.walk(ast$$77, parent$$64);
    }
    function ControlFlowContext$$1(current$$3, exit$$1) {
      this.current = current$$3;
      this.exit = exit$$1;
      this.entry = null;
      this.unreachable = null;
      this.noContinuation = false;
      var v26568 = new Array;
      this.statementStack = v26568;
      var v26569 = new Array;
      this.currentSwitch = v26569;
      this.markBase = 0;
      var v26570 = new Array;
      this.linearBBs = v26570;
      this.entry = this.current;
      return;
    }
    var v4365 = ControlFlowContext$$1.prototype;
    v4365.walk = v991;
    var v4366 = ControlFlowContext$$1.prototype;
    v4366.pushSwitch = v992;
    var v4367 = ControlFlowContext$$1.prototype;
    v4367.popSwitch = v993;
    var v4368 = ControlFlowContext$$1.prototype;
    v4368.reportUnreachable = v994;
    var v4369 = ControlFlowContext$$1.prototype;
    v4369.printAST = v995;
    var v4370 = ControlFlowContext$$1.prototype;
    v4370.printBlockContent = v996;
    var v4371 = ControlFlowContext$$1.prototype;
    v4371.bfs = v997;
    var v4372 = ControlFlowContext$$1.prototype;
    v4372.useDef = v999;
    var v4373 = ControlFlowContext$$1.prototype;
    v4373.print = v1000;
    var v4374 = ControlFlowContext$$1.prototype;
    v4374.pushStatement = v1001;
    var v4375 = ControlFlowContext$$1.prototype;
    v4375.popStatement = v1002;
    var v4376 = ControlFlowContext$$1.prototype;
    v4376.returnStmt = v1003;
    var v4377 = ControlFlowContext$$1.prototype;
    v4377.setUnreachable = v1004;
    var v4378 = ControlFlowContext$$1.prototype;
    v4378.addUnreachable = v1005;
    var v4379 = ControlFlowContext$$1.prototype;
    v4379.unconditionalBranch = v1006;
    var v4380 = ControlFlowContext$$1.prototype;
    v4380.addContent = v1007;
    return ControlFlowContext$$1;
  }
  function v990() {
    function v989(successor) {
      var v4381 = this.successors;
      var v13944 = this.successors;
      var v4382 = v13944.length;
      v4381[v4382] = successor;
      var v4383 = successor.predecessors;
      var v13945 = successor.predecessors;
      var v4384 = v13945.length;
      v4383[v4384] = this;
      return;
    }
    function v988() {
      this.markValue++;
      return;
    }
    function v987(markBase) {
      var v4385 = this.markValue;
      return v4385 > markBase;
    }
    function BasicBlock$$1() {
      var v26571 = new Array;
      this.predecessors = v26571;
      this.index = -1;
      this.markValue = 0;
      var v26572 = new Array;
      this.successors = v26572;
      this.useDef = null;
      var v4386 = TypeScript$$25.ASTList;
      var v26573 = new v4386;
      this.content = v26573;
      return;
    }
    var v4387 = BasicBlock$$1.prototype;
    v4387.marked = v987;
    var v4388 = BasicBlock$$1.prototype;
    v4388.mark = v988;
    var v4389 = BasicBlock$$1.prototype;
    v4389.addSuccessor = v989;
    return BasicBlock$$1;
  }
  function v986() {
    function v985(b$$13) {
      var oldFirstBits = this.firstBits;
      var v13946 = this.firstBits;
      var v19632 = b$$13.firstBits;
      var v13947 = ~v19632;
      this.firstBits = v13946 & v13947;
      var v4395 = this.restOfBits;
      if (v4395) {
        var k$$12 = 0;
        var v4390 = this.restOfBits;
        var len$$37 = v4390.length;
        var v4394 = k$$12 < len$$37;
        for (;v4394;) {
          var v4391 = this.restOfBits;
          var myBits$$4 = v4391[k$$12];
          var v4392 = b$$13.restOfBits;
          var bBits$$3 = v4392[k$$12];
          var v4393 = this.restOfBits;
          var v19633 = v4393[k$$12];
          var v19634 = ~bBits$$3;
          v4393[k$$12] = v19633 & v19634;
          k$$12++;
          v4394 = k$$12 < len$$37;
        }
      }
      return;
    }
    function v984(b$$12) {
      var v13948 = this.firstBits;
      var v13949 = b$$12.firstBits;
      var v4396 = v13948 != v13949;
      if (v4396) {
        return true;
      }
      var v4402 = this.restOfBits;
      if (v4402) {
        var k$$11 = 0;
        var v4397 = this.restOfBits;
        var len$$36 = v4397.length;
        var v4401 = k$$11 < len$$36;
        for (;v4401;) {
          var v4398 = this.restOfBits;
          var myBits$$3 = v4398[k$$11];
          var v4399 = b$$12.restOfBits;
          var bBits$$2 = v4399[k$$11];
          var v4400 = myBits$$3 != bBits$$2;
          if (v4400) {
            return true;
          }
          k$$11++;
          v4401 = k$$11 < len$$36;
        }
      }
      return false;
    }
    function v983(b$$11) {
      var v13950 = this.firstBits;
      var v13951 = b$$11.firstBits;
      this.firstBits = v13950 & v13951;
      var v4408 = this.restOfBits;
      if (v4408) {
        var k$$10 = 0;
        var v4403 = this.restOfBits;
        var len$$35 = v4403.length;
        var v4407 = k$$10 < len$$35;
        for (;v4407;) {
          var v4404 = this.restOfBits;
          var myBits$$2 = v4404[k$$10];
          var v4405 = b$$11.restOfBits;
          var bBits$$1 = v4405[k$$10];
          var v4406 = this.restOfBits;
          v4406[k$$10] = myBits$$2 & bBits$$1;
          k$$10++;
          v4407 = k$$10 < len$$35;
        }
      }
      return;
    }
    function v982(b$$10) {
      var v13952 = this.firstBits;
      var v13953 = b$$10.firstBits;
      this.firstBits = v13952 | v13953;
      var v4414 = this.restOfBits;
      if (v4414) {
        var k$$9 = 0;
        var v4409 = this.restOfBits;
        var len$$34 = v4409.length;
        var v4413 = k$$9 < len$$34;
        for (;v4413;) {
          var v4410 = this.restOfBits;
          var myBits$$1 = v4410[k$$9];
          var v4411 = b$$10.restOfBits;
          var bBits = v4411[k$$9];
          var v4412 = this.restOfBits;
          v4412[k$$9] = myBits$$1 | bBits;
          k$$9++;
          v4413 = k$$9 < len$$34;
        }
      }
      return;
    }
    function v981(fn$$7) {
      var k$$8;
      k$$8 = 0;
      var v13954 = BitVector$$1.packBits;
      var v4417 = k$$8 < v13954;
      for (;v4417;) {
        var v13955 = this.bitCount;
        var v4415 = k$$8 == v13955;
        if (v4415) {
          return;
        }
        var v19635 = 1 << k$$8;
        var v19636 = this.firstBits;
        var v13956 = v19635 & v19636;
        var v4416 = v13956 != 0;
        if (v4416) {
          fn$$7(k$$8);
        }
        k$$8++;
        var v13957 = BitVector$$1.packBits;
        v4417 = k$$8 < v13957;
      }
      var v4423 = this.restOfBits;
      if (v4423) {
        var len$$33;
        var cumu = BitVector$$1.packBits;
        k$$8 = 0;
        var v13958 = this.restOfBits;
        len$$33 = v13958.length;
        var v4422 = k$$8 < len$$33;
        for (;v4422;) {
          var v4418 = this.restOfBits;
          var myBits = v4418[k$$8];
          var j$$11 = 0;
          var v13959 = BitVector$$1.packBits;
          var v4421 = j$$11 < v13959;
          for (;v4421;) {
            var v19637 = 1 << j$$11;
            var v13960 = v19637 & myBits;
            var v4419 = v13960 != 0;
            if (v4419) {
              fn$$7(cumu);
            }
            cumu++;
            var v13961 = this.bitCount;
            var v4420 = cumu == v13961;
            if (v4420) {
              return;
            }
            j$$11++;
            var v13962 = BitVector$$1.packBits;
            v4421 = j$$11 < v13962;
          }
          k$$8++;
          v4422 = k$$8 < len$$33;
        }
      }
      return;
    }
    function v980(bitIndex, value$$40) {
      var v13963 = BitVector$$1.packBits;
      var v4428 = bitIndex < v13963;
      if (v4428) {
        if (value$$40) {
          var v13964 = this.firstBits;
          var v13965 = 1 << bitIndex;
          this.firstBits = v13964 | v13965;
        } else {
          var v13966 = this.firstBits;
          var v19638 = 1 << bitIndex;
          var v13967 = ~v19638;
          this.firstBits = v13966 & v13967;
        }
      } else {
        var v19639 = BitVector$$1.packBits;
        var v13968 = bitIndex / v19639;
        var v4424 = Math.floor(v13968);
        var offset$$9 = v4424 - 1;
        var v4425 = BitVector$$1.packBits;
        var localIndex = bitIndex % v4425;
        if (value$$40) {
          var v4426 = this.restOfBits;
          var v19640 = v4426[offset$$9];
          var v19641 = 1 << localIndex;
          v4426[offset$$9] = v19640 | v19641;
        } else {
          var v4427 = this.restOfBits;
          var v19642 = v4427[offset$$9];
          var v23330 = 1 << localIndex;
          var v19643 = ~v23330;
          v4427[offset$$9] = v19642 & v19643;
        }
      }
      return;
    }
    function BitVector$$1(bitCount$$1) {
      this.bitCount = bitCount$$1;
      this.firstBits = 0;
      this.restOfBits = null;
      var v13969 = this.bitCount;
      var v13970 = BitVector$$1.packBits;
      var v4432 = v13969 > v13970;
      if (v4432) {
        var v26574 = new Array;
        this.restOfBits = v26574;
        var v13971 = this.bitCount;
        var v13972 = BitVector$$1.packBits;
        var v4429 = v13971 / v13972;
        var len$$32 = Math.floor(v4429);
        var i$$86 = 0;
        var v4431 = i$$86 < len$$32;
        for (;v4431;) {
          var v4430 = this.restOfBits;
          v4430[i$$86] = 0;
          i$$86++;
          v4431 = i$$86 < len$$32;
        }
      }
      return;
    }
    BitVector$$1.packBits = 30;
    var v4433 = BitVector$$1.prototype;
    v4433.set = v980;
    var v4434 = BitVector$$1.prototype;
    v4434.map = v981;
    var v4435 = BitVector$$1.prototype;
    v4435.union = v982;
    var v4436 = BitVector$$1.prototype;
    v4436.intersection = v983;
    var v4437 = BitVector$$1.prototype;
    v4437.notEq = v984;
    var v4438 = BitVector$$1.prototype;
    v4438.difference = v985;
    return BitVector$$1;
  }
  function v979() {
    function v978(sym$$33, bbUses) {
      var v4439 = this.symbolMap;
      var v4440 = sym$$33.name;
      var index$$54 = v4439.lookup(v4440);
      var v4441 = this.useIndexBySymbol;
      var usesOfSym = v4441[index$$54];
      var k$$7 = 0;
      var len$$31 = usesOfSym.length;
      var v4443 = k$$7 < len$$31;
      for (;v4443;) {
        var v4442 = usesOfSym[k$$7];
        bbUses.set(v4442, true);
        k$$7++;
        v4443 = k$$7 < len$$31;
      }
      return;
    }
    function v977(sym$$32) {
      var v13973 = sym$$32;
      if (v13973) {
        var v19644 = sym$$32.container;
        var v19645 = this.func;
        v13973 = v19644 == v19645;
      }
      var v4444 = v13973;
      if (v4444) {
        var v13974 = sym$$32.kind();
        var v19646 = TypeScript$$25.SymbolKind;
        var v13975 = v19646.Variable;
        v4444 = v13974 == v13975;
      }
      return v4444;
    }
    function v976(ast$$76) {
      var v4445 = this.uses;
      var v13976 = this.uses;
      var v4446 = v13976.length;
      v4445[v4446] = ast$$76;
      var v13977 = this.uses;
      var v4447 = v13977.length;
      return v4447 - 1;
    }
    function v975(symIndex$$1, astIndex$$1) {
      var v4448 = this.useIndexBySymbol;
      var useBySym = v4448[symIndex$$1];
      var v4450 = useBySym == undefined;
      if (v4450) {
        useBySym = new Array;
        var v4449 = this.useIndexBySymbol;
        v4449[symIndex$$1] = useBySym;
      }
      var v4451 = useBySym.length;
      useBySym[v4451] = astIndex$$1;
      return;
    }
    function v974(sym$$31) {
      var name$$85 = sym$$31.name;
      var v4452 = this.symbolMap;
      var index$$53 = v4452.lookup(name$$85);
      var v4455 = index$$53 == null;
      if (v4455) {
        index$$53 = this.symbolCount;
        var v13978 = this.symbolCount;
        this.symbolCount = v13978 + 1;
        var v4453 = this.symbols;
        v4453[index$$53] = sym$$31;
        var v4454 = this.symbolMap;
        v4454.add(name$$85, index$$53);
      }
      return index$$53;
    }
    function UseDefContext$$1() {
      var v26575 = new Array;
      this.useIndexBySymbol = v26575;
      var v26576 = new Array;
      this.uses = v26576;
      var v26577 = new Array;
      this.symbols = v26577;
      var v4456 = TypeScript$$25.StringHashTable;
      var v26578 = new v4456;
      this.symbolMap = v26578;
      this.symbolCount = 0;
      return;
    }
    var v4457 = UseDefContext$$1.prototype;
    v4457.getSymbolIndex = v974;
    var v4458 = UseDefContext$$1.prototype;
    v4458.addUse = v975;
    var v4459 = UseDefContext$$1.prototype;
    v4459.getUseIndex = v976;
    var v4460 = UseDefContext$$1.prototype;
    v4460.isLocalSym = v977;
    var v4461 = UseDefContext$$1.prototype;
    v4461.killSymbol = v978;
    return UseDefContext$$1;
  }
  function v973() {
    function v972(useDefContext$$2) {
      var v13979 = this.gen;
      var v4462 = v13979.bitCount;
      var v26579 = new BitVector(v4462);
      this.kill = v26579;
      var s$$25 = 0;
      var v4463 = this.defsBySymbol;
      var symbolLen$$1 = v4463.length;
      var v4469 = s$$25 < symbolLen$$1;
      for (;v4469;) {
        var v13980 = this.defsBySymbol;
        var v4468 = v13980[s$$25];
        if (v4468) {
          var v4464 = useDefContext$$2.useIndexBySymbol;
          var globalSymUses = v4464[s$$25];
          if (globalSymUses) {
            var u$$1 = 0;
            var useLen = globalSymUses.length;
            var v4467 = u$$1 < useLen;
            for (;v4467;) {
              var v4465 = this.kill;
              var v4466 = globalSymUses[u$$1];
              v4465.set(v4466, true);
              u$$1++;
              v4467 = u$$1 < useLen;
            }
          }
        }
        s$$25++;
        v4469 = s$$25 < symbolLen$$1;
      }
      return;
    }
    function v971(useDefContext$$1) {
      var v4470 = this.useIndexBySymbol;
      var symbolLen = v4470.length;
      var v4471 = useDefContext$$1.uses;
      var bitCount = v4471.length;
      var v26580 = new BitVector(bitCount);
      this.gen = v26580;
      var s$$24 = 0;
      var v4477 = s$$24 < symbolLen;
      for (;v4477;) {
        var v4472 = this.useIndexBySymbol;
        var symUses$$1 = v4472[s$$24];
        var v13981 = symUses$$1 != undefined;
        if (v13981) {
          var v19647 = symUses$$1.length;
          v13981 = v19647 > 0;
        }
        var v4476 = v13981;
        if (v4476) {
          var u = 0;
          var uLen = symUses$$1.length;
          var v4475 = u < uLen;
          for (;v4475;) {
            var v4473 = this.gen;
            var v4474 = symUses$$1[u];
            v4473.set(v4474, true);
            u++;
            v4475 = u < uLen;
          }
        }
        s$$24++;
        v4477 = s$$24 < symbolLen;
      }
      this.top = this.gen;
      return;
    }
    function v970(useDefContext) {
      function defSym(sym$$29, context$$62) {
        var v4480 = context$$62.isLocalSym(sym$$29);
        if (v4480) {
          var index$$52 = context$$62.getSymbolIndex(sym$$29);
          var v4478 = _this$$3.useIndexBySymbol;
          var v26581 = new Array;
          v4478[index$$52] = v26581;
          var v4479 = _this$$3.defsBySymbol;
          v4479[index$$52] = true;
        }
        return;
      }
      function initUseDefPre(cur$$9, parent$$63, walker$$48) {
        var context$$61 = walker$$48.state;
        var v4481 = cur$$9 == null;
        if (v4481) {
          cur$$9 = null;
        }
        var v13982 = cur$$9.nodeType;
        var v19648 = TypeScript$$25.NodeType;
        var v13983 = v19648.VarDecl;
        var v4498 = v13982 == v13983;
        if (v4498) {
          var varDecl$$13 = cur$$9;
          var v13984 = varDecl$$13.init;
          var v19651 = !v13984;
          if (v19651) {
            var v19649 = varDecl$$13.varFlags;
            var v23331 = TypeScript$$25.VarFlags;
            var v19650 = v23331.AutoInit;
            v13984 = TypeScript$$25.hasFlag(v19649, v19650);
          }
          var v4483 = v13984;
          if (v4483) {
            var v4482 = varDecl$$13.sym;
            defSym(v4482, context$$61);
          }
        } else {
          var v13985 = cur$$9.nodeType;
          var v19652 = TypeScript$$25.NodeType;
          var v13986 = v19652.Name;
          var v4497 = v13985 == v13986;
          if (v4497) {
            if (parent$$63) {
              var v13987 = parent$$63.nodeType;
              var v19653 = TypeScript$$25.NodeType;
              var v13988 = v19653.Asg;
              var v4487 = v13987 == v13988;
              if (v4487) {
                var asg = parent$$63;
                var v13989 = asg.operand1;
                var v4484 = v13989 == cur$$9;
                if (v4484) {
                  return cur$$9;
                }
              } else {
                var v13990 = parent$$63.nodeType;
                var v19654 = TypeScript$$25.NodeType;
                var v13991 = v19654.VarDecl;
                var v4486 = v13990 == v13991;
                if (v4486) {
                  var parentDecl = parent$$63;
                  var v13992 = parentDecl.id;
                  var v4485 = v13992 == cur$$9;
                  if (v4485) {
                    return cur$$9;
                  }
                }
              }
            }
            var id$$21 = cur$$9;
            var sym$$inline_16 = id$$21.sym;
            var context$$inline_17 = context$$61;
            var ast$$inline_18 = cur$$9;
            var v4491 = context$$inline_17.isLocalSym(sym$$inline_16);
            if (v4491) {
              var symIndex$$inline_19 = context$$inline_17.getSymbolIndex(sym$$inline_16);
              var v19655 = _this$$3.useIndexBySymbol;
              var v13993 = v19655[symIndex$$inline_19];
              var v4489 = v13993 == undefined;
              if (v4489) {
                var v4488 = _this$$3.useIndexBySymbol;
                var v26582 = new Array;
                v4488[symIndex$$inline_19] = v26582;
              }
              var v4490 = _this$$3.useIndexBySymbol;
              var symUses$$inline_20 = v4490[symIndex$$inline_19];
              var astIndex$$inline_21 = context$$inline_17.getUseIndex(ast$$inline_18);
              context$$inline_17.addUse(symIndex$$inline_19, astIndex$$inline_21);
              symUses$$inline_20.push(astIndex$$inline_21);
            }
          } else {
            var v19656 = cur$$9.nodeType;
            var v23332 = TypeScript$$25.NodeType;
            var v19657 = v23332.Asg;
            var v13994 = v19656 >= v19657;
            if (v13994) {
              var v19658 = cur$$9.nodeType;
              var v23333 = TypeScript$$25.NodeType;
              var v19659 = v23333.LastAsg;
              v13994 = v19658 <= v19659;
            }
            var v4496 = v13994;
            if (v4496) {
              asg = cur$$9;
              var v13995 = asg.operand1;
              if (v13995) {
                var v23334 = asg.operand1;
                var v19660 = v23334.nodeType;
                var v23335 = TypeScript$$25.NodeType;
                var v19661 = v23335.Name;
                v13995 = v19660 == v19661;
              }
              var v4493 = v13995;
              if (v4493) {
                id$$21 = asg.operand1;
                var v4492 = id$$21.sym;
                defSym(v4492, context$$61);
              }
            } else {
              var v13996 = cur$$9.nodeType;
              var v19662 = TypeScript$$25.NodeType;
              var v13997 = v19662.FuncDecl;
              var v4495 = v13996 == v13997;
              if (v4495) {
                var v4494 = walker$$48.options;
                v4494.goChildren = false;
              }
            }
          }
        }
        return cur$$9;
      }
      var _this$$3 = this;
      var v4499 = TypeScript$$25.AstWalkOptions;
      var options$$6 = new v4499;
      options$$6.reverseSiblings = true;
      var v4500 = TypeScript$$25.getAstWalkerFactory();
      var v13998 = this.bb;
      var v4501 = v13998.content;
      v4500.walk(v4501, initUseDefPre, null, options$$6, useDefContext);
      return;
    }
    function v969() {
      var v13999 = this.top;
      var v4502 = v13999.bitCount;
      var temp$$16 = new BitVector(v4502);
      var i$$85 = 0;
      var v14000 = this.bb;
      var v4503 = v14000.successors;
      var succLen = v4503.length;
      var v4507 = i$$85 < succLen;
      for (;v4507;) {
        var v14001 = this.bb;
        var v4504 = v14001.successors;
        var succ = v4504[i$$85];
        var v4506 = succ.useDef;
        if (v4506) {
          var v14002 = succ.useDef;
          var v4505 = v14002.top;
          temp$$16.union(v4505);
        }
        i$$85++;
        v4507 = i$$85 < succLen;
      }
      var v4508 = this.kill;
      temp$$16.difference(v4508);
      var v4509 = this.gen;
      temp$$16.union(v4509);
      var v4510 = this.top;
      var changed = temp$$16.notEq(v4510);
      this.top = temp$$16;
      return changed;
    }
    function BBUseDefInfo$$1(bb$$1) {
      this.bb = bb$$1;
      var v26583 = new Array;
      this.defsBySymbol = v26583;
      var v26584 = new Array;
      this.useIndexBySymbol = v26584;
      return;
    }
    var v4511 = BBUseDefInfo$$1.prototype;
    v4511.updateTop = v969;
    var v4512 = BBUseDefInfo$$1.prototype;
    v4512.initialize = v970;
    var v4513 = BBUseDefInfo$$1.prototype;
    v4513.initializeGen = v971;
    var v4514 = BBUseDefInfo$$1.prototype;
    v4514.initializeKill = v972;
    return BBUseDefInfo$$1;
  }
  function v968() {
    function ScopeChain$$1(container$$14, previous$$1, scope$$29) {
      this.container = container$$14;
      this.previous = previous$$1;
      this.scope = scope$$29;
      return;
    }
    return ScopeChain$$1;
  }
  var ScopeChain = v968();
  TypeScript$$25.ScopeChain = ScopeChain;
  var BBUseDefInfo = v973();
  TypeScript$$25.BBUseDefInfo = BBUseDefInfo;
  var UseDefContext = v979();
  TypeScript$$25.UseDefContext = UseDefContext;
  var BitVector = v986();
  TypeScript$$25.BitVector = BitVector;
  var BasicBlock = v990();
  TypeScript$$25.BasicBlock = BasicBlock;
  var ControlFlowContext = v1008();
  TypeScript$$25.ControlFlowContext = ControlFlowContext;
  var ResolutionDataCache = v1011();
  TypeScript$$25.ResolutionDataCache = ResolutionDataCache;
  var TypeFlow = v1112();
  TypeScript$$25.TypeFlow = TypeFlow;
  return;
}
function v967(TypeScript$$24) {
  function v966() {
    function Continuation$$1(normalBlock) {
      this.normalBlock = normalBlock;
      this.exceptionBlock = -1;
      return;
    }
    return Continuation$$1;
  }
  function getBaseTypeLinks(bases$$3, baseTypeLinks) {
    if (bases$$3) {
      var v4515 = bases$$3.members;
      var len$$30 = v4515.length;
      var v4516 = baseTypeLinks == null;
      if (v4516) {
        baseTypeLinks = new Array;
      }
      var i$$83 = 0;
      var v4520 = i$$83 < len$$30;
      for (;v4520;) {
        var v4517 = bases$$3.members;
        var baseExpr$$1 = v4517[i$$83];
        var name$$82 = baseExpr$$1;
        var v4518 = TypeScript$$24.TypeLink;
        var typeLink$$3 = new v4518;
        typeLink$$3.ast = name$$82;
        var v4519 = baseTypeLinks.length;
        baseTypeLinks[v4519] = typeLink$$3;
        i$$83++;
        v4520 = i$$83 < len$$30;
      }
    }
    return baseTypeLinks;
  }
  function getBases(type$$44, typeDecl) {
    var v4521 = typeDecl.extendsList;
    var v4522 = type$$44.extendsTypeLinks;
    var v26585 = getBaseTypeLinks(v4521, v4522);
    type$$44.extendsTypeLinks = v26585;
    var v4523 = typeDecl.implementsList;
    var v4524 = type$$44.implementsTypeLinks;
    var v26586 = getBaseTypeLinks(v4523, v4524);
    type$$44.implementsTypeLinks = v26586;
    return;
  }
  function createNewConstructGroupForType(type$$45) {
    var v4525 = TypeScript$$24.Signature;
    var signature$$6 = new v4525;
    var v4526 = TypeScript$$24.TypeLink;
    var v26587 = new v4526;
    signature$$6.returnType = v26587;
    var v4527 = signature$$6.returnType;
    v4527.type = type$$45.instanceType;
    signature$$6.parameters = [];
    var v4528 = TypeScript$$24.SignatureGroup;
    var v26588 = new v4528;
    type$$45.construct = v26588;
    var v4529 = type$$45.construct;
    v4529.addSignature(signature$$6);
    return;
  }
  function cloneParentConstructGroupForChildType(child$$1, parent$$53) {
    var v4530 = TypeScript$$24.SignatureGroup;
    var v26589 = new v4530;
    child$$1.construct = v26589;
    var sig$$1 = null;
    var v14003 = parent$$53.construct;
    var v4531 = !v14003;
    if (v4531) {
      createNewConstructGroupForType(parent$$53);
    }
    var i$$84 = 0;
    var v23336 = parent$$53.construct;
    var v19663 = v23336.signatures;
    var v14004 = v19663.length;
    var v4540 = i$$84 < v14004;
    for (;v4540;) {
      var v4532 = TypeScript$$24.Signature;
      sig$$1 = new v4532;
      var v19664 = parent$$53.construct;
      var v14005 = v19664.signatures;
      var v4533 = v14005[i$$84];
      sig$$1.parameters = v4533.parameters;
      var v19665 = parent$$53.construct;
      var v14006 = v19665.signatures;
      var v4534 = v14006[i$$84];
      sig$$1.nonOptionalParameterCount = v4534.nonOptionalParameterCount;
      var v19666 = parent$$53.construct;
      var v14007 = v19666.signatures;
      var v4535 = v14007[i$$84];
      sig$$1.typeCheckStatus = v4535.typeCheckStatus;
      var v19667 = parent$$53.construct;
      var v14008 = v19667.signatures;
      var v4536 = v14008[i$$84];
      sig$$1.declAST = v4536.declAST;
      var v4537 = TypeScript$$24.TypeLink;
      var v26590 = new v4537;
      sig$$1.returnType = v26590;
      var v4538 = sig$$1.returnType;
      v4538.type = child$$1.instanceType;
      var v4539 = child$$1.construct;
      v4539.addSignature(sig$$1);
      i$$84++;
      var v23337 = parent$$53.construct;
      var v19668 = v23337.signatures;
      var v14009 = v19668.length;
      v4540 = i$$84 < v14009;
    }
    return;
  }
  function findTypeSymbolInScopeChain(name$$83, scopeChain$$2) {
    var v4541 = scopeChain$$2.scope;
    var symbol$$14 = v4541.find(name$$83, false, true);
    var v14010 = symbol$$14 == null;
    if (v14010) {
      v14010 = scopeChain$$2.previous;
    }
    var v4543 = v14010;
    if (v4543) {
      var v4542 = scopeChain$$2.previous;
      symbol$$14 = findTypeSymbolInScopeChain(name$$83, v4542);
    }
    return symbol$$14;
  }
  function findSymbolFromAlias(alias$$2, context$$51) {
    function v965(id$$20) {
      var v4546 = context$$51.members;
      if (v4546) {
        var v4544 = context$$51.members;
        return v4544.lookup(name$$84);
      } else {
        var v4545 = context$$51.topLevelScope;
        return findTypeSymbolInScopeChain(name$$84, v4545);
      }
      return;
    }
    var symbol$$15 = null;
    var v4552 = alias$$2.nodeType;
    switch(v4552) {
      case TypeScript$$24.NodeType.Name:
        var name$$84 = alias$$2.text;
        var isDynamic = TypeScript$$24.isQuoted(name$$84);
        var findSym = v965;
        if (isDynamic) {
          var v14011 = context$$51.tcContext;
          var v4547 = v14011.checker;
          var v23338 = context$$51.tcContext;
          var v19669 = v23338.script;
          var v14012 = v19669.locationInfo;
          var v4548 = v14012.filename;
          symbol$$15 = v4547.findSymbolForDynamicModule(name$$84, v4548, findSym);
        } else {
          symbol$$15 = findSym(name$$84);
        }
        break;
      case TypeScript$$24.NodeType.Dot:
        var dottedExpr = alias$$2;
        var v4549 = dottedExpr.operand1;
        var op1Sym = findSymbolFromAlias(v4549, context$$51);
        var v14013 = op1Sym;
        if (v14013) {
          v14013 = op1Sym.getType();
        }
        var v4551 = v14013;
        if (v4551) {
          var v4550 = dottedExpr.operand2;
          symbol$$15 = findSymbolFromAlias(v4550, context$$51);
        }
      ;
      default:
      ;
    }
    if (symbol$$15) {
      var symType$$1 = symbol$$15.getType();
      if (symType$$1) {
        var members$$25 = symType$$1.members;
        if (members$$25) {
          context$$51.members = members$$25.publicMembers;
        }
      }
    }
    return symbol$$15;
  }
  function preCollectImportTypes(ast$$66, parent$$54, context$$52) {
    var scopeChain$$3 = context$$52.scopeChain;
    var typeSymbol$$2 = null;
    var modType = null;
    var importDecl$$1 = ast$$66;
    var v4553 = importDecl$$1.alias;
    var v4554 = {topLevelScope:scopeChain$$3, members:null, tcContext:context$$52};
    var aliasedModSymbol = findSymbolFromAlias(v4553, v4554);
    var v14014 = context$$52.scopeChain;
    var v4555 = v14014.container;
    var v14015 = context$$52.checker;
    var v4556 = v14015.gloMod;
    var isGlobal$$1 = v4555 == v4556;
    if (aliasedModSymbol) {
      var aliasedModType = aliasedModSymbol.getType();
      if (aliasedModType) {
        modType = aliasedModType;
      }
    }
    var v4557 = TypeScript$$24.TypeSymbol;
    var v14016 = importDecl$$1.id;
    var v4558 = v14016.text;
    var v14017 = importDecl$$1.id;
    var v4559 = v14017.minChar;
    var v14018 = importDecl$$1.limChar;
    var v14019 = importDecl$$1.minChar;
    var v4560 = v14018 - v14019;
    var v19670 = context$$52.checker;
    var v14020 = v19670.locationInfo;
    var v4561 = v14020.unitIndex;
    typeSymbol$$2 = new v4557(v4558, v4559, v4560, v4561, modType);
    typeSymbol$$2.aliasLink = importDecl$$1;
    var v14021 = context$$52.scopeChain;
    var v4563 = v14021.moduleDecl;
    if (v4563) {
      var v14022 = typeSymbol$$2.flags;
      var v19671 = TypeScript$$24.SymbolFlags;
      var v14023 = v19671.ModuleMember;
      typeSymbol$$2.flags = v14022 | v14023;
      var v4562 = context$$52.scopeChain;
      typeSymbol$$2.declModule = v4562.moduleDecl;
    }
    typeSymbol$$2.declAST = importDecl$$1;
    var v4564 = importDecl$$1.id;
    v4564.sym = typeSymbol$$2;
    var v4565 = scopeChain$$3.scope;
    var v4566 = scopeChain$$3.container;
    var v14024 = context$$52.checker;
    var v4567 = v14024.errorReporter;
    v4565.enter(v4566, ast$$66, typeSymbol$$2, v4567, isGlobal$$1, true, false);
    var v4568 = scopeChain$$3.scope;
    var v4569 = scopeChain$$3.container;
    var v14025 = context$$52.checker;
    var v4570 = v14025.errorReporter;
    v4568.enter(v4569, ast$$66, typeSymbol$$2, v4570, isGlobal$$1, false, false);
    return true;
  }
  function preCollectModuleTypes(ast$$67, parent$$55, context$$53) {
    var scopeChain$$4 = context$$53.scopeChain;
    var moduleDecl$$6 = ast$$67;
    var v4571 = moduleDecl$$6.modFlags;
    var v14026 = TypeScript$$24.ModuleFlags;
    var v4572 = v14026.Ambient;
    var isAmbient$$5 = TypeScript$$24.hasFlag(v4571, v4572);
    var v4573 = moduleDecl$$6.modFlags;
    var v14027 = TypeScript$$24.ModuleFlags;
    var v4574 = v14027.IsEnum;
    var isEnum = TypeScript$$24.hasFlag(v4573, v4574);
    var v14028 = context$$53.scopeChain;
    var v4575 = v14028.container;
    var v14029 = context$$53.checker;
    var v4576 = v14029.gloMod;
    var isGlobal$$2 = v4575 == v4576;
    var v4577 = moduleDecl$$6.modFlags;
    var v14030 = TypeScript$$24.ModuleFlags;
    var v4578 = v14030.Exported;
    var isExported$$2 = TypeScript$$24.hasFlag(v4577, v4578);
    var v4579 = moduleDecl$$6.name;
    var modName$$3 = v4579.text;
    var isDynamic$$1 = TypeScript$$24.isQuoted(modName$$3);
    var v4580 = scopeChain$$4.scope;
    var symbol$$16 = v4580.findLocal(modName$$3, false, false);
    var typeSymbol$$3 = null;
    var modType$$1 = null;
    var v14031 = symbol$$16 == null;
    var v19674 = !v14031;
    if (v19674) {
      var v19672 = symbol$$16.kind();
      var v23339 = TypeScript$$24.SymbolKind;
      var v19673 = v23339.Type;
      v14031 = v19672 != v19673;
    }
    var v4629 = v14031;
    if (v4629) {
      var v4590 = modType$$1 == null;
      if (v4590) {
        var v4581 = TypeScript$$24.ScopedMembers;
        var v14032 = TypeScript$$24.DualStringHashTable;
        var v19675 = TypeScript$$24.StringHashTable;
        var v14033 = new v19675;
        var v19676 = TypeScript$$24.StringHashTable;
        var v14034 = new v19676;
        var v4582 = new v14032(v14033, v14034);
        var enclosedTypes$$3 = new v4581(v4582);
        var v4583 = TypeScript$$24.ScopedMembers;
        var v14035 = TypeScript$$24.DualStringHashTable;
        var v19677 = TypeScript$$24.StringHashTable;
        var v14036 = new v19677;
        var v19678 = TypeScript$$24.StringHashTable;
        var v14037 = new v19678;
        var v4584 = new v14035(v14036, v14037);
        var ambientEnclosedTypes$$3 = new v4583(v4584);
        var v4585 = TypeScript$$24.ModuleType;
        modType$$1 = new v4585(enclosedTypes$$3, ambientEnclosedTypes$$3);
        if (isEnum) {
          var v14038 = modType$$1.typeFlags;
          var v19679 = TypeScript$$24.TypeFlags;
          var v14039 = v19679.IsEnum;
          modType$$1.typeFlags = v14038 | v14039;
        }
        var v4586 = TypeScript$$24.ScopedMembers;
        var v14040 = TypeScript$$24.DualStringHashTable;
        var v19680 = TypeScript$$24.StringHashTable;
        var v14041 = new v19680;
        var v19681 = TypeScript$$24.StringHashTable;
        var v14042 = new v19681;
        var v4587 = new v14040(v14041, v14042);
        var v26591 = new v4586(v4587);
        modType$$1.members = v26591;
        var v4588 = TypeScript$$24.ScopedMembers;
        var v14043 = TypeScript$$24.DualStringHashTable;
        var v19682 = TypeScript$$24.StringHashTable;
        var v14044 = new v19682;
        var v19683 = TypeScript$$24.StringHashTable;
        var v14045 = new v19683;
        var v4589 = new v14043(v14044, v14045);
        var v26592 = new v4588(v4589);
        modType$$1.ambientMembers = v26592;
        modType$$1.setHasImplementation();
      }
      var v4591 = TypeScript$$24.TypeSymbol;
      var v14046 = moduleDecl$$6.name;
      var v4592 = v14046.minChar;
      var v4593 = modName$$3.length;
      var v19684 = context$$53.checker;
      var v14047 = v19684.locationInfo;
      var v4594 = v14047.unitIndex;
      typeSymbol$$3 = new v4591(modName$$3, v4592, v4593, v4594, modType$$1);
      var v4595 = moduleDecl$$6.prettyName;
      var v26593 = TypeScript$$24.isQuoted(v4595);
      typeSymbol$$3.isDynamic = v26593;
      var v14048 = context$$53.scopeChain;
      var v4597 = v14048.moduleDecl;
      if (v4597) {
        var v4596 = context$$53.scopeChain;
        typeSymbol$$3.declModule = v4596.moduleDecl;
      }
      typeSymbol$$3.declAST = moduleDecl$$6;
      typeSymbol$$3.prettyName = moduleDecl$$6.prettyName;
      var v4598 = scopeChain$$4.scope;
      var v4599 = scopeChain$$4.container;
      var v14049 = context$$53.checker;
      var v4600 = v14049.errorReporter;
      var v4601 = isExported$$2 || isGlobal$$2;
      v4598.enter(v4599, ast$$67, typeSymbol$$3, v4600, v4601, true, isAmbient$$5);
      var v4602 = scopeChain$$4.scope;
      var v4603 = scopeChain$$4.container;
      var v14050 = context$$53.checker;
      var v4604 = v14050.errorReporter;
      var v4605 = isExported$$2 || isGlobal$$2;
      v4602.enter(v4603, ast$$67, typeSymbol$$3, v4604, v4605, false, isAmbient$$5);
      modType$$1.symbol = typeSymbol$$3;
    } else {
      var v19685 = symbol$$16;
      if (v19685) {
        v19685 = symbol$$16.declAST;
      }
      var v14051 = v19685;
      if (v14051) {
        var v23340 = symbol$$16.declAST;
        var v19686 = v23340.nodeType;
        var v23341 = TypeScript$$24.NodeType;
        var v19687 = v23341.ModuleDeclaration;
        v14051 = v19686 != v19687;
      }
      var v4608 = v14051;
      if (v4608) {
        var v14052 = context$$53.checker;
        var v4606 = v14052.errorReporter;
        var v14053 = "Conflicting symbol name for module '" + modName$$3;
        var v4607 = v14053 + "'";
        v4606.simpleError(moduleDecl$$6, v4607);
      }
      typeSymbol$$3 = symbol$$16;
      var v14054 = typeSymbol$$3.type;
      var v4609 = v14054.getAllEnclosedTypes();
      var publicEnclosedTypes = v4609.publicMembers;
      var v4610;
      var v14056 = publicEnclosedTypes == null;
      if (v14056) {
        var v14055 = TypeScript$$24.StringHashTable;
        v4610 = new v14055;
      } else {
        v4610 = publicEnclosedTypes;
      }
      var publicEnclosedTypesTable = v4610;
      var v4611 = TypeScript$$24.ScopedMembers;
      var v14057 = TypeScript$$24.DualStringHashTable;
      var v19688 = TypeScript$$24.StringHashTable;
      var v14058 = new v19688;
      var v4612 = new v14057(publicEnclosedTypesTable, v14058);
      enclosedTypes$$3 = new v4611(v4612);
      var v14059 = typeSymbol$$3.type;
      var v4613 = v14059.getAllAmbientEnclosedTypes();
      var publicEnclosedAmbientTypes = v4613.publicMembers;
      var v4614;
      var v14061 = publicEnclosedAmbientTypes == null;
      if (v14061) {
        var v14060 = TypeScript$$24.StringHashTable;
        v4614 = new v14060;
      } else {
        v4614 = publicEnclosedAmbientTypes;
      }
      var publicAmbientEnclosedTypesTable = v4614;
      var v4615 = TypeScript$$24.ScopedMembers;
      var v14062 = TypeScript$$24.DualStringHashTable;
      var v19689 = TypeScript$$24.StringHashTable;
      var v14063 = new v19689;
      var v4616 = new v14062(publicAmbientEnclosedTypesTable, v14063);
      ambientEnclosedTypes$$3 = new v4615(v4616);
      var v14064 = typeSymbol$$3.type;
      var v4617 = v14064.members;
      var publicMembers = v4617.publicMembers;
      var v4618;
      var v14066 = publicMembers == null;
      if (v14066) {
        var v14065 = TypeScript$$24.StringHashTable;
        v4618 = new v14065;
      } else {
        v4618 = publicMembers;
      }
      var publicMembersTable = v4618;
      var v4619 = TypeScript$$24.ScopedMembers;
      var v14067 = TypeScript$$24.DualStringHashTable;
      var v19690 = TypeScript$$24.StringHashTable;
      var v14068 = new v19690;
      var v4620 = new v14067(publicMembersTable, v14068);
      var members$$26 = new v4619(v4620);
      var v14069 = typeSymbol$$3.type;
      var v4621 = v14069.ambientMembers;
      var publicAmbientMembers = v4621.publicMembers;
      var v4622;
      var v14071 = publicAmbientMembers == null;
      if (v14071) {
        var v14070 = TypeScript$$24.StringHashTable;
        v4622 = new v14070;
      } else {
        v4622 = publicAmbientMembers;
      }
      var publicAmbientMembersTable = v4622;
      var v4623 = TypeScript$$24.ScopedMembers;
      var v14072 = TypeScript$$24.DualStringHashTable;
      var v19691 = TypeScript$$24.StringHashTable;
      var v14073 = new v19691;
      var v4624 = new v14072(publicAmbientMembersTable, v14073);
      var ambientMembers$$2 = new v4623(v4624);
      var v4625 = TypeScript$$24.ModuleType;
      modType$$1 = new v4625(enclosedTypes$$3, ambientEnclosedTypes$$3);
      if (isEnum) {
        var v14074 = modType$$1.typeFlags;
        var v19692 = TypeScript$$24.TypeFlags;
        var v14075 = v19692.IsEnum;
        modType$$1.typeFlags = v14074 | v14075;
      }
      modType$$1.members = members$$26;
      modType$$1.ambientMembers = ambientMembers$$2;
      modType$$1.setHasImplementation();
      modType$$1.symbol = typeSymbol$$3;
      var v4626 = moduleDecl$$6.minChar;
      typeSymbol$$3.addLocation(v4626);
      var v4627 = typeSymbol$$3.expansions;
      v4627.push(modType$$1);
      var v4628 = typeSymbol$$3.expansionsDeclAST;
      v4628.push(moduleDecl$$6);
    }
    var v14076 = context$$53.scopeChain;
    var v4631 = v14076.moduleDecl;
    if (v4631) {
      var v14077 = context$$53.scopeChain;
      var v4630 = v14077.moduleDecl;
      v4630.recordNonInterface();
    }
    if (isExported$$2) {
      var v14078 = typeSymbol$$3.flags;
      var v19693 = TypeScript$$24.SymbolFlags;
      var v14079 = v19693.Exported;
      typeSymbol$$3.flags = v14078 | v14079;
    }
    var v19694 = context$$53.scopeChain;
    var v14080 = v19694.moduleDecl;
    var v19697 = !v14080;
    if (v19697) {
      var v23342 = context$$53.scopeChain;
      var v19695 = v23342.container;
      var v23343 = context$$53.checker;
      var v19696 = v23343.gloMod;
      v14080 = v19695 == v19696;
    }
    var v4632 = v14080;
    if (v4632) {
      var v14081 = typeSymbol$$3.flags;
      var v19698 = TypeScript$$24.SymbolFlags;
      var v14082 = v19698.ModuleMember;
      typeSymbol$$3.flags = v14081 | v14082;
    }
    moduleDecl$$6.mod = modType$$1;
    var v4633 = modType$$1.members;
    var v4634 = modType$$1.ambientMembers;
    var v4635 = modType$$1.enclosedTypes;
    var v4636 = modType$$1.ambientEnclosedTypes;
    TypeScript$$24.pushTypeCollectionScope(typeSymbol$$3, v4633, v4634, v4635, v4636, context$$53, null, null, moduleDecl$$6);
    return true;
  }
  function preCollectClassTypes(ast$$68, parent$$56, context$$54) {
    var scopeChain$$5 = context$$54.scopeChain;
    var classDecl$$7 = ast$$68;
    var classType$$5;
    var instanceType$$4;
    var typeSymbol$$4 = null;
    var v4637 = classDecl$$7.name;
    var className$$4 = v4637.text;
    var alreadyInScope = false;
    var v4638 = classDecl$$7.varFlags;
    var v14083 = TypeScript$$24.VarFlags;
    var v4639 = v14083.Ambient;
    var isAmbient$$6 = TypeScript$$24.hasFlag(v4638, v4639);
    var v4640 = classDecl$$7.varFlags;
    var v14084 = TypeScript$$24.VarFlags;
    var v4641 = v14084.Exported;
    var isExported$$3 = TypeScript$$24.hasFlag(v4640, v4641);
    var v14085 = context$$54.scopeChain;
    var v4642 = v14085.container;
    var v14086 = context$$54.checker;
    var v4643 = v14086.gloMod;
    var isGlobal$$3 = v4642 == v4643;
    var containerMod = scopeChain$$5.container;
    var foundValSymbol = false;
    var v4644 = scopeChain$$5.scope;
    typeSymbol$$4 = v4644.findLocal(className$$4, false, true);
    var v4651 = !typeSymbol$$4;
    if (v4651) {
      var v4645 = scopeChain$$5.scope;
      var valTypeSymbol = v4645.findLocal(className$$4, false, false);
      var v25072 = valTypeSymbol;
      if (v25072) {
        v25072 = valTypeSymbol.isType();
      }
      var v23344 = v25072;
      if (v23344) {
        v23344 = valTypeSymbol.declAST;
      }
      var v19699 = v23344;
      if (v19699) {
        var v25073 = valTypeSymbol.declAST;
        var v23345 = v25073.nodeType;
        var v25074 = TypeScript$$24.NodeType;
        var v23346 = v25074.FuncDecl;
        v19699 = v23345 == v23346;
      }
      var v14087 = v19699;
      if (v14087) {
        var v19700 = valTypeSymbol.declAST;
        v14087 = v19700.isSignature();
      }
      var v4650 = v14087;
      if (v4650) {
        typeSymbol$$4 = valTypeSymbol;
        foundValSymbol = true;
        if (isExported$$3) {
          var v14088 = typeSymbol$$4.flags;
          var v19701 = TypeScript$$24.SymbolFlags;
          var v14089 = v19701.Exported;
          typeSymbol$$4.flags = v14088 | v14089;
        }
        if (isAmbient$$6) {
          var v14090 = typeSymbol$$4.flags;
          var v19702 = TypeScript$$24.SymbolFlags;
          var v14091 = v19702.Ambient;
          typeSymbol$$4.flags = v14090 | v14091;
        }
        var v14092 = context$$54.scopeChain;
        var v4646 = v14092.scope;
        var v14093 = context$$54.scopeChain;
        var v4647 = v14093.container;
        var v14094 = context$$54.checker;
        var v4648 = v14094.errorReporter;
        var v4649 = isExported$$3 || isGlobal$$3;
        v4646.enter(v4647, ast$$68, typeSymbol$$4, v4648, v4649, true, isAmbient$$6);
      }
    }
    var v19703 = typeSymbol$$4;
    if (v19703) {
      v19703 = !foundValSymbol;
    }
    var v14095 = v19703;
    if (v14095) {
      var v19704 = typeSymbol$$4.declAST;
      v14095 = v19704 != classDecl$$7;
    }
    var v4652 = v14095;
    if (v4652) {
      typeSymbol$$4 = null;
    }
    var v4697 = typeSymbol$$4 == null;
    if (v4697) {
      var v4653 = scopeChain$$5.scope;
      var valueSymbol = v4653.findLocal(className$$4, false, false);
      var v4654 = TypeScript$$24.Type;
      classType$$5 = new v4654;
      classType$$5.setHasImplementation();
      var v4655 = TypeScript$$24.Type;
      instanceType$$4 = new v4655;
      instanceType$$4.setHasImplementation();
      classType$$5.instanceType = instanceType$$4;
      var v4656 = TypeScript$$24.ScopedMembers;
      var v14096 = TypeScript$$24.DualStringHashTable;
      var v19705 = TypeScript$$24.StringHashTable;
      var v14097 = new v19705;
      var v19706 = TypeScript$$24.StringHashTable;
      var v14098 = new v19706;
      var v4657 = new v14096(v14097, v14098);
      var v26594 = new v4656(v4657);
      classType$$5.members = v26594;
      var v4658 = TypeScript$$24.ScopedMembers;
      var v14099 = TypeScript$$24.DualStringHashTable;
      var v19707 = TypeScript$$24.StringHashTable;
      var v14100 = new v19707;
      var v19708 = TypeScript$$24.StringHashTable;
      var v14101 = new v19708;
      var v4659 = new v14099(v14100, v14101);
      var v26595 = new v4658(v4659);
      classType$$5.ambientMembers = v26595;
      var classType$$inline_10 = classType$$5;
      var ast$$inline_11 = classDecl$$7;
      var context$$inline_12 = context$$54;
      var v4660 = TypeScript$$24.ValueLocation;
      var field$$inline_13 = new v4660;
      var v4661 = TypeScript$$24.TypeLink;
      var v26596 = new v4661;
      field$$inline_13.typeLink = v26596;
      var v4662 = field$$inline_13.typeLink;
      v4662.ast = ast$$inline_11;
      var v4663 = field$$inline_13.typeLink;
      v4663.type = classType$$inline_10.instanceType;
      var v4664 = TypeScript$$24.FieldSymbol;
      var v4665 = ast$$inline_11.minChar;
      var v19709 = context$$inline_12.checker;
      var v14102 = v19709.locationInfo;
      var v4666 = v14102.unitIndex;
      var fieldSymbol$$inline_14 = new v4664("prototype", v4665, v4666, true, field$$inline_13);
      var v14103 = fieldSymbol$$inline_14.flags;
      var v23347 = TypeScript$$24.SymbolFlags;
      var v19710 = v23347.Property;
      var v23348 = TypeScript$$24.SymbolFlags;
      var v19711 = v23348.BuiltIn;
      var v14104 = v19710 | v19711;
      fieldSymbol$$inline_14.flags = v14103 | v14104;
      field$$inline_13.symbol = fieldSymbol$$inline_14;
      fieldSymbol$$inline_14.declAST = ast$$inline_11;
      var v4667 = classType$$inline_10.members;
      v4667.addPublicMember("prototype", fieldSymbol$$inline_14);
      var v4668 = TypeScript$$24.ScopedMembers;
      var v14105 = TypeScript$$24.DualStringHashTable;
      var v19712 = TypeScript$$24.StringHashTable;
      var v14106 = new v19712;
      var v19713 = TypeScript$$24.StringHashTable;
      var v14107 = new v19713;
      var v4669 = new v14105(v14106, v14107);
      var v26597 = new v4668(v4669);
      instanceType$$4.members = v26597;
      var v4670 = TypeScript$$24.ScopedMembers;
      var v14108 = TypeScript$$24.DualStringHashTable;
      var v19714 = TypeScript$$24.StringHashTable;
      var v14109 = new v19714;
      var v19715 = TypeScript$$24.StringHashTable;
      var v14110 = new v19715;
      var v4671 = new v14108(v14109, v14110);
      var v26598 = new v4670(v4671);
      instanceType$$4.ambientMembers = v26598;
      var v4672 = TypeScript$$24.TypeSymbol;
      var v14111 = classDecl$$7.name;
      var v4673 = v14111.minChar;
      var v4674 = className$$4.length;
      var v19716 = context$$54.checker;
      var v14112 = v19716.locationInfo;
      var v4675 = v14112.unitIndex;
      typeSymbol$$4 = new v4672(className$$4, v4673, v4674, v4675, classType$$5);
      typeSymbol$$4.declAST = classDecl$$7;
      typeSymbol$$4.instanceType = instanceType$$4;
      classType$$5.symbol = typeSymbol$$4;
      instanceType$$4.symbol = typeSymbol$$4;
      var v14113 = context$$54.scopeChain;
      var v4678 = v14113.moduleDecl;
      if (v4678) {
        var v14114 = context$$54.scopeChain;
        var v4676 = v14114.moduleDecl;
        v4676.recordNonInterface();
        var v4677 = context$$54.scopeChain;
        typeSymbol$$4.declModule = v4677.moduleDecl;
        var v14115 = typeSymbol$$4.flags;
        var v19717 = TypeScript$$24.SymbolFlags;
        var v14116 = v19717.ModuleMember;
        typeSymbol$$4.flags = v14115 | v14116;
      }
      if (isExported$$3) {
        var v14117 = typeSymbol$$4.flags;
        var v19718 = TypeScript$$24.SymbolFlags;
        var v14118 = v19718.Exported;
        typeSymbol$$4.flags = v14117 | v14118;
      }
      if (isAmbient$$6) {
        var v14119 = typeSymbol$$4.flags;
        var v19719 = TypeScript$$24.SymbolFlags;
        var v14120 = v19719.Ambient;
        typeSymbol$$4.flags = v14119 | v14120;
      }
      ast$$68.type = classType$$5;
      var v14121 = context$$54.scopeChain;
      var v4679 = v14121.scope;
      var v14122 = context$$54.scopeChain;
      var v4680 = v14122.container;
      var v14123 = context$$54.checker;
      var v4681 = v14123.errorReporter;
      var v4682 = isExported$$3 || isGlobal$$3;
      v4679.enter(v4680, ast$$68, typeSymbol$$4, v4681, v4682, true, isAmbient$$6);
      var v4687 = valueSymbol == null;
      if (v4687) {
        var v14124 = context$$54.scopeChain;
        var v4683 = v14124.scope;
        var v14125 = context$$54.scopeChain;
        var v4684 = v14125.container;
        var v14126 = context$$54.checker;
        var v4685 = v14126.errorReporter;
        var v4686 = isExported$$3 || isGlobal$$3;
        v4683.enter(v4684, ast$$68, typeSymbol$$4, v4685, v4686, false, isAmbient$$6);
      }
    } else {
      classType$$5 = typeSymbol$$4.type;
      var v14127 = classType$$5.instanceType;
      var v4696 = v14127 == null;
      if (v4696) {
        var v4688 = TypeScript$$24.Type;
        var v26599 = new v4688;
        classType$$5.instanceType = v26599;
        var v4689 = classType$$5.instanceType;
        v4689.setHasImplementation();
        var v4690 = classType$$5.instanceType;
        var v14128 = TypeScript$$24.ScopedMembers;
        var v19720 = TypeScript$$24.DualStringHashTable;
        var v23349 = TypeScript$$24.StringHashTable;
        var v19721 = new v23349;
        var v23350 = TypeScript$$24.StringHashTable;
        var v19722 = new v23350;
        var v14129 = new v19720(v19721, v19722);
        var v26600 = new v14128(v14129);
        v4690.members = v26600;
        var v4691 = classType$$5.instanceType;
        v4691.symbol = classType$$5.symbol;
        var v4692 = TypeScript$$24.ScopedMembers;
        var v14130 = TypeScript$$24.DualStringHashTable;
        var v19723 = TypeScript$$24.StringHashTable;
        var v14131 = new v19723;
        var v19724 = TypeScript$$24.StringHashTable;
        var v14132 = new v19724;
        var v4693 = new v14130(v14131, v14132);
        var v26601 = new v4692(v4693);
        classType$$5.members = v26601;
        var v4694 = TypeScript$$24.ScopedMembers;
        var v14133 = TypeScript$$24.DualStringHashTable;
        var v19725 = TypeScript$$24.StringHashTable;
        var v14134 = new v19725;
        var v19726 = TypeScript$$24.StringHashTable;
        var v14135 = new v19726;
        var v4695 = new v14133(v14134, v14135);
        var v26602 = new v4694(v4695);
        classType$$5.ambientMembers = v26602;
      }
      instanceType$$4 = classType$$5.instanceType;
      ast$$68.type = classType$$5;
    }
    var v14136 = classDecl$$7.constructorDecl;
    var v4703 = !v14136;
    if (v4703) {
      var v25075 = typeSymbol$$4;
      if (v25075) {
        v25075 = typeSymbol$$4.declAST;
      }
      var v23351 = v25075;
      if (v23351) {
        var v25076 = typeSymbol$$4.declAST;
        v23351 = v25076.type;
      }
      var v19727 = v23351;
      if (v19727) {
        var v25077 = typeSymbol$$4.declAST;
        var v23352 = v25077.type;
        v19727 = v23352.call;
      }
      var v14137 = v19727;
      if (v14137) {
        var v23353 = typeSymbol$$4.declAST;
        var v19728 = v23353.isOverload;
        v14137 = !v19728;
      }
      var v4701 = v14137;
      if (v4701) {
        var v14138 = context$$54.checker;
        var v4698 = v14138.errorReporter;
        var v4699 = typeSymbol$$4.declAST;
        var v4700 = typeSymbol$$4.name;
        v4698.duplicateIdentifier(v4699, v4700);
      }
      var v4702 = classDecl$$7.type;
      createNewConstructGroupForType(v4702);
    }
    var v14139 = classType$$5.typeFlags;
    var v19729 = TypeScript$$24.TypeFlags;
    var v14140 = v19729.IsClass;
    classType$$5.typeFlags = v14139 | v14140;
    var v14141 = instanceType$$4.typeFlags;
    var v19730 = TypeScript$$24.TypeFlags;
    var v14142 = v19730.IsClass;
    instanceType$$4.typeFlags = v14141 | v14142;
    getBases(instanceType$$4, classDecl$$7);
    var v4704 = instanceType$$4.members;
    var v4705 = instanceType$$4.ambientMembers;
    TypeScript$$24.pushTypeCollectionScope(typeSymbol$$4, v4704, v4705, null, null, context$$54, instanceType$$4, classType$$5, null);
    return true;
  }
  function preCollectInterfaceTypes(ast$$69, parent$$57, context$$55) {
    var scopeChain$$6 = context$$55.scopeChain;
    var interfaceDecl$$4 = ast$$69;
    var interfaceSymbol$$1 = null;
    var interfaceType$$2 = null;
    var v4706 = interfaceDecl$$4.varFlags;
    var v14143 = TypeScript$$24.VarFlags;
    var v4707 = v14143.Exported;
    var isExported$$4 = TypeScript$$24.hasFlag(v4706, v4707);
    var v14144 = context$$55.scopeChain;
    var v4708 = v14144.container;
    var v14145 = context$$55.checker;
    var v4709 = v14145.gloMod;
    var isGlobal$$4 = v4708 == v4709;
    var alreadyInScope$$1 = true;
    alreadyInScope$$1 = false;
    var v4710 = interfaceDecl$$4.name;
    var interfaceName = v4710.text;
    var v4711 = scopeChain$$6.scope;
    interfaceSymbol$$1 = v4711.findLocal(interfaceName, false, true);
    var v4722 = interfaceSymbol$$1 == null;
    if (v4722) {
      var v4712 = TypeScript$$24.Type;
      interfaceType$$2 = new v4712;
      var v4713 = TypeScript$$24.TypeSymbol;
      var v14146 = interfaceDecl$$4.name;
      var v4714 = v14146.minChar;
      var v4715 = interfaceName.length;
      var v19731 = context$$55.checker;
      var v14147 = v19731.locationInfo;
      var v4716 = v14147.unitIndex;
      interfaceSymbol$$1 = new v4713(interfaceName, v4714, v4715, v4716, interfaceType$$2);
      interfaceType$$2.symbol = interfaceSymbol$$1;
      var v4717 = TypeScript$$24.ScopedMembers;
      var v14148 = TypeScript$$24.DualStringHashTable;
      var v19732 = TypeScript$$24.StringHashTable;
      var v14149 = new v19732;
      var v19733 = TypeScript$$24.StringHashTable;
      var v14150 = new v19733;
      var v4718 = new v14148(v14149, v14150);
      var v26603 = new v4717(v4718);
      interfaceType$$2.members = v26603;
      var v4719 = TypeScript$$24.ScopedMembers;
      var v14151 = TypeScript$$24.DualStringHashTable;
      var v19734 = TypeScript$$24.StringHashTable;
      var v14152 = new v19734;
      var v19735 = TypeScript$$24.StringHashTable;
      var v14153 = new v19735;
      var v4720 = new v14151(v14152, v14153);
      var v26604 = new v4719(v4720);
      interfaceType$$2.ambientMembers = v26604;
      interfaceSymbol$$1.declAST = interfaceDecl$$4;
      var v4721 = context$$55.scopeChain;
      interfaceSymbol$$1.declModule = v4721.moduleDecl;
    } else {
      alreadyInScope$$1 = true;
      interfaceType$$2 = interfaceSymbol$$1.type;
    }
    var v4724 = !interfaceType$$2;
    if (v4724) {
      var v4723 = context$$55.checker;
      interfaceType$$2 = v4723.anyType;
    }
    ast$$69.type = interfaceType$$2;
    getBases(interfaceType$$2, interfaceDecl$$4);
    if (isExported$$4) {
      var v14154 = interfaceSymbol$$1.flags;
      var v19736 = TypeScript$$24.SymbolFlags;
      var v14155 = v19736.Exported;
      interfaceSymbol$$1.flags = v14154 | v14155;
    }
    var v14156 = context$$55.scopeChain;
    var v4725 = v14156.moduleDecl;
    if (v4725) {
      var v14157 = interfaceSymbol$$1.flags;
      var v19737 = TypeScript$$24.SymbolFlags;
      var v14158 = v19737.ModuleMember;
      interfaceSymbol$$1.flags = v14157 | v14158;
    }
    var v4730 = !alreadyInScope$$1;
    if (v4730) {
      var v14159 = context$$55.scopeChain;
      var v4726 = v14159.scope;
      var v14160 = context$$55.scopeChain;
      var v4727 = v14160.container;
      var v14161 = context$$55.checker;
      var v4728 = v14161.errorReporter;
      var v4729 = isGlobal$$4 || isExported$$4;
      v4726.enter(v4727, ast$$69, interfaceSymbol$$1, v4728, v4729, true, false);
    }
    var v4731 = interfaceType$$2.members;
    var v4732 = interfaceType$$2.ambientMembers;
    TypeScript$$24.pushTypeCollectionScope(interfaceSymbol$$1, v4731, v4732, null, null, context$$55, interfaceType$$2, null, null);
    return true;
  }
  function preCollectArgDeclTypes(ast$$70, parent$$58, context$$56) {
    var scopeChain$$7 = context$$56.scopeChain;
    var argDecl$$1 = ast$$70;
    var v14162 = argDecl$$1.varFlags;
    var v23354 = TypeScript$$24.VarFlags;
    var v19738 = v23354.Public;
    var v23355 = TypeScript$$24.VarFlags;
    var v19739 = v23355.Private;
    var v14163 = v19738 | v19739;
    var v4749 = TypeScript$$24.hasFlag(v14162, v14163);
    if (v4749) {
      var v4733 = TypeScript$$24.ValueLocation;
      var field$$4 = new v4733;
      var v4734 = argDecl$$1.varFlags;
      var v14164 = TypeScript$$24.VarFlags;
      var v4735 = v14164.Private;
      var isPrivate$$2 = TypeScript$$24.hasFlag(v4734, v4735);
      var v4736 = TypeScript$$24.FieldSymbol;
      var v14165 = argDecl$$1.id;
      var v4737 = v14165.text;
      var v14166 = argDecl$$1.id;
      var v4738 = v14166.minChar;
      var v19740 = context$$56.checker;
      var v14167 = v19740.locationInfo;
      var v4739 = v14167.unitIndex;
      var v19741 = argDecl$$1.varFlags;
      var v23356 = TypeScript$$24.VarFlags;
      var v19742 = v23356.Readonly;
      var v14168 = TypeScript$$24.hasFlag(v19741, v19742);
      var v4740 = !v14168;
      var fieldSymbol$$2 = new v4736(v4737, v4738, v4739, v4740, field$$4);
      var v4741 = argDecl$$1.varFlags;
      fieldSymbol$$2.transferVarFlags(v4741);
      field$$4.symbol = fieldSymbol$$2;
      fieldSymbol$$2.declAST = ast$$70;
      argDecl$$1.parameterPropertySym = fieldSymbol$$2;
      var v14169 = context$$56.scopeChain;
      var v4742 = v14169.scope;
      var v14170 = context$$56.scopeChain;
      var v4743 = v14170.container;
      var v14171 = context$$56.checker;
      var v4744 = v14171.errorReporter;
      var v4745 = !isPrivate$$2;
      v4742.enter(v4743, ast$$70, fieldSymbol$$2, v4744, v4745, false, false);
      var v4746 = argDecl$$1.typeExpr;
      var v4747 = context$$56.checker;
      var v14172 = argDecl$$1.init;
      var v4748 = v14172 == null;
      var v26605 = TypeScript$$24.getTypeLink(v4746, v4747, v4748);
      field$$4.typeLink = v26605;
      argDecl$$1.sym = fieldSymbol$$2;
    }
    return false;
  }
  function preCollectVarDeclTypes(ast$$71, parent$$59, context$$57) {
    var scopeChain$$8 = context$$57.scopeChain;
    var varDecl$$12 = ast$$71;
    var v4750 = varDecl$$12.varFlags;
    var v14173 = TypeScript$$24.VarFlags;
    var v4751 = v14173.Ambient;
    var isAmbient$$7 = TypeScript$$24.hasFlag(v4750, v4751);
    var v4752 = varDecl$$12.varFlags;
    var v14174 = TypeScript$$24.VarFlags;
    var v4753 = v14174.Exported;
    var isExported$$5 = TypeScript$$24.hasFlag(v4752, v4753);
    var v14175 = context$$57.scopeChain;
    var v4754 = v14175.container;
    var v14176 = context$$57.checker;
    var v4755 = v14176.gloMod;
    var isGlobal$$5 = v4754 == v4755;
    var v4756 = varDecl$$12.varFlags;
    var v14177 = TypeScript$$24.VarFlags;
    var v4757 = v14177.Property;
    var isProperty = TypeScript$$24.hasFlag(v4756, v4757);
    var v4758 = varDecl$$12.varFlags;
    var v14178 = TypeScript$$24.VarFlags;
    var v4759 = v14178.Static;
    var isStatic$$8 = TypeScript$$24.hasFlag(v4758, v4759);
    var v4760 = varDecl$$12.varFlags;
    var v14179 = TypeScript$$24.VarFlags;
    var v4761 = v14179.Private;
    var isPrivate$$3 = TypeScript$$24.hasFlag(v4760, v4761);
    var v14180 = varDecl$$12.id;
    var v4762 = v14180.flags;
    var v14181 = TypeScript$$24.ASTFlags;
    var v4763 = v14181.OptionalName;
    var isOptional$$1 = TypeScript$$24.hasFlag(v4762, v4763);
    var v14182 = context$$57.scopeChain;
    var v4765 = v14182.moduleDecl;
    if (v4765) {
      var v14183 = context$$57.scopeChain;
      var v4764 = v14183.moduleDecl;
      v4764.recordNonInterface();
    }
    var v19743 = isProperty || isExported$$5;
    var v23359 = !v19743;
    if (v23359) {
      var v25078 = context$$57.scopeChain;
      var v23357 = v25078.container;
      var v25079 = context$$57.checker;
      var v23358 = v25079.gloMod;
      v19743 = v23357 == v23358;
    }
    var v14184 = v19743;
    var v19745 = !v14184;
    if (v19745) {
      var v19744 = context$$57.scopeChain;
      v14184 = v19744.moduleDecl;
    }
    var v4792 = v14184;
    if (v4792) {
      if (isAmbient$$7) {
        var v4766 = scopeChain$$8.scope;
        var v14185 = varDecl$$12.id;
        var v4767 = v14185.text;
        var existingSym = v4766.findLocal(v4767, false, false);
        if (existingSym) {
          varDecl$$12.sym = existingSym;
          return false;
        }
      }
      var v14186 = varDecl$$12.id;
      var v4769 = v14186 == null;
      if (v4769) {
        var v14187 = context$$57.checker;
        var v4768 = v14187.errorReporter;
        v4768.simpleError(varDecl$$12, "Expected variable identifier at this location");
        return false;
      }
      var v4770 = TypeScript$$24.ValueLocation;
      var field$$5 = new v4770;
      var v4771 = TypeScript$$24.FieldSymbol;
      var v14188 = varDecl$$12.id;
      var v4772 = v14188.text;
      var v14189 = varDecl$$12.id;
      var v4773 = v14189.minChar;
      var v19746 = context$$57.checker;
      var v14190 = v19746.locationInfo;
      var v4774 = v14190.unitIndex;
      var v19747 = varDecl$$12.varFlags;
      var v23360 = TypeScript$$24.VarFlags;
      var v19748 = v23360.Readonly;
      var v14191 = v19747 & v19748;
      var v19749 = TypeScript$$24.VarFlags;
      var v14192 = v19749.None;
      var v4775 = v14191 == v14192;
      var fieldSymbol$$3 = new v4771(v4772, v4773, v4774, v4775, field$$5);
      var v4776 = varDecl$$12.varFlags;
      fieldSymbol$$3.transferVarFlags(v4776);
      if (isOptional$$1) {
        var v14193 = fieldSymbol$$3.flags;
        var v19750 = TypeScript$$24.SymbolFlags;
        var v14194 = v19750.Optional;
        fieldSymbol$$3.flags = v14193 | v14194;
      }
      field$$5.symbol = fieldSymbol$$3;
      fieldSymbol$$3.declAST = ast$$71;
      var v19751 = context$$57.scopeChain;
      var v14195 = v19751.moduleDecl;
      var v19754 = !v14195;
      if (v19754) {
        var v23361 = context$$57.scopeChain;
        var v19752 = v23361.container;
        var v23362 = context$$57.checker;
        var v19753 = v23362.gloMod;
        v14195 = v19752 == v19753;
      }
      var v4778 = v14195;
      if (v4778) {
        var v14196 = fieldSymbol$$3.flags;
        var v19755 = TypeScript$$24.SymbolFlags;
        var v14197 = v19755.ModuleMember;
        fieldSymbol$$3.flags = v14196 | v14197;
        var v4777 = context$$57.scopeChain;
        fieldSymbol$$3.declModule = v4777.moduleDecl;
      }
      var v23363 = varDecl$$12.varFlags;
      var v25080 = TypeScript$$24.VarFlags;
      var v23364 = v25080.Property;
      var v19756 = TypeScript$$24.hasFlag(v23363, v23364);
      if (v19756) {
        v19756 = isStatic$$8;
      }
      var v14198 = v19756;
      if (v14198) {
        var v19757 = context$$57.scopeChain;
        v14198 = v19757.classType;
      }
      var v4787 = v14198;
      if (v4787) {
        var v25802 = context$$57.scopeChain;
        var v25081 = v25802.classType;
        var v23365 = v25081.members;
        var v19758 = v23365.publicMembers;
        var v23366 = varDecl$$12.id;
        var v19759 = v23366.text;
        var v14199 = v19758.add(v19759, fieldSymbol$$3);
        var v4781 = !v14199;
        if (v4781) {
          var v14200 = context$$57.checker;
          var v4779 = v14200.errorReporter;
          var v4780 = fieldSymbol$$3.name;
          v4779.duplicateIdentifier(ast$$71, v4780);
        }
        var v14201 = context$$57.scopeChain;
        var v4782 = v14201.classType;
        fieldSymbol$$3.container = v4782.symbol;
      } else {
        var v14202 = context$$57.scopeChain;
        var v4783 = v14202.scope;
        var v14203 = context$$57.scopeChain;
        var v4784 = v14203.container;
        var v14204 = context$$57.checker;
        var v4785 = v14204.errorReporter;
        var v14205 = !isPrivate$$3;
        if (v14205) {
          var v23367 = isProperty || isExported$$5;
          var v25082 = !v23367;
          if (v25082) {
            v23367 = isGlobal$$5;
          }
          var v19760 = v23367;
          var v23368 = !v19760;
          if (v23368) {
            v19760 = isStatic$$8;
          }
          v14205 = v19760;
        }
        var v4786 = v14205;
        v4783.enter(v4784, ast$$71, fieldSymbol$$3, v4785, v4786, false, isAmbient$$7);
      }
      var v14206 = varDecl$$12.varFlags;
      var v19761 = TypeScript$$24.VarFlags;
      var v14207 = v19761.Exported;
      var v4788 = TypeScript$$24.hasFlag(v14206, v14207);
      if (v4788) {
        var v14208 = fieldSymbol$$3.flags;
        var v19762 = TypeScript$$24.SymbolFlags;
        var v14209 = v19762.Exported;
        fieldSymbol$$3.flags = v14208 | v14209;
      }
      var v4789 = varDecl$$12.typeExpr;
      var v4790 = context$$57.checker;
      var v14210 = varDecl$$12.init;
      var v4791 = v14210 == null;
      var v26606 = TypeScript$$24.getTypeLink(v4789, v4790, v4791);
      field$$5.typeLink = v26606;
      varDecl$$12.sym = fieldSymbol$$3;
    }
    return false;
  }
  function preCollectFuncDeclTypes(ast$$72, parent$$60, context$$58) {
    var scopeChain$$9 = context$$58.scopeChain;
    var v14211 = context$$58.scopeChain;
    var v4794 = v14211.moduleDecl;
    if (v4794) {
      var v14212 = context$$58.scopeChain;
      var v4793 = v14212.moduleDecl;
      v4793.recordNonInterface();
    }
    var funcDecl$$22 = ast$$72;
    var fgSym$$3 = null;
    var nameText$$3 = funcDecl$$22.getNameText();
    var v4795 = funcDecl$$22.fncFlags;
    var v19763 = TypeScript$$24.FncFlags;
    var v14213 = v19763.Exported;
    var v19764 = TypeScript$$24.FncFlags;
    var v14214 = v19764.ClassPropertyMethodExported;
    var v4796 = v14213 | v14214;
    var isExported$$6 = TypeScript$$24.hasFlag(v4795, v4796);
    var v4797 = funcDecl$$22.fncFlags;
    var v14215 = TypeScript$$24.FncFlags;
    var v4798 = v14215.Static;
    var isStatic$$9 = TypeScript$$24.hasFlag(v4797, v4798);
    var v4799 = funcDecl$$22.fncFlags;
    var v14216 = TypeScript$$24.FncFlags;
    var v4800 = v14216.Private;
    var isPrivate$$4 = TypeScript$$24.hasFlag(v4799, v4800);
    var v4801 = funcDecl$$22.isConstructMember();
    var v14217 = !v4801;
    if (v14217) {
      v4801 = funcDecl$$22.isConstructor;
    }
    var isConstructor$$3 = v4801;
    var v4802;
    var v25083 = funcDecl$$22.isMethod();
    if (v25083) {
      v25083 = isStatic$$9;
    }
    var v23369 = v25083;
    var v25084 = !v23369;
    if (v25084) {
      v23369 = funcDecl$$22.isAccessor();
    }
    var v19765 = v23369;
    if (v19765) {
      var v23370 = context$$58.scopeChain;
      v19765 = v23370.classType;
    }
    var v14220 = v19765;
    if (v14220) {
      var v19766 = context$$58.scopeChain;
      var v14218 = v19766.classType;
      v4802 = v14218.symbol;
    } else {
      var v14219 = context$$58.scopeChain;
      v4802 = v14219.container;
    }
    var containerSym = v4802;
    var v4803 = context$$58.scopeChain;
    var containerScope = v4803.scope;
    var v14221 = context$$58.checker;
    var v4804 = v14221.gloMod;
    var isGlobal$$6 = containerSym == v4804;
    var v4805 = funcDecl$$22.name;
    if (v4805) {
      var v19767 = funcDecl$$22.name;
      var v14222 = v19767.flags;
      var v19768 = TypeScript$$24.ASTFlags;
      var v14223 = v19768.OptionalName;
      v4805 = TypeScript$$24.hasFlag(v14222, v14223);
    }
    var isOptional$$2 = v4805;
    var go$$2 = false;
    var foundSymbol = false;
    var v14224 = isConstructor$$3;
    if (v14224) {
      var v19769 = funcDecl$$22.fncFlags;
      var v23371 = TypeScript$$24.FncFlags;
      var v19770 = v23371.ClassMethod;
      v14224 = TypeScript$$24.hasFlag(v19769, v19770);
    }
    var v4807 = v14224;
    if (v4807) {
      containerSym = containerSym.container;
      var v4806 = scopeChain$$9.previous;
      containerScope = v4806.scope;
    }
    var v14225 = context$$58.checker;
    var v4808 = v14225.locationInfo;
    funcDecl$$22.unitIndex = v4808.unitIndex;
    var v26121 = funcDecl$$22.isConstructor;
    var v25803 = !v26121;
    if (v25803) {
      v25803 = containerSym;
    }
    var v25085 = v25803;
    if (v25085) {
      v25085 = containerSym.declAST;
    }
    var v23372 = v25085;
    if (v23372) {
      var v25804 = containerSym.declAST;
      var v25086 = v25804.nodeType;
      var v25805 = TypeScript$$24.NodeType;
      var v25087 = v25805.FuncDecl;
      v23372 = v25086 == v25087;
    }
    var v19771 = v23372;
    if (v19771) {
      var v23373 = containerSym.declAST;
      v19771 = v23373.isConstructor;
    }
    var v14226 = v19771;
    if (v14226) {
      var v19772 = funcDecl$$22.isMethod();
      v14226 = !v19772;
    }
    var v4809 = v14226;
    if (v4809) {
      return go$$2;
    }
    var v14227 = funcDecl$$22.fncFlags;
    var v19773 = TypeScript$$24.FncFlags;
    var v14228 = v19773.Signature;
    var v4845 = TypeScript$$24.hasFlag(v14227, v14228);
    if (v4845) {
      var v4810 = context$$58.scopeChain;
      var instType$$1 = v4810.thisType;
      var v14229 = nameText$$3;
      if (v14229) {
        v14229 = nameText$$3 != "__missing";
      }
      var v4814 = v14229;
      if (v4814) {
        if (isStatic$$9) {
          var v19774 = containerSym.type;
          var v14230 = v19774.members;
          var v4811 = v14230.allMembers;
          fgSym$$3 = v4811.lookup(nameText$$3);
        } else {
          fgSym$$3 = containerScope.findLocal(nameText$$3, false, false);
          var v4812 = fgSym$$3 == null;
          if (v4812) {
            fgSym$$3 = containerScope.findLocal(nameText$$3, false, true);
          }
        }
        if (fgSym$$3) {
          foundSymbol = true;
          var v19775 = funcDecl$$22.isSignature();
          var v14231 = !v19775;
          if (v14231) {
            var v23374 = funcDecl$$22.fncFlags;
            var v25088 = TypeScript$$24.FncFlags;
            var v23375 = v25088.Ambient;
            var v19776 = TypeScript$$24.hasFlag(v23374, v23375);
            var v23376 = fgSym$$3.flags;
            var v25089 = TypeScript$$24.SymbolFlags;
            var v23377 = v25089.Ambient;
            var v19777 = TypeScript$$24.hasFlag(v23376, v23377);
            v14231 = v19776 != v19777;
          }
          var v4813 = v14231;
          if (v4813) {
            fgSym$$3 = null;
          }
        }
      }
      var v4823 = fgSym$$3 == null;
      if (v4823) {
        var v14232 = funcDecl$$22.isSpecialFn();
        var v4817 = !v14232;
        if (v4817) {
          var v23378 = context$$58.checker;
          var v23379 = !foundSymbol;
          var v19778 = v23378.createFunctionSignature(funcDecl$$22, containerSym, containerScope, null, v23379);
          var v14233 = v19778.declAST;
          var v4815 = v14233.type;
          fgSym$$3 = v4815.symbol;
        } else {
          var v23380 = context$$58.checker;
          var v19779 = v23380.createFunctionSignature(funcDecl$$22, containerSym, containerScope, containerSym, false);
          var v14234 = v19779.declAST;
          var v4816 = v14234.type;
          fgSym$$3 = v4816.symbol;
        }
        var v19780 = fgSym$$3.declAST;
        var v14235 = v19780 == null;
        var v19782 = !v14235;
        if (v19782) {
          var v19781 = funcDecl$$22.isSpecialFn();
          v14235 = !v19781;
        }
        var v4818 = v14235;
        if (v4818) {
          fgSym$$3.declAST = ast$$72;
        }
      } else {
        var v14236 = fgSym$$3.kind();
        var v19783 = TypeScript$$24.SymbolKind;
        var v14237 = v19783.Type;
        var v4822 = v14236 == v14237;
        if (v4822) {
          var v23381 = context$$58.checker;
          var v19784 = v23381.createFunctionSignature(funcDecl$$22, containerSym, containerScope, fgSym$$3, false);
          var v14238 = v19784.declAST;
          var v4819 = v14238.type;
          fgSym$$3 = v4819.symbol;
        } else {
          var v14239 = context$$58.checker;
          var v4820 = v14239.errorReporter;
          var v23382 = funcDecl$$22.name;
          var v19785 = v23382.actualText;
          var v14240 = "Function or method '" + v19785;
          var v4821 = v14240 + "' already declared as a property";
          v4820.simpleError(funcDecl$$22, v4821);
        }
      }
      var v14241 = funcDecl$$22.isSpecialFn();
      if (v14241) {
        v14241 = !isStatic$$9;
      }
      var v4825 = v14241;
      if (v4825) {
        var v4824;
        if (instType$$1) {
          v4824 = instType$$1;
        } else {
          v4824 = fgSym$$3.type;
        }
        funcDecl$$22.type = v4824;
      } else {
        funcDecl$$22.type = fgSym$$3.type;
      }
    } else {
      if (nameText$$3) {
        if (isStatic$$9) {
          var v19786 = containerSym.type;
          var v14242 = v19786.members;
          var v4826 = v14242.allMembers;
          fgSym$$3 = v4826.lookup(nameText$$3);
        } else {
          var v14243 = funcDecl$$22.isConstructor;
          if (v14243) {
            var v19787 = context$$58.scopeChain;
            v14243 = v19787.previous;
          }
          var v4828 = v14243;
          if (v4828) {
            var v19788 = context$$58.scopeChain;
            var v14244 = v19788.previous;
            var v4827 = v14244.scope;
            fgSym$$3 = v4827.findLocal(nameText$$3, false, false);
          }
          var v4829 = fgSym$$3 == null;
          if (v4829) {
            fgSym$$3 = containerScope.findLocal(nameText$$3, false, false);
          }
        }
        if (fgSym$$3) {
          foundSymbol = true;
          var v23383 = !isConstructor$$3;
          if (v23383) {
            var v25806 = fgSym$$3.declAST;
            var v25090 = v25806.nodeType;
            var v25807 = TypeScript$$24.NodeType;
            var v25091 = v25807.FuncDecl;
            v23383 = v25090 == v25091;
          }
          var v19789 = v23383;
          if (v19789) {
            var v25092 = fgSym$$3.declAST;
            var v23384 = v25092.isAccessor();
            v19789 = !v23384;
          }
          var v14245 = v19789;
          if (v14245) {
            var v23385 = fgSym$$3.declAST;
            var v19790 = v23385.isSignature();
            v14245 = !v19790;
          }
          var v4830 = v14245;
          if (v4830) {
            fgSym$$3 = null;
            foundSymbol = false;
          }
        }
      }
      var v26122 = fgSym$$3;
      if (v26122) {
        var v26281 = fgSym$$3.isAccessor();
        v26122 = !v26281;
      }
      var v25808 = v26122;
      if (v25808) {
        v25808 = fgSym$$3.type;
      }
      var v25093 = v25808;
      if (v25093) {
        var v25809 = fgSym$$3.type;
        v25093 = v25809.construct;
      }
      var v23386 = v25093;
      if (v23386) {
        var v26123 = fgSym$$3.type;
        var v25810 = v26123.construct;
        var v25094 = v25810.signatures;
        v23386 = v25094 != [];
      }
      var v19791 = v23386;
      if (v19791) {
        var v26362 = fgSym$$3.type;
        var v26282 = v26362.construct;
        var v26124 = v26282.signatures;
        var v25811 = v26124[0];
        var v25095 = v25811.declAST;
        var v23387 = v25095 == null;
        var v25097 = !v23387;
        if (v25097) {
          var v26422 = fgSym$$3.type;
          var v26403 = v26422.construct;
          var v26363 = v26403.signatures;
          var v26283 = v26363[0];
          var v26125 = v26283.declAST;
          var v25812 = v26125.fncFlags;
          var v26126 = TypeScript$$24.FncFlags;
          var v25813 = v26126.Ambient;
          var v25096 = TypeScript$$24.hasFlag(v25812, v25813);
          v23387 = !v25096;
        }
        v19791 = v23387;
      }
      var v14246 = v19791;
      if (v14246) {
        var v19792 = funcDecl$$22.isConstructor;
        v14246 = !v19792;
      }
      var v4832 = v14246;
      if (v4832) {
        var v14247 = context$$58.checker;
        var v4831 = v14247.errorReporter;
        v4831.simpleError(funcDecl$$22, "Functions may not have class overloads");
      }
      var v25098 = fgSym$$3;
      if (v25098) {
        var v26127 = fgSym$$3.kind();
        var v26284 = TypeScript$$24.SymbolKind;
        var v26128 = v26284.Type;
        var v25814 = v26127 == v26128;
        v25098 = !v25814;
      }
      var v23388 = v25098;
      if (v23388) {
        v23388 = funcDecl$$22.isMethod();
      }
      var v19793 = v23388;
      if (v19793) {
        var v23389 = funcDecl$$22.isAccessor();
        v19793 = !v23389;
      }
      var v14248 = v19793;
      if (v14248) {
        var v19794 = funcDecl$$22.isConstructor;
        v14248 = !v19794;
      }
      var v4836 = v14248;
      if (v4836) {
        var v14249 = context$$58.checker;
        var v4833 = v14249.errorReporter;
        var v23390 = funcDecl$$22.name;
        var v19795 = v23390.actualText;
        var v14250 = "Function or method '" + v19795;
        var v4834 = v14250 + "' already declared as a property";
        v4833.simpleError(funcDecl$$22, v4834);
        var v4835 = context$$58.checker;
        fgSym$$3.type = v4835.anyType;
      }
      var v4837 = context$$58.checker;
      var v4838 = !foundSymbol;
      var sig$$2 = v4837.createFunctionSignature(funcDecl$$22, containerSym, containerScope, fgSym$$3, v4838);
      var v23391 = !fgSym$$3;
      var v25101 = !v23391;
      if (v25101) {
        var v25815 = fgSym$$3.declAST;
        var v25099 = v25815.nodeType;
        var v25816 = TypeScript$$24.NodeType;
        var v25100 = v25816.FuncDecl;
        v23391 = v25099 != v25100;
      }
      var v19796 = v23391;
      if (v19796) {
        v19796 = funcDecl$$22.isAccessor();
      }
      var v14251 = v19796;
      var v19798 = !v14251;
      if (v19798) {
        var v19797 = fgSym$$3;
        if (v19797) {
          v19797 = fgSym$$3.isAccessor();
        }
        v14251 = v19797;
      }
      var v4842 = v14251;
      if (v4842) {
        var v4839 = context$$58.checker;
        var v4840 = containerSym.type;
        var v14252 = funcDecl$$22.isMethod();
        if (v14252) {
          v14252 = isStatic$$9;
        }
        var v4841 = v14252;
        var v26607 = v4839.createAccessorSymbol(funcDecl$$22, fgSym$$3, v4840, v4841, true, containerScope, containerSym);
        funcDecl$$22.accessorSymbol = v26607;
      }
      var v14253 = funcDecl$$22.type;
      var v4843 = v14253.symbol;
      v4843.declAST = ast$$72;
      var v4844 = funcDecl$$22.isConstructor;
      if (v4844) {
        go$$2 = true;
      }
    }
    if (isExported$$6) {
      var v14254 = funcDecl$$22.type;
      var v4847 = v14254.call;
      if (v4847) {
        var v14255 = funcDecl$$22.type;
        var v4846 = v14255.symbol;
        var v19799 = v4846.flags;
        var v23392 = TypeScript$$24.SymbolFlags;
        var v19800 = v23392.Exported;
        v4846.flags = v19799 | v19800;
      }
      var v23393 = fgSym$$3;
      if (v23393) {
        var v25102 = fgSym$$3.isAccessor();
        v23393 = !v25102;
      }
      var v19801 = v23393;
      if (v19801) {
        var v23394 = fgSym$$3.kind();
        var v25103 = TypeScript$$24.SymbolKind;
        var v23395 = v25103.Type;
        v19801 = v23394 == v23395;
      }
      var v14256 = v19801;
      if (v14256) {
        var v19802 = fgSym$$3.type;
        v14256 = v19802.call;
      }
      var v4848 = v14256;
      if (v4848) {
        var v14257 = fgSym$$3.flags;
        var v19803 = TypeScript$$24.SymbolFlags;
        var v14258 = v19803.Exported;
        fgSym$$3.flags = v14257 | v14258;
      }
    }
    var v19804 = context$$58.scopeChain;
    var v14259 = v19804.moduleDecl;
    if (v14259) {
      var v19805 = funcDecl$$22.isSpecialFn();
      v14259 = !v19805;
    }
    var v4851 = v14259;
    if (v4851) {
      var v14260 = funcDecl$$22.type;
      var v4849 = v14260.symbol;
      var v19806 = v4849.flags;
      var v23396 = TypeScript$$24.SymbolFlags;
      var v19807 = v23396.ModuleMember;
      v4849.flags = v19806 | v19807;
      var v14261 = funcDecl$$22.type;
      var v4850 = v14261.symbol;
      var v14262 = context$$58.scopeChain;
      v4850.declModule = v14262.moduleDecl;
    }
    var v4852 = fgSym$$3 && isOptional$$2;
    if (v4852) {
      var v14263 = fgSym$$3.flags;
      var v19808 = TypeScript$$24.SymbolFlags;
      var v14264 = v19808.Optional;
      fgSym$$3.flags = v14263 | v14264;
    }
    return go$$2;
  }
  function preCollectTypes(ast$$73, parent$$61, walker$$46) {
    var context$$59 = walker$$46.state;
    var go$$3 = false;
    var scopeChain$$10 = context$$59.scopeChain;
    var v14265 = ast$$73.nodeType;
    var v19809 = TypeScript$$24.NodeType;
    var v14266 = v19809.Script;
    var v4865 = v14265 == v14266;
    if (v4865) {
      var script$$15 = ast$$73;
      context$$59.script = script$$15;
      go$$3 = true;
    } else {
      var v14267 = ast$$73.nodeType;
      var v19810 = TypeScript$$24.NodeType;
      var v14268 = v19810.List;
      var v4864 = v14267 == v14268;
      if (v4864) {
        go$$3 = true;
      } else {
        var v14269 = ast$$73.nodeType;
        var v19811 = TypeScript$$24.NodeType;
        var v14270 = v19811.ImportDeclaration;
        var v4863 = v14269 == v14270;
        if (v4863) {
          go$$3 = preCollectImportTypes(ast$$73, parent$$61, context$$59);
        } else {
          var v14271 = ast$$73.nodeType;
          var v19812 = TypeScript$$24.NodeType;
          var v14272 = v19812.With;
          var v4862 = v14271 == v14272;
          if (v4862) {
            go$$3 = false;
          } else {
            var v14273 = ast$$73.nodeType;
            var v19813 = TypeScript$$24.NodeType;
            var v14274 = v19813.ModuleDeclaration;
            var v4861 = v14273 == v14274;
            if (v4861) {
              go$$3 = preCollectModuleTypes(ast$$73, parent$$61, context$$59);
            } else {
              var v14275 = ast$$73.nodeType;
              var v19814 = TypeScript$$24.NodeType;
              var v14276 = v19814.ClassDeclaration;
              var v4860 = v14275 == v14276;
              if (v4860) {
                go$$3 = preCollectClassTypes(ast$$73, parent$$61, context$$59);
              } else {
                var v14277 = ast$$73.nodeType;
                var v19815 = TypeScript$$24.NodeType;
                var v14278 = v19815.Block;
                var v4859 = v14277 == v14278;
                if (v4859) {
                  go$$3 = true;
                } else {
                  var v14279 = ast$$73.nodeType;
                  var v19816 = TypeScript$$24.NodeType;
                  var v14280 = v19816.InterfaceDeclaration;
                  var v4858 = v14279 == v14280;
                  if (v4858) {
                    go$$3 = preCollectInterfaceTypes(ast$$73, parent$$61, context$$59);
                  } else {
                    var v14281 = ast$$73.nodeType;
                    var v19817 = TypeScript$$24.NodeType;
                    var v14282 = v19817.ArgDecl;
                    var v4857 = v14281 == v14282;
                    if (v4857) {
                      go$$3 = preCollectArgDeclTypes(ast$$73, parent$$61, context$$59);
                    } else {
                      var v14283 = ast$$73.nodeType;
                      var v19818 = TypeScript$$24.NodeType;
                      var v14284 = v19818.VarDecl;
                      var v4856 = v14283 == v14284;
                      if (v4856) {
                        go$$3 = preCollectVarDeclTypes(ast$$73, parent$$61, context$$59);
                      } else {
                        var v14285 = ast$$73.nodeType;
                        var v19819 = TypeScript$$24.NodeType;
                        var v14286 = v19819.FuncDecl;
                        var v4855 = v14285 == v14286;
                        if (v4855) {
                          go$$3 = preCollectFuncDeclTypes(ast$$73, parent$$61, context$$59);
                        } else {
                          var v14287 = ast$$73.isStatementOrExpression();
                          if (v14287) {
                            var v19820 = context$$59.scopeChain;
                            v14287 = v19820.moduleDecl;
                          }
                          var v4854 = v14287;
                          if (v4854) {
                            var v14288 = context$$59.scopeChain;
                            var v4853 = v14288.moduleDecl;
                            v4853.recordNonInterface();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var v4866 = walker$$46.options;
    v4866.goChildren = go$$3;
    return ast$$73;
  }
  function postCollectTypes(ast$$74, parent$$62, walker$$47) {
    var context$$60 = walker$$47.state;
    var v14289 = ast$$74.nodeType;
    var v19821 = TypeScript$$24.NodeType;
    var v14290 = v19821.ModuleDeclaration;
    var v4869 = v14289 == v14290;
    if (v4869) {
      TypeScript$$24.popTypeCollectionScope(context$$60);
    } else {
      var v14291 = ast$$74.nodeType;
      var v19822 = TypeScript$$24.NodeType;
      var v14292 = v19822.ClassDeclaration;
      var v4868 = v14291 == v14292;
      if (v4868) {
        TypeScript$$24.popTypeCollectionScope(context$$60);
      } else {
        var v14293 = ast$$74.nodeType;
        var v19823 = TypeScript$$24.NodeType;
        var v14294 = v19823.InterfaceDeclaration;
        var v4867 = v14293 == v14294;
        if (v4867) {
          TypeScript$$24.popTypeCollectionScope(context$$60);
        }
      }
    }
    return ast$$74;
  }
  var Continuation = v966();
  TypeScript$$24.Continuation = Continuation;
  TypeScript$$24.createNewConstructGroupForType = createNewConstructGroupForType;
  TypeScript$$24.cloneParentConstructGroupForChildType = cloneParentConstructGroupForChildType;
  TypeScript$$24.globalId = "__GLO";
  TypeScript$$24.preCollectImportTypes = preCollectImportTypes;
  TypeScript$$24.preCollectModuleTypes = preCollectModuleTypes;
  TypeScript$$24.preCollectClassTypes = preCollectClassTypes;
  TypeScript$$24.preCollectInterfaceTypes = preCollectInterfaceTypes;
  TypeScript$$24.preCollectArgDeclTypes = preCollectArgDeclTypes;
  TypeScript$$24.preCollectVarDeclTypes = preCollectVarDeclTypes;
  TypeScript$$24.preCollectFuncDeclTypes = preCollectFuncDeclTypes;
  TypeScript$$24.preCollectTypes = preCollectTypes;
  TypeScript$$24.postCollectTypes = postCollectTypes;
  return;
}
function v964(TypeScript$$23) {
  function v963() {
    function v962(sourceSig, targetSig, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11) {
      var v19824 = sourceSig.parameters;
      var v14295 = !v19824;
      var v19826 = !v14295;
      if (v19826) {
        var v19825 = targetSig.parameters;
        v14295 = !v19825;
      }
      var v4870 = v14295;
      if (v4870) {
        return false;
      }
      var v4871;
      var v14297 = targetSig.hasVariableArgList;
      if (v14297) {
        var v14296 = targetSig.nonOptionalParameterCount;
        v4871 = v14296 - 1;
      } else {
        v4871 = targetSig.nonOptionalParameterCount;
      }
      var targetVarArgCount = v4871;
      var v4872;
      var v14299 = sourceSig.hasVariableArgList;
      if (v14299) {
        var v14298 = sourceSig.nonOptionalParameterCount;
        v4872 = v14298 - 1;
      } else {
        v4872 = sourceSig.nonOptionalParameterCount;
      }
      var sourceVarArgCount = v4872;
      var v14300 = sourceVarArgCount > targetVarArgCount;
      if (v14300) {
        var v19827 = targetSig.hasVariableArgList;
        v14300 = !v19827;
      }
      var v4874 = v14300;
      if (v4874) {
        if (comparisonInfo$$11) {
          var v14301 = comparisonInfo$$11.flags;
          var v19828 = TypeScript$$23.TypeRelationshipFlags;
          var v14302 = v19828.SourceSignatureHasTooManyParameters;
          comparisonInfo$$11.flags = v14301 | v14302;
          var v14303 = "Call signature expects " + targetVarArgCount;
          var v4873 = v14303 + " or fewer parameters";
          comparisonInfo$$11.addMessageToFront(v4873);
        }
        return false;
      }
      var v4875 = sourceSig.returnType;
      var sourceReturnType = v4875.type;
      var v4876 = targetSig.returnType;
      var targetReturnType = v4876.type;
      var v14304 = this.voidType;
      var v4878 = targetReturnType != v14304;
      if (v4878) {
        var v14305 = this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11);
        var v4877 = !v14305;
        if (v4877) {
          if (comparisonInfo$$11) {
            var v14306 = comparisonInfo$$11.flags;
            var v19829 = TypeScript$$23.TypeRelationshipFlags;
            var v14307 = v19829.IncompatibleReturnTypes;
            comparisonInfo$$11.flags = v14306 | v14307;
          }
          return false;
        }
      }
      var v4879;
      var v19830 = sourceVarArgCount < targetVarArgCount;
      if (v19830) {
        v19830 = sourceSig.hasVariableArgList;
      }
      var v14308 = v19830;
      if (v14308) {
        v4879 = targetVarArgCount;
      } else {
        v4879 = sourceVarArgCount;
      }
      var len$$29 = v4879;
      var sourceParamType = null;
      var targetParamType = null;
      var sourceParamName = "";
      var targetParamName = "";
      var iSource = 0;
      var iTarget = 0;
      var v4895 = iSource < len$$29;
      for (;v4895;) {
        var v19831 = sourceSig.hasVariableArgList;
        var v14309 = !v19831;
        var v19832 = !v14309;
        if (v19832) {
          v14309 = iSource < sourceVarArgCount;
        }
        var v4886 = v14309;
        if (v4886) {
          var v23397 = sourceSig.parameters;
          var v19833 = v23397[iSource];
          var v14310 = v19833.parameter;
          var v4880 = v14310.typeLink;
          sourceParamType = v4880.type;
          var v23398 = sourceSig.parameters;
          var v19834 = v23398[iSource];
          var v14311 = v19834.parameter;
          var v4881 = v14311.symbol;
          sourceParamName = v4881.name;
        } else {
          var v4885 = iSource == sourceVarArgCount;
          if (v4885) {
            var v23399 = sourceSig.parameters;
            var v19835 = v23399[iSource];
            var v14312 = v19835.parameter;
            var v4882 = v14312.typeLink;
            sourceParamType = v4882.type;
            var v4883 = sourceParamType.elementType;
            if (v4883) {
              sourceParamType = sourceParamType.elementType;
            }
            var v23400 = sourceSig.parameters;
            var v19836 = v23400[iSource];
            var v14313 = v19836.parameter;
            var v4884 = v14313.symbol;
            sourceParamName = v4884.name;
          }
        }
        var v23401 = targetSig.parameters;
        var v19837 = v23401.length;
        var v14314 = iTarget < v19837;
        if (v14314) {
          v14314 = iTarget < targetVarArgCount;
        }
        var v4893 = v14314;
        if (v4893) {
          var v23402 = targetSig.parameters;
          var v19838 = v23402[iTarget];
          var v14315 = v19838.parameter;
          var v4887 = v14315.typeLink;
          targetParamType = v4887.type;
          var v23403 = targetSig.parameters;
          var v19839 = v23403[iTarget];
          var v14316 = v19839.parameter;
          var v4888 = v14316.symbol;
          targetParamName = v4888.name;
        } else {
          var v14317 = targetSig.hasVariableArgList;
          if (v14317) {
            v14317 = iTarget == targetVarArgCount;
          }
          var v4892 = v14317;
          if (v4892) {
            var v23404 = targetSig.parameters;
            var v19840 = v23404[iTarget];
            var v14318 = v19840.parameter;
            var v4889 = v14318.typeLink;
            targetParamType = v4889.type;
            var v4890 = targetParamType.elementType;
            if (v4890) {
              targetParamType = targetParamType.elementType;
            }
            var v23405 = targetSig.parameters;
            var v19841 = v23405[iTarget];
            var v14319 = v19841.parameter;
            var v4891 = v14319.symbol;
            targetParamName = v4891.name;
          }
        }
        var v19842 = this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11);
        var v23406 = !v19842;
        if (v23406) {
          v19842 = this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11);
        }
        var v14320 = v19842;
        var v4894 = !v14320;
        if (v4894) {
          if (comparisonInfo$$11) {
            var v14321 = comparisonInfo$$11.flags;
            var v19843 = TypeScript$$23.TypeRelationshipFlags;
            var v14322 = v19843.IncompatibleParameterTypes;
            comparisonInfo$$11.flags = v14321 | v14322;
          }
          return false;
        }
        iSource++;
        iTarget++;
        v4895 = iSource < len$$29;
      }
      return true;
    }
    function v961(sourceSG, targetSG, assignableTo$$1, comparisonCache$$1, comparisonInfo$$10) {
      var v4896 = sourceSG == targetSG;
      if (v4896) {
        return true;
      }
      var v14323 = sourceSG && targetSG;
      var v4897 = !v14323;
      if (v4897) {
        return false;
      }
      var mSig = null;
      var nSig = null;
      var foundMatch = false;
      var iMSig = 0;
      var v19844 = targetSG.signatures;
      var v14324 = v19844.length;
      var v4902 = iMSig < v14324;
      for (;v4902;) {
        var v4898 = targetSG.signatures;
        mSig = v4898[iMSig];
        var iNSig = 0;
        var v19845 = sourceSG.signatures;
        var v14325 = v19845.length;
        var v4901 = iNSig < v14325;
        for (;v4901;) {
          var v4899 = sourceSG.signatures;
          nSig = v4899[iNSig];
          var v4900 = this.signatureIsRelatableToTarget(nSig, mSig, assignableTo$$1, comparisonCache$$1, comparisonInfo$$10);
          if (v4900) {
            foundMatch = true;
            break;
          }
          iNSig++;
          var v19846 = sourceSG.signatures;
          var v14326 = v19846.length;
          v4901 = iNSig < v14326;
        }
        if (foundMatch) {
          foundMatch = false;
          iMSig++;
          var v19847 = targetSG.signatures;
          var v14327 = v19847.length;
          v4902 = iMSig < v14327;
          continue;
        }
        return false;
      }
      return true;
    }
    function v960(source$$3, target$$33, assignableTo, comparisonCache, comparisonInfo$$9) {
      var v4903 = source$$3 == target$$33;
      if (v4903) {
        return true;
      }
      var v14328 = source$$3 && target$$33;
      var v4904 = !v14328;
      if (v4904) {
        return true;
      }
      var v14329 = source$$3.typeID;
      var v4905 = v14329 << 16;
      var v4906 = target$$33.typeID;
      var comboId$$1 = v4905 | v4906;
      var v14330 = comparisonCache[comboId$$1];
      var v4907 = v14330 != undefined;
      if (v4907) {
        return true;
      }
      if (assignableTo) {
        var v19848 = this.anyType;
        var v14331 = source$$3 == v19848;
        var v19850 = !v14331;
        if (v19850) {
          var v19849 = this.anyType;
          v14331 = target$$33 == v19849;
        }
        var v4908 = v14331;
        if (v4908) {
          return true;
        }
      } else {
        var v14332 = this.anyType;
        var v4909 = target$$33 == v14332;
        if (v4909) {
          return true;
        }
      }
      var v14333 = this.undefinedType;
      var v4910 = source$$3 == v14333;
      if (v4910) {
        return true;
      }
      var v19851 = this.nullType;
      var v14334 = source$$3 == v19851;
      if (v14334) {
        var v23407 = this.undefinedType;
        var v19852 = target$$33 != v23407;
        if (v19852) {
          var v23408 = this.voidType;
          v19852 = target$$33 != v23408;
        }
        v14334 = v19852;
      }
      var v4911 = v14334;
      if (v4911) {
        return true;
      }
      var v19853 = this.numberType;
      var v14335 = target$$33 == v19853;
      if (v14335) {
        var v19854 = source$$3.typeFlags;
        var v23409 = TypeScript$$23.TypeFlags;
        var v19855 = v23409.IsEnum;
        v14335 = v19854 & v19855;
      }
      var v4912 = v14335;
      if (v4912) {
        return true;
      }
      var v19856 = this.numberType;
      var v14336 = source$$3 == v19856;
      if (v14336) {
        var v19857 = target$$33.typeFlags;
        var v23410 = TypeScript$$23.TypeFlags;
        var v19858 = v23410.IsEnum;
        v14336 = v19857 & v19858;
      }
      var v4913 = v14336;
      if (v4913) {
        return true;
      }
      var v19859 = source$$3.typeFlags;
      var v23411 = TypeScript$$23.TypeFlags;
      var v19860 = v23411.IsEnum;
      var v14337 = v19859 & v19860;
      var v19863 = !v14337;
      if (v19863) {
        var v19861 = target$$33.typeFlags;
        var v23412 = TypeScript$$23.TypeFlags;
        var v19862 = v23412.IsEnum;
        v14337 = v19861 & v19862;
      }
      var v4914 = v14337;
      if (v4914) {
        return false;
      }
      var v14338 = source$$3.isArray();
      var v19864 = !v14338;
      if (v19864) {
        v14338 = target$$33.isArray();
      }
      var v4918 = v14338;
      if (v4918) {
        var v19865 = source$$3.isArray();
        if (v19865) {
          v19865 = target$$33.isArray();
        }
        var v14339 = v19865;
        var v4915 = !v14339;
        if (v4915) {
          return false;
        }
        comparisonCache[comboId$$1] = false;
        var v4916 = source$$3.elementType;
        var v4917 = target$$33.elementType;
        var ret$$1 = this.sourceIsRelatableToTarget(v4916, v4917, assignableTo, comparisonCache, comparisonInfo$$9);
        if (ret$$1) {
          comparisonCache[comboId$$1] = true;
        } else {
          comparisonCache[comboId$$1] = undefined;
        }
        return ret$$1;
      }
      var v14340 = source$$3.primitiveTypeClass;
      var v14341 = target$$33.primitiveTypeClass;
      var v4926 = v14340 != v14341;
      if (v4926) {
        var v14342 = target$$33.primitiveTypeClass;
        var v19866 = TypeScript$$23.Primitive;
        var v14343 = v19866.None;
        var v4925 = v14342 == v14343;
        if (v4925) {
          var v19867 = this.numberType;
          var v14344 = source$$3 == v19867;
          if (v14344) {
            var v19868 = this.typeFlow;
            v14344 = v19868.numberInterfaceType;
          }
          var v4924 = v14344;
          if (v4924) {
            var v4919 = this.typeFlow;
            source$$3 = v4919.numberInterfaceType;
          } else {
            var v19869 = this.stringType;
            var v14345 = source$$3 == v19869;
            if (v14345) {
              var v19870 = this.typeFlow;
              v14345 = v19870.stringInterfaceType;
            }
            var v4923 = v14345;
            if (v4923) {
              var v4920 = this.typeFlow;
              source$$3 = v4920.stringInterfaceType;
            } else {
              var v19871 = this.booleanType;
              var v14346 = source$$3 == v19871;
              if (v14346) {
                var v19872 = this.typeFlow;
                v14346 = v19872.booleanInterfaceType;
              }
              var v4922 = v14346;
              if (v4922) {
                var v4921 = this.typeFlow;
                source$$3 = v4921.booleanInterfaceType;
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
      comparisonCache[comboId$$1] = false;
      var v4927 = source$$3.hasBase(target$$33);
      if (v4927) {
        comparisonCache[comboId$$1] = true;
        return true;
      }
      var v19873 = this.typeFlow;
      var v14347 = v19873.objectInterfaceType;
      if (v14347) {
        var v23413 = this.typeFlow;
        var v19874 = v23413.objectInterfaceType;
        v14347 = target$$33 == v19874;
      }
      var v4928 = v14347;
      if (v4928) {
        return true;
      }
      var v23414 = this.typeFlow;
      var v19875 = v23414.functionInterfaceType;
      if (v19875) {
        var v23415 = source$$3.call;
        var v25104 = !v23415;
        if (v25104) {
          v23415 = source$$3.construct;
        }
        v19875 = v23415;
      }
      var v14348 = v19875;
      if (v14348) {
        var v23416 = this.typeFlow;
        var v19876 = v23416.functionInterfaceType;
        v14348 = target$$33 == v19876;
      }
      var v4929 = v14348;
      if (v4929) {
        return true;
      }
      var v14349 = target$$33.isClass();
      var v19877 = !v14349;
      if (v19877) {
        v14349 = target$$33.isClassInstance();
      }
      var v4930 = v14349;
      if (v4930) {
        comparisonCache[comboId$$1] = undefined;
        return false;
      }
      var v14350 = target$$33.memberScope;
      if (v14350) {
        v14350 = source$$3.memberScope;
      }
      var v4960 = v14350;
      if (v4960) {
        var v4931 = target$$33.memberScope;
        var mPropKeys = v4931.getAllValueSymbolNames(true);
        var mProp = null;
        var nProp = null;
        var mPropType = null;
        var nPropType = null;
        var inferenceSymbol = null;
        var iMProp = 0;
        var v14351 = mPropKeys.length;
        var v4959 = iMProp < v14351;
        for (;v4959;) {
          var v4932 = target$$33.memberScope;
          var v4933 = mPropKeys[iMProp];
          mProp = v4932.find(v4933, false, false);
          var v4934 = source$$3.memberScope;
          var v4935 = mPropKeys[iMProp];
          nProp = v4934.find(v4935, false, false);
          var v25817 = mProp.name;
          var v25105 = v25817 == "arguments";
          if (v25105) {
            var v25818 = this.typeFlow;
            v25105 = v25818.iargumentsInterfaceType;
          }
          var v23417 = v25105;
          if (v23417) {
            var v26285 = this.typeFlow;
            var v26129 = v26285.iargumentsInterfaceType;
            var v25819 = v26129.symbol;
            var v25106 = v25819.flags;
            var v25820 = TypeScript$$23.SymbolFlags;
            var v25107 = v25820.CompilerGenerated;
            v23417 = v25106 & v25107;
          }
          var v19878 = v23417;
          if (v19878) {
            var v23418 = mProp.kind();
            var v25108 = TypeScript$$23.SymbolKind;
            var v23419 = v25108.Variable;
            v19878 = v23418 == v23419;
          }
          var v14352 = v19878;
          if (v14352) {
            var v25109 = mProp.variable;
            var v23420 = v25109.typeLink;
            var v19879 = v23420.type;
            var v23421 = this.typeFlow;
            var v19880 = v23421.iargumentsInterfaceType;
            v14352 = v19879 == v19880;
          }
          var v4936 = v14352;
          if (v4936) {
            iMProp++;
            var v14353 = mPropKeys.length;
            v4959 = iMProp < v14353;
            continue;
          }
          var v4940 = mProp.isInferenceSymbol();
          if (v4940) {
            inferenceSymbol = mProp;
            var v14354 = inferenceSymbol.typeCheckStatus;
            var v19881 = TypeScript$$23.TypeCheckStatus;
            var v14355 = v19881.NotStarted;
            var v4939 = v14354 == v14355;
            if (v4939) {
              var v4937 = this.typeFlow;
              var v4938 = mProp.declAST;
              v4937.typeCheck(v4938);
            }
          }
          mPropType = mProp.getType();
          var v4951 = !nProp;
          if (v4951) {
            var v14356 = this.typeFlow;
            var v4943 = v14356.objectInterfaceType;
            if (v4943) {
              var v19882 = this.typeFlow;
              var v14357 = v19882.objectInterfaceType;
              var v4941 = v14357.memberScope;
              var v4942 = mPropKeys[iMProp];
              nProp = v4941.find(v4942, false, false);
            }
            var v4950 = !nProp;
            if (v4950) {
              var v19883 = this.typeFlow;
              var v14358 = v19883.functionInterfaceType;
              if (v14358) {
                var v19884 = mPropType.call;
                var v23422 = !v19884;
                if (v23422) {
                  v19884 = mPropType.construct;
                }
                v14358 = v19884;
              }
              var v4946 = v14358;
              if (v4946) {
                var v19885 = this.typeFlow;
                var v14359 = v19885.functionInterfaceType;
                var v4944 = v14359.memberScope;
                var v4945 = mPropKeys[iMProp];
                nProp = v4944.find(v4945, false, false);
              }
              var v4949 = !nProp;
              if (v4949) {
                var v19886 = mProp.flags;
                var v23423 = TypeScript$$23.SymbolFlags;
                var v19887 = v23423.Optional;
                var v14360 = v19886 & v19887;
                var v4948 = !v14360;
                if (v4948) {
                  comparisonCache[comboId$$1] = undefined;
                  if (comparisonInfo$$9) {
                    var v14361 = comparisonInfo$$9.flags;
                    var v19888 = TypeScript$$23.TypeRelationshipFlags;
                    var v14362 = v19888.RequiredPropertyIsMissing;
                    comparisonInfo$$9.flags = v14361 | v14362;
                    var v26130 = source$$3.getTypeName();
                    var v25821 = "Type '" + v26130;
                    var v25110 = v25821 + "' is missing property '";
                    var v25111 = mPropKeys[iMProp];
                    var v23424 = v25110 + v25111;
                    var v19889 = v23424 + "' from type '";
                    var v19890 = target$$33.getTypeName();
                    var v14363 = v19889 + v19890;
                    var v4947 = v14363 + "'";
                    comparisonInfo$$9.addMessageToFront(v4947);
                  }
                  return false;
                } else {
                  iMProp++;
                  var v14364 = mPropKeys.length;
                  v4959 = iMProp < v14364;
                  continue;
                }
              }
            }
          }
          var v4955 = nProp.isInferenceSymbol();
          if (v4955) {
            inferenceSymbol = nProp;
            var v14365 = inferenceSymbol.typeCheckStatus;
            var v19891 = TypeScript$$23.TypeCheckStatus;
            var v14366 = v19891.NotStarted;
            var v4954 = v14365 == v14366;
            if (v4954) {
              var v4952 = this.typeFlow;
              var v4953 = nProp.declAST;
              v4952.typeCheck(v4953);
            }
          }
          nPropType = nProp.getType();
          var v14367 = mPropType && nPropType;
          if (v14367) {
            var v25822 = nPropType.typeID;
            var v25112 = v25822 << 16;
            var v25113 = mPropType.typeID;
            var v23425 = v25112 | v25113;
            var v19892 = comparisonCache[v23425];
            v14367 = v19892 != undefined;
          }
          var v4956 = v14367;
          if (v4956) {
            iMProp++;
            var v14368 = mPropKeys.length;
            v4959 = iMProp < v14368;
            continue;
          }
          var v14369 = this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo$$9);
          var v4958 = !v14369;
          if (v4958) {
            comparisonCache[comboId$$1] = undefined;
            if (comparisonInfo$$9) {
              var v14370 = comparisonInfo$$9.flags;
              var v19893 = TypeScript$$23.TypeRelationshipFlags;
              var v14371 = v19893.IncompatiblePropertyTypes;
              comparisonInfo$$9.flags = v14370 | v14371;
              var v26131 = mProp.name;
              var v25823 = "Types of property '" + v26131;
              var v25114 = v25823 + "' of types '";
              var v25115 = source$$3.getTypeName();
              var v23426 = v25114 + v25115;
              var v19894 = v23426 + "' and '";
              var v19895 = target$$33.getTypeName();
              var v14372 = v19894 + v19895;
              var v4957 = v14372 + "' are incompatible";
              comparisonInfo$$9.addMessageToFront(v4957);
            }
            return false;
          }
          iMProp++;
          var v14373 = mPropKeys.length;
          v4959 = iMProp < v14373;
        }
      }
      var v14374 = source$$3.call;
      var v19896 = !v14374;
      if (v19896) {
        v14374 = target$$33.call;
      }
      var v4967 = v14374;
      if (v4967) {
        var v19897 = source$$3.call;
        var v19898 = target$$33.call;
        var v14375 = this.signatureGroupIsRelatableToTarget(v19897, v19898, assignableTo, comparisonCache, comparisonInfo$$9);
        var v4966 = !v14375;
        if (v4966) {
          if (comparisonInfo$$9) {
            var v14376 = source$$3.call;
            if (v14376) {
              v14376 = target$$33.call;
            }
            var v4965 = v14376;
            if (v4965) {
              var v25116 = source$$3.getTypeName();
              var v23427 = "Call signatures of types '" + v25116;
              var v19899 = v23427 + "' and '";
              var v19900 = target$$33.getTypeName();
              var v14377 = v19899 + v19900;
              var v4961 = v14377 + "' are incompatible";
              comparisonInfo$$9.addMessageToFront(v4961);
            } else {
              var v4962;
              var v14378 = target$$33.call;
              if (v14378) {
                v4962 = target$$33.getTypeName();
              } else {
                v4962 = source$$3.getTypeName();
              }
              var hasSig = v4962;
              var v4963;
              var v19901 = target$$33.call;
              var v14379 = !v19901;
              if (v14379) {
                v4963 = target$$33.getTypeName();
              } else {
                v4963 = source$$3.getTypeName();
              }
              var lacksSig = v4963;
              var v23428 = "Type '" + hasSig;
              var v19902 = v23428 + "' requires a call signature, but Type '";
              var v14380 = v19902 + lacksSig;
              var v4964 = v14380 + "' lacks one";
              comparisonInfo$$9.setMessage(v4964);
            }
            var v14381 = comparisonInfo$$9.flags;
            var v19903 = TypeScript$$23.TypeRelationshipFlags;
            var v14382 = v19903.IncompatibleSignatures;
            comparisonInfo$$9.flags = v14381 | v14382;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      var v14383 = source$$3.construct;
      var v19904 = !v14383;
      if (v19904) {
        v14383 = target$$33.construct;
      }
      var v4974 = v14383;
      if (v4974) {
        var v19905 = source$$3.construct;
        var v19906 = target$$33.construct;
        var v14384 = this.signatureGroupIsRelatableToTarget(v19905, v19906, assignableTo, comparisonCache, comparisonInfo$$9);
        var v4973 = !v14384;
        if (v4973) {
          if (comparisonInfo$$9) {
            var v14385 = source$$3.construct;
            if (v14385) {
              v14385 = target$$33.construct;
            }
            var v4972 = v14385;
            if (v4972) {
              var v25117 = source$$3.getTypeName();
              var v23429 = "Construct signatures of types '" + v25117;
              var v19907 = v23429 + "' and '";
              var v19908 = target$$33.getTypeName();
              var v14386 = v19907 + v19908;
              var v4968 = v14386 + "' are incompatible";
              comparisonInfo$$9.addMessageToFront(v4968);
            } else {
              var v4969;
              var v14387 = target$$33.construct;
              if (v14387) {
                v4969 = target$$33.getTypeName();
              } else {
                v4969 = source$$3.getTypeName();
              }
              hasSig = v4969;
              var v4970;
              var v19909 = target$$33.construct;
              var v14388 = !v19909;
              if (v14388) {
                v4970 = target$$33.getTypeName();
              } else {
                v4970 = source$$3.getTypeName();
              }
              lacksSig = v4970;
              var v23430 = "Type '" + hasSig;
              var v19910 = v23430 + "' requires a construct signature, but Type '";
              var v14389 = v19910 + lacksSig;
              var v4971 = v14389 + "' lacks one";
              comparisonInfo$$9.setMessage(v4971);
            }
            var v14390 = comparisonInfo$$9.flags;
            var v19911 = TypeScript$$23.TypeRelationshipFlags;
            var v14391 = v19911.IncompatibleSignatures;
            comparisonInfo$$9.flags = v14390 | v14391;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      var v4979 = target$$33.index;
      if (v4979) {
        var v4975;
        var v23431 = target$$33.index;
        var v19912 = !v23431;
        if (v19912) {
          var v23432 = this.typeFlow;
          v19912 = v23432.objectInterfaceType;
        }
        var v14393 = v19912;
        if (v14393) {
          var v19913 = this.typeFlow;
          var v14392 = v19913.objectInterfaceType;
          v4975 = v14392.index;
        } else {
          v4975 = target$$33.index;
        }
        var targetIndex = v4975;
        var v4976;
        var v23433 = source$$3.index;
        var v19914 = !v23433;
        if (v19914) {
          var v23434 = this.typeFlow;
          v19914 = v23434.objectInterfaceType;
        }
        var v14395 = v19914;
        if (v14395) {
          var v19915 = this.typeFlow;
          var v14394 = v19915.objectInterfaceType;
          v4976 = v14394.index;
        } else {
          v4976 = source$$3.index;
        }
        var sourceIndex = v4976;
        var v14396 = this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo$$9);
        var v4978 = !v14396;
        if (v4978) {
          if (comparisonInfo$$9) {
            var v25118 = source$$3.getTypeName();
            var v23435 = "Index signatures of types '" + v25118;
            var v19916 = v23435 + "' and '";
            var v19917 = target$$33.getTypeName();
            var v14397 = v19916 + v19917;
            var v4977 = v14397 + "' are incompatible";
            comparisonInfo$$9.addMessageToFront(v4977);
            var v14398 = comparisonInfo$$9.flags;
            var v19918 = TypeScript$$23.TypeRelationshipFlags;
            var v14399 = v19918.IncompatibleSignatures;
            comparisonInfo$$9.flags = v14398 | v14399;
          }
          comparisonCache[comboId$$1] = undefined;
          return false;
        }
      }
      comparisonCache[comboId$$1] = true;
      return true;
    }
    function v959(s1$$2, s2$$2, comparisonInfo$$8) {
      var v4980 = this.assignableCache;
      return this.signatureIsRelatableToTarget(s1$$2, s2$$2, true, v4980, comparisonInfo$$8);
    }
    function v958(sg1$$2, sg2$$2, comparisonInfo$$7) {
      var v4981 = this.assignableCache;
      return this.signatureGroupIsRelatableToTarget(sg1$$2, sg2$$2, true, v4981, comparisonInfo$$7);
    }
    function v957(source$$2, target$$32, comparisonInfo$$6) {
      var v4982 = this.assignableCache;
      return this.sourceIsRelatableToTarget(source$$2, target$$32, true, v4982, comparisonInfo$$6);
    }
    function v956(s1$$1, s2$$1, comparisonInfo$$5) {
      var v4983 = this.subtypeCache;
      return this.signatureIsRelatableToTarget(s1$$1, s2$$1, false, v4983, comparisonInfo$$5);
    }
    function v955(sg1$$1, sg2$$1, comparisonInfo$$4) {
      var v4984 = this.subtypeCache;
      return this.signatureGroupIsRelatableToTarget(sg1$$1, sg2$$1, false, v4984, comparisonInfo$$4);
    }
    function v954(source$$1, target$$31, comparisonInfo$$3) {
      var v4985 = this.subtypeCache;
      return this.sourceIsRelatableToTarget(source$$1, target$$31, false, v4985, comparisonInfo$$3);
    }
    function v953(s1, s2) {
      var v14400 = s1.hasVariableArgList;
      var v14401 = s2.hasVariableArgList;
      var v4986 = v14400 != v14401;
      if (v4986) {
        return false;
      }
      var v14402 = s1.nonOptionalParameterCount;
      var v14403 = s2.nonOptionalParameterCount;
      var v4987 = v14402 != v14403;
      if (v4987) {
        return false;
      }
      var v19919 = s1.parameters;
      var v14404 = v19919.length;
      var v19920 = s2.parameters;
      var v14405 = v19920.length;
      var v4988 = v14404 != v14405;
      if (v4988) {
        return false;
      }
      var v23436 = s1.returnType;
      var v19921 = v23436.type;
      var v23437 = s2.returnType;
      var v19922 = v23437.type;
      var v14406 = this.typesAreIdentical(v19921, v19922);
      var v4989 = !v14406;
      if (v4989) {
        return false;
      }
      var iParam = 0;
      var v19923 = s1.parameters;
      var v14407 = v19923.length;
      var v4991 = iParam < v14407;
      for (;v4991;) {
        var v26132 = s1.parameters;
        var v25824 = v26132[iParam];
        var v25119 = v25824.parameter;
        var v23438 = v25119.typeLink;
        var v19924 = v23438.type;
        var v26133 = s2.parameters;
        var v25825 = v26133[iParam];
        var v25120 = v25825.parameter;
        var v23439 = v25120.typeLink;
        var v19925 = v23439.type;
        var v14408 = this.typesAreIdentical(v19924, v19925);
        var v4990 = !v14408;
        if (v4990) {
          return false;
        }
        iParam++;
        var v19926 = s1.parameters;
        var v14409 = v19926.length;
        v4991 = iParam < v14409;
      }
      return true;
    }
    function v952(sg1, sg2) {
      var v4992 = sg1 == sg2;
      if (v4992) {
        return true;
      }
      var v14410 = !sg1;
      var v19927 = !v14410;
      if (v19927) {
        v14410 = !sg2;
      }
      var v4993 = v14410;
      if (v4993) {
        return false;
      }
      var v19928 = sg1.signatures;
      var v14411 = v19928.length;
      var v19929 = sg2.signatures;
      var v14412 = v19929.length;
      var v4994 = v14411 != v14412;
      if (v4994) {
        return false;
      }
      var sig1 = null;
      var sig2 = null;
      var sigsMatch = false;
      var iSig1 = 0;
      var v19930 = sg1.signatures;
      var v14413 = v19930.length;
      var v4999 = iSig1 < v14413;
      for (;v4999;) {
        var v4995 = sg1.signatures;
        sig1 = v4995[iSig1];
        var iSig2 = 0;
        var v19931 = sg2.signatures;
        var v14414 = v19931.length;
        var v4998 = iSig2 < v14414;
        for (;v4998;) {
          var v4996 = sg2.signatures;
          sig2 = v4996[iSig2];
          var v4997 = this.signaturesAreIdentical(sig1, sig2);
          if (v4997) {
            sigsMatch = true;
            break;
          }
          iSig2++;
          var v19932 = sg2.signatures;
          var v14415 = v19932.length;
          v4998 = iSig2 < v14415;
        }
        if (sigsMatch) {
          sigsMatch = false;
          iSig1++;
          var v19933 = sg1.signatures;
          var v14416 = v19933.length;
          v4999 = iSig1 < v14416;
          continue;
        }
        return false;
      }
      return true;
    }
    function v951(t1$$1, t2$$1) {
      var v5000 = t1$$1 == t2$$1;
      if (v5000) {
        return true;
      }
      var v14417 = !t1$$1;
      var v19934 = !v14417;
      if (v19934) {
        v14417 = !t2$$1;
      }
      var v5001 = v14417;
      if (v5001) {
        return false;
      }
      var v14418 = t1$$1.isClass();
      var v19935 = !v14418;
      if (v19935) {
        v14418 = t1$$1.isClassInstance();
      }
      var v5002 = v14418;
      if (v5002) {
        return false;
      }
      var v14419 = t2$$1.typeID;
      var v5003 = v14419 << 16;
      var v5004 = t1$$1.typeID;
      var comboId = v5003 | v5004;
      var v14420 = this.identicalCache;
      var v5005 = v14420[comboId];
      if (v5005) {
        return true;
      }
      var v19936 = t1$$1.typeFlags;
      var v23440 = TypeScript$$23.TypeFlags;
      var v19937 = v23440.IsEnum;
      var v14421 = v19936 & v19937;
      var v19940 = !v14421;
      if (v19940) {
        var v19938 = t2$$1.typeFlags;
        var v23441 = TypeScript$$23.TypeFlags;
        var v19939 = v23441.IsEnum;
        v14421 = v19938 & v19939;
      }
      var v5006 = v14421;
      if (v5006) {
        return false;
      }
      var v14422 = t1$$1.isArray();
      var v19941 = !v14422;
      if (v19941) {
        v14422 = t2$$1.isArray();
      }
      var v5013 = v14422;
      if (v5013) {
        var v19942 = t1$$1.isArray();
        if (v19942) {
          v19942 = t2$$1.isArray();
        }
        var v14423 = v19942;
        var v5007 = !v14423;
        if (v5007) {
          return false;
        }
        var v5008 = this.identicalCache;
        v5008[comboId] = false;
        var v5009 = t1$$1.elementType;
        var v5010 = t2$$1.elementType;
        var ret = this.typesAreIdentical(v5009, v5010);
        if (ret) {
          var v5011 = this.subtypeCache;
          v5011[comboId] = true;
        } else {
          var v5012 = this.subtypeCache;
          v5012[comboId] = undefined;
        }
        return ret;
      }
      var v14424 = t1$$1.primitiveTypeClass;
      var v14425 = t2$$1.primitiveTypeClass;
      var v5014 = v14424 != v14425;
      if (v5014) {
        return false;
      }
      var v5015 = this.identicalCache;
      v5015[comboId] = false;
      var v14426 = t1$$1.memberScope;
      if (v14426) {
        v14426 = t2$$1.memberScope;
      }
      var v5034 = v14426;
      if (v5034) {
        var v14427 = t1$$1.memberScope;
        var v5016 = v14427.getAllValueSymbolNames(true);
        var t1MemberKeys = v5016.sort();
        var v14428 = t2$$1.memberScope;
        var v5017 = v14428.getAllValueSymbolNames(true);
        var t2MemberKeys = v5017.sort();
        var v14429 = t1MemberKeys.length;
        var v14430 = t2MemberKeys.length;
        var v5019 = v14429 != v14430;
        if (v5019) {
          var v5018 = this.identicalCache;
          v5018[comboId] = undefined;
          return false;
        }
        var t1MemberSymbol = null;
        var t2MemberSymbol = null;
        var t1MemberType = null;
        var t2MemberType = null;
        var iMember$$1 = 0;
        var v14431 = t1MemberKeys.length;
        var v5031 = iMember$$1 < v14431;
        for (;v5031;) {
          var v14432 = t1MemberKeys[iMember$$1];
          var v14433 = t2MemberKeys[iMember$$1];
          var v5021 = v14432 != v14433;
          if (v5021) {
            var v5020 = this.identicalCache;
            v5020[comboId] = undefined;
            return false;
          }
          var v5022 = t1$$1.memberScope;
          var v5023 = t1MemberKeys[iMember$$1];
          t1MemberSymbol = v5022.find(v5023, false, false);
          var v5024 = t2$$1.memberScope;
          var v5025 = t2MemberKeys[iMember$$1];
          t2MemberSymbol = v5024.find(v5025, false, false);
          var v19943 = t1MemberSymbol.flags;
          var v23442 = TypeScript$$23.SymbolFlags;
          var v19944 = v23442.Optional;
          var v14434 = v19943 & v19944;
          var v19945 = t2MemberSymbol.flags;
          var v23443 = TypeScript$$23.SymbolFlags;
          var v19946 = v23443.Optional;
          var v14435 = v19945 & v19946;
          var v5027 = v14434 != v14435;
          if (v5027) {
            var v5026 = this.identicalCache;
            v5026[comboId] = undefined;
            return false;
          }
          t1MemberType = t1MemberSymbol.getType();
          t2MemberType = t2MemberSymbol.getType();
          var v14436 = t1MemberType && t2MemberType;
          if (v14436) {
            var v23444 = this.identicalCache;
            var v25826 = t2MemberType.typeID;
            var v25121 = v25826 << 16;
            var v25122 = t1MemberType.typeID;
            var v23445 = v25121 | v25122;
            var v19947 = v23444[v23445];
            v14436 = v19947 != undefined;
          }
          var v5028 = v14436;
          if (v5028) {
            iMember$$1++;
            var v14437 = t1MemberKeys.length;
            v5031 = iMember$$1 < v14437;
            continue;
          }
          var v14438 = this.typesAreIdentical(t1MemberType, t2MemberType);
          var v5030 = !v14438;
          if (v5030) {
            var v5029 = this.identicalCache;
            v5029[comboId] = undefined;
            return false;
          }
          iMember$$1++;
          var v14439 = t1MemberKeys.length;
          v5031 = iMember$$1 < v14439;
        }
      } else {
        var v14440 = t1$$1.memberScope;
        var v19948 = !v14440;
        if (v19948) {
          v14440 = t2$$1.memberScope;
        }
        var v5033 = v14440;
        if (v5033) {
          var v5032 = this.identicalCache;
          v5032[comboId] = undefined;
          return false;
        }
      }
      var v19949 = t1$$1.call;
      var v19950 = t2$$1.call;
      var v14441 = this.signatureGroupsAreIdentical(v19949, v19950);
      var v5036 = !v14441;
      if (v5036) {
        var v5035 = this.identicalCache;
        v5035[comboId] = undefined;
        return false;
      }
      var v19951 = t1$$1.construct;
      var v19952 = t2$$1.construct;
      var v14442 = this.signatureGroupsAreIdentical(v19951, v19952);
      var v5038 = !v14442;
      if (v5038) {
        var v5037 = this.identicalCache;
        v5037[comboId] = undefined;
        return false;
      }
      var v19953 = t1$$1.index;
      var v19954 = t2$$1.index;
      var v14443 = this.signatureGroupsAreIdentical(v19953, v19954);
      var v5040 = !v14443;
      if (v5040) {
        var v5039 = this.identicalCache;
        v5039[comboId] = undefined;
        return false;
      }
      var v5041 = this.identicalCache;
      v5041[comboId] = true;
      return true;
    }
    function v950(initialType, targetType$$4, collection$$1, acceptVoid, comparisonInfo$$2) {
      var i$$82 = 0;
      var len$$28 = collection$$1.getLength();
      var nlastChecked = 0;
      var bestCommonType = initialType;
      if (targetType$$4) {
        var v5042;
        if (bestCommonType) {
          v5042 = bestCommonType.mergeOrdered(targetType$$4, this, acceptVoid);
        } else {
          v5042 = targetType$$4;
        }
        bestCommonType = v5042;
      }
      var convergenceType = bestCommonType;
      var v5049 = nlastChecked < len$$28;
      for (;v5049;) {
        i$$82 = 0;
        var v5046 = i$$82 < len$$28;
        for (;v5046;) {
          var v5043 = i$$82 == nlastChecked;
          if (v5043) {
            i$$82++;
            v5046 = i$$82 < len$$28;
            continue;
          }
          var v14444 = convergenceType;
          if (v14444) {
            var v19955 = collection$$1.getTypeAtIndex(i$$82);
            v14444 = bestCommonType = convergenceType.mergeOrdered(v19955, this, acceptVoid, comparisonInfo$$2);
          }
          var v5044 = v14444;
          if (v5044) {
            convergenceType = bestCommonType;
          }
          var v19956 = this.anyType;
          var v14445 = bestCommonType == v19956;
          var v19957 = !v14445;
          if (v19957) {
            v14445 = bestCommonType == null;
          }
          var v5045 = v14445;
          if (v5045) {
            break;
          } else {
            if (targetType$$4) {
              collection$$1.setTypeAtIndex(i$$82, targetType$$4);
            }
          }
          i$$82++;
          v5046 = i$$82 < len$$28;
        }
        var v5047 = convergenceType && bestCommonType;
        if (v5047) {
          break;
        }
        nlastChecked++;
        var v5048 = nlastChecked < len$$28;
        if (v5048) {
          convergenceType = collection$$1.getTypeAtIndex(nlastChecked);
        }
        v5049 = nlastChecked < len$$28;
      }
      var v5050;
      if (acceptVoid) {
        v5050 = bestCommonType;
      } else {
        var v14446;
        var v23446 = this.voidType;
        var v19958 = bestCommonType == v23446;
        if (v19958) {
          v14446 = null;
        } else {
          v14446 = bestCommonType;
        }
        v5050 = v14446;
      }
      return v5050;
    }
    function v949(t$$1) {
      var v14447 = this.undefinedType;
      var v5051 = t$$1 == v14447;
      var v14449 = !v5051;
      if (v14449) {
        var v14448 = this.nullType;
        v5051 = t$$1 == v14448;
      }
      return v5051;
    }
    function v948(t) {
      var v19959 = this.undefinedType;
      var v14450 = t == v19959;
      var v19961 = !v14450;
      if (v19961) {
        var v19960 = this.nullType;
        v14450 = t == v19960;
      }
      var v5052 = v14450;
      if (v5052) {
        return this.anyType;
      }
      return t;
    }
    function v947(targetType$$3, objectLit$$1) {
      var v19962 = this.typeFlow;
      var v14451 = v19962.objectInterfaceType;
      var v5053 = targetType$$3 == v14451;
      if (v5053) {
        return true;
      }
      var memberDecls = objectLit$$1.operand;
      var v19963 = memberDecls;
      if (v19963) {
        v19963 = targetType$$3.memberScope;
      }
      var v14452 = v19963;
      var v5054 = !v14452;
      if (v5054) {
        return false;
      }
      var id$$19 = null;
      var targetMember = null;
      var text$$23 = "";
      var foundSyms = {};
      var i$$81 = 0;
      var v19964 = memberDecls.members;
      var v14453 = v19964.length;
      var v5061 = i$$81 < v14453;
      for (;v5061;) {
        var v14454 = memberDecls.members;
        var v5055 = v14454[i$$81];
        id$$19 = v5055.operand1;
        var v14455 = id$$19.nodeType;
        var v19965 = TypeScript$$23.NodeType;
        var v14456 = v19965.Name;
        var v5058 = v14455 == v14456;
        if (v5058) {
          text$$23 = id$$19.text;
        } else {
          var v14457 = id$$19.nodeType;
          var v19966 = TypeScript$$23.NodeType;
          var v14458 = v19966.QString;
          var v5057 = v14457 == v14458;
          if (v5057) {
            var idText$$3 = id$$19.text;
            var v14459 = idText$$3.length;
            var v5056 = v14459 - 1;
            text$$23 = idText$$3.substring(1, v5056);
          } else {
            return false;
          }
        }
        var v5059 = targetType$$3.memberScope;
        targetMember = v5059.find(text$$23, true, false);
        var v5060 = !targetMember;
        if (v5060) {
          return false;
        }
        foundSyms[text$$23] = true;
        i$$81++;
        var v19967 = memberDecls.members;
        var v14460 = v19967.length;
        v5061 = i$$81 < v14460;
      }
      var v5062 = targetType$$3.memberScope;
      var targetMembers = v5062.getAllValueSymbolNames(true);
      i$$81 = 0;
      var v14461 = targetMembers.length;
      var v5065 = i$$81 < v14461;
      for (;v5065;) {
        var memberName$$2 = targetMembers[i$$81];
        var v5063 = targetType$$3.memberScope;
        var memberSym = v5063.find(memberName$$2, true, false);
        var v23447 = targetMembers[i$$81];
        var v19968 = foundSyms[v23447];
        var v14462 = !v19968;
        if (v14462) {
          var v23448 = memberSym.flags;
          var v25123 = TypeScript$$23.SymbolFlags;
          var v23449 = v25123.Optional;
          var v19969 = TypeScript$$23.hasFlag(v23448, v23449);
          v14462 = !v19969;
        }
        var v5064 = v14462;
        if (v5064) {
          return false;
        }
        i$$81++;
        var v14463 = targetMembers.length;
        v5065 = i$$81 < v14463;
      }
      return true;
    }
    function v946(candidateType, funcDecl$$21, beStringent) {
      var v23450 = funcDecl$$21.isParenthesized;
      var v25124 = !v23450;
      if (v25124) {
        v23450 = funcDecl$$21.isMethod();
      }
      var v19970 = v23450;
      var v23452 = !v19970;
      if (v23452) {
        var v23451 = beStringent;
        if (v23451) {
          v23451 = funcDecl$$21.returnTypeAnnotation;
        }
        v19970 = v23451;
      }
      var v14464 = v19970;
      var v19971 = !v14464;
      if (v19971) {
        v14464 = funcDecl$$21.isInlineCallLiteral;
      }
      var v5066 = v14464;
      if (v5066) {
        return false;
      }
      var v5067 = beStringent;
      var v14466 = !v5067;
      if (v14466) {
        var v19972 = this.typeFlow;
        var v14465 = v19972.functionInterfaceType;
        v5067 = v14465 == candidateType;
      }
      beStringent = v5067;
      var v5068 = !beStringent;
      if (v5068) {
        return true;
      }
      var v14467 = funcDecl$$21.signature;
      var v5072 = !v14467;
      if (v5072) {
        var v19973 = this.typeFlow;
        var v14468 = v19973.scope;
        var v5069 = v14468.container;
        var v14469 = this.typeFlow;
        var v5070 = v14469.scope;
        this.createFunctionSignature(funcDecl$$21, v5069, v5070, null, null);
        var v5071 = this.typeFlow;
        v5071.typeCheck(funcDecl$$21);
      }
      var signature$$5 = funcDecl$$21.signature;
      var v5073 = signature$$5.parameters;
      var paramLen$$2 = v5073.length;
      var i$$80 = 0;
      var v5076 = i$$80 < paramLen$$2;
      for (;v5076;) {
        var v5074 = signature$$5.parameters;
        var param$$6 = v5074[i$$80];
        var symbol$$13 = param$$6;
        var argDecl = symbol$$13.declAST;
        var v14470 = beStringent;
        if (v14470) {
          v14470 = argDecl.typeExpr;
        }
        var v5075 = v14470;
        if (v5075) {
          return false;
        }
        i$$80++;
        v5076 = i$$80 < paramLen$$2;
      }
      var v14471 = candidateType.construct;
      if (v14471) {
        v14471 = candidateType.call;
      }
      var v5077 = v14471;
      if (v5077) {
        return false;
      }
      var v5078;
      var v14472 = candidateType.construct;
      if (v14472) {
        v5078 = candidateType.construct;
      } else {
        v5078 = candidateType.call;
      }
      var candidateSigs = v5078;
      var v14473 = !candidateSigs;
      var v19975 = !v14473;
      if (v19975) {
        var v23453 = candidateSigs.signatures;
        var v19974 = v23453.length;
        v14473 = v19974 > 1;
      }
      var v5079 = v14473;
      if (v5079) {
        return false;
      }
      return true;
    }
    function v945(signatures$$3, args$$13, comparisonInfo$$1) {
      var applicableSigs = [];
      var memberType = null;
      var miss = false;
      var cxt = null;
      var hadProvisionalErrors = false;
      var i$$79 = 0;
      var v14474 = signatures$$3.length;
      var v5107 = i$$79 < v14474;
      for (;v5107;) {
        miss = false;
        var j$$10 = 0;
        var v19976 = args$$13.members;
        var v14475 = v19976.length;
        var v5104 = j$$10 < v14475;
        for (;v5104;) {
          var v23454 = signatures$$3[i$$79];
          var v19977 = v23454.parameters;
          var v14476 = v19977.length;
          var v5080 = j$$10 >= v14476;
          if (v5080) {
            j$$10++;
            var v19978 = args$$13.members;
            var v14477 = v19978.length;
            v5104 = j$$10 < v14477;
            continue;
          }
          var v19979 = signatures$$3[i$$79];
          var v14478 = v19979.parameters;
          var v5081 = v14478[j$$10];
          memberType = v5081.getType();
          var v25125 = signatures$$3[i$$79];
          var v23455 = v25125.declAST;
          var v19980 = v23455.variableArgList;
          if (v19980) {
            var v25827 = signatures$$3[i$$79];
            var v25126 = v25827.nonOptionalParameterCount;
            var v23456 = v25126 - 1;
            v19980 = j$$10 >= v23456;
          }
          var v14479 = v19980;
          if (v14479) {
            v14479 = memberType.isArray();
          }
          var v5082 = v14479;
          if (v5082) {
            memberType = memberType.elementType;
          }
          var v14480 = this.anyType;
          var v5103 = memberType == v14480;
          if (v5103) {
          } else {
            var v23457 = args$$13.members;
            var v19981 = v23457[j$$10];
            var v14481 = v19981.nodeType;
            var v19982 = TypeScript$$23.NodeType;
            var v14482 = v19982.FuncDecl;
            var v5102 = v14481 == v14482;
            if (v5102) {
              var v19983 = this.typeFlow;
              var v14483 = v19983.functionInterfaceType;
              if (v14483) {
                var v23458 = this.typeFlow;
                var v19984 = v23458.functionInterfaceType;
                v14483 = memberType == v19984;
              }
              var v5083 = v14483;
              if (v5083) {
                j$$10++;
                var v19985 = args$$13.members;
                var v14484 = v19985.length;
                v5104 = j$$10 < v14484;
                continue;
              }
              var v23459 = args$$13.members;
              var v19986 = v23459[j$$10];
              var v14485 = this.canContextuallyTypeFunction(memberType, v19986, true);
              var v5091 = !v14485;
              if (v5091) {
                var v19987 = args$$13.members;
                var v14486 = v19987[j$$10];
                var v5087 = this.canContextuallyTypeFunction(memberType, v14486, false);
                if (v5087) {
                  var v5084 = this.typeFlow;
                  var v14487 = args$$13.members;
                  var v5085 = v14487[j$$10];
                  v5084.typeCheck(v5085);
                  var v25127 = args$$13.members;
                  var v23460 = v25127[j$$10];
                  var v19988 = v23460.type;
                  var v14488 = this.sourceIsAssignableToTarget(v19988, memberType, comparisonInfo$$1);
                  var v5086 = !v14488;
                  if (v5086) {
                    break;
                  }
                } else {
                  break;
                }
              } else {
                var v14489 = args$$13.members;
                var v5088 = v14489[j$$10];
                this.typeCheckWithContextualType(memberType, true, true, v5088);
                this.cleanStartedPTO();
                hadProvisionalErrors = this.hadProvisionalErrors();
                var v25128 = args$$13.members;
                var v23461 = v25128[j$$10];
                var v19989 = v23461.type;
                var v14490 = this.sourceIsAssignableToTarget(v19989, memberType, comparisonInfo$$1);
                var v5090 = !v14490;
                if (v5090) {
                  if (comparisonInfo$$1) {
                    var v26134 = memberType.getTypeName();
                    var v25828 = "Could not apply type '" + v26134;
                    var v25129 = v25828 + "' to argument ";
                    var v25130 = j$$10 + 1;
                    var v23462 = v25129 + v25130;
                    var v19990 = v23462 + ", which is of type '";
                    var v25829 = args$$13.members;
                    var v25131 = v25829[j$$10];
                    var v23463 = v25131.type;
                    var v19991 = v23463.getTypeName();
                    var v14491 = v19990 + v19991;
                    var v5089 = v14491 + "'";
                    comparisonInfo$$1.setMessage(v5089);
                  }
                  miss = true;
                }
                this.resetProvisionalErrors();
                if (miss) {
                  break;
                }
              }
            } else {
              var v23464 = args$$13.members;
              var v19992 = v23464[j$$10];
              var v14492 = v19992.nodeType;
              var v19993 = TypeScript$$23.NodeType;
              var v14493 = v19993.ObjectLit;
              var v5101 = v14492 == v14493;
              if (v5101) {
                var v19994 = this.typeFlow;
                var v14494 = v19994.objectInterfaceType;
                if (v14494) {
                  var v23465 = this.typeFlow;
                  var v19995 = v23465.objectInterfaceType;
                  v14494 = memberType == v19995;
                }
                var v5092 = v14494;
                if (v5092) {
                  j$$10++;
                  var v19996 = args$$13.members;
                  var v14495 = v19996.length;
                  v5104 = j$$10 < v14495;
                  continue;
                }
                var v14496 = args$$13.members;
                var v5093 = v14496[j$$10];
                this.typeCheckWithContextualType(memberType, true, true, v5093);
                this.cleanStartedPTO();
                hadProvisionalErrors = this.hadProvisionalErrors();
                var v25132 = args$$13.members;
                var v23466 = v25132[j$$10];
                var v19997 = v23466.type;
                var v14497 = this.sourceIsAssignableToTarget(v19997, memberType, comparisonInfo$$1);
                var v5095 = !v14497;
                if (v5095) {
                  if (comparisonInfo$$1) {
                    var v26135 = memberType.getTypeName();
                    var v25830 = "Could not apply type '" + v26135;
                    var v25133 = v25830 + "' to argument ";
                    var v25134 = j$$10 + 1;
                    var v23467 = v25133 + v25134;
                    var v19998 = v23467 + ", which is of type '";
                    var v25831 = args$$13.members;
                    var v25135 = v25831[j$$10];
                    var v23468 = v25135.type;
                    var v19999 = v23468.getTypeName();
                    var v14498 = v19998 + v19999;
                    var v5094 = v14498 + "'";
                    comparisonInfo$$1.setMessage(v5094);
                  }
                  miss = true;
                }
                this.resetProvisionalErrors();
                if (miss) {
                  break;
                }
              } else {
                var v23469 = args$$13.members;
                var v20000 = v23469[j$$10];
                var v14499 = v20000.nodeType;
                var v20001 = TypeScript$$23.NodeType;
                var v14500 = v20001.ArrayLit;
                var v5100 = v14499 == v14500;
                if (v5100) {
                  var v20002 = this.typeFlow;
                  var v14501 = v20002.arrayInterfaceType;
                  if (v14501) {
                    var v23470 = this.typeFlow;
                    var v20003 = v23470.arrayInterfaceType;
                    v14501 = memberType == v20003;
                  }
                  var v5096 = v14501;
                  if (v5096) {
                    j$$10++;
                    var v20004 = args$$13.members;
                    var v14502 = v20004.length;
                    v5104 = j$$10 < v14502;
                    continue;
                  }
                  var v14503 = args$$13.members;
                  var v5097 = v14503[j$$10];
                  this.typeCheckWithContextualType(memberType, true, true, v5097);
                  this.cleanStartedPTO();
                  hadProvisionalErrors = this.hadProvisionalErrors();
                  var v25136 = args$$13.members;
                  var v23471 = v25136[j$$10];
                  var v20005 = v23471.type;
                  var v14504 = this.sourceIsAssignableToTarget(v20005, memberType, comparisonInfo$$1);
                  var v5099 = !v14504;
                  if (v5099) {
                    if (comparisonInfo$$1) {
                      var v26136 = memberType.getTypeName();
                      var v25832 = "Could not apply type '" + v26136;
                      var v25137 = v25832 + "' to argument ";
                      var v25138 = j$$10 + 1;
                      var v23472 = v25137 + v25138;
                      var v20006 = v23472 + ", which is of type '";
                      var v25833 = args$$13.members;
                      var v25139 = v25833[j$$10];
                      var v23473 = v25139.type;
                      var v20007 = v23473.getTypeName();
                      var v14505 = v20006 + v20007;
                      var v5098 = v14505 + "'";
                      comparisonInfo$$1.setMessage(v5098);
                    }
                    break;
                  }
                  this.resetProvisionalErrors();
                  if (miss) {
                    break;
                  }
                }
              }
            }
          }
          j$$10++;
          var v20008 = args$$13.members;
          var v14506 = v20008.length;
          v5104 = j$$10 < v14506;
        }
        var v20009 = args$$13.members;
        var v14507 = v20009.length;
        var v5106 = j$$10 == v14507;
        if (v5106) {
          var v5105 = applicableSigs.length;
          var v14508 = signatures$$3[i$$79];
          applicableSigs[v5105] = {signature:v14508, hadProvisionalErrors:hadProvisionalErrors};
        }
        hadProvisionalErrors = false;
        i$$79++;
        var v14509 = signatures$$3.length;
        v5107 = i$$79 < v14509;
      }
      return applicableSigs;
    }
    function v944(signatures$$2, args$$12) {
      function v943(index$$51) {
        var v5108;
        if (index$$51) {
          var v20010 = Q.signature;
          var v14510 = v20010.returnType;
          v5108 = v14510.type;
        } else {
          var v20011 = best.signature;
          var v14511 = v20011.returnType;
          v5108 = v14511.type;
        }
        return v5108;
      }
      function v942(index$$50, type$$43) {
        return;
      }
      function v941() {
        return 2;
      }
      var v14512 = signatures$$2.length;
      var v5110 = v14512 == 1;
      if (v5110) {
        var v14513 = signatures$$2[0];
        var v5109 = v14513.signature;
        return{sig:v5109, ambiguous:false};
      }
      var best = signatures$$2[0];
      var Q = null;
      var AType = null;
      var PType = null;
      var QType = null;
      var ambiguous = false;
      var qSig = 1;
      var v14514 = signatures$$2.length;
      var v5124 = qSig < v14514;
      for (;v5124;) {
        Q = signatures$$2[qSig];
        var i$$78 = 0;
        i$$78 = 0;
        var v14515 = args$$12;
        if (v14515) {
          var v23474 = args$$12.members;
          var v20012 = v23474.length;
          v14515 = i$$78 < v20012;
        }
        var v5121 = v14515;
        for (;v5121;) {
          var v14516 = args$$12.members;
          var v5111 = v14516[i$$78];
          AType = v5111.type;
          var v5112;
          var v25140 = best.signature;
          var v23475 = v25140.parameters;
          var v20013 = v23475.length;
          var v14519 = i$$78 < v20013;
          if (v14519) {
            var v23476 = best.signature;
            var v20014 = v23476.parameters;
            var v14517 = v20014[i$$78];
            v5112 = v14517.getType();
          } else {
            var v25141 = best.signature;
            var v23477 = v25141.parameters;
            var v26137 = best.signature;
            var v25834 = v26137.parameters;
            var v25142 = v25834.length;
            var v23478 = v25142 - 1;
            var v20015 = v23477[v23478];
            var v14518 = v20015.getType();
            v5112 = v14518.elementType;
          }
          PType = v5112;
          var v5113;
          var v25143 = Q.signature;
          var v23479 = v25143.parameters;
          var v20016 = v23479.length;
          var v14522 = i$$78 < v20016;
          if (v14522) {
            var v23480 = Q.signature;
            var v20017 = v23480.parameters;
            var v14520 = v20017[i$$78];
            v5113 = v14520.getType();
          } else {
            var v25144 = Q.signature;
            var v23481 = v25144.parameters;
            var v26138 = Q.signature;
            var v25835 = v26138.parameters;
            var v25145 = v25835.length;
            var v23482 = v25145 - 1;
            var v20018 = v23481[v23482];
            var v14521 = v20018.getType();
            v5113 = v14521.elementType;
          }
          QType = v5113;
          var v5120 = this.typesAreIdentical(PType, QType);
          if (v5120) {
          } else {
            var v5119 = this.typesAreIdentical(AType, PType);
            if (v5119) {
              break;
            } else {
              var v5118 = this.typesAreIdentical(AType, QType);
              if (v5118) {
                best = Q;
                break;
              } else {
                var v5117 = this.sourceIsSubtypeOfTarget(PType, QType);
                if (v5117) {
                  break;
                } else {
                  var v5116 = this.sourceIsSubtypeOfTarget(QType, PType);
                  if (v5116) {
                    best = Q;
                    break;
                  } else {
                    var v5115 = Q.hadProvisionalErrors;
                    if (v5115) {
                      break;
                    } else {
                      var v5114 = best.hadProvisionalErrors;
                      if (v5114) {
                        best = Q;
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          i$$78++;
          var v14523 = args$$12;
          if (v14523) {
            var v23483 = args$$12.members;
            var v20019 = v23483.length;
            v14523 = i$$78 < v20019;
          }
          v5121 = v14523;
        }
        var v14524 = !args$$12;
        var v20021 = !v14524;
        if (v20021) {
          var v23484 = args$$12.members;
          var v20020 = v23484.length;
          v14524 = i$$78 == v20020;
        }
        var v5123 = v14524;
        if (v5123) {
          var collection = {getLength:v941, setTypeAtIndex:v942, getTypeAtIndex:v943};
          var v20022 = best.signature;
          var v14525 = v20022.returnType;
          var v5122 = v14525.type;
          var bct = this.findBestCommonType(v5122, null, collection, true);
          ambiguous = !bct;
        } else {
          ambiguous = false;
        }
        qSig++;
        var v14526 = signatures$$2.length;
        v5124 = qSig < v14526;
      }
      var v5125 = best.signature;
      return{sig:v5125, ambiguous:ambiguous};
    }
    function v940(typeLink$$2, scope$$28) {
      this.resolvingBases = true;
      this.resolveTypeLink(scope$$28, typeLink$$2, true);
      this.resolvingBases = false;
      var extendsType = null;
      var v14527 = typeLink$$2.type;
      var v5127 = v14527.isClass();
      if (v5127) {
        var v5126 = typeLink$$2.type;
        extendsType = v5126.instanceType;
      } else {
        extendsType = typeLink$$2.type;
      }
      return extendsType;
    }
    function v939(scope$$27, typeLink$$1, supplyVar$$1) {
      var arrayCount$$1 = 0;
      var v14528 = typeLink$$1.type;
      var v5170 = v14528 == null;
      if (v5170) {
        var ast$$64 = typeLink$$1.ast;
        if (ast$$64) {
          var v14529 = typeLink$$1.type;
          var v5164 = v14529 == null;
          for (;v5164;) {
            var v5163 = ast$$64.nodeType;
            switch(v5163) {
              case TypeScript$$23.NodeType.Name:
                var identifier$$2 = ast$$64;
                var v5128 = identifier$$2.text;
                var symbol$$12 = scope$$27.find(v5128, false, true);
                var v5139 = symbol$$12 == null;
                if (v5139) {
                  typeLink$$1.type = this.anyType;
                  var v5129 = this.errorReporter;
                  var v5130 = identifier$$2.actualText;
                  v5129.unresolvedSymbol(identifier$$2, v5130);
                } else {
                  var v5138 = symbol$$12.isType();
                  if (v5138) {
                    var v14530 = symbol$$12.visible(scope$$27, this);
                    var v5133 = !v14530;
                    if (v5133) {
                      var v5131 = this.errorReporter;
                      var v20023 = identifier$$2.actualText;
                      var v14531 = "The symbol '" + v20023;
                      var v5132 = v14531 + "' is not visible at this point";
                      v5131.simpleError(ast$$64, v5132);
                    }
                    identifier$$2.sym = symbol$$12;
                    var v26608 = symbol$$12.getType();
                    typeLink$$1.type = v26608;
                    var v5136 = typeLink$$1.type;
                    if (v5136) {
                      var v14532 = typeLink$$1.type;
                      var v5135 = v14532.isClass();
                      if (v5135) {
                        var v5134 = typeLink$$1.type;
                        typeLink$$1.type = v5134.instanceType;
                      }
                    } else {
                      typeLink$$1.type = this.anyType;
                    }
                  } else {
                    typeLink$$1.type = this.anyType;
                    var v5137 = this.errorReporter;
                    v5137.simpleError(ast$$64, "Expected type");
                  }
                }
                break;
              case TypeScript$$23.NodeType.Dot:
                var v26609 = this.resolveTypeMember(scope$$27, ast$$64);
                typeLink$$1.type = v26609;
                break;
              case TypeScript$$23.NodeType.TypeRef:
                var typeRef$$2 = ast$$64;
                arrayCount$$1 = typeRef$$2.arrayCount;
                ast$$64 = typeRef$$2.term;
                var v5140 = ast$$64 == null;
                if (v5140) {
                  typeLink$$1.type = this.anyType;
                }
                break;
              case TypeScript$$23.NodeType.InterfaceDeclaration:
                var interfaceDecl$$3 = ast$$64;
                var v5141 = TypeScript$$23.Type;
                var interfaceType$$1 = new v5141;
                var v5142 = TypeScript$$23.TypeSymbol;
                var v14533 = interfaceDecl$$3.name;
                var v5143 = v14533.text;
                var v5144 = ast$$64.minChar;
                var v14534 = ast$$64.limChar;
                var v14535 = ast$$64.minChar;
                var v5145 = v14534 - v14535;
                var v14536 = this.locationInfo;
                var v5146 = v14536.unitIndex;
                var interfaceSymbol = new v5142(v5143, v5144, v5145, v5146, interfaceType$$1);
                interfaceType$$1.symbol = interfaceSymbol;
                var v5147 = TypeScript$$23.ScopedMembers;
                var v14537 = TypeScript$$23.DualStringHashTable;
                var v20024 = TypeScript$$23.StringHashTable;
                var v14538 = new v20024;
                var v20025 = TypeScript$$23.StringHashTable;
                var v14539 = new v20025;
                var v5148 = new v14537(v14538, v14539);
                var v26610 = new v5147(v5148);
                interfaceType$$1.members = v26610;
                var v5149 = TypeScript$$23.SymbolTableScope;
                var v5150 = interfaceType$$1.members;
                var v26611 = new v5149(v5150, null, null, null, interfaceSymbol);
                interfaceType$$1.containedScope = v26611;
                var v5151 = interfaceType$$1.containedScope;
                v5151.container = interfaceSymbol;
                interfaceType$$1.memberScope = interfaceType$$1.containedScope;
                var memberList = interfaceDecl$$3.members;
                var props$$1 = memberList.members;
                var propsLen = props$$1.length;
                var j$$9 = 0;
                var v5161 = j$$9 < propsLen;
                for (;v5161;) {
                  var propDecl = props$$1[j$$9];
                  var propSym = null;
                  var addMember = true;
                  var id$$18 = null;
                  var v14540 = propDecl.nodeType;
                  var v20026 = TypeScript$$23.NodeType;
                  var v14541 = v20026.FuncDecl;
                  var v5156 = v14540 == v14541;
                  if (v5156) {
                    var funcDecl$$20 = propDecl;
                    id$$18 = funcDecl$$20.name;
                    var v14542 = interfaceType$$1.members;
                    var v5152 = v14542.allMembers;
                    var v5153 = funcDecl$$20.getNameText();
                    propSym = v5152.lookup(v5153);
                    addMember = propSym == null;
                    var v5154 = funcDecl$$20.isSpecialFn();
                    if (v5154) {
                      addMember = false;
                      propSym = this.resolveFuncDecl(funcDecl$$20, scope$$27, interfaceSymbol);
                    } else {
                      propSym = this.resolveFuncDecl(funcDecl$$20, scope$$27, propSym);
                    }
                    funcDecl$$20.type = propSym.type;
                  } else {
                    id$$18 = propDecl.id;
                    propSym = this.resolveVarDecl(propDecl, scope$$27);
                    var v5155 = id$$18.isMissing();
                    addMember = !v5155;
                  }
                  if (addMember) {
                    var v14543 = id$$18;
                    if (v14543) {
                      var v20027 = id$$18.flags;
                      var v23485 = TypeScript$$23.ASTFlags;
                      var v20028 = v23485.OptionalName;
                      v14543 = TypeScript$$23.hasFlag(v20027, v20028);
                    }
                    var v5157 = v14543;
                    if (v5157) {
                      var v14544 = propSym.flags;
                      var v20029 = TypeScript$$23.SymbolFlags;
                      var v14545 = v20029.Optional;
                      propSym.flags = v14544 | v14545;
                    }
                    var v23486 = interfaceType$$1.members;
                    var v20030 = v23486.allMembers;
                    var v20031 = propSym.name;
                    var v14546 = v20030.add(v20031, propSym);
                    var v5160 = !v14546;
                    if (v5160) {
                      var v5158 = this.errorReporter;
                      var v5159 = propSym.name;
                      v5158.duplicateIdentifier(ast$$64, v5159);
                    }
                  }
                  j$$9++;
                  v5161 = j$$9 < propsLen;
                }
                ast$$64.type = interfaceType$$1;
                typeLink$$1.type = interfaceType$$1;
                break;
              case TypeScript$$23.NodeType.FuncDecl:
                var tsym = this.resolveFuncDecl(ast$$64, scope$$27, null);
                typeLink$$1.type = tsym.type;
                break;
              default:
                typeLink$$1.type = this.anyType;
                var v5162 = this.errorReporter;
                v5162.simpleError(ast$$64, "Expected type");
            }
            var v14547 = typeLink$$1.type;
            v5164 = v14547 == null;
          }
        }
        var count$$5 = arrayCount$$1;
        var v5166 = count$$5 > 0;
        for (;v5166;) {
          var v5165 = typeLink$$1.type;
          var v26612 = this.makeArrayType(v5165);
          typeLink$$1.type = v26612;
          count$$5--;
          v5166 = count$$5 > 0;
        }
        var v14548 = supplyVar$$1;
        if (v14548) {
          var v20032 = typeLink$$1.type;
          v14548 = v20032 == null;
        }
        var v5167 = v14548;
        if (v5167) {
          typeLink$$1.type = this.anyType;
        }
        var v5169 = typeLink$$1.ast;
        if (v5169) {
          var v5168 = typeLink$$1.ast;
          v5168.type = typeLink$$1.type;
        }
      }
      return;
    }
    function v938(varDecl$$11, scope$$26) {
      var v5171 = TypeScript$$23.ValueLocation;
      var field$$2 = new v5171;
      var v5172 = TypeScript$$23.FieldSymbol;
      var v14549 = varDecl$$11.id;
      var v5173 = v14549.text;
      var v5174 = varDecl$$11.minChar;
      var v14550 = this.locationInfo;
      var v5175 = v14550.unitIndex;
      var v20033 = varDecl$$11.varFlags;
      var v23487 = TypeScript$$23.VarFlags;
      var v20034 = v23487.Readonly;
      var v14551 = v20033 & v20034;
      var v20035 = TypeScript$$23.VarFlags;
      var v14552 = v20035.None;
      var v5176 = v14551 == v14552;
      var fieldSymbol = new v5172(v5173, v5174, v5175, v5176, field$$2);
      var v5177 = varDecl$$11.varFlags;
      fieldSymbol.transferVarFlags(v5177);
      field$$2.symbol = fieldSymbol;
      fieldSymbol.declAST = varDecl$$11;
      var v5178 = varDecl$$11.typeExpr;
      var v14553 = varDecl$$11.init;
      var v5179 = v14553 == null;
      var v26613 = TypeScript$$23.getTypeLink(v5178, this, v5179);
      field$$2.typeLink = v26613;
      var v5180 = field$$2.typeLink;
      this.resolveTypeLink(scope$$26, v5180, true);
      varDecl$$11.sym = fieldSymbol;
      var v5181 = field$$2.typeLink;
      varDecl$$11.type = v5181.type;
      return fieldSymbol;
    }
    function v937(funcDecl$$19, scope$$25, fgSym$$2) {
      var v23488 = scope$$25.container;
      var v20036 = this.createFunctionSignature(funcDecl$$19, v23488, scope$$25, fgSym$$2, false);
      var v14554 = v20036.declAST;
      var v5182 = v14554.type;
      var functionGroupSymbol = v5182.symbol;
      var signatures$$1;
      var v5187 = funcDecl$$19.isConstructMember();
      if (v5187) {
        var v14555 = functionGroupSymbol.type;
        var v5183 = v14555.construct;
        signatures$$1 = v5183.signatures;
      } else {
        var v5186 = funcDecl$$19.isIndexerMember();
        if (v5186) {
          var v20037 = functionGroupSymbol.type;
          var v14556 = v20037.getInstanceType();
          var v5184 = v14556.index;
          signatures$$1 = v5184.signatures;
        } else {
          var v14557 = functionGroupSymbol.type;
          var v5185 = v14557.call;
          signatures$$1 = v5185.signatures;
        }
      }
      var v14558 = signatures$$1.length;
      var v5188 = v14558 - 1;
      var signature$$4 = signatures$$1[v5188];
      var v5189 = signature$$4.parameters;
      var len$$27 = v5189.length;
      var i$$77 = 0;
      var v5192 = i$$77 < len$$27;
      for (;v5192;) {
        var v5190 = signature$$4.parameters;
        var paramSym$$2 = v5190[i$$77];
        var v14559 = paramSym$$2.parameter;
        var v5191 = v14559.typeLink;
        this.resolveTypeLink(scope$$25, v5191, true);
        i$$77++;
        v5192 = i$$77 < len$$27;
      }
      var v14560 = len$$27;
      if (v14560) {
        v14560 = funcDecl$$19.variableArgList;
      }
      var v5197 = v14560;
      if (v5197) {
        var v26139 = signature$$4.parameters;
        var v26140 = len$$27 - 1;
        var v25836 = v26139[v26140];
        var v25146 = v25836.parameter;
        var v23489 = v25146.typeLink;
        var v20038 = v23489.type;
        var v14561 = v20038.elementType;
        var v5196 = !v14561;
        if (v5196) {
          var v5193 = this.errorReporter;
          var v23490 = signature$$4.parameters;
          var v23491 = len$$27 - 1;
          var v20039 = v23490[v23491];
          var v14562 = v20039.parameter;
          var v5194 = v14562.symbol;
          v5193.simpleErrorFromSym(v5194, "... parameter must have array type");
          var v23492 = signature$$4.parameters;
          var v23493 = len$$27 - 1;
          var v20040 = v23492[v23493];
          var v14563 = v20040.parameter;
          var v5195 = v14563.typeLink;
          var v25837 = signature$$4.parameters;
          var v25838 = len$$27 - 1;
          var v25147 = v25837[v25838];
          var v23494 = v25147.parameter;
          var v20041 = v23494.typeLink;
          var v14564 = v20041.type;
          var v26614 = this.makeArrayType(v14564);
          v5195.type = v26614;
        }
      }
      var v5198 = signature$$4.returnType;
      var v5199 = funcDecl$$19.isSignature();
      this.resolveTypeLink(scope$$25, v5198, v5199);
      return functionGroupSymbol;
    }
    function v936(scope$$24, dotNode$$2) {
      function v935(id$$17) {
        return scope$$24.find(id$$17, false, true);
      }
      var lhs = dotNode$$2.operand1;
      var rhs = dotNode$$2.operand2;
      var resultType = this.anyType;
      var lhsType = this.anyType;
      var v14565 = lhs && rhs;
      if (v14565) {
        var v20042 = rhs.nodeType;
        var v23495 = TypeScript$$23.NodeType;
        var v20043 = v23495.Name;
        v14565 = v20042 == v20043;
      }
      var v5228 = v14565;
      if (v5228) {
        var v14566 = lhs.nodeType;
        var v20044 = TypeScript$$23.NodeType;
        var v14567 = v20044.Dot;
        var v5219 = v14566 == v14567;
        if (v5219) {
          lhsType = this.resolveTypeMember(scope$$24, lhs);
        } else {
          var v14568 = lhs.nodeType;
          var v20045 = TypeScript$$23.NodeType;
          var v14569 = v20045.Name;
          var v5218 = v14568 == v14569;
          if (v5218) {
            var identifier$$1 = lhs;
            var v5200 = identifier$$1.text;
            var symbol$$11 = scope$$24.find(v5200, false, true);
            var v5217 = symbol$$11 == null;
            if (v5217) {
              var v5201 = this.errorReporter;
              var v5202 = identifier$$1.actualText;
              v5201.unresolvedSymbol(identifier$$1, v5202);
            } else {
              var v5216 = symbol$$11.isType();
              if (v5216) {
                var typeSymbol$$1 = symbol$$11;
                var v20046 = typeSymbol$$1.aliasLink;
                if (v20046) {
                  var v23496 = typeSymbol$$1.type;
                  v20046 = !v23496;
                }
                var v14570 = v20046;
                if (v14570) {
                  var v25148 = typeSymbol$$1.aliasLink;
                  var v23497 = v25148.alias;
                  var v20047 = v23497.nodeType;
                  var v23498 = TypeScript$$23.NodeType;
                  var v20048 = v23498.Name;
                  v14570 = v20047 == v20048;
                }
                var v5206 = v14570;
                if (v5206) {
                  var v14571 = typeSymbol$$1.aliasLink;
                  var v5203 = v14571.alias;
                  var modPath$$2 = v5203.text;
                  var v14572 = this.locationInfo;
                  var v5204 = v14572.filename;
                  var modSym$$1 = this.findSymbolForDynamicModule(modPath$$2, v5204, v935);
                  if (modSym$$1) {
                    var v5205 = typeSymbol$$1;
                    var v26615 = modSym$$1.getType();
                    v5205.type = v26615;
                  }
                }
                var v14573 = TypeScript$$23.optimizeModuleCodeGen;
                if (v14573) {
                  v14573 = symbol$$11;
                }
                var v5211 = v14573;
                if (v5211) {
                  var symType = symbol$$11.getType();
                  var v20049 = symType;
                  if (v20049) {
                    v20049 = typeSymbol$$1.aliasLink;
                  }
                  var v14574 = v20049;
                  if (v14574) {
                    v14574 = typeSymbol$$1.onlyReferencedAsTypeRef;
                  }
                  var v5210 = v14574;
                  if (v5210) {
                    var v5207 = symType.symbol;
                    var modDecl$$1 = v5207.declAST;
                    var v14575 = modDecl$$1;
                    if (v14575) {
                      var v20050 = modDecl$$1.modFlags;
                      var v23499 = TypeScript$$23.ModuleFlags;
                      var v20051 = v23499.IsDynamic;
                      v14575 = TypeScript$$23.hasFlag(v20050, v20051);
                    }
                    var v5209 = v14575;
                    if (v5209) {
                      var v5208 = this.resolvingBases;
                      typeSymbol$$1.onlyReferencedAsTypeRef = !v5208;
                    }
                  }
                }
                var v14576 = symbol$$11.visible(scope$$24, this);
                var v5214 = !v14576;
                if (v5214) {
                  var v5212 = this.errorReporter;
                  var v20052 = identifier$$1.actualText;
                  var v14577 = "The symbol '" + v20052;
                  var v5213 = v14577 + "' is not visible at this point";
                  v5212.simpleError(lhs, v5213);
                }
                lhsType = symbol$$11.getType();
                identifier$$1.sym = symbol$$11;
              } else {
                var v5215 = this.errorReporter;
                v5215.simpleError(lhs, "Expected type");
              }
            }
          }
        }
        var v5220 = !lhsType;
        if (v5220) {
          lhsType = this.anyType;
        }
        var v14578 = this.anyType;
        var v5227 = lhsType != v14578;
        if (v5227) {
          var rhsIdentifier = rhs;
          var v5221 = rhsIdentifier.text;
          var resultSymbol = this.lookupMemberTypeSymbol(lhsType, v5221);
          var v5226 = resultSymbol == null;
          if (v5226) {
            resultType = this.anyType;
            var v5222 = this.errorReporter;
            v5222.simpleError(dotNode$$2, "Expected type");
          } else {
            resultType = resultSymbol.getType();
            var v14579 = resultSymbol.visible(scope$$24, this);
            var v5225 = !v14579;
            if (v5225) {
              var v5223 = this.errorReporter;
              var v20053 = rhs.actualText;
              var v14580 = "The symbol '" + v20053;
              var v5224 = v14580 + "' is not visible at this point";
              v5223.simpleError(lhs, v5224);
            }
          }
          rhsIdentifier.sym = resultType.symbol;
        }
      }
      var v5229 = resultType.isClass();
      if (v5229) {
        resultType = resultType.instanceType;
      }
      return resultType;
    }
    function v934(idText$$2, currentFileName, search) {
      var originalIdText = idText$$2;
      var symbol$$10 = search(idText$$2);
      var v5250 = symbol$$10 == null;
      if (v5250) {
        var v5230 = !symbol$$10;
        if (v5230) {
          idText$$2 = TypeScript$$23.swapQuotes(originalIdText);
          symbol$$10 = search(idText$$2);
        }
        var v5232 = !symbol$$10;
        if (v5232) {
          var v5231 = TypeScript$$23.stripQuotes(originalIdText);
          idText$$2 = v5231 + ".ts";
          symbol$$10 = search(idText$$2);
        }
        var v5234 = !symbol$$10;
        if (v5234) {
          var v5233 = TypeScript$$23.stripQuotes(originalIdText);
          idText$$2 = v5233 + ".str";
          symbol$$10 = search(idText$$2);
        }
        var v5236 = !symbol$$10;
        if (v5236) {
          var v5235 = TypeScript$$23.stripQuotes(originalIdText);
          idText$$2 = v5235 + ".d.ts";
          symbol$$10 = search(idText$$2);
        }
        var v5238 = !symbol$$10;
        if (v5238) {
          var v5237 = TypeScript$$23.stripQuotes(originalIdText);
          idText$$2 = v5237 + ".d.str";
          symbol$$10 = search(idText$$2);
        }
        var v14581 = !symbol$$10;
        if (v14581) {
          var v20054 = TypeScript$$23.isRelative(originalIdText);
          v14581 = !v20054;
        }
        var v5249 = v14581;
        if (v5249) {
          idText$$2 = originalIdText;
          var strippedIdText = TypeScript$$23.stripQuotes(idText$$2);
          var v5239 = TypeScript$$23.switchToForwardSlashes(currentFileName);
          var path$$7 = TypeScript$$23.getRootFilePath(v5239);
          var v14582 = symbol$$10 == null;
          if (v14582) {
            v14582 = path$$7 != "";
          }
          var v5248 = v14582;
          for (;v5248;) {
            var v14583 = path$$7 + strippedIdText;
            var v5240 = v14583 + ".ts";
            idText$$2 = TypeScript$$23.normalizePath(v5240);
            symbol$$10 = search(idText$$2);
            var v5241 = symbol$$10 == null;
            if (v5241) {
              idText$$2 = TypeScript$$23.changePathToSTR(idText$$2);
              symbol$$10 = search(idText$$2);
            }
            var v5242 = symbol$$10 == null;
            if (v5242) {
              idText$$2 = TypeScript$$23.changePathToDTS(idText$$2);
              symbol$$10 = search(idText$$2);
            }
            var v5243 = symbol$$10 == null;
            if (v5243) {
              idText$$2 = TypeScript$$23.changePathToDSTR(idText$$2);
              symbol$$10 = search(idText$$2);
            }
            var v5247 = symbol$$10 == null;
            if (v5247) {
              var v5246 = path$$7 === "/";
              if (v5246) {
                path$$7 = "";
              } else {
                var v5244 = path$$7 + "..";
                path$$7 = TypeScript$$23.normalizePath(v5244);
                var v5245;
                var v20055 = path$$7;
                if (v20055) {
                  v20055 = path$$7 != "/";
                }
                var v14584 = v20055;
                if (v14584) {
                  v5245 = path$$7 + "/";
                } else {
                  v5245 = path$$7;
                }
                path$$7 = v5245;
              }
            }
            var v14585 = symbol$$10 == null;
            if (v14585) {
              v14585 = path$$7 != "";
            }
            v5248 = v14585;
          }
        }
      }
      return symbol$$10;
    }
    function v933(containingType, name$$81) {
      var symbol$$9 = null;
      var v5256 = containingType.containedScope;
      if (v5256) {
        var v5251 = containingType.containedScope;
        symbol$$9 = v5251.find(name$$81, false, true);
      } else {
        var v5255 = containingType.members;
        if (v5255) {
          var v14586 = containingType.members;
          var v5252 = v14586.allMembers;
          symbol$$9 = v5252.lookup(name$$81);
          var v14587 = symbol$$9 == null;
          if (v14587) {
            v14587 = containingType.ambientMembers;
          }
          var v5254 = v14587;
          if (v5254) {
            var v14588 = containingType.ambientMembers;
            var v5253 = v14588.allMembers;
            symbol$$9 = v5253.lookup(name$$81);
          }
        }
      }
      var v5260 = symbol$$9 == null;
      if (v5260) {
        var typeMembers$$1 = containingType.getAllEnclosedTypes();
        var ambientTypeMembers$$1 = containingType.getAllAmbientEnclosedTypes();
        if (typeMembers$$1) {
          var v5257 = typeMembers$$1.allMembers;
          symbol$$9 = v5257.lookup(name$$81);
          var v14589 = symbol$$9 == null;
          if (v14589) {
            v14589 = ambientTypeMembers$$1;
          }
          var v5259 = v14589;
          if (v5259) {
            var v5258 = ambientTypeMembers$$1.allMembers;
            symbol$$9 = v5258.lookup(name$$81);
          }
        }
      }
      var v14590 = symbol$$9;
      if (v14590) {
        v14590 = symbol$$9.isType();
      }
      var v5261 = v14590;
      if (v5261) {
        return symbol$$9;
      } else {
        return null;
      }
      return;
    }
    function v932(type$$42) {
      var v5262 = TypeScript$$23.SymbolAggregateScope;
      var v5263 = type$$42.symbol;
      var resultScope$$1 = new v5262(v5263);
      var v14591;
      var v23500 = type$$42.symbol;
      if (v23500) {
        var v25149 = type$$42.symbol;
        v23500 = v25149.name;
      }
      var v20057 = v23500;
      if (v20057) {
        var v20056 = type$$42.symbol;
        v14591 = v20056.name;
      } else {
        v14591 = "{}";
      }
      var v5264 = v14591;
      var v5265 = type$$42.typeID;
      var baseContext$$1 = {base:v5264, baseId:v5265};
      this.addBases(resultScope$$1, type$$42, baseContext$$1);
      return resultScope$$1;
    }
    function v931(resultScope, type$$41, baseContext) {
      var v14592 = TypeScript$$23.SymbolTableScope;
      var v14593 = type$$41.members;
      var v14594 = type$$41.ambientMembers;
      var v14595 = type$$41.getAllEnclosedTypes();
      var v14596 = type$$41.getAllAmbientEnclosedTypes();
      var v14597 = type$$41.symbol;
      var v5266 = new v14592(v14593, v14594, v14595, v14596, v14597);
      resultScope.addParentScope(v5266);
      var i$$76 = 0;
      var parent$$52;
      var v5275 = type$$41.extendsList;
      if (v5275) {
        var v5267 = type$$41.extendsList;
        var len$$26 = v5267.length;
        var v5274 = i$$76 < len$$26;
        for (;v5274;) {
          var v5268 = type$$41.extendsList;
          parent$$52 = v5268[i$$76];
          var v14598 = baseContext.baseId;
          var v14599 = parent$$52.typeID;
          var v5273 = v14598 == v14599;
          if (v5273) {
            var v5269 = this.errorReporter;
            var v5270 = parent$$52.symbol;
            var v20058 = baseContext.base;
            var v14600 = "Type '" + v20058;
            var v5271 = v14600 + "' is recursively referenced as a base class of itself";
            v5269.reportErrorFromSym(v5270, v5271);
            var v5272 = parent$$52.symbol;
            var v20059 = v5272.flags;
            var v23501 = TypeScript$$23.SymbolFlags;
            var v20060 = v23501.RecursivelyReferenced;
            v5272.flags = v20059 | v20060;
            break;
          }
          this.addBases(resultScope, parent$$52, baseContext);
          i$$76++;
          v5274 = i$$76 < len$$26;
        }
      }
      return;
    }
    function v930(funcDecl$$18, fgSym$$1, enclosingClass, addToMembers, isClassProperty, scope$$23, container$$13) {
      var accessorSym = null;
      var sig = funcDecl$$18.signature;
      var v5276 = funcDecl$$18.name;
      var nameText$$2 = v5276.text;
      var v5277 = funcDecl$$18.fncFlags;
      var v14601 = TypeScript$$23.FncFlags;
      var v5278 = v14601.Static;
      var isStatic$$7 = TypeScript$$23.hasFlag(v5277, v5278);
      var v5279 = funcDecl$$18.fncFlags;
      var v14602 = TypeScript$$23.FncFlags;
      var v5280 = v14602.Private;
      var isPrivate$$1 = TypeScript$$23.hasFlag(v5279, v5280);
      var v5307 = fgSym$$1 == null;
      if (v5307) {
        var v5281 = TypeScript$$23.ValueLocation;
        var field$$1 = new v5281;
        var v5282 = TypeScript$$23.FieldSymbol;
        var v5283 = funcDecl$$18.minChar;
        var v14603 = this.locationInfo;
        var v5284 = v14603.unitIndex;
        accessorSym = new v5282(nameText$$2, v5283, v5284, false, field$$1);
        field$$1.symbol = accessorSym;
        accessorSym.declAST = funcDecl$$18;
        var v14604 = funcDecl$$18.fncFlags;
        var v20061 = TypeScript$$23.FncFlags;
        var v14605 = v20061.GetAccessor;
        var v5291 = TypeScript$$23.hasFlag(v14604, v14605);
        if (v5291) {
          var v5286 = accessorSym.getter;
          if (v5286) {
            var v5285 = this.errorReporter;
            v5285.simpleError(funcDecl$$18, "Redeclaration of property getter");
          }
          var v14606 = sig.declAST;
          var v5287 = v14606.type;
          accessorSym.getter = v5287.symbol;
        } else {
          var v5289 = accessorSym.setter;
          if (v5289) {
            var v5288 = this.errorReporter;
            v5288.simpleError(funcDecl$$18, "Redeclaration of property setter");
          }
          var v14607 = sig.declAST;
          var v5290 = v14607.type;
          accessorSym.setter = v5290.symbol;
        }
        var v26616 = TypeScript$$23.getTypeLink(null, this, false);
        field$$1.typeLink = v26616;
        if (addToMembers) {
          if (enclosingClass) {
            var v23502 = enclosingClass.members;
            var v20062 = v23502.publicMembers;
            var v14608 = v20062.add(nameText$$2, accessorSym);
            var v5294 = !v14608;
            if (v5294) {
              var v5292 = this.errorReporter;
              var v5293 = accessorSym.name;
              v5292.duplicateIdentifier(funcDecl$$18, v5293);
            }
            accessorSym.container = enclosingClass.symbol;
          } else {
            var v5295 = this.errorReporter;
            v5295.simpleError(funcDecl$$18, "Accessor property may not be added in this context");
          }
        } else {
          var v5296 = this.errorReporter;
          var v14609 = !isPrivate$$1;
          var v20063 = !v14609;
          if (v20063) {
            v14609 = isStatic$$7;
          }
          var v5297 = v14609;
          scope$$23.enter(container$$13, funcDecl$$18, accessorSym, v5296, v5297, false, false);
        }
        if (isClassProperty) {
          var v14610 = accessorSym.flags;
          var v20064 = TypeScript$$23.SymbolFlags;
          var v14611 = v20064.Property;
          accessorSym.flags = v14610 | v14611;
        }
        if (isStatic$$7) {
          var v14612 = accessorSym.flags;
          var v20065 = TypeScript$$23.SymbolFlags;
          var v14613 = v20065.Static;
          accessorSym.flags = v14612 | v14613;
        }
        if (isPrivate$$1) {
          var v14614 = accessorSym.flags;
          var v20066 = TypeScript$$23.SymbolFlags;
          var v14615 = v20066.Private;
          accessorSym.flags = v14614 | v14615;
        } else {
          var v14616 = accessorSym.flags;
          var v20067 = TypeScript$$23.SymbolFlags;
          var v14617 = v20067.Public;
          accessorSym.flags = v14616 | v14617;
        }
      } else {
        accessorSym = fgSym$$1;
        var v20068 = accessorSym.flags;
        var v23503 = TypeScript$$23.SymbolFlags;
        var v20069 = v23503.Private;
        var v14618 = TypeScript$$23.hasFlag(v20068, v20069);
        var v5299 = isPrivate$$1 != v14618;
        if (v5299) {
          var v5298 = this.errorReporter;
          v5298.simpleError(funcDecl$$18, "Getter and setter accessors do not agree in visibility");
        }
        var v14619 = funcDecl$$18.fncFlags;
        var v20070 = TypeScript$$23.FncFlags;
        var v14620 = v20070.GetAccessor;
        var v5306 = TypeScript$$23.hasFlag(v14619, v14620);
        if (v5306) {
          var v5301 = accessorSym.getter;
          if (v5301) {
            var v5300 = this.errorReporter;
            v5300.simpleError(funcDecl$$18, "Redeclaration of property getter");
          }
          var v5302 = funcDecl$$18.type;
          accessorSym.getter = v5302.symbol;
        } else {
          var v5304 = accessorSym.setter;
          if (v5304) {
            var v5303 = this.errorReporter;
            v5303.simpleError(funcDecl$$18, "Redeclaration of property setter");
          }
          var v5305 = funcDecl$$18.type;
          accessorSym.setter = v5305.symbol;
        }
      }
      return accessorSym;
    }
    function v929(funcDecl$$17, container$$12, scope$$22, overloadGroupSym, addToScope) {
      var v14621 = funcDecl$$17.fncFlags;
      var v23504 = TypeScript$$23.FncFlags;
      var v20071 = v23504.Exported;
      var v23505 = TypeScript$$23.FncFlags;
      var v20072 = v23505.ClassPropertyMethodExported;
      var v14622 = v20071 | v20072;
      var v5308 = TypeScript$$23.hasFlag(v14621, v14622);
      var v14624 = !v5308;
      if (v14624) {
        var v14623 = this.gloMod;
        v5308 = container$$12 == v14623;
      }
      var isExported$$1 = v5308;
      var v5309 = funcDecl$$17.fncFlags;
      var v14625 = TypeScript$$23.FncFlags;
      var v5310 = v14625.Static;
      var isStatic$$6 = TypeScript$$23.hasFlag(v5309, v5310);
      var v5311 = funcDecl$$17.fncFlags;
      var v14626 = TypeScript$$23.FncFlags;
      var v5312 = v14626.Private;
      var isPrivate = TypeScript$$23.hasFlag(v5311, v5312);
      var v5313 = funcDecl$$17.fncFlags;
      var v14627 = TypeScript$$23.FncFlags;
      var v5314 = v14627.Definition;
      var isDefinition = TypeScript$$23.hasFlag(v5313, v5314);
      var v5315 = funcDecl$$17.fncFlags;
      var v14628 = TypeScript$$23.FncFlags;
      var v5316 = v14628.Ambient;
      var isAmbient$$4 = TypeScript$$23.hasFlag(v5315, v5316);
      var v5317 = funcDecl$$17.isConstructMember();
      var v14629 = !v5317;
      if (v14629) {
        v5317 = funcDecl$$17.isConstructor;
      }
      var isConstructor$$2 = v5317;
      var v5318 = this.gloMod;
      var isGlobal = container$$12 == v5318;
      var v5319 = TypeScript$$23.Signature;
      var signature$$3 = new v5319;
      var v5320 = funcDecl$$17.fncFlags;
      var v14630 = TypeScript$$23.FncFlags;
      var v5321 = v14630.IsFunctionExpression;
      var isLambda$$2 = v5320 & v5321;
      var v14631 = funcDecl$$17.returnTypeAnnotation;
      var v20073 = !v14631;
      if (v20073) {
        v14631 = isDefinition;
      }
      var v5325 = v14631;
      if (v5325) {
        var v5322 = funcDecl$$17.returnTypeAnnotation;
        var v26617 = TypeScript$$23.getTypeLink(v5322, this, false);
        signature$$3.returnType = v26617;
      } else {
        var v5323 = TypeScript$$23.TypeLink;
        var v26618 = new v5323;
        signature$$3.returnType = v26618;
        var v5324 = signature$$3.returnType;
        v5324.type = this.anyType;
      }
      signature$$3.hasVariableArgList = funcDecl$$17.variableArgList;
      var sigData = this.getParameterList(funcDecl$$17, container$$12);
      signature$$3.parameters = sigData.parameters;
      signature$$3.nonOptionalParameterCount = sigData.nonOptionalParameterCount;
      funcDecl$$17.signature = signature$$3;
      signature$$3.declAST = funcDecl$$17;
      var v20074 = overloadGroupSym;
      if (v20074) {
        v20074 = overloadGroupSym.getType();
      }
      var v14632 = v20074;
      if (v14632) {
        var v20075 = overloadGroupSym.isAccessor();
        v14632 = !v20075;
      }
      var v5326 = v14632;
      if (v5326) {
        var v14633 = funcDecl$$17.isSignature();
        var v20077 = !v14633;
        if (v20077) {
          var v23506 = overloadGroupSym.flags;
          var v25150 = TypeScript$$23.SymbolFlags;
          var v23507 = v25150.Ambient;
          var v20076 = TypeScript$$23.hasFlag(v23506, v23507);
          v14633 = isAmbient$$4 == v20076;
        }
        v5326 = v14633;
      }
      var useOverloadGroupSym = v5326;
      var v14634 = useOverloadGroupSym;
      if (v14634) {
        var v23508 = overloadGroupSym.flags;
        var v25151 = TypeScript$$23.SymbolFlags;
        var v23509 = v25151.Private;
        var v20078 = TypeScript$$23.hasFlag(v23508, v23509);
        v14634 = isPrivate != v20078;
      }
      var v5328 = v14634;
      if (v5328) {
        var v5327 = this.errorReporter;
        v5327.simpleError(funcDecl$$17, "Public/Private visibility of overloads does not agree");
      }
      var v5329;
      if (useOverloadGroupSym) {
        v5329 = overloadGroupSym.getType();
      } else {
        var v14635 = TypeScript$$23.Type;
        v5329 = new v14635;
      }
      var groupType = v5329;
      if (isConstructor$$2) {
        var v14636 = groupType.construct;
        var v5331 = v14636 == null;
        if (v5331) {
          var v5330 = TypeScript$$23.SignatureGroup;
          var v26619 = new v5330;
          groupType.construct = v26619;
        }
        var v5332 = groupType.construct;
        v5332.addSignature(signature$$3);
        var v5333 = groupType.construct;
        var v14637 = funcDecl$$17.isSignature();
        v5333.hasImplementation = !v14637;
        var v14638 = groupType.construct;
        var v5334 = v14638.hasImplementation;
        if (v5334) {
          groupType.setHasImplementation();
        }
      } else {
        var v5346 = funcDecl$$17.isIndexerMember();
        if (v5346) {
          var v14639 = groupType.index;
          var v5337 = v14639 == null;
          if (v5337) {
            var v5335 = TypeScript$$23.SignatureGroup;
            var v26620 = new v5335;
            groupType.index = v26620;
            var v5336 = groupType.index;
            var v20079 = v5336.flags;
            var v23510 = TypeScript$$23.SignatureFlags;
            var v20080 = v23510.IsIndexer;
            v5336.flags = v20079 | v20080;
          }
          var v5338 = groupType.index;
          v5338.addSignature(signature$$3);
          var v5339 = groupType.index;
          var v14640 = funcDecl$$17.isSignature();
          v5339.hasImplementation = !v14640;
          var v14641 = groupType.index;
          var v5340 = v14641.hasImplementation;
          if (v5340) {
            groupType.setHasImplementation();
          }
        } else {
          var v14642 = groupType.call;
          var v5342 = v14642 == null;
          if (v5342) {
            var v5341 = TypeScript$$23.SignatureGroup;
            var v26621 = new v5341;
            groupType.call = v26621;
          }
          var v5343 = groupType.call;
          v5343.addSignature(signature$$3);
          var v5344 = groupType.call;
          var v14643 = funcDecl$$17.isSignature();
          v5344.hasImplementation = !v14643;
          var v14644 = groupType.call;
          var v5345 = v14644.hasImplementation;
          if (v5345) {
            groupType.setHasImplementation();
          }
        }
      }
      var instanceType$$3 = groupType.instanceType;
      var funcName$$1 = null;
      var usedHint = false;
      var v14645 = funcDecl$$17.name;
      if (v14645) {
        var v23511 = funcDecl$$17.name;
        var v20081 = v23511.isMissing();
        v14645 = !v20081;
      }
      var v5349 = v14645;
      if (v5349) {
        var v5347 = funcDecl$$17.name;
        funcName$$1 = v5347.text;
      } else {
        var v5348 = funcDecl$$17.hint;
        if (v5348) {
          funcName$$1 = funcDecl$$17.hint;
          usedHint = true;
        }
      }
      var v14646 = groupType.symbol;
      var v5357 = v14646 == null;
      if (v5357) {
        var v5350 = TypeScript$$23.TypeSymbol;
        var v14647;
        if (funcName$$1) {
          v14647 = funcName$$1;
        } else {
          v14647 = this.anon;
        }
        var v5351 = v14647;
        var v5352 = funcDecl$$17.minChar;
        var v14648 = funcDecl$$17.limChar;
        var v14649 = funcDecl$$17.minChar;
        var v5353 = v14648 - v14649;
        var v14650 = this.locationInfo;
        var v5354 = v14650.unitIndex;
        var v26622 = new v5350(v5351, v5352, v5353, v5354, groupType);
        groupType.symbol = v26622;
        var v5356 = !useOverloadGroupSym;
        if (v5356) {
          var v5355 = groupType.symbol;
          v5355.declAST = funcDecl$$17;
        }
      }
      if (isStatic$$6) {
        var v5358 = groupType.symbol;
        var v20082 = v5358.flags;
        var v23512 = TypeScript$$23.SymbolFlags;
        var v20083 = v23512.Static;
        v5358.flags = v20082 | v20083;
      }
      if (isAmbient$$4) {
        var v5359 = groupType.symbol;
        var v20084 = v5359.flags;
        var v23513 = TypeScript$$23.SymbolFlags;
        var v20085 = v23513.Ambient;
        v5359.flags = v20084 | v20085;
      }
      if (isPrivate) {
        var v5360 = groupType.symbol;
        var v20086 = v5360.flags;
        var v23514 = TypeScript$$23.SymbolFlags;
        var v20087 = v23514.Private;
        v5360.flags = v20086 | v20087;
      }
      var v5361 = groupType.symbol;
      var v26623 = funcDecl$$17.isMethod();
      v5361.isMethod = v26623;
      var v14651 = groupType.symbol;
      var v5363 = v14651.isMethod;
      if (v5363) {
        var v5362 = groupType.symbol;
        var v20088 = v5362.flags;
        var v23515 = TypeScript$$23.SymbolFlags;
        var v20089 = v23515.Property;
        v5362.flags = v20088 | v20089;
      }
      funcDecl$$17.type = groupType;
      var v5377 = !isConstructor$$2;
      if (v5377) {
        var v23516 = funcName$$1;
        if (v23516) {
          v23516 = !isLambda$$2;
        }
        var v20090 = v23516;
        if (v20090) {
          var v23517 = funcDecl$$17.isAccessor();
          v20090 = !v23517;
        }
        var v14652 = v20090;
        if (v14652) {
          v14652 = !usedHint;
        }
        var v5376 = v14652;
        if (v5376) {
          if (addToScope) {
            var v14653 = funcDecl$$17.isMethod();
            if (v14653) {
              v14653 = isStatic$$6;
            }
            var v5371 = v14653;
            if (v5371) {
              var v25152 = container$$12.type;
              var v23518 = v25152.members;
              var v20091 = v23518.publicMembers;
              var v20092 = groupType.symbol;
              var v14654 = v20091.add(funcName$$1, v20092);
              var v5365 = !v14654;
              if (v5365) {
                var v5364 = this.errorReporter;
                v5364.duplicateIdentifier(funcDecl$$17, funcName$$1);
              }
              var v5366 = groupType.symbol;
              v5366.container = container$$12;
            } else {
              var v14655 = overloadGroupSym == null;
              var v20094 = !v14655;
              if (v20094) {
                var v23519 = overloadGroupSym.declAST;
                if (v23519) {
                  var v25839 = overloadGroupSym.declAST;
                  var v25153 = v25839.isOverload;
                  v23519 = !v25153;
                }
                var v20093 = v23519;
                if (v20093) {
                  v20093 = container$$12.isType();
                }
                v14655 = v20093;
              }
              var v5370 = v14655;
              if (v5370) {
                var v5367 = groupType.symbol;
                var v5368 = this.errorReporter;
                var v14656 = !isPrivate;
                if (v14656) {
                  var v20095 = isExported$$1 || isStatic$$6;
                  var v23520 = !v20095;
                  if (v23520) {
                    v20095 = isGlobal;
                  }
                  v14656 = v20095;
                }
                var v5369 = v14656;
                scope$$22.enter(container$$12, funcDecl$$17, v5367, v5368, v5369, false, isAmbient$$4);
              }
            }
          } else {
            var v14657 = funcDecl$$17.isSpecialFn();
            var v5373 = !v14657;
            if (v5373) {
              var v5372 = groupType.symbol;
              v5372.container = container$$12;
            }
          }
        } else {
          var v14658 = funcDecl$$17.isSpecialFn();
          var v5375 = !v14658;
          if (v5375) {
            var v5374 = groupType.symbol;
            v5374.container = container$$12;
          }
        }
      }
      if (useOverloadGroupSym) {
        var v5378;
        if (overloadGroupSym) {
          v5378 = overloadGroupSym.getType();
        } else {
          v5378 = null;
        }
        var overloadGroupType = v5378;
        var classType$$3 = groupType;
        var v5399 = classType$$3 != overloadGroupType;
        if (v5399) {
          var v14659 = classType$$3.construct;
          var v5384 = v14659 == null;
          if (v5384) {
            var v14660 = overloadGroupType;
            if (v14660) {
              v14660 = overloadGroupType.construct;
            }
            var v5380 = v14660;
            if (v5380) {
              classType$$3.construct = overloadGroupType.construct;
            } else {
              var v5379 = TypeScript$$23.SignatureGroup;
              var v26624 = new v5379;
              classType$$3.construct = v26624;
            }
          } else {
            if (overloadGroupType) {
              var v5383 = overloadGroupType.construct;
              if (v5383) {
                var v14661 = classType$$3.construct;
                var v5381 = v14661.signatures;
                var v14662 = overloadGroupType.construct;
                var v5382 = v14662.signatures;
                v5381.concat(v5382);
              }
            }
          }
          if (overloadGroupType) {
            var v14663 = classType$$3.call;
            var v5388 = v14663 == null;
            if (v5388) {
              classType$$3.call = overloadGroupType.call;
            } else {
              var v5387 = overloadGroupType.call;
              if (v5387) {
                var v14664 = classType$$3.call;
                var v5385 = v14664.signatures;
                var v14665 = overloadGroupType.call;
                var v5386 = v14665.signatures;
                v5385.concat(v5386);
              }
            }
            var v5394 = !isStatic$$6;
            if (v5394) {
              var v14666 = classType$$3.instanceType;
              var v5389 = v14666 == null;
              if (v5389) {
                classType$$3.instanceType = overloadGroupType.instanceType;
              }
              instanceType$$3 = classType$$3.instanceType;
              if (instanceType$$3) {
                var v14667 = instanceType$$3.call;
                var v5393 = v14667 == null;
                if (v5393) {
                  instanceType$$3.call = overloadGroupType.call;
                } else {
                  var v5392 = overloadGroupType.call;
                  if (v5392) {
                    var v14668 = instanceType$$3.call;
                    var v5390 = v14668.signatures;
                    var v14669 = overloadGroupType.call;
                    var v5391 = v14669.signatures;
                    v5390.concat(v5391);
                  }
                }
              }
            }
            var v14670 = classType$$3.index;
            var v5398 = v14670 == null;
            if (v5398) {
              classType$$3.index = overloadGroupType.index;
            } else {
              var v5397 = overloadGroupType.index;
              if (v5397) {
                var v14671 = classType$$3.index;
                var v5395 = v14671.signatures;
                var v14672 = overloadGroupType.index;
                var v5396 = v14672.signatures;
                v5395.concat(v5396);
              }
            }
          }
        }
      }
      return signature$$3;
    }
    function v928(funcDecl$$16, container$$11) {
      var args$$11 = funcDecl$$16.arguments;
      var parameterTable = null;
      var parameterBuilder = null;
      var v5400 = args$$11.members;
      var len$$25 = v5400.length;
      var nonOptionalParams = 0;
      var result$$27 = [];
      var v5416 = len$$25 > 0;
      if (v5416) {
        var v5401 = TypeScript$$23.ScopedMembers;
        var v14673 = TypeScript$$23.DualStringHashTable;
        var v20096 = TypeScript$$23.StringHashTable;
        var v14674 = new v20096;
        var v20097 = TypeScript$$23.StringHashTable;
        var v14675 = new v20097;
        var v5402 = new v14673(v14674, v14675);
        parameterTable = new v5401(v5402);
        var v5403 = TypeScript$$23.SymbolScopeBuilder;
        parameterBuilder = new v5403(parameterTable, null, null, null, null, container$$11);
        var i$$75 = 0;
        var v5415 = i$$75 < len$$25;
        for (;v5415;) {
          var v5404 = args$$11.members;
          var parameter$$1 = v5404[i$$75];
          var v5405 = TypeScript$$23.ValueLocation;
          var paramDef$$2 = new v5405;
          var v5406 = TypeScript$$23.ParameterSymbol;
          var v14676 = parameter$$1.id;
          var v5407 = v14676.text;
          var v5408 = parameter$$1.minChar;
          var v14677 = this.locationInfo;
          var v5409 = v14677.unitIndex;
          var parameterSymbol = new v5406(v5407, v5408, v5409, paramDef$$2);
          parameterSymbol.declAST = parameter$$1;
          parameterSymbol.funcDecl = funcDecl$$16;
          var v5410 = parameter$$1.id;
          v5410.sym = parameterSymbol;
          parameter$$1.sym = parameterSymbol;
          paramDef$$2.symbol = parameterSymbol;
          var v5411 = parameter$$1.typeExpr;
          var v26625 = TypeScript$$23.getTypeLink(v5411, this, false);
          paramDef$$2.typeLink = v26625;
          var v5412 = this.errorReporter;
          parameterBuilder.enter(null, parameter$$1, parameterSymbol, v5412, true, false, false);
          var v5413 = result$$27.length;
          result$$27[v5413] = parameterSymbol;
          var v14678 = parameter$$1.isOptionalArg();
          var v5414 = !v14678;
          if (v5414) {
            nonOptionalParams++;
          }
          i$$75++;
          v5415 = i$$75 < len$$25;
        }
      }
      return{parameters:result$$27, nonOptionalParameterCount:nonOptionalParams};
    }
    function v927(type$$40) {
      var v14679 = type$$40.arrayCache;
      var v5420 = v14679 == null;
      if (v5420) {
        var v26626 = new ArrayCache;
        type$$40.arrayCache = v26626;
        var v5417 = type$$40.arrayCache;
        var v14680 = TypeScript$$23.Type;
        var v26627 = new v14680;
        v5417.arrayType = v26627;
        var v14681 = type$$40.arrayCache;
        var v5418 = v14681.arrayType;
        v5418.elementType = type$$40;
        var v14682 = type$$40.arrayCache;
        var v5419 = v14682.arrayType;
        v5419.symbol = type$$40.symbol;
      }
      var v5421 = type$$40.arrayCache;
      return v5421.arrayType;
    }
    function v926(ast$$63) {
      var v14683 = ast$$63.nodeType;
      var v20098 = TypeScript$$23.NodeType;
      var v14684 = v20098.Script;
      var v5422 = v14683 == v14684;
      if (v5422) {
        var script$$14 = ast$$63;
        this.locationInfo = script$$14.locationInfo;
      }
      var v5423 = TypeScript$$23.ScopeChain;
      var v5424 = this.gloMod;
      var v5425 = this.globalScope;
      var globalChain = new v5423(v5424, null, v5425);
      var v5426 = TypeScript$$23.TypeCollectionContext;
      var context$$49 = new v5426(globalChain, this);
      var v5427 = TypeScript$$23.getAstWalkerFactory();
      var v5428 = TypeScript$$23.preCollectTypes;
      var v5429 = TypeScript$$23.postCollectTypes;
      v5427.walk(ast$$63, v5428, v5429, null, context$$49);
      return;
    }
    function v925() {
      var i$$74 = 0;
      var v20099 = this.provisionalStartedTypecheckObjects;
      var v14685 = v20099.length;
      var v5432 = i$$74 < v14685;
      for (;v5432;) {
        var v23521 = this.provisionalStartedTypecheckObjects;
        var v20100 = v23521[i$$74];
        var v14686 = v20100.typeCheckStatus;
        var v20101 = this.typingContextStack;
        var v14687 = v20101.getContextID();
        var v5431 = v14686 >= v14687;
        if (v5431) {
          var v14688 = this.provisionalStartedTypecheckObjects;
          var v5430 = v14688[i$$74];
          var v14689 = TypeScript$$23.TypeCheckStatus;
          v5430.typeCheckStatus = v14689.NotStarted;
        }
        i$$74++;
        var v20102 = this.provisionalStartedTypecheckObjects;
        var v14690 = v20102.length;
        v5432 = i$$74 < v14690;
      }
      this.provisionalStartedTypecheckObjects = [];
      return;
    }
    function v924(pto) {
      var v5435 = this.inProvisionalTypecheckMode();
      if (v5435) {
        var v5433 = this.provisionalStartedTypecheckObjects;
        var v14691 = this.provisionalStartedTypecheckObjects;
        var v5434 = v14691.length;
        v5433[v5434] = pto;
      }
      return;
    }
    function v923(status) {
      var v20103 = TypeScript$$23.TypeCheckStatus;
      var v14692 = v20103.Finished;
      var v5436 = status == v14692;
      var v14694 = !v5436;
      if (v14694) {
        var v14693 = this.inProvisionalTypecheckMode();
        if (v14693) {
          var v23522 = this.typingContextStack;
          var v20104 = v23522.getContextID();
          v14693 = status == v20104;
        }
        v5436 = v14693;
      }
      return v5436;
    }
    function v922() {
      var v5438 = this.inProvisionalTypecheckMode();
      if (v5438) {
        var v5437 = this.typingContextStack;
        return v5437.getContextID();
      }
      var v5439 = TypeScript$$23.TypeCheckStatus;
      return v5439.Finished;
    }
    function v921() {
      var v5440 = this.typingContextStack;
      return v5440.isProvisional();
    }
    function v920() {
      return this.currentContextualTypeContext;
    }
    function v919() {
      var v5441 = this.currentContextualTypeContext;
      if (v5441) {
        var v14695 = this.currentContextualTypeContext;
        v5441 = v14695.contextualType;
      }
      return v5441;
    }
    function v918() {
      this.currentContextualTypeContext = null;
      var v5442 = this.errorReporter;
      v5442.pushToErrorSink = false;
      return;
    }
    function v917() {
      var v5443 = this.typingContextStack;
      var v26628 = v5443.getContextualType();
      this.currentContextualTypeContext = v26628;
      return;
    }
    function v916(contextType, provisional$$3, condition, ast$$62) {
      if (condition) {
        var v20105 = this.typingContextStack;
        var v14696 = v20105.isProvisional();
        var v20106 = !v14696;
        if (v20106) {
          v14696 = provisional$$3;
        }
        var v5444 = v14696;
        this.setContextualType(contextType, v5444);
      }
      var v5445 = this.typeFlow;
      v5445.typeCheck(ast$$62);
      if (condition) {
        this.unsetContextualType();
      }
      return;
    }
    function v915() {
      var v20107 = this.typingContextStack;
      var v14697 = v20107.getContextualType();
      var v5447 = !v14697;
      if (v5447) {
        var v5446 = this.typingContextStack;
        v5446.hadProvisionalErrors = false;
      }
      return;
    }
    function v914() {
      var v5448 = this.typingContextStack;
      return v5448.hadProvisionalErrors;
    }
    function v913() {
      var v5449 = this.typingContextStack;
      var lastTC = v5449.popContextualType();
      var v5450 = this.typingContextStack;
      var v26629 = v5450.getContextualType();
      this.currentContextualTypeContext = v26629;
      return lastTC;
    }
    function v912(type$$39, provisional$$2) {
      var v5451 = this.typingContextStack;
      v5451.pushContextualType(type$$39, provisional$$2);
      var v5452 = this.typingContextStack;
      var v26630 = v5452.getContextualType();
      this.currentContextualTypeContext = v26630;
      return;
    }
    function v911(style) {
      this.styleSettings = style;
      return;
    }
    function TypeChecker$$1(persistentState) {
      this.persistentState = persistentState;
      this.errorReporter = null;
      this.checkControlFlow = false;
      this.printControlFlowGraph = false;
      this.checkControlFlowUseDef = false;
      this.styleSettings = null;
      this.units = null;
      this.anon = "_anonymous";
      this.locationInfo = null;
      this.typeFlow = null;
      this.currentCompareA = null;
      this.currentCompareB = null;
      this.currentModDecl = null;
      this.inBind = false;
      this.inWith = false;
      this.errorsOnWith = true;
      this.currentContextualTypeContext = null;
      this.resolvingBases = false;
      this.canCallDefinitionSignature = false;
      this.assignableCache = {};
      this.subtypeCache = {};
      this.identicalCache = {};
      this.provisionalStartedTypecheckObjects = [];
      this.mustCaptureGlobalThis = false;
      var v5453 = this.persistentState;
      this.voidType = v5453.voidType;
      var v5454 = this.persistentState;
      this.booleanType = v5454.booleanType;
      var v5455 = this.persistentState;
      this.numberType = v5455.doubleType;
      var v5456 = this.persistentState;
      this.stringType = v5456.stringType;
      var v5457 = this.persistentState;
      this.anyType = v5457.anyType;
      var v5458 = this.persistentState;
      this.nullType = v5458.nullType;
      var v5459 = this.persistentState;
      this.undefinedType = v5459.undefinedType;
      var v5460 = this.persistentState;
      this.globals = v5460.dualGlobalValues;
      var v5461 = this.persistentState;
      this.globalTypes = v5461.dualGlobalTypes;
      var v5462 = this.persistentState;
      this.ambientGlobals = v5462.dualAmbientGlobalValues;
      var v5463 = this.persistentState;
      this.ambientGlobalTypes = v5463.dualAmbientGlobalTypes;
      var v5464 = this.persistentState;
      this.gloModType = v5464.mod;
      var v5465 = this.persistentState;
      this.gloMod = v5465.gloMod;
      var v5466 = this.persistentState;
      this.wildElm = v5466.wildElm;
      var v5467 = this.persistentState;
      this.globalScope = v5467.globalScope;
      var v26631 = new ContextualTypingContextStack(this);
      this.typingContextStack = v26631;
      return;
    }
    var v5468 = TypeChecker$$1.prototype;
    v5468.setStyleOptions = v911;
    var v5469 = TypeChecker$$1.prototype;
    v5469.setContextualType = v912;
    var v5470 = TypeChecker$$1.prototype;
    v5470.unsetContextualType = v913;
    var v5471 = TypeChecker$$1.prototype;
    v5471.hadProvisionalErrors = v914;
    var v5472 = TypeChecker$$1.prototype;
    v5472.resetProvisionalErrors = v915;
    var v5473 = TypeChecker$$1.prototype;
    v5473.typeCheckWithContextualType = v916;
    var v5474 = TypeChecker$$1.prototype;
    v5474.resetTargetType = v917;
    var v5475 = TypeChecker$$1.prototype;
    v5475.killCurrentContextualType = v918;
    var v5476 = TypeChecker$$1.prototype;
    v5476.hasTargetType = v919;
    var v5477 = TypeChecker$$1.prototype;
    v5477.getTargetTypeContext = v920;
    var v5478 = TypeChecker$$1.prototype;
    v5478.inProvisionalTypecheckMode = v921;
    var v5479 = TypeChecker$$1.prototype;
    v5479.getTypeCheckFinishedStatus = v922;
    var v5480 = TypeChecker$$1.prototype;
    v5480.typeStatusIsFinished = v923;
    var v5481 = TypeChecker$$1.prototype;
    v5481.addStartedPTO = v924;
    var v5482 = TypeChecker$$1.prototype;
    v5482.cleanStartedPTO = v925;
    var v5483 = TypeChecker$$1.prototype;
    v5483.collectTypes = v926;
    var v5484 = TypeChecker$$1.prototype;
    v5484.makeArrayType = v927;
    var v5485 = TypeChecker$$1.prototype;
    v5485.getParameterList = v928;
    var v5486 = TypeChecker$$1.prototype;
    v5486.createFunctionSignature = v929;
    var v5487 = TypeChecker$$1.prototype;
    v5487.createAccessorSymbol = v930;
    var v5488 = TypeChecker$$1.prototype;
    v5488.addBases = v931;
    var v5489 = TypeChecker$$1.prototype;
    v5489.scopeOf = v932;
    var v5490 = TypeChecker$$1.prototype;
    v5490.lookupMemberTypeSymbol = v933;
    var v5491 = TypeChecker$$1.prototype;
    v5491.findSymbolForDynamicModule = v934;
    var v5492 = TypeChecker$$1.prototype;
    v5492.resolveTypeMember = v936;
    var v5493 = TypeChecker$$1.prototype;
    v5493.resolveFuncDecl = v937;
    var v5494 = TypeChecker$$1.prototype;
    v5494.resolveVarDecl = v938;
    var v5495 = TypeChecker$$1.prototype;
    v5495.resolveTypeLink = v939;
    var v5496 = TypeChecker$$1.prototype;
    v5496.resolveBaseTypeLink = v940;
    var v5497 = TypeChecker$$1.prototype;
    v5497.findMostApplicableSignature = v944;
    var v5498 = TypeChecker$$1.prototype;
    v5498.getApplicableSignatures = v945;
    var v5499 = TypeChecker$$1.prototype;
    v5499.canContextuallyTypeFunction = v946;
    var v5500 = TypeChecker$$1.prototype;
    v5500.canContextuallyTypeObjectLiteral = v947;
    var v5501 = TypeChecker$$1.prototype;
    v5501.widenType = v948;
    var v5502 = TypeChecker$$1.prototype;
    v5502.isNullOrUndefinedType = v949;
    var v5503 = TypeChecker$$1.prototype;
    v5503.findBestCommonType = v950;
    var v5504 = TypeChecker$$1.prototype;
    v5504.typesAreIdentical = v951;
    var v5505 = TypeChecker$$1.prototype;
    v5505.signatureGroupsAreIdentical = v952;
    var v5506 = TypeChecker$$1.prototype;
    v5506.signaturesAreIdentical = v953;
    var v5507 = TypeChecker$$1.prototype;
    v5507.sourceIsSubtypeOfTarget = v954;
    var v5508 = TypeChecker$$1.prototype;
    v5508.signatureGroupIsSubtypeOfTarget = v955;
    var v5509 = TypeChecker$$1.prototype;
    v5509.signatureIsSubtypeOfTarget = v956;
    var v5510 = TypeChecker$$1.prototype;
    v5510.sourceIsAssignableToTarget = v957;
    var v5511 = TypeChecker$$1.prototype;
    v5511.signatureGroupIsAssignableToTarget = v958;
    var v5512 = TypeChecker$$1.prototype;
    v5512.signatureIsAssignableToTarget = v959;
    var v5513 = TypeChecker$$1.prototype;
    v5513.sourceIsRelatableToTarget = v960;
    var v5514 = TypeChecker$$1.prototype;
    v5514.signatureGroupIsRelatableToTarget = v961;
    var v5515 = TypeChecker$$1.prototype;
    v5515.signatureIsRelatableToTarget = v962;
    return TypeChecker$$1;
  }
  function v910() {
    function v909() {
      var v5516;
      var v23523 = this.contextStack;
      var v20108 = v23523.length;
      var v14699 = !v20108;
      if (v14699) {
        v5516 = false;
      } else {
        var v20109 = this.contextStack;
        var v25154 = this.contextStack;
        var v23524 = v25154.length;
        var v20110 = v23524 - 1;
        var v14698 = v20109[v20110];
        v5516 = v14698.provisional;
      }
      return v5516;
    }
    function v908() {
      var v5517;
      var v23525 = this.contextStack;
      var v20111 = v23525.length;
      var v14702 = !v20111;
      if (v14702) {
        var v14700 = TypeScript$$23.TypeCheckStatus;
        v5517 = v14700.Finished;
      } else {
        var v20112 = this.contextStack;
        var v25155 = this.contextStack;
        var v23526 = v25155.length;
        var v20113 = v23526 - 1;
        var v14701 = v20112[v20113];
        v5517 = v14701.contextID;
      }
      return v5517;
    }
    function v907() {
      var v5518;
      var v23527 = this.contextStack;
      var v20114 = v23527.length;
      var v14705 = !v20114;
      if (v14705) {
        v5518 = null;
      } else {
        var v14703 = this.contextStack;
        var v23528 = this.contextStack;
        var v20115 = v23528.length;
        var v14704 = v20115 - 1;
        v5518 = v14703[v14704];
      }
      return v5518;
    }
    function v906() {
      var v5519 = this.contextStack;
      var tc$$2 = v5519.pop();
      var v14706 = this.checker;
      var v5520 = v14706.errorReporter;
      var v26632 = this.isProvisional();
      v5520.pushToErrorSink = v26632;
      var v5521 = this.hadProvisionalErrors;
      var v14708 = !v5521;
      if (v14708) {
        var v14707 = tc$$2.provisional;
        if (v14707) {
          var v25156 = this.checker;
          var v23529 = v25156.errorReporter;
          var v20116 = v23529.errorSink;
          v14707 = v20116.length;
        }
        v5521 = v14707;
      }
      this.hadProvisionalErrors = v5521;
      var v14709 = this.checker;
      var v5522 = v14709.errorReporter;
      v5522.freeCapturedErrors();
      return tc$$2;
    }
    function v905(type$$38, provisional$$1) {
      var v5523 = this.contextStack;
      var v14710 = ContextualTypingContextStack$$1.contextID;
      var v23530 = ContextualTypingContextStack$$1.contextID;
      ContextualTypingContextStack$$1.contextID = v23530 + 1;
      var v5524 = new ContextualTypeContext(type$$38, provisional$$1, v14710);
      v5523.push(v5524);
      var v14711 = this.checker;
      var v5525 = v14711.errorReporter;
      v5525.pushToErrorSink = provisional$$1;
      return;
    }
    function ContextualTypingContextStack$$1(checker$$16) {
      this.checker = checker$$16;
      this.contextStack = [];
      this.hadProvisionalErrors = false;
      return;
    }
    var v14712 = TypeScript$$23.TypeCheckStatus;
    var v5526 = v14712.Finished;
    ContextualTypingContextStack$$1.contextID = v5526 + 1;
    var v5527 = ContextualTypingContextStack$$1.prototype;
    v5527.pushContextualType = v905;
    var v5528 = ContextualTypingContextStack$$1.prototype;
    v5528.popContextualType = v906;
    var v5529 = ContextualTypingContextStack$$1.prototype;
    v5529.getContextualType = v907;
    var v5530 = ContextualTypingContextStack$$1.prototype;
    v5530.getContextID = v908;
    var v5531 = ContextualTypingContextStack$$1.prototype;
    v5531.isProvisional = v909;
    return ContextualTypingContextStack$$1;
  }
  function v904() {
    function ContextualTypeContext$$1(contextualType, provisional, contextID) {
      this.contextualType = contextualType;
      this.provisional = provisional;
      this.contextID = contextID;
      this.targetSig = null;
      this.targetThis = null;
      this.targetAccessorType = null;
      return;
    }
    return ContextualTypeContext$$1;
  }
  function v903() {
    function v902(name$$80, type$$37) {
      var v5532 = TypeScript$$23.ValueLocation;
      var valueLocation = new v5532;
      var v5533 = TypeScript$$23.TypeLink;
      var v26633 = new v5533;
      valueLocation.typeLink = v26633;
      var v5534 = TypeScript$$23.VariableSymbol;
      var sym$$28 = new v5534(name$$80, 0, -1, valueLocation);
      sym$$28.setType(type$$37);
      var v5535 = TypeScript$$23.TypeCheckStatus;
      sym$$28.typeCheckStatus = v5535.Finished;
      sym$$28.container = this.gloMod;
      var v5536 = this.importedGlobalsTable;
      v5536.addPublicMember(name$$80, sym$$28);
      return;
    }
    function v901() {
      var v5537 = TypeScript$$23.StringHashTable;
      var v26634 = new v5537;
      this.globals = v26634;
      var v5538 = TypeScript$$23.StringHashTable;
      var v26635 = new v5538;
      this.globalTypes = v26635;
      var v5539 = TypeScript$$23.StringHashTable;
      var v26636 = new v5539;
      this.ambientGlobals = v26636;
      var v5540 = TypeScript$$23.StringHashTable;
      var v26637 = new v5540;
      this.ambientGlobalTypes = v26637;
      var v5541 = this.globalTypes;
      var v20117 = this.voidType;
      var v14713 = v20117.symbol;
      var v5542 = v14713.name;
      var v14714 = this.voidType;
      var v5543 = v14714.symbol;
      v5541.add(v5542, v5543);
      var v5544 = this.globalTypes;
      var v20118 = this.booleanType;
      var v14715 = v20118.symbol;
      var v5545 = v14715.name;
      var v14716 = this.booleanType;
      var v5546 = v14716.symbol;
      v5544.add(v5545, v5546);
      var v5547 = this.globalTypes;
      var v20119 = this.doubleType;
      var v14717 = v20119.symbol;
      var v5548 = v14717.name;
      var v14718 = this.doubleType;
      var v5549 = v14718.symbol;
      v5547.add(v5548, v5549);
      var v5550 = this.globalTypes;
      var v14719 = this.doubleType;
      var v5551 = v14719.symbol;
      v5550.add("number", v5551);
      var v5552 = this.globalTypes;
      var v20120 = this.stringType;
      var v14720 = v20120.symbol;
      var v5553 = v14720.name;
      var v14721 = this.stringType;
      var v5554 = v14721.symbol;
      v5552.add(v5553, v5554);
      var v5555 = this.globalTypes;
      var v20121 = this.anyType;
      var v14722 = v20121.symbol;
      var v5556 = v14722.name;
      var v14723 = this.anyType;
      var v5557 = v14723.symbol;
      v5555.add(v5556, v5557);
      var v5558 = this.globalTypes;
      var v20122 = this.nullType;
      var v14724 = v20122.symbol;
      var v5559 = v14724.name;
      var v14725 = this.nullType;
      var v5560 = v14725.symbol;
      v5558.add(v5559, v5560);
      var v5561 = this.globalTypes;
      var v20123 = this.undefinedType;
      var v14726 = v20123.symbol;
      var v5562 = v14726.name;
      var v14727 = this.undefinedType;
      var v5563 = v14727.symbol;
      v5561.add(v5562, v5563);
      var v5564 = this.dualGlobalValues;
      v5564.secondaryTable = this.globals;
      var v5565 = this.dualGlobalTypes;
      v5565.secondaryTable = this.globalTypes;
      var v5566 = this.dualAmbientGlobalValues;
      v5566.secondaryTable = this.ambientGlobals;
      var v5567 = this.dualAmbientGlobalTypes;
      v5567.secondaryTable = this.ambientGlobalTypes;
      return;
    }
    function v900(mode$$7) {
      var v5568 = this.dualGlobalValues;
      var v14728 = this.dualGlobalTypes;
      var v20124 = this.dualAmbientGlobalValues;
      var v23531 = this.dualAmbientGlobalTypes;
      var v25157 = TypeCheckCollectionMode.Resident;
      this.residentTypeCheck = v5568.insertPrimary = v14728.insertPrimary = v20124.insertPrimary = v23531.insertPrimary = mode$$7 == v25157;
      return;
    }
    function v899(flags$$3, name$$79) {
      var v5569 = TypeScript$$23.Type;
      var primitive = new v5569;
      primitive.primitiveTypeClass = flags$$3;
      var v5570 = TypeScript$$23.TypeSymbol;
      var v5571 = name$$79.length;
      var symbol$$8 = new v5570(name$$79, -1, v5571, -1, primitive);
      var v5572 = TypeScript$$23.TypeCheckStatus;
      symbol$$8.typeCheckStatus = v5572.Finished;
      primitive.symbol = symbol$$8;
      var v5573 = this.importedGlobals;
      var v5574 = this.errorReporter;
      v5573.enter(null, null, symbol$$8, v5574, true, true, true);
      return primitive;
    }
    function PersistentGlobalTypeState$$1(errorReporter$$4) {
      this.errorReporter = errorReporter$$4;
      var v5575 = TypeScript$$23.ScopedMembers;
      var v14729 = TypeScript$$23.DualStringHashTable;
      var v20125 = TypeScript$$23.StringHashTable;
      var v14730 = new v20125;
      var v20126 = TypeScript$$23.StringHashTable;
      var v14731 = new v20126;
      var v5576 = new v14729(v14730, v14731);
      var v26638 = new v5575(v5576);
      this.importedGlobalsTable = v26638;
      var v5577 = TypeScript$$23.ScopedMembers;
      var v14732 = TypeScript$$23.DualStringHashTable;
      var v20127 = TypeScript$$23.StringHashTable;
      var v14733 = new v20127;
      var v20128 = TypeScript$$23.StringHashTable;
      var v14734 = new v20128;
      var v5578 = new v14732(v14733, v14734);
      var v26639 = new v5577(v5578);
      this.importedGlobalsTypeTable = v26639;
      this.globals = null;
      this.globalTypes = null;
      this.ambientGlobals = null;
      this.ambientGlobalTypes = null;
      var v5579 = TypeScript$$23.StringHashTable;
      var v26640 = new v5579;
      this.residentGlobalValues = v26640;
      var v5580 = TypeScript$$23.StringHashTable;
      var v26641 = new v5580;
      this.residentGlobalTypes = v26641;
      var v5581 = TypeScript$$23.StringHashTable;
      var v26642 = new v5581;
      this.residentGlobalAmbientValues = v26642;
      var v5582 = TypeScript$$23.StringHashTable;
      var v26643 = new v5582;
      this.residentGlobalAmbientTypes = v26643;
      this.residentTypeCheck = true;
      this.mod = null;
      this.gloMod = null;
      this.wildElm = null;
      var v5583 = TypeScript$$23.SymbolScopeBuilder;
      var v5584 = this.importedGlobalsTable;
      var v5585 = this.importedGlobalsTypeTable;
      var v26644 = new v5583(null, v5584, null, v5585, null, null);
      this.importedGlobals = v26644;
      var v5586 = TypeScript$$23.DualStringHashTable;
      var v5587 = this.residentGlobalValues;
      var v14735 = TypeScript$$23.StringHashTable;
      var v5588 = new v14735;
      var v26645 = new v5586(v5587, v5588);
      this.dualGlobalValues = v26645;
      var v5589 = TypeScript$$23.DualStringHashTable;
      var v5590 = this.residentGlobalTypes;
      var v14736 = TypeScript$$23.StringHashTable;
      var v5591 = new v14736;
      var v26646 = new v5589(v5590, v5591);
      this.dualGlobalTypes = v26646;
      var v5592 = TypeScript$$23.DualStringHashTable;
      var v5593 = this.residentGlobalAmbientValues;
      var v14737 = TypeScript$$23.StringHashTable;
      var v5594 = new v14737;
      var v26647 = new v5592(v5593, v5594);
      this.dualAmbientGlobalValues = v26647;
      var v5595 = TypeScript$$23.DualStringHashTable;
      var v5596 = this.residentGlobalAmbientTypes;
      var v14738 = TypeScript$$23.StringHashTable;
      var v5597 = new v14738;
      var v26648 = new v5595(v5596, v5597);
      this.dualAmbientGlobalTypes = v26648;
      var v5598 = TypeScript$$23.ScopedMembers;
      var v14739 = TypeScript$$23.DualStringHashTable;
      var v14740 = this.dualGlobalValues;
      var v20129 = TypeScript$$23.StringHashTable;
      var v14741 = new v20129;
      var v5599 = new v14739(v14740, v14741);
      var dualGlobalScopedMembers = new v5598(v5599);
      var v5600 = TypeScript$$23.ScopedMembers;
      var v14742 = TypeScript$$23.DualStringHashTable;
      var v14743 = this.dualAmbientGlobalValues;
      var v20130 = TypeScript$$23.StringHashTable;
      var v14744 = new v20130;
      var v5601 = new v14742(v14743, v14744);
      var dualGlobalScopedAmbientMembers = new v5600(v5601);
      var v5602 = TypeScript$$23.ScopedMembers;
      var v14745 = TypeScript$$23.DualStringHashTable;
      var v14746 = this.dualGlobalTypes;
      var v20131 = TypeScript$$23.StringHashTable;
      var v14747 = new v20131;
      var v5603 = new v14745(v14746, v14747);
      var dualGlobalScopedEnclosedTypes = new v5602(v5603);
      var v5604 = TypeScript$$23.ScopedMembers;
      var v14748 = TypeScript$$23.DualStringHashTable;
      var v14749 = this.dualAmbientGlobalTypes;
      var v20132 = TypeScript$$23.StringHashTable;
      var v14750 = new v20132;
      var v5605 = new v14748(v14749, v14750);
      var dualGlobalScopedAmbientEnclosedTypes = new v5604(v5605);
      var v5606 = TypeScript$$23.SymbolScopeBuilder;
      var v5607 = this.importedGlobals;
      var v26649 = new v5606(dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, v5607, null);
      this.globalScope = v26649;
      var v14751 = TypeScript$$23.Primitive;
      var v5608 = v14751.Void;
      var v26650 = this.enterPrimitive(v5608, "void");
      this.voidType = v26650;
      var v14752 = TypeScript$$23.Primitive;
      var v5609 = v14752.Boolean;
      var v26651 = this.enterPrimitive(v5609, "bool");
      this.booleanType = v26651;
      var v14753 = TypeScript$$23.Primitive;
      var v5610 = v14753.Double;
      var v26652 = this.enterPrimitive(v5610, "number");
      this.doubleType = v26652;
      var v14754 = this.importedGlobals;
      var v5611 = v14754.ambientEnclosedTypes;
      var v14755 = this.doubleType;
      var v5612 = v14755.symbol;
      v5611.addPublicMember("number", v5612);
      var v14756 = TypeScript$$23.Primitive;
      var v5613 = v14756.String;
      var v26653 = this.enterPrimitive(v5613, "string");
      this.stringType = v26653;
      var v14757 = TypeScript$$23.Primitive;
      var v5614 = v14757.Any;
      var v26654 = this.enterPrimitive(v5614, "any");
      this.anyType = v26654;
      var v14758 = TypeScript$$23.Primitive;
      var v5615 = v14758.Null;
      var v26655 = this.enterPrimitive(v5615, "null");
      this.nullType = v26655;
      var v14759 = TypeScript$$23.Primitive;
      var v5616 = v14759.Undefined;
      var v26656 = this.enterPrimitive(v5616, "undefined");
      this.undefinedType = v26656;
      var v5617 = TypeCheckCollectionMode.Resident;
      this.setCollectionMode(v5617);
      var v5618 = TypeScript$$23.TypeSymbol;
      var v14760 = TypeScript$$23.Type;
      var v5619 = new v14760;
      var v26657 = new v5618("_element", -1, 0, -1, v5619);
      this.wildElm = v26657;
      var v5620 = this.importedGlobalsTypeTable;
      var v14761 = this.wildElm;
      var v5621 = v14761.name;
      var v5622 = this.wildElm;
      v5620.addPublicMember(v5621, v5622);
      var v5623 = TypeScript$$23.ModuleType;
      var v26658 = new v5623(dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes);
      this.mod = v26658;
      var v5624 = this.mod;
      v5624.members = dualGlobalScopedMembers;
      var v5625 = this.mod;
      v5625.ambientMembers = dualGlobalScopedAmbientMembers;
      var v5626 = this.mod;
      v5626.containedScope = this.globalScope;
      var v5627 = TypeScript$$23.TypeSymbol;
      var v5628 = TypeScript$$23.globalId;
      var v5629 = this.mod;
      var v26659 = new v5627(v5628, -1, 0, -1, v5629);
      this.gloMod = v26659;
      var v14762 = this.mod;
      var v5630 = v14762.members;
      var v14763 = this.gloMod;
      var v5631 = v14763.name;
      var v5632 = this.gloMod;
      v5630.addPublicMember(v5631, v5632);
      var v5633 = this.undefinedType;
      this.defineGlobalValue("undefined", v5633);
      return;
    }
    var v5634 = PersistentGlobalTypeState$$1.prototype;
    v5634.enterPrimitive = v899;
    var v5635 = PersistentGlobalTypeState$$1.prototype;
    v5635.setCollectionMode = v900;
    var v5636 = PersistentGlobalTypeState$$1.prototype;
    v5636.refreshPersistentState = v901;
    var v5637 = PersistentGlobalTypeState$$1.prototype;
    v5637.defineGlobalValue = v902;
    return PersistentGlobalTypeState$$1;
  }
  function v898(TypeCheckCollectionMode$$1) {
    TypeCheckCollectionMode$$1._map = [];
    var v5638 = TypeCheckCollectionMode$$1._map;
    v5638[0] = "Resident";
    TypeCheckCollectionMode$$1.Resident = 0;
    var v5639 = TypeCheckCollectionMode$$1._map;
    v5639[1] = "Transient";
    TypeCheckCollectionMode$$1.Transient = 1;
    return;
  }
  function v897() {
    function v896(message$$18) {
      this.message = message$$18;
      return;
    }
    function v895(message$$17) {
      var v14764 = this.onlyCaptureFirstError;
      var v5641 = !v14764;
      if (v5641) {
        var v5640;
        var v14767 = this.message;
        if (v14767) {
          var v14765 = message$$17 + ":\n\t";
          var v14766 = this.message;
          v5640 = v14765 + v14766;
        } else {
          v5640 = message$$17;
        }
        this.message = v5640;
      } else {
        this.setMessage(message$$17);
      }
      return;
    }
    function TypeComparisonInfo$$1() {
      this.onlyCaptureFirstError = false;
      var v5642 = TypeScript$$23.TypeRelationshipFlags;
      this.flags = v5642.SuccessfulComparison;
      this.message = "";
      return;
    }
    var v5643 = TypeComparisonInfo$$1.prototype;
    v5643.addMessageToFront = v895;
    var v5644 = TypeComparisonInfo$$1.prototype;
    v5644.setMessage = v896;
    return TypeComparisonInfo$$1;
  }
  function v894() {
    function v893(arrInstType, checker$$15) {
      var v14768 = this.arrayBase;
      var v5647 = v14768 == null;
      if (v5647) {
        var v14769 = checker$$15.wildElm;
        var v5645 = v14769.type;
        var v14770 = this.arrayType;
        var v5646 = v14770.elementType;
        var v26660 = arrInstType.specializeType(v5645, v5646, checker$$15, true);
        this.arrayBase = v26660;
      }
      return this.arrayBase;
    }
    function ArrayCache$$1() {
      this.arrayBase = null;
      return;
    }
    var v5648 = ArrayCache$$1.prototype;
    v5648.specialize = v893;
    return ArrayCache$$1;
  }
  var ArrayCache = v894();
  TypeScript$$23.ArrayCache = ArrayCache;
  var TypeComparisonInfo = v897();
  TypeScript$$23.TypeComparisonInfo = TypeComparisonInfo;
  var v14771 = TypeScript$$23.TypeCheckCollectionMode;
  var v20133 = !v14771;
  if (v20133) {
    v14771 = TypeScript$$23.TypeCheckCollectionMode = {};
  }
  var v5649 = v14771;
  v898(v5649);
  var TypeCheckCollectionMode = TypeScript$$23.TypeCheckCollectionMode;
  var PersistentGlobalTypeState = v903();
  TypeScript$$23.PersistentGlobalTypeState = PersistentGlobalTypeState;
  var ContextualTypeContext = v904();
  TypeScript$$23.ContextualTypeContext = ContextualTypeContext;
  var ContextualTypingContextStack = v910();
  TypeScript$$23.ContextualTypingContextStack = ContextualTypingContextStack;
  var TypeChecker = v963();
  TypeScript$$23.TypeChecker = TypeChecker;
  return;
}
function v892(TypeScript$$22) {
  function v891(_super$$64) {
    function v890() {
      return TokenClass.RegExpLiteral;
    }
    function v889() {
      var v5650 = this.regex;
      return v5650.toString();
    }
    function RegularExpressionLiteralToken$$1(regex$$3) {
      var v5651 = TokenID.RegularExpressionLiteral;
      _super$$64.call(this, v5651);
      this.regex = regex$$3;
      return;
    }
    __extends(RegularExpressionLiteralToken$$1, _super$$64);
    var v5652 = RegularExpressionLiteralToken$$1.prototype;
    v5652.getText = v889;
    var v5653 = RegularExpressionLiteralToken$$1.prototype;
    v5653.classification = v890;
    return RegularExpressionLiteralToken$$1;
  }
  function v888(_super$$63) {
    function v887() {
      return TokenClass.Comment;
    }
    function v886() {
      return this.value;
    }
    function CommentToken$$1(tokenID, value$$39, isBlock, startPos$$2, line$$11, endsLine$$2) {
      _super$$63.call(this, tokenID);
      this.value = value$$39;
      this.isBlock = isBlock;
      this.startPos = startPos$$2;
      this.line = line$$11;
      this.endsLine = endsLine$$2;
      return;
    }
    __extends(CommentToken$$1, _super$$63);
    var v5654 = CommentToken$$1.prototype;
    v5654.getText = v886;
    var v5655 = CommentToken$$1.prototype;
    v5655.classification = v887;
    return CommentToken$$1;
  }
  function v885(_super$$62) {
    function v884() {
      return TokenClass.Whitespace;
    }
    function v883() {
      return this.value;
    }
    function WhitespaceToken$$1(tokenId$$48, value$$38) {
      _super$$62.call(this, tokenId$$48);
      this.value = value$$38;
      return;
    }
    __extends(WhitespaceToken$$1, _super$$62);
    var v5656 = WhitespaceToken$$1.prototype;
    v5656.getText = v883;
    var v5657 = WhitespaceToken$$1.prototype;
    v5657.classification = v884;
    return WhitespaceToken$$1;
  }
  function v882(_super$$61) {
    function v881() {
      return TokenClass.Identifier;
    }
    function v880() {
      return this.value;
    }
    function IdentifierToken$$1(value$$37, hasEscapeSequence$$3) {
      var v5658 = TokenID.Identifier;
      _super$$61.call(this, v5658);
      this.value = value$$37;
      this.hasEscapeSequence = hasEscapeSequence$$3;
      return;
    }
    __extends(IdentifierToken$$1, _super$$61);
    var v5659 = IdentifierToken$$1.prototype;
    v5659.getText = v880;
    var v5660 = IdentifierToken$$1.prototype;
    v5660.classification = v881;
    return IdentifierToken$$1;
  }
  function v879(_super$$60) {
    function v878() {
      return TokenClass.StringLiteral;
    }
    function v877() {
      return this.value;
    }
    function StringLiteralToken$$1(value$$36) {
      var v5661 = TokenID.StringLiteral;
      _super$$60.call(this, v5661);
      this.value = value$$36;
      return;
    }
    __extends(StringLiteralToken$$1, _super$$60);
    var v5662 = StringLiteralToken$$1.prototype;
    v5662.getText = v877;
    var v5663 = StringLiteralToken$$1.prototype;
    v5663.classification = v878;
    return StringLiteralToken$$1;
  }
  function v876(_super$$59) {
    function v875() {
      return TokenClass.NumberLiteral;
    }
    function v874() {
      var v5664;
      var v14774 = this.hasEmptyFraction;
      if (v14774) {
        var v20134 = this.value;
        var v14772 = v20134.toString();
        v5664 = v14772 + ".0";
      } else {
        var v14773 = this.value;
        v5664 = v14773.toString();
      }
      return v5664;
    }
    function NumberLiteralToken$$1(value$$35, hasEmptyFraction$$1) {
      var v5665 = TokenID.NumberLiteral;
      _super$$59.call(this, v5665);
      this.value = value$$35;
      this.hasEmptyFraction = hasEmptyFraction$$1;
      return;
    }
    __extends(NumberLiteralToken$$1, _super$$59);
    var v5666 = NumberLiteralToken$$1.prototype;
    v5666.getText = v874;
    var v5667 = NumberLiteralToken$$1.prototype;
    v5667.classification = v875;
    return NumberLiteralToken$$1;
  }
  function v873() {
    function v872() {
      var v14775 = this.tokenId;
      var v14776 = TokenID.LimKeyword;
      var v5671 = v14775 <= v14776;
      if (v5671) {
        return TokenClass.Keyword;
      } else {
        var v5668 = this.tokenId;
        var tokenInfo$$2 = lookupToken(v5668);
        var v5670 = tokenInfo$$2 != undefined;
        if (v5670) {
          var v20135 = tokenInfo$$2.unopNodeType;
          var v23532 = TypeScript$$22.NodeType;
          var v20136 = v23532.None;
          var v14777 = v20135 != v20136;
          var v20139 = !v14777;
          if (v20139) {
            var v20137 = tokenInfo$$2.binopNodeType;
            var v23533 = TypeScript$$22.NodeType;
            var v20138 = v23533.None;
            v14777 = v20137 != v20138;
          }
          var v5669 = v14777;
          if (v5669) {
            return TokenClass.Operator;
          }
        }
      }
      return TokenClass.Punctuation;
    }
    function v871() {
      var v14778 = TypeScript$$22.tokenTable;
      var v14779 = this.tokenId;
      var v5672 = v14778[v14779];
      return v5672.text;
    }
    function v870(line$$10, outfile$$11) {
      var v20140 = this.toString();
      var v14780 = v20140 + ",on line";
      var v5673 = v14780 + line$$10;
      outfile$$11.WriteLine(v5673);
      return;
    }
    function v869() {
      var v25840 = this.tokenId;
      var v25158 = "token: " + v25840;
      var v23534 = v25158 + " ";
      var v23535 = this.getText();
      var v20141 = v23534 + v23535;
      var v14781 = v20141 + " (";
      var v20142 = TokenID._map;
      var v20143 = this.tokenId;
      var v14782 = v20142[v20143];
      var v5674 = v14781 + v14782;
      return v5674 + ")";
    }
    function Token$$1(tokenId$$47) {
      this.tokenId = tokenId$$47;
      return;
    }
    var v5675 = Token$$1.prototype;
    v5675.toString = v869;
    var v5676 = Token$$1.prototype;
    v5676.print = v870;
    var v5677 = Token$$1.prototype;
    v5677.getText = v871;
    var v5678 = Token$$1.prototype;
    v5678.classification = v872;
    return Token$$1;
  }
  function v868() {
    function SavedToken$$1(tok$$4, minChar$$32, limChar$$11) {
      this.tok = tok$$4;
      this.minChar = minChar$$32;
      this.limChar = limChar$$11;
      return;
    }
    return SavedToken$$1;
  }
  function v867(TokenClass$$1) {
    TokenClass$$1._map = [];
    var v5679 = TokenClass$$1._map;
    v5679[0] = "Punctuation";
    TokenClass$$1.Punctuation = 0;
    var v5680 = TokenClass$$1._map;
    v5680[1] = "Keyword";
    TokenClass$$1.Keyword = 1;
    var v5681 = TokenClass$$1._map;
    v5681[2] = "Operator";
    TokenClass$$1.Operator = 2;
    var v5682 = TokenClass$$1._map;
    v5682[3] = "Comment";
    TokenClass$$1.Comment = 3;
    var v5683 = TokenClass$$1._map;
    v5683[4] = "Whitespace";
    TokenClass$$1.Whitespace = 4;
    var v5684 = TokenClass$$1._map;
    v5684[5] = "Identifier";
    TokenClass$$1.Identifier = 5;
    var v5685 = TokenClass$$1._map;
    v5685[6] = "NumberLiteral";
    TokenClass$$1.NumberLiteral = 6;
    var v5686 = TokenClass$$1._map;
    v5686[7] = "StringLiteral";
    TokenClass$$1.StringLiteral = 7;
    var v5687 = TokenClass$$1._map;
    v5687[8] = "RegExpLiteral";
    TokenClass$$1.RegExpLiteral = 8;
    return;
  }
  function v866() {
    function TokenInfo$$1(tokenId$$46, reservation$$1, binopPrecedence$$1, binopNodeType$$1, unopPrecedence$$1, unopNodeType$$1, text$$22, ers$$2) {
      this.tokenId = tokenId$$46;
      this.reservation = reservation$$1;
      this.binopPrecedence = binopPrecedence$$1;
      this.binopNodeType = binopNodeType$$1;
      this.unopPrecedence = unopPrecedence$$1;
      this.unopNodeType = unopNodeType$$1;
      this.text = text$$22;
      this.ers = ers$$2;
      return;
    }
    return TokenInfo$$1;
  }
  function v865(Reservation$$1) {
    Reservation$$1._map = [];
    Reservation$$1.None = 0;
    Reservation$$1.Javascript = 1;
    Reservation$$1.JavascriptFuture = 2;
    Reservation$$1.TypeScript = 4;
    Reservation$$1.JavascriptFutureStrict = 8;
    var v5688 = Reservation$$1.Javascript;
    var v5689 = Reservation$$1.TypeScript;
    Reservation$$1.TypeScriptAndJS = v5688 | v5689;
    var v5690 = Reservation$$1.JavascriptFuture;
    var v5691 = Reservation$$1.TypeScript;
    Reservation$$1.TypeScriptAndJSFuture = v5690 | v5691;
    var v5692 = Reservation$$1.JavascriptFutureStrict;
    var v5693 = Reservation$$1.TypeScript;
    Reservation$$1.TypeScriptAndJSFutureStrict = v5692 | v5693;
    return;
  }
  function v864(OperatorPrecedence$$1) {
    OperatorPrecedence$$1._map = [];
    var v5694 = OperatorPrecedence$$1._map;
    v5694[0] = "None";
    OperatorPrecedence$$1.None = 0;
    var v5695 = OperatorPrecedence$$1._map;
    v5695[1] = "Comma";
    OperatorPrecedence$$1.Comma = 1;
    var v5696 = OperatorPrecedence$$1._map;
    v5696[2] = "Assignment";
    OperatorPrecedence$$1.Assignment = 2;
    var v5697 = OperatorPrecedence$$1._map;
    v5697[3] = "Conditional";
    OperatorPrecedence$$1.Conditional = 3;
    var v5698 = OperatorPrecedence$$1._map;
    v5698[4] = "LogicalOr";
    OperatorPrecedence$$1.LogicalOr = 4;
    var v5699 = OperatorPrecedence$$1._map;
    v5699[5] = "LogicalAnd";
    OperatorPrecedence$$1.LogicalAnd = 5;
    var v5700 = OperatorPrecedence$$1._map;
    v5700[6] = "BitwiseOr";
    OperatorPrecedence$$1.BitwiseOr = 6;
    var v5701 = OperatorPrecedence$$1._map;
    v5701[7] = "BitwiseExclusiveOr";
    OperatorPrecedence$$1.BitwiseExclusiveOr = 7;
    var v5702 = OperatorPrecedence$$1._map;
    v5702[8] = "BitwiseAnd";
    OperatorPrecedence$$1.BitwiseAnd = 8;
    var v5703 = OperatorPrecedence$$1._map;
    v5703[9] = "Equality";
    OperatorPrecedence$$1.Equality = 9;
    var v5704 = OperatorPrecedence$$1._map;
    v5704[10] = "Relational";
    OperatorPrecedence$$1.Relational = 10;
    var v5705 = OperatorPrecedence$$1._map;
    v5705[11] = "Shift";
    OperatorPrecedence$$1.Shift = 11;
    var v5706 = OperatorPrecedence$$1._map;
    v5706[12] = "Additive";
    OperatorPrecedence$$1.Additive = 12;
    var v5707 = OperatorPrecedence$$1._map;
    v5707[13] = "Multiplicative";
    OperatorPrecedence$$1.Multiplicative = 13;
    var v5708 = OperatorPrecedence$$1._map;
    v5708[14] = "Unary";
    OperatorPrecedence$$1.Unary = 14;
    var v5709 = OperatorPrecedence$$1._map;
    v5709[15] = "Lim";
    OperatorPrecedence$$1.Lim = 15;
    return;
  }
  function v863(TokenID$$1) {
    TokenID$$1._map = [];
    var v5710 = TokenID$$1._map;
    v5710[0] = "Any";
    TokenID$$1.Any = 0;
    var v5711 = TokenID$$1._map;
    v5711[1] = "Bool";
    TokenID$$1.Bool = 1;
    var v5712 = TokenID$$1._map;
    v5712[2] = "Break";
    TokenID$$1.Break = 2;
    var v5713 = TokenID$$1._map;
    v5713[3] = "Case";
    TokenID$$1.Case = 3;
    var v5714 = TokenID$$1._map;
    v5714[4] = "Catch";
    TokenID$$1.Catch = 4;
    var v5715 = TokenID$$1._map;
    v5715[5] = "Class";
    TokenID$$1.Class = 5;
    var v5716 = TokenID$$1._map;
    v5716[6] = "Const";
    TokenID$$1.Const = 6;
    var v5717 = TokenID$$1._map;
    v5717[7] = "Continue";
    TokenID$$1.Continue = 7;
    var v5718 = TokenID$$1._map;
    v5718[8] = "Debugger";
    TokenID$$1.Debugger = 8;
    var v5719 = TokenID$$1._map;
    v5719[9] = "Default";
    TokenID$$1.Default = 9;
    var v5720 = TokenID$$1._map;
    v5720[10] = "Delete";
    TokenID$$1.Delete = 10;
    var v5721 = TokenID$$1._map;
    v5721[11] = "Do";
    TokenID$$1.Do = 11;
    var v5722 = TokenID$$1._map;
    v5722[12] = "Else";
    TokenID$$1.Else = 12;
    var v5723 = TokenID$$1._map;
    v5723[13] = "Enum";
    TokenID$$1.Enum = 13;
    var v5724 = TokenID$$1._map;
    v5724[14] = "Export";
    TokenID$$1.Export = 14;
    var v5725 = TokenID$$1._map;
    v5725[15] = "Extends";
    TokenID$$1.Extends = 15;
    var v5726 = TokenID$$1._map;
    v5726[16] = "Declare";
    TokenID$$1.Declare = 16;
    var v5727 = TokenID$$1._map;
    v5727[17] = "False";
    TokenID$$1.False = 17;
    var v5728 = TokenID$$1._map;
    v5728[18] = "Finally";
    TokenID$$1.Finally = 18;
    var v5729 = TokenID$$1._map;
    v5729[19] = "For";
    TokenID$$1.For = 19;
    var v5730 = TokenID$$1._map;
    v5730[20] = "Function";
    TokenID$$1.Function = 20;
    var v5731 = TokenID$$1._map;
    v5731[21] = "Constructor";
    TokenID$$1.Constructor = 21;
    var v5732 = TokenID$$1._map;
    v5732[22] = "Get";
    TokenID$$1.Get = 22;
    var v5733 = TokenID$$1._map;
    v5733[23] = "If";
    TokenID$$1.If = 23;
    var v5734 = TokenID$$1._map;
    v5734[24] = "Implements";
    TokenID$$1.Implements = 24;
    var v5735 = TokenID$$1._map;
    v5735[25] = "Import";
    TokenID$$1.Import = 25;
    var v5736 = TokenID$$1._map;
    v5736[26] = "In";
    TokenID$$1.In = 26;
    var v5737 = TokenID$$1._map;
    v5737[27] = "InstanceOf";
    TokenID$$1.InstanceOf = 27;
    var v5738 = TokenID$$1._map;
    v5738[28] = "Interface";
    TokenID$$1.Interface = 28;
    var v5739 = TokenID$$1._map;
    v5739[29] = "Let";
    TokenID$$1.Let = 29;
    var v5740 = TokenID$$1._map;
    v5740[30] = "Module";
    TokenID$$1.Module = 30;
    var v5741 = TokenID$$1._map;
    v5741[31] = "New";
    TokenID$$1.New = 31;
    var v5742 = TokenID$$1._map;
    v5742[32] = "Number";
    TokenID$$1.Number = 32;
    var v5743 = TokenID$$1._map;
    v5743[33] = "Null";
    TokenID$$1.Null = 33;
    var v5744 = TokenID$$1._map;
    v5744[34] = "Package";
    TokenID$$1.Package = 34;
    var v5745 = TokenID$$1._map;
    v5745[35] = "Private";
    TokenID$$1.Private = 35;
    var v5746 = TokenID$$1._map;
    v5746[36] = "Protected";
    TokenID$$1.Protected = 36;
    var v5747 = TokenID$$1._map;
    v5747[37] = "Public";
    TokenID$$1.Public = 37;
    var v5748 = TokenID$$1._map;
    v5748[38] = "Return";
    TokenID$$1.Return = 38;
    var v5749 = TokenID$$1._map;
    v5749[39] = "Set";
    TokenID$$1.Set = 39;
    var v5750 = TokenID$$1._map;
    v5750[40] = "Static";
    TokenID$$1.Static = 40;
    var v5751 = TokenID$$1._map;
    v5751[41] = "String";
    TokenID$$1.String = 41;
    var v5752 = TokenID$$1._map;
    v5752[42] = "Super";
    TokenID$$1.Super = 42;
    var v5753 = TokenID$$1._map;
    v5753[43] = "Switch";
    TokenID$$1.Switch = 43;
    var v5754 = TokenID$$1._map;
    v5754[44] = "This";
    TokenID$$1.This = 44;
    var v5755 = TokenID$$1._map;
    v5755[45] = "Throw";
    TokenID$$1.Throw = 45;
    var v5756 = TokenID$$1._map;
    v5756[46] = "True";
    TokenID$$1.True = 46;
    var v5757 = TokenID$$1._map;
    v5757[47] = "Try";
    TokenID$$1.Try = 47;
    var v5758 = TokenID$$1._map;
    v5758[48] = "TypeOf";
    TokenID$$1.TypeOf = 48;
    var v5759 = TokenID$$1._map;
    v5759[49] = "Var";
    TokenID$$1.Var = 49;
    var v5760 = TokenID$$1._map;
    v5760[50] = "Void";
    TokenID$$1.Void = 50;
    var v5761 = TokenID$$1._map;
    v5761[51] = "With";
    TokenID$$1.With = 51;
    var v5762 = TokenID$$1._map;
    v5762[52] = "While";
    TokenID$$1.While = 52;
    var v5763 = TokenID$$1._map;
    v5763[53] = "Yield";
    TokenID$$1.Yield = 53;
    var v5764 = TokenID$$1._map;
    v5764[54] = "Semicolon";
    TokenID$$1.Semicolon = 54;
    var v5765 = TokenID$$1._map;
    v5765[55] = "OpenParen";
    TokenID$$1.OpenParen = 55;
    var v5766 = TokenID$$1._map;
    v5766[56] = "CloseParen";
    TokenID$$1.CloseParen = 56;
    var v5767 = TokenID$$1._map;
    v5767[57] = "OpenBracket";
    TokenID$$1.OpenBracket = 57;
    var v5768 = TokenID$$1._map;
    v5768[58] = "CloseBracket";
    TokenID$$1.CloseBracket = 58;
    var v5769 = TokenID$$1._map;
    v5769[59] = "OpenBrace";
    TokenID$$1.OpenBrace = 59;
    var v5770 = TokenID$$1._map;
    v5770[60] = "CloseBrace";
    TokenID$$1.CloseBrace = 60;
    var v5771 = TokenID$$1._map;
    v5771[61] = "Comma";
    TokenID$$1.Comma = 61;
    var v5772 = TokenID$$1._map;
    v5772[62] = "Equals";
    TokenID$$1.Equals = 62;
    var v5773 = TokenID$$1._map;
    v5773[63] = "PlusEquals";
    TokenID$$1.PlusEquals = 63;
    var v5774 = TokenID$$1._map;
    v5774[64] = "MinusEquals";
    TokenID$$1.MinusEquals = 64;
    var v5775 = TokenID$$1._map;
    v5775[65] = "AsteriskEquals";
    TokenID$$1.AsteriskEquals = 65;
    var v5776 = TokenID$$1._map;
    v5776[66] = "SlashEquals";
    TokenID$$1.SlashEquals = 66;
    var v5777 = TokenID$$1._map;
    v5777[67] = "PercentEquals";
    TokenID$$1.PercentEquals = 67;
    var v5778 = TokenID$$1._map;
    v5778[68] = "AmpersandEquals";
    TokenID$$1.AmpersandEquals = 68;
    var v5779 = TokenID$$1._map;
    v5779[69] = "CaretEquals";
    TokenID$$1.CaretEquals = 69;
    var v5780 = TokenID$$1._map;
    v5780[70] = "BarEquals";
    TokenID$$1.BarEquals = 70;
    var v5781 = TokenID$$1._map;
    v5781[71] = "LessThanLessThanEquals";
    TokenID$$1.LessThanLessThanEquals = 71;
    var v5782 = TokenID$$1._map;
    v5782[72] = "GreaterThanGreaterThanEquals";
    TokenID$$1.GreaterThanGreaterThanEquals = 72;
    var v5783 = TokenID$$1._map;
    v5783[73] = "GreaterThanGreaterThanGreaterThanEquals";
    TokenID$$1.GreaterThanGreaterThanGreaterThanEquals = 73;
    var v5784 = TokenID$$1._map;
    v5784[74] = "Question";
    TokenID$$1.Question = 74;
    var v5785 = TokenID$$1._map;
    v5785[75] = "Colon";
    TokenID$$1.Colon = 75;
    var v5786 = TokenID$$1._map;
    v5786[76] = "BarBar";
    TokenID$$1.BarBar = 76;
    var v5787 = TokenID$$1._map;
    v5787[77] = "AmpersandAmpersand";
    TokenID$$1.AmpersandAmpersand = 77;
    var v5788 = TokenID$$1._map;
    v5788[78] = "Bar";
    TokenID$$1.Bar = 78;
    var v5789 = TokenID$$1._map;
    v5789[79] = "Caret";
    TokenID$$1.Caret = 79;
    var v5790 = TokenID$$1._map;
    v5790[80] = "And";
    TokenID$$1.And = 80;
    var v5791 = TokenID$$1._map;
    v5791[81] = "EqualsEquals";
    TokenID$$1.EqualsEquals = 81;
    var v5792 = TokenID$$1._map;
    v5792[82] = "ExclamationEquals";
    TokenID$$1.ExclamationEquals = 82;
    var v5793 = TokenID$$1._map;
    v5793[83] = "EqualsEqualsEquals";
    TokenID$$1.EqualsEqualsEquals = 83;
    var v5794 = TokenID$$1._map;
    v5794[84] = "ExclamationEqualsEquals";
    TokenID$$1.ExclamationEqualsEquals = 84;
    var v5795 = TokenID$$1._map;
    v5795[85] = "LessThan";
    TokenID$$1.LessThan = 85;
    var v5796 = TokenID$$1._map;
    v5796[86] = "LessThanEquals";
    TokenID$$1.LessThanEquals = 86;
    var v5797 = TokenID$$1._map;
    v5797[87] = "GreaterThan";
    TokenID$$1.GreaterThan = 87;
    var v5798 = TokenID$$1._map;
    v5798[88] = "GreaterThanEquals";
    TokenID$$1.GreaterThanEquals = 88;
    var v5799 = TokenID$$1._map;
    v5799[89] = "LessThanLessThan";
    TokenID$$1.LessThanLessThan = 89;
    var v5800 = TokenID$$1._map;
    v5800[90] = "GreaterThanGreaterThan";
    TokenID$$1.GreaterThanGreaterThan = 90;
    var v5801 = TokenID$$1._map;
    v5801[91] = "GreaterThanGreaterThanGreaterThan";
    TokenID$$1.GreaterThanGreaterThanGreaterThan = 91;
    var v5802 = TokenID$$1._map;
    v5802[92] = "Plus";
    TokenID$$1.Plus = 92;
    var v5803 = TokenID$$1._map;
    v5803[93] = "Minus";
    TokenID$$1.Minus = 93;
    var v5804 = TokenID$$1._map;
    v5804[94] = "Asterisk";
    TokenID$$1.Asterisk = 94;
    var v5805 = TokenID$$1._map;
    v5805[95] = "Slash";
    TokenID$$1.Slash = 95;
    var v5806 = TokenID$$1._map;
    v5806[96] = "Percent";
    TokenID$$1.Percent = 96;
    var v5807 = TokenID$$1._map;
    v5807[97] = "Tilde";
    TokenID$$1.Tilde = 97;
    var v5808 = TokenID$$1._map;
    v5808[98] = "Exclamation";
    TokenID$$1.Exclamation = 98;
    var v5809 = TokenID$$1._map;
    v5809[99] = "PlusPlus";
    TokenID$$1.PlusPlus = 99;
    var v5810 = TokenID$$1._map;
    v5810[100] = "MinusMinus";
    TokenID$$1.MinusMinus = 100;
    var v5811 = TokenID$$1._map;
    v5811[101] = "Dot";
    TokenID$$1.Dot = 101;
    var v5812 = TokenID$$1._map;
    v5812[102] = "DotDotDot";
    TokenID$$1.DotDotDot = 102;
    var v5813 = TokenID$$1._map;
    v5813[103] = "Error";
    TokenID$$1.Error = 103;
    var v5814 = TokenID$$1._map;
    v5814[104] = "EndOfFile";
    TokenID$$1.EndOfFile = 104;
    var v5815 = TokenID$$1._map;
    v5815[105] = "EqualsGreaterThan";
    TokenID$$1.EqualsGreaterThan = 105;
    var v5816 = TokenID$$1._map;
    v5816[106] = "Identifier";
    TokenID$$1.Identifier = 106;
    var v5817 = TokenID$$1._map;
    v5817[107] = "StringLiteral";
    TokenID$$1.StringLiteral = 107;
    var v5818 = TokenID$$1._map;
    v5818[108] = "RegularExpressionLiteral";
    TokenID$$1.RegularExpressionLiteral = 108;
    var v5819 = TokenID$$1._map;
    v5819[109] = "NumberLiteral";
    TokenID$$1.NumberLiteral = 109;
    var v5820 = TokenID$$1._map;
    v5820[110] = "Whitespace";
    TokenID$$1.Whitespace = 110;
    var v5821 = TokenID$$1._map;
    v5821[111] = "Comment";
    TokenID$$1.Comment = 111;
    var v5822 = TokenID$$1._map;
    v5822[112] = "Lim";
    TokenID$$1.Lim = 112;
    TokenID$$1.LimFixed = TokenID$$1.EqualsGreaterThan;
    TokenID$$1.LimKeyword = TokenID$$1.Yield;
    return;
  }
  function setTokenInfo(tokenId$$44, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text$$21, ers$$1) {
    var v5829 = tokenId$$44 !== undefined;
    if (v5829) {
      var v5823 = TypeScript$$22.tokenTable;
      var v26661 = new TokenInfo(tokenId$$44, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text$$21, ers$$1);
      v5823[tokenId$$44] = v26661;
      var v20144 = TypeScript$$22.NodeType;
      var v14783 = v20144.None;
      var v5826 = binopNodeType != v14783;
      if (v5826) {
        var v5824 = TypeScript$$22.nodeTypeTable;
        v5824[binopNodeType] = text$$21;
        var v5825 = TypeScript$$22.nodeTypeToTokTable;
        v5825[binopNodeType] = tokenId$$44;
      }
      var v20145 = TypeScript$$22.NodeType;
      var v14784 = v20145.None;
      var v5828 = unopNodeType != v14784;
      if (v5828) {
        var v5827 = TypeScript$$22.nodeTypeTable;
        v5827[unopNodeType] = text$$21;
      }
    }
    return;
  }
  function lookupToken(tokenId$$45) {
    var v5830 = TypeScript$$22.tokenTable;
    return v5830[tokenId$$45];
  }
  function initializeStaticTokens() {
    var i$$73 = 0;
    var v14785 = TokenID.LimFixed;
    var v5832 = i$$73 <= v14785;
    for (;v5832;) {
      var v5831 = TypeScript$$22.staticTokens;
      var v26662 = new Token(i$$73);
      v5831[i$$73] = v26662;
      i$$73++;
      var v14786 = TokenID.LimFixed;
      v5832 = i$$73 <= v14786;
    }
    return;
  }
  var v14787 = TypeScript$$22.TokenID;
  var v20146 = !v14787;
  if (v20146) {
    v14787 = TypeScript$$22.TokenID = {};
  }
  var v5833 = v14787;
  v863(v5833);
  var TokenID = TypeScript$$22.TokenID;
  var v5834 = TypeScript$$22;
  var v26663 = new Array;
  v5834.tokenTable = v26663;
  var v5835 = TypeScript$$22;
  var v26664 = new Array;
  v5835.nodeTypeTable = v26664;
  var v5836 = TypeScript$$22;
  var v26665 = new Array;
  v5836.nodeTypeToTokTable = v26665;
  var v5837 = TypeScript$$22;
  var v26666 = new Array;
  v5837.noRegexTable = v26666;
  var v5838 = TypeScript$$22.noRegexTable;
  var v5839 = TokenID.Identifier;
  v5838[v5839] = true;
  var v5840 = TypeScript$$22.noRegexTable;
  var v5841 = TokenID.StringLiteral;
  v5840[v5841] = true;
  var v5842 = TypeScript$$22.noRegexTable;
  var v5843 = TokenID.NumberLiteral;
  v5842[v5843] = true;
  var v5844 = TypeScript$$22.noRegexTable;
  var v5845 = TokenID.RegularExpressionLiteral;
  v5844[v5845] = true;
  var v5846 = TypeScript$$22.noRegexTable;
  var v5847 = TokenID.This;
  v5846[v5847] = true;
  var v5848 = TypeScript$$22.noRegexTable;
  var v5849 = TokenID.PlusPlus;
  v5848[v5849] = true;
  var v5850 = TypeScript$$22.noRegexTable;
  var v5851 = TokenID.MinusMinus;
  v5850[v5851] = true;
  var v5852 = TypeScript$$22.noRegexTable;
  var v5853 = TokenID.CloseParen;
  v5852[v5853] = true;
  var v5854 = TypeScript$$22.noRegexTable;
  var v5855 = TokenID.CloseBracket;
  v5854[v5855] = true;
  var v5856 = TypeScript$$22.noRegexTable;
  var v5857 = TokenID.CloseBrace;
  v5856[v5857] = true;
  var v5858 = TypeScript$$22.noRegexTable;
  var v5859 = TokenID.True;
  v5858[v5859] = true;
  var v5860 = TypeScript$$22.noRegexTable;
  var v5861 = TokenID.False;
  v5860[v5861] = true;
  var v14788 = TypeScript$$22.OperatorPrecedence;
  var v20147 = !v14788;
  if (v20147) {
    v14788 = TypeScript$$22.OperatorPrecedence = {};
  }
  var v5862 = v14788;
  v864(v5862);
  var OperatorPrecedence = TypeScript$$22.OperatorPrecedence;
  var v14789 = TypeScript$$22.Reservation;
  var v20148 = !v14789;
  if (v20148) {
    v14789 = TypeScript$$22.Reservation = {};
  }
  var v5863 = v14789;
  v865(v5863);
  var Reservation = TypeScript$$22.Reservation;
  var TokenInfo = v866();
  TypeScript$$22.TokenInfo = TokenInfo;
  var v5864 = TokenID.Any;
  var v5865 = Reservation.TypeScript;
  var v5866 = OperatorPrecedence.None;
  var v14790 = TypeScript$$22.NodeType;
  var v5867 = v14790.None;
  var v5868 = OperatorPrecedence.None;
  var v14791 = TypeScript$$22.NodeType;
  var v5869 = v14791.None;
  var v14792 = TypeScript$$22.ErrorRecoverySet;
  var v5870 = v14792.PrimType;
  setTokenInfo(v5864, v5865, v5866, v5867, v5868, v5869, "any", v5870);
  var v5871 = TokenID.Bool;
  var v5872 = Reservation.TypeScript;
  var v5873 = OperatorPrecedence.None;
  var v14793 = TypeScript$$22.NodeType;
  var v5874 = v14793.None;
  var v5875 = OperatorPrecedence.None;
  var v14794 = TypeScript$$22.NodeType;
  var v5876 = v14794.None;
  var v14795 = TypeScript$$22.ErrorRecoverySet;
  var v5877 = v14795.PrimType;
  setTokenInfo(v5871, v5872, v5873, v5874, v5875, v5876, "bool", v5877);
  var v5878 = TokenID.Break;
  var v5879 = Reservation.TypeScriptAndJS;
  var v5880 = OperatorPrecedence.None;
  var v14796 = TypeScript$$22.NodeType;
  var v5881 = v14796.None;
  var v5882 = OperatorPrecedence.None;
  var v14797 = TypeScript$$22.NodeType;
  var v5883 = v14797.None;
  var v14798 = TypeScript$$22.ErrorRecoverySet;
  var v5884 = v14798.Stmt;
  setTokenInfo(v5878, v5879, v5880, v5881, v5882, v5883, "break", v5884);
  var v5885 = TokenID.Case;
  var v5886 = Reservation.TypeScriptAndJS;
  var v5887 = OperatorPrecedence.None;
  var v14799 = TypeScript$$22.NodeType;
  var v5888 = v14799.None;
  var v5889 = OperatorPrecedence.None;
  var v14800 = TypeScript$$22.NodeType;
  var v5890 = v14800.None;
  var v14801 = TypeScript$$22.ErrorRecoverySet;
  var v5891 = v14801.SCase;
  setTokenInfo(v5885, v5886, v5887, v5888, v5889, v5890, "case", v5891);
  var v5892 = TokenID.Catch;
  var v5893 = Reservation.TypeScriptAndJS;
  var v5894 = OperatorPrecedence.None;
  var v14802 = TypeScript$$22.NodeType;
  var v5895 = v14802.None;
  var v5896 = OperatorPrecedence.None;
  var v14803 = TypeScript$$22.NodeType;
  var v5897 = v14803.None;
  var v14804 = TypeScript$$22.ErrorRecoverySet;
  var v5898 = v14804.Catch;
  setTokenInfo(v5892, v5893, v5894, v5895, v5896, v5897, "catch", v5898);
  var v5899 = TokenID.Class;
  var v5900 = Reservation.TypeScriptAndJSFuture;
  var v5901 = OperatorPrecedence.None;
  var v14805 = TypeScript$$22.NodeType;
  var v5902 = v14805.None;
  var v5903 = OperatorPrecedence.None;
  var v14806 = TypeScript$$22.NodeType;
  var v5904 = v14806.None;
  var v14807 = TypeScript$$22.ErrorRecoverySet;
  var v5905 = v14807.TypeScriptS;
  setTokenInfo(v5899, v5900, v5901, v5902, v5903, v5904, "class", v5905);
  var v5906 = TokenID.Const;
  var v5907 = Reservation.TypeScriptAndJSFuture;
  var v5908 = OperatorPrecedence.None;
  var v14808 = TypeScript$$22.NodeType;
  var v5909 = v14808.None;
  var v5910 = OperatorPrecedence.None;
  var v14809 = TypeScript$$22.NodeType;
  var v5911 = v14809.None;
  var v14810 = TypeScript$$22.ErrorRecoverySet;
  var v5912 = v14810.Var;
  setTokenInfo(v5906, v5907, v5908, v5909, v5910, v5911, "const", v5912);
  var v5913 = TokenID.Continue;
  var v5914 = Reservation.TypeScriptAndJS;
  var v5915 = OperatorPrecedence.None;
  var v14811 = TypeScript$$22.NodeType;
  var v5916 = v14811.None;
  var v5917 = OperatorPrecedence.None;
  var v14812 = TypeScript$$22.NodeType;
  var v5918 = v14812.None;
  var v14813 = TypeScript$$22.ErrorRecoverySet;
  var v5919 = v14813.Stmt;
  setTokenInfo(v5913, v5914, v5915, v5916, v5917, v5918, "continue", v5919);
  var v5920 = TokenID.Debugger;
  var v5921 = Reservation.TypeScriptAndJS;
  var v5922 = OperatorPrecedence.None;
  var v14814 = TypeScript$$22.NodeType;
  var v5923 = v14814.None;
  var v5924 = OperatorPrecedence.None;
  var v14815 = TypeScript$$22.NodeType;
  var v5925 = v14815.Debugger;
  var v14816 = TypeScript$$22.ErrorRecoverySet;
  var v5926 = v14816.Stmt;
  setTokenInfo(v5920, v5921, v5922, v5923, v5924, v5925, "debugger", v5926);
  var v5927 = TokenID.Default;
  var v5928 = Reservation.TypeScriptAndJS;
  var v5929 = OperatorPrecedence.None;
  var v14817 = TypeScript$$22.NodeType;
  var v5930 = v14817.None;
  var v5931 = OperatorPrecedence.None;
  var v14818 = TypeScript$$22.NodeType;
  var v5932 = v14818.None;
  var v14819 = TypeScript$$22.ErrorRecoverySet;
  var v5933 = v14819.SCase;
  setTokenInfo(v5927, v5928, v5929, v5930, v5931, v5932, "default", v5933);
  var v5934 = TokenID.Delete;
  var v5935 = Reservation.TypeScriptAndJS;
  var v5936 = OperatorPrecedence.None;
  var v14820 = TypeScript$$22.NodeType;
  var v5937 = v14820.None;
  var v5938 = OperatorPrecedence.Unary;
  var v14821 = TypeScript$$22.NodeType;
  var v5939 = v14821.Delete;
  var v14822 = TypeScript$$22.ErrorRecoverySet;
  var v5940 = v14822.Prefix;
  setTokenInfo(v5934, v5935, v5936, v5937, v5938, v5939, "delete", v5940);
  var v5941 = TokenID.Do;
  var v5942 = Reservation.TypeScriptAndJS;
  var v5943 = OperatorPrecedence.None;
  var v14823 = TypeScript$$22.NodeType;
  var v5944 = v14823.None;
  var v5945 = OperatorPrecedence.None;
  var v14824 = TypeScript$$22.NodeType;
  var v5946 = v14824.None;
  var v14825 = TypeScript$$22.ErrorRecoverySet;
  var v5947 = v14825.Stmt;
  setTokenInfo(v5941, v5942, v5943, v5944, v5945, v5946, "do", v5947);
  var v5948 = TokenID.Else;
  var v5949 = Reservation.TypeScriptAndJS;
  var v5950 = OperatorPrecedence.None;
  var v14826 = TypeScript$$22.NodeType;
  var v5951 = v14826.None;
  var v5952 = OperatorPrecedence.None;
  var v14827 = TypeScript$$22.NodeType;
  var v5953 = v14827.None;
  var v14828 = TypeScript$$22.ErrorRecoverySet;
  var v5954 = v14828.Else;
  setTokenInfo(v5948, v5949, v5950, v5951, v5952, v5953, "else", v5954);
  var v5955 = TokenID.Enum;
  var v5956 = Reservation.TypeScriptAndJSFuture;
  var v5957 = OperatorPrecedence.None;
  var v14829 = TypeScript$$22.NodeType;
  var v5958 = v14829.None;
  var v5959 = OperatorPrecedence.None;
  var v14830 = TypeScript$$22.NodeType;
  var v5960 = v14830.None;
  var v14831 = TypeScript$$22.ErrorRecoverySet;
  var v5961 = v14831.TypeScriptS;
  setTokenInfo(v5955, v5956, v5957, v5958, v5959, v5960, "enum", v5961);
  var v5962 = TokenID.Export;
  var v5963 = Reservation.TypeScriptAndJSFuture;
  var v5964 = OperatorPrecedence.None;
  var v14832 = TypeScript$$22.NodeType;
  var v5965 = v14832.None;
  var v5966 = OperatorPrecedence.None;
  var v14833 = TypeScript$$22.NodeType;
  var v5967 = v14833.None;
  var v14834 = TypeScript$$22.ErrorRecoverySet;
  var v5968 = v14834.TypeScriptS;
  setTokenInfo(v5962, v5963, v5964, v5965, v5966, v5967, "export", v5968);
  var v5969 = TokenID.Extends;
  var v5970 = Reservation.TypeScriptAndJSFuture;
  var v5971 = OperatorPrecedence.None;
  var v14835 = TypeScript$$22.NodeType;
  var v5972 = v14835.None;
  var v5973 = OperatorPrecedence.None;
  var v14836 = TypeScript$$22.NodeType;
  var v5974 = v14836.None;
  var v14837 = TypeScript$$22.ErrorRecoverySet;
  var v5975 = v14837.None;
  setTokenInfo(v5969, v5970, v5971, v5972, v5973, v5974, "extends", v5975);
  var v5976 = TokenID.Declare;
  var v5977 = Reservation.TypeScript;
  var v5978 = OperatorPrecedence.None;
  var v14838 = TypeScript$$22.NodeType;
  var v5979 = v14838.None;
  var v5980 = OperatorPrecedence.None;
  var v14839 = TypeScript$$22.NodeType;
  var v5981 = v14839.None;
  var v14840 = TypeScript$$22.ErrorRecoverySet;
  var v5982 = v14840.Stmt;
  setTokenInfo(v5976, v5977, v5978, v5979, v5980, v5981, "declare", v5982);
  var v5983 = TokenID.False;
  var v5984 = Reservation.TypeScriptAndJS;
  var v5985 = OperatorPrecedence.None;
  var v14841 = TypeScript$$22.NodeType;
  var v5986 = v14841.None;
  var v5987 = OperatorPrecedence.None;
  var v14842 = TypeScript$$22.NodeType;
  var v5988 = v14842.None;
  var v14843 = TypeScript$$22.ErrorRecoverySet;
  var v5989 = v14843.RLit;
  setTokenInfo(v5983, v5984, v5985, v5986, v5987, v5988, "false", v5989);
  var v5990 = TokenID.Finally;
  var v5991 = Reservation.TypeScriptAndJS;
  var v5992 = OperatorPrecedence.None;
  var v14844 = TypeScript$$22.NodeType;
  var v5993 = v14844.None;
  var v5994 = OperatorPrecedence.None;
  var v14845 = TypeScript$$22.NodeType;
  var v5995 = v14845.None;
  var v14846 = TypeScript$$22.ErrorRecoverySet;
  var v5996 = v14846.Catch;
  setTokenInfo(v5990, v5991, v5992, v5993, v5994, v5995, "finally", v5996);
  var v5997 = TokenID.For;
  var v5998 = Reservation.TypeScriptAndJS;
  var v5999 = OperatorPrecedence.None;
  var v14847 = TypeScript$$22.NodeType;
  var v6000 = v14847.None;
  var v6001 = OperatorPrecedence.None;
  var v14848 = TypeScript$$22.NodeType;
  var v6002 = v14848.None;
  var v14849 = TypeScript$$22.ErrorRecoverySet;
  var v6003 = v14849.Stmt;
  setTokenInfo(v5997, v5998, v5999, v6000, v6001, v6002, "for", v6003);
  var v6004 = TokenID.Function;
  var v6005 = Reservation.TypeScriptAndJS;
  var v6006 = OperatorPrecedence.None;
  var v14850 = TypeScript$$22.NodeType;
  var v6007 = v14850.None;
  var v6008 = OperatorPrecedence.None;
  var v14851 = TypeScript$$22.NodeType;
  var v6009 = v14851.None;
  var v14852 = TypeScript$$22.ErrorRecoverySet;
  var v6010 = v14852.Func;
  setTokenInfo(v6004, v6005, v6006, v6007, v6008, v6009, "function", v6010);
  var v6011 = TokenID.Constructor;
  var v6012 = Reservation.TypeScriptAndJSFutureStrict;
  var v6013 = OperatorPrecedence.None;
  var v14853 = TypeScript$$22.NodeType;
  var v6014 = v14853.None;
  var v6015 = OperatorPrecedence.None;
  var v14854 = TypeScript$$22.NodeType;
  var v6016 = v14854.None;
  var v14855 = TypeScript$$22.ErrorRecoverySet;
  var v6017 = v14855.Func;
  setTokenInfo(v6011, v6012, v6013, v6014, v6015, v6016, "constructor", v6017);
  var v6018 = TokenID.Get;
  var v6019 = Reservation.TypeScript;
  var v6020 = OperatorPrecedence.None;
  var v14856 = TypeScript$$22.NodeType;
  var v6021 = v14856.None;
  var v6022 = OperatorPrecedence.None;
  var v14857 = TypeScript$$22.NodeType;
  var v6023 = v14857.None;
  var v14858 = TypeScript$$22.ErrorRecoverySet;
  var v6024 = v14858.Func;
  setTokenInfo(v6018, v6019, v6020, v6021, v6022, v6023, "get", v6024);
  var v6025 = TokenID.Set;
  var v6026 = Reservation.TypeScript;
  var v6027 = OperatorPrecedence.None;
  var v14859 = TypeScript$$22.NodeType;
  var v6028 = v14859.None;
  var v6029 = OperatorPrecedence.None;
  var v14860 = TypeScript$$22.NodeType;
  var v6030 = v14860.None;
  var v14861 = TypeScript$$22.ErrorRecoverySet;
  var v6031 = v14861.Func;
  setTokenInfo(v6025, v6026, v6027, v6028, v6029, v6030, "set", v6031);
  var v6032 = TokenID.If;
  var v6033 = Reservation.TypeScriptAndJS;
  var v6034 = OperatorPrecedence.None;
  var v14862 = TypeScript$$22.NodeType;
  var v6035 = v14862.None;
  var v6036 = OperatorPrecedence.None;
  var v14863 = TypeScript$$22.NodeType;
  var v6037 = v14863.None;
  var v14864 = TypeScript$$22.ErrorRecoverySet;
  var v6038 = v14864.Stmt;
  setTokenInfo(v6032, v6033, v6034, v6035, v6036, v6037, "if", v6038);
  var v6039 = TokenID.Implements;
  var v6040 = Reservation.TypeScriptAndJSFutureStrict;
  var v6041 = OperatorPrecedence.None;
  var v14865 = TypeScript$$22.NodeType;
  var v6042 = v14865.None;
  var v6043 = OperatorPrecedence.None;
  var v14866 = TypeScript$$22.NodeType;
  var v6044 = v14866.None;
  var v14867 = TypeScript$$22.ErrorRecoverySet;
  var v6045 = v14867.None;
  setTokenInfo(v6039, v6040, v6041, v6042, v6043, v6044, "implements", v6045);
  var v6046 = TokenID.Import;
  var v6047 = Reservation.TypeScriptAndJSFuture;
  var v6048 = OperatorPrecedence.None;
  var v14868 = TypeScript$$22.NodeType;
  var v6049 = v14868.None;
  var v6050 = OperatorPrecedence.None;
  var v14869 = TypeScript$$22.NodeType;
  var v6051 = v14869.None;
  var v14870 = TypeScript$$22.ErrorRecoverySet;
  var v6052 = v14870.TypeScriptS;
  setTokenInfo(v6046, v6047, v6048, v6049, v6050, v6051, "import", v6052);
  var v6053 = TokenID.In;
  var v6054 = Reservation.TypeScriptAndJS;
  var v6055 = OperatorPrecedence.Relational;
  var v14871 = TypeScript$$22.NodeType;
  var v6056 = v14871.In;
  var v6057 = OperatorPrecedence.None;
  var v14872 = TypeScript$$22.NodeType;
  var v6058 = v14872.None;
  var v14873 = TypeScript$$22.ErrorRecoverySet;
  var v6059 = v14873.None;
  setTokenInfo(v6053, v6054, v6055, v6056, v6057, v6058, "in", v6059);
  var v6060 = TokenID.InstanceOf;
  var v6061 = Reservation.TypeScriptAndJS;
  var v6062 = OperatorPrecedence.Relational;
  var v14874 = TypeScript$$22.NodeType;
  var v6063 = v14874.InstOf;
  var v6064 = OperatorPrecedence.None;
  var v14875 = TypeScript$$22.NodeType;
  var v6065 = v14875.None;
  var v14876 = TypeScript$$22.ErrorRecoverySet;
  var v6066 = v14876.BinOp;
  setTokenInfo(v6060, v6061, v6062, v6063, v6064, v6065, "instanceof", v6066);
  var v6067 = TokenID.Interface;
  var v6068 = Reservation.TypeScriptAndJSFutureStrict;
  var v6069 = OperatorPrecedence.None;
  var v14877 = TypeScript$$22.NodeType;
  var v6070 = v14877.None;
  var v6071 = OperatorPrecedence.None;
  var v14878 = TypeScript$$22.NodeType;
  var v6072 = v14878.None;
  var v14879 = TypeScript$$22.ErrorRecoverySet;
  var v6073 = v14879.TypeScriptS;
  setTokenInfo(v6067, v6068, v6069, v6070, v6071, v6072, "interface", v6073);
  var v6074 = TokenID.Let;
  var v6075 = Reservation.JavascriptFutureStrict;
  var v6076 = OperatorPrecedence.None;
  var v14880 = TypeScript$$22.NodeType;
  var v6077 = v14880.None;
  var v6078 = OperatorPrecedence.None;
  var v14881 = TypeScript$$22.NodeType;
  var v6079 = v14881.None;
  var v14882 = TypeScript$$22.ErrorRecoverySet;
  var v6080 = v14882.None;
  setTokenInfo(v6074, v6075, v6076, v6077, v6078, v6079, "let", v6080);
  var v6081 = TokenID.Module;
  var v6082 = Reservation.TypeScript;
  var v6083 = OperatorPrecedence.None;
  var v14883 = TypeScript$$22.NodeType;
  var v6084 = v14883.None;
  var v6085 = OperatorPrecedence.None;
  var v14884 = TypeScript$$22.NodeType;
  var v6086 = v14884.None;
  var v14885 = TypeScript$$22.ErrorRecoverySet;
  var v6087 = v14885.TypeScriptS;
  setTokenInfo(v6081, v6082, v6083, v6084, v6085, v6086, "module", v6087);
  var v6088 = TokenID.New;
  var v6089 = Reservation.TypeScriptAndJS;
  var v6090 = OperatorPrecedence.None;
  var v14886 = TypeScript$$22.NodeType;
  var v6091 = v14886.None;
  var v6092 = OperatorPrecedence.None;
  var v14887 = TypeScript$$22.NodeType;
  var v6093 = v14887.None;
  var v14888 = TypeScript$$22.ErrorRecoverySet;
  var v6094 = v14888.PreOp;
  setTokenInfo(v6088, v6089, v6090, v6091, v6092, v6093, "new", v6094);
  var v6095 = TokenID.Number;
  var v6096 = Reservation.TypeScript;
  var v6097 = OperatorPrecedence.None;
  var v14889 = TypeScript$$22.NodeType;
  var v6098 = v14889.None;
  var v6099 = OperatorPrecedence.None;
  var v14890 = TypeScript$$22.NodeType;
  var v6100 = v14890.None;
  var v14891 = TypeScript$$22.ErrorRecoverySet;
  var v6101 = v14891.PrimType;
  setTokenInfo(v6095, v6096, v6097, v6098, v6099, v6100, "number", v6101);
  var v6102 = TokenID.Null;
  var v6103 = Reservation.TypeScriptAndJS;
  var v6104 = OperatorPrecedence.None;
  var v14892 = TypeScript$$22.NodeType;
  var v6105 = v14892.None;
  var v6106 = OperatorPrecedence.None;
  var v14893 = TypeScript$$22.NodeType;
  var v6107 = v14893.None;
  var v14894 = TypeScript$$22.ErrorRecoverySet;
  var v6108 = v14894.RLit;
  setTokenInfo(v6102, v6103, v6104, v6105, v6106, v6107, "null", v6108);
  var v6109 = TokenID.Package;
  var v6110 = Reservation.JavascriptFutureStrict;
  var v6111 = OperatorPrecedence.None;
  var v14895 = TypeScript$$22.NodeType;
  var v6112 = v14895.None;
  var v6113 = OperatorPrecedence.None;
  var v14896 = TypeScript$$22.NodeType;
  var v6114 = v14896.None;
  var v14897 = TypeScript$$22.ErrorRecoverySet;
  var v6115 = v14897.None;
  setTokenInfo(v6109, v6110, v6111, v6112, v6113, v6114, "package", v6115);
  var v6116 = TokenID.Private;
  var v6117 = Reservation.TypeScriptAndJSFutureStrict;
  var v6118 = OperatorPrecedence.None;
  var v14898 = TypeScript$$22.NodeType;
  var v6119 = v14898.None;
  var v6120 = OperatorPrecedence.None;
  var v14899 = TypeScript$$22.NodeType;
  var v6121 = v14899.None;
  var v14900 = TypeScript$$22.ErrorRecoverySet;
  var v6122 = v14900.TypeScriptS;
  setTokenInfo(v6116, v6117, v6118, v6119, v6120, v6121, "private", v6122);
  var v6123 = TokenID.Protected;
  var v6124 = Reservation.JavascriptFutureStrict;
  var v6125 = OperatorPrecedence.None;
  var v14901 = TypeScript$$22.NodeType;
  var v6126 = v14901.None;
  var v6127 = OperatorPrecedence.None;
  var v14902 = TypeScript$$22.NodeType;
  var v6128 = v14902.None;
  var v14903 = TypeScript$$22.ErrorRecoverySet;
  var v6129 = v14903.None;
  setTokenInfo(v6123, v6124, v6125, v6126, v6127, v6128, "protected", v6129);
  var v6130 = TokenID.Public;
  var v6131 = Reservation.TypeScriptAndJSFutureStrict;
  var v6132 = OperatorPrecedence.None;
  var v14904 = TypeScript$$22.NodeType;
  var v6133 = v14904.None;
  var v6134 = OperatorPrecedence.None;
  var v14905 = TypeScript$$22.NodeType;
  var v6135 = v14905.None;
  var v14906 = TypeScript$$22.ErrorRecoverySet;
  var v6136 = v14906.TypeScriptS;
  setTokenInfo(v6130, v6131, v6132, v6133, v6134, v6135, "public", v6136);
  var v6137 = TokenID.Return;
  var v6138 = Reservation.TypeScriptAndJS;
  var v6139 = OperatorPrecedence.None;
  var v14907 = TypeScript$$22.NodeType;
  var v6140 = v14907.None;
  var v6141 = OperatorPrecedence.None;
  var v14908 = TypeScript$$22.NodeType;
  var v6142 = v14908.None;
  var v14909 = TypeScript$$22.ErrorRecoverySet;
  var v6143 = v14909.Stmt;
  setTokenInfo(v6137, v6138, v6139, v6140, v6141, v6142, "return", v6143);
  var v6144 = TokenID.Static;
  var v6145 = Reservation.TypeScriptAndJSFutureStrict;
  var v6146 = OperatorPrecedence.None;
  var v14910 = TypeScript$$22.NodeType;
  var v6147 = v14910.None;
  var v6148 = OperatorPrecedence.None;
  var v14911 = TypeScript$$22.NodeType;
  var v6149 = v14911.None;
  var v14912 = TypeScript$$22.ErrorRecoverySet;
  var v6150 = v14912.None;
  setTokenInfo(v6144, v6145, v6146, v6147, v6148, v6149, "static", v6150);
  var v6151 = TokenID.String;
  var v6152 = Reservation.TypeScript;
  var v6153 = OperatorPrecedence.None;
  var v14913 = TypeScript$$22.NodeType;
  var v6154 = v14913.None;
  var v6155 = OperatorPrecedence.None;
  var v14914 = TypeScript$$22.NodeType;
  var v6156 = v14914.None;
  var v14915 = TypeScript$$22.ErrorRecoverySet;
  var v6157 = v14915.PrimType;
  setTokenInfo(v6151, v6152, v6153, v6154, v6155, v6156, "string", v6157);
  var v6158 = TokenID.Super;
  var v6159 = Reservation.TypeScriptAndJSFuture;
  var v6160 = OperatorPrecedence.None;
  var v14916 = TypeScript$$22.NodeType;
  var v6161 = v14916.None;
  var v6162 = OperatorPrecedence.None;
  var v14917 = TypeScript$$22.NodeType;
  var v6163 = v14917.None;
  var v14918 = TypeScript$$22.ErrorRecoverySet;
  var v6164 = v14918.RLit;
  setTokenInfo(v6158, v6159, v6160, v6161, v6162, v6163, "super", v6164);
  var v6165 = TokenID.Switch;
  var v6166 = Reservation.TypeScriptAndJS;
  var v6167 = OperatorPrecedence.None;
  var v14919 = TypeScript$$22.NodeType;
  var v6168 = v14919.None;
  var v6169 = OperatorPrecedence.None;
  var v14920 = TypeScript$$22.NodeType;
  var v6170 = v14920.None;
  var v14921 = TypeScript$$22.ErrorRecoverySet;
  var v6171 = v14921.Stmt;
  setTokenInfo(v6165, v6166, v6167, v6168, v6169, v6170, "switch", v6171);
  var v6172 = TokenID.This;
  var v6173 = Reservation.TypeScriptAndJS;
  var v6174 = OperatorPrecedence.None;
  var v14922 = TypeScript$$22.NodeType;
  var v6175 = v14922.None;
  var v6176 = OperatorPrecedence.None;
  var v14923 = TypeScript$$22.NodeType;
  var v6177 = v14923.None;
  var v14924 = TypeScript$$22.ErrorRecoverySet;
  var v6178 = v14924.RLit;
  setTokenInfo(v6172, v6173, v6174, v6175, v6176, v6177, "this", v6178);
  var v6179 = TokenID.Throw;
  var v6180 = Reservation.TypeScriptAndJS;
  var v6181 = OperatorPrecedence.None;
  var v14925 = TypeScript$$22.NodeType;
  var v6182 = v14925.None;
  var v6183 = OperatorPrecedence.None;
  var v14926 = TypeScript$$22.NodeType;
  var v6184 = v14926.None;
  var v14927 = TypeScript$$22.ErrorRecoverySet;
  var v6185 = v14927.Stmt;
  setTokenInfo(v6179, v6180, v6181, v6182, v6183, v6184, "throw", v6185);
  var v6186 = TokenID.True;
  var v6187 = Reservation.TypeScriptAndJS;
  var v6188 = OperatorPrecedence.None;
  var v14928 = TypeScript$$22.NodeType;
  var v6189 = v14928.None;
  var v6190 = OperatorPrecedence.None;
  var v14929 = TypeScript$$22.NodeType;
  var v6191 = v14929.None;
  var v14930 = TypeScript$$22.ErrorRecoverySet;
  var v6192 = v14930.RLit;
  setTokenInfo(v6186, v6187, v6188, v6189, v6190, v6191, "true", v6192);
  var v6193 = TokenID.Try;
  var v6194 = Reservation.TypeScriptAndJS;
  var v6195 = OperatorPrecedence.None;
  var v14931 = TypeScript$$22.NodeType;
  var v6196 = v14931.None;
  var v6197 = OperatorPrecedence.None;
  var v14932 = TypeScript$$22.NodeType;
  var v6198 = v14932.None;
  var v14933 = TypeScript$$22.ErrorRecoverySet;
  var v6199 = v14933.Stmt;
  setTokenInfo(v6193, v6194, v6195, v6196, v6197, v6198, "try", v6199);
  var v6200 = TokenID.TypeOf;
  var v6201 = Reservation.TypeScriptAndJS;
  var v6202 = OperatorPrecedence.None;
  var v14934 = TypeScript$$22.NodeType;
  var v6203 = v14934.None;
  var v6204 = OperatorPrecedence.Unary;
  var v14935 = TypeScript$$22.NodeType;
  var v6205 = v14935.Typeof;
  var v14936 = TypeScript$$22.ErrorRecoverySet;
  var v6206 = v14936.Prefix;
  setTokenInfo(v6200, v6201, v6202, v6203, v6204, v6205, "typeof", v6206);
  var v6207 = TokenID.Var;
  var v6208 = Reservation.TypeScriptAndJS;
  var v6209 = OperatorPrecedence.None;
  var v14937 = TypeScript$$22.NodeType;
  var v6210 = v14937.None;
  var v6211 = OperatorPrecedence.None;
  var v14938 = TypeScript$$22.NodeType;
  var v6212 = v14938.None;
  var v14939 = TypeScript$$22.ErrorRecoverySet;
  var v6213 = v14939.Var;
  setTokenInfo(v6207, v6208, v6209, v6210, v6211, v6212, "var", v6213);
  var v6214 = TokenID.Void;
  var v6215 = Reservation.TypeScriptAndJS;
  var v6216 = OperatorPrecedence.None;
  var v14940 = TypeScript$$22.NodeType;
  var v6217 = v14940.None;
  var v6218 = OperatorPrecedence.Unary;
  var v14941 = TypeScript$$22.NodeType;
  var v6219 = v14941.Void;
  var v14942 = TypeScript$$22.ErrorRecoverySet;
  var v6220 = v14942.Prefix;
  setTokenInfo(v6214, v6215, v6216, v6217, v6218, v6219, "void", v6220);
  var v6221 = TokenID.With;
  var v6222 = Reservation.TypeScriptAndJS;
  var v6223 = OperatorPrecedence.None;
  var v14943 = TypeScript$$22.NodeType;
  var v6224 = v14943.None;
  var v6225 = OperatorPrecedence.None;
  var v14944 = TypeScript$$22.NodeType;
  var v6226 = v14944.With;
  var v14945 = TypeScript$$22.ErrorRecoverySet;
  var v6227 = v14945.Stmt;
  setTokenInfo(v6221, v6222, v6223, v6224, v6225, v6226, "with", v6227);
  var v6228 = TokenID.While;
  var v6229 = Reservation.TypeScriptAndJS;
  var v6230 = OperatorPrecedence.None;
  var v14946 = TypeScript$$22.NodeType;
  var v6231 = v14946.None;
  var v6232 = OperatorPrecedence.None;
  var v14947 = TypeScript$$22.NodeType;
  var v6233 = v14947.None;
  var v14948 = TypeScript$$22.ErrorRecoverySet;
  var v6234 = v14948.While;
  setTokenInfo(v6228, v6229, v6230, v6231, v6232, v6233, "while", v6234);
  var v6235 = TokenID.Yield;
  var v6236 = Reservation.JavascriptFutureStrict;
  var v6237 = OperatorPrecedence.None;
  var v14949 = TypeScript$$22.NodeType;
  var v6238 = v14949.None;
  var v6239 = OperatorPrecedence.None;
  var v14950 = TypeScript$$22.NodeType;
  var v6240 = v14950.None;
  var v14951 = TypeScript$$22.ErrorRecoverySet;
  var v6241 = v14951.None;
  setTokenInfo(v6235, v6236, v6237, v6238, v6239, v6240, "yield", v6241);
  var v6242 = TokenID.Identifier;
  var v6243 = Reservation.None;
  var v6244 = OperatorPrecedence.None;
  var v14952 = TypeScript$$22.NodeType;
  var v6245 = v14952.None;
  var v6246 = OperatorPrecedence.None;
  var v14953 = TypeScript$$22.NodeType;
  var v6247 = v14953.None;
  var v14954 = TypeScript$$22.ErrorRecoverySet;
  var v6248 = v14954.ID;
  setTokenInfo(v6242, v6243, v6244, v6245, v6246, v6247, "identifier", v6248);
  var v6249 = TokenID.NumberLiteral;
  var v6250 = Reservation.None;
  var v6251 = OperatorPrecedence.None;
  var v14955 = TypeScript$$22.NodeType;
  var v6252 = v14955.None;
  var v6253 = OperatorPrecedence.None;
  var v14956 = TypeScript$$22.NodeType;
  var v6254 = v14956.None;
  var v14957 = TypeScript$$22.ErrorRecoverySet;
  var v6255 = v14957.Literal;
  setTokenInfo(v6249, v6250, v6251, v6252, v6253, v6254, "numberLiteral", v6255);
  var v6256 = TokenID.RegularExpressionLiteral;
  var v6257 = Reservation.None;
  var v6258 = OperatorPrecedence.None;
  var v14958 = TypeScript$$22.NodeType;
  var v6259 = v14958.None;
  var v6260 = OperatorPrecedence.None;
  var v14959 = TypeScript$$22.NodeType;
  var v6261 = v14959.None;
  var v14960 = TypeScript$$22.ErrorRecoverySet;
  var v6262 = v14960.RegExp;
  setTokenInfo(v6256, v6257, v6258, v6259, v6260, v6261, "regex", v6262);
  var v6263 = TokenID.StringLiteral;
  var v6264 = Reservation.None;
  var v6265 = OperatorPrecedence.None;
  var v14961 = TypeScript$$22.NodeType;
  var v6266 = v14961.None;
  var v6267 = OperatorPrecedence.None;
  var v14962 = TypeScript$$22.NodeType;
  var v6268 = v14962.None;
  var v14963 = TypeScript$$22.ErrorRecoverySet;
  var v6269 = v14963.Literal;
  setTokenInfo(v6263, v6264, v6265, v6266, v6267, v6268, "qstring", v6269);
  var v6270 = TokenID.Semicolon;
  var v6271 = Reservation.None;
  var v6272 = OperatorPrecedence.None;
  var v14964 = TypeScript$$22.NodeType;
  var v6273 = v14964.None;
  var v6274 = OperatorPrecedence.None;
  var v14965 = TypeScript$$22.NodeType;
  var v6275 = v14965.None;
  var v14966 = TypeScript$$22.ErrorRecoverySet;
  var v6276 = v14966.SColon;
  setTokenInfo(v6270, v6271, v6272, v6273, v6274, v6275, ";", v6276);
  var v6277 = TokenID.CloseParen;
  var v6278 = Reservation.None;
  var v6279 = OperatorPrecedence.None;
  var v14967 = TypeScript$$22.NodeType;
  var v6280 = v14967.None;
  var v6281 = OperatorPrecedence.None;
  var v14968 = TypeScript$$22.NodeType;
  var v6282 = v14968.None;
  var v14969 = TypeScript$$22.ErrorRecoverySet;
  var v6283 = v14969.RParen;
  setTokenInfo(v6277, v6278, v6279, v6280, v6281, v6282, ")", v6283);
  var v6284 = TokenID.CloseBracket;
  var v6285 = Reservation.None;
  var v6286 = OperatorPrecedence.None;
  var v14970 = TypeScript$$22.NodeType;
  var v6287 = v14970.None;
  var v6288 = OperatorPrecedence.None;
  var v14971 = TypeScript$$22.NodeType;
  var v6289 = v14971.None;
  var v14972 = TypeScript$$22.ErrorRecoverySet;
  var v6290 = v14972.RBrack;
  setTokenInfo(v6284, v6285, v6286, v6287, v6288, v6289, "]", v6290);
  var v6291 = TokenID.OpenBrace;
  var v6292 = Reservation.None;
  var v6293 = OperatorPrecedence.None;
  var v14973 = TypeScript$$22.NodeType;
  var v6294 = v14973.None;
  var v6295 = OperatorPrecedence.None;
  var v14974 = TypeScript$$22.NodeType;
  var v6296 = v14974.None;
  var v14975 = TypeScript$$22.ErrorRecoverySet;
  var v6297 = v14975.LCurly;
  setTokenInfo(v6291, v6292, v6293, v6294, v6295, v6296, "{", v6297);
  var v6298 = TokenID.CloseBrace;
  var v6299 = Reservation.None;
  var v6300 = OperatorPrecedence.None;
  var v14976 = TypeScript$$22.NodeType;
  var v6301 = v14976.None;
  var v6302 = OperatorPrecedence.None;
  var v14977 = TypeScript$$22.NodeType;
  var v6303 = v14977.None;
  var v14978 = TypeScript$$22.ErrorRecoverySet;
  var v6304 = v14978.RCurly;
  setTokenInfo(v6298, v6299, v6300, v6301, v6302, v6303, "}", v6304);
  var v6305 = TokenID.DotDotDot;
  var v6306 = Reservation.None;
  var v6307 = OperatorPrecedence.None;
  var v14979 = TypeScript$$22.NodeType;
  var v6308 = v14979.None;
  var v6309 = OperatorPrecedence.None;
  var v14980 = TypeScript$$22.NodeType;
  var v6310 = v14980.None;
  var v14981 = TypeScript$$22.ErrorRecoverySet;
  var v6311 = v14981.None;
  setTokenInfo(v6305, v6306, v6307, v6308, v6309, v6310, "...", v6311);
  var v6312 = TokenID.Comma;
  var v6313 = Reservation.None;
  var v6314 = OperatorPrecedence.Comma;
  var v14982 = TypeScript$$22.NodeType;
  var v6315 = v14982.Comma;
  var v6316 = OperatorPrecedence.None;
  var v14983 = TypeScript$$22.NodeType;
  var v6317 = v14983.None;
  var v14984 = TypeScript$$22.ErrorRecoverySet;
  var v6318 = v14984.Comma;
  setTokenInfo(v6312, v6313, v6314, v6315, v6316, v6317, ",", v6318);
  var v6319 = TokenID.Equals;
  var v6320 = Reservation.None;
  var v6321 = OperatorPrecedence.Assignment;
  var v14985 = TypeScript$$22.NodeType;
  var v6322 = v14985.Asg;
  var v6323 = OperatorPrecedence.None;
  var v14986 = TypeScript$$22.NodeType;
  var v6324 = v14986.None;
  var v14987 = TypeScript$$22.ErrorRecoverySet;
  var v6325 = v14987.Asg;
  setTokenInfo(v6319, v6320, v6321, v6322, v6323, v6324, "=", v6325);
  var v6326 = TokenID.PlusEquals;
  var v6327 = Reservation.None;
  var v6328 = OperatorPrecedence.Assignment;
  var v14988 = TypeScript$$22.NodeType;
  var v6329 = v14988.AsgAdd;
  var v6330 = OperatorPrecedence.None;
  var v14989 = TypeScript$$22.NodeType;
  var v6331 = v14989.None;
  var v14990 = TypeScript$$22.ErrorRecoverySet;
  var v6332 = v14990.BinOp;
  setTokenInfo(v6326, v6327, v6328, v6329, v6330, v6331, "+=", v6332);
  var v6333 = TokenID.MinusEquals;
  var v6334 = Reservation.None;
  var v6335 = OperatorPrecedence.Assignment;
  var v14991 = TypeScript$$22.NodeType;
  var v6336 = v14991.AsgSub;
  var v6337 = OperatorPrecedence.None;
  var v14992 = TypeScript$$22.NodeType;
  var v6338 = v14992.None;
  var v14993 = TypeScript$$22.ErrorRecoverySet;
  var v6339 = v14993.BinOp;
  setTokenInfo(v6333, v6334, v6335, v6336, v6337, v6338, "-=", v6339);
  var v6340 = TokenID.AsteriskEquals;
  var v6341 = Reservation.None;
  var v6342 = OperatorPrecedence.Assignment;
  var v14994 = TypeScript$$22.NodeType;
  var v6343 = v14994.AsgMul;
  var v6344 = OperatorPrecedence.None;
  var v14995 = TypeScript$$22.NodeType;
  var v6345 = v14995.None;
  var v14996 = TypeScript$$22.ErrorRecoverySet;
  var v6346 = v14996.BinOp;
  setTokenInfo(v6340, v6341, v6342, v6343, v6344, v6345, "*=", v6346);
  var v6347 = TokenID.SlashEquals;
  var v6348 = Reservation.None;
  var v6349 = OperatorPrecedence.Assignment;
  var v14997 = TypeScript$$22.NodeType;
  var v6350 = v14997.AsgDiv;
  var v6351 = OperatorPrecedence.None;
  var v14998 = TypeScript$$22.NodeType;
  var v6352 = v14998.None;
  var v14999 = TypeScript$$22.ErrorRecoverySet;
  var v6353 = v14999.BinOp;
  setTokenInfo(v6347, v6348, v6349, v6350, v6351, v6352, "/=", v6353);
  var v6354 = TokenID.PercentEquals;
  var v6355 = Reservation.None;
  var v6356 = OperatorPrecedence.Assignment;
  var v15000 = TypeScript$$22.NodeType;
  var v6357 = v15000.AsgMod;
  var v6358 = OperatorPrecedence.None;
  var v15001 = TypeScript$$22.NodeType;
  var v6359 = v15001.None;
  var v15002 = TypeScript$$22.ErrorRecoverySet;
  var v6360 = v15002.BinOp;
  setTokenInfo(v6354, v6355, v6356, v6357, v6358, v6359, "%=", v6360);
  var v6361 = TokenID.AmpersandEquals;
  var v6362 = Reservation.None;
  var v6363 = OperatorPrecedence.Assignment;
  var v15003 = TypeScript$$22.NodeType;
  var v6364 = v15003.AsgAnd;
  var v6365 = OperatorPrecedence.None;
  var v15004 = TypeScript$$22.NodeType;
  var v6366 = v15004.None;
  var v15005 = TypeScript$$22.ErrorRecoverySet;
  var v6367 = v15005.BinOp;
  setTokenInfo(v6361, v6362, v6363, v6364, v6365, v6366, "&=", v6367);
  var v6368 = TokenID.CaretEquals;
  var v6369 = Reservation.None;
  var v6370 = OperatorPrecedence.Assignment;
  var v15006 = TypeScript$$22.NodeType;
  var v6371 = v15006.AsgXor;
  var v6372 = OperatorPrecedence.None;
  var v15007 = TypeScript$$22.NodeType;
  var v6373 = v15007.None;
  var v15008 = TypeScript$$22.ErrorRecoverySet;
  var v6374 = v15008.BinOp;
  setTokenInfo(v6368, v6369, v6370, v6371, v6372, v6373, "^=", v6374);
  var v6375 = TokenID.BarEquals;
  var v6376 = Reservation.None;
  var v6377 = OperatorPrecedence.Assignment;
  var v15009 = TypeScript$$22.NodeType;
  var v6378 = v15009.AsgOr;
  var v6379 = OperatorPrecedence.None;
  var v15010 = TypeScript$$22.NodeType;
  var v6380 = v15010.None;
  var v15011 = TypeScript$$22.ErrorRecoverySet;
  var v6381 = v15011.BinOp;
  setTokenInfo(v6375, v6376, v6377, v6378, v6379, v6380, "|=", v6381);
  var v6382 = TokenID.LessThanLessThanEquals;
  var v6383 = Reservation.None;
  var v6384 = OperatorPrecedence.Assignment;
  var v15012 = TypeScript$$22.NodeType;
  var v6385 = v15012.AsgLsh;
  var v6386 = OperatorPrecedence.None;
  var v15013 = TypeScript$$22.NodeType;
  var v6387 = v15013.None;
  var v15014 = TypeScript$$22.ErrorRecoverySet;
  var v6388 = v15014.BinOp;
  setTokenInfo(v6382, v6383, v6384, v6385, v6386, v6387, "<<=", v6388);
  var v6389 = TokenID.GreaterThanGreaterThanEquals;
  var v6390 = Reservation.None;
  var v6391 = OperatorPrecedence.Assignment;
  var v15015 = TypeScript$$22.NodeType;
  var v6392 = v15015.AsgRsh;
  var v6393 = OperatorPrecedence.None;
  var v15016 = TypeScript$$22.NodeType;
  var v6394 = v15016.None;
  var v15017 = TypeScript$$22.ErrorRecoverySet;
  var v6395 = v15017.BinOp;
  setTokenInfo(v6389, v6390, v6391, v6392, v6393, v6394, ">>=", v6395);
  var v6396 = TokenID.GreaterThanGreaterThanGreaterThanEquals;
  var v6397 = Reservation.None;
  var v6398 = OperatorPrecedence.Assignment;
  var v15018 = TypeScript$$22.NodeType;
  var v6399 = v15018.AsgRs2;
  var v6400 = OperatorPrecedence.None;
  var v15019 = TypeScript$$22.NodeType;
  var v6401 = v15019.None;
  var v15020 = TypeScript$$22.ErrorRecoverySet;
  var v6402 = v15020.BinOp;
  setTokenInfo(v6396, v6397, v6398, v6399, v6400, v6401, ">>>=", v6402);
  var v6403 = TokenID.Question;
  var v6404 = Reservation.None;
  var v6405 = OperatorPrecedence.Conditional;
  var v15021 = TypeScript$$22.NodeType;
  var v6406 = v15021.ConditionalExpression;
  var v6407 = OperatorPrecedence.None;
  var v15022 = TypeScript$$22.NodeType;
  var v6408 = v15022.None;
  var v15023 = TypeScript$$22.ErrorRecoverySet;
  var v6409 = v15023.BinOp;
  setTokenInfo(v6403, v6404, v6405, v6406, v6407, v6408, "?", v6409);
  var v6410 = TokenID.Colon;
  var v6411 = Reservation.None;
  var v6412 = OperatorPrecedence.None;
  var v15024 = TypeScript$$22.NodeType;
  var v6413 = v15024.None;
  var v6414 = OperatorPrecedence.None;
  var v15025 = TypeScript$$22.NodeType;
  var v6415 = v15025.None;
  var v15026 = TypeScript$$22.ErrorRecoverySet;
  var v6416 = v15026.Colon;
  setTokenInfo(v6410, v6411, v6412, v6413, v6414, v6415, ":", v6416);
  var v6417 = TokenID.BarBar;
  var v6418 = Reservation.None;
  var v6419 = OperatorPrecedence.LogicalOr;
  var v15027 = TypeScript$$22.NodeType;
  var v6420 = v15027.LogOr;
  var v6421 = OperatorPrecedence.None;
  var v15028 = TypeScript$$22.NodeType;
  var v6422 = v15028.None;
  var v15029 = TypeScript$$22.ErrorRecoverySet;
  var v6423 = v15029.BinOp;
  setTokenInfo(v6417, v6418, v6419, v6420, v6421, v6422, "||", v6423);
  var v6424 = TokenID.AmpersandAmpersand;
  var v6425 = Reservation.None;
  var v6426 = OperatorPrecedence.LogicalAnd;
  var v15030 = TypeScript$$22.NodeType;
  var v6427 = v15030.LogAnd;
  var v6428 = OperatorPrecedence.None;
  var v15031 = TypeScript$$22.NodeType;
  var v6429 = v15031.None;
  var v15032 = TypeScript$$22.ErrorRecoverySet;
  var v6430 = v15032.BinOp;
  setTokenInfo(v6424, v6425, v6426, v6427, v6428, v6429, "&&", v6430);
  var v6431 = TokenID.Bar;
  var v6432 = Reservation.None;
  var v6433 = OperatorPrecedence.BitwiseOr;
  var v15033 = TypeScript$$22.NodeType;
  var v6434 = v15033.Or;
  var v6435 = OperatorPrecedence.None;
  var v15034 = TypeScript$$22.NodeType;
  var v6436 = v15034.None;
  var v15035 = TypeScript$$22.ErrorRecoverySet;
  var v6437 = v15035.BinOp;
  setTokenInfo(v6431, v6432, v6433, v6434, v6435, v6436, "|", v6437);
  var v6438 = TokenID.Caret;
  var v6439 = Reservation.None;
  var v6440 = OperatorPrecedence.BitwiseExclusiveOr;
  var v15036 = TypeScript$$22.NodeType;
  var v6441 = v15036.Xor;
  var v6442 = OperatorPrecedence.None;
  var v15037 = TypeScript$$22.NodeType;
  var v6443 = v15037.None;
  var v15038 = TypeScript$$22.ErrorRecoverySet;
  var v6444 = v15038.BinOp;
  setTokenInfo(v6438, v6439, v6440, v6441, v6442, v6443, "^", v6444);
  var v6445 = TokenID.And;
  var v6446 = Reservation.None;
  var v6447 = OperatorPrecedence.BitwiseAnd;
  var v15039 = TypeScript$$22.NodeType;
  var v6448 = v15039.And;
  var v6449 = OperatorPrecedence.None;
  var v15040 = TypeScript$$22.NodeType;
  var v6450 = v15040.None;
  var v15041 = TypeScript$$22.ErrorRecoverySet;
  var v6451 = v15041.BinOp;
  setTokenInfo(v6445, v6446, v6447, v6448, v6449, v6450, "&", v6451);
  var v6452 = TokenID.EqualsEquals;
  var v6453 = Reservation.None;
  var v6454 = OperatorPrecedence.Equality;
  var v15042 = TypeScript$$22.NodeType;
  var v6455 = v15042.Eq;
  var v6456 = OperatorPrecedence.None;
  var v15043 = TypeScript$$22.NodeType;
  var v6457 = v15043.None;
  var v15044 = TypeScript$$22.ErrorRecoverySet;
  var v6458 = v15044.BinOp;
  setTokenInfo(v6452, v6453, v6454, v6455, v6456, v6457, "==", v6458);
  var v6459 = TokenID.ExclamationEquals;
  var v6460 = Reservation.None;
  var v6461 = OperatorPrecedence.Equality;
  var v15045 = TypeScript$$22.NodeType;
  var v6462 = v15045.Ne;
  var v6463 = OperatorPrecedence.None;
  var v15046 = TypeScript$$22.NodeType;
  var v6464 = v15046.None;
  var v15047 = TypeScript$$22.ErrorRecoverySet;
  var v6465 = v15047.BinOp;
  setTokenInfo(v6459, v6460, v6461, v6462, v6463, v6464, "!=", v6465);
  var v6466 = TokenID.EqualsEqualsEquals;
  var v6467 = Reservation.None;
  var v6468 = OperatorPrecedence.Equality;
  var v15048 = TypeScript$$22.NodeType;
  var v6469 = v15048.Eqv;
  var v6470 = OperatorPrecedence.None;
  var v15049 = TypeScript$$22.NodeType;
  var v6471 = v15049.None;
  var v15050 = TypeScript$$22.ErrorRecoverySet;
  var v6472 = v15050.BinOp;
  setTokenInfo(v6466, v6467, v6468, v6469, v6470, v6471, "===", v6472);
  var v6473 = TokenID.ExclamationEqualsEquals;
  var v6474 = Reservation.None;
  var v6475 = OperatorPrecedence.Equality;
  var v15051 = TypeScript$$22.NodeType;
  var v6476 = v15051.NEqv;
  var v6477 = OperatorPrecedence.None;
  var v15052 = TypeScript$$22.NodeType;
  var v6478 = v15052.None;
  var v15053 = TypeScript$$22.ErrorRecoverySet;
  var v6479 = v15053.BinOp;
  setTokenInfo(v6473, v6474, v6475, v6476, v6477, v6478, "!==", v6479);
  var v6480 = TokenID.LessThan;
  var v6481 = Reservation.None;
  var v6482 = OperatorPrecedence.Relational;
  var v15054 = TypeScript$$22.NodeType;
  var v6483 = v15054.Lt;
  var v6484 = OperatorPrecedence.None;
  var v15055 = TypeScript$$22.NodeType;
  var v6485 = v15055.None;
  var v15056 = TypeScript$$22.ErrorRecoverySet;
  var v6486 = v15056.BinOp;
  setTokenInfo(v6480, v6481, v6482, v6483, v6484, v6485, "<", v6486);
  var v6487 = TokenID.LessThanEquals;
  var v6488 = Reservation.None;
  var v6489 = OperatorPrecedence.Relational;
  var v15057 = TypeScript$$22.NodeType;
  var v6490 = v15057.Le;
  var v6491 = OperatorPrecedence.None;
  var v15058 = TypeScript$$22.NodeType;
  var v6492 = v15058.None;
  var v15059 = TypeScript$$22.ErrorRecoverySet;
  var v6493 = v15059.BinOp;
  setTokenInfo(v6487, v6488, v6489, v6490, v6491, v6492, "<=", v6493);
  var v6494 = TokenID.GreaterThan;
  var v6495 = Reservation.None;
  var v6496 = OperatorPrecedence.Relational;
  var v15060 = TypeScript$$22.NodeType;
  var v6497 = v15060.Gt;
  var v6498 = OperatorPrecedence.None;
  var v15061 = TypeScript$$22.NodeType;
  var v6499 = v15061.None;
  var v15062 = TypeScript$$22.ErrorRecoverySet;
  var v6500 = v15062.BinOp;
  setTokenInfo(v6494, v6495, v6496, v6497, v6498, v6499, ">", v6500);
  var v6501 = TokenID.GreaterThanEquals;
  var v6502 = Reservation.None;
  var v6503 = OperatorPrecedence.Relational;
  var v15063 = TypeScript$$22.NodeType;
  var v6504 = v15063.Ge;
  var v6505 = OperatorPrecedence.None;
  var v15064 = TypeScript$$22.NodeType;
  var v6506 = v15064.None;
  var v15065 = TypeScript$$22.ErrorRecoverySet;
  var v6507 = v15065.BinOp;
  setTokenInfo(v6501, v6502, v6503, v6504, v6505, v6506, ">=", v6507);
  var v6508 = TokenID.LessThanLessThan;
  var v6509 = Reservation.None;
  var v6510 = OperatorPrecedence.Shift;
  var v15066 = TypeScript$$22.NodeType;
  var v6511 = v15066.Lsh;
  var v6512 = OperatorPrecedence.None;
  var v15067 = TypeScript$$22.NodeType;
  var v6513 = v15067.None;
  var v15068 = TypeScript$$22.ErrorRecoverySet;
  var v6514 = v15068.BinOp;
  setTokenInfo(v6508, v6509, v6510, v6511, v6512, v6513, "<<", v6514);
  var v6515 = TokenID.GreaterThanGreaterThan;
  var v6516 = Reservation.None;
  var v6517 = OperatorPrecedence.Shift;
  var v15069 = TypeScript$$22.NodeType;
  var v6518 = v15069.Rsh;
  var v6519 = OperatorPrecedence.None;
  var v15070 = TypeScript$$22.NodeType;
  var v6520 = v15070.None;
  var v15071 = TypeScript$$22.ErrorRecoverySet;
  var v6521 = v15071.BinOp;
  setTokenInfo(v6515, v6516, v6517, v6518, v6519, v6520, ">>", v6521);
  var v6522 = TokenID.GreaterThanGreaterThanGreaterThan;
  var v6523 = Reservation.None;
  var v6524 = OperatorPrecedence.Shift;
  var v15072 = TypeScript$$22.NodeType;
  var v6525 = v15072.Rs2;
  var v6526 = OperatorPrecedence.None;
  var v15073 = TypeScript$$22.NodeType;
  var v6527 = v15073.None;
  var v15074 = TypeScript$$22.ErrorRecoverySet;
  var v6528 = v15074.BinOp;
  setTokenInfo(v6522, v6523, v6524, v6525, v6526, v6527, ">>>", v6528);
  var v6529 = TokenID.Plus;
  var v6530 = Reservation.None;
  var v6531 = OperatorPrecedence.Additive;
  var v15075 = TypeScript$$22.NodeType;
  var v6532 = v15075.Add;
  var v6533 = OperatorPrecedence.Unary;
  var v15076 = TypeScript$$22.NodeType;
  var v6534 = v15076.Pos;
  var v15077 = TypeScript$$22.ErrorRecoverySet;
  var v6535 = v15077.AddOp;
  setTokenInfo(v6529, v6530, v6531, v6532, v6533, v6534, "+", v6535);
  var v6536 = TokenID.Minus;
  var v6537 = Reservation.None;
  var v6538 = OperatorPrecedence.Additive;
  var v15078 = TypeScript$$22.NodeType;
  var v6539 = v15078.Sub;
  var v6540 = OperatorPrecedence.Unary;
  var v15079 = TypeScript$$22.NodeType;
  var v6541 = v15079.Neg;
  var v15080 = TypeScript$$22.ErrorRecoverySet;
  var v6542 = v15080.AddOp;
  setTokenInfo(v6536, v6537, v6538, v6539, v6540, v6541, "-", v6542);
  var v6543 = TokenID.Asterisk;
  var v6544 = Reservation.None;
  var v6545 = OperatorPrecedence.Multiplicative;
  var v15081 = TypeScript$$22.NodeType;
  var v6546 = v15081.Mul;
  var v6547 = OperatorPrecedence.None;
  var v15082 = TypeScript$$22.NodeType;
  var v6548 = v15082.None;
  var v15083 = TypeScript$$22.ErrorRecoverySet;
  var v6549 = v15083.BinOp;
  setTokenInfo(v6543, v6544, v6545, v6546, v6547, v6548, "*", v6549);
  var v6550 = TokenID.Slash;
  var v6551 = Reservation.None;
  var v6552 = OperatorPrecedence.Multiplicative;
  var v15084 = TypeScript$$22.NodeType;
  var v6553 = v15084.Div;
  var v6554 = OperatorPrecedence.None;
  var v15085 = TypeScript$$22.NodeType;
  var v6555 = v15085.None;
  var v15086 = TypeScript$$22.ErrorRecoverySet;
  var v6556 = v15086.BinOp;
  setTokenInfo(v6550, v6551, v6552, v6553, v6554, v6555, "/", v6556);
  var v6557 = TokenID.Percent;
  var v6558 = Reservation.None;
  var v6559 = OperatorPrecedence.Multiplicative;
  var v15087 = TypeScript$$22.NodeType;
  var v6560 = v15087.Mod;
  var v6561 = OperatorPrecedence.None;
  var v15088 = TypeScript$$22.NodeType;
  var v6562 = v15088.None;
  var v15089 = TypeScript$$22.ErrorRecoverySet;
  var v6563 = v15089.BinOp;
  setTokenInfo(v6557, v6558, v6559, v6560, v6561, v6562, "%", v6563);
  var v6564 = TokenID.Tilde;
  var v6565 = Reservation.None;
  var v6566 = OperatorPrecedence.None;
  var v15090 = TypeScript$$22.NodeType;
  var v6567 = v15090.None;
  var v6568 = OperatorPrecedence.Unary;
  var v15091 = TypeScript$$22.NodeType;
  var v6569 = v15091.Not;
  var v15092 = TypeScript$$22.ErrorRecoverySet;
  var v6570 = v15092.PreOp;
  setTokenInfo(v6564, v6565, v6566, v6567, v6568, v6569, "~", v6570);
  var v6571 = TokenID.Exclamation;
  var v6572 = Reservation.None;
  var v6573 = OperatorPrecedence.None;
  var v15093 = TypeScript$$22.NodeType;
  var v6574 = v15093.None;
  var v6575 = OperatorPrecedence.Unary;
  var v15094 = TypeScript$$22.NodeType;
  var v6576 = v15094.LogNot;
  var v15095 = TypeScript$$22.ErrorRecoverySet;
  var v6577 = v15095.PreOp;
  setTokenInfo(v6571, v6572, v6573, v6574, v6575, v6576, "!", v6577);
  var v6578 = TokenID.PlusPlus;
  var v6579 = Reservation.None;
  var v6580 = OperatorPrecedence.None;
  var v15096 = TypeScript$$22.NodeType;
  var v6581 = v15096.None;
  var v6582 = OperatorPrecedence.Unary;
  var v15097 = TypeScript$$22.NodeType;
  var v6583 = v15097.IncPre;
  var v15098 = TypeScript$$22.ErrorRecoverySet;
  var v6584 = v15098.PreOp;
  setTokenInfo(v6578, v6579, v6580, v6581, v6582, v6583, "++", v6584);
  var v6585 = TokenID.MinusMinus;
  var v6586 = Reservation.None;
  var v6587 = OperatorPrecedence.None;
  var v15099 = TypeScript$$22.NodeType;
  var v6588 = v15099.None;
  var v6589 = OperatorPrecedence.Unary;
  var v15100 = TypeScript$$22.NodeType;
  var v6590 = v15100.DecPre;
  var v15101 = TypeScript$$22.ErrorRecoverySet;
  var v6591 = v15101.PreOp;
  setTokenInfo(v6585, v6586, v6587, v6588, v6589, v6590, "--", v6591);
  var v6592 = TokenID.OpenParen;
  var v6593 = Reservation.None;
  var v6594 = OperatorPrecedence.None;
  var v15102 = TypeScript$$22.NodeType;
  var v6595 = v15102.None;
  var v6596 = OperatorPrecedence.None;
  var v15103 = TypeScript$$22.NodeType;
  var v6597 = v15103.None;
  var v15104 = TypeScript$$22.ErrorRecoverySet;
  var v6598 = v15104.LParen;
  setTokenInfo(v6592, v6593, v6594, v6595, v6596, v6597, "(", v6598);
  var v6599 = TokenID.OpenBracket;
  var v6600 = Reservation.None;
  var v6601 = OperatorPrecedence.None;
  var v15105 = TypeScript$$22.NodeType;
  var v6602 = v15105.None;
  var v6603 = OperatorPrecedence.None;
  var v15106 = TypeScript$$22.NodeType;
  var v6604 = v15106.None;
  var v15107 = TypeScript$$22.ErrorRecoverySet;
  var v6605 = v15107.LBrack;
  setTokenInfo(v6599, v6600, v6601, v6602, v6603, v6604, "[", v6605);
  var v6606 = TokenID.Dot;
  var v6607 = Reservation.None;
  var v6608 = OperatorPrecedence.Unary;
  var v15108 = TypeScript$$22.NodeType;
  var v6609 = v15108.None;
  var v6610 = OperatorPrecedence.None;
  var v15109 = TypeScript$$22.NodeType;
  var v6611 = v15109.None;
  var v15110 = TypeScript$$22.ErrorRecoverySet;
  var v6612 = v15110.Dot;
  setTokenInfo(v6606, v6607, v6608, v6609, v6610, v6611, ".", v6612);
  var v6613 = TokenID.EndOfFile;
  var v6614 = Reservation.None;
  var v6615 = OperatorPrecedence.None;
  var v15111 = TypeScript$$22.NodeType;
  var v6616 = v15111.None;
  var v6617 = OperatorPrecedence.None;
  var v15112 = TypeScript$$22.NodeType;
  var v6618 = v15112.None;
  var v15113 = TypeScript$$22.ErrorRecoverySet;
  var v6619 = v15113.EOF;
  setTokenInfo(v6613, v6614, v6615, v6616, v6617, v6618, "<EOF>", v6619);
  var v6620 = TokenID.EqualsGreaterThan;
  var v6621 = Reservation.None;
  var v6622 = OperatorPrecedence.None;
  var v15114 = TypeScript$$22.NodeType;
  var v6623 = v15114.None;
  var v6624 = OperatorPrecedence.None;
  var v15115 = TypeScript$$22.NodeType;
  var v6625 = v15115.None;
  var v15116 = TypeScript$$22.ErrorRecoverySet;
  var v6626 = v15116.None;
  setTokenInfo(v6620, v6621, v6622, v6623, v6624, v6625, "=>", v6626);
  TypeScript$$22.lookupToken = lookupToken;
  var v15117 = TypeScript$$22.TokenClass;
  var v20149 = !v15117;
  if (v20149) {
    v15117 = TypeScript$$22.TokenClass = {};
  }
  var v6627 = v15117;
  v867(v6627);
  var TokenClass = TypeScript$$22.TokenClass;
  var SavedToken = v868();
  TypeScript$$22.SavedToken = SavedToken;
  var Token = v873();
  TypeScript$$22.Token = Token;
  var NumberLiteralToken = v876(Token);
  TypeScript$$22.NumberLiteralToken = NumberLiteralToken;
  var StringLiteralToken = v879(Token);
  TypeScript$$22.StringLiteralToken = StringLiteralToken;
  var IdentifierToken = v882(Token);
  TypeScript$$22.IdentifierToken = IdentifierToken;
  var WhitespaceToken = v885(Token);
  TypeScript$$22.WhitespaceToken = WhitespaceToken;
  var CommentToken = v888(Token);
  TypeScript$$22.CommentToken = CommentToken;
  var RegularExpressionLiteralToken = v891(Token);
  TypeScript$$22.RegularExpressionLiteralToken = RegularExpressionLiteralToken;
  var v6628 = TypeScript$$22;
  var v26667 = new Array;
  v6628.staticTokens = v26667;
  TypeScript$$22.initializeStaticTokens = initializeStaticTokens;
  return;
}
function v862(TypeScript$$21) {
  function v861(_super$$58) {
    function v860(name$$78, publicOnly$$23, typespace$$23) {
      var v15118 = _super$$58.prototype;
      var v6629 = v15118.findLocal;
      var sym$$27 = v6629.call(this, name$$78, publicOnly$$23, typespace$$23);
      if (sym$$27) {
        var v15119 = this.filter(sym$$27);
        var v6630 = !v15119;
        if (v6630) {
          return null;
        }
      }
      var v15120 = _super$$58.prototype;
      var v6631 = v15120.find;
      return v6631.call(this, name$$78, publicOnly$$23, typespace$$23);
    }
    function v859(filter$$6, name$$77, publicOnly$$22, typespace$$22) {
      throw new Error("please implement");
    }
    function v858(name$$76, publicOnly$$21, typespace$$21) {
      var v15121 = _super$$58.prototype;
      var v6632 = v15121.findLocal;
      var sym$$26 = v6632.call(this, name$$76, publicOnly$$21, typespace$$21);
      if (sym$$26) {
        var v15122 = this.filter(sym$$26);
        var v6633 = !v15122;
        if (v6633) {
          return null;
        }
      }
      return sym$$26;
    }
    function FilteredSymbolScopeBuilder$$1(valueMembers$$3, parent$$51, container$$10, filter$$5) {
      _super$$58.call(this, valueMembers$$3, null, null, null, parent$$51, container$$10);
      this.filter = filter$$5;
      return;
    }
    __extends(FilteredSymbolScopeBuilder$$1, _super$$58);
    var v6634 = FilteredSymbolScopeBuilder$$1.prototype;
    v6634.findLocal = v858;
    var v6635 = FilteredSymbolScopeBuilder$$1.prototype;
    v6635.search = v859;
    var v6636 = FilteredSymbolScopeBuilder$$1.prototype;
    v6636.find = v860;
    return FilteredSymbolScopeBuilder$$1;
  }
  function v857(_super$$57) {
    function v856(name$$75, publicOnly$$20, typespace$$20) {
      var v6637 = this.scope;
      return v6637.findLocal(name$$75, publicOnly$$20, typespace$$20);
    }
    function v855(name$$74, publicOnly$$19, typespace$$19) {
      var v6638 = this.filter;
      v6638.reset();
      var v6639 = this.scope;
      var v6640 = this.filter;
      return v6639.search(v6640, name$$74, publicOnly$$19, typespace$$19);
    }
    function v854(outfile$$10) {
      var v6641 = this.scope;
      v6641.print(outfile$$10);
      return;
    }
    function FilteredSymbolScope$$1(scope$$21, container$$9, filter$$4) {
      _super$$57.call(this, container$$9);
      this.scope = scope$$21;
      this.filter = filter$$4;
      return;
    }
    __extends(FilteredSymbolScope$$1, _super$$57);
    var v6642 = FilteredSymbolScope$$1.prototype;
    v6642.print = v854;
    var v6643 = FilteredSymbolScope$$1.prototype;
    v6643.find = v855;
    var v6644 = FilteredSymbolScope$$1.prototype;
    v6644.findLocal = v856;
    return FilteredSymbolScope$$1;
  }
  function v853(_super$$56) {
    function v852() {
      var v6645 = this.valueMembers;
      return v6645.allMembers;
    }
    function v851(container$$8, ast$$61, symbol$$7, errorReporter$$3, insertAsPublic, typespace$$18, ambient$$1) {
      var table$$6 = null;
      if (ambient$$1) {
        if (typespace$$18) {
          var v6646;
          var v20150 = this.ambientEnclosedTypes;
          var v15124 = v20150 == null;
          if (v15124) {
            v6646 = null;
          } else {
            var v15123;
            if (insertAsPublic) {
              var v20151 = this.ambientEnclosedTypes;
              v15123 = v20151.publicMembers;
            } else {
              var v20152 = this.ambientEnclosedTypes;
              v15123 = v20152.privateMembers;
            }
            v6646 = v15123;
          }
          table$$6 = v6646;
        } else {
          var v6647;
          var v20153 = this.ambientValueMembers;
          var v15126 = v20153 == null;
          if (v15126) {
            v6647 = null;
          } else {
            var v15125;
            if (insertAsPublic) {
              var v20154 = this.ambientValueMembers;
              v15125 = v20154.publicMembers;
            } else {
              var v20155 = this.ambientValueMembers;
              v15125 = v20155.privateMembers;
            }
            v6647 = v15125;
          }
          table$$6 = v6647;
        }
      } else {
        if (typespace$$18) {
          var v6648;
          var v20156 = this.enclosedTypes;
          var v15128 = v20156 == null;
          if (v15128) {
            v6648 = null;
          } else {
            var v15127;
            if (insertAsPublic) {
              var v20157 = this.enclosedTypes;
              v15127 = v20157.publicMembers;
            } else {
              var v20158 = this.enclosedTypes;
              v15127 = v20158.privateMembers;
            }
            v6648 = v15127;
          }
          table$$6 = v6648;
        } else {
          var v6649;
          var v20159 = this.valueMembers;
          var v15130 = v20159 == null;
          if (v15130) {
            v6649 = null;
          } else {
            var v15129;
            if (insertAsPublic) {
              var v20160 = this.valueMembers;
              v15129 = v20160.publicMembers;
            } else {
              var v20161 = this.valueMembers;
              v15129 = v20161.privateMembers;
            }
            v6649 = v15129;
          }
          table$$6 = v6649;
        }
      }
      if (table$$6) {
        var v20162 = symbol$$7.name;
        var v15131 = table$$6.add(v20162, symbol$$7);
        var v6651 = !v15131;
        if (v6651) {
          var v6650 = symbol$$7.name;
          errorReporter$$3.duplicateIdentifier(ast$$61, v6650);
        }
      } else {
        var v6652 = TypeScript$$21.CompilerDiagnostics;
        v6652.Alert("YYYYY");
      }
      symbol$$7.container = container$$8;
      return;
    }
    function v850(name$$73, publicOnly$$18, typespace$$17) {
      var sym$$25 = null;
      var v6653;
      var v20163 = this.valueMembers;
      var v15133 = v20163 == null;
      if (v15133) {
        v6653 = null;
      } else {
        var v15132;
        if (publicOnly$$18) {
          var v20164 = this.valueMembers;
          v15132 = v20164.publicMembers;
        } else {
          var v20165 = this.valueMembers;
          v15132 = v20165.allMembers;
        }
        v6653 = v15132;
      }
      var table$$5 = v6653;
      var v6654;
      var v20166 = this.ambientValueMembers;
      var v15135 = v20166 == null;
      if (v15135) {
        v6654 = null;
      } else {
        var v15134;
        if (publicOnly$$18) {
          var v20167 = this.ambientValueMembers;
          v15134 = v20167.publicMembers;
        } else {
          var v20168 = this.ambientValueMembers;
          v15134 = v20168.allMembers;
        }
        v6654 = v15134;
      }
      var ambientTable$$5 = v6654;
      if (typespace$$17) {
        var v6655;
        var v20169 = this.enclosedTypes;
        var v15137 = v20169 == null;
        if (v15137) {
          v6655 = null;
        } else {
          var v15136;
          if (publicOnly$$18) {
            var v20170 = this.enclosedTypes;
            v15136 = v20170.publicMembers;
          } else {
            var v20171 = this.enclosedTypes;
            v15136 = v20171.allMembers;
          }
          v6655 = v15136;
        }
        table$$5 = v6655;
        var v6656;
        var v20172 = this.ambientEnclosedTypes;
        var v15139 = v20172 == null;
        if (v15139) {
          v6656 = null;
        } else {
          var v15138;
          if (publicOnly$$18) {
            var v20173 = this.ambientEnclosedTypes;
            v15138 = v20173.publicMembers;
          } else {
            var v20174 = this.ambientEnclosedTypes;
            v15138 = v20174.allMembers;
          }
          v6656 = v15138;
        }
        ambientTable$$5 = v6656;
      }
      if (table$$5) {
        var v15140 = sym$$25 = table$$5.lookup(name$$73);
        var v6657 = v15140 != null;
        if (v6657) {
          if (sym$$25) {
            return sym$$25;
          }
        }
      }
      if (ambientTable$$5) {
        var v15141 = sym$$25 = ambientTable$$5.lookup(name$$73);
        var v6658 = v15141 != null;
        if (v6658) {
          if (sym$$25) {
            return sym$$25;
          }
        }
      }
      return null;
    }
    function v849(name$$72, publicOnly$$17, typespace$$16) {
      var sym$$24 = null;
      var v6659;
      var v20175 = this.ambientValueMembers;
      var v15143 = v20175 == null;
      if (v15143) {
        v6659 = null;
      } else {
        var v15142;
        if (publicOnly$$17) {
          var v20176 = this.ambientValueMembers;
          v15142 = v20176.publicMembers;
        } else {
          var v20177 = this.ambientValueMembers;
          v15142 = v20177.allMembers;
        }
        v6659 = v15142;
      }
      var ambientTable$$4 = v6659;
      if (typespace$$16) {
        var v6660;
        var v20178 = this.ambientEnclosedTypes;
        var v15145 = v20178 == null;
        if (v15145) {
          v6660 = null;
        } else {
          var v15144;
          if (publicOnly$$17) {
            var v20179 = this.ambientEnclosedTypes;
            v15144 = v20179.publicMembers;
          } else {
            var v20180 = this.ambientEnclosedTypes;
            v15144 = v20180.allMembers;
          }
          v6660 = v15144;
        }
        ambientTable$$4 = v6660;
      }
      var v15146 = ambientTable$$4;
      if (v15146) {
        var v20181 = sym$$24 = ambientTable$$4.lookup(name$$72);
        v15146 = v20181 != null;
      }
      var v6661 = v15146;
      if (v6661) {
        return sym$$24;
      }
      var v6663 = this.parent;
      if (v6663) {
        var v6662 = this.parent;
        return v6662.findAmbient(name$$72, publicOnly$$17, typespace$$16);
      }
      return null;
    }
    function v848(name$$71, publicOnly$$16, typespace$$15) {
      var sym$$23 = null;
      var v6664;
      var v20182 = this.valueMembers;
      var v15148 = v20182 == null;
      if (v15148) {
        v6664 = null;
      } else {
        var v15147;
        if (publicOnly$$16) {
          var v20183 = this.valueMembers;
          v15147 = v20183.publicMembers;
        } else {
          var v20184 = this.valueMembers;
          v15147 = v20184.allMembers;
        }
        v6664 = v15147;
      }
      var table$$4 = v6664;
      var v6665;
      var v20185 = this.ambientValueMembers;
      var v15150 = v20185 == null;
      if (v15150) {
        v6665 = null;
      } else {
        var v15149;
        if (publicOnly$$16) {
          var v20186 = this.ambientValueMembers;
          v15149 = v20186.publicMembers;
        } else {
          var v20187 = this.ambientValueMembers;
          v15149 = v20187.allMembers;
        }
        v6665 = v15149;
      }
      var ambientTable$$3 = v6665;
      if (typespace$$15) {
        var v6666;
        var v20188 = this.enclosedTypes;
        var v15152 = v20188 == null;
        if (v15152) {
          v6666 = null;
        } else {
          var v15151;
          if (publicOnly$$16) {
            var v20189 = this.enclosedTypes;
            v15151 = v20189.publicMembers;
          } else {
            var v20190 = this.enclosedTypes;
            v15151 = v20190.allMembers;
          }
          v6666 = v15151;
        }
        table$$4 = v6666;
        var v6667;
        var v20191 = this.ambientEnclosedTypes;
        var v15154 = v20191 == null;
        if (v15154) {
          v6667 = null;
        } else {
          var v15153;
          if (publicOnly$$16) {
            var v20192 = this.ambientEnclosedTypes;
            v15153 = v20192.publicMembers;
          } else {
            var v20193 = this.ambientEnclosedTypes;
            v15153 = v20193.allMembers;
          }
          v6667 = v15153;
        }
        ambientTable$$3 = v6667;
      }
      var v15155 = ambientTable$$3;
      if (v15155) {
        var v20194 = sym$$23 = ambientTable$$3.lookup(name$$71);
        v15155 = v20194 != null;
      }
      var v6668 = v15155;
      if (v6668) {
        return sym$$23;
      }
      var v15156 = table$$4;
      if (v15156) {
        var v20195 = sym$$23 = table$$4.lookup(name$$71);
        v15156 = v20195 != null;
      }
      var v6669 = v15156;
      if (v6669) {
        return sym$$23;
      }
      var v6671 = this.parent;
      if (v6671) {
        var v6670 = this.parent;
        return v6670.find(name$$71, publicOnly$$16, typespace$$15);
      }
      return null;
    }
    function v847(outfile$$9) {
      function v846(key$$42, s$$23, context$$48) {
        var sym$$22 = s$$23;
        var v6672 = "  " + key$$42;
        outfile$$9.WriteLine(v6672);
        return;
      }
      function v845(key$$41, s$$22, context$$47) {
        var sym$$21 = s$$22;
        var v6673 = "  " + key$$41;
        outfile$$9.WriteLine(v6673);
        return;
      }
      function v844(key$$40, s$$21, context$$46) {
        var sym$$20 = s$$21;
        var v6674 = "  " + key$$40;
        outfile$$9.WriteLine(v6674);
        return;
      }
      function v843(key$$39, s$$20, context$$45) {
        var sym$$19 = s$$20;
        var v6675 = "  " + key$$39;
        outfile$$9.WriteLine(v6675);
        return;
      }
      var v15157 = _super$$56.prototype;
      var v6676 = v15157.print;
      v6676.call(this, outfile$$9);
      var v6678 = this.ambientValueMembers;
      if (v6678) {
        var v15158 = this.ambientValueMembers;
        var v6677 = v15158.allMembers;
        v6677.map(v843, null);
      }
      var v6680 = this.valueMembers;
      if (v6680) {
        var v15159 = this.valueMembers;
        var v6679 = v15159.allMembers;
        v6679.map(v844, null);
      }
      var v6682 = this.ambientEnclosedTypes;
      if (v6682) {
        var v15160 = this.ambientEnclosedTypes;
        var v6681 = v15160.allMembers;
        v6681.map(v845, null);
      }
      var v6684 = this.enclosedTypes;
      if (v6684) {
        var v15161 = this.enclosedTypes;
        var v6683 = v15161.allMembers;
        v6683.map(v846, null);
      }
      var v6686 = this.parent;
      if (v6686) {
        var v6685 = this.parent;
        v6685.print(outfile$$9);
      }
      return;
    }
    function v842(filter$$3, name$$70, publicOnly$$15, typespace$$14) {
      var sym$$18 = null;
      var v6687;
      var v20196 = this.valueMembers;
      var v15163 = v20196 == null;
      if (v15163) {
        v6687 = null;
      } else {
        var v15162;
        if (publicOnly$$15) {
          var v20197 = this.valueMembers;
          v15162 = v20197.publicMembers;
        } else {
          var v20198 = this.valueMembers;
          v15162 = v20198.allMembers;
        }
        v6687 = v15162;
      }
      var table$$3 = v6687;
      var v6688;
      var v20199 = this.ambientValueMembers;
      var v15165 = v20199 == null;
      if (v15165) {
        v6688 = null;
      } else {
        var v15164;
        if (publicOnly$$15) {
          var v20200 = this.ambientValueMembers;
          v15164 = v20200.publicMembers;
        } else {
          var v20201 = this.ambientValueMembers;
          v15164 = v20201.allMembers;
        }
        v6688 = v15164;
      }
      var ambientTable$$2 = v6688;
      if (typespace$$14) {
        var v6689;
        var v20202 = this.enclosedTypes;
        var v15167 = v20202 == null;
        if (v15167) {
          v6689 = null;
        } else {
          var v15166;
          if (publicOnly$$15) {
            var v20203 = this.enclosedTypes;
            v15166 = v20203.publicMembers;
          } else {
            var v20204 = this.enclosedTypes;
            v15166 = v20204.allMembers;
          }
          v6689 = v15166;
        }
        table$$3 = v6689;
        var v6690;
        var v20205 = this.ambientEnclosedTypes;
        var v15169 = v20205 == null;
        if (v15169) {
          v6690 = null;
        } else {
          var v15168;
          if (publicOnly$$15) {
            var v20206 = this.ambientEnclosedTypes;
            v15168 = v20206.publicMembers;
          } else {
            var v20207 = this.ambientEnclosedTypes;
            v15168 = v20207.allMembers;
          }
          v6690 = v15168;
        }
        ambientTable$$2 = v6690;
      }
      if (ambientTable$$2) {
        var v15170 = sym$$18 = ambientTable$$2.lookup(name$$70);
        var v6692 = v15170 != null;
        if (v6692) {
          var v6691 = filter$$3.update(sym$$18);
          if (v6691) {
            return sym$$18;
          }
        }
      }
      if (table$$3) {
        var v15171 = sym$$18 = table$$3.lookup(name$$70);
        var v6694 = v15171 != null;
        if (v6694) {
          var v6693 = filter$$3.update(sym$$18);
          if (v6693) {
            return sym$$18;
          }
        }
      }
      var v6697 = this.parent;
      if (v6697) {
        var v6695 = this.parent;
        sym$$18 = v6695.search(filter$$3, name$$70, publicOnly$$15, typespace$$14);
        if (sym$$18) {
          var v6696 = filter$$3.update(sym$$18);
          if (v6696) {
            return sym$$18;
          }
        }
      }
      return filter$$3.result;
    }
    function v841(members$$24) {
      var result$$26 = [];
      var v6699 = this.ambientValueMembers;
      if (v6699) {
        var v20208 = this.ambientValueMembers;
        var v15172 = v20208.allMembers;
        var v6698 = v15172.getAllKeys();
        result$$26 = result$$26.concat(v6698);
      }
      var v6701 = this.valueMembers;
      if (v6701) {
        var v20209 = this.valueMembers;
        var v15173 = v20209.allMembers;
        var v6700 = v15173.getAllKeys();
        result$$26 = result$$26.concat(v6700);
      }
      var v15174 = !members$$24;
      if (v15174) {
        v15174 = this.parent;
      }
      var v6703 = v15174;
      if (v6703) {
        var v6702 = this.parent;
        var parentResult$$4 = v6702.getAllValueSymbolNames(members$$24);
        if (parentResult$$4) {
          result$$26 = result$$26.concat(parentResult$$4);
        }
      }
      return result$$26;
    }
    function v840(members$$23) {
      var result$$25 = [];
      var v6705 = this.ambientEnclosedTypes;
      if (v6705) {
        var v20210 = this.ambientEnclosedTypes;
        var v15175 = v20210.allMembers;
        var v6704 = v15175.getAllKeys();
        result$$25 = result$$25.concat(v6704);
      }
      var v6707 = this.enclosedTypes;
      if (v6707) {
        var v20211 = this.enclosedTypes;
        var v15176 = v20211.allMembers;
        var v6706 = v15176.getAllKeys();
        result$$25 = result$$25.concat(v6706);
      }
      var v15177 = !members$$23;
      if (v15177) {
        v15177 = this.parent;
      }
      var v6709 = v15177;
      if (v6709) {
        var v6708 = this.parent;
        var parentResult$$3 = v6708.getAllTypeSymbolNames(members$$23);
        if (parentResult$$3) {
          result$$25 = result$$25.concat(parentResult$$3);
        }
      }
      return result$$25;
    }
    function v839(members$$22) {
      var result$$24 = this.getAllTypeSymbolNames(members$$22);
      var v6710 = this.getAllValueSymbolNames(members$$22);
      return result$$24.concat(v6710);
    }
    function v838() {
      return "builder";
    }
    function SymbolScopeBuilder$$1(valueMembers$$2, ambientValueMembers$$2, enclosedTypes$$2, ambientEnclosedTypes$$2, parent$$50, container$$7) {
      _super$$56.call(this, container$$7);
      this.valueMembers = valueMembers$$2;
      this.ambientValueMembers = ambientValueMembers$$2;
      this.enclosedTypes = enclosedTypes$$2;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$2;
      this.parent = parent$$50;
      this.container = container$$7;
      return;
    }
    __extends(SymbolScopeBuilder$$1, _super$$56);
    var v6711 = SymbolScopeBuilder$$1.prototype;
    v6711.printLabel = v838;
    var v6712 = SymbolScopeBuilder$$1.prototype;
    v6712.getAllSymbolNames = v839;
    var v6713 = SymbolScopeBuilder$$1.prototype;
    v6713.getAllTypeSymbolNames = v840;
    var v6714 = SymbolScopeBuilder$$1.prototype;
    v6714.getAllValueSymbolNames = v841;
    var v6715 = SymbolScopeBuilder$$1.prototype;
    v6715.search = v842;
    var v6716 = SymbolScopeBuilder$$1.prototype;
    v6716.print = v847;
    var v6717 = SymbolScopeBuilder$$1.prototype;
    v6717.find = v848;
    var v6718 = SymbolScopeBuilder$$1.prototype;
    v6718.findAmbient = v849;
    var v6719 = SymbolScopeBuilder$$1.prototype;
    v6719.findLocal = v850;
    var v6720 = SymbolScopeBuilder$$1.prototype;
    v6720.enter = v851;
    var v6721 = SymbolScopeBuilder$$1.prototype;
    v6721.getTable = v852;
    return SymbolScopeBuilder$$1;
  }
  function v837(_super$$55) {
    function v836() {
      var v6722 = this.valueMembers;
      return v6722.publicMembers;
    }
    function v835(name$$69, publicOnly$$14, typespace$$13) {
      var sym$$17 = this.find(name$$69, publicOnly$$14, typespace$$13);
      if (sym$$17) {
        var v15178 = sym$$17.kind();
        var v15179 = SymbolKind.Type;
        var v6727 = v15178 == v15179;
        if (v6727) {
          var typeSym$$1 = sym$$17;
          var v20212 = typeSym$$1.type;
          var v15180 = v20212.hasImplementation();
          var v6723 = !v15180;
          if (v6723) {
            sym$$17 = null;
          }
        } else {
          var v6726 = sym$$17.container;
          if (v6726) {
            var v20213 = sym$$17.container;
            var v15181 = v20213.kind();
            var v15182 = SymbolKind.Type;
            var v6725 = v15181 == v15182;
            if (v6725) {
              var ctypeSym = sym$$17.container;
              var v20214 = ctypeSym.type;
              var v15183 = v20214.hasImplementation();
              var v6724 = !v15183;
              if (v6724) {
                sym$$17 = null;
              }
            }
          }
        }
      }
      return sym$$17;
    }
    function v834(outfile$$8) {
      function v833(key$$38, sym$$16, context$$44) {
        var v6728 = "  " + key$$38;
        outfile$$8.WriteLine(v6728);
        return;
      }
      function v832(key$$37, sym$$15, context$$43) {
        var v6729 = "  " + key$$37;
        outfile$$8.WriteLine(v6729);
        return;
      }
      function v831(key$$36, sym$$14, context$$42) {
        var v6730 = "  " + key$$36;
        outfile$$8.WriteLine(v6730);
        return;
      }
      function v830(key$$35, sym$$13, context$$41) {
        var v6731 = "  " + key$$35;
        outfile$$8.WriteLine(v6731);
        return;
      }
      var v15184 = _super$$55.prototype;
      var v6732 = v15184.print;
      v6732.call(this, outfile$$8);
      var v6734 = this.ambientValueMembers;
      if (v6734) {
        var v15185 = this.ambientValueMembers;
        var v6733 = v15185.allMembers;
        v6733.map(v830, null);
      }
      var v6736 = this.valueMembers;
      if (v6736) {
        var v15186 = this.valueMembers;
        var v6735 = v15186.allMembers;
        v6735.map(v831, null);
      }
      var v6738 = this.ambientEnclosedTypes;
      if (v6738) {
        var v15187 = this.ambientEnclosedTypes;
        var v6737 = v15187.allMembers;
        v6737.map(v832, null);
      }
      var v6740 = this.enclosedTypes;
      if (v6740) {
        var v15188 = this.enclosedTypes;
        var v6739 = v15188.allMembers;
        v6739.map(v833, null);
      }
      return;
    }
    function v829(name$$68, publicOnly$$13, typespace$$12) {
      var v6741;
      var v20215 = this.ambientValueMembers;
      var v15190 = v20215 == null;
      if (v15190) {
        v6741 = null;
      } else {
        var v15189;
        if (publicOnly$$13) {
          var v20216 = this.ambientValueMembers;
          v15189 = v20216.publicMembers;
        } else {
          var v20217 = this.ambientValueMembers;
          v15189 = v20217.allMembers;
        }
        v6741 = v15189;
      }
      var ambientTable$$1 = v6741;
      if (typespace$$12) {
        var v6742;
        var v20218 = this.ambientEnclosedTypes;
        var v15192 = v20218 == null;
        if (v15192) {
          v6742 = null;
        } else {
          var v15191;
          if (publicOnly$$13) {
            var v20219 = this.ambientEnclosedTypes;
            v15191 = v20219.publicMembers;
          } else {
            var v20220 = this.ambientEnclosedTypes;
            v15191 = v20220.allMembers;
          }
          v6742 = v15191;
        }
        ambientTable$$1 = v6742;
      }
      if (ambientTable$$1) {
        var s$$19 = ambientTable$$1.lookup(name$$68);
        if (s$$19) {
          return s$$19;
        }
      }
      return null;
    }
    function v828(name$$67, publicOnly$$12, typespace$$11) {
      var table$$2 = null;
      var ambientTable = null;
      if (typespace$$11) {
        var v6743;
        var v20221 = this.enclosedTypes;
        var v15194 = v20221 == null;
        if (v15194) {
          v6743 = null;
        } else {
          var v15193;
          if (publicOnly$$12) {
            var v20222 = this.enclosedTypes;
            v15193 = v20222.publicMembers;
          } else {
            var v20223 = this.enclosedTypes;
            v15193 = v20223.allMembers;
          }
          v6743 = v15193;
        }
        table$$2 = v6743;
        var v6744;
        var v20224 = this.ambientEnclosedTypes;
        var v15196 = v20224 == null;
        if (v15196) {
          v6744 = null;
        } else {
          var v15195;
          if (publicOnly$$12) {
            var v20225 = this.ambientEnclosedTypes;
            v15195 = v20225.publicMembers;
          } else {
            var v20226 = this.ambientEnclosedTypes;
            v15195 = v20226.allMembers;
          }
          v6744 = v15195;
        }
        ambientTable = v6744;
      } else {
        var v6745;
        var v20227 = this.valueMembers;
        var v15198 = v20227 == null;
        if (v15198) {
          v6745 = null;
        } else {
          var v15197;
          if (publicOnly$$12) {
            var v20228 = this.valueMembers;
            v15197 = v20228.publicMembers;
          } else {
            var v20229 = this.valueMembers;
            v15197 = v20229.allMembers;
          }
          v6745 = v15197;
        }
        table$$2 = v6745;
        var v6746;
        var v20230 = this.ambientValueMembers;
        var v15200 = v20230 == null;
        if (v15200) {
          v6746 = null;
        } else {
          var v15199;
          if (publicOnly$$12) {
            var v20231 = this.ambientValueMembers;
            v15199 = v20231.publicMembers;
          } else {
            var v20232 = this.ambientValueMembers;
            v15199 = v20232.allMembers;
          }
          v6746 = v15199;
        }
        ambientTable = v6746;
      }
      if (ambientTable) {
        var s$$18 = ambientTable.lookup(name$$67);
        if (s$$18) {
          return s$$18;
        }
      }
      if (table$$2) {
        s$$18 = table$$2.lookup(name$$67);
        if (s$$18) {
          return s$$18;
        }
      }
      return null;
    }
    function v827(filter$$2, name$$66, publicOnly$$11, typespace$$10) {
      var sym$$12 = this.find(name$$66, publicOnly$$11, typespace$$10);
      filter$$2.update(sym$$12);
      return filter$$2.result;
    }
    function v826(members$$21) {
      var result$$23 = [];
      var v6748 = this.ambientValueMembers;
      if (v6748) {
        var v20233 = this.ambientValueMembers;
        var v15201 = v20233.allMembers;
        var v6747 = v15201.getAllKeys();
        result$$23 = result$$23.concat(v6747);
      }
      var v6750 = this.valueMembers;
      if (v6750) {
        var v20234 = this.valueMembers;
        var v15202 = v20234.allMembers;
        var v6749 = v15202.getAllKeys();
        result$$23 = result$$23.concat(v6749);
      }
      return result$$23;
    }
    function v825(members$$20) {
      var result$$22 = [];
      var v6752 = this.ambientEnclosedTypes;
      if (v6752) {
        var v20235 = this.ambientEnclosedTypes;
        var v15203 = v20235.allMembers;
        var v6751 = v15203.getAllKeys();
        result$$22 = result$$22.concat(v6751);
      }
      var v6754 = this.enclosedTypes;
      if (v6754) {
        var v20236 = this.enclosedTypes;
        var v15204 = v20236.allMembers;
        var v6753 = v15204.getAllKeys();
        result$$22 = result$$22.concat(v6753);
      }
      return result$$22;
    }
    function v824(members$$19) {
      var result$$21 = this.getAllTypeSymbolNames(members$$19);
      var v6755 = this.getAllValueSymbolNames(members$$19);
      return result$$21.concat(v6755);
    }
    function v823() {
      return "table";
    }
    function SymbolTableScope$$1(valueMembers$$1, ambientValueMembers$$1, enclosedTypes$$1, ambientEnclosedTypes$$1, container$$6) {
      _super$$55.call(this, container$$6);
      this.valueMembers = valueMembers$$1;
      this.ambientValueMembers = ambientValueMembers$$1;
      this.enclosedTypes = enclosedTypes$$1;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$1;
      this.container = container$$6;
      return;
    }
    __extends(SymbolTableScope$$1, _super$$55);
    var v6756 = SymbolTableScope$$1.prototype;
    v6756.printLabel = v823;
    var v6757 = SymbolTableScope$$1.prototype;
    v6757.getAllSymbolNames = v824;
    var v6758 = SymbolTableScope$$1.prototype;
    v6758.getAllTypeSymbolNames = v825;
    var v6759 = SymbolTableScope$$1.prototype;
    v6759.getAllValueSymbolNames = v826;
    var v6760 = SymbolTableScope$$1.prototype;
    v6760.search = v827;
    var v6761 = SymbolTableScope$$1.prototype;
    v6761.find = v828;
    var v6762 = SymbolTableScope$$1.prototype;
    v6762.findAmbient = v829;
    var v6763 = SymbolTableScope$$1.prototype;
    v6763.print = v834;
    var v6764 = SymbolTableScope$$1.prototype;
    v6764.findImplementation = v835;
    var v6765 = SymbolTableScope$$1.prototype;
    v6765.getTable = v836;
    return SymbolTableScope$$1;
  }
  function v822(_super$$54) {
    function v821(parent$$49) {
      var v15205 = this.parents;
      var v6766 = v15205 == null;
      if (v6766) {
        var v26668 = new Array;
        this.parents = v26668;
      }
      var v6767 = this.parents;
      var v15206 = this.parents;
      var v6768 = v15206.length;
      v6767[v6768] = parent$$49;
      return;
    }
    function v820(name$$65, publicOnly$$10, typespace$$9) {
      var sym$$11 = null;
      var i$$72 = 0;
      var cache$$1 = this.valueAmbientCache;
      if (typespace$$9) {
        cache$$1 = this.typeAmbientCache;
      }
      var v15207 = cache$$1;
      if (v15207) {
        var v20237 = sym$$11 = cache$$1.lookup(name$$65);
        v15207 = v20237 != null;
      }
      var v6769 = v15207;
      if (v6769) {
        return sym$$11;
      }
      var v6772 = this.parents;
      if (v6772) {
        i$$72 = 0;
        var v20238 = this.parents;
        var v15208 = v20238.length;
        var v6771 = i$$72 < v15208;
        for (;v6771;) {
          var v15209 = this.parents;
          var v6770 = v15209[i$$72];
          sym$$11 = v6770.findAmbient(name$$65, publicOnly$$10, typespace$$9);
          if (sym$$11) {
            break;
          }
          i$$72++;
          var v20239 = this.parents;
          var v15210 = v20239.length;
          v6771 = i$$72 < v15210;
        }
      }
      var v6775 = cache$$1 == null;
      if (v6775) {
        if (typespace$$9) {
          var v6773 = TypeScript$$21.StringHashTable;
          var v26669 = new v6773;
          this.typeAmbientCache = v26669;
          cache$$1 = this.typeAmbientCache;
        } else {
          var v6774 = TypeScript$$21.StringHashTable;
          var v26670 = new v6774;
          this.valueAmbientCache = v26670;
          cache$$1 = this.valueAmbientCache;
        }
      }
      cache$$1.add(name$$65, sym$$11);
      return sym$$11;
    }
    function v819(name$$64, publicOnly$$9, typespace$$8) {
      var sym$$10 = null;
      var i$$71 = 0;
      var cache = this.valueCache;
      if (typespace$$8) {
        cache = this.typeCache;
      }
      var v20240 = cache;
      if (v20240) {
        var v23536 = sym$$10 = cache.lookup(name$$64);
        v20240 = v23536 != null;
      }
      var v15211 = v20240;
      if (v15211) {
        var v20241;
        if (publicOnly$$9) {
          var v25841 = sym$$10.flags;
          var v26141 = TypeScript$$21.SymbolFlags;
          var v25842 = v26141.Private;
          var v25159 = TypeScript$$21.hasFlag(v25841, v25842);
          var v25844 = !v25159;
          if (v25844) {
            var v26142 = sym$$10.declAST;
            if (v26142) {
              var v26364 = sym$$10.declAST;
              var v26286 = v26364.nodeType;
              var v26365 = TypeScript$$21.NodeType;
              var v26287 = v26365.FuncDecl;
              v26142 = v26286 == v26287;
            }
            var v25843 = v26142;
            if (v25843) {
              var v26288 = sym$$10.declAST;
              var v26143 = v26288.fncFlags;
              var v26289 = TypeScript$$21.FncFlags;
              var v26144 = v26289.Private;
              v25843 = TypeScript$$21.hasFlag(v26143, v26144);
            }
            v25159 = v25843;
          }
          var v23537 = v25159;
          v20241 = !v23537;
        } else {
          v20241 = true;
        }
        v15211 = v20241;
      }
      var v6776 = v15211;
      if (v6776) {
        return sym$$10;
      }
      var v6779 = this.parents;
      if (v6779) {
        i$$71 = 0;
        var v20242 = this.parents;
        var v15212 = v20242.length;
        var v6778 = i$$71 < v15212;
        for (;v6778;) {
          var v15213 = this.parents;
          var v6777 = v15213[i$$71];
          sym$$10 = v6777.find(name$$64, publicOnly$$9, typespace$$8);
          if (sym$$10) {
            break;
          }
          i$$71++;
          var v20243 = this.parents;
          var v15214 = v20243.length;
          v6778 = i$$71 < v15214;
        }
      }
      var v6782 = cache == null;
      if (v6782) {
        if (typespace$$8) {
          var v6780 = TypeScript$$21.StringHashTable;
          var v26671 = new v6780;
          this.typeCache = v26671;
          cache = this.typeCache;
        } else {
          var v6781 = TypeScript$$21.StringHashTable;
          var v26672 = new v6781;
          this.valueCache = v26672;
          cache = this.valueCache;
        }
      }
      cache.add(name$$64, sym$$10);
      return sym$$10;
    }
    function v818(name$$63, publicOnly$$8, typespace$$7) {
      var sym$$9 = null;
      var i$$70 = 0;
      var implCache = this.valueImplCache;
      if (typespace$$7) {
        implCache = this.typeImplCache;
      }
      var v20244 = implCache;
      if (v20244) {
        var v23538 = sym$$9 = implCache.lookup(name$$63);
        v20244 = v23538 != null;
      }
      var v15215 = v20244;
      if (v15215) {
        var v20245;
        if (publicOnly$$8) {
          var v25845 = sym$$9.flags;
          var v26145 = TypeScript$$21.SymbolFlags;
          var v25846 = v26145.Private;
          var v25160 = TypeScript$$21.hasFlag(v25845, v25846);
          var v25848 = !v25160;
          if (v25848) {
            var v26146 = sym$$9.declAST;
            if (v26146) {
              var v26366 = sym$$9.declAST;
              var v26290 = v26366.nodeType;
              var v26367 = TypeScript$$21.NodeType;
              var v26291 = v26367.FuncDecl;
              v26146 = v26290 == v26291;
            }
            var v25847 = v26146;
            if (v25847) {
              var v26292 = sym$$9.declAST;
              var v26147 = v26292.fncFlags;
              var v26293 = TypeScript$$21.FncFlags;
              var v26148 = v26293.Private;
              v25847 = TypeScript$$21.hasFlag(v26147, v26148);
            }
            v25160 = v25847;
          }
          var v23539 = v25160;
          v20245 = !v23539;
        } else {
          v20245 = true;
        }
        v15215 = v20245;
      }
      var v6783 = v15215;
      if (v6783) {
        return sym$$9;
      }
      var v6786 = this.parents;
      if (v6786) {
        i$$70 = 0;
        var v20246 = this.parents;
        var v15216 = v20246.length;
        var v6785 = i$$70 < v15216;
        for (;v6785;) {
          var v15217 = this.parents;
          var v6784 = v15217[i$$70];
          sym$$9 = v6784.findImplementation(name$$63, publicOnly$$8, typespace$$7);
          if (sym$$9) {
            break;
          }
          i$$70++;
          var v20247 = this.parents;
          var v15218 = v20247.length;
          v6785 = i$$70 < v15218;
        }
      }
      if (implCache) {
        if (typespace$$7) {
          var v6787 = TypeScript$$21.StringHashTable;
          var v26673 = new v6787;
          this.typeImplCache = v26673;
          implCache = this.typeImplCache;
        } else {
          var v6788 = TypeScript$$21.StringHashTable;
          var v26674 = new v6788;
          this.valueImplCache = v26674;
          implCache = this.valueImplCache;
        }
      }
      implCache.add(name$$63, sym$$9);
      return sym$$9;
    }
    function v817(outfile$$7) {
      var v15219 = _super$$54.prototype;
      var v6789 = v15219.print;
      v6789.call(this, outfile$$7);
      var v6792 = this.parents;
      if (v6792) {
        var i$$69 = 0;
        var v20248 = this.parents;
        var v15220 = v20248.length;
        var v6791 = i$$69 < v15220;
        for (;v6791;) {
          var v15221 = this.parents;
          var v6790 = v15221[i$$69];
          v6790.print(outfile$$7);
          i$$69++;
          var v20249 = this.parents;
          var v15222 = v20249.length;
          v6791 = i$$69 < v15222;
        }
      }
      return;
    }
    function v816(members$$18) {
      var result$$20 = [];
      var v6795 = this.parents;
      if (v6795) {
        var i$$68 = 0;
        var v20250 = this.parents;
        var v15223 = v20250.length;
        var v6794 = i$$68 < v15223;
        for (;v6794;) {
          var v15224 = this.parents;
          var v6793 = v15224[i$$68];
          var parentResult$$2 = v6793.getAllValueSymbolNames(members$$18);
          if (parentResult$$2) {
            result$$20 = result$$20.concat(parentResult$$2);
          }
          i$$68++;
          var v20251 = this.parents;
          var v15225 = v20251.length;
          v6794 = i$$68 < v15225;
        }
      }
      return result$$20;
    }
    function v815(members$$17) {
      var result$$19 = [];
      var v6798 = this.parents;
      if (v6798) {
        var i$$67 = 0;
        var v20252 = this.parents;
        var v15226 = v20252.length;
        var v6797 = i$$67 < v15226;
        for (;v6797;) {
          var v15227 = this.parents;
          var v6796 = v15227[i$$67];
          var parentResult$$1 = v6796.getAllTypeSymbolNames(members$$17);
          if (parentResult$$1) {
            result$$19 = result$$19.concat(parentResult$$1);
          }
          i$$67++;
          var v20253 = this.parents;
          var v15228 = v20253.length;
          v6797 = i$$67 < v15228;
        }
      }
      return result$$19;
    }
    function v814(members$$16) {
      var result$$18 = [];
      var v6801 = this.parents;
      if (v6801) {
        var i$$66 = 0;
        var v20254 = this.parents;
        var v15229 = v20254.length;
        var v6800 = i$$66 < v15229;
        for (;v6800;) {
          var v15230 = this.parents;
          var v6799 = v15230[i$$66];
          var parentResult = v6799.getAllSymbolNames(members$$16);
          if (parentResult) {
            result$$18 = result$$18.concat(parentResult);
          }
          i$$66++;
          var v20255 = this.parents;
          var v15231 = v20255.length;
          v6800 = i$$66 < v15231;
        }
      }
      return result$$18;
    }
    function v813(filter$$1, name$$62, publicOnly$$7, typespace$$6) {
      var v6805 = this.parents;
      if (v6805) {
        var i$$65 = 0;
        var v20256 = this.parents;
        var v15232 = v20256.length;
        var v6804 = i$$65 < v15232;
        for (;v6804;) {
          var v15233 = this.parents;
          var v6802 = v15233[i$$65];
          var sym$$8 = v6802.search(filter$$1, name$$62, publicOnly$$7, typespace$$6);
          if (sym$$8) {
            var v6803 = filter$$1.update(sym$$8);
            if (v6803) {
              return sym$$8;
            }
          }
          i$$65++;
          var v20257 = this.parents;
          var v15234 = v20257.length;
          v6804 = i$$65 < v15234;
        }
      }
      return filter$$1.result;
    }
    function v812() {
      return "agg";
    }
    function SymbolAggregateScope$$1(container$$5) {
      _super$$54.call(this, container$$5);
      this.valueCache = null;
      this.valueImplCache = null;
      this.valueAmbientCache = null;
      this.typeCache = null;
      this.typeImplCache = null;
      this.typeAmbientCache = null;
      this.parents = null;
      this.container = container$$5;
      return;
    }
    __extends(SymbolAggregateScope$$1, _super$$54);
    var v6806 = SymbolAggregateScope$$1.prototype;
    v6806.printLabel = v812;
    var v6807 = SymbolAggregateScope$$1.prototype;
    v6807.search = v813;
    var v6808 = SymbolAggregateScope$$1.prototype;
    v6808.getAllSymbolNames = v814;
    var v6809 = SymbolAggregateScope$$1.prototype;
    v6809.getAllTypeSymbolNames = v815;
    var v6810 = SymbolAggregateScope$$1.prototype;
    v6810.getAllValueSymbolNames = v816;
    var v6811 = SymbolAggregateScope$$1.prototype;
    v6811.print = v817;
    var v6812 = SymbolAggregateScope$$1.prototype;
    v6812.findImplementation = v818;
    var v6813 = SymbolAggregateScope$$1.prototype;
    v6813.find = v819;
    var v6814 = SymbolAggregateScope$$1.prototype;
    v6814.findAmbient = v820;
    var v6815 = SymbolAggregateScope$$1.prototype;
    v6815.addParentScope = v821;
    return SymbolAggregateScope$$1;
  }
  function v811() {
    function v810() {
      throw new Error("please implement in derived class");
    }
    function v809(container$$4, ast$$60, symbol$$6, errorReporter$$2, publicOnly$$6, typespace$$5, ambient) {
      throw new Error("please implement in derived class");
    }
    function v808(outfile$$6) {
      var v6818 = this.container;
      if (v6818) {
        var v23540 = this.printLabel();
        var v20258 = v23540 + " scope with container: ";
        var v23541 = this.container;
        var v20259 = v23541.name;
        var v15235 = v20258 + v20259;
        var v6816 = v15235 + "...";
        outfile$$6.WriteLine(v6816);
      } else {
        var v15236 = this.printLabel();
        var v6817 = v15236 + " scope...";
        outfile$$6.WriteLine(v6817);
      }
      return;
    }
    function v807(name$$61, publicOnly$$5, typespace$$4) {
      return null;
    }
    function v806(name$$60, publicOnly$$4, typespace$$3) {
      return null;
    }
    function v805(name$$59, publicOnly$$3, typespace$$2) {
      return null;
    }
    function v804(name$$58, publicOnly$$2, typespace$$1) {
      return null;
    }
    function v803(filter, name$$57, publicOnly$$1, typespace) {
      return null;
    }
    function v802(members$$15) {
      return["please", "implement", "in", "derived", "classes"];
    }
    function v801(members$$14) {
      return["please", "implement", "in", "derived", "classes"];
    }
    function v800(members$$13) {
      return["please", "implement", "in", "derived", "classes"];
    }
    function v799() {
      return "base";
    }
    function SymbolScope$$1(container$$3) {
      this.container = container$$3;
      return;
    }
    var v6819 = SymbolScope$$1.prototype;
    v6819.printLabel = v799;
    var v6820 = SymbolScope$$1.prototype;
    v6820.getAllSymbolNames = v800;
    var v6821 = SymbolScope$$1.prototype;
    v6821.getAllTypeSymbolNames = v801;
    var v6822 = SymbolScope$$1.prototype;
    v6822.getAllValueSymbolNames = v802;
    var v6823 = SymbolScope$$1.prototype;
    v6823.search = v803;
    var v6824 = SymbolScope$$1.prototype;
    v6824.findLocal = v804;
    var v6825 = SymbolScope$$1.prototype;
    v6825.find = v805;
    var v6826 = SymbolScope$$1.prototype;
    v6826.findImplementation = v806;
    var v6827 = SymbolScope$$1.prototype;
    v6827.findAmbient = v807;
    var v6828 = SymbolScope$$1.prototype;
    v6828.print = v808;
    var v6829 = SymbolScope$$1.prototype;
    v6829.enter = v809;
    var v6830 = SymbolScope$$1.prototype;
    v6830.getTable = v810;
    return SymbolScope$$1;
  }
  function v798(SymbolKind$$1) {
    SymbolKind$$1._map = [];
    var v6831 = SymbolKind$$1._map;
    v6831[0] = "None";
    SymbolKind$$1.None = 0;
    var v6832 = SymbolKind$$1._map;
    v6832[1] = "Type";
    SymbolKind$$1.Type = 1;
    var v6833 = SymbolKind$$1._map;
    v6833[2] = "Field";
    SymbolKind$$1.Field = 2;
    var v6834 = SymbolKind$$1._map;
    v6834[3] = "Parameter";
    SymbolKind$$1.Parameter = 3;
    var v6835 = SymbolKind$$1._map;
    v6835[4] = "Variable";
    SymbolKind$$1.Variable = 4;
    return;
  }
  function v797() {
    function v796(key$$34, data$$34) {
      var v15237 = this.dualMembers;
      var v6836 = v15237.secondaryTable;
      return v6836.add(key$$34, data$$34);
    }
    function v795(key$$33, data$$33) {
      var v15238 = this.dualMembers;
      var v6837 = v15238.primaryTable;
      return v6837.add(key$$33, data$$33);
    }
    function ScopedMembers$$1(dualMembers) {
      this.dualMembers = dualMembers;
      this.allMembers = this.dualMembers;
      var v6838 = this.dualMembers;
      this.publicMembers = v6838.primaryTable;
      var v6839 = this.dualMembers;
      this.privateMembers = v6839.secondaryTable;
      return;
    }
    var v6840 = ScopedMembers$$1.prototype;
    v6840.addPublicMember = v795;
    var v6841 = ScopedMembers$$1.prototype;
    v6841.addPrivateMember = v796;
    return ScopedMembers$$1;
  }
  var ScopedMembers = v797();
  TypeScript$$21.ScopedMembers = ScopedMembers;
  var v15239 = TypeScript$$21.SymbolKind;
  var v20260 = !v15239;
  if (v20260) {
    v15239 = TypeScript$$21.SymbolKind = {};
  }
  var v6842 = v15239;
  v798(v6842);
  var SymbolKind = TypeScript$$21.SymbolKind;
  var SymbolScope = v811();
  TypeScript$$21.SymbolScope = SymbolScope;
  var SymbolAggregateScope = v822(SymbolScope);
  TypeScript$$21.SymbolAggregateScope = SymbolAggregateScope;
  var SymbolTableScope = v837(SymbolScope);
  TypeScript$$21.SymbolTableScope = SymbolTableScope;
  var SymbolScopeBuilder = v853(SymbolScope);
  TypeScript$$21.SymbolScopeBuilder = SymbolScopeBuilder;
  var FilteredSymbolScope = v857(SymbolScope);
  TypeScript$$21.FilteredSymbolScope = FilteredSymbolScope;
  var FilteredSymbolScopeBuilder = v861(SymbolScopeBuilder);
  TypeScript$$21.FilteredSymbolScopeBuilder = FilteredSymbolScopeBuilder;
  return;
}
function v794(TypeScript$$20) {
  function v793(_super$$53) {
    function v792() {
      return true;
    }
    function v791(type$$36) {
      var v15240 = this.variable;
      var v6843 = v15240.typeLink;
      v6843.type = type$$36;
      return;
    }
    function v790(scope$$20) {
      var v6844 = TypeScript$$20.MemberName;
      var v15241 = this.getType();
      var v6845 = v15241.getScopedTypeNameEx(scope$$20);
      var v15242 = this.name;
      var v6846 = v15242 + ": ";
      return v6844.create(v6845, v6846, "");
    }
    function v789() {
      var v15243 = this.variable;
      var v6847 = v15243.typeLink;
      return v6847.type;
    }
    function v788() {
      return true;
    }
    function v787() {
      var v6848 = TypeScript$$20.SymbolKind;
      return v6848.Variable;
    }
    function VariableSymbol$$1(name$$56, location$$27, unitIndex$$9, variable) {
      var v6849 = name$$56.length;
      _super$$53.call(this, name$$56, location$$27, v6849, unitIndex$$9);
      this.variable = variable;
      return;
    }
    __extends(VariableSymbol$$1, _super$$53);
    var v6850 = VariableSymbol$$1.prototype;
    v6850.kind = v787;
    var v6851 = VariableSymbol$$1.prototype;
    v6851.writeable = v788;
    var v6852 = VariableSymbol$$1.prototype;
    v6852.getType = v789;
    var v6853 = VariableSymbol$$1.prototype;
    v6853.getTypeNameEx = v790;
    var v6854 = VariableSymbol$$1.prototype;
    v6854.setType = v791;
    var v6855 = VariableSymbol$$1.prototype;
    v6855.isVariable = v792;
    return VariableSymbol$$1;
  }
  function v786(_super$$52) {
    function v785() {
      var v15244 = this.paramDocComment;
      var v6864 = !v15244;
      if (v6864) {
        var parameterComments = [];
        var v6860 = this.funcDecl;
        if (v6860) {
          var v6856 = this.funcDecl;
          var fncDocComments$$1 = v6856.getDocComments();
          var v6857 = TypeScript$$20.Comment;
          var v6858 = this.name;
          var paramComment = v6857.getParameterDocCommentText(v6858, fncDocComments$$1);
          var v6859 = paramComment != "";
          if (v6859) {
            parameterComments.push(paramComment);
          }
        }
        var v6861 = TypeScript$$20.Comment;
        var v6862 = this.getDocComments();
        var docComments$$1 = v6861.getDocCommentText(v6862);
        var v6863 = docComments$$1 != "";
        if (v6863) {
          parameterComments.push(docComments$$1);
        }
        var v26675 = parameterComments.join("\n");
        this.paramDocComment = v26675;
      }
      return this.paramDocComment;
    }
    function v784(pattern$$7, replacement$$5, checker$$14) {
      var v20261 = this.parameter;
      var v15245 = v20261.typeLink;
      var v6865 = v15245.type;
      var rType$$1 = v6865.specializeType(pattern$$7, replacement$$5, checker$$14, false);
      var v23542 = this.parameter;
      var v20262 = v23542.typeLink;
      var v15246 = v20262.type;
      var v6868 = v15246 != rType$$1;
      if (v6868) {
        var paramDef$$1 = new ValueLocation;
        var v6866 = this.name;
        var v15247 = checker$$14.locationInfo;
        var v6867 = v15247.unitIndex;
        var result$$17 = new ParameterSymbol$$1(v6866, 0, v6867, paramDef$$1);
        paramDef$$1.symbol = result$$17;
        result$$17.setType(rType$$1);
        return result$$17;
      } else {
        return this;
      }
      return;
    }
    function v783() {
      var v6869 = this.getTypeNameEx(null);
      return v6869.toString();
    }
    function v782(scope$$19) {
      var v6870 = TypeScript$$20.MemberName;
      var v15248 = this.getType();
      var v6871 = v15248.getScopedTypeNameEx(scope$$19);
      var v20263 = this.name;
      var v23543;
      var v25161 = this.isOptional();
      if (v25161) {
        v23543 = "?";
      } else {
        v23543 = "";
      }
      var v20264 = v23543;
      var v15249 = v20263 + v20264;
      var v6872 = v15249 + ": ";
      return v6870.create(v6871, v6872, "");
    }
    function v781() {
      var v20265 = this.parameter;
      if (v20265) {
        var v23544 = this.parameter;
        v20265 = v23544.symbol;
      }
      var v15250 = v20265;
      if (v15250) {
        var v23545 = this.parameter;
        var v20266 = v23545.symbol;
        v15250 = v20266.declAST;
      }
      var v6874 = v15250;
      if (v6874) {
        var v20267 = this.parameter;
        var v15251 = v20267.symbol;
        var v6873 = v15251.declAST;
        return v6873.isOptional;
      } else {
        return false;
      }
      return;
    }
    function v780() {
      return true;
    }
    function v779(type$$35) {
      var v15252 = this.parameter;
      var v6875 = v15252.typeLink;
      v6875.type = type$$35;
      return;
    }
    function v778() {
      var v15253 = this.parameter;
      var v6876 = v15253.typeLink;
      return v6876.type;
    }
    function v777() {
      return true;
    }
    function v776() {
      var v6877 = TypeScript$$20.SymbolKind;
      return v6877.Parameter;
    }
    function ParameterSymbol$$1(name$$55, location$$26, unitIndex$$8, parameter) {
      var v6878 = name$$55.length;
      _super$$52.call(this, name$$55, location$$26, v6878, unitIndex$$8);
      this.parameter = parameter;
      this.paramDocComment = null;
      this.funcDecl = null;
      this.argsOffset = -1;
      this.name = name$$55;
      this.location = location$$26;
      return;
    }
    __extends(ParameterSymbol$$1, _super$$52);
    var v6879 = ParameterSymbol$$1.prototype;
    v6879.kind = v776;
    var v6880 = ParameterSymbol$$1.prototype;
    v6880.writeable = v777;
    var v6881 = ParameterSymbol$$1.prototype;
    v6881.getType = v778;
    var v6882 = ParameterSymbol$$1.prototype;
    v6882.setType = v779;
    var v6883 = ParameterSymbol$$1.prototype;
    v6883.isVariable = v780;
    var v6884 = ParameterSymbol$$1.prototype;
    v6884.isOptional = v781;
    var v6885 = ParameterSymbol$$1.prototype;
    v6885.getTypeNameEx = v782;
    var v6886 = ParameterSymbol$$1.prototype;
    v6886.toString = v783;
    var v6887 = ParameterSymbol$$1.prototype;
    v6887.specializeType = v784;
    var v6888 = ParameterSymbol$$1.prototype;
    v6888.getParameterDocComments = v785;
    return ParameterSymbol$$1;
  }
  function v775(_super$$51) {
    function v774() {
      var v20268 = this.getter;
      var v15254 = v20268 != null;
      var v20270 = !v15254;
      if (v20270) {
        var v20269 = this.setter;
        v15254 = v20269 != null;
      }
      var v6895 = v15254;
      if (v6895) {
        var comments$$11 = [];
        var v15255 = this.getter;
        var v6890 = v15255 != null;
        if (v6890) {
          var v15256 = this.getter;
          var v6889 = v15256.getDocComments();
          comments$$11 = comments$$11.concat(v6889);
        }
        var v15257 = this.setter;
        var v6892 = v15257 != null;
        if (v6892) {
          var v15258 = this.setter;
          var v6891 = v15258.getDocComments();
          comments$$11 = comments$$11.concat(v6891);
        }
        return comments$$11;
      } else {
        var v15259 = this.declAST;
        var v6894 = v15259 != null;
        if (v6894) {
          var v6893 = this.declAST;
          return v6893.getDocComments();
        }
      }
      return[];
    }
    function v773(pattern$$6, replacement$$4, checker$$13) {
      var v20271 = this.field;
      var v15260 = v20271.typeLink;
      var v6896 = v15260.type;
      var rType = v6896.specializeType(pattern$$6, replacement$$4, checker$$13, false);
      var v23546 = this.field;
      var v20272 = v23546.typeLink;
      var v15261 = v20272.type;
      var v6901 = rType != v15261;
      if (v6901) {
        var fieldDef = new ValueLocation;
        var v6897 = this.name;
        var v15262 = checker$$13.locationInfo;
        var v6898 = v15262.unitIndex;
        var v6899 = this.canWrite;
        var result$$16 = new FieldSymbol$$1(v6897, 0, v6898, v6899, fieldDef);
        result$$16.flags = this.flags;
        fieldDef.symbol = result$$16;
        var v6900 = TypeScript$$20.TypeLink;
        var v26676 = new v6900;
        fieldDef.typeLink = v26676;
        result$$16.setType(rType);
        result$$16.typeCheckStatus = TypeCheckStatus.Finished;
        return result$$16;
      } else {
        return this;
      }
      return;
    }
    function v772() {
      var v6902 = this.getTypeNameEx(null);
      return v6902.toString();
    }
    function v771() {
      return true;
    }
    function v770() {
      var v15263 = this.getter;
      var v6903 = v15263 != null;
      var v15265 = !v6903;
      if (v15265) {
        var v15264 = this.setter;
        v6903 = v15264 != null;
      }
      return v6903;
    }
    function v769(type$$34) {
      var v15266 = this.field;
      var v6904 = v15266.typeLink;
      v6904.type = type$$34;
      return;
    }
    function v768() {
      return true;
    }
    function v767(scope$$18) {
      var v6905 = TypeScript$$20.MemberName;
      var v23547 = this.field;
      var v20273 = v23547.typeLink;
      var v15267 = v20273.type;
      var v6906 = v15267.getScopedTypeNameEx(scope$$18);
      var v20274 = this.name;
      var v20275 = this.getOptionalNameString();
      var v15268 = v20274 + v20275;
      var v6907 = v15268 + ": ";
      return v6905.create(v6906, v6907, "");
    }
    function v766() {
      var v15269 = this.field;
      var v6908 = v15269.typeLink;
      return v6908.type;
    }
    function v765() {
      var v6909;
      var v15271 = this.isAccessor();
      if (v15271) {
        var v15270 = this.setter;
        v6909 = v15270 != null;
      } else {
        v6909 = this.canWrite;
      }
      return v6909;
    }
    function v764() {
      var v6910 = TypeScript$$20.SymbolKind;
      return v6910.Field;
    }
    function FieldSymbol$$1(name$$54, location$$25, unitIndex$$7, canWrite, field) {
      var v6911 = name$$54.length;
      _super$$51.call(this, name$$54, location$$25, v6911, unitIndex$$7);
      this.canWrite = canWrite;
      this.field = field;
      this.getter = null;
      this.setter = null;
      this.hasBeenEmitted = false;
      this.name = name$$54;
      this.location = location$$25;
      return;
    }
    __extends(FieldSymbol$$1, _super$$51);
    var v6912 = FieldSymbol$$1.prototype;
    v6912.kind = v764;
    var v6913 = FieldSymbol$$1.prototype;
    v6913.writeable = v765;
    var v6914 = FieldSymbol$$1.prototype;
    v6914.getType = v766;
    var v6915 = FieldSymbol$$1.prototype;
    v6915.getTypeNameEx = v767;
    var v6916 = FieldSymbol$$1.prototype;
    v6916.isMember = v768;
    var v6917 = FieldSymbol$$1.prototype;
    v6917.setType = v769;
    var v6918 = FieldSymbol$$1.prototype;
    v6918.isAccessor = v770;
    var v6919 = FieldSymbol$$1.prototype;
    v6919.isVariable = v771;
    var v6920 = FieldSymbol$$1.prototype;
    v6920.toString = v772;
    var v6921 = FieldSymbol$$1.prototype;
    v6921.specializeType = v773;
    var v6922 = FieldSymbol$$1.prototype;
    v6922.getDocComments = v774;
    return FieldSymbol$$1;
  }
  function v763(_super$$50) {
    function v762() {
      return true;
    }
    function WithSymbol$$1(location$$24, unitIndex$$6, withType$$1) {
      _super$$50.call(this, "with", location$$24, 4, unitIndex$$6, withType$$1);
      return;
    }
    __extends(WithSymbol$$1, _super$$50);
    var v6923 = WithSymbol$$1.prototype;
    v6923.isWith = v762;
    return WithSymbol$$1;
  }
  function v761(_super$$49) {
    function v760() {
      var comments$$10 = [];
      var v15272 = this.declAST;
      var v6925 = v15272 != null;
      if (v6925) {
        var v15273 = this.declAST;
        var v6924 = v15273.getDocComments();
        comments$$10 = comments$$10.concat(v6924);
      }
      var i$$64 = 0;
      var v20276 = this.expansionsDeclAST;
      var v15274 = v20276.length;
      var v6927 = i$$64 < v15274;
      for (;v6927;) {
        var v20277 = this.expansionsDeclAST;
        var v15275 = v20277[i$$64];
        var v6926 = v15275.getDocComments();
        comments$$10 = comments$$10.concat(v6926);
        i$$64++;
        var v20278 = this.expansionsDeclAST;
        var v15276 = v20278.length;
        v6927 = i$$64 < v15276;
      }
      return comments$$10;
    }
    function v759(scopeSymbolPath) {
      var scopeSymbolPathLength = scopeSymbolPath.length;
      var externalSymbol = null;
      var v23548 = scopeSymbolPath.length;
      var v20279 = v23548 > 0;
      if (v20279) {
        var v25849 = scopeSymbolPathLength - 1;
        var v25162 = scopeSymbolPath[v25849];
        var v23549 = v25162.getType();
        v20279 = v23549.isModuleType();
      }
      var v15277 = v20279;
      if (v15277) {
        var v23550 = scopeSymbolPathLength - 1;
        var v20280 = scopeSymbolPath[v23550];
        v15277 = v20280.isDynamic;
      }
      var v6934 = v15277;
      if (v6934) {
        var v20281 = scopeSymbolPathLength > 1;
        if (v20281) {
          var v25850 = scopeSymbolPathLength - 2;
          var v25163 = scopeSymbolPath[v25850];
          var v23551 = v25163.getType();
          v20281 = v23551.isModuleType();
        }
        var v15278 = v20281;
        if (v15278) {
          var v23552 = scopeSymbolPathLength - 2;
          var v20282 = scopeSymbolPath[v23552];
          v15278 = v20282.isDynamic;
        }
        var v6930 = v15278;
        if (v6930) {
          var v15279 = scopeSymbolPathLength - 2;
          var v6928 = scopeSymbolPath[v15279];
          var moduleType = v6928.getType();
          var v6929 = this.type;
          externalSymbol = moduleType.findDynamicModuleName(v6929);
        }
        var v6933 = externalSymbol == null;
        if (v6933) {
          var v15280 = scopeSymbolPathLength - 1;
          var v6931 = scopeSymbolPath[v15280];
          moduleType = v6931.getType();
          var v6932 = this.type;
          externalSymbol = moduleType.findDynamicModuleName(v6932);
        }
      }
      return externalSymbol;
    }
    function v758(scopeSymbol$$1) {
      var v23553 = !scopeSymbol$$1;
      var v20283 = !v23553;
      if (v20283) {
        var v23554 = this.prettyName;
        v20283 = TypeScript$$20.isQuoted(v23554);
      }
      var v15281 = v20283;
      if (v15281) {
        var v20284 = this.type;
        v15281 = v20284.isModuleType();
      }
      var v6936 = v15281;
      if (v6936) {
        var symbolPath = scopeSymbol$$1.pathToRoot();
        var prettyName$$1 = this.getPrettyNameOfDynamicModule(symbolPath);
        var v6935 = prettyName$$1 != null;
        if (v6935) {
          return prettyName$$1.name;
        }
      }
      return this.prettyName;
    }
    function v757(pattern$$5, replacement$$3, checker$$12) {
      var v15282 = this.type;
      var v6940 = v15282 == pattern$$5;
      if (v6940) {
        return replacement$$3.symbol;
      } else {
        var v6937 = this.type;
        var replType = v6937.specializeType(pattern$$5, replacement$$3, checker$$12, false);
        var v15283 = this.type;
        var v6939 = replType != v15283;
        if (v6939) {
          var v6938 = this.name;
          var result$$15 = new TypeSymbol$$1(v6938, -1, 0, -1, replType);
          return result$$15;
        } else {
          return this;
        }
      }
      return;
    }
    function v756() {
      var v15284 = this.declAST;
      var v6941 = v15284 != null;
      if (v6941) {
        var v20285 = this.declAST;
        var v15285 = v20285.nodeType;
        var v20286 = TypeScript$$20.NodeType;
        var v15286 = v20286.FuncDecl;
        v6941 = v15285 == v15286;
      }
      return v6941;
    }
    function v755() {
      var v6942 = this.instanceType;
      return v6942 != null;
    }
    function v754() {
      var v6943 = this.type;
      var result$$14 = v6943.getTypeName();
      var v6945 = this.name;
      if (v6945) {
        var v15287 = this.name;
        var v6944 = v15287 + ":";
        result$$14 = v6944 + result$$14;
      }
      return result$$14;
    }
    function v753() {
      var v25164 = this.type;
      var v23555 = v25164.typeFlags;
      var v25165 = TypeScript$$20.TypeFlags;
      var v23556 = v25165.IsClass;
      var v20287 = v23555 & v23556;
      var v15288 = !v20287;
      if (v15288) {
        var v20288 = this.type;
        v15288 = v20288.isClass();
      }
      var v6948 = v15288;
      if (v6948) {
        var v15289 = this.type;
        var v6946 = v15289.instanceType;
        return v6946.constructorScope;
      } else {
        var v6947 = this.type;
        return v6947.containedScope;
      }
      return;
    }
    function v752(scope$$17) {
      var v6949 = this.type;
      var v15290;
      var v20291 = this.name;
      if (v20291) {
        var v20289 = this.name;
        var v20290 = this.getOptionalNameString();
        v15290 = v20289 + v20290;
      } else {
        v15290 = "";
      }
      var v6950 = v15290;
      return v6949.getMemberTypeNameEx(v6950, false, false, scope$$17);
    }
    function v751() {
      return this.type;
    }
    function v750() {
      return true;
    }
    function v749() {
      var v6951 = TypeScript$$20.SymbolKind;
      return v6951.Type;
    }
    function v748(loc) {
      var v15291 = this.additionalLocations;
      var v6952 = v15291 == null;
      if (v6952) {
        this.additionalLocations = [];
      }
      var v6953 = this.additionalLocations;
      var v15292 = this.additionalLocations;
      var v6954 = v15292.length;
      v6953[v6954] = loc;
      return;
    }
    function TypeSymbol$$1(locName, location$$23, length$$17, unitIndex$$5, type$$33) {
      _super$$49.call(this, locName, location$$23, length$$17, unitIndex$$5);
      this.type = type$$33;
      this.expansions = [];
      this.expansionsDeclAST = [];
      this.isDynamic = false;
      this.isMethod = false;
      this.aliasLink = null;
      this.onlyReferencedAsTypeRef = TypeScript$$20.optimizeModuleCodeGen;
      this.prettyName = this.name;
      return;
    }
    __extends(TypeSymbol$$1, _super$$49);
    var v6955 = TypeSymbol$$1.prototype;
    v6955.addLocation = v748;
    var v6956 = TypeSymbol$$1.prototype;
    v6956.kind = v749;
    var v6957 = TypeSymbol$$1.prototype;
    v6957.isType = v750;
    var v6958 = TypeSymbol$$1.prototype;
    v6958.getType = v751;
    var v6959 = TypeSymbol$$1.prototype;
    v6959.getTypeNameEx = v752;
    var v6960 = TypeSymbol$$1.prototype;
    v6960.instanceScope = v753;
    var v6961 = TypeSymbol$$1.prototype;
    v6961.toString = v754;
    var v6962 = TypeSymbol$$1.prototype;
    v6962.isClass = v755;
    var v6963 = TypeSymbol$$1.prototype;
    v6963.isFunction = v756;
    var v6964 = TypeSymbol$$1.prototype;
    v6964.specializeType = v757;
    var v6965 = TypeSymbol$$1.prototype;
    v6965.getPrettyName = v758;
    var v6966 = TypeSymbol$$1.prototype;
    v6966.getPrettyNameOfDynamicModule = v759;
    var v6967 = TypeSymbol$$1.prototype;
    v6967.getDocComments = v760;
    return TypeSymbol$$1;
  }
  function v747(_super$$48) {
    function v746(varFlags) {
      var v20292 = TypeScript$$20.VarFlags;
      var v15293 = v20292.Ambient;
      var v6968 = TypeScript$$20.hasFlag(varFlags, v15293);
      if (v6968) {
        var v15294 = this.flags;
        var v20293 = TypeScript$$20.SymbolFlags;
        var v15295 = v20293.Ambient;
        this.flags = v15294 | v15295;
      }
      var v20294 = TypeScript$$20.VarFlags;
      var v15296 = v20294.Constant;
      var v6969 = TypeScript$$20.hasFlag(varFlags, v15296);
      if (v6969) {
        var v15297 = this.flags;
        var v20295 = TypeScript$$20.SymbolFlags;
        var v15298 = v20295.Constant;
        this.flags = v15297 | v15298;
      }
      var v20296 = TypeScript$$20.VarFlags;
      var v15299 = v20296.Static;
      var v6970 = TypeScript$$20.hasFlag(varFlags, v15299);
      if (v6970) {
        var v15300 = this.flags;
        var v20297 = TypeScript$$20.SymbolFlags;
        var v15301 = v20297.Static;
        this.flags = v15300 | v15301;
      }
      var v20298 = TypeScript$$20.VarFlags;
      var v15302 = v20298.Property;
      var v6971 = TypeScript$$20.hasFlag(varFlags, v15302);
      if (v6971) {
        var v15303 = this.flags;
        var v20299 = TypeScript$$20.SymbolFlags;
        var v15304 = v20299.Property;
        this.flags = v15303 | v15304;
      }
      var v20300 = TypeScript$$20.VarFlags;
      var v15305 = v20300.Private;
      var v6972 = TypeScript$$20.hasFlag(varFlags, v15305);
      if (v6972) {
        var v15306 = this.flags;
        var v20301 = TypeScript$$20.SymbolFlags;
        var v15307 = v20301.Private;
        this.flags = v15306 | v15307;
      }
      var v20302 = TypeScript$$20.VarFlags;
      var v15308 = v20302.Public;
      var v6973 = TypeScript$$20.hasFlag(varFlags, v15308);
      if (v6973) {
        var v15309 = this.flags;
        var v20303 = TypeScript$$20.SymbolFlags;
        var v15310 = v20303.Public;
        this.flags = v15309 | v15310;
      }
      var v20304 = TypeScript$$20.VarFlags;
      var v15311 = v20304.Readonly;
      var v6974 = TypeScript$$20.hasFlag(varFlags, v15311);
      if (v6974) {
        var v15312 = this.flags;
        var v20305 = TypeScript$$20.SymbolFlags;
        var v15313 = v20305.Readonly;
        this.flags = v15312 | v15313;
      }
      var v20306 = TypeScript$$20.VarFlags;
      var v15314 = v20306.Exported;
      var v6975 = TypeScript$$20.hasFlag(varFlags, v15314);
      if (v6975) {
        var v15315 = this.flags;
        var v20307 = TypeScript$$20.SymbolFlags;
        var v15316 = v20307.Exported;
        this.flags = v15315 | v15316;
      }
      return;
    }
    function v745() {
      return true;
    }
    function InferenceSymbol$$1(name$$53, location$$22, length$$16, unitIndex$$4) {
      _super$$48.call(this, name$$53, location$$22, length$$16, unitIndex$$4);
      this.typeCheckStatus = TypeCheckStatus.NotStarted;
      return;
    }
    __extends(InferenceSymbol$$1, _super$$48);
    var v6976 = InferenceSymbol$$1.prototype;
    v6976.isInferenceSymbol = v745;
    var v6977 = InferenceSymbol$$1.prototype;
    v6977.transferVarFlags = v746;
    return InferenceSymbol$$1;
  }
  function v744() {
    function ValueLocation$$1() {
      return;
    }
    return ValueLocation$$1;
  }
  function v743() {
    function v742() {
      var v6978 = this.flags;
      var v15317 = TypeScript$$20.SymbolFlags;
      var v6979 = v15317.Static;
      return TypeScript$$20.hasFlag(v6978, v6979);
    }
    function v741() {
      var v15318 = this.declAST;
      var v6981 = v15318 != null;
      if (v6981) {
        var v6980 = this.declAST;
        return v6980.getDocComments();
      }
      return[];
    }
    function v740() {
      var v20308 = this.declAST;
      var v15319 = v20308 != null;
      if (v15319) {
        var v23557 = this.declAST;
        var v20309 = v23557.nodeType;
        var v23558 = TypeScript$$20.NodeType;
        var v20310 = v23558.VarDecl;
        v15319 = v20309 == v20310;
      }
      var v6982 = v15319;
      if (v6982) {
        return this.declAST;
      }
      return null;
    }
    function v739(checker$$11) {
      var v15320 = this.declAST;
      var v6986 = v15320 != null;
      if (v6986) {
        var v20311 = this.declAST;
        var v15321 = v20311.nodeType;
        var v20312 = TypeScript$$20.NodeType;
        var v15322 = v20312.InterfaceDeclaration;
        var v6985 = v15321 == v15322;
        if (v6985) {
          return this.declAST;
        } else {
          var v23559 = this.container;
          var v20313 = v23559 != null;
          if (v20313) {
            var v23560 = this.container;
            var v23561 = checker$$11.gloMod;
            v20313 = v23560 != v23561;
          }
          var v15323 = v20313;
          if (v15323) {
            var v25166 = this.container;
            var v23562 = v25166.declAST;
            var v20314 = v23562.nodeType;
            var v23563 = TypeScript$$20.NodeType;
            var v20315 = v23563.InterfaceDeclaration;
            v15323 = v20314 == v20315;
          }
          var v6984 = v15323;
          if (v6984) {
            var v6983 = this.container;
            return v6983.declAST;
          }
        }
      }
      return null;
    }
    function v738() {
      throw new Error("please implement in derived class");
    }
    function v737(type$$32) {
      throw new Error("please implement in derived class");
    }
    function v736(pattern$$4, replacement$$2, checker$$10) {
      throw new Error("please implement in derived class");
    }
    function v735(outfile$$5) {
      var v6987 = this.toString();
      outfile$$5.Write(v6987);
      return;
    }
    function v734() {
      var v6988 = this.name;
      if (v6988) {
        return this.name;
      } else {
        return "_anonymous";
      }
      return;
    }
    function v733(identifier) {
      var v15324 = this.refs;
      var v6989 = !v15324;
      if (v6989) {
        this.refs = [];
      }
      var v6990 = this.refs;
      var v15325 = this.refs;
      var v6991 = v15325.length;
      v6990[v6991] = identifier;
      return;
    }
    function v732(scope$$16, checker$$9) {
      var v15326 = checker$$9 == null;
      var v20318 = !v15326;
      if (v20318) {
        var v20316 = this.container;
        var v20317 = checker$$9.gloMod;
        v15326 = v20316 == v20317;
      }
      var v6992 = v15326;
      if (v6992) {
        return true;
      }
      var v15327 = this.flags;
      var v20319 = TypeScript$$20.SymbolFlags;
      var v15328 = v20319.ModuleMember;
      var v7008 = TypeScript$$20.hasFlag(v15327, v15328);
      if (v7008) {
        var v15329 = this.flags;
        var v20320 = TypeScript$$20.SymbolFlags;
        var v15330 = v20320.Exported;
        var v6996 = TypeScript$$20.hasFlag(v15329, v15330);
        if (v6996) {
          var v20321 = this.flags;
          var v23564 = TypeScript$$20.SymbolFlags;
          var v20322 = v23564.Private;
          var v15331 = TypeScript$$20.hasFlag(v20321, v20322);
          var v6994 = !v15331;
          if (v6994) {
            return true;
          } else {
            var v6993 = scope$$16.container;
            return aEnclosesB(this, v6993);
          }
        } else {
          var v15332 = checker$$9;
          if (v15332) {
            var v20323 = checker$$9.currentModDecl;
            var v20324 = this.declModule;
            v15332 = v20323 == v20324;
          }
          var v6995 = v15332;
          var v15334 = !v6995;
          if (v15334) {
            var v26149 = checker$$9.currentModDecl;
            if (v26149) {
              var v26294 = checker$$9.currentModDecl;
              v26149 = v26294.mod;
            }
            var v25851 = v26149;
            if (v25851) {
              var v26295 = checker$$9.currentModDecl;
              var v26150 = v26295.mod;
              v25851 = v26150.symbol;
            }
            var v25167 = v25851;
            if (v25167) {
              v25167 = this.declModule;
            }
            var v23565 = v25167;
            if (v23565) {
              var v25168 = this.declModule;
              v23565 = v25168.mod;
            }
            var v20325 = v23565;
            if (v20325) {
              var v25169 = this.declModule;
              var v23566 = v25169.mod;
              v20325 = v23566.symbol;
            }
            var v15333 = v20325;
            if (v15333) {
              var v25170 = checker$$9.currentModDecl;
              var v23567 = v25170.mod;
              var v20326 = v23567.symbol;
              var v25171 = this.declModule;
              var v23568 = v25171.mod;
              var v20327 = v23568.symbol;
              v15333 = aEnclosesB(v20326, v20327);
            }
            v6995 = v15333;
          }
          return v6995;
        }
      } else {
        var v6997 = this.declAST;
        if (v6997) {
          var v20328 = this.declAST;
          var v15335 = v20328.nodeType;
          var v20329 = TypeScript$$20.NodeType;
          var v15336 = v20329.FuncDecl;
          v6997 = v15335 == v15336;
        }
        var isFunction = v6997;
        var v6998 = isFunction;
        if (v6998) {
          var v15337 = this.declAST;
          v6998 = v15337.isMethod();
        }
        var isMethod$$2 = v6998;
        var v6999 = isFunction;
        if (v6999) {
          var v20330 = this.declAST;
          var v15338 = v20330.fncFlags;
          var v20331 = TypeScript$$20.FncFlags;
          var v15339 = v20331.Static;
          v6999 = TypeScript$$20.hasFlag(v15338, v15339);
        }
        var isStaticFunction = v6999;
        var v7000 = isMethod$$2;
        if (v7000) {
          var v20332 = this.declAST;
          var v15340 = v20332.fncFlags;
          var v20333 = TypeScript$$20.FncFlags;
          var v15341 = v20333.Private;
          v7000 = TypeScript$$20.hasFlag(v15340, v15341);
        }
        var isPrivateMethod = v7000;
        var v7001 = this.isType();
        if (v7001) {
          v7001 = this.aliasLink;
        }
        var isAlias = v7001;
        var v23569 = this.isMember();
        var v25172 = !v23569;
        if (v25172) {
          v23569 = isMethod$$2;
        }
        var v20334 = v23569;
        var v23570 = !v20334;
        if (v23570) {
          v20334 = isStaticFunction;
        }
        var v15342 = v20334;
        var v20335 = !v15342;
        if (v20335) {
          v15342 = isAlias;
        }
        var v7007 = v15342;
        if (v7007) {
          var v20336 = this.flags;
          var v23571 = TypeScript$$20.SymbolFlags;
          var v20337 = v23571.Private;
          var v15343 = TypeScript$$20.hasFlag(v20336, v20337);
          var v20338 = !v15343;
          if (v20338) {
            v15343 = isPrivateMethod;
          }
          var v7004 = v15343;
          if (v7004) {
            var v20339 = scope$$16.container;
            var v15344 = v20339 == null;
            if (v15344) {
              var v20340 = this.container;
              var v20341 = scope$$16.container;
              v15344 = v20340 != v20341;
            }
            var v7003 = v15344;
            if (v7003) {
              return false;
            } else {
              var v7002;
              var v20342 = this.container;
              var v15347 = v20342 == null;
              if (v15347) {
                v7002 = true;
              } else {
                var v15345 = scope$$16.container;
                var v15346 = this.container;
                v7002 = aEnclosesB(v15345, v15346);
              }
              return v7002;
            }
          } else {
            return true;
          }
        } else {
          var v7006 = this.container;
          if (v7006) {
            var v7005 = scope$$16.container;
            return aEnclosesB(this, v7005);
          } else {
            return true;
          }
        }
      }
      return;
    }
    function v731(checker$$8) {
      var v15348 = checker$$8.gloMod;
      var v7009 = this == v15348;
      if (v7009) {
        return true;
      }
      var v15349 = this.flags;
      var v20343 = TypeScript$$20.SymbolFlags;
      var v15350 = v20343.Private;
      var v7010 = TypeScript$$20.hasFlag(v15349, v15350);
      if (v7010) {
        return false;
      }
      var v20344 = this.flags;
      var v23572 = TypeScript$$20.SymbolFlags;
      var v20345 = v23572.Exported;
      var v15351 = TypeScript$$20.hasFlag(v20344, v20345);
      var v7013 = !v15351;
      if (v7013) {
        var v7011 = this.container;
        var v7012 = checker$$8.gloMod;
        return v7011 == v7012;
      }
      var v7014 = this.container;
      return v7014.isExternallyVisible(checker$$8);
    }
    function v730() {
      var builder$$4 = this.name;
      var ancestor = this.container;
      var v15352 = ancestor;
      if (v15352) {
        var v20346 = ancestor.name;
        var v20347 = TypeScript$$20.globalId;
        v15352 = v20346 != v20347;
      }
      var v7016 = v15352;
      for (;v7016;) {
        var v15353 = ancestor.name;
        var v7015 = v15353 + ".";
        builder$$4 = v7015 + builder$$4;
        ancestor = ancestor.container;
        var v15354 = ancestor;
        if (v15354) {
          var v20348 = ancestor.name;
          var v20349 = TypeScript$$20.globalId;
          v15354 = v20348 != v20349;
        }
        v7016 = v15354;
      }
      return builder$$4;
    }
    function v729(scope$$15) {
      var v7019 = scope$$15 == null;
      if (v7019) {
        var v7017 = this.getPrettyName(null);
        var v7018 = this.getOptionalNameString();
        return v7017 + v7018;
      }
      var v7020 = scope$$15.container;
      var lca = this.findCommonAncestorPath(v7020);
      var builder$$3 = "";
      var i$$63 = 0;
      var len$$24 = lca.length;
      var v7024 = i$$63 < len$$24;
      for (;v7024;) {
        var v7021 = lca[i$$63];
        var v15355;
        var v23573 = len$$24 - 1;
        var v20351 = i$$63 == v23573;
        if (v20351) {
          v15355 = scope$$15.container;
        } else {
          var v20350 = i$$63 + 1;
          v15355 = lca[v20350];
        }
        var v7022 = v15355;
        var prettyName = v7021.getPrettyName(v7022);
        var v7023 = prettyName + ".";
        builder$$3 = v7023 + builder$$3;
        i$$63++;
        v7024 = i$$63 < len$$24;
      }
      var v25173;
      var v25852 = len$$24 == 0;
      if (v25852) {
        v25173 = scope$$15.container;
      } else {
        v25173 = lca[0];
      }
      var v23574 = v25173;
      var v20352 = this.getPrettyName(v23574);
      var v20353 = this.getOptionalNameString();
      var v15356 = v20352 + v20353;
      builder$$3 = builder$$3 + v15356;
      return builder$$3;
    }
    function v728(scopeSymbol) {
      return this.name;
    }
    function v727(b$$9) {
      var v15357 = this.container;
      var v7025 = v15357 == null;
      if (v7025) {
        return new Array;
      }
      var v7026 = this.container;
      var aPath = v7026.pathToRoot();
      var bPath;
      if (b$$9) {
        bPath = b$$9.pathToRoot();
      } else {
        bPath = new Array;
      }
      var commonNodeIndex = -1;
      var i$$62 = 0;
      var aLen = aPath.length;
      var v7030 = i$$62 < aLen;
      for (;v7030;) {
        var aNode = aPath[i$$62];
        var j$$8 = 0;
        var bLen = bPath.length;
        var v7028 = j$$8 < bLen;
        for (;v7028;) {
          var bNode = bPath[j$$8];
          var v7027 = aNode == bNode;
          if (v7027) {
            commonNodeIndex = i$$62;
            break;
          }
          j$$8++;
          v7028 = j$$8 < bLen;
        }
        var v7029 = commonNodeIndex >= 0;
        if (v7029) {
          break;
        }
        i$$62++;
        v7030 = i$$62 < aLen;
      }
      var v7031 = commonNodeIndex >= 0;
      if (v7031) {
        return aPath.slice(0, commonNodeIndex);
      } else {
        return aPath;
      }
      return;
    }
    function v726() {
      var path$$6 = new Array;
      var node$$2 = this;
      var v15358 = node$$2;
      if (v15358) {
        var v20354 = node$$2.name;
        var v20355 = TypeScript$$20.globalId;
        v15358 = v20354 != v20355;
      }
      var v7033 = v15358;
      for (;v7033;) {
        var v7032 = path$$6.length;
        path$$6[v7032] = node$$2;
        node$$2 = node$$2.container;
        var v15359 = node$$2;
        if (v15359) {
          var v20356 = node$$2.name;
          var v20357 = TypeScript$$20.globalId;
          v15359 = v20356 != v20357;
        }
        v7033 = v15359;
      }
      return path$$6;
    }
    function v725() {
      var v7034;
      var v20358 = this.flags;
      var v23575 = TypeScript$$20.SymbolFlags;
      var v20359 = v23575.Optional;
      var v15360 = TypeScript$$20.hasFlag(v20358, v20359);
      if (v15360) {
        v7034 = "?";
      } else {
        v7034 = "";
      }
      return v7034;
    }
    function v724(scope$$14) {
      var v7035 = TypeScript$$20.MemberName;
      var v7036 = this.toString();
      return v7035.create(v7036);
    }
    function v723(scope$$13) {
      var v7037 = this.getTypeNameEx(scope$$13);
      return v7037.toString();
    }
    function v722() {
      var v15361 = this.flags;
      var v20360 = TypeScript$$20.SymbolFlags;
      var v15362 = v20360.Property;
      var v7038 = TypeScript$$20.hasFlag(v15361, v15362);
      if (v7038) {
        var v20361 = this.flags;
        var v23576 = TypeScript$$20.SymbolFlags;
        var v20362 = v23576.ModuleMember;
        var v15363 = TypeScript$$20.hasFlag(v20361, v20362);
        v7038 = !v15363;
      }
      return v7038;
    }
    function v721() {
      return false;
    }
    function v720() {
      return null;
    }
    function v719() {
      return false;
    }
    function v718() {
      return false;
    }
    function v717() {
      return false;
    }
    function v716() {
      return false;
    }
    function v715() {
      return false;
    }
    function v714() {
      return false;
    }
    function v713() {
      return null;
    }
    function Symbol$$1(name$$52, location$$21, length$$15, unitIndex$$3) {
      this.name = name$$52;
      this.location = location$$21;
      this.length = length$$15;
      this.unitIndex = unitIndex$$3;
      this.bound = false;
      var v7039 = TypeScript$$20.SymbolFlags;
      this.flags = v7039.None;
      this.isObjectLitField = false;
      this.declAST = null;
      this.declModule = null;
      var v7040 = TypeScript$$20.CompilerDiagnostics;
      this.passSymbolCreated = v7040.analysisPass;
      return;
    }
    var v7041 = Symbol$$1.prototype;
    v7041.instanceScope = v713;
    var v7042 = Symbol$$1.prototype;
    v7042.isVariable = v714;
    var v7043 = Symbol$$1.prototype;
    v7043.isMember = v715;
    var v7044 = Symbol$$1.prototype;
    v7044.isInferenceSymbol = v716;
    var v7045 = Symbol$$1.prototype;
    v7045.isWith = v717;
    var v7046 = Symbol$$1.prototype;
    v7046.writeable = v718;
    var v7047 = Symbol$$1.prototype;
    v7047.isType = v719;
    var v7048 = Symbol$$1.prototype;
    v7048.getType = v720;
    var v7049 = Symbol$$1.prototype;
    v7049.isAccessor = v721;
    var v7050 = Symbol$$1.prototype;
    v7050.isInstanceProperty = v722;
    var v7051 = Symbol$$1.prototype;
    v7051.getTypeName = v723;
    var v7052 = Symbol$$1.prototype;
    v7052.getTypeNameEx = v724;
    var v7053 = Symbol$$1.prototype;
    v7053.getOptionalNameString = v725;
    var v7054 = Symbol$$1.prototype;
    v7054.pathToRoot = v726;
    var v7055 = Symbol$$1.prototype;
    v7055.findCommonAncestorPath = v727;
    var v7056 = Symbol$$1.prototype;
    v7056.getPrettyName = v728;
    var v7057 = Symbol$$1.prototype;
    v7057.scopeRelativeName = v729;
    var v7058 = Symbol$$1.prototype;
    v7058.fullName = v730;
    var v7059 = Symbol$$1.prototype;
    v7059.isExternallyVisible = v731;
    var v7060 = Symbol$$1.prototype;
    v7060.visible = v732;
    var v7061 = Symbol$$1.prototype;
    v7061.addRef = v733;
    var v7062 = Symbol$$1.prototype;
    v7062.toString = v734;
    var v7063 = Symbol$$1.prototype;
    v7063.print = v735;
    var v7064 = Symbol$$1.prototype;
    v7064.specializeType = v736;
    var v7065 = Symbol$$1.prototype;
    v7065.setType = v737;
    var v7066 = Symbol$$1.prototype;
    v7066.kind = v738;
    var v7067 = Symbol$$1.prototype;
    v7067.getInterfaceDeclFromSymbol = v739;
    var v7068 = Symbol$$1.prototype;
    v7068.getVarDeclFromSymbol = v740;
    var v7069 = Symbol$$1.prototype;
    v7069.getDocComments = v741;
    var v7070 = Symbol$$1.prototype;
    v7070.isStatic = v742;
    return Symbol$$1;
  }
  function v712(TypeCheckStatus$$1) {
    TypeCheckStatus$$1._map = [];
    var v7071 = TypeCheckStatus$$1._map;
    v7071[0] = "NotStarted";
    TypeCheckStatus$$1.NotStarted = 0;
    var v7072 = TypeCheckStatus$$1._map;
    v7072[1] = "Started";
    TypeCheckStatus$$1.Started = 1;
    var v7073 = TypeCheckStatus$$1._map;
    v7073[2] = "Finished";
    TypeCheckStatus$$1.Finished = 2;
    return;
  }
  function aLexicallyEnclosesB(a$$7, b$$7) {
    var v23577 = a$$7.declAST;
    if (v23577) {
      v23577 = b$$7;
    }
    var v20363 = v23577;
    if (v20363) {
      v20363 = b$$7.declAST;
    }
    var v15364 = v20363;
    if (v15364) {
      var v23578 = a$$7.declAST;
      var v20364 = v23578.nodeType;
      var v23579 = TypeScript$$20.NodeType;
      var v20365 = v23579.FuncDecl;
      v15364 = v20364 == v20365;
    }
    var v7075 = v15364;
    if (v7075) {
      var v20366 = a$$7.declAST;
      var v15365 = v20366.minChar;
      var v20367 = b$$7.declAST;
      var v15366 = v20367.minChar;
      var v7074 = v15365 <= v15366;
      if (v7074) {
        var v20368 = a$$7.declAST;
        var v15367 = v20368.limChar;
        var v20369 = b$$7.declAST;
        var v15368 = v20369.limChar;
        v7074 = v15367 >= v15368;
      }
      return v7074;
    } else {
      return false;
    }
    return;
  }
  function aEnclosesB(a$$8, b$$8) {
    var v7077 = a$$8.container;
    for (;v7077;) {
      var v15369 = a$$8 == b$$8;
      var v20371 = !v15369;
      if (v20371) {
        var v20370 = a$$8.container;
        v15369 = aLexicallyEnclosesB(v20370, b$$8);
      }
      var v7076 = v15369;
      if (v7076) {
        return true;
      }
      a$$8 = a$$8.container;
      v7077 = a$$8.container;
    }
    return false;
  }
  var v15370 = TypeScript$$20.TypeCheckStatus;
  var v20372 = !v15370;
  if (v20372) {
    v15370 = TypeScript$$20.TypeCheckStatus = {};
  }
  var v7078 = v15370;
  v712(v7078);
  var TypeCheckStatus = TypeScript$$20.TypeCheckStatus;
  TypeScript$$20.aLexicallyEnclosesB = aLexicallyEnclosesB;
  TypeScript$$20.aEnclosesB = aEnclosesB;
  var Symbol = v743();
  TypeScript$$20.Symbol = Symbol;
  var ValueLocation = v744();
  TypeScript$$20.ValueLocation = ValueLocation;
  var InferenceSymbol = v747(Symbol);
  TypeScript$$20.InferenceSymbol = InferenceSymbol;
  var TypeSymbol = v761(InferenceSymbol);
  TypeScript$$20.TypeSymbol = TypeSymbol;
  var WithSymbol = v763(TypeSymbol);
  TypeScript$$20.WithSymbol = WithSymbol;
  var FieldSymbol = v775(InferenceSymbol);
  TypeScript$$20.FieldSymbol = FieldSymbol;
  var ParameterSymbol = v786(InferenceSymbol);
  TypeScript$$20.ParameterSymbol = ParameterSymbol;
  var VariableSymbol = v793(InferenceSymbol);
  TypeScript$$20.VariableSymbol = VariableSymbol;
  return;
}
function v711(TypeScript$$19) {
  function v710() {
    function v709(checker$$7, ast$$59, hasConstruct) {
      var v7079 = this.hasBeenTypechecked;
      if (v7079) {
        return;
      }
      this.hasBeenTypechecked = true;
      var len$$23 = 0;
      var v15371 = this.signatures;
      if (v15371) {
        var v23580 = this.signatures;
        var v20373 = len$$23 = v23580.length;
        v15371 = v20373 > 0;
      }
      var v7089 = v15371;
      if (v7089) {
        var i$$61 = 0;
        var v7088 = i$$61 < len$$23;
        for (;v7088;) {
          var v25174 = !hasConstruct;
          if (v25174) {
            var v25853 = this.definitionSignature;
            v25174 = !v25853;
          }
          var v23581 = v25174;
          if (v23581) {
            var v25854 = this.signatures;
            var v25175 = v25854[i$$61];
            v23581 = v25175.declAST;
          }
          var v20374 = v23581;
          if (v20374) {
            var v25855 = this.signatures;
            var v25176 = v25855[i$$61];
            var v23582 = v25176.declAST;
            v20374 = v23582.isOverload;
          }
          var v15372 = v20374;
          if (v15372) {
            var v26151 = this.signatures;
            var v25856 = v26151[i$$61];
            var v25177 = v25856.declAST;
            var v23583 = v25177.fncFlags;
            var v25178 = TypeScript$$19.FncFlags;
            var v23584 = v25178.Ambient;
            var v20375 = TypeScript$$19.hasFlag(v23583, v23584);
            v15372 = !v20375;
          }
          var v7082 = v15372;
          if (v7082) {
            var v7080 = checker$$7.errorReporter;
            var v20376 = this.signatures;
            var v15373 = v20376[i$$61];
            var v7081 = v15373.declAST;
            v7080.simpleError(v7081, "Overload declaration lacks definition");
          }
          var v25857 = this.signatures;
          var v25179 = v25857[i$$61];
          var v23585 = v25179.declAST;
          if (v23585) {
            var v26152 = this.signatures;
            var v25858 = v26152[i$$61];
            var v25180 = v25858.declAST;
            v23585 = v25180.isConstructor;
          }
          var v20377 = v23585;
          if (v20377) {
            var v25859 = this.signatures;
            var v25181 = v25859[i$$61];
            var v23586 = v25181.declAST;
            v20377 = v23586.classDecl;
          }
          var v15374 = v20377;
          if (v15374) {
            var v26368 = this.signatures;
            var v26296 = v26368[i$$61];
            var v26153 = v26296.declAST;
            var v25860 = v26153.classDecl;
            var v25182 = v25860.type;
            var v23587 = v25182.symbol;
            var v20378 = v23587.typeCheckStatus;
            var v23588 = TypeScript$$19.TypeCheckStatus;
            var v20379 = v23588.NotStarted;
            v15374 = v20378 == v20379;
          }
          var v7085 = v15374;
          if (v7085) {
            var v7083 = checker$$7.typeFlow;
            var v23589 = this.signatures;
            var v20380 = v23589[i$$61];
            var v15375 = v20380.declAST;
            var v7084 = v15375.classDecl;
            v7083.typeCheck(v7084);
          }
          var v7086 = checker$$7.typeFlow;
          var v20381 = this.signatures;
          var v15376 = v20381[i$$61];
          var v7087 = v15376.declAST;
          v7086.typeCheck(v7087);
          i$$61++;
          v7088 = i$$61 < len$$23;
        }
        this.verifySignatures(checker$$7);
      }
      return;
    }
    function v708(checker$$6) {
      var len$$22 = 0;
      var v15377 = this.signatures;
      if (v15377) {
        var v23590 = this.signatures;
        var v20382 = len$$22 = v23590.length;
        v15377 = v20382 > 0;
      }
      var v7100 = v15377;
      if (v7100) {
        var i$$60 = 0;
        var v7099 = i$$60 < len$$22;
        for (;v7099;) {
          var j$$7 = i$$60 + 1;
          var v7094 = j$$7 < len$$22;
          for (;v7094;) {
            var v25861 = this.signatures;
            var v25183 = v25861[i$$60];
            var v23591 = v25183.declAST;
            if (v23591) {
              var v25862 = this.signatures;
              var v25184 = v25862[j$$7];
              v23591 = v25184.declAST;
            }
            var v20383 = v23591;
            if (v20383) {
              var v26369 = this.signatures;
              var v26297 = v26369[i$$60];
              var v26154 = v26297.declAST;
              var v25863 = v26154.fncFlags;
              var v26155 = TypeScript$$19.FncFlags;
              var v25864 = v26155.Definition;
              var v25185 = TypeScript$$19.hasFlag(v25863, v25864);
              var v23592 = !v25185;
              if (v23592) {
                var v26370 = this.signatures;
                var v26298 = v26370[j$$7];
                var v26156 = v26298.declAST;
                var v25865 = v26156.fncFlags;
                var v26157 = TypeScript$$19.FncFlags;
                var v25866 = v26157.Definition;
                var v25186 = TypeScript$$19.hasFlag(v25865, v25866);
                v23592 = !v25186;
              }
              v20383 = v23592;
            }
            var v15378 = v20383;
            if (v15378) {
              var v23593 = this.signatures;
              var v20384 = v23593[i$$60];
              var v23594 = this.signatures;
              var v20385 = v23594[j$$7];
              v15378 = checker$$6.signaturesAreIdentical(v20384, v20385);
            }
            var v7093 = v15378;
            if (v7093) {
              var v7090 = checker$$6.errorReporter;
              var v20386 = this.signatures;
              var v15379 = v20386[i$$60];
              var v7091 = v15379.declAST;
              var v15380;
              var v25867 = this.signatures;
              var v25187 = v25867[i$$60];
              var v23595 = v25187.declAST;
              if (v23595) {
                var v26158 = this.signatures;
                var v25868 = v26158[i$$60];
                var v25188 = v25868.declAST;
                v23595 = v25188.name;
              }
              var v20388 = v23595;
              if (v20388) {
                var v26299 = this.signatures;
                var v26159 = v26299[i$$60];
                var v25869 = v26159.declAST;
                var v25189 = v25869.name;
                var v23596 = v25189.actualText;
                var v20387 = "Signature for '" + v23596;
                v15380 = v20387 + "' is duplicated";
              } else {
                v15380 = "Signature is duplicated";
              }
              var v7092 = v15380;
              v7090.simpleError(v7091, v7092);
            }
            j$$7++;
            v7094 = j$$7 < len$$22;
          }
          var v7098 = this.definitionSignature;
          if (v7098) {
            var v20389 = this.definitionSignature;
            var v23597 = this.signatures;
            var v20390 = v23597[i$$60];
            var v15381 = checker$$6.signatureIsAssignableToTarget(v20389, v20390);
            var v7097 = !v15381;
            if (v7097) {
              var v7095 = checker$$6.errorReporter;
              var v20391 = this.signatures;
              var v15382 = v20391[i$$60];
              var v7096 = v15382.declAST;
              v7095.simpleError(v7096, "Overload signature is not compatible with function definition");
            }
          }
          i$$60++;
          v7099 = i$$60 < len$$22;
        }
      }
      return;
    }
    function v707(pattern$$3, replacement$$1, checker$$5) {
      var result$$13 = new SignatureGroup$$1;
      var v7104 = this.signatures;
      if (v7104) {
        var i$$59 = 0;
        var v7101 = this.signatures;
        var len$$21 = v7101.length;
        var v7103 = i$$59 < len$$21;
        for (;v7103;) {
          var v20392 = this.signatures;
          var v15383 = v20392[i$$59];
          var v7102 = v15383.specializeType(pattern$$3, replacement$$1, checker$$5);
          result$$13.addSignature(v7102);
          i$$59++;
          v7103 = i$$59 < len$$21;
        }
      }
      return result$$13;
    }
    function v706(prefix$$3, shortform$$2, scope$$12) {
      var result$$12 = [];
      var v7105 = this.signatures;
      var len$$20 = v7105.length;
      var v7106 = len$$20 > 1;
      if (v7106) {
        shortform$$2 = false;
      }
      var i$$58 = 0;
      var v7111 = i$$58 < len$$20;
      for (;v7111;) {
        var v15384 = len$$20 > 1;
        if (v15384) {
          var v23598 = this.signatures;
          var v20393 = v23598[i$$58];
          var v20394 = this.definitionSignature;
          v15384 = v20393 == v20394;
        }
        var v7107 = v15384;
        if (v7107) {
          i$$58++;
          v7111 = i$$58 < len$$20;
          continue;
        }
        var v15385 = this.flags;
        var v20395 = TypeScript$$19.SignatureFlags;
        var v15386 = v20395.IsIndexer;
        var v7110 = v15385 & v15386;
        if (v7110) {
          var v20396 = this.signatures;
          var v15387 = v20396[i$$58];
          var v7108 = v15387.toStringHelperEx(shortform$$2, true, scope$$12);
          result$$12.push(v7108);
        } else {
          var v20397 = this.signatures;
          var v15388 = v20397[i$$58];
          var v7109 = v15388.toStringHelperEx(shortform$$2, false, scope$$12, prefix$$3);
          result$$12.push(v7109);
        }
        i$$58++;
        v7111 = i$$58 < len$$20;
      }
      return result$$12;
    }
    function v705() {
      var v7112 = this.signatures;
      return v7112.toString();
    }
    function v704(signature$$2) {
      var v15389 = this.signatures;
      var v7113 = v15389 == null;
      if (v7113) {
        var v26677 = new Array;
        this.signatures = v26677;
      }
      var v7114 = this.signatures;
      var v15390 = this.signatures;
      var v7115 = v15390.length;
      v7114[v7115] = signature$$2;
      var v25190 = signature$$2.declAST;
      if (v25190) {
        var v26160 = signature$$2.declAST;
        var v25870 = v26160.isOverload;
        v25190 = !v25870;
      }
      var v23599 = v25190;
      if (v23599) {
        var v25871 = signature$$2.declAST;
        var v25191 = v25871.isSignature();
        v23599 = !v25191;
      }
      var v20398 = v23599;
      if (v20398) {
        var v25872 = signature$$2.declAST;
        var v25192 = v25872.fncFlags;
        var v25873 = TypeScript$$19.FncFlags;
        var v25193 = v25873.Ambient;
        var v23600 = TypeScript$$19.hasFlag(v25192, v25193);
        v20398 = !v23600;
      }
      var v15391 = v20398;
      if (v15391) {
        var v23601 = signature$$2.declAST;
        var v20399 = v23601.fncFlags;
        var v23602 = TypeScript$$19.FncFlags;
        var v20400 = v23602.Definition;
        v15391 = TypeScript$$19.hasFlag(v20399, v20400);
      }
      var v7116 = v15391;
      if (v7116) {
        this.definitionSignature = signature$$2;
      }
      return;
    }
    function SignatureGroup$$1() {
      this.signatures = [];
      this.hasImplementation = true;
      this.definitionSignature = null;
      this.hasBeenTypechecked = false;
      var v7117 = TypeScript$$19.SignatureFlags;
      this.flags = v7117.None;
      return;
    }
    var v7118 = SignatureGroup$$1.prototype;
    v7118.addSignature = v704;
    var v7119 = SignatureGroup$$1.prototype;
    v7119.toString = v705;
    var v7120 = SignatureGroup$$1.prototype;
    v7120.toStrings = v706;
    var v7121 = SignatureGroup$$1.prototype;
    v7121.specializeType = v707;
    var v7122 = SignatureGroup$$1.prototype;
    v7122.verifySignatures = v708;
    var v7123 = SignatureGroup$$1.prototype;
    v7123.typeCheck = v709;
    return SignatureGroup$$1;
  }
  function v703() {
    function v702(shortform$$1, brackets$$1, scope$$11, prefix$$2) {
      var v15392 = typeof prefix$$2;
      var v7124 = v15392 === "undefined";
      if (v7124) {
        prefix$$2 = "";
      }
      var v7125 = TypeScript$$19.MemberNameArray;
      var builder$$2 = new v7125;
      if (brackets$$1) {
        builder$$2.prefix = prefix$$2 + "[";
      } else {
        builder$$2.prefix = prefix$$2 + "(";
      }
      var v7126 = this.parameters;
      var paramLen$$1 = v7126.length;
      var v7127;
      var v15393 = this.hasVariableArgList;
      if (v15393) {
        v7127 = paramLen$$1 - 1;
      } else {
        v7127 = paramLen$$1;
      }
      var len$$19 = v7127;
      var i$$57 = 0;
      var v7132 = i$$57 < len$$19;
      for (;v7132;) {
        var v15394 = TypeScript$$19.MemberName;
        var v25874 = this.parameters;
        var v25194 = v25874[i$$57];
        var v23603 = v25194.name;
        var v25195;
        var v26300 = this.parameters;
        var v26161 = v26300[i$$57];
        var v25875 = v26161.isOptional();
        if (v25875) {
          v25195 = "?";
        } else {
          v25195 = "";
        }
        var v23604 = v25195;
        var v20401 = v23603 + v23604;
        var v15395 = v20401 + ": ";
        var v7128 = v15394.create(v15395);
        builder$$2.add(v7128);
        var v23605 = this.parameters;
        var v20402 = v23605[i$$57];
        var v15396 = v20402.getType();
        var v7129 = v15396.getScopedTypeNameEx(scope$$11);
        builder$$2.add(v7129);
        var v15397 = paramLen$$1 - 1;
        var v7131 = i$$57 < v15397;
        if (v7131) {
          var v15398 = TypeScript$$19.MemberName;
          var v7130 = v15398.create(", ");
          builder$$2.add(v7130);
        }
        i$$57++;
        v7132 = i$$57 < len$$19;
      }
      var v7135 = this.hasVariableArgList;
      if (v7135) {
        var v15399 = TypeScript$$19.MemberName;
        var v25876 = this.parameters;
        var v25196 = v25876[i$$57];
        var v23606 = v25196.name;
        var v20403 = "..." + v23606;
        var v15400 = v20403 + ": ";
        var v7133 = v15399.create(v15400);
        builder$$2.add(v7133);
        var v23607 = this.parameters;
        var v20404 = v23607[i$$57];
        var v15401 = v20404.getType();
        var v7134 = v15401.getScopedTypeNameEx(scope$$11);
        builder$$2.add(v7134);
      }
      if (shortform$$1) {
        if (brackets$$1) {
          var v15402 = TypeScript$$19.MemberName;
          var v7136 = v15402.create("] => ");
          builder$$2.add(v7136);
        } else {
          var v15403 = TypeScript$$19.MemberName;
          var v7137 = v15403.create(") => ");
          builder$$2.add(v7137);
        }
      } else {
        if (brackets$$1) {
          var v15404 = TypeScript$$19.MemberName;
          var v7138 = v15404.create("]: ");
          builder$$2.add(v7138);
        } else {
          var v15405 = TypeScript$$19.MemberName;
          var v7139 = v15405.create("): ");
          builder$$2.add(v7139);
        }
      }
      var v15406 = this.returnType;
      var v7142 = v15406.type;
      if (v7142) {
        var v20405 = this.returnType;
        var v15407 = v20405.type;
        var v7140 = v15407.getScopedTypeNameEx(scope$$11);
        builder$$2.add(v7140);
      } else {
        var v15408 = TypeScript$$19.MemberName;
        var v7141 = v15408.create("any");
        builder$$2.add(v7141);
      }
      return builder$$2;
    }
    function v701(shortform, brackets, scope$$10) {
      var v7143 = this.toStringHelperEx(shortform, brackets, scope$$10);
      return v7143.toString();
    }
    function v700() {
      return this.toStringHelper(false, false, null);
    }
    function v699(pattern$$2, replacement, checker$$4) {
      var result$$11 = new Signature$$1;
      var v7144 = this.hasVariableArgList;
      if (v7144) {
        result$$11.hasVariableArgList = true;
      }
      var v7145 = TypeScript$$19.TypeLink;
      var v26678 = new v7145;
      result$$11.returnType = v26678;
      var v15409 = this.returnType;
      var v7148 = v15409.type;
      if (v7148) {
        var v7146 = result$$11.returnType;
        var v20406 = this.returnType;
        var v15410 = v20406.type;
        var v26679 = v15410.specializeType(pattern$$2, replacement, checker$$4, false);
        v7146.type = v26679;
      } else {
        var v7147 = result$$11.returnType;
        v7147.type = checker$$4.anyType;
      }
      var v7162 = this.parameters;
      if (v7162) {
        result$$11.parameters = [];
        var i$$56 = 0;
        var v7149 = this.parameters;
        var len$$18 = v7149.length;
        var v7161 = i$$56 < len$$18;
        for (;v7161;) {
          var v7150 = this.parameters;
          var oldSym = v7150[i$$56];
          var v7151 = TypeScript$$19.ValueLocation;
          var paramDef = new v7151;
          var v7152 = TypeScript$$19.ParameterSymbol;
          var v7153 = oldSym.name;
          var v7154 = oldSym.location;
          var v15411 = checker$$4.locationInfo;
          var v7155 = v15411.unitIndex;
          var paramSym$$1 = new v7152(v7153, v7154, v7155, paramDef);
          paramSym$$1.declAST = this.declAST;
          paramDef.symbol = paramSym$$1;
          var v7156 = TypeScript$$19.TypeLink;
          var v26680 = new v7156;
          paramDef.typeLink = v26680;
          var v7157 = result$$11.parameters;
          v7157[i$$56] = paramSym$$1;
          var oldType = oldSym.getType();
          if (oldType) {
            var v7158 = paramDef.typeLink;
            var v26681 = oldType.specializeType(pattern$$2, replacement, checker$$4, false);
            v7158.type = v26681;
            var v7159 = paramSym$$1.declAST;
            var v15412 = paramDef.typeLink;
            v7159.type = v15412.type;
          } else {
            var v7160 = paramDef.typeLink;
            v7160.type = checker$$4.anyType;
          }
          i$$56++;
          v7161 = i$$56 < len$$18;
        }
      }
      result$$11.nonOptionalParameterCount = this.nonOptionalParameterCount;
      result$$11.declAST = this.declAST;
      return result$$11;
    }
    function Signature$$1() {
      this.hasVariableArgList = false;
      this.parameters = null;
      this.declAST = null;
      var v7163 = TypeScript$$19.TypeCheckStatus;
      this.typeCheckStatus = v7163.NotStarted;
      this.nonOptionalParameterCount = 0;
      return;
    }
    var v7164 = Signature$$1.prototype;
    v7164.specializeType = v699;
    var v7165 = Signature$$1.prototype;
    v7165.toString = v700;
    var v7166 = Signature$$1.prototype;
    v7166.toStringHelper = v701;
    var v7167 = Signature$$1.prototype;
    v7167.toStringHelperEx = v702;
    return Signature$$1;
  }
  var Signature = v703();
  TypeScript$$19.Signature = Signature;
  var SignatureGroup = v710();
  TypeScript$$19.SignatureGroup = SignatureGroup;
  return;
}
function v698(TypeScript$$18) {
  function v697() {
    function v696() {
      var v15413 = this.scriptFragment;
      var v7170 = v15413 == null;
      if (v7170) {
        var ast$$58 = this.scopeStartAST;
        var minChar$$31 = ast$$58.minChar;
        var v7168;
        var v15415 = this.isMemberCompletion;
        if (v15415) {
          v7168 = this.pos;
        } else {
          var v15414 = this.pos;
          v7168 = v15414 + 1;
        }
        var limChar$$10 = v7168;
        var v15416 = this.logger;
        var v15417 = this.text;
        var v7169 = TypeScript$$18.quickParse(v15416, ast$$58, v15417, minChar$$31, limChar$$10, null);
        this.scriptFragment = v7169.Script;
      }
      return this.scriptFragment;
    }
    function v695() {
      var v7171 = this.scopeStartAST;
      return v7171.minChar;
    }
    function v694() {
      return this.scopeStartAST;
    }
    function v693() {
      var v7172 = this.scopeStartAST;
      return v7172.minChar;
    }
    function v692() {
      return this.scopeStartAST;
    }
    function v691() {
      return this.objectLiteralScopeGetter();
    }
    function v690() {
      return this.scopeGetter();
    }
    function EnclosingScopeContext$$1(logger$$3, script$$13, text$$20, pos$$5, isMemberCompletion$$1) {
      this.logger = logger$$3;
      this.script = script$$13;
      this.text = text$$20;
      this.pos = pos$$5;
      this.isMemberCompletion = isMemberCompletion$$1;
      this.scopeGetter = null;
      this.objectLiteralScopeGetter = null;
      this.scopeStartAST = null;
      this.skipNextFuncDeclForClass = false;
      this.deepestModuleDecl = null;
      this.enclosingClassDecl = null;
      this.enclosingObjectLit = null;
      this.publicsOnly = true;
      this.useFullAst = false;
      return;
    }
    var v7173 = EnclosingScopeContext$$1.prototype;
    v7173.getScope = v690;
    var v7174 = EnclosingScopeContext$$1.prototype;
    v7174.getObjectLiteralScope = v691;
    var v7175 = EnclosingScopeContext$$1.prototype;
    v7175.getScopeAST = v692;
    var v7176 = EnclosingScopeContext$$1.prototype;
    v7176.getScopePosition = v693;
    var v7177 = EnclosingScopeContext$$1.prototype;
    v7177.getScriptFragmentStartAST = v694;
    var v7178 = EnclosingScopeContext$$1.prototype;
    v7178.getScriptFragmentPosition = v695;
    var v7179 = EnclosingScopeContext$$1.prototype;
    v7179.getScriptFragment = v696;
    return EnclosingScopeContext$$1;
  }
  function v689() {
    function MemberScopeContext$$1(flow, pos$$4, matchFlag) {
      this.flow = flow;
      this.pos = pos$$4;
      this.matchFlag = matchFlag;
      this.type = null;
      this.ast = null;
      var v7180 = TypeScript$$18.AstWalkOptions;
      var v26682 = new v7180;
      this.options = v26682;
      return;
    }
    return MemberScopeContext$$1;
  }
  function v688() {
    function TypeCollectionContext$$1(scopeChain$$1, checker$$3) {
      this.scopeChain = scopeChain$$1;
      this.checker = checker$$3;
      this.script = null;
      return;
    }
    return TypeCollectionContext$$1;
  }
  function preFindMemberScope(ast$$56, parent$$47, walker$$44) {
    var memScope = walker$$44.state;
    var v20407 = ast$$56.flags;
    var v20408 = memScope.matchFlag;
    var v15418 = TypeScript$$18.hasFlag(v20407, v20408);
    if (v15418) {
      var v23608 = memScope.pos;
      var v20409 = v23608 < 0;
      var v23611 = !v20409;
      if (v23611) {
        var v23609 = memScope.pos;
        var v23610 = ast$$56.limChar;
        v20409 = v23609 == v23610;
      }
      v15418 = v20409;
    }
    var v7185 = v15418;
    if (v7185) {
      memScope.ast = ast$$56;
      var v20410 = ast$$56.type;
      var v15419 = v20410 == null;
      if (v15419) {
        var v20411 = memScope.pos;
        v15419 = v20411 >= 0;
      }
      var v7183 = v15419;
      if (v7183) {
        var v7181 = memScope.flow;
        var v7182 = memScope.scope;
        v7181.inScopeTypeCheck(ast$$56, v7182);
      }
      memScope.type = ast$$56.type;
      var v7184 = memScope.options;
      v7184.stopWalk();
    }
    return ast$$56;
  }
  function pushTypeCollectionScope(container$$2, valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, context$$37, thisType$$1, classType$$2, moduleDecl$$5) {
    var v7186 = TypeScript$$18.SymbolScopeBuilder;
    var builder$$1 = new v7186(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container$$2);
    var v7187 = TypeScript$$18.ScopeChain;
    var v7188 = context$$37.scopeChain;
    var chain$$1 = new v7187(container$$2, v7188, builder$$1);
    chain$$1.thisType = thisType$$1;
    chain$$1.classType = classType$$2;
    chain$$1.moduleDecl = moduleDecl$$5;
    context$$37.scopeChain = chain$$1;
    return;
  }
  function popTypeCollectionScope(context$$38) {
    var v7189 = context$$38.scopeChain;
    context$$38.scopeChain = v7189.previous;
    return;
  }
  function preFindEnclosingScope(ast$$57, parent$$48, walker$$45) {
    function v687() {
      var v15420 = funcDecl$$15.isConstructor;
      if (v15420) {
        var v20412 = funcDecl$$15.fncFlags;
        var v23612 = TypeScript$$18.FncFlags;
        var v20413 = v23612.ClassMethod;
        v15420 = TypeScript$$18.hasFlag(v20412, v20413);
      }
      var v7192 = v15420;
      if (v7192) {
        var v15421 = ast$$57.type;
        if (v15421) {
          var v20414 = ast$$57.type;
          v15421 = v20414.enclosingType;
        }
        var v7191 = v15421;
        if (v7191) {
          var v15422 = ast$$57.type;
          var v7190 = v15422.enclosingType;
          return v7190.constructorScope;
        }
      }
      var v7194 = funcDecl$$15.scopeType;
      if (v7194) {
        var v7193 = funcDecl$$15.scopeType;
        return v7193.containedScope;
      }
      var v7196 = funcDecl$$15.type;
      if (v7196) {
        var v7195 = funcDecl$$15.type;
        return v7195.containedScope;
      }
      return null;
    }
    function v686() {
      var v7197;
      var v20415 = ast$$57.type;
      var v15424 = v20415 === null;
      if (v15424) {
        v7197 = null;
      } else {
        var v15423 = ast$$57.type;
        v7197 = v15423.containedScope;
      }
      return v7197;
    }
    function v685() {
      var v7198;
      var v20416 = ast$$57.type;
      var v15426 = v20416 === null;
      if (v15426) {
        v7198 = null;
      } else {
        var v15425 = ast$$57.type;
        v7198 = v15425.containedScope;
      }
      return v7198;
    }
    function v684() {
      var v7199 = objectLit.targetType;
      return v7199.memberScope;
    }
    function v683() {
      var v7200 = objectLit.targetType;
      return v7200.containedScope;
    }
    function v682() {
      var v7201;
      var v23613 = ast$$57.type;
      var v20417 = v23613 === null;
      var v23615 = !v20417;
      if (v23615) {
        var v25877 = ast$$57.type;
        var v25197 = v25877.instanceType;
        var v23614 = v25197.containedScope;
        v20417 = v23614 === null;
      }
      var v15428 = v20417;
      if (v15428) {
        v7201 = null;
      } else {
        var v20418 = ast$$57.type;
        var v15427 = v20418.instanceType;
        v7201 = v15427.containedScope;
      }
      return v7201;
    }
    function v681() {
      var v7202;
      var v20419 = script$$11.bod;
      var v15430 = v20419 === null;
      if (v15430) {
        v7202 = null;
      } else {
        var v15429 = script$$11.bod;
        v7202 = v15429.enclosingScope;
      }
      return v7202;
    }
    var context$$39 = walker$$45.state;
    var minChar$$30 = ast$$57.minChar;
    var limChar$$9 = ast$$57.limChar;
    var v20420 = ast$$57.nodeType;
    var v23616 = TypeScript$$18.NodeType;
    var v20421 = v23616.Script;
    var v15431 = v20420 == v20421;
    if (v15431) {
      var v20422 = context$$39.pos;
      v15431 = v20422 > limChar$$9;
    }
    var v7203 = v15431;
    if (v7203) {
      limChar$$9 = context$$39.pos;
    }
    var v20423 = context$$39.pos;
    var v15432 = minChar$$30 <= v20423;
    if (v15432) {
      var v20424 = context$$39.pos;
      v15432 = limChar$$9 >= v20424;
    }
    var v7209 = v15432;
    if (v7209) {
      var v7206 = ast$$57.nodeType;
      switch(v7206) {
        case TypeScript$$18.NodeType.Script:
          var script$$11 = ast$$57;
          context$$39.scopeGetter = v681;
          context$$39.scopeStartAST = script$$11;
          break;
        case TypeScript$$18.NodeType.ClassDeclaration:
          context$$39.scopeGetter = v682;
          context$$39.scopeStartAST = ast$$57;
          context$$39.enclosingClassDecl = ast$$57;
          break;
        case TypeScript$$18.NodeType.ObjectLit:
          var objectLit = ast$$57;
          var v7204 = objectLit.targetType;
          if (v7204) {
            context$$39.scopeGetter = v683;
            context$$39.objectLiteralScopeGetter = v684;
            context$$39.enclosingObjectLit = objectLit;
          }
          break;
        case TypeScript$$18.NodeType.ModuleDeclaration:
          context$$39.deepestModuleDecl = ast$$57;
          context$$39.scopeGetter = v685;
          context$$39.scopeStartAST = ast$$57;
          break;
        case TypeScript$$18.NodeType.InterfaceDeclaration:
          context$$39.scopeGetter = v686;
          context$$39.scopeStartAST = ast$$57;
          break;
        case TypeScript$$18.NodeType.FuncDecl:
          var funcDecl$$15 = ast$$57;
          var v7205 = context$$39.skipNextFuncDeclForClass;
          if (v7205) {
            context$$39.skipNextFuncDeclForClass = false;
          } else {
            context$$39.scopeGetter = v687;
            context$$39.scopeStartAST = ast$$57;
          }
        ;
      }
      var v7207 = walker$$45.options;
      v7207.goChildren = true;
    } else {
      var v7208 = walker$$45.options;
      v7208.goChildren = false;
    }
    return ast$$57;
  }
  function findEnclosingScopeAt(logger$$2, script$$12, text$$19, pos$$3, isMemberCompletion) {
    var context$$40 = new EnclosingScopeContext(logger$$2, script$$12, text$$19, pos$$3, isMemberCompletion);
    var v7210 = TypeScript$$18.getAstWalkerFactory();
    v7210.walk(script$$12, preFindEnclosingScope, null, null, context$$40);
    var v15433 = context$$40.scopeStartAST;
    var v7211 = v15433 === null;
    if (v7211) {
      return null;
    }
    return context$$40;
  }
  var TypeCollectionContext = v688();
  TypeScript$$18.TypeCollectionContext = TypeCollectionContext;
  var MemberScopeContext = v689();
  TypeScript$$18.MemberScopeContext = MemberScopeContext;
  var EnclosingScopeContext = v697();
  TypeScript$$18.EnclosingScopeContext = EnclosingScopeContext;
  TypeScript$$18.preFindMemberScope = preFindMemberScope;
  TypeScript$$18.pushTypeCollectionScope = pushTypeCollectionScope;
  TypeScript$$18.popTypeCollectionScope = popTypeCollectionScope;
  TypeScript$$18.preFindEnclosingScope = preFindEnclosingScope;
  TypeScript$$18.findEnclosingScopeAt = findEnclosingScopeAt;
  return;
}
function v680(TypeScript$$17) {
  function v679() {
    function v678(b$$6) {
      var v7212 = this.result;
      var v26683 = this.select(v7212, b$$6);
      this.result = v26683;
      var v7214 = this.result;
      if (v7214) {
        var v7213 = this.result;
        return this.stop(v7213);
      } else {
        return false;
      }
      return;
    }
    function v677() {
      this.result = null;
      return;
    }
    function ScopeSearchFilter$$1(select, stop$$1) {
      this.select = select;
      this.stop = stop$$1;
      this.result = null;
      return;
    }
    var v7215 = ScopeSearchFilter$$1.prototype;
    v7215.reset = v677;
    var v7216 = ScopeSearchFilter$$1.prototype;
    v7216.update = v678;
    return ScopeSearchFilter$$1;
  }
  function v676() {
    function AssignScopeContext$$1(scopeChain, typeFlow$$36, modDeclChain) {
      this.scopeChain = scopeChain;
      this.typeFlow = typeFlow$$36;
      this.modDeclChain = modDeclChain;
      return;
    }
    return AssignScopeContext$$1;
  }
  function pushAssignScope(scope$$9, context$$27, type$$31, classType, fnc) {
    var v7217 = TypeScript$$17.ScopeChain;
    var v7218 = context$$27.scopeChain;
    var chain = new v7217(null, v7218, scope$$9);
    chain.thisType = type$$31;
    chain.classType = classType;
    chain.fnc = fnc;
    context$$27.scopeChain = chain;
    return;
  }
  function popAssignScope(context$$28) {
    var v7219 = context$$28.scopeChain;
    context$$28.scopeChain = v7219.previous;
    return;
  }
  function instanceCompare(a$$6, b$$5) {
    var v15434 = a$$6 == null;
    var v20426 = !v15434;
    if (v20426) {
      var v20425 = a$$6.isInstanceProperty();
      v15434 = !v20425;
    }
    var v7220 = v15434;
    if (v7220) {
      return b$$5;
    } else {
      return a$$6;
    }
    return;
  }
  function instanceFilterStop(s$$17) {
    return s$$17.isInstanceProperty();
  }
  function preAssignModuleScopes(ast$$48, context$$29) {
    var moduleDecl$$4 = ast$$48;
    var memberScope$$1 = null;
    var aggScope = null;
    var v15435 = moduleDecl$$4.name;
    if (v15435) {
      v15435 = moduleDecl$$4.mod;
    }
    var v7222 = v15435;
    if (v7222) {
      var v7221 = moduleDecl$$4.name;
      var v15436 = moduleDecl$$4.mod;
      v7221.sym = v15436.symbol;
    }
    var mod$$1 = moduleDecl$$4.mod;
    var v7223 = !mod$$1;
    if (v7223) {
      return;
    }
    var v7224 = TypeScript$$17.SymbolTableScope;
    var v7225 = mod$$1.members;
    var v7226 = mod$$1.ambientMembers;
    var v7227 = mod$$1.enclosedTypes;
    var v7228 = mod$$1.ambientEnclosedTypes;
    var v7229 = mod$$1.symbol;
    memberScope$$1 = new v7224(v7225, v7226, v7227, v7228, v7229);
    mod$$1.memberScope = memberScope$$1;
    var v7230 = context$$29.modDeclChain;
    v7230.push(moduleDecl$$4);
    var v15437 = context$$29.typeFlow;
    var v7231 = v15437.checker;
    v7231.currentModDecl = moduleDecl$$4;
    var v7232 = TypeScript$$17.SymbolAggregateScope;
    var v7233 = mod$$1.symbol;
    aggScope = new v7232(v7233);
    aggScope.addParentScope(memberScope$$1);
    var v15438 = context$$29.scopeChain;
    var v7234 = v15438.scope;
    aggScope.addParentScope(v7234);
    pushAssignScope(aggScope, context$$29, null, null, null);
    mod$$1.containedScope = aggScope;
    var v7240 = mod$$1.symbol;
    if (v7240) {
      var v7235 = context$$29.typeFlow;
      var v7236 = mod$$1.containedScope;
      var v7237 = mod$$1.symbol;
      var v7238 = moduleDecl$$4.vars;
      var v15439 = mod$$1.members;
      var v7239 = v15439.privateMembers;
      v7235.addLocalsFromScope(v7236, v7237, v7238, v7239, true);
    }
    return;
  }
  function preAssignClassScopes(ast$$49, context$$30) {
    var classDecl$$6 = ast$$49;
    var memberScope$$2 = null;
    var aggScope$$1 = null;
    var v15440 = classDecl$$6.name;
    if (v15440) {
      v15440 = classDecl$$6.type;
    }
    var v7242 = v15440;
    if (v7242) {
      var v7241 = classDecl$$6.name;
      var v15441 = classDecl$$6.type;
      v7241.sym = v15441.symbol;
    }
    var classType$$1 = ast$$49.type;
    if (classType$$1) {
      var classSym = classType$$1.symbol;
      var v15442 = context$$30.typeFlow;
      var v7243 = v15442.checker;
      memberScope$$2 = v7243.scopeOf(classType$$1);
      var v7244 = TypeScript$$17.SymbolAggregateScope;
      var v7245 = classType$$1.symbol;
      aggScope$$1 = new v7244(v7245);
      aggScope$$1.addParentScope(memberScope$$2);
      var v15443 = context$$30.scopeChain;
      var v7246 = v15443.scope;
      aggScope$$1.addParentScope(v7246);
      classType$$1.containedScope = aggScope$$1;
      classType$$1.memberScope = memberScope$$2;
      var instanceType$$2 = classType$$1.instanceType;
      var v15444 = context$$30.typeFlow;
      var v7247 = v15444.checker;
      memberScope$$2 = v7247.scopeOf(instanceType$$2);
      instanceType$$2.memberScope = memberScope$$2;
      var v7248 = TypeScript$$17.SymbolAggregateScope;
      var v7249 = instanceType$$2.symbol;
      aggScope$$1 = new v7248(v7249);
      var v15445 = context$$30.scopeChain;
      var v7250 = v15445.scope;
      aggScope$$1.addParentScope(v7250);
      pushAssignScope(aggScope$$1, context$$30, instanceType$$2, classType$$1, null);
      instanceType$$2.containedScope = aggScope$$1;
    } else {
      var v7251 = context$$30.typeFlow;
      ast$$49.type = v7251.anyType;
    }
    return;
  }
  function preAssignInterfaceScopes(ast$$50, context$$31) {
    var interfaceDecl$$2 = ast$$50;
    var memberScope$$3 = null;
    var aggScope$$2 = null;
    var v15446 = interfaceDecl$$2.name;
    if (v15446) {
      v15446 = interfaceDecl$$2.type;
    }
    var v7253 = v15446;
    if (v7253) {
      var v7252 = interfaceDecl$$2.name;
      var v15447 = interfaceDecl$$2.type;
      v7252.sym = v15447.symbol;
    }
    var interfaceType = ast$$50.type;
    var v15448 = context$$31.typeFlow;
    var v7254 = v15448.checker;
    memberScope$$3 = v7254.scopeOf(interfaceType);
    interfaceType.memberScope = memberScope$$3;
    var v7255 = TypeScript$$17.SymbolAggregateScope;
    var v7256 = interfaceType.symbol;
    aggScope$$2 = new v7255(v7256);
    aggScope$$2.addParentScope(memberScope$$3);
    var v15449 = context$$31.scopeChain;
    var v7257 = v15449.scope;
    aggScope$$2.addParentScope(v7257);
    pushAssignScope(aggScope$$2, context$$31, null, null, null);
    interfaceType.containedScope = aggScope$$2;
    return;
  }
  function preAssignWithScopes(ast$$51, context$$32) {
    var withStmt$$1 = ast$$51;
    var withType = withStmt$$1.type;
    var v7258 = TypeScript$$17.ScopedMembers;
    var v15450 = TypeScript$$17.DualStringHashTable;
    var v20427 = TypeScript$$17.StringHashTable;
    var v15451 = new v20427;
    var v20428 = TypeScript$$17.StringHashTable;
    var v15452 = new v20428;
    var v7259 = new v15450(v15451, v15452);
    var members$$12 = new v7258(v7259);
    var v7260 = TypeScript$$17.ScopedMembers;
    var v15453 = TypeScript$$17.DualStringHashTable;
    var v20429 = TypeScript$$17.StringHashTable;
    var v15454 = new v20429;
    var v20430 = TypeScript$$17.StringHashTable;
    var v15455 = new v20430;
    var v7261 = new v15453(v15454, v15455);
    var ambientMembers$$1 = new v7260(v7261);
    var v7262 = TypeScript$$17.Type;
    withType = new v7262;
    var v7263 = TypeScript$$17.WithSymbol;
    var v7264 = withStmt$$1.minChar;
    var v23617 = context$$32.typeFlow;
    var v20431 = v23617.checker;
    var v15456 = v20431.locationInfo;
    var v7265 = v15456.unitIndex;
    var withSymbol = new v7263(v7264, v7265, withType);
    withType.members = members$$12;
    withType.ambientMembers = ambientMembers$$1;
    withType.symbol = withSymbol;
    withType.setHasImplementation();
    withStmt$$1.type = withType;
    var v7266 = TypeScript$$17.SymbolScopeBuilder;
    var v7267 = withType.members;
    var v7268 = withType.ambientMembers;
    var v15457 = context$$32.scopeChain;
    var v7269 = v15457.scope;
    var v7270 = withType.symbol;
    var withScope = new v7266(v7267, v7268, null, null, v7269, v7270);
    pushAssignScope(withScope, context$$32, null, null, null);
    withType.containedScope = withScope;
    return;
  }
  function preAssignFuncDeclScopes(ast$$52, context$$33) {
    var funcDecl$$13 = ast$$52;
    var container$$1 = null;
    var localContainer = null;
    var v7272 = funcDecl$$13.type;
    if (v7272) {
      var v7271 = ast$$52.type;
      localContainer = v7271.symbol;
    }
    var v7273 = funcDecl$$13.fncFlags;
    var v15458 = TypeScript$$17.FncFlags;
    var v7274 = v15458.Static;
    var isStatic$$5 = TypeScript$$17.hasFlag(v7273, v7274);
    var v7275 = isStatic$$5;
    if (v7275) {
      var v20432 = context$$33.scopeChain;
      var v15459 = v20432.fnc;
      v7275 = v15459 != null;
    }
    var isInnerStatic = v7275;
    var v7276;
    if (isInnerStatic) {
      var v23618 = context$$33.scopeChain;
      var v20433 = v23618.fnc;
      var v15460 = v20433.type;
      v7276 = v15460.memberScope;
    } else {
      var v15461 = context$$33.scopeChain;
      v7276 = v15461.scope;
    }
    var parentScope = v7276;
    var v20434 = context$$33.scopeChain;
    var v15462 = v20434.thisType;
    if (v15462) {
      var v23619 = funcDecl$$13.isConstructor;
      var v20435 = !v23619;
      var v23622 = !v20435;
      if (v23622) {
        var v23620 = funcDecl$$13.fncFlags;
        var v25198 = TypeScript$$17.FncFlags;
        var v23621 = v25198.ClassMethod;
        v20435 = TypeScript$$17.hasFlag(v23620, v23621);
      }
      v15462 = v20435;
    }
    var v7285 = v15462;
    if (v7285) {
      var v7277 = context$$33.scopeChain;
      var instType = v7277.thisType;
      var v23623 = instType.typeFlags;
      var v25199 = TypeScript$$17.TypeFlags;
      var v23624 = v25199.IsClass;
      var v20436 = v23623 & v23624;
      var v15463 = !v20436;
      if (v15463) {
        var v23625 = funcDecl$$13.fncFlags;
        var v25200 = TypeScript$$17.FncFlags;
        var v23626 = v25200.ClassMethod;
        var v20437 = TypeScript$$17.hasFlag(v23625, v23626);
        v15463 = !v20437;
      }
      var v7282 = v15463;
      if (v7282) {
        var v20438 = funcDecl$$13.isMethod();
        var v15464 = !v20438;
        var v20439 = !v15464;
        if (v20439) {
          v15464 = isStatic$$5;
        }
        var v7278 = v15464;
        if (v7278) {
          parentScope = instType.constructorScope;
        } else {
          parentScope = instType.containedScope;
        }
      } else {
        var v26162 = context$$33.scopeChain;
        var v25878 = v26162.previous;
        var v25201 = v25878.scope;
        var v23627 = v25201.container;
        if (v23627) {
          var v26301 = context$$33.scopeChain;
          var v26163 = v26301.previous;
          var v25879 = v26163.scope;
          var v25202 = v25879.container;
          v23627 = v25202.declAST;
        }
        var v20440 = v23627;
        if (v20440) {
          var v26371 = context$$33.scopeChain;
          var v26302 = v26371.previous;
          var v26164 = v26302.scope;
          var v25880 = v26164.container;
          var v25203 = v25880.declAST;
          var v23628 = v25203.nodeType;
          var v25204 = TypeScript$$17.NodeType;
          var v23629 = v25204.FuncDecl;
          v20440 = v23628 == v23629;
        }
        var v15465 = v20440;
        if (v15465) {
          var v26165 = context$$33.scopeChain;
          var v25881 = v26165.previous;
          var v25205 = v25881.scope;
          var v23630 = v25205.container;
          var v20441 = v23630.declAST;
          v15465 = v20441.isConstructor;
        }
        var v7281 = v15465;
        if (v7281) {
          parentScope = instType.constructorScope;
        } else {
          var v15466 = isStatic$$5;
          if (v15466) {
            var v20442 = context$$33.scopeChain;
            v15466 = v20442.classType;
          }
          var v7280 = v15466;
          if (v7280) {
            var v15467 = context$$33.scopeChain;
            var v7279 = v15467.classType;
            parentScope = v7279.containedScope;
          } else {
            parentScope = instType.containedScope;
          }
        }
      }
      container$$1 = instType.symbol;
    } else {
      var v15468 = funcDecl$$13.isConstructor;
      if (v15468) {
        var v20443 = context$$33.scopeChain;
        v15468 = v20443.thisType;
      }
      var v7284 = v15468;
      if (v7284) {
        var v15469 = context$$33.scopeChain;
        var v7283 = v15469.thisType;
        container$$1 = v7283.symbol;
      }
    }
    var v20444 = funcDecl$$13.type;
    var v15470 = v20444 == null;
    var v20447 = !v15470;
    if (v20447) {
      var v25206 = funcDecl$$13.type;
      var v23631 = v25206.symbol;
      var v20445 = v23631.flags;
      var v23632 = TypeScript$$17.SymbolFlags;
      var v20446 = v23632.TypeSetDuringScopeAssignment;
      v15470 = TypeScript$$17.hasFlag(v20445, v20446);
    }
    var v7304 = v15470;
    if (v7304) {
      var v20448 = context$$33.scopeChain;
      var v15471 = v20448.fnc;
      if (v15471) {
        var v23633 = context$$33.scopeChain;
        var v20449 = v23633.fnc;
        v15471 = v20449.type;
      }
      var v7287 = v15471;
      if (v7287) {
        var v20450 = context$$33.scopeChain;
        var v15472 = v20450.fnc;
        var v7286 = v15472.type;
        container$$1 = v7286.symbol;
      }
      var funcScope = null;
      var v7288 = context$$33.scopeChain;
      var outerFnc$$1 = v7288.fnc;
      var v7289;
      var v15474 = funcDecl$$13.name;
      if (v15474) {
        var v15473 = funcDecl$$13.name;
        v7289 = v15473.actualText;
      } else {
        v7289 = null;
      }
      var nameText$$1 = v7289;
      var fgSym = null;
      if (isStatic$$5) {
        var v23634 = outerFnc$$1.type;
        var v20451 = v23634.members;
        var v15475 = v20451 == null;
        if (v15475) {
          var v20452 = container$$1.getType();
          v15475 = v20452.memberScope;
        }
        var v7291 = v15475;
        if (v7291) {
          var v7290 = outerFnc$$1.type;
          var v20453 = container$$1.type;
          var v15476 = v20453.memberScope;
          v7290.members = v15476.valueMembers;
        }
        var v20454 = context$$33.scopeChain;
        var v15477 = v20454.fnc;
        var v7292 = v15477.type;
        funcScope = v7292.memberScope;
        var v7293 = outerFnc$$1.innerStaticFuncs;
        var v15478 = outerFnc$$1.innerStaticFuncs;
        var v7294 = v15478.length;
        v7293[v7294] = funcDecl$$13;
      } else {
        var v7295 = context$$33.scopeChain;
        funcScope = v7295.scope;
      }
      var v20455 = nameText$$1;
      if (v20455) {
        v20455 = nameText$$1 != "__missing";
      }
      var v15479 = v20455;
      if (v15479) {
        var v20456 = funcDecl$$13.isAccessor();
        v15479 = !v20456;
      }
      var v7296 = v15479;
      if (v7296) {
        if (isStatic$$5) {
          fgSym = funcScope.findLocal(nameText$$1, false, false);
        } else {
          fgSym = funcScope.findLocal(nameText$$1, false, false);
        }
      }
      var v15480 = context$$33.typeFlow;
      var v7297 = v15480.checker;
      var v7298 = fgSym == null;
      v7297.createFunctionSignature(funcDecl$$13, container$$1, funcScope, fgSym, v7298);
      var v25882 = funcDecl$$13.accessorSymbol;
      var v25207 = !v25882;
      if (v25207) {
        var v25883 = funcDecl$$13.fncFlags;
        var v26166 = TypeScript$$17.FncFlags;
        var v25884 = v26166.ClassMethod;
        v25207 = v25883 & v25884;
      }
      var v23635 = v25207;
      if (v23635) {
        v23635 = container$$1;
      }
      var v20457 = v23635;
      if (v20457) {
        var v25208 = !fgSym;
        var v25887 = !v25208;
        if (v25887) {
          var v26167 = fgSym.declAST;
          var v25885 = v26167.nodeType;
          var v26168 = TypeScript$$17.NodeType;
          var v25886 = v26168.FuncDecl;
          v25208 = v25885 != v25886;
        }
        var v23636 = v25208;
        if (v23636) {
          v23636 = funcDecl$$13.isAccessor();
        }
        v20457 = v23636;
      }
      var v15481 = v20457;
      var v20459 = !v15481;
      if (v20459) {
        var v20458 = fgSym;
        if (v20458) {
          v20458 = fgSym.isAccessor();
        }
        v15481 = v20458;
      }
      var v7302 = v15481;
      if (v7302) {
        var v15482 = context$$33.typeFlow;
        var v7299 = v15482.checker;
        var v7300 = container$$1.getType();
        var v15483 = funcDecl$$13.isMethod();
        if (v15483) {
          v15483 = isStatic$$5;
        }
        var v7301 = v15483;
        var v26684 = v7299.createAccessorSymbol(funcDecl$$13, fgSym, v7300, v7301, true, funcScope, container$$1);
        funcDecl$$13.accessorSymbol = v26684;
      }
      var v15484 = funcDecl$$13.type;
      var v7303 = v15484.symbol;
      var v20460 = v7303.flags;
      var v23637 = TypeScript$$17.SymbolFlags;
      var v20461 = v23637.TypeSetDuringScopeAssignment;
      v7303.flags = v20460 | v20461;
    }
    var v15485 = funcDecl$$13.name;
    if (v15485) {
      v15485 = funcDecl$$13.type;
    }
    var v7306 = v15485;
    if (v7306) {
      var v7305 = funcDecl$$13.name;
      var v15486 = funcDecl$$13.type;
      v7305.sym = v15486.symbol;
    }
    funcDecl$$13.scopeType = funcDecl$$13.type;
    var v7307 = funcDecl$$13.isOverload;
    if (v7307) {
      return;
    }
    var v7308 = TypeScript$$17.StringHashTable;
    var funcTable = new v7308;
    var v7309 = TypeScript$$17.ScopedMembers;
    var v15487 = TypeScript$$17.DualStringHashTable;
    var v20462 = TypeScript$$17.StringHashTable;
    var v15488 = new v20462;
    var v7310 = new v15487(funcTable, v15488);
    var funcMembers = new v7309(v7310);
    var v7311 = TypeScript$$17.StringHashTable;
    var ambientFuncTable = new v7311;
    var v7312 = TypeScript$$17.ScopedMembers;
    var v15489 = TypeScript$$17.DualStringHashTable;
    var v20463 = TypeScript$$17.StringHashTable;
    var v15490 = new v20463;
    var v7313 = new v15489(ambientFuncTable, v15490);
    var ambientFuncMembers = new v7312(v7313);
    var v7314 = TypeScript$$17.StringHashTable;
    var funcStaticTable = new v7314;
    var v7315 = TypeScript$$17.ScopedMembers;
    var v15491 = TypeScript$$17.DualStringHashTable;
    var v20464 = TypeScript$$17.StringHashTable;
    var v15492 = new v20464;
    var v7316 = new v15491(funcStaticTable, v15492);
    var funcStaticMembers = new v7315(v7316);
    var v7317 = TypeScript$$17.StringHashTable;
    var ambientFuncStaticTable = new v7317;
    var v7318 = TypeScript$$17.ScopedMembers;
    var v15493 = TypeScript$$17.DualStringHashTable;
    var v20465 = TypeScript$$17.StringHashTable;
    var v15494 = new v20465;
    var v7319 = new v15493(ambientFuncStaticTable, v15494);
    var ambientFuncStaticMembers = new v7318(v7319);
    var v20466 = context$$33.typeFlow;
    var v15495 = v20466.checker;
    var v7320 = v15495.locationInfo;
    funcDecl$$13.unitIndex = v7320.unitIndex;
    var v7321 = TypeScript$$17.SymbolScopeBuilder;
    var locals = new v7321(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);
    var v7322 = TypeScript$$17.SymbolScopeBuilder;
    var statics$$1 = new v7322(funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null);
    var v15496 = funcDecl$$13.isConstructor;
    if (v15496) {
      var v20467 = context$$33.scopeChain;
      v15496 = v20467.thisType;
    }
    var v7324 = v15496;
    if (v7324) {
      var v15497 = context$$33.scopeChain;
      var v7323 = v15497.thisType;
      v7323.constructorScope = locals;
    }
    funcDecl$$13.symbols = funcTable;
    var v15498 = funcDecl$$13.isSpecialFn();
    var v7343 = !v15498;
    if (v7343) {
      var group = funcDecl$$13.type;
      var signature$$1 = funcDecl$$13.signature;
      var v15499 = funcDecl$$13.isConstructor;
      var v7325 = !v15499;
      if (v7325) {
        group.containedScope = locals;
        locals.container = group.symbol;
        group.memberScope = statics$$1;
        statics$$1.container = group.symbol;
      }
      var v7326 = context$$33.scopeChain;
      funcDecl$$13.enclosingFnc = v7326.fnc;
      var v7327;
      if (isStatic$$5) {
        var v15500 = context$$33.scopeChain;
        v7327 = v15500.classType;
      } else {
        var v15501 = context$$33.scopeChain;
        v7327 = v15501.thisType;
      }
      group.enclosingType = v7327;
      var v7328 = ast$$52.type;
      fgSym = v7328.symbol;
      var v23638 = funcDecl$$13.fncFlags;
      var v25209 = TypeScript$$17.FncFlags;
      var v23639 = v25209.Signature;
      var v20468 = v23638 & v23639;
      var v23640 = TypeScript$$17.FncFlags;
      var v20469 = v23640.None;
      var v15502 = v20468 == v20469;
      if (v15502) {
        v15502 = funcDecl$$13.vars;
      }
      var v7333 = v15502;
      if (v7333) {
        var v7329 = context$$33.typeFlow;
        var v7330 = funcDecl$$13.vars;
        v7329.addLocalsFromScope(locals, fgSym, v7330, funcTable, false);
        var v7331 = context$$33.typeFlow;
        var v7332 = funcDecl$$13.statics;
        v7331.addLocalsFromScope(statics$$1, fgSym, v7332, funcStaticTable, false);
      }
      var v7339 = signature$$1.parameters;
      if (v7339) {
        var v7334 = signature$$1.parameters;
        var len$$17 = v7334.length;
        var i$$55 = 0;
        var v7338 = i$$55 < len$$17;
        for (;v7338;) {
          var v7335 = signature$$1.parameters;
          var paramSym = v7335[i$$55];
          var v15503 = context$$33.typeFlow;
          var v7336 = v15503.checker;
          var v15504 = paramSym.parameter;
          var v7337 = v15504.typeLink;
          v7336.resolveTypeLink(locals, v7337, true);
          i$$55++;
          v7338 = i$$55 < len$$17;
        }
      }
      var v15505 = context$$33.typeFlow;
      var v7340 = v15505.checker;
      var v7341 = signature$$1.returnType;
      var v7342 = funcDecl$$13.isSignature();
      v7340.resolveTypeLink(locals, v7341, v7342);
    }
    var v20470 = funcDecl$$13.isConstructor;
    var v15506 = !v20470;
    var v20473 = !v15506;
    if (v20473) {
      var v20471 = funcDecl$$13.fncFlags;
      var v23641 = TypeScript$$17.FncFlags;
      var v20472 = v23641.ClassMethod;
      v15506 = TypeScript$$17.hasFlag(v20471, v20472);
    }
    var v7345 = v15506;
    if (v7345) {
      var v7344;
      var v20474 = funcDecl$$13.isConstructor;
      if (v20474) {
        var v23642 = funcDecl$$13.fncFlags;
        var v25210 = TypeScript$$17.FncFlags;
        var v23643 = v25210.ClassMethod;
        v20474 = TypeScript$$17.hasFlag(v23642, v23643);
      }
      var v15508 = v20474;
      if (v15508) {
        var v15507 = context$$33.scopeChain;
        v7344 = v15507.thisType;
      } else {
        v7344 = null;
      }
      var thisType = v7344;
      pushAssignScope(locals, context$$33, thisType, null, funcDecl$$13);
    }
    var v15509 = funcDecl$$13.name;
    if (v15509) {
      var v20475 = funcDecl$$13.fncFlags;
      var v23644 = TypeScript$$17.FncFlags;
      var v20476 = v23644.IsFunctionExpression;
      v15509 = TypeScript$$17.hasFlag(v20475, v20476);
    }
    var v7349 = v15509;
    if (v7349) {
      var v15510 = funcDecl$$13.name;
      var v7348 = v15510.sym;
      if (v7348) {
        var v15511 = funcDecl$$13.name;
        var v7346 = v15511.actualText;
        var v15512 = funcDecl$$13.name;
        var v7347 = v15512.sym;
        funcTable.add(v7346, v7347);
      }
    }
    return;
  }
  function preAssignCatchScopes(ast$$53, context$$34) {
    var catchBlock = ast$$53;
    var v7358 = catchBlock.param;
    if (v7358) {
      var v7350 = TypeScript$$17.ScopedMembers;
      var v15513 = TypeScript$$17.DualStringHashTable;
      var v20477 = TypeScript$$17.StringHashTable;
      var v15514 = new v20477;
      var v20478 = TypeScript$$17.StringHashTable;
      var v15515 = new v20478;
      var v7351 = new v15513(v15514, v15515);
      var catchTable = new v7350(v7351);
      var v7352 = TypeScript$$17.SymbolScopeBuilder;
      var v15516 = context$$34.scopeChain;
      var v7353 = v15516.scope;
      var v20479 = context$$34.scopeChain;
      var v15517 = v20479.scope;
      var v7354 = v15517.container;
      var catchLocals = new v7352(catchTable, null, null, null, v7353, v7354);
      catchBlock.containedScope = catchLocals;
      var v15518 = context$$34.scopeChain;
      var v7355 = v15518.thisType;
      var v15519 = context$$34.scopeChain;
      var v7356 = v15519.classType;
      var v15520 = context$$34.scopeChain;
      var v7357 = v15520.fnc;
      pushAssignScope(catchLocals, context$$34, v7355, v7356, v7357);
    }
    return;
  }
  function preAssignScopes(ast$$54, parent$$45, walker$$42) {
    var context$$35 = walker$$42.state;
    var go = true;
    if (ast$$54) {
      var v15521 = ast$$54.nodeType;
      var v20480 = TypeScript$$17.NodeType;
      var v15522 = v20480.List;
      var v7367 = v15521 == v15522;
      if (v7367) {
        var list$$2 = ast$$54;
        var v7359 = context$$35.scopeChain;
        list$$2.enclosingScope = v7359.scope;
      } else {
        var v15523 = ast$$54.nodeType;
        var v20481 = TypeScript$$17.NodeType;
        var v15524 = v20481.ModuleDeclaration;
        var v7366 = v15523 == v15524;
        if (v7366) {
          preAssignModuleScopes(ast$$54, context$$35);
        } else {
          var v15525 = ast$$54.nodeType;
          var v20482 = TypeScript$$17.NodeType;
          var v15526 = v20482.ClassDeclaration;
          var v7365 = v15525 == v15526;
          if (v7365) {
            preAssignClassScopes(ast$$54, context$$35);
          } else {
            var v15527 = ast$$54.nodeType;
            var v20483 = TypeScript$$17.NodeType;
            var v15528 = v20483.InterfaceDeclaration;
            var v7364 = v15527 == v15528;
            if (v7364) {
              preAssignInterfaceScopes(ast$$54, context$$35);
            } else {
              var v15529 = ast$$54.nodeType;
              var v20484 = TypeScript$$17.NodeType;
              var v15530 = v20484.With;
              var v7363 = v15529 == v15530;
              if (v7363) {
                preAssignWithScopes(ast$$54, context$$35);
              } else {
                var v15531 = ast$$54.nodeType;
                var v20485 = TypeScript$$17.NodeType;
                var v15532 = v20485.FuncDecl;
                var v7362 = v15531 == v15532;
                if (v7362) {
                  preAssignFuncDeclScopes(ast$$54, context$$35);
                } else {
                  var v15533 = ast$$54.nodeType;
                  var v20486 = TypeScript$$17.NodeType;
                  var v15534 = v20486.Catch;
                  var v7361 = v15533 == v15534;
                  if (v7361) {
                    preAssignCatchScopes(ast$$54, context$$35);
                  } else {
                    var v15535 = ast$$54.nodeType;
                    var v20487 = TypeScript$$17.NodeType;
                    var v15536 = v20487.TypeRef;
                    var v7360 = v15535 == v15536;
                    if (v7360) {
                      go = false;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var v7368 = walker$$42.options;
    v7368.goChildren = go;
    return ast$$54;
  }
  function postAssignScopes(ast$$55, parent$$46, walker$$43) {
    var context$$36 = walker$$43.state;
    var go$$1 = true;
    if (ast$$55) {
      var v15537 = ast$$55.nodeType;
      var v20488 = TypeScript$$17.NodeType;
      var v15538 = v20488.ModuleDeclaration;
      var v7379 = v15537 == v15538;
      if (v7379) {
        var prevModDecl = ast$$55;
        popAssignScope(context$$36);
        var v7369 = context$$36.modDeclChain;
        v7369.pop();
        var v20489 = context$$36.modDeclChain;
        var v15539 = v20489.length;
        var v7371 = v15539 >= 1;
        if (v7371) {
          var v15540 = context$$36.typeFlow;
          var v7370 = v15540.checker;
          var v15541 = context$$36.modDeclChain;
          var v23645 = context$$36.modDeclChain;
          var v20490 = v23645.length;
          var v15542 = v20490 - 1;
          v7370.currentModDecl = v15541[v15542];
        }
      } else {
        var v15543 = ast$$55.nodeType;
        var v20491 = TypeScript$$17.NodeType;
        var v15544 = v20491.ClassDeclaration;
        var v7378 = v15543 == v15544;
        if (v7378) {
          popAssignScope(context$$36);
        } else {
          var v15545 = ast$$55.nodeType;
          var v20492 = TypeScript$$17.NodeType;
          var v15546 = v20492.InterfaceDeclaration;
          var v7377 = v15545 == v15546;
          if (v7377) {
            popAssignScope(context$$36);
          } else {
            var v15547 = ast$$55.nodeType;
            var v20493 = TypeScript$$17.NodeType;
            var v15548 = v20493.With;
            var v7376 = v15547 == v15548;
            if (v7376) {
              popAssignScope(context$$36);
            } else {
              var v15549 = ast$$55.nodeType;
              var v20494 = TypeScript$$17.NodeType;
              var v15550 = v20494.FuncDecl;
              var v7375 = v15549 == v15550;
              if (v7375) {
                var funcDecl$$14 = ast$$55;
                var v23646 = funcDecl$$14.isConstructor;
                var v20495 = !v23646;
                var v23649 = !v20495;
                if (v23649) {
                  var v23647 = funcDecl$$14.fncFlags;
                  var v25211 = TypeScript$$17.FncFlags;
                  var v23648 = v25211.ClassMethod;
                  v20495 = TypeScript$$17.hasFlag(v23647, v23648);
                }
                var v15551 = v20495;
                if (v15551) {
                  var v20496 = funcDecl$$14.isOverload;
                  v15551 = !v20496;
                }
                var v7372 = v15551;
                if (v7372) {
                  popAssignScope(context$$36);
                }
              } else {
                var v15552 = ast$$55.nodeType;
                var v20497 = TypeScript$$17.NodeType;
                var v15553 = v20497.Catch;
                var v7374 = v15552 == v15553;
                if (v7374) {
                  var catchBlock$$1 = ast$$55;
                  var v7373 = catchBlock$$1.param;
                  if (v7373) {
                    popAssignScope(context$$36);
                  }
                } else {
                  go$$1 = false;
                }
              }
            }
          }
        }
      }
    }
    var v7380 = walker$$43.options;
    v7380.goChildren = go$$1;
    return ast$$55;
  }
  var AssignScopeContext = v676();
  TypeScript$$17.AssignScopeContext = AssignScopeContext;
  TypeScript$$17.pushAssignScope = pushAssignScope;
  TypeScript$$17.popAssignScope = popAssignScope;
  TypeScript$$17.instanceCompare = instanceCompare;
  TypeScript$$17.instanceFilterStop = instanceFilterStop;
  var ScopeSearchFilter = v679();
  TypeScript$$17.ScopeSearchFilter = ScopeSearchFilter;
  var v7381 = TypeScript$$17;
  var v26685 = new ScopeSearchFilter(instanceCompare, instanceFilterStop);
  v7381.instanceFilter = v26685;
  TypeScript$$17.preAssignModuleScopes = preAssignModuleScopes;
  TypeScript$$17.preAssignClassScopes = preAssignClassScopes;
  TypeScript$$17.preAssignInterfaceScopes = preAssignInterfaceScopes;
  TypeScript$$17.preAssignWithScopes = preAssignWithScopes;
  TypeScript$$17.preAssignFuncDeclScopes = preAssignFuncDeclScopes;
  TypeScript$$17.preAssignCatchScopes = preAssignCatchScopes;
  TypeScript$$17.preAssignScopes = preAssignScopes;
  TypeScript$$17.postAssignScopes = postAssignScopes;
  return;
}
function v675(TypeScript$$16) {
  function v674() {
    function v673(message$$16) {
      var v7382 = this.reportError;
      if (v7382) {
        this.reportError(message$$16);
      }
      return;
    }
    function v672() {
      var rtok$$1;
      this.tokenStart();
      var v26686 = this.peekChar();
      this.ch = v26686;
      var v15554 = this.pos;
      var v15555 = this.len;
      var v7545 = v15554 < v15555;
      start: for (;v7545;) {
        var v23650 = this.ch;
        var v20498 = lexIdStartTable[v23650];
        var v23653 = !v20498;
        if (v23653) {
          var v23651 = this.ch;
          var v23652 = TypeScript$$16.LexCodeBSL;
          v20498 = v23651 == v23652;
        }
        var v15556 = v20498;
        var v20500 = !v15556;
        if (v20500) {
          var v23654 = this.ch;
          var v23655 = TypeScript$$16.LexCodeASCIIChars;
          var v20499 = v23654 >= v23655;
          if (v20499) {
            var v23656 = this.ch;
            v20499 = LexIsUnicodeIdStart(v23656);
          }
          v15556 = v20499;
        }
        var v7544 = v15556;
        if (v7544) {
          return this.scanIdentifier();
        } else {
          var v15557 = this.ch;
          var v15558 = TypeScript$$16.LexCodeSpace;
          var v7543 = v15557 == v15558;
          if (v7543) {
            var v15559 = this.interveningWhitespace;
            var v7383 = !v15559;
            if (v7383) {
              this.interveningWhitespacePos = this.pos;
            }
            var v15560 = this.ch;
            var v15561 = TypeScript$$16.LexCodeSpace;
            var v7384 = v15560 == v15561;
            do {
              this.nextChar();
              var v15562 = this.ch;
              var v15563 = TypeScript$$16.LexCodeSpace;
              v7384 = v15562 == v15563;
            } while (v7384);
            var v15564 = this.mode;
            var v15565 = LexMode.Line;
            var v7390 = v15564 == v15565;
            if (v7390) {
              var v7385 = this.src;
              var v7386 = this.startPos;
              var v7387 = this.pos;
              var whitespaceText = v7385.substring(v7386, v7387);
              var v7388 = TypeScript$$16.WhitespaceToken;
              var v15566 = TypeScript$$16.TokenID;
              var v7389 = v15566.Whitespace;
              return new v7388(v7389, whitespaceText);
            } else {
              this.tokenStart();
              this.interveningWhitespace = true;
            }
          } else {
            var v15567 = this.ch;
            var v15568 = TypeScript$$16.LexCodeSLH;
            var v7542 = v15567 == v15568;
            if (v7542) {
              this.nextChar();
              var commentText$$2;
              var v15569 = this.ch;
              var v15570 = TypeScript$$16.LexCodeSLH;
              var v7414 = v15569 == v15570;
              if (v7414) {
                var v15571 = this.interveningWhitespace;
                var v7392 = !v15571;
                if (v7392) {
                  var v7391 = this.pos;
                  this.interveningWhitespacePos = v7391 - 1;
                }
                var v7393 = this.pos;
                var commentStartPos = v7393 - 1;
                var commentStartLine = this.line;
                this.finishSinglelineComment();
                var v7394 = this.src;
                var v7395 = this.pos;
                commentText$$2 = v7394.substring(commentStartPos, v7395);
                var v7396 = TypeScript$$16.CommentToken;
                var v15572 = TypeScript$$16.TokenID;
                var v7397 = v15572.Comment;
                var commentToken = new v7396(v7397, commentText$$2, false, commentStartPos, commentStartLine, false);
                var v7398 = this.scanComments;
                if (v7398) {
                  this.startPos = commentStartPos;
                  return commentToken;
                } else {
                  this.pushComment(commentToken);
                }
                this.interveningWhitespace = true;
              } else {
                var v15573 = this.ch;
                var v15574 = TypeScript$$16.LexCodeMUL;
                var v7413 = v15573 == v15574;
                if (v7413) {
                  var v15575 = this.interveningWhitespace;
                  var v7400 = !v15575;
                  if (v7400) {
                    var v7399 = this.pos;
                    this.interveningWhitespacePos = v7399 - 1;
                  }
                  var v7401 = this.pos;
                  commentStartPos = v7401 - 1;
                  commentStartLine = this.line;
                  this.nextChar();
                  this.finishMultilineComment();
                  var v7402 = this.src;
                  var v7403 = this.pos;
                  commentText$$2 = v7402.substring(commentStartPos, v7403);
                  var v7404 = this.peekChar();
                  var endsLine$$1 = this.endsLine(v7404);
                  var v7405 = TypeScript$$16.CommentToken;
                  var v15576 = TypeScript$$16.TokenID;
                  var v7406 = v15576.Comment;
                  commentToken = new v7405(v7406, commentText$$2, true, commentStartPos, commentStartLine, endsLine$$1);
                  var v7407 = this.scanComments;
                  if (v7407) {
                    this.startPos = commentStartPos;
                    return commentToken;
                  } else {
                    this.pushComment(commentToken);
                  }
                  this.interveningWhitespace = true;
                } else {
                  var regexTok = this.speculateRegex();
                  if (regexTok) {
                    return regexTok;
                  } else {
                    var v20501 = this.pos;
                    var v15577 = this.peekCharAt(v20501);
                    var v15578 = TypeScript$$16.LexCodeEQ;
                    var v7412 = v15577 == v15578;
                    if (v7412) {
                      this.nextChar();
                      var v7408 = TypeScript$$16.staticTokens;
                      var v15579 = TypeScript$$16.TokenID;
                      var v7409 = v15579.SlashEquals;
                      return v7408[v7409];
                    } else {
                      var v7410 = TypeScript$$16.staticTokens;
                      var v15580 = TypeScript$$16.TokenID;
                      var v7411 = v15580.Slash;
                      return v7410[v7411];
                    }
                  }
                }
              }
            } else {
              var v15581 = this.ch;
              var v15582 = TypeScript$$16.LexCodeSMC;
              var v7541 = v15581 == v15582;
              if (v7541) {
                this.nextChar();
                var v7415 = TypeScript$$16.staticTokens;
                var v15583 = TypeScript$$16.TokenID;
                var v7416 = v15583.Semicolon;
                return v7415[v7416];
              } else {
                var v20502 = this.ch;
                var v20503 = TypeScript$$16.LexCodeAPO;
                var v15584 = v20502 == v20503;
                var v20506 = !v15584;
                if (v20506) {
                  var v20504 = this.ch;
                  var v20505 = TypeScript$$16.LexCodeQUO;
                  v15584 = v20504 == v20505;
                }
                var v7540 = v15584;
                if (v7540) {
                  return this.scanStringConstant();
                } else {
                  var v15585 = this.ch;
                  var v7539 = autoToken[v15585];
                  if (v7539) {
                    var v7417 = this.ch;
                    var atok = autoToken[v7417];
                    var v15586 = atok.tokenId;
                    var v20507 = TypeScript$$16.TokenID;
                    var v15587 = v20507.OpenBrace;
                    var v7419 = v15586 == v15587;
                    if (v7419) {
                      this.leftCurlyCount++;
                    } else {
                      var v15588 = atok.tokenId;
                      var v20508 = TypeScript$$16.TokenID;
                      var v15589 = v20508.CloseBrace;
                      var v7418 = v15588 == v15589;
                      if (v7418) {
                        this.rightCurlyCount++;
                      }
                    }
                    this.nextChar();
                    return atok;
                  } else {
                    var v20509 = this.ch;
                    var v20510 = TypeScript$$16.LexCode_0;
                    var v15590 = v20509 >= v20510;
                    if (v15590) {
                      var v20511 = this.ch;
                      var v20512 = TypeScript$$16.LexCode_9;
                      v15590 = v20511 <= v20512;
                    }
                    var v7538 = v15590;
                    if (v7538) {
                      rtok$$1 = this.scanNumber();
                      if (rtok$$1) {
                        return rtok$$1;
                      } else {
                        this.nextChar();
                        var v7420 = TypeScript$$16.staticTokens;
                        var v15591 = TypeScript$$16.TokenID;
                        var v7421 = v15591.Error;
                        return v7420[v7421];
                      }
                    } else {
                      var v7537 = this.ch;
                      switch(v7537) {
                        case TypeScript$$16.LexCodeTAB:
                        ;
                        case TypeScript$$16.LexCodeVTAB:
                          var v15592 = this.interveningWhitespace;
                          var v7422 = !v15592;
                          if (v7422) {
                            this.interveningWhitespacePos = this.pos;
                          }
                          var v15593 = this.mode;
                          var v15594 = LexMode.Line;
                          var v7429 = v15593 == v15594;
                          if (v7429) {
                            var v20513 = this.ch;
                            var v20514 = TypeScript$$16.LexCodeSpace;
                            var v15595 = v20513 == v20514;
                            var v20516 = !v15595;
                            if (v20516) {
                              var v20515 = this.ch;
                              v15595 = v20515 == 9;
                            }
                            var v7423 = v15595;
                            do {
                              this.nextChar();
                              var v20517 = this.ch;
                              var v20518 = TypeScript$$16.LexCodeSpace;
                              var v15596 = v20517 == v20518;
                              var v20520 = !v15596;
                              if (v20520) {
                                var v20519 = this.ch;
                                v15596 = v20519 == 9;
                              }
                              v7423 = v15596;
                            } while (v7423);
                            var v7424 = this.src;
                            var v7425 = this.startPos;
                            var v7426 = this.pos;
                            var wsText = v7424.substring(v7425, v7426);
                            var v7427 = TypeScript$$16.WhitespaceToken;
                            var v15597 = TypeScript$$16.TokenID;
                            var v7428 = v15597.Whitespace;
                            return new v7427(v7428, wsText);
                          } else {
                            this.interveningWhitespace = true;
                          }
                        ;
                        case 255:
                        ;
                        case 254:
                        ;
                        case 239:
                        ;
                        case 187:
                        ;
                        case 191:
                        ;
                        case TypeScript$$16.LexCodeLS:
                        ;
                        case TypeScript$$16.LexCodePS:
                        ;
                        case TypeScript$$16.LexCodeNWL:
                        ;
                        case TypeScript$$16.LexCodeRET:
                          var v15598 = this.ch;
                          var v15599 = TypeScript$$16.LexCodeNWL;
                          var v7433 = v15598 == v15599;
                          if (v7433) {
                            this.newLine();
                            var v15600 = this.mode;
                            var v15601 = LexMode.Line;
                            var v7432 = v15600 == v15601;
                            if (v7432) {
                              var v7430 = TypeScript$$16.staticTokens;
                              var v15602 = TypeScript$$16.TokenID;
                              var v7431 = v15602.EndOfFile;
                              return v7430[v7431];
                            }
                          }
                          var v15603 = this.interveningWhitespace;
                          var v7434 = !v15603;
                          if (v7434) {
                            this.interveningWhitespacePos = this.pos;
                          }
                          this.nextChar();
                          this.tokenStart();
                          this.interveningWhitespace = true;
                          break;
                        case TypeScript$$16.LexCodeDOT:
                          var v23657 = this.pos;
                          var v20521 = v23657 + 1;
                          var v15604 = this.peekCharAt(v20521);
                          var v15605 = TypeScript$$16.LexCodeDOT;
                          var v7442 = v15604 == v15605;
                          if (v7442) {
                            var v23658 = this.pos;
                            var v20522 = v23658 + 2;
                            var v15606 = this.peekCharAt(v20522);
                            var v15607 = TypeScript$$16.LexCodeDOT;
                            var v7439 = v15606 == v15607;
                            if (v7439) {
                              this.advanceChar(3);
                              var v7435 = TypeScript$$16.staticTokens;
                              var v15608 = TypeScript$$16.TokenID;
                              var v7436 = v15608.DotDotDot;
                              return v7435[v7436];
                            } else {
                              this.nextChar();
                              var v7437 = TypeScript$$16.staticTokens;
                              var v15609 = TypeScript$$16.TokenID;
                              var v7438 = v15609.Dot;
                              return v7437[v7438];
                            }
                          } else {
                            this.nextChar();
                            rtok$$1 = this.scanFraction();
                            if (rtok$$1) {
                              return rtok$$1;
                            } else {
                              var v7440 = TypeScript$$16.staticTokens;
                              var v15610 = TypeScript$$16.TokenID;
                              var v7441 = v15610.Dot;
                              return v7440[v7441];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeEQ:
                          var v23659 = this.pos;
                          var v20523 = v23659 + 1;
                          var v15611 = this.peekCharAt(v20523);
                          var v15612 = TypeScript$$16.LexCodeEQ;
                          var v7453 = v15611 == v15612;
                          if (v7453) {
                            var v23660 = this.pos;
                            var v20524 = v23660 + 2;
                            var v15613 = this.peekCharAt(v20524);
                            var v15614 = TypeScript$$16.LexCodeEQ;
                            var v7447 = v15613 == v15614;
                            if (v7447) {
                              this.advanceChar(3);
                              var v7443 = TypeScript$$16.staticTokens;
                              var v15615 = TypeScript$$16.TokenID;
                              var v7444 = v15615.EqualsEqualsEquals;
                              return v7443[v7444];
                            } else {
                              this.advanceChar(2);
                              var v7445 = TypeScript$$16.staticTokens;
                              var v15616 = TypeScript$$16.TokenID;
                              var v7446 = v15616.EqualsEquals;
                              return v7445[v7446];
                            }
                          } else {
                            var v23661 = this.pos;
                            var v20525 = v23661 + 1;
                            var v15617 = this.peekCharAt(v20525);
                            var v15618 = TypeScript$$16.LexCodeGT;
                            var v7452 = v15617 == v15618;
                            if (v7452) {
                              this.advanceChar(2);
                              var v7448 = TypeScript$$16.staticTokens;
                              var v15619 = TypeScript$$16.TokenID;
                              var v7449 = v15619.EqualsGreaterThan;
                              return v7448[v7449];
                            } else {
                              this.nextChar();
                              var v7450 = TypeScript$$16.staticTokens;
                              var v15620 = TypeScript$$16.TokenID;
                              var v7451 = v15620.Equals;
                              return v7450[v7451];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeBNG:
                          var v23662 = this.pos;
                          var v20526 = v23662 + 1;
                          var v15621 = this.peekCharAt(v20526);
                          var v15622 = TypeScript$$16.LexCodeEQ;
                          var v7461 = v15621 == v15622;
                          if (v7461) {
                            var v23663 = this.pos;
                            var v20527 = v23663 + 2;
                            var v15623 = this.peekCharAt(v20527);
                            var v15624 = TypeScript$$16.LexCodeEQ;
                            var v7458 = v15623 == v15624;
                            if (v7458) {
                              this.advanceChar(3);
                              var v7454 = TypeScript$$16.staticTokens;
                              var v15625 = TypeScript$$16.TokenID;
                              var v7455 = v15625.ExclamationEqualsEquals;
                              return v7454[v7455];
                            } else {
                              this.advanceChar(2);
                              var v7456 = TypeScript$$16.staticTokens;
                              var v15626 = TypeScript$$16.TokenID;
                              var v7457 = v15626.ExclamationEquals;
                              return v7456[v7457];
                            }
                          } else {
                            this.nextChar();
                            var v7459 = TypeScript$$16.staticTokens;
                            var v15627 = TypeScript$$16.TokenID;
                            var v7460 = v15627.Exclamation;
                            return v7459[v7460];
                          }
                        ;
                        case TypeScript$$16.LexCodePLS:
                          var v23664 = this.pos;
                          var v20528 = v23664 + 1;
                          var v15628 = this.peekCharAt(v20528);
                          var v15629 = TypeScript$$16.LexCodeEQ;
                          var v7469 = v15628 == v15629;
                          if (v7469) {
                            this.advanceChar(2);
                            var v7462 = TypeScript$$16.staticTokens;
                            var v15630 = TypeScript$$16.TokenID;
                            var v7463 = v15630.PlusEquals;
                            return v7462[v7463];
                          } else {
                            var v23665 = this.pos;
                            var v20529 = v23665 + 1;
                            var v15631 = this.peekCharAt(v20529);
                            var v15632 = TypeScript$$16.LexCodePLS;
                            var v7468 = v15631 == v15632;
                            if (v7468) {
                              this.advanceChar(2);
                              var v7464 = TypeScript$$16.staticTokens;
                              var v15633 = TypeScript$$16.TokenID;
                              var v7465 = v15633.PlusPlus;
                              return v7464[v7465];
                            } else {
                              this.nextChar();
                              var v7466 = TypeScript$$16.staticTokens;
                              var v15634 = TypeScript$$16.TokenID;
                              var v7467 = v15634.Plus;
                              return v7466[v7467];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeMIN:
                          var v23666 = this.pos;
                          var v20530 = v23666 + 1;
                          var v15635 = this.peekCharAt(v20530);
                          var v15636 = TypeScript$$16.LexCodeEQ;
                          var v7477 = v15635 == v15636;
                          if (v7477) {
                            this.advanceChar(2);
                            var v7470 = TypeScript$$16.staticTokens;
                            var v15637 = TypeScript$$16.TokenID;
                            var v7471 = v15637.MinusEquals;
                            return v7470[v7471];
                          } else {
                            var v23667 = this.pos;
                            var v20531 = v23667 + 1;
                            var v15638 = this.peekCharAt(v20531);
                            var v15639 = TypeScript$$16.LexCodeMIN;
                            var v7476 = v15638 == v15639;
                            if (v7476) {
                              this.advanceChar(2);
                              var v7472 = TypeScript$$16.staticTokens;
                              var v15640 = TypeScript$$16.TokenID;
                              var v7473 = v15640.MinusMinus;
                              return v7472[v7473];
                            } else {
                              this.nextChar();
                              var v7474 = TypeScript$$16.staticTokens;
                              var v15641 = TypeScript$$16.TokenID;
                              var v7475 = v15641.Minus;
                              return v7474[v7475];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeMUL:
                          var v23668 = this.pos;
                          var v20532 = v23668 + 1;
                          var v15642 = this.peekCharAt(v20532);
                          var v15643 = TypeScript$$16.LexCodeEQ;
                          var v7482 = v15642 == v15643;
                          if (v7482) {
                            this.advanceChar(2);
                            var v7478 = TypeScript$$16.staticTokens;
                            var v15644 = TypeScript$$16.TokenID;
                            var v7479 = v15644.AsteriskEquals;
                            return v7478[v7479];
                          } else {
                            this.nextChar();
                            var v7480 = TypeScript$$16.staticTokens;
                            var v15645 = TypeScript$$16.TokenID;
                            var v7481 = v15645.Asterisk;
                            return v7480[v7481];
                          }
                        ;
                        case TypeScript$$16.LexCodePCT:
                          var v23669 = this.pos;
                          var v20533 = v23669 + 1;
                          var v15646 = this.peekCharAt(v20533);
                          var v15647 = TypeScript$$16.LexCodeEQ;
                          var v7487 = v15646 == v15647;
                          if (v7487) {
                            this.advanceChar(2);
                            var v7483 = TypeScript$$16.staticTokens;
                            var v15648 = TypeScript$$16.TokenID;
                            var v7484 = v15648.PercentEquals;
                            return v7483[v7484];
                          } else {
                            this.nextChar();
                            var v7485 = TypeScript$$16.staticTokens;
                            var v15649 = TypeScript$$16.TokenID;
                            var v7486 = v15649.Percent;
                            return v7485[v7486];
                          }
                        ;
                        case TypeScript$$16.LexCodeLT:
                          var v23670 = this.pos;
                          var v20534 = v23670 + 1;
                          var v15650 = this.peekCharAt(v20534);
                          var v15651 = TypeScript$$16.LexCodeLT;
                          var v7498 = v15650 == v15651;
                          if (v7498) {
                            var v23671 = this.pos;
                            var v20535 = v23671 + 2;
                            var v15652 = this.peekCharAt(v20535);
                            var v15653 = TypeScript$$16.LexCodeEQ;
                            var v7492 = v15652 == v15653;
                            if (v7492) {
                              this.advanceChar(3);
                              var v7488 = TypeScript$$16.staticTokens;
                              var v15654 = TypeScript$$16.TokenID;
                              var v7489 = v15654.LessThanLessThanEquals;
                              return v7488[v7489];
                            } else {
                              this.advanceChar(2);
                              var v7490 = TypeScript$$16.staticTokens;
                              var v15655 = TypeScript$$16.TokenID;
                              var v7491 = v15655.LessThanLessThan;
                              return v7490[v7491];
                            }
                          } else {
                            var v23672 = this.pos;
                            var v20536 = v23672 + 1;
                            var v15656 = this.peekCharAt(v20536);
                            var v15657 = TypeScript$$16.LexCodeEQ;
                            var v7497 = v15656 == v15657;
                            if (v7497) {
                              this.advanceChar(2);
                              var v7493 = TypeScript$$16.staticTokens;
                              var v15658 = TypeScript$$16.TokenID;
                              var v7494 = v15658.LessThanEquals;
                              return v7493[v7494];
                            } else {
                              this.nextChar();
                              var v7495 = TypeScript$$16.staticTokens;
                              var v15659 = TypeScript$$16.TokenID;
                              var v7496 = v15659.LessThan;
                              return v7495[v7496];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeGT:
                          var v23673 = this.pos;
                          var v20537 = v23673 + 1;
                          var v15660 = this.peekCharAt(v20537);
                          var v15661 = TypeScript$$16.LexCodeGT;
                          var v7515 = v15660 == v15661;
                          if (v7515) {
                            var v23674 = this.pos;
                            var v20538 = v23674 + 2;
                            var v15662 = this.peekCharAt(v20538);
                            var v15663 = TypeScript$$16.LexCodeEQ;
                            var v7509 = v15662 == v15663;
                            if (v7509) {
                              this.advanceChar(3);
                              var v7499 = TypeScript$$16.staticTokens;
                              var v15664 = TypeScript$$16.TokenID;
                              var v7500 = v15664.GreaterThanGreaterThanEquals;
                              return v7499[v7500];
                            } else {
                              var v23675 = this.pos;
                              var v20539 = v23675 + 2;
                              var v15665 = this.peekCharAt(v20539);
                              var v15666 = TypeScript$$16.LexCodeGT;
                              var v7508 = v15665 == v15666;
                              if (v7508) {
                                var v23676 = this.pos;
                                var v20540 = v23676 + 3;
                                var v15667 = this.peekCharAt(v20540);
                                var v15668 = TypeScript$$16.LexCodeEQ;
                                var v7505 = v15667 == v15668;
                                if (v7505) {
                                  this.advanceChar(4);
                                  var v7501 = TypeScript$$16.staticTokens;
                                  var v15669 = TypeScript$$16.TokenID;
                                  var v7502 = v15669.GreaterThanGreaterThanGreaterThanEquals;
                                  return v7501[v7502];
                                } else {
                                  this.advanceChar(3);
                                  var v7503 = TypeScript$$16.staticTokens;
                                  var v15670 = TypeScript$$16.TokenID;
                                  var v7504 = v15670.GreaterThanGreaterThanGreaterThan;
                                  return v7503[v7504];
                                }
                              } else {
                                this.advanceChar(2);
                                var v7506 = TypeScript$$16.staticTokens;
                                var v15671 = TypeScript$$16.TokenID;
                                var v7507 = v15671.GreaterThanGreaterThan;
                                return v7506[v7507];
                              }
                            }
                          } else {
                            var v23677 = this.pos;
                            var v20541 = v23677 + 1;
                            var v15672 = this.peekCharAt(v20541);
                            var v15673 = TypeScript$$16.LexCodeEQ;
                            var v7514 = v15672 == v15673;
                            if (v7514) {
                              this.advanceChar(2);
                              var v7510 = TypeScript$$16.staticTokens;
                              var v15674 = TypeScript$$16.TokenID;
                              var v7511 = v15674.GreaterThanEquals;
                              return v7510[v7511];
                            } else {
                              this.nextChar();
                              var v7512 = TypeScript$$16.staticTokens;
                              var v15675 = TypeScript$$16.TokenID;
                              var v7513 = v15675.GreaterThan;
                              return v7512[v7513];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeXOR:
                          var v23678 = this.pos;
                          var v20542 = v23678 + 1;
                          var v15676 = this.peekCharAt(v20542);
                          var v15677 = TypeScript$$16.LexCodeEQ;
                          var v7520 = v15676 == v15677;
                          if (v7520) {
                            this.advanceChar(2);
                            var v7516 = TypeScript$$16.staticTokens;
                            var v15678 = TypeScript$$16.TokenID;
                            var v7517 = v15678.CaretEquals;
                            return v7516[v7517];
                          } else {
                            this.nextChar();
                            var v7518 = TypeScript$$16.staticTokens;
                            var v15679 = TypeScript$$16.TokenID;
                            var v7519 = v15679.Caret;
                            return v7518[v7519];
                          }
                        ;
                        case TypeScript$$16.LexCodeBAR:
                          var v23679 = this.pos;
                          var v20543 = v23679 + 1;
                          var v15680 = this.peekCharAt(v20543);
                          var v15681 = TypeScript$$16.LexCodeEQ;
                          var v7528 = v15680 == v15681;
                          if (v7528) {
                            this.advanceChar(2);
                            var v7521 = TypeScript$$16.staticTokens;
                            var v15682 = TypeScript$$16.TokenID;
                            var v7522 = v15682.BarEquals;
                            return v7521[v7522];
                          } else {
                            var v23680 = this.pos;
                            var v20544 = v23680 + 1;
                            var v15683 = this.peekCharAt(v20544);
                            var v15684 = TypeScript$$16.LexCodeBAR;
                            var v7527 = v15683 == v15684;
                            if (v7527) {
                              this.advanceChar(2);
                              var v7523 = TypeScript$$16.staticTokens;
                              var v15685 = TypeScript$$16.TokenID;
                              var v7524 = v15685.BarBar;
                              return v7523[v7524];
                            } else {
                              this.nextChar();
                              var v7525 = TypeScript$$16.staticTokens;
                              var v15686 = TypeScript$$16.TokenID;
                              var v7526 = v15686.Bar;
                              return v7525[v7526];
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeAMP:
                          var v23681 = this.pos;
                          var v20545 = v23681 + 1;
                          var v15687 = this.peekCharAt(v20545);
                          var v15688 = TypeScript$$16.LexCodeEQ;
                          var v7536 = v15687 == v15688;
                          if (v7536) {
                            this.advanceChar(2);
                            var v7529 = TypeScript$$16.staticTokens;
                            var v15689 = TypeScript$$16.TokenID;
                            var v7530 = v15689.AmpersandEquals;
                            return v7529[v7530];
                          } else {
                            var v23682 = this.pos;
                            var v20546 = v23682 + 1;
                            var v15690 = this.peekCharAt(v20546);
                            var v15691 = TypeScript$$16.LexCodeAMP;
                            var v7535 = v15690 == v15691;
                            if (v7535) {
                              this.advanceChar(2);
                              var v7531 = TypeScript$$16.staticTokens;
                              var v15692 = TypeScript$$16.TokenID;
                              var v7532 = v15692.AmpersandAmpersand;
                              return v7531[v7532];
                            } else {
                              this.nextChar();
                              var v7533 = TypeScript$$16.staticTokens;
                              var v15693 = TypeScript$$16.TokenID;
                              var v7534 = v15693.And;
                              return v7533[v7534];
                            }
                          }
                        ;
                        default:
                          this.reportScannerError("Invalid character");
                          this.nextChar();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var v15694 = this.pos;
        var v15695 = this.len;
        v7545 = v15694 < v15695;
      }
      var v7546 = TypeScript$$16.staticTokens;
      var v15696 = TypeScript$$16.TokenID;
      var v7547 = v15696.EndOfFile;
      return v7546[v7547];
    }
    function v671() {
      var hasEscape = false;
      var v7548 = this.ch;
      var v7549 = TypeScript$$16.LexCodeBSL;
      var isFirstChar = v7548 == v7549;
      var hasUnicode = false;
      for (;;) {
        var v23683 = this.ch;
        var v20547 = lexIdStartTable[v23683];
        var v23685 = !v20547;
        if (v23685) {
          var v23684 = this.ch;
          v20547 = LexIsDigit(v23684);
        }
        var v15697 = v20547;
        var v20549 = !v15697;
        if (v20549) {
          var v23686 = this.ch;
          var v23687 = TypeScript$$16.LexCodeASCIIChars;
          var v20548 = v23686 >= v23687;
          if (v20548) {
            v20548 = this.isValidUnicodeIdentifierChar();
          }
          v15697 = v20548;
        }
        var v7550 = v15697;
        for (;v7550;) {
          this.nextChar();
          var v23688 = this.ch;
          var v20550 = lexIdStartTable[v23688];
          var v23690 = !v20550;
          if (v23690) {
            var v23689 = this.ch;
            v20550 = LexIsDigit(v23689);
          }
          var v15698 = v20550;
          var v20552 = !v15698;
          if (v20552) {
            var v23691 = this.ch;
            var v23692 = TypeScript$$16.LexCodeASCIIChars;
            var v20551 = v23691 >= v23692;
            if (v20551) {
              v20551 = this.isValidUnicodeIdentifierChar();
            }
            v15698 = v20551;
          }
          v7550 = v15698;
        }
        var v15699 = this.ch;
        var v15700 = TypeScript$$16.LexCodeBSL;
        var v7562 = v15699 == v15700;
        if (v7562) {
          this.nextChar();
          var v15701 = this.ch;
          var v15702 = TypeScript$$16.LexCode_u;
          var v7559 = v15701 == v15702;
          if (v7559) {
            this.nextChar();
            var h$$4 = 0;
            var v7554 = h$$4 < 4;
            for (;v7554;) {
              var v15703 = this.ch;
              var v7553 = this.IsHexDigit(v15703);
              if (v7553) {
                this.nextChar();
              } else {
                this.reportScannerError("Invalid Unicode escape sequence");
                var v7551 = TypeScript$$16.staticTokens;
                var v15704 = TypeScript$$16.TokenID;
                var v7552 = v15704.Error;
                return v7551[v7552];
              }
              h$$4++;
              v7554 = h$$4 < 4;
            }
            var v15705 = this.src;
            var v20553 = this.pos;
            var v15706 = v20553 - 4;
            var v15707 = this.pos;
            var v7555 = v15705.substring(v15706, v15707);
            var hexChar = parseInt(v7555, 16);
            var v20554 = lexIdStartTable[hexChar];
            var v23694 = !v20554;
            if (v23694) {
              var v23693 = !isFirstChar;
              if (v23693) {
                v23693 = LexIsDigit(hexChar);
              }
              v20554 = v23693;
            }
            var v15708 = v20554;
            var v20556 = !v15708;
            if (v20556) {
              var v23695 = TypeScript$$16.LexCodeASCIIChars;
              var v20555 = hexChar >= v23695;
              if (v20555) {
                var v23696 = LexIsUnicodeIdStart(hexChar);
                var v25213 = !v23696;
                if (v25213) {
                  var v25212 = !isFirstChar;
                  if (v25212) {
                    v25212 = LexIsUnicodeDigit(hexChar);
                  }
                  v23696 = v25212;
                }
                v20555 = v23696;
              }
              v15708 = v20555;
            }
            var v7558 = v15708;
            if (v7558) {
            } else {
              this.reportScannerError("Invalid identifier character");
              var v7556 = TypeScript$$16.staticTokens;
              var v15709 = TypeScript$$16.TokenID;
              var v7557 = v15709.Error;
              return v7556[v7557];
            }
            hasEscape = true;
            isFirstChar = false;
            continue;
          }
          this.reportScannerError("Invalid Unicode escape sequence");
          var v7560 = TypeScript$$16.staticTokens;
          var v15710 = TypeScript$$16.TokenID;
          var v7561 = v15710.Error;
          return v7560[v7561];
        }
        break;
      }
      var id$$16;
      var v7563 = this.src;
      var v7564 = this.startPos;
      var v7565 = this.pos;
      var text$$18 = v7563.substring(v7564, v7565);
      var v15711 = !hasEscape;
      if (v15711) {
        var v23697 = TypeScript$$16.LexKeywordTable;
        var v20557 = id$$16 = v23697.lookup(text$$18);
        v15711 = v20557 != null;
      }
      var v7568 = v15711;
      if (v7568) {
        var v7566 = TypeScript$$16.staticTokens;
        return v7566[id$$16];
      } else {
        var v7567 = TypeScript$$16.IdentifierToken;
        return new v7567(text$$18, hasEscape);
      }
      return;
    }
    function v670() {
      var endCode = this.ch;
      this.nextChar();
      scanStringConstantLoop: for (;;) {
        var v7577 = this.ch;
        switch(v7577) {
          case TypeScript$$16.LexEOF:
            this.reportScannerError("Unterminated string constant");
            break scanStringConstantLoop;
          case TypeScript$$16.LexCodeLS:
          ;
          case TypeScript$$16.LexCodePS:
            this.seenUnicodeChar = true;
          case TypeScript$$16.LexCodeRET:
          ;
          case TypeScript$$16.LexCodeNWL:
            this.reportScannerError("Unterminated string constant");
            break scanStringConstantLoop;
          case TypeScript$$16.LexCodeAPO:
          ;
          case TypeScript$$16.LexCodeQUO:
            var v15712 = this.ch;
            var v7569 = v15712 == endCode;
            if (v7569) {
              this.nextChar();
              break scanStringConstantLoop;
            }
            break;
          case TypeScript$$16.LexCodeBSL:
            this.nextChar();
            var v7576 = this.ch;
            switch(v7576) {
              case TypeScript$$16.LexCodeAPO:
              ;
              case TypeScript$$16.LexCodeQUO:
              ;
              case TypeScript$$16.LexCodeBSL:
                this.nextChar();
                continue scanStringConstantLoop;
              case TypeScript$$16.LexCodeLS:
              ;
              case TypeScript$$16.LexCodePS:
                this.seenUnicodeChar = true;
              case TypeScript$$16.LexCodeRET:
              ;
              case TypeScript$$16.LexCodeNWL:
                var v20558 = this.ch;
                var v20559 = TypeScript$$16.LexCodeRET;
                var v15713 = v20558 == v20559;
                if (v15713) {
                  var v25214 = this.pos;
                  var v23698 = v25214 + 1;
                  var v20560 = this.peekCharAt(v23698);
                  var v20561 = TypeScript$$16.LexCodeNWL;
                  v15713 = v20560 == v20561;
                }
                var v7570 = v15713;
                if (v7570) {
                  this.nextChar();
                }
                this.nextChar();
                this.newLine();
                var v15714 = this.mode;
                var v15715 = LexMode.Line;
                var v7572 = v15714 == v15715;
                if (v7572) {
                  var v7571;
                  var v20562 = TypeScript$$16.LexCodeAPO;
                  var v15716 = endCode == v20562;
                  if (v15716) {
                    v7571 = LexState.InMultilineSingleQuoteString;
                  } else {
                    v7571 = LexState.InMultilineDoubleQuoteString;
                  }
                  this.lexState = v7571;
                  break scanStringConstantLoop;
                }
                break;
              case TypeScript$$16.LexCode_x:
              ;
              case TypeScript$$16.LexCode_u:
                var v7573;
                var v20563 = this.ch;
                var v20564 = TypeScript$$16.LexCode_x;
                var v15717 = v20563 == v20564;
                if (v15717) {
                  v7573 = 2;
                } else {
                  v7573 = 4;
                }
                var expectedHexDigits = v7573;
                this.nextChar();
                var i$$54 = 0;
                var v7575 = i$$54 < expectedHexDigits;
                for (;v7575;) {
                  var v15718 = this.ch;
                  var v7574 = this.IsHexDigit(v15718);
                  if (v7574) {
                    this.nextChar();
                  } else {
                    this.reportScannerError("Invalid Unicode escape sequence");
                    break;
                  }
                  i$$54++;
                  v7575 = i$$54 < expectedHexDigits;
                }
                continue scanStringConstantLoop;
            }
          ;
        }
        var v15719 = this.ch;
        var v15720 = TypeScript$$16.LexCodeASCIIChars;
        var v7578 = v15719 >= v15720;
        if (v7578) {
          this.seenUnicodeChar = true;
        }
        this.nextChar();
      }
      var v7579 = TypeScript$$16.StringLiteralToken;
      var v15721 = this.src;
      var v15722 = this.startPos;
      var v15723 = this.pos;
      var v7580 = v15721.substring(v15722, v15723);
      return new v7579(v7580);
    }
    function v669() {
      var v15724 = this.ch;
      var v7581 = LexIsUnicodeIdStart(v15724);
      var v15726 = !v7581;
      if (v15726) {
        var v15725 = this.ch;
        v7581 = LexIsUnicodeDigit(v15725);
      }
      var valid = v7581;
      var v7582 = this.seenUnicodeChar;
      var v15727 = !v7582;
      if (v15727) {
        v7582 = valid;
      }
      this.seenUnicodeChar = v7582;
      return valid;
    }
    function v668() {
      this.prevLine = this.line;
      var v26687 = this.innerScan();
      this.prevTok = v26687;
      var v7585 = this.saveScan;
      if (v7585) {
        var v7583 = this.saveScan;
        var v7584 = this.prevTok;
        v7583.addToken(v7584, this);
      }
      return this.prevTok;
    }
    function v667() {
      var v20565 = this.lexState;
      var v20566 = LexState.InMultilineComment;
      var v15728 = v20565 == v20566;
      if (v15728) {
        v15728 = this.scanComments;
      }
      var v7597 = v15728;
      if (v7597) {
        var v26688 = this.peekChar();
        this.ch = v26688;
        var commentLine = this.line;
        this.finishMultilineComment();
        var v15729 = this.startPos;
        var v15730 = this.pos;
        var v7594 = v15729 < v15730;
        if (v7594) {
          var v7586 = this.src;
          var v7587 = this.startPos;
          var v7588 = this.pos;
          var commentText$$1 = v7586.substring(v7587, v7588);
          this.tokenStart();
          var v7589 = TypeScript$$16.CommentToken;
          var v15731 = TypeScript$$16.TokenID;
          var v7590 = v15731.Comment;
          var v7591 = this.startPos;
          return new v7589(v7590, commentText$$1, true, v7591, commentLine, true);
        } else {
          var v7592 = TypeScript$$16.staticTokens;
          var v15732 = TypeScript$$16.TokenID;
          var v7593 = v15732.EndOfFile;
          return v7592[v7593];
        }
      } else {
        var v20567 = this.lexState;
        var v20568 = LexState.InMultilineSingleQuoteString;
        var v15733 = v20567 == v20568;
        if (v15733) {
          var v20569 = this.pos;
          var v20570 = this.len;
          v15733 = v20569 < v20570;
        }
        var v7596 = v15733;
        if (v7596) {
          this.ch = TypeScript$$16.LexCodeAPO;
          this.lexState = LexState.Start;
          return this.scanStringConstant();
        } else {
          var v20571 = this.lexState;
          var v20572 = LexState.InMultilineDoubleQuoteString;
          var v15734 = v20571 == v20572;
          if (v15734) {
            var v20573 = this.pos;
            var v20574 = this.len;
            v15734 = v20573 < v20574;
          }
          var v7595 = v15734;
          if (v7595) {
            this.ch = TypeScript$$16.LexCodeQUO;
            this.lexState = LexState.Start;
            return this.scanStringConstant();
          }
        }
      }
      this.prevLine = this.line;
      var prevTok$$1 = this.innerScan();
      var v15735 = prevTok$$1.tokenId;
      var v20575 = TypeScript$$16.TokenID;
      var v15736 = v20575.Whitespace;
      var v7598 = v15735 != v15736;
      if (v7598) {
        this.prevTok = prevTok$$1;
      }
      return prevTok$$1;
    }
    function v666() {
      var prevLine$$1 = this.prevLine;
      var line$$9 = this.line;
      var col = this.col;
      var pos$$2 = this.pos;
      var startPos$$1 = this.startPos;
      var startCol = this.startCol;
      var startLine$$41 = this.startLine;
      var ch = this.ch;
      var prevTok = this.prevTok;
      var lexState = this.lexState;
      var interveningWhitespace = this.interveningWhitespace;
      var interveningWhitespacePos = this.interveningWhitespacePos;
      var leftCurlyCount$$6 = this.leftCurlyCount;
      var rightCurlyCount$$6 = this.rightCurlyCount;
      var seenUnicodeChar = this.seenUnicodeChar;
      var seenUnicodeCharInComment = this.seenUnicodeCharInComment;
      var v7599 = this.commentStack;
      var commentStackLength = v7599.length;
      var lookAheadToken = this.scan();
      this.prevLine = prevLine$$1;
      this.line = line$$9;
      this.col = col;
      this.pos = pos$$2;
      this.startPos = startPos$$1;
      this.startCol = startCol;
      this.startLine = startLine$$41;
      this.ch = ch;
      this.prevTok = prevTok;
      this.lexState = lexState;
      this.interveningWhitespace = interveningWhitespace;
      this.interveningWhitespacePos = interveningWhitespacePos;
      this.leftCurlyCount = leftCurlyCount$$6;
      this.rightCurlyCount = rightCurlyCount$$6;
      this.seenUnicodeChar = seenUnicodeChar;
      this.seenUnicodeCharInComment = seenUnicodeCharInComment;
      var v7600 = this.commentStack;
      v7600.length = commentStackLength;
      return lookAheadToken;
    }
    function v665() {
      this.pos++;
      this.col++;
      var v26689 = this.peekChar();
      this.ch = v26689;
      return;
    }
    function v664(amt) {
      var v15737 = this.pos;
      this.pos = v15737 + amt;
      var v15738 = this.col;
      this.col = v15738 + amt;
      var v26690 = this.peekChar();
      this.ch = v26690;
      return;
    }
    function v663() {
      var v7601;
      var v15739 = this.interveningWhitespace;
      if (v15739) {
        v7601 = this.interveningWhitespacePos;
      } else {
        v7601 = this.startPos;
      }
      return v7601;
    }
    function v662() {
      var v7602 = this.prevLine;
      var v7603 = this.startLine;
      return v7602 != v7603;
    }
    function v661() {
      var v20576 = TypeScript$$16.noRegexTable;
      var v23699 = this.prevTok;
      var v20577 = v23699.tokenId;
      var v15740 = v20576[v20577];
      var v7604 = v15740 != undefined;
      if (v7604) {
        return null;
      }
      var svPos$$2 = this.pos;
      var svCol$$1 = this.col;
      var index$$49 = this.findClosingSLH();
      var v7612 = index$$49 > 0;
      if (v7612) {
        var v7605 = this.src;
        var pattern$$1 = v7605.substring(svPos$$2, index$$49);
        var flags$$2 = "";
        this.pos = index$$49 + 1;
        var v26691 = this.peekChar();
        this.ch = v26691;
        var flagsStart = this.pos;
        var v23700 = this.ch;
        var v23701 = TypeScript$$16.LexCode_i;
        var v20578 = v23700 == v23701;
        var v23704 = !v20578;
        if (v23704) {
          var v23702 = this.ch;
          var v23703 = TypeScript$$16.LexCode_g;
          v20578 = v23702 == v23703;
        }
        var v15741 = v20578;
        var v20581 = !v15741;
        if (v20581) {
          var v20579 = this.ch;
          var v20580 = TypeScript$$16.LexCode_m;
          v15741 = v20579 == v20580;
        }
        var v7606 = v15741;
        for (;v7606;) {
          this.nextChar();
          var v23705 = this.ch;
          var v23706 = TypeScript$$16.LexCode_i;
          var v20582 = v23705 == v23706;
          var v23709 = !v20582;
          if (v23709) {
            var v23707 = this.ch;
            var v23708 = TypeScript$$16.LexCode_g;
            v20582 = v23707 == v23708;
          }
          var v15742 = v20582;
          var v20585 = !v15742;
          if (v20585) {
            var v20583 = this.ch;
            var v20584 = TypeScript$$16.LexCode_m;
            v15742 = v20583 == v20584;
          }
          v7606 = v15742;
        }
        var v20586 = this.pos;
        var v15743 = v20586 - flagsStart;
        var v7609 = v15743 > 3;
        if (v7609) {
          return null;
        } else {
          var v7607 = this.src;
          var v7608 = this.pos;
          flags$$2 = v7607.substring(flagsStart, v7608);
        }
        var regex$$2 = undefined;
        try {
          regex$$2 = new RegExp(pattern$$1, flags$$2);
        } catch (regexException) {
        }
        if (regex$$2) {
          var v15744 = this.pos;
          var v15745 = this.startPos;
          var v7610 = v15744 - v15745;
          this.col = svCol$$1 + v7610;
          var v7611 = TypeScript$$16.RegularExpressionLiteralToken;
          return new v7611(regex$$2);
        }
      }
      this.pos = svPos$$2;
      this.col = svCol$$1;
      return null;
    }
    function v660() {
      var index$$48 = this.pos;
      var v7613 = this.src;
      var ch2$$1 = v7613.charCodeAt(index$$48);
      var prevCh = 0;
      var liveEsc = false;
      var v20587 = this.endsLine(ch2$$1);
      var v15746 = !v20587;
      if (v15746) {
        var v20588 = this.len;
        v15746 = index$$48 < v20588;
      }
      var v7617 = v15746;
      for (;v7617;) {
        var v20589 = TypeScript$$16.LexCodeSLH;
        var v15747 = ch2$$1 == v20589;
        if (v15747) {
          v15747 = !liveEsc;
        }
        var v7614 = v15747;
        if (v7614) {
          return index$$48;
        }
        prevCh = ch2$$1;
        index$$48++;
        if (liveEsc) {
          liveEsc = false;
        } else {
          var v7615 = TypeScript$$16.LexCodeBSL;
          liveEsc = prevCh == v7615;
        }
        var v7616 = this.src;
        ch2$$1 = v7616.charCodeAt(index$$48);
        var v20590 = this.endsLine(ch2$$1);
        var v15748 = !v20590;
        if (v15748) {
          var v20591 = this.len;
          v15748 = index$$48 < v20591;
        }
        v7617 = v15748;
      }
      return-1;
    }
    function v659() {
      var v7618 = this.src;
      var v7619 = this.startPos;
      var v7620 = this.pos;
      return v7618.substring(v7619, v7620);
    }
    function v658() {
      var v15749 = this.pos;
      var v15750 = this.len;
      var v7623 = v15749 < v15750;
      for (;v7623;) {
        var v15751 = this.ch;
        var v7621 = this.endsLine(v15751);
        if (v7621) {
          break;
        }
        var v15752 = this.ch;
        var v15753 = TypeScript$$16.LexCodeASCIIChars;
        var v7622 = v15752 >= v15753;
        if (v7622) {
          this.seenUnicodeCharInComment = true;
        }
        this.nextChar();
        var v15754 = this.pos;
        var v15755 = this.len;
        v7623 = v15754 < v15755;
      }
      var v15756 = this.mode;
      var v15757 = LexMode.File;
      var v7624 = v15756 == v15757;
      if (v7624) {
        this.tokenStart();
      }
      return;
    }
    function v657(c$$10) {
      var v23710 = TypeScript$$16.LexCodeNWL;
      var v20592 = c$$10 == v23710;
      var v23712 = !v20592;
      if (v23712) {
        var v23711 = TypeScript$$16.LexCodeRET;
        v20592 = c$$10 == v23711;
      }
      var v15758 = v20592;
      var v20594 = !v15758;
      if (v20594) {
        var v20593 = TypeScript$$16.LexCodeLS;
        v15758 = c$$10 == v20593;
      }
      var v7625 = v15758;
      var v15760 = !v7625;
      if (v15760) {
        var v15759 = TypeScript$$16.LexCodePS;
        v7625 = c$$10 == v15759;
      }
      return v7625;
    }
    function v656() {
      this.commentStack = [];
      return;
    }
    function v655(line$$8) {
      var comments$$9 = null;
      var v23713 = this.commentStack;
      var v20595 = v23713.length;
      var v15761 = v20595 > 0;
      if (v15761) {
        var v25215 = this.commentStack;
        var v23714 = v25215[0];
        var v20596 = v23714.line;
        v15761 = v20596 == line$$8;
      }
      var v7629 = v15761;
      for (;v7629;) {
        var v7628 = comments$$9 == null;
        if (v7628) {
          var v15762 = this.commentStack;
          var v7626 = v15762.shift();
          comments$$9 = [v7626];
        } else {
          var v20597 = this.commentStack;
          var v15763 = v20597.shift();
          var v7627 = [v15763];
          comments$$9 = comments$$9.concat(v7627);
        }
        var v23715 = this.commentStack;
        var v20598 = v23715.length;
        var v15764 = v20598 > 0;
        if (v15764) {
          var v25216 = this.commentStack;
          var v23716 = v25216[0];
          var v20599 = v23716.line;
          v15764 = v20599 == line$$8;
        }
        v7629 = v15764;
      }
      return comments$$9;
    }
    function v654() {
      var stack$$2 = this.commentStack;
      this.commentStack = [];
      return stack$$2;
    }
    function v653(comment$$4) {
      var v7630 = this.commentStack;
      v7630.push(comment$$4);
      return;
    }
    function v652() {
      var ch2;
      this.lexState = LexState.InMultilineComment;
      var v15765 = this.pos;
      var v15766 = this.len;
      var v7638 = v15765 < v15766;
      for (;v7638;) {
        var v15767 = this.ch;
        var v15768 = TypeScript$$16.LexCodeMUL;
        var v7637 = v15767 == v15768;
        if (v7637) {
          var v15769 = this.pos;
          var v7631 = v15769 + 1;
          ch2 = this.peekCharAt(v7631);
          var v15770 = TypeScript$$16.LexCodeSLH;
          var v7633 = ch2 == v15770;
          if (v7633) {
            this.advanceChar(2);
            var v15771 = this.mode;
            var v15772 = LexMode.File;
            var v7632 = v15771 == v15772;
            if (v7632) {
              this.tokenStart();
            }
            this.lexState = LexState.Start;
            return true;
          }
        } else {
          var v15773 = this.ch;
          var v15774 = TypeScript$$16.LexCodeNWL;
          var v7636 = v15773 == v15774;
          if (v7636) {
            this.newLine();
            var v15775 = this.mode;
            var v15776 = LexMode.Line;
            var v7634 = v15775 == v15776;
            if (v7634) {
              this.nextChar();
              return false;
            }
          } else {
            var v15777 = this.ch;
            var v15778 = TypeScript$$16.LexCodeASCIIChars;
            var v7635 = v15777 >= v15778;
            if (v7635) {
              this.seenUnicodeCharInComment = true;
            }
          }
        }
        this.nextChar();
        var v15779 = this.pos;
        var v15780 = this.len;
        v7638 = v15779 < v15780;
      }
      return false;
    }
    function v651() {
      this.col = 0;
      var v15781 = this.mode;
      var v15782 = LexMode.File;
      var v7641 = v15781 == v15782;
      if (v7641) {
        this.line++;
        var v7639 = this.lineMap;
        var v7640 = this.line;
        var v15783 = this.pos;
        v7639[v7640] = v15783 + 1;
      }
      return;
    }
    function v650() {
      var v7642 = NumberScanState.InFraction;
      return this.scanDecimalNumber(v7642);
    }
    function v649() {
      var v15784 = this.peekChar();
      var v15785 = TypeScript$$16.LexCode_0;
      var v7646 = v15784 == v15785;
      if (v7646) {
        var v20600 = this.pos;
        var v15786 = v20600 + 1;
        var v7644 = this.peekCharAt(v15786);
        switch(v7644) {
          case TypeScript$$16.LexCode_x:
          ;
          case TypeScript$$16.LexCode_X:
            this.advanceChar(2);
            return this.scanHexDigits();
          case TypeScript$$16.LexCode_8:
          ;
          case TypeScript$$16.LexCode_9:
          ;
          case TypeScript$$16.LexCodeDOT:
            var v7643 = NumberScanState.Start;
            return this.scanDecimalNumber(v7643);
          default:
            return this.scanOctalDigits();
        }
      } else {
        var v7645 = NumberScanState.Start;
        return this.scanDecimalNumber(v7645);
      }
      return;
    }
    function v648(state$$4) {
      var atLeastOneDigit$$2 = false;
      var svPos$$1 = this.pos;
      var svCol = this.col;
      for (;;) {
        var v15787 = this.ch;
        var v7672 = LexIsDigit(v15787);
        if (v7672) {
          atLeastOneDigit$$2 = true;
          var v20601 = this.ch;
          var v20602 = TypeScript$$16.LexCode_0;
          var v15788 = v20601 != v20602;
          if (v15788) {
            var v20603 = NumberScanState.InEmptyFraction;
            v15788 = state$$4 == v20603;
          }
          var v7647 = v15788;
          if (v7647) {
            state$$4 = NumberScanState.InFraction;
          }
          this.nextChar();
        } else {
          var v15789 = this.ch;
          var v15790 = TypeScript$$16.LexCodeDOT;
          var v7671 = v15789 == v15790;
          if (v7671) {
            var v15791 = NumberScanState.Start;
            var v7651 = state$$4 == v15791;
            if (v7651) {
              this.nextChar();
              state$$4 = NumberScanState.InEmptyFraction;
            } else {
              if (atLeastOneDigit$$2) {
                var v7648 = TypeScript$$16.NumberLiteralToken;
                var v20604 = this.src;
                var v20605 = this.startPos;
                var v20606 = this.pos;
                var v15792 = v20604.substring(v20605, v20606);
                var v7649 = parseFloat(v15792);
                var v15793 = NumberScanState.InEmptyFraction;
                var v7650 = state$$4 == v15793;
                return new v7648(v7649, v7650);
              } else {
                this.pos = svPos$$1;
                this.col = svCol;
                return null;
              }
            }
          } else {
            var v20607 = this.ch;
            var v20608 = TypeScript$$16.LexCode_e;
            var v15794 = v20607 == v20608;
            var v20611 = !v15794;
            if (v20611) {
              var v20609 = this.ch;
              var v20610 = TypeScript$$16.LexCode_E;
              v15794 = v20609 == v20610;
            }
            var v7670 = v15794;
            if (v7670) {
              var v15795 = NumberScanState.Start;
              var v7655 = state$$4 == v15795;
              if (v7655) {
                if (atLeastOneDigit$$2) {
                  atLeastOneDigit$$2 = false;
                  this.nextChar();
                  state$$4 = NumberScanState.InExponent;
                } else {
                  this.pos = svPos$$1;
                  this.col = svCol;
                  return null;
                }
              } else {
                var v20612 = NumberScanState.InFraction;
                var v15796 = state$$4 == v20612;
                var v20614 = !v15796;
                if (v20614) {
                  var v20613 = NumberScanState.InEmptyFraction;
                  v15796 = state$$4 == v20613;
                }
                var v7654 = v15796;
                if (v7654) {
                  this.nextChar();
                  state$$4 = NumberScanState.InExponent;
                  atLeastOneDigit$$2 = false;
                } else {
                  if (atLeastOneDigit$$2) {
                    var v7652 = TypeScript$$16.NumberLiteralToken;
                    var v20615 = this.src;
                    var v20616 = this.startPos;
                    var v20617 = this.pos;
                    var v15797 = v20615.substring(v20616, v20617);
                    var v7653 = parseFloat(v15797);
                    return new v7652(v7653);
                  } else {
                    this.pos = svPos$$1;
                    this.col = svCol;
                    return null;
                  }
                }
              }
            } else {
              var v20618 = this.ch;
              var v20619 = TypeScript$$16.LexCodePLS;
              var v15798 = v20618 == v20619;
              var v20622 = !v15798;
              if (v20622) {
                var v20620 = this.ch;
                var v20621 = TypeScript$$16.LexCodeMIN;
                v15798 = v20620 == v20621;
              }
              var v7669 = v15798;
              if (v7669) {
                var v15799 = NumberScanState.InExponent;
                var v7664 = state$$4 == v15799;
                if (v7664) {
                  var v7656 = !atLeastOneDigit$$2;
                  if (v7656) {
                    this.nextChar();
                  } else {
                    this.pos = svPos$$1;
                    this.col = svCol;
                    return null;
                  }
                } else {
                  var v20623 = NumberScanState.InEmptyFraction;
                  var v15800 = state$$4 == v20623;
                  var v20625 = !v15800;
                  if (v20625) {
                    var v20624 = NumberScanState.InFraction;
                    v15800 = state$$4 == v20624;
                  }
                  var v7663 = v15800;
                  if (v7663) {
                    var v7657 = TypeScript$$16.NumberLiteralToken;
                    var v20626 = this.src;
                    var v20627 = this.startPos;
                    var v20628 = this.pos;
                    var v15801 = v20626.substring(v20627, v20628);
                    var v7658 = parseFloat(v15801);
                    var v15802 = NumberScanState.InEmptyFraction;
                    var v7659 = state$$4 == v15802;
                    return new v7657(v7658, v7659);
                  } else {
                    var v7662 = !atLeastOneDigit$$2;
                    if (v7662) {
                      this.pos = svPos$$1;
                      this.col = svCol;
                      return null;
                    } else {
                      var v7660 = TypeScript$$16.NumberLiteralToken;
                      var v20629 = this.src;
                      var v20630 = this.startPos;
                      var v20631 = this.pos;
                      var v15803 = v20629.substring(v20630, v20631);
                      var v7661 = parseFloat(v15803);
                      return new v7660(v7661);
                    }
                  }
                }
              } else {
                var v7668 = !atLeastOneDigit$$2;
                if (v7668) {
                  this.pos = svPos$$1;
                  this.col = svCol;
                  return null;
                } else {
                  var v7665 = TypeScript$$16.NumberLiteralToken;
                  var v20632 = this.src;
                  var v20633 = this.startPos;
                  var v20634 = this.pos;
                  var v15804 = v20632.substring(v20633, v20634);
                  var v7666 = parseFloat(v15804);
                  var v15805 = NumberScanState.InEmptyFraction;
                  var v7667 = state$$4 == v15805;
                  return new v7665(v7666, v7667);
                }
              }
            }
          }
        }
      }
      return;
    }
    function v647() {
      var atLeastOneDigit$$1 = false;
      for (;;) {
        var v15806 = this.ch;
        var v7675 = this.IsOctalDigit(v15806);
        if (v7675) {
          this.nextChar();
          atLeastOneDigit$$1 = true;
        } else {
          if (atLeastOneDigit$$1) {
            var v7673 = TypeScript$$16.NumberLiteralToken;
            var v20635 = this.src;
            var v20636 = this.startPos;
            var v20637 = this.pos;
            var v15807 = v20635.substring(v20636, v20637);
            var v7674 = parseInt(v15807);
            return new v7673(v7674);
          } else {
            return null;
          }
        }
      }
      return;
    }
    function v646() {
      var atLeastOneDigit = false;
      for (;;) {
        var v15808 = this.ch;
        var v7678 = this.IsHexDigit(v15808);
        if (v7678) {
          this.nextChar();
          atLeastOneDigit = true;
        } else {
          if (atLeastOneDigit) {
            var v7676 = TypeScript$$16.NumberLiteralToken;
            var v20638 = this.src;
            var v20639 = this.startPos;
            var v20640 = this.pos;
            var v15809 = v20638.substring(v20639, v20640);
            var v7677 = parseInt(v15809);
            return new v7676(v7677);
          } else {
            return null;
          }
        }
      }
      return;
    }
    function v645(c$$9) {
      var v20641 = TypeScript$$16.LexCode_0;
      var v15810 = c$$9 >= v20641;
      if (v15810) {
        var v20642 = TypeScript$$16.LexCode_7;
        v15810 = c$$9 <= v20642;
      }
      var v7679 = v15810;
      var v15812 = !v7679;
      if (v15812) {
        var v20643 = TypeScript$$16.LexCode_a;
        var v15811 = c$$9 >= v20643;
        if (v15811) {
          var v20644 = TypeScript$$16.LexCode_f;
          v15811 = c$$9 <= v20644;
        }
        v7679 = v15811;
      }
      return v7679;
    }
    function v644(c$$8) {
      var v23717 = TypeScript$$16.LexCode_0;
      var v20645 = c$$8 >= v23717;
      if (v20645) {
        var v23718 = TypeScript$$16.LexCode_9;
        v20645 = c$$8 <= v23718;
      }
      var v15813 = v20645;
      var v20647 = !v15813;
      if (v20647) {
        var v23719 = TypeScript$$16.LexCode_A;
        var v20646 = c$$8 >= v23719;
        if (v20646) {
          var v23720 = TypeScript$$16.LexCode_F;
          v20646 = c$$8 <= v23720;
        }
        v15813 = v20646;
      }
      var v7680 = v15813;
      var v15815 = !v7680;
      if (v15815) {
        var v20648 = TypeScript$$16.LexCode_a;
        var v15814 = c$$8 >= v20648;
        if (v15814) {
          var v20649 = TypeScript$$16.LexCode_f;
          v15814 = c$$8 <= v20649;
        }
        v7680 = v15814;
      }
      return v7680;
    }
    function v643(index$$47) {
      var v15816 = this.len;
      var v7682 = index$$47 < v15816;
      if (v7682) {
        var v7681 = this.src;
        return v7681.charCodeAt(index$$47);
      } else {
        return TypeScript$$16.LexEOF;
      }
      return;
    }
    function v642() {
      var v15817 = this.pos;
      var v15818 = this.len;
      var v7685 = v15817 < v15818;
      if (v7685) {
        var v7683 = this.src;
        var v7684 = this.pos;
        return v7683.charCodeAt(v7684);
      } else {
        return TypeScript$$16.LexEOF;
      }
      return;
    }
    function v641() {
      this.startPos = this.pos;
      this.startLine = this.line;
      this.startCol = this.col;
      this.interveningWhitespace = false;
      return;
    }
    function v640() {
      return this.lexState;
    }
    function v639(value$$34) {
      this.scanComments = value$$34;
      return;
    }
    function v638(newSrc$$2, textMode$$2) {
      var v7686 = new StringSourceText(newSrc$$2);
      this.setSourceText(v7686, textMode$$2);
      return;
    }
    function v637(savedTokens) {
      this.saveScan = savedTokens;
      return;
    }
    function v636(reportError$$1) {
      this.reportError = reportError$$1;
      return;
    }
    function v635(newSrc$$1, textMode$$1) {
      this.mode = textMode$$1;
      var v7687 = this.mode;
      var v7688 = LexMode.Line;
      this.scanComments = v7687 === v7688;
      this.pos = 0;
      this.interveningWhitespacePos = 0;
      this.startPos = 0;
      this.line = 1;
      this.col = 0;
      this.startCol = this.col;
      this.startLine = this.line;
      this.len = 0;
      var v7689 = newSrc$$1.getLength();
      var v26692 = newSrc$$1.getText(0, v7689);
      this.src = v26692;
      var v7690 = this.src;
      this.len = v7690.length;
      this.lineMap = [];
      var v7691 = this.lineMap;
      v7691[1] = 0;
      this.commentStack = [];
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      return;
    }
    function v634() {
      return this.prevTok;
    }
    function Scanner$$1() {
      this.prevLine = 1;
      this.line = 1;
      this.col = 0;
      this.pos = 0;
      this.startPos = 0;
      this.len = 0;
      this.lineMap = [];
      this.ch = TypeScript$$16.LexEOF;
      this.lexState = LexState.Start;
      this.mode = LexMode.File;
      this.scanComments = true;
      this.interveningWhitespace = false;
      this.interveningWhitespacePos = 0;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      var v26693 = new Array;
      this.commentStack = v26693;
      this.saveScan = null;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      var v7692 = TypeScript$$16.staticTokens;
      var v15819 = TypeScript$$16.TokenID;
      var v7693 = v15819.EndOfFile;
      this.prevTok = v7692[v7693];
      this.startCol = this.col;
      this.startLine = this.line;
      var v7694 = this.lineMap;
      v7694[1] = 0;
      var v15820 = TypeScript$$16.LexKeywordTable;
      var v7695 = !v15820;
      if (v7695) {
        LexInitialize();
      }
      return;
    }
    var v7696 = Scanner$$1.prototype;
    v7696.previousToken = v634;
    var v7697 = Scanner$$1.prototype;
    v7697.setSourceText = v635;
    var v7698 = Scanner$$1.prototype;
    v7698.setErrorHandler = v636;
    var v7699 = Scanner$$1.prototype;
    v7699.setSaveScan = v637;
    var v7700 = Scanner$$1.prototype;
    v7700.setText = v638;
    var v7701 = Scanner$$1.prototype;
    v7701.setScanComments = v639;
    var v7702 = Scanner$$1.prototype;
    v7702.getLexState = v640;
    var v7703 = Scanner$$1.prototype;
    v7703.tokenStart = v641;
    var v7704 = Scanner$$1.prototype;
    v7704.peekChar = v642;
    var v7705 = Scanner$$1.prototype;
    v7705.peekCharAt = v643;
    var v7706 = Scanner$$1.prototype;
    v7706.IsHexDigit = v644;
    var v7707 = Scanner$$1.prototype;
    v7707.IsOctalDigit = v645;
    var v7708 = Scanner$$1.prototype;
    v7708.scanHexDigits = v646;
    var v7709 = Scanner$$1.prototype;
    v7709.scanOctalDigits = v647;
    var v7710 = Scanner$$1.prototype;
    v7710.scanDecimalNumber = v648;
    var v7711 = Scanner$$1.prototype;
    v7711.scanNumber = v649;
    var v7712 = Scanner$$1.prototype;
    v7712.scanFraction = v650;
    var v7713 = Scanner$$1.prototype;
    v7713.newLine = v651;
    var v7714 = Scanner$$1.prototype;
    v7714.finishMultilineComment = v652;
    var v7715 = Scanner$$1.prototype;
    v7715.pushComment = v653;
    var v7716 = Scanner$$1.prototype;
    v7716.getComments = v654;
    var v7717 = Scanner$$1.prototype;
    v7717.getCommentsForLine = v655;
    var v7718 = Scanner$$1.prototype;
    v7718.resetComments = v656;
    var v7719 = Scanner$$1.prototype;
    v7719.endsLine = v657;
    var v7720 = Scanner$$1.prototype;
    v7720.finishSinglelineComment = v658;
    var v7721 = Scanner$$1.prototype;
    v7721.tokenText = v659;
    var v7722 = Scanner$$1.prototype;
    v7722.findClosingSLH = v660;
    var v7723 = Scanner$$1.prototype;
    v7723.speculateRegex = v661;
    var v7724 = Scanner$$1.prototype;
    v7724.lastTokenHadNewline = v662;
    var v7725 = Scanner$$1.prototype;
    v7725.lastTokenLimChar = v663;
    var v7726 = Scanner$$1.prototype;
    v7726.advanceChar = v664;
    var v7727 = Scanner$$1.prototype;
    v7727.nextChar = v665;
    var v7728 = Scanner$$1.prototype;
    v7728.getLookAheadToken = v666;
    var v7729 = Scanner$$1.prototype;
    v7729.scanInLine = v667;
    var v7730 = Scanner$$1.prototype;
    v7730.scan = v668;
    var v7731 = Scanner$$1.prototype;
    v7731.isValidUnicodeIdentifierChar = v669;
    var v7732 = Scanner$$1.prototype;
    v7732.scanStringConstant = v670;
    var v7733 = Scanner$$1.prototype;
    v7733.scanIdentifier = v671;
    var v7734 = Scanner$$1.prototype;
    v7734.innerScan = v672;
    var v7735 = Scanner$$1.prototype;
    v7735.reportScannerError = v673;
    return Scanner$$1;
  }
  function v633() {
    function v632() {
      throw new Error("Invalid operation.");
    }
    function v631(reportError) {
      return;
    }
    function v630(newSrc, textMode) {
      return;
    }
    function v629() {
      this.commentStack = [];
      return;
    }
    function v628(line$$7) {
      var comments$$8 = null;
      var v23721 = this.commentStack;
      var v20650 = v23721.length;
      var v15821 = v20650 > 0;
      if (v15821) {
        var v25217 = this.commentStack;
        var v23722 = v25217[0];
        var v20651 = v23722.line;
        v15821 = v20651 == line$$7;
      }
      var v7739 = v15821;
      for (;v7739;) {
        var v7738 = comments$$8 == null;
        if (v7738) {
          var v15822 = this.commentStack;
          var v7736 = v15822.shift();
          comments$$8 = [v7736];
        } else {
          var v20652 = this.commentStack;
          var v15823 = v20652.shift();
          var v7737 = [v15823];
          comments$$8 = comments$$8.concat(v7737);
        }
        var v23723 = this.commentStack;
        var v20653 = v23723.length;
        var v15824 = v20653 > 0;
        if (v15824) {
          var v25218 = this.commentStack;
          var v23724 = v25218[0];
          var v20654 = v23724.line;
          v15824 = v20654 == line$$7;
        }
        v7739 = v15824;
      }
      return comments$$8;
    }
    function v627() {
      var stack$$1 = this.commentStack;
      this.commentStack = [];
      return stack$$1;
    }
    function v626(comment$$3) {
      var v7740 = this.commentStack;
      v7740.push(comment$$3);
      return;
    }
    function v625() {
      var v7741 = this.prevLine;
      var v7742 = this.startLine;
      return v7741 != v7742;
    }
    function v624() {
      var v15825 = this.prevSavedToken;
      var v7744 = v15825 !== null;
      if (v7744) {
        var v7743 = this.prevSavedToken;
        return v7743.limChar;
      } else {
        return 0;
      }
      return;
    }
    function v623(offset$$8) {
      var v7745 = this.lineMap;
      var v26694 = getLineNumberFromPosition(v7745, offset$$8);
      this.line = v26694;
      this.currentTokenIndex = 0;
      var v15826 = this.lineMap;
      var v15827 = this.line;
      var v7746 = v15826[v15827];
      var tmpCol = offset$$8 - v7746;
      var v23725 = this.lexStateByLine;
      var v23726 = this.line;
      var v20655 = v23725[v23726];
      var v20656 = LexState.InMultilineComment;
      var v15828 = v20655 == v20656;
      if (v15828) {
        var v20657 = this.line;
        v15828 = v20657 > 0;
      }
      var v7747 = v15828;
      for (;v7747;) {
        this.line--;
        tmpCol = 0;
        var v23727 = this.lexStateByLine;
        var v23728 = this.line;
        var v20658 = v23727[v23728];
        var v20659 = LexState.InMultilineComment;
        var v15829 = v20658 == v20659;
        if (v15829) {
          var v20660 = this.line;
          v15829 = v20660 > 0;
        }
        v7747 = v15829;
      }
      var v15830 = this.lineMap;
      var v7748 = v15830.length;
      var lenMin1 = v7748 - 1;
      var v7749 = this.tokensByLine;
      var v7750 = this.line;
      this.currentTokens = v7749[v7750];
      var v23729 = this.currentTokens;
      var v20661 = v23729.length;
      var v15831 = v20661 == 0;
      if (v15831) {
        var v20662 = this.line;
        v15831 = v20662 < lenMin1;
      }
      var v7753 = v15831;
      for (;v7753;) {
        this.line++;
        var v7751 = this.tokensByLine;
        var v7752 = this.line;
        this.currentTokens = v7751[v7752];
        tmpCol = 0;
        var v23730 = this.currentTokens;
        var v20663 = v23730.length;
        var v15832 = v20663 == 0;
        if (v15832) {
          var v20664 = this.line;
          v15832 = v20664 < lenMin1;
        }
        v7753 = v15832;
      }
      var v15833 = this.line;
      var v7759 = v15833 <= lenMin1;
      if (v7759) {
        var v20665 = this.currentTokenIndex;
        var v23731 = this.currentTokens;
        var v20666 = v23731.length;
        var v15834 = v20665 < v20666;
        if (v15834) {
          var v25219 = this.currentTokens;
          var v25220 = this.currentTokenIndex;
          var v23732 = v25219[v25220];
          var v20667 = v23732.limChar;
          v15834 = tmpCol > v20667;
        }
        var v7754 = v15834;
        for (;v7754;) {
          this.currentTokenIndex++;
          var v20668 = this.currentTokenIndex;
          var v23733 = this.currentTokens;
          var v20669 = v23733.length;
          var v15835 = v20668 < v20669;
          if (v15835) {
            var v25221 = this.currentTokens;
            var v25222 = this.currentTokenIndex;
            var v23734 = v25221[v25222];
            var v20670 = v23734.limChar;
            v15835 = tmpCol > v20670;
          }
          v7754 = v15835;
        }
        var v15836 = this.currentTokenIndex;
        var v20671 = this.currentTokens;
        var v15837 = v20671.length;
        var v7758 = v15836 < v15837;
        if (v7758) {
          var v15838 = this.currentTokens;
          var v15839 = this.currentTokenIndex;
          var v7755 = v15838[v15839];
          this.col = v7755.minChar;
          var v7756 = this.col;
          var v15840 = this.lineMap;
          var v15841 = this.line;
          var v7757 = v15840[v15841];
          return v7756 + v7757;
        }
      }
      return-1;
    }
    function v622() {
      this.startLine = this.line;
      this.startPos = this.col;
      var v15842 = this.currentTokenIndex;
      var v20672 = this.currentTokens;
      var v15843 = v20672.length;
      var v7765 = v15842 == v15843;
      if (v7765) {
        var v15844 = this.line;
        var v20673 = this.lineMap;
        var v15845 = v20673.length;
        var v7764 = v15844 < v15845;
        if (v7764) {
          this.line++;
          this.col = 0;
          this.currentTokenIndex = 0;
          var v7760 = this.tokensByLine;
          var v7761 = this.line;
          this.currentTokens = v7760[v7761];
        } else {
          var v7762 = TypeScript$$16.staticTokens;
          var v15846 = TypeScript$$16.TokenID;
          var v7763 = v15846.EndOfFile;
          return v7762[v7763];
        }
      }
      var v15847 = this.currentTokenIndex;
      var v20674 = this.currentTokens;
      var v15848 = v20674.length;
      var v7774 = v15847 < v15848;
      if (v7774) {
        var v7766 = this.curSavedToken;
        this.prevToken = v7766.tok;
        this.prevSavedToken = this.curSavedToken;
        var v7767 = this.currentTokens;
        var v7768 = this.currentTokenIndex;
        var v20675 = this.currentTokenIndex;
        this.currentTokenIndex = v20675 + 1;
        this.curSavedToken = v7767[v7768];
        var v7769 = this.curSavedToken;
        var curToken = v7769.tok;
        var v7770 = this.curSavedToken;
        this.pos = v7770.limChar;
        var v15849 = this.col;
        var v23735 = this.curSavedToken;
        var v20676 = v23735.limChar;
        var v23736 = this.curSavedToken;
        var v20677 = v23736.minChar;
        var v15850 = v20676 - v20677;
        this.col = v15849 + v15850;
        var v7771 = this.curSavedToken;
        this.startPos = v7771.minChar;
        this.prevLine = this.line;
        return curToken;
      } else {
        var v7772 = TypeScript$$16.staticTokens;
        var v15851 = TypeScript$$16.TokenID;
        var v7773 = v15851.EndOfFile;
        return v7772[v7773];
      }
      return;
    }
    function v621(tok$$3, scanner) {
      var v7775 = this.tokens;
      var v7776 = this.currentToken;
      var v20678 = this.currentToken;
      this.currentToken = v20678 + 1;
      var v15852 = TypeScript$$16.SavedToken;
      var v15853 = scanner.startPos;
      var v15854 = scanner.pos;
      var v26695 = new v15852(tok$$3, v15853, v15854);
      v7775[v7776] = v26695;
      return;
    }
    function v620() {
      this.currentToken = 0;
      return;
    }
    function v619() {
      return this.prevToken;
    }
    function SavedTokens$$1() {
      this.prevToken = null;
      this.curSavedToken = null;
      this.prevSavedToken = null;
      this.prevToken = null;
      this.currentToken = 0;
      var v26696 = new Array;
      this.tokens = v26696;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      this.prevLine = 1;
      this.line = 1;
      this.col = 0;
      this.lexState = LexState.Start;
      var v26697 = new Array;
      this.commentStack = v26697;
      this.lineMap = [];
      return;
    }
    var v7777 = SavedTokens$$1.prototype;
    v7777.previousToken = v619;
    var v7778 = SavedTokens$$1.prototype;
    v7778.close = v620;
    var v7779 = SavedTokens$$1.prototype;
    v7779.addToken = v621;
    var v7780 = SavedTokens$$1.prototype;
    v7780.scan = v622;
    var v7781 = SavedTokens$$1.prototype;
    v7781.syncToTok = v623;
    var v7782 = SavedTokens$$1.prototype;
    v7782.lastTokenLimChar = v624;
    var v7783 = SavedTokens$$1.prototype;
    v7783.lastTokenHadNewline = v625;
    var v7784 = SavedTokens$$1.prototype;
    v7784.pushComment = v626;
    var v7785 = SavedTokens$$1.prototype;
    v7785.getComments = v627;
    var v7786 = SavedTokens$$1.prototype;
    v7786.getCommentsForLine = v628;
    var v7787 = SavedTokens$$1.prototype;
    v7787.resetComments = v629;
    var v7788 = SavedTokens$$1.prototype;
    v7788.setSourceText = v630;
    var v7789 = SavedTokens$$1.prototype;
    v7789.setErrorHandler = v631;
    var v7790 = SavedTokens$$1.prototype;
    v7790.getLookAheadToken = v632;
    return SavedTokens$$1;
  }
  function v618() {
    function v617(start$$11, end$$5) {
      var v7791 = this.fetchSegment(start$$11, end$$5);
      return v7791.substring(start$$11, end$$5);
    }
    function v616(index$$46) {
      var v15855 = index$$46 + 1;
      var v7792 = this.fetchSegment(index$$46, v15855);
      return v7792.charCodeAt(index$$46);
    }
    function v615(start$$10, end$$4) {
      var v25223 = this.agg;
      var v23737 = v25223.seg1;
      var v20679 = v23737.segmentStart;
      var v15856 = v20679 <= start$$10;
      if (v15856) {
        var v25224 = this.agg;
        var v23738 = v25224.seg1;
        var v20680 = v23738.segmentEnd;
        v15856 = end$$4 <= v20680;
      }
      var v7794 = v15856;
      if (v7794) {
        var v7793 = this.agg;
        return v7793.seg1;
      }
      var v25225 = this.agg;
      var v23739 = v25225.seg2;
      var v20681 = v23739.segmentStart;
      var v15857 = v20681 <= start$$10;
      if (v15857) {
        var v25226 = this.agg;
        var v23740 = v25226.seg1;
        var v20682 = v23740.segmentEnd;
        v15857 = end$$4 <= v20682;
      }
      var v7795 = v15857;
      if (v7795) {
        return this.agg;
      }
      var v7796 = this.agg;
      var prev = v7796.seg1;
      var s$$16 = prev.segmentEnd;
      var v7797 = s$$16 + 512;
      var e$$9 = TypeScript$$16.max(v7797, end$$4);
      var v7798 = this.len;
      e$$9 = TypeScript$$16.min(e$$9, v7798);
      var v7799 = this.sourceText;
      var src$$1 = v7799.getText(s$$16, e$$9);
      var newSeg = new SourceTextSegment(s$$16, e$$9, src$$1);
      var v7800 = this.agg;
      v7800.seg2 = prev;
      var v7801 = this.agg;
      v7801.seg1 = newSeg;
      return this.agg;
    }
    function v614(a$$5, b$$4) {
      var v7802;
      var v15858 = a$$5 <= b$$4;
      if (v15858) {
        v7802 = a$$5;
      } else {
        v7802 = b$$4;
      }
      return v7802;
    }
    function v613(a$$4, b$$3) {
      var v7803;
      var v15859 = a$$4 >= b$$3;
      if (v15859) {
        v7803 = a$$4;
      } else {
        v7803 = b$$3;
      }
      return v7803;
    }
    function ScannerTextStream$$1(sourceText$$3) {
      this.sourceText = sourceText$$3;
      var v7804 = ScannerTextStream$$1.emptySegment;
      var v7805 = ScannerTextStream$$1.emptySegment;
      var v26698 = new AggerateSourceTextSegment(v7804, v7805);
      this.agg = v26698;
      var v7806 = this.sourceText;
      var v26699 = v7806.getLength();
      this.len = v26699;
      return;
    }
    var v7807 = ScannerTextStream$$1;
    var v26700 = new SourceTextSegment(0, 0, "");
    v7807.emptySegment = v26700;
    var v7808 = ScannerTextStream$$1.prototype;
    v7808.max = v613;
    var v7809 = ScannerTextStream$$1.prototype;
    v7809.min = v614;
    var v7810 = ScannerTextStream$$1.prototype;
    v7810.fetchSegment = v615;
    var v7811 = ScannerTextStream$$1.prototype;
    v7811.charCodeAt = v616;
    var v7812 = ScannerTextStream$$1.prototype;
    v7812.substring = v617;
    return ScannerTextStream$$1;
  }
  function v612() {
    function v611(start$$9, end$$3) {
      var v23741 = this.seg1;
      var v20683 = v23741.segmentStart;
      var v15860 = v20683 <= start$$9;
      if (v15860) {
        var v23742 = this.seg1;
        var v20684 = v23742.segmentEnd;
        v15860 = end$$3 <= v20684;
      }
      var v7816 = v15860;
      if (v7816) {
        var v15861 = this.seg1;
        var v7813 = v15861.segment;
        var v20685 = this.seg1;
        var v15862 = v20685.segmentStart;
        var v7814 = start$$9 - v15862;
        var v20686 = this.seg1;
        var v15863 = v20686.segmentStart;
        var v7815 = end$$3 - v15863;
        return v7813.substring(v7814, v7815);
      }
      var v20687 = this.seg2;
      var v15864 = v20687.segment;
      var v23743 = this.seg2;
      var v20688 = v23743.segmentStart;
      var v15865 = start$$9 - v20688;
      var v7817 = v15864.substring(v15865);
      var v20689 = this.seg1;
      var v15866 = v20689.segment;
      var v23744 = this.seg1;
      var v20690 = v23744.segmentStart;
      var v15867 = end$$3 - v20690;
      var v7818 = v15866.substring(0, v15867);
      return v7817 + v7818;
    }
    function v610(index$$45) {
      var v23745 = this.seg1;
      var v20691 = v23745.segmentStart;
      var v15868 = v20691 <= index$$45;
      if (v15868) {
        var v23746 = this.seg1;
        var v20692 = v23746.segmentEnd;
        v15868 = index$$45 < v20692;
      }
      var v7821 = v15868;
      if (v7821) {
        var v15869 = this.seg1;
        var v7819 = v15869.segment;
        var v20693 = this.seg1;
        var v15870 = v20693.segmentStart;
        var v7820 = index$$45 - v15870;
        return v7819.charCodeAt(v7820);
      }
      var v15871 = this.seg2;
      var v7822 = v15871.segment;
      var v20694 = this.seg2;
      var v15872 = v20694.segmentStart;
      var v7823 = index$$45 - v15872;
      return v7822.charCodeAt(v7823);
    }
    function AggerateSourceTextSegment$$1(seg1, seg2) {
      this.seg1 = seg1;
      this.seg2 = seg2;
      return;
    }
    var v7824 = AggerateSourceTextSegment$$1.prototype;
    v7824.charCodeAt = v610;
    var v7825 = AggerateSourceTextSegment$$1.prototype;
    v7825.substring = v611;
    return AggerateSourceTextSegment$$1;
  }
  function v609() {
    function v608(start$$8, end$$2) {
      var v7826 = this.segment;
      var v15873 = this.segmentStart;
      var v7827 = start$$8 - v15873;
      var v15874 = this.segmentStart;
      var v7828 = end$$2 - v15874;
      return v7826.substring(v7827, v7828);
    }
    function v607(index$$44) {
      var v7829 = this.segment;
      var v15875 = this.segmentStart;
      var v7830 = index$$44 - v15875;
      return v7829.charCodeAt(v7830);
    }
    function SourceTextSegment$$1(segmentStart, segmentEnd, segment) {
      this.segmentStart = segmentStart;
      this.segmentEnd = segmentEnd;
      this.segment = segment;
      return;
    }
    var v7831 = SourceTextSegment$$1.prototype;
    v7831.charCodeAt = v607;
    var v7832 = SourceTextSegment$$1.prototype;
    v7832.substring = v608;
    return SourceTextSegment$$1;
  }
  function v606() {
    function v605() {
      var v7833 = this.text;
      return v7833.length;
    }
    function v604(start$$7, end$$1) {
      var v7834 = this.text;
      return v7834.substring(start$$7, end$$1);
    }
    function StringSourceText$$1(text$$17) {
      this.text = text$$17;
      return;
    }
    var v7835 = StringSourceText$$1.prototype;
    v7835.getText = v604;
    var v7836 = StringSourceText$$1.prototype;
    v7836.getLength = v605;
    return StringSourceText$$1;
  }
  function v603(CommentStyle$$1) {
    CommentStyle$$1._map = [];
    var v7837 = CommentStyle$$1._map;
    v7837[0] = "Line";
    CommentStyle$$1.Line = 0;
    var v7838 = CommentStyle$$1._map;
    v7838[1] = "Block";
    CommentStyle$$1.Block = 1;
    return;
  }
  function v602(LexMode$$1) {
    LexMode$$1._map = [];
    var v7839 = LexMode$$1._map;
    v7839[0] = "Line";
    LexMode$$1.Line = 0;
    var v7840 = LexMode$$1._map;
    v7840[1] = "File";
    LexMode$$1.File = 1;
    return;
  }
  function v601(LexState$$1) {
    LexState$$1._map = [];
    var v7841 = LexState$$1._map;
    v7841[0] = "Start";
    LexState$$1.Start = 0;
    var v7842 = LexState$$1._map;
    v7842[1] = "InMultilineComment";
    LexState$$1.InMultilineComment = 1;
    var v7843 = LexState$$1._map;
    v7843[2] = "InMultilineSingleQuoteString";
    LexState$$1.InMultilineSingleQuoteString = 2;
    var v7844 = LexState$$1._map;
    v7844[3] = "InMultilineDoubleQuoteString";
    LexState$$1.InMultilineDoubleQuoteString = 3;
    return;
  }
  function v600(NumberScanState$$1) {
    NumberScanState$$1._map = [];
    var v7845 = NumberScanState$$1._map;
    v7845[0] = "Start";
    NumberScanState$$1.Start = 0;
    var v7846 = NumberScanState$$1._map;
    v7846[1] = "InFraction";
    NumberScanState$$1.InFraction = 1;
    var v7847 = NumberScanState$$1._map;
    v7847[2] = "InEmptyFraction";
    NumberScanState$$1.InEmptyFraction = 2;
    var v7848 = NumberScanState$$1._map;
    v7848[3] = "InExponent";
    NumberScanState$$1.InExponent = 3;
    return;
  }
  function LexLookUpUnicodeMap(code$$2, map$$1) {
    var lo = 0;
    var hi = map$$1.length;
    var mid;
    var v15876 = lo + 1;
    var v7852 = v15876 < hi;
    for (;v7852;) {
      var v15877 = hi - lo;
      var v7849 = v15877 / 2;
      mid = lo + v7849;
      var v15878 = mid % 2;
      mid = mid - v15878;
      var v20695 = map$$1[mid];
      var v15879 = v20695 <= code$$2;
      if (v15879) {
        var v23747 = mid + 1;
        var v20696 = map$$1[v23747];
        v15879 = code$$2 <= v20696;
      }
      var v7850 = v15879;
      if (v7850) {
        return true;
      }
      var v15880 = map$$1[mid];
      var v7851 = code$$2 < v15880;
      if (v7851) {
        hi = mid;
      } else {
        lo = mid + 2;
      }
      var v15881 = lo + 1;
      v7852 = v15881 < hi;
    }
    return false;
  }
  function LexIsUnicodeDigit(code$$3) {
    var v15882 = TypeScript$$16.codeGenTarget;
    var v20697 = TypeScript$$16.CodeGenTarget;
    var v15883 = v20697.ES3;
    var v7853 = v15882 == v15883;
    if (v7853) {
      return LexLookUpUnicodeMap(code$$3, unicodeES3IdCont);
    } else {
      return LexLookUpUnicodeMap(code$$3, unicodeES5IdCont);
    }
    return;
  }
  function LexIsUnicodeIdStart(code$$4) {
    var v15884 = TypeScript$$16.codeGenTarget;
    var v20698 = TypeScript$$16.CodeGenTarget;
    var v15885 = v20698.ES3;
    var v7854 = v15884 == v15885;
    if (v7854) {
      return LexLookUpUnicodeMap(code$$4, unicodeES3IdStart);
    } else {
      return LexLookUpUnicodeMap(code$$4, unicodeES5IdStart);
    }
    return;
  }
  function LexInitialize() {
    TypeScript$$16.initializeStaticTokens();
    var v7855 = TypeScript$$16.LexCodeLPR;
    var v15886 = TypeScript$$16.staticTokens;
    var v20699 = TypeScript$$16.TokenID;
    var v15887 = v20699.OpenParen;
    autoToken[v7855] = v15886[v15887];
    var v7856 = TypeScript$$16.LexCodeRPR;
    var v15888 = TypeScript$$16.staticTokens;
    var v20700 = TypeScript$$16.TokenID;
    var v15889 = v20700.CloseParen;
    autoToken[v7856] = v15888[v15889];
    var v7857 = TypeScript$$16.LexCodeCMA;
    var v15890 = TypeScript$$16.staticTokens;
    var v20701 = TypeScript$$16.TokenID;
    var v15891 = v20701.Comma;
    autoToken[v7857] = v15890[v15891];
    var v7858 = TypeScript$$16.LexCodeSMC;
    var v15892 = TypeScript$$16.staticTokens;
    var v20702 = TypeScript$$16.TokenID;
    var v15893 = v20702.Semicolon;
    autoToken[v7858] = v15892[v15893];
    var v7859 = TypeScript$$16.LexCodeLBR;
    var v15894 = TypeScript$$16.staticTokens;
    var v20703 = TypeScript$$16.TokenID;
    var v15895 = v20703.OpenBracket;
    autoToken[v7859] = v15894[v15895];
    var v7860 = TypeScript$$16.LexCodeRBR;
    var v15896 = TypeScript$$16.staticTokens;
    var v20704 = TypeScript$$16.TokenID;
    var v15897 = v20704.CloseBracket;
    autoToken[v7860] = v15896[v15897];
    var v7861 = TypeScript$$16.LexCodeTIL;
    var v15898 = TypeScript$$16.staticTokens;
    var v20705 = TypeScript$$16.TokenID;
    var v15899 = v20705.Tilde;
    autoToken[v7861] = v15898[v15899];
    var v7862 = TypeScript$$16.LexCodeQUE;
    var v15900 = TypeScript$$16.staticTokens;
    var v20706 = TypeScript$$16.TokenID;
    var v15901 = v20706.Question;
    autoToken[v7862] = v15900[v15901];
    var v7863 = TypeScript$$16.LexCodeLC;
    var v15902 = TypeScript$$16.staticTokens;
    var v20707 = TypeScript$$16.TokenID;
    var v15903 = v20707.OpenBrace;
    autoToken[v7863] = v15902[v15903];
    var v7864 = TypeScript$$16.LexCodeRC;
    var v15904 = TypeScript$$16.staticTokens;
    var v20708 = TypeScript$$16.TokenID;
    var v15905 = v20708.CloseBrace;
    autoToken[v7864] = v15904[v15905];
    var v7865 = TypeScript$$16.LexCodeCOL;
    var v15906 = TypeScript$$16.staticTokens;
    var v20709 = TypeScript$$16.TokenID;
    var v15907 = v20709.Colon;
    autoToken[v7865] = v15906[v15907];
    var v7866 = TypeScript$$16;
    var v15908 = TypeScript$$16.StringHashTable;
    var v26701 = new v15908;
    v7866.LexKeywordTable = v26701;
    var i$$53;
    var v15909 = TypeScript$$16.TokenID;
    var v7870 = v15909._map;
    for (i$$53 in v7870) {
      var v20710 = TypeScript$$16.TokenID;
      var v15910 = v20710.LimKeyword;
      var v7869 = i$$53 <= v15910;
      if (v7869) {
        var v7867 = TypeScript$$16.LexKeywordTable;
        var v23748 = TypeScript$$16.TokenID;
        var v20711 = v23748._map;
        var v15911 = v20711[i$$53];
        var v7868 = v15911.toLowerCase();
        v7867.add(v7868, i$$53);
      }
    }
    var j$$6 = 0;
    var v15912 = TypeScript$$16.LexCodeASCIIChars;
    var v7872 = j$$6 < v15912;
    for (;v7872;) {
      var v7871 = LexIsIdentifierStartChar(j$$6);
      if (v7871) {
        lexIdStartTable[j$$6] = true;
      } else {
        lexIdStartTable[j$$6] = false;
      }
      j$$6++;
      var v15913 = TypeScript$$16.LexCodeASCIIChars;
      v7872 = j$$6 < v15913;
    }
    return;
  }
  function LexAdjustIndent(code$$5, indentAmt) {
    var v23749 = TypeScript$$16.LexCodeLBR;
    var v20712 = code$$5 == v23749;
    var v23751 = !v20712;
    if (v23751) {
      var v23750 = TypeScript$$16.LexCodeLC;
      v20712 = code$$5 == v23750;
    }
    var v15914 = v20712;
    var v20714 = !v15914;
    if (v20714) {
      var v20713 = TypeScript$$16.LexCodeLPR;
      v15914 = code$$5 == v20713;
    }
    var v7874 = v15914;
    if (v7874) {
      return indentAmt + 1;
    } else {
      var v23752 = TypeScript$$16.LexCodeRBR;
      var v20715 = code$$5 == v23752;
      var v23754 = !v20715;
      if (v23754) {
        var v23753 = TypeScript$$16.LexCodeRC;
        v20715 = code$$5 == v23753;
      }
      var v15915 = v20715;
      var v20717 = !v15915;
      if (v20717) {
        var v20716 = TypeScript$$16.LexCodeRPR;
        v15915 = code$$5 == v20716;
      }
      var v7873 = v15915;
      if (v7873) {
        return indentAmt - 1;
      } else {
        return indentAmt;
      }
    }
    return;
  }
  function LexIsIdentifierStartChar(code$$6) {
    var v23755 = code$$6 >= 97;
    if (v23755) {
      v23755 = code$$6 <= 122;
    }
    var v20718 = v23755;
    var v23757 = !v20718;
    if (v23757) {
      var v23756 = code$$6 >= 65;
      if (v23756) {
        v23756 = code$$6 <= 90;
      }
      v20718 = v23756;
    }
    var v15916 = v20718;
    var v20720 = !v15916;
    if (v20720) {
      var v20719 = TypeScript$$16.LexCodeDollar;
      v15916 = code$$6 == v20719;
    }
    var v7875 = v15916;
    var v15918 = !v7875;
    if (v15918) {
      var v15917 = TypeScript$$16.LexCodeUnderscore;
      v7875 = code$$6 == v15917;
    }
    return v7875;
  }
  function LexIsDigit(code$$7) {
    var v7876 = code$$7 >= 48;
    if (v7876) {
      v7876 = code$$7 <= 57;
    }
    return v7876;
  }
  function LexIsIdentifierChar(code$$8) {
    var v7877 = lexIdStartTable[code$$8];
    var v15919 = !v7877;
    if (v15919) {
      v7877 = LexIsDigit(code$$8);
    }
    return v7877;
  }
  function LexMatchingOpen(code$$9) {
    var v15920 = TypeScript$$16.LexCodeRBR;
    var v7880 = code$$9 == v15920;
    if (v7880) {
      return TypeScript$$16.LexCodeLBR;
    } else {
      var v15921 = TypeScript$$16.LexCodeRC;
      var v7879 = code$$9 == v15921;
      if (v7879) {
        return TypeScript$$16.LexCodeLC;
      } else {
        var v15922 = TypeScript$$16.LexCodeRPR;
        var v7878 = code$$9 == v15922;
        if (v7878) {
          return TypeScript$$16.LexCodeLPR;
        } else {
          return 0;
        }
      }
    }
    return;
  }
  function convertTokToIDName(tok) {
    return convertTokToIDBase(tok, true, false);
  }
  function convertTokToID(tok$$1, strictMode) {
    return convertTokToIDBase(tok$$1, false, strictMode);
  }
  function convertTokToIDBase(tok$$2, identifierName, strictMode$$1) {
    var v15923 = tok$$2.tokenId;
    var v20721 = TypeScript$$16.TokenID;
    var v15924 = v20721.LimKeyword;
    var v7886 = v15923 <= v15924;
    if (v7886) {
      var v7881 = tok$$2.tokenId;
      var tokInfo = TypeScript$$16.lookupToken(v7881);
      var v7885 = tokInfo != undefined;
      if (v7885) {
        var v15925 = TypeScript$$16.Reservation;
        var v7882 = v15925.Javascript;
        var v15926 = TypeScript$$16.Reservation;
        var v7883 = v15926.JavascriptFuture;
        var resFlags = v7882 | v7883;
        if (strictMode$$1) {
          var v20722 = TypeScript$$16.Reservation;
          var v15927 = v20722.JavascriptFutureStrict;
          resFlags = resFlags | v15927;
        }
        var v15928 = identifierName;
        var v20724 = !v15928;
        if (v20724) {
          var v23758 = tokInfo.reservation;
          var v20723 = TypeScript$$16.hasFlag(v23758, resFlags);
          v15928 = !v20723;
        }
        var v7884 = v15928;
        if (v7884) {
          return true;
        }
      } else {
        return false;
      }
    } else {
      return false;
    }
    return;
  }
  function getLineNumberFromPosition(lineMap$$1, position$$2) {
    var v7887 = position$$2 === -1;
    if (v7887) {
      return 0;
    }
    var min$$2 = 0;
    var v7888 = lineMap$$1.length;
    var max$$1 = v7888 - 1;
    var v7892 = min$$2 < max$$1;
    for (;v7892;) {
      var v7889 = min$$2 + max$$1;
      var med = v7889 >> 1;
      var v15929 = lineMap$$1[med];
      var v7891 = position$$2 < v15929;
      if (v7891) {
        max$$1 = med - 1;
      } else {
        var v20725 = med + 1;
        var v15930 = lineMap$$1[v20725];
        var v7890 = position$$2 < v15930;
        if (v7890) {
          min$$2 = max$$1 = med;
        } else {
          min$$2 = med + 1;
        }
      }
      v7892 = min$$2 < max$$1;
    }
    return min$$2;
  }
  function getSourceLineColFromMap(lineCol$$5, minChar$$29, lineMap$$2) {
    var line$$5 = getLineNumberFromPosition(lineMap$$2, minChar$$29);
    var v7894 = line$$5 > 0;
    if (v7894) {
      lineCol$$5.line = line$$5;
      var v7893 = lineMap$$2[line$$5];
      lineCol$$5.col = minChar$$29 - v7893;
    }
    return;
  }
  function getLineColumnFromPosition(script$$9, position$$3) {
    var result$$10 = {line:-1, col:-1};
    var v15931 = script$$9.locationInfo;
    var v7895 = v15931.lineMap;
    getSourceLineColFromMap(result$$10, position$$3, v7895);
    var v15932 = result$$10.col;
    var v7896 = v15932 >= 0;
    if (v7896) {
      result$$10.col++;
    }
    return result$$10;
  }
  function getPositionFromLineColumn(script$$10, line$$6, column) {
    var v20726 = script$$10.locationInfo;
    var v15933 = v20726.lineMap;
    var v7897 = v15933[line$$6];
    var v7898 = column - 1;
    return v7897 + v7898;
  }
  function isPrimitiveTypeToken(token$$5) {
    var v7899 = token$$5.tokenId;
    switch(v7899) {
      case TypeScript$$16.TokenID.Any:
      ;
      case TypeScript$$16.TokenID.Bool:
      ;
      case TypeScript$$16.TokenID.Number:
      ;
      case TypeScript$$16.TokenID.String:
        return true;
    }
    return false;
  }
  function isModifier(token$$6) {
    var v7900 = token$$6.tokenId;
    switch(v7900) {
      case TypeScript$$16.TokenID.Public:
      ;
      case TypeScript$$16.TokenID.Private:
      ;
      case TypeScript$$16.TokenID.Static:
        return true;
    }
    return false;
  }
  TypeScript$$16.LexEOF = -1;
  TypeScript$$16.LexCodeNWL = 10;
  TypeScript$$16.LexCodeRET = 13;
  TypeScript$$16.LexCodeLS = 8232;
  TypeScript$$16.LexCodePS = 8233;
  TypeScript$$16.LexCodeTAB = 9;
  TypeScript$$16.LexCodeVTAB = 11;
  var v7901 = TypeScript$$16;
  var v26702 = "e".charCodeAt(0);
  v7901.LexCode_e = v26702;
  var v7902 = TypeScript$$16;
  var v26703 = "E".charCodeAt(0);
  v7902.LexCode_E = v26703;
  var v7903 = TypeScript$$16;
  var v26704 = "x".charCodeAt(0);
  v7903.LexCode_x = v26704;
  var v7904 = TypeScript$$16;
  var v26705 = "X".charCodeAt(0);
  v7904.LexCode_X = v26705;
  var v7905 = TypeScript$$16;
  var v26706 = "a".charCodeAt(0);
  v7905.LexCode_a = v26706;
  var v7906 = TypeScript$$16;
  var v26707 = "A".charCodeAt(0);
  v7906.LexCode_A = v26707;
  var v7907 = TypeScript$$16;
  var v26708 = "f".charCodeAt(0);
  v7907.LexCode_f = v26708;
  var v7908 = TypeScript$$16;
  var v26709 = "F".charCodeAt(0);
  v7908.LexCode_F = v26709;
  var v7909 = TypeScript$$16;
  var v26710 = "g".charCodeAt(0);
  v7909.LexCode_g = v26710;
  var v7910 = TypeScript$$16;
  var v26711 = "m".charCodeAt(0);
  v7910.LexCode_m = v26711;
  var v7911 = TypeScript$$16;
  var v26712 = "i".charCodeAt(0);
  v7911.LexCode_i = v26712;
  var v7912 = TypeScript$$16;
  var v26713 = "u".charCodeAt(0);
  v7912.LexCode_u = v26713;
  var v7913 = TypeScript$$16;
  var v26714 = "0".charCodeAt(0);
  v7913.LexCode_0 = v26714;
  var v7914 = TypeScript$$16;
  var v26715 = "9".charCodeAt(0);
  v7914.LexCode_9 = v26715;
  var v7915 = TypeScript$$16;
  var v26716 = "8".charCodeAt(0);
  v7915.LexCode_8 = v26716;
  var v7916 = TypeScript$$16;
  var v26717 = "7".charCodeAt(0);
  v7916.LexCode_7 = v26717;
  var v7917 = TypeScript$$16;
  var v26718 = "\\".charCodeAt(0);
  v7917.LexCodeBSL = v26718;
  var v7918 = TypeScript$$16;
  var v26719 = "#".charCodeAt(0);
  v7918.LexCodeSHP = v26719;
  var v7919 = TypeScript$$16;
  var v26720 = "!".charCodeAt(0);
  v7919.LexCodeBNG = v26720;
  var v7920 = TypeScript$$16;
  var v26721 = '"'.charCodeAt(0);
  v7920.LexCodeQUO = v26721;
  var v7921 = TypeScript$$16;
  var v26722 = "'".charCodeAt(0);
  v7921.LexCodeAPO = v26722;
  var v7922 = TypeScript$$16;
  var v26723 = "%".charCodeAt(0);
  v7922.LexCodePCT = v26723;
  var v7923 = TypeScript$$16;
  var v26724 = "&".charCodeAt(0);
  v7923.LexCodeAMP = v26724;
  var v7924 = TypeScript$$16;
  var v26725 = "(".charCodeAt(0);
  v7924.LexCodeLPR = v26725;
  var v7925 = TypeScript$$16;
  var v26726 = ")".charCodeAt(0);
  v7925.LexCodeRPR = v26726;
  var v7926 = TypeScript$$16;
  var v26727 = "+".charCodeAt(0);
  v7926.LexCodePLS = v26727;
  var v7927 = TypeScript$$16;
  var v26728 = "-".charCodeAt(0);
  v7927.LexCodeMIN = v26728;
  var v7928 = TypeScript$$16;
  var v26729 = "*".charCodeAt(0);
  v7928.LexCodeMUL = v26729;
  var v7929 = TypeScript$$16;
  var v26730 = "/".charCodeAt(0);
  v7929.LexCodeSLH = v26730;
  var v7930 = TypeScript$$16;
  var v26731 = "^".charCodeAt(0);
  v7930.LexCodeXOR = v26731;
  var v7931 = TypeScript$$16;
  var v26732 = ",".charCodeAt(0);
  v7931.LexCodeCMA = v26732;
  var v7932 = TypeScript$$16;
  var v26733 = ".".charCodeAt(0);
  v7932.LexCodeDOT = v26733;
  var v7933 = TypeScript$$16;
  var v26734 = "<".charCodeAt(0);
  v7933.LexCodeLT = v26734;
  var v7934 = TypeScript$$16;
  var v26735 = "=".charCodeAt(0);
  v7934.LexCodeEQ = v26735;
  var v7935 = TypeScript$$16;
  var v26736 = ">".charCodeAt(0);
  v7935.LexCodeGT = v26736;
  var v7936 = TypeScript$$16;
  var v26737 = "?".charCodeAt(0);
  v7936.LexCodeQUE = v26737;
  var v7937 = TypeScript$$16;
  var v26738 = "[".charCodeAt(0);
  v7937.LexCodeLBR = v26738;
  var v7938 = TypeScript$$16;
  var v26739 = "]".charCodeAt(0);
  v7938.LexCodeRBR = v26739;
  var v7939 = TypeScript$$16;
  var v26740 = "_".charCodeAt(0);
  v7939.LexCodeUSC = v26740;
  var v7940 = TypeScript$$16;
  var v26741 = "{".charCodeAt(0);
  v7940.LexCodeLC = v26741;
  var v7941 = TypeScript$$16;
  var v26742 = "}".charCodeAt(0);
  v7941.LexCodeRC = v26742;
  var v7942 = TypeScript$$16;
  var v26743 = "|".charCodeAt(0);
  v7942.LexCodeBAR = v26743;
  var v7943 = TypeScript$$16;
  var v26744 = "~".charCodeAt(0);
  v7943.LexCodeTIL = v26744;
  var v7944 = TypeScript$$16;
  var v26745 = ":".charCodeAt(0);
  v7944.LexCodeCOL = v26745;
  var v7945 = TypeScript$$16;
  var v26746 = ";".charCodeAt(0);
  v7945.LexCodeSMC = v26746;
  var v7946 = TypeScript$$16;
  var v26747 = "_".charCodeAt(0);
  v7946.LexCodeUnderscore = v26747;
  var v7947 = TypeScript$$16;
  var v26748 = "$".charCodeAt(0);
  v7947.LexCodeDollar = v26748;
  TypeScript$$16.LexCodeSpace = 32;
  var v7948 = TypeScript$$16;
  var v26749 = "@".charCodeAt(0);
  v7948.LexCodeAtSign = v26749;
  TypeScript$$16.LexCodeASCIIChars = 128;
  TypeScript$$16.LexKeywordTable = undefined;
  var v7949 = TypeScript$$16.LexCodeASCIIChars;
  var autoToken = new Array(v7949);
  var v7950 = TypeScript$$16.LexCodeASCIIChars;
  var lexIdStartTable = new Array(v7950);
  var v27113 = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 
  2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 
  2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 
  3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 
  4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 
  8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 13312, 19893, 19893, 19968, 19968, 40869, 40869, 40960, 42124, 44032, 44032, 55203, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 
  65019, 65136, 65138];
  var v27114 = [65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
  var unicodeES3IdStart = v27113.concat(v27114);
  var unicodeES3IdCont = [768, 846, 864, 866, 1155, 1158, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1611, 1621, 1632, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 2305, 2307, 2364, 2364, 2366, 2381, 2385, 2388, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2562, 2562, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2662, 2673, 
  2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2918, 2927, 2946, 2947, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3174, 3183, 3202, 3203, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3302, 3311, 3330, 3331, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 
  3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3984, 3991, 3993, 4028, 4038, 4038, 4140, 4146, 4150, 4153, 4160, 4169, 4182, 4185, 4969, 4977, 6068, 6099, 6112, 6121, 6160, 6169, 6313, 6313, 8255, 8256, 8400, 8412, 8417, 8417, 12330, 12335, 12441, 12442, 12539, 12539, 64286, 64286, 65056, 65059, 65075, 65076, 65101, 65103, 65296, 
  65305, 65343, 65343, 65381, 65381];
  var v27115 = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 
  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 
  2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 
  3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 
  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6E3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 
  6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455];
  var v27116 = [8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 
  12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 13312, 19893, 19893, 19968, 19968, 40908, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43E3, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 
  43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032, 55203, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 
  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
  var unicodeES5IdStart = v27115.concat(v27116);
  var unicodeES5IdCont = [768, 879, 1155, 1159, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1552, 1562, 1611, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 1984, 1993, 2027, 2035, 2070, 2073, 2075, 2083, 2085, 2087, 2089, 2093, 2137, 2139, 2276, 2302, 2304, 2307, 2362, 2364, 2366, 2383, 2385, 2391, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 
  2561, 2563, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2662, 2673, 2677, 2677, 2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2786, 2787, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2914, 2915, 2918, 2927, 2946, 2946, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3046, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3170, 3171, 3174, 3183, 3202, 3203, 3260, 3260, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 
  3298, 3299, 3302, 3311, 3330, 3331, 3390, 3396, 3398, 3400, 3402, 3405, 3415, 3415, 3426, 3427, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3981, 3991, 3993, 4028, 4038, 4038, 4139, 4158, 4160, 4169, 4182, 4185, 4190, 4192, 4194, 4196, 4199, 4205, 4209, 4212, 
  4226, 4237, 4239, 4253, 4957, 4959, 5906, 5908, 5938, 5940, 5970, 5971, 6002, 6003, 6068, 6099, 6109, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6313, 6313, 6432, 6443, 6448, 6459, 6470, 6479, 6576, 6592, 6600, 6601, 6608, 6617, 6679, 6683, 6741, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6912, 6916, 6964, 6980, 6992, 7001, 7019, 7027, 7040, 7042, 7073, 7085, 7088, 7097, 7142, 7155, 7204, 7223, 7232, 7241, 7248, 7257, 7376, 7378, 7380, 7400, 7405, 7405, 7410, 7412, 7616, 7654, 7676, 7679, 8204, 8205, 
  8255, 8256, 8276, 8276, 8400, 8412, 8417, 8417, 8421, 8432, 11503, 11505, 11647, 11647, 11744, 11775, 12330, 12335, 12441, 12442, 42528, 42537, 42607, 42607, 42612, 42621, 42655, 42655, 42736, 42737, 43010, 43010, 43014, 43014, 43019, 43019, 43043, 43047, 43136, 43137, 43188, 43204, 43216, 43225, 43232, 43249, 43264, 43273, 43302, 43309, 43335, 43347, 43392, 43395, 43443, 43456, 43472, 43481, 43561, 43574, 43587, 43587, 43596, 43597, 43600, 43609, 43643, 43643, 43696, 43696, 43698, 43700, 43703, 
  43704, 43710, 43711, 43713, 43713, 43755, 43759, 43765, 43766, 44003, 44010, 44012, 44013, 44016, 44025, 64286, 64286, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65296, 65305, 65343, 65343];
  TypeScript$$16.LexLookUpUnicodeMap = LexLookUpUnicodeMap;
  TypeScript$$16.LexIsUnicodeDigit = LexIsUnicodeDigit;
  TypeScript$$16.LexIsUnicodeIdStart = LexIsUnicodeIdStart;
  TypeScript$$16.LexInitialize = LexInitialize;
  TypeScript$$16.LexAdjustIndent = LexAdjustIndent;
  TypeScript$$16.LexIsIdentifierStartChar = LexIsIdentifierStartChar;
  TypeScript$$16.LexIsDigit = LexIsDigit;
  TypeScript$$16.LexIsIdentifierChar = LexIsIdentifierChar;
  TypeScript$$16.LexMatchingOpen = LexMatchingOpen;
  var v15934 = TypeScript$$16.NumberScanState;
  var v20727 = !v15934;
  if (v20727) {
    v15934 = TypeScript$$16.NumberScanState = {};
  }
  var v7951 = v15934;
  v600(v7951);
  var NumberScanState = TypeScript$$16.NumberScanState;
  var v15935 = TypeScript$$16.LexState;
  var v20728 = !v15935;
  if (v20728) {
    v15935 = TypeScript$$16.LexState = {};
  }
  var v7952 = v15935;
  v601(v7952);
  var LexState = TypeScript$$16.LexState;
  var v15936 = TypeScript$$16.LexMode;
  var v20729 = !v15936;
  if (v20729) {
    v15936 = TypeScript$$16.LexMode = {};
  }
  var v7953 = v15936;
  v602(v7953);
  var LexMode = TypeScript$$16.LexMode;
  var v15937 = TypeScript$$16.CommentStyle;
  var v20730 = !v15937;
  if (v20730) {
    v15937 = TypeScript$$16.CommentStyle = {};
  }
  var v7954 = v15937;
  v603(v7954);
  var CommentStyle = TypeScript$$16.CommentStyle;
  var StringSourceText = v606();
  TypeScript$$16.StringSourceText = StringSourceText;
  var SourceTextSegment = v609();
  TypeScript$$16.SourceTextSegment = SourceTextSegment;
  var AggerateSourceTextSegment = v612();
  TypeScript$$16.AggerateSourceTextSegment = AggerateSourceTextSegment;
  var ScannerTextStream = v618();
  TypeScript$$16.ScannerTextStream = ScannerTextStream;
  var SavedTokens = v633();
  TypeScript$$16.SavedTokens = SavedTokens;
  var Scanner = v674();
  TypeScript$$16.Scanner = Scanner;
  TypeScript$$16.convertTokToIDName = convertTokToIDName;
  TypeScript$$16.convertTokToID = convertTokToID;
  TypeScript$$16.getLineNumberFromPosition = getLineNumberFromPosition;
  TypeScript$$16.getSourceLineColFromMap = getSourceLineColFromMap;
  TypeScript$$16.getLineColumnFromPosition = getLineColumnFromPosition;
  TypeScript$$16.getPositionFromLineColumn = getPositionFromLineColumn;
  TypeScript$$16.isPrimitiveTypeToken = isPrimitiveTypeToken;
  TypeScript$$16.isModifier = isModifier;
  return;
}
function v599(TypeScript$$15) {
  function v598() {
    function v597(s$$15) {
      var v15938 = this.builder;
      this.builder = v15938 + s$$15;
      var v7955 = this.outfile;
      var v7956 = this.builder;
      v7955.WriteLine(v7956);
      this.builder = "";
      return;
    }
    function v596(s$$14) {
      var v15939 = this.builder;
      this.builder = v15939 + s$$14;
      return;
    }
    function v595() {
      var v20731 = this.builder;
      var v15940 = v20731.length;
      var v7959 = v15940 > 0;
      if (v7959) {
        var v7957 = TypeScript$$15.CompilerDiagnostics;
        var v7958 = this.builder;
        v7957.Alert(v7958);
      }
      var v7960 = this.indentStrings;
      var v7961 = this.indentAmt;
      var indentString$$1 = v7960[v7961];
      var v7965 = indentString$$1 === undefined;
      if (v7965) {
        indentString$$1 = "";
        var i$$52 = 0;
        var v15941 = this.indentAmt;
        var v7962 = i$$52 < v15941;
        for (;v7962;) {
          var v15942 = this.indent1;
          indentString$$1 = indentString$$1 + v15942;
          i$$52++;
          var v15943 = this.indentAmt;
          v7962 = i$$52 < v15943;
        }
        var v7963 = this.indentStrings;
        var v7964 = this.indentAmt;
        v7963[v7964] = indentString$$1;
      }
      var v15944 = this.builder;
      this.builder = v15944 + indentString$$1;
      return;
    }
    function v594() {
      this.indentAmt--;
      return;
    }
    function v593() {
      this.indentAmt++;
      return;
    }
    function PrintContext$$1(outfile$$4, parser$$1) {
      this.outfile = outfile$$4;
      this.parser = parser$$1;
      this.builder = "";
      this.indent1 = "  ";
      this.indentStrings = [];
      this.indentAmt = 0;
      return;
    }
    var v7966 = PrintContext$$1.prototype;
    v7966.increaseIndent = v593;
    var v7967 = PrintContext$$1.prototype;
    v7967.decreaseIndent = v594;
    var v7968 = PrintContext$$1.prototype;
    v7968.startLine = v595;
    var v7969 = PrintContext$$1.prototype;
    v7969.write = v596;
    var v7970 = PrintContext$$1.prototype;
    v7970.writeLine = v597;
    return PrintContext$$1;
  }
  function prePrintAST(ast$$46, parent$$43, walker$$40) {
    var pc = walker$$40.state;
    ast$$46.print(pc);
    pc.increaseIndent();
    return ast$$46;
  }
  function postPrintAST(ast$$47, parent$$44, walker$$41) {
    var pc$$1 = walker$$41.state;
    pc$$1.decreaseIndent();
    return ast$$47;
  }
  var PrintContext = v598();
  TypeScript$$15.PrintContext = PrintContext;
  TypeScript$$15.prePrintAST = prePrintAST;
  TypeScript$$15.postPrintAST = postPrintAST;
  return;
}
function v592(TypeScript$$14) {
  function v591() {
    function v590(sourceText$$2, filename$$2, unitIndex$$2, allowedElements$$4) {
      function v589(message$$15) {
        return _this$$2.reportParseError(message$$15);
      }
      var v15945 = typeof allowedElements$$4;
      var v7972 = v15945 === "undefined";
      if (v7972) {
        var v7971 = TypeScript$$14.AllowedElements;
        allowedElements$$4 = v7971.Global;
      }
      var _this$$2 = this;
      this.ambientModule = false;
      this.topLevel = true;
      this.hasTopLevelImportOrExport = false;
      this.requiresExtendsBlock = false;
      this.fname = filename$$2;
      this.currentUnitIndex = unitIndex$$2;
      this.amdDependencies = [];
      var v7973 = this.scanner;
      v7973.resetComments();
      var v7974 = this.scanner;
      v7974.setErrorHandler(v589);
      var v7975 = this.scanner;
      var v15946 = TypeScript$$14.LexMode;
      var v7976 = v15946.File;
      v7975.setSourceText(sourceText$$2, v7976);
      var v7977 = this.scanner;
      var leftCurlyCount$$5 = v7977.leftCurlyCount;
      var v7978 = this.scanner;
      var rightCurlyCount$$5 = v7978.rightCurlyCount;
      var v7979 = this.scanner;
      var minChar$$28 = v7979.pos;
      var v7980 = this.scanner;
      var v26750 = v7980.scan();
      this.currentToken = v26750;
      this.pushDeclLists();
      var v7981 = TypeScript$$14.ASTList;
      var bod$$3 = new v7981;
      bod$$3.minChar = minChar$$28;
      this.state = ParseState.StartScript;
      var v7982 = TypeScript$$14.isDSTRFile(filename$$2);
      var v15947 = !v7982;
      if (v15947) {
        v7982 = TypeScript$$14.isDTSFile(filename$$2);
      }
      this.parsingDeclareFile = v7982;
      for (;true;) {
        var v20732 = TypeScript$$14.ErrorRecoverySet;
        var v15948 = v20732.EOF;
        var v20733 = TypeScript$$14.ErrorRecoverySet;
        var v15949 = v20733.Func;
        var v7983 = v15948 | v15949;
        var v15950 = TypeScript$$14.Modifiers;
        var v7984 = v15950.None;
        this.parseStatementList(v7983, bod$$3, true, false, allowedElements$$4, v7984);
        var v20734 = this.currentToken;
        var v15951 = v20734.tokenId;
        var v20735 = TypeScript$$14.TokenID;
        var v15952 = v20735.EndOfFile;
        var v7985 = v15951 === v15952;
        if (v7985) {
          break;
        }
        var v7986 = TypeScript$$14.tokenTable;
        var v15953 = this.currentToken;
        var v7987 = v15953.tokenId;
        var badToken = v7986[v7987];
        var v20736 = badToken.text;
        var v15954 = "Unexpected statement block terminator '" + v20736;
        var v7988 = v15954 + "'";
        this.reportParseError(v7988);
        var v7989 = this.scanner;
        var v26751 = v7989.scan();
        this.currentToken = v26751;
      }
      this.state = ParseState.EndScript;
      var v7990 = this.scanner;
      bod$$3.limChar = v7990.pos;
      var topLevelMod = null;
      var v20737 = TypeScript$$14.moduleGenTarget;
      var v23759 = TypeScript$$14.ModuleGenTarget;
      var v20738 = v23759.Local;
      var v15955 = v20737 != v20738;
      if (v15955) {
        v15955 = this.hasTopLevelImportOrExport;
      }
      var v8001 = v15955;
      if (v8001) {
        var correctedFileName = TypeScript$$14.switchToForwardSlashes(filename$$2);
        var v7991 = TypeScript$$14.Identifier;
        var id$$15 = new v7991(correctedFileName);
        var v7992 = TypeScript$$14.ModuleDeclaration;
        var v7993 = this.topVarList();
        var v7994 = this.topScopeList();
        topLevelMod = new v7992(id$$15, bod$$3, v7993, v7994, null);
        var v15956 = topLevelMod.modFlags;
        var v20739 = TypeScript$$14.ModuleFlags;
        var v15957 = v20739.IsDynamic;
        topLevelMod.modFlags = v15956 | v15957;
        var v15958 = topLevelMod.modFlags;
        var v20740 = TypeScript$$14.ModuleFlags;
        var v15959 = v20740.IsWholeFile;
        topLevelMod.modFlags = v15958 | v15959;
        var v15960 = topLevelMod.modFlags;
        var v20741 = TypeScript$$14.ModuleFlags;
        var v15961 = v20741.Exported;
        topLevelMod.modFlags = v15960 | v15961;
        var v7995 = this.parsingDeclareFile;
        if (v7995) {
          var v15962 = topLevelMod.modFlags;
          var v20742 = TypeScript$$14.ModuleFlags;
          var v15963 = v20742.Ambient;
          topLevelMod.modFlags = v15962 | v15963;
        }
        topLevelMod.minChar = minChar$$28;
        var v7996 = this.scanner;
        topLevelMod.limChar = v7996.pos;
        var v7997 = topLevelMod;
        var v26752 = TypeScript$$14.getPrettyName(correctedFileName);
        v7997.prettyName = v26752;
        var v7998 = this.scanner;
        topLevelMod.containsUnicodeChar = v7998.seenUnicodeChar;
        var v7999 = this.scanner;
        topLevelMod.containsUnicodeCharInComment = v7999.seenUnicodeCharInComment;
        topLevelMod.amdDependencies = this.amdDependencies;
        var v8000 = TypeScript$$14.ASTList;
        bod$$3 = new v8000;
        bod$$3.minChar = topLevelMod.minChar;
        bod$$3.limChar = topLevelMod.limChar;
        bod$$3.append(topLevelMod);
      }
      var v8002 = TypeScript$$14.Script;
      var v8003 = this.topVarList();
      var v8004 = this.topScopeList();
      var script$$8 = new v8002(v8003, v8004);
      script$$8.bod = bod$$3;
      this.popDeclLists();
      script$$8.minChar = minChar$$28;
      var v8005 = this.scanner;
      script$$8.limChar = v8005.pos;
      var v8006 = script$$8;
      var v15964 = TypeScript$$14.LocationInfo;
      var v20743 = this.scanner;
      var v15965 = v20743.lineMap;
      var v26753 = new v15964(filename$$2, v15965, unitIndex$$2);
      v8006.locationInfo = v26753;
      var v15966 = this.scanner;
      var v8007 = v15966.leftCurlyCount;
      script$$8.leftCurlyCount = v8007 - leftCurlyCount$$5;
      var v15967 = this.scanner;
      var v8008 = v15967.rightCurlyCount;
      script$$8.rightCurlyCount = v8008 - rightCurlyCount$$5;
      script$$8.isDeclareFile = this.parsingDeclareFile;
      script$$8.topLevelMod = topLevelMod;
      var v8009 = this.scanner;
      script$$8.containsUnicodeChar = v8009.seenUnicodeChar;
      var v8010 = this.scanner;
      script$$8.containsUnicodeCharInComment = v8010.seenUnicodeCharInComment;
      script$$8.requiresExtendsBlock = this.requiresExtendsBlock;
      return script$$8;
    }
    function v588(sourceText$$1, filename$$1, unitIndex$$1) {
      var svGenTarget = TypeScript$$14.moduleGenTarget;
      try {
        var v8011 = TypeScript$$14.ModuleGenTarget;
        TypeScript$$14.moduleGenTarget = v8011.Local;
        var v15968 = TypeScript$$14.AllowedElements;
        var v8012 = v15968.QuickParse;
        var script$$7 = this.parse(sourceText$$1, filename$$1, unitIndex$$1, v8012);
        var v15969 = this.scanner;
        var v8013 = v15969.lexState;
        return new QuickParseResult(script$$7, v8013);
      } finally {
        TypeScript$$14.moduleGenTarget = svGenTarget;
      }
      return;
    }
    function v587(errorRecoverySet$$38, statements$$1, sourceElms, noLeadingCase, allowedElements$$3, parentModifiers$$8) {
      var directivePrologue = sourceElms;
      var v8014 = this.scanner;
      statements$$1.minChar = v8014.startPos;
      var v8015 = this.scanner;
      var limChar$$8 = v8015.pos;
      var v20744 = TypeScript$$14.AllowedElements;
      var v15970 = v20744.ModuleDeclarations;
      var v8016 = allowedElements$$3 & v15970;
      var v15971 = TypeScript$$14.AllowedElements;
      var v8017 = v15971.None;
      var innerStmts = v8016 == v8017;
      var v20745 = TypeScript$$14.AllowedElements;
      var v15972 = v20745.ClassDeclarations;
      var v8018 = allowedElements$$3 & v15972;
      var v15973 = TypeScript$$14.AllowedElements;
      var v8019 = v15973.None;
      var classNope = v8018 == v8019;
      var v23760 = TypeScript$$14.ErrorRecoverySet;
      var v20746 = v23760.TypeScriptS;
      var v23761 = TypeScript$$14.ErrorRecoverySet;
      var v20747 = v23761.RCurly;
      var v15974 = v20746 | v20747;
      errorRecoverySet$$38 = errorRecoverySet$$38 | v15974;
      this.state = ParseState.StartStatementList;
      var oldStrictMode = this.strictMode;
      this.nestingLevel++;
      for (;;) {
        var v26169 = this.currentToken;
        var v25888 = v26169.tokenId;
        var v26170 = TypeScript$$14.TokenID;
        var v25889 = v26170.CloseBrace;
        var v25227 = v25888 == v25889;
        var v25891 = !v25227;
        if (v25891) {
          var v25890 = noLeadingCase;
          if (v25890) {
            var v26372 = this.currentToken;
            var v26303 = v26372.tokenId;
            var v26373 = TypeScript$$14.TokenID;
            var v26304 = v26373.Case;
            var v26171 = v26303 == v26304;
            var v26307 = !v26171;
            if (v26307) {
              var v26374 = this.currentToken;
              var v26305 = v26374.tokenId;
              var v26375 = TypeScript$$14.TokenID;
              var v26306 = v26375.Default;
              v26171 = v26305 == v26306;
            }
            v25890 = v26171;
          }
          v25227 = v25890;
        }
        var v23762 = v25227;
        var v25229 = !v23762;
        if (v25229) {
          var v25228 = innerStmts;
          if (v25228) {
            var v26172 = this.currentToken;
            var v25892 = v26172.tokenId;
            var v26173 = TypeScript$$14.TokenID;
            var v25893 = v26173.Export;
            v25228 = v25892 == v25893;
          }
          v23762 = v25228;
        }
        var v20748 = v23762;
        var v23764 = !v20748;
        if (v23764) {
          var v23763 = classNope;
          if (v23763) {
            var v25894 = this.currentToken;
            var v25230 = v25894.tokenId;
            var v25895 = TypeScript$$14.TokenID;
            var v25231 = v25895.Class;
            v23763 = v25230 == v25231;
          }
          v20748 = v23763;
        }
        var v15975 = v20748;
        var v20751 = !v15975;
        if (v20751) {
          var v23765 = this.currentToken;
          var v20749 = v23765.tokenId;
          var v23766 = TypeScript$$14.TokenID;
          var v20750 = v23766.EndOfFile;
          v15975 = v20749 == v20750;
        }
        var v8021 = v15975;
        if (v8021) {
          this.state = ParseState.EndStmtList;
          statements$$1.limChar = limChar$$8;
          var v20752 = statements$$1.members;
          var v15976 = v20752.length;
          var v8020 = v15976 == 0;
          if (v8020) {
            var v26754 = this.parseComments();
            statements$$1.preComments = v26754;
          } else {
            var v26755 = this.parseComments();
            statements$$1.postComments = v26755;
          }
          this.strictMode = oldStrictMode;
          this.nestingLevel--;
          return;
        }
        var v26174 = TypeScript$$14.ErrorRecoverySet;
        var v25896 = v26174.Else;
        var v26175 = TypeScript$$14.ErrorRecoverySet;
        var v25897 = v26175.RParen;
        var v25232 = v25896 | v25897;
        var v25898 = TypeScript$$14.ErrorRecoverySet;
        var v25233 = v25898.Catch;
        var v23767 = v25232 | v25233;
        var v25234 = TypeScript$$14.ErrorRecoverySet;
        var v23768 = v25234.Colon;
        var v20753 = v23767 | v23768;
        var v15977 = ~v20753;
        var v8022 = errorRecoverySet$$38 & v15977;
        var stmt$$4 = this.parseStatement(v8022, allowedElements$$3, parentModifiers$$8);
        if (stmt$$4) {
          var v8023 = stmt$$4.postComments;
          var v20754 = this.scanner;
          var v15978 = v20754.prevLine;
          var v8024 = this.parseCommentsForLine(v15978);
          var v26756 = this.combineComments(v8023, v8024);
          stmt$$4.postComments = v26756;
          statements$$1.append(stmt$$4);
          limChar$$8 = stmt$$4.limChar;
          if (directivePrologue) {
            var v15979 = stmt$$4.nodeType;
            var v20755 = TypeScript$$14.NodeType;
            var v15980 = v20755.QString;
            var v8026 = v15979 == v15980;
            if (v8026) {
              var qstring = stmt$$4;
              var v15981 = qstring.text;
              var v8025 = v15981 == '"use strict"';
              if (v8025) {
                var v15982 = statements$$1.flags;
                var v20756 = TypeScript$$14.ASTFlags;
                var v15983 = v20756.StrictMode;
                statements$$1.flags = v15982 | v15983;
                this.strictMode = true;
              } else {
                directivePrologue = false;
              }
            } else {
              directivePrologue = false;
            }
          }
        }
      }
      return;
    }
    function v586(ast$$45) {
      var nt = ast$$45.nodeType;
      var v26376 = TypeScript$$14.NodeType;
      var v26308 = v26376.ClassDeclaration;
      var v26176 = nt == v26308;
      var v26310 = !v26176;
      if (v26310) {
        var v26377 = TypeScript$$14.NodeType;
        var v26309 = v26377.ImportDeclaration;
        v26176 = nt == v26309;
      }
      var v25899 = v26176;
      var v26178 = !v25899;
      if (v26178) {
        var v26311 = TypeScript$$14.NodeType;
        var v26177 = v26311.InterfaceDeclaration;
        v25899 = nt == v26177;
      }
      var v25235 = v25899;
      var v25901 = !v25235;
      if (v25901) {
        var v26179 = TypeScript$$14.NodeType;
        var v25900 = v26179.ModuleDeclaration;
        v25235 = nt == v25900;
      }
      var v23769 = v25235;
      var v25237 = !v23769;
      if (v25237) {
        var v25902 = TypeScript$$14.NodeType;
        var v25236 = v25902.Empty;
        v23769 = nt == v25236;
      }
      var v20757 = v23769;
      var v23771 = !v20757;
      if (v23771) {
        var v25238 = TypeScript$$14.NodeType;
        var v23770 = v25238.VarDecl;
        v20757 = nt == v23770;
      }
      var v15984 = v20757;
      var v20759 = !v15984;
      if (v20759) {
        var v25239 = TypeScript$$14.NodeType;
        var v23772 = v25239.Block;
        var v20758 = nt == v23772;
        if (v20758) {
          var v23773 = ast$$45.isStatementBlock;
          v20758 = !v23773;
        }
        v15984 = v20758;
      }
      var v8027 = v15984;
      var v15986 = !v8027;
      if (v15986) {
        var v23774 = TypeScript$$14.NodeType;
        var v20760 = v23774.FuncDecl;
        var v15985 = nt == v20760;
        if (v15985) {
          v15985 = ast$$45.isMethod();
        }
        v8027 = v15985;
      }
      return v8027;
    }
    function v585(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7) {
      function isAmbient$$3() {
        var v20761 = TypeScript$$14.Modifiers;
        var v15987 = v20761.Ambient;
        var v8028 = TypeScript$$14.hasFlag(modifiers$$12, v15987);
        var v15989 = !v8028;
        if (v15989) {
          var v20762 = TypeScript$$14.Modifiers;
          var v15988 = v20762.Ambient;
          v8028 = TypeScript$$14.hasFlag(parentModifiers$$7, v15988);
        }
        return v8028;
      }
      function mayNotBeExported() {
        var v20763 = TypeScript$$14.Modifiers;
        var v15990 = v20763.Exported;
        var v8029 = TypeScript$$14.hasFlag(modifiers$$12, v15990);
        if (v8029) {
          this.reportError("Statement may not be exported");
        }
        return;
      }
      var ast$$44 = null;
      var labelList$$1 = null;
      var astList = null;
      var temp$$15;
      var v8030 = TypeScript$$14.Modifiers;
      var modifiers$$12 = v8030.None;
      var v8031 = this.scanner;
      var minChar$$27 = v8031.startPos;
      var forInOk = false;
      var needTerminator = false;
      var fnOrVar = null;
      var preComments$$8 = this.parseComments();
      this.state = ParseState.StartStatement;
      for (;;) {
        var v15991 = this.currentToken;
        var v8347 = v15991.tokenId;
        switch(v8347) {
          case TypeScript$$14.TokenID.EndOfFile:
            var v8032 = TypeScript$$14.AST;
            var v15992 = TypeScript$$14.NodeType;
            var v8033 = v15992.Error;
            ast$$44 = new v8032(v8033);
            ast$$44.minChar = minChar$$27;
            var v8034 = this.scanner;
            ast$$44.limChar = v8034.pos;
            break;
          case TypeScript$$14.TokenID.Function:
            var v20764 = this.parsingDeclareFile;
            var v23775 = !v20764;
            if (v23775) {
              v20764 = isAmbient$$3();
            }
            var v15993 = v20764;
            var v20765 = !v15993;
            if (v20765) {
              v15993 = this.ambientModule;
            }
            var v8044 = v15993;
            if (v8044) {
              var v8035 = this.scanner;
              var v26757 = v8035.scan();
              this.currentToken = v26757;
              var v20766 = TypeScript$$14.ErrorRecoverySet;
              var v15994 = v20766.SColon;
              var v8036 = errorRecoverySet$$37 | v15994;
              fnOrVar = this.parsePropertyDeclaration(v8036, modifiers$$12, true, false);
              var v15995 = fnOrVar.nodeType;
              var v20767 = TypeScript$$14.NodeType;
              var v15996 = v20767.VarDecl;
              var v8038 = v15995 == v15996;
              if (v8038) {
                this.reportParseError("function keyword can only introduce function declaration");
              } else {
                var v20768 = fnOrVar.nodeType;
                var v23776 = TypeScript$$14.NodeType;
                var v20769 = v23776.FuncDecl;
                var v15997 = v20768 == v20769;
                if (v15997) {
                  fnOrVar.fncFlags;
                  var v23777 = TypeScript$$14.FncFlags;
                  v15997 = v23777.IsFatArrowFunction;
                }
                var v8037 = v15997;
                if (v8037) {
                  needTerminator = true;
                }
              }
              ast$$44 = fnOrVar;
              var v15998 = this.parsingDeclareFile;
              var v20771 = !v15998;
              if (v20771) {
                var v20770 = this.ambientModule;
                if (v20770) {
                  var v23778 = ast$$44.nodeType;
                  var v25240 = TypeScript$$14.NodeType;
                  var v23779 = v25240.FuncDecl;
                  v20770 = v23778 == v23779;
                }
                v15998 = v20770;
              }
              var v8039 = v15998;
              if (v8039) {
                var v15999 = ast$$44.fncFlags;
                var v20772 = TypeScript$$14.FncFlags;
                var v16000 = v20772.Exported;
                ast$$44.fncFlags = v15999 | v16000;
              }
            } else {
              var v8040 = isAmbient$$3();
              ast$$44 = this.parseFncDecl(errorRecoverySet$$37, true, false, false, null, false, false, v8040, modifiers$$12, null, true);
              var v16001 = ast$$44.fncFlags;
              var v20773 = TypeScript$$14.FncFlags;
              var v16002 = v20773.IsFatArrowFunction;
              var v8041 = TypeScript$$14.hasFlag(v16001, v16002);
              if (v8041) {
                needTerminator = true;
              }
              var v8042 = this.ambientModule;
              if (v8042) {
                this.reportParseError("function declaration not permitted within ambient module");
              }
              var v20774 = TypeScript$$14.Modifiers;
              var v16003 = v20774.Exported;
              var v8043 = TypeScript$$14.hasFlag(modifiers$$12, v16003);
              if (v8043) {
                var v16004 = ast$$44.fncFlags;
                var v20775 = TypeScript$$14.FncFlags;
                var v16005 = v20775.Exported;
                ast$$44.fncFlags = v16004 | v16005;
              }
            }
            break;
          case TypeScript$$14.TokenID.Module:
            var v23780 = TypeScript$$14.AllowedElements;
            var v20776 = v23780.ModuleDeclarations;
            var v16006 = allowedElements$$2 & v20776;
            var v20777 = TypeScript$$14.AllowedElements;
            var v16007 = v20777.None;
            var v8049 = v16006 == v16007;
            if (v8049) {
              this.reportParseError("module not allowed in this context");
              var v8045 = this.scanner;
              var v26758 = v8045.scan();
              this.currentToken = v26758;
              var v8046 = TypeScript$$14.AST;
              var v16008 = TypeScript$$14.NodeType;
              var v8047 = v16008.Error;
              ast$$44 = new v8046(v8047);
              ast$$44.minChar = minChar$$27;
              var v8048 = ast$$44;
              var v16009 = this.scanner;
              var v26759 = v16009.lastTokenLimChar();
              v8048.limChar = v26759;
            } else {
              ast$$44 = this.parseModuleDecl(errorRecoverySet$$37, modifiers$$12, preComments$$8);
              preComments$$8 = null;
            }
            break;
          case TypeScript$$14.TokenID.Import:
            var v23781 = TypeScript$$14.AllowedElements;
            var v20778 = v23781.ModuleDeclarations;
            var v16010 = allowedElements$$2 & v20778;
            var v20779 = TypeScript$$14.AllowedElements;
            var v16011 = v20779.None;
            var v8055 = v16010 == v16011;
            if (v8055) {
              this.reportParseError("module not allowed in this context");
              var v8050 = this.scanner;
              var v26760 = v8050.scan();
              this.currentToken = v26760;
              var v8051 = TypeScript$$14.AST;
              var v16012 = TypeScript$$14.NodeType;
              var v8052 = v16012.Error;
              ast$$44 = new v8051(v8052);
              ast$$44.minChar = minChar$$27;
              var v8053 = ast$$44;
              var v16013 = this.scanner;
              var v26761 = v16013.lastTokenLimChar();
              v8053.limChar = v26761;
            } else {
              var v20780 = TypeScript$$14.Modifiers;
              var v16014 = v20780.Exported;
              var v8054 = TypeScript$$14.hasFlag(modifiers$$12, v16014);
              if (v8054) {
                this.reportParseError("export keyword not permitted on import declaration");
              }
              ast$$44 = this.parseImportDeclaration(errorRecoverySet$$37, modifiers$$12);
              needTerminator = true;
            }
            break;
          case TypeScript$$14.TokenID.Export:
            var v23782 = TypeScript$$14.AllowedElements;
            var v20781 = v23782.ModuleDeclarations;
            var v16015 = allowedElements$$2 & v20781;
            var v20782 = TypeScript$$14.AllowedElements;
            var v16016 = v20782.None;
            var v8060 = v16015 == v16016;
            if (v8060) {
              this.reportParseError("'export' statements are only allowed at the global and module levels");
              var v8056 = this.scanner;
              var v26762 = v8056.scan();
              this.currentToken = v26762;
              var v8057 = TypeScript$$14.AST;
              var v16017 = TypeScript$$14.NodeType;
              var v8058 = v16017.Error;
              ast$$44 = new v8057(v8058);
              ast$$44.minChar = minChar$$27;
              var v8059 = ast$$44;
              var v16018 = this.scanner;
              var v26763 = v16018.lastTokenLimChar();
              v8059.limChar = v26763;
            }
            var v8061 = this.topLevel;
            if (v8061) {
              this.hasTopLevelImportOrExport = true;
            }
            var v20783 = TypeScript$$14.Modifiers;
            var v16019 = v20783.Exported;
            modifiers$$12 = modifiers$$12 | v16019;
            var v8062 = this.scanner;
            var v26764 = v8062.scan();
            this.currentToken = v26764;
            break;
          case TypeScript$$14.TokenID.Private:
            var v20784 = TypeScript$$14.Modifiers;
            var v16020 = v20784.Private;
            modifiers$$12 = modifiers$$12 | v16020;
            var v8063 = this.scanner;
            var v26765 = v8063.scan();
            this.currentToken = v26765;
            var v8090 = this.parsingClassConstructorDefinition;
            if (v8090) {
              var v16021 = this.inferPropertiesFromThisAssignment;
              var v8064 = !v16021;
              if (v8064) {
                this.reportParseError("Property declarations are not permitted within constructor bodies");
              }
              var v8065 = this.scanner;
              minChar$$27 = v8065.pos;
              var v16022 = this.inferPropertiesFromThisAssignment;
              if (v16022) {
                var v25241 = this.currentToken;
                var v23783 = v25241.tokenId;
                var v25242 = TypeScript$$14.TokenID;
                var v23784 = v25242.This;
                var v20785 = v23783 != v23784;
                var v23787 = !v20785;
                if (v23787) {
                  var v25903 = this.scanner;
                  var v26766 = v25903.scan();
                  var v25243 = this.currentToken = v26766;
                  var v23785 = v25243.tokenId;
                  var v25244 = TypeScript$$14.TokenID;
                  var v23786 = v25244.Dot;
                  v20785 = v23785 != v23786;
                }
                v16022 = v20785;
              }
              var v8077 = v16022;
              if (v8077) {
                this.reportParseError("Expected 'this.' for property declaration");
                var v8066 = this.scanner;
                var v26767 = v8066.scan();
                this.currentToken = v26767;
                var v8067 = TypeScript$$14.AST;
                var v16023 = TypeScript$$14.NodeType;
                var v8068 = v16023.Error;
                ast$$44 = new v8067(v8068);
                ast$$44.minChar = minChar$$27;
                var v8069 = ast$$44;
                var v16024 = this.scanner;
                var v26768 = v16024.lastTokenLimChar();
                v8069.limChar = v26768;
              } else {
                var v8070 = this.scanner;
                var v26769 = v8070.scan();
                this.currentToken = v26769;
                var v8071 = TypeScript$$14.Identifier;
                var v8072 = this.currentToken;
                var id$$14 = v8071.fromToken(v8072);
                var v8073 = this.scanner;
                id$$14.minChar = v8073.startPos;
                var v8074 = this.scanner;
                id$$14.limChar = v8074.pos;
                var v8075 = this.scanner;
                var v26770 = v8075.scan();
                this.currentToken = v26770;
                var v8076 = this.parsingClassConstructorDefinition;
                ast$$44 = this.parseClassMemberVariableDeclaration(id$$14, minChar$$27, v8076, errorRecoverySet$$37, modifiers$$12);
              }
            } else {
              var v20786 = this.currentToken;
              var v16025 = v20786.tokenId;
              var v20787 = TypeScript$$14.TokenID;
              var v16026 = v20787.Interface;
              var v8089 = v16025 != v16026;
              if (v8089) {
                var v20788 = this.currentToken;
                var v16027 = v20788.tokenId;
                var v20789 = TypeScript$$14.TokenID;
                var v16028 = v20789.Get;
                var v8085 = v16027 == v16028;
                if (v8085) {
                  this.prevIDTok = this.currentToken;
                  var v8078 = this.scanner;
                  var v26771 = v8078.scan();
                  this.currentToken = v26771;
                  var v16029 = TypeScript$$14.codeGenTarget;
                  var v20790 = TypeScript$$14.CodeGenTarget;
                  var v16030 = v20790.ES5;
                  var v8079 = v16029 < v16030;
                  if (v8079) {
                    this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                  }
                  var v23788 = this.currentToken;
                  var v20791 = v23788.tokenId;
                  var v23789 = TypeScript$$14.TokenID;
                  var v20792 = v23789.Identifier;
                  var v16031 = v20791 == v20792;
                  var v20795 = !v16031;
                  if (v20795) {
                    var v20793 = this.currentToken;
                    var v20794 = this.strictMode;
                    v16031 = TypeScript$$14.convertTokToID(v20793, v20794);
                  }
                  var v8080 = v16031;
                  if (v8080) {
                    var v20796 = TypeScript$$14.Modifiers;
                    var v16032 = v20796.Getter;
                    modifiers$$12 = modifiers$$12 | v16032;
                    this.prevIDTok = null;
                  }
                } else {
                  var v20797 = this.currentToken;
                  var v16033 = v20797.tokenId;
                  var v20798 = TypeScript$$14.TokenID;
                  var v16034 = v20798.Set;
                  var v8084 = v16033 == v16034;
                  if (v8084) {
                    this.prevIDTok = this.currentToken;
                    var v8081 = this.scanner;
                    var v26772 = v8081.scan();
                    this.currentToken = v26772;
                    var v16035 = TypeScript$$14.codeGenTarget;
                    var v20799 = TypeScript$$14.CodeGenTarget;
                    var v16036 = v20799.ES5;
                    var v8082 = v16035 < v16036;
                    if (v8082) {
                      this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                    }
                    var v23790 = this.currentToken;
                    var v20800 = v23790.tokenId;
                    var v23791 = TypeScript$$14.TokenID;
                    var v20801 = v23791.Identifier;
                    var v16037 = v20800 == v20801;
                    var v20804 = !v16037;
                    if (v20804) {
                      var v20802 = this.currentToken;
                      var v20803 = this.strictMode;
                      v16037 = TypeScript$$14.convertTokToID(v20802, v20803);
                    }
                    var v8083 = v16037;
                    if (v8083) {
                      var v20805 = TypeScript$$14.Modifiers;
                      var v16038 = v20805.Setter;
                      modifiers$$12 = modifiers$$12 | v16038;
                      this.prevIDTok = null;
                    }
                  }
                }
                var v20806 = TypeScript$$14.ErrorRecoverySet;
                var v16039 = v20806.SColon;
                var v8086 = errorRecoverySet$$37 | v16039;
                var v8087 = isAmbient$$3();
                fnOrVar = this.parsePropertyDeclaration(v8086, modifiers$$12, v8087, false);
                var v20807 = fnOrVar.nodeType;
                var v23792 = TypeScript$$14.NodeType;
                var v20808 = v23792.VarDecl;
                var v16040 = v20807 == v20808;
                var v20810 = !v16040;
                if (v20810) {
                  var v23793 = fnOrVar.nodeType;
                  var v25245 = TypeScript$$14.NodeType;
                  var v23794 = v25245.FuncDecl;
                  var v20809 = v23793 == v23794;
                  if (v20809) {
                    var v23795 = fnOrVar.fncFlags;
                    var v25246 = TypeScript$$14.FncFlags;
                    var v23796 = v25246.IsFatArrowFunction;
                    v20809 = TypeScript$$14.hasFlag(v23795, v23796);
                  }
                  v16040 = v20809;
                }
                var v8088 = v16040;
                if (v8088) {
                  needTerminator = true;
                }
                ast$$44 = fnOrVar;
              }
            }
            break;
          case TypeScript$$14.TokenID.Public:
            var v8123 = this.parsingClassConstructorDefinition;
            if (v8123) {
              var v16041 = this.inferPropertiesFromThisAssignment;
              var v8091 = !v16041;
              if (v8091) {
                this.reportParseError("Property declarations are not permitted within constructor bodies");
              }
              var v8092 = this.scanner;
              var v26773 = v8092.scan();
              this.currentToken = v26773;
              var v8093 = this.scanner;
              minChar$$27 = v8093.pos;
              var v20811 = TypeScript$$14.Modifiers;
              var v16042 = v20811.Public;
              modifiers$$12 = modifiers$$12 | v16042;
              var v16043 = this.inferPropertiesFromThisAssignment;
              if (v16043) {
                var v25247 = this.currentToken;
                var v23797 = v25247.tokenId;
                var v25248 = TypeScript$$14.TokenID;
                var v23798 = v25248.This;
                var v20812 = v23797 != v23798;
                var v23801 = !v20812;
                if (v23801) {
                  var v25904 = this.scanner;
                  var v26774 = v25904.scan();
                  var v25249 = this.currentToken = v26774;
                  var v23799 = v25249.tokenId;
                  var v25250 = TypeScript$$14.TokenID;
                  var v23800 = v25250.Dot;
                  v20812 = v23799 != v23800;
                }
                v16043 = v20812;
              }
              var v8105 = v16043;
              if (v8105) {
                this.reportParseError("Expected 'this.' for property declaration");
                var v8094 = this.scanner;
                var v26775 = v8094.scan();
                this.currentToken = v26775;
                var v8095 = TypeScript$$14.AST;
                var v16044 = TypeScript$$14.NodeType;
                var v8096 = v16044.Error;
                ast$$44 = new v8095(v8096);
                ast$$44.minChar = minChar$$27;
                var v8097 = ast$$44;
                var v16045 = this.scanner;
                var v26776 = v16045.lastTokenLimChar();
                v8097.limChar = v26776;
              } else {
                var v8098 = this.scanner;
                var v26777 = v8098.scan();
                this.currentToken = v26777;
                var v8099 = TypeScript$$14.Identifier;
                var v8100 = this.currentToken;
                id$$14 = v8099.fromToken(v8100);
                var v8101 = this.scanner;
                id$$14.minChar = v8101.startPos;
                var v8102 = this.scanner;
                id$$14.limChar = v8102.pos;
                var v8103 = this.scanner;
                var v26778 = v8103.scan();
                this.currentToken = v26778;
                var v8104 = this.parsingClassConstructorDefinition;
                ast$$44 = this.parseClassMemberVariableDeclaration(id$$14, minChar$$27, v8104, errorRecoverySet$$37, modifiers$$12);
              }
            } else {
              var v23802 = TypeScript$$14.AllowedElements;
              var v20813 = v23802.Properties;
              var v16046 = allowedElements$$2 & v20813;
              var v20814 = TypeScript$$14.AllowedElements;
              var v16047 = v20814.None;
              var v8122 = v16046 == v16047;
              if (v8122) {
                this.reportParseError("'property' statements are only allowed within classes");
                var v8106 = this.scanner;
                var v26779 = v8106.scan();
                this.currentToken = v26779;
                var v8107 = TypeScript$$14.AST;
                var v16048 = TypeScript$$14.NodeType;
                var v8108 = v16048.Error;
                ast$$44 = new v8107(v8108);
                ast$$44.minChar = minChar$$27;
                var v8109 = ast$$44;
                var v16049 = this.scanner;
                var v26780 = v16049.lastTokenLimChar();
                v8109.limChar = v26780;
              } else {
                var v20815 = TypeScript$$14.Modifiers;
                var v16050 = v20815.Public;
                modifiers$$12 = modifiers$$12 | v16050;
                var v8110 = this.scanner;
                var v26781 = v8110.scan();
                this.currentToken = v26781;
                var v20816 = this.currentToken;
                var v16051 = v20816.tokenId;
                var v20817 = TypeScript$$14.TokenID;
                var v16052 = v20817.Get;
                var v8118 = v16051 == v16052;
                if (v8118) {
                  this.prevIDTok = this.currentToken;
                  var v8111 = this.scanner;
                  var v26782 = v8111.scan();
                  this.currentToken = v26782;
                  var v16053 = TypeScript$$14.codeGenTarget;
                  var v20818 = TypeScript$$14.CodeGenTarget;
                  var v16054 = v20818.ES5;
                  var v8112 = v16053 < v16054;
                  if (v8112) {
                    this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                  }
                  var v23803 = this.currentToken;
                  var v20819 = v23803.tokenId;
                  var v23804 = TypeScript$$14.TokenID;
                  var v20820 = v23804.Identifier;
                  var v16055 = v20819 == v20820;
                  var v20823 = !v16055;
                  if (v20823) {
                    var v20821 = this.currentToken;
                    var v20822 = this.strictMode;
                    v16055 = TypeScript$$14.convertTokToID(v20821, v20822);
                  }
                  var v8113 = v16055;
                  if (v8113) {
                    var v20824 = TypeScript$$14.Modifiers;
                    var v16056 = v20824.Getter;
                    modifiers$$12 = modifiers$$12 | v16056;
                    this.prevIDTok = null;
                  }
                } else {
                  var v20825 = this.currentToken;
                  var v16057 = v20825.tokenId;
                  var v20826 = TypeScript$$14.TokenID;
                  var v16058 = v20826.Set;
                  var v8117 = v16057 == v16058;
                  if (v8117) {
                    this.prevIDTok = this.currentToken;
                    var v8114 = this.scanner;
                    var v26783 = v8114.scan();
                    this.currentToken = v26783;
                    var v16059 = TypeScript$$14.codeGenTarget;
                    var v20827 = TypeScript$$14.CodeGenTarget;
                    var v16060 = v20827.ES5;
                    var v8115 = v16059 < v16060;
                    if (v8115) {
                      this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                    }
                    var v23805 = this.currentToken;
                    var v20828 = v23805.tokenId;
                    var v23806 = TypeScript$$14.TokenID;
                    var v20829 = v23806.Identifier;
                    var v16061 = v20828 == v20829;
                    var v20832 = !v16061;
                    if (v20832) {
                      var v20830 = this.currentToken;
                      var v20831 = this.strictMode;
                      v16061 = TypeScript$$14.convertTokToID(v20830, v20831);
                    }
                    var v8116 = v16061;
                    if (v8116) {
                      var v20833 = TypeScript$$14.Modifiers;
                      var v16062 = v20833.Setter;
                      modifiers$$12 = modifiers$$12 | v16062;
                      this.prevIDTok = null;
                    }
                  }
                }
                var v20834 = TypeScript$$14.ErrorRecoverySet;
                var v16063 = v20834.SColon;
                var v8119 = errorRecoverySet$$37 | v16063;
                var v8120 = isAmbient$$3();
                fnOrVar = this.parsePropertyDeclaration(v8119, modifiers$$12, v8120, false);
                var v20835 = fnOrVar.nodeType;
                var v23807 = TypeScript$$14.NodeType;
                var v20836 = v23807.VarDecl;
                var v16064 = v20835 == v20836;
                var v20838 = !v16064;
                if (v20838) {
                  var v23808 = fnOrVar.nodeType;
                  var v25251 = TypeScript$$14.NodeType;
                  var v23809 = v25251.FuncDecl;
                  var v20837 = v23808 == v23809;
                  if (v20837) {
                    var v23810 = fnOrVar.fncFlags;
                    var v25252 = TypeScript$$14.FncFlags;
                    var v23811 = v25252.IsFatArrowFunction;
                    v20837 = TypeScript$$14.hasFlag(v23810, v23811);
                  }
                  v16064 = v20837;
                }
                var v8121 = v16064;
                if (v8121) {
                  needTerminator = true;
                }
                ast$$44 = fnOrVar;
              }
            }
            break;
          case TypeScript$$14.TokenID.Declare:
            var v23812 = TypeScript$$14.AllowedElements;
            var v20839 = v23812.AmbientDeclarations;
            var v16065 = allowedElements$$2 & v20839;
            var v8124 = !v16065;
            if (v8124) {
              this.reportParseError("Ambient declarations are only allowed at the top-level or module scopes");
            }
            var v20840 = this.parsingDeclareFile;
            var v16066 = !v20840;
            if (v16066) {
              var v23813 = TypeScript$$14.Modifiers;
              var v20841 = v23813.Ambient;
              v16066 = TypeScript$$14.hasFlag(parentModifiers$$7, v20841);
            }
            var v8125 = v16066;
            if (v8125) {
              this.reportParseError("Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)");
            }
            var v20842 = TypeScript$$14.Modifiers;
            var v16067 = v20842.Ambient;
            modifiers$$12 = modifiers$$12 | v16067;
            var v8126 = this.scanner;
            var v26784 = v8126.scan();
            this.currentToken = v26784;
            break;
          case TypeScript$$14.TokenID.Class:
            var v23814 = TypeScript$$14.AllowedElements;
            var v20843 = v23814.ClassDeclarations;
            var v16068 = allowedElements$$2 & v20843;
            var v20844 = TypeScript$$14.AllowedElements;
            var v16069 = v20844.None;
            var v8131 = v16068 == v16069;
            if (v8131) {
              this.reportParseError("class not allowed in this context");
              var v8127 = this.scanner;
              var v26785 = v8127.scan();
              this.currentToken = v26785;
              var v8128 = TypeScript$$14.AST;
              var v16070 = TypeScript$$14.NodeType;
              var v8129 = v16070.Error;
              ast$$44 = new v8128(v8129);
              ast$$44.minChar = minChar$$27;
              var v8130 = ast$$44;
              var v16071 = this.scanner;
              var v26786 = v16071.lastTokenLimChar();
              v8130.limChar = v26786;
            } else {
              ast$$44 = this.parseClassDecl(errorRecoverySet$$37, minChar$$27, modifiers$$12);
            }
            break;
          case TypeScript$$14.TokenID.Interface:
            var v23815 = TypeScript$$14.AllowedElements;
            var v20845 = v23815.InterfaceDeclarations;
            var v16072 = allowedElements$$2 & v20845;
            var v20846 = TypeScript$$14.AllowedElements;
            var v16073 = v20846.None;
            var v8136 = v16072 == v16073;
            if (v8136) {
              this.reportParseError("interface not allowed in this context");
              var v8132 = this.scanner;
              var v26787 = v8132.scan();
              this.currentToken = v26787;
              var v8133 = TypeScript$$14.AST;
              var v16074 = TypeScript$$14.NodeType;
              var v8134 = v16074.Error;
              ast$$44 = new v8133(v8134);
              ast$$44.minChar = minChar$$27;
              var v8135 = ast$$44;
              var v16075 = this.scanner;
              var v26788 = v16075.lastTokenLimChar();
              v8135.limChar = v26788;
            } else {
              ast$$44 = this.parseInterfaceDecl(errorRecoverySet$$37, modifiers$$12);
            }
            break;
          case TypeScript$$14.TokenID.Var:
            var v20847 = TypeScript$$14.ErrorRecoverySet;
            var v16076 = v20847.StmtStart;
            var v8137 = errorRecoverySet$$37 | v16076;
            var declAst = this.parseVariableDeclaration(v8137, modifiers$$12, true, false);
            var v16077 = declAst.nodeType;
            var v20848 = TypeScript$$14.NodeType;
            var v16078 = v20848.VarDecl;
            var v8139 = v16077 == v16078;
            if (v8139) {
              ast$$44 = declAst;
            } else {
              var v8138 = TypeScript$$14.Block;
              ast$$44 = new v8138(declAst, false);
            }
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Static:
            var v16079 = this.currentClassDecl;
            var v8140 = v16079 == null;
            if (v8140) {
              this.reportParseError("Statics may only be class members");
            }
            mayNotBeExported();
            var v20849 = TypeScript$$14.Modifiers;
            var v16080 = v20849.Public;
            modifiers$$12 = modifiers$$12 | v16080;
            var v8141 = this.scanner;
            var v26789 = v8141.scan();
            this.currentToken = v26789;
            var v20850 = this.currentToken;
            var v16081 = v20850.tokenId;
            var v20851 = TypeScript$$14.TokenID;
            var v16082 = v20851.Get;
            var v8149 = v16081 == v16082;
            if (v8149) {
              this.prevIDTok = this.currentToken;
              var v8142 = this.scanner;
              var v26790 = v8142.scan();
              this.currentToken = v26790;
              var v16083 = TypeScript$$14.codeGenTarget;
              var v20852 = TypeScript$$14.CodeGenTarget;
              var v16084 = v20852.ES5;
              var v8143 = v16083 < v16084;
              if (v8143) {
                this.reportParseError("Property accessors are only available when targeting ES5 or greater");
              }
              var v23816 = this.currentToken;
              var v20853 = v23816.tokenId;
              var v23817 = TypeScript$$14.TokenID;
              var v20854 = v23817.Identifier;
              var v16085 = v20853 == v20854;
              var v20857 = !v16085;
              if (v20857) {
                var v20855 = this.currentToken;
                var v20856 = this.strictMode;
                v16085 = TypeScript$$14.convertTokToID(v20855, v20856);
              }
              var v8144 = v16085;
              if (v8144) {
                var v20858 = TypeScript$$14.Modifiers;
                var v16086 = v20858.Getter;
                modifiers$$12 = modifiers$$12 | v16086;
                this.prevIDTok = null;
              }
            } else {
              var v20859 = this.currentToken;
              var v16087 = v20859.tokenId;
              var v20860 = TypeScript$$14.TokenID;
              var v16088 = v20860.Set;
              var v8148 = v16087 == v16088;
              if (v8148) {
                var v8145 = this.scanner;
                var v26791 = v8145.scan();
                this.currentToken = v26791;
                var v16089 = TypeScript$$14.codeGenTarget;
                var v20861 = TypeScript$$14.CodeGenTarget;
                var v16090 = v20861.ES5;
                var v8146 = v16089 < v16090;
                if (v8146) {
                  this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                }
                var v23818 = this.currentToken;
                var v20862 = v23818.tokenId;
                var v23819 = TypeScript$$14.TokenID;
                var v20863 = v23819.Identifier;
                var v16091 = v20862 == v20863;
                var v20866 = !v16091;
                if (v20866) {
                  var v20864 = this.currentToken;
                  var v20865 = this.strictMode;
                  v16091 = TypeScript$$14.convertTokToID(v20864, v20865);
                }
                var v8147 = v16091;
                if (v8147) {
                  var v20867 = TypeScript$$14.Modifiers;
                  var v16092 = v20867.Setter;
                  modifiers$$12 = modifiers$$12 | v16092;
                }
              }
            }
            var v8150 = isAmbient$$3();
            if (v8150) {
              var v20868 = TypeScript$$14.Modifiers;
              var v16093 = v20868.Ambient;
              modifiers$$12 = modifiers$$12 | v16093;
            }
            var v20869 = TypeScript$$14.ErrorRecoverySet;
            var v16094 = v20869.SColon;
            var v8151 = errorRecoverySet$$37 | v16094;
            var v16095 = this.parsingDeclareFile;
            var v20872 = !v16095;
            if (v20872) {
              var v25253 = TypeScript$$14.Modifiers;
              var v23820 = v25253.Ambient;
              var v20870 = modifiers$$12 & v23820;
              var v23821 = TypeScript$$14.Modifiers;
              var v20871 = v23821.None;
              v16095 = v20870 != v20871;
            }
            var v8152 = v16095;
            fnOrVar = this.parsePropertyDeclaration(v8151, modifiers$$12, v8152, true);
            var staticsList = this.topStaticsList();
            var v16096 = staticsList;
            if (v16096) {
              var v20873 = fnOrVar.nodeType;
              var v23822 = TypeScript$$14.NodeType;
              var v20874 = v23822.VarDecl;
              v16096 = v20873 == v20874;
            }
            var v8153 = v16096;
            if (v8153) {
              staticsList.append(fnOrVar);
            }
            var v20875 = fnOrVar.nodeType;
            var v23823 = TypeScript$$14.NodeType;
            var v20876 = v23823.VarDecl;
            var v16097 = v20875 == v20876;
            var v20878 = !v16097;
            if (v20878) {
              var v23824 = fnOrVar.nodeType;
              var v25254 = TypeScript$$14.NodeType;
              var v23825 = v25254.FuncDecl;
              var v20877 = v23824 == v23825;
              if (v20877) {
                var v23826 = fnOrVar.fncFlags;
                var v25255 = TypeScript$$14.FncFlags;
                var v23827 = v25255.IsFatArrowFunction;
                v20877 = TypeScript$$14.hasFlag(v23826, v23827);
              }
              v16097 = v20877;
            }
            var v8154 = v16097;
            if (v8154) {
              needTerminator = true;
            }
            ast$$44 = fnOrVar;
            break;
          case TypeScript$$14.TokenID.For:
            mayNotBeExported();
            var v20879 = TypeScript$$14.Modifiers;
            var v16098 = v20879.None;
            var v8155 = modifiers$$12 != v16098;
            if (v8155) {
              this.reportParseError("syntax error: for statement does not take modifiers");
            }
            var v8156 = this.scanner;
            minChar$$27 = v8156.startPos;
            var v16099 = TypeScript$$14.TokenID;
            var v8157 = v16099.OpenParen;
            var v23828 = TypeScript$$14.ErrorRecoverySet;
            var v20880 = v23828.ExprStart;
            var v16100 = errorRecoverySet$$37 | v20880;
            var v20881 = TypeScript$$14.ErrorRecoverySet;
            var v16101 = v20881.Var;
            var v8158 = v16100 | v16101;
            this.checkNextToken(v8157, v8158);
            this.state = ParseState.ForInit;
            forInOk = true;
            var v16102 = this.currentToken;
            var v8164 = v16102.tokenId;
            switch(v8164) {
              case TypeScript$$14.TokenID.Var:
                var v23829 = TypeScript$$14.ErrorRecoverySet;
                var v20882 = v23829.SColon;
                var v16103 = errorRecoverySet$$37 | v20882;
                var v20883 = TypeScript$$14.ErrorRecoverySet;
                var v16104 = v20883.In;
                var v8159 = v16103 | v16104;
                var v16105 = TypeScript$$14.Modifiers;
                var v8160 = v16105.None;
                temp$$15 = this.parseVariableDeclaration(v8159, v8160, false, false);
                break;
              case TypeScript$$14.TokenID.Semicolon:
                temp$$15 = null;
                this.state = ParseState.ForCondStart;
                break;
              default:
                var v23830 = TypeScript$$14.ErrorRecoverySet;
                var v20884 = v23830.SColon;
                var v16106 = errorRecoverySet$$37 | v20884;
                var v20885 = TypeScript$$14.ErrorRecoverySet;
                var v16107 = v20885.In;
                var v8161 = v16106 | v16107;
                var v16108 = TypeScript$$14.OperatorPrecedence;
                var v8162 = v16108.None;
                var v8163 = TypeContext.NoTypes;
                temp$$15 = this.parseExpr(v8161, v8162, false, v8163);
            }
            this.state = ParseState.ForInitAfterVar;
            var v20886 = this.currentToken;
            var v16109 = v20886.tokenId;
            var v20887 = TypeScript$$14.TokenID;
            var v16110 = v20887.In;
            var v8192 = v16109 == v16110;
            if (v8192) {
              var v16111 = temp$$15 == null;
              var v20888 = !v16111;
              if (v20888) {
                v16111 = !forInOk;
              }
              var v8178 = v16111;
              if (v8178) {
                this.reportParseError("malformed for statement");
                var v8168 = this.errorRecovery;
                if (v8168) {
                  var v20889 = TypeScript$$14.ErrorRecoverySet;
                  var v16112 = v20889.StmtStart;
                  var v8165 = errorRecoverySet$$37 | v16112;
                  this.skip(v8165);
                  var v8166 = TypeScript$$14.AST;
                  var v16113 = TypeScript$$14.NodeType;
                  var v8167 = v16113.Empty;
                  ast$$44 = new v8166(v8167);
                  var v16114 = ast$$44.flags;
                  var v20890 = TypeScript$$14.ASTFlags;
                  var v16115 = v20890.Error;
                  ast$$44.flags = v16114 | v16115;
                }
              } else {
                var v8169 = this.scanner;
                var v26792 = v8169.scan();
                this.currentToken = v26792;
                var v8170 = TypeScript$$14.ForInStatement;
                var v23831 = TypeScript$$14.ErrorRecoverySet;
                var v20891 = v23831.RParen;
                var v16116 = v20891 | errorRecoverySet$$37;
                var v20892 = TypeScript$$14.OperatorPrecedence;
                var v16117 = v20892.Comma;
                var v16118 = TypeContext.NoTypes;
                var v8171 = this.parseExpr(v16116, v16117, false, v16118);
                var forInStmt = new v8170(temp$$15, v8171);
                var v8172 = this.scanner;
                forInStmt.limChar = v8172.pos;
                var v8173 = forInStmt.statement;
                v8173.minChar = minChar$$27;
                var v8174 = forInStmt.statement;
                var v16119 = this.scanner;
                v8174.limChar = v16119.pos;
                var v16120 = TypeScript$$14.TokenID;
                var v8175 = v16120.CloseParen;
                var v20893 = TypeScript$$14.ErrorRecoverySet;
                var v16121 = v20893.StmtStart;
                var v8176 = v16121 | errorRecoverySet$$37;
                this.checkCurrentToken(v8175, v8176);
                this.pushStmt(forInStmt, labelList$$1);
                var v8177 = forInStmt;
                var v26793 = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
                v8177.body = v26793;
                this.popStmt();
                forInStmt.minChar = minChar$$27;
                ast$$44 = forInStmt;
              }
            } else {
              var v8179 = TypeScript$$14.ForStatement;
              var forStmt = new v8179(temp$$15);
              forStmt.minChar = minChar$$27;
              var v16122 = TypeScript$$14.TokenID;
              var v8180 = v16122.Semicolon;
              this.checkCurrentToken(v8180, errorRecoverySet$$37);
              var v20894 = this.currentToken;
              var v16123 = v20894.tokenId;
              var v20895 = TypeScript$$14.TokenID;
              var v16124 = v20895.Semicolon;
              var v8184 = v16123 == v16124;
              if (v8184) {
                forStmt.cond = null;
              } else {
                var v8181 = forStmt;
                var v25256 = TypeScript$$14.ErrorRecoverySet;
                var v23832 = v25256.SColon;
                var v20896 = errorRecoverySet$$37 | v23832;
                var v23833 = TypeScript$$14.ErrorRecoverySet;
                var v20897 = v23833.RParen;
                var v16125 = v20896 | v20897;
                var v20898 = TypeScript$$14.OperatorPrecedence;
                var v16126 = v20898.None;
                var v16127 = TypeContext.NoTypes;
                var v26794 = this.parseExpr(v16125, v16126, true, v16127);
                v8181.cond = v26794;
                var v20899 = this.currentToken;
                var v16128 = v20899.tokenId;
                var v20900 = TypeScript$$14.TokenID;
                var v16129 = v20900.Semicolon;
                var v8183 = v16128 != v16129;
                if (v8183) {
                  var v20901 = TypeScript$$14.ErrorRecoverySet;
                  var v16130 = v20901.StmtStart;
                  var v8182 = errorRecoverySet$$37 | v16130;
                  this.skip(v8182);
                  ast$$44 = forStmt;
                  var v16131 = ast$$44.flags;
                  var v20902 = TypeScript$$14.ASTFlags;
                  var v16132 = v20902.Error;
                  ast$$44.flags = v16131 | v16132;
                }
              }
              var v8185 = this.scanner;
              var v26795 = v8185.scan();
              this.currentToken = v26795;
              var v20903 = this.currentToken;
              var v16133 = v20903.tokenId;
              var v20904 = TypeScript$$14.TokenID;
              var v16134 = v20904.CloseParen;
              var v8187 = v16133 == v16134;
              if (v8187) {
                forStmt.incr = null;
              } else {
                var v8186 = forStmt;
                var v25257 = TypeScript$$14.ErrorRecoverySet;
                var v23834 = v25257.SColon;
                var v20905 = errorRecoverySet$$37 | v23834;
                var v23835 = TypeScript$$14.ErrorRecoverySet;
                var v20906 = v23835.RParen;
                var v16135 = v20905 | v20906;
                var v20907 = TypeScript$$14.OperatorPrecedence;
                var v16136 = v20907.None;
                var v16137 = TypeContext.NoTypes;
                var v26796 = this.parseExpr(v16135, v16136, true, v16137);
                v8186.incr = v26796;
              }
              var v16138 = TypeScript$$14.TokenID;
              var v8188 = v16138.CloseParen;
              var v20908 = TypeScript$$14.ErrorRecoverySet;
              var v16139 = v20908.LCurly;
              var v8189 = errorRecoverySet$$37 | v16139;
              this.checkCurrentToken(v8188, v8189);
              this.pushStmt(forStmt, labelList$$1);
              var v8190 = forStmt;
              var v26797 = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
              v8190.body = v26797;
              this.popStmt();
              var v8191 = forStmt.body;
              forStmt.limChar = v8191.limChar;
              ast$$44 = forStmt;
            }
            break;
          case TypeScript$$14.TokenID.With:
            var v16140 = TypeScript$$14.codeGenTarget;
            var v20909 = TypeScript$$14.CodeGenTarget;
            var v16141 = v20909.ES5;
            var v8193 = v16140 < v16141;
            if (v8193) {
              this.reportParseError("'with' statements are only available in ES5 codegen mode or better");
            }
            var v8194 = this.strictMode;
            if (v8194) {
              this.reportParseError("'with' statements are not available in strict mode");
            }
            mayNotBeExported();
            var v20910 = TypeScript$$14.Modifiers;
            var v16142 = v20910.None;
            var v8195 = modifiers$$12 != v16142;
            if (v8195) {
              this.reportParseError("'with' statement does not take modifiers");
            }
            var v8196 = this.scanner;
            minChar$$27 = v8196.startPos;
            var v16143 = TypeScript$$14.TokenID;
            var v8197 = v16143.OpenParen;
            var v23836 = TypeScript$$14.ErrorRecoverySet;
            var v20911 = v23836.ExprStart;
            var v16144 = errorRecoverySet$$37 | v20911;
            var v20912 = TypeScript$$14.ErrorRecoverySet;
            var v16145 = v20912.Var;
            var v8198 = v16144 | v16145;
            this.checkNextToken(v8197, v8198);
            var v20913 = TypeScript$$14.ErrorRecoverySet;
            var v16146 = v20913.Colon;
            var v8199 = errorRecoverySet$$37 | v16146;
            var v16147 = TypeScript$$14.OperatorPrecedence;
            var v8200 = v16147.None;
            var v8201 = TypeContext.NoTypes;
            var expr$$5 = this.parseExpr(v8199, v8200, true, v8201);
            var v16148 = TypeScript$$14.TokenID;
            var v8202 = v16148.CloseParen;
            var v20914 = TypeScript$$14.ErrorRecoverySet;
            var v16149 = v20914.LCurly;
            var v8203 = errorRecoverySet$$37 | v16149;
            this.checkCurrentToken(v8202, v8203);
            var v8204 = TypeScript$$14.WithStatement;
            var withStmt = new v8204(expr$$5);
            var v8205 = withStmt;
            var v26798 = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
            v8205.body = v26798;
            withStmt.minChar = minChar$$27;
            var v8206 = withStmt.body;
            withStmt.limChar = v8206.limChar;
            ast$$44 = withStmt;
            break;
          case TypeScript$$14.TokenID.Switch:
            mayNotBeExported();
            var v20915 = TypeScript$$14.Modifiers;
            var v16150 = v20915.None;
            var v8207 = modifiers$$12 != v16150;
            if (v8207) {
              this.reportParseError("'switch' statement does not take modifiers");
            }
            var v16151 = TypeScript$$14.TokenID;
            var v8208 = v16151.OpenParen;
            var v20916 = TypeScript$$14.ErrorRecoverySet;
            var v16152 = v20916.ExprStart;
            var v8209 = errorRecoverySet$$37 | v16152;
            this.checkNextToken(v8208, v8209);
            var v8210 = TypeScript$$14.SwitchStatement;
            var v23837 = TypeScript$$14.ErrorRecoverySet;
            var v20917 = v23837.RParen;
            var v16153 = errorRecoverySet$$37 | v20917;
            var v20918 = TypeScript$$14.OperatorPrecedence;
            var v16154 = v20918.None;
            var v16155 = TypeContext.NoTypes;
            var v8211 = this.parseExpr(v16153, v16154, true, v16155);
            var switchStmt = new v8210(v8211);
            var v8212 = switchStmt.statement;
            v8212.minChar = minChar$$27;
            var v8213 = switchStmt.statement;
            var v16156 = this.scanner;
            v8213.limChar = v16156.pos;
            var v16157 = TypeScript$$14.TokenID;
            var v8214 = v16157.CloseParen;
            var v20919 = TypeScript$$14.ErrorRecoverySet;
            var v16158 = v20919.LCurly;
            var v8215 = errorRecoverySet$$37 | v16158;
            this.checkCurrentToken(v8214, v8215);
            var v8216 = this.scanner;
            var caseListMinChar = v8216.startPos;
            var v16159 = TypeScript$$14.TokenID;
            var v8217 = v16159.OpenBrace;
            var v20920 = TypeScript$$14.ErrorRecoverySet;
            var v16160 = v20920.SCase;
            var v8218 = errorRecoverySet$$37 | v16160;
            this.checkCurrentToken(v8217, v8218);
            switchStmt.defaultCase = null;
            var v8219 = switchStmt;
            var v16161 = TypeScript$$14.ASTList;
            var v26799 = new v16161;
            v8219.caseList = v26799;
            var caseStmt = null;
            this.pushStmt(switchStmt, labelList$$1);
            for (;;) {
              var v23838 = this.currentToken;
              var v20921 = v23838.tokenId;
              var v23839 = TypeScript$$14.TokenID;
              var v20922 = v23839.Case;
              var v16162 = v20921 == v20922;
              var v20925 = !v16162;
              if (v20925) {
                var v23840 = this.currentToken;
                var v20923 = v23840.tokenId;
                var v23841 = TypeScript$$14.TokenID;
                var v20924 = v23841.Default;
                v16162 = v20923 == v20924;
              }
              var v8233 = v16162;
              if (v8233) {
                var v16163 = this.currentToken;
                var v8220 = v16163.tokenId;
                var v16164 = TypeScript$$14.TokenID;
                var v8221 = v16164.Default;
                var isDefault = v8220 == v8221;
                var v8222 = TypeScript$$14.CaseStatement;
                caseStmt = new v8222;
                var v8223 = this.scanner;
                caseStmt.minChar = v8223.startPos;
                var v8224 = this.scanner;
                var v26800 = v8224.scan();
                this.currentToken = v26800;
                if (isDefault) {
                  switchStmt.defaultCase = caseStmt;
                } else {
                  var v8225 = caseStmt;
                  var v23842 = TypeScript$$14.ErrorRecoverySet;
                  var v20926 = v23842.Colon;
                  var v16165 = errorRecoverySet$$37 | v20926;
                  var v20927 = TypeScript$$14.OperatorPrecedence;
                  var v16166 = v20927.None;
                  var v16167 = TypeContext.NoTypes;
                  var v26801 = this.parseExpr(v16165, v16166, true, v16167);
                  v8225.expr = v26801;
                }
                var v16168 = TypeScript$$14.TokenID;
                var v8226 = v16168.Colon;
                var v20928 = TypeScript$$14.ErrorRecoverySet;
                var v16169 = v20928.StmtStart;
                var v8227 = errorRecoverySet$$37 | v16169;
                this.checkCurrentToken(v8226, v8227);
                var v8228 = caseStmt;
                var v16170 = TypeScript$$14.ASTList;
                var v26802 = new v16170;
                v8228.body = v26802;
                var v20929 = TypeScript$$14.ErrorRecoverySet;
                var v16171 = v20929.RCurly;
                var v8229 = errorRecoverySet$$37 | v16171;
                var v8230 = caseStmt.body;
                this.parseStatementList(v8229, v8230, false, true, allowedElements$$2, modifiers$$12);
                var v8231 = caseStmt.body;
                caseStmt.limChar = v8231.limChar;
                var v8232 = switchStmt.caseList;
                v8232.append(caseStmt);
              } else {
                break;
              }
            }
            var v8234 = switchStmt.caseList;
            v8234.minChar = caseListMinChar;
            var v8235 = switchStmt.caseList;
            var v16172 = this.scanner;
            v8235.limChar = v16172.pos;
            var v8236 = switchStmt.caseList;
            switchStmt.limChar = v8236.limChar;
            var v16173 = TypeScript$$14.TokenID;
            var v8237 = v16173.CloseBrace;
            this.checkCurrentToken(v8237, errorRecoverySet$$37);
            this.popStmt();
            ast$$44 = switchStmt;
            break;
          case TypeScript$$14.TokenID.While:
            mayNotBeExported();
            var v20930 = TypeScript$$14.Modifiers;
            var v16174 = v20930.None;
            var v8238 = modifiers$$12 != v16174;
            if (v8238) {
              this.reportParseError("'while' statement does not take modifiers");
            }
            var v8239 = this.scanner;
            minChar$$27 = v8239.startPos;
            var v16175 = TypeScript$$14.TokenID;
            var v8240 = v16175.OpenParen;
            var v20931 = TypeScript$$14.ErrorRecoverySet;
            var v16176 = v20931.ExprStart;
            var v8241 = v16176 | errorRecoverySet$$37;
            this.checkNextToken(v8240, v8241);
            var v8242 = TypeScript$$14.WhileStatement;
            var v23843 = TypeScript$$14.ErrorRecoverySet;
            var v20932 = v23843.RParen;
            var v16177 = errorRecoverySet$$37 | v20932;
            var v20933 = TypeScript$$14.OperatorPrecedence;
            var v16178 = v20933.None;
            var v16179 = TypeContext.NoTypes;
            var v8243 = this.parseExpr(v16177, v16178, true, v16179);
            var whileStmt = new v8242(v8243);
            whileStmt.minChar = minChar$$27;
            var v16180 = TypeScript$$14.TokenID;
            var v8244 = v16180.CloseParen;
            var v20934 = TypeScript$$14.ErrorRecoverySet;
            var v16181 = v20934.StmtStart;
            var v8245 = errorRecoverySet$$37 | v16181;
            this.checkCurrentToken(v8244, v8245);
            this.pushStmt(whileStmt, labelList$$1);
            var v8246 = whileStmt;
            var v26803 = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
            v8246.body = v26803;
            var v8247 = whileStmt.body;
            whileStmt.limChar = v8247.limChar;
            this.popStmt();
            ast$$44 = whileStmt;
            break;
          case TypeScript$$14.TokenID.Do:
            mayNotBeExported();
            var v20935 = TypeScript$$14.Modifiers;
            var v16182 = v20935.None;
            var v8248 = modifiers$$12 != v16182;
            if (v8248) {
              this.reportParseError("'do' statement does not take modifiers");
            }
            var v8249 = this.scanner;
            minChar$$27 = v8249.startPos;
            var v8250 = this.scanner;
            var v26804 = v8250.scan();
            this.currentToken = v26804;
            var v8251 = TypeScript$$14.DoWhileStatement;
            var doStmt = new v8251;
            doStmt.minChar = minChar$$27;
            this.pushStmt(doStmt, labelList$$1);
            var v8252 = doStmt;
            var v23844 = TypeScript$$14.ErrorRecoverySet;
            var v20936 = v23844.While;
            var v16183 = errorRecoverySet$$37 | v20936;
            var v26805 = this.parseStatement(v16183, allowedElements$$2, parentModifiers$$7);
            v8252.body = v26805;
            this.popStmt();
            var v8253 = doStmt;
            var v16184 = TypeScript$$14.Identifier;
            var v26806 = new v16184("while");
            v8253.whileAST = v26806;
            var v8254 = doStmt.whileAST;
            var v16185 = this.scanner;
            v8254.minChar = v16185.startPos;
            var v16186 = TypeScript$$14.TokenID;
            var v8255 = v16186.While;
            var v20937 = TypeScript$$14.ErrorRecoverySet;
            var v16187 = v20937.LParen;
            var v8256 = errorRecoverySet$$37 | v16187;
            this.checkCurrentToken(v8255, v8256);
            var v8257 = doStmt.whileAST;
            var v20938 = doStmt.whileAST;
            var v16188 = v20938.minChar;
            v8257.limChar = v16188 + 5;
            var v16189 = TypeScript$$14.TokenID;
            var v8258 = v16189.OpenParen;
            var v20939 = TypeScript$$14.ErrorRecoverySet;
            var v16190 = v20939.ExprStart;
            var v8259 = errorRecoverySet$$37 | v16190;
            this.checkCurrentToken(v8258, v8259);
            var v8260 = doStmt;
            var v23845 = TypeScript$$14.ErrorRecoverySet;
            var v20940 = v23845.RParen;
            var v16191 = errorRecoverySet$$37 | v20940;
            var v20941 = TypeScript$$14.OperatorPrecedence;
            var v16192 = v20941.None;
            var v16193 = TypeContext.NoTypes;
            var v26807 = this.parseExpr(v16191, v16192, true, v16193);
            v8260.cond = v26807;
            var v8261 = this.scanner;
            doStmt.limChar = v8261.pos;
            var v16194 = TypeScript$$14.TokenID;
            var v8262 = v16194.CloseParen;
            this.checkCurrentToken(v8262, errorRecoverySet$$37);
            ast$$44 = doStmt;
            var v20942 = this.currentToken;
            var v16195 = v20942.tokenId;
            var v20943 = TypeScript$$14.TokenID;
            var v16196 = v20943.Semicolon;
            var v8264 = v16195 == v16196;
            if (v8264) {
              var v8263 = this.scanner;
              var v26808 = v8263.scan();
              this.currentToken = v26808;
            }
            break;
          case TypeScript$$14.TokenID.If:
            mayNotBeExported();
            var v20944 = TypeScript$$14.Modifiers;
            var v16197 = v20944.None;
            var v8265 = modifiers$$12 != v16197;
            if (v8265) {
              this.reportParseError("if statement does not take modifiers");
            }
            var v8266 = this.scanner;
            minChar$$27 = v8266.startPos;
            var v16198 = TypeScript$$14.TokenID;
            var v8267 = v16198.OpenParen;
            var v20945 = TypeScript$$14.ErrorRecoverySet;
            var v16199 = v20945.ExprStart;
            var v8268 = errorRecoverySet$$37 | v16199;
            this.checkNextToken(v8267, v8268);
            var v8269 = TypeScript$$14.IfStatement;
            var v23846 = TypeScript$$14.ErrorRecoverySet;
            var v20946 = v23846.LParen;
            var v16200 = errorRecoverySet$$37 | v20946;
            var v20947 = TypeScript$$14.OperatorPrecedence;
            var v16201 = v20947.None;
            var v16202 = TypeContext.NoTypes;
            var v8270 = this.parseExpr(v16200, v16201, true, v16202);
            var ifStmt = new v8269(v8270);
            ifStmt.minChar = minChar$$27;
            var v8271 = ifStmt.statement;
            v8271.minChar = minChar$$27;
            var v8272 = ifStmt.statement;
            var v16203 = this.scanner;
            v8272.limChar = v16203.pos;
            var v16204 = TypeScript$$14.TokenID;
            var v8273 = v16204.CloseParen;
            var v20948 = TypeScript$$14.ErrorRecoverySet;
            var v16205 = v20948.StmtStart;
            var v8274 = errorRecoverySet$$37 | v16205;
            this.checkCurrentToken(v8273, v8274);
            this.pushStmt(ifStmt, labelList$$1);
            var v8275 = ifStmt;
            var v23847 = TypeScript$$14.ErrorRecoverySet;
            var v20949 = v23847.Else;
            var v16206 = v20949 | errorRecoverySet$$37;
            var v26809 = this.parseStatement(v16206, allowedElements$$2, parentModifiers$$7);
            v8275.thenBod = v26809;
            var v8276 = ifStmt.thenBod;
            ifStmt.limChar = v8276.limChar;
            var v20950 = this.currentToken;
            var v16207 = v20950.tokenId;
            var v20951 = TypeScript$$14.TokenID;
            var v16208 = v20951.Else;
            var v8280 = v16207 == v16208;
            if (v8280) {
              var v8277 = this.scanner;
              var v26810 = v8277.scan();
              this.currentToken = v26810;
              var v8278 = ifStmt;
              var v26811 = this.parseStatement(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7);
              v8278.elseBod = v26811;
              var v8279 = ifStmt.elseBod;
              ifStmt.limChar = v8279.limChar;
            }
            this.popStmt();
            ast$$44 = ifStmt;
            break;
          case TypeScript$$14.TokenID.Try:
            mayNotBeExported();
            var v20952 = TypeScript$$14.Modifiers;
            var v16209 = v20952.None;
            var v8281 = modifiers$$12 != v16209;
            if (v8281) {
              this.reportParseError("try statement does not take modifiers");
            }
            var v8282 = this.scanner;
            minChar$$27 = v8282.startPos;
            ast$$44 = this.parseTryCatchFinally(errorRecoverySet$$37, parentModifiers$$7, labelList$$1);
            break;
          case TypeScript$$14.TokenID.OpenBrace:
            mayNotBeExported();
            var v20953 = TypeScript$$14.Modifiers;
            var v16210 = v20953.None;
            var v8283 = modifiers$$12 != v16210;
            if (v8283) {
              this.reportParseError("block does not take modifiers");
            }
            var v8284 = this.scanner;
            minChar$$27 = v8284.startPos;
            var v8285 = this.scanner;
            var v26812 = v8285.scan();
            this.currentToken = v26812;
            var v8286 = TypeScript$$14.Block;
            var v16211 = TypeScript$$14.ASTList;
            var v8287 = new v16211;
            var block$$1 = new v8286(v8287, true);
            this.pushStmt(block$$1, labelList$$1);
            var v20954 = TypeScript$$14.ErrorRecoverySet;
            var v16212 = v20954.RCurly;
            var v8288 = errorRecoverySet$$37 | v16212;
            var v8289 = block$$1.statements;
            var v16213 = TypeScript$$14.AllowedElements;
            var v8290 = v16213.None;
            this.parseStatementList(v8288, v8289, false, false, v8290, modifiers$$12);
            this.popStmt();
            var v8291 = block$$1.statements;
            v8291.minChar = minChar$$27;
            var v8292 = block$$1.statements;
            var v16214 = this.scanner;
            v8292.limChar = v16214.pos;
            var v8293 = block$$1.statements;
            block$$1.minChar = v8293.minChar;
            var v8294 = block$$1.statements;
            block$$1.limChar = v8294.limChar;
            var v16215 = TypeScript$$14.TokenID;
            var v8295 = v16215.CloseBrace;
            this.checkCurrentToken(v8295, errorRecoverySet$$37);
            ast$$44 = block$$1;
            break;
          case TypeScript$$14.TokenID.Semicolon:
            mayNotBeExported();
            var v20955 = TypeScript$$14.Modifiers;
            var v16216 = v20955.None;
            var v8296 = modifiers$$12 != v16216;
            if (v8296) {
              this.reportParseError("modifier can not appear here");
            }
            var v8297 = TypeScript$$14.AST;
            var v16217 = TypeScript$$14.NodeType;
            var v8298 = v16217.Empty;
            ast$$44 = new v8297(v8298);
            var v8299 = this.scanner;
            var v26813 = v8299.scan();
            this.currentToken = v26813;
            break;
          case TypeScript$$14.TokenID.Break:
          ;
          case TypeScript$$14.TokenID.Continue:
            mayNotBeExported();
            var v20956 = TypeScript$$14.Modifiers;
            var v16218 = v20956.None;
            var v8300 = modifiers$$12 != v16218;
            if (v8300) {
              this.reportParseError("modifiers can not appear before jump statement");
            }
            var v8301 = TypeScript$$14.Jump;
            var v16219;
            var v25258 = this.currentToken;
            var v23848 = v25258.tokenId;
            var v25259 = TypeScript$$14.TokenID;
            var v23849 = v25259.Break;
            var v20959 = v23848 == v23849;
            if (v20959) {
              var v20957 = TypeScript$$14.NodeType;
              v16219 = v20957.Break;
            } else {
              var v20958 = TypeScript$$14.NodeType;
              v16219 = v20958.Continue;
            }
            var v8302 = v16219;
            var jump$$1 = new v8301(v8302);
            var v8303 = this.scanner;
            var v26814 = v8303.scan();
            this.currentToken = v26814;
            var v23850 = this.currentToken;
            var v20960 = v23850.tokenId;
            var v23851 = TypeScript$$14.TokenID;
            var v20961 = v23851.Identifier;
            var v16220 = v20960 == v20961;
            if (v16220) {
              var v23852 = this.scanner;
              var v20962 = v23852.lastTokenHadNewline();
              v16220 = !v20962;
            }
            var v8306 = v16220;
            if (v8306) {
              var v8304 = jump$$1;
              var v16221 = this.currentToken;
              var v26815 = v16221.getText();
              v8304.target = v26815;
              var v8305 = this.scanner;
              var v26816 = v8305.scan();
              this.currentToken = v26816;
            }
            this.resolveJumpTarget(jump$$1);
            ast$$44 = jump$$1;
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Return:
            mayNotBeExported();
            var v20963 = TypeScript$$14.Modifiers;
            var v16222 = v20963.None;
            var v8307 = modifiers$$12 != v16222;
            if (v8307) {
              this.reportParseError("modifiers can not appear before return statement");
            }
            var v16223 = this.inFunction;
            var v8308 = !v16223;
            if (v8308) {
              this.reportParseError("return statement outside of function body");
            }
            var v8309 = this.scanner;
            minChar$$27 = v8309.startPos;
            var v8310 = this.scanner;
            var v26817 = v8310.scan();
            this.currentToken = v26817;
            var v8311 = TypeScript$$14.ReturnStatement;
            var retStmt$$1 = new v8311;
            retStmt$$1.minChar = minChar$$27;
            var v25260 = this.currentToken;
            var v23853 = v25260.tokenId;
            var v25261 = TypeScript$$14.TokenID;
            var v23854 = v25261.Semicolon;
            var v20964 = v23853 != v23854;
            if (v20964) {
              var v25262 = this.currentToken;
              var v23855 = v25262.tokenId;
              var v25263 = TypeScript$$14.TokenID;
              var v23856 = v25263.CloseBrace;
              v20964 = v23855 != v23856;
            }
            var v16224 = v20964;
            if (v16224) {
              var v23857 = this.scanner;
              var v20965 = v23857.lastTokenHadNewline();
              v16224 = !v20965;
            }
            var v8313 = v16224;
            if (v8313) {
              var v8312 = retStmt$$1;
              var v23858 = TypeScript$$14.ErrorRecoverySet;
              var v20966 = v23858.SColon;
              var v16225 = errorRecoverySet$$37 | v20966;
              var v20967 = TypeScript$$14.OperatorPrecedence;
              var v16226 = v20967.None;
              var v16227 = TypeContext.NoTypes;
              var v26818 = this.parseExpr(v16225, v16226, true, v16227);
              v8312.returnExpression = v26818;
            }
            needTerminator = true;
            var v8314 = retStmt$$1;
            var v16228 = this.scanner;
            var v26819 = v16228.lastTokenLimChar();
            v8314.limChar = v26819;
            ast$$44 = retStmt$$1;
            break;
          case TypeScript$$14.TokenID.Throw:
            mayNotBeExported();
            var v20968 = TypeScript$$14.Modifiers;
            var v16229 = v20968.None;
            var v8315 = modifiers$$12 != v16229;
            if (v8315) {
              this.reportParseError("modifiers can not appear before a throw statement");
            }
            var v8316 = this.scanner;
            minChar$$27 = v8316.startPos;
            var v8317 = this.scanner;
            var v26820 = v8317.scan();
            this.currentToken = v26820;
            var v25264 = this.currentToken;
            var v23859 = v25264.tokenId;
            var v25265 = TypeScript$$14.TokenID;
            var v23860 = v25265.Semicolon;
            var v20969 = v23859 != v23860;
            if (v20969) {
              var v25266 = this.currentToken;
              var v23861 = v25266.tokenId;
              var v25267 = TypeScript$$14.TokenID;
              var v23862 = v25267.CloseBrace;
              v20969 = v23861 != v23862;
            }
            var v16230 = v20969;
            if (v16230) {
              var v23863 = this.scanner;
              var v20970 = v23863.lastTokenHadNewline();
              v16230 = !v20970;
            }
            var v8321 = v16230;
            if (v8321) {
              var v20971 = TypeScript$$14.ErrorRecoverySet;
              var v16231 = v20971.SColon;
              var v8318 = errorRecoverySet$$37 | v16231;
              var v16232 = TypeScript$$14.OperatorPrecedence;
              var v8319 = v16232.None;
              var v8320 = TypeContext.NoTypes;
              temp$$15 = this.parseExpr(v8318, v8319, true, v8320);
            } else {
              this.reportParseError("throw with no target");
              temp$$15 = null;
            }
            var v8322 = TypeScript$$14.UnaryExpression;
            var v16233 = TypeScript$$14.NodeType;
            var v8323 = v16233.Throw;
            ast$$44 = new v8322(v8323, temp$$15);
            var v8324 = ast$$44;
            var v16234 = this.scanner;
            var v26821 = v16234.lastTokenLimChar();
            v8324.limChar = v26821;
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Enum:
            var v8325 = this.scanner;
            var v26822 = v8325.scan();
            this.currentToken = v26822;
            ast$$44 = this.parseEnumDecl(errorRecoverySet$$37, modifiers$$12);
            ast$$44.minChar = minChar$$27;
            var v8326 = ast$$44;
            var v16235 = this.scanner;
            var v26823 = v16235.lastTokenLimChar();
            v8326.limChar = v26823;
            var v20972 = this.parsingDeclareFile;
            var v23864 = !v20972;
            if (v23864) {
              v20972 = this.ambientModule;
            }
            var v16236 = v20972;
            var v20974 = !v16236;
            if (v20974) {
              var v23865 = TypeScript$$14.Modifiers;
              var v20973 = v23865.Ambient;
              v16236 = TypeScript$$14.hasFlag(modifiers$$12, v20973);
            }
            var v8327 = v16236;
            if (v8327) {
              var v16237 = ast$$44.modFlags;
              var v20975 = TypeScript$$14.ModuleFlags;
              var v16238 = v20975.Ambient;
              ast$$44.modFlags = v16237 | v16238;
            }
            var v20976 = this.parsingDeclareFile;
            var v23866 = !v20976;
            if (v23866) {
              v20976 = this.ambientModule;
            }
            var v16239 = v20976;
            var v20978 = !v16239;
            if (v20978) {
              var v23867 = TypeScript$$14.Modifiers;
              var v20977 = v23867.Exported;
              v16239 = TypeScript$$14.hasFlag(modifiers$$12, v20977);
            }
            var v8328 = v16239;
            if (v8328) {
              var v16240 = ast$$44.modFlags;
              var v20979 = TypeScript$$14.ModuleFlags;
              var v16241 = v20979.Exported;
              ast$$44.modFlags = v16240 | v16241;
            }
            break;
          case TypeScript$$14.TokenID.Debugger:
            mayNotBeExported();
            var v20980 = TypeScript$$14.Modifiers;
            var v16242 = v20980.None;
            var v8329 = modifiers$$12 != v16242;
            if (v8329) {
              this.reportParseError("modifiers can not appear before debugger statement");
            }
            var v8330 = this.scanner;
            minChar$$27 = v8330.startPos;
            var v8331 = this.scanner;
            var v26824 = v8331.scan();
            this.currentToken = v26824;
            var v8332 = TypeScript$$14.DebuggerStatement;
            var debuggerStmt = new v8332;
            debuggerStmt.minChar = minChar$$27;
            needTerminator = true;
            var v8333 = debuggerStmt;
            var v16243 = this.scanner;
            var v26825 = v16243.lastTokenLimChar();
            v8333.limChar = v26825;
            ast$$44 = debuggerStmt;
            break;
          default:
            var v20981 = TypeScript$$14.Modifiers;
            var v16244 = v20981.None;
            var v8334 = modifiers$$12 != v16244;
            if (v8334) {
              this.reportParseError("modifiers can not appear before an expression statement or label");
            }
            var v8335 = this.scanner;
            minChar$$27 = v8335.startPos;
            var v8336 = this.scanner;
            var svPos = v8336.pos;
            var v23868 = TypeScript$$14.ErrorRecoverySet;
            var v20982 = v23868.Colon;
            var v23869 = TypeScript$$14.ErrorRecoverySet;
            var v20983 = v23869.StmtStart;
            var v16245 = v20982 | v20983;
            var v8337 = v16245 | errorRecoverySet$$37;
            var v16246 = TypeScript$$14.OperatorPrecedence;
            var v8338 = v16246.None;
            var v8339 = TypeContext.NoTypes;
            temp$$15 = this.parseExpr(v8337, v8338, true, v8339);
            var v20984 = this.scanner;
            var v16247 = v20984.pos;
            var v8346 = v16247 == svPos;
            if (v8346) {
              var v8340 = this.scanner;
              var v26826 = v8340.scan();
              this.currentToken = v26826;
              ast$$44 = temp$$15;
            } else {
              var v25905 = this.currentToken;
              var v25268 = v25905.tokenId;
              var v25906 = TypeScript$$14.TokenID;
              var v25269 = v25906.Colon;
              var v23870 = v25268 == v25269;
              if (v23870) {
                var v25907 = this.scanner;
                var v25270 = v25907.lastTokenHadNewline();
                v23870 = !v25270;
              }
              var v20985 = v23870;
              if (v20985) {
                v20985 = temp$$15;
              }
              var v16248 = v20985;
              if (v16248) {
                var v20986 = temp$$15.nodeType;
                var v23871 = TypeScript$$14.NodeType;
                var v20987 = v23871.Name;
                v16248 = v20986 == v20987;
              }
              var v8345 = v16248;
              if (v8345) {
                var v8342 = labelList$$1 == null;
                if (v8342) {
                  var v8341 = TypeScript$$14.ASTList;
                  labelList$$1 = new v8341;
                }
                var v16249 = TypeScript$$14.Label;
                var v8343 = new v16249(temp$$15);
                labelList$$1.append(v8343);
                var v8344 = this.scanner;
                var v26827 = v8344.scan();
                this.currentToken = v26827;
              } else {
                ast$$44 = temp$$15;
                needTerminator = true;
              }
            }
          ;
        }
        if (ast$$44) {
          break;
        }
      }
      if (needTerminator) {
        var v16250 = this.currentToken;
        var v8353 = v16250.tokenId;
        switch(v8353) {
          case TypeScript$$14.TokenID.Semicolon:
            var v8348 = this.scanner;
            var v26828 = v8348.scan();
            this.currentToken = v26828;
            var v16251 = ast$$44.flags;
            var v20988 = TypeScript$$14.ASTFlags;
            var v16252 = v20988.ExplicitSemicolon;
            ast$$44.flags = v16251 | v16252;
            break;
          case TypeScript$$14.TokenID.EndOfFile:
            var v8349 = this.scanner;
            ast$$44.limChar = v8349.pos;
          case TypeScript$$14.TokenID.CloseBrace:
            var v16253 = ast$$44.flags;
            var v20989 = TypeScript$$14.ASTFlags;
            var v16254 = v20989.AutomaticSemicolon;
            ast$$44.flags = v16253 | v16254;
            var v8350 = this.style_requireSemi;
            if (v8350) {
              this.reportParseStyleError("no automatic semicolon");
            }
            break;
          default:
            var v20990 = this.scanner;
            var v16255 = v20990.lastTokenHadNewline();
            var v8352 = !v16255;
            if (v8352) {
              this.reportParseError("Expected ';'");
            } else {
              var v16256 = ast$$44.flags;
              var v20991 = TypeScript$$14.ASTFlags;
              var v16257 = v20991.AutomaticSemicolon;
              ast$$44.flags = v16256 | v16257;
              var v8351 = this.style_requireSemi;
              if (v8351) {
                this.reportParseStyleError("no automatic semicolon");
              }
            }
          ;
        }
      }
      if (labelList$$1) {
        var v8354 = TypeScript$$14.LabeledStatement;
        ast$$44 = new v8354(labelList$$1, ast$$44);
      }
      ast$$44.minChar = minChar$$27;
      var v8355 = ast$$44;
      var v16258 = ast$$44.limChar;
      var v20992 = this.scanner;
      var v16259 = v20992.lastTokenLimChar();
      var v26829 = TypeScript$$14.max(v16258, v16259);
      v8355.limChar = v26829;
      if (preComments$$8) {
        ast$$44.preComments = preComments$$8;
      }
      var v16260 = this.ambientModule;
      if (v16260) {
        var v20993 = this.okAmbientModuleMember(ast$$44);
        v16260 = !v20993;
      }
      var v8356 = v16260;
      if (v8356) {
        this.reportParseError("statement not permitted within ambient module");
      }
      var v16261 = ast$$44.flags;
      var v20994 = TypeScript$$14.ASTFlags;
      var v16262 = v20994.IsStatement;
      ast$$44.flags = v16261 | v16262;
      return ast$$44;
    }
    function v584(errorRecoverySet$$36, parentModifiers$$6, labelList) {
      var v8357 = TypeScript$$14.Try;
      var tryPart = new v8357(null);
      var v8358 = this.scanner;
      var tryMinChar = v8358.startPos;
      this.pushStmt(tryPart, labelList);
      var v20995 = TypeScript$$14.ErrorRecoverySet;
      var v16263 = v20995.Catch;
      var v8359 = errorRecoverySet$$36 | v16263;
      this.parseTry(tryPart, v8359, parentModifiers$$6);
      this.popStmt();
      var tc$$1 = null;
      var tf = null;
      var v20996 = this.currentToken;
      var v16264 = v20996.tokenId;
      var v20997 = TypeScript$$14.TokenID;
      var v16265 = v20997.Catch;
      var v8362 = v16264 == v16265;
      if (v8362) {
        var v20998 = TypeScript$$14.ErrorRecoverySet;
        var v16266 = v20998.Catch;
        var v8360 = errorRecoverySet$$36 | v16266;
        var catchPart = this.parseCatch(v8360, parentModifiers$$6);
        var v8361 = TypeScript$$14.TryCatch;
        tc$$1 = new v8361(tryPart, catchPart);
        tc$$1.minChar = tryPart.minChar;
        tc$$1.limChar = catchPart.limChar;
      }
      var v20999 = this.currentToken;
      var v16267 = v20999.tokenId;
      var v21000 = TypeScript$$14.TokenID;
      var v16268 = v21000.Finally;
      var v8372 = v16267 != v16268;
      if (v8372) {
        var v8370 = tc$$1 == null;
        if (v8370) {
          this.reportParseError("try with neither catch nor finally");
          var v8367 = this.errorRecovery;
          if (v8367) {
            var v8363 = TypeScript$$14.TryFinally;
            var v16269 = TypeScript$$14.Finally;
            var v21001 = TypeScript$$14.AST;
            var v23872 = TypeScript$$14.NodeType;
            var v21002 = v23872.Empty;
            var v16270 = new v21001(v21002);
            var v8364 = new v16269(v16270);
            var etf = new v8363(tryPart, v8364);
            var v16271 = etf.flags;
            var v21003 = TypeScript$$14.ASTFlags;
            var v16272 = v21003.Error;
            etf.flags = v16271 | v16272;
            var v8365 = this.scanner;
            etf.minChar = v8365.startPos;
            var v8366 = this.scanner;
            etf.limChar = v8366.pos;
            return etf;
          }
          var v8368 = TypeScript$$14.TryFinally;
          var v16273 = TypeScript$$14.Finally;
          var v21004 = TypeScript$$14.AST;
          var v23873 = TypeScript$$14.NodeType;
          var v21005 = v23873.Empty;
          var v16274 = new v21004(v21005);
          var v8369 = new v16273(v16274);
          return new v8368(tryPart, v8369);
        } else {
          return tc$$1;
        }
      } else {
        if (tc$$1) {
          tryPart = tc$$1;
        }
        var finallyPart = this.parseFinally(errorRecoverySet$$36, parentModifiers$$6);
        var v8371 = TypeScript$$14.TryFinally;
        tf = new v8371(tryPart, finallyPart);
        tf.minChar = tryMinChar;
        tf.limChar = finallyPart.limChar;
        return tf;
      }
      return;
    }
    function v583(errorRecoverySet$$35, parentModifiers$$5) {
      var v8373 = this.scanner;
      var finMinChar = v8373.startPos;
      var preComments$$7 = this.parseComments();
      var v8374 = this.scanner;
      var v26830 = v8374.scan();
      this.currentToken = v26830;
      var v21006 = this.currentToken;
      var v16275 = v21006.tokenId;
      var v21007 = TypeScript$$14.TokenID;
      var v16276 = v21007.OpenBrace;
      var v8380 = v16275 != v16276;
      if (v8380) {
        this.reportParseError("Expected '{' to start body of finally statement");
        var v8379 = this.errorRecovery;
        if (v8379) {
          this.skip(errorRecoverySet$$35);
          var v8375 = TypeScript$$14.Finally;
          var v16277 = TypeScript$$14.Statement;
          var v21008 = TypeScript$$14.NodeType;
          var v16278 = v21008.Empty;
          var v8376 = new v16277(v16278);
          var efin = new v8375(v8376);
          var v16279 = efin.flags;
          var v21009 = TypeScript$$14.ASTFlags;
          var v16280 = v21009.Error;
          efin.flags = v16279 | v16280;
          var v8377 = this.scanner;
          efin.minChar = v8377.startPos;
          var v8378 = this.scanner;
          efin.limChar = v8378.pos;
          return efin;
        }
      }
      var v16281 = TypeScript$$14.AllowedElements;
      var v8381 = v16281.None;
      var finBody = this.parseStatement(errorRecoverySet$$35, v8381, parentModifiers$$5);
      var v8382 = TypeScript$$14.Finally;
      var fin = new v8382(finBody);
      fin.minChar = finMinChar;
      var v8383 = fin.body;
      fin.limChar = v8383.limChar;
      fin.preComments = preComments$$7;
      var v26831 = this.parseComments();
      fin.postComments = v26831;
      return fin;
    }
    function v582(errorRecoverySet$$34, parentModifiers$$4) {
      var v8384 = this.scanner;
      var catchMinChar = v8384.startPos;
      var preComments$$6 = this.parseComments();
      var v8385 = this.scanner;
      var v26832 = v8385.scan();
      this.currentToken = v26832;
      var v16282 = TypeScript$$14.TokenID;
      var v8386 = v16282.OpenParen;
      var v21010 = TypeScript$$14.ErrorRecoverySet;
      var v16283 = v21010.ExprStart;
      var v8387 = errorRecoverySet$$34 | v16283;
      this.checkCurrentToken(v8386, v8387);
      var v23874 = this.currentToken;
      var v21011 = v23874.tokenId;
      var v23875 = TypeScript$$14.TokenID;
      var v21012 = v23875.Identifier;
      var v16284 = v21011 != v21012;
      var v21015 = !v16284;
      if (v21015) {
        var v21013 = this.currentToken;
        var v21014 = this.strictMode;
        v16284 = TypeScript$$14.convertTokToID(v21013, v21014);
      }
      var v8396 = v16284;
      if (v8396) {
        this.reportParseError("Expected identifier in catch header");
        var v8395 = this.errorRecovery;
        if (v8395) {
          this.skip(errorRecoverySet$$34);
          var v8388 = TypeScript$$14.Catch;
          var v16285 = TypeScript$$14.VarDecl;
          var v21016 = TypeScript$$14.MissingIdentifier;
          var v16286 = new v21016;
          var v16287 = this.nestingLevel;
          var v8389 = new v16285(v16286, v16287);
          var v16288 = TypeScript$$14.Statement;
          var v21017 = TypeScript$$14.NodeType;
          var v16289 = v21017.Empty;
          var v8390 = new v16288(v16289);
          var ecatch = new v8388(v8389, v8390);
          var v8391 = ecatch.statement;
          v8391.minChar = catchMinChar;
          var v8392 = ecatch.statement;
          var v16290 = this.scanner;
          v8392.limChar = v16290.pos;
          var v8393 = this.scanner;
          ecatch.minChar = v8393.startPos;
          var v8394 = this.scanner;
          ecatch.limChar = v8394.pos;
          var v16291 = ecatch.flags;
          var v21018 = TypeScript$$14.ASTFlags;
          var v16292 = v21018.Error;
          ecatch.flags = v16291 | v16292;
          return ecatch;
        }
      }
      var v8397 = TypeScript$$14.VarDecl;
      var v16293 = TypeScript$$14.Identifier;
      var v16294 = this.currentToken;
      var v8398 = v16293.fromToken(v16294);
      var v8399 = this.nestingLevel;
      var param$$5 = new v8397(v8398, v8399);
      var v8400 = param$$5.id;
      var v16295 = this.scanner;
      v8400.minChar = v16295.startPos;
      var v8401 = param$$5.id;
      var v16296 = this.scanner;
      v8401.limChar = v16296.pos;
      var v8402 = param$$5.id;
      param$$5.minChar = v8402.minChar;
      var v8403 = param$$5.id;
      param$$5.limChar = v8403.limChar;
      var v8404 = this.scanner;
      var v26833 = v8404.scan();
      this.currentToken = v26833;
      var v8405 = this.scanner;
      var statementPos = v8405.pos;
      var v16297 = TypeScript$$14.TokenID;
      var v8406 = v16297.CloseParen;
      var v21019 = TypeScript$$14.ErrorRecoverySet;
      var v16298 = v21019.StmtStart;
      var v8407 = errorRecoverySet$$34 | v16298;
      this.checkCurrentToken(v8406, v8407);
      var v21020 = this.currentToken;
      var v16299 = v21020.tokenId;
      var v21021 = TypeScript$$14.TokenID;
      var v16300 = v21021.OpenBrace;
      var v8416 = v16299 != v16300;
      if (v8416) {
        this.reportParseError("Expected '{' to start catch body");
        var v8415 = this.errorRecovery;
        if (v8415) {
          this.skip(errorRecoverySet$$34);
          var v8408 = TypeScript$$14.Catch;
          var v16301 = TypeScript$$14.VarDecl;
          var v21022 = TypeScript$$14.MissingIdentifier;
          var v16302 = new v21022;
          var v16303 = this.nestingLevel;
          var v8409 = new v16301(v16302, v16303);
          var v16304 = TypeScript$$14.Statement;
          var v21023 = TypeScript$$14.NodeType;
          var v16305 = v21023.Empty;
          var v8410 = new v16304(v16305);
          ecatch = new v8408(v8409, v8410);
          var v8411 = ecatch.statement;
          v8411.minChar = catchMinChar;
          var v8412 = ecatch.statement;
          v8412.limChar = statementPos;
          var v8413 = this.scanner;
          ecatch.minChar = v8413.startPos;
          var v8414 = this.scanner;
          ecatch.limChar = v8414.pos;
          var v16306 = ecatch.flags;
          var v21024 = TypeScript$$14.ASTFlags;
          var v16307 = v21024.Error;
          ecatch.flags = v16306 | v16307;
          return ecatch;
        }
      }
      var v16308 = TypeScript$$14.AllowedElements;
      var v8417 = v16308.None;
      var catchStmt = this.parseStatement(errorRecoverySet$$34, v8417, parentModifiers$$4);
      var v8418 = TypeScript$$14.Catch;
      var catchNode$$1 = new v8418(param$$5, catchStmt);
      var v8419 = catchNode$$1.statement;
      v8419.minChar = catchMinChar;
      var v8420 = catchNode$$1.statement;
      v8420.limChar = statementPos;
      catchNode$$1.minChar = catchMinChar;
      catchNode$$1.limChar = catchStmt.limChar;
      catchNode$$1.preComments = preComments$$6;
      var v26834 = this.parseComments();
      catchNode$$1.postComments = v26834;
      return catchNode$$1;
    }
    function v581(tryNode$$2, errorRecoverySet$$33, parentModifiers$$3) {
      var v8421 = this.scanner;
      var minChar$$26 = v8421.startPos;
      var preComments$$5 = this.parseComments();
      var v8422 = this.scanner;
      var v26835 = v8422.scan();
      this.currentToken = v26835;
      var v21025 = this.currentToken;
      var v16309 = v21025.tokenId;
      var v21026 = TypeScript$$14.TokenID;
      var v16310 = v21026.OpenBrace;
      var v8425 = v16309 != v16310;
      if (v8425) {
        this.reportParseError("Expected '{'");
        var v8424 = this.errorRecovery;
        if (v8424) {
          var etryNode = tryNode$$2;
          etryNode.minChar = minChar$$26;
          var v8423 = this.scanner;
          var v26836 = v8423.lastTokenLimChar();
          etryNode.limChar = v26836;
          var v16311 = etryNode.flags;
          var v21027 = TypeScript$$14.ASTFlags;
          var v16312 = v21027.Error;
          etryNode.flags = v16311 | v16312;
          return etryNode;
        }
      }
      var v16313 = TypeScript$$14.AllowedElements;
      var v8426 = v16313.None;
      var v26837 = this.parseStatement(errorRecoverySet$$33, v8426, parentModifiers$$3);
      tryNode$$2.body = v26837;
      tryNode$$2.minChar = minChar$$26;
      var v8427 = tryNode$$2.body;
      tryNode$$2.limChar = v8427.limChar;
      tryNode$$2.preComments = preComments$$5;
      var v26838 = this.parseComments();
      tryNode$$2.postComments = v26838;
      return tryNode$$2;
    }
    function v580(errorRecoverySet$$32, ast$$43, allowCall$$1, inNew$$1, typeContext$$2, lhsMinChar, lhsLimChar) {
      var count$$4 = 0;
      var v8430 = !ast$$43;
      if (v8430) {
        var v8428 = TypeScript$$14.AST;
        var v16314 = TypeScript$$14.NodeType;
        var v8429 = v16314.EmptyExpr;
        ast$$43 = new v8428(v8429);
        ast$$43.isParenthesized = true;
      }
      ast$$43.minChar = lhsMinChar;
      ast$$43.limChar = lhsLimChar;
      for (;;) {
        var v16315 = this.currentToken;
        var v8468 = v16315.tokenId;
        switch(v8468) {
          case TypeScript$$14.TokenID.OpenParen:
            if (inNew$$1) {
              var callExpr = ast$$43;
              var v26839 = this.parseArgList(errorRecoverySet$$32);
              callExpr.arguments = v26839;
              inNew$$1 = false;
            } else {
              var v8431 = !allowCall$$1;
              if (v8431) {
                return ast$$43;
              }
              var v8432 = TypeScript$$14.CallExpression;
              var v16316 = TypeScript$$14.NodeType;
              var v8433 = v16316.Call;
              var v8434 = this.parseArgList(errorRecoverySet$$32);
              ast$$43 = new v8432(v8433, ast$$43, v8434);
              ast$$43.minChar = lhsMinChar;
            }
            var v8435 = this.scanner;
            ast$$43.limChar = v8435.pos;
            var v16317 = TypeScript$$14.TokenID;
            var v8436 = v16317.CloseParen;
            this.checkCurrentToken(v8436, errorRecoverySet$$32);
            break;
          case TypeScript$$14.TokenID.OpenBracket:
            var v8437 = this.scanner;
            var v26840 = v8437.scan();
            this.currentToken = v26840;
            var v21028 = this.currentToken;
            var v16318 = v21028.tokenId;
            var v21029 = TypeScript$$14.TokenID;
            var v16319 = v21029.CloseBracket;
            var v8444 = v16318 == v16319;
            if (v8444) {
              var v16320 = TypeContext.ArraySuffix;
              var v8443 = TypeScript$$14.hasFlag(typeContext$$2, v16320);
              if (v8443) {
                var v8438 = this.scanner;
                var v26841 = v8438.scan();
                this.currentToken = v26841;
                var v16321 = ast$$43.nodeType;
                var v21030 = TypeScript$$14.NodeType;
                var v16322 = v21030.TypeRef;
                var v8441 = v16321 == v16322;
                if (v8441) {
                  var typeRef$$1 = ast$$43;
                  typeRef$$1.arrayCount++;
                } else {
                  var v8439 = TypeScript$$14.BinaryExpression;
                  var v16323 = TypeScript$$14.NodeType;
                  var v8440 = v16323.Index;
                  ast$$43 = new v8439(v8440, ast$$43, null);
                }
                var v8442 = this.scanner;
                ast$$43.limChar = v8442.pos;
                break;
              }
            }
            var v8445 = TypeScript$$14.BinaryExpression;
            var v16324 = TypeScript$$14.NodeType;
            var v8446 = v16324.Index;
            var v23876 = TypeScript$$14.ErrorRecoverySet;
            var v21031 = v23876.RBrack;
            var v16325 = errorRecoverySet$$32 | v21031;
            var v21032 = TypeScript$$14.OperatorPrecedence;
            var v16326 = v21032.None;
            var v16327 = TypeContext.NoTypes;
            var v8447 = this.parseExpr(v16325, v16326, true, v16327);
            ast$$43 = new v8445(v8446, ast$$43, v8447);
            ast$$43.minChar = lhsMinChar;
            var v8448 = this.scanner;
            ast$$43.limChar = v8448.pos;
            var v16328 = TypeScript$$14.TokenID;
            var v8449 = v16328.CloseBracket;
            this.checkCurrentToken(v8449, errorRecoverySet$$32);
            break;
          case TypeScript$$14.TokenID.Dot:
            var name$$51 = null;
            var v8450 = this.scanner;
            var curpos$$2 = v8450.pos;
            var v8451 = this.scanner;
            var v26842 = v8451.scan();
            this.currentToken = v26842;
            var v16329 = this.currentToken;
            var v8453 = v16329 === undefined;
            if (v8453) {
              var v8452 = this.scanner;
              var v26843 = v8452.scan();
              this.currentToken = v26843;
              continue;
            }
            var v23877 = this.currentToken;
            var v21033 = v23877.tokenId;
            var v23878 = TypeScript$$14.TokenID;
            var v21034 = v23878.Identifier;
            var v16330 = v21033 == v21034;
            var v21036 = !v16330;
            if (v21036) {
              var v25271 = this.errorRecovery;
              var v23879 = !v25271;
              var v25273 = !v23879;
              if (v25273) {
                var v25908 = this.scanner;
                var v25272 = v25908.lastTokenHadNewline();
                v23879 = !v25272;
              }
              var v21035 = v23879;
              if (v21035) {
                var v23880 = this.currentToken;
                v21035 = TypeScript$$14.convertTokToIDName(v23880);
              }
              v16330 = v21035;
            }
            var v8461 = v16330;
            if (v8461) {
              var v16331 = ast$$43.flags;
              var v21037 = TypeScript$$14.ASTFlags;
              var v16332 = v21037.DotLHS;
              ast$$43.flags = v16331 | v16332;
              var v16333 = this.currentToken;
              var v8454 = v16333.getText();
              var v16334 = this.currentToken;
              var v8455 = v16334.hasEscapeSequence;
              var v16335 = this.scanner;
              var v8456 = v16335.startPos;
              name$$51 = this.createRef(v8454, v8455, v8456);
              var v8457 = this.scanner;
              name$$51.limChar = v8457.pos;
              var v8458 = this.scanner;
              var v26844 = v8458.scan();
              this.currentToken = v26844;
            } else {
              this.reportParseError("Expected identifier following dot");
              var v8460 = this.errorRecovery;
              if (v8460) {
                this.skip(errorRecoverySet$$32);
                var v16336 = ast$$43.flags;
                var v23881 = TypeScript$$14.ASTFlags;
                var v21038 = v23881.Error;
                var v23882 = TypeScript$$14.ASTFlags;
                var v21039 = v23882.DotLHS;
                var v16337 = v21038 | v21039;
                ast$$43.flags = v16336 | v16337;
                return ast$$43;
              } else {
                var v8459 = TypeScript$$14.MissingIdentifier;
                name$$51 = new v8459;
              }
            }
            var v8462 = TypeScript$$14.BinaryExpression;
            var v16338 = TypeScript$$14.NodeType;
            var v8463 = v16338.Dot;
            ast$$43 = new v8462(v8463, ast$$43, name$$51);
            ast$$43.minChar = lhsMinChar;
            var v8464 = this.scanner;
            var v26845 = v8464.lastTokenLimChar();
            ast$$43.limChar = v26845;
            break;
          case TypeScript$$14.TokenID.EqualsGreaterThan:
            var v16339 = TypeScript$$14.Modifiers;
            var v8465 = v16339.None;
            var v8466 = {preProcessedLambdaArgs:ast$$43};
            ast$$43 = this.parseFncDecl(errorRecoverySet$$32, false, false, false, null, false, false, false, v8465, v8466, false);
            var v16340 = ast$$43.fncFlags;
            var v21040 = TypeScript$$14.FncFlags;
            var v16341 = v21040.IsFunctionExpression;
            ast$$43.fncFlags = v16340 | v16341;
            ast$$43.minChar = lhsMinChar;
            var v8467 = this.scanner;
            var v26846 = v8467.lastTokenLimChar();
            ast$$43.limChar = v26846;
            break;
          default:
            return ast$$43;
        }
      }
      return;
    }
    function v579(errorRecoverySet$$31, minPrecedence, allowIn$$1, typeContext$$1, possiblyInLambda) {
      var v16342 = typeof possiblyInLambda;
      var v8469 = v16342 === "undefined";
      if (v8469) {
        possiblyInLambda = false;
      }
      var ast$$42 = null;
      var v16343 = this.currentToken;
      var v8470 = v16343.tokenId;
      var tokenInfo$$1 = TypeScript$$14.lookupToken(v8470);
      var canAssign = true;
      var idHint$$1 = null;
      var v8471 = this.scanner;
      var minChar$$25 = v8471.startPos;
      var preComments$$4 = this.parseComments();
      var exprIsAnonLambda = false;
      var v16344 = tokenInfo$$1 != undefined;
      if (v16344) {
        var v21041 = tokenInfo$$1.unopNodeType;
        var v23883 = TypeScript$$14.NodeType;
        var v21042 = v23883.None;
        v16344 = v21041 != v21042;
      }
      var v8498 = v16344;
      if (v8498) {
        canAssign = false;
        var v8472 = this.scanner;
        var v26847 = v8472.scan();
        this.currentToken = v26847;
        var v21043 = TypeScript$$14.ErrorRecoverySet;
        var v16345 = v21043.BinOp;
        var v8473 = v16345 | errorRecoverySet$$31;
        var v8474 = tokenInfo$$1.unopPrecedence;
        var v8475 = TypeContext.NoTypes;
        var tempExpr = this.parseExpr(v8473, v8474, allowIn$$1, v8475);
        var v21044 = tokenInfo$$1.unopNodeType;
        var v23884 = TypeScript$$14.NodeType;
        var v21045 = v23884.Pos;
        var v16346 = v21044 == v21045;
        if (v16346) {
          var v21046 = tempExpr.nodeType;
          var v23885 = TypeScript$$14.NodeType;
          var v21047 = v23885.NumberLit;
          v16346 = v21046 == v21047;
        }
        var v8481 = v16346;
        if (v8481) {
          ast$$42 = tempExpr;
        } else {
          var v21048 = tokenInfo$$1.unopNodeType;
          var v23886 = TypeScript$$14.NodeType;
          var v21049 = v23886.Neg;
          var v16347 = v21048 == v21049;
          if (v16347) {
            var v21050 = tempExpr.nodeType;
            var v23887 = TypeScript$$14.NodeType;
            var v21051 = v23887.NumberLit;
            v16347 = v21050 == v21051;
          }
          var v8480 = v16347;
          if (v8480) {
            var numLit$$1 = tempExpr;
            var v8476 = numLit$$1.value;
            numLit$$1.value = -v8476;
            var v16348 = numLit$$1.value;
            var v8477 = v16348 == 0;
            if (v8477) {
              numLit$$1.isNegativeZero = true;
            }
            ast$$42 = tempExpr;
          } else {
            var v8478 = TypeScript$$14.UnaryExpression;
            var v8479 = tokenInfo$$1.unopNodeType;
            ast$$42 = new v8478(v8479, tempExpr);
            ast$$42.limChar = tempExpr.limChar;
          }
        }
        ast$$42.minChar = minChar$$25;
      } else {
        var v23888 = TypeScript$$14.ErrorRecoverySet;
        var v21052 = v23888.BinOp;
        var v23889 = TypeScript$$14.ErrorRecoverySet;
        var v21053 = v23889.AddOp;
        var v16349 = v21052 | v21053;
        var v8482 = v16349 | errorRecoverySet$$31;
        ast$$42 = this.parseTerm(v8482, true, typeContext$$1, false);
        var id$$13;
        var temp$$14;
        var v16350 = ast$$42.nodeType;
        var v21054 = TypeScript$$14.NodeType;
        var v16351 = v21054.Name;
        var v8492 = v16350 == v16351;
        if (v8492) {
          id$$13 = ast$$42;
          idHint$$1 = id$$13.actualText;
        } else {
          var v16352 = ast$$42.nodeType;
          var v21055 = TypeScript$$14.NodeType;
          var v16353 = v21055.Dot;
          var v8491 = v16352 == v16353;
          if (v8491) {
            var subsumedExpr = false;
            var v25274 = this.inferPropertiesFromThisAssignment;
            if (v25274) {
              var v26312 = this.currentToken;
              var v26180 = v26312.tokenId;
              var v26313 = TypeScript$$14.TokenID;
              var v26181 = v26313.Colon;
              var v25909 = v26180 == v26181;
              var v26184 = !v25909;
              if (v26184) {
                var v26314 = this.currentToken;
                var v26182 = v26314.tokenId;
                var v26315 = TypeScript$$14.TokenID;
                var v26183 = v26315.Equals;
                v25909 = v26182 == v26183;
              }
              v25274 = v25909;
            }
            var v23890 = v25274;
            if (v23890) {
              v23890 = this.parsingClassConstructorDefinition;
            }
            var v21056 = v23890;
            if (v21056) {
              var v23891 = this.nestingLevel;
              var v25275 = this.currentClassDefinition;
              var v23892 = v25275.constructorNestingLevel;
              v21056 = v23891 == v23892;
            }
            var v16354 = v21056;
            if (v16354) {
              var v23893 = ast$$42.operand1;
              var v21057 = v23893.nodeType;
              var v23894 = TypeScript$$14.NodeType;
              var v21058 = v23894.This;
              v16354 = v21057 == v21058;
            }
            var v8487 = v16354;
            if (v8487) {
              var v21059 = ast$$42.operand2;
              var v16355 = v21059.nodeType;
              var v21060 = TypeScript$$14.NodeType;
              var v16356 = v21060.Name;
              var v8486 = v16355 == v16356;
              if (v8486) {
                var op2ID = ast$$42.operand2;
                var v23895 = this.currentClassDefinition;
                var v21061 = v23895.knownMemberNames;
                var v21062 = op2ID.actualText;
                var v16357 = v21061[v21062];
                var v8485 = !v16357;
                if (v8485) {
                  var v8483 = ast$$42.minChar;
                  var v16358 = TypeScript$$14.Modifiers;
                  var v8484 = v16358.Public;
                  ast$$42 = this.parseClassMemberVariableDeclaration(op2ID, v8483, true, errorRecoverySet$$31, v8484);
                  subsumedExpr = true;
                }
              }
            }
            var v8490 = !subsumedExpr;
            if (v8490) {
              temp$$14 = ast$$42;
              var v16359 = temp$$14.nodeType;
              var v21063 = TypeScript$$14.NodeType;
              var v16360 = v21063.Dot;
              var v8488 = v16359 == v16360;
              for (;v8488;) {
                var binExpr$$1 = temp$$14;
                temp$$14 = binExpr$$1.operand2;
                var v16361 = temp$$14.nodeType;
                var v21064 = TypeScript$$14.NodeType;
                var v16362 = v21064.Dot;
                v8488 = v16361 == v16362;
              }
              var v16363 = temp$$14.nodeType;
              var v21065 = TypeScript$$14.NodeType;
              var v16364 = v21065.Name;
              var v8489 = v16363 == v16364;
              if (v8489) {
                id$$13 = temp$$14;
                idHint$$1 = id$$13.actualText;
              }
            }
          }
        }
        var v23896 = this.scanner;
        var v21066 = v23896.lastTokenHadNewline();
        var v16365 = !v21066;
        if (v16365) {
          var v25276 = this.currentToken;
          var v23897 = v25276.tokenId;
          var v25277 = TypeScript$$14.TokenID;
          var v23898 = v25277.PlusPlus;
          var v21067 = v23897 == v23898;
          var v23901 = !v21067;
          if (v23901) {
            var v25278 = this.currentToken;
            var v23899 = v25278.tokenId;
            var v25279 = TypeScript$$14.TokenID;
            var v23900 = v25279.MinusMinus;
            v21067 = v23899 == v23900;
          }
          v16365 = v21067;
        }
        var v8497 = v16365;
        if (v8497) {
          canAssign = false;
          var operand$$2 = ast$$42;
          var v8493 = TypeScript$$14.UnaryExpression;
          var v16366;
          var v25280 = this.currentToken;
          var v23902 = v25280.tokenId;
          var v25281 = TypeScript$$14.TokenID;
          var v23903 = v25281.PlusPlus;
          var v21070 = v23902 == v23903;
          if (v21070) {
            var v21068 = TypeScript$$14.NodeType;
            v16366 = v21068.IncPost;
          } else {
            var v21069 = TypeScript$$14.NodeType;
            v16366 = v21069.DecPost;
          }
          var v8494 = v16366;
          ast$$42 = new v8493(v8494, operand$$2);
          var v8495 = this.scanner;
          ast$$42.limChar = v8495.pos;
          ast$$42.minChar = operand$$2.minChar;
          var v8496 = this.scanner;
          var v26848 = v8496.scan();
          this.currentToken = v26848;
        }
      }
      for (;;) {
        var v16367 = this.currentToken;
        var v8499 = v16367.tokenId;
        tokenInfo$$1 = TypeScript$$14.lookupToken(v8499);
        var v16368 = tokenInfo$$1 == undefined;
        var v21073 = !v16368;
        if (v21073) {
          var v21071 = tokenInfo$$1.binopNodeType;
          var v23904 = TypeScript$$14.NodeType;
          var v21072 = v23904.None;
          v16368 = v21071 == v21072;
        }
        var v8500 = v16368;
        if (v8500) {
          break;
        }
        var v16369 = !allowIn$$1;
        if (v16369) {
          var v21074 = tokenInfo$$1.binopNodeType;
          var v23905 = TypeScript$$14.NodeType;
          var v21075 = v23905.In;
          v16369 = v21074 == v21075;
        }
        var v8501 = v16369;
        if (v8501) {
          break;
        }
        var v16370 = tokenInfo$$1.binopPrecedence;
        var v21076 = TypeScript$$14.OperatorPrecedence;
        var v16371 = v21076.Assignment;
        var v8505 = v16370 == v16371;
        if (v8505) {
          var v16372 = tokenInfo$$1.binopPrecedence;
          var v8502 = v16372 < minPrecedence;
          if (v8502) {
            break;
          }
          var v8503 = !canAssign;
          if (v8503) {
            this.reportParseError("illegal assignment");
          }
        } else {
          var v16373 = tokenInfo$$1.binopPrecedence;
          var v8504 = v16373 <= minPrecedence;
          if (v8504) {
            break;
          }
        }
        var v21077 = possiblyInLambda;
        if (v21077) {
          var v25282 = this.currentToken;
          var v23906 = v25282.tokenId;
          var v25283 = TypeScript$$14.TokenID;
          var v23907 = v25283.Comma;
          v21077 = v23906 == v23907;
        }
        var v16374 = v21077;
        if (v16374) {
          var v25284 = this.scanner;
          var v23908 = v25284.getLookAheadToken();
          var v21078 = v23908.tokenId;
          var v23909 = TypeScript$$14.TokenID;
          var v21079 = v23909.DotDotDot;
          v16374 = v21078 == v21079;
        }
        var v8506 = v16374;
        if (v8506) {
          exprIsAnonLambda = true;
          canAssign = false;
          ast$$42 = this.parseLambdaExpr(errorRecoverySet$$31, ast$$42, false, true);
          break;
        }
        var v8507 = this.scanner;
        var v26849 = v8507.scan();
        this.currentToken = v26849;
        canAssign = false;
        var v16375 = tokenInfo$$1.binopNodeType;
        var v21080 = TypeScript$$14.NodeType;
        var v16376 = v21080.ConditionalExpression;
        var v8523 = v16375 == v16376;
        if (v8523) {
          var v16377 = possiblyInLambda;
          if (v16377) {
            var v26185 = this.currentToken;
            var v25910 = v26185.tokenId;
            var v26186 = TypeScript$$14.TokenID;
            var v25911 = v26186.Equals;
            var v25285 = v25910 == v25911;
            var v25914 = !v25285;
            if (v25914) {
              var v26187 = this.currentToken;
              var v25912 = v26187.tokenId;
              var v26188 = TypeScript$$14.TokenID;
              var v25913 = v26188.Colon;
              v25285 = v25912 == v25913;
            }
            var v23910 = v25285;
            var v25288 = !v23910;
            if (v25288) {
              var v25915 = this.currentToken;
              var v25286 = v25915.tokenId;
              var v25916 = TypeScript$$14.TokenID;
              var v25287 = v25916.CloseParen;
              v23910 = v25286 == v25287;
            }
            var v21081 = v23910;
            var v23913 = !v21081;
            if (v23913) {
              var v25289 = this.currentToken;
              var v23911 = v25289.tokenId;
              var v25290 = TypeScript$$14.TokenID;
              var v23912 = v25290.Comma;
              v21081 = v23911 == v23912;
            }
            v16377 = v21081;
          }
          var v8517 = v16377;
          if (v8517) {
            exprIsAnonLambda = true;
            canAssign = true;
          } else {
            this.prevExpr = ast$$42;
            var v21082 = TypeScript$$14.ErrorRecoverySet;
            var v16378 = v21082.Colon;
            var v8508 = errorRecoverySet$$31 | v16378;
            var v16379 = TypeScript$$14.OperatorPrecedence;
            var v8509 = v16379.Assignment;
            var v8510 = TypeContext.NoTypes;
            var whenTrue = this.parseExpr(v8508, v8509, allowIn$$1, v8510);
            this.prevExpr = null;
            var v16380 = TypeScript$$14.TokenID;
            var v8511 = v16380.Colon;
            var v21083 = TypeScript$$14.ErrorRecoverySet;
            var v16381 = v21083.ExprStart;
            var v8512 = errorRecoverySet$$31 | v16381;
            this.checkCurrentToken(v8511, v8512);
            var v21084 = TypeScript$$14.ErrorRecoverySet;
            var v16382 = v21084.BinOp;
            var v8513 = errorRecoverySet$$31 | v16382;
            var v16383 = TypeScript$$14.OperatorPrecedence;
            var v8514 = v16383.Assignment;
            var v8515 = TypeContext.NoTypes;
            var whenFalse = this.parseExpr(v8513, v8514, allowIn$$1, v8515);
            var v8516 = TypeScript$$14.ConditionalExpression;
            ast$$42 = new v8516(ast$$42, whenTrue, whenFalse);
          }
        } else {
          var tc = TypeContext.NoTypes;
          var binExpr2;
          var v8518 = TypeScript$$14.BinaryExpression;
          var v8519 = tokenInfo$$1.binopNodeType;
          var v23914 = TypeScript$$14.ErrorRecoverySet;
          var v21085 = v23914.BinOp;
          var v16384 = errorRecoverySet$$31 | v21085;
          var v16385 = tokenInfo$$1.binopPrecedence;
          var v16386 = TypeContext.NoTypes;
          var v8520 = this.parseExpr(v16384, v16385, allowIn$$1, v16386, possiblyInLambda);
          binExpr2 = new v8518(v8519, ast$$42, v8520);
          var v21086 = binExpr2.operand2;
          var v16387 = v21086.nodeType;
          var v21087 = TypeScript$$14.NodeType;
          var v16388 = v21087.FuncDecl;
          var v8521 = v16387 == v16388;
          if (v8521) {
            var funcDecl$$12 = binExpr2.operand2;
            funcDecl$$12.hint = idHint$$1;
          }
          binExpr2.minChar = ast$$42.minChar;
          var v8522 = this.scanner;
          var v26850 = v8522.lastTokenLimChar();
          binExpr2.limChar = v26850;
          idHint$$1 = null;
          ast$$42 = binExpr2;
        }
      }
      if (canAssign) {
        var v16389 = ast$$42.flags;
        var v21088 = TypeScript$$14.ASTFlags;
        var v16390 = v21088.Writeable;
        ast$$42.flags = v16389 | v16390;
      }
      var v8527 = !exprIsAnonLambda;
      if (v8527) {
        ast$$42.minChar = minChar$$25;
        var v8524 = ast$$42.limChar;
        var v16391 = this.scanner;
        var v8525 = v16391.lastTokenLimChar();
        var v26851 = TypeScript$$14.max(v8524, v8525);
        ast$$42.limChar = v26851;
        ast$$42.preComments = preComments$$4;
        var v16392 = this.scanner;
        var v8526 = v16392.line;
        var v26852 = this.parseCommentsForLine(v8526);
        ast$$42.postComments = v26852;
      }
      return ast$$42;
    }
    function v578(errorRecoverySet$$30, lambdaArgs, skipNextRParen, expectClosingRParen$$2) {
      var v16393 = TypeScript$$14.Modifiers;
      var v8528 = v16393.None;
      var v8529 = {preProcessedLambdaArgs:lambdaArgs};
      var ast$$41 = this.parseFncDecl(errorRecoverySet$$30, false, false, false, null, false, false, false, v8528, v8529, expectClosingRParen$$2);
      var v16394 = ast$$41.fncFlags;
      var v21089 = TypeScript$$14.FncFlags;
      var v16395 = v21089.IsFunctionExpression;
      ast$$41.fncFlags = v16394 | v16395;
      var v16396 = ast$$41.fncFlags;
      var v21090 = TypeScript$$14.FncFlags;
      var v16397 = v21090.IsFatArrowFunction;
      ast$$41.fncFlags = v16396 | v16397;
      var v8530 = !skipNextRParen;
      if (v8530) {
        var v16398 = ast$$41.flags;
        var v21091 = TypeScript$$14.ASTFlags;
        var v16399 = v21091.SkipNextRParen;
        ast$$41.flags = v16398 | v16399;
      }
      var v8531 = this.scanner;
      var v26853 = v8531.lastTokenLimChar();
      ast$$41.limChar = v26853;
      return ast$$41;
    }
    function v577(errorRecoverySet$$29, allowCall, typeContext, inCast) {
      var ast$$40 = null;
      var sawId = false;
      var inNew = false;
      var v8532 = this.scanner;
      var minChar$$24 = v8532.startPos;
      var v8533 = this.scanner;
      var limChar$$7 = v8533.pos;
      var parseAsLambda = false;
      var expectlambdaRParen = false;
      var v16400 = this.currentToken;
      var v8567 = v16400.tokenId;
      switch(v8567) {
        case TypeScript$$14.TokenID.Number:
        ;
        case TypeScript$$14.TokenID.Bool:
        ;
        case TypeScript$$14.TokenID.Any:
        ;
        case TypeScript$$14.TokenID.String:
          var v8534 = TypeScript$$14.Identifier;
          var v21092 = TypeScript$$14.tokenTable;
          var v23915 = this.currentToken;
          var v21093 = v23915.tokenId;
          var v16401 = v21092[v21093];
          var v8535 = v16401.text;
          var tid = new v8534(v8535);
          var v16402 = TypeContext.Primitive;
          var v8537 = TypeScript$$14.hasFlag(typeContext, v16402);
          if (v8537) {
            var v8536 = TypeScript$$14.TypeReference;
            ast$$40 = new v8536(tid, 0);
            sawId = true;
          } else {
            ast$$40 = tid;
            sawId = true;
          }
          ast$$40.minChar = minChar$$24;
          var v8538 = this.scanner;
          var v26854 = v8538.scan();
          this.currentToken = v26854;
          var v8539 = this.scanner;
          limChar$$7 = v8539.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.This:
          var v8540 = TypeScript$$14.AST;
          var v16403 = TypeScript$$14.NodeType;
          var v8541 = v16403.This;
          ast$$40 = new v8540(v8541);
          ast$$40.minChar = minChar$$24;
          var v8542 = this.scanner;
          var v26855 = v8542.scan();
          this.currentToken = v26855;
          var v8543 = this.scanner;
          limChar$$7 = v8543.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.Super:
          var v8544 = TypeScript$$14.AST;
          var v16404 = TypeScript$$14.NodeType;
          var v8545 = v16404.Super;
          ast$$40 = new v8544(v8545);
          ast$$40.minChar = minChar$$24;
          var v8546 = this.scanner;
          var v26856 = v8546.scan();
          this.currentToken = v26856;
          var v8547 = this.scanner;
          limChar$$7 = v8547.lastTokenLimChar();
          break;
        case TypeScript$$14.TokenID.True:
          var v8548 = TypeScript$$14.AST;
          var v16405 = TypeScript$$14.NodeType;
          var v8549 = v16405.True;
          ast$$40 = new v8548(v8549);
          var v8550 = this.scanner;
          var v26857 = v8550.scan();
          this.currentToken = v26857;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.False:
          var v8551 = TypeScript$$14.AST;
          var v16406 = TypeScript$$14.NodeType;
          var v8552 = v16406.False;
          ast$$40 = new v8551(v8552);
          var v8553 = this.scanner;
          var v26858 = v8553.scan();
          this.currentToken = v26858;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.Null:
          var v8554 = TypeScript$$14.AST;
          var v16407 = TypeScript$$14.NodeType;
          var v8555 = v16407.Null;
          ast$$40 = new v8554(v8555);
          var v8556 = this.scanner;
          var v26859 = v8556.scan();
          this.currentToken = v26859;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.New:
          var v8557 = this.scanner;
          minChar$$24 = v8557.pos;
          var v8558 = this.scanner;
          var v26860 = v8558.scan();
          this.currentToken = v26860;
          var v8559 = TypeContext.AllSimpleTypes;
          var target$$30 = this.parseTerm(errorRecoverySet$$29, false, v8559, inCast);
          var v21094 = target$$30.nodeType;
          var v23916 = TypeScript$$14.NodeType;
          var v21095 = v23916.Error;
          var v16408 = v21094 == v21095;
          var v21097 = !v16408;
          if (v21097) {
            var v23917 = target$$30.nodeType;
            var v25291 = TypeScript$$14.NodeType;
            var v23918 = v25291.Index;
            var v21096 = v23917 == v23918;
            if (v21096) {
              var v25292 = target$$30.operand1;
              var v23919 = v25292.nodeType;
              var v25293 = TypeScript$$14.NodeType;
              var v23920 = v25293.TypeRef;
              v21096 = v23919 == v23920;
            }
            v16408 = v21096;
          }
          var v8563 = v16408;
          if (v8563) {
            this.reportParseError("Cannot invoke 'new' on this expression");
          } else {
            var v8560 = TypeScript$$14.CallExpression;
            var v16409 = TypeScript$$14.NodeType;
            var v8561 = v16409.New;
            ast$$40 = new v8560(v8561, target$$30, null);
            ast$$40.minChar = minChar$$24;
            var v8562 = this.scanner;
            limChar$$7 = v8562.lastTokenLimChar();
            inNew = true;
          }
          break;
        case TypeScript$$14.TokenID.Function:
          var v8564 = this.scanner;
          minChar$$24 = v8564.pos;
          var v16410 = TypeScript$$14.Modifiers;
          var v8565 = v16410.None;
          ast$$40 = this.parseFncDecl(errorRecoverySet$$29, false, false, false, null, false, false, false, v8565, null, true);
          var v16411 = ast$$40.fncFlags;
          var v21098 = TypeScript$$14.FncFlags;
          var v16412 = v21098.IsFunctionExpression;
          ast$$40.fncFlags = v16411 | v16412;
          ast$$40.minChar = minChar$$24;
          var v8566 = this.scanner;
          limChar$$7 = v8566.lastTokenLimChar();
          ast$$40.limChar = limChar$$7;
      }
      var v8574 = ast$$40 == null;
      if (v8574) {
        var v23921 = this.currentToken;
        var v21099 = v23921.tokenId;
        var v23922 = TypeScript$$14.TokenID;
        var v21100 = v23922.Identifier;
        var v16413 = v21099 == v21100;
        var v21103 = !v16413;
        if (v21103) {
          var v21101 = this.currentToken;
          var v21102 = this.strictMode;
          v16413 = TypeScript$$14.convertTokToID(v21101, v21102);
        }
        var v8573 = v16413;
        if (v8573) {
          var v8568 = this.currentToken;
          var idText$$1 = v8568.getText();
          var v16414 = this.currentToken;
          var v8569 = v16414.hasEscapeSequence;
          ast$$40 = this.createRef(idText$$1, v8569, minChar$$24);
          sawId = true;
          ast$$40.minChar = minChar$$24;
          var v8570 = this.scanner;
          var v26861 = v8570.scan();
          this.currentToken = v26861;
          var v21104 = this.currentToken;
          var v16415 = v21104.tokenId;
          var v21105 = TypeScript$$14.TokenID;
          var v16416 = v21105.Question;
          var v8571 = v16415 == v16416;
          if (v8571) {
            var v16417 = ast$$40.flags;
            var v21106 = TypeScript$$14.ASTFlags;
            var v16418 = v21106.PossibleOptionalParameter;
            ast$$40.flags = v16417 | v16418;
          }
          var v8572 = this.scanner;
          limChar$$7 = v8572.lastTokenLimChar();
        }
      }
      if (inCast) {
        var v16419 = TypeScript$$14.TokenID;
        var v8575 = v16419.GreaterThan;
        this.checkCurrentToken(v8575, errorRecoverySet$$29);
      }
      var v8636 = ast$$40 == null;
      if (v8636) {
        var v16420 = this.currentToken;
        var v8635 = v16420.tokenId;
        switch(v8635) {
          case TypeScript$$14.TokenID.OpenParen:
            var v8576 = this.scanner;
            minChar$$24 = v8576.pos;
            var v16421 = this.scanner;
            var v8577 = v16421.previousToken();
            var prevTokId = v8577.tokenId;
            var v8578 = this.scanner;
            var v26862 = v8578.scan();
            this.currentToken = v26862;
            var v25294 = TypeScript$$14.TokenID;
            var v23923 = v25294.OpenParen;
            var v21107 = prevTokId == v23923;
            var v23925 = !v21107;
            if (v23925) {
              var v25295 = TypeScript$$14.TokenID;
              var v23924 = v25295.Comma;
              v21107 = prevTokId == v23924;
            }
            var v16422 = v21107;
            var v21109 = !v16422;
            if (v21109) {
              var v23926 = TypeScript$$14.TokenID;
              var v21108 = v23926.EqualsEquals;
              v16422 = prevTokId == v21108;
            }
            var v8579 = v16422;
            var v16424 = !v8579;
            if (v16424) {
              var v21110 = TypeScript$$14.TokenID;
              var v16423 = v21110.Colon;
              v8579 = prevTokId == v16423;
            }
            var couldBeLambda = v8579;
            var v16425 = couldBeLambda;
            if (v16425) {
              var v23927 = this.currentToken;
              var v21111 = v23927.tokenId;
              var v23928 = TypeScript$$14.TokenID;
              var v21112 = v23928.CloseParen;
              v16425 = v21111 == v21112;
            }
            var v8587 = v16425;
            if (v8587) {
              parseAsLambda = true;
              expectlambdaRParen = false;
              var v8580 = this.scanner;
              var v26863 = v8580.scan();
              this.currentToken = v26863;
            } else {
              var v16426 = couldBeLambda;
              if (v16426) {
                var v23929 = this.currentToken;
                var v21113 = v23929.tokenId;
                var v23930 = TypeScript$$14.TokenID;
                var v21114 = v23930.DotDotDot;
                v16426 = v21113 == v21114;
              }
              var v8586 = v16426;
              if (v8586) {
                parseAsLambda = true;
                expectlambdaRParen = true;
              } else {
                var v21115 = TypeScript$$14.ErrorRecoverySet;
                var v16427 = v21115.RParen;
                var v8581 = errorRecoverySet$$29 | v16427;
                var v16428 = TypeScript$$14.OperatorPrecedence;
                var v8582 = v16428.None;
                var v8583 = TypeContext.NoTypes;
                ast$$40 = this.parseExpr(v8581, v8582, true, v8583, couldBeLambda);
                var v8584 = this.scanner;
                limChar$$7 = v8584.lastTokenLimChar();
                var v16429 = couldBeLambda;
                if (v16429) {
                  var v23931 = ast$$40.nodeType;
                  var v25296 = TypeScript$$14.NodeType;
                  var v23932 = v25296.Name;
                  var v21116 = v23931 == v23932;
                  var v23935 = !v21116;
                  if (v23935) {
                    var v23933 = ast$$40.nodeType;
                    var v25297 = TypeScript$$14.NodeType;
                    var v23934 = v25297.Comma;
                    v21116 = v23933 == v23934;
                  }
                  v16429 = v21116;
                }
                var v8585 = v16429;
                if (v8585) {
                  var v23936 = this.currentToken;
                  var v21117 = v23936.tokenId;
                  var v23937 = TypeScript$$14.TokenID;
                  var v21118 = v23937.Colon;
                  var v16430 = v21117 == v21118;
                  var v21121 = !v16430;
                  if (v21121) {
                    var v23938 = this.currentToken;
                    var v21119 = v23938.tokenId;
                    var v23939 = TypeScript$$14.TokenID;
                    var v21120 = v23939.Question;
                    v16430 = v21119 == v21120;
                  }
                  v8585 = v16430;
                }
                parseAsLambda = v8585;
                expectlambdaRParen = true;
              }
            }
            var v16431 = ast$$40;
            if (v16431) {
              v16431 = !parseAsLambda;
            }
            var v8592 = v16431;
            if (v8592) {
              var v16432 = ast$$40.flags;
              var v21122 = TypeScript$$14.ASTFlags;
              var v16433 = v21122.SkipNextRParen;
              var v8590 = TypeScript$$14.hasFlag(v16432, v16433);
              if (v8590) {
                var v8588 = ast$$40.flags;
                var v21123 = TypeScript$$14.ASTFlags;
                var v16434 = v21123.SkipNextRParen;
                var v8589 = ~v16434;
                ast$$40.flags = v8588 & v8589;
                break;
              }
              var v16435 = TypeScript$$14.TokenID;
              var v8591 = v16435.CloseParen;
              this.checkCurrentToken(v8591, errorRecoverySet$$29);
              ast$$40.isParenthesized = true;
            }
            break;
          case TypeScript$$14.TokenID.NumberLiteral:
            var numTok = this.currentToken;
            var v8593 = this.scanner;
            var v26864 = v8593.scan();
            this.currentToken = v26864;
            var v8594 = TypeScript$$14.NumberLiteral;
            var v8595 = numTok.value;
            var v8596 = numTok.hasEmptyFraction;
            ast$$40 = new v8594(v8595, v8596);
            ast$$40.minChar = minChar$$24;
            var v8597 = this.scanner;
            limChar$$7 = v8597.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.StringLiteral:
            var v8598 = TypeScript$$14.StringLiteral;
            var v16436 = this.currentToken;
            var v8599 = v16436.getText();
            ast$$40 = new v8598(v8599);
            var v8600 = this.scanner;
            var v26865 = v8600.scan();
            this.currentToken = v26865;
            ast$$40.minChar = minChar$$24;
            var v8601 = this.scanner;
            limChar$$7 = v8601.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.RegularExpressionLiteral:
            var rtok = this.currentToken;
            var v8602 = TypeScript$$14.RegexLiteral;
            var v8603 = rtok.regex;
            ast$$40 = new v8602(v8603);
            var v8604 = this.scanner;
            var v26866 = v8604.scan();
            this.currentToken = v26866;
            ast$$40.minChar = minChar$$24;
            var v8605 = this.scanner;
            limChar$$7 = v8605.lastTokenLimChar();
            break;
          case TypeScript$$14.TokenID.OpenBracket:
            var v8606 = this.scanner;
            minChar$$24 = v8606.startPos;
            var v8607 = this.scanner;
            var v26867 = v8607.scan();
            this.currentToken = v26867;
            var v21124 = TypeScript$$14.ErrorRecoverySet;
            var v16437 = v21124.RBrack;
            var v8608 = v16437 | errorRecoverySet$$29;
            ast$$40 = this.parseArrayLiteral(v8608);
            ast$$40.minChar = minChar$$24;
            var v8609 = this.scanner;
            limChar$$7 = v8609.pos;
            var v16438 = TypeScript$$14.TokenID;
            var v8610 = v16438.CloseBracket;
            this.checkCurrentToken(v8610, errorRecoverySet$$29);
            break;
          case TypeScript$$14.TokenID.OpenBrace:
            var v8611 = this.scanner;
            minChar$$24 = v8611.startPos;
            var v8612 = this.scanner;
            var v26868 = v8612.scan();
            this.currentToken = v26868;
            var v21125 = TypeScript$$14.ErrorRecoverySet;
            var v16439 = v21125.RCurly;
            var v8613 = v16439 | errorRecoverySet$$29;
            var members$$11 = this.parseMemberList(v8613);
            var v16440 = TypeScript$$14.TokenID;
            var v8614 = v16440.CloseBrace;
            this.checkCurrentToken(v8614, errorRecoverySet$$29);
            var v8615 = TypeScript$$14.UnaryExpression;
            var v16441 = TypeScript$$14.NodeType;
            var v8616 = v16441.ObjectLit;
            ast$$40 = new v8615(v8616, members$$11);
            ast$$40.minChar = minChar$$24;
            var v8617 = this.scanner;
            limChar$$7 = v8617.lastTokenLimChar();
            members$$11.minChar = minChar$$24;
            members$$11.limChar = limChar$$7;
            break;
          case TypeScript$$14.TokenID.LessThan:
            var v8618 = this.scanner;
            minChar$$24 = v8618.startPos;
            var v8619 = this.scanner;
            var v26869 = v8619.scan();
            this.currentToken = v26869;
            var v16442 = TypeScript$$14.ErrorRecoverySet;
            var v8620 = v16442.BinOp;
            var term$$3 = this.parseTypeReference(v8620, false);
            var v16443 = TypeScript$$14.TokenID;
            var v8621 = v16443.GreaterThan;
            this.checkCurrentToken(v8621, errorRecoverySet$$29);
            var v8622 = TypeScript$$14.UnaryExpression;
            var v16444 = TypeScript$$14.NodeType;
            var v8623 = v16444.TypeAssertion;
            var v21126 = TypeScript$$14.OperatorPrecedence;
            var v16445 = v21126.Unary;
            var v16446 = TypeContext.NoTypes;
            var v8624 = this.parseExpr(errorRecoverySet$$29, v16445, false, v16446);
            ast$$40 = new v8622(v8623, v8624);
            ast$$40.castTerm = term$$3;
            break;
          default:
            var v16447 = this.prevExpr;
            if (v16447) {
              var v23940 = this.prevExpr;
              var v21127 = v23940.flags;
              var v23941 = TypeScript$$14.ASTFlags;
              var v21128 = v23941.PossibleOptionalParameter;
              v16447 = TypeScript$$14.hasFlag(v21127, v21128);
            }
            var v8634 = v16447;
            if (v8634) {
              parseAsLambda = true;
              ast$$40 = this.prevExpr;
            } else {
              this.reportParseError("Check format of expression term");
              var v8633 = this.errorRecovery;
              if (v8633) {
                var v8625 = TypeScript$$14.MissingIdentifier;
                var ident$$1 = new v8625;
                ident$$1.minChar = minChar$$24;
                var v16448 = ident$$1.flags;
                var v21129 = TypeScript$$14.ASTFlags;
                var v16449 = v21129.Error;
                ident$$1.flags = v16448 | v16449;
                var v21130 = TypeScript$$14.ErrorRecoverySet;
                var v16450 = v21130.Postfix;
                var v8626 = errorRecoverySet$$29 | v16450;
                this.skip(v8626);
                var v23942 = this.currentToken;
                var v21131 = v23942.tokenId;
                var v23943 = TypeScript$$14.TokenID;
                var v21132 = v23943.Identifier;
                var v16451 = v21131 == v21132;
                var v21135 = !v16451;
                if (v21135) {
                  var v21133 = this.currentToken;
                  var v21134 = this.strictMode;
                  v16451 = TypeScript$$14.convertTokToID(v21133, v21134);
                }
                var v8632 = v16451;
                if (v8632) {
                  var v16452 = this.currentToken;
                  var v8627 = v16452.getText();
                  var v16453 = this.currentToken;
                  var v8628 = v16453.hasEscapeSequence;
                  ident$$1.setText(v8627, v8628);
                  var v8629 = this.scanner;
                  var v26870 = v8629.scan();
                  this.currentToken = v26870;
                  var v8630 = this.scanner;
                  limChar$$7 = v8630.lastTokenLimChar();
                } else {
                  var v8631 = this.scanner;
                  limChar$$7 = v8631.lastTokenLimChar();
                }
                ast$$40 = ident$$1;
              }
            }
          ;
        }
      }
      if (parseAsLambda) {
        var v25917 = this.currentToken;
        var v25298 = v25917.tokenId;
        var v25918 = TypeScript$$14.TokenID;
        var v25299 = v25918.Colon;
        var v23944 = v25298 == v25299;
        var v25302 = !v23944;
        if (v25302) {
          var v25919 = this.currentToken;
          var v25300 = v25919.tokenId;
          var v25920 = TypeScript$$14.TokenID;
          var v25301 = v25920.Comma;
          v23944 = v25300 == v25301;
        }
        var v21136 = v23944;
        var v23947 = !v21136;
        if (v23947) {
          var v25303 = this.currentToken;
          var v23945 = v25303.tokenId;
          var v25304 = TypeScript$$14.TokenID;
          var v23946 = v25304.CloseParen;
          v21136 = v23945 == v23946;
        }
        var v16454 = v21136;
        var v21139 = !v16454;
        if (v21139) {
          var v23948 = this.currentToken;
          var v21137 = v23948.tokenId;
          var v23949 = TypeScript$$14.TokenID;
          var v21138 = v23949.DotDotDot;
          v16454 = v21137 == v21138;
        }
        var v8638 = v16454;
        if (v8638) {
          ast$$40 = this.parseLambdaExpr(errorRecoverySet$$29, ast$$40, true, expectlambdaRParen);
          ast$$40.minChar = minChar$$24;
          var v8637 = this.scanner;
          limChar$$7 = v8637.lastTokenLimChar();
          ast$$40.limChar = limChar$$7;
        } else {
          if (ast$$40) {
            ast$$40.isParenthesized = true;
          }
        }
      }
      var v16455 = sawId;
      if (v16455) {
        var v21140 = TypeContext.NoTypes;
        v16455 = typeContext != v21140;
      }
      var v8639 = v16455;
      if (v8639) {
        var v16456 = TypeContext.ArraySuffix;
        typeContext = typeContext | v16456;
      }
      var postFix = this.parsePostfixOperators(errorRecoverySet$$29, ast$$40, allowCall, inNew, typeContext, minChar$$24, limChar$$7);
      if (postFix) {
        var v16457 = sawId;
        if (v16457) {
          var v21141 = postFix.nodeType;
          var v23950 = TypeScript$$14.NodeType;
          var v21142 = v23950.Index;
          v16457 = v21141 == v21142;
        }
        var v8641 = v16457;
        if (v8641) {
          var binExpr = postFix;
          var v16458 = binExpr.operand2;
          var v8640 = v16458 == null;
          if (v8640) {
            postFix = this.convertToTypeReference(postFix);
          }
        }
        postFix.minChar = minChar$$24;
        var v8642 = postFix.limChar;
        var v16459 = this.scanner;
        var v8643 = v16459.lastTokenLimChar();
        var v26871 = TypeScript$$14.max(v8642, v8643);
        postFix.limChar = v26871;
        return postFix;
      } else {
        var v8644 = TypeScript$$14.AST;
        var v16460 = TypeScript$$14.NodeType;
        var v8645 = v16460.Error;
        return new v8644(v8645);
      }
      return;
    }
    function v576(errorRecoverySet$$28) {
      var arrayLiteral = null;
      var v8646 = TypeScript$$14.UnaryExpression;
      var v16461 = TypeScript$$14.NodeType;
      var v8647 = v16461.ArrayLit;
      var v8648 = this.parseArrayList(errorRecoverySet$$28);
      arrayLiteral = new v8646(v8647, v8648);
      return arrayLiteral;
    }
    function v575(errorRecoverySet$$27) {
      var elements$$1 = null;
      var v21143 = this.currentToken;
      var v16462 = v21143.tokenId;
      var v21144 = TypeScript$$14.TokenID;
      var v16463 = v21144.CloseBracket;
      var v8651 = v16462 == v16463;
      if (v8651) {
        return elements$$1;
      } else {
        var v8649 = TypeScript$$14.ASTList;
        elements$$1 = new v8649;
        var v8650 = this.scanner;
        elements$$1.minChar = v8650.startPos;
      }
      var arg$$9;
      for (;;) {
        var v23951 = this.currentToken;
        var v21145 = v23951.tokenId;
        var v23952 = TypeScript$$14.TokenID;
        var v21146 = v23952.Comma;
        var v16464 = v21145 == v21146;
        var v21149 = !v16464;
        if (v21149) {
          var v23953 = this.currentToken;
          var v21147 = v23953.tokenId;
          var v23954 = TypeScript$$14.TokenID;
          var v21148 = v23954.CloseBracket;
          v16464 = v21147 == v21148;
        }
        var v8657 = v16464;
        if (v8657) {
          var v8652 = TypeScript$$14.AST;
          var v16465 = TypeScript$$14.NodeType;
          var v8653 = v16465.EmptyExpr;
          arg$$9 = new v8652(v8653);
        } else {
          var v21150 = TypeScript$$14.ErrorRecoverySet;
          var v16466 = v21150.Comma;
          var v8654 = v16466 | errorRecoverySet$$27;
          var v16467 = TypeScript$$14.OperatorPrecedence;
          var v8655 = v16467.Comma;
          var v8656 = TypeContext.NoTypes;
          arg$$9 = this.parseExpr(v8654, v8655, true, v8656);
        }
        elements$$1.append(arg$$9);
        var v21151 = this.currentToken;
        var v16468 = v21151.tokenId;
        var v21152 = TypeScript$$14.TokenID;
        var v16469 = v21152.Comma;
        var v8658 = v16468 != v16469;
        if (v8658) {
          break;
        }
        var v8659 = this.scanner;
        var v26872 = v8659.scan();
        this.currentToken = v26872;
      }
      var v8660 = this.scanner;
      var v26873 = v8660.lastTokenLimChar();
      elements$$1.limChar = v26873;
      return elements$$1;
    }
    function v574(errorRecoverySet$$26) {
      var v8661 = TypeScript$$14.ASTList;
      var elements = new v8661;
      var v21153 = this.currentToken;
      var v16470 = v21153.tokenId;
      var v21154 = TypeScript$$14.TokenID;
      var v16471 = v21154.CloseBrace;
      var v8662 = v16470 == v16471;
      if (v8662) {
        return elements;
      }
      var idHint = null;
      var memberName$$1 = null;
      var memberExpr = null;
      var member$$2 = null;
      var v8663 = this.scanner;
      var minChar$$23 = v8663.startPos;
      var isSet = false;
      var skippedTokenForGetSetId = false;
      var getSetTok = null;
      var getSetStartPos = 0;
      var getSetPos = 0;
      for (;;) {
        var accessorPattern = false;
        var v23955 = this.currentToken;
        var v21155 = v23955.tokenId;
        var v23956 = TypeScript$$14.TokenID;
        var v21156 = v23956.Get;
        var v16472 = v21155 == v21156;
        var v21159 = !v16472;
        if (v21159) {
          var v23957 = this.currentToken;
          var v21157 = v23957.tokenId;
          var v23958 = TypeScript$$14.TokenID;
          var v21158 = v23958.Set;
          v16472 = v21157 == v21158;
        }
        var v8699 = v16472;
        if (v8699) {
          var v16473 = this.currentToken;
          var v8664 = v16473.tokenId;
          var v16474 = TypeScript$$14.TokenID;
          var v8665 = v16474.Set;
          isSet = v8664 == v8665;
          getSetTok = this.currentToken;
          var v8666 = this.scanner;
          getSetStartPos = v8666.startPos;
          var v8667 = this.scanner;
          getSetPos = v8667.pos;
          var v8668 = this.scanner;
          var v26874 = v8668.scan();
          this.currentToken = v26874;
          var v23959 = this.currentToken;
          var v21160 = v23959.tokenId;
          var v23960 = TypeScript$$14.TokenID;
          var v21161 = v23960.Identifier;
          var v16475 = v21160 == v21161;
          var v21163 = !v16475;
          if (v21163) {
            var v21162 = this.currentToken;
            v16475 = TypeScript$$14.convertTokToIDName(v21162);
          }
          var v8677 = v16475;
          if (v8677) {
            var v8669;
            if (isSet) {
              v8669 = "set";
            } else {
              v8669 = "get";
            }
            idHint = v8669;
            var v16476 = this.currentToken;
            var v8670 = v16476.getText();
            idHint = idHint + v8670;
            var v8671 = TypeScript$$14.Identifier;
            var v8672 = this.currentToken;
            memberName$$1 = v8671.fromToken(v8672);
            var v8673 = this.scanner;
            memberName$$1.minChar = v8673.startPos;
            accessorPattern = true;
            var v16477 = TypeScript$$14.codeGenTarget;
            var v21164 = TypeScript$$14.CodeGenTarget;
            var v16478 = v21164.ES5;
            var v8674 = v16477 < v16478;
            if (v8674) {
              this.reportParseError("Property accessors are only available when targeting ES5 or greater");
            }
          } else {
            var v21165 = this.currentToken;
            var v16479 = v21165.tokenId;
            var v21166 = TypeScript$$14.TokenID;
            var v16480 = v21166.Colon;
            var v8676 = v16479 != v16480;
            if (v8676) {
              this.reportParseError("Expected identifier, string or number as accessor name");
            } else {
              skippedTokenForGetSetId = true;
              var v8675 = TypeScript$$14.Identifier;
              memberName$$1 = v8675.fromToken(getSetTok);
              memberName$$1.minChar = getSetStartPos;
              memberName$$1.limChar = getSetPos;
            }
          }
        } else {
          var v23961 = this.currentToken;
          var v21167 = v23961.tokenId;
          var v23962 = TypeScript$$14.TokenID;
          var v21168 = v23962.Identifier;
          var v16481 = v21167 == v21168;
          var v21170 = !v16481;
          if (v21170) {
            var v21169 = this.currentToken;
            v16481 = TypeScript$$14.convertTokToIDName(v21169);
          }
          var v8698 = v16481;
          if (v8698) {
            var v8678 = this.currentToken;
            idHint = v8678.getText();
            var v8679 = TypeScript$$14.Identifier;
            var v8680 = this.currentToken;
            memberName$$1 = v8679.fromToken(v8680);
            var v8681 = this.scanner;
            memberName$$1.minChar = v8681.startPos;
            var v8682 = this.scanner;
            memberName$$1.limChar = v8682.pos;
          } else {
            var v21171 = this.currentToken;
            var v16482 = v21171.tokenId;
            var v21172 = TypeScript$$14.TokenID;
            var v16483 = v21172.StringLiteral;
            var v8697 = v16482 == v16483;
            if (v8697) {
              var v8683 = this.currentToken;
              idHint = v8683.getText();
              var v8684 = TypeScript$$14.StringLiteral;
              memberName$$1 = new v8684(idHint);
              var v8685 = this.scanner;
              memberName$$1.minChar = v8685.startPos;
              var v8686 = this.scanner;
              memberName$$1.limChar = v8686.pos;
            } else {
              var v21173 = this.currentToken;
              var v16484 = v21173.tokenId;
              var v21174 = TypeScript$$14.TokenID;
              var v16485 = v21174.NumberLiteral;
              var v8696 = v16484 == v16485;
              if (v8696) {
                var ntok = this.currentToken;
                var v8687 = ntok.value;
                idHint = v8687.toString();
                var v8688 = TypeScript$$14.StringLiteral;
                memberName$$1 = new v8688(idHint);
                var v8689 = this.scanner;
                memberName$$1.minChar = v8689.startPos;
                var v8690 = this.scanner;
                memberName$$1.limChar = v8690.pos;
              } else {
                this.reportParseError("Expected identifier, string or number as member name");
                var v8695 = this.errorRecovery;
                if (v8695) {
                  var v8691 = TypeScript$$14.MissingIdentifier;
                  memberName$$1 = new v8691;
                  var v8692 = this.scanner;
                  memberName$$1.minChar = v8692.startPos;
                  var v16486 = memberName$$1.flags;
                  var v21175 = TypeScript$$14.ASTFlags;
                  var v16487 = v21175.Error;
                  memberName$$1.flags = v16486 | v16487;
                  var v21176 = TypeScript$$14.ErrorRecoverySet;
                  var v16488 = v21176.Comma;
                  var v8693 = errorRecoverySet$$26 | v16488;
                  this.skip(v8693);
                  var v8694 = this.scanner;
                  var v26875 = v8694.lastTokenLimChar();
                  memberName$$1.limChar = v26875;
                }
              }
            }
          }
        }
        var v8701 = !skippedTokenForGetSetId;
        if (v8701) {
          var v8700 = this.scanner;
          var v26876 = v8700.scan();
          this.currentToken = v26876;
        } else {
          skippedTokenForGetSetId = false;
        }
        var v21177 = this.currentToken;
        var v16489 = v21177.tokenId;
        var v21178 = TypeScript$$14.TokenID;
        var v16490 = v21178.Question;
        var v8703 = v16489 == v16490;
        if (v8703) {
          var v16491 = memberName$$1.flags;
          var v21179 = TypeScript$$14.ASTFlags;
          var v16492 = v21179.OptionalName;
          memberName$$1.flags = v16491 | v16492;
          var v8702 = this.scanner;
          var v26877 = v8702.scan();
          this.currentToken = v26877;
        }
        if (accessorPattern) {
          var v8704 = TypeScript$$14.ASTList;
          var args$$10 = new v8704;
          var v21180 = TypeScript$$14.ErrorRecoverySet;
          var v16493 = v21180.RParen;
          var v8705 = errorRecoverySet$$26 | v16493;
          var v8706 = !isSet;
          this.parseFormalParameterList(v8705, args$$10, false, true, false, v8706, isSet, false, null, true);
          var v21181 = TypeScript$$14.ErrorRecoverySet;
          var v16494 = v21181.RCurly;
          var v8707 = errorRecoverySet$$26 | v16494;
          var v16495 = TypeScript$$14.AllowedElements;
          var v8708 = v16495.None;
          var v16496 = this.scanner;
          var v8709 = v16496.startPos;
          var v16497 = TypeScript$$14.Modifiers;
          var v8710 = v16497.None;
          var funcDecl$$11 = this.parseFunctionStatements(v8707, memberName$$1, false, true, args$$10, v8708, v8709, false, v8710);
          var v16498 = isSet;
          if (v16498) {
            v16498 = funcDecl$$11.returnTypeAnnotation;
          }
          var v8711 = v16498;
          if (v8711) {
            this.reportParseError("Property setters may not declare a return type");
          }
          var v16499 = funcDecl$$11.fncFlags;
          var v21182;
          if (isSet) {
            var v23963 = TypeScript$$14.FncFlags;
            v21182 = v23963.SetAccessor;
          } else {
            var v23964 = TypeScript$$14.FncFlags;
            v21182 = v23964.GetAccessor;
          }
          var v16500 = v21182;
          funcDecl$$11.fncFlags = v16499 | v16500;
          var v16501 = funcDecl$$11.fncFlags;
          var v21183 = TypeScript$$14.FncFlags;
          var v16502 = v21183.IsFunctionExpression;
          funcDecl$$11.fncFlags = v16501 | v16502;
          funcDecl$$11.hint = idHint;
          memberExpr = funcDecl$$11;
          var v8712 = TypeScript$$14.BinaryExpression;
          var v16503 = TypeScript$$14.NodeType;
          var v8713 = v16503.Member;
          member$$2 = new v8712(v8713, memberName$$1, memberExpr);
          member$$2.minChar = memberName$$1.minChar;
          var v16504 = memberExpr.nodeType;
          var v21184 = TypeScript$$14.NodeType;
          var v16505 = v21184.FuncDecl;
          var v8714 = v16504 == v16505;
          if (v8714) {
            funcDecl$$11 = memberExpr;
            funcDecl$$11.hint = idHint;
          }
        } else {
          var v21185 = this.currentToken;
          var v16506 = v21185.tokenId;
          var v21186 = TypeScript$$14.TokenID;
          var v16507 = v21186.Colon;
          var v8725 = v16506 == v16507;
          if (v8725) {
            var v8715 = this.scanner;
            var v26878 = v8715.scan();
            this.currentToken = v26878;
            var v21187 = TypeScript$$14.ErrorRecoverySet;
            var v16508 = v21187.Comma;
            var v8716 = v16508 | errorRecoverySet$$26;
            var v16509 = TypeScript$$14.OperatorPrecedence;
            var v8717 = v16509.Comma;
            var v8718 = TypeContext.NoTypes;
            memberExpr = this.parseExpr(v8716, v8717, true, v8718);
            var v16510 = memberExpr.nodeType;
            var v21188 = TypeScript$$14.NodeType;
            var v16511 = v21188.TypeRef;
            var v8719 = v16510 == v16511;
            if (v8719) {
              this.reportParseError("Expected 'new' on array declaration in member definition");
            }
            var v8720 = TypeScript$$14.BinaryExpression;
            var v16512 = TypeScript$$14.NodeType;
            var v8721 = v16512.Member;
            member$$2 = new v8720(v8721, memberName$$1, memberExpr);
            member$$2.minChar = memberName$$1.minChar;
            var v16513 = memberExpr.nodeType;
            var v21189 = TypeScript$$14.NodeType;
            var v16514 = v21189.FuncDecl;
            var v8722 = v16513 == v16514;
            if (v8722) {
              funcDecl$$11 = memberExpr;
              funcDecl$$11.hint = idHint;
            }
          } else {
            this.reportParseError("Expected ':' in member definition");
            var v8724 = this.errorRecovery;
            if (v8724) {
              this.skip(errorRecoverySet$$26);
              var v16515 = elements.flags;
              var v21190 = TypeScript$$14.ASTFlags;
              var v16516 = v21190.Error;
              elements.flags = v16515 | v16516;
              elements.minChar = minChar$$23;
              var v8723 = this.scanner;
              var v26879 = v8723.lastTokenLimChar();
              elements.limChar = v26879;
              return elements;
            }
          }
        }
        idHint = null;
        elements.append(member$$2);
        var v8726 = this.scanner;
        var v26880 = v8726.lastTokenLimChar();
        member$$2.limChar = v26880;
        var v21191 = this.currentToken;
        var v16517 = v21191.tokenId;
        var v21192 = TypeScript$$14.TokenID;
        var v16518 = v21192.Comma;
        var v8728 = v16517 != v16518;
        if (v8728) {
          break;
        } else {
          var v8727 = this.scanner;
          var v26881 = v8727.scan();
          this.currentToken = v26881;
        }
        var v21193 = this.currentToken;
        var v16519 = v21193.tokenId;
        var v21194 = TypeScript$$14.TokenID;
        var v16520 = v21194.CloseBrace;
        var v8729 = v16519 == v16520;
        if (v8729) {
          break;
        }
      }
      if (member$$2) {
        elements.limChar = member$$2.limChar;
      }
      elements.minChar = minChar$$23;
      return elements;
    }
    function v573(errorRecoverySet$$25, modifiers$$11, allowIn, isStatic$$4) {
      var v16521 = TypeScript$$14.Modifiers;
      var v8730 = v16521.Readonly;
      var isConst = TypeScript$$14.hasFlag(modifiers$$11, v8730);
      var v8731 = this.scanner;
      var minChar$$22 = v8731.startPos;
      var varDecl$$10 = null;
      var declList = null;
      var multivar = false;
      var v8732 = this.scanner;
      var v26882 = v8732.scan();
      this.currentToken = v26882;
      var varDeclPreComments = this.parseComments();
      for (;true;) {
        var v23965 = this.currentToken;
        var v21195 = v23965.tokenId;
        var v23966 = TypeScript$$14.TokenID;
        var v21196 = v23966.Identifier;
        var v16522 = v21195 != v21196;
        if (v16522) {
          var v23967 = this.currentToken;
          var v23968 = this.strictMode;
          var v21197 = TypeScript$$14.convertTokToID(v23967, v23968);
          v16522 = !v21197;
        }
        var v8738 = v16522;
        if (v8738) {
          this.reportParseError("Expected identifier in variable declaration");
          var v8737 = this.errorRecovery;
          if (v8737) {
            var v8733 = TypeScript$$14.VarDecl;
            var v16523 = TypeScript$$14.MissingIdentifier;
            var v8734 = new v16523;
            var v8735 = this.nestingLevel;
            varDecl$$10 = new v8733(v8734, v8735);
            varDecl$$10.minChar = minChar$$22;
            this.skip(errorRecoverySet$$25);
            var v16524 = varDecl$$10.flags;
            var v21198 = TypeScript$$14.ASTFlags;
            var v16525 = v21198.Error;
            varDecl$$10.flags = v16524 | v16525;
            var v8736 = this.scanner;
            var v26883 = v8736.lastTokenLimChar();
            varDecl$$10.limChar = v26883;
            return varDecl$$10;
          }
        }
        var v8739 = TypeScript$$14.Identifier;
        var v8740 = this.currentToken;
        var varDeclName = v8739.fromToken(v8740);
        var v16526 = this.strictMode;
        if (v16526) {
          var v21199 = varDeclName.text;
          v16526 = v21199 == "eval";
        }
        var v8741 = v16526;
        if (v8741) {
          this.reportParseError("'eval' may not name a variable in strict mode");
        }
        var v8742 = this.nestingLevel;
        varDecl$$10 = this.makeVarDecl(varDeclName, v8742);
        var v8743 = varDecl$$10.id;
        var v16527 = this.scanner;
        v8743.minChar = v16527.startPos;
        var v8744 = varDecl$$10.id;
        var v16528 = this.scanner;
        v8744.limChar = v16528.pos;
        varDecl$$10.preComments = varDeclPreComments;
        if (isStatic$$4) {
          var v16529 = varDecl$$10.varFlags;
          var v21200 = TypeScript$$14.VarFlags;
          var v16530 = v21200.Static;
          varDecl$$10.varFlags = v16529 | v16530;
        }
        var v21201 = TypeScript$$14.Modifiers;
        var v16531 = v21201.Readonly;
        var v8745 = TypeScript$$14.hasFlag(modifiers$$11, v16531);
        if (v8745) {
          var v16532 = varDecl$$10.varFlags;
          var v21202 = TypeScript$$14.VarFlags;
          var v16533 = v21202.Readonly;
          varDecl$$10.varFlags = v16532 | v16533;
        }
        var v21203 = this.parsingDeclareFile;
        var v23969 = !v21203;
        if (v23969) {
          v21203 = this.ambientModule;
        }
        var v16534 = v21203;
        var v21205 = !v16534;
        if (v21205) {
          var v23970 = TypeScript$$14.Modifiers;
          var v21204 = v23970.Ambient;
          v16534 = TypeScript$$14.hasFlag(modifiers$$11, v21204);
        }
        var v8746 = v16534;
        if (v8746) {
          var v16535 = varDecl$$10.varFlags;
          var v21206 = TypeScript$$14.VarFlags;
          var v16536 = v21206.Ambient;
          varDecl$$10.varFlags = v16535 | v16536;
        }
        var v21207 = this.parsingDeclareFile;
        var v23971 = !v21207;
        if (v23971) {
          v21207 = this.ambientModule;
        }
        var v16537 = v21207;
        var v21209 = !v16537;
        if (v21209) {
          var v23972 = TypeScript$$14.Modifiers;
          var v21208 = v23972.Exported;
          v16537 = TypeScript$$14.hasFlag(modifiers$$11, v21208);
        }
        var v8747 = v16537;
        if (v8747) {
          var v16538 = varDecl$$10.varFlags;
          var v21210 = TypeScript$$14.VarFlags;
          var v16539 = v21210.Exported;
          varDecl$$10.varFlags = v16538 | v16539;
        }
        varDecl$$10.minChar = minChar$$22;
        if (declList) {
          declList.append(varDecl$$10);
        }
        var v8748 = this.scanner;
        var v26884 = v8748.scan();
        this.currentToken = v26884;
        var v21211 = this.currentToken;
        var v16540 = v21211.tokenId;
        var v21212 = TypeScript$$14.TokenID;
        var v16541 = v21212.Colon;
        var v8751 = v16540 == v16541;
        if (v8751) {
          var v8749 = this.scanner;
          var v26885 = v8749.scan();
          this.currentToken = v26885;
          var prevInFncDecl = this.inFncDecl;
          this.inFncDecl = false;
          var v23973 = TypeScript$$14.ErrorRecoverySet;
          var v21213 = v23973.Asg;
          var v16542 = errorRecoverySet$$25 | v21213;
          var v21214 = TypeScript$$14.ErrorRecoverySet;
          var v16543 = v21214.Comma;
          var v8750 = v16542 | v16543;
          var v26886 = this.parseTypeReference(v8750, false);
          varDecl$$10.typeExpr = v26886;
          this.inFncDecl = prevInFncDecl;
        }
        var v21215 = this.currentToken;
        var v16544 = v21215.tokenId;
        var v21216 = TypeScript$$14.TokenID;
        var v16545 = v21216.Equals;
        var v8761 = v16544 == v16545;
        if (v8761) {
          var v16546 = varDecl$$10.varFlags;
          var v21217 = TypeScript$$14.VarFlags;
          var v16547 = v21217.Ambient;
          var v8752 = TypeScript$$14.hasFlag(v16546, v16547);
          if (v8752) {
            this.reportParseError("Ambient variable can not have an initializer");
          }
          var v8753 = this.scanner;
          var v26887 = v8753.scan();
          this.currentToken = v26887;
          var v21218 = TypeScript$$14.ErrorRecoverySet;
          var v16548 = v21218.Comma;
          var v8754 = v16548 | errorRecoverySet$$25;
          var v16549 = TypeScript$$14.OperatorPrecedence;
          var v8755 = v16549.Comma;
          var v8756 = TypeContext.NoTypes;
          var v26888 = this.parseExpr(v8754, v8755, allowIn, v8756);
          varDecl$$10.init = v26888;
          var v8757 = varDecl$$10.init;
          varDecl$$10.limChar = v8757.limChar;
          var v21219 = varDecl$$10.init;
          var v16550 = v21219.nodeType;
          var v21220 = TypeScript$$14.NodeType;
          var v16551 = v21220.FuncDecl;
          var v8759 = v16550 == v16551;
          if (v8759) {
            var funcDecl$$10 = varDecl$$10.init;
            var v8758 = varDecl$$10.id;
            funcDecl$$10.hint = v8758.actualText;
          }
        } else {
          if (isConst) {
            this.reportParseError("const declaration requires initializer");
          }
          var v8760 = this.scanner;
          varDecl$$10.limChar = v8760.pos;
        }
        var v16552 = this.scanner;
        var v8762 = v16552.line;
        var v26889 = this.parseCommentsForLine(v8762);
        varDecl$$10.postComments = v26889;
        var v21221 = this.currentToken;
        var v16553 = v21221.tokenId;
        var v21222 = TypeScript$$14.TokenID;
        var v16554 = v21222.Comma;
        var v8763 = v16553 != v16554;
        if (v8763) {
          if (declList) {
            declList.limChar = varDecl$$10.limChar;
            return declList;
          } else {
            return varDecl$$10;
          }
        }
        var v8765 = !multivar;
        if (v8765) {
          var v8764 = TypeScript$$14.ASTList;
          declList = new v8764;
          declList.minChar = varDecl$$10.minChar;
          declList.append(varDecl$$10);
          multivar = true;
        }
        var v8766 = this.scanner;
        var v26890 = v8766.scan();
        this.currentToken = v26890;
        var v8767 = this.scanner;
        minChar$$22 = v8767.startPos;
      }
      return;
    }
    function v572(errorRecoverySet$$24, modifiers$$10, requireSignature, isStatic$$3) {
      var text$$16 = null;
      var v8768 = this.scanner;
      var minChar$$21 = v8768.startPos;
      var nameLimChar = minChar$$21;
      var isNew = false;
      var isIndexer$$1 = false;
      var v8769 = this.prevIDTok;
      var wasAccessorID$$1 = v8769 != null;
      var v21223 = TypeScript$$14.Modifiers;
      var v16555 = v21223.Getter;
      var v8770 = TypeScript$$14.hasFlag(modifiers$$10, v16555);
      var v16557 = !v8770;
      if (v16557) {
        var v21224 = TypeScript$$14.Modifiers;
        var v16556 = v21224.Setter;
        v8770 = TypeScript$$14.hasFlag(modifiers$$10, v16556);
      }
      var isAccessor$$1 = v8770;
      var v21225 = this.parsingDeclareFile;
      var v23974 = !v21225;
      if (v23974) {
        v21225 = this.ambientModule;
      }
      var v16558 = v21225;
      var v21227 = !v16558;
      if (v21227) {
        var v23975 = TypeScript$$14.Modifiers;
        var v21226 = v23975.Ambient;
        v16558 = TypeScript$$14.hasFlag(modifiers$$10, v21226);
      }
      var v8771 = v16558;
      if (v8771) {
        requireSignature = true;
      }
      var v23976 = this.currentToken;
      var v21228 = v23976.tokenId;
      var v23977 = TypeScript$$14.TokenID;
      var v21229 = v23977.OpenParen;
      var v16559 = v21228 == v21229;
      if (v16559) {
        v16559 = !wasAccessorID$$1;
      }
      var v8811 = v16559;
      if (v8811) {
        var v16560 = !requireSignature;
        if (v16560) {
          v16560 = !isStatic$$3;
        }
        var v8774 = v16560;
        if (v8774) {
          this.reportParseError("Expected identifier in property declaration");
          var v8773 = this.errorRecovery;
          if (v8773) {
            this.skip(errorRecoverySet$$24);
            var v8772 = TypeScript$$14.MissingIdentifier;
            text$$16 = new v8772;
          }
        }
      } else {
        var v21230 = this.currentToken;
        var v16561 = v21230.tokenId;
        var v21231 = TypeScript$$14.TokenID;
        var v16562 = v21231.New;
        var v8810 = v16561 == v16562;
        if (v8810) {
          if (requireSignature) {
            var v8775 = this.scanner;
            var v26891 = v8775.scan();
            this.currentToken = v26891;
            var v21232 = this.currentToken;
            var v16563 = v21232.tokenId;
            var v21233 = TypeScript$$14.TokenID;
            var v16564 = v21233.OpenParen;
            var v8776 = v16563 == v16564;
            if (v8776) {
              isNew = true;
            }
          }
          var v8783 = !isNew;
          if (v8783) {
            var v8778 = !requireSignature;
            if (v8778) {
              var v8777 = this.scanner;
              var v26892 = v8777.scan();
              this.currentToken = v26892;
            }
            var v8779 = TypeScript$$14.Identifier;
            text$$16 = new v8779("new");
            var v16565 = this.scanner;
            var v8780 = v16565.pos;
            text$$16.minChar = v8780 - 3;
            var v8781 = this.scanner;
            text$$16.limChar = v8781.pos;
            var v8782 = this.scanner;
            nameLimChar = v8782.pos;
          }
        } else {
          var v23978 = this.currentToken;
          var v21234 = v23978.tokenId;
          var v23979 = TypeScript$$14.TokenID;
          var v21235 = v23979.OpenBracket;
          var v16566 = v21234 == v21235;
          if (v16566) {
            v16566 = requireSignature;
          }
          var v8809 = v16566;
          if (v8809) {
            isIndexer$$1 = true;
            var v8784 = TypeScript$$14.Identifier;
            text$$16 = new v8784("__item");
          } else {
            var v25305 = this.currentToken;
            var v23980 = v25305.tokenId;
            var v25306 = TypeScript$$14.TokenID;
            var v23981 = v25306.Identifier;
            var v21236 = v23980 != v23981;
            if (v21236) {
              var v25307 = this.currentToken;
              var v23982 = TypeScript$$14.convertTokToIDName(v25307);
              v21236 = !v23982;
            }
            var v16567 = v21236;
            if (v16567) {
              v16567 = !wasAccessorID$$1;
            }
            var v8808 = v16567;
            if (v8808) {
              this.reportParseError("Expected identifier in property declaration");
              var v8794 = this.errorRecovery;
              if (v8794) {
                var v8785 = this.scanner;
                var eminChar = v8785.startPos;
                var v8786 = this.scanner;
                var curpos$$1 = v8786.pos;
                var v23983 = TypeScript$$14.ErrorRecoverySet;
                var v21237 = v23983.Comma;
                var v16568 = ~v21237;
                var v8787 = errorRecoverySet$$24 & v16568;
                this.skip(v8787);
                var v21238 = this.scanner;
                var v16569 = v21238.pos;
                var v8789 = v16569 == curpos$$1;
                if (v8789) {
                  var v8788 = this.scanner;
                  var v26893 = v8788.scan();
                  this.currentToken = v26893;
                }
                var v8790 = TypeScript$$14.VarDecl;
                var v16570 = TypeScript$$14.MissingIdentifier;
                var v8791 = new v16570;
                var v8792 = this.nestingLevel;
                var epd = new v8790(v8791, v8792);
                var v16571 = epd.flags;
                var v21239 = TypeScript$$14.ASTFlags;
                var v16572 = v21239.Error;
                epd.flags = v16571 | v16572;
                epd.minChar = eminChar;
                var v8793 = this.scanner;
                var v26894 = v8793.lastTokenLimChar();
                epd.limChar = v26894;
                return epd;
              }
            } else {
              if (wasAccessorID$$1) {
                var v8795 = TypeScript$$14.Identifier;
                var v8796 = this.prevIDTok;
                text$$16 = v8795.fromToken(v8796);
                var v16573 = this.scanner;
                var v8797 = v16573.lastTokenLimChar();
                text$$16.minChar = v8797 - 3;
                var v8798 = this.scanner;
                var v26895 = v8798.lastTokenLimChar();
                text$$16.limChar = v26895;
                nameLimChar = text$$16.limChar;
                var v16574 = TypeScript$$14.codeGenTarget;
                var v21240 = TypeScript$$14.CodeGenTarget;
                var v16575 = v21240.ES5;
                var v8799 = v16574 < v16575;
                if (v8799) {
                  this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                }
                var v23984 = this.currentToken;
                var v21241 = v23984.getText();
                var v21242 = text$$16.actualText;
                var v16576 = v21241 == v21242;
                if (v16576) {
                  var v21243 = this.currentToken;
                  var v21244 = this.prevIDTok;
                  v16576 = v21243 != v21244;
                }
                var v8801 = v16576;
                if (v8801) {
                  var v8800 = this.scanner;
                  var v26896 = v8800.scan();
                  this.currentToken = v26896;
                }
                this.prevIDTok = null;
              } else {
                var v8802 = TypeScript$$14.Identifier;
                var v8803 = this.currentToken;
                text$$16 = v8802.fromToken(v8803);
                var v8804 = this.scanner;
                text$$16.minChar = v8804.startPos;
                var v8805 = this.scanner;
                text$$16.limChar = v8805.pos;
                var v8806 = this.scanner;
                nameLimChar = v8806.pos;
                var v8807 = this.scanner;
                var v26897 = v8807.scan();
                this.currentToken = v26897;
              }
            }
          }
        }
      }
      var v21245 = this.currentToken;
      var v16577 = v21245.tokenId;
      var v21246 = TypeScript$$14.TokenID;
      var v16578 = v21246.Question;
      var v8814 = v16577 == v16578;
      if (v8814) {
        var v16579 = this.inInterfaceDecl;
        if (v16579) {
          v16579 = text$$16;
        }
        var v8812 = v16579;
        if (v8812) {
          var v16580 = text$$16.flags;
          var v21247 = TypeScript$$14.ASTFlags;
          var v16581 = v21247.OptionalName;
          text$$16.flags = v16580 | v16581;
        } else {
          this.reportParseError("Optional properties may only be declared on interface or object types");
        }
        var v8813 = this.scanner;
        var v26898 = v8813.scan();
        this.currentToken = v26898;
      }
      var v23985 = this.currentToken;
      var v21248 = v23985.tokenId;
      var v23986 = TypeScript$$14.TokenID;
      var v21249 = v23986.OpenParen;
      var v16582 = v21248 == v21249;
      var v21251 = !v16582;
      if (v21251) {
        var v21250 = isIndexer$$1;
        if (v21250) {
          var v25308 = this.currentToken;
          var v23987 = v25308.tokenId;
          var v25309 = TypeScript$$14.TokenID;
          var v23988 = v25309.OpenBracket;
          v21250 = v23987 == v23988;
        }
        v16582 = v21250;
      }
      var v8853 = v16582;
      if (v8853) {
        var v16583 = TypeScript$$14.ErrorRecoverySet;
        var v8815 = v16583.RParen;
        var ers = errorRecoverySet$$24 | v8815;
        if (isIndexer$$1) {
          var v16584 = TypeScript$$14.ErrorRecoverySet;
          var v8816 = v16584.RBrack;
          ers = errorRecoverySet$$24 | v8816;
        }
        var v16585 = this.inFncDecl;
        var v8817 = !v16585;
        var v16586 = this.parsingDeclareFile;
        var v21253 = !v16586;
        if (v21253) {
          var v23989 = TypeScript$$14.Modifiers;
          var v21252 = v23989.Ambient;
          v16586 = TypeScript$$14.hasFlag(modifiers$$10, v21252);
        }
        var v8818 = v16586;
        var ast$$39 = this.parseFncDecl(ers, true, requireSignature, v8817, text$$16, isIndexer$$1, isStatic$$3, v8818, modifiers$$10, null, true);
        var funcDecl$$9;
        var v16587 = ast$$39.nodeType;
        var v21254 = TypeScript$$14.NodeType;
        var v16588 = v21254.Error;
        var v8819 = v16587 == v16588;
        if (v8819) {
          return ast$$39;
        } else {
          funcDecl$$9 = ast$$39;
        }
        var v8822 = funcDecl$$9.name;
        if (v8822) {
          var v8820 = funcDecl$$9.name;
          v8820.minChar = minChar$$21;
          var v8821 = funcDecl$$9.name;
          v8821.limChar = nameLimChar;
        }
        var v23990 = TypeScript$$14.Modifiers;
        var v21255 = v23990.Public;
        var v16589 = modifiers$$10 & v21255;
        var v21256 = TypeScript$$14.Modifiers;
        var v16590 = v21256.None;
        var v8823 = v16589 != v16590;
        if (v8823) {
          var v16591 = funcDecl$$9.fncFlags;
          var v21257 = TypeScript$$14.FncFlags;
          var v16592 = v21257.Public;
          funcDecl$$9.fncFlags = v16591 | v16592;
        }
        var v23991 = TypeScript$$14.Modifiers;
        var v21258 = v23991.Private;
        var v16593 = modifiers$$10 & v21258;
        var v21259 = TypeScript$$14.Modifiers;
        var v16594 = v21259.None;
        var v8824 = v16593 != v16594;
        if (v8824) {
          var v16595 = funcDecl$$9.fncFlags;
          var v21260 = TypeScript$$14.FncFlags;
          var v16596 = v21260.Private;
          funcDecl$$9.fncFlags = v16595 | v16596;
        }
        if (isStatic$$3) {
          var v16597 = funcDecl$$9.fncFlags;
          var v21261 = TypeScript$$14.FncFlags;
          var v16598 = v21261.Static;
          funcDecl$$9.fncFlags = v16597 | v16598;
        }
        var v16599 = this.parsingDeclareFile;
        var v21263 = !v16599;
        if (v21263) {
          var v23992 = TypeScript$$14.Modifiers;
          var v21262 = v23992.Ambient;
          v16599 = TypeScript$$14.hasFlag(modifiers$$10, v21262);
        }
        var v8825 = v16599;
        if (v8825) {
          var v16600 = funcDecl$$9.fncFlags;
          var v21264 = TypeScript$$14.FncFlags;
          var v16601 = v21264.Ambient;
          funcDecl$$9.fncFlags = v16600 | v16601;
        }
        if (isAccessor$$1) {
          var v21265 = TypeScript$$14.Modifiers;
          var v16602 = v21265.Getter;
          var v8828 = TypeScript$$14.hasFlag(modifiers$$10, v16602);
          if (v8828) {
            var v16603 = funcDecl$$9.fncFlags;
            var v21266 = TypeScript$$14.FncFlags;
            var v16604 = v21266.GetAccessor;
            funcDecl$$9.fncFlags = v16603 | v16604;
            var v16605 = funcDecl$$9.name;
            var v8826 = v16605.actualText;
            funcDecl$$9.hint = "get" + v8826;
          } else {
            var v16606 = funcDecl$$9.fncFlags;
            var v21267 = TypeScript$$14.FncFlags;
            var v16607 = v21267.SetAccessor;
            funcDecl$$9.fncFlags = v16606 | v16607;
            var v16608 = funcDecl$$9.name;
            var v8827 = v16608.actualText;
            funcDecl$$9.hint = "set" + v8827;
          }
          var v16609 = funcDecl$$9.fncFlags;
          var v21268 = TypeScript$$14.FncFlags;
          var v16610 = v21268.IsFunctionExpression;
          funcDecl$$9.fncFlags = v16609 | v16610;
          var v21269 = TypeScript$$14.Modifiers;
          var v16611 = v21269.Ambient;
          var v8829 = modifiers$$10 & v16611;
          if (v8829) {
            this.reportParseError("Property accessors may not be declared in ambient types");
          }
        }
        var v8830 = text$$16 == null;
        if (v8830) {
          if (isNew) {
            var v16612 = funcDecl$$9.fncFlags;
            var v21270 = TypeScript$$14.FncFlags;
            var v16613 = v21270.ConstructMember;
            funcDecl$$9.fncFlags = v16612 | v16613;
            funcDecl$$9.hint = "_construct";
            funcDecl$$9.classDecl = this.currentClassDecl;
          } else {
            funcDecl$$9.hint = "_call";
            var v16614 = funcDecl$$9.fncFlags;
            var v21271 = TypeScript$$14.FncFlags;
            var v16615 = v21271.CallMember;
            funcDecl$$9.fncFlags = v16614 | v16615;
          }
        }
        return funcDecl$$9;
      } else {
        var v8831 = TypeScript$$14.VarDecl;
        var v8832 = this.nestingLevel;
        var varDecl$$9 = new v8831(text$$16, v8832);
        var v26899 = this.parseComments();
        varDecl$$9.preComments = v26899;
        varDecl$$9.minChar = minChar$$21;
        var v21272 = this.currentToken;
        var v16616 = v21272.tokenId;
        var v21273 = TypeScript$$14.TokenID;
        var v16617 = v21273.Colon;
        var v8838 = v16616 == v16617;
        if (v8838) {
          var v8833 = this.scanner;
          var v26900 = v8833.scan();
          this.currentToken = v26900;
          var v23993 = TypeScript$$14.ErrorRecoverySet;
          var v21274 = v23993.Asg;
          var v16618 = errorRecoverySet$$24 | v21274;
          var v21275 = TypeScript$$14.ErrorRecoverySet;
          var v16619 = v21275.Comma;
          var v8834 = v16618 | v16619;
          var v26901 = this.parseTypeReference(v8834, false);
          varDecl$$9.typeExpr = v26901;
          var v16620 = varDecl$$9.typeExpr;
          if (v16620) {
            var v23994 = varDecl$$9.typeExpr;
            var v21276 = v23994.nodeType;
            var v23995 = TypeScript$$14.NodeType;
            var v21277 = v23995.TypeRef;
            v16620 = v21276 == v21277;
          }
          var v8837 = v16620;
          if (v8837) {
            var typeExpr$$1 = varDecl$$9.typeExpr;
            var v16621 = typeExpr$$1.term;
            if (v16621) {
              var v23996 = typeExpr$$1.term;
              var v21278 = v23996.nodeType;
              var v23997 = TypeScript$$14.NodeType;
              var v21279 = v23997.FuncDecl;
              v16621 = v21278 == v21279;
            }
            var v8836 = v16621;
            if (v8836) {
              var v8835 = typeExpr$$1.term;
              v8835.preComments = varDecl$$9.preComments;
            }
          }
        }
        var v21280 = this.currentToken;
        var v16622 = v21280.tokenId;
        var v21281 = TypeScript$$14.TokenID;
        var v16623 = v21281.Equals;
        var v8849 = v16622 == v16623;
        if (v8849) {
          if (requireSignature) {
            this.reportParseError("context does not permit variable initializer");
            var v8840 = this.errorRecovery;
            if (v8840) {
              this.skip(errorRecoverySet$$24);
              var v16624 = varDecl$$9.flags;
              var v21282 = TypeScript$$14.ASTFlags;
              var v16625 = v21282.Error;
              varDecl$$9.flags = v16624 | v16625;
              var v8839 = this.scanner;
              var v26902 = v8839.lastTokenLimChar();
              varDecl$$9.limChar = v26902;
              return varDecl$$9;
            }
          }
          var v8841 = this.scanner;
          var v26903 = v8841.scan();
          this.currentToken = v26903;
          var v21283 = TypeScript$$14.ErrorRecoverySet;
          var v16626 = v21283.Comma;
          var v8842 = v16626 | errorRecoverySet$$24;
          var v16627 = TypeScript$$14.OperatorPrecedence;
          var v8843 = v16627.Comma;
          var v8844 = TypeContext.NoTypes;
          var v26904 = this.parseExpr(v8842, v8843, true, v8844);
          varDecl$$9.init = v26904;
          var v8845 = varDecl$$9.init;
          varDecl$$9.limChar = v8845.limChar;
          var v21284 = varDecl$$9.init;
          var v16628 = v21284.nodeType;
          var v21285 = TypeScript$$14.NodeType;
          var v16629 = v21285.FuncDecl;
          var v8847 = v16628 == v16629;
          if (v8847) {
            funcDecl$$9 = varDecl$$9.init;
            var v8846 = varDecl$$9.id;
            funcDecl$$9.hint = v8846.text;
            funcDecl$$9.boundToProperty = varDecl$$9;
          } else {
            if (isAccessor$$1) {
              this.reportParseError("Accessors may only be functions");
            }
          }
        } else {
          var v8848 = this.scanner;
          varDecl$$9.limChar = v8848.pos;
        }
        var v23998 = TypeScript$$14.Modifiers;
        var v21286 = v23998.Readonly;
        var v16630 = modifiers$$10 & v21286;
        var v21287 = TypeScript$$14.Modifiers;
        var v16631 = v21287.None;
        var v8850 = v16630 != v16631;
        if (v8850) {
          var v16632 = varDecl$$9.varFlags;
          var v21288 = TypeScript$$14.VarFlags;
          var v16633 = v21288.Readonly;
          varDecl$$9.varFlags = v16632 | v16633;
        }
        if (isStatic$$3) {
          var v16634 = varDecl$$9.varFlags;
          var v21289 = TypeScript$$14.VarFlags;
          var v16635 = v21289.Static;
          varDecl$$9.varFlags = v16634 | v16635;
        }
        var v23999 = TypeScript$$14.Modifiers;
        var v21290 = v23999.Public;
        var v16636 = modifiers$$10 & v21290;
        var v21291 = TypeScript$$14.Modifiers;
        var v16637 = v21291.None;
        var v8851 = v16636 != v16637;
        if (v8851) {
          var v16638 = varDecl$$9.varFlags;
          var v21292 = TypeScript$$14.VarFlags;
          var v16639 = v21292.Public;
          varDecl$$9.varFlags = v16638 | v16639;
        }
        var v24000 = TypeScript$$14.Modifiers;
        var v21293 = v24000.Private;
        var v16640 = modifiers$$10 & v21293;
        var v21294 = TypeScript$$14.Modifiers;
        var v16641 = v21294.None;
        var v8852 = v16640 != v16641;
        if (v8852) {
          var v16642 = varDecl$$9.varFlags;
          var v21295 = TypeScript$$14.VarFlags;
          var v16643 = v21295.Private;
          varDecl$$9.varFlags = v16642 | v16643;
        }
        var v16644 = varDecl$$9.varFlags;
        var v21296 = TypeScript$$14.VarFlags;
        var v16645 = v21296.Property;
        varDecl$$9.varFlags = v16644 | v16645;
        return varDecl$$9;
      }
      return;
    }
    function v571(id$$12, nest$$1) {
      var v8854 = TypeScript$$14.VarDecl;
      var varDecl$$8 = new v8854(id$$12, nest$$1);
      var currentVarList = this.topVarList();
      if (currentVarList) {
        currentVarList.append(varDecl$$8);
      }
      return varDecl$$8;
    }
    function v570(errorRecoverySet$$23, modifiers$$9) {
      var v8855 = this.scanner;
      var leftCurlyCount$$4 = v8855.leftCurlyCount;
      var v8856 = this.scanner;
      var rightCurlyCount$$4 = v8856.rightCurlyCount;
      var v8857 = this.scanner;
      var v26905 = v8857.scan();
      this.currentToken = v26905;
      var v8858 = this.scanner;
      var minChar$$20 = v8858.pos;
      var name$$50 = null;
      var v24001 = this.currentToken;
      var v21297 = v24001.tokenId;
      var v24002 = TypeScript$$14.TokenID;
      var v21298 = v24002.Identifier;
      var v16646 = v21297 == v21298;
      var v21300 = !v16646;
      if (v21300) {
        var v25310 = this.currentToken;
        var v24003 = TypeScript$$14.isPrimitiveTypeToken(v25310);
        var v21299 = !v24003;
        if (v21299) {
          var v24004 = this.currentToken;
          var v24005 = this.strictMode;
          v21299 = TypeScript$$14.convertTokToID(v24004, v24005);
        }
        v16646 = v21299;
      }
      var v8868 = v16646;
      if (v8868) {
        var v8859 = TypeScript$$14.Identifier;
        var v8860 = this.currentToken;
        name$$50 = v8859.fromToken(v8860);
        var v8861 = this.scanner;
        name$$50.minChar = v8861.startPos;
        var v8862 = this.scanner;
        name$$50.limChar = v8862.pos;
        var v8863 = this.scanner;
        var v26906 = v8863.scan();
        this.currentToken = v26906;
      } else {
        this.reportParseError("interface missing name");
        var v8867 = this.errorRecovery;
        if (v8867) {
          var v8864 = TypeScript$$14.MissingIdentifier;
          name$$50 = new v8864;
          var v8865 = this.scanner;
          name$$50.minChar = v8865.pos;
          var v8866 = this.scanner;
          name$$50.limChar = v8866.pos;
          var v16647 = name$$50.flags;
          var v21301 = TypeScript$$14.ASTFlags;
          var v16648 = v21301.Error;
          name$$50.flags = v16647 | v16648;
        }
      }
      var extendsList$$6 = null;
      var implementsList$$5 = null;
      var v24006 = this.currentToken;
      var v21302 = v24006.tokenId;
      var v24007 = TypeScript$$14.TokenID;
      var v21303 = v24007.Extends;
      var v16649 = v21302 === v21303;
      var v21306 = !v16649;
      if (v21306) {
        var v24008 = this.currentToken;
        var v21304 = v24008.tokenId;
        var v24009 = TypeScript$$14.TokenID;
        var v21305 = v24009.Implements;
        v16649 = v21304 === v21305;
      }
      var v8873 = v16649;
      if (v8873) {
        var v21307 = this.currentToken;
        var v16650 = v21307.tokenId;
        var v21308 = TypeScript$$14.TokenID;
        var v16651 = v21308.Implements;
        var v8869 = v16650 === v16651;
        if (v8869) {
          this.reportParseError("Expected 'extends'");
        }
        var v8870 = TypeScript$$14.ASTList;
        extendsList$$6 = new v8870;
        var v8871 = TypeScript$$14.ASTList;
        implementsList$$5 = new v8871;
        var v8872 = this.scanner;
        extendsList$$6.minChar = v8872.startPos;
        this.parseBaseList(extendsList$$6, implementsList$$5, errorRecoverySet$$23, false);
      }
      var v8874 = this.scanner;
      var membersMinChar$$2 = v8874.startPos;
      var v16652 = TypeScript$$14.TokenID;
      var v8875 = v16652.OpenBrace;
      var v21309 = TypeScript$$14.ErrorRecoverySet;
      var v16653 = v21309.TypeScriptS;
      var v8876 = errorRecoverySet$$23 | v16653;
      this.checkCurrentToken(v8875, v8876);
      var v8877 = TypeScript$$14.ASTList;
      var members$$10 = new v8877;
      members$$10.minChar = membersMinChar$$2;
      var prevInInterfaceDecl$$1 = this.inInterfaceDecl;
      this.inInterfaceDecl = true;
      var v21310 = TypeScript$$14.ErrorRecoverySet;
      var v16654 = v21310.RCurly;
      var v8878 = errorRecoverySet$$23 | v16654;
      this.parseTypeMemberList(v8878, members$$10);
      this.inInterfaceDecl = prevInInterfaceDecl$$1;
      var v16655 = TypeScript$$14.TokenID;
      var v8879 = v16655.CloseBrace;
      this.checkCurrentToken(v8879, errorRecoverySet$$23);
      var v8880 = TypeScript$$14.InterfaceDeclaration;
      var interfaceDecl$$1 = new v8880(name$$50, members$$10, extendsList$$6, null);
      var v21311 = TypeScript$$14.Modifiers;
      var v16656 = v21311.Private;
      var v8881 = TypeScript$$14.hasFlag(modifiers$$9, v16656);
      if (v8881) {
        var v16657 = interfaceDecl$$1.varFlags;
        var v21312 = TypeScript$$14.VarFlags;
        var v16658 = v21312.Private;
        interfaceDecl$$1.varFlags = v16657 | v16658;
      }
      var v21313 = TypeScript$$14.Modifiers;
      var v16659 = v21313.Public;
      var v8882 = TypeScript$$14.hasFlag(modifiers$$9, v16659);
      if (v8882) {
        var v16660 = interfaceDecl$$1.varFlags;
        var v21314 = TypeScript$$14.VarFlags;
        var v16661 = v21314.Public;
        interfaceDecl$$1.varFlags = v16660 | v16661;
      }
      var v21315 = this.parsingDeclareFile;
      var v24010 = !v21315;
      if (v24010) {
        v21315 = this.ambientModule;
      }
      var v16662 = v21315;
      var v21317 = !v16662;
      if (v21317) {
        var v24011 = TypeScript$$14.Modifiers;
        var v21316 = v24011.Exported;
        v16662 = TypeScript$$14.hasFlag(modifiers$$9, v21316);
      }
      var v8883 = v16662;
      if (v8883) {
        var v16663 = interfaceDecl$$1.varFlags;
        var v21318 = TypeScript$$14.VarFlags;
        var v16664 = v21318.Exported;
        interfaceDecl$$1.varFlags = v16663 | v16664;
      }
      interfaceDecl$$1.limChar = members$$10.limChar;
      var v16665 = this.scanner;
      var v8884 = v16665.leftCurlyCount;
      interfaceDecl$$1.leftCurlyCount = v8884 - leftCurlyCount$$4;
      var v16666 = this.scanner;
      var v8885 = v16666.rightCurlyCount;
      interfaceDecl$$1.rightCurlyCount = v8885 - rightCurlyCount$$4;
      return interfaceDecl$$1;
    }
    function v569(errorRecoverySet$$22, members$$9) {
      var v21319 = TypeScript$$14.ErrorRecoverySet;
      var v16667 = v21319.TypeScriptS;
      errorRecoverySet$$22 = errorRecoverySet$$22 | v16667;
      for (;true;) {
        var v16668 = this.currentToken;
        var v8887 = v16668.tokenId;
        switch(v8887) {
          case TypeScript$$14.TokenID.CloseBrace:
          ;
          case TypeScript$$14.TokenID.EndOfFile:
            var v8886 = this.scanner;
            members$$9.limChar = v8886.pos;
            return;
        }
        var element$$2 = this.parseTypeMember(errorRecoverySet$$22);
        if (element$$2) {
          members$$9.append(element$$2);
        }
      }
      return;
    }
    function v568(errorRecoverySet$$21) {
      var v8888 = this.scanner;
      var minChar$$19 = v8888.startPos;
      var v16669 = TypeScript$$14.Modifiers;
      var v8889 = v16669.Public;
      var propertyDecl = this.parsePropertyDeclaration(errorRecoverySet$$21, v8889, true, false);
      if (propertyDecl) {
        propertyDecl.minChar = minChar$$19;
        var v16670 = propertyDecl.nodeType;
        var v21320 = TypeScript$$14.NodeType;
        var v16671 = v21320.VarDecl;
        var v8891 = v16670 == v16671;
        if (v8891) {
          var v16672 = TypeScript$$14.TokenID;
          var v8890 = v16672.Semicolon;
          this.checkCurrentToken(v8890, errorRecoverySet$$21);
        }
      }
      return propertyDecl;
    }
    function v567(methodName$$1, minChar$$18, errorRecoverySet$$20, modifiers$$8) {
      var v8892 = this.prevIDTok;
      var wasAccessorID = v8892 != null;
      var v21321 = TypeScript$$14.Modifiers;
      var v16673 = v21321.Getter;
      var v8893 = TypeScript$$14.hasFlag(modifiers$$8, v16673);
      var v16675 = !v8893;
      if (v16675) {
        var v21322 = TypeScript$$14.Modifiers;
        var v16674 = v21322.Setter;
        v8893 = TypeScript$$14.hasFlag(modifiers$$8, v16674);
      }
      var isAccessor = v8893;
      var v16676 = TypeScript$$14.Modifiers;
      var v8894 = v16676.Static;
      var isStatic$$2 = TypeScript$$14.hasFlag(modifiers$$8, v8894);
      var v8895 = this.ambientModule;
      var v16678 = !v8895;
      if (v16678) {
        var v21323 = TypeScript$$14.Modifiers;
        var v16677 = v21323.Ambient;
        v8895 = TypeScript$$14.hasFlag(modifiers$$8, v16677);
      }
      var isAmbient$$2 = v8895;
      var v21324 = TypeScript$$14.ErrorRecoverySet;
      var v16679 = v21324.RParen;
      errorRecoverySet$$20 = errorRecoverySet$$20 | v16679;
      var v16680 = isAccessor;
      if (v16680) {
        var v24012 = TypeScript$$14.Modifiers;
        var v21325 = v24012.Ambient;
        v16680 = modifiers$$8 & v21325;
      }
      var v8896 = v16680;
      if (v8896) {
        this.reportParseError("Property accessors may not be declared in ambient classes");
      }
      var ast$$38 = this.parseFncDecl(errorRecoverySet$$20, true, isAmbient$$2, true, methodName$$1, false, isStatic$$2, isAmbient$$2, modifiers$$8, null, true);
      var v16681 = ast$$38.nodeType;
      var v21326 = TypeScript$$14.NodeType;
      var v16682 = v21326.Error;
      var v8897 = v16681 == v16682;
      if (v8897) {
        return ast$$38;
      }
      var funcDecl$$8 = ast$$38;
      funcDecl$$8.minChar = minChar$$18;
      var v16683 = funcDecl$$8.bod;
      var v8899 = v16683 !== null;
      if (v8899) {
        var v8898 = funcDecl$$8.bod;
        funcDecl$$8.limChar = v8898.limChar;
      }
      var v21327 = TypeScript$$14.Modifiers;
      var v16684 = v21327.Private;
      var v8900 = modifiers$$8 & v16684;
      if (v8900) {
        var v16685 = funcDecl$$8.fncFlags;
        var v21328 = TypeScript$$14.FncFlags;
        var v16686 = v21328.Private;
        funcDecl$$8.fncFlags = v16685 | v16686;
      } else {
        var v16687 = funcDecl$$8.fncFlags;
        var v21329 = TypeScript$$14.FncFlags;
        var v16688 = v21329.Public;
        funcDecl$$8.fncFlags = v16687 | v16688;
      }
      if (isStatic$$2) {
        var v16689 = funcDecl$$8.fncFlags;
        var v21330 = TypeScript$$14.FncFlags;
        var v16690 = v21330.Static;
        funcDecl$$8.fncFlags = v16689 | v16690;
      }
      if (isAccessor) {
        var v21331 = TypeScript$$14.Modifiers;
        var v16691 = v21331.Getter;
        var v8903 = TypeScript$$14.hasFlag(modifiers$$8, v16691);
        if (v8903) {
          var v16692 = funcDecl$$8.fncFlags;
          var v21332 = TypeScript$$14.FncFlags;
          var v16693 = v21332.GetAccessor;
          funcDecl$$8.fncFlags = v16692 | v16693;
          var v16694 = funcDecl$$8.name;
          var v8901 = v16694.actualText;
          funcDecl$$8.hint = "get" + v8901;
        } else {
          var v16695 = funcDecl$$8.fncFlags;
          var v21333 = TypeScript$$14.FncFlags;
          var v16696 = v21333.SetAccessor;
          funcDecl$$8.fncFlags = v16695 | v16696;
          var v16697 = funcDecl$$8.name;
          var v8902 = v16697.actualText;
          funcDecl$$8.hint = "set" + v8902;
        }
        var v16698 = funcDecl$$8.fncFlags;
        var v21334 = TypeScript$$14.FncFlags;
        var v16699 = v21334.IsFunctionExpression;
        funcDecl$$8.fncFlags = v16698 | v16699;
        var v16700 = TypeScript$$14.codeGenTarget;
        var v21335 = TypeScript$$14.CodeGenTarget;
        var v16701 = v21335.ES5;
        var v8906 = v16700 < v16701;
        if (v8906) {
          var v8904 = funcDecl$$8.minChar;
          var v8905 = funcDecl$$8.limChar;
          this.reportParseError("Property accessors are only available when targeting ES5 or greater", v8904, v8905);
        }
      }
      var v16702 = funcDecl$$8.fncFlags;
      var v21336 = TypeScript$$14.FncFlags;
      var v16703 = v21336.ClassMethod;
      funcDecl$$8.fncFlags = v16702 | v16703;
      var v16704 = this.currentClassDefinition;
      var v8907 = v16704.knownMemberNames;
      var v8908 = methodName$$1.actualText;
      v8907[v8908] = true;
      var v21337 = this.currentClassDefinition;
      var v16705 = v21337.members;
      var v8909 = v16705.members;
      var v24013 = this.currentClassDefinition;
      var v21338 = v24013.members;
      var v16706 = v21338.members;
      var v8910 = v16706.length;
      v8909[v8910] = funcDecl$$8;
      return funcDecl$$8;
    }
    function v566(text$$15, minChar$$17, isDeclaredInConstructor, errorRecoverySet$$19, modifiers$$7) {
      var v8911 = TypeScript$$14.VarDecl;
      var v8912 = this.nestingLevel;
      var varDecl$$7 = new v8911(text$$15, v8912);
      varDecl$$7.minChar = minChar$$17;
      var isStatic$$1 = false;
      var v26907 = this.parseComments();
      varDecl$$7.preComments = v26907;
      var v21339 = this.currentToken;
      var v16707 = v21339.tokenId;
      var v21340 = TypeScript$$14.TokenID;
      var v16708 = v21340.Colon;
      var v8918 = v16707 == v16708;
      if (v8918) {
        var v8913 = this.scanner;
        var v26908 = v8913.scan();
        this.currentToken = v26908;
        var v24014 = TypeScript$$14.ErrorRecoverySet;
        var v21341 = v24014.Asg;
        var v16709 = errorRecoverySet$$19 | v21341;
        var v21342 = TypeScript$$14.ErrorRecoverySet;
        var v16710 = v21342.Comma;
        var v8914 = v16709 | v16710;
        var v26909 = this.parseTypeReference(v8914, false);
        varDecl$$7.typeExpr = v26909;
        var v16711 = varDecl$$7.typeExpr;
        if (v16711) {
          var v24015 = varDecl$$7.typeExpr;
          var v21343 = v24015.nodeType;
          var v24016 = TypeScript$$14.NodeType;
          var v21344 = v24016.TypeRef;
          v16711 = v21343 == v21344;
        }
        var v8917 = v16711;
        if (v8917) {
          var typeExpr = varDecl$$7.typeExpr;
          var v16712 = typeExpr.term;
          if (v16712) {
            var v24017 = typeExpr.term;
            var v21345 = v24017.nodeType;
            var v24018 = TypeScript$$14.NodeType;
            var v21346 = v24018.FuncDecl;
            v16712 = v21345 == v21346;
          }
          var v8916 = v16712;
          if (v8916) {
            var v8915 = typeExpr.term;
            v8915.preComments = varDecl$$7.preComments;
          }
        }
      }
      var v21347 = this.currentToken;
      var v16713 = v21347.tokenId;
      var v21348 = TypeScript$$14.TokenID;
      var v16714 = v21348.Equals;
      var v8930 = v16713 == v16714;
      if (v8930) {
        var v16715 = this.parsingDeclareFile;
        var v21350 = !v16715;
        if (v21350) {
          var v24019 = TypeScript$$14.Modifiers;
          var v21349 = v24019.Ambient;
          v16715 = TypeScript$$14.hasFlag(modifiers$$7, v21349);
        }
        var v8921 = v16715;
        if (v8921) {
          this.reportParseError("context does not permit variable initializer");
          var v8920 = this.errorRecovery;
          if (v8920) {
            this.skip(errorRecoverySet$$19);
            var v16716 = varDecl$$7.flags;
            var v21351 = TypeScript$$14.ASTFlags;
            var v16717 = v21351.Error;
            varDecl$$7.flags = v16716 | v16717;
            var v8919 = this.scanner;
            var v26910 = v8919.lastTokenLimChar();
            varDecl$$7.limChar = v26910;
            return varDecl$$7;
          }
        }
        var v8922 = this.scanner;
        var v26911 = v8922.scan();
        this.currentToken = v26911;
        var v21352 = TypeScript$$14.ErrorRecoverySet;
        var v16718 = v21352.Comma;
        var v8923 = v16718 | errorRecoverySet$$19;
        var v16719 = TypeScript$$14.OperatorPrecedence;
        var v8924 = v16719.Comma;
        var v8925 = TypeContext.NoTypes;
        var v26912 = this.parseExpr(v8923, v8924, true, v8925);
        varDecl$$7.init = v26912;
        var v8926 = varDecl$$7.init;
        varDecl$$7.limChar = v8926.limChar;
        var v24020 = TypeScript$$14.Modifiers;
        var v21353 = v24020.Static;
        var v16720 = modifiers$$7 & v21353;
        var v8928 = !v16720;
        if (v8928) {
          var v8927 = this.currentClassDefinition;
          var v21354 = v8927.varFlags;
          var v24021 = TypeScript$$14.VarFlags;
          var v21355 = v24021.ClassSuperMustBeFirstCallInConstructor;
          v8927.varFlags = v21354 | v21355;
        }
      } else {
        var v8929 = this.scanner;
        varDecl$$7.limChar = v8929.pos;
      }
      var v21356 = TypeScript$$14.Modifiers;
      var v16721 = v21356.Static;
      var v8931 = modifiers$$7 & v16721;
      if (v8931) {
        var v16722 = varDecl$$7.varFlags;
        var v21357 = TypeScript$$14.VarFlags;
        var v16723 = v21357.Static;
        varDecl$$7.varFlags = v16722 | v16723;
        isStatic$$1 = true;
      }
      var v24022 = TypeScript$$14.Modifiers;
      var v21358 = v24022.Private;
      var v16724 = modifiers$$7 & v21358;
      var v21359 = TypeScript$$14.Modifiers;
      var v16725 = v21359.None;
      var v8932 = v16724 != v16725;
      if (v8932) {
        var v16726 = varDecl$$7.varFlags;
        var v21360 = TypeScript$$14.VarFlags;
        var v16727 = v21360.Private;
        varDecl$$7.varFlags = v16726 | v16727;
      } else {
        var v16728 = varDecl$$7.varFlags;
        var v21361 = TypeScript$$14.VarFlags;
        var v16729 = v21361.Public;
        varDecl$$7.varFlags = v16728 | v16729;
      }
      var v16730 = varDecl$$7.varFlags;
      var v21362 = TypeScript$$14.VarFlags;
      var v16731 = v21362.Property;
      varDecl$$7.varFlags = v16730 | v16731;
      if (isDeclaredInConstructor) {
        var v16732 = varDecl$$7.varFlags;
        var v21363 = TypeScript$$14.VarFlags;
        var v16733 = v21363.ClassConstructorProperty;
        varDecl$$7.varFlags = v16732 | v16733;
      }
      var v16734 = !isDeclaredInConstructor;
      if (v16734) {
        v16734 = !isStatic$$1;
      }
      var v8933 = v16734;
      if (v8933) {
        var v16735 = varDecl$$7.varFlags;
        var v21364 = TypeScript$$14.VarFlags;
        var v16736 = v21364.ClassBodyProperty;
        varDecl$$7.varFlags = v16735 | v16736;
      }
      var v16737 = this.currentClassDefinition;
      var v8934 = v16737.knownMemberNames;
      var v8935 = text$$15.actualText;
      v8934[v8935] = true;
      var v8938 = !isDeclaredInConstructor;
      if (v8938) {
        var v21365 = this.currentClassDefinition;
        var v16738 = v21365.members;
        var v8936 = v16738.members;
        var v24023 = this.currentClassDefinition;
        var v21366 = v24023.members;
        var v16739 = v21366.members;
        var v8937 = v16739.length;
        v8936[v8937] = varDecl$$7;
      }
      var v26913 = this.parseComments();
      varDecl$$7.postComments = v26913;
      return varDecl$$7;
    }
    function v565(minChar$$16, errorRecoverySet$$18, modifiers$$6) {
      this.parsingClassConstructorDefinition = true;
      var v8939 = this.parsingDeclareFile;
      var v16741 = !v8939;
      if (v16741) {
        var v21367 = TypeScript$$14.Modifiers;
        var v16740 = v21367.Ambient;
        v8939 = TypeScript$$14.hasFlag(modifiers$$6, v16740);
      }
      var isAmbient$$1 = v8939;
      var v8940 = TypeScript$$14.ASTList;
      var args$$9 = new v8940;
      var variableArgList$$2 = false;
      var preComments$$3 = this.parseComments();
      var v8941 = this.scanner;
      var v26914 = v8941.scan();
      this.currentToken = v26914;
      var v21368 = this.currentToken;
      var v16742 = v21368.tokenId;
      var v21369 = TypeScript$$14.TokenID;
      var v16743 = v21369.OpenParen;
      var v8945 = v16742 == v16743;
      if (v8945) {
        variableArgList$$2 = this.parseFormalParameterList(errorRecoverySet$$18, args$$9, true, isAmbient$$1, false, false, false, false, null, true);
        var v21370 = args$$9.members;
        var v16744 = v21370.length;
        var v8944 = v16744 > 0;
        if (v8944) {
          var v8942 = args$$9.members;
          var v21371 = args$$9.members;
          var v16745 = v21371.length;
          var v8943 = v16745 - 1;
          var lastArg$$1 = v8942[v8943];
        }
      }
      var v8946 = isAmbient$$1;
      var v16748 = !v8946;
      if (v16748) {
        var v21372 = this.currentToken;
        var v16746 = v21372.tokenId;
        var v21373 = TypeScript$$14.TokenID;
        var v16747 = v21373.Semicolon;
        v8946 = v16746 == v16747;
      }
      var requiresSignature$$3 = v8946;
      if (requiresSignature$$3) {
        var i$$51 = 0;
        var v21374 = args$$9.members;
        var v16749 = v21374.length;
        var v8951 = i$$51 < v16749;
        for (;v8951;) {
          var v8947 = args$$9.members;
          var arg$$8 = v8947[i$$51];
          var v16750 = arg$$8.varFlags;
          var v21375 = TypeScript$$14.VarFlags;
          var v16751 = v21375.Property;
          var v8950 = TypeScript$$14.hasFlag(v16750, v16751);
          if (v8950) {
            var v8948 = arg$$8.minChar;
            var v8949 = arg$$8.limChar;
            this.reportParseError("Overload or ambient signatures may not specify parameter properties", v8948, v8949);
          }
          i$$51++;
          var v21376 = args$$9.members;
          var v16752 = v21376.length;
          v8951 = i$$51 < v16752;
        }
      }
      var v8953 = !requiresSignature$$3;
      if (v8953) {
        var v8952 = this.currentClassDefinition;
        var v16753 = this.nestingLevel;
        v8952.constructorNestingLevel = v16753 + 1;
      }
      var v21377 = TypeScript$$14.ErrorRecoverySet;
      var v16754 = v21377.RCurly;
      var v8954 = errorRecoverySet$$18 | v16754;
      var v16755 = this.currentClassDefinition;
      var v8955 = v16755.name;
      var v16756 = TypeScript$$14.AllowedElements;
      var v8956 = v16756.Properties;
      var constructorFuncDecl = this.parseFunctionStatements(v8954, v8955, true, false, args$$9, v8956, minChar$$16, requiresSignature$$3, modifiers$$6);
      constructorFuncDecl.preComments = preComments$$3;
      var v16757 = requiresSignature$$3;
      if (v16757) {
        v16757 = !isAmbient$$1;
      }
      var v8957 = v16757;
      if (v8957) {
        constructorFuncDecl.isOverload = true;
      }
      constructorFuncDecl.variableArgList = variableArgList$$2;
      this.currentClassDecl = null;
      var v16758 = this.currentClassDefinition;
      var v8958 = v16758.name;
      var v26915 = this.convertToTypeReference(v8958);
      constructorFuncDecl.returnTypeAnnotation = v26915;
      constructorFuncDecl.classDecl = this.currentClassDefinition;
      if (isAmbient$$1) {
        var v16759 = constructorFuncDecl.fncFlags;
        var v21378 = TypeScript$$14.FncFlags;
        var v16760 = v21378.Ambient;
        constructorFuncDecl.fncFlags = v16759 | v16760;
      }
      if (requiresSignature$$3) {
        var v16761 = constructorFuncDecl.fncFlags;
        var v21379 = TypeScript$$14.FncFlags;
        var v16762 = v21379.Signature;
        constructorFuncDecl.fncFlags = v16761 | v16762;
      }
      var v16763 = this.ambientModule;
      var v21381 = !v16763;
      if (v21381) {
        var v24024 = TypeScript$$14.Modifiers;
        var v21380 = v24024.Exported;
        v16763 = TypeScript$$14.hasFlag(modifiers$$6, v21380);
      }
      var v8959 = v16763;
      if (v8959) {
        var v16764 = constructorFuncDecl.fncFlags;
        var v21382 = TypeScript$$14.FncFlags;
        var v16765 = v21382.Exported;
        constructorFuncDecl.fncFlags = v16764 | v16765;
      }
      var v16766 = this.currentClassDefinition;
      var v8961 = v16766.constructorDecl;
      if (v8961) {
        var v21383 = !isAmbient$$1;
        if (v21383) {
          var v25921 = this.currentClassDefinition;
          var v25311 = v25921.constructorDecl;
          var v24025 = v25311.isSignature();
          v21383 = !v24025;
        }
        var v16767 = v21383;
        if (v16767) {
          var v21384 = constructorFuncDecl.isSignature();
          v16767 = !v21384;
        }
        var v8960 = v16767;
        if (v8960) {
          this.reportParseError("Duplicate constructor definition");
        }
      }
      var v16768 = isAmbient$$1;
      var v21386 = !v16768;
      if (v21386) {
        var v21385 = constructorFuncDecl.isSignature();
        v16768 = !v21385;
      }
      var v8963 = v16768;
      if (v8963) {
        var v8962 = this.currentClassDefinition;
        v8962.constructorDecl = constructorFuncDecl;
      }
      var v16769 = constructorFuncDecl.fncFlags;
      var v21387 = TypeScript$$14.FncFlags;
      var v16770 = v21387.ClassMethod;
      constructorFuncDecl.fncFlags = v16769 | v16770;
      var v21388 = this.currentClassDefinition;
      var v16771 = v21388.members;
      var v8964 = v16771.members;
      var v24026 = this.currentClassDefinition;
      var v21389 = v24026.members;
      var v16772 = v21389.members;
      var v8965 = v16772.length;
      v8964[v8965] = constructorFuncDecl;
      this.parsingClassConstructorDefinition = false;
      return constructorFuncDecl;
    }
    function v564(classDecl$$5, errorRecoverySet$$17, parentModifiers$$2) {
      var modifiers$$5 = parentModifiers$$2;
      var resetModifiers = false;
      var v8966 = this.scanner;
      var membersMinChar$$1 = v8966.startPos;
      var v16773 = TypeScript$$14.TokenID;
      var v8967 = v16773.OpenBrace;
      this.checkCurrentToken(v8967, errorRecoverySet$$17);
      this.nestingLevel++;
      var v8968 = this.scanner;
      var currentMemberMinChar = v8968.startPos;
      var wasGetOrSetId = false;
      var v25312 = this.currentToken;
      var v24027 = v25312.tokenId;
      var v25313 = TypeScript$$14.TokenID;
      var v24028 = v25313.CloseBrace;
      var v21390 = v24027 == v24028;
      var v24031 = !v21390;
      if (v24031) {
        var v25314 = this.currentToken;
        var v24029 = v25314.tokenId;
        var v25315 = TypeScript$$14.TokenID;
        var v24030 = v25315.EndOfFile;
        v21390 = v24029 == v24030;
      }
      var v16774 = v21390;
      var v9007 = !v16774;
      for (;v9007;) {
        var scanNext = true;
        var v16775 = TypeScript$$14.Modifiers;
        var v8969 = v16775.Public;
        var v16776 = TypeScript$$14.Modifiers;
        var v8970 = v16776.Private;
        var publicOrPrivateFlags = v8969 | v8970;
        var v21391 = this.currentToken;
        var v16777 = v21391.tokenId;
        var v21392 = TypeScript$$14.TokenID;
        var v16778 = v21392.Get;
        var v9002 = v16777 == v16778;
        if (v9002) {
          var v21393 = TypeScript$$14.Modifiers;
          var v16779 = v21393.Getter;
          var v8971 = modifiers$$5 & v16779;
          if (v8971) {
            this.reportParseError("Duplicate 'get' declaration in class body");
          }
          var v21394 = TypeScript$$14.Modifiers;
          var v16780 = v21394.Setter;
          var v8972 = modifiers$$5 & v16780;
          if (v8972) {
            this.reportParseError("Getter already marked as a setter");
          }
          var v21395 = TypeScript$$14.Modifiers;
          var v16781 = v21395.Getter;
          modifiers$$5 = modifiers$$5 | v16781;
        } else {
          var v21396 = this.currentToken;
          var v16782 = v21396.tokenId;
          var v21397 = TypeScript$$14.TokenID;
          var v16783 = v21397.Set;
          var v9001 = v16782 == v16783;
          if (v9001) {
            var v21398 = TypeScript$$14.Modifiers;
            var v16784 = v21398.Setter;
            var v8973 = modifiers$$5 & v16784;
            if (v8973) {
              this.reportParseError("Duplicate 'set' declaration in class body");
            }
            var v21399 = TypeScript$$14.Modifiers;
            var v16785 = v21399.Getter;
            var v8974 = modifiers$$5 & v16785;
            if (v8974) {
              this.reportParseError("Setter already marked as a getter");
            }
            var v21400 = TypeScript$$14.Modifiers;
            var v16786 = v21400.Setter;
            modifiers$$5 = modifiers$$5 | v16786;
          } else {
            var v21401 = this.currentToken;
            var v16787 = v21401.tokenId;
            var v21402 = TypeScript$$14.TokenID;
            var v16788 = v21402.Private;
            var v9000 = v16787 == v16788;
            if (v9000) {
              var v8975 = modifiers$$5 & publicOrPrivateFlags;
              if (v8975) {
                this.reportParseError("Multiple modifiers may not be applied to class members");
              }
              var v21403 = TypeScript$$14.Modifiers;
              var v16789 = v21403.Private;
              modifiers$$5 = modifiers$$5 | v16789;
            } else {
              var v21404 = this.currentToken;
              var v16790 = v21404.tokenId;
              var v21405 = TypeScript$$14.TokenID;
              var v16791 = v21405.Public;
              var v8999 = v16790 == v16791;
              if (v8999) {
                var v8976 = modifiers$$5 & publicOrPrivateFlags;
                if (v8976) {
                  this.reportParseError("Multiple modifiers may not be applied to class members");
                }
                var v21406 = TypeScript$$14.Modifiers;
                var v16792 = v21406.Public;
                modifiers$$5 = modifiers$$5 | v16792;
              } else {
                var v21407 = this.currentToken;
                var v16793 = v21407.tokenId;
                var v21408 = TypeScript$$14.TokenID;
                var v16794 = v21408.Static;
                var v8998 = v16793 == v16794;
                if (v8998) {
                  var v21409 = TypeScript$$14.Modifiers;
                  var v16795 = v21409.Static;
                  var v8977 = modifiers$$5 & v16795;
                  if (v8977) {
                    this.reportParseError("Multiple modifiers may not be applied to class members");
                  }
                  var v21410 = TypeScript$$14.Modifiers;
                  var v16796 = v21410.Static;
                  modifiers$$5 = modifiers$$5 | v16796;
                } else {
                  var v21411 = this.currentToken;
                  var v16797 = v21411.tokenId;
                  var v21412 = TypeScript$$14.TokenID;
                  var v16798 = v21412.Constructor;
                  var v8997 = v16797 == v16798;
                  if (v8997) {
                    var v8978 = modifiers$$5 != parentModifiers$$2;
                    if (v8978) {
                      this.reportParseError("Constructors may not have modifiers");
                    }
                    this.parseClassConstructorDeclaration(currentMemberMinChar, errorRecoverySet$$17, modifiers$$5);
                    scanNext = false;
                    resetModifiers = true;
                  } else {
                    var v21413 = wasGetOrSetId;
                    var v24034 = !v21413;
                    if (v24034) {
                      var v25316 = this.currentToken;
                      var v24032 = v25316.tokenId;
                      var v25317 = TypeScript$$14.TokenID;
                      var v24033 = v25317.Identifier;
                      v21413 = v24032 == v24033;
                    }
                    var v16799 = v21413;
                    var v21415 = !v16799;
                    if (v21415) {
                      var v21414 = this.currentToken;
                      v16799 = TypeScript$$14.convertTokToIDName(v21414);
                    }
                    var v8996 = v16799;
                    if (v8996) {
                      var v8979;
                      if (wasGetOrSetId) {
                        var v16800;
                        var v25318 = TypeScript$$14.Modifiers;
                        var v24035 = v25318.Getter;
                        var v21416 = modifiers$$5 & v24035;
                        if (v21416) {
                          v16800 = "get";
                        } else {
                          v16800 = "set";
                        }
                        v8979 = v16800;
                      } else {
                        var v16801 = this.currentToken;
                        v8979 = v16801.getText();
                      }
                      var idText = v8979;
                      var v8980;
                      if (wasGetOrSetId) {
                        var v16802 = TypeScript$$14.Identifier;
                        v8980 = new v16802(idText);
                      } else {
                        var v16803 = TypeScript$$14.Identifier;
                        var v16804 = this.currentToken;
                        v8980 = v16803.fromToken(v16804);
                      }
                      var id$$11 = v8980;
                      var v8981 = this.scanner;
                      id$$11.minChar = v8981.startPos;
                      var v8982 = this.scanner;
                      id$$11.limChar = v8982.pos;
                      if (wasGetOrSetId) {
                        var v16805;
                        var v25319 = TypeScript$$14.Modifiers;
                        var v24036 = v25319.Getter;
                        var v21419 = modifiers$$5 & v24036;
                        if (v21419) {
                          var v21417 = TypeScript$$14.Modifiers;
                          v16805 = v21417.Getter;
                        } else {
                          var v21418 = TypeScript$$14.Modifiers;
                          v16805 = v21418.Setter;
                        }
                        var v8983 = v16805;
                        modifiers$$5 = modifiers$$5 ^ v8983;
                        wasGetOrSetId = false;
                      } else {
                        var v8984 = this.scanner;
                        var v26916 = v8984.scan();
                        this.currentToken = v26916;
                      }
                      var v21420 = this.currentToken;
                      var v16806 = v21420.tokenId;
                      var v21421 = TypeScript$$14.TokenID;
                      var v16807 = v21421.OpenParen;
                      var v8991 = v16806 == v16807;
                      if (v8991) {
                        this.parseClassMemberFunctionDeclaration(id$$11, currentMemberMinChar, errorRecoverySet$$17, modifiers$$5);
                        scanNext = false;
                      } else {
                        var v24037 = TypeScript$$14.Modifiers;
                        var v21422 = v24037.Getter;
                        var v16808 = modifiers$$5 & v21422;
                        var v21424 = !v16808;
                        if (v21424) {
                          var v24038 = TypeScript$$14.Modifiers;
                          var v21423 = v24038.Setter;
                          v16808 = modifiers$$5 & v21423;
                        }
                        var v8985 = v16808;
                        if (v8985) {
                          this.reportParseError("Property accessors must be functions");
                        }
                        var varDecl$$6 = this.parseClassMemberVariableDeclaration(id$$11, currentMemberMinChar, false, errorRecoverySet$$17, modifiers$$5);
                        var v16809 = varDecl$$6.init;
                        if (v16809) {
                          var v24039 = varDecl$$6.init;
                          var v21425 = v24039.nodeType;
                          var v24040 = TypeScript$$14.NodeType;
                          var v21426 = v24040.FuncDecl;
                          v16809 = v21425 == v21426;
                        }
                        var v8990 = v16809;
                        if (v8990) {
                          var v21427 = this.currentToken;
                          var v16810 = v21427.tokenId;
                          var v21428 = TypeScript$$14.TokenID;
                          var v16811 = v21428.CloseBrace;
                          var v8986 = v16810 == v16811;
                          if (v8986) {
                            scanNext = false;
                          }
                        } else {
                          var v21429 = varDecl$$6.init;
                          if (v21429) {
                            var v25320 = varDecl$$6.init;
                            var v24041 = v25320.nodeType;
                            var v25321 = TypeScript$$14.NodeType;
                            var v24042 = v25321.ObjectLit;
                            v21429 = v24041 == v24042;
                          }
                          var v16812 = v21429;
                          if (v16812) {
                            var v24043 = this.currentToken;
                            var v21430 = v24043.tokenId;
                            var v24044 = TypeScript$$14.TokenID;
                            var v21431 = v24044.Semicolon;
                            v16812 = v21430 != v21431;
                          }
                          var v8989 = v16812;
                          if (v8989) {
                            scanNext = false;
                            var v8987 = varDecl$$6.init;
                            var v21432 = v8987.flags;
                            var v24045 = TypeScript$$14.ASTFlags;
                            var v21433 = v24045.AutomaticSemicolon;
                            v8987.flags = v21432 | v21433;
                          } else {
                            var v21434 = this.currentToken;
                            var v16813 = v21434.tokenId;
                            var v21435 = TypeScript$$14.TokenID;
                            var v16814 = v21435.Semicolon;
                            var v8988 = v16813 != v16814;
                            if (v8988) {
                              this.reportParseError("Expected ';'");
                              scanNext = false;
                            }
                          }
                        }
                      }
                      resetModifiers = true;
                    } else {
                      var v21436 = this.currentToken;
                      var v16815 = v21436.tokenId;
                      var v21437 = TypeScript$$14.TokenID;
                      var v16816 = v21437.Super;
                      var v8995 = v16815 == v16816;
                      if (v8995) {
                        this.reportParseError("Base class initializers must be the first statement in a class definition");
                      } else {
                        var v21438 = !wasGetOrSetId;
                        if (v21438) {
                          var v25922 = TypeScript$$14.Modifiers;
                          var v25322 = v25922.Getter;
                          var v24046 = modifiers$$5 & v25322;
                          var v25324 = !v24046;
                          if (v25324) {
                            var v25923 = TypeScript$$14.Modifiers;
                            var v25323 = v25923.Setter;
                            v24046 = modifiers$$5 & v25323;
                          }
                          v21438 = v24046;
                        }
                        var v16817 = v21438;
                        if (v16817) {
                          var v26189 = this.currentToken;
                          var v25924 = v26189.tokenId;
                          var v26190 = TypeScript$$14.TokenID;
                          var v25925 = v26190.OpenParen;
                          var v25325 = v25924 == v25925;
                          var v25928 = !v25325;
                          if (v25928) {
                            var v26191 = this.currentToken;
                            var v25926 = v26191.tokenId;
                            var v26192 = TypeScript$$14.TokenID;
                            var v25927 = v26192.Equals;
                            v25325 = v25926 == v25927;
                          }
                          var v24047 = v25325;
                          var v25328 = !v24047;
                          if (v25328) {
                            var v25929 = this.currentToken;
                            var v25326 = v25929.tokenId;
                            var v25930 = TypeScript$$14.TokenID;
                            var v25327 = v25930.Colon;
                            v24047 = v25326 == v25327;
                          }
                          var v21439 = v24047;
                          var v24050 = !v21439;
                          if (v24050) {
                            var v25329 = this.currentToken;
                            var v24048 = v25329.tokenId;
                            var v25330 = TypeScript$$14.TokenID;
                            var v24049 = v25330.Semicolon;
                            v21439 = v24048 == v24049;
                          }
                          v16817 = v21439;
                        }
                        var v8994 = v16817;
                        if (v8994) {
                          wasGetOrSetId = true;
                          scanNext = false;
                        } else {
                          var v21440 = this.currentToken;
                          var v16818 = v21440.tokenId;
                          var v21441 = TypeScript$$14.TokenID;
                          var v16819 = v21441.Semicolon;
                          var v8993 = v16818 != v16819;
                          if (v8993) {
                            var v24051 = this.currentToken;
                            var v21442 = v24051.getText();
                            var v16820 = "Unexpected '" + v21442;
                            var v8992 = v16820 + "' in class definition";
                            this.reportParseError(v8992);
                            resetModifiers = true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (scanNext) {
          var v9003 = this.scanner;
          var v26917 = v9003.scan();
          this.currentToken = v26917;
          var v16821 = this.currentToken;
          var v9005 = v16821 === undefined;
          if (v9005) {
            var v9004 = this.scanner;
            var v26918 = v9004.scan();
            this.currentToken = v26918;
          }
        }
        if (resetModifiers) {
          modifiers$$5 = parentModifiers$$2;
          var v9006 = this.scanner;
          currentMemberMinChar = v9006.startPos;
          resetModifiers = false;
        }
        var v25331 = this.currentToken;
        var v24052 = v25331.tokenId;
        var v25332 = TypeScript$$14.TokenID;
        var v24053 = v25332.CloseBrace;
        var v21443 = v24052 == v24053;
        var v24056 = !v21443;
        if (v24056) {
          var v25333 = this.currentToken;
          var v24054 = v25333.tokenId;
          var v25334 = TypeScript$$14.TokenID;
          var v24055 = v25334.EndOfFile;
          v21443 = v24054 == v24055;
        }
        var v16822 = v21443;
        v9007 = !v16822;
      }
      var v9008 = this.scanner;
      var membersLimChar = v9008.pos;
      var v21444 = this.currentToken;
      var v16823 = v21444.tokenId;
      var v21445 = TypeScript$$14.TokenID;
      var v16824 = v21445.CloseBrace;
      var v9015 = v16823 == v16824;
      if (v9015) {
        var v9009 = TypeScript$$14.ASTSpan;
        var v26919 = new v9009;
        classDecl$$5.endingToken = v26919;
        var v9010 = classDecl$$5.endingToken;
        var v16825 = this.scanner;
        v9010.minChar = v16825.startPos;
        var v9011 = classDecl$$5.endingToken;
        var v16826 = this.scanner;
        v9011.limChar = v16826.pos;
        var v25335 = this.currentClassDefinition;
        var v24057 = v25335.members;
        var v21446 = v24057.members;
        var v16827 = v21446.length;
        var v9013 = !v16827;
        if (v9013) {
          var v9012 = this.currentClassDefinition;
          var v26920 = this.parseComments();
          v9012.preComments = v26920;
        }
        var v9014 = this.scanner;
        var v26921 = v9014.scan();
        this.currentToken = v26921;
      }
      this.nestingLevel--;
      var v16828 = this.currentClassDefinition;
      var v9016 = v16828.members;
      v9016.minChar = membersMinChar$$1;
      var v16829 = this.currentClassDefinition;
      var v9017 = v16829.members;
      v9017.limChar = membersLimChar;
      var v9018 = this.currentClassDefinition;
      v9018.limChar = membersLimChar;
      this.currentClassDefinition = null;
      return;
    }
    function v563(errorRecoverySet$$16, minChar$$15, modifiers$$4) {
      var v9019 = this.scanner;
      var leftCurlyCount$$3 = v9019.leftCurlyCount;
      var v9020 = this.scanner;
      var rightCurlyCount$$3 = v9020.rightCurlyCount;
      var v24058 = TypeScript$$14.Modifiers;
      var v21447 = v24058.Readonly;
      var v16830 = modifiers$$4 & v21447;
      var v21448 = TypeScript$$14.Modifiers;
      var v16831 = v21448.None;
      var v9021 = v16830 != v16831;
      if (v9021) {
        this.reportParseError("const modifier is implicit for class");
      }
      var v16832 = this.parsingDeclareFile;
      var v21449 = !v16832;
      if (v21449) {
        v16832 = this.ambientModule;
      }
      var v9022 = v16832;
      if (v9022) {
        var v21450 = TypeScript$$14.Modifiers;
        var v16833 = v21450.Ambient;
        modifiers$$4 = modifiers$$4 | v16833;
        var v21451 = TypeScript$$14.Modifiers;
        var v16834 = v21451.Exported;
        modifiers$$4 = modifiers$$4 | v16834;
      }
      var v9023 = this.parsingDeclareFile;
      var v16837 = !v9023;
      if (v16837) {
        var v24059 = TypeScript$$14.Modifiers;
        var v21452 = v24059.Ambient;
        var v16835 = modifiers$$4 & v21452;
        var v21453 = TypeScript$$14.Modifiers;
        var v16836 = v21453.None;
        v9023 = v16835 != v16836;
      }
      var classIsMarkedAsAmbient = v9023;
      var svAmbientClass = this.ambientClass;
      this.ambientClass = classIsMarkedAsAmbient;
      var v9024 = this.scanner;
      var v26922 = v9024.scan();
      this.currentToken = v26922;
      var name$$49 = null;
      var v24060 = this.currentToken;
      var v21454 = v24060.tokenId;
      var v24061 = TypeScript$$14.TokenID;
      var v21455 = v24061.Identifier;
      var v16838 = v21454 == v21455;
      var v21457 = !v16838;
      if (v21457) {
        var v25336 = this.currentToken;
        var v24062 = TypeScript$$14.isPrimitiveTypeToken(v25336);
        var v21456 = !v24062;
        if (v21456) {
          var v24063 = this.currentToken;
          var v24064 = this.strictMode;
          v21456 = TypeScript$$14.convertTokToID(v24063, v24064);
        }
        v16838 = v21456;
      }
      var v9034 = v16838;
      if (v9034) {
        var v9025 = TypeScript$$14.Identifier;
        var v9026 = this.currentToken;
        name$$49 = v9025.fromToken(v9026);
        var v9027 = this.scanner;
        name$$49.minChar = v9027.startPos;
        var v9028 = this.scanner;
        name$$49.limChar = v9028.pos;
        var v9029 = this.scanner;
        var v26923 = v9029.scan();
        this.currentToken = v26923;
      } else {
        this.reportParseError("class missing name");
        var v9033 = this.errorRecovery;
        if (v9033) {
          var v9030 = TypeScript$$14.MissingIdentifier;
          name$$49 = new v9030;
          var v9031 = this.scanner;
          name$$49.minChar = v9031.pos;
          var v9032 = this.scanner;
          name$$49.limChar = v9032.pos;
          var v16839 = name$$49.flags;
          var v21458 = TypeScript$$14.ASTFlags;
          var v16840 = v21458.Error;
          name$$49.flags = v16839 | v16840;
        }
      }
      var extendsList$$5 = null;
      var implementsList$$4 = null;
      var requiresSignature$$2 = false;
      var v24065 = this.currentToken;
      var v21459 = v24065.tokenId;
      var v24066 = TypeScript$$14.TokenID;
      var v21460 = v24066.Extends;
      var v16841 = v21459 == v21460;
      var v21463 = !v16841;
      if (v21463) {
        var v24067 = this.currentToken;
        var v21461 = v24067.tokenId;
        var v24068 = TypeScript$$14.TokenID;
        var v21462 = v24068.Implements;
        v16841 = v21461 == v21462;
      }
      var v9037 = v16841;
      if (v9037) {
        var v9035 = TypeScript$$14.ASTList;
        extendsList$$5 = new v9035;
        var v9036 = TypeScript$$14.ASTList;
        implementsList$$4 = new v9036;
        this.parseBaseList(extendsList$$5, implementsList$$4, errorRecoverySet$$16, true);
      }
      var v9038 = TypeScript$$14.ClassDeclaration;
      var v16842 = TypeScript$$14.ASTList;
      var v9039 = new v16842;
      var classDecl$$4 = new v9038(name$$49, v9039, extendsList$$5, implementsList$$4);
      this.currentClassDefinition = classDecl$$4;
      this.parseClassElements(classDecl$$4, errorRecoverySet$$16, modifiers$$4);
      var v21464 = this.ambientModule;
      var v24069 = !v21464;
      if (v24069) {
        v21464 = this.parsingDeclareFile;
      }
      var v16843 = v21464;
      var v21466 = !v16843;
      if (v21466) {
        var v24070 = TypeScript$$14.Modifiers;
        var v21465 = v24070.Exported;
        v16843 = TypeScript$$14.hasFlag(modifiers$$4, v21465);
      }
      var v9040 = v16843;
      if (v9040) {
        var v16844 = classDecl$$4.varFlags;
        var v21467 = TypeScript$$14.VarFlags;
        var v16845 = v21467.Exported;
        classDecl$$4.varFlags = v16844 | v16845;
      }
      var v16846 = this.ambientModule;
      var v21469 = !v16846;
      if (v21469) {
        var v24071 = TypeScript$$14.Modifiers;
        var v21468 = v24071.Ambient;
        v16846 = TypeScript$$14.hasFlag(modifiers$$4, v21468);
      }
      var v9041 = v16846;
      if (v9041) {
        var v16847 = classDecl$$4.varFlags;
        var v21470 = TypeScript$$14.VarFlags;
        var v16848 = v21470.Ambient;
        classDecl$$4.varFlags = v16847 | v16848;
      }
      var v16849 = classDecl$$4.varFlags;
      var v21471 = TypeScript$$14.VarFlags;
      var v16850 = v21471.Class;
      classDecl$$4.varFlags = v16849 | v16850;
      this.ambientClass = svAmbientClass;
      var v16851 = this.scanner;
      var v9042 = v16851.leftCurlyCount;
      classDecl$$4.leftCurlyCount = v9042 - leftCurlyCount$$3;
      var v16852 = this.scanner;
      var v9043 = v16852.rightCurlyCount;
      classDecl$$4.rightCurlyCount = v9043 - rightCurlyCount$$3;
      return classDecl$$4;
    }
    function v562(extendsList$$4, implementsList$$3, errorRecoverySet$$15, isClass) {
      var keyword = true;
      var currentList = extendsList$$4;
      for (;;) {
        if (keyword) {
          var v21472 = this.currentToken;
          var v16853 = v21472.tokenId;
          var v21473 = TypeScript$$14.TokenID;
          var v16854 = v21473.Implements;
          var v9045 = v16853 === v16854;
          if (v9045) {
            currentList = implementsList$$3;
          } else {
            var v24072 = this.currentToken;
            var v21474 = v24072.tokenId;
            var v24073 = TypeScript$$14.TokenID;
            var v21475 = v24073.Extends;
            var v16855 = v21474 == v21475;
            if (v16855) {
              var v21476 = this.requiresExtendsBlock;
              v16855 = !v21476;
            }
            var v9044 = v16855;
            if (v9044) {
              this.requiresExtendsBlock = isClass;
            }
          }
          var v9046 = this.scanner;
          var v26924 = v9046.scan();
          this.currentToken = v26924;
          keyword = false;
        }
        var baseName$$3 = null;
        var v24074 = this.currentToken;
        var v21477 = v24074.tokenId;
        var v24075 = TypeScript$$14.TokenID;
        var v21478 = v24075.Identifier;
        var v16856 = v21477 == v21478;
        var v21481 = !v16856;
        if (v21481) {
          var v21479 = this.currentToken;
          var v21480 = this.strictMode;
          v16856 = TypeScript$$14.convertTokToID(v21479, v21480);
        }
        var v9056 = v16856;
        if (v9056) {
          var v9047 = this.scanner;
          var minChar$$14 = v9047.startPos;
          var v9048 = TypeScript$$14.Identifier;
          var v9049 = this.currentToken;
          baseName$$3 = v9048.fromToken(v9049);
          baseName$$3.minChar = minChar$$14;
          var v9050 = this.scanner;
          baseName$$3.limChar = v9050.pos;
          var v21482 = TypeScript$$14.ErrorRecoverySet;
          var v16857 = v21482.LCurly;
          var v9051 = errorRecoverySet$$15 | v16857;
          baseName$$3 = this.parseNamedType(v9051, minChar$$14, baseName$$3, false);
        } else {
          this.reportParseError("Expected base name");
          var v9055 = this.errorRecovery;
          if (v9055) {
            var v9052 = TypeScript$$14.MissingIdentifier;
            baseName$$3 = new v9052;
            var v9053 = this.scanner;
            baseName$$3.minChar = v9053.pos;
            var v9054 = this.scanner;
            baseName$$3.limChar = v9054.pos;
            var v16858 = baseName$$3.flags;
            var v21483 = TypeScript$$14.ASTFlags;
            var v16859 = v21483.Error;
            baseName$$3.flags = v16858 | v16859;
          }
        }
        var v21484 = this.currentToken;
        var v16860 = v21484.tokenId;
        var v21485 = TypeScript$$14.TokenID;
        var v16861 = v21485.OpenParen;
        var v9057 = v16860 == v16861;
        if (v9057) {
          if (isClass) {
            this.reportParseError("Base classes may only be initialized via a 'super' call within the constructor body");
          } else {
            this.reportParseError("Interfaces may not be extended with a call expression");
          }
        } else {
          currentList.append(baseName$$3);
        }
        var v21486 = isClass;
        if (v21486) {
          v21486 = currentList == extendsList$$4;
        }
        var v16862 = v21486;
        if (v16862) {
          var v24076 = extendsList$$4.members;
          var v21487 = v24076.length;
          v16862 = v21487 > 1;
        }
        var v9058 = v16862;
        if (v9058) {
          this.reportParseError("A class may only extend one other class");
        }
        var v21488 = this.currentToken;
        var v16863 = v21488.tokenId;
        var v21489 = TypeScript$$14.TokenID;
        var v16864 = v21489.Comma;
        var v9062 = v16863 == v16864;
        if (v9062) {
          var v9059 = this.scanner;
          var v26925 = v9059.scan();
          this.currentToken = v26925;
          continue;
        } else {
          var v24077 = this.currentToken;
          var v21490 = v24077.tokenId;
          var v24078 = TypeScript$$14.TokenID;
          var v21491 = v24078.Extends;
          var v16865 = v21490 == v21491;
          var v21494 = !v16865;
          if (v21494) {
            var v24079 = this.currentToken;
            var v21492 = v24079.tokenId;
            var v24080 = TypeScript$$14.TokenID;
            var v21493 = v24080.Implements;
            v16865 = v21492 == v21493;
          }
          var v9061 = v16865;
          if (v9061) {
            var v24081 = this.currentToken;
            var v21495 = v24081.tokenId;
            var v24082 = TypeScript$$14.TokenID;
            var v21496 = v24082.Extends;
            var v16866 = v21495 == v21496;
            if (v16866) {
              var v21497 = this.requiresExtendsBlock;
              v16866 = !v21497;
            }
            var v9060 = v16866;
            if (v9060) {
              this.requiresExtendsBlock = isClass;
            }
            currentList = extendsList$$4;
            keyword = true;
            continue;
          }
        }
        break;
      }
      return;
    }
    function v561(errorRecoverySet$$14) {
      var v9063 = TypeScript$$14.ASTList;
      var args$$8 = new v9063;
      var v9064 = this.scanner;
      args$$8.minChar = v9064.startPos;
      var v9065 = this.scanner;
      var v26926 = v9065.scan();
      this.currentToken = v26926;
      var v21498 = this.currentToken;
      var v16867 = v21498.tokenId;
      var v21499 = TypeScript$$14.TokenID;
      var v16868 = v21499.CloseParen;
      var v9072 = v16867 !== v16868;
      if (v9072) {
        for (;true;) {
          var v21500 = args$$8.members;
          var v16869 = v21500.length;
          var v9066 = v16869 > 65535;
          if (v9066) {
            this.reportParseError("max number of args exceeded");
            break;
          }
          var v21501 = TypeScript$$14.ErrorRecoverySet;
          var v16870 = v21501.Comma;
          var v9067 = v16870 | errorRecoverySet$$14;
          var v16871 = TypeScript$$14.OperatorPrecedence;
          var v9068 = v16871.Comma;
          var v9069 = TypeContext.NoTypes;
          var arg$$7 = this.parseExpr(v9067, v9068, true, v9069);
          args$$8.append(arg$$7);
          var v21502 = this.currentToken;
          var v16872 = v21502.tokenId;
          var v21503 = TypeScript$$14.TokenID;
          var v16873 = v21503.Comma;
          var v9070 = v16872 != v16873;
          if (v9070) {
            break;
          }
          var v9071 = this.scanner;
          var v26927 = v9071.scan();
          this.currentToken = v26927;
        }
      }
      var v9073 = this.scanner;
      args$$8.limChar = v9073.pos;
      return args$$8;
    }
    function v560(ast$$37) {
      var result$$9;
      var v9078 = ast$$37.nodeType;
      switch(v9078) {
        case TypeScript$$14.NodeType.TypeRef:
          return ast$$37;
        case TypeScript$$14.NodeType.Name:
          var v9074 = TypeScript$$14.TypeReference;
          result$$9 = new v9074(ast$$37, 0);
          result$$9.minChar = ast$$37.minChar;
          result$$9.limChar = ast$$37.limChar;
          return result$$9;
        case TypeScript$$14.NodeType.Index:
          var expr$$4 = ast$$37;
          var v9075 = expr$$4.operand1;
          result$$9 = this.convertToTypeReference(v9075);
          if (result$$9) {
            result$$9.arrayCount++;
            result$$9.minChar = expr$$4.minChar;
            result$$9.limChar = expr$$4.limChar;
            return result$$9;
          } else {
            var v9076 = TypeScript$$14.AST;
            var v16874 = TypeScript$$14.NodeType;
            var v9077 = v16874.Error;
            var etr$$1 = new v9076(v9077);
            return etr$$1;
          }
        ;
      }
      return null;
    }
    function v559(errorRecoverySet$$13, isDecl, requiresSignature$$1, isMethod$$1, methodName, indexer, isStatic, markedAsAmbient, modifiers$$3, lambdaArgContext, expectClosingRParen$$1) {
      var v9079 = this.scanner;
      var leftCurlyCount$$2 = v9079.leftCurlyCount;
      var v9080 = this.scanner;
      var rightCurlyCount$$2 = v9080.rightCurlyCount;
      var prevInConstr = this.parsingClassConstructorDefinition;
      this.parsingClassConstructorDefinition = false;
      var name$$48 = null;
      var v9081 = this.scanner;
      var fnMin = v9081.startPos;
      var v9082 = this.scanner;
      var minChar$$13 = v9082.pos;
      var prevNestingLevel = this.nestingLevel;
      var preComments$$2 = this.parseComments();
      var v9083 = !lambdaArgContext;
      var isLambda$$1 = !v9083;
      this.nestingLevel = 0;
      var v21504 = this.style_funcInLoop;
      var v16875 = !v21504;
      if (v16875) {
        v16875 = this.inLoop();
      }
      var v9084 = v16875;
      if (v9084) {
        this.reportParseStyleError("function declaration in loop");
      }
      var v24083 = !isMethod$$1;
      if (v24083) {
        v24083 = !isStatic;
      }
      var v21505 = v24083;
      if (v21505) {
        v21505 = !indexer;
      }
      var v16876 = v21505;
      if (v16876) {
        v16876 = !lambdaArgContext;
      }
      var v9094 = v16876;
      if (v9094) {
        var v9085 = this.scanner;
        var v26928 = v9085.scan();
        this.currentToken = v26928;
        this.state = ParseState.StartFncDecl;
        var v24084 = this.currentToken;
        var v21506 = v24084.tokenId;
        var v24085 = TypeScript$$14.TokenID;
        var v21507 = v24085.Identifier;
        var v16877 = v21506 != v21507;
        if (v16877) {
          var v24086 = this.currentToken;
          var v24087 = this.strictMode;
          var v21508 = TypeScript$$14.convertTokToID(v24086, v24087);
          v16877 = !v21508;
        }
        var v9093 = v16877;
        if (v9093) {
          if (isDecl) {
            this.reportParseError("Function declaration must include identifier");
            this.nestingLevel = prevNestingLevel;
            var v9086 = TypeScript$$14.IncompleteAST;
            var v16878 = this.scanner;
            var v9087 = v16878.pos;
            return new v9086(fnMin, v9087);
          }
        } else {
          var v9088 = TypeScript$$14.Identifier;
          var v9089 = this.currentToken;
          name$$48 = v9088.fromToken(v9089);
          var v9090 = this.scanner;
          name$$48.minChar = v9090.startPos;
          var v9091 = this.scanner;
          name$$48.limChar = v9091.pos;
          var v9092 = this.scanner;
          var v26929 = v9092.scan();
          this.currentToken = v26929;
        }
      } else {
        if (methodName) {
          name$$48 = methodName;
        }
      }
      this.state = ParseState.FncDeclName;
      var v9095 = TypeScript$$14.ASTList;
      var args$$7 = new v9095;
      var variableArgList$$1 = false;
      var isOverload = false;
      var v16879 = TypeScript$$14.Modifiers;
      var v9096 = v16879.Getter;
      var isGetter$$1 = TypeScript$$14.hasFlag(modifiers$$3, v9096);
      var v16880 = TypeScript$$14.Modifiers;
      var v9097 = v16880.Setter;
      var isSetter$$1 = TypeScript$$14.hasFlag(modifiers$$3, v9097);
      var v25337 = this.currentToken;
      var v24088 = v25337.tokenId;
      var v25338 = TypeScript$$14.TokenID;
      var v24089 = v25338.OpenParen;
      var v21509 = v24088 == v24089;
      var v24091 = !v21509;
      if (v24091) {
        var v24090 = indexer;
        if (v24090) {
          var v25931 = this.currentToken;
          var v25339 = v25931.tokenId;
          var v25932 = TypeScript$$14.TokenID;
          var v25340 = v25932.OpenBracket;
          v24090 = v25339 == v25340;
        }
        v21509 = v24090;
      }
      var v16881 = v21509;
      var v21511 = !v16881;
      if (v21511) {
        var v21510 = lambdaArgContext;
        if (v21510) {
          var v24092 = lambdaArgContext.preProcessedLambdaArgs;
          var v25343 = !v24092;
          if (v25343) {
            var v25933 = this.currentToken;
            var v25341 = v25933.tokenId;
            var v25934 = TypeScript$$14.TokenID;
            var v25342 = v25934.DotDotDot;
            v24092 = v25341 == v25342;
          }
          v21510 = v24092;
        }
        v16881 = v21510;
      }
      var v9099 = v16881;
      if (v9099) {
        var v16882;
        if (lambdaArgContext) {
          v16882 = lambdaArgContext.preProcessedLambdaArgs;
        } else {
          v16882 = null;
        }
        var v9098 = v16882;
        variableArgList$$1 = this.parseFormalParameterList(errorRecoverySet$$13, args$$7, false, requiresSignature$$1, indexer, isGetter$$1, isSetter$$1, isLambda$$1, v9098, expectClosingRParen$$1);
      }
      this.state = ParseState.FncDeclArgs;
      var returnType$$1 = null;
      var v21512 = this.currentToken;
      var v16883 = v21512.tokenId;
      var v21513 = TypeScript$$14.TokenID;
      var v16884 = v21513.Colon;
      var v9102 = v16883 == v16884;
      if (v9102) {
        var v9100 = this.scanner;
        var v26930 = v9100.scan();
        this.currentToken = v26930;
        var v21514 = TypeScript$$14.Modifiers;
        var v16885 = v21514.Setter;
        var v9101 = TypeScript$$14.hasFlag(modifiers$$3, v16885);
        if (v9101) {
          this.reportParseError("Property setters may not declare a return type");
        }
        returnType$$1 = this.parseTypeReference(errorRecoverySet$$13, true);
      }
      var v16886 = indexer;
      if (v16886) {
        var v24093 = args$$7.members;
        var v21515 = v24093.length;
        v16886 = v21515 == 0;
      }
      var v9103 = v16886;
      if (v9103) {
        this.reportParseError("Index signatures require a parameter type to be specified");
      }
      this.state = ParseState.FncDeclReturnType;
      var v16887 = isLambda$$1;
      if (v16887) {
        var v24094 = this.currentToken;
        var v21516 = v24094.tokenId;
        var v24095 = TypeScript$$14.TokenID;
        var v21517 = v24095.EqualsGreaterThan;
        v16887 = v21516 != v21517;
      }
      var v9104 = v16887;
      if (v9104) {
        this.reportParseError("Expected '=>'");
      }
      var v24096 = isDecl;
      if (v24096) {
        var v25935 = this.parsingDeclareFile;
        var v26193 = !v25935;
        if (v26193) {
          v25935 = markedAsAmbient;
        }
        var v25344 = v25935;
        v24096 = !v25344;
      }
      var v21518 = v24096;
      if (v21518) {
        var v24097 = !isMethod$$1;
        var v25346 = !v24097;
        if (v25346) {
          var v26194 = this.ambientModule;
          var v26316 = !v26194;
          if (v26316) {
            v26194 = this.ambientClass;
          }
          var v25936 = v26194;
          var v26195 = !v25936;
          if (v26195) {
            v25936 = this.inInterfaceDecl;
          }
          var v25345 = v25936;
          v24097 = !v25345;
        }
        v21518 = v24097;
      }
      var v16888 = v21518;
      if (v16888) {
        var v24098 = this.currentToken;
        var v21519 = v24098.tokenId;
        var v24099 = TypeScript$$14.TokenID;
        var v21520 = v24099.Semicolon;
        v16888 = v21519 == v21520;
      }
      var v9105 = v16888;
      if (v9105) {
        isOverload = true;
        isDecl = false;
        requiresSignature$$1 = true;
      }
      var svInFncDecl = this.inFncDecl;
      this.inFncDecl = true;
      var v21521 = TypeScript$$14.ErrorRecoverySet;
      var v16889 = v21521.RCurly;
      var v9106 = errorRecoverySet$$13 | v16889;
      var v16890 = TypeScript$$14.AllowedElements;
      var v9107 = v16890.None;
      var v16891 = TypeScript$$14.Modifiers;
      var v9108 = v16891.None;
      var funcDecl$$7 = this.parseFunctionStatements(v9106, name$$48, false, isMethod$$1, args$$7, v9107, minChar$$13, requiresSignature$$1, v9108);
      this.inFncDecl = svInFncDecl;
      funcDecl$$7.variableArgList = variableArgList$$1;
      funcDecl$$7.isOverload = isOverload;
      var v9109 = !requiresSignature$$1;
      if (v9109) {
        var v16892 = funcDecl$$7.fncFlags;
        var v21522 = TypeScript$$14.FncFlags;
        var v16893 = v21522.Definition;
        funcDecl$$7.fncFlags = v16892 | v16893;
      }
      if (isStatic) {
        var v16894 = funcDecl$$7.fncFlags;
        var v21523 = TypeScript$$14.FncFlags;
        var v16895 = v21523.Static;
        funcDecl$$7.fncFlags = v16894 | v16895;
      }
      if (requiresSignature$$1) {
        var v16896 = funcDecl$$7.fncFlags;
        var v21524 = TypeScript$$14.FncFlags;
        var v16897 = v21524.Signature;
        funcDecl$$7.fncFlags = v16896 | v16897;
      }
      if (indexer) {
        var v16898 = funcDecl$$7.fncFlags;
        var v21525 = TypeScript$$14.FncFlags;
        var v16899 = v21525.IndexerMember;
        funcDecl$$7.fncFlags = v16898 | v16899;
      }
      funcDecl$$7.returnTypeAnnotation = returnType$$1;
      if (isMethod$$1) {
        var v16900 = funcDecl$$7.fncFlags;
        var v21526 = TypeScript$$14.FncFlags;
        var v16901 = v21526.Method;
        funcDecl$$7.fncFlags = v16900 | v16901;
        var v16902 = funcDecl$$7.fncFlags;
        var v21527 = TypeScript$$14.FncFlags;
        var v16903 = v21527.ClassPropertyMethodExported;
        funcDecl$$7.fncFlags = v16902 | v16903;
      }
      var v16904 = this.scanner;
      var v9110 = v16904.leftCurlyCount;
      funcDecl$$7.leftCurlyCount = v9110 - leftCurlyCount$$2;
      var v16905 = this.scanner;
      var v9111 = v16905.rightCurlyCount;
      funcDecl$$7.rightCurlyCount = v9111 - rightCurlyCount$$2;
      this.nestingLevel = prevNestingLevel;
      this.parsingClassConstructorDefinition = prevInConstr;
      funcDecl$$7.preComments = preComments$$2;
      return funcDecl$$7;
    }
    function v558(errorRecoverySet$$12, formals$$2, isClassConstr, isSig, isIndexer, isGetter, isSetter, isLambda, preProcessedLambdaArgs, expectClosingRParen) {
      var v9112 = this.scanner;
      formals$$2.minChar = v9112.startPos;
      if (isIndexer) {
        var v9113 = this.scanner;
        var v26931 = v9113.scan();
        this.currentToken = v26931;
      } else {
        var v9116 = !isLambda;
        if (v9116) {
          var v16906 = TypeScript$$14.TokenID;
          var v9114 = v16906.OpenParen;
          var v21528 = TypeScript$$14.ErrorRecoverySet;
          var v16907 = v21528.RParen;
          var v9115 = errorRecoverySet$$12 | v16907;
          this.checkCurrentToken(v9114, v9115);
        }
      }
      var sawEllipsis = false;
      var firstArg = true;
      var hasOptional = false;
      var haveFirstArgID = false;
      var v16908 = isLambda && preProcessedLambdaArgs;
      if (v16908) {
        var v21529 = preProcessedLambdaArgs.nodeType;
        var v24100 = TypeScript$$14.NodeType;
        var v21530 = v24100.EmptyExpr;
        v16908 = v21529 != v21530;
      }
      var v9117 = v16908;
      if (v9117) {
        hasOptional = this.transformAnonymousArgsIntoFormals(formals$$2, preProcessedLambdaArgs);
        haveFirstArgID = true;
      }
      for (;true;) {
        var munchedArg = false;
        var v9118 = TypeScript$$14.VarFlags;
        var argFlags = v9118.None;
        var v9119 = this.scanner;
        var argMinChar = v9119.startPos;
        var v16909 = this.inferPropertiesFromThisAssignment;
        if (v16909) {
          var v24101 = this.currentToken;
          var v21531 = v24101.tokenId;
          var v24102 = TypeScript$$14.TokenID;
          var v21532 = v24102.This;
          v16909 = v21531 == v21532;
        }
        var v9124 = v16909;
        if (v9124) {
          var v9120 = !isClassConstr;
          if (v9120) {
            this.reportParseError("Instance property declarations using 'this' may only be used in class constructors");
          }
          var v9121 = this.scanner;
          var v26932 = v9121.scan();
          this.currentToken = v26932;
          var v24103 = TypeScript$$14.VarFlags;
          var v21533 = v24103.Public;
          var v24104 = TypeScript$$14.VarFlags;
          var v21534 = v24104.Property;
          var v16910 = v21533 | v21534;
          argFlags = argFlags | v16910;
          var v9123 = this.currentClassDefinition;
          if (v9123) {
            var v9122 = this.currentClassDefinition;
            var v21535 = v9122.varFlags;
            var v24105 = TypeScript$$14.VarFlags;
            var v21536 = v24105.ClassSuperMustBeFirstCallInConstructor;
            v9122.varFlags = v21535 | v21536;
          }
        }
        var v21537 = this.currentToken;
        var v16911 = v21537.tokenId;
        var v21538 = TypeScript$$14.TokenID;
        var v16912 = v21538.Public;
        var v9132 = v16911 == v16912;
        if (v9132) {
          var v24106 = TypeScript$$14.VarFlags;
          var v21539 = v24106.Public;
          var v24107 = TypeScript$$14.VarFlags;
          var v21540 = v24107.Property;
          var v16913 = v21539 | v21540;
          argFlags = argFlags | v16913;
          var v9126 = this.currentClassDefinition;
          if (v9126) {
            var v9125 = this.currentClassDefinition;
            var v21541 = v9125.varFlags;
            var v24108 = TypeScript$$14.VarFlags;
            var v21542 = v24108.ClassSuperMustBeFirstCallInConstructor;
            v9125.varFlags = v21541 | v21542;
          }
        } else {
          var v21543 = this.currentToken;
          var v16914 = v21543.tokenId;
          var v21544 = TypeScript$$14.TokenID;
          var v16915 = v21544.Private;
          var v9131 = v16914 == v16915;
          if (v9131) {
            var v24109 = TypeScript$$14.VarFlags;
            var v21545 = v24109.Private;
            var v24110 = TypeScript$$14.VarFlags;
            var v21546 = v24110.Property;
            var v16916 = v21545 | v21546;
            argFlags = argFlags | v16916;
            var v9128 = this.currentClassDefinition;
            if (v9128) {
              var v9127 = this.currentClassDefinition;
              var v21547 = v9127.varFlags;
              var v24111 = TypeScript$$14.VarFlags;
              var v21548 = v24111.ClassSuperMustBeFirstCallInConstructor;
              v9127.varFlags = v21547 | v21548;
            }
          } else {
            var v24112 = this.currentToken;
            var v21549 = v24112.tokenId;
            var v24113 = TypeScript$$14.TokenID;
            var v21550 = v24113.Static;
            var v16917 = v21549 == v21550;
            if (v16917) {
              v16917 = isClassConstr;
            }
            var v9130 = v16917;
            if (v9130) {
              this.reportParseError("Static properties can not be declared as parameter properties");
              var v9129 = this.scanner;
              var v26933 = v9129.scan();
              this.currentToken = v26933;
            }
          }
        }
        var v21551 = TypeScript$$14.VarFlags;
        var v16918 = v21551.None;
        var v9144 = argFlags != v16918;
        if (v9144) {
          var v9133 = !isClassConstr;
          if (v9133) {
            this.reportParseError("only constructor parameters can be properties");
          }
          var v9134 = this.scanner;
          var v26934 = v9134.scan();
          this.currentToken = v26934;
          var v16919 = this.currentToken;
          var v9136 = TypeScript$$14.isModifier(v16919);
          if (v9136) {
            this.reportParseError("Multiple modifiers may not be applied to parameters");
            var v9135 = this.scanner;
            var v26935 = v9135.scan();
            this.currentToken = v26935;
          }
          var v16920 = this.inferPropertiesFromThisAssignment;
          if (v16920) {
            var v24114 = this.currentToken;
            var v21552 = v24114.tokenId;
            var v24115 = TypeScript$$14.TokenID;
            var v21553 = v24115.This;
            v16920 = v21552 == v21553;
          }
          var v9140 = v16920;
          if (v9140) {
            var v9137 = !isClassConstr;
            if (v9137) {
              this.reportParseError("Instance property declarations using 'this' may only be used in class constructors");
            }
            var v9138 = this.scanner;
            var v26936 = v9138.scan();
            this.currentToken = v26936;
            var v9139 = this.scanner;
            var v26937 = v9139.scan();
            this.currentToken = v26937;
          }
        } else {
          var v21554 = this.currentToken;
          var v16921 = v21554.tokenId;
          var v21555 = TypeScript$$14.TokenID;
          var v16922 = v21555.DotDotDot;
          var v9143 = v16921 == v16922;
          if (v9143) {
            sawEllipsis = true;
            var v9141 = this.scanner;
            var v26938 = v9141.scan();
            this.currentToken = v26938;
            var v25347 = this.currentToken;
            var v24116 = v25347.tokenId;
            var v25348 = TypeScript$$14.TokenID;
            var v24117 = v25348.Identifier;
            var v21556 = v24116 == v24117;
            var v16923 = !v21556;
            var v21559 = !v16923;
            if (v21559) {
              var v21557 = this.currentToken;
              var v21558 = this.strictMode;
              v16923 = TypeScript$$14.convertTokToID(v21557, v21558);
            }
            var v9142 = v16923;
            if (v9142) {
              this.reportParseError("'...' parameters require both a parameter name and an array type annotation to be specified");
              sawEllipsis = false;
            }
          }
        }
        var argId = null;
        var v21560 = !haveFirstArgID;
        if (v21560) {
          var v25349 = this.currentToken;
          var v24118 = v25349.tokenId;
          var v25350 = TypeScript$$14.TokenID;
          var v24119 = v25350.Identifier;
          v21560 = v24118 == v24119;
        }
        var v16924 = v21560;
        var v21563 = !v16924;
        if (v21563) {
          var v21561 = this.currentToken;
          var v21562 = this.strictMode;
          v16924 = TypeScript$$14.convertTokToID(v21561, v21562);
        }
        var v9149 = v16924;
        if (v9149) {
          var v9145 = TypeScript$$14.Identifier;
          var v9146 = this.currentToken;
          argId = v9145.fromToken(v9146);
          var v9147 = this.scanner;
          argId.minChar = v9147.startPos;
          var v9148 = this.scanner;
          argId.limChar = v9148.pos;
        }
        var v9171 = haveFirstArgID || argId;
        if (v9171) {
          munchedArg = true;
          var type$$30 = null;
          var arg$$6 = null;
          var v16925 = haveFirstArgID;
          if (v16925) {
            var v21564 = formals$$2.members;
            v16925 = v21564.length;
          }
          var v9156 = v16925;
          if (v9156) {
            var v9150 = formals$$2.members;
            var v21565 = formals$$2.members;
            var v16926 = v21565.length;
            var v9151 = v16926 - 1;
            arg$$6 = v9150[v9151];
            var v9152 = arg$$6.isOptional;
            if (v9152) {
              hasOptional = true;
            }
          } else {
            var v9153 = TypeScript$$14.ArgDecl;
            arg$$6 = new v9153(argId);
            if (isGetter) {
              this.reportParseError("Property getters may not take any arguments");
            }
            var v16927 = isSetter;
            if (v16927) {
              v16927 = !firstArg;
            }
            var v9154 = v16927;
            if (v9154) {
              this.reportParseError("Property setters may only take one argument");
            }
            arg$$6.minChar = argMinChar;
            var v26939 = this.parseComments();
            arg$$6.preComments = v26939;
            var v9155 = this.scanner;
            var v26940 = v9155.scan();
            this.currentToken = v26940;
          }
          var v21566 = this.currentToken;
          var v16928 = v21566.tokenId;
          var v21567 = TypeScript$$14.TokenID;
          var v16929 = v21567.Question;
          var v9158 = v16928 == v16929;
          if (v9158) {
            arg$$6.isOptional = true;
            hasOptional = true;
            var v9157 = this.scanner;
            var v26941 = v9157.scan();
            this.currentToken = v26941;
          }
          var v21568 = this.currentToken;
          var v16930 = v21568.tokenId;
          var v21569 = TypeScript$$14.TokenID;
          var v16931 = v21569.Colon;
          var v9160 = v16930 == v16931;
          if (v9160) {
            var v9159 = this.scanner;
            var v26942 = v9159.scan();
            this.currentToken = v26942;
            type$$30 = this.parseTypeReference(errorRecoverySet$$12, false);
          }
          var v21570 = this.currentToken;
          var v16932 = v21570.tokenId;
          var v21571 = TypeScript$$14.TokenID;
          var v16933 = v21571.Equals;
          var v9165 = v16932 == v16933;
          if (v9165) {
            if (isSig) {
              this.reportParseError("Arguments in signatures may not have default values");
            }
            hasOptional = true;
            var v9161 = this.scanner;
            var v26943 = v9161.scan();
            this.currentToken = v26943;
            var v21572 = TypeScript$$14.ErrorRecoverySet;
            var v16934 = v21572.Comma;
            var v9162 = v16934 | errorRecoverySet$$12;
            var v16935 = TypeScript$$14.OperatorPrecedence;
            var v9163 = v16935.Comma;
            var v9164 = TypeContext.NoTypes;
            var v26944 = this.parseExpr(v9162, v9163, false, v9164);
            arg$$6.init = v26944;
          }
          var v21573 = hasOptional;
          if (v21573) {
            var v24120 = arg$$6.isOptionalArg();
            v21573 = !v24120;
          }
          var v16936 = v21573;
          if (v16936) {
            v16936 = !sawEllipsis;
          }
          var v9166 = v16936;
          if (v9166) {
            this.reportParseError("Optional parameters may only be followed by other optional parameters");
          }
          var v16937 = sawEllipsis;
          if (v16937) {
            v16937 = arg$$6.isOptionalArg();
          }
          var v9167 = v16937;
          if (v9167) {
            this.reportParseError("Varargs may not be optional or have default parameters");
          }
          var v16938 = sawEllipsis;
          if (v16938) {
            v16938 = !type$$30;
          }
          var v9168 = v16938;
          if (v9168) {
            this.reportParseError("'...' parameters require both a parameter name and an array type annotation to be specified");
          }
          var v26945 = this.parseComments();
          arg$$6.postComments = v26945;
          arg$$6.typeExpr = type$$30;
          var v9169 = this.scanner;
          var v26946 = v9169.lastTokenLimChar();
          arg$$6.limChar = v26946;
          var v16939 = arg$$6.varFlags;
          arg$$6.varFlags = v16939 | argFlags;
          var v9170 = !haveFirstArgID;
          if (v9170) {
            formals$$2.append(arg$$6);
          } else {
            haveFirstArgID = false;
          }
        }
        firstArg = false;
        var v21574 = this.currentToken;
        var v16940 = v21574.tokenId;
        var v21575 = TypeScript$$14.TokenID;
        var v16941 = v21575.Comma;
        var v9176 = v16940 == v16941;
        if (v9176) {
          var v16942 = munchedArg;
          if (v16942) {
            v16942 = !sawEllipsis;
          }
          var v9175 = v16942;
          if (v9175) {
            var v9172 = this.scanner;
            var v26947 = v9172.scan();
            this.currentToken = v26947;
          } else {
            this.reportParseError("Unexpected ',' in argument list");
            var v9174 = this.errorRecovery;
            if (v9174) {
              var v9173 = this.scanner;
              var v26948 = v9173.scan();
              this.currentToken = v26948;
            }
          }
        } else {
          break;
        }
      }
      if (isIndexer) {
        var v16943 = TypeScript$$14.TokenID;
        var v9177 = v16943.CloseBracket;
        var v24121 = TypeScript$$14.ErrorRecoverySet;
        var v21576 = v24121.LCurly;
        var v16944 = errorRecoverySet$$12 | v21576;
        var v21577 = TypeScript$$14.ErrorRecoverySet;
        var v16945 = v21577.SColon;
        var v9178 = v16944 | v16945;
        this.checkCurrentToken(v9177, v9178);
      } else {
        if (expectClosingRParen) {
          var v16946 = TypeScript$$14.TokenID;
          var v9179 = v16946.CloseParen;
          var v24122 = TypeScript$$14.ErrorRecoverySet;
          var v21578 = v24122.LCurly;
          var v16947 = errorRecoverySet$$12 | v21578;
          var v21579 = TypeScript$$14.ErrorRecoverySet;
          var v16948 = v21579.SColon;
          var v9180 = v16947 | v16948;
          this.checkCurrentToken(v9179, v9180);
        }
      }
      var v9181 = this.scanner;
      var v26949 = v9181.lastTokenLimChar();
      formals$$2.limChar = v26949;
      return sawEllipsis;
    }
    function v557(formals$$1, argList) {
      function translateBinExOperand(operand$$1) {
        var v16949 = operand$$1.nodeType;
        var v21580 = TypeScript$$14.NodeType;
        var v16950 = v21580.Comma;
        var v9188 = v16949 == v16950;
        if (v9188) {
          return _this$$1.transformAnonymousArgsIntoFormals(formals$$1, operand$$1);
        } else {
          var v21581 = operand$$1.nodeType;
          var v24123 = TypeScript$$14.NodeType;
          var v21582 = v24123.Name;
          var v16951 = v21581 == v21582;
          var v21585 = !v16951;
          if (v21585) {
            var v21583 = operand$$1.nodeType;
            var v24124 = TypeScript$$14.NodeType;
            var v21584 = v24124.Asg;
            v16951 = v21583 == v21584;
          }
          var v9187 = v16951;
          if (v9187) {
            var v9182;
            var v21586 = operand$$1.nodeType;
            var v24125 = TypeScript$$14.NodeType;
            var v21587 = v24125.Asg;
            var v16952 = v21586 == v21587;
            if (v16952) {
              v9182 = operand$$1.operand1;
            } else {
              v9182 = operand$$1;
            }
            var opArg = v9182;
            var v9183 = TypeScript$$14.ArgDecl;
            var arg$$5 = new v9183(opArg);
            arg$$5.preComments = opArg.preComments;
            arg$$5.postComments = opArg.postComments;
            arg$$5.minChar = operand$$1.minChar;
            arg$$5.limChar = operand$$1.limChar;
            var v16953 = opArg.flags;
            var v21588 = TypeScript$$14.ASTFlags;
            var v16954 = v21588.PossibleOptionalParameter;
            var v9184 = TypeScript$$14.hasFlag(v16953, v16954);
            if (v9184) {
              arg$$5.isOptional = true;
            }
            var v16955 = operand$$1.nodeType;
            var v21589 = TypeScript$$14.NodeType;
            var v16956 = v21589.Asg;
            var v9185 = v16955 == v16956;
            if (v9185) {
              arg$$5.init = operand$$1.operand2;
            }
            formals$$1.append(arg$$5);
            var v9186 = arg$$5.isOptional;
            var v16957 = !v9186;
            if (v16957) {
              v9186 = arg$$5.init;
            }
            return v9186;
          } else {
            _this$$1.reportParseError("Invalid lambda argument");
          }
        }
        return false;
      }
      var _this$$1 = this;
      if (argList) {
        var v16958 = argList.nodeType;
        var v21590 = TypeScript$$14.NodeType;
        var v16959 = v21590.Comma;
        var v9197 = v16958 == v16959;
        if (v9197) {
          var commaList = argList;
          var v16960 = commaList.operand1;
          var v9191 = v16960.isParenthesized;
          if (v9191) {
            var v16961 = commaList.operand1;
            var v9189 = v16961.minChar;
            var v16962 = commaList.operand1;
            var v9190 = v16962.limChar;
            this.reportParseError("Invalid lambda argument", v9189, v9190);
          }
          var v16963 = commaList.operand2;
          var v9194 = v16963.isParenthesized;
          if (v9194) {
            var v16964 = commaList.operand2;
            var v9192 = v16964.minChar;
            var v16965 = commaList.operand2;
            var v9193 = v16965.limChar;
            this.reportParseError("Invalid lambda argument", v9192, v9193);
          }
          var v9195 = commaList.operand1;
          var isOptional = translateBinExOperand(v9195);
          var v16966 = commaList.operand2;
          var v9196 = translateBinExOperand(v16966);
          var v16967 = !v9196;
          if (v16967) {
            v9196 = isOptional;
          }
          isOptional = v9196;
          return isOptional;
        } else {
          return translateBinExOperand(argList);
        }
      }
      return;
    }
    function v556(errorRecoverySet$$11, name$$47, isConstructor$$1, isMethod, args$$6, allowedElements$$1, minChar$$12, requiresSignature, parentModifiers$$1) {
      this.pushDeclLists();
      var svStmtStack = this.statementInfoStack;
      this.resetStmtStack();
      var bod$$2 = null;
      var wasShorthand = false;
      var isAnonLambda = false;
      var limChar$$6;
      if (requiresSignature) {
        var v9198 = this.scanner;
        limChar$$6 = v9198.pos;
        var v21591 = this.currentToken;
        var v16968 = v21591.tokenId;
        var v21592 = TypeScript$$14.TokenID;
        var v16969 = v21592.OpenBrace;
        var v9205 = v16968 === v16969;
        if (v9205) {
          this.reportParseError("Function declarations are not permitted within interfaces, ambient modules or classes");
          var v9199 = TypeScript$$14.ASTList;
          bod$$2 = new v9199;
          var v9200 = this.scanner;
          var bodMinChar$$1 = v9200.startPos;
          this.parseFunctionBlock(errorRecoverySet$$11, allowedElements$$1, parentModifiers$$1, bod$$2, bodMinChar$$1);
          var v16970 = TypeScript$$14.TokenID;
          var v9201 = v16970.CloseBrace;
          this.checkCurrentToken(v9201, errorRecoverySet$$11);
          var v21593 = this.currentToken;
          var v16971 = v21593.tokenId;
          var v21594 = TypeScript$$14.TokenID;
          var v16972 = v21594.Semicolon;
          var v9203 = v16971 === v16972;
          if (v9203) {
            var v9202 = this.scanner;
            var v26950 = v9202.scan();
            this.currentToken = v26950;
          }
        } else {
          var v16973 = TypeScript$$14.TokenID;
          var v9204 = v16973.Semicolon;
          this.checkCurrentToken(v9204, errorRecoverySet$$11, "Expected ';'");
        }
      } else {
        var v9206 = TypeScript$$14.ASTList;
        bod$$2 = new v9206;
        var v9207 = this.scanner;
        bodMinChar$$1 = v9207.startPos;
        var v21595 = this.currentToken;
        var v16974 = v21595.tokenId;
        var v21596 = TypeScript$$14.TokenID;
        var v16975 = v21596.EqualsGreaterThan;
        var v9209 = v16974 == v16975;
        if (v9209) {
          if (isMethod) {
            this.reportParseError("'=>' may not be used for class methods");
          }
          wasShorthand = true;
          var v9208 = this.scanner;
          var v26951 = v9208.scan();
          this.currentToken = v26951;
        }
        var v16976 = wasShorthand;
        if (v16976) {
          var v24126 = this.currentToken;
          var v21597 = v24126.tokenId;
          var v24127 = TypeScript$$14.TokenID;
          var v21598 = v24127.OpenBrace;
          v16976 = v21597 != v21598;
        }
        var v9214 = v16976;
        if (v9214) {
          var v21599 = TypeScript$$14.ErrorRecoverySet;
          var v16977 = v21599.SColon;
          var v9210 = errorRecoverySet$$11 | v16977;
          var v16978 = TypeScript$$14.OperatorPrecedence;
          var v9211 = v16978.Assignment;
          var v9212 = TypeContext.NoTypes;
          var retExpr = this.parseExpr(v9210, v9211, true, v9212);
          var v9213 = TypeScript$$14.ReturnStatement;
          var retStmt = new v9213;
          retStmt.returnExpression = retExpr;
          retStmt.minChar = retExpr.minChar;
          retStmt.limChar = retExpr.limChar;
          bod$$2.minChar = bodMinChar$$1;
          bod$$2.append(retStmt);
        } else {
          isAnonLambda = wasShorthand;
          this.parseFunctionBlock(errorRecoverySet$$11, allowedElements$$1, parentModifiers$$1, bod$$2, bodMinChar$$1);
        }
        var v9215 = this.scanner;
        limChar$$6 = v9215.pos;
      }
      var v9216 = TypeScript$$14.FuncDecl;
      var v9217 = this.topVarList();
      var v9218 = this.topScopeList();
      var v9219 = this.topStaticsList();
      var v16979 = TypeScript$$14.NodeType;
      var v9220 = v16979.FuncDecl;
      var funcDecl$$6 = new v9216(name$$47, bod$$2, isConstructor$$1, args$$6, v9217, v9218, v9219, v9220);
      this.popDeclLists();
      var scopeList = this.topScopeList();
      scopeList.append(funcDecl$$6);
      var staticFuncDecl = false;
      var v9229 = !requiresSignature;
      if (v9229) {
        var v16980 = !wasShorthand;
        var v21600 = !v16980;
        if (v21600) {
          v16980 = isAnonLambda;
        }
        var v9228 = v16980;
        if (v9228) {
          var v9221 = TypeScript$$14.ASTSpan;
          var v26952 = new v9221;
          funcDecl$$6.endingToken = v26952;
          var v9222 = funcDecl$$6.endingToken;
          var v16981 = this.scanner;
          v9222.minChar = v16981.startPos;
          var v9223 = funcDecl$$6.endingToken;
          var v16982 = this.scanner;
          v9223.limChar = v16982.pos;
          var v16983 = TypeScript$$14.TokenID;
          var v9224 = v16983.CloseBrace;
          this.checkCurrentToken(v9224, errorRecoverySet$$11);
          if (isAnonLambda) {
            var v16984 = funcDecl$$6.fncFlags;
            var v21601 = TypeScript$$14.FncFlags;
            var v16985 = v21601.IsFatArrowFunction;
            funcDecl$$6.fncFlags = v16984 | v16985;
          }
        } else {
          var v16986 = funcDecl$$6.fncFlags;
          var v21602 = TypeScript$$14.FncFlags;
          var v16987 = v21602.IsFatArrowFunction;
          funcDecl$$6.fncFlags = v16986 | v16987;
          var v9225 = TypeScript$$14.ASTSpan;
          var v26953 = new v9225;
          funcDecl$$6.endingToken = v26953;
          var v9226 = funcDecl$$6.endingToken;
          var v21603 = bod$$2.members;
          var v16988 = v21603[0];
          v9226.minChar = v16988.minChar;
          var v9227 = funcDecl$$6.endingToken;
          var v21604 = bod$$2.members;
          var v16989 = v21604[0];
          v9227.limChar = v16989.limChar;
        }
      }
      funcDecl$$6.minChar = minChar$$12;
      funcDecl$$6.limChar = limChar$$6;
      var v9230 = !requiresSignature;
      if (v9230) {
        var v16990 = funcDecl$$6.fncFlags;
        var v21605 = TypeScript$$14.FncFlags;
        var v16991 = v21605.Definition;
        funcDecl$$6.fncFlags = v16990 | v16991;
      }
      this.statementInfoStack = svStmtStack;
      return funcDecl$$6;
    }
    function v555(errorRecoverySet$$10, allowedElements, parentModifiers, bod$$1, bodMinChar) {
      this.state = ParseState.StartStatementList;
      var v16992 = TypeScript$$14.TokenID;
      var v9231 = v16992.OpenBrace;
      var v21606 = TypeScript$$14.ErrorRecoverySet;
      var v16993 = v21606.StmtStart;
      var v9232 = errorRecoverySet$$10 | v16993;
      this.checkCurrentToken(v9231, v9232);
      var savedInFunction = this.inFunction;
      this.inFunction = true;
      var v24128 = TypeScript$$14.ErrorRecoverySet;
      var v21607 = v24128.RCurly;
      var v16994 = errorRecoverySet$$10 | v21607;
      var v21608 = TypeScript$$14.ErrorRecoverySet;
      var v16995 = v21608.StmtStart;
      var v9233 = v16994 | v16995;
      this.parseStatementList(v9233, bod$$1, true, false, allowedElements, parentModifiers);
      bod$$1.minChar = bodMinChar;
      var v9234 = this.scanner;
      bod$$1.limChar = v9234.pos;
      this.inFunction = savedInFunction;
      var v9235 = TypeScript$$14.EndCode;
      var ec = new v9235;
      ec.minChar = bod$$1.limChar;
      ec.limChar = ec.minChar;
      bod$$1.append(ec);
      return;
    }
    function v554(minChar$$11, errorRecoverySet$$9) {
      var v9236 = this.scanner;
      var v26954 = v9236.scan();
      this.currentToken = v26954;
      var v9237 = TypeScript$$14.ASTList;
      var members$$8 = new v9237;
      members$$8.minChar = minChar$$11;
      var prevInInterfaceDecl = this.inInterfaceDecl;
      this.inInterfaceDecl = true;
      var v21609 = TypeScript$$14.ErrorRecoverySet;
      var v16996 = v21609.RCurly;
      var v9238 = errorRecoverySet$$9 | v16996;
      this.parseTypeMemberList(v9238, members$$8);
      this.inInterfaceDecl = prevInInterfaceDecl;
      var v16997 = TypeScript$$14.TokenID;
      var v9239 = v16997.CloseBrace;
      this.checkCurrentToken(v9239, errorRecoverySet$$9);
      var v9240 = TypeScript$$14.InterfaceDeclaration;
      var v9241 = this.anonId;
      var interfaceDecl = new v9240(v9241, members$$8, null, null);
      interfaceDecl.minChar = minChar$$11;
      interfaceDecl.limChar = members$$8.limChar;
      return this.parseTypeReferenceTail(errorRecoverySet$$9, minChar$$11, interfaceDecl);
    }
    function v553(errorRecoverySet$$8, allowVoid) {
      var v9242 = this.scanner;
      var minChar$$10 = v9242.startPos;
      var isConstructorMember = false;
      var v16998 = this.currentToken;
      var v9261 = v16998.tokenId;
      switch(v9261) {
        case TypeScript$$14.TokenID.Void:
          var v9243 = !allowVoid;
          if (v9243) {
            this.reportParseError("void not a valid type in this context");
          }
        ;
        case TypeScript$$14.TokenID.Any:
        ;
        case TypeScript$$14.TokenID.Number:
        ;
        case TypeScript$$14.TokenID.Bool:
        ;
        case TypeScript$$14.TokenID.String:
          var v16999 = TypeScript$$14.tokenTable;
          var v21610 = this.currentToken;
          var v17000 = v21610.tokenId;
          var v9244 = v16999[v17000];
          var text$$14 = v9244.text;
          var v9245 = TypeScript$$14.Identifier;
          var predefinedIdentifier = new v9245(text$$14);
          predefinedIdentifier.minChar = minChar$$10;
          var v9246 = this.scanner;
          predefinedIdentifier.limChar = v9246.pos;
          var v9247 = this.scanner;
          var v26955 = v9247.scan();
          this.currentToken = v26955;
          return this.parseTypeReferenceTail(errorRecoverySet$$8, minChar$$10, predefinedIdentifier);
        case TypeScript$$14.TokenID.Identifier:
          var v17001 = this.currentToken;
          var v9248 = v17001.getText();
          var v17002 = this.currentToken;
          var v9249 = v17002.hasEscapeSequence;
          var ident = this.createRef(v9248, v9249, minChar$$10);
          var v9250 = this.scanner;
          ident.limChar = v9250.pos;
          return this.parseNamedType(errorRecoverySet$$8, minChar$$10, ident, true);
        case TypeScript$$14.TokenID.OpenBrace:
          return this.parseObjectType(minChar$$10, errorRecoverySet$$8);
        case TypeScript$$14.TokenID.New:
          var v9251 = this.scanner;
          var v26956 = v9251.scan();
          this.currentToken = v26956;
          var v21611 = this.currentToken;
          var v17003 = v21611.tokenId;
          var v21612 = TypeScript$$14.TokenID;
          var v17004 = v21612.OpenParen;
          var v9252 = v17003 != v17004;
          if (v9252) {
            this.reportParseError("Expected '('");
          } else {
            isConstructorMember = true;
          }
        ;
        case TypeScript$$14.TokenID.OpenParen:
          var v9253 = TypeScript$$14.ASTList;
          var formals = new v9253;
          var v21613 = TypeScript$$14.ErrorRecoverySet;
          var v17005 = v21613.RParen;
          var v9254 = errorRecoverySet$$8 | v17005;
          var variableArgList = this.parseFormalParameterList(v9254, formals, false, true, false, false, false, false, null, true);
          var v17006 = TypeScript$$14.TokenID;
          var v9255 = v17006.EqualsGreaterThan;
          this.checkCurrentToken(v9255, errorRecoverySet$$8);
          var returnType = this.parseTypeReference(errorRecoverySet$$8, true);
          var v9256 = TypeScript$$14.FuncDecl;
          var v17007 = TypeScript$$14.NodeType;
          var v9257 = v17007.FuncDecl;
          var funcDecl$$5 = new v9256(null, null, false, formals, null, null, null, v9257);
          funcDecl$$5.returnTypeAnnotation = returnType;
          funcDecl$$5.variableArgList = variableArgList;
          var v17008 = funcDecl$$5.fncFlags;
          var v21614 = TypeScript$$14.FncFlags;
          var v17009 = v21614.Signature;
          funcDecl$$5.fncFlags = v17008 | v17009;
          if (isConstructorMember) {
            var v17010 = funcDecl$$5.fncFlags;
            var v21615 = TypeScript$$14.FncFlags;
            var v17011 = v21615.ConstructMember;
            funcDecl$$5.fncFlags = v17010 | v17011;
            funcDecl$$5.hint = "_construct";
            funcDecl$$5.classDecl = null;
          }
          funcDecl$$5.minChar = minChar$$10;
          return this.parseTypeReferenceTail(errorRecoverySet$$8, minChar$$10, funcDecl$$5);
        default:
          this.reportParseError("Expected type name");
          var v9258 = TypeScript$$14.TypeReference;
          var etr = new v9258(null, 0);
          var v17012 = etr.flags;
          var v21616 = TypeScript$$14.ASTFlags;
          var v17013 = v21616.Error;
          etr.flags = v17012 | v17013;
          var v9259 = this.scanner;
          etr.minChar = v9259.pos;
          var v9260 = this.scanner;
          etr.limChar = v9260.pos;
          return etr;
      }
      return;
    }
    function v552(errorRecoverySet$$7, minChar$$9, term$$2, tail) {
      var v9262 = this.scanner;
      var v26957 = v9262.scan();
      this.currentToken = v26957;
      var v21617 = this.currentToken;
      var v17014 = v21617.tokenId;
      var v21618 = TypeScript$$14.TokenID;
      var v17015 = v21618.Dot;
      var v9279 = v17014 == v17015;
      if (v9279) {
        var v9263 = this.scanner;
        var curpos = v9263.pos;
        var v9264 = this.scanner;
        var v26958 = v9264.scan();
        this.currentToken = v26958;
        var v24129 = this.currentToken;
        var v21619 = v24129.tokenId;
        var v24130 = TypeScript$$14.TokenID;
        var v21620 = v24130.Identifier;
        var v17016 = v21619 == v21620;
        var v21622 = !v17016;
        if (v21622) {
          var v25351 = this.errorRecovery;
          var v24131 = !v25351;
          var v25353 = !v24131;
          if (v25353) {
            var v25937 = this.scanner;
            var v25352 = v25937.lastTokenHadNewline();
            v24131 = !v25352;
          }
          var v21621 = v24131;
          if (v21621) {
            var v24132 = this.currentToken;
            var v24133 = this.strictMode;
            v21621 = TypeScript$$14.convertTokToID(v24132, v24133);
          }
          v17016 = v21621;
        }
        var v9278 = v17016;
        if (v9278) {
          var v9265 = TypeScript$$14.Identifier;
          var v9266 = this.currentToken;
          var op2 = v9265.fromToken(v9266);
          var v9267 = this.scanner;
          op2.minChar = v9267.startPos;
          var v9268 = this.scanner;
          op2.limChar = v9268.pos;
          var v9269 = TypeScript$$14.BinaryExpression;
          var v17017 = TypeScript$$14.NodeType;
          var v9270 = v17017.Dot;
          var dotNode$$1 = new v9269(v9270, term$$2, op2);
          dotNode$$1.minChar = term$$2.minChar;
          dotNode$$1.limChar = op2.limChar;
          return this.parseNamedType(errorRecoverySet$$7, minChar$$9, dotNode$$1, tail);
        } else {
          this.reportParseError("need identifier after '.'");
          var v9277 = this.errorRecovery;
          if (v9277) {
            var v17018 = term$$2.flags;
            var v21623 = TypeScript$$14.ASTFlags;
            var v17019 = v21623.DotLHS;
            term$$2.flags = v17018 | v17019;
            var v9271 = this.scanner;
            var v26959 = v9271.lastTokenLimChar();
            term$$2.limChar = v26959;
            return term$$2;
          } else {
            var v9272 = TypeScript$$14.MissingIdentifier;
            var eop2 = new v9272;
            var v9273 = this.scanner;
            eop2.minChar = v9273.pos;
            var v9274 = this.scanner;
            eop2.limChar = v9274.pos;
            var v9275 = TypeScript$$14.BinaryExpression;
            var v17020 = TypeScript$$14.NodeType;
            var v9276 = v17020.Dot;
            var edotNode = new v9275(v9276, term$$2, eop2);
            var v17021 = edotNode.flags;
            var v21624 = TypeScript$$14.ASTFlags;
            var v17022 = v21624.Error;
            edotNode.flags = v17021 | v17022;
            edotNode.minChar = term$$2.minChar;
            edotNode.limChar = eop2.limChar;
            return this.parseNamedType(errorRecoverySet$$7, minChar$$9, edotNode, tail);
          }
        }
      } else {
        if (tail) {
          return this.parseTypeReferenceTail(errorRecoverySet$$7, minChar$$9, term$$2);
        } else {
          return term$$2;
        }
      }
      return;
    }
    function v551(errorRecoverySet$$6, minChar$$8, term$$1) {
      var v9280 = TypeScript$$14.TypeReference;
      var result$$8 = new v9280(term$$1, 0);
      result$$8.minChar = minChar$$8;
      var v21625 = this.currentToken;
      var v17023 = v21625.tokenId;
      var v21626 = TypeScript$$14.TokenID;
      var v17024 = v21626.OpenBracket;
      var v9284 = v17023 == v17024;
      for (;v9284;) {
        var v9281 = this.scanner;
        var v26960 = v9281.scan();
        this.currentToken = v26960;
        result$$8.arrayCount++;
        var v17025 = TypeScript$$14.TokenID;
        var v9282 = v17025.CloseBracket;
        var v21627 = TypeScript$$14.ErrorRecoverySet;
        var v17026 = v21627.LBrack;
        var v9283 = errorRecoverySet$$6 | v17026;
        this.checkCurrentToken(v9282, v9283);
        var v21628 = this.currentToken;
        var v17027 = v21628.tokenId;
        var v21629 = TypeScript$$14.TokenID;
        var v17028 = v21629.OpenBracket;
        v9284 = v17027 == v17028;
      }
      var v9285 = this.scanner;
      var v26961 = v9285.lastTokenLimChar();
      result$$8.limChar = v26961;
      return result$$8;
    }
    function v550(errorRecoverySet$$5, modifiers$$2, preComments$$1) {
      var v9286 = this.scanner;
      var leftCurlyCount$$1 = v9286.leftCurlyCount;
      var v9287 = this.scanner;
      var rightCurlyCount$$1 = v9287.rightCurlyCount;
      var svAmbient = this.ambientModule;
      var svTopLevel = this.topLevel;
      this.topLevel = false;
      var v21630 = this.parsingDeclareFile;
      var v24134 = !v21630;
      if (v24134) {
        v21630 = svAmbient;
      }
      var v17029 = v21630;
      var v21632 = !v17029;
      if (v21632) {
        var v24135 = TypeScript$$14.Modifiers;
        var v21631 = v24135.Ambient;
        v17029 = TypeScript$$14.hasFlag(modifiers$$2, v21631);
      }
      var v9288 = v17029;
      if (v9288) {
        this.ambientModule = true;
      }
      var v9289 = this.scanner;
      var v26962 = v9289.scan();
      this.currentToken = v26962;
      var name$$46 = null;
      var enclosedList$$1 = null;
      this.pushDeclLists();
      var v9290 = this.scanner;
      var minChar$$7 = v9290.startPos;
      var isDynamicMod$$1 = false;
      var v25354 = this.currentToken;
      var v24136 = v25354.tokenId;
      var v25355 = TypeScript$$14.TokenID;
      var v24137 = v25355.Identifier;
      var v21633 = v24136 == v24137;
      var v24140 = !v21633;
      if (v24140) {
        var v25356 = this.currentToken;
        var v24138 = v25356.tokenId;
        var v25357 = TypeScript$$14.TokenID;
        var v24139 = v25357.StringLiteral;
        v21633 = v24138 == v24139;
      }
      var v17030 = v21633;
      var v21635 = !v17030;
      if (v21635) {
        var v25358 = this.currentToken;
        var v24141 = TypeScript$$14.isPrimitiveTypeToken(v25358);
        var v21634 = !v24141;
        if (v21634) {
          var v24142 = this.currentToken;
          var v24143 = this.strictMode;
          v21634 = TypeScript$$14.convertTokToID(v24142, v24143);
        }
        v17030 = v21634;
      }
      var v9302 = v17030;
      if (v9302) {
        var v9291 = this.currentToken;
        var nameText = v9291.getText();
        var v21636 = this.currentToken;
        var v17031 = v21636.tokenId;
        var v21637 = TypeScript$$14.TokenID;
        var v17032 = v21637.StringLiteral;
        var v9294 = v17031 == v17032;
        if (v9294) {
          isDynamicMod$$1 = true;
          var v17033 = this.ambientModule;
          var v9292 = !v17033;
          if (v9292) {
            this.reportParseError("Only ambient dynamic modules may have string literal names");
          }
          var v9293 = !svTopLevel;
          if (v9293) {
            this.reportParseError("Dynamic modules may not be nested within other modules");
          }
        }
        var v9295 = TypeScript$$14.Identifier;
        var v9296 = this.currentToken;
        name$$46 = v9295.fromToken(v9296);
        var v9297 = this.scanner;
        name$$46.minChar = v9297.startPos;
        var v9298 = this.scanner;
        name$$46.limChar = v9298.pos;
        var v9299 = this.scanner;
        var v26963 = v9299.scan();
        this.currentToken = v26963;
      } else {
        var v21638 = this.currentToken;
        var v17034 = v21638.tokenId;
        var v21639 = TypeScript$$14.TokenID;
        var v17035 = v21639.OpenBrace;
        var v9301 = v17034 == v17035;
        if (v9301) {
          this.reportParseError("Module name missing");
          var v9300 = TypeScript$$14.Identifier;
          name$$46 = new v9300("");
          name$$46.minChar = minChar$$7;
          name$$46.limChar = minChar$$7;
        }
      }
      var v21640 = this.currentToken;
      var v17036 = v21640.tokenId;
      var v21641 = TypeScript$$14.TokenID;
      var v17037 = v21641.Dot;
      var v9303 = v17036 == v17037;
      if (v9303) {
        enclosedList$$1 = new Array;
        this.parseDottedName(enclosedList$$1);
      }
      var v9305 = name$$46 == null;
      if (v9305) {
        var v9304 = TypeScript$$14.MissingIdentifier;
        name$$46 = new v9304;
      }
      var v9306 = TypeScript$$14.ASTList;
      var moduleBody = new v9306;
      var v9307 = this.scanner;
      var bodyMinChar = v9307.startPos;
      var v17038 = TypeScript$$14.TokenID;
      var v9308 = v17038.OpenBrace;
      var v21642 = TypeScript$$14.ErrorRecoverySet;
      var v17039 = v21642.ID;
      var v9309 = errorRecoverySet$$5 | v17039;
      this.checkCurrentToken(v9308, v9309);
      var v9310 = svTopLevel && isDynamicMod$$1;
      if (v9310) {
        this.allowImportDeclaration = true;
      } else {
        this.allowImportDeclaration = false;
      }
      var v21643 = TypeScript$$14.ErrorRecoverySet;
      var v17040 = v21643.RCurly;
      var v9311 = errorRecoverySet$$5 | v17040;
      var v17041 = TypeScript$$14.AllowedElements;
      var v9312 = v17041.Global;
      this.parseStatementList(v9311, moduleBody, true, true, v9312, modifiers$$2);
      moduleBody.minChar = bodyMinChar;
      var v9313 = this.scanner;
      moduleBody.limChar = v9313.pos;
      var v9314 = TypeScript$$14.ASTSpan;
      var endingToken$$2 = new v9314;
      var v9315 = this.scanner;
      endingToken$$2.minChar = v9315.startPos;
      var v9316 = this.scanner;
      endingToken$$2.limChar = v9316.pos;
      var v17042 = TypeScript$$14.TokenID;
      var v9317 = v17042.CloseBrace;
      this.checkCurrentToken(v9317, errorRecoverySet$$5);
      var v9318 = this.scanner;
      var limChar$$5 = v9318.lastTokenLimChar();
      var moduleDecl$$3;
      this.allowImportDeclaration = svTopLevel;
      var v17043 = enclosedList$$1;
      if (v17043) {
        var v21644 = enclosedList$$1.length;
        v17043 = v21644 > 0;
      }
      var v9337 = v17043;
      if (v9337) {
        var len$$16 = enclosedList$$1.length;
        var v9319 = len$$16 - 1;
        var innerName = enclosedList$$1[v9319];
        var v9320 = TypeScript$$14.ModuleDeclaration;
        var v9321 = this.topVarList();
        var v9322 = this.topScopeList();
        var innerDecl = new v9320(innerName, moduleBody, v9321, v9322, endingToken$$2);
        innerDecl.preComments = preComments$$1;
        var v17044 = this.parsingDeclareFile;
        var v21646 = !v17044;
        if (v21646) {
          var v24144 = TypeScript$$14.Modifiers;
          var v21645 = v24144.Ambient;
          v17044 = TypeScript$$14.hasFlag(modifiers$$2, v21645);
        }
        var v9323 = v17044;
        if (v9323) {
          var v17045 = innerDecl.modFlags;
          var v21647 = TypeScript$$14.ModuleFlags;
          var v17046 = v21647.Ambient;
          innerDecl.modFlags = v17045 | v17046;
        }
        var v17047 = innerDecl.modFlags;
        var v21648 = TypeScript$$14.ModuleFlags;
        var v17048 = v21648.Exported;
        innerDecl.modFlags = v17047 | v17048;
        innerDecl.minChar = minChar$$7;
        innerDecl.limChar = limChar$$5;
        this.popDeclLists();
        var outerModBod;
        var i$$50 = len$$16 - 2;
        var v9329 = i$$50 >= 0;
        for (;v9329;) {
          var v9324 = TypeScript$$14.ASTList;
          outerModBod = new v9324;
          outerModBod.append(innerDecl);
          innerName = enclosedList$$1[i$$50];
          var v9325 = TypeScript$$14.ModuleDeclaration;
          var v17049 = TypeScript$$14.ASTList;
          var v9326 = new v17049;
          var v17050 = TypeScript$$14.ASTList;
          var v9327 = new v17050;
          innerDecl = new v9325(innerName, outerModBod, v9326, v9327, endingToken$$2);
          outerModBod.minChar = innerDecl.minChar = minChar$$7;
          outerModBod.limChar = innerDecl.limChar = limChar$$5;
          var v17051 = this.parsingDeclareFile;
          var v21650 = !v17051;
          if (v21650) {
            var v24145 = TypeScript$$14.Modifiers;
            var v21649 = v24145.Ambient;
            v17051 = TypeScript$$14.hasFlag(modifiers$$2, v21649);
          }
          var v9328 = v17051;
          if (v9328) {
            var v17052 = innerDecl.modFlags;
            var v21651 = TypeScript$$14.ModuleFlags;
            var v17053 = v21651.Ambient;
            innerDecl.modFlags = v17052 | v17053;
          }
          var v17054 = innerDecl.modFlags;
          var v21652 = TypeScript$$14.ModuleFlags;
          var v17055 = v21652.Exported;
          innerDecl.modFlags = v17054 | v17055;
          i$$50--;
          v9329 = i$$50 >= 0;
        }
        var v9330 = TypeScript$$14.ASTList;
        outerModBod = new v9330;
        outerModBod.append(innerDecl);
        outerModBod.minChar = minChar$$7;
        outerModBod.limChar = limChar$$5;
        var v9331 = TypeScript$$14.ModuleDeclaration;
        var v17056 = TypeScript$$14.ASTList;
        var v9332 = new v17056;
        var v17057 = TypeScript$$14.ASTList;
        var v9333 = new v17057;
        moduleDecl$$3 = new v9331(name$$46, outerModBod, v9332, v9333, endingToken$$2);
      } else {
        var v9334 = TypeScript$$14.ModuleDeclaration;
        var v9335 = this.topVarList();
        var v9336 = this.topScopeList();
        moduleDecl$$3 = new v9334(name$$46, moduleBody, v9335, v9336, endingToken$$2);
        moduleDecl$$3.preComments = preComments$$1;
        this.popDeclLists();
      }
      var v21653 = this.parsingDeclareFile;
      var v24146 = !v21653;
      if (v24146) {
        v21653 = svAmbient;
      }
      var v17058 = v21653;
      var v21655 = !v17058;
      if (v21655) {
        var v24147 = TypeScript$$14.Modifiers;
        var v21654 = v24147.Ambient;
        v17058 = TypeScript$$14.hasFlag(modifiers$$2, v21654);
      }
      var v9338 = v17058;
      if (v9338) {
        var v17059 = moduleDecl$$3.modFlags;
        var v21656 = TypeScript$$14.ModuleFlags;
        var v17060 = v21656.Ambient;
        moduleDecl$$3.modFlags = v17059 | v17060;
      }
      var v17061 = svAmbient;
      var v21658 = !v17061;
      if (v21658) {
        var v24148 = TypeScript$$14.Modifiers;
        var v21657 = v24148.Exported;
        v17061 = TypeScript$$14.hasFlag(modifiers$$2, v21657);
      }
      var v9339 = v17061;
      if (v9339) {
        var v17062 = moduleDecl$$3.modFlags;
        var v21659 = TypeScript$$14.ModuleFlags;
        var v17063 = v21659.Exported;
        moduleDecl$$3.modFlags = v17062 | v17063;
      }
      if (isDynamicMod$$1) {
        var v17064 = moduleDecl$$3.modFlags;
        var v21660 = TypeScript$$14.ModuleFlags;
        var v17065 = v21660.IsDynamic;
        moduleDecl$$3.modFlags = v17064 | v17065;
      }
      this.ambientModule = svAmbient;
      this.topLevel = svTopLevel;
      var v17066 = this.scanner;
      var v9340 = v17066.leftCurlyCount;
      moduleDecl$$3.leftCurlyCount = v9340 - leftCurlyCount$$1;
      var v17067 = this.scanner;
      var v9341 = v17067.rightCurlyCount;
      moduleDecl$$3.rightCurlyCount = v9341 - rightCurlyCount$$1;
      moduleDecl$$3.limChar = moduleBody.limChar;
      return moduleDecl$$3;
    }
    function v549(errorRecoverySet$$4, modifiers$$1) {
      var name$$45 = null;
      var alias$$1 = null;
      var importDecl = null;
      var v9342 = this.scanner;
      var minChar$$6 = v9342.startPos;
      var isDynamicImport = false;
      var v9343 = this.scanner;
      var v26964 = v9343.scan();
      this.currentToken = v26964;
      var v24149 = this.currentToken;
      var v21661 = v24149.tokenId;
      var v24150 = TypeScript$$14.TokenID;
      var v21662 = v24150.Identifier;
      var v17068 = v21661 == v21662;
      var v21665 = !v17068;
      if (v21665) {
        var v21663 = this.currentToken;
        var v21664 = this.strictMode;
        v17068 = TypeScript$$14.convertTokToID(v21663, v21664);
      }
      var v9347 = v17068;
      if (v9347) {
        var v9344 = TypeScript$$14.Identifier;
        var v9345 = this.currentToken;
        name$$45 = v9344.fromToken(v9345);
      } else {
        this.reportParseError("Expected identifer after 'import'");
        var v9346 = TypeScript$$14.MissingIdentifier;
        name$$45 = new v9346;
      }
      var v9348 = this.scanner;
      name$$45.minChar = v9348.startPos;
      var v9349 = this.scanner;
      name$$45.limChar = v9349.pos;
      var v9350 = this.scanner;
      var v26965 = v9350.scan();
      this.currentToken = v26965;
      var v17069 = TypeScript$$14.TokenID;
      var v9351 = v17069.Equals;
      var v21666 = TypeScript$$14.ErrorRecoverySet;
      var v17070 = v21666.ID;
      var v9352 = errorRecoverySet$$4 | v17070;
      this.checkCurrentToken(v9351, v9352);
      var aliasPreComments = this.parseComments();
      var limChar$$4;
      var v24151 = this.currentToken;
      var v21667 = v24151.tokenId;
      var v24152 = TypeScript$$14.TokenID;
      var v21668 = v24152.Identifier;
      var v17071 = v21667 == v21668;
      var v21671 = !v17071;
      if (v21671) {
        var v21669 = this.currentToken;
        var v21670 = this.strictMode;
        v17071 = TypeScript$$14.convertTokToID(v21669, v21670);
      }
      var v9385 = v17071;
      if (v9385) {
        var v21672 = this.currentToken;
        var v17072 = v21672.tokenId;
        var v21673 = TypeScript$$14.TokenID;
        var v17073 = v21673.Module;
        var v9378 = v17072 == v17073;
        if (v9378) {
          var v9353 = this.scanner;
          limChar$$4 = v9353.pos;
          var v9354 = this.scanner;
          var v26966 = v9354.scan();
          this.currentToken = v26966;
          var v21674 = this.currentToken;
          var v17074 = v21674.tokenId;
          var v21675 = TypeScript$$14.TokenID;
          var v17075 = v21675.OpenParen;
          var v9373 = v17074 == v17075;
          if (v9373) {
            var v9355 = this.scanner;
            var v26967 = v9355.scan();
            this.currentToken = v26967;
            var v25359 = this.currentToken;
            var v24153 = v25359.tokenId;
            var v25360 = TypeScript$$14.TokenID;
            var v24154 = v25360.StringLiteral;
            var v21676 = v24153 == v24154;
            var v24157 = !v21676;
            if (v24157) {
              var v25361 = this.currentToken;
              var v24155 = v25361.tokenId;
              var v25362 = TypeScript$$14.TokenID;
              var v24156 = v25362.Identifier;
              v21676 = v24155 == v24156;
            }
            var v17076 = v21676;
            var v21679 = !v17076;
            if (v21679) {
              var v21677 = this.currentToken;
              var v21678 = this.strictMode;
              v17076 = TypeScript$$14.convertTokToID(v21677, v21678);
            }
            var v9369 = v17076;
            if (v9369) {
              var v21680 = this.currentToken;
              var v17077 = v21680.tokenId;
              var v21681 = TypeScript$$14.TokenID;
              var v17078 = v21681.StringLiteral;
              var v9368 = v17077 == v17078;
              if (v9368) {
                var v9357 = this.topLevel;
                if (v9357) {
                  this.hasTopLevelImportOrExport = true;
                } else {
                  var v17079 = this.allowImportDeclaration;
                  var v9356 = !v17079;
                  if (v9356) {
                    this.reportParseError("Import declaration of external module is permitted only in global or top level dynamic modules");
                  }
                }
                var v9358 = this.currentToken;
                var aliasText = v9358.getText();
                var v9359 = TypeScript$$14.Identifier;
                var v9360 = this.currentToken;
                alias$$1 = v9359.fromToken(v9360);
                var v9361 = this.scanner;
                alias$$1.minChar = v9361.startPos;
                var v9362 = this.scanner;
                alias$$1.limChar = v9362.pos;
                var v21682 = alias$$1.text;
                var v17080 = this.isValidImportPath(v21682);
                var v9363 = !v17080;
                if (v9363) {
                  this.reportParseError("Invalid import path");
                }
                isDynamicImport = true;
                var v9364 = this.scanner;
                var v26968 = v9364.scan();
                this.currentToken = v26968;
                alias$$1.preComments = aliasPreComments;
              } else {
                var v21683 = TypeScript$$14.ErrorRecoverySet;
                var v17081 = v21683.SColon;
                var v9365 = errorRecoverySet$$4 | v17081;
                var v17082 = TypeScript$$14.OperatorPrecedence;
                var v9366 = v17082.Assignment;
                var v9367 = TypeContext.NoTypes;
                alias$$1 = this.parseExpr(v9365, v9366, true, v9367);
                alias$$1.preComments = aliasPreComments;
              }
            }
            var v9370 = this.scanner;
            limChar$$4 = v9370.pos;
            var v17083 = TypeScript$$14.TokenID;
            var v9371 = v17083.CloseParen;
            var v21684 = TypeScript$$14.ErrorRecoverySet;
            var v17084 = v21684.ID;
            var v9372 = errorRecoverySet$$4 | v17084;
            this.checkCurrentToken(v9371, v9372);
            if (alias$$1) {
              var v26969 = this.parseComments();
              alias$$1.postComments = v26969;
            }
          }
        } else {
          var v21685 = TypeScript$$14.ErrorRecoverySet;
          var v17085 = v21685.SColon;
          var v9374 = errorRecoverySet$$4 | v17085;
          var v17086 = TypeScript$$14.OperatorPrecedence;
          var v9375 = v17086.Assignment;
          var v9376 = TypeContext.NoTypes;
          alias$$1 = this.parseExpr(v9374, v9375, true, v9376);
          var v9377 = this.scanner;
          limChar$$4 = v9377.pos;
        }
      } else {
        this.reportParseError("Expected module name");
        var v9379 = TypeScript$$14.MissingIdentifier;
        alias$$1 = new v9379;
        var v9380 = this.scanner;
        alias$$1.minChar = v9380.startPos;
        var v21686 = this.currentToken;
        var v17087 = v21686.tokenId;
        var v21687 = TypeScript$$14.TokenID;
        var v17088 = v21687.Semicolon;
        var v9384 = v17087 == v17088;
        if (v9384) {
          var v9381 = this.scanner;
          alias$$1.limChar = v9381.startPos;
        } else {
          var v9382 = this.scanner;
          alias$$1.limChar = v9382.pos;
          var v9383 = this.scanner;
          var v26970 = v9383.scan();
          this.currentToken = v26970;
        }
        var v17089 = alias$$1.flags;
        var v21688 = TypeScript$$14.ASTFlags;
        var v17090 = v21688.Error;
        alias$$1.flags = v17089 | v17090;
        limChar$$4 = alias$$1.limChar;
      }
      var v9386 = TypeScript$$14.ImportDeclaration;
      importDecl = new v9386(name$$45, alias$$1);
      importDecl.isDynamicImport = isDynamicImport;
      importDecl.minChar = minChar$$6;
      importDecl.limChar = limChar$$4;
      return importDecl;
    }
    function v548(importPath) {
      importPath = TypeScript$$14.stripQuotes(importPath);
      var v24158 = !importPath;
      var v25364 = !v24158;
      if (v25364) {
        var v25363 = importPath.indexOf(":");
        v24158 = v25363 != -1;
      }
      var v21689 = v24158;
      var v24160 = !v21689;
      if (v24160) {
        var v24159 = importPath.indexOf("\\");
        v21689 = v24159 != -1;
      }
      var v17091 = v21689;
      var v21691 = !v17091;
      if (v21691) {
        var v21690 = importPath.charAt(0);
        v17091 = v21690 == "/";
      }
      var v9387 = v17091;
      if (v9387) {
        return false;
      }
      return true;
    }
    function v547(enclosedList) {
      var v9388 = this.scanner;
      var v26971 = v9388.scan();
      this.currentToken = v26971;
      var v24161 = this.currentToken;
      var v21692 = v24161.tokenId;
      var v24162 = TypeScript$$14.TokenID;
      var v21693 = v24162.Identifier;
      var v17092 = v21692 == v21693;
      var v21696 = !v17092;
      if (v21696) {
        var v21694 = this.currentToken;
        var v21695 = this.strictMode;
        v17092 = TypeScript$$14.convertTokToID(v21694, v21695);
      }
      var v9396 = v17092;
      if (v9396) {
        var v9389 = TypeScript$$14.Identifier;
        var v9390 = this.currentToken;
        var id$$10 = v9389.fromToken(v9390);
        var v26972 = this.parseComments();
        id$$10.preComments = v26972;
        var v9391 = enclosedList.length;
        enclosedList[v9391] = id$$10;
        var v9392 = this.scanner;
        id$$10.minChar = v9392.startPos;
        var v9393 = this.scanner;
        id$$10.limChar = v9393.pos;
        var v9394 = this.scanner;
        var v26973 = v9394.scan();
        this.currentToken = v26973;
        var v21697 = this.currentToken;
        var v17093 = v21697.tokenId;
        var v21698 = TypeScript$$14.TokenID;
        var v17094 = v21698.Dot;
        var v9395 = v17093 == v17094;
        if (v9395) {
          this.parseDottedName(enclosedList);
        }
      } else {
        this.reportParseError("need identifier after '.'");
      }
      return;
    }
    function v546(errorRecoverySet$$3, modifiers) {
      var v9397 = this.scanner;
      var leftCurlyCount = v9397.leftCurlyCount;
      var v9398 = this.scanner;
      var rightCurlyCount = v9398.rightCurlyCount;
      var name$$44 = null;
      var v24163 = this.currentToken;
      var v21699 = v24163.tokenId;
      var v24164 = TypeScript$$14.TokenID;
      var v21700 = v24164.Identifier;
      var v17095 = v21699 == v21700;
      var v21703 = !v17095;
      if (v21703) {
        var v21701 = this.currentToken;
        var v21702 = this.strictMode;
        v17095 = TypeScript$$14.convertTokToID(v21701, v21702);
      }
      var v9408 = v17095;
      if (v9408) {
        var v9399 = TypeScript$$14.Identifier;
        var v9400 = this.currentToken;
        name$$44 = v9399.fromToken(v9400);
        var v9401 = this.scanner;
        name$$44.minChar = v9401.startPos;
        var v9402 = this.scanner;
        name$$44.limChar = v9402.pos;
        var v9403 = this.scanner;
        var v26974 = v9403.scan();
        this.currentToken = v26974;
      } else {
        this.reportParseError("Enum declaration requires identifier");
        var v9407 = this.errorRecovery;
        if (v9407) {
          var v9404 = TypeScript$$14.MissingIdentifier;
          name$$44 = new v9404;
          var v9405 = this.scanner;
          name$$44.minChar = v9405.startPos;
          var v9406 = this.scanner;
          name$$44.limChar = v9406.startPos;
          var v17096 = name$$44.flags;
          var v21704 = TypeScript$$14.ASTFlags;
          var v17097 = v21704.Error;
          name$$44.flags = v17096 | v17097;
        }
      }
      var v9409 = this.scanner;
      var membersMinChar = v9409.startPos;
      var v17098 = TypeScript$$14.TokenID;
      var v9410 = v17098.OpenBrace;
      var v21705 = TypeScript$$14.ErrorRecoverySet;
      var v17099 = v21705.ID;
      var v9411 = errorRecoverySet$$3 | v17099;
      this.checkCurrentToken(v9410, v9411);
      this.pushDeclLists();
      var v9412 = TypeScript$$14.ASTList;
      var members$$7 = new v9412;
      members$$7.minChar = membersMinChar;
      var v9413 = TypeScript$$14.VarDecl;
      var v17100 = TypeScript$$14.Identifier;
      var v9414 = new v17100("_map");
      var mapDecl = new v9413(v9414, 0);
      var v17101 = mapDecl.varFlags;
      var v21706 = TypeScript$$14.VarFlags;
      var v17102 = v21706.Exported;
      mapDecl.varFlags = v17101 | v17102;
      var v17103 = mapDecl.varFlags;
      var v21707 = TypeScript$$14.VarFlags;
      var v17104 = v21707.Private;
      mapDecl.varFlags = v17103 | v17104;
      var v17105 = mapDecl.varFlags;
      var v24165 = TypeScript$$14.VarFlags;
      var v21708 = v24165.Property;
      var v24166 = TypeScript$$14.VarFlags;
      var v21709 = v24166.Public;
      var v17106 = v21708 | v21709;
      mapDecl.varFlags = v17105 | v17106;
      var v9415 = TypeScript$$14.UnaryExpression;
      var v17107 = TypeScript$$14.NodeType;
      var v9416 = v17107.ArrayLit;
      var v26975 = new v9415(v9416, null);
      mapDecl.init = v26975;
      members$$7.append(mapDecl);
      var lastValue = null;
      for (;;) {
        var v9417 = this.scanner;
        var minChar$$5 = v9417.startPos;
        var limChar$$3;
        var memberName = null;
        var memberValue = null;
        var preComments = null;
        var postComments = null;
        var v24167 = this.currentToken;
        var v21710 = v24167.tokenId;
        var v24168 = TypeScript$$14.TokenID;
        var v21711 = v24168.Identifier;
        var v17108 = v21710 == v21711;
        var v21713 = !v17108;
        if (v21713) {
          var v21712 = this.currentToken;
          v17108 = TypeScript$$14.convertTokToIDName(v21712);
        }
        var v9427 = v17108;
        if (v9427) {
          var v9418 = TypeScript$$14.Identifier;
          var v9419 = this.currentToken;
          memberName = v9418.fromToken(v9419);
          var v9420 = this.scanner;
          memberName.minChar = v9420.startPos;
          var v9421 = this.scanner;
          memberName.limChar = v9421.pos;
        } else {
          var v21714 = this.currentToken;
          var v17109 = v21714.tokenId;
          var v21715 = TypeScript$$14.TokenID;
          var v17110 = v21715.CloseBrace;
          var v9426 = v17109 == v17110;
          if (v9426) {
            break;
          } else {
            this.reportParseError("Expected identifer of enum member");
            var v9425 = this.errorRecovery;
            if (v9425) {
              var v9422 = TypeScript$$14.MissingIdentifier;
              memberName = new v9422;
              var v9423 = this.scanner;
              memberName.minChar = v9423.startPos;
              var v9424 = this.scanner;
              memberName.limChar = v9424.startPos;
              var v17111 = memberName.flags;
              var v21716 = TypeScript$$14.ASTFlags;
              var v17112 = v21716.Error;
              memberName.flags = v17111 | v17112;
            }
          }
        }
        var v9428 = this.scanner;
        limChar$$3 = v9428.pos;
        preComments = this.parseComments();
        var v9429 = this.scanner;
        var v26976 = v9429.scan();
        this.currentToken = v26976;
        postComments = this.parseComments();
        var v21717 = this.currentToken;
        var v17113 = v21717.tokenId;
        var v21718 = TypeScript$$14.TokenID;
        var v17114 = v21718.Equals;
        var v9441 = v17113 == v17114;
        if (v9441) {
          var v9430 = this.scanner;
          var v26977 = v9430.scan();
          this.currentToken = v26977;
          var v17115 = TypeScript$$14.OperatorPrecedence;
          var v9431 = v17115.Comma;
          var v9432 = TypeContext.NoTypes;
          memberValue = this.parseExpr(errorRecoverySet$$3, v9431, true, v9432);
          lastValue = memberValue;
          limChar$$3 = memberValue.limChar;
        } else {
          var v9436 = lastValue == null;
          if (v9436) {
            var v9433 = TypeScript$$14.NumberLiteral;
            memberValue = new v9433(0);
            lastValue = memberValue;
          } else {
            var v9434 = TypeScript$$14.NumberLiteral;
            var v17116 = lastValue.value;
            var v9435 = v17116 + 1;
            memberValue = new v9434(v9435);
            lastValue = memberValue;
          }
          var v9437 = TypeScript$$14.BinaryExpression;
          var v17117 = TypeScript$$14.NodeType;
          var v9438 = v17117.Asg;
          var v17118 = TypeScript$$14.BinaryExpression;
          var v21719 = TypeScript$$14.NodeType;
          var v17119 = v21719.Index;
          var v21720 = TypeScript$$14.Identifier;
          var v17120 = new v21720("_map");
          var v9439 = new v17118(v17119, v17120, memberValue);
          var v17121 = TypeScript$$14.StringLiteral;
          var v24169 = memberName.actualText;
          var v21721 = '"' + v24169;
          var v17122 = v21721 + '"';
          var v9440 = new v17121(v17122);
          var map = new v9437(v9438, v9439, v9440);
          members$$7.append(map);
        }
        var v9442 = TypeScript$$14.VarDecl;
        var v9443 = this.nestingLevel;
        var member$$1 = new v9442(memberName, v9443);
        member$$1.minChar = minChar$$5;
        member$$1.limChar = limChar$$3;
        member$$1.init = memberValue;
        var v9444 = TypeScript$$14.TypeReference;
        var v17123 = name$$44.actualText;
        var v17124 = name$$44.hasEscapeSequence;
        var v9445 = this.createRef(v17123, v17124, -1);
        var v26978 = new v9444(v9445, 0);
        member$$1.typeExpr = v26978;
        var v17125 = member$$1.varFlags;
        var v24170 = TypeScript$$14.VarFlags;
        var v21722 = v24170.Readonly;
        var v24171 = TypeScript$$14.VarFlags;
        var v21723 = v24171.Property;
        var v17126 = v21722 | v21723;
        member$$1.varFlags = v17125 | v17126;
        var v17127 = memberValue.nodeType;
        var v21724 = TypeScript$$14.NodeType;
        var v17128 = v21724.NumberLit;
        var v9446 = v17127 == v17128;
        if (v9446) {
          var v17129 = member$$1.varFlags;
          var v21725 = TypeScript$$14.VarFlags;
          var v17130 = v21725.Constant;
          member$$1.varFlags = v17129 | v17130;
        }
        member$$1.preComments = preComments;
        members$$7.append(member$$1);
        member$$1.postComments = postComments;
        var v17131 = member$$1.varFlags;
        var v21726 = TypeScript$$14.VarFlags;
        var v17132 = v21726.Exported;
        member$$1.varFlags = v17131 | v17132;
        var v21727 = this.currentToken;
        var v17133 = v21727.tokenId;
        var v21728 = TypeScript$$14.TokenID;
        var v17134 = v21728.Comma;
        var v9451 = v17133 == v17134;
        if (v9451) {
          var v9447 = this.scanner;
          var v26979 = v9447.scan();
          this.currentToken = v26979;
          var v9448 = member$$1.postComments;
          var v21729 = this.scanner;
          var v17135 = v21729.prevLine;
          var v9449 = this.parseCommentsForLine(v17135);
          var v26980 = this.combineComments(v9448, v9449);
          member$$1.postComments = v26980;
          var v24172 = this.currentToken;
          var v21730 = v24172.tokenId;
          var v24173 = TypeScript$$14.TokenID;
          var v21731 = v24173.Identifier;
          var v17136 = v21730 == v21731;
          var v21733 = !v17136;
          if (v21733) {
            var v21732 = this.currentToken;
            v17136 = TypeScript$$14.convertTokToIDName(v21732);
          }
          var v9450 = v17136;
          if (v9450) {
            continue;
          }
        }
        break;
      }
      var v9452 = TypeScript$$14.ASTSpan;
      var endingToken$$1 = new v9452;
      var v9453 = this.scanner;
      endingToken$$1.minChar = v9453.startPos;
      var v9454 = this.scanner;
      endingToken$$1.limChar = v9454.pos;
      var v17137 = TypeScript$$14.TokenID;
      var v9455 = v17137.CloseBrace;
      this.checkCurrentToken(v9455, errorRecoverySet$$3);
      var v9456 = this.scanner;
      var v26981 = v9456.lastTokenLimChar();
      members$$7.limChar = v26981;
      var v9457 = TypeScript$$14.ModuleDeclaration;
      var v9458 = this.topVarList();
      var v9459 = this.topScopeList();
      var modDecl = new v9457(name$$44, members$$7, v9458, v9459, endingToken$$1);
      var v17138 = modDecl.modFlags;
      var v21734 = TypeScript$$14.ModuleFlags;
      var v17139 = v21734.IsEnum;
      modDecl.modFlags = v17138 | v17139;
      this.popDeclLists();
      var v17140 = this.scanner;
      var v9460 = v17140.leftCurlyCount;
      modDecl.leftCurlyCount = v9460 - leftCurlyCount;
      var v17141 = this.scanner;
      var v9461 = v17141.rightCurlyCount;
      modDecl.rightCurlyCount = v9461 - rightCurlyCount;
      return modDecl;
    }
    function v545(comment1, comment2) {
      var v9463 = comment1 == null;
      if (v9463) {
        return comment2;
      } else {
        var v9462 = comment2 == null;
        if (v9462) {
          return comment1;
        } else {
          return comment1.concat(comment2);
        }
      }
      return;
    }
    function v544(line$$4) {
      var v9464 = this.scanner;
      var comments$$7 = v9464.getCommentsForLine(line$$4);
      return this.parseCommentsInner(comments$$7);
    }
    function v543() {
      var v9465 = this.scanner;
      var comments$$6 = v9465.getComments();
      return this.parseCommentsInner(comments$$6);
    }
    function v542(comments$$5) {
      if (comments$$5) {
        var commentASTs = new Array;
        var i$$49 = 0;
        var v17142 = comments$$5.length;
        var v9467 = i$$49 < v17142;
        for (;v9467;) {
          var v17143 = comments$$5[i$$49];
          var v9466 = this.parseComment(v17143);
          commentASTs.push(v9466);
          i$$49++;
          var v17144 = comments$$5.length;
          v9467 = i$$49 < v17144;
        }
        return commentASTs;
      } else {
        return null;
      }
      return;
    }
    function v541(comment$$2) {
      if (comment$$2) {
        var v9468 = TypeScript$$14.Comment;
        var v9469 = comment$$2.value;
        var v9470 = comment$$2.isBlock;
        var v9471 = comment$$2.endsLine;
        var c$$7 = new v9468(v9469, v9470, v9471);
        c$$7.minChar = comment$$2.startPos;
        var v9472 = comment$$2.startPos;
        var v17145 = comment$$2.value;
        var v9473 = v17145.length;
        c$$7.limChar = v9472 + v9473;
        var lineCol$$4 = {line:-1, col:-1};
        var v9474 = c$$7.minChar;
        this.getSourceLineCol(lineCol$$4, v9474);
        c$$7.minLine = lineCol$$4.line;
        var v9475 = c$$7.limChar;
        this.getSourceLineCol(lineCol$$4, v9475);
        c$$7.limLine = lineCol$$4.line;
        var v24174 = comment$$2.isBlock;
        var v21735 = !v24174;
        if (v21735) {
          var v25365 = comment$$2.value;
          var v24175 = v25365.length;
          v21735 = v24175 > 3;
        }
        var v17146 = v21735;
        if (v17146) {
          var v24176 = comment$$2.value;
          var v21736 = v24176.substring(0, 3);
          v17146 = v21736 == "///";
        }
        var v9479 = v17146;
        if (v9479) {
          var v9476 = comment$$2.value;
          var dependencyPath = TypeScript$$14.getAdditionalDependencyPath(v9476);
          if (dependencyPath) {
            var v9477 = this.amdDependencies;
            v9477.push(dependencyPath);
          }
          var v17147 = comment$$2.value;
          var v9478 = TypeScript$$14.getImplicitImport(v17147);
          if (v9478) {
            this.hasTopLevelImportOrExport = true;
          }
        }
        return c$$7;
      } else {
        return null;
      }
      return;
    }
    function v540() {
      var v9480 = this.staticsLists;
      var v21737 = this.staticsLists;
      var v17148 = v21737.length;
      var v9481 = v17148 - 1;
      return v9480[v9481];
    }
    function v539() {
      var v9482 = this.scopeLists;
      var v21738 = this.scopeLists;
      var v17149 = v21738.length;
      var v9483 = v17149 - 1;
      return v9482[v9483];
    }
    function v538() {
      var v9484 = this.varLists;
      var v21739 = this.varLists;
      var v17150 = v21739.length;
      var v9485 = v17150 - 1;
      return v9484[v9485];
    }
    function v537() {
      var v9486 = this.staticsLists;
      v9486.pop();
      var v9487 = this.varLists;
      v9487.pop();
      var v9488 = this.scopeLists;
      v9488.pop();
      return;
    }
    function v536() {
      var v9489 = this.staticsLists;
      var v17151 = TypeScript$$14.ASTList;
      var v9490 = new v17151;
      v9489.push(v9490);
      var v9491 = this.varLists;
      var v17152 = TypeScript$$14.ASTList;
      var v9492 = new v17152;
      v9491.push(v9492);
      var v9493 = this.scopeLists;
      var v17153 = TypeScript$$14.ASTList;
      var v9494 = new v17153;
      v9493.push(v9494);
      return;
    }
    function v535(tokenId$$43, errorRecoverySet$$2, errorText$$1) {
      var v17154 = typeof errorText$$1;
      var v9495 = v17154 === "undefined";
      if (v9495) {
        errorText$$1 = null;
      }
      var v21740 = this.currentToken;
      var v17155 = v21740.tokenId;
      var v9499 = v17155 != tokenId$$43;
      if (v9499) {
        var v9496;
        var v17157 = errorText$$1 == null;
        if (v17157) {
          var v25366 = TypeScript$$14.tokenTable;
          var v24177 = v25366[tokenId$$43];
          var v21741 = v24177.text;
          var v17156 = "Expected '" + v21741;
          v9496 = v17156 + "'";
        } else {
          v9496 = errorText$$1;
        }
        errorText$$1 = v9496;
        this.reportParseError(errorText$$1);
        var v9497 = this.errorRecovery;
        if (v9497) {
          this.skip(errorRecoverySet$$2);
        }
      } else {
        var v9498 = this.scanner;
        var v26982 = v9498.scan();
        this.currentToken = v26982;
      }
      return;
    }
    function v534(errorRecoverySet$$1) {
      var v21742 = TypeScript$$14.ErrorRecoverySet;
      var v17158 = v21742.EOF;
      errorRecoverySet$$1 = errorRecoverySet$$1 | v17158;
      var v9500 = TypeScript$$14.ErrorRecoverySet;
      var ersTok = v9500.None;
      var v17159 = this.currentToken;
      var v9501 = v17159.tokenId;
      var tokenInfo = TypeScript$$14.lookupToken(v9501);
      var v9502 = tokenInfo != undefined;
      if (v9502) {
        ersTok = tokenInfo.ers;
      }
      var pendingRightCurlies = 0;
      var v21743 = ersTok & errorRecoverySet$$1;
      var v24178 = TypeScript$$14.ErrorRecoverySet;
      var v21744 = v24178.None;
      var v17160 = v21743 == v21744;
      var v21746 = !v17160;
      if (v21746) {
        var v25367 = this.currentToken;
        var v24179 = v25367.tokenId;
        var v25368 = TypeScript$$14.TokenID;
        var v24180 = v25368.CloseBrace;
        var v21745 = v24179 == v24180;
        if (v21745) {
          v21745 = pendingRightCurlies > 0;
        }
        v17160 = v21745;
      }
      var v9509 = v17160;
      for (;v9509;) {
        var v21747 = this.currentToken;
        var v17161 = v21747.tokenId;
        var v21748 = TypeScript$$14.TokenID;
        var v17162 = v21748.OpenBrace;
        var v9504 = v17161 == v17162;
        if (v9504) {
          pendingRightCurlies++;
        } else {
          var v21749 = this.currentToken;
          var v17163 = v21749.tokenId;
          var v21750 = TypeScript$$14.TokenID;
          var v17164 = v21750.CloseBrace;
          var v9503 = v17163 == v17164;
          if (v9503) {
            pendingRightCurlies--;
          }
        }
        var v9505 = this.scanner;
        var v26983 = v9505.scan();
        this.currentToken = v26983;
        var v9506 = TypeScript$$14.ErrorRecoverySet;
        ersTok = v9506.None;
        var v17165 = this.currentToken;
        var v9507 = v17165.tokenId;
        tokenInfo = TypeScript$$14.lookupToken(v9507);
        var v9508 = tokenInfo != undefined;
        if (v9508) {
          ersTok = tokenInfo.ers;
        }
        var v21751 = ersTok & errorRecoverySet$$1;
        var v24181 = TypeScript$$14.ErrorRecoverySet;
        var v21752 = v24181.None;
        var v17166 = v21751 == v21752;
        var v21754 = !v17166;
        if (v21754) {
          var v25369 = this.currentToken;
          var v24182 = v25369.tokenId;
          var v25370 = TypeScript$$14.TokenID;
          var v24183 = v25370.CloseBrace;
          var v21753 = v24182 == v24183;
          if (v21753) {
            v21753 = pendingRightCurlies > 0;
          }
          v17166 = v21753;
        }
        v9509 = v17166;
      }
      return;
    }
    function v533(tokenId$$42, errorRecoverySet, errorText) {
      var v17167 = typeof errorText;
      var v9510 = v17167 === "undefined";
      if (v9510) {
        errorText = null;
      }
      var v9511 = this.scanner;
      var v26984 = v9511.scan();
      this.currentToken = v26984;
      this.checkCurrentToken(tokenId$$42, errorRecoverySet, errorText);
      return;
    }
    function v532(message$$14, startPos, pos$$1) {
      var v17168 = typeof startPos;
      var v9513 = v17168 === "undefined";
      if (v9513) {
        var v9512 = this.scanner;
        startPos = v9512.startPos;
      }
      var v17169 = typeof pos$$1;
      var v9515 = v17169 === "undefined";
      if (v9515) {
        var v9514 = this.scanner;
        pos$$1 = v9514.pos;
      }
      var v9516 = pos$$1 - startPos;
      var len$$15 = Math.max(1, v9516);
      var v9523 = this.errorCallback;
      if (v9523) {
        var v9517 = this.currentUnitIndex;
        this.errorCallback(startPos, len$$15, message$$14, v9517);
      } else {
        var v9522 = this.errorRecovery;
        if (v9522) {
          var lineCol$$3 = {line:-1, col:-1};
          this.getSourceLineCol(lineCol$$3, startPos);
          var v9520 = this.outfile;
          if (v9520) {
            var v9518 = this.outfile;
            var v26317 = this.fname;
            var v26196 = "// " + v26317;
            var v25938 = v26196 + " (";
            var v25939 = lineCol$$3.line;
            var v25371 = v25938 + v25939;
            var v24184 = v25371 + ",";
            var v24185 = lineCol$$3.col;
            var v21755 = v24184 + v24185;
            var v17170 = v21755 + "): ";
            var v9519 = v17170 + message$$14;
            v9518.WriteLine(v9519);
          }
        } else {
          var v26197 = this.fname;
          var v25940 = v26197 + " (";
          var v26198 = this.scanner;
          var v25941 = v26198.line;
          var v25372 = v25940 + v25941;
          var v24186 = v25372 + ",";
          var v25373 = this.scanner;
          var v24187 = v25373.col;
          var v21756 = v24186 + v24187;
          var v17171 = v21756 + "): ";
          var v9521 = v17171 + message$$14;
          throw new SyntaxError(v9521);
        }
      }
      return;
    }
    function v531(message$$13) {
      var v9524 = "STYLE: " + message$$13;
      this.reportParseError(v9524);
      return;
    }
    function v530(text$$13, hasEscapeSequence$$2, minChar$$4) {
      var v9525 = TypeScript$$14.Identifier;
      var id$$9 = new v9525(text$$13, hasEscapeSequence$$2);
      id$$9.minChar = minChar$$4;
      return id$$9;
    }
    function v529(lineCol$$2, minChar$$3) {
      var v17172 = this.scanner;
      var v9526 = v17172.lineMap;
      TypeScript$$14.getSourceLineColFromMap(lineCol$$2, minChar$$3, v9526);
      return;
    }
    function v528(outfile$$3) {
      this.outfile = outfile$$3;
      this.errorRecovery = true;
      return;
    }
    function v527(jump) {
      var v9527 = TypeScript$$14.AST;
      var v9528 = jump.target;
      var resolvedTarget = v9527.getResolvedIdentifierName(v9528);
      var v9529 = this.statementInfoStack;
      var len$$14 = v9529.length;
      var i$$48 = len$$14 - 1;
      var v9542 = i$$48 >= 0;
      for (;v9542;) {
        var v9530 = this.statementInfoStack;
        var info$$1 = v9530[i$$48];
        var v9541 = jump.target;
        if (v9541) {
          var v17173 = info$$1.labels;
          if (v17173) {
            var v25374 = info$$1.labels;
            var v24188 = v25374.members;
            var v21757 = v24188.length;
            v17173 = v21757 > 0;
          }
          var v9536 = v17173;
          if (v9536) {
            var j$$5 = 0;
            var v17174 = info$$1.labels;
            var v9531 = v17174.members;
            var labLen = v9531.length;
            var v9535 = j$$5 < labLen;
            for (;v9535;) {
              var v17175 = info$$1.labels;
              var v9532 = v17175.members;
              var label = v9532[j$$5];
              var v21758 = label.id;
              var v17176 = v21758.text;
              var v9534 = v17176 == resolvedTarget;
              if (v9534) {
                var v9533 = info$$1.stmt;
                jump.setResolvedTarget(this, v9533);
                return;
              }
              j$$5++;
              v9535 = j$$5 < labLen;
            }
          }
        } else {
          var v17177 = info$$1.stmt;
          var v9540 = v17177.isLoop();
          if (v9540) {
            var v9537 = info$$1.stmt;
            jump.setResolvedTarget(this, v9537);
            return;
          } else {
            var v24189 = info$$1.stmt;
            var v21759 = v24189.nodeType;
            var v24190 = TypeScript$$14.NodeType;
            var v21760 = v24190.Switch;
            var v17178 = v21759 == v21760;
            if (v17178) {
              var v21761 = jump.nodeType;
              var v24191 = TypeScript$$14.NodeType;
              var v21762 = v24191.Break;
              v17178 = v21761 == v21762;
            }
            var v9539 = v17178;
            if (v9539) {
              var v9538 = info$$1.stmt;
              jump.setResolvedTarget(this, v9538);
              return;
            }
          }
        }
        i$$48--;
        v9542 = i$$48 >= 0;
      }
      var v9545 = jump.target;
      if (v9545) {
        var v17179 = jump.target;
        var v9543 = "could not find enclosing statement with label " + v17179;
        this.reportParseError(v9543);
      } else {
        var v17180 = jump.nodeType;
        var v21763 = TypeScript$$14.NodeType;
        var v17181 = v21763.Break;
        var v9544 = v17180 == v17181;
        if (v9544) {
          this.reportParseError("break statement requires enclosing loop or switch");
        } else {
          this.reportParseError("continue statement requires enclosing loop");
        }
      }
      return;
    }
    function v526() {
      var v9546 = this.statementInfoStack;
      return v9546.pop();
    }
    function v525(stmt$$3, labels$$1) {
      var info = {stmt:stmt$$3, labels:labels$$1};
      var v9547 = this.statementInfoStack;
      v9547.push(info);
      return;
    }
    function v524() {
      var v17182 = this.statementInfoStack;
      var v9548 = v17182.length;
      var j$$4 = v9548 - 1;
      var v9550 = j$$4 >= 0;
      for (;v9550;) {
        var v24192 = this.statementInfoStack;
        var v21764 = v24192[j$$4];
        var v17183 = v21764.stmt;
        var v9549 = v17183.isLoop();
        if (v9549) {
          return true;
        }
        j$$4--;
        v9550 = j$$4 >= 0;
      }
      return false;
    }
    function v523() {
      var v26985 = new Array;
      this.statementInfoStack = v26985;
      return;
    }
    function Parser$$1() {
      this.varLists = [];
      this.scopeLists = [];
      this.staticsLists = [];
      var v9551 = TypeScript$$14.Scanner;
      var v26986 = new v9551;
      this.scanner = v26986;
      this.currentToken = null;
      this.needTerminator = false;
      this.inFunction = false;
      this.inInterfaceDecl = false;
      this.currentClassDecl = null;
      this.inFncDecl = false;
      var v9552 = TypeScript$$14.Identifier;
      var v26987 = new v9552("_anonymous");
      this.anonId = v26987;
      this.style_requireSemi = false;
      this.style_funcInLoop = true;
      this.incremental = false;
      this.errorRecovery = false;
      this.outfile = undefined;
      this.errorCallback = null;
      this.state = ParseState.StartStatementList;
      this.ambientModule = false;
      this.ambientClass = false;
      this.topLevel = true;
      this.allowImportDeclaration = true;
      this.currentUnitIndex = -1;
      this.prevIDTok = null;
      var v26988 = new Array;
      this.statementInfoStack = v26988;
      this.hasTopLevelImportOrExport = false;
      this.strictMode = false;
      this.nestingLevel = 0;
      this.prevExpr = null;
      this.currentClassDefinition = null;
      this.parsingClassConstructorDefinition = false;
      this.parsingDeclareFile = false;
      this.amdDependencies = [];
      this.inferPropertiesFromThisAssignment = false;
      this.requiresExtendsBlock = false;
      this.fname = "";
      return;
    }
    var v9553 = Parser$$1.prototype;
    v9553.resetStmtStack = v523;
    var v9554 = Parser$$1.prototype;
    v9554.inLoop = v524;
    var v9555 = Parser$$1.prototype;
    v9555.pushStmt = v525;
    var v9556 = Parser$$1.prototype;
    v9556.popStmt = v526;
    var v9557 = Parser$$1.prototype;
    v9557.resolveJumpTarget = v527;
    var v9558 = Parser$$1.prototype;
    v9558.setErrorRecovery = v528;
    var v9559 = Parser$$1.prototype;
    v9559.getSourceLineCol = v529;
    var v9560 = Parser$$1.prototype;
    v9560.createRef = v530;
    var v9561 = Parser$$1.prototype;
    v9561.reportParseStyleError = v531;
    var v9562 = Parser$$1.prototype;
    v9562.reportParseError = v532;
    var v9563 = Parser$$1.prototype;
    v9563.checkNextToken = v533;
    var v9564 = Parser$$1.prototype;
    v9564.skip = v534;
    var v9565 = Parser$$1.prototype;
    v9565.checkCurrentToken = v535;
    var v9566 = Parser$$1.prototype;
    v9566.pushDeclLists = v536;
    var v9567 = Parser$$1.prototype;
    v9567.popDeclLists = v537;
    var v9568 = Parser$$1.prototype;
    v9568.topVarList = v538;
    var v9569 = Parser$$1.prototype;
    v9569.topScopeList = v539;
    var v9570 = Parser$$1.prototype;
    v9570.topStaticsList = v540;
    var v9571 = Parser$$1.prototype;
    v9571.parseComment = v541;
    var v9572 = Parser$$1.prototype;
    v9572.parseCommentsInner = v542;
    var v9573 = Parser$$1.prototype;
    v9573.parseComments = v543;
    var v9574 = Parser$$1.prototype;
    v9574.parseCommentsForLine = v544;
    var v9575 = Parser$$1.prototype;
    v9575.combineComments = v545;
    var v9576 = Parser$$1.prototype;
    v9576.parseEnumDecl = v546;
    var v9577 = Parser$$1.prototype;
    v9577.parseDottedName = v547;
    var v9578 = Parser$$1.prototype;
    v9578.isValidImportPath = v548;
    var v9579 = Parser$$1.prototype;
    v9579.parseImportDeclaration = v549;
    var v9580 = Parser$$1.prototype;
    v9580.parseModuleDecl = v550;
    var v9581 = Parser$$1.prototype;
    v9581.parseTypeReferenceTail = v551;
    var v9582 = Parser$$1.prototype;
    v9582.parseNamedType = v552;
    var v9583 = Parser$$1.prototype;
    v9583.parseTypeReference = v553;
    var v9584 = Parser$$1.prototype;
    v9584.parseObjectType = v554;
    var v9585 = Parser$$1.prototype;
    v9585.parseFunctionBlock = v555;
    var v9586 = Parser$$1.prototype;
    v9586.parseFunctionStatements = v556;
    var v9587 = Parser$$1.prototype;
    v9587.transformAnonymousArgsIntoFormals = v557;
    var v9588 = Parser$$1.prototype;
    v9588.parseFormalParameterList = v558;
    var v9589 = Parser$$1.prototype;
    v9589.parseFncDecl = v559;
    var v9590 = Parser$$1.prototype;
    v9590.convertToTypeReference = v560;
    var v9591 = Parser$$1.prototype;
    v9591.parseArgList = v561;
    var v9592 = Parser$$1.prototype;
    v9592.parseBaseList = v562;
    var v9593 = Parser$$1.prototype;
    v9593.parseClassDecl = v563;
    var v9594 = Parser$$1.prototype;
    v9594.parseClassElements = v564;
    var v9595 = Parser$$1.prototype;
    v9595.parseClassConstructorDeclaration = v565;
    var v9596 = Parser$$1.prototype;
    v9596.parseClassMemberVariableDeclaration = v566;
    var v9597 = Parser$$1.prototype;
    v9597.parseClassMemberFunctionDeclaration = v567;
    var v9598 = Parser$$1.prototype;
    v9598.parseTypeMember = v568;
    var v9599 = Parser$$1.prototype;
    v9599.parseTypeMemberList = v569;
    var v9600 = Parser$$1.prototype;
    v9600.parseInterfaceDecl = v570;
    var v9601 = Parser$$1.prototype;
    v9601.makeVarDecl = v571;
    var v9602 = Parser$$1.prototype;
    v9602.parsePropertyDeclaration = v572;
    var v9603 = Parser$$1.prototype;
    v9603.parseVariableDeclaration = v573;
    var v9604 = Parser$$1.prototype;
    v9604.parseMemberList = v574;
    var v9605 = Parser$$1.prototype;
    v9605.parseArrayList = v575;
    var v9606 = Parser$$1.prototype;
    v9606.parseArrayLiteral = v576;
    var v9607 = Parser$$1.prototype;
    v9607.parseTerm = v577;
    var v9608 = Parser$$1.prototype;
    v9608.parseLambdaExpr = v578;
    var v9609 = Parser$$1.prototype;
    v9609.parseExpr = v579;
    var v9610 = Parser$$1.prototype;
    v9610.parsePostfixOperators = v580;
    var v9611 = Parser$$1.prototype;
    v9611.parseTry = v581;
    var v9612 = Parser$$1.prototype;
    v9612.parseCatch = v582;
    var v9613 = Parser$$1.prototype;
    v9613.parseFinally = v583;
    var v9614 = Parser$$1.prototype;
    v9614.parseTryCatchFinally = v584;
    var v9615 = Parser$$1.prototype;
    v9615.parseStatement = v585;
    var v9616 = Parser$$1.prototype;
    v9616.okAmbientModuleMember = v586;
    var v9617 = Parser$$1.prototype;
    v9617.parseStatementList = v587;
    var v9618 = Parser$$1.prototype;
    v9618.quickParse = v588;
    var v9619 = Parser$$1.prototype;
    v9619.parse = v590;
    return Parser$$1;
  }
  function v522() {
    function QuickParseResult$$1(Script$$2, endLexState) {
      this.Script = Script$$2;
      this.endLexState = endLexState;
      return;
    }
    return QuickParseResult$$1;
  }
  function v521(ParseState$$1) {
    ParseState$$1._map = [];
    var v9620 = ParseState$$1._map;
    v9620[0] = "None";
    ParseState$$1.None = 0;
    var v9621 = ParseState$$1._map;
    v9621[1] = "StartScript";
    ParseState$$1.StartScript = 1;
    var v9622 = ParseState$$1._map;
    v9622[2] = "StartStatementList";
    ParseState$$1.StartStatementList = 2;
    var v9623 = ParseState$$1._map;
    v9623[3] = "StartStatement";
    ParseState$$1.StartStatement = 3;
    var v9624 = ParseState$$1._map;
    v9624[4] = "StartFncDecl";
    ParseState$$1.StartFncDecl = 4;
    var v9625 = ParseState$$1._map;
    v9625[5] = "FncDeclName";
    ParseState$$1.FncDeclName = 5;
    var v9626 = ParseState$$1._map;
    v9626[6] = "FncDeclArgs";
    ParseState$$1.FncDeclArgs = 6;
    var v9627 = ParseState$$1._map;
    v9627[7] = "FncDeclReturnType";
    ParseState$$1.FncDeclReturnType = 7;
    var v9628 = ParseState$$1._map;
    v9628[8] = "ForInit";
    ParseState$$1.ForInit = 8;
    var v9629 = ParseState$$1._map;
    v9629[9] = "ForInitAfterVar";
    ParseState$$1.ForInitAfterVar = 9;
    var v9630 = ParseState$$1._map;
    v9630[10] = "ForCondStart";
    ParseState$$1.ForCondStart = 10;
    var v9631 = ParseState$$1._map;
    v9631[11] = "EndStmtList";
    ParseState$$1.EndStmtList = 11;
    var v9632 = ParseState$$1._map;
    v9632[12] = "EndScript";
    ParseState$$1.EndScript = 12;
    return;
  }
  function v520(TypeContext$$1) {
    TypeContext$$1._map = [];
    TypeContext$$1.NoTypes = 0;
    TypeContext$$1.ArraySuffix = 1;
    TypeContext$$1.Primitive = 2;
    TypeContext$$1.Named = 4;
    var v9633 = TypeContext$$1.Primitive;
    var v9634 = TypeContext$$1.Named;
    TypeContext$$1.AllSimpleTypes = v9633 | v9634;
    var v17184 = TypeContext$$1.Primitive;
    var v17185 = TypeContext$$1.Named;
    var v9635 = v17184 | v17185;
    var v9636 = TypeContext$$1.ArraySuffix;
    TypeContext$$1.AllTypes = v9635 | v9636;
    return;
  }
  function quickParse(logger$$1, scopeStartAST, sourceText, minChar$$2, limChar$$2, errorCapture) {
    var fragment = sourceText.getText(minChar$$2, limChar$$2);
    var v25942 = "Quick parse range (" + minChar$$2;
    var v25375 = v25942 + ",";
    var v24193 = v25375 + limChar$$2;
    var v21765 = v24193 + '): "';
    var v21766 = TypeScript$$14.stringToLiteral(fragment, 100);
    var v17186 = v21765 + v21766;
    var v9637 = v17186 + '"';
    logger$$1.log(v9637);
    var quickParser = new Parser;
    quickParser.setErrorRecovery(null);
    quickParser.errorCallback = errorCapture;
    var v9638 = TypeScript$$14.ClassDeclaration;
    var quickClassDecl = new v9638(null, null, null, null);
    quickParser.currentClassDecl = quickClassDecl;
    var v17187 = TypeScript$$14.StringSourceText;
    var v9639 = new v17187(fragment);
    var result$$7 = quickParser.quickParse(v9639, "", 0);
    return result$$7;
  }
  var v17188 = TypeScript$$14.TypeContext;
  var v21767 = !v17188;
  if (v21767) {
    v17188 = TypeScript$$14.TypeContext = {};
  }
  var v9640 = v17188;
  v520(v9640);
  var TypeContext = TypeScript$$14.TypeContext;
  var v17189 = TypeScript$$14.ParseState;
  var v21768 = !v17189;
  if (v21768) {
    v17189 = TypeScript$$14.ParseState = {};
  }
  var v9641 = v17189;
  v521(v9641);
  var ParseState = TypeScript$$14.ParseState;
  var QuickParseResult = v522();
  TypeScript$$14.QuickParseResult = QuickParseResult;
  var Parser = v591();
  TypeScript$$14.Parser = Parser;
  TypeScript$$14.quickParse = quickParse;
  return;
}
function v519(TypeScript$$13) {
  function v518() {
    function v517(ast$$36, op$$1, type$$29) {
      var v24194 = "Operator '" + op$$1;
      var v21769 = v24194 + "' cannot be applied to type '";
      var v21770 = type$$29.getTypeName();
      var v17190 = v21769 + v21770;
      var v9642 = v17190 + "'";
      this.reportError(ast$$36, v9642);
      return;
    }
    function v516(ast$$35) {
      this.simpleError(ast$$35, "Expected var, class, interface, or module");
      return;
    }
    function v515(ast$$34, t1, t2, op, scope$$8, comparisonInfo) {
      var v9644 = !t1;
      if (v9644) {
        var v9643 = this.checker;
        t1 = v9643.anyType;
      }
      var v9646 = !t2;
      if (v9646) {
        var v9645 = this.checker;
        t2 = v9645.anyType;
      }
      var v9647;
      if (comparisonInfo) {
        v9647 = comparisonInfo.message;
      } else {
        v9647 = "";
      }
      var reason = v9647;
      if (op) {
        var v26199 = "Operator '" + op;
        var v25943 = v26199 + "' cannot be applied to types '";
        var v25944 = t1.getScopedTypeName(scope$$8);
        var v25376 = v25943 + v25944;
        var v24195 = v25376 + "' and '";
        var v24196 = t2.getScopedTypeName(scope$$8);
        var v21771 = v24195 + v24196;
        var v17191 = v21771 + "'";
        var v21772;
        if (reason) {
          v21772 = ": " + reason;
        } else {
          v21772 = "";
        }
        var v17192 = v21772;
        var v9648 = v17191 + v17192;
        this.reportError(ast$$34, v9648);
      } else {
        var v25945 = t1.getScopedTypeName(scope$$8);
        var v25377 = "Cannot convert '" + v25945;
        var v24197 = v25377 + "' to '";
        var v24198 = t2.getScopedTypeName(scope$$8);
        var v21773 = v24197 + v24198;
        var v17193 = v21773 + "'";
        var v21774;
        if (reason) {
          v21774 = ": " + reason;
        } else {
          v21774 = "";
        }
        var v17194 = v21774;
        var v9649 = v17193 + v17194;
        this.reportError(ast$$34, v9649);
      }
      return;
    }
    function v514(ast$$33, scope$$7) {
      var v17195 = ast$$33.operand1;
      var v9650 = v17195.type;
      var targetType$$2 = v9650.getScopedTypeName(scope$$7);
      var v17196 = ast$$33.operand2;
      var v9651 = v17196.type;
      var indexType = v9651.getScopedTypeName(scope$$7);
      var v24199 = "Value of type '" + targetType$$2;
      var v21775 = v24199 + "' is not indexable by type '";
      var v17197 = v21775 + indexType;
      var v9652 = v17197 + "'";
      this.simpleError(ast$$33, v9652);
      return;
    }
    function v513(ast$$32, nodeType$$13, scope$$6) {
      var v9653 = ast$$32.target;
      var targetType$$1 = v9653.type;
      var typeName = targetType$$1.getScopedTypeName(scope$$6);
      var v17198 = targetType$$1.construct;
      if (v17198) {
        var v24200 = TypeScript$$13.NodeType;
        var v21776 = v24200.Call;
        v17198 = nodeType$$13 == v21776;
      }
      var v9657 = v17198;
      if (v9657) {
        var v17199 = "Value of type '" + typeName;
        var v9654 = v17199 + "' is not callable.  Did you mean to include 'new'?";
        this.reportError(ast$$32, v9654);
      } else {
        var v9655;
        var v24201 = TypeScript$$13.NodeType;
        var v21777 = v24201.Call;
        var v17200 = nodeType$$13 == v21777;
        if (v17200) {
          v9655 = "callable";
        } else {
          v9655 = "newable";
        }
        var catString = v9655;
        var v21778 = "Value of type '" + typeName;
        var v17201 = v21778 + "' is not ";
        var v9656 = v17201 + catString;
        this.reportError(ast$$32, v9656);
      }
      return;
    }
    function v512(ast$$31) {
      this.simpleError(ast$$31, "The left-hand side of an assignment expression must be a variable, property or indexer");
      return;
    }
    function v511(ast$$30) {
      this.simpleError(ast$$30, "Keyword 'super' can only be used inside a class instance method");
      return;
    }
    function v510(sym$$6, msg$$3) {
      this.reportErrorFromSym(sym$$6, msg$$3);
      return;
    }
    function v509(ast$$29, msg$$2) {
      this.reportError(ast$$29, msg$$2);
      return;
    }
    function v508(ast$$28, msg$$1) {
      var bkThrow = this.pushToErrorSink;
      this.pushToErrorSink = false;
      var v9658 = "STYLE: " + msg$$1;
      this.reportError(ast$$28, v9658);
      this.pushToErrorSink = bkThrow;
      return;
    }
    function v507(ast$$27, name$$43) {
      var v17202 = "The name '" + name$$43;
      var v9659 = v17202 + "' does not refer to a value";
      this.reportError(ast$$27, v9659);
      return;
    }
    function v506(ast$$26, name$$42) {
      var v17203 = "The name '" + name$$42;
      var v9660 = v17203 + "' does not exist in the current scope";
      this.reportError(ast$$26, v9660);
      return;
    }
    function v505(ast$$25, text$$12, symbol$$5) {
      var defLineCol = {line:-1, col:-1};
      var v9661 = this.parser;
      var v9662 = symbol$$5.location;
      v9661.getSourceLineCol(defLineCol, v9662);
      var v25946 = "symbol " + text$$12;
      var v25378 = v25946 + " defined at (";
      var v25379 = defLineCol.line;
      var v24202 = v25378 + v25379;
      var v21779 = v24202 + ",";
      var v21780 = defLineCol.col;
      var v17204 = v21779 + v21780;
      var v9663 = v17204 + ")";
      this.reportError(ast$$25, v9663);
      return;
    }
    function v504(ast$$24, name$$41) {
      var v17205 = "Duplicate identifier '" + name$$41;
      var v9664 = v17205 + "'";
      this.reportError(ast$$24, v9664);
      return;
    }
    function v503(ast$$23, message$$12) {
      this.reportError(ast$$23, message$$12);
      throw Error("EmitError");
    }
    function v502(symbol$$4, message$$11) {
      var v9665 = this.pushToErrorSink;
      if (v9665) {
        this.captureError(message$$11);
        return;
      }
      this.hasErrors = true;
      var v21781 = this.parser;
      var v17206 = v21781.errorRecovery;
      if (v17206) {
        var v21782 = this.parser;
        v17206 = v21782.errorCallback;
      }
      var v9671 = v17206;
      if (v9671) {
        var v9666 = this.parser;
        var v9667 = symbol$$4.location;
        var v9668 = symbol$$4.length;
        var v21783 = this.checker;
        var v17207 = v21783.locationInfo;
        var v9669 = v17207.unitIndex;
        v9666.errorCallback(v9667, v9668, message$$11, v9669);
      } else {
        this.writePrefixFromSym(symbol$$4);
        var v9670 = this.outfile;
        v9670.WriteLine(message$$11);
      }
      return;
    }
    function v501(ast$$22, message$$10) {
      var v9672 = this.pushToErrorSink;
      if (v9672) {
        this.captureError(message$$10);
        return;
      }
      this.hasErrors = true;
      var v21784 = ast$$22;
      if (v21784) {
        var v24203 = this.parser;
        v21784 = v24203.errorRecovery;
      }
      var v17208 = v21784;
      if (v17208) {
        var v21785 = this.parser;
        v17208 = v21785.errorCallback;
      }
      var v9679 = v17208;
      if (v9679) {
        var v9673 = ast$$22.limChar;
        var v9674 = ast$$22.minChar;
        var len$$13 = v9673 - v9674;
        var v9675 = this.parser;
        var v9676 = ast$$22.minChar;
        var v21786 = this.checker;
        var v17209 = v21786.locationInfo;
        var v9677 = v17209.unitIndex;
        v9675.errorCallback(v9676, len$$13, message$$10, v9677);
      } else {
        this.writePrefix(ast$$22);
        var v9678 = this.outfile;
        v9678.WriteLine(message$$10);
      }
      return;
    }
    function v500(ast$$21) {
      if (ast$$21) {
        var v17210 = ast$$21.flags;
        var v21787 = TypeScript$$13.ASTFlags;
        var v17211 = v21787.Error;
        ast$$21.flags = v17210 | v17211;
        var v21788 = this.checker;
        var v17212 = v21788.locationInfo;
        var v9683 = v17212.lineMap;
        if (v9683) {
          var v9680 = this.lineCol;
          var v9681 = ast$$21.minChar;
          var v21789 = this.checker;
          var v17213 = v21789.locationInfo;
          var v9682 = v17213.lineMap;
          TypeScript$$13.getSourceLineColFromMap(v9680, v9681, v9682);
        }
      }
      return;
    }
    function v499(symbol$$3) {
      var v17214 = symbol$$3;
      if (v17214) {
        var v24204 = this.checker;
        var v21790 = v24204.locationInfo;
        v17214 = v21790.lineMap;
      }
      var v9689 = v17214;
      if (v9689) {
        var v9684 = this.lineCol;
        var v9685 = symbol$$3.location;
        var v21791 = this.checker;
        var v17215 = v21791.locationInfo;
        var v9686 = v17215.lineMap;
        TypeScript$$13.getSourceLineColFromMap(v9684, v9685, v9686);
      } else {
        var v9687 = this.lineCol;
        v9687.line = -1;
        var v9688 = this.lineCol;
        v9688.col = -1;
      }
      this.emitPrefix();
      return;
    }
    function v498(ast$$20) {
      if (ast$$20) {
        this.setError(ast$$20);
      } else {
        var v9690 = this.lineCol;
        v9690.line = 0;
        var v9691 = this.lineCol;
        v9691.col = 0;
      }
      this.emitPrefix();
      return;
    }
    function v497() {
      var v9693 = this.emitAsComments;
      if (v9693) {
        var v9692 = this.outfile;
        v9692.Write("// ");
      }
      var v9694 = this.outfile;
      var v26318 = this.checker;
      var v26200 = v26318.locationInfo;
      var v25947 = v26200.filename;
      var v25380 = v25947 + "(";
      var v25948 = this.lineCol;
      var v25381 = v25948.line;
      var v24205 = v25380 + v25381;
      var v21792 = v24205 + ",";
      var v24206 = this.lineCol;
      var v21793 = v24206.col;
      var v17216 = v21792 + v21793;
      var v9695 = v17216 + "): ";
      v9694.Write(v9695);
      return;
    }
    function v496(outerr$$1) {
      this.outfile = outerr$$1;
      this.emitAsComments = false;
      return;
    }
    function v495(emsg) {
      var v9696 = this.errorSink;
      var v17217 = this.errorSink;
      var v9697 = v17217.length;
      v9696[v9697] = emsg;
      return;
    }
    function v494() {
      this.errorSink = [];
      return;
    }
    function v493() {
      return this.errorSink;
    }
    function ErrorReporter$$1(outfile$$2) {
      this.outfile = outfile$$2;
      this.parser = null;
      this.checker = null;
      this.lineCol = {line:0, col:0};
      this.emitAsComments = true;
      this.hasErrors = false;
      this.pushToErrorSink = false;
      this.errorSink = [];
      return;
    }
    var v9698 = ErrorReporter$$1.prototype;
    v9698.getCapturedErrors = v493;
    var v9699 = ErrorReporter$$1.prototype;
    v9699.freeCapturedErrors = v494;
    var v9700 = ErrorReporter$$1.prototype;
    v9700.captureError = v495;
    var v9701 = ErrorReporter$$1.prototype;
    v9701.setErrOut = v496;
    var v9702 = ErrorReporter$$1.prototype;
    v9702.emitPrefix = v497;
    var v9703 = ErrorReporter$$1.prototype;
    v9703.writePrefix = v498;
    var v9704 = ErrorReporter$$1.prototype;
    v9704.writePrefixFromSym = v499;
    var v9705 = ErrorReporter$$1.prototype;
    v9705.setError = v500;
    var v9706 = ErrorReporter$$1.prototype;
    v9706.reportError = v501;
    var v9707 = ErrorReporter$$1.prototype;
    v9707.reportErrorFromSym = v502;
    var v9708 = ErrorReporter$$1.prototype;
    v9708.emitterError = v503;
    var v9709 = ErrorReporter$$1.prototype;
    v9709.duplicateIdentifier = v504;
    var v9710 = ErrorReporter$$1.prototype;
    v9710.showRef = v505;
    var v9711 = ErrorReporter$$1.prototype;
    v9711.unresolvedSymbol = v506;
    var v9712 = ErrorReporter$$1.prototype;
    v9712.symbolDoesNotReferToAValue = v507;
    var v9713 = ErrorReporter$$1.prototype;
    v9713.styleError = v508;
    var v9714 = ErrorReporter$$1.prototype;
    v9714.simpleError = v509;
    var v9715 = ErrorReporter$$1.prototype;
    v9715.simpleErrorFromSym = v510;
    var v9716 = ErrorReporter$$1.prototype;
    v9716.invalidSuperReference = v511;
    var v9717 = ErrorReporter$$1.prototype;
    v9717.valueCannotBeModified = v512;
    var v9718 = ErrorReporter$$1.prototype;
    v9718.invalidCall = v513;
    var v9719 = ErrorReporter$$1.prototype;
    v9719.indexLHS = v514;
    var v9720 = ErrorReporter$$1.prototype;
    v9720.incompatibleTypes = v515;
    var v9721 = ErrorReporter$$1.prototype;
    v9721.expectedClassOrInterface = v516;
    var v9722 = ErrorReporter$$1.prototype;
    v9722.unaryOperatorTypeError = v517;
    return ErrorReporter$$1;
  }
  var ErrorReporter = v518();
  TypeScript$$13.ErrorReporter = ErrorReporter;
  return;
}
function v492(TypeScript$$12) {
  function v491() {
    function v490(fileName$$2, useUTF8) {
      try {
        var v17218 = this.emitOptions;
        var v9723 = v17218.ioHost;
        return v9723.createFile(fileName$$2, useUTF8);
      } catch (ex$$2) {
        var v9724 = this.errorReporter;
        var v9725 = ex$$2.message;
        v9724.emitterError(null, v9725);
      }
      return;
    }
    function shouldCaptureThis(func$$3) {
      var v9726 = func$$3.hasSelfReference();
      var v17219 = !v9726;
      if (v17219) {
        v9726 = func$$3.hasSuperReferenceInFatArrowFunction();
      }
      return v9726;
    }
    function v489() {
      var v21794 = this.thisFnc;
      if (v21794) {
        var v25382 = this.thisFnc;
        var v24207 = v25382.isMethod();
        v21794 = !v24207;
      }
      var v17220 = v21794;
      if (v17220) {
        var v24208 = this.thisFnc;
        var v21795 = v24208.isConstructor;
        v17220 = !v21795;
      }
      var v9727 = v17220;
      if (v9727) {
        this.writeToOutput("_this");
      } else {
        this.writeToOutput("this");
      }
      return;
    }
    function v488(callEx) {
      var v21796 = callEx.target;
      var v17221 = v21796.nodeType;
      var v21797 = TypeScript$$12.NodeType;
      var v17222 = v21797.Dot;
      var v9733 = v17221 == v17222;
      if (v9733) {
        var dotNode = callEx.target;
        var v21798 = dotNode.operand1;
        var v17223 = v21798.nodeType;
        var v21799 = TypeScript$$12.NodeType;
        var v17224 = v21799.Super;
        var v9732 = v17223 == v17224;
        if (v9732) {
          var v17225 = TypeScript$$12.TokenID;
          var v9728 = v17225.OpenParen;
          this.emitJavascript(dotNode, v9728, false);
          this.writeToOutput(".call(");
          this.emitThis();
          var v17226 = callEx.arguments;
          if (v17226) {
            var v25383 = callEx.arguments;
            var v24209 = v25383.members;
            var v21800 = v24209.length;
            v17226 = v21800 > 0;
          }
          var v9731 = v17226;
          if (v9731) {
            this.writeToOutput(", ");
            var v9729 = callEx.arguments;
            var v17227 = TypeScript$$12.TokenID;
            var v9730 = v17227.Comma;
            this.emitJavascriptList(v9729, ", ", v9730, false, false, false);
          }
          this.writeToOutput(")");
          return true;
        }
      }
      return false;
    }
    function v487() {
      this.writeToOutput("_super.prototype");
      return;
    }
    function v486(reqInherits) {
      var v17228 = this.prologueEmitted;
      var v9736 = !v17228;
      if (v9736) {
        if (reqInherits) {
          this.prologueEmitted = true;
          this.writeLineToOutput("var __extends = this.__extends || function (d, b) {");
          this.writeLineToOutput("    function __() { this.constructor = d; }");
          this.writeLineToOutput("    __.prototype = b.prototype;");
          this.writeLineToOutput("    d.prototype = new __();");
          this.writeLineToOutput("};");
        }
        var v17229 = this.checker;
        var v9735 = v17229.mustCaptureGlobalThis;
        if (v9735) {
          this.prologueEmitted = true;
          var v9734 = this.captureThisStmtString;
          this.writeLineToOutput(v9734);
        }
      }
      return;
    }
    function v485(classDecl$$3) {
      var v21801 = classDecl$$3.varFlags;
      var v24210 = TypeScript$$12.VarFlags;
      var v21802 = v24210.Ambient;
      var v17230 = TypeScript$$12.hasFlag(v21801, v21802);
      var v9786 = !v17230;
      if (v9786) {
        var svClassNode = this.thisClassNode;
        var i$$47 = 0;
        this.thisClassNode = classDecl$$3;
        var v9737 = classDecl$$3.name;
        var className$$3 = v9737.actualText;
        this.emitParensAndCommentsInPlace(classDecl$$3, true);
        var v9738 = EmitContainer.Class;
        var temp$$13 = this.setContainer(v9738);
        this.recordSourceMappingStart(classDecl$$3);
        var v21803 = classDecl$$3.varFlags;
        var v24211 = TypeScript$$12.VarFlags;
        var v21804 = v24211.Exported;
        var v17231 = TypeScript$$12.hasFlag(v21803, v21804);
        if (v17231) {
          var v25384 = classDecl$$3.type;
          var v24212 = v25384.symbol;
          var v21805 = v24212.container;
          var v24213 = this.checker;
          var v21806 = v24213.gloMod;
          v17231 = v21805 == v21806;
        }
        var v9741 = v17231;
        if (v9741) {
          var v9739 = "this." + className$$3;
          this.writeToOutput(v9739);
        } else {
          var v9740 = "var " + className$$3;
          this.writeToOutput(v9740);
        }
        var v9742 = classDecl$$3.extendsList;
        if (v9742) {
          var v21807 = classDecl$$3.extendsList;
          var v17232 = v21807.members;
          v9742 = v17232.length;
        }
        var hasBaseClass = v9742;
        var baseNameDecl = null;
        var baseName$$2 = null;
        if (hasBaseClass) {
          this.writeLineToOutput(" = (function (_super) {");
        } else {
          this.writeLineToOutput(" = (function () {");
        }
        this.recordSourceMappingNameStart(className$$3);
        var v9743 = this.indenter;
        v9743.increaseIndent();
        if (hasBaseClass) {
          var v17233 = classDecl$$3.extendsList;
          var v9744 = v17233.members;
          baseNameDecl = v9744[0];
          var v9745;
          var v21808 = baseNameDecl.nodeType;
          var v24214 = TypeScript$$12.NodeType;
          var v21809 = v24214.Call;
          var v17234 = v21808 == v21809;
          if (v17234) {
            v9745 = baseNameDecl.target;
          } else {
            v9745 = baseNameDecl;
          }
          baseName$$2 = v9745;
          this.emitIndent();
          var v17235 = "__extends(" + className$$3;
          var v9746 = v17235 + ", _super);";
          this.writeLineToOutput(v9746);
        }
        this.emitIndent();
        var constrDecl = classDecl$$3.constructorDecl;
        if (constrDecl) {
          var v9747 = classDecl$$3.constructorDecl;
          var v17236 = TypeScript$$12.TokenID;
          var v9748 = v17236.OpenParen;
          this.emitJavascript(v9747, v9748, false);
        } else {
          var wroteProps = 0;
          this.recordSourceMappingStart(classDecl$$3);
          var v9749 = this.indenter;
          v9749.increaseIndent();
          var v24215 = classDecl$$3.name;
          var v21810 = v24215.actualText;
          var v17237 = "function " + v21810;
          var v9750 = v17237 + "() {";
          this.writeToOutput(v9750);
          this.recordSourceMappingNameStart("constructor");
          if (hasBaseClass) {
            this.writeLineToOutput("");
            this.emitIndent();
            this.writeLineToOutput("_super.apply(this, arguments);");
            wroteProps++;
          }
          var v17238 = classDecl$$3.varFlags;
          var v21811 = TypeScript$$12.VarFlags;
          var v17239 = v21811.MustCaptureThis;
          var v9751 = v17238 & v17239;
          if (v9751) {
            this.writeCaptureThisStatement(classDecl$$3);
          }
          var v17240 = this.thisClassNode;
          var v9752 = v17240.members;
          var members$$6 = v9752.members;
          i$$47 = 0;
          var v17241 = members$$6.length;
          var v9756 = i$$47 < v17241;
          for (;v9756;) {
            var v21812 = members$$6[i$$47];
            var v17242 = v21812.nodeType;
            var v21813 = TypeScript$$12.NodeType;
            var v17243 = v21813.VarDecl;
            var v9755 = v17242 == v17243;
            if (v9755) {
              var varDecl$$5 = members$$6[i$$47];
              var v24216 = varDecl$$5.varFlags;
              var v25385 = TypeScript$$12.VarFlags;
              var v24217 = v25385.Static;
              var v21814 = TypeScript$$12.hasFlag(v24216, v24217);
              var v17244 = !v21814;
              if (v17244) {
                v17244 = varDecl$$5.init;
              }
              var v9754 = v17244;
              if (v9754) {
                this.writeLineToOutput("");
                this.emitIndent();
                var v17245 = TypeScript$$12.TokenID;
                var v9753 = v17245.Tilde;
                this.emitJavascriptVarDecl(varDecl$$5, v9753);
                wroteProps++;
              }
            }
            i$$47++;
            var v17246 = members$$6.length;
            v9756 = i$$47 < v17246;
          }
          if (wroteProps) {
            this.writeLineToOutput("");
            var v9757 = this.indenter;
            v9757.decreaseIndent();
            this.emitIndent();
            this.writeLineToOutput("}");
          } else {
            this.writeLineToOutput(" }");
            var v9758 = this.indenter;
            v9758.decreaseIndent();
          }
          this.recordSourceMappingNameEnd();
          this.recordSourceMappingEnd(classDecl$$3);
        }
        var v17247 = classDecl$$3.members;
        var v9759 = v17247.members;
        var membersLen = v9759.length;
        var j$$3 = 0;
        var v9775 = j$$3 < membersLen;
        for (;v9775;) {
          var v17248 = classDecl$$3.members;
          var v9760 = v17248.members;
          var memberDecl = v9760[j$$3];
          var v17249 = memberDecl.nodeType;
          var v21815 = TypeScript$$12.NodeType;
          var v17250 = v21815.FuncDecl;
          var v9774 = v17249 == v17250;
          if (v9774) {
            var fn$$6 = memberDecl;
            var v21816 = fn$$6.fncFlags;
            var v24218 = TypeScript$$12.FncFlags;
            var v21817 = v24218.Method;
            var v17251 = TypeScript$$12.hasFlag(v21816, v21817);
            if (v17251) {
              var v21818 = fn$$6.isSignature();
              v17251 = !v21818;
            }
            var v9767 = v17251;
            if (v9767) {
              var v21819 = fn$$6.fncFlags;
              var v24219 = TypeScript$$12.FncFlags;
              var v21820 = v24219.Static;
              var v17252 = TypeScript$$12.hasFlag(v21819, v21820);
              var v9766 = !v17252;
              if (v9766) {
                this.emitPrototypeMember(fn$$6, className$$3);
              } else {
                var v9765 = fn$$6.isAccessor();
                if (v9765) {
                  var v21821 = this.thisClassNode;
                  var v17253 = v21821.name;
                  var v9761 = v17253.actualText;
                  this.emitPropertyAccessor(fn$$6, v9761, false);
                } else {
                  this.emitIndent();
                  this.recordSourceMappingStart(fn$$6);
                  var v25386 = classDecl$$3.name;
                  var v24220 = v25386.actualText;
                  var v21822 = v24220 + ".";
                  var v24221 = fn$$6.name;
                  var v21823 = v24221.actualText;
                  var v17254 = v21822 + v21823;
                  var v9762 = v17254 + " = ";
                  this.writeToOutput(v9762);
                  var v17255 = fn$$6.name;
                  if (v17255) {
                    var v24222 = fn$$6.name;
                    var v21824 = v24222.isMissing();
                    v17255 = !v21824;
                  }
                  var v9763 = v17255;
                  var v9764 = Emitter$$1.shouldCaptureThis(fn$$6);
                  this.emitInnerFunction(fn$$6, v9763, true, null, v9764, null);
                  this.writeLineToOutput(";");
                }
              }
            }
          } else {
            var v17256 = memberDecl.nodeType;
            var v21825 = TypeScript$$12.NodeType;
            var v17257 = v21825.VarDecl;
            var v9773 = v17256 == v17257;
            if (v9773) {
              varDecl$$5 = memberDecl;
              var v17258 = varDecl$$5.varFlags;
              var v21826 = TypeScript$$12.VarFlags;
              var v17259 = v21826.Static;
              var v9772 = TypeScript$$12.hasFlag(v17258, v17259);
              if (v9772) {
                var v9771 = varDecl$$5.init;
                if (v9771) {
                  this.emitIndent();
                  this.recordSourceMappingStart(varDecl$$5);
                  var v25387 = classDecl$$3.name;
                  var v24223 = v25387.actualText;
                  var v21827 = v24223 + ".";
                  var v24224 = varDecl$$5.id;
                  var v21828 = v24224.actualText;
                  var v17260 = v21827 + v21828;
                  var v9768 = v17260 + " = ";
                  this.writeToOutput(v9768);
                  var v9769 = varDecl$$5.init;
                  var v17261 = TypeScript$$12.TokenID;
                  var v9770 = v17261.Equals;
                  this.emitJavascript(v9769, v9770, false);
                  this.writeLineToOutput(";");
                  this.recordSourceMappingEnd(varDecl$$5);
                }
              }
            } else {
              throw Error("We want to catch this");
            }
          }
          j$$3++;
          v9775 = j$$3 < membersLen;
        }
        this.emitIndent();
        var v9776 = classDecl$$3.endingToken;
        this.recordSourceMappingStart(v9776);
        var v17262 = "return " + className$$3;
        var v9777 = v17262 + ";";
        this.writeLineToOutput(v9777);
        var v9778 = classDecl$$3.endingToken;
        this.recordSourceMappingEnd(v9778);
        var v9779 = this.indenter;
        v9779.decreaseIndent();
        this.emitIndent();
        var v9780 = classDecl$$3.endingToken;
        this.recordSourceMappingStart(v9780);
        this.writeToOutput("}");
        this.recordSourceMappingNameEnd();
        var v9781 = classDecl$$3.endingToken;
        this.recordSourceMappingEnd(v9781);
        this.recordSourceMappingStart(classDecl$$3);
        this.writeToOutput(")(");
        if (hasBaseClass) {
          var v17263 = TypeScript$$12.TokenID;
          var v9782 = v17263.Tilde;
          this.emitJavascript(baseName$$2, v9782, false);
        }
        this.writeToOutput(");");
        this.recordSourceMappingEnd(classDecl$$3);
        var v24225 = EmitContainer.Module;
        var v21829 = temp$$13 == v24225;
        var v24227 = !v21829;
        if (v24227) {
          var v24226 = EmitContainer.DynamicModule;
          v21829 = temp$$13 == v24226;
        }
        var v17264 = v21829;
        if (v17264) {
          var v21830 = classDecl$$3.varFlags;
          var v24228 = TypeScript$$12.VarFlags;
          var v21831 = v24228.Exported;
          v17264 = TypeScript$$12.hasFlag(v21830, v21831);
        }
        var v9785 = v17264;
        if (v9785) {
          this.writeLineToOutput("");
          this.emitIndent();
          var v9783;
          var v21832 = EmitContainer.Module;
          var v17265 = temp$$13 == v21832;
          if (v17265) {
            v9783 = this.moduleName;
          } else {
            v9783 = "exports";
          }
          var modName$$2 = v9783;
          this.recordSourceMappingStart(classDecl$$3);
          var v25388 = modName$$2 + ".";
          var v24229 = v25388 + className$$3;
          var v21833 = v24229 + " = ";
          var v17266 = v21833 + className$$3;
          var v9784 = v17266 + ";";
          this.writeToOutput(v9784);
          this.recordSourceMappingEnd(classDecl$$3);
        }
        this.emitIndent();
        this.recordSourceMappingEnd(classDecl$$3);
        this.emitParensAndCommentsInPlace(classDecl$$3, false);
        this.setContainer(temp$$13);
        this.thisClassNode = svClassNode;
      }
      return;
    }
    function v484(className$$2, base$$1, classDecl$$2) {
      function v483(key$$32, s$$13, c$$6) {
        var sym$$5 = s$$13;
        var v21834 = sym$$5.kind();
        var v24230 = TypeScript$$12.SymbolKind;
        var v21835 = v24230.Type;
        var v17267 = v21834 == v21835;
        if (v17267) {
          var v21836 = sym$$5.type;
          v17267 = v21836.call;
        }
        var v9790 = v17267;
        if (v9790) {
          var v9787 = sym$$5.declAST;
          this.recordSourceMappingStart(v9787);
          var v26201 = className$$2 + ".prototype.";
          var v26202 = sym$$5.name;
          var v25949 = v26201 + v26202;
          var v25389 = v25949 + " = ";
          var v24231 = v25389 + baseName$$1;
          var v21837 = v24231 + ".prototype.";
          var v21838 = sym$$5.name;
          var v17268 = v21837 + v21838;
          var v9788 = v17268 + ";";
          this.writeLineToOutput(v9788);
          var v9789 = sym$$5.declAST;
          this.recordSourceMappingEnd(v9789);
        }
        return;
      }
      var v9793 = base$$1.members;
      if (v9793) {
        var baseSymbol$$1 = base$$1.symbol;
        var baseName$$1 = baseSymbol$$1.name;
        var v17269 = baseSymbol$$1.declModule;
        var v24232 = classDecl$$2.type;
        var v21839 = v24232.symbol;
        var v17270 = v21839.declModule;
        var v9791 = v17269 != v17270;
        if (v9791) {
          baseName$$1 = baseSymbol$$1.fullName();
        }
        var v17271 = base$$1.members;
        var v9792 = v17271.allMembers;
        v9792.map(v483, null);
      }
      var v9797 = base$$1.extendsList;
      if (v9797) {
        var i$$46 = 0;
        var v9794 = base$$1.extendsList;
        var len$$12 = v9794.length;
        var v9796 = i$$46 < len$$12;
        for (;v9796;) {
          var v17272 = base$$1.extendsList;
          var v9795 = v17272[i$$46];
          this.emitAddBaseMethods(className$$2, v9795, classDecl$$2);
          i$$46++;
          v9796 = i$$46 < len$$12;
        }
      }
      return;
    }
    function v482(member, className$$1) {
      var v17273 = member.nodeType;
      var v21840 = TypeScript$$12.NodeType;
      var v17274 = v21840.FuncDecl;
      var v9808 = v17273 == v17274;
      if (v9808) {
        var funcDecl$$4 = member;
        var v9800 = funcDecl$$4.isAccessor();
        if (v9800) {
          this.emitPropertyAccessor(funcDecl$$4, className$$1, true);
        } else {
          this.emitIndent();
          this.recordSourceMappingStart(funcDecl$$4);
          var v21841 = className$$1 + ".prototype.";
          var v21842 = funcDecl$$4.getNameText();
          var v17275 = v21841 + v21842;
          var v9798 = v17275 + " = ";
          this.writeToOutput(v9798);
          var v9799 = Emitter$$1.shouldCaptureThis(funcDecl$$4);
          this.emitInnerFunction(funcDecl$$4, false, true, null, v9799, null);
          this.writeLineToOutput(";");
        }
      } else {
        var v17276 = member.nodeType;
        var v21843 = TypeScript$$12.NodeType;
        var v17277 = v21843.VarDecl;
        var v9807 = v17276 == v17277;
        if (v9807) {
          var varDecl$$4 = member;
          var v9806 = varDecl$$4.init;
          if (v9806) {
            this.emitIndent();
            this.recordSourceMappingStart(varDecl$$4);
            var v9801 = varDecl$$4.id;
            this.recordSourceMappingStart(v9801);
            var v17278 = className$$1 + ".prototype.";
            var v21844 = varDecl$$4.id;
            var v17279 = v21844.actualText;
            var v9802 = v17278 + v17279;
            this.writeToOutput(v9802);
            var v9803 = varDecl$$4.id;
            this.recordSourceMappingEnd(v9803);
            this.writeToOutput(" = ");
            var v9804 = varDecl$$4.init;
            var v17280 = TypeScript$$12.TokenID;
            var v9805 = v17280.Equals;
            this.emitJavascript(v9804, v9805, false);
            this.recordSourceMappingEnd(varDecl$$4);
            this.writeLineToOutput(";");
          }
        }
      }
      return;
    }
    function v481(funcDecl$$3, className, isProto) {
      var v21845 = funcDecl$$3.accessorSymbol;
      var v17281 = v21845.hasBeenEmitted;
      var v9818 = !v17281;
      if (v9818) {
        var accessorSymbol = funcDecl$$3.accessorSymbol;
        this.emitIndent();
        this.recordSourceMappingStart(funcDecl$$3);
        var v25390 = "Object.defineProperty(" + className;
        var v25950;
        if (isProto) {
          v25950 = '.prototype, "';
        } else {
          v25950 = ', "';
        }
        var v25391 = v25950;
        var v24233 = v25390 + v25391;
        var v25392 = funcDecl$$3.name;
        var v24234 = v25392.actualText;
        var v21846 = v24233 + v24234;
        var v17282 = v21846 + '"';
        var v9809 = v17282 + ", {";
        this.writeLineToOutput(v9809);
        var v9810 = this.indenter;
        v9810.increaseIndent();
        var v9813 = accessorSymbol.getter;
        if (v9813) {
          var v9811 = accessorSymbol.getter;
          var getter = v9811.declAST;
          this.emitIndent();
          this.recordSourceMappingStart(getter);
          this.writeToOutput("get: ");
          var v9812 = Emitter$$1.shouldCaptureThis(getter);
          this.emitInnerFunction(getter, false, isProto, null, v9812, null);
          this.writeLineToOutput(",");
        }
        var v9816 = accessorSymbol.setter;
        if (v9816) {
          var v9814 = accessorSymbol.setter;
          var setter = v9814.declAST;
          this.emitIndent();
          this.recordSourceMappingStart(setter);
          this.writeToOutput("set: ");
          var v9815 = Emitter$$1.shouldCaptureThis(setter);
          this.emitInnerFunction(setter, false, isProto, null, v9815, null);
          this.writeLineToOutput(",");
        }
        this.emitIndent();
        this.writeLineToOutput("enumerable: true,");
        this.emitIndent();
        this.writeLineToOutput("configurable: true");
        var v9817 = this.indenter;
        v9817.decreaseIndent();
        this.emitIndent();
        this.writeLineToOutput("});");
        this.recordSourceMappingEnd(funcDecl$$3);
        accessorSymbol.hasBeenEmitted = true;
      }
      return;
    }
    function v480(ast$$19, tokenId$$41, startLine$$40) {
      var v9819 = ast$$19 == null;
      if (v9819) {
        return;
      }
      var v24235 = startLine$$40;
      if (v24235) {
        var v25951 = this.indenter;
        var v25393 = v25951.indentAmt;
        v24235 = v25393 > 0;
      }
      var v21847 = v24235;
      if (v21847) {
        var v24236 = ast$$19.nodeType;
        var v25394 = TypeScript$$12.NodeType;
        var v24237 = v25394.List;
        v21847 = v24236 != v24237;
      }
      var v17283 = v21847;
      if (v17283) {
        var v21848 = ast$$19.nodeType;
        var v24238 = TypeScript$$12.NodeType;
        var v21849 = v24238.Block;
        v17283 = v21848 != v21849;
      }
      var v9821 = v17283;
      if (v9821) {
        var v25395 = ast$$19.nodeType;
        var v25952 = TypeScript$$12.NodeType;
        var v25396 = v25952.InterfaceDeclaration;
        var v24239 = v25395 != v25396;
        if (v24239) {
          var v26378 = ast$$19.nodeType;
          var v26404 = TypeScript$$12.NodeType;
          var v26379 = v26404.VarDecl;
          var v26319 = v26378 == v26379;
          if (v26319) {
            var v26405 = ast$$19.varFlags;
            var v26423 = TypeScript$$12.VarFlags;
            var v26406 = v26423.Ambient;
            var v26380 = v26405 & v26406;
            var v26407 = TypeScript$$12.VarFlags;
            var v26381 = v26407.Ambient;
            v26319 = v26380 == v26381;
          }
          var v26203 = v26319;
          if (v26203) {
            var v26320 = ast$$19.init;
            v26203 = v26320 == null;
          }
          var v25953 = v26203;
          var v25397 = !v25953;
          if (v25397) {
            var v25954 = this.varListCount();
            v25397 = v25954 >= 0;
          }
          v24239 = v25397;
        }
        var v21850 = v24239;
        if (v21850) {
          var v24240 = ast$$19.nodeType;
          var v25398 = TypeScript$$12.NodeType;
          var v24241 = v25398.EndCode;
          v21850 = v24240 != v24241;
        }
        var v17284 = v21850;
        if (v17284) {
          var v24242 = ast$$19.nodeType;
          var v25399 = TypeScript$$12.NodeType;
          var v24243 = v25399.FuncDecl;
          var v21851 = v24242 != v24243;
          var v24246 = !v21851;
          if (v24246) {
            var v25400 = this.emitState;
            var v24244 = v25400.container;
            var v24245 = EmitContainer.Constructor;
            v21851 = v24244 != v24245;
          }
          v17284 = v21851;
        }
        var v9820 = v17284;
        if (v9820) {
          this.emitIndent();
        }
      }
      ast$$19.emit(this, tokenId$$41, startLine$$40);
      var v24247 = TypeScript$$12.TokenID;
      var v21852 = v24247.Semicolon;
      var v17285 = tokenId$$41 == v21852;
      if (v17285) {
        var v21853 = ast$$19.nodeType;
        var v24248 = TypeScript$$12.NodeType;
        var v21854 = v24248.GeneralNode;
        v17285 = v21853 < v21854;
      }
      var v9822 = v17285;
      if (v9822) {
        this.writeToOutput(";");
      }
      return;
    }
    function v479(ast$$18, delimiter, tokenId$$40, startLine$$39, onlyStatics, emitClassPropertiesAfterSuperCall$$1, emitPrologue, requiresExtendsBlock) {
      var v17286 = typeof emitClassPropertiesAfterSuperCall$$1;
      var v9823 = v17286 === "undefined";
      if (v9823) {
        emitClassPropertiesAfterSuperCall$$1 = false;
      }
      var v17287 = typeof emitPrologue;
      var v9824 = v17287 === "undefined";
      if (v9824) {
        emitPrologue = false;
      }
      var v9854 = ast$$18 == null;
      if (v9854) {
      } else {
        var v17288 = ast$$18.nodeType;
        var v21855 = TypeScript$$12.NodeType;
        var v17289 = v21855.List;
        var v9853 = v17288 != v17289;
        if (v9853) {
          this.emitPrologue(emitPrologue);
          this.emitJavascript(ast$$18, tokenId$$40, startLine$$39);
        } else {
          var list$$1 = ast$$18;
          var v21856 = list$$1.members;
          var v17290 = v21856.length;
          var v9825 = v17290 == 0;
          if (v9825) {
            return;
          }
          this.emitParensAndCommentsInPlace(ast$$18, true);
          var v9826 = list$$1.members;
          var len$$11 = v9826.length;
          var i$$45 = 0;
          var v9852 = i$$45 < len$$11;
          for (;v9852;) {
            if (emitPrologue) {
              var v17291 = i$$45 == 1;
              var v21858 = !v17291;
              if (v21858) {
                var v24249 = list$$1.flags;
                var v25401 = TypeScript$$12.ASTFlags;
                var v24250 = v25401.StrictMode;
                var v21857 = TypeScript$$12.hasFlag(v24249, v24250);
                v17291 = !v21857;
              }
              var v9827 = v17291;
              if (v9827) {
                this.emitPrologue(requiresExtendsBlock);
                emitPrologue = false;
              }
            }
            var v17292 = i$$45 == 1;
            if (v17292) {
              v17292 = emitClassPropertiesAfterSuperCall$$1;
            }
            var v9846 = v17292;
            if (v9846) {
              var v9828 = this.thisClassNode;
              var constructorDecl = v9828.constructorDecl;
              var v17293 = constructorDecl;
              if (v17293) {
                v17293 = constructorDecl.arguments;
              }
              var v9839 = v17293;
              if (v9839) {
                var v17294 = constructorDecl.arguments;
                var v9829 = v17294.members;
                var argsLen$$1 = v9829.length;
                var iArg = 0;
                var v9838 = iArg < argsLen$$1;
                for (;v9838;) {
                  var v17295 = constructorDecl.arguments;
                  var v9830 = v17295.members;
                  var arg$$4 = v9830[iArg];
                  var v21859 = arg$$4.varFlags;
                  var v24251 = TypeScript$$12.VarFlags;
                  var v21860 = v24251.Property;
                  var v17296 = v21859 & v21860;
                  var v21861 = TypeScript$$12.VarFlags;
                  var v17297 = v21861.None;
                  var v9837 = v17296 != v17297;
                  if (v9837) {
                    this.emitIndent();
                    this.recordSourceMappingStart(arg$$4);
                    var v9831 = arg$$4.id;
                    this.recordSourceMappingStart(v9831);
                    var v21862 = arg$$4.id;
                    var v17298 = v21862.actualText;
                    var v9832 = "this." + v17298;
                    this.writeToOutput(v9832);
                    var v9833 = arg$$4.id;
                    this.recordSourceMappingEnd(v9833);
                    this.writeToOutput(" = ");
                    var v9834 = arg$$4.id;
                    this.recordSourceMappingStart(v9834);
                    var v17299 = arg$$4.id;
                    var v9835 = v17299.actualText;
                    this.writeToOutput(v9835);
                    var v9836 = arg$$4.id;
                    this.recordSourceMappingEnd(v9836);
                    this.writeLineToOutput(";");
                    this.recordSourceMappingEnd(arg$$4);
                  }
                  iArg++;
                  v9838 = iArg < argsLen$$1;
                }
              }
              var v21863 = this.thisClassNode;
              var v17300 = v21863.members;
              var v9840 = v17300.members;
              var nProps$$1 = v9840.length;
              var iMember = 0;
              var v9845 = iMember < nProps$$1;
              for (;v9845;) {
                var v25955 = this.thisClassNode;
                var v25402 = v25955.members;
                var v24252 = v25402.members;
                var v21864 = v24252[iMember];
                var v17301 = v21864.nodeType;
                var v21865 = TypeScript$$12.NodeType;
                var v17302 = v21865.VarDecl;
                var v9844 = v17301 == v17302;
                if (v9844) {
                  var v21866 = this.thisClassNode;
                  var v17303 = v21866.members;
                  var v9841 = v17303.members;
                  var varDecl$$3 = v9841[iMember];
                  var v24253 = varDecl$$3.varFlags;
                  var v25403 = TypeScript$$12.VarFlags;
                  var v24254 = v25403.Static;
                  var v21867 = TypeScript$$12.hasFlag(v24253, v24254);
                  var v17304 = !v21867;
                  if (v17304) {
                    v17304 = varDecl$$3.init;
                  }
                  var v9843 = v17304;
                  if (v9843) {
                    this.emitIndent();
                    var v17305 = TypeScript$$12.TokenID;
                    var v9842 = v17305.Tilde;
                    this.emitJavascriptVarDecl(varDecl$$3, v9842);
                    this.writeLineToOutput("");
                  }
                }
                iMember++;
                v9845 = iMember < nProps$$1;
              }
            }
            var v9847 = list$$1.members;
            var emitNode = v9847[i$$45];
            var v21868 = emitNode.nodeType;
            var v24255 = TypeScript$$12.NodeType;
            var v21869 = v24255.FuncDecl;
            var v17306 = v21868 == v21869;
            if (v17306) {
              var v21870 = emitNode.fncFlags;
              var v24256 = TypeScript$$12.FncFlags;
              var v21871 = v24256.Static;
              v17306 = TypeScript$$12.hasFlag(v21870, v21871);
            }
            var v9848 = v17306;
            var v17308 = !v9848;
            if (v17308) {
              var v21872 = emitNode.nodeType;
              var v24257 = TypeScript$$12.NodeType;
              var v21873 = v24257.VarDecl;
              var v17307 = v21872 == v21873;
              if (v17307) {
                var v21874 = emitNode.varFlags;
                var v24258 = TypeScript$$12.VarFlags;
                var v21875 = v24258.Static;
                v17307 = TypeScript$$12.hasFlag(v21874, v21875);
              }
              v9848 = v17307;
            }
            var isStaticDecl = v9848;
            var v17309;
            if (onlyStatics) {
              v17309 = !isStaticDecl;
            } else {
              v17309 = isStaticDecl;
            }
            var v9849 = v17309;
            if (v9849) {
              i$$45++;
              v9852 = i$$45 < len$$11;
              continue;
            }
            this.emitJavascript(emitNode, tokenId$$40, startLine$$39);
            var v17310 = delimiter;
            if (v17310) {
              var v21876 = len$$11 - 1;
              v17310 = i$$45 < v21876;
            }
            var v9851 = v17310;
            if (v9851) {
              if (startLine$$39) {
                this.writeLineToOutput(delimiter);
              } else {
                this.writeToOutput(delimiter);
              }
            } else {
              var v26204 = startLine$$39;
              if (v26204) {
                var v26321 = emitNode.nodeType;
                var v26382 = TypeScript$$12.NodeType;
                var v26322 = v26382.ModuleDeclaration;
                v26204 = v26321 != v26322;
              }
              var v25956 = v26204;
              if (v25956) {
                var v26205 = emitNode.nodeType;
                var v26323 = TypeScript$$12.NodeType;
                var v26206 = v26323.InterfaceDeclaration;
                v25956 = v26205 != v26206;
              }
              var v25404 = v25956;
              if (v25404) {
                var v26408 = emitNode.nodeType;
                var v26424 = TypeScript$$12.NodeType;
                var v26409 = v26424.VarDecl;
                var v26383 = v26408 == v26409;
                if (v26383) {
                  var v26425 = emitNode.varFlags;
                  var v26433 = TypeScript$$12.VarFlags;
                  var v26426 = v26433.Ambient;
                  var v26410 = v26425 & v26426;
                  var v26427 = TypeScript$$12.VarFlags;
                  var v26411 = v26427.Ambient;
                  v26383 = v26410 == v26411;
                }
                var v26324 = v26383;
                if (v26324) {
                  var v26384 = emitNode.init;
                  v26324 = v26384 == null;
                }
                var v26207 = v26324;
                var v25957 = !v26207;
                if (v25957) {
                  var v26208 = this.varListCount();
                  v25957 = v26208 >= 0;
                }
                v25404 = v25957;
              }
              var v24259 = v25404;
              if (v24259) {
                var v25958 = emitNode.nodeType;
                var v26209 = TypeScript$$12.NodeType;
                var v25959 = v26209.Block;
                var v25405 = v25958 != v25959;
                var v25960 = !v25405;
                if (v25960) {
                  v25405 = emitNode.isStatementBlock;
                }
                v24259 = v25405;
              }
              var v21877 = v24259;
              if (v21877) {
                var v24260 = emitNode.nodeType;
                var v25406 = TypeScript$$12.NodeType;
                var v24261 = v25406.EndCode;
                v21877 = v24260 != v24261;
              }
              var v17311 = v21877;
              if (v17311) {
                var v21878 = emitNode.nodeType;
                var v24262 = TypeScript$$12.NodeType;
                var v21879 = v24262.FuncDecl;
                v17311 = v21878 != v21879;
              }
              var v9850 = v17311;
              if (v9850) {
                this.writeLineToOutput("");
              }
            }
            i$$45++;
            v9852 = i$$45 < len$$11;
          }
          this.emitParensAndCommentsInPlace(ast$$18, false);
        }
      }
      return;
    }
    function v478() {
      var v17312 = this.sourceMapper;
      var v9857 = v17312 != null;
      if (v9857) {
        var v9855 = TypeScript$$12.SourceMapper;
        var v9856 = this.allSourceMappers;
        v9855.EmitSourceMapping(v9856);
      }
      try {
        var v9858 = this.outfile;
        v9858.Close();
      } catch (ex$$1) {
        var v9859 = this.errorReporter;
        var v9860 = ex$$1.message;
        v9859.emitterError(null, v9860);
      }
      return;
    }
    function v477(ast$$17) {
      var v17313 = this.sourceMapper;
      if (v17313) {
        v17313 = TypeScript$$12.isValidAstNode(ast$$17);
      }
      var v9867 = v17313;
      if (v9867) {
        var v17314 = this.sourceMapper;
        var v9861 = v17314.currentMappings;
        v9861.pop();
        var v17315 = this.sourceMapper;
        var v9862 = v17315.currentMappings;
        var v24263 = this.sourceMapper;
        var v21880 = v24263.currentMappings;
        var v17316 = v21880.length;
        var v9863 = v17316 - 1;
        var siblings$$1 = v9862[v9863];
        var v17317 = siblings$$1.length;
        var v9864 = v17317 - 1;
        var sourceMapping$$2 = siblings$$1[v9864];
        var v9865 = sourceMapping$$2.end;
        var v17318 = this.emitState;
        v9865.emittedColumn = v17318.column;
        var v9866 = sourceMapping$$2.end;
        var v17319 = this.emitState;
        v9866.emittedLine = v17319.line;
      }
      return;
    }
    function v476(ast$$16) {
      var v17320 = this.sourceMapper;
      if (v17320) {
        v17320 = TypeScript$$12.isValidAstNode(ast$$16);
      }
      var v9886 = v17320;
      if (v9886) {
        var lineCol$$1 = {line:-1, col:-1};
        var v9868 = TypeScript$$12.SourceMapping;
        var sourceMapping$$1 = new v9868;
        var v9869 = sourceMapping$$1.start;
        var v17321 = this.emitState;
        v9869.emittedColumn = v17321.column;
        var v9870 = sourceMapping$$1.start;
        var v17322 = this.emitState;
        v9870.emittedLine = v17322.line;
        var v9871 = ast$$16.minChar;
        var v21881 = this.checker;
        var v17323 = v21881.locationInfo;
        var v9872 = v17323.lineMap;
        TypeScript$$12.getSourceLineColFromMap(lineCol$$1, v9871, v9872);
        var v9873 = sourceMapping$$1.start;
        v9873.sourceColumn = lineCol$$1.col;
        var v9874 = sourceMapping$$1.start;
        v9874.sourceLine = lineCol$$1.line;
        var v9875 = ast$$16.limChar;
        var v21882 = this.checker;
        var v17324 = v21882.locationInfo;
        var v9876 = v17324.lineMap;
        TypeScript$$12.getSourceLineColFromMap(lineCol$$1, v9875, v9876);
        var v9877 = sourceMapping$$1.end;
        v9877.sourceColumn = lineCol$$1.col;
        var v9878 = sourceMapping$$1.end;
        v9878.sourceLine = lineCol$$1.line;
        var v24264 = this.sourceMapper;
        var v21883 = v24264.currentNameIndex;
        var v17325 = v21883.length;
        var v9881 = v17325 > 0;
        if (v9881) {
          var v17326 = this.sourceMapper;
          var v9879 = v17326.currentNameIndex;
          var v24265 = this.sourceMapper;
          var v21884 = v24265.currentNameIndex;
          var v17327 = v21884.length;
          var v9880 = v17327 - 1;
          sourceMapping$$1.nameIndex = v9879[v9880];
        }
        var v17328 = this.sourceMapper;
        var v9882 = v17328.currentMappings;
        var v24266 = this.sourceMapper;
        var v21885 = v24266.currentMappings;
        var v17329 = v21885.length;
        var v9883 = v17329 - 1;
        var siblings = v9882[v9883];
        siblings.push(sourceMapping$$1);
        var v17330 = this.sourceMapper;
        var v9884 = v17330.currentMappings;
        var v9885 = sourceMapping$$1.childMappings;
        v9884.push(v9885);
      }
      return;
    }
    function v475() {
      var v9888 = this.sourceMapper;
      if (v9888) {
        var v17331 = this.sourceMapper;
        var v9887 = v17331.currentNameIndex;
        v9887.pop();
      }
      return;
    }
    function v474(name$$40) {
      var v9895 = this.sourceMapper;
      if (v9895) {
        var finalName = name$$40;
        var v9891 = !name$$40;
        if (v9891) {
          finalName = "";
        } else {
          var v24267 = this.sourceMapper;
          var v21886 = v24267.currentNameIndex;
          var v17332 = v21886.length;
          var v9890 = v17332 > 0;
          if (v9890) {
            var v24268 = this.sourceMapper;
            var v21887 = v24268.names;
            var v25961 = this.sourceMapper;
            var v25407 = v25961.currentNameIndex;
            var v24269 = v25407.length;
            var v21888 = v24269 - 1;
            var v17333 = v21887[v21888];
            var v9889 = v17333 + ".";
            finalName = v9889 + name$$40;
          }
        }
        var v17334 = this.sourceMapper;
        var v9892 = v17334.names;
        v9892.push(finalName);
        var v17335 = this.sourceMapper;
        var v9893 = v17335.currentNameIndex;
        var v24270 = this.sourceMapper;
        var v21889 = v24270.names;
        var v17336 = v21889.length;
        var v9894 = v17336 - 1;
        v9893.push(v9894);
      }
      return;
    }
    function v473(stmts$$2, emitClassPropertiesAfterSuperCall) {
      var v17337 = typeof emitClassPropertiesAfterSuperCall;
      var v9896 = v17337 === "undefined";
      if (v9896) {
        emitClassPropertiesAfterSuperCall = false;
      }
      var v17338 = stmts$$2.nodeType;
      var v21890 = TypeScript$$12.NodeType;
      var v17339 = v21890.Block;
      var v9904 = v17338 != v17339;
      if (v9904) {
        var v17340 = stmts$$2.nodeType;
        var v21891 = TypeScript$$12.NodeType;
        var v17341 = v21891.List;
        var v9902 = v17340 == v17341;
        if (v9902) {
          var stmtList = stmts$$2;
          var v25408 = stmtList.members;
          var v24271 = v25408.length;
          var v21892 = v24271 == 2;
          if (v21892) {
            var v25962 = stmtList.members;
            var v25409 = v25962[0];
            var v24272 = v25409.nodeType;
            var v25410 = TypeScript$$12.NodeType;
            var v24273 = v25410.Block;
            v21892 = v24272 == v24273;
          }
          var v17342 = v21892;
          if (v17342) {
            var v25411 = stmtList.members;
            var v24274 = v25411[1];
            var v21893 = v24274.nodeType;
            var v24275 = TypeScript$$12.NodeType;
            var v21894 = v24275.EndCode;
            v17342 = v21893 == v21894;
          }
          var v9900 = v17342;
          if (v9900) {
            var v17343 = stmtList.members;
            var v9897 = v17343[0];
            var v17344 = TypeScript$$12.TokenID;
            var v9898 = v17344.Semicolon;
            this.emitJavascript(v9897, v9898, true);
            this.writeLineToOutput("");
          } else {
            var v17345 = TypeScript$$12.TokenID;
            var v9899 = v17345.Semicolon;
            this.emitJavascriptList(stmts$$2, null, v9899, true, false, emitClassPropertiesAfterSuperCall);
          }
        } else {
          var v17346 = TypeScript$$12.TokenID;
          var v9901 = v17346.Semicolon;
          this.emitJavascript(stmts$$2, v9901, true);
        }
      } else {
        var v17347 = TypeScript$$12.TokenID;
        var v9903 = v17347.Semicolon;
        this.emitJavascript(stmts$$2, v9903, true);
      }
      return;
    }
    function v472(stmts$$1, emitEmptyBod) {
      if (stmts$$1) {
        var v17348 = stmts$$1.nodeType;
        var v21895 = TypeScript$$12.NodeType;
        var v17349 = v21895.Block;
        var v9914 = v17348 != v17349;
        if (v9914) {
          var v9905 = stmts$$1;
          if (v9905) {
            var v21896 = stmts$$1.nodeType;
            var v24276 = TypeScript$$12.NodeType;
            var v21897 = v24276.List;
            var v17350 = v21896 != v21897;
            var v21899 = !v17350;
            if (v21899) {
              var v24277 = stmts$$1.members;
              var v21898 = v24277.length;
              v17350 = v21898 > 0;
            }
            v9905 = v17350;
          }
          var hasContents = v9905;
          var v9912 = emitEmptyBod || hasContents;
          if (v9912) {
            var v17351 = stmts$$1.nodeType;
            var v21900 = TypeScript$$12.NodeType;
            var v17352 = v21900.Block;
            var v9906 = v17351 == v17352;
            var v17354 = !v9906;
            if (v17354) {
              var v24278 = stmts$$1.nodeType;
              var v25412 = TypeScript$$12.NodeType;
              var v24279 = v25412.List;
              var v21901 = v24278 == v24279;
              if (v21901) {
                var v25413 = stmts$$1.members;
                var v24280 = v25413.length;
                v21901 = v24280 == 1;
              }
              var v17353 = v21901;
              if (v17353) {
                var v25414 = stmts$$1.members;
                var v24281 = v25414[0];
                var v21902 = v24281.nodeType;
                var v24282 = TypeScript$$12.NodeType;
                var v21903 = v24282.Block;
                v17353 = v21902 == v21903;
              }
              v9906 = v17353;
            }
            var hasOnlyBlockStatement = v9906;
            this.recordSourceMappingStart(stmts$$1);
            var v9908 = !hasOnlyBlockStatement;
            if (v9908) {
              this.writeLineToOutput(" {");
              var v9907 = this.indenter;
              v9907.increaseIndent();
            }
            var v17355 = TypeScript$$12.TokenID;
            var v9909 = v17355.Semicolon;
            this.emitJavascriptList(stmts$$1, null, v9909, true, false, false);
            var v9911 = !hasOnlyBlockStatement;
            if (v9911) {
              this.writeLineToOutput("");
              var v9910 = this.indenter;
              v9910.decreaseIndent();
              this.emitIndent();
              this.writeToOutput("}");
            }
            this.recordSourceMappingEnd(stmts$$1);
          }
        } else {
          var v17356 = TypeScript$$12.TokenID;
          var v9913 = v17356.Semicolon;
          this.emitJavascript(stmts$$1, v9913, true);
        }
      } else {
        if (emitEmptyBod) {
          this.writeToOutput("{ }");
        }
      }
      return;
    }
    function v471(name$$39, addThis) {
      var sym$$4 = name$$39.sym;
      this.emitParensAndCommentsInPlace(name$$39, true);
      this.recordSourceMappingStart(name$$39);
      var v17357 = name$$39.isMissing();
      var v9940 = !v17357;
      if (v9940) {
        var v21904 = addThis;
        if (v21904) {
          var v25415 = this.emitState;
          var v24283 = v25415.container;
          var v24284 = EmitContainer.Args;
          v21904 = v24283 != v24284;
        }
        var v17358 = v21904;
        if (v17358) {
          v17358 = sym$$4;
        }
        var v9931 = v17358;
        if (v9931) {
          var v17359 = sym$$4.container;
          if (v17359) {
            var v24285 = sym$$4.container;
            var v21905 = v24285.name;
            var v21906 = TypeScript$$12.globalId;
            v17359 = v21905 != v21906;
          }
          var v9930 = v17359;
          if (v9930) {
            var v21907 = sym$$4.flags;
            var v24286 = TypeScript$$12.SymbolFlags;
            var v21908 = v24286.Static;
            var v17360 = TypeScript$$12.hasFlag(v21907, v21908);
            if (v17360) {
              var v21909 = sym$$4.flags;
              var v24287 = TypeScript$$12.SymbolFlags;
              var v21910 = v24287.Property;
              v17360 = TypeScript$$12.hasFlag(v21909, v21910);
            }
            var v9928 = v17360;
            if (v9928) {
              var v17361 = sym$$4.declModule;
              if (v17361) {
                var v24288 = sym$$4.declModule;
                var v21911 = v24288.modFlags;
                var v24289 = TypeScript$$12.ModuleFlags;
                var v21912 = v24289.IsDynamic;
                v17361 = TypeScript$$12.hasFlag(v21911, v21912);
              }
              var v9916 = v17361;
              if (v9916) {
                this.writeToOutput("exports.");
              } else {
                var v21913 = sym$$4.container;
                var v17362 = v21913.name;
                var v9915 = v17362 + ".";
                this.writeToOutput(v9915);
              }
            } else {
              var v17363 = sym$$4.kind();
              var v21914 = TypeScript$$12.SymbolKind;
              var v17364 = v21914.Field;
              var v9927 = v17363 == v17364;
              if (v9927) {
                var fieldSym = sym$$4;
                var v17365 = fieldSym.flags;
                var v21915 = TypeScript$$12.SymbolFlags;
                var v17366 = v21915.ModuleMember;
                var v9921 = TypeScript$$12.hasFlag(v17365, v17366);
                if (v9921) {
                  var v21916 = sym$$4.container;
                  var v24290 = this.checker;
                  var v21917 = v24290.gloMod;
                  var v17367 = v21916 != v21917;
                  if (v17367) {
                    var v24291 = sym$$4.flags;
                    var v25416 = TypeScript$$12.SymbolFlags;
                    var v24292 = v25416.Property;
                    var v21918 = TypeScript$$12.hasFlag(v24291, v24292);
                    var v24295 = !v21918;
                    if (v24295) {
                      var v24293 = sym$$4.flags;
                      var v25417 = TypeScript$$12.SymbolFlags;
                      var v24294 = v25417.Exported;
                      v21918 = TypeScript$$12.hasFlag(v24293, v24294);
                    }
                    v17367 = v21918;
                  }
                  var v9919 = v17367;
                  if (v9919) {
                    var v21919 = sym$$4.declModule;
                    var v17368 = v21919.modFlags;
                    var v21920 = TypeScript$$12.ModuleFlags;
                    var v17369 = v21920.IsDynamic;
                    var v9918 = TypeScript$$12.hasFlag(v17368, v17369);
                    if (v9918) {
                      this.writeToOutput("exports.");
                    } else {
                      var v21921 = sym$$4.container;
                      var v17370 = v21921.name;
                      var v9917 = v17370 + ".";
                      this.writeToOutput(v9917);
                    }
                  }
                } else {
                  var v9920 = sym$$4.isInstanceProperty();
                  if (v9920) {
                    this.emitThis();
                    this.writeToOutput(".");
                  }
                }
              } else {
                var v17371 = sym$$4.kind();
                var v21922 = TypeScript$$12.SymbolKind;
                var v17372 = v21922.Type;
                var v9926 = v17371 == v17372;
                if (v9926) {
                  var v9925 = sym$$4.isInstanceProperty();
                  if (v9925) {
                    var typeSym = sym$$4;
                    var type$$28 = typeSym.type;
                    var v17373 = type$$28.call;
                    if (v17373) {
                      var v24296 = sym$$4.flags;
                      var v25418 = TypeScript$$12.SymbolFlags;
                      var v24297 = v25418.ModuleMember;
                      var v21923 = TypeScript$$12.hasFlag(v24296, v24297);
                      v17373 = !v21923;
                    }
                    var v9922 = v17373;
                    if (v9922) {
                      this.emitThis();
                      this.writeToOutput(".");
                    }
                  } else {
                    var v21924 = sym$$4.unitIndex;
                    var v25419 = this.checker;
                    var v24298 = v25419.locationInfo;
                    var v21925 = v24298.unitIndex;
                    var v17374 = v21924 != v21925;
                    var v21927 = !v17374;
                    if (v21927) {
                      var v24299 = sym$$4.declModule;
                      var v21926 = this.declEnclosed(v24299);
                      v17374 = !v21926;
                    }
                    var v9924 = v17374;
                    if (v9924) {
                      var v21928 = sym$$4.container;
                      var v17375 = v21928.name;
                      var v9923 = v17375 + ".";
                      this.writeToOutput(v9923);
                    }
                  }
                }
              }
            }
          } else {
            var v26210 = sym$$4.container;
            var v26325 = this.checker;
            var v26211 = v26325.gloMod;
            var v25963 = v26210 == v26211;
            if (v25963) {
              var v26212 = sym$$4.flags;
              var v26326 = TypeScript$$12.SymbolFlags;
              var v26213 = v26326.Exported;
              v25963 = TypeScript$$12.hasFlag(v26212, v26213);
            }
            var v25420 = v25963;
            if (v25420) {
              var v26214 = sym$$4.flags;
              var v26327 = TypeScript$$12.SymbolFlags;
              var v26215 = v26327.Ambient;
              var v25964 = TypeScript$$12.hasFlag(v26214, v26215);
              v25420 = !v25964;
            }
            var v24300 = v25420;
            if (v24300) {
              var v26328 = sym$$4.isType();
              var v26385 = !v26328;
              if (v26385) {
                v26328 = sym$$4.isMember();
              }
              var v26216 = v26328;
              if (v26216) {
                v26216 = sym$$4.declModule;
              }
              var v25965 = v26216;
              if (v25965) {
                var v26329 = sym$$4.declModule;
                var v26217 = v26329.modFlags;
                var v26330 = TypeScript$$12.ModuleFlags;
                var v26218 = v26330.Ambient;
                v25965 = TypeScript$$12.hasFlag(v26217, v26218);
              }
              var v25421 = v25965;
              v24300 = !v25421;
            }
            var v21929 = v24300;
            if (v21929) {
              var v25422 = this.emitState;
              var v24301 = v25422.container;
              var v24302 = EmitContainer.Prog;
              v21929 = v24301 == v24302;
            }
            var v17376 = v21929;
            if (v17376) {
              var v24303 = sym$$4.declAST;
              var v21930 = v24303.nodeType;
              var v24304 = TypeScript$$12.NodeType;
              var v21931 = v24304.FuncDecl;
              v17376 = v21930 != v21931;
            }
            var v9929 = v17376;
            if (v9929) {
              this.writeToOutput("this.");
            }
          }
        }
        var v24305 = sym$$4;
        if (v24305) {
          v24305 = sym$$4.declAST;
        }
        var v21932 = v24305;
        if (v21932) {
          var v25423 = sym$$4.declAST;
          var v24306 = v25423.nodeType;
          var v25424 = TypeScript$$12.NodeType;
          var v24307 = v25424.ModuleDeclaration;
          v21932 = v24306 == v24307;
        }
        var v17377 = v21932;
        if (v17377) {
          var v24308 = sym$$4.declAST;
          var v21933 = v24308.modFlags;
          var v24309 = TypeScript$$12.ModuleFlags;
          var v21934 = v24309.IsDynamic;
          v17377 = TypeScript$$12.hasFlag(v21933, v21934);
        }
        var v9939 = v17377;
        if (v9939) {
          var moduleDecl$$2 = sym$$4.declAST;
          var v17378 = TypeScript$$12.moduleGenTarget;
          var v21935 = TypeScript$$12.ModuleGenTarget;
          var v17379 = v21935.Asynchronous;
          var v9937 = v17378 == v17379;
          if (v9937) {
            var v21936 = this.modAliasId;
            var v17380 = "__" + v21936;
            var v9932 = v17380 + "__;";
            this.writeLineToOutput(v9932);
          } else {
            var modPath$$1 = name$$39.actualText;
            var v21937 = moduleDecl$$2.mod;
            var v17381 = v21937.symbol;
            var v9933 = v17381.declAST;
            if (v9933) {
              var v25425 = moduleDecl$$2.mod;
              var v24310 = v25425.symbol;
              var v21938 = v24310.declAST;
              var v17382 = v21938.modFlags;
              var v21939 = TypeScript$$12.ModuleFlags;
              var v17383 = v21939.Ambient;
              v9933 = TypeScript$$12.hasFlag(v17382, v17383);
            }
            var isAmbient = v9933;
            var v9934;
            if (isAmbient) {
              v9934 = modPath$$1;
            } else {
              var v17384;
              var v21940 = this.firstModAlias;
              if (v21940) {
                v17384 = this.firstModAlias;
              } else {
                v17384 = TypeScript$$12.quoteBaseName(modPath$$1);
              }
              v9934 = v17384;
            }
            modPath$$1 = v9934;
            var v9935;
            if (isAmbient) {
              v9935 = modPath$$1;
            } else {
              var v17385;
              var v25426 = TypeScript$$12.stripQuotes(modPath$$1);
              var v24311 = TypeScript$$12.isRelative(v25426);
              var v21942 = !v24311;
              if (v21942) {
                var v24312 = TypeScript$$12.stripQuotes(modPath$$1);
                var v21941 = "./" + v24312;
                v17385 = TypeScript$$12.quoteStr(v21941);
              } else {
                v17385 = modPath$$1;
              }
              v9935 = v17385;
            }
            modPath$$1 = v9935;
            var v17386 = "require(" + modPath$$1;
            var v9936 = v17386 + ")";
            this.writeToOutput(v9936);
          }
        } else {
          var v9938 = name$$39.actualText;
          this.writeToOutput(v9938);
        }
      }
      this.recordSourceMappingEnd(name$$39);
      this.emitParensAndCommentsInPlace(name$$39, false);
      return;
    }
    function v470(moduleDecl$$1) {
      var v9941 = moduleDecl$$1 == null;
      if (v9941) {
        return true;
      }
      var i$$44 = 0;
      var v9942 = this.moduleDeclList;
      var len$$10 = v9942.length;
      var v9944 = i$$44 < len$$10;
      for (;v9944;) {
        var v21943 = this.moduleDeclList;
        var v17387 = v21943[i$$44];
        var v9943 = v17387 == moduleDecl$$1;
        if (v9943) {
          return true;
        }
        i$$44++;
        v9944 = i$$44 < len$$10;
      }
      return false;
    }
    function v469(varDecl$$2, tokenId$$39) {
      var v21944 = varDecl$$2.varFlags;
      var v24313 = TypeScript$$12.VarFlags;
      var v21945 = v24313.Ambient;
      var v17388 = v21944 & v21945;
      var v21946 = TypeScript$$12.VarFlags;
      var v17389 = v21946.Ambient;
      var v9970 = v17388 == v17389;
      if (v9970) {
        this.emitAmbientVarDecl(varDecl$$2);
        this.onEmitVar();
      } else {
        var sym$$3 = varDecl$$2.sym;
        var v9945 = varDecl$$2.init;
        var hasInitializer = v9945 != null;
        this.emitParensAndCommentsInPlace(varDecl$$2, true);
        this.recordSourceMappingStart(varDecl$$2);
        var v24314 = sym$$3;
        if (v24314) {
          v24314 = sym$$3.isMember();
        }
        var v21947 = v24314;
        if (v21947) {
          v21947 = sym$$3.container;
        }
        var v17390 = v21947;
        if (v17390) {
          var v24315 = sym$$3.container;
          var v21948 = v24315.kind();
          var v24316 = TypeScript$$12.SymbolKind;
          var v21949 = v24316.Type;
          v17390 = v21948 == v21949;
        }
        var v9959 = v17390;
        if (v9959) {
          var v9946 = sym$$3.container;
          var type$$27 = v9946.type;
          var v17391 = type$$27.isClass();
          if (v17391) {
            var v24317 = sym$$3.flags;
            var v25427 = TypeScript$$12.SymbolFlags;
            var v24318 = v25427.ModuleMember;
            var v21950 = TypeScript$$12.hasFlag(v24317, v24318);
            v17391 = !v21950;
          }
          var v9957 = v17391;
          if (v9957) {
            var v21951 = this.emitState;
            var v17392 = v21951.container;
            var v17393 = EmitContainer.Args;
            var v9949 = v17392 != v17393;
            if (v9949) {
              var v17394 = sym$$3.flags;
              var v21952 = TypeScript$$12.SymbolFlags;
              var v17395 = v21952.Static;
              var v9948 = TypeScript$$12.hasFlag(v17394, v17395);
              if (v9948) {
                var v21953 = sym$$3.container;
                var v17396 = v21953.name;
                var v9947 = v17396 + ".";
                this.writeToOutput(v9947);
              } else {
                this.writeToOutput("this.");
              }
            }
          } else {
            var v9956 = type$$27.hasImplementation();
            if (v9956) {
              var v24319 = sym$$3.flags;
              var v25428 = TypeScript$$12.SymbolFlags;
              var v24320 = v25428.Exported;
              var v21954 = TypeScript$$12.hasFlag(v24319, v24320);
              var v17397 = !v21954;
              if (v17397) {
                var v24321 = sym$$3.container;
                var v25429 = this.checker;
                var v24322 = v25429.gloMod;
                var v21955 = v24321 == v24322;
                var v24324 = !v21955;
                if (v24324) {
                  var v25430 = sym$$3.flags;
                  var v25966 = TypeScript$$12.SymbolFlags;
                  var v25431 = v25966.Property;
                  var v24323 = TypeScript$$12.hasFlag(v25430, v25431);
                  v21955 = !v24323;
                }
                v17397 = v21955;
              }
              var v9953 = v17397;
              if (v9953) {
                this.emitVarDeclVar();
              } else {
                var v17398 = varDecl$$2.varFlags;
                var v21956 = TypeScript$$12.VarFlags;
                var v17399 = v21956.LocalStatic;
                var v9952 = TypeScript$$12.hasFlag(v17398, v17399);
                if (v9952) {
                  this.writeToOutput(".");
                } else {
                  var v21957 = this.emitState;
                  var v17400 = v21957.container;
                  var v17401 = EmitContainer.DynamicModule;
                  var v9951 = v17400 == v17401;
                  if (v9951) {
                    this.writeToOutput("exports.");
                  } else {
                    var v17402 = this.moduleName;
                    var v9950 = v17402 + ".";
                    this.writeToOutput(v9950);
                  }
                }
              }
            } else {
              var v21958 = TypeScript$$12.TokenID;
              var v17403 = v21958.OpenParen;
              var v9955 = tokenId$$39 != v17403;
              if (v9955) {
                var v21959 = sym$$3.flags;
                var v24325 = TypeScript$$12.SymbolFlags;
                var v21960 = v24325.Exported;
                var v17404 = TypeScript$$12.hasFlag(v21959, v21960);
                if (v17404) {
                  var v21961 = sym$$3.container;
                  var v24326 = this.checker;
                  var v21962 = v24326.gloMod;
                  v17404 = v21961 == v21962;
                }
                var v9954 = v17404;
                if (v9954) {
                  this.writeToOutput("this.");
                } else {
                  this.emitVarDeclVar();
                }
              }
            }
          }
        } else {
          var v21963 = TypeScript$$12.TokenID;
          var v17405 = v21963.OpenParen;
          var v9958 = tokenId$$39 != v17405;
          if (v9958) {
            this.emitVarDeclVar();
          }
        }
        var v9960 = varDecl$$2.id;
        this.recordSourceMappingStart(v9960);
        var v17406 = varDecl$$2.id;
        var v9961 = v17406.actualText;
        this.writeToOutput(v9961);
        var v9962 = varDecl$$2.id;
        this.recordSourceMappingEnd(v9962);
        if (hasInitializer) {
          this.writeToOutputTrimmable(" = ");
          var v9963 = this.varListCountStack;
          v9963.push(0);
          var v9964 = varDecl$$2.init;
          var v17407 = TypeScript$$12.TokenID;
          var v9965 = v17407.Comma;
          this.emitJavascript(v9964, v9965, false);
          var v9966 = this.varListCountStack;
          v9966.pop();
        }
        this.onEmitVar();
        var v21964 = TypeScript$$12.TokenID;
        var v17408 = v21964.OpenParen;
        var v9969 = tokenId$$39 != v17408;
        if (v9969) {
          var v17409 = this.varListCount();
          var v9968 = v17409 < 0;
          if (v9968) {
            this.writeToOutput(", ");
          } else {
            var v21965 = TypeScript$$12.TokenID;
            var v17410 = v21965.For;
            var v9967 = tokenId$$39 != v17410;
            if (v9967) {
              this.writeToOutputTrimmable(";");
            }
          }
        }
        this.recordSourceMappingEnd(varDecl$$2);
        this.emitParensAndCommentsInPlace(varDecl$$2, false);
      }
      return;
    }
    function v468() {
      var v17411 = this.varListCount();
      var v9974 = v17411 > 0;
      if (v9974) {
        var v17412 = this.varListCount();
        var v9971 = v17412 - 1;
        this.setInVarBlock(v9971);
      } else {
        var v17413 = this.varListCount();
        var v9973 = v17413 < 0;
        if (v9973) {
          var v17414 = this.varListCount();
          var v9972 = v17414 + 1;
          this.setInVarBlock(v9972);
        }
      }
      return;
    }
    function v467() {
      var v17415 = this.varListCount();
      var v9976 = v17415 >= 0;
      if (v9976) {
        this.writeToOutput("var ");
        var v17416 = this.varListCount();
        var v9975 = -v17416;
        this.setInVarBlock(v9975);
      }
      return true;
    }
    function v466() {
      var v9977 = this.varListCountStack;
      var v21966 = this.varListCountStack;
      var v17417 = v21966.length;
      var v9978 = v17417 - 1;
      return v9977[v9978];
    }
    function v465(varDecl$$1) {
      var v9984 = varDecl$$1.init;
      if (v9984) {
        this.emitParensAndCommentsInPlace(varDecl$$1, true);
        this.recordSourceMappingStart(varDecl$$1);
        var v9979 = varDecl$$1.id;
        this.recordSourceMappingStart(v9979);
        var v17418 = varDecl$$1.id;
        var v9980 = v17418.actualText;
        this.writeToOutput(v9980);
        var v9981 = varDecl$$1.id;
        this.recordSourceMappingEnd(v9981);
        this.writeToOutput(" = ");
        var v9982 = varDecl$$1.init;
        var v17419 = TypeScript$$12.TokenID;
        var v9983 = v17419.Comma;
        this.emitJavascript(v9982, v9983, false);
        this.recordSourceMappingEnd(varDecl$$1);
        this.writeToOutput(";");
        this.emitParensAndCommentsInPlace(varDecl$$1, false);
      }
      return;
    }
    function v464(funcDecl$$2) {
      var v21967 = funcDecl$$2.fncFlags;
      var v24327 = TypeScript$$12.FncFlags;
      var v21968 = v24327.Signature;
      var v17420 = TypeScript$$12.hasFlag(v21967, v21968);
      var v21969 = !v17420;
      if (v21969) {
        v17420 = funcDecl$$2.isOverload;
      }
      var v9985 = v17420;
      if (v9985) {
        return;
      }
      var temp$$12;
      var tempFnc = this.thisFnc;
      this.thisFnc = funcDecl$$2;
      var v9988 = funcDecl$$2.isConstructor;
      if (v9988) {
        var v9986 = EmitContainer.Constructor;
        temp$$12 = this.setContainer(v9986);
      } else {
        var v9987 = EmitContainer.Function;
        temp$$12 = this.setContainer(v9987);
      }
      var bases$$2 = null;
      var hasSelfRef$$1 = false;
      var funcName = funcDecl$$2.getNameText();
      var v24328 = this.emitState;
      var v21970 = v24328.inObjectLiteral;
      var v24330 = !v21970;
      if (v24330) {
        var v24329 = funcDecl$$2.isAccessor();
        v21970 = !v24329;
      }
      var v17421 = v21970;
      if (v17421) {
        var v24331 = EmitContainer.Constructor;
        var v21971 = temp$$12 != v24331;
        var v24334 = !v21971;
        if (v24334) {
          var v25432 = funcDecl$$2.fncFlags;
          var v25967 = TypeScript$$12.FncFlags;
          var v25433 = v25967.Method;
          var v24332 = v25432 & v25433;
          var v25434 = TypeScript$$12.FncFlags;
          var v24333 = v25434.None;
          v21971 = v24332 == v24333;
        }
        v17421 = v21971;
      }
      var v9996 = v17421;
      if (v9996) {
        var tempLit = this.setInObjectLiteral(false);
        var v9990 = this.thisClassNode;
        if (v9990) {
          var v9989 = this.thisClassNode;
          bases$$2 = v9989.extendsList;
        }
        hasSelfRef$$1 = Emitter$$1.shouldCaptureThis(funcDecl$$2);
        this.recordSourceMappingStart(funcDecl$$2);
        var v24335 = funcDecl$$2.fncFlags;
        var v25968 = TypeScript$$12.FncFlags;
        var v25435 = v25968.Exported;
        var v25969 = TypeScript$$12.FncFlags;
        var v25436 = v25969.ClassPropertyMethodExported;
        var v24336 = v25435 | v25436;
        var v21972 = TypeScript$$12.hasFlag(v24335, v24336);
        if (v21972) {
          var v25970 = funcDecl$$2.type;
          var v25437 = v25970.symbol;
          var v24337 = v25437.container;
          var v25438 = this.checker;
          var v24338 = v25438.gloMod;
          v21972 = v24337 == v24338;
        }
        var v17422 = v21972;
        if (v17422) {
          var v21973 = funcDecl$$2.isConstructor;
          v17422 = !v21973;
        }
        var v9995 = v17422;
        if (v9995) {
          var v17423 = "this." + funcName;
          var v9991 = v17423 + " = ";
          this.writeToOutput(v9991);
          var v9992 = this.thisClassNode;
          this.emitInnerFunction(funcDecl$$2, false, false, bases$$2, hasSelfRef$$1, v9992);
        } else {
          var v17424 = funcDecl$$2.name;
          if (v17424) {
            var v24339 = funcDecl$$2.name;
            var v21974 = v24339.isMissing();
            v17424 = !v21974;
          }
          var v9993 = v17424;
          var v9994 = this.thisClassNode;
          this.emitInnerFunction(funcDecl$$2, v9993, false, bases$$2, hasSelfRef$$1, v9994);
        }
        this.setInObjectLiteral(tempLit);
      }
      this.setContainer(temp$$12);
      this.thisFnc = tempFnc;
      var v17425 = funcDecl$$2.fncFlags;
      var v21975 = TypeScript$$12.FncFlags;
      var v17426 = v21975.Definition;
      var v10005 = TypeScript$$12.hasFlag(v17425, v17426);
      if (v10005) {
        var v17427 = funcDecl$$2.fncFlags;
        var v21976 = TypeScript$$12.FncFlags;
        var v17428 = v21976.Static;
        var v10004 = TypeScript$$12.hasFlag(v17427, v17428);
        if (v10004) {
          var v10000 = this.thisClassNode;
          if (v10000) {
            var v9999 = funcDecl$$2.isAccessor();
            if (v9999) {
              var v21977 = this.thisClassNode;
              var v17429 = v21977.name;
              var v9997 = v17429.actualText;
              this.emitPropertyAccessor(funcDecl$$2, v9997, false);
            } else {
              this.emitIndent();
              this.recordSourceMappingStart(funcDecl$$2);
              var v26331 = this.thisClassNode;
              var v26219 = v26331.name;
              var v25971 = v26219.actualText;
              var v25439 = v25971 + ".";
              var v24340 = v25439 + funcName;
              var v21978 = v24340 + " = ";
              var v17430 = v21978 + funcName;
              var v9998 = v17430 + ";";
              this.writeLineToOutput(v9998);
              this.recordSourceMappingEnd(funcDecl$$2);
            }
          }
        } else {
          var v25440 = this.emitState;
          var v24341 = v25440.container;
          var v24342 = EmitContainer.Module;
          var v21979 = v24341 == v24342;
          var v24345 = !v21979;
          if (v24345) {
            var v25441 = this.emitState;
            var v24343 = v25441.container;
            var v24344 = EmitContainer.DynamicModule;
            v21979 = v24343 == v24344;
          }
          var v17431 = v21979;
          if (v17431) {
            var v21980 = funcDecl$$2.fncFlags;
            var v25442 = TypeScript$$12.FncFlags;
            var v24346 = v25442.Exported;
            var v25443 = TypeScript$$12.FncFlags;
            var v24347 = v25443.ClassPropertyMethodExported;
            var v21981 = v24346 | v24347;
            v17431 = TypeScript$$12.hasFlag(v21980, v21981);
          }
          var v10003 = v17431;
          if (v10003) {
            this.emitIndent();
            var v10001;
            var v24348 = this.emitState;
            var v21982 = v24348.container;
            var v21983 = EmitContainer.Module;
            var v17432 = v21982 == v21983;
            if (v17432) {
              v10001 = this.moduleName;
            } else {
              v10001 = "exports";
            }
            var modName$$1 = v10001;
            this.recordSourceMappingStart(funcDecl$$2);
            var v25444 = modName$$1 + ".";
            var v24349 = v25444 + funcName;
            var v21984 = v24349 + " = ";
            var v17433 = v21984 + funcName;
            var v10002 = v17433 + ";";
            this.writeLineToOutput(v10002);
            this.recordSourceMappingEnd(funcDecl$$2);
          }
        }
      }
      return;
    }
    function v463(text$$11) {
      this.writeToOutput(text$$11);
      return;
    }
    function v462(operand1$$2, operand2$$2) {
      var temp$$11 = this.setInObjectLiteral(false);
      var v17434 = TypeScript$$12.TokenID;
      var v10006 = v17434.Tilde;
      this.emitJavascript(operand1$$2, v10006, false);
      this.writeToOutput("[");
      var v17435 = TypeScript$$12.TokenID;
      var v10007 = v17435.Comma;
      this.emitJavascriptList(operand2$$2, ", ", v10007, false, false, false);
      this.writeToOutput("]");
      this.setInObjectLiteral(temp$$11);
      return;
    }
    function v461(moduleDecl) {
      var v10008 = moduleDecl.name;
      var modName = v10008.actualText;
      var v10014 = TypeScript$$12.isTSFile(modName);
      if (v10014) {
        var v10009 = moduleDecl.name;
        var v21985 = modName.length;
        var v17436 = v21985 - 3;
        var v10010 = modName.substring(0, v17436);
        v10009.setText(v10010);
      } else {
        var v10013 = TypeScript$$12.isSTRFile(modName);
        if (v10013) {
          var v10011 = moduleDecl.name;
          var v21986 = modName.length;
          var v17437 = v21986 - 4;
          var v10012 = modName.substring(0, v17437);
          v10011.setText(v10012);
        }
      }
      var v21987 = moduleDecl.modFlags;
      var v24350 = TypeScript$$12.ModuleFlags;
      var v21988 = v24350.Ambient;
      var v17438 = TypeScript$$12.hasFlag(v21987, v21988);
      var v10094 = !v17438;
      if (v10094) {
        var v10015 = moduleDecl.modFlags;
        var v17439 = TypeScript$$12.ModuleFlags;
        var v10016 = v17439.IsDynamic;
        var isDynamicMod = TypeScript$$12.hasFlag(v10015, v10016);
        var prevOutFile = this.outfile;
        var prevOutFileName = this.emittingFileName;
        var prevAllSourceMappers = this.allSourceMappers;
        var prevSourceMapper = this.sourceMapper;
        var v10017 = this.emitState;
        var prevColumn = v10017.column;
        var v10018 = this.emitState;
        var prevLine = v10018.line;
        var v10019 = EmitContainer.Module;
        var temp$$10 = this.setContainer(v10019);
        var svModuleName = this.moduleName;
        var v10020 = moduleDecl.modFlags;
        var v17440 = TypeScript$$12.ModuleFlags;
        var v10021 = v17440.Exported;
        var isExported = TypeScript$$12.hasFlag(v10020, v10021);
        var v10022 = this.moduleDeclList;
        var v17441 = this.moduleDeclList;
        var v10023 = v17441.length;
        v10022[v10023] = moduleDecl;
        var v10024 = moduleDecl.modFlags;
        var v17442 = TypeScript$$12.ModuleFlags;
        var v10025 = v17442.IsWholeFile;
        var isWholeFile = TypeScript$$12.hasFlag(v10024, v10025);
        var v10026 = moduleDecl.name;
        this.moduleName = v10026.actualText;
        if (isDynamicMod) {
          var v17443 = moduleDecl.name;
          var v10027 = v17443.actualText;
          var tsModFileName = TypeScript$$12.stripQuotes(v10027);
          var v10028 = TypeScript$$12.trimModName(tsModFileName);
          var modFilePath = v10028 + ".js";
          var v10029 = this.emitOptions;
          var v17444 = TypeScript$$12.TypeScriptCompiler;
          var v10030 = v17444.mapToJSFileName;
          modFilePath = v10029.mapOutputFileName(modFilePath, v10030);
          var v17445 = this.emitOptions;
          var v10041 = v17445.ioHost;
          if (v10041) {
            var v17446 = TypeScript$$12.switchToForwardSlashes(modFilePath);
            var v21989 = this.emittingFileName;
            var v17447 = TypeScript$$12.switchToForwardSlashes(v21989);
            var v10040 = v17446 != v17447;
            if (v10040) {
              this.emittingFileName = modFilePath;
              var v10031 = moduleDecl.containsUnicodeChar;
              var v17449 = !v10031;
              if (v17449) {
                var v21990 = this.emitOptions;
                var v17448 = v21990.emitComments;
                if (v17448) {
                  v17448 = moduleDecl.containsUnicodeCharInComment;
                }
                v10031 = v17448;
              }
              var useUTF8InOutputfile = v10031;
              var v10032 = this.emittingFileName;
              var v26989 = this.createFile(v10032, useUTF8InOutputfile);
              this.outfile = v26989;
              var v10037 = prevSourceMapper != null;
              if (v10037) {
                this.allSourceMappers = [];
                var v17450 = this.emittingFileName;
                var v21991 = TypeScript$$12.SourceMapper;
                var v17451 = v21991.MapFileExtension;
                var v10033 = v17450 + v17451;
                var sourceMappingFile = this.createFile(v10033, false);
                var v17452 = TypeScript$$12.SourceMapper;
                var v17453 = this.emittingFileName;
                var v17454 = this.outfile;
                var v17455 = this.errorReporter;
                var v10034 = new v17452(tsModFileName, v17453, v17454, sourceMappingFile, v17455);
                this.setSourceMappings(v10034);
                var v10035 = this.emitState;
                v10035.column = 0;
                var v10036 = this.emitState;
                v10036.line = 0;
              }
            } else {
              var v10038 = TypeScript$$12.CompilerDiagnostics;
              var v17456 = this.emitOptions;
              var v10039 = v17456.outputMany;
              v10038.assert(v10039, "Cannot have dynamic modules compiling into single file");
            }
          }
          var v10042 = EmitContainer.DynamicModule;
          this.setContainer(v10042);
          this.recordSourceMappingStart(moduleDecl);
          var v17457 = TypeScript$$12.moduleGenTarget;
          var v21992 = TypeScript$$12.ModuleGenTarget;
          var v17458 = v21992.Asynchronous;
          var v10049 = v17457 == v17458;
          if (v10049) {
            var dependencyList = '["require", "exports"';
            var importList = "require, exports";
            var importStatement = null;
            var i$$43 = 0;
            var v24351 = moduleDecl.mod;
            var v21993 = v24351.importedModules;
            var v17459 = v21993.length;
            var v10046 = i$$43 < v17459;
            for (;v10046;) {
              var v17460 = moduleDecl.mod;
              var v10043 = v17460.importedModules;
              importStatement = v10043[i$$43];
              var v21994 = importStatement.id;
              var v17461 = v21994.sym;
              if (v17461) {
                var v25445 = importStatement.id;
                var v24352 = v25445.sym;
                var v21995 = v24352.onlyReferencedAsTypeRef;
                v17461 = !v21995;
              }
              var v10045 = v17461;
              if (v10045) {
                var v25446 = moduleDecl.mod;
                var v24353 = v25446.importedModules;
                var v21996 = v24353.length;
                var v17462 = v21996 - 1;
                var v10044 = i$$43 <= v17462;
                if (v10044) {
                  dependencyList = dependencyList + ", ";
                  importList = importList + ", ";
                }
                var v25447 = importStatement.id;
                var v24354 = v25447.actualText;
                var v21997 = "__" + v24354;
                var v17463 = v21997 + "__";
                importList = importList + v17463;
                var v17464 = importStatement.firstAliasedModToString();
                dependencyList = dependencyList + v17464;
              }
              i$$43++;
              var v24355 = moduleDecl.mod;
              var v21998 = v24355.importedModules;
              var v17465 = v21998.length;
              v10046 = i$$43 < v17465;
            }
            i$$43 = 0;
            var v21999 = moduleDecl.amdDependencies;
            var v17466 = v21999.length;
            var v10047 = i$$43 < v17466;
            for (;v10047;) {
              var v25448 = moduleDecl.amdDependencies;
              var v24356 = v25448[i$$43];
              var v22000 = ', "' + v24356;
              var v17467 = v22000 + '"';
              dependencyList = dependencyList + v17467;
              i$$43++;
              var v22001 = moduleDecl.amdDependencies;
              var v17468 = v22001.length;
              v10047 = i$$43 < v17468;
            }
            dependencyList = dependencyList + "]";
            var v25449 = "define(" + dependencyList;
            var v24357 = v25449 + ",";
            var v22002 = v24357 + " function(";
            var v17469 = v22002 + importList;
            var v10048 = v17469 + ") {";
            this.writeLineToOutput(v10048);
          } else {
          }
        } else {
          var v10053 = !isExported;
          if (v10053) {
            this.recordSourceMappingStart(moduleDecl);
            this.writeToOutput("var ");
            var v10050 = moduleDecl.name;
            this.recordSourceMappingStart(v10050);
            var v10051 = this.moduleName;
            this.writeToOutput(v10051);
            var v10052 = moduleDecl.name;
            this.recordSourceMappingEnd(v10052);
            this.writeLineToOutput(";");
            this.recordSourceMappingEnd(moduleDecl);
            this.emitIndent();
          }
          this.writeToOutput("(");
          this.recordSourceMappingStart(moduleDecl);
          this.writeToOutput("function (");
          var v10054 = moduleDecl.name;
          this.recordSourceMappingStart(v10054);
          var v10055 = this.moduleName;
          this.writeToOutput(v10055);
          var v10056 = moduleDecl.name;
          this.recordSourceMappingEnd(v10056);
          this.writeLineToOutput(") {");
        }
        var v10058 = !isWholeFile;
        if (v10058) {
          var v10057 = this.moduleName;
          this.recordSourceMappingNameStart(v10057);
        }
        var v17470 = !isDynamicMod;
        var v22005 = !v17470;
        if (v22005) {
          var v22003 = TypeScript$$12.moduleGenTarget;
          var v24358 = TypeScript$$12.ModuleGenTarget;
          var v22004 = v24358.Asynchronous;
          v17470 = v22003 == v22004;
        }
        var v10060 = v17470;
        if (v10060) {
          var v10059 = this.indenter;
          v10059.increaseIndent();
        }
        var v17471 = moduleDecl.modFlags;
        var v22006 = TypeScript$$12.ModuleFlags;
        var v17472 = v22006.MustCaptureThis;
        var v10061 = v17471 & v17472;
        if (v10061) {
          this.writeCaptureThisStatement(moduleDecl);
        }
        var v10062 = moduleDecl.members;
        var v17473 = TypeScript$$12.TokenID;
        var v10063 = v17473.Semicolon;
        this.emitJavascriptList(v10062, null, v10063, true, false, false);
        var v17474 = !isDynamicMod;
        var v22009 = !v17474;
        if (v22009) {
          var v22007 = TypeScript$$12.moduleGenTarget;
          var v24359 = TypeScript$$12.ModuleGenTarget;
          var v22008 = v24359.Asynchronous;
          v17474 = v22007 == v22008;
        }
        var v10065 = v17474;
        if (v10065) {
          var v10064 = this.indenter;
          v10064.decreaseIndent();
        }
        this.emitIndent();
        if (isDynamicMod) {
          var v17475 = TypeScript$$12.moduleGenTarget;
          var v22010 = TypeScript$$12.ModuleGenTarget;
          var v17476 = v22010.Asynchronous;
          var v10066 = v17475 == v17476;
          if (v10066) {
            this.writeLineToOutput("})");
          } else {
          }
          var v10067 = !isWholeFile;
          if (v10067) {
            this.recordSourceMappingNameEnd();
          }
          this.recordSourceMappingEnd(moduleDecl);
          var v17477 = this.outfile;
          var v10071 = v17477 != prevOutFile;
          if (v10071) {
            this.Close();
            var v10070 = prevSourceMapper != null;
            if (v10070) {
              this.allSourceMappers = prevAllSourceMappers;
              this.sourceMapper = prevSourceMapper;
              var v10068 = this.emitState;
              v10068.column = prevColumn;
              var v10069 = this.emitState;
              v10069.line = prevLine;
            }
            this.outfile = prevOutFile;
            this.emittingFileName = prevOutFileName;
          }
        } else {
          var containingMod = null;
          var v22011 = moduleDecl.type;
          if (v22011) {
            var v25450 = moduleDecl.type;
            var v24360 = v25450.symbol;
            v22011 = v24360.container;
          }
          var v17478 = v22011;
          if (v17478) {
            var v25451 = moduleDecl.type;
            var v24361 = v25451.symbol;
            var v22012 = v24361.container;
            v17478 = v22012.declAST;
          }
          var v10073 = v17478;
          if (v10073) {
            var v22013 = moduleDecl.type;
            var v17479 = v22013.symbol;
            var v10072 = v17479.container;
            containingMod = v10072.declAST;
          }
          var v10074 = containingMod;
          if (v10074) {
            var v17480 = containingMod.modFlags;
            var v22014 = TypeScript$$12.ModuleFlags;
            var v17481 = v22014.IsDynamic;
            v10074 = TypeScript$$12.hasFlag(v17480, v17481);
          }
          var parentIsDynamic = v10074;
          var v10075 = moduleDecl.endingToken;
          this.recordSourceMappingStart(v10075);
          var v22015 = EmitContainer.Prog;
          var v17482 = temp$$10 == v22015;
          if (v17482) {
            v17482 = isExported;
          }
          var v10090 = v17482;
          if (v10090) {
            this.writeToOutput("}");
            var v10076 = !isWholeFile;
            if (v10076) {
              this.recordSourceMappingNameEnd();
            }
            var v10077 = moduleDecl.endingToken;
            this.recordSourceMappingEnd(v10077);
            var v25452 = this.moduleName;
            var v24362 = ")(this." + v25452;
            var v22016 = v24362 + " || (this.";
            var v22017 = this.moduleName;
            var v17483 = v22016 + v22017;
            var v10078 = v17483 + " = {}));";
            this.writeLineToOutput(v10078);
          } else {
            var v17484 = isExported;
            var v22019 = !v17484;
            if (v22019) {
              var v22018 = EmitContainer.Prog;
              v17484 = temp$$10 == v22018;
            }
            var v10089 = v17484;
            if (v10089) {
              var v10079;
              var v17486 = svModuleName != "";
              if (v17486) {
                var v22020;
                if (parentIsDynamic) {
                  v22020 = "exports";
                } else {
                  v22020 = svModuleName;
                }
                var v17485 = v22020;
                v10079 = v17485 + ".";
              } else {
                v10079 = svModuleName;
              }
              var dotMod = v10079;
              this.writeToOutput("}");
              var v10080 = !isWholeFile;
              if (v10080) {
                this.recordSourceMappingNameEnd();
              }
              var v10081 = moduleDecl.endingToken;
              this.recordSourceMappingEnd(v10081);
              var v25972 = ")(" + dotMod;
              var v25973 = this.moduleName;
              var v25453 = v25972 + v25973;
              var v24363 = v25453 + " || (";
              var v22021 = v24363 + dotMod;
              var v22022 = this.moduleName;
              var v17487 = v22021 + v22022;
              var v10082 = v17487 + " = {}));";
              this.writeLineToOutput(v10082);
            } else {
              var v17488 = !isExported;
              if (v17488) {
                var v22023 = EmitContainer.Prog;
                v17488 = temp$$10 != v22023;
              }
              var v10088 = v17488;
              if (v10088) {
                this.writeToOutput("}");
                var v10083 = !isWholeFile;
                if (v10083) {
                  this.recordSourceMappingNameEnd();
                }
                var v10084 = moduleDecl.endingToken;
                this.recordSourceMappingEnd(v10084);
                var v25454 = this.moduleName;
                var v24364 = ")(" + v25454;
                var v22024 = v24364 + " || (";
                var v22025 = this.moduleName;
                var v17489 = v22024 + v22025;
                var v10085 = v17489 + " = {}));";
                this.writeLineToOutput(v10085);
              } else {
                this.writeToOutput("}");
                var v10086 = !isWholeFile;
                if (v10086) {
                  this.recordSourceMappingNameEnd();
                }
                var v10087 = moduleDecl.endingToken;
                this.recordSourceMappingEnd(v10087);
                this.writeLineToOutput(")();");
              }
            }
          }
          this.recordSourceMappingEnd(moduleDecl);
          var v22026 = EmitContainer.Prog;
          var v17490 = temp$$10 != v22026;
          if (v17490) {
            v17490 = isExported;
          }
          var v10093 = v17490;
          if (v10093) {
            this.emitIndent();
            this.recordSourceMappingStart(moduleDecl);
            if (parentIsDynamic) {
              var v25455 = this.moduleName;
              var v24365 = "var " + v25455;
              var v22027 = v24365 + " = exports.";
              var v22028 = this.moduleName;
              var v17491 = v22027 + v22028;
              var v10091 = v17491 + ";";
              this.writeLineToOutput(v10091);
            } else {
              var v26220 = this.moduleName;
              var v25974 = "var " + v26220;
              var v25456 = v25974 + " = ";
              var v24366 = v25456 + svModuleName;
              var v22029 = v24366 + ".";
              var v22030 = this.moduleName;
              var v17492 = v22029 + v22030;
              var v10092 = v17492 + ";";
              this.writeLineToOutput(v10092);
            }
            this.recordSourceMappingEnd(moduleDecl);
          }
        }
        this.setContainer(temp$$10);
        this.moduleName = svModuleName;
        this.moduleDeclList.length--;
      }
      return;
    }
    function v460(funcDecl$$1, printName, isMember, bases$$1, hasSelfRef, classDecl$$1) {
      var v10095 = funcDecl$$1.isConstructor;
      if (v10095) {
        var v17493 = funcDecl$$1.fncFlags;
        var v22031 = TypeScript$$12.FncFlags;
        var v17494 = v22031.ClassMethod;
        v10095 = TypeScript$$12.hasFlag(v17493, v17494);
      }
      var isClassConstructor = v10095;
      var v17495 = isClassConstructor;
      if (v17495) {
        var v25975 = this.thisClassNode;
        var v25457 = v25975.type;
        var v24367 = v25457.instanceType;
        var v22032 = v24367.typeFlags;
        var v24368 = TypeScript$$12.TypeFlags;
        var v22033 = v24368.HasBaseType;
        v17495 = TypeScript$$12.hasFlag(v22032, v22033);
      }
      var v10096 = v17495;
      if (v10096) {
        var v25976 = this.thisClassNode;
        var v25458 = v25976.type;
        var v24369 = v25458.instanceType;
        var v22034 = v24369.typeFlags;
        var v24370 = TypeScript$$12.TypeFlags;
        var v22035 = v24370.HasBaseTypeOfObject;
        var v17496 = TypeScript$$12.hasFlag(v22034, v22035);
        v10096 = !v17496;
      }
      var hasNonObjectBaseType = v10096;
      var v10097 = hasNonObjectBaseType;
      if (v10097) {
        var v22036 = this.thisClassNode;
        var v17497 = v22036.varFlags;
        var v22037 = TypeScript$$12.VarFlags;
        var v17498 = v22037.ClassSuperMustBeFirstCallInConstructor;
        v10097 = TypeScript$$12.hasFlag(v17497, v17498);
      }
      var classPropertiesMustComeAfterSuperCall = v10097;
      var v24371 = funcDecl$$1.fncFlags;
      var v25459 = TypeScript$$12.FncFlags;
      var v24372 = v25459.IsFunctionExpression;
      var v22038 = TypeScript$$12.hasFlag(v24371, v24372);
      if (v22038) {
        var v24373 = funcDecl$$1.isParenthesized;
        v22038 = !v24373;
      }
      var v17499 = v22038;
      if (v17499) {
        var v22039 = funcDecl$$1.isAccessor();
        v17499 = !v22039;
      }
      var v10098 = v17499;
      if (v10098) {
        var v22040 = funcDecl$$1.flags;
        var v24374 = TypeScript$$12.ASTFlags;
        var v22041 = v24374.ExplicitSemicolon;
        var v17500 = TypeScript$$12.hasFlag(v22040, v22041);
        var v22044 = !v17500;
        if (v22044) {
          var v22042 = funcDecl$$1.flags;
          var v24375 = TypeScript$$12.ASTFlags;
          var v22043 = v24375.AutomaticSemicolon;
          v17500 = TypeScript$$12.hasFlag(v22042, v22043);
        }
        v10098 = v17500;
      }
      var shouldParenthesize = v10098;
      this.emitParensAndCommentsInPlace(funcDecl$$1, true);
      if (shouldParenthesize) {
        this.writeToOutput("(");
      }
      this.recordSourceMappingStart(funcDecl$$1);
      var v22045 = funcDecl$$1.isAccessor();
      if (v22045) {
        var v24376 = funcDecl$$1.accessorSymbol;
        v22045 = v24376.isObjectLitField;
      }
      var v17501 = v22045;
      var v10099 = !v17501;
      if (v10099) {
        this.writeToOutput("function ");
      }
      if (printName) {
        var id$$8 = funcDecl$$1.getNameText();
        var v17502 = id$$8;
        if (v17502) {
          var v22046 = funcDecl$$1.isAccessor();
          v17502 = !v22046;
        }
        var v10104 = v17502;
        if (v10104) {
          var v10101 = funcDecl$$1.name;
          if (v10101) {
            var v10100 = funcDecl$$1.name;
            this.recordSourceMappingStart(v10100);
          }
          this.writeToOutput(id$$8);
          var v10103 = funcDecl$$1.name;
          if (v10103) {
            var v10102 = funcDecl$$1.name;
            this.recordSourceMappingEnd(v10102);
          }
        }
      }
      this.writeToOutput("(");
      var argsLen = 0;
      var i$$42 = 0;
      var arg$$3;
      var defaultArgs = [];
      var v10113 = funcDecl$$1.arguments;
      if (v10113) {
        var v10105 = EmitContainer.Args;
        var tempContainer = this.setContainer(v10105);
        var v17503 = funcDecl$$1.arguments;
        var v10106 = v17503.members;
        argsLen = v10106.length;
        var printLen = argsLen;
        var v10107 = funcDecl$$1.variableArgList;
        if (v10107) {
          printLen--;
        }
        i$$42 = 0;
        var v10112 = i$$42 < printLen;
        for (;v10112;) {
          var v17504 = funcDecl$$1.arguments;
          var v10108 = v17504.members;
          arg$$3 = v10108[i$$42];
          var v10109 = arg$$3.init;
          if (v10109) {
            defaultArgs.push(arg$$3);
          }
          var v17505 = TypeScript$$12.TokenID;
          var v10110 = v17505.OpenParen;
          this.emitJavascript(arg$$3, v10110, false);
          var v17506 = printLen - 1;
          var v10111 = i$$42 < v17506;
          if (v10111) {
            this.writeToOutput(", ");
          }
          i$$42++;
          v10112 = i$$42 < printLen;
        }
        this.setContainer(tempContainer);
      }
      this.writeLineToOutput(") {");
      var v10119 = funcDecl$$1.isConstructor;
      if (v10119) {
        this.recordSourceMappingNameStart("constructor");
      } else {
        var v10118 = funcDecl$$1.isGetAccessor();
        if (v10118) {
          var v17507 = funcDecl$$1.getNameText();
          var v10114 = "get_" + v17507;
          this.recordSourceMappingNameStart(v10114);
        } else {
          var v10117 = funcDecl$$1.isSetAccessor();
          if (v10117) {
            var v17508 = funcDecl$$1.getNameText();
            var v10115 = "set_" + v17508;
            this.recordSourceMappingNameStart(v10115);
          } else {
            var v10116 = funcDecl$$1.getNameText();
            this.recordSourceMappingNameStart(v10116);
          }
        }
      }
      var v10120 = this.indenter;
      v10120.increaseIndent();
      i$$42 = 0;
      var v17509 = defaultArgs.length;
      var v10127 = i$$42 < v17509;
      for (;v10127;) {
        arg$$3 = defaultArgs[i$$42];
        this.emitIndent();
        this.recordSourceMappingStart(arg$$3);
        var v24377 = arg$$3.id;
        var v22047 = v24377.actualText;
        var v17510 = "if (typeof " + v22047;
        var v10121 = v17510 + ' === "undefined") { ';
        this.writeToOutput(v10121);
        var v10122 = arg$$3.id;
        this.recordSourceMappingStart(v10122);
        var v17511 = arg$$3.id;
        var v10123 = v17511.actualText;
        this.writeToOutput(v10123);
        var v10124 = arg$$3.id;
        this.recordSourceMappingEnd(v10124);
        this.writeToOutput(" = ");
        var v10125 = arg$$3.init;
        var v17512 = TypeScript$$12.TokenID;
        var v10126 = v17512.OpenParen;
        this.emitJavascript(v10125, v10126, false);
        this.writeLineToOutput("; }");
        this.recordSourceMappingEnd(arg$$3);
        i$$42++;
        var v17513 = defaultArgs.length;
        v10127 = i$$42 < v17513;
      }
      var v17514 = funcDecl$$1.isConstructor;
      if (v17514) {
        var v24378 = funcDecl$$1.classDecl;
        var v22048 = v24378.varFlags;
        var v24379 = TypeScript$$12.VarFlags;
        var v22049 = v24379.MustCaptureThis;
        v17514 = v22048 & v22049;
      }
      var v10128 = v17514;
      if (v10128) {
        this.writeCaptureThisStatement(funcDecl$$1);
      }
      var v17515 = funcDecl$$1.isConstructor;
      if (v17515) {
        v17515 = !classPropertiesMustComeAfterSuperCall;
      }
      var v10141 = v17515;
      if (v10141) {
        var v10139 = funcDecl$$1.arguments;
        if (v10139) {
          var v17516 = funcDecl$$1.arguments;
          var v10129 = v17516.members;
          argsLen = v10129.length;
          i$$42 = 0;
          var v10138 = i$$42 < argsLen;
          for (;v10138;) {
            var v17517 = funcDecl$$1.arguments;
            var v10130 = v17517.members;
            arg$$3 = v10130[i$$42];
            var v22050 = arg$$3.varFlags;
            var v24380 = TypeScript$$12.VarFlags;
            var v22051 = v24380.Property;
            var v17518 = v22050 & v22051;
            var v22052 = TypeScript$$12.VarFlags;
            var v17519 = v22052.None;
            var v10137 = v17518 != v17519;
            if (v10137) {
              this.emitIndent();
              this.recordSourceMappingStart(arg$$3);
              var v10131 = arg$$3.id;
              this.recordSourceMappingStart(v10131);
              var v22053 = arg$$3.id;
              var v17520 = v22053.actualText;
              var v10132 = "this." + v17520;
              this.writeToOutput(v10132);
              var v10133 = arg$$3.id;
              this.recordSourceMappingEnd(v10133);
              this.writeToOutput(" = ");
              var v10134 = arg$$3.id;
              this.recordSourceMappingStart(v10134);
              var v17521 = arg$$3.id;
              var v10135 = v17521.actualText;
              this.writeToOutput(v10135);
              var v10136 = arg$$3.id;
              this.recordSourceMappingEnd(v10136);
              this.writeLineToOutput(";");
              this.recordSourceMappingEnd(arg$$3);
            }
            i$$42++;
            v10138 = i$$42 < argsLen;
          }
        }
        var v22054 = funcDecl$$1.fncFlags;
        var v24381 = TypeScript$$12.FncFlags;
        var v22055 = v24381.ClassMethod;
        var v17522 = TypeScript$$12.hasFlag(v22054, v22055);
        var v10140 = !v17522;
        if (v10140) {
          this.emitConstructorCalls(bases$$1, classDecl$$1);
        }
      }
      if (hasSelfRef) {
        this.writeCaptureThisStatement(funcDecl$$1);
      }
      var v10152 = funcDecl$$1.variableArgList;
      if (v10152) {
        var v17523 = funcDecl$$1.arguments;
        var v10142 = v17523.members;
        argsLen = v10142.length;
        var v17524 = funcDecl$$1.arguments;
        var v10143 = v17524.members;
        var v10144 = argsLen - 1;
        var lastArg = v10143[v10144];
        this.emitIndent();
        this.recordSourceMappingStart(lastArg);
        this.writeToOutput("var ");
        var v10145 = lastArg.id;
        this.recordSourceMappingStart(v10145);
        var v17525 = lastArg.id;
        var v10146 = v17525.actualText;
        this.writeToOutput(v10146);
        var v10147 = lastArg.id;
        this.recordSourceMappingEnd(v10147);
        this.writeLineToOutput(" = [];");
        this.recordSourceMappingEnd(lastArg);
        this.emitIndent();
        this.writeToOutput("for (");
        this.recordSourceMappingStart(lastArg);
        this.writeToOutput("var _i = 0;");
        this.recordSourceMappingEnd(lastArg);
        this.writeToOutput(" ");
        this.recordSourceMappingStart(lastArg);
        var v22056 = argsLen - 1;
        var v17526 = "_i < (arguments.length - " + v22056;
        var v10148 = v17526 + ")";
        this.writeToOutput(v10148);
        this.recordSourceMappingEnd(lastArg);
        this.writeToOutput("; ");
        this.recordSourceMappingStart(lastArg);
        this.writeToOutput("_i++");
        this.recordSourceMappingEnd(lastArg);
        this.writeLineToOutput(") {");
        var v10149 = this.indenter;
        v10149.increaseIndent();
        this.emitIndent();
        this.recordSourceMappingStart(lastArg);
        var v25460 = lastArg.id;
        var v24382 = v25460.actualText;
        var v22057 = v24382 + "[_i] = arguments[_i + ";
        var v22058 = argsLen - 1;
        var v17527 = v22057 + v22058;
        var v10150 = v17527 + "];";
        this.writeToOutput(v10150);
        this.recordSourceMappingEnd(lastArg);
        this.writeLineToOutput("");
        var v10151 = this.indenter;
        v10151.decreaseIndent();
        this.emitIndent();
        this.writeLineToOutput("}");
      }
      var v22059 = funcDecl$$1.isConstructor;
      if (v22059) {
        var v24383 = funcDecl$$1.fncFlags;
        var v25461 = TypeScript$$12.FncFlags;
        var v24384 = v25461.ClassMethod;
        v22059 = TypeScript$$12.hasFlag(v24383, v24384);
      }
      var v17528 = v22059;
      if (v17528) {
        v17528 = !classPropertiesMustComeAfterSuperCall;
      }
      var v10159 = v17528;
      if (v10159) {
        var v22060 = this.thisClassNode;
        var v17529 = v22060.members;
        var v10153 = v17529.members;
        var nProps = v10153.length;
        i$$42 = 0;
        var v10158 = i$$42 < nProps;
        for (;v10158;) {
          var v25977 = this.thisClassNode;
          var v25462 = v25977.members;
          var v24385 = v25462.members;
          var v22061 = v24385[i$$42];
          var v17530 = v22061.nodeType;
          var v22062 = TypeScript$$12.NodeType;
          var v17531 = v22062.VarDecl;
          var v10157 = v17530 == v17531;
          if (v10157) {
            var v22063 = this.thisClassNode;
            var v17532 = v22063.members;
            var v10154 = v17532.members;
            var varDecl = v10154[i$$42];
            var v24386 = varDecl.varFlags;
            var v25463 = TypeScript$$12.VarFlags;
            var v24387 = v25463.Static;
            var v22064 = TypeScript$$12.hasFlag(v24386, v24387);
            var v17533 = !v22064;
            if (v17533) {
              v17533 = varDecl.init;
            }
            var v10156 = v17533;
            if (v10156) {
              this.emitIndent();
              var v17534 = TypeScript$$12.TokenID;
              var v10155 = v17534.Tilde;
              this.emitJavascriptVarDecl(varDecl, v10155);
              this.writeLineToOutput("");
            }
          }
          i$$42++;
          v10158 = i$$42 < nProps;
        }
      }
      var v10160 = funcDecl$$1.bod;
      this.emitBareJavascriptStatements(v10160, classPropertiesMustComeAfterSuperCall);
      var v10161 = this.indenter;
      v10161.decreaseIndent();
      this.emitIndent();
      var v10162 = funcDecl$$1.endingToken;
      this.recordSourceMappingStart(v10162);
      this.writeToOutput("}");
      this.recordSourceMappingNameEnd();
      var v10163 = funcDecl$$1.endingToken;
      this.recordSourceMappingEnd(v10163);
      this.recordSourceMappingEnd(funcDecl$$1);
      if (shouldParenthesize) {
        this.writeToOutput(")");
      }
      this.recordSourceMappingEnd(funcDecl$$1);
      this.emitParensAndCommentsInPlace(funcDecl$$1, false);
      var v22065 = !isMember;
      if (v22065) {
        var v25464 = funcDecl$$1.fncFlags;
        var v25978 = TypeScript$$12.FncFlags;
        var v25465 = v25978.IsFunctionExpression;
        var v24388 = TypeScript$$12.hasFlag(v25464, v25465);
        v22065 = !v24388;
      }
      var v17535 = v22065;
      if (v17535) {
        var v24389 = funcDecl$$1.fncFlags;
        var v25466 = TypeScript$$12.FncFlags;
        var v24390 = v25466.Definition;
        var v22066 = TypeScript$$12.hasFlag(v24389, v24390);
        var v24391 = !v22066;
        if (v24391) {
          v22066 = funcDecl$$1.isConstructor;
        }
        v17535 = v22066;
      }
      var v10166 = v17535;
      if (v10166) {
        this.writeLineToOutput("");
      } else {
        var v17536 = funcDecl$$1.fncFlags;
        var v22067 = TypeScript$$12.FncFlags;
        var v17537 = v22067.IsFunctionExpression;
        var v10165 = TypeScript$$12.hasFlag(v17536, v17537);
        if (v10165) {
          var v22068 = funcDecl$$1.flags;
          var v24392 = TypeScript$$12.ASTFlags;
          var v22069 = v24392.ExplicitSemicolon;
          var v17538 = TypeScript$$12.hasFlag(v22068, v22069);
          var v22072 = !v17538;
          if (v22072) {
            var v22070 = funcDecl$$1.flags;
            var v24393 = TypeScript$$12.ASTFlags;
            var v22071 = v24393.AutomaticSemicolon;
            v17538 = TypeScript$$12.hasFlag(v22070, v22071);
          }
          var v10164 = v17538;
          if (v10164) {
            this.writeLineToOutput(";");
          }
        }
      }
      return;
    }
    function v459(bases, classDecl) {
      var v10167 = bases == null;
      if (v10167) {
        return;
      }
      var v10168 = bases.members;
      var basesLen = v10168.length;
      this.recordSourceMappingStart(classDecl);
      var i$$41 = 0;
      var v10179 = i$$41 < basesLen;
      for (;v10179;) {
        var v10169 = bases.members;
        var baseExpr = v10169[i$$41];
        var baseSymbol = null;
        var v17539 = baseExpr.nodeType;
        var v22073 = TypeScript$$12.NodeType;
        var v17540 = v22073.Call;
        var v10172 = v17539 == v17540;
        if (v10172) {
          var v17541 = baseExpr.target;
          var v10170 = v17541.type;
          baseSymbol = v10170.symbol;
        } else {
          var v10171 = baseExpr.type;
          baseSymbol = v10171.symbol;
        }
        var baseName = baseSymbol.name;
        var v17542 = baseSymbol.declModule;
        var v24394 = classDecl.type;
        var v22074 = v24394.symbol;
        var v17543 = v22074.declModule;
        var v10173 = v17542 != v17543;
        if (v10173) {
          baseName = baseSymbol.fullName();
        }
        var v17544 = baseExpr.nodeType;
        var v22075 = TypeScript$$12.NodeType;
        var v17545 = v22075.Call;
        var v10178 = v17544 == v17545;
        if (v10178) {
          this.emitIndent();
          this.writeToOutput("_super.call(this");
          var args$$5 = baseExpr.arguments;
          var v17546 = args$$5;
          if (v17546) {
            var v24395 = args$$5.members;
            var v22076 = v24395.length;
            v17546 = v22076 > 0;
          }
          var v10175 = v17546;
          if (v10175) {
            this.writeToOutput(", ");
            var v17547 = TypeScript$$12.TokenID;
            var v10174 = v17547.Comma;
            this.emitJavascriptList(args$$5, ", ", v10174, false, false, false);
          }
          this.writeToOutput(")");
        } else {
          var v17548 = baseExpr.type;
          if (v17548) {
            var v22077 = baseExpr.type;
            v17548 = v22077.isClassInstance();
          }
          var v10177 = v17548;
          if (v10177) {
            this.emitIndent();
            var v22078 = classDecl.name;
            var v17549 = v22078.actualText;
            var v10176 = v17549 + "._super.constructor";
            this.writeToOutput(v10176);
            this.writeToOutput(".call(this)");
          }
        }
        i$$41++;
        v10179 = i$$41 < basesLen;
      }
      this.recordSourceMappingEnd(classDecl);
      return;
    }
    function v458(callNode, target$$29, args$$4) {
      var v17550 = this.emitSuperCall(callNode);
      var v10195 = !v17550;
      if (v10195) {
        var v22079 = callNode.flags;
        var v24396 = TypeScript$$12.ASTFlags;
        var v22080 = v24396.ClassBaseConstructorCall;
        var v17551 = TypeScript$$12.hasFlag(v22079, v22080);
        var v10194 = !v17551;
        if (v10194) {
          var v22081 = target$$29.nodeType;
          var v24397 = TypeScript$$12.NodeType;
          var v22082 = v24397.FuncDecl;
          var v17552 = v22081 == v22082;
          if (v17552) {
            var v22083 = target$$29.isParenthesized;
            v17552 = !v22083;
          }
          var v10180 = v17552;
          if (v10180) {
            this.writeToOutput("(");
          }
          var v24398 = callNode.target;
          var v22084 = v24398.nodeType;
          var v24399 = TypeScript$$12.NodeType;
          var v22085 = v24399.Super;
          var v17553 = v22084 == v22085;
          if (v17553) {
            var v24400 = this.emitState;
            var v22086 = v24400.container;
            var v22087 = EmitContainer.Constructor;
            v17553 = v22086 == v22087;
          }
          var v10182 = v17553;
          if (v10182) {
            this.writeToOutput("_super.call");
          } else {
            var v17554 = TypeScript$$12.TokenID;
            var v10181 = v17554.OpenParen;
            this.emitJavascript(target$$29, v10181, false);
          }
          var v22088 = target$$29.nodeType;
          var v24401 = TypeScript$$12.NodeType;
          var v22089 = v24401.FuncDecl;
          var v17555 = v22088 == v22089;
          if (v17555) {
            var v22090 = target$$29.isParenthesized;
            v17555 = !v22090;
          }
          var v10183 = v17555;
          if (v10183) {
            this.writeToOutput(")");
          }
          this.recordSourceMappingStart(args$$4);
          this.writeToOutput("(");
          var v24402 = callNode.target;
          var v22091 = v24402.nodeType;
          var v24403 = TypeScript$$12.NodeType;
          var v22092 = v24403.Super;
          var v17556 = v22091 == v22092;
          if (v17556) {
            var v24404 = this.emitState;
            var v22093 = v24404.container;
            var v22094 = EmitContainer.Constructor;
            v17556 = v22093 == v22094;
          }
          var v10185 = v17556;
          if (v10185) {
            this.writeToOutput("this");
            var v17557 = args$$4;
            if (v17557) {
              var v22095 = args$$4.members;
              v17557 = v22095.length;
            }
            var v10184 = v17557;
            if (v10184) {
              this.writeToOutput(", ");
            }
          }
          var v17558 = TypeScript$$12.TokenID;
          var v10186 = v17558.Comma;
          this.emitJavascriptList(args$$4, ", ", v10186, false, false, false);
          this.writeToOutput(")");
          this.recordSourceMappingEnd(args$$4);
        } else {
          var v10187 = this.indenter;
          v10187.decreaseIndent();
          var v10188 = this.indenter;
          v10188.decreaseIndent();
          var v10189 = TypeScript$$12.ASTList;
          var constructorCall = new v10189;
          var v10190 = constructorCall.members;
          v10190[0] = callNode;
          var v10191 = this.thisClassNode;
          this.emitConstructorCalls(constructorCall, v10191);
          var v10192 = this.indenter;
          v10192.increaseIndent();
          var v10193 = this.indenter;
          v10193.increaseIndent();
        }
      }
      return;
    }
    function v457(dotExpr$$2) {
      var v22096 = this.emitOptions;
      var v17559 = v22096.propagateConstants;
      var v10196 = !v17559;
      if (v10196) {
        return false;
      }
      var propertyName$$7 = dotExpr$$2.operand2;
      var v22097 = propertyName$$7;
      if (v22097) {
        v22097 = propertyName$$7.sym;
      }
      var v17560 = v22097;
      if (v17560) {
        var v22098 = propertyName$$7.sym;
        v17560 = v22098.isVariable();
      }
      var v10202 = v17560;
      if (v10202) {
        var v22099 = propertyName$$7.sym;
        var v17561 = v22099.flags;
        var v22100 = TypeScript$$12.SymbolFlags;
        var v17562 = v22100.Constant;
        var v10201 = TypeScript$$12.hasFlag(v17561, v17562);
        if (v10201) {
          var v17563 = propertyName$$7.sym;
          var v10200 = v17563.declAST;
          if (v10200) {
            var v10197 = propertyName$$7.sym;
            var boundDecl = v10197.declAST;
            var v17564 = boundDecl.init;
            if (v17564) {
              var v24405 = boundDecl.init;
              var v22101 = v24405.nodeType;
              var v24406 = TypeScript$$12.NodeType;
              var v22102 = v24406.NumberLit;
              v17564 = v22101 == v22102;
            }
            var v10199 = v17564;
            if (v10199) {
              var numLit = boundDecl.init;
              var v17565 = numLit.value;
              var v10198 = v17565.toString();
              this.writeToOutput(v10198);
              var comment$$1 = " /* ";
              var v17566 = propertyName$$7.actualText;
              comment$$1 = comment$$1 + v17566;
              comment$$1 = comment$$1 + " */ ";
              this.writeToOutput(comment$$1);
              return true;
            }
          }
        }
      }
      return false;
    }
    function v456(target$$28, args$$3) {
      this.writeToOutput("new ");
      var v17567 = target$$28.nodeType;
      var v22103 = TypeScript$$12.NodeType;
      var v17568 = v22103.TypeRef;
      var v10208 = v17567 == v17568;
      if (v10208) {
        var typeRef = target$$28;
        var v10205 = typeRef.arrayCount;
        if (v10205) {
          this.writeToOutput("Array()");
        } else {
          var v10203 = typeRef.term;
          var v17569 = TypeScript$$12.TokenID;
          var v10204 = v17569.Tilde;
          this.emitJavascript(v10203, v10204, false);
          this.writeToOutput("()");
        }
      } else {
        var v17570 = TypeScript$$12.TokenID;
        var v10206 = v17570.Tilde;
        this.emitJavascript(target$$28, v10206, false);
        this.recordSourceMappingStart(args$$3);
        this.writeToOutput("(");
        var v17571 = TypeScript$$12.TokenID;
        var v10207 = v17571.Comma;
        this.emitJavascriptList(args$$3, ", ", v10207, false, false, false);
        this.writeToOutput(")");
        this.recordSourceMappingEnd(args$$3);
      }
      return;
    }
    function v455(content$$3) {
      this.writeToOutput("[");
      if (content$$3) {
        this.writeLineToOutput("");
        var v10209 = this.indenter;
        v10209.increaseIndent();
        var v17572 = TypeScript$$12.TokenID;
        var v10210 = v17572.Comma;
        this.emitJavascriptList(content$$3, ", ", v10210, true, false, false);
        var v10211 = this.indenter;
        v10211.decreaseIndent();
        this.emitIndent();
      }
      this.writeToOutput("]");
      return;
    }
    function v454(content$$2) {
      this.writeLineToOutput("{");
      var v10212 = this.indenter;
      v10212.increaseIndent();
      var inObjectLiteral = this.setInObjectLiteral(true);
      var v17573 = TypeScript$$12.TokenID;
      var v10213 = v17573.Comma;
      this.emitJavascriptList(content$$2, ",", v10213, true, false, false);
      this.setInObjectLiteral(inObjectLiteral);
      var v10214 = this.indenter;
      v10214.decreaseIndent();
      this.emitIndent();
      this.writeToOutput("}");
      return;
    }
    function v453(ast$$15, pre$$10) {
      var v10215;
      if (pre$$10) {
        v10215 = ast$$15.preComments;
      } else {
        v10215 = ast$$15.postComments;
      }
      var comments$$4 = v10215;
      var v17574 = ast$$15.isParenthesized;
      if (v17574) {
        v17574 = !pre$$10;
      }
      var v10216 = v17574;
      if (v10216) {
        this.writeToOutput(")");
      }
      var v24407 = this.emitOptions;
      var v22104 = v24407.emitComments;
      if (v22104) {
        v22104 = comments$$4;
      }
      var v17575 = v22104;
      if (v17575) {
        var v22105 = comments$$4.length;
        v17575 = v22105 != 0;
      }
      var v10219 = v17575;
      if (v10219) {
        var i$$40 = 0;
        var v17576 = comments$$4.length;
        var v10218 = i$$40 < v17576;
        for (;v10218;) {
          var v10217 = comments$$4[i$$40];
          this.emitCommentInPlace(v10217);
          i$$40++;
          var v17577 = comments$$4.length;
          v10218 = i$$40 < v17577;
        }
      }
      var v17578 = ast$$15.isParenthesized;
      if (v17578) {
        v17578 = pre$$10;
      }
      var v10220 = v17578;
      if (v10220) {
        this.writeToOutput("(");
      }
      return;
    }
    function v452(comment) {
      this.recordSourceMappingStart(comment);
      var text$$10 = comment.getText();
      var hadNewLine = false;
      var v10228 = comment.isBlockComment;
      if (v10228) {
        var v22106 = this.emitState;
        var v17579 = v22106.column;
        var v10221 = v17579 == 0;
        if (v10221) {
          this.emitIndent();
        }
        var v10222 = text$$10[0];
        this.writeToOutput(v10222);
        var v22107 = text$$10.length;
        var v17580 = v22107 > 1;
        var v22108 = !v17580;
        if (v22108) {
          v17580 = comment.endsLine;
        }
        var v10225 = v17580;
        if (v10225) {
          this.writeLineToOutput("");
          var i$$39 = 1;
          var v17581 = text$$10.length;
          var v10224 = i$$39 < v17581;
          for (;v10224;) {
            this.emitIndent();
            var v10223 = text$$10[i$$39];
            this.writeLineToOutput(v10223);
            i$$39++;
            var v17582 = text$$10.length;
            v10224 = i$$39 < v17582;
          }
          hadNewLine = true;
        }
      } else {
        var v22109 = this.emitState;
        var v17583 = v22109.column;
        var v10226 = v17583 == 0;
        if (v10226) {
          this.emitIndent();
        }
        var v10227 = text$$10[0];
        this.writeLineToOutput(v10227);
        hadNewLine = true;
      }
      if (hadNewLine) {
        this.emitIndent();
      } else {
        this.writeToOutput(" ");
      }
      this.recordSourceMappingEnd(comment);
      return;
    }
    function v451() {
      var v10229 = this.getIndentString();
      this.writeToOutput(v10229);
      return;
    }
    function v450() {
      var v17584 = this.emitOptions;
      var v10231 = v17584.minWhitespace;
      if (v10231) {
        return "";
      } else {
        var v10230 = this.indenter;
        return v10230.getIndent();
      }
      return;
    }
    function v449(c$$5) {
      var v10232 = this.emitState;
      var temp$$9 = v10232.container;
      var v10233 = this.emitState;
      v10233.container = c$$5;
      return temp$$9;
    }
    function v448(val$$5) {
      var v10234 = this.emitState;
      var temp$$8 = v10234.inObjectLiteral;
      var v10235 = this.emitState;
      v10235.inObjectLiteral = val$$5;
      return temp$$8;
    }
    function v447(count$$3) {
      var v10236 = this.varListCountStack;
      var v22110 = this.varListCountStack;
      var v17585 = v22110.length;
      var v10237 = v17585 - 1;
      v10236[v10237] = count$$3;
      return;
    }
    function v446(ast$$14) {
      this.emitIndent();
      this.recordSourceMappingStart(ast$$14);
      var v10238 = this.captureThisStmtString;
      this.writeToOutput(v10238);
      this.recordSourceMappingEnd(ast$$14);
      this.writeLineToOutput("");
      return;
    }
    function v445(s$$12) {
      var v17586 = this.emitOptions;
      var v10243 = v17586.minWhitespace;
      if (v10243) {
        this.writeToOutput(s$$12);
        var v17587 = s$$12.length;
        var v10239 = v17587 - 1;
        var c$$4 = s$$12.charCodeAt(v10239);
        var v25467 = TypeScript$$12.LexCodeSpace;
        var v24408 = c$$4 == v25467;
        var v25469 = !v24408;
        if (v25469) {
          var v25468 = TypeScript$$12.LexCodeSMC;
          v24408 = c$$4 == v25468;
        }
        var v22111 = v24408;
        var v24410 = !v22111;
        if (v24410) {
          var v24409 = TypeScript$$12.LexCodeLBR;
          v22111 = c$$4 == v24409;
        }
        var v17588 = v22111;
        var v10240 = !v17588;
        if (v10240) {
          this.writeToOutput(" ");
        }
      } else {
        var v10241 = this.outfile;
        v10241.WriteLine(s$$12);
        var v10242 = this.emitState;
        v10242.column = 0;
        this.emitState.line++;
      }
      return;
    }
    function v444(s$$11) {
      var v17589 = this.emitOptions;
      var v10244 = v17589.minWhitespace;
      if (v10244) {
        s$$11 = s$$11.replace(/[\s]*/g, "");
      }
      this.writeToOutput(s$$11);
      return;
    }
    function v443(s$$10) {
      var v10245 = this.outfile;
      v10245.Write(s$$10);
      var v10246 = this.emitState;
      var v22112 = v10246.column;
      var v22113 = s$$10.length;
      v10246.column = v22112 + v22113;
      return;
    }
    function v442(mapper) {
      var v10247 = this.allSourceMappers;
      v10247.push(mapper);
      this.sourceMapper = mapper;
      return;
    }
    function Emitter$$1(checker$$2, emittingFileName, outfile$$1, emitOptions$$1, errorReporter$$1) {
      this.checker = checker$$2;
      this.emittingFileName = emittingFileName;
      this.outfile = outfile$$1;
      this.emitOptions = emitOptions$$1;
      this.errorReporter = errorReporter$$1;
      this.prologueEmitted = false;
      this.thisClassNode = null;
      this.thisFnc = null;
      this.moduleDeclList = [];
      this.moduleName = "";
      var v26990 = new EmitState;
      this.emitState = v26990;
      var v26991 = new Indenter;
      this.indenter = v26991;
      this.ambientModule = false;
      this.modAliasId = null;
      this.firstModAlias = null;
      this.allSourceMappers = [];
      this.sourceMapper = null;
      this.captureThisStmtString = "var _this = this;";
      this.varListCountStack = [0];
      return;
    }
    var v10248 = Emitter$$1.prototype;
    v10248.setSourceMappings = v442;
    var v10249 = Emitter$$1.prototype;
    v10249.writeToOutput = v443;
    var v10250 = Emitter$$1.prototype;
    v10250.writeToOutputTrimmable = v444;
    var v10251 = Emitter$$1.prototype;
    v10251.writeLineToOutput = v445;
    var v10252 = Emitter$$1.prototype;
    v10252.writeCaptureThisStatement = v446;
    var v10253 = Emitter$$1.prototype;
    v10253.setInVarBlock = v447;
    var v10254 = Emitter$$1.prototype;
    v10254.setInObjectLiteral = v448;
    var v10255 = Emitter$$1.prototype;
    v10255.setContainer = v449;
    var v10256 = Emitter$$1.prototype;
    v10256.getIndentString = v450;
    var v10257 = Emitter$$1.prototype;
    v10257.emitIndent = v451;
    var v10258 = Emitter$$1.prototype;
    v10258.emitCommentInPlace = v452;
    var v10259 = Emitter$$1.prototype;
    v10259.emitParensAndCommentsInPlace = v453;
    var v10260 = Emitter$$1.prototype;
    v10260.emitObjectLiteral = v454;
    var v10261 = Emitter$$1.prototype;
    v10261.emitArrayLiteral = v455;
    var v10262 = Emitter$$1.prototype;
    v10262.emitNew = v456;
    var v10263 = Emitter$$1.prototype;
    v10263.tryEmitConstant = v457;
    var v10264 = Emitter$$1.prototype;
    v10264.emitCall = v458;
    var v10265 = Emitter$$1.prototype;
    v10265.emitConstructorCalls = v459;
    var v10266 = Emitter$$1.prototype;
    v10266.emitInnerFunction = v460;
    var v10267 = Emitter$$1.prototype;
    v10267.emitJavascriptModule = v461;
    var v10268 = Emitter$$1.prototype;
    v10268.emitIndex = v462;
    var v10269 = Emitter$$1.prototype;
    v10269.emitStringLiteral = v463;
    var v10270 = Emitter$$1.prototype;
    v10270.emitJavascriptFunction = v464;
    var v10271 = Emitter$$1.prototype;
    v10271.emitAmbientVarDecl = v465;
    var v10272 = Emitter$$1.prototype;
    v10272.varListCount = v466;
    var v10273 = Emitter$$1.prototype;
    v10273.emitVarDeclVar = v467;
    var v10274 = Emitter$$1.prototype;
    v10274.onEmitVar = v468;
    var v10275 = Emitter$$1.prototype;
    v10275.emitJavascriptVarDecl = v469;
    var v10276 = Emitter$$1.prototype;
    v10276.declEnclosed = v470;
    var v10277 = Emitter$$1.prototype;
    v10277.emitJavascriptName = v471;
    var v10278 = Emitter$$1.prototype;
    v10278.emitJavascriptStatements = v472;
    var v10279 = Emitter$$1.prototype;
    v10279.emitBareJavascriptStatements = v473;
    var v10280 = Emitter$$1.prototype;
    v10280.recordSourceMappingNameStart = v474;
    var v10281 = Emitter$$1.prototype;
    v10281.recordSourceMappingNameEnd = v475;
    var v10282 = Emitter$$1.prototype;
    v10282.recordSourceMappingStart = v476;
    var v10283 = Emitter$$1.prototype;
    v10283.recordSourceMappingEnd = v477;
    var v10284 = Emitter$$1.prototype;
    v10284.Close = v478;
    var v10285 = Emitter$$1.prototype;
    v10285.emitJavascriptList = v479;
    var v10286 = Emitter$$1.prototype;
    v10286.emitJavascript = v480;
    var v10287 = Emitter$$1.prototype;
    v10287.emitPropertyAccessor = v481;
    var v10288 = Emitter$$1.prototype;
    v10288.emitPrototypeMember = v482;
    var v10289 = Emitter$$1.prototype;
    v10289.emitAddBaseMethods = v484;
    var v10290 = Emitter$$1.prototype;
    v10290.emitJavascriptClass = v485;
    var v10291 = Emitter$$1.prototype;
    v10291.emitPrologue = v486;
    var v10292 = Emitter$$1.prototype;
    v10292.emitSuperReference = v487;
    var v10293 = Emitter$$1.prototype;
    v10293.emitSuperCall = v488;
    var v10294 = Emitter$$1.prototype;
    v10294.emitThis = v489;
    Emitter$$1.shouldCaptureThis = shouldCaptureThis;
    var v10295 = Emitter$$1.prototype;
    v10295.createFile = v490;
    return Emitter$$1;
  }
  function v441() {
    function v440() {
      var v10296 = Indenter$$1.indentStrings;
      var v10297 = this.indentAmt;
      var indentString = v10296[v10297];
      var v10301 = indentString === undefined;
      if (v10301) {
        indentString = "";
        var i$$38 = 0;
        var v17590 = this.indentAmt;
        var v10298 = i$$38 < v17590;
        for (;v10298;) {
          var v17591 = Indenter$$1.indentStepString;
          indentString = indentString + v17591;
          var v17592 = Indenter$$1.indentStep;
          i$$38 = i$$38 + v17592;
          var v17593 = this.indentAmt;
          v10298 = i$$38 < v17593;
        }
        var v10299 = Indenter$$1.indentStrings;
        var v10300 = this.indentAmt;
        v10299[v10300] = indentString;
      }
      return indentString;
    }
    function v439() {
      var v17594 = this.indentAmt;
      var v17595 = Indenter$$1.indentStep;
      this.indentAmt = v17594 - v17595;
      return;
    }
    function v438() {
      var v17596 = this.indentAmt;
      var v17597 = Indenter$$1.indentStep;
      this.indentAmt = v17596 + v17597;
      return;
    }
    function Indenter$$1() {
      this.indentAmt = 0;
      return;
    }
    Indenter$$1.indentStep = 4;
    Indenter$$1.indentStepString = "    ";
    Indenter$$1.indentStrings = [];
    var v10302 = Indenter$$1.prototype;
    v10302.increaseIndent = v438;
    var v10303 = Indenter$$1.prototype;
    v10303.decreaseIndent = v439;
    var v10304 = Indenter$$1.prototype;
    v10304.getIndent = v440;
    return Indenter$$1;
  }
  function v437() {
    function v436(fileName$$1, extensionChanger) {
      var v10309 = this.outputMany;
      if (v10309) {
        var updatedFileName = fileName$$1;
        var v17598 = this.outputOption;
        var v10307 = v17598 != "";
        if (v10307) {
          var v10305 = this.commonDirectoryPath;
          updatedFileName = fileName$$1.replace(v10305, "");
          var v10306 = this.outputOption;
          updatedFileName = v10306 + updatedFileName;
        }
        return extensionChanger(updatedFileName, false);
      } else {
        var v10308 = this.outputOption;
        return extensionChanger(v10308, true);
      }
      return;
    }
    function EmitOptions$$1(settings$$1) {
      this.ioHost = null;
      this.outputMany = true;
      this.commonDirectoryPath = "";
      this.minWhitespace = settings$$1.minWhitespace;
      this.propagateConstants = settings$$1.propagateConstants;
      this.emitComments = settings$$1.emitComments;
      this.outputOption = settings$$1.outputOption;
      return;
    }
    var v10310 = EmitOptions$$1.prototype;
    v10310.mapOutputFileName = v436;
    return EmitOptions$$1;
  }
  function v435() {
    function EmitState$$1() {
      this.column = 0;
      this.line = 0;
      this.pretty = false;
      this.inObjectLiteral = false;
      this.container = EmitContainer.Prog;
      return;
    }
    return EmitState$$1;
  }
  function v434(EmitContainer$$1) {
    EmitContainer$$1._map = [];
    var v10311 = EmitContainer$$1._map;
    v10311[0] = "Prog";
    EmitContainer$$1.Prog = 0;
    var v10312 = EmitContainer$$1._map;
    v10312[1] = "Module";
    EmitContainer$$1.Module = 1;
    var v10313 = EmitContainer$$1._map;
    v10313[2] = "DynamicModule";
    EmitContainer$$1.DynamicModule = 2;
    var v10314 = EmitContainer$$1._map;
    v10314[3] = "Class";
    EmitContainer$$1.Class = 3;
    var v10315 = EmitContainer$$1._map;
    v10315[4] = "Constructor";
    EmitContainer$$1.Constructor = 4;
    var v10316 = EmitContainer$$1._map;
    v10316[5] = "Function";
    EmitContainer$$1.Function = 5;
    var v10317 = EmitContainer$$1._map;
    v10317[6] = "Args";
    EmitContainer$$1.Args = 6;
    var v10318 = EmitContainer$$1._map;
    v10318[7] = "Interface";
    EmitContainer$$1.Interface = 7;
    return;
  }
  var v17599 = TypeScript$$12.EmitContainer;
  var v22114 = !v17599;
  if (v22114) {
    v17599 = TypeScript$$12.EmitContainer = {};
  }
  var v10319 = v17599;
  v434(v10319);
  var EmitContainer = TypeScript$$12.EmitContainer;
  var EmitState = v435();
  TypeScript$$12.EmitState = EmitState;
  var EmitOptions = v437();
  TypeScript$$12.EmitOptions = EmitOptions;
  var Indenter = v441();
  TypeScript$$12.Indenter = Indenter;
  var Emitter = v491();
  TypeScript$$12.Emitter = Emitter;
  return;
}
function v433(TypeScript$$11) {
  function v432() {
    function EmitSourceMapping(allSourceMappers) {
      function v431(sourceMappings) {
        var i$$37 = 0;
        var v17600 = sourceMappings.length;
        var v10325 = i$$37 < v17600;
        for (;v10325;) {
          var sourceMapping = sourceMappings[i$$37];
          var v10320 = sourceMapping.start;
          var v10321 = sourceMapping.nameIndex;
          recordSourceMapping(v10320, v10321);
          var v10322 = sourceMapping.childMappings;
          recordSourceMappingSiblings(v10322);
          var v10323 = sourceMapping.end;
          var v10324 = sourceMapping.nameIndex;
          recordSourceMapping(v10323, v10324);
          i$$37++;
          var v17601 = sourceMappings.length;
          v10325 = i$$37 < v17601;
        }
        return;
      }
      function v430(mappedPosition, nameIndex) {
        var v22115 = recordedPosition != null;
        if (v22115) {
          var v24411 = recordedPosition.emittedColumn;
          var v24412 = mappedPosition.emittedColumn;
          v22115 = v24411 == v24412;
        }
        var v17602 = v22115;
        if (v17602) {
          var v22116 = recordedPosition.emittedLine;
          var v22117 = mappedPosition.emittedLine;
          v17602 = v22116 == v22117;
        }
        var v10326 = v17602;
        if (v10326) {
          return;
        }
        var v17603 = mappedPosition.emittedLine;
        var v10328 = prevEmittedLine !== v17603;
        if (v10328) {
          var v17604 = mappedPosition.emittedLine;
          var v10327 = prevEmittedLine < v17604;
          for (;v10327;) {
            prevEmittedColumn = 0;
            mappingsString = mappingsString + ";";
            prevEmittedLine++;
            var v17605 = mappedPosition.emittedLine;
            v10327 = prevEmittedLine < v17605;
          }
          emitComma = false;
        } else {
          if (emitComma) {
            mappingsString = mappingsString + ",";
          }
        }
        var v10329 = mappingsString;
        var v17606 = TypeScript$$11.Base64VLQFormat;
        var v22118 = mappedPosition.emittedColumn;
        var v17607 = v22118 - prevEmittedColumn;
        var v10330 = v17606.encode(v17607);
        mappingsString = v10329 + v10330;
        prevEmittedColumn = mappedPosition.emittedColumn;
        var v10331 = mappingsString;
        var v17608 = TypeScript$$11.Base64VLQFormat;
        var v17609 = currentSourceIndex - prevSourceIndex;
        var v10332 = v17608.encode(v17609);
        mappingsString = v10331 + v10332;
        prevSourceIndex = currentSourceIndex;
        var v10333 = mappingsString;
        var v17610 = TypeScript$$11.Base64VLQFormat;
        var v24413 = mappedPosition.sourceLine;
        var v22119 = v24413 - 1;
        var v17611 = v22119 - prevSourceLine;
        var v10334 = v17610.encode(v17611);
        mappingsString = v10333 + v10334;
        var v10335 = mappedPosition.sourceLine;
        prevSourceLine = v10335 - 1;
        var v10336 = mappingsString;
        var v17612 = TypeScript$$11.Base64VLQFormat;
        var v22120 = mappedPosition.sourceColumn;
        var v17613 = v22120 - prevSourceColumn;
        var v10337 = v17612.encode(v17613);
        mappingsString = v10336 + v10337;
        prevSourceColumn = mappedPosition.sourceColumn;
        var v10340 = nameIndex >= 0;
        if (v10340) {
          var v10338 = mappingsString;
          var v17614 = TypeScript$$11.Base64VLQFormat;
          var v22121 = namesCount + nameIndex;
          var v17615 = v22121 - prevNameIndex;
          var v10339 = v17614.encode(v17615);
          mappingsString = v10338 + v10339;
          prevNameIndex = namesCount + nameIndex;
        }
        emitComma = true;
        recordedPosition = mappedPosition;
        return;
      }
      var sourceMapper = allSourceMappers[0];
      var v10341 = sourceMapper.jsFile;
      var v22122 = sourceMapper.jsFileName;
      var v17616 = "//@ sourceMappingURL=" + v22122;
      var v17617 = SourceMapper$$1.MapFileExtension;
      var v10342 = v17616 + v17617;
      v10341.WriteLine(v10342);
      var sourceMapOut$$1 = sourceMapper.sourceMapOut;
      var mappingsString = "";
      var tsFiles = [];
      var prevEmittedColumn = 0;
      var prevEmittedLine = 0;
      var prevSourceColumn = 0;
      var prevSourceLine = 0;
      var prevSourceIndex = 0;
      var prevNameIndex = 0;
      var namesList = [];
      var namesCount = 0;
      var emitComma = false;
      var recordedPosition = null;
      var sourceMapperIndex = 0;
      var v17618 = allSourceMappers.length;
      var v10349 = sourceMapperIndex < v17618;
      for (;v10349;) {
        sourceMapper = allSourceMappers[sourceMapperIndex];
        var currentSourceIndex = tsFiles.length;
        var v10343 = sourceMapper.tsFileName;
        tsFiles.push(v10343);
        var v22123 = sourceMapper.names;
        var v17619 = v22123.length;
        var v10346 = v17619 > 0;
        if (v10346) {
          var v10344 = namesList.push;
          var v10345 = sourceMapper.names;
          v10344.apply(namesList, v10345);
        }
        var recordSourceMapping = v430;
        var recordSourceMappingSiblings = v431;
        var v10347 = sourceMapper.sourceMappings;
        recordSourceMappingSiblings(v10347, -1);
        var v17620 = sourceMapper.names;
        var v10348 = v17620.length;
        namesCount = namesCount + v10348;
        sourceMapperIndex++;
        var v17621 = allSourceMappers.length;
        v10349 = sourceMapperIndex < v17621;
      }
      var v10351 = mappingsString != "";
      if (v10351) {
        var v22124 = sourceMapper.jsFileName;
        var v17622 = {version:3, file:v22124, sources:tsFiles, names:namesList, mappings:mappingsString};
        var v10350 = JSON2.stringify(v17622);
        sourceMapOut$$1.Write(v10350);
      }
      try {
        sourceMapOut$$1.Close();
      } catch (ex) {
        var v10352 = sourceMapper.errorReporter;
        var v10353 = ex.message;
        v10352.emitterError(null, v10353);
      }
      return;
    }
    function SourceMapper$$1(tsFileName, jsFileName, jsFile, sourceMapOut, errorReporter) {
      this.jsFile = jsFile;
      this.sourceMapOut = sourceMapOut;
      this.errorReporter = errorReporter;
      this.sourceMappings = [];
      this.currentMappings = [];
      this.names = [];
      this.currentNameIndex = [];
      var v10354 = this.currentMappings;
      var v10355 = this.sourceMappings;
      v10354.push(v10355);
      jsFileName = TypeScript$$11.switchToForwardSlashes(jsFileName);
      var v26992 = TypeScript$$11.getPrettyName(jsFileName, false, true);
      this.jsFileName = v26992;
      var v10356 = this.jsFileName;
      var removalIndex = jsFileName.lastIndexOf(v10356);
      var fixedPath = jsFileName.substring(0, removalIndex);
      var v26993 = TypeScript$$11.getRelativePathToFixedPath(fixedPath, tsFileName);
      this.tsFileName = v26993;
      return;
    }
    SourceMapper$$1.MapFileExtension = ".map";
    SourceMapper$$1.EmitSourceMapping = EmitSourceMapping;
    return SourceMapper$$1;
  }
  function v429() {
    function SourceMapping$$1() {
      var v26994 = new SourceMapPosition;
      this.start = v26994;
      var v26995 = new SourceMapPosition;
      this.end = v26995;
      this.nameIndex = -1;
      this.childMappings = [];
      return;
    }
    return SourceMapping$$1;
  }
  function v428() {
    function SourceMapPosition$$1() {
      return;
    }
    return SourceMapPosition$$1;
  }
  var SourceMapPosition = v428();
  TypeScript$$11.SourceMapPosition = SourceMapPosition;
  var SourceMapping = v429();
  TypeScript$$11.SourceMapping = SourceMapping;
  var SourceMapper = v432();
  TypeScript$$11.SourceMapper = SourceMapper;
  return;
}
function v427() {
  function v426(text$$9, reviver) {
    function v425(a$$3) {
      var v24414 = a$$3.charCodeAt(0);
      var v22125 = v24414.toString(16);
      var v17623 = "0000" + v22125;
      var v10357 = v17623.slice(-4);
      return "\\u" + v10357;
    }
    function walk$$1(holder$$1, key$$31) {
      var k$$6 = null;
      var v$$1;
      var value$$33 = holder$$1[key$$31];
      var v17624 = value$$33;
      if (v17624) {
        var v22126 = typeof value$$33;
        v17624 = v22126 === "object";
      }
      var v10360 = v17624;
      if (v10360) {
        for (k$$6 in value$$33) {
          var v22127 = Object.prototype;
          var v17625 = v22127.hasOwnProperty;
          var v10359 = v17625.call(value$$33, k$$6);
          if (v10359) {
            v$$1 = walk$$1(value$$33, k$$6);
            var v10358 = v$$1 !== undefined;
            if (v10358) {
              value$$33[k$$6] = v$$1;
            } else {
              delete value$$33[k$$6];
            }
          }
        }
      }
      return reviver.call(holder$$1, key$$31, value$$33);
    }
    var j$$2;
    text$$9 = String(text$$9);
    cx.lastIndex = 0;
    var v10361 = cx.test(text$$9);
    if (v10361) {
      text$$9 = text$$9.replace(cx, v425);
    }
    var v24415 = text$$9.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@");
    var v22128 = v24415.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]");
    var v17626 = v22128.replace(/(?:^|:|,)(?:\s*\[)+/g, "");
    var v10364 = /^[\],:{}\s]*$/.test(v17626);
    if (v10364) {
      var v17627 = "(" + text$$9;
      var v10362 = v17627 + ")";
      j$$2 = eval(v10362);
      var v10363;
      var v22129 = typeof reviver;
      var v17629 = v22129 === "function";
      if (v17629) {
        var v17628 = {"":j$$2};
        v10363 = walk$$1(v17628, "");
      } else {
        v10363 = j$$2;
      }
      return v10363;
    }
    throw new SyntaxError("JSON.parse");
  }
  function v424(value$$32, replacer, space) {
    var i$$36;
    gap = "";
    indent$$3 = "";
    var v17630 = typeof space;
    var v10367 = v17630 === "number";
    if (v10367) {
      i$$36 = 0;
      var v10365 = i$$36 < space;
      for (;v10365;) {
        indent$$3 = indent$$3 + " ";
        i$$36 = i$$36 + 1;
        v10365 = i$$36 < space;
      }
    } else {
      var v17631 = typeof space;
      var v10366 = v17631 === "string";
      if (v10366) {
        indent$$3 = space;
      }
    }
    rep = replacer;
    var v22130 = replacer;
    if (v22130) {
      var v24416 = typeof replacer;
      v22130 = v24416 !== "function";
    }
    var v17632 = v22130;
    if (v17632) {
      var v24417 = typeof replacer;
      var v22131 = v24417 !== "object";
      var v24419 = !v22131;
      if (v24419) {
        var v25470 = replacer.length;
        var v24418 = typeof v25470;
        v22131 = v24418 !== "number";
      }
      v17632 = v22131;
    }
    var v10368 = v17632;
    if (v10368) {
      throw new Error("JSON.stringify");
    }
    var v10369 = {"":value$$32};
    return str$$6("", v10369);
  }
  function v423(key$$30) {
    return this.valueOf();
  }
  function v422(key$$29) {
    var v10370;
    var v22132 = this.valueOf();
    var v17634 = isFinite(v22132);
    if (v17634) {
      var v26434 = this.getUTCFullYear();
      var v26428 = v26434 + "-";
      var v26436 = this.getUTCMonth();
      var v26435 = v26436 + 1;
      var v26429 = f(v26435);
      var v26412 = v26428 + v26429;
      var v26386 = v26412 + "-";
      var v26413 = this.getUTCDate();
      var v26387 = f(v26413);
      var v26332 = v26386 + v26387;
      var v26221 = v26332 + "T";
      var v26333 = this.getUTCHours();
      var v26222 = f(v26333);
      var v25979 = v26221 + v26222;
      var v25471 = v25979 + ":";
      var v25980 = this.getUTCMinutes();
      var v25472 = f(v25980);
      var v24420 = v25471 + v25472;
      var v22133 = v24420 + ":";
      var v24421 = this.getUTCSeconds();
      var v22134 = f(v24421);
      var v17633 = v22133 + v22134;
      v10370 = v17633 + "Z";
    } else {
      v10370 = null;
    }
    return v10370;
  }
  function f(n$$1) {
    var v10371;
    var v17635 = n$$1 < 10;
    if (v17635) {
      v10371 = "0" + n$$1;
    } else {
      v10371 = n$$1;
    }
    return v10371;
  }
  function quote(string) {
    function v421(a$$2) {
      var c$$3 = meta[a$$2];
      var v10372;
      var v22135 = typeof c$$3;
      var v17637 = v22135 === "string";
      if (v17637) {
        v10372 = c$$3;
      } else {
        var v25473 = a$$2.charCodeAt(0);
        var v24422 = v25473.toString(16);
        var v22136 = "0000" + v24422;
        var v17636 = v22136.slice(-4);
        v10372 = "\\u" + v17636;
      }
      return v10372;
    }
    escapable.lastIndex = 0;
    var v10373;
    var v17640 = escapable.test(string);
    if (v17640) {
      var v22137 = string.replace(escapable, v421);
      var v17638 = '"' + v22137;
      v10373 = v17638 + '"';
    } else {
      var v17639 = '"' + string;
      v10373 = v17639 + '"';
    }
    return v10373;
  }
  function str$$6(key$$28, holder) {
    var i$$35;
    var k$$5 = null;
    var v;
    var length$$14;
    var mind = gap;
    var partial;
    var value$$31 = holder[key$$28];
    var v22138 = value$$31;
    if (v22138) {
      var v24423 = typeof value$$31;
      v22138 = v24423 === "object";
    }
    var v17641 = v22138;
    if (v17641) {
      var v24424 = value$$31.toJSON;
      var v22139 = typeof v24424;
      v17641 = v22139 === "function";
    }
    var v10374 = v17641;
    if (v10374) {
      value$$31 = value$$31.toJSON(key$$28);
    }
    var v17642 = typeof rep;
    var v10375 = v17642 === "function";
    if (v10375) {
      value$$31 = rep.call(holder, key$$28, value$$31);
    }
    var v10389 = typeof value$$31;
    switch(v10389) {
      case "string":
        return quote(value$$31);
      case "number":
        var v10376;
        var v17643 = isFinite(value$$31);
        if (v17643) {
          v10376 = String(value$$31);
        } else {
          v10376 = "null";
        }
        return v10376;
      case "boolean":
      ;
      case "null":
        return String(value$$31);
      case "object":
        var v10377 = !value$$31;
        if (v10377) {
          return "null";
        }
        gap = gap + indent$$3;
        partial = [];
        var v24425 = Object.prototype;
        var v22140 = v24425.toString;
        var v17644 = v22140.apply(value$$31, []);
        var v10381 = v17644 === "[object Array]";
        if (v10381) {
          length$$14 = value$$31.length;
          i$$35 = 0;
          var v10379 = i$$35 < length$$14;
          for (;v10379;) {
            var v10378 = str$$6(i$$35, value$$31);
            var v17645 = !v10378;
            if (v17645) {
              v10378 = "null";
            }
            partial[i$$35] = v10378;
            i$$35 = i$$35 + 1;
            v10379 = i$$35 < length$$14;
          }
          var v10380;
          var v22141 = partial.length;
          var v17647 = v22141 === 0;
          if (v17647) {
            v10380 = "[]";
          } else {
            var v17646;
            if (gap) {
              var v25981 = "[\n" + gap;
              var v26223 = ",\n" + gap;
              var v25982 = partial.join(v26223);
              var v25474 = v25981 + v25982;
              var v24426 = v25474 + "\n";
              var v22142 = v24426 + mind;
              v17646 = v22142 + "]";
            } else {
              var v24427 = partial.join(",");
              var v22143 = "[" + v24427;
              v17646 = v22143 + "]";
            }
            v10380 = v17646;
          }
          v = v10380;
          gap = mind;
          return v;
        }
        var v17648 = rep;
        if (v17648) {
          var v22144 = typeof rep;
          v17648 = v22144 === "object";
        }
        var v10387 = v17648;
        if (v10387) {
          length$$14 = rep.length;
          i$$35 = 0;
          var v10384 = i$$35 < length$$14;
          for (;v10384;) {
            var v22145 = rep[i$$35];
            var v17649 = typeof v22145;
            var v10383 = v17649 === "string";
            if (v10383) {
              k$$5 = rep[i$$35];
              v = str$$6(k$$5, value$$31);
              if (v) {
                var v22146 = quote(k$$5);
                var v24428;
                if (gap) {
                  v24428 = ": ";
                } else {
                  v24428 = ":";
                }
                var v22147 = v24428;
                var v17650 = v22146 + v22147;
                var v10382 = v17650 + v;
                partial.push(v10382);
              }
            }
            i$$35 = i$$35 + 1;
            v10384 = i$$35 < length$$14;
          }
        } else {
          for (k$$5 in value$$31) {
            var v22148 = Object.prototype;
            var v17651 = v22148.hasOwnProperty;
            var v10386 = v17651.call(value$$31, k$$5);
            if (v10386) {
              v = str$$6(k$$5, value$$31);
              if (v) {
                var v22149 = quote(k$$5);
                var v24429;
                if (gap) {
                  v24429 = ": ";
                } else {
                  v24429 = ":";
                }
                var v22150 = v24429;
                var v17652 = v22149 + v22150;
                var v10385 = v17652 + v;
                partial.push(v10385);
              }
            }
          }
        }
        var v10388;
        var v22151 = partial.length;
        var v17654 = v22151 === 0;
        if (v17654) {
          v10388 = "{}";
        } else {
          var v17653;
          if (gap) {
            var v25983 = "{\n" + gap;
            var v26224 = ",\n" + gap;
            var v25984 = partial.join(v26224);
            var v25475 = v25983 + v25984;
            var v24430 = v25475 + "\n";
            var v22152 = v24430 + mind;
            v17653 = v22152 + "}";
          } else {
            var v24431 = partial.join(",");
            var v22153 = "{" + v24431;
            v17653 = v22153 + "}";
          }
          v10388 = v17653;
        }
        v = v10388;
        gap = mind;
        return v;
    }
    return;
  }
  var v24432 = Date.prototype;
  var v22154 = v24432.toJSON;
  var v17655 = typeof v22154;
  var v10392 = v17655 !== "function";
  if (v10392) {
    var v10390 = Date.prototype;
    v10390.toJSON = v422;
    var strProto = String.prototype;
    var numProto = Number.prototype;
    var v10391 = Boolean.prototype;
    numProto.JSON = strProto.JSON = v10391.toJSON = v423;
  }
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var gap;
  var indent$$3;
  var meta = {"\b":"\\b", "\t":"\\t", "\n":"\\n", "\f":"\\f", "\r":"\\r", '"':'\\"', "\\":"\\\\"};
  var rep;
  var v22155 = JSON2.stringify;
  var v17656 = typeof v22155;
  var v10393 = v17656 !== "function";
  if (v10393) {
    JSON2.stringify = v424;
  }
  var v22156 = JSON2.parse;
  var v17657 = typeof v22156;
  var v10394 = v17657 !== "function";
  if (v10394) {
    JSON2.parse = v426;
  }
  return;
}
function v420(TypeScript$$10) {
  function v419() {
    function decode(inString) {
      var result$$6 = 0;
      var negative = false;
      var shift = 0;
      var i$$34 = 0;
      var v17658 = inString.length;
      var v10403 = i$$34 < v17658;
      for (;v10403;) {
        var v10395 = inString[i$$34];
        var byte = Base64Format.decodeChar(v10395);
        var v10399 = i$$34 === 0;
        if (v10399) {
          var v17659 = byte & 1;
          var v10396 = v17659 === 1;
          if (v10396) {
            negative = true;
          }
          var v10397 = byte >> 1;
          result$$6 = v10397 & 15;
        } else {
          var v17660 = byte & 31;
          var v10398 = v17660 << shift;
          result$$6 = result$$6 | v10398;
        }
        var v22157;
        var v24433 = i$$34 == 0;
        if (v24433) {
          v22157 = 4;
        } else {
          v22157 = 5;
        }
        var v17661 = v22157;
        shift = shift + v17661;
        var v17662 = byte & 32;
        var v10402 = v17662 === 32;
        if (v10402) {
        } else {
          var v17663;
          if (negative) {
            v17663 = -result$$6;
          } else {
            v17663 = result$$6;
          }
          var v10400 = v17663;
          var v17664 = i$$34 + 1;
          var v10401 = inString.substr(v17664);
          return{value:v10400, rest:v10401};
        }
        i$$34++;
        var v17665 = inString.length;
        v10403 = i$$34 < v17665;
      }
      var v17666 = 'Base64 value "' + inString;
      var v10404 = v17666 + '" finished with a continuation bit';
      throw new Error(v10404);
    }
    function encode$$1(inValue$$1) {
      var v10406 = inValue$$1 < 0;
      if (v10406) {
        var v17667 = -inValue$$1;
        var v10405 = v17667 << 1;
        inValue$$1 = v10405 + 1;
      } else {
        inValue$$1 = inValue$$1 << 1;
      }
      var encodedStr = "";
      var v10409 = inValue$$1 > 0;
      do {
        var currentDigit = inValue$$1 & 31;
        inValue$$1 = inValue$$1 >> 5;
        var v10407 = inValue$$1 > 0;
        if (v10407) {
          currentDigit = currentDigit | 32;
        }
        var v10408 = Base64Format.encode(currentDigit);
        encodedStr = encodedStr + v10408;
        v10409 = inValue$$1 > 0;
      } while (v10409);
      return encodedStr;
    }
    function Base64VLQFormat$$1() {
      return;
    }
    Base64VLQFormat$$1.encode = encode$$1;
    Base64VLQFormat$$1.decode = decode;
    return Base64VLQFormat$$1;
  }
  function v418() {
    function decodeChar(inChar) {
      var v17668 = inChar.length;
      var v10412 = v17668 === 1;
      if (v10412) {
        var v10410 = Base64Format$$1.encodedValues;
        return v10410.indexOf(inChar);
      } else {
        var v17669 = '"' + inChar;
        var v10411 = v17669 + '" must have length 1';
        throw TypeError(v10411);
      }
      return;
    }
    function encode(inValue) {
      var v10414 = inValue < 64;
      if (v10414) {
        var v10413 = Base64Format$$1.encodedValues;
        return v10413.charAt(inValue);
      }
      var v10415 = inValue + ": not a 64 based value";
      throw TypeError(v10415);
    }
    function Base64Format$$1() {
      return;
    }
    Base64Format$$1.encodedValues = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    Base64Format$$1.encode = encode;
    Base64Format$$1.decodeChar = decodeChar;
    return Base64Format$$1;
  }
  var Base64Format = v418();
  var Base64VLQFormat = v419();
  TypeScript$$10.Base64VLQFormat = Base64VLQFormat;
  return;
}
function v417(TypeScript$$9) {
  function v416() {
    function v415(scope$$5, table$$1) {
      function v414(key$$27, sym$$2, binder) {
        binder.bindSymbol(scope$$5, sym$$2);
        return;
      }
      table$$1.map(v414, this);
      return;
    }
    function v413(scope$$4, symbol$$2) {
      function v412(id$$7) {
        return scope$$4.find(id$$7, false, true);
      }
      var v17670 = symbol$$2.bound;
      var v10438 = !v17670;
      if (v10438) {
        var v10416 = this.checker;
        var prevLocationInfo = v10416.locationInfo;
        var v24434 = this.checker;
        var v22158 = v24434.units;
        if (v22158) {
          var v24435 = symbol$$2.unitIndex;
          v22158 = v24435 >= 0;
        }
        var v17671 = v22158;
        if (v17671) {
          var v22159 = symbol$$2.unitIndex;
          var v25476 = this.checker;
          var v24436 = v25476.units;
          var v22160 = v24436.length;
          v17671 = v22159 < v22160;
        }
        var v10418 = v17671;
        if (v10418) {
          var v10417 = this.checker;
          var v22161 = this.checker;
          var v17672 = v22161.units;
          var v17673 = symbol$$2.unitIndex;
          v10417.locationInfo = v17672[v17673];
        }
        var v10436 = symbol$$2.kind();
        switch(v10436) {
          case TypeScript$$9.SymbolKind.Type:
            var v17674 = symbol$$2.flags;
            var v22162 = TypeScript$$9.SymbolFlags;
            var v17675 = v22162.Bound;
            var v10419 = v17674 & v17675;
            if (v10419) {
              break;
            }
            var typeSymbol = symbol$$2;
            var v17676 = typeSymbol.flags;
            var v22163 = TypeScript$$9.SymbolFlags;
            var v17677 = v22163.Bound;
            typeSymbol.flags = v17676 | v17677;
            var v22164 = typeSymbol.aliasLink;
            if (v22164) {
              var v24437 = typeSymbol.type;
              v22164 = !v24437;
            }
            var v17678 = v22164;
            if (v17678) {
              var v25477 = typeSymbol.aliasLink;
              var v24438 = v25477.alias;
              var v22165 = v24438.nodeType;
              var v24439 = TypeScript$$9.NodeType;
              var v22166 = v24439.Name;
              v17678 = v22165 == v22166;
            }
            var v10424 = v17678;
            if (v10424) {
              var v17679 = typeSymbol.aliasLink;
              var v10420 = v17679.alias;
              var modPath = v10420.text;
              var v10421 = this.checker;
              var v22167 = this.checker;
              var v17680 = v22167.locationInfo;
              var v10422 = v17680.filename;
              var modSym = v10421.findSymbolForDynamicModule(modPath, v10422, v412);
              if (modSym) {
                var v10423 = typeSymbol;
                var v26996 = modSym.getType();
                v10423.type = v26996;
              }
            }
            var v17681 = typeSymbol.type;
            if (v17681) {
              var v22168 = typeSymbol.type;
              var v24440 = this.checker;
              var v22169 = v24440.gloModType;
              v17681 = v22168 != v22169;
            }
            var v10431 = v17681;
            if (v10431) {
              var v10425 = typeSymbol.type;
              var v10426 = typeSymbol.instanceType;
              this.bindType(scope$$4, v10425, v10426);
              var v17682 = typeSymbol.type;
              var v10430 = v17682.isModuleType();
              if (v10430) {
                var i$$33 = 0;
                var v22170 = typeSymbol.expansions;
                var v17683 = v22170.length;
                var v10429 = i$$33 < v17683;
                for (;v10429;) {
                  var v17684 = typeSymbol.expansions;
                  var v10427 = v17684[i$$33];
                  var v10428 = typeSymbol.instanceType;
                  this.bindType(scope$$4, v10427, v10428);
                  i$$33++;
                  var v22171 = typeSymbol.expansions;
                  var v17685 = v22171.length;
                  v10429 = i$$33 < v17685;
                }
              }
            }
            break;
          case TypeScript$$9.SymbolKind.Field:
            var v10432 = this.checker;
            var v17686 = symbol$$2.field;
            var v10433 = v17686.typeLink;
            v10432.resolveTypeLink(scope$$4, v10433, false);
            break;
          case TypeScript$$9.SymbolKind.Parameter:
            var v10434 = this.checker;
            var v17687 = symbol$$2.parameter;
            var v10435 = v17687.typeLink;
            v10434.resolveTypeLink(scope$$4, v10435, true);
        }
        var v10437 = this.checker;
        v10437.locationInfo = prevLocationInfo;
      }
      symbol$$2.bound = true;
      return;
    }
    function v411(scope$$3, type$$26, instanceType$$1) {
      if (instanceType$$1) {
        this.bindType(scope$$3, instanceType$$1, null);
      }
      var v10454 = type$$26.hasMembers();
      if (v10454) {
        var members$$5 = type$$26.members;
        var ambientMembers = type$$26.ambientMembers;
        var typeMembers = type$$26.getAllEnclosedTypes();
        var ambientTypeMembers = type$$26.getAllAmbientEnclosedTypes();
        var v10439 = TypeScript$$9.SymbolTableScope;
        var v10440 = type$$26.symbol;
        var memberScope = new v10439(members$$5, ambientMembers, typeMembers, ambientTypeMembers, v10440);
        var v10441 = TypeScript$$9.SymbolAggregateScope;
        var v10442 = type$$26.symbol;
        var agg = new v10441(v10442);
        var v10443 = this.checker;
        var prevCurrentModDecl = v10443.currentModDecl;
        var v10444 = this.checker;
        var prevBindStatus = v10444.inBind;
        agg.addParentScope(memberScope);
        agg.addParentScope(scope$$3);
        var v10447 = type$$26.isModuleType();
        if (v10447) {
          var v10445 = this.checker;
          var v17688 = type$$26.symbol;
          v10445.currentModDecl = v17688.declAST;
          var v10446 = this.checker;
          v10446.inBind = true;
        }
        if (members$$5) {
          var v17689 = type$$26.members;
          var v10448 = v17689.allMembers;
          this.bind(agg, v10448);
        }
        if (typeMembers) {
          var v10449 = typeMembers.allMembers;
          this.bind(agg, v10449);
        }
        if (ambientMembers) {
          var v10450 = ambientMembers.allMembers;
          this.bind(agg, v10450);
        }
        if (ambientTypeMembers) {
          var v10451 = ambientTypeMembers.allMembers;
          this.bind(agg, v10451);
        }
        var v10452 = this.checker;
        v10452.currentModDecl = prevCurrentModDecl;
        var v10453 = this.checker;
        v10453.inBind = prevBindStatus;
      }
      var v10455 = type$$26.extendsTypeLinks;
      if (v10455) {
        this.resolveBases(scope$$3, type$$26);
      }
      var v10457 = type$$26.construct;
      if (v10457) {
        var v10456 = type$$26.construct;
        this.resolveSignatureGroup(v10456, scope$$3, instanceType$$1);
      }
      var v10459 = type$$26.call;
      if (v10459) {
        var v10458 = type$$26.call;
        this.resolveSignatureGroup(v10458, scope$$3, null);
      }
      var v10461 = type$$26.index;
      if (v10461) {
        var v10460 = type$$26.index;
        this.resolveSignatureGroup(v10460, scope$$3, null);
      }
      var v10463 = type$$26.elementType;
      if (v10463) {
        var v10462 = type$$26.elementType;
        this.bindType(scope$$3, v10462, null);
      }
      return;
    }
    function v410(signatureGroup, scope$$2, instanceType) {
      var v10464 = signatureGroup.hasImplementation;
      var supplyVar = !v10464;
      var i$$32 = 0;
      var v10465 = signatureGroup.signatures;
      var len$$9 = v10465.length;
      var v10479 = i$$32 < len$$9;
      for (;v10479;) {
        var v10466 = signatureGroup.signatures;
        var signature = v10466[i$$32];
        if (instanceType) {
          var v10467 = signature.returnType;
          v10467.type = instanceType;
        } else {
          var v10468 = this.checker;
          var v10469 = signature.returnType;
          v10468.resolveTypeLink(scope$$2, v10469, supplyVar);
        }
        var v10470 = signature.parameters;
        var paramLen = v10470.length;
        var j$$1 = 0;
        var v10472 = j$$1 < paramLen;
        for (;v10472;) {
          var v17690 = signature.parameters;
          var v10471 = v17690[j$$1];
          this.bindSymbol(scope$$2, v10471);
          j$$1++;
          v10472 = j$$1 < paramLen;
        }
        var v10478 = signature.hasVariableArgList;
        if (v10478) {
          var v10473 = signature.parameters;
          var v10474 = paramLen - 1;
          var lastParam = v10473[v10474];
          lastParam.argsOffset = paramLen - 1;
          var v22172 = lastParam.getType();
          var v17691 = v22172.isArray();
          var v10477 = !v17691;
          if (v10477) {
            var v17692 = this.checker;
            var v10475 = v17692.errorReporter;
            v10475.simpleErrorFromSym(lastParam, "... parameter must have array type");
            var v17693 = lastParam.parameter;
            var v10476 = v17693.typeLink;
            var v17694 = this.checker;
            var v24441 = lastParam.parameter;
            var v22173 = v24441.typeLink;
            var v17695 = v22173.type;
            var v26997 = v17694.makeArrayType(v17695);
            v10476.type = v26997;
          }
        }
        i$$32++;
        v10479 = i$$32 < len$$9;
      }
      return;
    }
    function v409(scope$$1, type$$25) {
      var v10480 = type$$25.extendsTypeLinks;
      var v26998 = this.resolveBaseTypeLinks(v10480, scope$$1);
      type$$25.extendsList = v26998;
      var i$$31 = 0;
      var v10481 = type$$25.extendsList;
      var len$$8 = v10481.length;
      var derivedIsClass = type$$25.isClassInstance();
      var v10490 = i$$31 < len$$8;
      for (;v10490;) {
        var v17696 = type$$25.extendsList;
        var v10482 = v17696[i$$31];
        var baseIsClass = v10482.isClassInstance();
        var v22174 = type$$25.extendsList;
        var v17697 = v22174[i$$31];
        var v22175 = this.checker;
        var v17698 = v22175.anyType;
        var v10489 = v17697 != v17698;
        if (v10489) {
          var v17699 = type$$25.extendsTypeLinks;
          var v10483 = v17699[i$$31];
          var baseRef = v10483.ast;
          if (derivedIsClass) {
            var v10486 = !baseIsClass;
            if (v10486) {
              var v17700 = this.checker;
              var v10484 = v17700.errorReporter;
              var v25985 = type$$25.extendsList;
              var v25478 = v25985[i$$31];
              var v24442 = v25478.symbol;
              var v22176 = v24442.fullName();
              var v17701 = "A class may only extend other classes, " + v22176;
              var v10485 = v17701 + " is not a class.";
              v10484.simpleError(baseRef, v10485);
            }
          } else {
            if (baseIsClass) {
              var v17702 = this.checker;
              var v10487 = v17702.errorReporter;
              var v25986 = type$$25.extendsList;
              var v25479 = v25986[i$$31];
              var v24443 = v25479.symbol;
              var v22177 = v24443.fullName();
              var v17703 = "An interface may only extend other interfaces, " + v22177;
              var v10488 = v17703 + " is a class.";
              v10487.simpleError(baseRef, v10488);
            }
          }
        }
        i$$31++;
        v10490 = i$$31 < len$$8;
      }
      var v10491 = type$$25.implementsTypeLinks;
      var v26999 = this.resolveBaseTypeLinks(v10491, scope$$1);
      type$$25.implementsList = v26999;
      var v10498 = type$$25.implementsList;
      if (v10498) {
        i$$31 = 0;
        var v17704 = type$$25.implementsList;
        len$$8 = v17704.length;
        var v10497 = i$$31 < len$$8;
        for (;v10497;) {
          var v10492 = type$$25.implementsList;
          var iface = v10492[i$$31];
          var v17705 = type$$25.implementsTypeLinks;
          var v10493 = v17705[i$$31];
          baseRef = v10493.ast;
          var v10496 = iface.isClassInstance();
          if (v10496) {
            if (derivedIsClass) {
              var v17706 = this.checker;
              var v10494 = v17706.errorReporter;
              var v24444 = iface.symbol;
              var v22178 = v24444.fullName();
              var v17707 = "A class may only implement an interface; " + v22178;
              var v10495 = v17707 + " is a class.";
              v10494.simpleError(baseRef, v10495);
            }
          }
          i$$31++;
          v10497 = i$$31 < len$$8;
        }
      }
      return;
    }
    function v408(typeLinks, scope) {
      var extendsList$$3 = null;
      if (typeLinks) {
        extendsList$$3 = new Array;
        var i$$30 = 0;
        var len$$7 = typeLinks.length;
        var v10501 = i$$30 < len$$7;
        for (;v10501;) {
          var v10499 = this.checker;
          var v10500 = typeLinks[i$$30];
          var v27000 = v10499.resolveBaseTypeLink(v10500, scope);
          extendsList$$3[i$$30] = v27000;
          i$$30++;
          v10501 = i$$30 < len$$7;
        }
      }
      return extendsList$$3;
    }
    function Binder$$1(checker$$1) {
      this.checker = checker$$1;
      return;
    }
    var v10502 = Binder$$1.prototype;
    v10502.resolveBaseTypeLinks = v408;
    var v10503 = Binder$$1.prototype;
    v10503.resolveBases = v409;
    var v10504 = Binder$$1.prototype;
    v10504.resolveSignatureGroup = v410;
    var v10505 = Binder$$1.prototype;
    v10505.bindType = v411;
    var v10506 = Binder$$1.prototype;
    v10506.bindSymbol = v413;
    var v10507 = Binder$$1.prototype;
    v10507.bind = v415;
    return Binder$$1;
  }
  var Binder = v416();
  TypeScript$$9.Binder = Binder;
  return;
}
function v407(TypeScript$$8) {
  function v406() {
    function v405(script$$6, position$$1) {
      var lineInfo = {line:-1, col:-1};
      var v17708 = script$$6.locationInfo;
      var v10508 = v17708.lineMap;
      TypeScript$$8.getSourceLineColFromMap(lineInfo, position$$1, v10508);
      var v17709 = lineInfo.col;
      var v10509 = v17709 !== -1;
      if (v10509) {
        lineInfo.col++;
      }
      var v24445 = lineInfo.line;
      var v22179 = "(" + v24445;
      var v17710 = v22179 + ", ";
      var v17711 = lineInfo.col;
      var v10510 = v17710 + v17711;
      return v10510 + ")";
    }
    function v404(s$$9, targetLength, paddingString, leftPadding) {
      var v10511;
      if (leftPadding) {
        v10511 = "";
      } else {
        v10511 = s$$9;
      }
      var result$$5 = v10511;
      var i$$29 = s$$9.length;
      var v10512 = i$$29 < targetLength;
      for (;v10512;) {
        result$$5 = result$$5 + paddingString;
        i$$29++;
        v10512 = i$$29 < targetLength;
      }
      var v17712;
      if (leftPadding) {
        v17712 = s$$9;
      } else {
        v17712 = "";
      }
      var v10513 = v17712;
      result$$5 = result$$5 + v10513;
      return result$$5;
    }
    function v403(linemap) {
      var result$$4 = "[";
      var i$$28 = 0;
      var v17713 = linemap.length;
      var v10515 = i$$28 < v17713;
      for (;v10515;) {
        var v10514 = i$$28 > 0;
        if (v10514) {
          result$$4 = result$$4 + ",";
        }
        var v17714 = linemap[i$$28];
        result$$4 = result$$4 + v17714;
        i$$28++;
        var v17715 = linemap.length;
        v10515 = i$$28 < v17715;
      }
      result$$4 = result$$4 + "]";
      var v10516 = this.logger;
      var v10517 = "linemap: " + result$$4;
      v10516.log(v10517);
      return;
    }
    function v402(script$$5, comments$$3, indent$$2) {
      var v10518 = comments$$3 == null;
      if (v10518) {
        return;
      }
      var i$$27 = 0;
      var v17716 = comments$$3.length;
      var v10520 = i$$27 < v17716;
      for (;v10520;) {
        var v10519 = comments$$3[i$$27];
        this.logNode(script$$5, v10519, indent$$2);
        i$$27++;
        var v17717 = comments$$3.length;
        v10520 = i$$27 < v17717;
      }
      return;
    }
    function v401(script$$4, cur$$8, indent$$1) {
      var msg = this.addPadding("", indent$$1, "| ", true);
      var v17718 = cur$$8.treeViewLabel();
      var v10521 = "+ " + v17718;
      msg = msg.concat(v10521);
      msg = this.addPadding(msg, 70, " ", false);
      var v17719 = cur$$8.minChar;
      var v10522 = this.addLineColumn(script$$4, v17719);
      msg = msg + v10522;
      msg = this.addPadding(msg, 80, " ", false);
      msg = msg + "=> ";
      var v17720 = cur$$8.limChar;
      var v10523 = this.addLineColumn(script$$4, v17720);
      msg = msg + v10523;
      msg = this.addPadding(msg, 102, " ", false);
      var v26225 = cur$$8.minChar;
      var v25987 = v26225.toString();
      var v25480 = this.addPadding(v25987, 1, " ", true);
      var v24446 = "[" + v25480;
      var v22180 = v24446 + ", ";
      var v25481 = cur$$8.limChar;
      var v24447 = v25481.toString();
      var v22181 = this.addPadding(v24447, 1, " ", true);
      var v17721 = v22180 + v22181;
      var v10524 = v17721 + "]";
      msg = msg.concat(v10524);
      msg = this.addPadding(msg, 115, " ", false);
      var v17722 = cur$$8.sym;
      var v10525 = "sym=" + v17722;
      msg = msg.concat(v10525);
      msg = this.addPadding(msg, 135, " ", false);
      var v22182;
      var v25482 = cur$$8.type;
      var v24449 = v25482 === null;
      if (v24449) {
        v22182 = "null";
      } else {
        var v24448 = cur$$8.type;
        v22182 = v24448.getTypeName();
      }
      var v17723 = v22182;
      var v10526 = "type=" + v17723;
      msg = msg.concat(v10526);
      var v10527 = this.logger;
      v10527.log(msg);
      return;
    }
    function v400(script$$3) {
      function post$$6(cur$$7, parent$$42) {
        stack.pop();
        return cur$$7;
      }
      function pre$$9(cur$$6, parent$$41) {
        stack.push(cur$$6);
        var v17724 = stack.length;
        var v10528 = v17724 - 1;
        var indent = v10528 * 2;
        var v10529 = cur$$6.preComments;
        _this.logComments(script$$3, v10529, indent);
        _this.logNode(script$$3, cur$$6, indent);
        var v10530 = cur$$6.postComments;
        _this.logComments(script$$3, v10530, indent);
        return cur$$6;
      }
      var _this = this;
      var v17725 = script$$3.locationInfo;
      var v10531 = v17725.lineMap;
      this.logLinemap(v10531);
      var stack = [];
      var v10532 = TypeScript$$8.getAstWalkerFactory();
      v10532.walk(script$$3, pre$$9, post$$6);
      return;
    }
    function AstLogger$$1(logger) {
      this.logger = logger;
      return;
    }
    var v10533 = AstLogger$$1.prototype;
    v10533.logScript = v400;
    var v10534 = AstLogger$$1.prototype;
    v10534.logNode = v401;
    var v10535 = AstLogger$$1.prototype;
    v10535.logComments = v402;
    var v10536 = AstLogger$$1.prototype;
    v10536.logLinemap = v403;
    var v10537 = AstLogger$$1.prototype;
    v10537.addPadding = v404;
    var v10538 = AstLogger$$1.prototype;
    v10538.addLineColumn = v405;
    return AstLogger$$1;
  }
  var AstLogger = v406();
  TypeScript$$8.AstLogger = AstLogger;
  return;
}
function v399(TypeScript$$7) {
  function v398(GetAstPathOptions$$1) {
    GetAstPathOptions$$1._map = [];
    GetAstPathOptions$$1.Default = 0;
    GetAstPathOptions$$1.EdgeInclusive = 1;
    GetAstPathOptions$$1.DontPruneSearchBasedOnPosition = 1 << 1;
    return;
  }
  function v397() {
    function AstPathContext$$1() {
      var v10539 = TypeScript$$7.AstPath;
      var v27001 = new v10539;
      this.path = v27001;
      return;
    }
    return AstPathContext$$1;
  }
  function v396() {
    function v395() {
      var v22183 = this.count();
      var v17726 = v22183 >= 1;
      if (v17726) {
        var v25483 = this.asts;
        var v25988 = this.top;
        var v25484 = v25988 - 0;
        var v24450 = v25483[v25484];
        var v22184 = v24450.nodeType;
        var v24451 = TypeScript$$7.NodeType;
        var v22185 = v24451.Block;
        v17726 = v22184 === v22185;
      }
      var v10540 = v17726;
      if (v10540) {
        var v24452 = this.asts;
        var v25485 = this.top;
        var v24453 = v25485 - 0;
        var v22186 = v24452[v24453];
        var v17727 = v22186.isStatementBlock;
        v10540 = v17727 === false;
      }
      return v10540;
    }
    function v394() {
      var v24454 = this.count();
      var v22187 = v24454 >= 2;
      if (v22187) {
        var v25989 = this.asts;
        var v26226 = this.top;
        var v25990 = v26226 - 0;
        var v25486 = v25989[v25990];
        var v24455 = v25486.nodeType;
        var v25487 = TypeScript$$7.NodeType;
        var v24456 = v25487.List;
        v22187 = v24455 === v24456;
      }
      var v17728 = v22187;
      if (v17728) {
        var v25488 = this.asts;
        var v25991 = this.top;
        var v25489 = v25991 - 1;
        var v24457 = v25488[v25489];
        var v22188 = v24457.nodeType;
        var v24458 = TypeScript$$7.NodeType;
        var v22189 = v24458.New;
        v17728 = v22188 === v22189;
      }
      var v10541 = v17728;
      if (v10541) {
        var v24459 = this.asts;
        var v25490 = this.top;
        var v24460 = v25490 - 1;
        var v22190 = v24459[v24460];
        var v17729 = v22190.arguments;
        var v22191 = this.asts;
        var v24461 = this.top;
        var v22192 = v24461 - 0;
        var v17730 = v22191[v22192];
        v10541 = v17729 === v17730;
      }
      return v10541;
    }
    function v393() {
      var v24462 = this.count();
      var v22193 = v24462 >= 2;
      if (v22193) {
        var v25992 = this.asts;
        var v26227 = this.top;
        var v25993 = v26227 - 0;
        var v25491 = v25992[v25993];
        var v24463 = v25491.nodeType;
        var v25492 = TypeScript$$7.NodeType;
        var v24464 = v25492.List;
        v22193 = v24463 === v24464;
      }
      var v17731 = v22193;
      if (v17731) {
        var v25493 = this.asts;
        var v25994 = this.top;
        var v25494 = v25994 - 1;
        var v24465 = v25493[v25494];
        var v22194 = v24465.nodeType;
        var v24466 = TypeScript$$7.NodeType;
        var v22195 = v24466.Call;
        v17731 = v22194 === v22195;
      }
      var v10542 = v17731;
      if (v10542) {
        var v24467 = this.asts;
        var v25495 = this.top;
        var v24468 = v25495 - 1;
        var v22196 = v24467[v24468];
        var v17732 = v22196.arguments;
        var v22197 = this.asts;
        var v24469 = this.top;
        var v22198 = v24469 - 0;
        var v17733 = v22197[v22198];
        v10542 = v17732 === v17733;
      }
      return v10542;
    }
    function v392() {
      var v24470 = this.count();
      var v22199 = v24470 >= 3;
      if (v22199) {
        var v25995 = this.asts;
        var v26228 = this.top;
        var v25996 = v26228 - 1;
        var v25496 = v25995[v25996];
        var v24471 = v25496.nodeType;
        var v25497 = TypeScript$$7.NodeType;
        var v24472 = v25497.List;
        v22199 = v24471 === v24472;
      }
      var v17734 = v22199;
      if (v17734) {
        var v25498 = this.asts;
        var v25997 = this.top;
        var v25499 = v25997 - 2;
        var v24473 = v25498[v25499];
        var v22200 = v24473.nodeType;
        var v24474 = TypeScript$$7.NodeType;
        var v22201 = v24474.FuncDecl;
        v17734 = v22200 === v22201;
      }
      var v10543 = v17734;
      if (v10543) {
        var v24475 = this.asts;
        var v25500 = this.top;
        var v24476 = v25500 - 2;
        var v22202 = v24475[v24476];
        var v17735 = v22202.arguments;
        var v22203 = this.asts;
        var v24477 = this.top;
        var v22204 = v24477 - 1;
        var v17736 = v22203[v22204];
        v10543 = v17735 === v17736;
      }
      return v10543;
    }
    function v391() {
      var v24478 = this.count();
      var v22205 = v24478 >= 2;
      if (v22205) {
        var v25998 = this.asts;
        var v26229 = this.top;
        var v25999 = v26229 - 0;
        var v25501 = v25998[v25999];
        var v24479 = v25501.nodeType;
        var v25502 = TypeScript$$7.NodeType;
        var v24480 = v25502.List;
        v22205 = v24479 === v24480;
      }
      var v17737 = v22205;
      if (v17737) {
        var v25503 = this.asts;
        var v26000 = this.top;
        var v25504 = v26000 - 1;
        var v24481 = v25503[v25504];
        var v22206 = v24481.nodeType;
        var v24482 = TypeScript$$7.NodeType;
        var v22207 = v24482.FuncDecl;
        v17737 = v22206 === v22207;
      }
      var v10544 = v17737;
      if (v10544) {
        var v24483 = this.asts;
        var v25505 = this.top;
        var v24484 = v25505 - 1;
        var v22208 = v24483[v24484];
        var v17738 = v22208.arguments;
        var v22209 = this.asts;
        var v24485 = this.top;
        var v22210 = v24485 - 0;
        var v17739 = v22209[v22210];
        v10544 = v17738 === v17739;
      }
      return v10544;
    }
    function v390() {
      var v22211 = this.count();
      var v17740 = v22211 >= 1;
      if (v17740) {
        var v25506 = this.asts;
        var v25507 = this.top;
        var v24486 = v25506[v25507];
        var v22212 = v24486.nodeType;
        var v24487 = TypeScript$$7.NodeType;
        var v22213 = v24487.List;
        v17740 = v22212 === v22213;
      }
      var v10545 = v17740;
      if (v10545) {
        var v25508 = this.asts;
        var v25509 = this.top;
        var v24488 = v25508[v25509];
        var v22214 = v24488.members;
        var v17741 = v22214.length;
        v10545 = v17741 === 1;
      }
      return v10545;
    }
    function v389() {
      return this.isBodyOfCase();
    }
    function v388() {
      var v22215 = this.count();
      var v17742 = v22215 >= 2;
      if (v17742) {
        var v25510 = this.asts;
        var v26001 = this.top;
        var v25511 = v26001 - 1;
        var v24489 = v25510[v25511];
        var v22216 = v24489.nodeType;
        var v24490 = TypeScript$$7.NodeType;
        var v22217 = v24490.If;
        v17742 = v22216 === v22217;
      }
      var v10546 = v17742;
      if (v10546) {
        var v24491 = this.asts;
        var v25512 = this.top;
        var v24492 = v25512 - 1;
        var v22218 = v24491[v24492];
        var v17743 = v22218.elseBod;
        var v22219 = this.asts;
        var v24493 = this.top;
        var v22220 = v24493 - 0;
        var v17744 = v22219[v22220];
        v10546 = v17743 == v17744;
      }
      return v10546;
    }
    function v387() {
      var v22221 = this.count();
      var v17745 = v22221 >= 2;
      if (v17745) {
        var v25513 = this.asts;
        var v26002 = this.top;
        var v25514 = v26002 - 1;
        var v24494 = v25513[v25514];
        var v22222 = v24494.nodeType;
        var v24495 = TypeScript$$7.NodeType;
        var v22223 = v24495.If;
        v17745 = v22222 === v22223;
      }
      var v10547 = v17745;
      if (v10547) {
        var v24496 = this.asts;
        var v25515 = this.top;
        var v24497 = v25515 - 1;
        var v22224 = v24496[v24497];
        var v17746 = v22224.thenBod;
        var v22225 = this.asts;
        var v24498 = this.top;
        var v22226 = v24498 - 0;
        var v17747 = v22225[v22226];
        v10547 = v17746 == v17747;
      }
      return v10547;
    }
    function v386() {
      var v17748 = this.count();
      var v10548 = v17748 >= 2;
      if (v10548) {
        var v24499 = this.asts;
        var v25516 = this.top;
        var v24500 = v25516 - 1;
        var v22227 = v24499[v24500];
        var v17749 = v22227.nodeType;
        var v22228 = TypeScript$$7.NodeType;
        var v17750 = v22228.List;
        v10548 = v17749 === v17750;
      }
      return v10548;
    }
    function v385() {
      var v22229 = this.count();
      var v17751 = v22229 >= 2;
      if (v17751) {
        var v25517 = this.asts;
        var v26003 = this.top;
        var v25518 = v26003 - 1;
        var v24501 = v25517[v25518];
        var v22230 = v24501.nodeType;
        var v24502 = TypeScript$$7.NodeType;
        var v22231 = v24502.Member;
        v17751 = v22230 === v22231;
      }
      var v10549 = v17751;
      if (v10549) {
        var v24503 = this.asts;
        var v25519 = this.top;
        var v24504 = v25519 - 1;
        var v22232 = v24503[v24504];
        var v17752 = v22232.operand2;
        var v22233 = this.asts;
        var v24505 = this.top;
        var v22234 = v24505 - 0;
        var v17753 = v22233[v22234];
        v10549 = v17752 === v17753;
      }
      return v10549;
    }
    function v384() {
      var v22235 = this.count();
      var v17754 = v22235 >= 2;
      if (v17754) {
        var v25520 = this.asts;
        var v26004 = this.top;
        var v25521 = v26004 - 1;
        var v24506 = v25520[v25521];
        var v22236 = v24506.nodeType;
        var v24507 = TypeScript$$7.NodeType;
        var v22237 = v24507.Member;
        v17754 = v22236 === v22237;
      }
      var v10550 = v17754;
      if (v10550) {
        var v24508 = this.asts;
        var v25522 = this.top;
        var v24509 = v25522 - 1;
        var v22238 = v24508[v24509];
        var v17755 = v22238.operand1;
        var v22239 = this.asts;
        var v24510 = this.top;
        var v22240 = v24510 - 0;
        var v17756 = v22239[v22240];
        v10550 = v17755 === v17756;
      }
      return v10550;
    }
    function v383() {
      var v24511 = this.count();
      var v22241 = v24511 >= 2;
      if (v22241) {
        var v26005 = this.asts;
        var v26230 = this.top;
        var v26006 = v26230 - 1;
        var v25523 = v26005[v26006];
        var v24512 = v25523.nodeType;
        var v25524 = TypeScript$$7.NodeType;
        var v24513 = v25524.ArrayLit;
        v22241 = v24512 === v24513;
      }
      var v17757 = v22241;
      if (v17757) {
        var v25525 = this.asts;
        var v26007 = this.top;
        var v25526 = v26007 - 0;
        var v24514 = v25525[v25526];
        var v22242 = v24514.nodeType;
        var v24515 = TypeScript$$7.NodeType;
        var v22243 = v24515.List;
        v17757 = v22242 === v22243;
      }
      var v10551 = v17757;
      if (v10551) {
        var v24516 = this.asts;
        var v25527 = this.top;
        var v24517 = v25527 - 1;
        var v22244 = v24516[v24517];
        var v17758 = v22244.operand;
        var v22245 = this.asts;
        var v24518 = this.top;
        var v22246 = v24518 - 0;
        var v17759 = v22245[v22246];
        v10551 = v17758 == v17759;
      }
      return v10551;
    }
    function v382() {
      var v26008 = this.count();
      var v25528 = v26008 >= 4;
      if (v25528) {
        var v26334 = this.asts;
        var v26388 = this.top;
        var v26335 = v26388 - 3;
        var v26231 = v26334[v26335];
        var v26009 = v26231.nodeType;
        var v26232 = TypeScript$$7.NodeType;
        var v26010 = v26232.ObjectLit;
        v25528 = v26009 === v26010;
      }
      var v24519 = v25528;
      if (v24519) {
        var v26233 = this.asts;
        var v26336 = this.top;
        var v26234 = v26336 - 2;
        var v26011 = v26233[v26234];
        var v25529 = v26011.nodeType;
        var v26012 = TypeScript$$7.NodeType;
        var v25530 = v26012.List;
        v24519 = v25529 === v25530;
      }
      var v22247 = v24519;
      if (v22247) {
        var v26013 = this.asts;
        var v26235 = this.top;
        var v26014 = v26235 - 1;
        var v25531 = v26013[v26014];
        var v24520 = v25531.nodeType;
        var v25532 = TypeScript$$7.NodeType;
        var v24521 = v25532.Member;
        v22247 = v24520 === v24521;
      }
      var v17760 = v22247;
      if (v17760) {
        var v25533 = this.asts;
        var v26015 = this.top;
        var v25534 = v26015 - 0;
        var v24522 = v25533[v25534];
        var v22248 = v24522.nodeType;
        var v24523 = TypeScript$$7.NodeType;
        var v22249 = v24523.Name;
        v17760 = v22248 === v22249;
      }
      var v10552 = v17760;
      if (v10552) {
        var v24524 = this.asts;
        var v25535 = this.top;
        var v24525 = v25535 - 3;
        var v22250 = v24524[v24525];
        var v17761 = v22250.operand;
        var v22251 = this.asts;
        var v24526 = this.top;
        var v22252 = v24526 - 2;
        var v17762 = v22251[v22252];
        v10552 = v17761 == v17762;
      }
      return v10552;
    }
    function v381() {
      var v25536 = this.count();
      var v24527 = v25536 >= 3;
      if (v24527) {
        var v26236 = this.asts;
        var v26337 = this.top;
        var v26237 = v26337 - 2;
        var v26016 = v26236[v26237];
        var v25537 = v26016.nodeType;
        var v26017 = TypeScript$$7.NodeType;
        var v25538 = v26017.ObjectLit;
        v24527 = v25537 === v25538;
      }
      var v22253 = v24527;
      if (v22253) {
        var v26018 = this.asts;
        var v26238 = this.top;
        var v26019 = v26238 - 1;
        var v25539 = v26018[v26019];
        var v24528 = v25539.nodeType;
        var v25540 = TypeScript$$7.NodeType;
        var v24529 = v25540.List;
        v22253 = v24528 === v24529;
      }
      var v17763 = v22253;
      if (v17763) {
        var v25541 = this.asts;
        var v26020 = this.top;
        var v25542 = v26020 - 0;
        var v24530 = v25541[v25542];
        var v22254 = v24530.nodeType;
        var v24531 = TypeScript$$7.NodeType;
        var v22255 = v24531.Member;
        v17763 = v22254 === v22255;
      }
      var v10553 = v17763;
      if (v10553) {
        var v24532 = this.asts;
        var v25543 = this.top;
        var v24533 = v25543 - 2;
        var v22256 = v24532[v24533];
        var v17764 = v22256.operand;
        var v22257 = this.asts;
        var v24534 = this.top;
        var v22258 = v24534 - 1;
        var v17765 = v22257[v22258];
        v10553 = v17764 == v17765;
      }
      return v10553;
    }
    function v380() {
      var v25544 = this.count();
      var v24535 = v25544 >= 2;
      if (v24535) {
        var v26239 = this.asts;
        var v26338 = this.top;
        var v26240 = v26338 - 1;
        var v26021 = v26239[v26240];
        var v25545 = v26021.nodeType;
        var v26022 = TypeScript$$7.NodeType;
        var v25546 = v26022.ObjectLit;
        v24535 = v25545 === v25546;
      }
      var v22259 = v24535;
      if (v22259) {
        var v26023 = this.asts;
        var v26241 = this.top;
        var v26024 = v26241 - 0;
        var v25547 = v26023[v26024];
        var v24536 = v25547.nodeType;
        var v25548 = TypeScript$$7.NodeType;
        var v24537 = v25548.List;
        v22259 = v24536 === v24537;
      }
      var v17766 = v22259;
      if (v17766) {
        var v25549 = this.asts;
        var v26025 = this.top;
        var v25550 = v26025 - 1;
        var v24538 = v25549[v25550];
        var v22260 = v24538.operand;
        var v24539 = this.asts;
        var v25551 = this.top;
        var v24540 = v25551 - 0;
        var v22261 = v24539[v24540];
        v17766 = v22260 == v22261;
      }
      var v10554 = v17766;
      if (v10554) {
        var v25552 = this.asts;
        var v26026 = this.top;
        var v25553 = v26026 - 0;
        var v24541 = v25552[v25553];
        var v22262 = v24541.members;
        var v17767 = v22262.length;
        v10554 = v17767 == 0;
      }
      return v10554;
    }
    function v379() {
      return this.isListOfObjectLit();
    }
    function v378() {
      var v24542 = this.count();
      var v22263 = v24542 >= 2;
      if (v22263) {
        var v26027 = this.asts;
        var v26242 = this.top;
        var v26028 = v26242 - 1;
        var v25554 = v26027[v26028];
        var v24543 = v25554.nodeType;
        var v25555 = TypeScript$$7.NodeType;
        var v24544 = v25555.ObjectLit;
        v22263 = v24543 === v24544;
      }
      var v17768 = v22263;
      if (v17768) {
        var v25556 = this.asts;
        var v26029 = this.top;
        var v25557 = v26029 - 0;
        var v24545 = v25556[v25557];
        var v22264 = v24545.nodeType;
        var v24546 = TypeScript$$7.NodeType;
        var v22265 = v24546.List;
        v17768 = v22264 === v22265;
      }
      var v10555 = v17768;
      if (v10555) {
        var v24547 = this.asts;
        var v25558 = this.top;
        var v24548 = v25558 - 1;
        var v22266 = v24547[v24548];
        var v17769 = v22266.operand;
        var v22267 = this.asts;
        var v24549 = this.top;
        var v22268 = v24549 - 0;
        var v17770 = v22267[v22268];
        v10555 = v17769 == v17770;
      }
      return v10555;
    }
    function v377() {
      var v25559 = this.count();
      var v24550 = v25559 >= 3;
      if (v24550) {
        var v26243 = this.asts;
        var v26339 = this.top;
        var v26244 = v26339 - 2;
        var v26030 = v26243[v26244];
        var v25560 = v26030.nodeType;
        var v26031 = TypeScript$$7.NodeType;
        var v25561 = v26031.Switch;
        v24550 = v25560 === v25561;
      }
      var v22269 = v24550;
      if (v22269) {
        var v26032 = this.asts;
        var v26245 = this.top;
        var v26033 = v26245 - 1;
        var v25562 = v26032[v26033];
        var v24551 = v25562.nodeType;
        var v25563 = TypeScript$$7.NodeType;
        var v24552 = v25563.List;
        v22269 = v24551 === v24552;
      }
      var v17771 = v22269;
      if (v17771) {
        var v25564 = this.asts;
        var v26034 = this.top;
        var v25565 = v26034 - 2;
        var v24553 = v25564[v25565];
        var v22270 = v24553.caseList;
        var v24554 = this.asts;
        var v25566 = this.top;
        var v24555 = v25566 - 1;
        var v22271 = v24554[v24555];
        v17771 = v22270 == v22271;
      }
      var v10556 = v17771;
      if (v10556) {
        var v24556 = this.asts;
        var v25567 = this.top;
        var v24557 = v25567 - 2;
        var v22272 = v24556[v24557];
        var v17772 = v22272.defaultCase;
        var v22273 = this.asts;
        var v24558 = this.top;
        var v22274 = v24558 - 0;
        var v17773 = v22273[v22274];
        v10556 = v17772 == v17773;
      }
      return v10556;
    }
    function v376() {
      var v24559 = this.count();
      var v22275 = v24559 >= 3;
      if (v22275) {
        var v26035 = this.asts;
        var v26246 = this.top;
        var v26036 = v26246 - 2;
        var v25568 = v26035[v26036];
        var v24560 = v25568.nodeType;
        var v25569 = TypeScript$$7.NodeType;
        var v24561 = v25569.Switch;
        v22275 = v24560 === v24561;
      }
      var v17774 = v22275;
      if (v17774) {
        var v25570 = this.asts;
        var v26037 = this.top;
        var v25571 = v26037 - 1;
        var v24562 = v25570[v25571];
        var v22276 = v24562.nodeType;
        var v24563 = TypeScript$$7.NodeType;
        var v22277 = v24563.List;
        v17774 = v22276 === v22277;
      }
      var v10557 = v17774;
      if (v10557) {
        var v24564 = this.asts;
        var v25572 = this.top;
        var v24565 = v25572 - 2;
        var v22278 = v24564[v24565];
        var v17775 = v22278.caseList;
        var v22279 = this.asts;
        var v24566 = this.top;
        var v22280 = v24566 - 1;
        var v17776 = v22279[v22280];
        v10557 = v17775 == v17776;
      }
      return v10557;
    }
    function v375() {
      var v22281 = this.count();
      var v17777 = v22281 >= 2;
      if (v17777) {
        var v25573 = this.asts;
        var v26038 = this.top;
        var v25574 = v26038 - 1;
        var v24567 = v25573[v25574];
        var v22282 = v24567.nodeType;
        var v24568 = TypeScript$$7.NodeType;
        var v22283 = v24568.Finally;
        v17777 = v22282 === v22283;
      }
      var v10558 = v17777;
      if (v10558) {
        var v24569 = this.asts;
        var v25575 = this.top;
        var v24570 = v25575 - 1;
        var v22284 = v24569[v24570];
        var v17778 = v22284.body;
        var v22285 = this.asts;
        var v24571 = this.top;
        var v22286 = v24571 - 0;
        var v17779 = v22285[v22286];
        v10558 = v17778 == v17779;
      }
      return v10558;
    }
    function v374() {
      var v22287 = this.count();
      var v17780 = v22287 >= 2;
      if (v17780) {
        var v25576 = this.asts;
        var v26039 = this.top;
        var v25577 = v26039 - 1;
        var v24572 = v25576[v25577];
        var v22288 = v24572.nodeType;
        var v24573 = TypeScript$$7.NodeType;
        var v22289 = v24573.With;
        v17780 = v22288 === v22289;
      }
      var v10559 = v17780;
      if (v10559) {
        var v24574 = this.asts;
        var v25578 = this.top;
        var v24575 = v25578 - 1;
        var v22290 = v24574[v24575];
        var v17781 = v22290.body;
        var v22291 = this.asts;
        var v24576 = this.top;
        var v22292 = v24576 - 0;
        var v17782 = v22291[v22292];
        v10559 = v17781 == v17782;
      }
      return v10559;
    }
    function v373() {
      var v22293 = this.count();
      var v17783 = v22293 >= 2;
      if (v17783) {
        var v25579 = this.asts;
        var v26040 = this.top;
        var v25580 = v26040 - 1;
        var v24577 = v25579[v25580];
        var v22294 = v24577.nodeType;
        var v24578 = TypeScript$$7.NodeType;
        var v22295 = v24578.ForIn;
        v17783 = v22294 === v22295;
      }
      var v10560 = v17783;
      if (v10560) {
        var v24579 = this.asts;
        var v25581 = this.top;
        var v24580 = v25581 - 1;
        var v22296 = v24579[v24580];
        var v17784 = v22296.body;
        var v22297 = this.asts;
        var v24581 = this.top;
        var v22298 = v24581 - 0;
        var v17785 = v22297[v22298];
        v10560 = v17784 == v17785;
      }
      return v10560;
    }
    function v372() {
      var v22299 = this.count();
      var v17786 = v22299 >= 2;
      if (v17786) {
        var v25582 = this.asts;
        var v26041 = this.top;
        var v25583 = v26041 - 1;
        var v24582 = v25582[v25583];
        var v22300 = v24582.nodeType;
        var v24583 = TypeScript$$7.NodeType;
        var v22301 = v24583.While;
        v17786 = v22300 === v22301;
      }
      var v10561 = v17786;
      if (v10561) {
        var v24584 = this.asts;
        var v25584 = this.top;
        var v24585 = v25584 - 1;
        var v22302 = v24584[v24585];
        var v17787 = v22302.body;
        var v22303 = this.asts;
        var v24586 = this.top;
        var v22304 = v24586 - 0;
        var v17788 = v22303[v22304];
        v10561 = v17787 == v17788;
      }
      return v10561;
    }
    function v371() {
      var v22305 = this.count();
      var v17789 = v22305 >= 2;
      if (v17789) {
        var v25585 = this.asts;
        var v26042 = this.top;
        var v25586 = v26042 - 1;
        var v24587 = v25585[v25586];
        var v22306 = v24587.nodeType;
        var v24588 = TypeScript$$7.NodeType;
        var v22307 = v24588.DoWhile;
        v17789 = v22306 === v22307;
      }
      var v10562 = v17789;
      if (v10562) {
        var v24589 = this.asts;
        var v25587 = this.top;
        var v24590 = v25587 - 1;
        var v22308 = v24589[v24590];
        var v17790 = v22308.body;
        var v22309 = this.asts;
        var v24591 = this.top;
        var v22310 = v24591 - 0;
        var v17791 = v22309[v22310];
        v10562 = v17790 == v17791;
      }
      return v10562;
    }
    function v370() {
      var v22311 = this.count();
      var v17792 = v22311 >= 2;
      if (v17792) {
        var v25588 = this.asts;
        var v26043 = this.top;
        var v25589 = v26043 - 1;
        var v24592 = v25588[v25589];
        var v22312 = v24592.nodeType;
        var v24593 = TypeScript$$7.NodeType;
        var v22313 = v24593.Catch;
        v17792 = v22312 === v22313;
      }
      var v10563 = v17792;
      if (v10563) {
        var v24594 = this.asts;
        var v25590 = this.top;
        var v24595 = v25590 - 1;
        var v22314 = v24594[v24595];
        var v17793 = v22314.body;
        var v22315 = this.asts;
        var v24596 = this.top;
        var v22316 = v24596 - 0;
        var v17794 = v22315[v22316];
        v10563 = v17793 == v17794;
      }
      return v10563;
    }
    function v369() {
      var v22317 = this.count();
      var v17795 = v22317 >= 2;
      if (v17795) {
        var v25591 = this.asts;
        var v26044 = this.top;
        var v25592 = v26044 - 1;
        var v24597 = v25591[v25592];
        var v22318 = v24597.nodeType;
        var v24598 = TypeScript$$7.NodeType;
        var v22319 = v24598.Try;
        v17795 = v22318 === v22319;
      }
      var v10564 = v17795;
      if (v10564) {
        var v24599 = this.asts;
        var v25593 = this.top;
        var v24600 = v25593 - 1;
        var v22320 = v24599[v24600];
        var v17796 = v22320.body;
        var v22321 = this.asts;
        var v24601 = this.top;
        var v22322 = v24601 - 0;
        var v17797 = v22321[v22322];
        v10564 = v17796 == v17797;
      }
      return v10564;
    }
    function v368() {
      var v22323 = this.count();
      var v17798 = v22323 >= 2;
      if (v17798) {
        var v25594 = this.asts;
        var v26045 = this.top;
        var v25595 = v26045 - 1;
        var v24602 = v25594[v25595];
        var v22324 = v24602.nodeType;
        var v24603 = TypeScript$$7.NodeType;
        var v22325 = v24603.Case;
        v17798 = v22324 === v22325;
      }
      var v10565 = v17798;
      if (v10565) {
        var v24604 = this.asts;
        var v25596 = this.top;
        var v24605 = v25596 - 1;
        var v22326 = v24604[v24605];
        var v17799 = v22326.body;
        var v22327 = this.asts;
        var v24606 = this.top;
        var v22328 = v24606 - 0;
        var v17800 = v22327[v22328];
        v10565 = v17799 == v17800;
      }
      return v10565;
    }
    function v367() {
      var v22329 = this.count();
      var v17801 = v22329 >= 2;
      if (v17801) {
        var v25597 = this.asts;
        var v26046 = this.top;
        var v25598 = v26046 - 1;
        var v24607 = v25597[v25598];
        var v22330 = v24607.nodeType;
        var v24608 = TypeScript$$7.NodeType;
        var v22331 = v24608.For;
        v17801 = v22330 === v22331;
      }
      var v10566 = v17801;
      if (v10566) {
        var v24609 = this.asts;
        var v25599 = this.top;
        var v24610 = v25599 - 1;
        var v22332 = v24609[v24610];
        var v17802 = v22332.body;
        var v22333 = this.asts;
        var v24611 = this.top;
        var v22334 = v24611 - 0;
        var v17803 = v22333[v22334];
        v10566 = v17802 == v17803;
      }
      return v10566;
    }
    function v366() {
      var v22335 = this.count();
      var v17804 = v22335 >= 2;
      if (v17804) {
        var v25600 = this.asts;
        var v26047 = this.top;
        var v25601 = v26047 - 1;
        var v24612 = v25600[v25601];
        var v22336 = v24612.nodeType;
        var v24613 = TypeScript$$7.NodeType;
        var v22337 = v24613.Block;
        v17804 = v22336 === v22337;
      }
      var v10567 = v17804;
      if (v10567) {
        var v24614 = this.asts;
        var v25602 = this.top;
        var v24615 = v25602 - 1;
        var v22338 = v24614[v24615];
        var v17805 = v22338.statements;
        var v22339 = this.asts;
        var v24616 = this.top;
        var v22340 = v24616 - 0;
        var v17806 = v22339[v22340];
        v10567 = v17805 == v17806;
      }
      return v10567;
    }
    function v365() {
      var v22341 = this.count();
      var v17807 = v22341 >= 2;
      if (v17807) {
        var v25603 = this.asts;
        var v26048 = this.top;
        var v25604 = v26048 - 1;
        var v24617 = v25603[v25604];
        var v22342 = v24617.nodeType;
        var v24618 = TypeScript$$7.NodeType;
        var v22343 = v24618.InterfaceDeclaration;
        v17807 = v22342 === v22343;
      }
      var v10568 = v17807;
      if (v10568) {
        var v24619 = this.asts;
        var v25605 = this.top;
        var v24620 = v25605 - 1;
        var v22344 = v24619[v24620];
        var v17808 = v22344.members;
        var v22345 = this.asts;
        var v24621 = this.top;
        var v22346 = v24621 - 0;
        var v17809 = v22345[v22346];
        v10568 = v17808 == v17809;
      }
      return v10568;
    }
    function v364() {
      var v22347 = this.count();
      var v17810 = v22347 >= 2;
      if (v17810) {
        var v25606 = this.asts;
        var v26049 = this.top;
        var v25607 = v26049 - 1;
        var v24622 = v25606[v25607];
        var v22348 = v24622.nodeType;
        var v24623 = TypeScript$$7.NodeType;
        var v22349 = v24623.FuncDecl;
        v17810 = v22348 === v22349;
      }
      var v10569 = v17810;
      if (v10569) {
        var v24624 = this.asts;
        var v25608 = this.top;
        var v24625 = v25608 - 1;
        var v22350 = v24624[v24625];
        var v17811 = v22350.bod;
        var v22351 = this.asts;
        var v24626 = this.top;
        var v22352 = v24626 - 0;
        var v17812 = v22351[v22352];
        v10569 = v17811 == v17812;
      }
      return v10569;
    }
    function v363() {
      var v22353 = this.count();
      var v17813 = v22353 >= 2;
      if (v17813) {
        var v25609 = this.asts;
        var v26050 = this.top;
        var v25610 = v26050 - 1;
        var v24627 = v25609[v25610];
        var v22354 = v24627.nodeType;
        var v24628 = TypeScript$$7.NodeType;
        var v22355 = v24628.ClassDeclaration;
        v17813 = v22354 === v22355;
      }
      var v10570 = v17813;
      if (v10570) {
        var v24629 = this.asts;
        var v25611 = this.top;
        var v24630 = v25611 - 1;
        var v22356 = v24629[v24630];
        var v17814 = v22356.members;
        var v22357 = this.asts;
        var v24631 = this.top;
        var v22358 = v24631 - 0;
        var v17815 = v22357[v22358];
        v10570 = v17814 == v17815;
      }
      return v10570;
    }
    function v362() {
      var v22359 = this.count();
      var v17816 = v22359 >= 2;
      if (v17816) {
        var v25612 = this.asts;
        var v26051 = this.top;
        var v25613 = v26051 - 1;
        var v24632 = v25612[v25613];
        var v22360 = v24632.nodeType;
        var v24633 = TypeScript$$7.NodeType;
        var v22361 = v24633.ModuleDeclaration;
        v17816 = v22360 === v22361;
      }
      var v10571 = v17816;
      if (v10571) {
        var v24634 = this.asts;
        var v25614 = this.top;
        var v24635 = v25614 - 1;
        var v22362 = v24634[v24635];
        var v17817 = v22362.members;
        var v22363 = this.asts;
        var v24636 = this.top;
        var v22364 = v24636 - 0;
        var v17818 = v22363[v22364];
        v10571 = v17817 == v17818;
      }
      return v10571;
    }
    function v361() {
      var v22365 = this.count();
      var v17819 = v22365 >= 2;
      if (v17819) {
        var v25615 = this.asts;
        var v26052 = this.top;
        var v25616 = v26052 - 1;
        var v24637 = v25615[v25616];
        var v22366 = v24637.nodeType;
        var v24638 = TypeScript$$7.NodeType;
        var v22367 = v24638.Switch;
        v17819 = v22366 === v22367;
      }
      var v10572 = v17819;
      if (v10572) {
        var v24639 = this.asts;
        var v25617 = this.top;
        var v24640 = v25617 - 1;
        var v22368 = v24639[v24640];
        var v17820 = v22368.caseList;
        var v22369 = this.asts;
        var v24641 = this.top;
        var v22370 = v24641 - 0;
        var v17821 = v22369[v22370];
        v10572 = v17820 == v17821;
      }
      return v10572;
    }
    function v360() {
      var v22371 = this.count();
      var v17822 = v22371 >= 2;
      if (v17822) {
        var v25618 = this.asts;
        var v26053 = this.top;
        var v25619 = v26053 - 1;
        var v24642 = v25618[v25619];
        var v22372 = v24642.nodeType;
        var v24643 = TypeScript$$7.NodeType;
        var v22373 = v24643.Script;
        v17822 = v22372 === v22373;
      }
      var v10573 = v17822;
      if (v10573) {
        var v24644 = this.asts;
        var v25620 = this.top;
        var v24645 = v25620 - 1;
        var v22374 = v24644[v24645];
        var v17823 = v22374.bod;
        var v22375 = this.asts;
        var v24646 = this.top;
        var v22376 = v24646 - 0;
        var v17824 = v22375[v22376];
        v10573 = v17823 == v17824;
      }
      return v10573;
    }
    function v359() {
      var v25621 = this.count();
      var v24647 = v25621 >= 2;
      if (v24647) {
        var v26247 = this.asts;
        var v26340 = this.top;
        var v26248 = v26340 - 0;
        var v26054 = v26247[v26248];
        var v25622 = v26054.nodeType;
        var v26055 = TypeScript$$7.NodeType;
        var v25623 = v26055.List;
        v24647 = v25622 === v25623;
      }
      var v22377 = v24647;
      if (v22377) {
        var v26056 = this.asts;
        var v26249 = this.top;
        var v26057 = v26249 - 1;
        var v25624 = v26056[v26057];
        var v24648 = v25624.nodeType;
        var v25625 = TypeScript$$7.NodeType;
        var v24649 = v25625.ModuleDeclaration;
        v22377 = v24648 === v24649;
      }
      var v17825 = v22377;
      if (v17825) {
        var v25626 = this.asts;
        var v26058 = this.top;
        var v25627 = v26058 - 1;
        var v24650 = v25626[v25627];
        var v22378 = v24650.members;
        var v24651 = this.asts;
        var v25628 = this.top;
        var v24652 = v25628 - 0;
        var v22379 = v24651[v24652];
        v17825 = v22378 == v22379;
      }
      var v10574 = v17825;
      if (v10574) {
        var v24653 = this.asts;
        var v25629 = this.top;
        var v24654 = v25629 - 1;
        var v22380 = v24653[v24654];
        var v17826 = v22380.modFlags;
        var v22381 = TypeScript$$7.ModuleFlags;
        var v17827 = v22381.IsWholeFile;
        v10574 = TypeScript$$7.hasFlag(v17826, v17827);
      }
      return v10574;
    }
    function v358() {
      var v22382 = this.count();
      var v17828 = v22382 >= 1;
      if (v17828) {
        var v25630 = this.asts;
        var v25631 = this.top;
        var v24655 = v25630[v25631];
        var v22383 = v24655.nodeType;
        var v24656 = TypeScript$$7.NodeType;
        var v22384 = v24656.ModuleDeclaration;
        v17828 = v22383 === v22384;
      }
      var v10575 = v17828;
      if (v10575) {
        var v24657 = this.asts;
        var v24658 = this.top;
        var v22385 = v24657[v24658];
        var v17829 = v22385.modFlags;
        var v22386 = TypeScript$$7.ModuleFlags;
        var v17830 = v22386.IsWholeFile;
        v10575 = TypeScript$$7.hasFlag(v17829, v17830);
      }
      return v10575;
    }
    function v357() {
      var v10576 = this.asts;
      var ast$$13 = lastOf(v10576);
      var v24659 = this.count();
      var v22387 = v24659 >= 3;
      if (v22387) {
        var v25632 = this.asts;
        var v25633 = this.top;
        var v24660 = v25632[v25633];
        v22387 = v24660 === ast$$13;
      }
      var v17831 = v22387;
      if (v17831) {
        var v25634 = this.asts;
        var v26059 = this.top;
        var v25635 = v26059 - 1;
        var v24661 = v25634[v25635];
        var v22388 = v24661.nodeType;
        var v24662 = TypeScript$$7.NodeType;
        var v22389 = v24662.List;
        v17831 = v22388 === v22389;
      }
      var v10577 = v17831;
      if (v10577) {
        var v24663 = this.asts;
        var v25636 = this.top;
        var v24664 = v25636 - 2;
        var v22390 = v24663[v24664];
        var v17832 = v22390.nodeType;
        var v22391 = TypeScript$$7.NodeType;
        var v17833 = v22391.InterfaceDeclaration;
        v10577 = v17832 === v17833;
      }
      return v10577;
    }
    function v356() {
      var v10578 = this.asts;
      var ast$$12 = lastOf(v10578);
      var v26389 = this.count();
      var v26341 = v26389 >= 5;
      if (v26341) {
        var v26414 = this.asts;
        var v26415 = this.top;
        var v26390 = v26414[v26415];
        v26341 = v26390 === ast$$12;
      }
      var v26250 = v26341;
      if (v26250) {
        var v26416 = this.asts;
        var v26430 = this.top;
        var v26417 = v26430 - 1;
        var v26391 = v26416[v26417];
        var v26342 = v26391.nodeType;
        var v26392 = TypeScript$$7.NodeType;
        var v26343 = v26392.List;
        v26250 = v26342 === v26343;
      }
      var v26060 = v26250;
      if (v26060) {
        var v26393 = this.asts;
        var v26418 = this.top;
        var v26394 = v26418 - 2;
        var v26344 = v26393[v26394];
        var v26251 = v26344.nodeType;
        var v26345 = TypeScript$$7.NodeType;
        var v26252 = v26345.FuncDecl;
        v26060 = v26251 === v26252;
      }
      var v25637 = v26060;
      if (v25637) {
        var v26346 = this.asts;
        var v26395 = this.top;
        var v26347 = v26395 - 3;
        var v26253 = v26346[v26347];
        var v26061 = v26253.nodeType;
        var v26254 = TypeScript$$7.NodeType;
        var v26062 = v26254.List;
        v25637 = v26061 === v26062;
      }
      var v24665 = v25637;
      if (v24665) {
        var v26255 = this.asts;
        var v26348 = this.top;
        var v26256 = v26348 - 4;
        var v26063 = v26255[v26256];
        var v25638 = v26063.nodeType;
        var v26064 = TypeScript$$7.NodeType;
        var v25639 = v26064.ClassDeclaration;
        v24665 = v25638 === v25639;
      }
      var v22392 = v24665;
      if (v22392) {
        var v25640 = this.asts;
        var v26065 = this.top;
        var v25641 = v26065 - 2;
        var v24666 = v25640[v25641];
        v22392 = v24666.isConstructor;
      }
      var v17834 = v22392;
      if (v17834) {
        var v25642 = this.asts;
        var v26066 = this.top;
        var v25643 = v26066 - 2;
        var v24667 = v25642[v25643];
        var v22393 = v24667.arguments;
        var v24668 = this.asts;
        var v25644 = this.top;
        var v24669 = v25644 - 1;
        var v22394 = v24668[v24669];
        v17834 = v22393 === v22394;
      }
      var v10579 = v17834;
      if (v10579) {
        var v24670 = this.asts;
        var v25645 = this.top;
        var v24671 = v25645 - 4;
        var v22395 = v24670[v24671];
        var v17835 = v22395.constructorDecl;
        var v22396 = this.asts;
        var v24672 = this.top;
        var v22397 = v24672 - 2;
        var v17836 = v22396[v22397];
        v10579 = v17835 === v17836;
      }
      return v10579;
    }
    function v355() {
      var v10580 = this.asts;
      var ast$$11 = lastOf(v10580);
      var v24673 = this.count();
      var v22398 = v24673 >= 3;
      if (v22398) {
        var v25646 = this.asts;
        var v25647 = this.top;
        var v24674 = v25646[v25647];
        v22398 = v24674 === ast$$11;
      }
      var v17837 = v22398;
      if (v17837) {
        var v25648 = this.asts;
        var v26067 = this.top;
        var v25649 = v26067 - 1;
        var v24675 = v25648[v25649];
        var v22399 = v24675.nodeType;
        var v24676 = TypeScript$$7.NodeType;
        var v22400 = v24676.List;
        v17837 = v22399 === v22400;
      }
      var v10581 = v17837;
      if (v10581) {
        var v24677 = this.asts;
        var v25650 = this.top;
        var v24678 = v25650 - 2;
        var v22401 = v24677[v24678];
        var v17838 = v22401.nodeType;
        var v22402 = TypeScript$$7.NodeType;
        var v17839 = v22402.ClassDeclaration;
        v10581 = v17838 === v17839;
      }
      return v10581;
    }
    function v354() {
      var v10582 = this.asts;
      var ast$$10 = lastOf(v10582);
      var v24679 = this.count();
      var v22403 = v24679 >= 3;
      if (v22403) {
        var v25651 = this.asts;
        var v25652 = this.top;
        var v24680 = v25651[v25652];
        v22403 = v24680 === ast$$10;
      }
      var v17840 = v22403;
      if (v17840) {
        var v25653 = this.asts;
        var v26068 = this.top;
        var v25654 = v26068 - 1;
        var v24681 = v25653[v25654];
        var v22404 = v24681.nodeType;
        var v24682 = TypeScript$$7.NodeType;
        var v22405 = v24682.List;
        v17840 = v22404 === v22405;
      }
      var v10583 = v17840;
      if (v10583) {
        var v24683 = this.asts;
        var v25655 = this.top;
        var v24684 = v25655 - 2;
        var v22406 = v24683[v24684];
        var v17841 = v22406.nodeType;
        var v22407 = TypeScript$$7.NodeType;
        var v17842 = v22407.ModuleDeclaration;
        v10583 = v17841 === v17842;
      }
      return v10583;
    }
    function v353() {
      var v10584 = this.asts;
      var ast$$9 = lastOf(v10584);
      var v24685 = this.count();
      var v22408 = v24685 >= 3;
      if (v22408) {
        var v25656 = this.asts;
        var v25657 = this.top;
        var v24686 = v25656[v25657];
        v22408 = v24686 === ast$$9;
      }
      var v17843 = v22408;
      if (v17843) {
        var v25658 = this.asts;
        var v26069 = this.top;
        var v25659 = v26069 - 1;
        var v24687 = v25658[v25659];
        var v22409 = v24687.nodeType;
        var v24688 = TypeScript$$7.NodeType;
        var v22410 = v24688.List;
        v17843 = v22409 === v22410;
      }
      var v10585 = v17843;
      if (v10585) {
        var v24689 = this.asts;
        var v25660 = this.top;
        var v24690 = v25660 - 2;
        var v22411 = v24689[v24690];
        var v17844 = v22411.nodeType;
        var v22412 = TypeScript$$7.NodeType;
        var v17845 = v22412.Script;
        v10585 = v17844 === v17845;
      }
      return v10585;
    }
    function v352() {
      var v22413 = this.ast();
      var v17846 = v22413 === null;
      var v22415 = !v17846;
      if (v22415) {
        var v22414 = this.parent();
        v17846 = v22414 === null;
      }
      var v10586 = v17846;
      if (v10586) {
        return false;
      }
      var v24691 = this.ast();
      var v22416 = v24691.nodeType;
      var v24692 = TypeScript$$7.NodeType;
      var v22417 = v24692.Name;
      var v17847 = v22416 === v22417;
      if (v17847) {
        var v24693 = this.parent();
        var v22418 = v24693.nodeType;
        var v24694 = TypeScript$$7.NodeType;
        var v22419 = v24694.FuncDecl;
        v17847 = v22418 === v22419;
      }
      var v10587 = v17847;
      if (v10587) {
        var v22420 = this.parent();
        var v17848 = v22420.name;
        var v17849 = this.ast();
        v10587 = v17848 === v17849;
      }
      return v10587;
    }
    function v351() {
      var v22421 = this.ast();
      var v17850 = v22421 === null;
      var v22423 = !v17850;
      if (v22423) {
        var v22422 = this.parent();
        v17850 = v22422 === null;
      }
      var v10588 = v17850;
      if (v10588) {
        return false;
      }
      var v24695 = this.ast();
      var v22424 = v24695.nodeType;
      var v24696 = TypeScript$$7.NodeType;
      var v22425 = v24696.Name;
      var v17851 = v22424 === v22425;
      if (v17851) {
        var v24697 = this.parent();
        var v22426 = v24697.nodeType;
        var v24698 = TypeScript$$7.NodeType;
        var v22427 = v24698.ModuleDeclaration;
        v17851 = v22426 === v22427;
      }
      var v10589 = v17851;
      if (v10589) {
        var v22428 = this.parent();
        var v17852 = v22428.name;
        var v17853 = this.ast();
        v10589 = v17852 === v17853;
      }
      return v10589;
    }
    function v350() {
      var v22429 = this.ast();
      var v17854 = v22429 === null;
      var v22431 = !v17854;
      if (v22431) {
        var v22430 = this.parent();
        v17854 = v22430 === null;
      }
      var v10590 = v17854;
      if (v10590) {
        return false;
      }
      var v24699 = this.ast();
      var v22432 = v24699.nodeType;
      var v24700 = TypeScript$$7.NodeType;
      var v22433 = v24700.Name;
      var v17855 = v22432 === v22433;
      if (v17855) {
        var v24701 = this.parent();
        var v22434 = v24701.nodeType;
        var v24702 = TypeScript$$7.NodeType;
        var v22435 = v24702.VarDecl;
        v17855 = v22434 === v22435;
      }
      var v10591 = v17855;
      if (v10591) {
        var v22436 = this.parent();
        var v17856 = v22436.id;
        var v17857 = this.ast();
        v10591 = v17856 === v17857;
      }
      return v10591;
    }
    function v349() {
      var v22437 = this.ast();
      var v17858 = v22437 === null;
      var v22439 = !v17858;
      if (v22439) {
        var v22438 = this.parent();
        v17858 = v22438 === null;
      }
      var v10592 = v17858;
      if (v10592) {
        return false;
      }
      var v24703 = this.ast();
      var v22440 = v24703.nodeType;
      var v24704 = TypeScript$$7.NodeType;
      var v22441 = v24704.Name;
      var v17859 = v22440 === v22441;
      if (v17859) {
        var v24705 = this.parent();
        var v22442 = v24705.nodeType;
        var v24706 = TypeScript$$7.NodeType;
        var v22443 = v24706.ArgDecl;
        v17859 = v22442 === v22443;
      }
      var v10593 = v17859;
      if (v10593) {
        var v22444 = this.parent();
        var v17860 = v22444.id;
        var v17861 = this.ast();
        v10593 = v17860 === v17861;
      }
      return v10593;
    }
    function v348() {
      var v22445 = this.ast();
      var v17862 = v22445 === null;
      var v22447 = !v17862;
      if (v22447) {
        var v22446 = this.parent();
        v17862 = v22446 === null;
      }
      var v10594 = v17862;
      if (v10594) {
        return false;
      }
      var v24707 = this.ast();
      var v22448 = v24707.nodeType;
      var v24708 = TypeScript$$7.NodeType;
      var v22449 = v24708.Name;
      var v17863 = v22448 === v22449;
      if (v17863) {
        var v24709 = this.parent();
        var v22450 = v24709.nodeType;
        var v24710 = TypeScript$$7.NodeType;
        var v22451 = v24710.InterfaceDeclaration;
        v17863 = v22450 === v22451;
      }
      var v10595 = v17863;
      if (v10595) {
        var v22452 = this.parent();
        var v17864 = v22452.name;
        var v17865 = this.ast();
        v10595 = v17864 === v17865;
      }
      return v10595;
    }
    function v347() {
      var v22453 = this.ast();
      var v17866 = v22453 === null;
      var v22455 = !v17866;
      if (v22455) {
        var v22454 = this.parent();
        v17866 = v22454 === null;
      }
      var v10596 = v17866;
      if (v10596) {
        return false;
      }
      var v24711 = this.ast();
      var v22456 = v24711.nodeType;
      var v24712 = TypeScript$$7.NodeType;
      var v22457 = v24712.Name;
      var v17867 = v22456 === v22457;
      if (v17867) {
        var v24713 = this.parent();
        var v22458 = v24713.nodeType;
        var v24714 = TypeScript$$7.NodeType;
        var v22459 = v24714.ClassDeclaration;
        v17867 = v22458 === v22459;
      }
      var v10597 = v17867;
      if (v10597) {
        var v22460 = this.parent();
        var v17868 = v22460.name;
        var v17869 = this.ast();
        v10597 = v17868 === v17869;
      }
      return v10597;
    }
    function v346(index$$43) {
      var v10598 = this.asts;
      return v10598[index$$43];
    }
    function v345() {
      var v10599 = this.top;
      return v10599 + 1;
    }
    function v344() {
      var v10600 = this.asts;
      var v22461 = this.asts;
      var v17870 = v22461.length;
      var v17871 = this.top;
      var v10601 = v17870 - v17871;
      return AstPath$$1.reverseIndexOf(v10600, v10601);
    }
    function v343() {
      var v10602 = this.asts;
      var v22462 = this.asts;
      var v17872 = v22462.length;
      var v22463 = this.top;
      var v17873 = v22463 + 1;
      var v10603 = v17872 - v17873;
      return AstPath$$1.reverseIndexOf(v10602, v10603);
    }
    function v342() {
      var v17874 = this.ast();
      var v10605 = v17874 == null;
      if (v10605) {
        var v10604 = TypeScript$$7.NodeType;
        return v10604.None;
      }
      var v10606 = this.ast();
      return v10606.nodeType;
    }
    function v341() {
      var v17875 = this.top;
      var v24715 = this.ast;
      var v22464 = v24715.length;
      var v17876 = v22464 - 1;
      var v10607 = v17875 == v17876;
      if (v10607) {
        throw new Error("Invalid call to 'down'");
      }
      this.top++;
      return;
    }
    function v340() {
      var v17877 = this.top;
      var v10608 = v17877 <= -1;
      if (v10608) {
        throw new Error("Invalid call to 'up'");
      }
      this.top--;
      return;
    }
    function v339(ast$$8) {
      var v22465 = this.asts;
      var v17878 = v22465.length;
      var v17879 = this.count();
      var v10610 = v17878 > v17879;
      for (;v10610;) {
        var v10609 = this.asts;
        v10609.pop();
        var v22466 = this.asts;
        var v17880 = v22466.length;
        var v17881 = this.count();
        v10610 = v17880 > v17881;
      }
      var v10611 = this.asts;
      this.top = v10611.length;
      var v10612 = this.asts;
      v10612.push(ast$$8);
      return;
    }
    function v338() {
      var head = this.ast();
      this.up();
      var v22467 = this.asts;
      var v17882 = v22467.length;
      var v17883 = this.count();
      var v10614 = v17882 > v17883;
      for (;v10614;) {
        var v10613 = this.asts;
        v10613.pop();
        var v22468 = this.asts;
        var v17884 = v22468.length;
        var v17885 = this.count();
        v10614 = v17884 > v17885;
      }
      return head;
    }
    function v337() {
      function v336(value$$30) {
        return value$$30;
      }
      var clone = new AstPath$$1;
      var v10615 = clone;
      var v17886 = this.asts;
      var v27002 = v17886.map(v336);
      v10615.asts = v27002;
      clone.top = this.top;
      return clone;
    }
    function reverseIndexOf(items$$1, index$$42) {
      var v10616;
      var v22469 = items$$1 === null;
      var v24717 = !v22469;
      if (v24717) {
        var v24716 = items$$1.length;
        v22469 = v24716 <= index$$42;
      }
      var v17888 = v22469;
      if (v17888) {
        v10616 = null;
      } else {
        var v24718 = items$$1.length;
        var v22470 = v24718 - index$$42;
        var v17887 = v22470 - 1;
        v10616 = items$$1[v17887];
      }
      return v10616;
    }
    function AstPath$$1() {
      this.asts = [];
      this.top = -1;
      return;
    }
    AstPath$$1.reverseIndexOf = reverseIndexOf;
    var v10617 = AstPath$$1.prototype;
    v10617.clone = v337;
    var v10618 = AstPath$$1.prototype;
    v10618.pop = v338;
    var v10619 = AstPath$$1.prototype;
    v10619.push = v339;
    var v10620 = AstPath$$1.prototype;
    v10620.up = v340;
    var v10621 = AstPath$$1.prototype;
    v10621.down = v341;
    var v10622 = AstPath$$1.prototype;
    v10622.nodeType = v342;
    var v10623 = AstPath$$1.prototype;
    v10623.ast = v343;
    var v10624 = AstPath$$1.prototype;
    v10624.parent = v344;
    var v10625 = AstPath$$1.prototype;
    v10625.count = v345;
    var v10626 = AstPath$$1.prototype;
    v10626.get = v346;
    var v10627 = AstPath$$1.prototype;
    v10627.isNameOfClass = v347;
    var v10628 = AstPath$$1.prototype;
    v10628.isNameOfInterface = v348;
    var v10629 = AstPath$$1.prototype;
    v10629.isNameOfArgument = v349;
    var v10630 = AstPath$$1.prototype;
    v10630.isNameOfVariable = v350;
    var v10631 = AstPath$$1.prototype;
    v10631.isNameOfModule = v351;
    var v10632 = AstPath$$1.prototype;
    v10632.isNameOfFunction = v352;
    var v10633 = AstPath$$1.prototype;
    v10633.isChildOfScript = v353;
    var v10634 = AstPath$$1.prototype;
    v10634.isChildOfModule = v354;
    var v10635 = AstPath$$1.prototype;
    v10635.isChildOfClass = v355;
    var v10636 = AstPath$$1.prototype;
    v10636.isArgumentOfClassConstructor = v356;
    var v10637 = AstPath$$1.prototype;
    v10637.isChildOfInterface = v357;
    var v10638 = AstPath$$1.prototype;
    v10638.isTopLevelImplicitModule = v358;
    var v10639 = AstPath$$1.prototype;
    v10639.isBodyOfTopLevelImplicitModule = v359;
    var v10640 = AstPath$$1.prototype;
    v10640.isBodyOfScript = v360;
    var v10641 = AstPath$$1.prototype;
    v10641.isBodyOfSwitch = v361;
    var v10642 = AstPath$$1.prototype;
    v10642.isBodyOfModule = v362;
    var v10643 = AstPath$$1.prototype;
    v10643.isBodyOfClass = v363;
    var v10644 = AstPath$$1.prototype;
    v10644.isBodyOfFunction = v364;
    var v10645 = AstPath$$1.prototype;
    v10645.isBodyOfInterface = v365;
    var v10646 = AstPath$$1.prototype;
    v10646.isBodyOfBlock = v366;
    var v10647 = AstPath$$1.prototype;
    v10647.isBodyOfFor = v367;
    var v10648 = AstPath$$1.prototype;
    v10648.isBodyOfCase = v368;
    var v10649 = AstPath$$1.prototype;
    v10649.isBodyOfTry = v369;
    var v10650 = AstPath$$1.prototype;
    v10650.isBodyOfCatch = v370;
    var v10651 = AstPath$$1.prototype;
    v10651.isBodyOfDoWhile = v371;
    var v10652 = AstPath$$1.prototype;
    v10652.isBodyOfWhile = v372;
    var v10653 = AstPath$$1.prototype;
    v10653.isBodyOfForIn = v373;
    var v10654 = AstPath$$1.prototype;
    v10654.isBodyOfWith = v374;
    var v10655 = AstPath$$1.prototype;
    v10655.isBodyOfFinally = v375;
    var v10656 = AstPath$$1.prototype;
    v10656.isCaseOfSwitch = v376;
    var v10657 = AstPath$$1.prototype;
    v10657.isDefaultCaseOfSwitch = v377;
    var v10658 = AstPath$$1.prototype;
    v10658.isListOfObjectLit = v378;
    var v10659 = AstPath$$1.prototype;
    v10659.isBodyOfObjectLit = v379;
    var v10660 = AstPath$$1.prototype;
    v10660.isEmptyListOfObjectLit = v380;
    var v10661 = AstPath$$1.prototype;
    v10661.isMemberOfObjectLit = v381;
    var v10662 = AstPath$$1.prototype;
    v10662.isNameOfMemberOfObjectLit = v382;
    var v10663 = AstPath$$1.prototype;
    v10663.isListOfArrayLit = v383;
    var v10664 = AstPath$$1.prototype;
    v10664.isTargetOfMember = v384;
    var v10665 = AstPath$$1.prototype;
    v10665.isMemberOfMember = v385;
    var v10666 = AstPath$$1.prototype;
    v10666.isItemOfList = v386;
    var v10667 = AstPath$$1.prototype;
    v10667.isThenOfIf = v387;
    var v10668 = AstPath$$1.prototype;
    v10668.isElseOfIf = v388;
    var v10669 = AstPath$$1.prototype;
    v10669.isBodyOfDefaultCase = v389;
    var v10670 = AstPath$$1.prototype;
    v10670.isSingleStatementList = v390;
    var v10671 = AstPath$$1.prototype;
    v10671.isArgumentListOfFunction = v391;
    var v10672 = AstPath$$1.prototype;
    v10672.isArgumentOfFunction = v392;
    var v10673 = AstPath$$1.prototype;
    v10673.isArgumentListOfCall = v393;
    var v10674 = AstPath$$1.prototype;
    v10674.isArgumentListOfNew = v394;
    var v10675 = AstPath$$1.prototype;
    v10675.isSynthesizedBlock = v395;
    return AstPath$$1;
  }
  function lastOf(items) {
    var v10676;
    var v22471 = items === null;
    var v24720 = !v22471;
    if (v24720) {
      var v24719 = items.length;
      v22471 = v24719 === 0;
    }
    var v17890 = v22471;
    if (v17890) {
      v10676 = null;
    } else {
      var v22472 = items.length;
      var v17889 = v22472 - 1;
      v10676 = items[v17889];
    }
    return v10676;
  }
  function max(a, b$$1) {
    var v10677;
    var v17891 = a >= b$$1;
    if (v17891) {
      v10677 = a;
    } else {
      v10677 = b$$1;
    }
    return v10677;
  }
  function min$$1(a$$1, b$$2) {
    var v10678;
    var v17892 = a$$1 <= b$$2;
    if (v17892) {
      v10678 = a$$1;
    } else {
      v10678 = b$$2;
    }
    return v10678;
  }
  function isValidAstNode(ast$$6) {
    var v10679 = ast$$6 === null;
    if (v10679) {
      return false;
    }
    var v22473 = ast$$6.minChar;
    var v17893 = v22473 === -1;
    var v22475 = !v17893;
    if (v22475) {
      var v22474 = ast$$6.limChar;
      v17893 = v22474 === -1;
    }
    var v10680 = v17893;
    if (v10680) {
      return false;
    }
    return true;
  }
  function getAstPathToPosition(script$$1, pos, options$$5) {
    function pre$$6(cur$$2, parent$$37, walker$$36) {
      var v10694 = isValidAstNode(cur$$2);
      if (v10694) {
        var v22476 = GetAstPathOptions.EdgeInclusive;
        var v17894 = TypeScript$$7.hasFlag(options$$5, v22476);
        var v22479 = !v17894;
        if (v22479) {
          var v22477 = cur$$2.nodeType;
          var v24721 = TypeScript$$7.NodeType;
          var v22478 = v24721.Name;
          v17894 = v22477 === v22478;
        }
        var v10681 = v17894;
        var v17896 = !v10681;
        if (v17896) {
          var v17895 = script$$1.limChar;
          v10681 = pos === v17895;
        }
        var inclusive = v10681;
        var minChar$$1 = cur$$2.minChar;
        var v10682 = cur$$2.limChar;
        var v17897;
        if (inclusive) {
          v17897 = 1;
        } else {
          v17897 = 0;
        }
        var v10683 = v17897;
        var limChar$$1 = v10682 + v10683;
        var v17898 = pos >= minChar$$1;
        if (v17898) {
          v17898 = pos < limChar$$1;
        }
        var v10687 = v17898;
        if (v10687) {
          var v10684 = ctx.path;
          var previous = v10684.ast();
          var v17899 = previous == null;
          var v22481 = !v17899;
          if (v22481) {
            var v24722 = cur$$2.minChar;
            var v24723 = previous.minChar;
            var v22480 = v24722 >= v24723;
            if (v22480) {
              var v24724 = cur$$2.limChar;
              var v24725 = previous.limChar;
              v22480 = v24724 <= v24725;
            }
            v17899 = v22480;
          }
          var v10686 = v17899;
          if (v10686) {
            var v10685 = ctx.path;
            v10685.push(cur$$2);
          } else {
          }
        }
        var v10689 = pos < limChar$$1;
        if (v10689) {
          var v10688 = cur$$2.preComments;
          lookInComments(v10688);
        }
        var v10691 = pos >= minChar$$1;
        if (v10691) {
          var v10690 = cur$$2.postComments;
          lookInComments(v10690);
        }
        var v22482 = GetAstPathOptions.DontPruneSearchBasedOnPosition;
        var v17900 = TypeScript$$7.hasFlag(options$$5, v22482);
        var v10693 = !v17900;
        if (v10693) {
          var v10692 = walker$$36.options;
          var v17901 = minChar$$1 <= pos;
          if (v17901) {
            v17901 = pos <= limChar$$1;
          }
          v10692.goChildren = v17901;
        }
      }
      return cur$$2;
    }
    function lookInComments(comments$$2) {
      var v17902 = comments$$2;
      if (v17902) {
        var v22483 = comments$$2.length;
        v17902 = v22483 > 0;
      }
      var v10702 = v17902;
      if (v10702) {
        var i$$26 = 0;
        var v17903 = comments$$2.length;
        var v10701 = i$$26 < v17903;
        for (;v10701;) {
          var v10695 = comments$$2[i$$26];
          var minChar = v10695.minChar;
          var v10696 = comments$$2[i$$26];
          var limChar = v10696.limChar;
          var v22484 = comments$$2[i$$26];
          var v17904 = v22484.isBlockComment;
          var v10697 = !v17904;
          if (v10697) {
            limChar++;
          }
          var v17905 = pos >= minChar;
          if (v17905) {
            v17905 = pos < limChar;
          }
          var v10700 = v17905;
          if (v10700) {
            var v10698 = ctx.path;
            var v10699 = comments$$2[i$$26];
            v10698.push(v10699);
          }
          i$$26++;
          var v17906 = comments$$2.length;
          v10701 = i$$26 < v17906;
        }
      }
      return;
    }
    var v17907 = typeof options$$5;
    var v10703 = v17907 === "undefined";
    if (v10703) {
      options$$5 = GetAstPathOptions.Default;
    }
    var ctx = new AstPathContext;
    var v10704 = TypeScript$$7.getAstWalkerFactory();
    v10704.walk(script$$1, pre$$6, null, null, ctx);
    return ctx.path;
  }
  function getTokenizationOffset(script$$2, position) {
    function pre$$7(cur$$3, parent$$38, walker$$37) {
      var v10709 = TypeScript$$7.isValidAstNode(cur$$3);
      if (v10709) {
        var v17908 = cur$$3.minChar;
        var v10706 = v17908 <= position;
        if (v10706) {
          var v10705 = cur$$3.minChar;
          bestOffset = max(bestOffset, v10705);
        }
        var v22485 = cur$$3.minChar;
        var v17909 = v22485 > position;
        var v22487 = !v17909;
        if (v22487) {
          var v22486 = cur$$3.limChar;
          v17909 = v22486 < bestOffset;
        }
        var v10708 = v17909;
        if (v10708) {
          var v10707 = walker$$37.options;
          v10707.goChildren = false;
        }
      }
      return cur$$3;
    }
    var bestOffset = 0;
    var v10710 = TypeScript$$7.getAstWalkerFactory();
    v10710.walk(script$$2, pre$$7);
    return bestOffset;
  }
  function walkAST(ast$$7, callback$$27) {
    function post$$5(cur$$5, parent$$40, walker$$39) {
      var path$$5 = walker$$39.state;
      path$$5.pop();
      return cur$$5;
    }
    function pre$$8(cur$$4, parent$$39, walker$$38) {
      var path$$4 = walker$$38.state;
      path$$4.push(cur$$4);
      callback$$27(path$$4, walker$$38);
      return cur$$4;
    }
    var path$$3 = new AstPath;
    var v10711 = TypeScript$$7.getAstWalkerFactory();
    v10711.walk(ast$$7, pre$$8, post$$5, null, path$$3);
    return;
  }
  TypeScript$$7.lastOf = lastOf;
  TypeScript$$7.max = max;
  TypeScript$$7.min = min$$1;
  var AstPath = v396();
  TypeScript$$7.AstPath = AstPath;
  TypeScript$$7.isValidAstNode = isValidAstNode;
  var AstPathContext = v397();
  TypeScript$$7.AstPathContext = AstPathContext;
  var v17910 = TypeScript$$7.GetAstPathOptions;
  var v22488 = !v17910;
  if (v22488) {
    v17910 = TypeScript$$7.GetAstPathOptions = {};
  }
  var v10712 = v17910;
  v398(v10712);
  var GetAstPathOptions = TypeScript$$7.GetAstPathOptions;
  TypeScript$$7.getAstPathToPosition = getAstPathToPosition;
  TypeScript$$7.getTokenizationOffset = getTokenizationOffset;
  TypeScript$$7.walkAST = walkAST;
  return;
}
function v335(TypeScript$$6) {
  function v334(AstWalkerWithDetailCallback$$1) {
    function walk(script, callback$$25) {
      function post$$4(cur$$1, parent$$36) {
        AstWalkerCallback(false, cur$$1, callback$$25);
        return cur$$1;
      }
      function pre$$4(cur, parent$$35) {
        var v10713 = walker$$35.options;
        var v27003 = AstWalkerCallback(true, cur, callback$$25);
        v10713.goChildren = v27003;
        return cur;
      }
      var v10714 = TypeScript$$6.getAstWalkerFactory();
      var walker$$35 = v10714.getWalker(pre$$4, post$$4);
      walker$$35.walk(script, null);
      return;
    }
    function AstWalkerCallback(pre$$5, ast$$5, callback$$26) {
      var nodeType$$12 = ast$$5.nodeType;
      var v22489 = TypeScript$$6.NodeType;
      var v17911 = v22489._map;
      var v10715 = v17911[nodeType$$12];
      var callbackString = v10715 + "Callback";
      var v10716 = callback$$26[callbackString];
      if (v10716) {
        return callback$$26[callbackString](pre$$5, ast$$5);
      }
      var v10717 = callback$$26.DefaultCallback;
      if (v10717) {
        return callback$$26.DefaultCallback(pre$$5, ast$$5);
      }
      return true;
    }
    AstWalkerWithDetailCallback$$1.walk = walk;
    return;
  }
  var v17912 = TypeScript$$6.AstWalkerWithDetailCallback;
  var v22490 = !v17912;
  if (v22490) {
    v17912 = TypeScript$$6.AstWalkerWithDetailCallback = {};
  }
  var v10718 = v17912;
  v334(v10718);
  var AstWalkerWithDetailCallback = TypeScript$$6.AstWalkerWithDetailCallback;
  return;
}
function v333(TypeScript$$5) {
  function v332(ChildrenWalkers$$1) {
    function walkNone(preAst$$1, parent$$2, walker$$2) {
      return;
    }
    function walkListChildren(preAst$$2, parent$$3, walker$$3) {
      var v10719 = preAst$$2.members;
      var len$$6 = v10719.length;
      var v17913 = walker$$3.options;
      var v10726 = v17913.reverseSiblings;
      if (v10726) {
        var i$$25 = len$$6 - 1;
        var v10722 = i$$25 >= 0;
        for (;v10722;) {
          var v17914 = walker$$3.options;
          var v10721 = v17914.goNextSibling;
          if (v10721) {
            var v10720 = preAst$$2.members;
            var v22491 = preAst$$2.members;
            var v17915 = v22491[i$$25];
            var v27004 = walker$$3.walk(v17915, preAst$$2);
            v10720[i$$25] = v27004;
          }
          i$$25--;
          v10722 = i$$25 >= 0;
        }
      } else {
        i$$25 = 0;
        var v10725 = i$$25 < len$$6;
        for (;v10725;) {
          var v17916 = walker$$3.options;
          var v10724 = v17916.goNextSibling;
          if (v10724) {
            var v10723 = preAst$$2.members;
            var v22492 = preAst$$2.members;
            var v17917 = v22492[i$$25];
            var v27005 = walker$$3.walk(v17917, preAst$$2);
            v10723[i$$25] = v27005;
          }
          i$$25++;
          v10725 = i$$25 < len$$6;
        }
      }
      return;
    }
    function walkUnaryExpressionChildren(preAst$$3, parent$$4, walker$$4) {
      var v10728 = preAst$$3.castTerm;
      if (v10728) {
        var v10727 = preAst$$3.castTerm;
        var v27006 = walker$$4.walk(v10727, preAst$$3);
        preAst$$3.castTerm = v27006;
      }
      var v10730 = preAst$$3.operand;
      if (v10730) {
        var v10729 = preAst$$3.operand;
        var v27007 = walker$$4.walk(v10729, preAst$$3);
        preAst$$3.operand = v27007;
      }
      return;
    }
    function walkBinaryExpressionChildren(preAst$$4, parent$$5, walker$$5) {
      var v17918 = walker$$5.options;
      var v10739 = v17918.reverseSiblings;
      if (v10739) {
        var v10732 = preAst$$4.operand2;
        if (v10732) {
          var v10731 = preAst$$4.operand2;
          var v27008 = walker$$5.walk(v10731, preAst$$4);
          preAst$$4.operand2 = v27008;
        }
        var v17919 = preAst$$4.operand1;
        if (v17919) {
          var v22493 = walker$$5.options;
          v17919 = v22493.goNextSibling;
        }
        var v10734 = v17919;
        if (v10734) {
          var v10733 = preAst$$4.operand1;
          var v27009 = walker$$5.walk(v10733, preAst$$4);
          preAst$$4.operand1 = v27009;
        }
      } else {
        var v10736 = preAst$$4.operand1;
        if (v10736) {
          var v10735 = preAst$$4.operand1;
          var v27010 = walker$$5.walk(v10735, preAst$$4);
          preAst$$4.operand1 = v27010;
        }
        var v17920 = preAst$$4.operand2;
        if (v17920) {
          var v22494 = walker$$5.options;
          v17920 = v22494.goNextSibling;
        }
        var v10738 = v17920;
        if (v10738) {
          var v10737 = preAst$$4.operand2;
          var v27011 = walker$$5.walk(v10737, preAst$$4);
          preAst$$4.operand2 = v27011;
        }
      }
      return;
    }
    function walkTypeReferenceChildren(preAst$$5, parent$$6, walker$$6) {
      var v10741 = preAst$$5.term;
      if (v10741) {
        var v10740 = preAst$$5.term;
        var v27012 = walker$$6.walk(v10740, preAst$$5);
        preAst$$5.term = v27012;
      }
      return;
    }
    function walkCallExpressionChildren(preAst$$6, parent$$7, walker$$7) {
      var v22495 = walker$$7.options;
      var v17921 = v22495.reverseSiblings;
      var v10743 = !v17921;
      if (v10743) {
        var v10742 = preAst$$6.target;
        var v27013 = walker$$7.walk(v10742, preAst$$6);
        preAst$$6.target = v27013;
      }
      var v17922 = preAst$$6.arguments;
      if (v17922) {
        var v22496 = walker$$7.options;
        v17922 = v22496.goNextSibling;
      }
      var v10745 = v17922;
      if (v10745) {
        var v10744 = preAst$$6.arguments;
        var v27014 = walker$$7.walk(v10744, preAst$$6);
        preAst$$6.arguments = v27014;
      }
      var v22497 = walker$$7.options;
      var v17923 = v22497.reverseSiblings;
      if (v17923) {
        var v22498 = walker$$7.options;
        v17923 = v22498.goNextSibling;
      }
      var v10747 = v17923;
      if (v10747) {
        var v10746 = preAst$$6.target;
        var v27015 = walker$$7.walk(v10746, preAst$$6);
        preAst$$6.target = v27015;
      }
      return;
    }
    function walkTrinaryExpressionChildren(preAst$$7, parent$$8, walker$$8) {
      var v10749 = preAst$$7.operand1;
      if (v10749) {
        var v10748 = preAst$$7.operand1;
        var v27016 = walker$$8.walk(v10748, preAst$$7);
        preAst$$7.operand1 = v27016;
      }
      var v17924 = preAst$$7.operand2;
      if (v17924) {
        var v22499 = walker$$8.options;
        v17924 = v22499.goNextSibling;
      }
      var v10751 = v17924;
      if (v10751) {
        var v10750 = preAst$$7.operand2;
        var v27017 = walker$$8.walk(v10750, preAst$$7);
        preAst$$7.operand2 = v27017;
      }
      var v17925 = preAst$$7.operand3;
      if (v17925) {
        var v22500 = walker$$8.options;
        v17925 = v22500.goNextSibling;
      }
      var v10753 = v17925;
      if (v10753) {
        var v10752 = preAst$$7.operand3;
        var v27018 = walker$$8.walk(v10752, preAst$$7);
        preAst$$7.operand3 = v27018;
      }
      return;
    }
    function walkFuncDeclChildren(preAst$$8, parent$$9, walker$$9) {
      var v10755 = preAst$$8.name;
      if (v10755) {
        var v10754 = preAst$$8.name;
        var v27019 = walker$$9.walk(v10754, preAst$$8);
        preAst$$8.name = v27019;
      }
      var v22501 = preAst$$8.arguments;
      if (v22501) {
        var v26070 = preAst$$8.arguments;
        var v25661 = v26070.members;
        var v24726 = v25661.length;
        v22501 = v24726 > 0;
      }
      var v17926 = v22501;
      if (v17926) {
        var v22502 = walker$$9.options;
        v17926 = v22502.goNextSibling;
      }
      var v10757 = v17926;
      if (v10757) {
        var v10756 = preAst$$8.arguments;
        var v27020 = walker$$9.walk(v10756, preAst$$8);
        preAst$$8.arguments = v27020;
      }
      var v17927 = preAst$$8.returnTypeAnnotation;
      if (v17927) {
        var v22503 = walker$$9.options;
        v17927 = v22503.goNextSibling;
      }
      var v10759 = v17927;
      if (v10759) {
        var v10758 = preAst$$8.returnTypeAnnotation;
        var v27021 = walker$$9.walk(v10758, preAst$$8);
        preAst$$8.returnTypeAnnotation = v27021;
      }
      var v22504 = preAst$$8.bod;
      if (v22504) {
        var v26071 = preAst$$8.bod;
        var v25662 = v26071.members;
        var v24727 = v25662.length;
        v22504 = v24727 > 0;
      }
      var v17928 = v22504;
      if (v17928) {
        var v22505 = walker$$9.options;
        v17928 = v22505.goNextSibling;
      }
      var v10761 = v17928;
      if (v10761) {
        var v10760 = preAst$$8.bod;
        var v27022 = walker$$9.walk(v10760, preAst$$8);
        preAst$$8.bod = v27022;
      }
      return;
    }
    function walkBoundDeclChildren(preAst$$9, parent$$10, walker$$10) {
      var v10763 = preAst$$9.id;
      if (v10763) {
        var v10762 = preAst$$9.id;
        var v27023 = walker$$10.walk(v10762, preAst$$9);
        preAst$$9.id = v27023;
      }
      var v10765 = preAst$$9.init;
      if (v10765) {
        var v10764 = preAst$$9.init;
        var v27024 = walker$$10.walk(v10764, preAst$$9);
        preAst$$9.init = v27024;
      }
      var v17929 = preAst$$9.typeExpr;
      if (v17929) {
        var v22506 = walker$$10.options;
        v17929 = v22506.goNextSibling;
      }
      var v10767 = v17929;
      if (v10767) {
        var v10766 = preAst$$9.typeExpr;
        var v27025 = walker$$10.walk(v10766, preAst$$9);
        preAst$$9.typeExpr = v27025;
      }
      return;
    }
    function walkReturnStatementChildren(preAst$$10, parent$$11, walker$$11) {
      var v10769 = preAst$$10.returnExpression;
      if (v10769) {
        var v10768 = preAst$$10.returnExpression;
        var v27026 = walker$$11.walk(v10768, preAst$$10);
        preAst$$10.returnExpression = v27026;
      }
      return;
    }
    function walkForStatementChildren(preAst$$11, parent$$12, walker$$12) {
      var v10771 = preAst$$11.init;
      if (v10771) {
        var v10770 = preAst$$11.init;
        var v27027 = walker$$12.walk(v10770, preAst$$11);
        preAst$$11.init = v27027;
      }
      var v17930 = preAst$$11.cond;
      if (v17930) {
        var v22507 = walker$$12.options;
        v17930 = v22507.goNextSibling;
      }
      var v10773 = v17930;
      if (v10773) {
        var v10772 = preAst$$11.cond;
        var v27028 = walker$$12.walk(v10772, preAst$$11);
        preAst$$11.cond = v27028;
      }
      var v17931 = preAst$$11.incr;
      if (v17931) {
        var v22508 = walker$$12.options;
        v17931 = v22508.goNextSibling;
      }
      var v10775 = v17931;
      if (v10775) {
        var v10774 = preAst$$11.incr;
        var v27029 = walker$$12.walk(v10774, preAst$$11);
        preAst$$11.incr = v27029;
      }
      var v17932 = preAst$$11.body;
      if (v17932) {
        var v22509 = walker$$12.options;
        v17932 = v22509.goNextSibling;
      }
      var v10777 = v17932;
      if (v10777) {
        var v10776 = preAst$$11.body;
        var v27030 = walker$$12.walk(v10776, preAst$$11);
        preAst$$11.body = v27030;
      }
      return;
    }
    function walkForInStatementChildren(preAst$$12, parent$$13, walker$$13) {
      var v10778 = preAst$$12.lval;
      var v27031 = walker$$13.walk(v10778, preAst$$12);
      preAst$$12.lval = v27031;
      var v17933 = walker$$13.options;
      var v10780 = v17933.goNextSibling;
      if (v10780) {
        var v10779 = preAst$$12.obj;
        var v27032 = walker$$13.walk(v10779, preAst$$12);
        preAst$$12.obj = v27032;
      }
      var v17934 = preAst$$12.body;
      if (v17934) {
        var v22510 = walker$$13.options;
        v17934 = v22510.goNextSibling;
      }
      var v10782 = v17934;
      if (v10782) {
        var v10781 = preAst$$12.body;
        var v27033 = walker$$13.walk(v10781, preAst$$12);
        preAst$$12.body = v27033;
      }
      return;
    }
    function walkIfStatementChildren(preAst$$13, parent$$14, walker$$14) {
      var v10783 = preAst$$13.cond;
      var v27034 = walker$$14.walk(v10783, preAst$$13);
      preAst$$13.cond = v27034;
      var v17935 = preAst$$13.thenBod;
      if (v17935) {
        var v22511 = walker$$14.options;
        v17935 = v22511.goNextSibling;
      }
      var v10785 = v17935;
      if (v10785) {
        var v10784 = preAst$$13.thenBod;
        var v27035 = walker$$14.walk(v10784, preAst$$13);
        preAst$$13.thenBod = v27035;
      }
      var v17936 = preAst$$13.elseBod;
      if (v17936) {
        var v22512 = walker$$14.options;
        v17936 = v22512.goNextSibling;
      }
      var v10787 = v17936;
      if (v10787) {
        var v10786 = preAst$$13.elseBod;
        var v27036 = walker$$14.walk(v10786, preAst$$13);
        preAst$$13.elseBod = v27036;
      }
      return;
    }
    function walkWhileStatementChildren(preAst$$14, parent$$15, walker$$15) {
      var v10788 = preAst$$14.cond;
      var v27037 = walker$$15.walk(v10788, preAst$$14);
      preAst$$14.cond = v27037;
      var v17937 = preAst$$14.body;
      if (v17937) {
        var v22513 = walker$$15.options;
        v17937 = v22513.goNextSibling;
      }
      var v10790 = v17937;
      if (v10790) {
        var v10789 = preAst$$14.body;
        var v27038 = walker$$15.walk(v10789, preAst$$14);
        preAst$$14.body = v27038;
      }
      return;
    }
    function walkDoWhileStatementChildren(preAst$$15, parent$$16, walker$$16) {
      var v10791 = preAst$$15.cond;
      var v27039 = walker$$16.walk(v10791, preAst$$15);
      preAst$$15.cond = v27039;
      var v17938 = preAst$$15.body;
      if (v17938) {
        var v22514 = walker$$16.options;
        v17938 = v22514.goNextSibling;
      }
      var v10793 = v17938;
      if (v10793) {
        var v10792 = preAst$$15.body;
        var v27040 = walker$$16.walk(v10792, preAst$$15);
        preAst$$15.body = v27040;
      }
      return;
    }
    function walkBlockChildren(preAst$$16, parent$$17, walker$$17) {
      var v10795 = preAst$$16.statements;
      if (v10795) {
        var v10794 = preAst$$16.statements;
        var v27041 = walker$$17.walk(v10794, preAst$$16);
        preAst$$16.statements = v27041;
      }
      return;
    }
    function walkCaseStatementChildren(preAst$$17, parent$$18, walker$$18) {
      var v10797 = preAst$$17.expr;
      if (v10797) {
        var v10796 = preAst$$17.expr;
        var v27042 = walker$$18.walk(v10796, preAst$$17);
        preAst$$17.expr = v27042;
      }
      var v17939 = preAst$$17.body;
      if (v17939) {
        var v22515 = walker$$18.options;
        v17939 = v22515.goNextSibling;
      }
      var v10799 = v17939;
      if (v10799) {
        var v10798 = preAst$$17.body;
        var v27043 = walker$$18.walk(v10798, preAst$$17);
        preAst$$17.body = v27043;
      }
      return;
    }
    function walkSwitchStatementChildren(preAst$$18, parent$$19, walker$$19) {
      var v10801 = preAst$$18.val;
      if (v10801) {
        var v10800 = preAst$$18.val;
        var v27044 = walker$$19.walk(v10800, preAst$$18);
        preAst$$18.val = v27044;
      }
      var v17940 = preAst$$18.caseList;
      if (v17940) {
        var v22516 = walker$$19.options;
        v17940 = v22516.goNextSibling;
      }
      var v10803 = v17940;
      if (v10803) {
        var v10802 = preAst$$18.caseList;
        var v27045 = walker$$19.walk(v10802, preAst$$18);
        preAst$$18.caseList = v27045;
      }
      return;
    }
    function walkTryChildren(preAst$$19, parent$$20, walker$$20) {
      var v10805 = preAst$$19.body;
      if (v10805) {
        var v10804 = preAst$$19.body;
        var v27046 = walker$$20.walk(v10804, preAst$$19);
        preAst$$19.body = v27046;
      }
      return;
    }
    function walkTryCatchChildren(preAst$$20, parent$$21, walker$$21) {
      var v10807 = preAst$$20.tryNode;
      if (v10807) {
        var v10806 = preAst$$20.tryNode;
        var v27047 = walker$$21.walk(v10806, preAst$$20);
        preAst$$20.tryNode = v27047;
      }
      var v17941 = preAst$$20.catchNode;
      if (v17941) {
        var v22517 = walker$$21.options;
        v17941 = v22517.goNextSibling;
      }
      var v10809 = v17941;
      if (v10809) {
        var v10808 = preAst$$20.catchNode;
        var v27048 = walker$$21.walk(v10808, preAst$$20);
        preAst$$20.catchNode = v27048;
      }
      return;
    }
    function walkTryFinallyChildren(preAst$$21, parent$$22, walker$$22) {
      var v10811 = preAst$$21.tryNode;
      if (v10811) {
        var v10810 = preAst$$21.tryNode;
        var v27049 = walker$$22.walk(v10810, preAst$$21);
        preAst$$21.tryNode = v27049;
      }
      var v17942 = preAst$$21.finallyNode;
      if (v17942) {
        var v22518 = walker$$22.options;
        v17942 = v22518.goNextSibling;
      }
      var v10813 = v17942;
      if (v10813) {
        var v10812 = preAst$$21.finallyNode;
        var v27050 = walker$$22.walk(v10812, preAst$$21);
        preAst$$21.finallyNode = v27050;
      }
      return;
    }
    function walkFinallyChildren(preAst$$22, parent$$23, walker$$23) {
      var v10815 = preAst$$22.body;
      if (v10815) {
        var v10814 = preAst$$22.body;
        var v27051 = walker$$23.walk(v10814, preAst$$22);
        preAst$$22.body = v27051;
      }
      return;
    }
    function walkCatchChildren(preAst$$23, parent$$24, walker$$24) {
      var v10817 = preAst$$23.param;
      if (v10817) {
        var v10816 = preAst$$23.param;
        var v27052 = walker$$24.walk(v10816, preAst$$23);
        preAst$$23.param = v27052;
      }
      var v17943 = preAst$$23.body;
      if (v17943) {
        var v22519 = walker$$24.options;
        v17943 = v22519.goNextSibling;
      }
      var v10819 = v17943;
      if (v10819) {
        var v10818 = preAst$$23.body;
        var v27053 = walker$$24.walk(v10818, preAst$$23);
        preAst$$23.body = v27053;
      }
      return;
    }
    function walkRecordChildren(preAst$$24, parent$$25, walker$$25) {
      var v10820 = preAst$$24.name;
      var v27054 = walker$$25.walk(v10820, preAst$$24);
      preAst$$24.name = v27054;
      var v22520 = walker$$25.options;
      var v17944 = v22520.goNextSibling;
      if (v17944) {
        v17944 = preAst$$24.members;
      }
      var v10822 = v17944;
      if (v10822) {
        var v10821 = preAst$$24.members;
        var v27055 = walker$$25.walk(v10821, preAst$$24);
        preAst$$24.members = v27055;
      }
      return;
    }
    function walkNamedTypeChildren(preAst$$25, parent$$26, walker$$26) {
      walkRecordChildren(preAst$$25, parent$$26, walker$$26);
      return;
    }
    function walkClassDeclChildren(preAst$$26, parent$$27, walker$$27) {
      walkRecordChildren(preAst$$26, parent$$27, walker$$27);
      var v22521 = walker$$27.options;
      var v17945 = v22521.goNextSibling;
      if (v17945) {
        v17945 = preAst$$26.extendsList;
      }
      var v10824 = v17945;
      if (v10824) {
        var v10823 = preAst$$26.extendsList;
        var v27056 = walker$$27.walk(v10823, preAst$$26);
        preAst$$26.extendsList = v27056;
      }
      var v22522 = walker$$27.options;
      var v17946 = v22522.goNextSibling;
      if (v17946) {
        v17946 = preAst$$26.implementsList;
      }
      var v10826 = v17946;
      if (v10826) {
        var v10825 = preAst$$26.implementsList;
        var v27057 = walker$$27.walk(v10825, preAst$$26);
        preAst$$26.implementsList = v27057;
      }
      return;
    }
    function walkScriptChildren(preAst$$27, parent$$28, walker$$28) {
      var v10828 = preAst$$27.bod;
      if (v10828) {
        var v10827 = preAst$$27.bod;
        var v27058 = walker$$28.walk(v10827, preAst$$27);
        preAst$$27.bod = v27058;
      }
      return;
    }
    function walkTypeDeclChildren(preAst$$28, parent$$29, walker$$29) {
      walkRecordChildren(preAst$$28, parent$$29, walker$$29);
      var v22523 = walker$$29.options;
      var v17947 = v22523.goNextSibling;
      if (v17947) {
        v17947 = preAst$$28.extendsList;
      }
      var v10830 = v17947;
      if (v10830) {
        var v10829 = preAst$$28.extendsList;
        var v27059 = walker$$29.walk(v10829, preAst$$28);
        preAst$$28.extendsList = v27059;
      }
      var v22524 = walker$$29.options;
      var v17948 = v22524.goNextSibling;
      if (v17948) {
        v17948 = preAst$$28.implementsList;
      }
      var v10832 = v17948;
      if (v10832) {
        var v10831 = preAst$$28.implementsList;
        var v27060 = walker$$29.walk(v10831, preAst$$28);
        preAst$$28.implementsList = v27060;
      }
      return;
    }
    function walkModuleDeclChildren(preAst$$29, parent$$30, walker$$30) {
      walkRecordChildren(preAst$$29, parent$$30, walker$$30);
      return;
    }
    function walkImportDeclChildren(preAst$$30, parent$$31, walker$$31) {
      var v10834 = preAst$$30.id;
      if (v10834) {
        var v10833 = preAst$$30.id;
        var v27061 = walker$$31.walk(v10833, preAst$$30);
        preAst$$30.id = v27061;
      }
      var v10836 = preAst$$30.alias;
      if (v10836) {
        var v10835 = preAst$$30.alias;
        var v27062 = walker$$31.walk(v10835, preAst$$30);
        preAst$$30.alias = v27062;
      }
      return;
    }
    function walkWithStatementChildren(preAst$$31, parent$$32, walker$$32) {
      var v10838 = preAst$$31.expr;
      if (v10838) {
        var v10837 = preAst$$31.expr;
        var v27063 = walker$$32.walk(v10837, preAst$$31);
        preAst$$31.expr = v27063;
      }
      var v17949 = preAst$$31.body;
      if (v17949) {
        var v22525 = walker$$32.options;
        v17949 = v22525.goNextSibling;
      }
      var v10840 = v17949;
      if (v10840) {
        var v10839 = preAst$$31.body;
        var v27064 = walker$$32.walk(v10839, preAst$$31);
        preAst$$31.body = v27064;
      }
      return;
    }
    function walkLabelChildren(preAst$$32, parent$$33, walker$$33) {
      return;
    }
    function walkLabeledStatementChildren(preAst$$33, parent$$34, walker$$34) {
      var v10841 = preAst$$33.labels;
      var v27065 = walker$$34.walk(v10841, preAst$$33);
      preAst$$33.labels = v27065;
      var v17950 = walker$$34.options;
      var v10843 = v17950.goNextSibling;
      if (v10843) {
        var v10842 = preAst$$33.stmt;
        var v27066 = walker$$34.walk(v10842, preAst$$33);
        preAst$$33.stmt = v27066;
      }
      return;
    }
    ChildrenWalkers$$1.walkNone = walkNone;
    ChildrenWalkers$$1.walkListChildren = walkListChildren;
    ChildrenWalkers$$1.walkUnaryExpressionChildren = walkUnaryExpressionChildren;
    ChildrenWalkers$$1.walkBinaryExpressionChildren = walkBinaryExpressionChildren;
    ChildrenWalkers$$1.walkTypeReferenceChildren = walkTypeReferenceChildren;
    ChildrenWalkers$$1.walkCallExpressionChildren = walkCallExpressionChildren;
    ChildrenWalkers$$1.walkTrinaryExpressionChildren = walkTrinaryExpressionChildren;
    ChildrenWalkers$$1.walkFuncDeclChildren = walkFuncDeclChildren;
    ChildrenWalkers$$1.walkBoundDeclChildren = walkBoundDeclChildren;
    ChildrenWalkers$$1.walkReturnStatementChildren = walkReturnStatementChildren;
    ChildrenWalkers$$1.walkForStatementChildren = walkForStatementChildren;
    ChildrenWalkers$$1.walkForInStatementChildren = walkForInStatementChildren;
    ChildrenWalkers$$1.walkIfStatementChildren = walkIfStatementChildren;
    ChildrenWalkers$$1.walkWhileStatementChildren = walkWhileStatementChildren;
    ChildrenWalkers$$1.walkDoWhileStatementChildren = walkDoWhileStatementChildren;
    ChildrenWalkers$$1.walkBlockChildren = walkBlockChildren;
    ChildrenWalkers$$1.walkCaseStatementChildren = walkCaseStatementChildren;
    ChildrenWalkers$$1.walkSwitchStatementChildren = walkSwitchStatementChildren;
    ChildrenWalkers$$1.walkTryChildren = walkTryChildren;
    ChildrenWalkers$$1.walkTryCatchChildren = walkTryCatchChildren;
    ChildrenWalkers$$1.walkTryFinallyChildren = walkTryFinallyChildren;
    ChildrenWalkers$$1.walkFinallyChildren = walkFinallyChildren;
    ChildrenWalkers$$1.walkCatchChildren = walkCatchChildren;
    ChildrenWalkers$$1.walkRecordChildren = walkRecordChildren;
    ChildrenWalkers$$1.walkNamedTypeChildren = walkNamedTypeChildren;
    ChildrenWalkers$$1.walkClassDeclChildren = walkClassDeclChildren;
    ChildrenWalkers$$1.walkScriptChildren = walkScriptChildren;
    ChildrenWalkers$$1.walkTypeDeclChildren = walkTypeDeclChildren;
    ChildrenWalkers$$1.walkModuleDeclChildren = walkModuleDeclChildren;
    ChildrenWalkers$$1.walkImportDeclChildren = walkImportDeclChildren;
    ChildrenWalkers$$1.walkWithStatementChildren = walkWithStatementChildren;
    ChildrenWalkers$$1.walkLabelChildren = walkLabelChildren;
    ChildrenWalkers$$1.walkLabeledStatementChildren = walkLabeledStatementChildren;
    return;
  }
  function v331() {
    function v330() {
      var v10844 = this.childrenWalkers;
      var v17951 = TypeScript$$5.NodeType;
      var v10845 = v17951.None;
      v10844[v10845] = ChildrenWalkers.walkNone;
      var v10846 = this.childrenWalkers;
      var v17952 = TypeScript$$5.NodeType;
      var v10847 = v17952.Empty;
      v10846[v10847] = ChildrenWalkers.walkNone;
      var v10848 = this.childrenWalkers;
      var v17953 = TypeScript$$5.NodeType;
      var v10849 = v17953.EmptyExpr;
      v10848[v10849] = ChildrenWalkers.walkNone;
      var v10850 = this.childrenWalkers;
      var v17954 = TypeScript$$5.NodeType;
      var v10851 = v17954.True;
      v10850[v10851] = ChildrenWalkers.walkNone;
      var v10852 = this.childrenWalkers;
      var v17955 = TypeScript$$5.NodeType;
      var v10853 = v17955.False;
      v10852[v10853] = ChildrenWalkers.walkNone;
      var v10854 = this.childrenWalkers;
      var v17956 = TypeScript$$5.NodeType;
      var v10855 = v17956.This;
      v10854[v10855] = ChildrenWalkers.walkNone;
      var v10856 = this.childrenWalkers;
      var v17957 = TypeScript$$5.NodeType;
      var v10857 = v17957.Super;
      v10856[v10857] = ChildrenWalkers.walkNone;
      var v10858 = this.childrenWalkers;
      var v17958 = TypeScript$$5.NodeType;
      var v10859 = v17958.QString;
      v10858[v10859] = ChildrenWalkers.walkNone;
      var v10860 = this.childrenWalkers;
      var v17959 = TypeScript$$5.NodeType;
      var v10861 = v17959.Regex;
      v10860[v10861] = ChildrenWalkers.walkNone;
      var v10862 = this.childrenWalkers;
      var v17960 = TypeScript$$5.NodeType;
      var v10863 = v17960.Null;
      v10862[v10863] = ChildrenWalkers.walkNone;
      var v10864 = this.childrenWalkers;
      var v17961 = TypeScript$$5.NodeType;
      var v10865 = v17961.ArrayLit;
      v10864[v10865] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10866 = this.childrenWalkers;
      var v17962 = TypeScript$$5.NodeType;
      var v10867 = v17962.ObjectLit;
      v10866[v10867] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10868 = this.childrenWalkers;
      var v17963 = TypeScript$$5.NodeType;
      var v10869 = v17963.Void;
      v10868[v10869] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10870 = this.childrenWalkers;
      var v17964 = TypeScript$$5.NodeType;
      var v10871 = v17964.Comma;
      v10870[v10871] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10872 = this.childrenWalkers;
      var v17965 = TypeScript$$5.NodeType;
      var v10873 = v17965.Pos;
      v10872[v10873] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10874 = this.childrenWalkers;
      var v17966 = TypeScript$$5.NodeType;
      var v10875 = v17966.Neg;
      v10874[v10875] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10876 = this.childrenWalkers;
      var v17967 = TypeScript$$5.NodeType;
      var v10877 = v17967.Delete;
      v10876[v10877] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10878 = this.childrenWalkers;
      var v17968 = TypeScript$$5.NodeType;
      var v10879 = v17968.Await;
      v10878[v10879] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10880 = this.childrenWalkers;
      var v17969 = TypeScript$$5.NodeType;
      var v10881 = v17969.In;
      v10880[v10881] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10882 = this.childrenWalkers;
      var v17970 = TypeScript$$5.NodeType;
      var v10883 = v17970.Dot;
      v10882[v10883] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10884 = this.childrenWalkers;
      var v17971 = TypeScript$$5.NodeType;
      var v10885 = v17971.From;
      v10884[v10885] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10886 = this.childrenWalkers;
      var v17972 = TypeScript$$5.NodeType;
      var v10887 = v17972.Is;
      v10886[v10887] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10888 = this.childrenWalkers;
      var v17973 = TypeScript$$5.NodeType;
      var v10889 = v17973.InstOf;
      v10888[v10889] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10890 = this.childrenWalkers;
      var v17974 = TypeScript$$5.NodeType;
      var v10891 = v17974.Typeof;
      v10890[v10891] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10892 = this.childrenWalkers;
      var v17975 = TypeScript$$5.NodeType;
      var v10893 = v17975.NumberLit;
      v10892[v10893] = ChildrenWalkers.walkNone;
      var v10894 = this.childrenWalkers;
      var v17976 = TypeScript$$5.NodeType;
      var v10895 = v17976.Name;
      v10894[v10895] = ChildrenWalkers.walkNone;
      var v10896 = this.childrenWalkers;
      var v17977 = TypeScript$$5.NodeType;
      var v10897 = v17977.TypeRef;
      v10896[v10897] = ChildrenWalkers.walkTypeReferenceChildren;
      var v10898 = this.childrenWalkers;
      var v17978 = TypeScript$$5.NodeType;
      var v10899 = v17978.Index;
      v10898[v10899] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10900 = this.childrenWalkers;
      var v17979 = TypeScript$$5.NodeType;
      var v10901 = v17979.Call;
      v10900[v10901] = ChildrenWalkers.walkCallExpressionChildren;
      var v10902 = this.childrenWalkers;
      var v17980 = TypeScript$$5.NodeType;
      var v10903 = v17980.New;
      v10902[v10903] = ChildrenWalkers.walkCallExpressionChildren;
      var v10904 = this.childrenWalkers;
      var v17981 = TypeScript$$5.NodeType;
      var v10905 = v17981.Asg;
      v10904[v10905] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10906 = this.childrenWalkers;
      var v17982 = TypeScript$$5.NodeType;
      var v10907 = v17982.AsgAdd;
      v10906[v10907] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10908 = this.childrenWalkers;
      var v17983 = TypeScript$$5.NodeType;
      var v10909 = v17983.AsgSub;
      v10908[v10909] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10910 = this.childrenWalkers;
      var v17984 = TypeScript$$5.NodeType;
      var v10911 = v17984.AsgDiv;
      v10910[v10911] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10912 = this.childrenWalkers;
      var v17985 = TypeScript$$5.NodeType;
      var v10913 = v17985.AsgMul;
      v10912[v10913] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10914 = this.childrenWalkers;
      var v17986 = TypeScript$$5.NodeType;
      var v10915 = v17986.AsgMod;
      v10914[v10915] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10916 = this.childrenWalkers;
      var v17987 = TypeScript$$5.NodeType;
      var v10917 = v17987.AsgAnd;
      v10916[v10917] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10918 = this.childrenWalkers;
      var v17988 = TypeScript$$5.NodeType;
      var v10919 = v17988.AsgXor;
      v10918[v10919] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10920 = this.childrenWalkers;
      var v17989 = TypeScript$$5.NodeType;
      var v10921 = v17989.AsgOr;
      v10920[v10921] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10922 = this.childrenWalkers;
      var v17990 = TypeScript$$5.NodeType;
      var v10923 = v17990.AsgLsh;
      v10922[v10923] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10924 = this.childrenWalkers;
      var v17991 = TypeScript$$5.NodeType;
      var v10925 = v17991.AsgRsh;
      v10924[v10925] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10926 = this.childrenWalkers;
      var v17992 = TypeScript$$5.NodeType;
      var v10927 = v17992.AsgRs2;
      v10926[v10927] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10928 = this.childrenWalkers;
      var v17993 = TypeScript$$5.NodeType;
      var v10929 = v17993.ConditionalExpression;
      v10928[v10929] = ChildrenWalkers.walkTrinaryExpressionChildren;
      var v10930 = this.childrenWalkers;
      var v17994 = TypeScript$$5.NodeType;
      var v10931 = v17994.LogOr;
      v10930[v10931] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10932 = this.childrenWalkers;
      var v17995 = TypeScript$$5.NodeType;
      var v10933 = v17995.LogAnd;
      v10932[v10933] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10934 = this.childrenWalkers;
      var v17996 = TypeScript$$5.NodeType;
      var v10935 = v17996.Or;
      v10934[v10935] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10936 = this.childrenWalkers;
      var v17997 = TypeScript$$5.NodeType;
      var v10937 = v17997.Xor;
      v10936[v10937] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10938 = this.childrenWalkers;
      var v17998 = TypeScript$$5.NodeType;
      var v10939 = v17998.And;
      v10938[v10939] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10940 = this.childrenWalkers;
      var v17999 = TypeScript$$5.NodeType;
      var v10941 = v17999.Eq;
      v10940[v10941] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10942 = this.childrenWalkers;
      var v18000 = TypeScript$$5.NodeType;
      var v10943 = v18000.Ne;
      v10942[v10943] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10944 = this.childrenWalkers;
      var v18001 = TypeScript$$5.NodeType;
      var v10945 = v18001.Eqv;
      v10944[v10945] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10946 = this.childrenWalkers;
      var v18002 = TypeScript$$5.NodeType;
      var v10947 = v18002.NEqv;
      v10946[v10947] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10948 = this.childrenWalkers;
      var v18003 = TypeScript$$5.NodeType;
      var v10949 = v18003.Lt;
      v10948[v10949] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10950 = this.childrenWalkers;
      var v18004 = TypeScript$$5.NodeType;
      var v10951 = v18004.Le;
      v10950[v10951] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10952 = this.childrenWalkers;
      var v18005 = TypeScript$$5.NodeType;
      var v10953 = v18005.Gt;
      v10952[v10953] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10954 = this.childrenWalkers;
      var v18006 = TypeScript$$5.NodeType;
      var v10955 = v18006.Ge;
      v10954[v10955] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10956 = this.childrenWalkers;
      var v18007 = TypeScript$$5.NodeType;
      var v10957 = v18007.Add;
      v10956[v10957] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10958 = this.childrenWalkers;
      var v18008 = TypeScript$$5.NodeType;
      var v10959 = v18008.Sub;
      v10958[v10959] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10960 = this.childrenWalkers;
      var v18009 = TypeScript$$5.NodeType;
      var v10961 = v18009.Mul;
      v10960[v10961] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10962 = this.childrenWalkers;
      var v18010 = TypeScript$$5.NodeType;
      var v10963 = v18010.Div;
      v10962[v10963] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10964 = this.childrenWalkers;
      var v18011 = TypeScript$$5.NodeType;
      var v10965 = v18011.Mod;
      v10964[v10965] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10966 = this.childrenWalkers;
      var v18012 = TypeScript$$5.NodeType;
      var v10967 = v18012.Lsh;
      v10966[v10967] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10968 = this.childrenWalkers;
      var v18013 = TypeScript$$5.NodeType;
      var v10969 = v18013.Rsh;
      v10968[v10969] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10970 = this.childrenWalkers;
      var v18014 = TypeScript$$5.NodeType;
      var v10971 = v18014.Rs2;
      v10970[v10971] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10972 = this.childrenWalkers;
      var v18015 = TypeScript$$5.NodeType;
      var v10973 = v18015.Not;
      v10972[v10973] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10974 = this.childrenWalkers;
      var v18016 = TypeScript$$5.NodeType;
      var v10975 = v18016.LogNot;
      v10974[v10975] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10976 = this.childrenWalkers;
      var v18017 = TypeScript$$5.NodeType;
      var v10977 = v18017.IncPre;
      v10976[v10977] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10978 = this.childrenWalkers;
      var v18018 = TypeScript$$5.NodeType;
      var v10979 = v18018.DecPre;
      v10978[v10979] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10980 = this.childrenWalkers;
      var v18019 = TypeScript$$5.NodeType;
      var v10981 = v18019.IncPost;
      v10980[v10981] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10982 = this.childrenWalkers;
      var v18020 = TypeScript$$5.NodeType;
      var v10983 = v18020.DecPost;
      v10982[v10983] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10984 = this.childrenWalkers;
      var v18021 = TypeScript$$5.NodeType;
      var v10985 = v18021.TypeAssertion;
      v10984[v10985] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v10986 = this.childrenWalkers;
      var v18022 = TypeScript$$5.NodeType;
      var v10987 = v18022.FuncDecl;
      v10986[v10987] = ChildrenWalkers.walkFuncDeclChildren;
      var v10988 = this.childrenWalkers;
      var v18023 = TypeScript$$5.NodeType;
      var v10989 = v18023.Member;
      v10988[v10989] = ChildrenWalkers.walkBinaryExpressionChildren;
      var v10990 = this.childrenWalkers;
      var v18024 = TypeScript$$5.NodeType;
      var v10991 = v18024.VarDecl;
      v10990[v10991] = ChildrenWalkers.walkBoundDeclChildren;
      var v10992 = this.childrenWalkers;
      var v18025 = TypeScript$$5.NodeType;
      var v10993 = v18025.ArgDecl;
      v10992[v10993] = ChildrenWalkers.walkBoundDeclChildren;
      var v10994 = this.childrenWalkers;
      var v18026 = TypeScript$$5.NodeType;
      var v10995 = v18026.Return;
      v10994[v10995] = ChildrenWalkers.walkReturnStatementChildren;
      var v10996 = this.childrenWalkers;
      var v18027 = TypeScript$$5.NodeType;
      var v10997 = v18027.Break;
      v10996[v10997] = ChildrenWalkers.walkNone;
      var v10998 = this.childrenWalkers;
      var v18028 = TypeScript$$5.NodeType;
      var v10999 = v18028.Continue;
      v10998[v10999] = ChildrenWalkers.walkNone;
      var v11000 = this.childrenWalkers;
      var v18029 = TypeScript$$5.NodeType;
      var v11001 = v18029.Throw;
      v11000[v11001] = ChildrenWalkers.walkUnaryExpressionChildren;
      var v11002 = this.childrenWalkers;
      var v18030 = TypeScript$$5.NodeType;
      var v11003 = v18030.For;
      v11002[v11003] = ChildrenWalkers.walkForStatementChildren;
      var v11004 = this.childrenWalkers;
      var v18031 = TypeScript$$5.NodeType;
      var v11005 = v18031.ForIn;
      v11004[v11005] = ChildrenWalkers.walkForInStatementChildren;
      var v11006 = this.childrenWalkers;
      var v18032 = TypeScript$$5.NodeType;
      var v11007 = v18032.If;
      v11006[v11007] = ChildrenWalkers.walkIfStatementChildren;
      var v11008 = this.childrenWalkers;
      var v18033 = TypeScript$$5.NodeType;
      var v11009 = v18033.While;
      v11008[v11009] = ChildrenWalkers.walkWhileStatementChildren;
      var v11010 = this.childrenWalkers;
      var v18034 = TypeScript$$5.NodeType;
      var v11011 = v18034.DoWhile;
      v11010[v11011] = ChildrenWalkers.walkDoWhileStatementChildren;
      var v11012 = this.childrenWalkers;
      var v18035 = TypeScript$$5.NodeType;
      var v11013 = v18035.Block;
      v11012[v11013] = ChildrenWalkers.walkBlockChildren;
      var v11014 = this.childrenWalkers;
      var v18036 = TypeScript$$5.NodeType;
      var v11015 = v18036.Case;
      v11014[v11015] = ChildrenWalkers.walkCaseStatementChildren;
      var v11016 = this.childrenWalkers;
      var v18037 = TypeScript$$5.NodeType;
      var v11017 = v18037.Switch;
      v11016[v11017] = ChildrenWalkers.walkSwitchStatementChildren;
      var v11018 = this.childrenWalkers;
      var v18038 = TypeScript$$5.NodeType;
      var v11019 = v18038.Try;
      v11018[v11019] = ChildrenWalkers.walkTryChildren;
      var v11020 = this.childrenWalkers;
      var v18039 = TypeScript$$5.NodeType;
      var v11021 = v18039.TryCatch;
      v11020[v11021] = ChildrenWalkers.walkTryCatchChildren;
      var v11022 = this.childrenWalkers;
      var v18040 = TypeScript$$5.NodeType;
      var v11023 = v18040.TryFinally;
      v11022[v11023] = ChildrenWalkers.walkTryFinallyChildren;
      var v11024 = this.childrenWalkers;
      var v18041 = TypeScript$$5.NodeType;
      var v11025 = v18041.Finally;
      v11024[v11025] = ChildrenWalkers.walkFinallyChildren;
      var v11026 = this.childrenWalkers;
      var v18042 = TypeScript$$5.NodeType;
      var v11027 = v18042.Catch;
      v11026[v11027] = ChildrenWalkers.walkCatchChildren;
      var v11028 = this.childrenWalkers;
      var v18043 = TypeScript$$5.NodeType;
      var v11029 = v18043.List;
      v11028[v11029] = ChildrenWalkers.walkListChildren;
      var v11030 = this.childrenWalkers;
      var v18044 = TypeScript$$5.NodeType;
      var v11031 = v18044.Script;
      v11030[v11031] = ChildrenWalkers.walkScriptChildren;
      var v11032 = this.childrenWalkers;
      var v18045 = TypeScript$$5.NodeType;
      var v11033 = v18045.ClassDeclaration;
      v11032[v11033] = ChildrenWalkers.walkClassDeclChildren;
      var v11034 = this.childrenWalkers;
      var v18046 = TypeScript$$5.NodeType;
      var v11035 = v18046.InterfaceDeclaration;
      v11034[v11035] = ChildrenWalkers.walkTypeDeclChildren;
      var v11036 = this.childrenWalkers;
      var v18047 = TypeScript$$5.NodeType;
      var v11037 = v18047.ModuleDeclaration;
      v11036[v11037] = ChildrenWalkers.walkModuleDeclChildren;
      var v11038 = this.childrenWalkers;
      var v18048 = TypeScript$$5.NodeType;
      var v11039 = v18048.ImportDeclaration;
      v11038[v11039] = ChildrenWalkers.walkImportDeclChildren;
      var v11040 = this.childrenWalkers;
      var v18049 = TypeScript$$5.NodeType;
      var v11041 = v18049.With;
      v11040[v11041] = ChildrenWalkers.walkWithStatementChildren;
      var v11042 = this.childrenWalkers;
      var v18050 = TypeScript$$5.NodeType;
      var v11043 = v18050.Label;
      v11042[v11043] = ChildrenWalkers.walkLabelChildren;
      var v11044 = this.childrenWalkers;
      var v18051 = TypeScript$$5.NodeType;
      var v11045 = v18051.LabeledStatement;
      v11044[v11045] = ChildrenWalkers.walkLabeledStatementChildren;
      var v11046 = this.childrenWalkers;
      var v18052 = TypeScript$$5.NodeType;
      var v11047 = v18052.EBStart;
      v11046[v11047] = ChildrenWalkers.walkNone;
      var v11048 = this.childrenWalkers;
      var v18053 = TypeScript$$5.NodeType;
      var v11049 = v18053.GotoEB;
      v11048[v11049] = ChildrenWalkers.walkNone;
      var v11050 = this.childrenWalkers;
      var v18054 = TypeScript$$5.NodeType;
      var v11051 = v18054.EndCode;
      v11050[v11051] = ChildrenWalkers.walkNone;
      var v11052 = this.childrenWalkers;
      var v18055 = TypeScript$$5.NodeType;
      var v11053 = v18055.Error;
      v11052[v11053] = ChildrenWalkers.walkNone;
      var v11054 = this.childrenWalkers;
      var v18056 = TypeScript$$5.NodeType;
      var v11055 = v18056.Comment;
      v11054[v11055] = ChildrenWalkers.walkNone;
      var v11056 = this.childrenWalkers;
      var v18057 = TypeScript$$5.NodeType;
      var v11057 = v18057.Debugger;
      v11056[v11057] = ChildrenWalkers.walkNone;
      var e$$8;
      var v18058 = TypeScript$$5.NodeType;
      var v11059 = v18058._map;
      for (e$$8 in v11059) {
        var v22526 = this.childrenWalkers;
        var v18059 = v22526[e$$8];
        var v11058 = v18059 === undefined;
        if (v11058) {
          throw new Error("initWalkers function is not up to date with enum content!");
        }
      }
      return;
    }
    function v329(pre$$3, post$$3, options$$4, state$$3) {
      var v11060 = !options$$4;
      if (v11060) {
        options$$4 = new AstWalkOptions;
      }
      var v11061 = this.childrenWalkers;
      return new AstWalker(v11061, pre$$3, post$$3, options$$4, state$$3);
    }
    function v328(pre$$2, post$$2, options$$3, state$$2) {
      return this.getSlowWalker(pre$$2, post$$2, options$$3, state$$2);
    }
    function v327(ast$$4, pre$$1, post$$1, options$$2, state$$1) {
      var v11062 = this.getWalker(pre$$1, post$$1, options$$2, state$$1);
      return v11062.walk(ast$$4, null);
    }
    function AstWalkerFactory$$1() {
      this.childrenWalkers = [];
      this.initChildrenWalkers();
      return;
    }
    var v11063 = AstWalkerFactory$$1.prototype;
    v11063.walk = v327;
    var v11064 = AstWalkerFactory$$1.prototype;
    v11064.getWalker = v328;
    var v11065 = AstWalkerFactory$$1.prototype;
    v11065.getSlowWalker = v329;
    var v11066 = AstWalkerFactory$$1.prototype;
    v11066.initChildrenWalkers = v330;
    return AstWalkerFactory$$1;
  }
  function v326() {
    function v325(ast$$3, parent$$1) {
      var preAst = this.pre(ast$$3, parent$$1, this);
      var v11067 = preAst === undefined;
      if (v11067) {
        preAst = ast$$3;
      }
      var v18060 = this.options;
      var v11074 = v18060.goChildren;
      if (v11074) {
        var v11068 = this.options;
        var svGoSib = v11068.goNextSibling;
        var v11069 = this.options;
        v11069.goNextSibling = true;
        var v11070 = this.childrenWalkers;
        var v11071 = ast$$3.nodeType;
        v11070[v11071](ast$$3, parent$$1, this);
        var v11072 = this.options;
        v11072.goNextSibling = svGoSib;
      } else {
        var v11073 = this.options;
        v11073.goChildren = true;
      }
      var v11076 = this.post;
      if (v11076) {
        var postAst = this.post(preAst, parent$$1, this);
        var v11075 = postAst === undefined;
        if (v11075) {
          postAst = preAst;
        }
        return postAst;
      } else {
        return preAst;
      }
      return;
    }
    function AstWalker$$1(childrenWalkers, pre, post, options$$1, state) {
      this.childrenWalkers = childrenWalkers;
      this.pre = pre;
      this.post = post;
      this.options = options$$1;
      this.state = state;
      return;
    }
    var v11077 = AstWalker$$1.prototype;
    v11077.walk = v325;
    return AstWalker$$1;
  }
  function v324() {
    function v323(stop) {
      var v18061 = typeof stop;
      var v11078 = v18061 === "undefined";
      if (v11078) {
        stop = true;
      }
      this.goChildren = !stop;
      this.goNextSibling = !stop;
      return;
    }
    function AstWalkOptions$$1() {
      this.goChildren = true;
      this.goNextSibling = true;
      this.reverseSiblings = false;
      return;
    }
    var v11079 = AstWalkOptions$$1.prototype;
    v11079.stopWalk = v323;
    return AstWalkOptions$$1;
  }
  function getAstWalkerFactory() {
    var v11080 = !globalAstWalkerFactory;
    if (v11080) {
      globalAstWalkerFactory = new AstWalkerFactory;
    }
    return globalAstWalkerFactory;
  }
  var AstWalkOptions = v324();
  TypeScript$$5.AstWalkOptions = AstWalkOptions;
  var AstWalker = v326();
  var AstWalkerFactory = v331();
  TypeScript$$5.AstWalkerFactory = AstWalkerFactory;
  var globalAstWalkerFactory;
  TypeScript$$5.getAstWalkerFactory = getAstWalkerFactory;
  var ChildrenWalkers;
  var v18062 = ChildrenWalkers;
  var v22527 = !v18062;
  if (v22527) {
    v18062 = ChildrenWalkers = {};
  }
  var v11081 = v18062;
  v332(v11081);
  return;
}
function v322(TypeScript$$4) {
  function v321(_super$$47) {
    function v320(emitter$$38, tokenId$$38, startLine$$38) {
      emitter$$38.emitParensAndCommentsInPlace(this, true);
      emitter$$38.recordSourceMappingStart(this);
      emitter$$38.writeLineToOutput("debugger;");
      emitter$$38.recordSourceMappingEnd(this);
      emitter$$38.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function DebuggerStatement$$1() {
      var v18063 = TypeScript$$4.NodeType;
      var v11082 = v18063.Debugger;
      _super$$47.call(this, v11082);
      return;
    }
    __extends(DebuggerStatement$$1, _super$$47);
    var v11083 = DebuggerStatement$$1.prototype;
    v11083.emit = v320;
    return DebuggerStatement$$1;
  }
  function v319(_super$$46) {
    function getDocCommentTextOfSignatures(signatures) {
      var comments$$1 = [];
      var i$$24 = 0;
      var v18064 = signatures.length;
      var v11087 = i$$24 < v18064;
      for (;v11087;) {
        var v11084 = TypeScript$$4.Comment;
        var v22528 = signatures[i$$24];
        var v18065 = v22528.declAST;
        var v11085 = v18065.getDocComments();
        var signatureDocComment = v11084.getDocCommentText(v11085);
        var v11086 = signatureDocComment != "";
        if (v11086) {
          comments$$1.push(signatureDocComment);
        }
        i$$24++;
        var v18066 = signatures.length;
        v11087 = i$$24 < v18066;
      }
      return comments$$1.join("\n");
    }
    function getParameterDocCommentText(param$$4, fncDocComments) {
      var v22529 = fncDocComments.length;
      var v18067 = v22529 == 0;
      var v22531 = !v18067;
      if (v22531) {
        var v24728 = fncDocComments[0];
        var v22530 = v24728.isBlockComment;
        v18067 = !v22530;
      }
      var v11088 = v18067;
      if (v11088) {
        return "";
      }
      var i$$23 = 0;
      var v18068 = fncDocComments.length;
      var v11112 = i$$23 < v18068;
      for (;v11112;) {
        var v11089 = fncDocComments[i$$23];
        var commentContents = v11089.content;
        var j = commentContents.indexOf("@param", 0);
        var v11111 = 0 <= j;
        for (;v11111;) {
          j = j + 6;
          var v18069 = Comment$$2.isSpaceChar(commentContents, j);
          var v11090 = !v18069;
          if (v11090) {
            j = commentContents.indexOf("@param", j);
            v11111 = 0 <= j;
            continue;
          }
          j = Comment$$2.consumeLeadingSpace(commentContents, j);
          var v11091 = j == -1;
          if (v11091) {
            break;
          }
          var v18070 = commentContents.charCodeAt(j);
          var v18071 = TypeScript$$4.LexCodeLC;
          var v11101 = v18070 == v18071;
          if (v11101) {
            j++;
            var charCode$$3 = 0;
            var curlies = 1;
            var v18072 = commentContents.length;
            var v11096 = j < v18072;
            for (;v11096;) {
              charCode$$3 = commentContents.charCodeAt(j);
              var v18073 = TypeScript$$4.LexCodeLC;
              var v11092 = charCode$$3 == v18073;
              if (v11092) {
                curlies++;
                j++;
                var v18074 = commentContents.length;
                v11096 = j < v18074;
                continue;
              }
              var v18075 = TypeScript$$4.LexCodeRC;
              var v11094 = charCode$$3 == v18075;
              if (v11094) {
                curlies--;
                var v11093 = curlies == 0;
                if (v11093) {
                  break;
                } else {
                  j++;
                  var v18076 = commentContents.length;
                  v11096 = j < v18076;
                  continue;
                }
              }
              var v18077 = TypeScript$$4.LexCodeAtSign;
              var v11095 = charCode$$3 == v18077;
              if (v11095) {
                break;
              }
              j++;
              var v18078 = commentContents.length;
              v11096 = j < v18078;
            }
            var v18079 = commentContents.length;
            var v11097 = j == v18079;
            if (v11097) {
              break;
            }
            var v18080 = TypeScript$$4.LexCodeAtSign;
            var v11098 = charCode$$3 == v18080;
            if (v11098) {
              j = commentContents.indexOf("@param", j);
              v11111 = 0 <= j;
              continue;
            }
            var v11099 = j + 1;
            j = Comment$$2.consumeLeadingSpace(commentContents, v11099);
            var v11100 = j == -1;
            if (v11100) {
              break;
            }
          }
          var v24729 = param$$4.length;
          var v22532 = commentContents.substr(j, v24729);
          var v18081 = param$$4 != v22532;
          var v22534 = !v18081;
          if (v22534) {
            var v25663 = param$$4.length;
            var v24730 = j + v25663;
            var v22533 = Comment$$2.isSpaceChar(commentContents, v24730);
            v18081 = !v22533;
          }
          var v11102 = v18081;
          if (v11102) {
            j = commentContents.indexOf("@param", j);
            v11111 = 0 <= j;
            continue;
          }
          var v18082 = param$$4.length;
          var v11103 = j + v18082;
          j = Comment$$2.consumeLeadingSpace(commentContents, v11103);
          var v11104 = j == -1;
          if (v11104) {
            return "";
          }
          var endOfParam = commentContents.indexOf("@", j);
          var v18083;
          var v22535 = endOfParam < 0;
          if (v22535) {
            v18083 = commentContents.length;
          } else {
            v18083 = endOfParam;
          }
          var v11105 = v18083;
          var paramHelpString = commentContents.substring(j, v11105);
          var paramSpacesToRemove = undefined;
          var v18084 = commentContents.substring(0, j);
          var v11106 = v18084.lastIndexOf("\n");
          var paramLineIndex = v11106 + 1;
          var v11108 = paramLineIndex != 0;
          if (v11108) {
            var v18085 = paramLineIndex < j;
            if (v18085) {
              var v24731 = paramLineIndex + 1;
              var v22536 = commentContents.charAt(v24731);
              v18085 = v22536 == "\r";
            }
            var v11107 = v18085;
            if (v11107) {
              paramLineIndex++;
            }
          }
          var startSpaceRemovalIndex = Comment$$2.consumeLeadingSpace(commentContents, paramLineIndex);
          var v18086 = startSpaceRemovalIndex != j;
          if (v18086) {
            var v22537 = commentContents.charAt(startSpaceRemovalIndex);
            v18086 = v22537 == "*";
          }
          var v11110 = v18086;
          if (v11110) {
            var v11109 = j - startSpaceRemovalIndex;
            paramSpacesToRemove = v11109 - 1;
          }
          return Comment$$2.cleanJSDocComment(paramHelpString, paramSpacesToRemove);
        }
        i$$23++;
        var v18087 = fncDocComments.length;
        v11112 = i$$23 < v18087;
      }
      return "";
    }
    function getDocCommentText(comments) {
      var docCommentText$$1 = [];
      var c$$2 = 0;
      var v18088 = comments.length;
      var v11115 = c$$2 < v18088;
      for (;v11115;) {
        var v11113 = comments[c$$2];
        var commentText = v11113.getDocCommentText();
        var v11114 = commentText != "";
        if (v11114) {
          docCommentText$$1.push(commentText);
        }
        c$$2++;
        var v18089 = comments.length;
        v11115 = c$$2 < v18089;
      }
      return docCommentText$$1.join("\n");
    }
    function cleanJSDocComment(content$$1, spacesToRemove) {
      var docCommentLines = [];
      content$$1 = content$$1.replace("/**", "");
      var v24732 = content$$1.length;
      var v22538 = v24732 >= 2;
      if (v22538) {
        var v26072 = content$$1.length;
        var v25664 = v26072 - 1;
        var v24733 = content$$1.charAt(v25664);
        v22538 = v24733 == "/";
      }
      var v18090 = v22538;
      if (v18090) {
        var v25665 = content$$1.length;
        var v24734 = v25665 - 2;
        var v22539 = content$$1.charAt(v24734);
        v18090 = v22539 == "*";
      }
      var v11117 = v18090;
      if (v11117) {
        var v18091 = content$$1.length;
        var v11116 = v18091 - 2;
        content$$1 = content$$1.substring(0, v11116);
      }
      var lines = content$$1.split("\n");
      var inParamTag = false;
      var l = 0;
      var v18092 = lines.length;
      var v11125 = l < v18092;
      for (;v11125;) {
        var line$$3 = lines[l];
        var cleanLinePos = Comment$$2.cleanDocCommentLine(line$$3, true, spacesToRemove);
        var v11118 = !cleanLinePos;
        if (v11118) {
          l++;
          var v18093 = lines.length;
          v11125 = l < v18093;
          continue;
        }
        var docCommentText = "";
        var prevPos = cleanLinePos.minChar;
        var v11119 = cleanLinePos.minChar;
        var i$$22 = line$$3.indexOf("@", v11119);
        var v18094 = 0 <= i$$22;
        if (v18094) {
          var v22540 = cleanLinePos.limChar;
          v18094 = i$$22 < v22540;
        }
        var v11122 = v18094;
        for (;v11122;) {
          var wasInParamtag = inParamTag;
          var v24735 = i$$22 + 1;
          var v22541 = line$$3.indexOf("param", v24735);
          var v22542 = i$$22 + 1;
          var v18095 = v22541 == v22542;
          if (v18095) {
            var v22543 = i$$22 + 6;
            v18095 = Comment$$2.isSpaceChar(line$$3, v22543);
          }
          var v11121 = v18095;
          if (v11121) {
            var v11120 = !wasInParamtag;
            if (v11120) {
              var v18096 = line$$3.substring(prevPos, i$$22);
              docCommentText = docCommentText + v18096;
            }
            prevPos = i$$22;
            inParamTag = true;
          } else {
            if (wasInParamtag) {
              prevPos = i$$22;
              inParamTag = false;
            }
          }
          var v18097 = i$$22 + 1;
          i$$22 = line$$3.indexOf("@", v18097);
          var v18098 = 0 <= i$$22;
          if (v18098) {
            var v22544 = cleanLinePos.limChar;
            v18098 = i$$22 < v22544;
          }
          v11122 = v18098;
        }
        var v11123 = !inParamTag;
        if (v11123) {
          var v22545 = cleanLinePos.limChar;
          var v18099 = line$$3.substring(prevPos, v22545);
          docCommentText = docCommentText + v18099;
        }
        var newCleanPos = Comment$$2.cleanDocCommentLine(docCommentText, false);
        if (newCleanPos) {
          var v11124 = spacesToRemove == undefined;
          if (v11124) {
            spacesToRemove = cleanLinePos.jsDocSpacesRemoved;
          }
          docCommentLines.push(docCommentText);
        }
        l++;
        var v18100 = lines.length;
        v11125 = l < v18100;
      }
      return docCommentLines.join("\n");
    }
    function cleanDocCommentLine(line$$2, jsDocStyleComment, jsDocLineSpaceToRemove) {
      var nonSpaceIndex = Comment$$2.consumeLeadingSpace(line$$2, 0);
      var v11129 = nonSpaceIndex != -1;
      if (v11129) {
        var jsDocSpacesRemoved = nonSpaceIndex;
        var v18101 = jsDocStyleComment;
        if (v18101) {
          var v22546 = line$$2.charAt(nonSpaceIndex);
          v18101 = v22546 == "*";
        }
        var v11127 = v18101;
        if (v11127) {
          var startIndex$$1 = nonSpaceIndex + 1;
          nonSpaceIndex = Comment$$2.consumeLeadingSpace(line$$2, startIndex$$1, jsDocLineSpaceToRemove);
          var v11126 = nonSpaceIndex != -1;
          if (v11126) {
            jsDocSpacesRemoved = nonSpaceIndex - startIndex$$1;
          } else {
            return null;
          }
        }
        var v18102;
        var v26073 = line$$2.length;
        var v25666 = v26073 - 1;
        var v24736 = line$$2.charAt(v25666);
        var v22548 = v24736 == "\r";
        if (v22548) {
          var v22547 = line$$2.length;
          v18102 = v22547 - 1;
        } else {
          v18102 = line$$2.length;
        }
        var v11128 = v18102;
        return{minChar:nonSpaceIndex, limChar:v11128, jsDocSpacesRemoved:jsDocSpacesRemoved};
      }
      return null;
    }
    function isSpaceChar(line$$1, index$$41) {
      var length$$13 = line$$1.length;
      var v11131 = index$$41 < length$$13;
      if (v11131) {
        var charCode$$2 = line$$1.charCodeAt(index$$41);
        var v18103 = TypeScript$$4.LexCodeSpace;
        var v11130 = charCode$$2 == v18103;
        var v18105 = !v11130;
        if (v18105) {
          var v18104 = TypeScript$$4.LexCodeTAB;
          v11130 = charCode$$2 == v18104;
        }
        return v11130;
      }
      return index$$41 == length$$13;
    }
    function consumeLeadingSpace(line, startIndex, maxSpacesToRemove) {
      var endIndex = line.length;
      var v11133 = maxSpacesToRemove != undefined;
      if (v11133) {
        var v11132 = startIndex + maxSpacesToRemove;
        endIndex = TypeScript$$4.min(v11132, endIndex);
      }
      var v11135 = startIndex < endIndex;
      for (;v11135;) {
        var charCode$$1 = line.charCodeAt(startIndex);
        var v22549 = TypeScript$$4.LexCodeSpace;
        var v18106 = charCode$$1 != v22549;
        if (v18106) {
          var v22550 = TypeScript$$4.LexCodeTAB;
          v18106 = charCode$$1 != v22550;
        }
        var v11134 = v18106;
        if (v11134) {
          return startIndex;
        }
        startIndex++;
        v11135 = startIndex < endIndex;
      }
      var v18107 = line.length;
      var v11136 = endIndex != v18107;
      if (v11136) {
        return endIndex;
      }
      return-1;
    }
    function v318() {
      var v18108 = this.docCommentText;
      var v11138 = v18108 == null;
      if (v11138) {
        var v11137 = this.content;
        var v27067 = Comment$$2.cleanJSDocComment(v11137);
        this.docCommentText = v27067;
      }
      return this.docCommentText;
    }
    function v317() {
      var v11140 = this.isBlockComment;
      if (v11140) {
        var v18109 = this.content;
        var v11139 = v18109.charAt(2);
        return v11139 == "*";
      }
      return false;
    }
    function v316() {
      var v18110 = this.text;
      var v11146 = v18110 == null;
      if (v11146) {
        var v11145 = this.isBlockComment;
        if (v11145) {
          var v11141 = this.content;
          var v27068 = v11141.split("\n");
          this.text = v27068;
          var i$$21 = 0;
          var v22551 = this.text;
          var v18111 = v22551.length;
          var v11143 = i$$21 < v18111;
          for (;v11143;) {
            var v11142 = this.text;
            var v22552 = this.text;
            var v18112 = v22552[i$$21];
            var v27069 = v18112.replace(/^\s+|\s+$/g, "");
            v11142[i$$21] = v27069;
            i$$21++;
            var v22553 = this.text;
            var v18113 = v22553.length;
            v11143 = i$$21 < v18113;
          }
        } else {
          var v18114 = this.content;
          var v11144 = v18114.replace(/^\s+|\s+$/g, "");
          this.text = [v11144];
        }
      }
      return this.text;
    }
    function Comment$$2(content, isBlockComment, endsLine) {
      var v18115 = TypeScript$$4.NodeType;
      var v11147 = v18115.Comment;
      _super$$46.call(this, v11147);
      this.content = content;
      this.isBlockComment = isBlockComment;
      this.endsLine = endsLine;
      this.text = null;
      this.docCommentText = null;
      return;
    }
    __extends(Comment$$2, _super$$46);
    var v11148 = Comment$$2.prototype;
    v11148.getText = v316;
    var v11149 = Comment$$2.prototype;
    v11149.isDocComment = v317;
    var v11150 = Comment$$2.prototype;
    v11150.getDocCommentText = v318;
    Comment$$2.consumeLeadingSpace = consumeLeadingSpace;
    Comment$$2.isSpaceChar = isSpaceChar;
    Comment$$2.cleanDocCommentLine = cleanDocCommentLine;
    Comment$$2.cleanJSDocComment = cleanJSDocComment;
    Comment$$2.getDocCommentText = getDocCommentText;
    Comment$$2.getParameterDocCommentText = getParameterDocCommentText;
    Comment$$2.getDocCommentTextOfSignatures = getDocCommentTextOfSignatures;
    return Comment$$2;
  }
  function v315(_super$$45) {
    function v314(typeFlow$$35) {
      var v11151 = this.body;
      var v27070 = typeFlow$$35.typeCheck(v11151);
      this.body = v27070;
      return this;
    }
    function v313(context$$26) {
      var v11153 = this.body;
      if (v11153) {
        var v11152 = this.body;
        context$$26.walk(v11152, this);
      }
      var v18116 = context$$26.walker;
      var v11154 = v18116.options;
      v11154.goChildren = false;
      context$$26.noContinuation = false;
      return;
    }
    function v312(emitter$$37, tokenId$$37, startLine$$37) {
      emitter$$37.emitParensAndCommentsInPlace(this, true);
      emitter$$37.recordSourceMappingStart(this);
      emitter$$37.writeToOutput("finally");
      var v11155 = this.body;
      var v18117 = TypeScript$$4.TokenID;
      var v11156 = v18117.Finally;
      emitter$$37.emitJavascript(v11155, v11156, false);
      emitter$$37.recordSourceMappingEnd(this);
      emitter$$37.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function Finally$$1(body$$2) {
      var v18118 = TypeScript$$4.NodeType;
      var v11157 = v18118.Finally;
      _super$$45.call(this, v11157);
      this.body = body$$2;
      return;
    }
    __extends(Finally$$1, _super$$45);
    var v11158 = Finally$$1.prototype;
    v11158.emit = v312;
    var v11159 = Finally$$1.prototype;
    v11159.addToControlFlow = v313;
    var v11160 = Finally$$1.prototype;
    v11160.typeCheck = v314;
    return Finally$$1;
  }
  function v311(_super$$44) {
    function v310(typeFlow$$34) {
      var prevScope = typeFlow$$34.scope;
      typeFlow$$34.scope = this.containedScope;
      var v11161 = this.param;
      var v27071 = typeFlow$$34.typeCheck(v11161);
      this.param = v27071;
      var v11162 = TypeScript$$4.ValueLocation;
      var exceptVar = new v11162;
      var v11163 = TypeScript$$4.VariableSymbol;
      var v22554 = this.param;
      var v18119 = v22554.id;
      var v11164 = v18119.text;
      var v18120 = this.param;
      var v11165 = v18120.minChar;
      var v22555 = typeFlow$$34.checker;
      var v18121 = v22555.locationInfo;
      var v11166 = v18121.unitIndex;
      var varSym = new v11163(v11164, v11165, v11166, exceptVar);
      exceptVar.symbol = varSym;
      var v11167 = TypeScript$$4.TypeLink;
      var v27072 = new v11167;
      exceptVar.typeLink = v27072;
      var v11168 = exceptVar.typeLink;
      v11168.type = typeFlow$$34.anyType;
      var thisFnc = typeFlow$$34.thisFnc;
      var v18122 = thisFnc;
      if (v18122) {
        v18122 = thisFnc.type;
      }
      var v11171 = v18122;
      if (v11171) {
        var v11169 = exceptVar.symbol;
        var v18123 = thisFnc.type;
        v11169.container = v18123.symbol;
      } else {
        var v11170 = exceptVar.symbol;
        v11170.container = null;
      }
      var v11172 = this.param;
      v11172.sym = exceptVar.symbol;
      var v11173 = typeFlow$$34.scope;
      var v18124 = exceptVar.symbol;
      var v11174 = v18124.container;
      var v11175 = this.param;
      var v11176 = exceptVar.symbol;
      var v18125 = typeFlow$$34.checker;
      var v11177 = v18125.errorReporter;
      v11173.enter(v11174, v11175, v11176, v11177, false, false, false);
      var v11178 = this.body;
      var v27073 = typeFlow$$34.typeCheck(v11178);
      this.body = v27073;
      var v18126 = typeFlow$$34.checker;
      var v11182 = v18126.inProvisionalTypecheckMode();
      if (v11182) {
        var v11179 = typeFlow$$34.scope;
        var table = v11179.getTable();
        var v18127 = table.secondaryTable;
        var v11180 = v18127.table;
        var v18128 = exceptVar.symbol;
        var v11181 = v18128.name;
        v11180[v11181] = undefined;
      }
      this.type = typeFlow$$34.voidType;
      typeFlow$$34.scope = prevScope;
      return this;
    }
    function v309(context$$25) {
      var v11186 = this.param;
      if (v11186) {
        var v11183 = this.param;
        context$$25.addContent(v11183);
        var v11184 = TypeScript$$4.BasicBlock;
        var bodBlock = new v11184;
        var v11185 = context$$25.current;
        v11185.addSuccessor(bodBlock);
        context$$25.current = bodBlock;
      }
      var v11188 = this.body;
      if (v11188) {
        var v11187 = this.body;
        context$$25.walk(v11187, this);
      }
      context$$25.noContinuation = false;
      var v18129 = context$$25.walker;
      var v11189 = v18129.options;
      v11189.goChildren = false;
      return;
    }
    function v308(emitter$$36, tokenId$$36, startLine$$36) {
      emitter$$36.emitParensAndCommentsInPlace(this, true);
      emitter$$36.recordSourceMappingStart(this);
      emitter$$36.writeToOutput(" ");
      var v11190 = this.statement;
      emitter$$36.recordSourceMappingStart(v11190);
      emitter$$36.writeToOutput("catch (");
      var v11191 = this.param;
      var v18130 = TypeScript$$4.TokenID;
      var v11192 = v18130.OpenParen;
      emitter$$36.emitJavascript(v11191, v11192, false);
      emitter$$36.writeToOutput(")");
      var v11193 = this.statement;
      emitter$$36.recordSourceMappingEnd(v11193);
      var v11194 = this.body;
      var v18131 = TypeScript$$4.TokenID;
      var v11195 = v18131.Catch;
      emitter$$36.emitJavascript(v11194, v11195, false);
      emitter$$36.recordSourceMappingEnd(this);
      emitter$$36.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function Catch$$1(param$$3, body$$1) {
      var v18132 = TypeScript$$4.NodeType;
      var v11196 = v18132.Catch;
      _super$$44.call(this, v11196);
      this.param = param$$3;
      this.body = body$$1;
      var v27074 = new ASTSpan;
      this.statement = v27074;
      this.containedScope = null;
      var v11198 = this.param;
      if (v11198) {
        var v11197 = this.param;
        var v22556 = v11197.varFlags;
        var v24737 = TypeScript$$4.VarFlags;
        var v22557 = v24737.AutoInit;
        v11197.varFlags = v22556 | v22557;
      }
      return;
    }
    __extends(Catch$$1, _super$$44);
    var v11199 = Catch$$1.prototype;
    v11199.emit = v308;
    var v11200 = Catch$$1.prototype;
    v11200.addToControlFlow = v309;
    var v11201 = Catch$$1.prototype;
    v11201.typeCheck = v310;
    return Catch$$1;
  }
  function v307(_super$$43) {
    function v306(context$$24) {
      var v11203 = this.body;
      if (v11203) {
        var v11202 = this.body;
        context$$24.walk(v11202, this);
      }
      var v18133 = context$$24.walker;
      var v11204 = v18133.options;
      v11204.goChildren = false;
      context$$24.noContinuation = false;
      return;
    }
    function v305(typeFlow$$33) {
      var v11205 = this.body;
      var v27075 = typeFlow$$33.typeCheck(v11205);
      this.body = v27075;
      return this;
    }
    function v304(emitter$$35, tokenId$$35, startLine$$35) {
      emitter$$35.emitParensAndCommentsInPlace(this, true);
      emitter$$35.recordSourceMappingStart(this);
      emitter$$35.writeToOutput("try ");
      var v11206 = this.body;
      var v18134 = TypeScript$$4.TokenID;
      var v11207 = v18134.Try;
      emitter$$35.emitJavascript(v11206, v11207, false);
      emitter$$35.recordSourceMappingEnd(this);
      emitter$$35.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function Try$$1(body) {
      var v18135 = TypeScript$$4.NodeType;
      var v11208 = v18135.Try;
      _super$$43.call(this, v11208);
      this.body = body;
      return;
    }
    __extends(Try$$1, _super$$43);
    var v11209 = Try$$1.prototype;
    v11209.emit = v304;
    var v11210 = Try$$1.prototype;
    v11210.typeCheck = v305;
    var v11211 = Try$$1.prototype;
    v11211.addToControlFlow = v306;
    return Try$$1;
  }
  function v303(_super$$42) {
    function v302(typeFlow$$32) {
      var v11212 = this.tryNode;
      var v27076 = typeFlow$$32.typeCheck(v11212);
      this.tryNode = v27076;
      var v11213 = this.catchNode;
      var v27077 = typeFlow$$32.typeCheck(v11213);
      this.catchNode = v27077;
      this.type = typeFlow$$32.voidType;
      return this;
    }
    function v301(context$$23) {
      var beforeTry = context$$23.current;
      var v11214 = TypeScript$$4.BasicBlock;
      var tryBlock = new v11214;
      beforeTry.addSuccessor(tryBlock);
      context$$23.current = tryBlock;
      var v11215 = TypeScript$$4.BasicBlock;
      var afterTryCatch = new v11215;
      context$$23.pushStatement(this, null, afterTryCatch);
      var v11216 = this.tryNode;
      context$$23.walk(v11216, this);
      var v18136 = context$$23.noContinuation;
      var v11219 = !v18136;
      if (v11219) {
        var v11218 = context$$23.current;
        if (v11218) {
          var v11217 = context$$23.current;
          v11217.addSuccessor(afterTryCatch);
        }
      }
      var v11220 = TypeScript$$4.BasicBlock;
      var v27078 = new v11220;
      context$$23.current = v27078;
      var v11221 = context$$23.current;
      beforeTry.addSuccessor(v11221);
      var v11222 = this.catchNode;
      context$$23.walk(v11222, this);
      context$$23.popStatement();
      var v18137 = context$$23.noContinuation;
      var v11225 = !v18137;
      if (v11225) {
        var v11224 = context$$23.current;
        if (v11224) {
          var v11223 = context$$23.current;
          v11223.addSuccessor(afterTryCatch);
        }
      }
      context$$23.current = afterTryCatch;
      var v18138 = context$$23.walker;
      var v11226 = v18138.options;
      v11226.goChildren = false;
      return;
    }
    function v300(emitter$$34, tokenId$$34, startLine$$34) {
      emitter$$34.emitParensAndCommentsInPlace(this, true);
      emitter$$34.recordSourceMappingStart(this);
      var v11227 = this.tryNode;
      var v18139 = TypeScript$$4.TokenID;
      var v11228 = v18139.Try;
      emitter$$34.emitJavascript(v11227, v11228, false);
      var v11229 = this.catchNode;
      var v18140 = TypeScript$$4.TokenID;
      var v11230 = v18140.Catch;
      emitter$$34.emitJavascript(v11229, v11230, false);
      emitter$$34.recordSourceMappingEnd(this);
      emitter$$34.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v299() {
      return true;
    }
    function TryCatch$$1(tryNode$$1, catchNode) {
      var v18141 = TypeScript$$4.NodeType;
      var v11231 = v18141.TryCatch;
      _super$$42.call(this, v11231);
      this.tryNode = tryNode$$1;
      this.catchNode = catchNode;
      return;
    }
    __extends(TryCatch$$1, _super$$42);
    var v11232 = TryCatch$$1.prototype;
    v11232.isCompoundStatement = v299;
    var v11233 = TryCatch$$1.prototype;
    v11233.emit = v300;
    var v11234 = TryCatch$$1.prototype;
    v11234.addToControlFlow = v301;
    var v11235 = TryCatch$$1.prototype;
    v11235.typeCheck = v302;
    return TryCatch$$1;
  }
  function v298(_super$$41) {
    function v297(context$$22) {
      var v11236 = TypeScript$$4.BasicBlock;
      var afterFinally = new v11236;
      var v11237 = this.tryNode;
      context$$22.walk(v11237, this);
      var v11238 = TypeScript$$4.BasicBlock;
      var finBlock = new v11238;
      var v11240 = context$$22.current;
      if (v11240) {
        var v11239 = context$$22.current;
        v11239.addSuccessor(finBlock);
      }
      context$$22.current = finBlock;
      context$$22.pushStatement(this, null, afterFinally);
      var v11241 = this.finallyNode;
      context$$22.walk(v11241, this);
      var v22558 = context$$22.noContinuation;
      var v18142 = !v22558;
      if (v18142) {
        v18142 = context$$22.current;
      }
      var v11243 = v18142;
      if (v11243) {
        var v11242 = context$$22.current;
        v11242.addSuccessor(afterFinally);
      }
      var v22559 = afterFinally.predecessors;
      var v18143 = v22559.length;
      var v11244 = v18143 > 0;
      if (v11244) {
        context$$22.current = afterFinally;
      } else {
        context$$22.noContinuation = true;
      }
      context$$22.popStatement();
      var v18144 = context$$22.walker;
      var v11245 = v18144.options;
      v11245.goChildren = false;
      return;
    }
    function v296(typeFlow$$31) {
      var v11246 = this.tryNode;
      var v27079 = typeFlow$$31.typeCheck(v11246);
      this.tryNode = v27079;
      var v11247 = this.finallyNode;
      var v27080 = typeFlow$$31.typeCheck(v11247);
      this.finallyNode = v27080;
      this.type = typeFlow$$31.voidType;
      return this;
    }
    function v295(emitter$$33, tokenId$$33, startLine$$33) {
      emitter$$33.recordSourceMappingStart(this);
      var v11248 = this.tryNode;
      var v18145 = TypeScript$$4.TokenID;
      var v11249 = v18145.Try;
      emitter$$33.emitJavascript(v11248, v11249, false);
      var v11250 = this.finallyNode;
      var v18146 = TypeScript$$4.TokenID;
      var v11251 = v18146.Finally;
      emitter$$33.emitJavascript(v11250, v11251, false);
      emitter$$33.recordSourceMappingEnd(this);
      return;
    }
    function v294() {
      return true;
    }
    function TryFinally$$1(tryNode, finallyNode) {
      var v18147 = TypeScript$$4.NodeType;
      var v11252 = v18147.TryFinally;
      _super$$41.call(this, v11252);
      this.tryNode = tryNode;
      this.finallyNode = finallyNode;
      return;
    }
    __extends(TryFinally$$1, _super$$41);
    var v11253 = TryFinally$$1.prototype;
    v11253.isCompoundStatement = v294;
    var v11254 = TryFinally$$1.prototype;
    v11254.emit = v295;
    var v11255 = TryFinally$$1.prototype;
    v11255.typeCheck = v296;
    var v11256 = TryFinally$$1.prototype;
    v11256.addToControlFlow = v297;
    return TryFinally$$1;
  }
  function v293(_super$$40) {
    function v292(typeFlow$$30) {
      var prevInTCTR = typeFlow$$30.inTypeRefTypeCheck;
      typeFlow$$30.inTypeRefTypeCheck = true;
      var v11257 = typeFlow$$30.checker;
      var typeLink = TypeScript$$4.getTypeLink(this, v11257, true);
      var v11258 = typeFlow$$30.checker;
      var v11259 = typeFlow$$30.scope;
      v11258.resolveTypeLink(v11259, typeLink, false);
      var v11261 = this.term;
      if (v11261) {
        var v11260 = this.term;
        typeFlow$$30.typeCheck(v11260);
      }
      var v11262 = typeLink.type;
      typeFlow$$30.checkForVoidConstructor(v11262, this);
      this.type = typeLink.type;
      var v11264 = this.term;
      if (v11264) {
        var v11263 = this.term;
        v11263.type = this.type;
      }
      typeFlow$$30.inTypeRefTypeCheck = prevInTCTR;
      return this;
    }
    function v291(emitter$$32, tokenId$$32, startLine$$32) {
      throw new Error("should not emit a type ref");
    }
    function TypeReference$$1(term, arrayCount) {
      var v18148 = TypeScript$$4.NodeType;
      var v11265 = v18148.TypeRef;
      _super$$40.call(this, v11265);
      this.term = term;
      this.arrayCount = arrayCount;
      return;
    }
    __extends(TypeReference$$1, _super$$40);
    var v11266 = TypeReference$$1.prototype;
    v11266.emit = v291;
    var v11267 = TypeReference$$1.prototype;
    v11267.typeCheck = v292;
    return TypeReference$$1;
  }
  function v290(_super$$39) {
    function v289(context$$21) {
      var v11268 = TypeScript$$4.BasicBlock;
      var execBlock$$1 = new v11268;
      var v11269 = context$$21.currentSwitch;
      var v22560 = context$$21.currentSwitch;
      var v18149 = v22560.length;
      var v11270 = v18149 - 1;
      var sw$$2 = v11269[v11270];
      var v11273 = this.expr;
      if (v11273) {
        var v11271 = TypeScript$$4.BasicBlock;
        var exprBlock = new v11271;
        context$$21.current = exprBlock;
        sw$$2.addSuccessor(exprBlock);
        var v11272 = this.expr;
        context$$21.addContent(v11272);
        exprBlock.addSuccessor(execBlock$$1);
      } else {
        sw$$2.addSuccessor(execBlock$$1);
      }
      context$$21.current = execBlock$$1;
      var v11275 = this.body;
      if (v11275) {
        var v11274 = this.body;
        context$$21.walk(v11274, this);
      }
      context$$21.noContinuation = false;
      var v18150 = context$$21.walker;
      var v11276 = v18150.options;
      v11276.goChildren = false;
      return;
    }
    function v288(typeFlow$$29) {
      var v11277 = this.expr;
      var v27081 = typeFlow$$29.typeCheck(v11277);
      this.expr = v27081;
      var v11278 = this.body;
      typeFlow$$29.typeCheck(v11278);
      this.type = typeFlow$$29.voidType;
      return this;
    }
    function v287(emitter$$31, tokenId$$31, startLine$$31) {
      emitter$$31.emitParensAndCommentsInPlace(this, true);
      emitter$$31.recordSourceMappingStart(this);
      var v11281 = this.expr;
      if (v11281) {
        emitter$$31.writeToOutput("case ");
        var v11279 = this.expr;
        var v18151 = TypeScript$$4.TokenID;
        var v11280 = v18151.Identifier;
        emitter$$31.emitJavascript(v11279, v11280, false);
      } else {
        emitter$$31.writeToOutput("default");
      }
      emitter$$31.writeToOutput(":");
      var v25667 = this.body;
      var v24738 = v25667.members;
      var v22561 = v24738.length;
      var v18152 = v22561 == 1;
      if (v18152) {
        var v26074 = this.body;
        var v25668 = v26074.members;
        var v24739 = v25668[0];
        var v22562 = v24739.nodeType;
        var v24740 = TypeScript$$4.NodeType;
        var v22563 = v24740.Block;
        v18152 = v22562 == v22563;
      }
      var v11286 = v18152;
      if (v11286) {
        var v11282 = this.body;
        emitter$$31.emitJavascriptStatements(v11282, false);
      } else {
        emitter$$31.writeLineToOutput("");
        var v11283 = emitter$$31.indenter;
        v11283.increaseIndent();
        var v11284 = this.body;
        emitter$$31.emitBareJavascriptStatements(v11284);
        var v11285 = emitter$$31.indenter;
        v11285.decreaseIndent();
      }
      emitter$$31.recordSourceMappingEnd(this);
      emitter$$31.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function CaseStatement$$1() {
      var v18153 = TypeScript$$4.NodeType;
      var v11287 = v18153.Case;
      _super$$39.call(this, v11287);
      this.expr = null;
      return;
    }
    __extends(CaseStatement$$1, _super$$39);
    var v11288 = CaseStatement$$1.prototype;
    v11288.emit = v287;
    var v11289 = CaseStatement$$1.prototype;
    v11289.typeCheck = v288;
    var v11290 = CaseStatement$$1.prototype;
    v11290.addToControlFlow = v289;
    return CaseStatement$$1;
  }
  function v286(_super$$38) {
    function v285(context$$20) {
      var condBlock$$2 = context$$20.current;
      var v11291 = this.val;
      context$$20.addContent(v11291);
      var v11292 = TypeScript$$4.BasicBlock;
      var execBlock = new v11292;
      var v11293 = TypeScript$$4.BasicBlock;
      var afterSwitch = new v11293;
      condBlock$$2.addSuccessor(execBlock);
      context$$20.pushSwitch(execBlock);
      context$$20.current = execBlock;
      context$$20.pushStatement(this, execBlock, afterSwitch);
      var v11294 = this.caseList;
      context$$20.walk(v11294, this);
      context$$20.popSwitch();
      var targetInfo$$4 = context$$20.popStatement();
      var v11295 = this.defaultCase;
      var hasCondContinuation = v11295 == null;
      var v18154 = this.defaultCase;
      var v11296 = v18154 == null;
      if (v11296) {
        condBlock$$2.addSuccessor(afterSwitch);
      }
      var v22564 = afterSwitch.predecessors;
      var v18155 = v22564.length;
      var v11297 = v18155 > 0;
      if (v11297) {
        context$$20.noContinuation = false;
        context$$20.current = afterSwitch;
      } else {
        context$$20.noContinuation = true;
      }
      var v18156 = context$$20.walker;
      var v11298 = v18156.options;
      v11298.goChildren = false;
      return;
    }
    function v284(typeFlow$$28) {
      var v18157 = this.caseList;
      var v11299 = v18157.members;
      var len$$5 = v11299.length;
      var v11300 = this.val;
      var v27082 = typeFlow$$28.typeCheck(v11300);
      this.val = v27082;
      var i$$20 = 0;
      var v11302 = i$$20 < len$$5;
      for (;v11302;) {
        var v18158 = this.caseList;
        var v11301 = v18158.members;
        var v24741 = this.caseList;
        var v22565 = v24741.members;
        var v18159 = v22565[i$$20];
        var v27083 = typeFlow$$28.typeCheck(v18159);
        v11301[i$$20] = v27083;
        i$$20++;
        v11302 = i$$20 < len$$5;
      }
      var v11303 = this.defaultCase;
      var v27084 = typeFlow$$28.typeCheck(v11303);
      this.defaultCase = v27084;
      this.type = typeFlow$$28.voidType;
      return this;
    }
    function v283(emitter$$30, tokenId$$30, startLine$$30) {
      emitter$$30.emitParensAndCommentsInPlace(this, true);
      emitter$$30.recordSourceMappingStart(this);
      var temp$$7 = emitter$$30.setInObjectLiteral(false);
      var v11304 = this.statement;
      emitter$$30.recordSourceMappingStart(v11304);
      emitter$$30.writeToOutput("switch(");
      var v11305 = this.val;
      var v18160 = TypeScript$$4.TokenID;
      var v11306 = v18160.Identifier;
      emitter$$30.emitJavascript(v11305, v11306, false);
      emitter$$30.writeToOutput(")");
      var v11307 = this.statement;
      emitter$$30.recordSourceMappingEnd(v11307);
      emitter$$30.writeLineToOutput(" {");
      var v11308 = emitter$$30.indenter;
      v11308.increaseIndent();
      var v18161 = this.caseList;
      var v11309 = v18161.members;
      var casesLen = v11309.length;
      var i$$19 = 0;
      var v11312 = i$$19 < casesLen;
      for (;v11312;) {
        var v18162 = this.caseList;
        var v11310 = v18162.members;
        var caseExpr = v11310[i$$19];
        var v18163 = TypeScript$$4.TokenID;
        var v11311 = v18163.Case;
        emitter$$30.emitJavascript(caseExpr, v11311, true);
        i$$19++;
        v11312 = i$$19 < casesLen;
      }
      var v11313 = emitter$$30.indenter;
      v11313.decreaseIndent();
      emitter$$30.emitIndent();
      emitter$$30.writeToOutput("}");
      emitter$$30.setInObjectLiteral(temp$$7);
      emitter$$30.recordSourceMappingEnd(this);
      emitter$$30.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v282() {
      return true;
    }
    function SwitchStatement$$1(val$$4) {
      var v18164 = TypeScript$$4.NodeType;
      var v11314 = v18164.Switch;
      _super$$38.call(this, v11314);
      this.val = val$$4;
      this.defaultCase = null;
      var v27085 = new ASTSpan;
      this.statement = v27085;
      return;
    }
    __extends(SwitchStatement$$1, _super$$38);
    var v11315 = SwitchStatement$$1.prototype;
    v11315.isCompoundStatement = v282;
    var v11316 = SwitchStatement$$1.prototype;
    v11316.emit = v283;
    var v11317 = SwitchStatement$$1.prototype;
    v11317.typeCheck = v284;
    var v11318 = SwitchStatement$$1.prototype;
    v11318.addToControlFlow = v285;
    return SwitchStatement$$1;
  }
  function v281(_super$$37) {
    function v280(typeFlow$$27) {
      return typeFlow$$27.typeCheckWith(this);
    }
    function v279(emitter$$29, tokenId$$29, startLine$$29) {
      emitter$$29.emitParensAndCommentsInPlace(this, true);
      emitter$$29.recordSourceMappingStart(this);
      emitter$$29.writeToOutput("with (");
      var v11321 = this.expr;
      if (v11321) {
        var v11319 = this.expr;
        var v18165 = TypeScript$$4.TokenID;
        var v11320 = v18165.With;
        emitter$$29.emitJavascript(v11319, v11320, false);
      }
      emitter$$29.writeToOutput(")");
      var v11322 = this.body;
      emitter$$29.emitJavascriptStatements(v11322, true);
      emitter$$29.recordSourceMappingEnd(this);
      emitter$$29.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v278() {
      return true;
    }
    function WithStatement$$1(expr$$3) {
      var v18166 = TypeScript$$4.NodeType;
      var v11323 = v18166.With;
      _super$$37.call(this, v11323);
      this.expr = expr$$3;
      this.withSym = null;
      return;
    }
    __extends(WithStatement$$1, _super$$37);
    var v11324 = WithStatement$$1.prototype;
    v11324.isCompoundStatement = v278;
    var v11325 = WithStatement$$1.prototype;
    v11325.emit = v279;
    var v11326 = WithStatement$$1.prototype;
    v11326.typeCheck = v280;
    return WithStatement$$1;
  }
  function v277(_super$$36) {
    function v276(context$$19) {
      var v11328 = this.init;
      if (v11328) {
        var v11327 = this.init;
        context$$19.addContent(v11327);
      }
      var loopHeader$$3 = context$$19.current;
      var v11329 = TypeScript$$4.BasicBlock;
      var loopStart$$3 = new v11329;
      var v11330 = TypeScript$$4.BasicBlock;
      var afterLoop$$3 = new v11330;
      loopHeader$$3.addSuccessor(loopStart$$3);
      context$$19.current = loopStart$$3;
      var condBlock$$1 = null;
      var continueTarget = loopStart$$3;
      var incrBB = null;
      var v11332 = this.incr;
      if (v11332) {
        var v11331 = TypeScript$$4.BasicBlock;
        incrBB = new v11331;
        continueTarget = incrBB;
      }
      var v11336 = this.cond;
      if (v11336) {
        condBlock$$1 = context$$19.current;
        var v11333 = this.cond;
        context$$19.addContent(v11333);
        var v11334 = TypeScript$$4.BasicBlock;
        var v27086 = new v11334;
        context$$19.current = v27086;
        var v11335 = context$$19.current;
        condBlock$$1.addSuccessor(v11335);
      }
      var targetInfo$$3 = null;
      var v11338 = this.body;
      if (v11338) {
        context$$19.pushStatement(this, continueTarget, afterLoop$$3);
        var v11337 = this.body;
        context$$19.walk(v11337, this);
        targetInfo$$3 = context$$19.popStatement();
      }
      var v11344 = this.incr;
      if (v11344) {
        var v11343 = context$$19.noContinuation;
        if (v11343) {
          var v22566 = incrBB.predecessors;
          var v18167 = v22566.length;
          var v11340 = v18167 == 0;
          if (v11340) {
            var v11339 = this.incr;
            context$$19.addUnreachable(v11339);
          }
        } else {
          var v11341 = context$$19.current;
          v11341.addSuccessor(incrBB);
          context$$19.current = incrBB;
          var v11342 = this.incr;
          context$$19.addContent(v11342);
        }
      }
      var loopEnd$$3 = context$$19.current;
      var v18168 = context$$19.noContinuation;
      var v11345 = !v18168;
      if (v11345) {
        loopEnd$$3.addSuccessor(loopStart$$3);
      }
      if (condBlock$$1) {
        condBlock$$1.addSuccessor(afterLoop$$3);
        context$$19.noContinuation = false;
      }
      var v22567 = afterLoop$$3.predecessors;
      var v18169 = v22567.length;
      var v11346 = v18169 > 0;
      if (v11346) {
        context$$19.noContinuation = false;
        context$$19.current = afterLoop$$3;
      }
      var v18170 = context$$19.walker;
      var v11347 = v18170.options;
      v11347.goChildren = false;
      return;
    }
    function v275(typeFlow$$26) {
      return typeFlow$$26.typeCheckFor(this);
    }
    function v274(emitter$$28, tokenId$$28, startLine$$28) {
      emitter$$28.emitParensAndCommentsInPlace(this, true);
      emitter$$28.recordSourceMappingStart(this);
      var temp$$6 = emitter$$28.setInObjectLiteral(false);
      emitter$$28.writeToOutput("for(");
      var v11354 = this.init;
      if (v11354) {
        var v22568 = this.init;
        var v18171 = v22568.nodeType;
        var v22569 = TypeScript$$4.NodeType;
        var v18172 = v22569.List;
        var v11353 = v18171 != v18172;
        if (v11353) {
          var v11348 = this.init;
          var v18173 = TypeScript$$4.TokenID;
          var v11349 = v18173.For;
          emitter$$28.emitJavascript(v11348, v11349, false);
        } else {
          var v22570 = this.init;
          var v18174 = v22570.members;
          var v11350 = v18174.length;
          emitter$$28.setInVarBlock(v11350);
          var v11351 = this.init;
          var v18175 = TypeScript$$4.TokenID;
          var v11352 = v18175.For;
          emitter$$28.emitJavascriptList(v11351, null, v11352, false, false, false);
        }
      }
      emitter$$28.writeToOutput("; ");
      var v11355 = this.cond;
      var v18176 = TypeScript$$4.TokenID;
      var v11356 = v18176.For;
      emitter$$28.emitJavascript(v11355, v11356, false);
      emitter$$28.writeToOutput("; ");
      var v11357 = this.incr;
      var v18177 = TypeScript$$4.TokenID;
      var v11358 = v18177.For;
      emitter$$28.emitJavascript(v11357, v11358, false);
      emitter$$28.writeToOutput(")");
      var v11359 = this.body;
      emitter$$28.emitJavascriptStatements(v11359, true);
      emitter$$28.setInObjectLiteral(temp$$6);
      emitter$$28.recordSourceMappingEnd(this);
      emitter$$28.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v273() {
      return true;
    }
    function ForStatement$$1(init) {
      var v18178 = TypeScript$$4.NodeType;
      var v11360 = v18178.For;
      _super$$36.call(this, v11360);
      this.init = init;
      return;
    }
    __extends(ForStatement$$1, _super$$36);
    var v11361 = ForStatement$$1.prototype;
    v11361.isLoop = v273;
    var v11362 = ForStatement$$1.prototype;
    v11362.emit = v274;
    var v11363 = ForStatement$$1.prototype;
    v11363.typeCheck = v275;
    var v11364 = ForStatement$$1.prototype;
    v11364.addToControlFlow = v276;
    return ForStatement$$1;
  }
  function v272(_super$$35) {
    function v271(context$$18) {
      var v11366 = this.lval;
      if (v11366) {
        var v11365 = this.lval;
        context$$18.addContent(v11365);
      }
      var v11368 = this.obj;
      if (v11368) {
        var v11367 = this.obj;
        context$$18.addContent(v11367);
      }
      var loopHeader$$2 = context$$18.current;
      var v11369 = TypeScript$$4.BasicBlock;
      var loopStart$$2 = new v11369;
      var v11370 = TypeScript$$4.BasicBlock;
      var afterLoop$$2 = new v11370;
      loopHeader$$2.addSuccessor(loopStart$$2);
      context$$18.current = loopStart$$2;
      var v11372 = this.body;
      if (v11372) {
        context$$18.pushStatement(this, loopStart$$2, afterLoop$$2);
        var v11371 = this.body;
        context$$18.walk(v11371, this);
        context$$18.popStatement();
      }
      var v18179 = context$$18.noContinuation;
      var v11373 = !v18179;
      if (v11373) {
        var loopEnd$$2 = context$$18.current;
        loopEnd$$2.addSuccessor(loopStart$$2);
      }
      context$$18.current = afterLoop$$2;
      context$$18.noContinuation = false;
      loopHeader$$2.addSuccessor(afterLoop$$2);
      var v18180 = context$$18.walker;
      var v11374 = v18180.options;
      v11374.goChildren = false;
      return;
    }
    function v270(typeFlow$$25) {
      var v22571 = typeFlow$$25.checker;
      var v18181 = v22571.styleSettings;
      var v11377 = v18181.forin;
      if (v11377) {
        var v18182 = this.isFiltered();
        var v11376 = !v18182;
        if (v11376) {
          var v18183 = typeFlow$$25.checker;
          var v11375 = v18183.errorReporter;
          v11375.styleError(this, "no hasOwnProperty filter");
        }
      }
      return typeFlow$$25.typeCheckForIn(this);
    }
    function v269(emitter$$27, tokenId$$27, startLine$$27) {
      emitter$$27.emitParensAndCommentsInPlace(this, true);
      emitter$$27.recordSourceMappingStart(this);
      var temp$$5 = emitter$$27.setInObjectLiteral(false);
      var v11378 = this.statement;
      emitter$$27.recordSourceMappingStart(v11378);
      emitter$$27.writeToOutput("for(");
      var v11379 = this.lval;
      var v18184 = TypeScript$$4.TokenID;
      var v11380 = v18184.For;
      emitter$$27.emitJavascript(v11379, v11380, false);
      emitter$$27.writeToOutput(" in ");
      var v11381 = this.obj;
      var v18185 = TypeScript$$4.TokenID;
      var v11382 = v18185.For;
      emitter$$27.emitJavascript(v11381, v11382, false);
      emitter$$27.writeToOutput(")");
      var v11383 = this.statement;
      emitter$$27.recordSourceMappingEnd(v11383);
      var v11384 = this.body;
      emitter$$27.emitJavascriptStatements(v11384, true);
      emitter$$27.setInObjectLiteral(temp$$5);
      emitter$$27.recordSourceMappingEnd(this);
      emitter$$27.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v268() {
      var v11401 = this.body;
      if (v11401) {
        var singleItem = null;
        var v22572 = this.body;
        var v18186 = v22572.nodeType;
        var v22573 = TypeScript$$4.NodeType;
        var v18187 = v22573.List;
        var v11387 = v18186 == v18187;
        if (v11387) {
          var stmts = this.body;
          var v22574 = stmts.members;
          var v18188 = v22574.length;
          var v11386 = v18188 == 1;
          if (v11386) {
            var v11385 = stmts.members;
            singleItem = v11385[0];
          }
        } else {
          singleItem = this.body;
        }
        var v11400 = singleItem !== null;
        if (v11400) {
          var v18189 = singleItem.nodeType;
          var v22575 = TypeScript$$4.NodeType;
          var v18190 = v22575.Block;
          var v11390 = v18189 == v18190;
          if (v11390) {
            var block = singleItem;
            var v22576 = block.statements;
            var v18191 = v22576 !== null;
            if (v18191) {
              var v25669 = block.statements;
              var v24742 = v25669.members;
              var v22577 = v24742.length;
              v18191 = v22577 == 1;
            }
            var v11389 = v18191;
            if (v11389) {
              var v18192 = block.statements;
              var v11388 = v18192.members;
              singleItem = v11388[0];
            }
          }
          var v18193 = singleItem.nodeType;
          var v22578 = TypeScript$$4.NodeType;
          var v18194 = v22578.If;
          var v11399 = v18193 == v18194;
          if (v11399) {
            var cond$$2 = singleItem.cond;
            var v18195 = cond$$2.nodeType;
            var v22579 = TypeScript$$4.NodeType;
            var v18196 = v22579.Call;
            var v11398 = v18195 == v18196;
            if (v11398) {
              var target$$27 = cond$$2.target;
              var v18197 = target$$27.nodeType;
              var v22580 = TypeScript$$4.NodeType;
              var v18198 = v22580.Dot;
              var v11397 = v18197 == v18198;
              if (v11397) {
                var binex = target$$27;
                var v25670 = binex.operand1;
                var v24743 = v25670.nodeType;
                var v25671 = TypeScript$$4.NodeType;
                var v24744 = v25671.Name;
                var v22581 = v24743 == v24744;
                if (v22581) {
                  var v25672 = this.obj;
                  var v24745 = v25672.nodeType;
                  var v25673 = TypeScript$$4.NodeType;
                  var v24746 = v25673.Name;
                  v22581 = v24745 == v24746;
                }
                var v18199 = v22581;
                if (v18199) {
                  var v24747 = binex.operand1;
                  var v22582 = v24747.actualText;
                  var v24748 = this.obj;
                  var v22583 = v24748.actualText;
                  v18199 = v22582 == v22583;
                }
                var v11396 = v18199;
                if (v11396) {
                  var prop$$4 = binex.operand2;
                  var v18200 = prop$$4.actualText;
                  var v11395 = v18200 == "hasOwnProperty";
                  if (v11395) {
                    var args$$2 = cond$$2.arguments;
                    var v18201 = args$$2 !== null;
                    if (v18201) {
                      var v24749 = args$$2.members;
                      var v22584 = v24749.length;
                      v18201 = v22584 == 1;
                    }
                    var v11394 = v18201;
                    if (v11394) {
                      var v11391 = args$$2.members;
                      var arg$$2 = v11391[0];
                      var v22585 = arg$$2.nodeType;
                      var v24750 = TypeScript$$4.NodeType;
                      var v22586 = v24750.Name;
                      var v18202 = v22585 == v22586;
                      if (v18202) {
                        var v24751 = this.lval;
                        var v22587 = v24751.nodeType;
                        var v24752 = TypeScript$$4.NodeType;
                        var v22588 = v24752.Name;
                        v18202 = v22587 == v22588;
                      }
                      var v11393 = v18202;
                      if (v11393) {
                        var v22589 = this.lval;
                        var v18203 = v22589.actualText;
                        var v18204 = arg$$2.actualText;
                        var v11392 = v18203 == v18204;
                        if (v11392) {
                          return true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return false;
    }
    function v267() {
      return true;
    }
    function ForInStatement$$1(lval, obj$$16) {
      var v18205 = TypeScript$$4.NodeType;
      var v11402 = v18205.ForIn;
      _super$$35.call(this, v11402);
      this.lval = lval;
      this.obj = obj$$16;
      var v27087 = new ASTSpan;
      this.statement = v27087;
      var v18206 = this.lval;
      if (v18206) {
        var v24753 = this.lval;
        var v22590 = v24753.nodeType;
        var v24754 = TypeScript$$4.NodeType;
        var v22591 = v24754.VarDecl;
        v18206 = v22590 == v22591;
      }
      var v11404 = v18206;
      if (v11404) {
        var v11403 = this.lval;
        var v22592 = v11403.varFlags;
        var v24755 = TypeScript$$4.VarFlags;
        var v22593 = v24755.AutoInit;
        v11403.varFlags = v22592 | v22593;
      }
      return;
    }
    __extends(ForInStatement$$1, _super$$35);
    var v11405 = ForInStatement$$1.prototype;
    v11405.isLoop = v267;
    var v11406 = ForInStatement$$1.prototype;
    v11406.isFiltered = v268;
    var v11407 = ForInStatement$$1.prototype;
    v11407.emit = v269;
    var v11408 = ForInStatement$$1.prototype;
    v11408.typeCheck = v270;
    var v11409 = ForInStatement$$1.prototype;
    v11409.addToControlFlow = v271;
    return ForInStatement$$1;
  }
  function v266(_super$$34) {
    function EndCode$$1() {
      var v18207 = TypeScript$$4.NodeType;
      var v11410 = v18207.EndCode;
      _super$$34.call(this, v11410);
      return;
    }
    __extends(EndCode$$1, _super$$34);
    return EndCode$$1;
  }
  function v265(_super$$33) {
    function v264(typeFlow$$24) {
      return typeFlow$$24.typeCheckReturn(this);
    }
    function v263(context$$17) {
      var v18208 = _super$$33.prototype;
      var v11411 = v18208.addToControlFlow;
      v11411.call(this, context$$17);
      context$$17.returnStmt();
      return;
    }
    function v262(emitter$$26, tokenId$$26, startLine$$26) {
      emitter$$26.emitParensAndCommentsInPlace(this, true);
      emitter$$26.recordSourceMappingStart(this);
      var temp$$4 = emitter$$26.setInObjectLiteral(false);
      var v11415 = this.returnExpression;
      if (v11415) {
        emitter$$26.writeToOutput("return ");
        var v11412 = this.returnExpression;
        var v18209 = TypeScript$$4.TokenID;
        var v11413 = v18209.Semicolon;
        emitter$$26.emitJavascript(v11412, v11413, false);
        var v22594 = this.returnExpression;
        var v18210 = v22594.nodeType;
        var v22595 = TypeScript$$4.NodeType;
        var v18211 = v22595.FuncDecl;
        var v11414 = v18210 === v18211;
        if (v11414) {
          emitter$$26.writeToOutput(";");
        }
      } else {
        emitter$$26.writeToOutput("return;");
      }
      emitter$$26.setInObjectLiteral(temp$$4);
      emitter$$26.recordSourceMappingEnd(this);
      emitter$$26.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function ReturnStatement$$1() {
      var v18212 = TypeScript$$4.NodeType;
      var v11416 = v18212.Return;
      _super$$33.call(this, v11416);
      this.returnExpression = null;
      return;
    }
    __extends(ReturnStatement$$1, _super$$33);
    var v11417 = ReturnStatement$$1.prototype;
    v11417.emit = v262;
    var v11418 = ReturnStatement$$1.prototype;
    v11418.addToControlFlow = v263;
    var v11419 = ReturnStatement$$1.prototype;
    v11419.typeCheck = v264;
    return ReturnStatement$$1;
  }
  function v261(_super$$32) {
    function v260(context$$16) {
      var v11420 = this.cond;
      v11420.addToControlFlow(context$$16);
      var v11421 = TypeScript$$4.BasicBlock;
      var afterIf = new v11421;
      var beforeIf = context$$16.current;
      context$$16.pushStatement(this, beforeIf, afterIf);
      var hasContinuation = false;
      var v11422 = TypeScript$$4.BasicBlock;
      var v27088 = new v11422;
      context$$16.current = v27088;
      var v11423 = context$$16.current;
      beforeIf.addSuccessor(v11423);
      var v11424 = this.thenBod;
      context$$16.walk(v11424, this);
      var v18213 = context$$16.noContinuation;
      var v11426 = !v18213;
      if (v11426) {
        hasContinuation = true;
        var v11425 = context$$16.current;
        v11425.addSuccessor(afterIf);
      }
      var v11432 = this.elseBod;
      if (v11432) {
        var v11427 = TypeScript$$4.BasicBlock;
        var v27089 = new v11427;
        context$$16.current = v27089;
        context$$16.noContinuation = false;
        var v11428 = context$$16.current;
        beforeIf.addSuccessor(v11428);
        var v11429 = this.elseBod;
        context$$16.walk(v11429, this);
        var v18214 = context$$16.noContinuation;
        var v11431 = !v18214;
        if (v11431) {
          hasContinuation = true;
          var v11430 = context$$16.current;
          v11430.addSuccessor(afterIf);
        } else {
          if (hasContinuation) {
            context$$16.noContinuation = false;
          }
        }
      } else {
        beforeIf.addSuccessor(afterIf);
        context$$16.noContinuation = false;
        hasContinuation = true;
      }
      var targetInfo$$2 = context$$16.popStatement();
      var v22596 = afterIf.predecessors;
      var v18215 = v22596.length;
      var v11433 = v18215 > 0;
      if (v11433) {
        context$$16.noContinuation = false;
        hasContinuation = true;
      }
      if (hasContinuation) {
        context$$16.current = afterIf;
      }
      var v18216 = context$$16.walker;
      var v11434 = v18216.options;
      v11434.goChildren = false;
      return;
    }
    function v259(typeFlow$$23) {
      return typeFlow$$23.typeCheckIf(this);
    }
    function v258(emitter$$25, tokenId$$25, startLine$$25) {
      emitter$$25.emitParensAndCommentsInPlace(this, true);
      emitter$$25.recordSourceMappingStart(this);
      var temp$$3 = emitter$$25.setInObjectLiteral(false);
      var v11435 = this.statement;
      emitter$$25.recordSourceMappingStart(v11435);
      emitter$$25.writeToOutput("if(");
      var v11436 = this.cond;
      var v18217 = TypeScript$$4.TokenID;
      var v11437 = v18217.If;
      emitter$$25.emitJavascript(v11436, v11437, false);
      emitter$$25.writeToOutput(")");
      var v11438 = this.statement;
      emitter$$25.recordSourceMappingEnd(v11438);
      var v11439 = this.thenBod;
      emitter$$25.emitJavascriptStatements(v11439, true);
      var v11443 = this.elseBod;
      if (v11443) {
        var v22597 = this.elseBod;
        var v18218 = v22597.nodeType;
        var v22598 = TypeScript$$4.NodeType;
        var v18219 = v22598.If;
        var v11442 = v18218 === v18219;
        if (v11442) {
          emitter$$25.writeToOutput(" else ");
          var v11440 = this.elseBod;
          v11440.emit(emitter$$25, tokenId$$25, false);
        } else {
          emitter$$25.writeToOutput(" else");
          var v11441 = this.elseBod;
          emitter$$25.emitJavascriptStatements(v11441, true);
        }
      }
      emitter$$25.setInObjectLiteral(temp$$3);
      emitter$$25.recordSourceMappingEnd(this);
      emitter$$25.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v257() {
      return true;
    }
    function IfStatement$$1(cond$$1) {
      var v18220 = TypeScript$$4.NodeType;
      var v11444 = v18220.If;
      _super$$32.call(this, v11444);
      this.cond = cond$$1;
      this.elseBod = null;
      var v27090 = new ASTSpan;
      this.statement = v27090;
      return;
    }
    __extends(IfStatement$$1, _super$$32);
    var v11445 = IfStatement$$1.prototype;
    v11445.isCompoundStatement = v257;
    var v11446 = IfStatement$$1.prototype;
    v11446.emit = v258;
    var v11447 = IfStatement$$1.prototype;
    v11447.typeCheck = v259;
    var v11448 = IfStatement$$1.prototype;
    v11448.addToControlFlow = v260;
    return IfStatement$$1;
  }
  function v256(_super$$31) {
    function v255(context$$15) {
      var loopHeader$$1 = context$$15.current;
      var v11449 = TypeScript$$4.BasicBlock;
      var loopStart$$1 = new v11449;
      var v11450 = TypeScript$$4.BasicBlock;
      var afterLoop$$1 = new v11450;
      loopHeader$$1.addSuccessor(loopStart$$1);
      context$$15.current = loopStart$$1;
      var targetInfo$$1 = null;
      var v11452 = this.body;
      if (v11452) {
        context$$15.pushStatement(this, loopStart$$1, afterLoop$$1);
        var v11451 = this.body;
        context$$15.walk(v11451, this);
        targetInfo$$1 = context$$15.popStatement();
      }
      var v18221 = context$$15.noContinuation;
      var v11455 = !v18221;
      if (v11455) {
        var loopEnd$$1 = context$$15.current;
        loopEnd$$1.addSuccessor(loopStart$$1);
        var v11453 = this.cond;
        context$$15.addContent(v11453);
        context$$15.current = afterLoop$$1;
        loopEnd$$1.addSuccessor(afterLoop$$1);
      } else {
        var v11454 = this.cond;
        context$$15.addUnreachable(v11454);
      }
      var v18222 = context$$15.walker;
      var v11456 = v18222.options;
      v11456.goChildren = false;
      return;
    }
    function v254(typeFlow$$22) {
      return typeFlow$$22.typeCheckDoWhile(this);
    }
    function v253(emitter$$24, tokenId$$24, startLine$$24) {
      emitter$$24.emitParensAndCommentsInPlace(this, true);
      emitter$$24.recordSourceMappingStart(this);
      var temp$$2 = emitter$$24.setInObjectLiteral(false);
      emitter$$24.writeToOutput("do");
      var v11457 = this.body;
      emitter$$24.emitJavascriptStatements(v11457, true);
      var v11458 = this.whileAST;
      emitter$$24.recordSourceMappingStart(v11458);
      emitter$$24.writeToOutput("while");
      var v11459 = this.whileAST;
      emitter$$24.recordSourceMappingEnd(v11459);
      emitter$$24.writeToOutput("(");
      var v11460 = this.cond;
      var v18223 = TypeScript$$4.TokenID;
      var v11461 = v18223.CloseParen;
      emitter$$24.emitJavascript(v11460, v11461, false);
      emitter$$24.writeToOutput(")");
      emitter$$24.setInObjectLiteral(temp$$2);
      emitter$$24.recordSourceMappingEnd(this);
      emitter$$24.writeToOutput(";");
      emitter$$24.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v252() {
      return true;
    }
    function DoWhileStatement$$1() {
      var v18224 = TypeScript$$4.NodeType;
      var v11462 = v18224.DoWhile;
      _super$$31.call(this, v11462);
      this.body = null;
      this.whileAST = null;
      this.cond = null;
      return;
    }
    __extends(DoWhileStatement$$1, _super$$31);
    var v11463 = DoWhileStatement$$1.prototype;
    v11463.isLoop = v252;
    var v11464 = DoWhileStatement$$1.prototype;
    v11464.emit = v253;
    var v11465 = DoWhileStatement$$1.prototype;
    v11465.typeCheck = v254;
    var v11466 = DoWhileStatement$$1.prototype;
    v11466.addToControlFlow = v255;
    return DoWhileStatement$$1;
  }
  function v251(_super$$30) {
    function v250(context$$14) {
      var loopHeader = context$$14.current;
      var v11467 = TypeScript$$4.BasicBlock;
      var loopStart = new v11467;
      var v11468 = TypeScript$$4.BasicBlock;
      var afterLoop = new v11468;
      loopHeader.addSuccessor(loopStart);
      context$$14.current = loopStart;
      var v11469 = this.cond;
      context$$14.addContent(v11469);
      var condBlock = context$$14.current;
      var targetInfo = null;
      var v11473 = this.body;
      if (v11473) {
        var v11470 = TypeScript$$4.BasicBlock;
        var v27091 = new v11470;
        context$$14.current = v27091;
        var v11471 = context$$14.current;
        condBlock.addSuccessor(v11471);
        context$$14.pushStatement(this, loopStart, afterLoop);
        var v11472 = this.body;
        context$$14.walk(v11472, this);
        targetInfo = context$$14.popStatement();
      }
      var v18225 = context$$14.noContinuation;
      var v11474 = !v18225;
      if (v11474) {
        var loopEnd = context$$14.current;
        loopEnd.addSuccessor(loopStart);
      }
      context$$14.current = afterLoop;
      condBlock.addSuccessor(afterLoop);
      context$$14.noContinuation = false;
      var v18226 = context$$14.walker;
      var v11475 = v18226.options;
      v11475.goChildren = false;
      return;
    }
    function v249(typeFlow$$21) {
      return typeFlow$$21.typeCheckWhile(this);
    }
    function v248(emitter$$23, tokenId$$23, startLine$$23) {
      emitter$$23.emitParensAndCommentsInPlace(this, true);
      emitter$$23.recordSourceMappingStart(this);
      var temp$$1 = emitter$$23.setInObjectLiteral(false);
      emitter$$23.writeToOutput("while(");
      var v11476 = this.cond;
      var v18227 = TypeScript$$4.TokenID;
      var v11477 = v18227.While;
      emitter$$23.emitJavascript(v11476, v11477, false);
      emitter$$23.writeToOutput(")");
      var v11478 = this.body;
      emitter$$23.emitJavascriptStatements(v11478, false);
      emitter$$23.setInObjectLiteral(temp$$1);
      emitter$$23.recordSourceMappingEnd(this);
      emitter$$23.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v247() {
      return true;
    }
    function WhileStatement$$1(cond) {
      var v18228 = TypeScript$$4.NodeType;
      var v11479 = v18228.While;
      _super$$30.call(this, v11479);
      this.cond = cond;
      this.body = null;
      return;
    }
    __extends(WhileStatement$$1, _super$$30);
    var v11480 = WhileStatement$$1.prototype;
    v11480.isLoop = v247;
    var v11481 = WhileStatement$$1.prototype;
    v11481.emit = v248;
    var v11482 = WhileStatement$$1.prototype;
    v11482.typeCheck = v249;
    var v11483 = WhileStatement$$1.prototype;
    v11483.addToControlFlow = v250;
    return WhileStatement$$1;
  }
  function v246(_super$$29) {
    function v245(emitter$$22, tokenId$$22, startLine$$22) {
      emitter$$22.emitParensAndCommentsInPlace(this, true);
      emitter$$22.recordSourceMappingStart(this);
      var v18229 = this.nodeType;
      var v22599 = TypeScript$$4.NodeType;
      var v18230 = v22599.Break;
      var v11484 = v18229 == v18230;
      if (v11484) {
        emitter$$22.writeToOutput("break");
      } else {
        emitter$$22.writeToOutput("continue");
      }
      var v11486 = this.target;
      if (v11486) {
        var v18231 = this.target;
        var v11485 = " " + v18231;
        emitter$$22.writeToOutput(v11485);
      }
      emitter$$22.recordSourceMappingEnd(this);
      emitter$$22.writeToOutput(";");
      emitter$$22.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v244(context$$13) {
      var v18232 = _super$$29.prototype;
      var v11487 = v18232.addToControlFlow;
      v11487.call(this, context$$13);
      var v11488 = this.resolvedTarget;
      var v18233 = this.nodeType;
      var v22600 = TypeScript$$4.NodeType;
      var v18234 = v22600.Continue;
      var v11489 = v18233 == v18234;
      context$$13.unconditionalBranch(v11488, v11489);
      return;
    }
    function v243(parser, stmt$$2) {
      var v11490 = stmt$$2.isLoop();
      if (v11490) {
        this.resolvedTarget = stmt$$2;
        return true;
      }
      var v18235 = this.nodeType;
      var v22601 = TypeScript$$4.NodeType;
      var v18236 = v22601.Continue;
      var v11492 = v18235 === v18236;
      if (v11492) {
        parser.reportParseError("continue statement applies only to loops");
        return false;
      } else {
        var v22602 = stmt$$2.nodeType;
        var v24756 = TypeScript$$4.NodeType;
        var v22603 = v24756.Switch;
        var v18237 = v22602 == v22603;
        var v22604 = !v18237;
        if (v22604) {
          v18237 = this.target;
        }
        var v11491 = v18237;
        if (v11491) {
          this.resolvedTarget = stmt$$2;
          return true;
        } else {
          parser.reportParseError("break statement with no label can apply only to a loop or switch statement");
          return false;
        }
      }
      return;
    }
    function v242() {
      return this.target;
    }
    function Jump$$1(nodeType$$11) {
      _super$$29.call(this, nodeType$$11);
      this.target = null;
      this.resolvedTarget = null;
      return;
    }
    __extends(Jump$$1, _super$$29);
    var v11493 = Jump$$1.prototype;
    v11493.hasExplicitTarget = v242;
    var v11494 = Jump$$1.prototype;
    v11494.setResolvedTarget = v243;
    var v11495 = Jump$$1.prototype;
    v11495.addToControlFlow = v244;
    var v11496 = Jump$$1.prototype;
    v11496.emit = v245;
    return Jump$$1;
  }
  function v241(_super$$28) {
    function v240(typeFlow$$20) {
      var v24757 = typeFlow$$20.checker;
      var v22605 = v24757.styleSettings;
      var v18238 = v22605.emptyBlocks;
      var v11499 = !v18238;
      if (v11499) {
        var v22606 = this.statements;
        var v18239 = v22606 === null;
        var v22608 = !v18239;
        if (v22608) {
          var v25674 = this.statements;
          var v24758 = v25674.members;
          var v22607 = v24758.length;
          v18239 = v22607 == 0;
        }
        var v11498 = v18239;
        if (v11498) {
          var v18240 = typeFlow$$20.checker;
          var v11497 = v18240.errorReporter;
          v11497.styleError(this, "empty block");
        }
      }
      var v11500 = this.statements;
      typeFlow$$20.typeCheck(v11500);
      return this;
    }
    function v239(context$$12) {
      var v11501 = TypeScript$$4.BasicBlock;
      var afterIfNeeded = new v11501;
      var v11502 = context$$12.current;
      context$$12.pushStatement(this, v11502, afterIfNeeded);
      var v11504 = this.statements;
      if (v11504) {
        var v11503 = this.statements;
        context$$12.walk(v11503, this);
      }
      var v18241 = context$$12.walker;
      var v11505 = v18241.options;
      v11505.goChildren = false;
      context$$12.popStatement();
      var v22609 = afterIfNeeded.predecessors;
      var v18242 = v22609.length;
      var v11507 = v18242 > 0;
      if (v11507) {
        var v11506 = context$$12.current;
        v11506.addSuccessor(afterIfNeeded);
        context$$12.current = afterIfNeeded;
      }
      return;
    }
    function v238(emitter$$21, tokenId$$21, startLine$$21) {
      emitter$$21.emitParensAndCommentsInPlace(this, true);
      emitter$$21.recordSourceMappingStart(this);
      var v11510 = this.isStatementBlock;
      if (v11510) {
        emitter$$21.writeLineToOutput(" {");
        var v11508 = emitter$$21.indenter;
        v11508.increaseIndent();
      } else {
        var v22610 = this.statements;
        var v18243 = v22610.members;
        var v11509 = v18243.length;
        emitter$$21.setInVarBlock(v11509);
      }
      var temp = emitter$$21.setInObjectLiteral(false);
      var v11513 = this.statements;
      if (v11513) {
        var v11511 = this.statements;
        var v18244 = TypeScript$$4.TokenID;
        var v11512 = v18244.Semicolon;
        emitter$$21.emitJavascriptList(v11511, null, v11512, true, false, false);
      }
      var v11515 = this.isStatementBlock;
      if (v11515) {
        var v11514 = emitter$$21.indenter;
        v11514.decreaseIndent();
        emitter$$21.emitIndent();
        emitter$$21.writeToOutput("}");
      }
      emitter$$21.setInObjectLiteral(temp);
      emitter$$21.recordSourceMappingEnd(this);
      emitter$$21.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function Block$$1(statements, isStatementBlock) {
      var v18245 = TypeScript$$4.NodeType;
      var v11516 = v18245.Block;
      _super$$28.call(this, v11516);
      this.statements = statements;
      this.isStatementBlock = isStatementBlock;
      return;
    }
    __extends(Block$$1, _super$$28);
    var v11517 = Block$$1.prototype;
    v11517.emit = v238;
    var v11518 = Block$$1.prototype;
    v11518.addToControlFlow = v239;
    var v11519 = Block$$1.prototype;
    v11519.typeCheck = v240;
    return Block$$1;
  }
  function v237(_super$$27) {
    function v236(context$$11) {
      var beforeBB = context$$11.current;
      var v11520 = TypeScript$$4.BasicBlock;
      var bb = new v11520;
      context$$11.current = bb;
      beforeBB.addSuccessor(bb);
      return;
    }
    function v235(typeFlow$$19) {
      var v11521 = this.labels;
      typeFlow$$19.typeCheck(v11521);
      var v11522 = this.stmt;
      var v27092 = v11522.typeCheck(typeFlow$$19);
      this.stmt = v27092;
      return this;
    }
    function v234(emitter$$20, tokenId$$20, startLine$$20) {
      emitter$$20.emitParensAndCommentsInPlace(this, true);
      emitter$$20.recordSourceMappingStart(this);
      var v11526 = this.labels;
      if (v11526) {
        var v18246 = this.labels;
        var v11523 = v18246.members;
        var labelsLen = v11523.length;
        var i$$18 = 0;
        var v11525 = i$$18 < labelsLen;
        for (;v11525;) {
          var v22611 = this.labels;
          var v18247 = v22611.members;
          var v11524 = v18247[i$$18];
          v11524.emit(emitter$$20, tokenId$$20, startLine$$20);
          i$$18++;
          v11525 = i$$18 < labelsLen;
        }
      }
      var v11527 = this.stmt;
      v11527.emit(emitter$$20, tokenId$$20, true);
      emitter$$20.recordSourceMappingEnd(this);
      emitter$$20.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function LabeledStatement$$1(labels, stmt$$1) {
      var v18248 = TypeScript$$4.NodeType;
      var v11528 = v18248.LabeledStatement;
      _super$$27.call(this, v11528);
      this.labels = labels;
      this.stmt = stmt$$1;
      return;
    }
    __extends(LabeledStatement$$1, _super$$27);
    var v11529 = LabeledStatement$$1.prototype;
    v11529.emit = v234;
    var v11530 = LabeledStatement$$1.prototype;
    v11530.typeCheck = v235;
    var v11531 = LabeledStatement$$1.prototype;
    v11531.addToControlFlow = v236;
    return LabeledStatement$$1;
  }
  function v233(_super$$26) {
    function v232(typeFlow$$18) {
      this.type = typeFlow$$18.voidType;
      return this;
    }
    function v231() {
      return this.isLoop();
    }
    function v230() {
      return true;
    }
    function v229() {
      return false;
    }
    function Statement$$1(nodeType$$10) {
      _super$$26.call(this, nodeType$$10);
      var v18249 = this.flags;
      var v22612 = TypeScript$$4.ASTFlags;
      var v18250 = v22612.IsStatement;
      this.flags = v18249 | v18250;
      return;
    }
    __extends(Statement$$1, _super$$26);
    var v11532 = Statement$$1.prototype;
    v11532.isLoop = v229;
    var v11533 = Statement$$1.prototype;
    v11533.isStatementOrExpression = v230;
    var v11534 = Statement$$1.prototype;
    v11534.isCompoundStatement = v231;
    var v11535 = Statement$$1.prototype;
    v11535.typeCheck = v232;
    return Statement$$1;
  }
  function v228(_super$$25) {
    function v227(emitter$$19, tokenId$$19, startLine$$19) {
      return;
    }
    function v226(typeFlow$$17) {
      return typeFlow$$17.typeCheckInterface(this);
    }
    function InterfaceDeclaration$$1(name$$38, members$$4, extendsList$$2, implementsList$$2) {
      var v18251 = TypeScript$$4.NodeType;
      var v11536 = v18251.InterfaceDeclaration;
      _super$$25.call(this, v11536, name$$38, extendsList$$2, implementsList$$2, members$$4);
      return;
    }
    __extends(InterfaceDeclaration$$1, _super$$25);
    var v11537 = InterfaceDeclaration$$1.prototype;
    v11537.typeCheck = v226;
    var v11538 = InterfaceDeclaration$$1.prototype;
    v11538.emit = v227;
    return InterfaceDeclaration$$1;
  }
  function v225(_super$$24) {
    function v224(emitter$$18, tokenId$$18, startLine$$18) {
      emitter$$18.emitJavascriptClass(this);
      return;
    }
    function v223(typeFlow$$16) {
      return typeFlow$$16.typeCheckClass(this);
    }
    function ClassDeclaration$$1(name$$37, members$$3, extendsList$$1, implementsList$$1) {
      var v18252 = TypeScript$$4.NodeType;
      var v11539 = v18252.ClassDeclaration;
      _super$$24.call(this, v11539, name$$37, extendsList$$1, implementsList$$1, members$$3);
      this.knownMemberNames = {};
      this.constructorDecl = null;
      this.constructorNestingLevel = 0;
      this.endingToken = null;
      return;
    }
    __extends(ClassDeclaration$$1, _super$$24);
    var v11540 = ClassDeclaration$$1.prototype;
    v11540.typeCheck = v223;
    var v11541 = ClassDeclaration$$1.prototype;
    v11541.emit = v224;
    return ClassDeclaration$$1;
  }
  function v222(_super$$23) {
    function v221() {
      var v11542 = this.varFlags;
      var v18253 = TypeScript$$4.VarFlags;
      var v11543 = v18253.Ambient;
      return TypeScript$$4.hasFlag(v11542, v11543);
    }
    function v220() {
      var v11544 = this.varFlags;
      var v18254 = TypeScript$$4.VarFlags;
      var v11545 = v18254.Exported;
      return TypeScript$$4.hasFlag(v11544, v11545);
    }
    function TypeDeclaration$$1(nodeType$$9, name$$36, extendsList, implementsList, members$$2) {
      _super$$23.call(this, nodeType$$9, name$$36, members$$2);
      this.extendsList = extendsList;
      this.implementsList = implementsList;
      var v11546 = TypeScript$$4.VarFlags;
      this.varFlags = v11546.None;
      return;
    }
    __extends(TypeDeclaration$$1, _super$$23);
    var v11547 = TypeDeclaration$$1.prototype;
    v11547.isExported = v220;
    var v11548 = TypeDeclaration$$1.prototype;
    v11548.isAmbient = v221;
    return TypeDeclaration$$1;
  }
  function v219(_super$$22) {
    function v218(emitter$$17, tokenId$$17, startLine$$17) {
      var v22613 = this.modFlags;
      var v24759 = TypeScript$$4.ModuleFlags;
      var v22614 = v24759.ShouldEmitModuleDecl;
      var v18255 = TypeScript$$4.hasFlag(v22613, v22614);
      var v11549 = !v18255;
      if (v11549) {
        emitter$$17.emitParensAndCommentsInPlace(this, true);
        emitter$$17.recordSourceMappingStart(this);
        emitter$$17.emitJavascriptModule(this);
        emitter$$17.recordSourceMappingEnd(this);
        emitter$$17.emitParensAndCommentsInPlace(this, false);
      }
      return;
    }
    function v217(typeFlow$$15) {
      return typeFlow$$15.typeCheckModule(this);
    }
    function v216() {
      var v18256 = this.modFlags;
      var v24760 = TypeScript$$4.ModuleFlags;
      var v22615 = v24760.ShouldEmitModuleDecl;
      var v18257 = ~v22615;
      this.modFlags = v18256 & v18257;
      return;
    }
    function v215() {
      var v11550 = this.modFlags;
      var v18258 = TypeScript$$4.ModuleFlags;
      var v11551 = v18258.IsEnum;
      return TypeScript$$4.hasFlag(v11550, v11551);
    }
    function v214() {
      var v11552 = this.modFlags;
      var v18259 = TypeScript$$4.ModuleFlags;
      var v11553 = v18259.Ambient;
      return TypeScript$$4.hasFlag(v11552, v11553);
    }
    function v213() {
      var v11554 = this.modFlags;
      var v18260 = TypeScript$$4.ModuleFlags;
      var v11555 = v18260.Exported;
      return TypeScript$$4.hasFlag(v11554, v11555);
    }
    function ModuleDeclaration$$1(name$$35, members$$1, vars$$2, scopes$$2, endingToken) {
      var v18261 = TypeScript$$4.NodeType;
      var v11556 = v18261.ModuleDeclaration;
      _super$$22.call(this, v11556, name$$35, members$$1);
      this.endingToken = endingToken;
      var v11557 = TypeScript$$4.ModuleFlags;
      this.modFlags = v11557.ShouldEmitModuleDecl;
      this.amdDependencies = [];
      this.containsUnicodeChar = false;
      this.containsUnicodeCharInComment = false;
      this.vars = vars$$2;
      this.scopes = scopes$$2;
      var v11558 = this.name;
      this.prettyName = v11558.actualText;
      return;
    }
    __extends(ModuleDeclaration$$1, _super$$22);
    var v11559 = ModuleDeclaration$$1.prototype;
    v11559.isExported = v213;
    var v11560 = ModuleDeclaration$$1.prototype;
    v11560.isAmbient = v214;
    var v11561 = ModuleDeclaration$$1.prototype;
    v11561.isEnum = v215;
    var v11562 = ModuleDeclaration$$1.prototype;
    v11562.recordNonInterface = v216;
    var v11563 = ModuleDeclaration$$1.prototype;
    v11563.typeCheck = v217;
    var v11564 = ModuleDeclaration$$1.prototype;
    v11564.emit = v218;
    return ModuleDeclaration$$1;
  }
  function v212(_super$$21) {
    function v211() {
      return true;
    }
    function NamedDeclaration$$1(nodeType$$8, name$$34, members) {
      _super$$21.call(this, nodeType$$8);
      this.name = name$$34;
      this.members = members;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      return;
    }
    __extends(NamedDeclaration$$1, _super$$21);
    var v11565 = NamedDeclaration$$1.prototype;
    v11565.isDeclaration = v211;
    return NamedDeclaration$$1;
  }
  function v210(_super$$20) {
    function v209(symbol$$1) {
      var i$$17 = 0;
      var v22616 = this.externallyVisibleImportedSymbols;
      var v18262 = v22616.length;
      var v11567 = i$$17 < v18262;
      for (;v11567;) {
        var v22617 = this.externallyVisibleImportedSymbols;
        var v18263 = v22617[i$$17];
        var v11566 = v18263 == symbol$$1;
        if (v11566) {
          return true;
        }
        i$$17++;
        var v22618 = this.externallyVisibleImportedSymbols;
        var v18264 = v22618.length;
        v11567 = i$$17 < v18264;
      }
      return false;
    }
    function v208(symbol, checker) {
      var v11568 = this.isExternallyVisibleSymbol(symbol);
      if (v11568) {
        return;
      }
      var v24761 = symbol.getType();
      var v22619 = v24761.symbol;
      var v18265 = v22619.isExternallyVisible(checker);
      var v11574 = !v18265;
      if (v11574) {
        var quotes = "";
        var v18266 = symbol.getType();
        var v11569 = v18266.symbol;
        var moduleName = v11569.prettyName;
        var v18267 = TypeScript$$4.isQuoted(moduleName);
        var v11570 = !v18267;
        if (v11570) {
          quotes = "'";
        }
        var v11571 = checker.errorReporter;
        var v11572 = symbol.declAST;
        var v22620 = "Externally visible import statement uses non exported module " + quotes;
        var v18268 = v22620 + moduleName;
        var v11573 = v18268 + quotes;
        v11571.simpleError(v11572, v11573);
      }
      var v11575 = this.externallyVisibleImportedSymbols;
      v11575.push(symbol);
      return;
    }
    function v207(emitter$$16, tokenId$$16, startLine$$16) {
      var v18269 = emitter$$16.emitOptions;
      var v11581 = this.emitRequired(v18269);
      if (v11581) {
        var v11576 = this.bod;
        emitter$$16.emitParensAndCommentsInPlace(v11576, true);
        var v11577 = this.bod;
        var v18270 = TypeScript$$4.TokenID;
        var v11578 = v18270.Semicolon;
        var v11579 = this.requiresExtendsBlock;
        emitter$$16.emitJavascriptList(v11577, null, v11578, true, false, false, true, v11579);
        var v11580 = this.bod;
        emitter$$16.emitParensAndCommentsInPlace(v11580, false);
      }
      return;
    }
    function v206(emitOptions) {
      var v18271 = this.cachedEmitRequired;
      var v11582 = v18271 != undefined;
      if (v11582) {
        return this.cachedEmitRequired;
      }
      var v24762 = this.isDeclareFile;
      var v22621 = !v24762;
      if (v22621) {
        var v24763 = this.isResident;
        v22621 = !v24763;
      }
      var v18272 = v22621;
      if (v18272) {
        v18272 = this.bod;
      }
      var v11596 = v18272;
      if (v11596) {
        var i$$16 = 0;
        var v18273 = this.bod;
        var v11583 = v18273.members;
        var len$$4 = v11583.length;
        var v11594 = i$$16 < len$$4;
        for (;v11594;) {
          var v18274 = this.bod;
          var v11584 = v18274.members;
          var stmt = v11584[i$$16];
          var v18275 = stmt.nodeType;
          var v22622 = TypeScript$$4.NodeType;
          var v18276 = v22622.ModuleDeclaration;
          var v11593 = v18275 == v18276;
          if (v11593) {
            var v22623 = stmt.modFlags;
            var v25675 = TypeScript$$4.ModuleFlags;
            var v24764 = v25675.ShouldEmitModuleDecl;
            var v25676 = TypeScript$$4.ModuleFlags;
            var v24765 = v25676.Ambient;
            var v22624 = v24764 | v24765;
            var v18277 = TypeScript$$4.hasFlag(v22623, v22624);
            var v11585 = !v18277;
            if (v11585) {
              return this.setCachedEmitRequired(true);
            }
          } else {
            var v18278 = stmt.nodeType;
            var v22625 = TypeScript$$4.NodeType;
            var v18279 = v22625.ClassDeclaration;
            var v11592 = v18278 == v18279;
            if (v11592) {
              var v22626 = stmt.varFlags;
              var v24766 = TypeScript$$4.VarFlags;
              var v22627 = v24766.Ambient;
              var v18280 = TypeScript$$4.hasFlag(v22626, v22627);
              var v11586 = !v18280;
              if (v11586) {
                return this.setCachedEmitRequired(true);
              }
            } else {
              var v18281 = stmt.nodeType;
              var v22628 = TypeScript$$4.NodeType;
              var v18282 = v22628.VarDecl;
              var v11591 = v18281 == v18282;
              if (v11591) {
                var v22629 = stmt.varFlags;
                var v24767 = TypeScript$$4.VarFlags;
                var v22630 = v24767.Ambient;
                var v18283 = TypeScript$$4.hasFlag(v22629, v22630);
                var v11587 = !v18283;
                if (v11587) {
                  return this.setCachedEmitRequired(true);
                }
              } else {
                var v18284 = stmt.nodeType;
                var v22631 = TypeScript$$4.NodeType;
                var v18285 = v22631.FuncDecl;
                var v11590 = v18284 == v18285;
                if (v11590) {
                  var v18286 = stmt.isSignature();
                  var v11588 = !v18286;
                  if (v11588) {
                    return this.setCachedEmitRequired(true);
                  }
                } else {
                  var v22632 = stmt.nodeType;
                  var v24768 = TypeScript$$4.NodeType;
                  var v22633 = v24768.InterfaceDeclaration;
                  var v18287 = v22632 != v22633;
                  if (v18287) {
                    var v22634 = stmt.nodeType;
                    var v24769 = TypeScript$$4.NodeType;
                    var v22635 = v24769.Empty;
                    v18287 = v22634 != v22635;
                  }
                  var v11589 = v18287;
                  if (v11589) {
                    return this.setCachedEmitRequired(true);
                  }
                }
              }
            }
          }
          i$$16++;
          v11594 = i$$16 < len$$4;
        }
        var v18288 = emitOptions.emitComments;
        if (v18288) {
          var v25677 = this.bod;
          var v24770 = v25677.preComments;
          if (v24770) {
            var v26257 = this.bod;
            var v26075 = v26257.preComments;
            var v25678 = v26075.length;
            v24770 = v25678 > 0;
          }
          var v22636 = v24770;
          var v24772 = !v22636;
          if (v24772) {
            var v25679 = this.bod;
            var v24771 = v25679.postComments;
            if (v24771) {
              var v26258 = this.bod;
              var v26076 = v26258.postComments;
              var v25680 = v26076.length;
              v24771 = v25680 > 0;
            }
            v22636 = v24771;
          }
          v18288 = v22636;
        }
        var v11595 = v18288;
        if (v11595) {
          return this.setCachedEmitRequired(true);
        }
      }
      return this.setCachedEmitRequired(false);
    }
    function v205() {
      return "Script";
    }
    function v204(typeFlow$$14) {
      return typeFlow$$14.typeCheckScript(this);
    }
    function v203(value$$29) {
      this.cachedEmitRequired = value$$29;
      return this.cachedEmitRequired;
    }
    function Script$$1(vars$$1, scopes$$1) {
      var v11597 = new Identifier("script");
      var v18289 = TypeScript$$4.NodeType;
      var v11598 = v18289.Script;
      _super$$20.call(this, v11597, null, false, null, vars$$1, scopes$$1, null, v11598);
      this.locationInfo = null;
      this.referencedFiles = [];
      this.requiresGlobal = false;
      this.requiresExtendsBlock = false;
      this.isResident = false;
      this.isDeclareFile = false;
      this.hasBeenTypeChecked = false;
      this.topLevelMod = null;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.containsUnicodeChar = false;
      this.containsUnicodeCharInComment = false;
      this.externallyVisibleImportedSymbols = [];
      this.vars = vars$$1;
      this.scopes = scopes$$1;
      return;
    }
    __extends(Script$$1, _super$$20);
    var v11599 = Script$$1.prototype;
    v11599.setCachedEmitRequired = v203;
    var v11600 = Script$$1.prototype;
    v11600.typeCheck = v204;
    var v11601 = Script$$1.prototype;
    v11601.treeViewLabel = v205;
    var v11602 = Script$$1.prototype;
    v11602.emitRequired = v206;
    var v11603 = Script$$1.prototype;
    v11603.emit = v207;
    var v11604 = Script$$1.prototype;
    v11604.AddExternallyVisibleImportedSymbol = v208;
    var v11605 = Script$$1.prototype;
    v11605.isExternallyVisibleSymbol = v209;
    return Script$$1;
  }
  function v202() {
    function LocationInfo$$1(filename, lineMap, unitIndex) {
      this.filename = filename;
      this.lineMap = lineMap;
      this.unitIndex = unitIndex;
      return;
    }
    return LocationInfo$$1;
  }
  function v201(_super$$19) {
    function v200() {
      var v18290 = this.fncFlags;
      var v22637 = TypeScript$$4.FncFlags;
      var v18291 = v22637.Signature;
      var v11606 = v18290 & v18291;
      var v18292 = TypeScript$$4.FncFlags;
      var v11607 = v18292.None;
      return v11606 != v11607;
    }
    function v199() {
      var v11608 = TypeScript$$4.FncFlags;
      this.fncFlags = v11608.None;
      return;
    }
    function v198() {
      var v18293 = this.name;
      var v11610 = v18293 == null;
      if (v11610) {
        return "funcExpr";
      } else {
        var v18294 = this.name;
        var v11609 = v18294.actualText;
        return "func: " + v11609;
      }
      return;
    }
    function v197() {
      var v11611 = this.fncFlags;
      var v18295 = TypeScript$$4.FncFlags;
      var v11612 = v18295.Static;
      return TypeScript$$4.hasFlag(v11611, v11612);
    }
    function v196() {
      var v11613 = this.fncFlags;
      var v18296 = TypeScript$$4.FncFlags;
      var v11614 = v18296.Public;
      return TypeScript$$4.hasFlag(v11613, v11614);
    }
    function v195() {
      var v11615 = this.fncFlags;
      var v18297 = TypeScript$$4.FncFlags;
      var v11616 = v18297.Private;
      return TypeScript$$4.hasFlag(v11615, v11616);
    }
    function v194() {
      var v11617 = this.fncFlags;
      var v18298 = TypeScript$$4.FncFlags;
      var v11618 = v18298.Exported;
      return TypeScript$$4.hasFlag(v11617, v11618);
    }
    function v193() {
      var v11619 = this.fncFlags;
      var v18299 = TypeScript$$4.FncFlags;
      var v11620 = v18299.Ambient;
      return TypeScript$$4.hasFlag(v11619, v11620);
    }
    function v192() {
      var v11621 = this.fncFlags;
      var v18300 = TypeScript$$4.FncFlags;
      var v11622 = v18300.SetAccessor;
      return TypeScript$$4.hasFlag(v11621, v11622);
    }
    function v191() {
      var v11623 = this.fncFlags;
      var v18301 = TypeScript$$4.FncFlags;
      var v11624 = v18301.GetAccessor;
      return TypeScript$$4.hasFlag(v11623, v11624);
    }
    function v190() {
      var v18302 = this.fncFlags;
      var v22638 = TypeScript$$4.FncFlags;
      var v18303 = v22638.GetAccessor;
      var v11625 = TypeScript$$4.hasFlag(v18302, v18303);
      var v18306 = !v11625;
      if (v18306) {
        var v18304 = this.fncFlags;
        var v22639 = TypeScript$$4.FncFlags;
        var v18305 = v22639.SetAccessor;
        v11625 = TypeScript$$4.hasFlag(v18304, v18305);
      }
      return v11625;
    }
    function v189() {
      var v11626 = this.name;
      return v11626 === null;
    }
    function v188() {
      var v18307 = this.isCallMember();
      var v22640 = !v18307;
      if (v22640) {
        v18307 = this.isIndexerMember();
      }
      var v11627 = v18307;
      var v18308 = !v11627;
      if (v18308) {
        v11627 = this.isConstructMember();
      }
      return v11627;
    }
    function v187() {
      var v11628 = this.fncFlags;
      var v18309 = TypeScript$$4.FncFlags;
      var v11629 = v18309.IndexerMember;
      return TypeScript$$4.hasFlag(v11628, v11629);
    }
    function v186() {
      var v11630 = this.fncFlags;
      var v18310 = TypeScript$$4.FncFlags;
      var v11631 = v18310.ConstructMember;
      return TypeScript$$4.hasFlag(v11630, v11631);
    }
    function v185() {
      var v11632 = this.fncFlags;
      var v18311 = TypeScript$$4.FncFlags;
      var v11633 = v18311.CallMember;
      return TypeScript$$4.hasFlag(v11632, v11633);
    }
    function v184() {
      var v18312 = this.fncFlags;
      var v22641 = TypeScript$$4.FncFlags;
      var v18313 = v22641.Method;
      var v11634 = v18312 & v18313;
      var v18314 = TypeScript$$4.FncFlags;
      var v11635 = v18314.None;
      return v11634 != v11635;
    }
    function v183() {
      var v11637 = this.name;
      if (v11637) {
        var v11636 = this.name;
        return v11636.actualText;
      } else {
        return this.hint;
      }
      return;
    }
    function v182(emitter$$15, tokenId$$15, startLine$$15) {
      emitter$$15.emitJavascriptFunction(this);
      return;
    }
    function v181(typeFlow$$13) {
      return typeFlow$$13.typeCheckFunction(this);
    }
    function v180() {
      function controlFlowPrefix(ast$$2, parent, walker$$1) {
        var v11638 = walker$$1.state;
        ast$$2.addToControlFlow(v11638);
        return ast$$2;
      }
      var v11639 = TypeScript$$4.BasicBlock;
      var entry$$1 = new v11639;
      var v11640 = TypeScript$$4.BasicBlock;
      var exit = new v11640;
      var v11641 = TypeScript$$4.ControlFlowContext;
      var context$$10 = new v11641(entry$$1, exit);
      var v11642 = TypeScript$$4.getAstWalkerFactory();
      var walker = v11642.getWalker(controlFlowPrefix, null, null, context$$10);
      context$$10.walker = walker;
      var v11643 = this.bod;
      walker.walk(v11643, this);
      return context$$10;
    }
    function v179(sym$$1) {
      var v18315 = this.jumpRefs;
      var v11644 = v18315 == null;
      if (v11644) {
        var v27093 = new Array;
        this.jumpRefs = v27093;
      }
      var v11645 = sym$$1.name;
      var id$$6 = new Identifier(v11645);
      var v11646 = this.jumpRefs;
      var v18316 = this.jumpRefs;
      var v11647 = v18316.length;
      v11646[v11647] = id$$6;
      id$$6.sym = sym$$1;
      var v27094 = this.addCloRef(id$$6, null);
      id$$6.cloId = v27094;
      return;
    }
    function v178(id$$5, sym) {
      var v18317 = this.envids;
      var v11648 = v18317 == null;
      if (v11648) {
        var v27095 = new Array;
        this.envids = v27095;
      }
      var v11649 = this.envids;
      var v18318 = this.envids;
      var v11650 = v18318.length;
      v11649[v11650] = id$$5;
      var outerFnc = this.enclosingFnc;
      if (sym) {
        var v18319 = outerFnc;
        if (v18319) {
          var v24773 = outerFnc.type;
          var v22642 = v24773.symbol;
          var v22643 = sym.container;
          v18319 = v22642 != v22643;
        }
        var v11651 = v18319;
        for (;v11651;) {
          outerFnc.addJumpRef(sym);
          outerFnc = outerFnc.enclosingFnc;
          var v18320 = outerFnc;
          if (v18320) {
            var v24774 = outerFnc.type;
            var v22644 = v24774.symbol;
            var v22645 = sym.container;
            v18320 = v22644 != v22645;
          }
          v11651 = v18320;
        }
      }
      var v18321 = this.envids;
      var v11652 = v18321.length;
      return v11652 - 1;
    }
    function v177() {
      var v18322 = this.fncFlags;
      var v22646 = TypeScript$$4.FncFlags;
      var v18323 = v22646.HasSuperReferenceInFatArrowFunction;
      this.fncFlags = v18322 | v18323;
      return;
    }
    function v176() {
      var v11653 = this.fncFlags;
      var v18324 = TypeScript$$4.FncFlags;
      var v11654 = v18324.HasSuperReferenceInFatArrowFunction;
      return TypeScript$$4.hasFlag(v11653, v11654);
    }
    function v175() {
      var v18325 = this.fncFlags;
      var v22647 = TypeScript$$4.FncFlags;
      var v18326 = v22647.HasSelfReference;
      this.fncFlags = v18325 | v18326;
      return;
    }
    function v174() {
      var v11655 = this.fncFlags;
      var v18327 = TypeScript$$4.FncFlags;
      var v11656 = v18327.HasSelfReference;
      return TypeScript$$4.hasFlag(v11655, v11656);
    }
    function v173() {
      var v18328 = this.internalNameCache;
      var v11658 = v18328 == null;
      if (v11658) {
        var extName = this.getNameText();
        if (extName) {
          this.internalNameCache = "_internal_" + extName;
        } else {
          var v11657 = internalId;
          internalId = internalId + 1;
          this.internalNameCache = "_internal_" + v11657;
        }
      }
      return this.internalNameCache;
    }
    function v172() {
      return true;
    }
    function FuncDecl$$1(name$$33, bod, isConstructor, args$$1, vars, scopes, statics, nodeType$$7) {
      _super$$19.call(this, nodeType$$7);
      this.name = name$$33;
      this.bod = bod;
      this.isConstructor = isConstructor;
      this.arguments = args$$1;
      this.vars = vars;
      this.scopes = scopes;
      this.statics = statics;
      this.hint = null;
      var v11659 = TypeScript$$4.FncFlags;
      this.fncFlags = v11659.None;
      this.returnTypeAnnotation = null;
      this.variableArgList = false;
      this.jumpRefs = null;
      this.internalNameCache = null;
      this.tmp1Declared = false;
      this.enclosingFnc = null;
      this.freeVariables = [];
      this.unitIndex = -1;
      this.classDecl = null;
      this.boundToProperty = null;
      this.isOverload = false;
      this.innerStaticFuncs = [];
      this.isTargetTypedAsMethod = false;
      this.isInlineCallLiteral = false;
      this.accessorSymbol = null;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.returnStatementsWithExpressions = [];
      this.scopeType = null;
      this.endingToken = null;
      return;
    }
    __extends(FuncDecl$$1, _super$$19);
    var v11660 = FuncDecl$$1.prototype;
    v11660.isDeclaration = v172;
    var v11661 = FuncDecl$$1.prototype;
    v11661.internalName = v173;
    var v11662 = FuncDecl$$1.prototype;
    v11662.hasSelfReference = v174;
    var v11663 = FuncDecl$$1.prototype;
    v11663.setHasSelfReference = v175;
    var v11664 = FuncDecl$$1.prototype;
    v11664.hasSuperReferenceInFatArrowFunction = v176;
    var v11665 = FuncDecl$$1.prototype;
    v11665.setHasSuperReferenceInFatArrowFunction = v177;
    var v11666 = FuncDecl$$1.prototype;
    v11666.addCloRef = v178;
    var v11667 = FuncDecl$$1.prototype;
    v11667.addJumpRef = v179;
    var v11668 = FuncDecl$$1.prototype;
    v11668.buildControlFlow = v180;
    var v11669 = FuncDecl$$1.prototype;
    v11669.typeCheck = v181;
    var v11670 = FuncDecl$$1.prototype;
    v11670.emit = v182;
    var v11671 = FuncDecl$$1.prototype;
    v11671.getNameText = v183;
    var v11672 = FuncDecl$$1.prototype;
    v11672.isMethod = v184;
    var v11673 = FuncDecl$$1.prototype;
    v11673.isCallMember = v185;
    var v11674 = FuncDecl$$1.prototype;
    v11674.isConstructMember = v186;
    var v11675 = FuncDecl$$1.prototype;
    v11675.isIndexerMember = v187;
    var v11676 = FuncDecl$$1.prototype;
    v11676.isSpecialFn = v188;
    var v11677 = FuncDecl$$1.prototype;
    v11677.isAnonymousFn = v189;
    var v11678 = FuncDecl$$1.prototype;
    v11678.isAccessor = v190;
    var v11679 = FuncDecl$$1.prototype;
    v11679.isGetAccessor = v191;
    var v11680 = FuncDecl$$1.prototype;
    v11680.isSetAccessor = v192;
    var v11681 = FuncDecl$$1.prototype;
    v11681.isAmbient = v193;
    var v11682 = FuncDecl$$1.prototype;
    v11682.isExported = v194;
    var v11683 = FuncDecl$$1.prototype;
    v11683.isPrivate = v195;
    var v11684 = FuncDecl$$1.prototype;
    v11684.isPublic = v196;
    var v11685 = FuncDecl$$1.prototype;
    v11685.isStatic = v197;
    var v11686 = FuncDecl$$1.prototype;
    v11686.treeViewLabel = v198;
    var v11687 = FuncDecl$$1.prototype;
    v11687.ClearFlags = v199;
    var v11688 = FuncDecl$$1.prototype;
    v11688.isSignature = v200;
    return FuncDecl$$1;
  }
  function v171(_super$$18) {
    function v170(emitter$$14, tokenId$$14, startLine$$14) {
      emitter$$14.emitParensAndCommentsInPlace(this, true);
      emitter$$14.recordSourceMappingStart(this);
      var v18329 = this.id;
      var v11689 = v18329.actualText;
      emitter$$14.writeToOutput(v11689);
      emitter$$14.recordSourceMappingEnd(this);
      emitter$$14.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v169() {
      var v18330 = this.id;
      var v11690 = v18330.actualText;
      return "arg: " + v11690;
    }
    function v168() {
      var v11691 = this.isOptional;
      var v18331 = !v11691;
      if (v18331) {
        v11691 = this.init;
      }
      return v11691;
    }
    function ArgDecl$$1(id$$4) {
      var v18332 = TypeScript$$4.NodeType;
      var v11692 = v18332.ArgDecl;
      _super$$18.call(this, id$$4, v11692, 0);
      this.isOptional = false;
      this.parameterPropertySym = null;
      return;
    }
    __extends(ArgDecl$$1, _super$$18);
    var v11693 = ArgDecl$$1.prototype;
    v11693.isOptionalArg = v168;
    var v11694 = ArgDecl$$1.prototype;
    v11694.treeViewLabel = v169;
    var v11695 = ArgDecl$$1.prototype;
    v11695.emit = v170;
    return ArgDecl$$1;
  }
  function v167(_super$$17) {
    function v166() {
      var v18333 = this.id;
      var v11696 = v18333.actualText;
      return "var " + v11696;
    }
    function v165(emitter$$13, tokenId$$13, startLine$$13) {
      emitter$$13.emitJavascriptVarDecl(this, tokenId$$13);
      return;
    }
    function v164() {
      var v11697 = this.varFlags;
      var v18334 = TypeScript$$4.VarFlags;
      var v11698 = v18334.Static;
      return TypeScript$$4.hasFlag(v11697, v11698);
    }
    function v163() {
      var v11699 = this.varFlags;
      var v18335 = TypeScript$$4.VarFlags;
      var v11700 = v18335.Exported;
      return TypeScript$$4.hasFlag(v11699, v11700);
    }
    function v162() {
      var v11701 = this.varFlags;
      var v18336 = TypeScript$$4.VarFlags;
      var v11702 = v18336.Ambient;
      return TypeScript$$4.hasFlag(v11701, v11702);
    }
    function VarDecl$$1(id$$3, nest) {
      var v18337 = TypeScript$$4.NodeType;
      var v11703 = v18337.VarDecl;
      _super$$17.call(this, id$$3, v11703, nest);
      return;
    }
    __extends(VarDecl$$1, _super$$17);
    var v11704 = VarDecl$$1.prototype;
    v11704.isAmbient = v162;
    var v11705 = VarDecl$$1.prototype;
    v11705.isExported = v163;
    var v11706 = VarDecl$$1.prototype;
    v11706.isStatic = v164;
    var v11707 = VarDecl$$1.prototype;
    v11707.emit = v165;
    var v11708 = VarDecl$$1.prototype;
    v11708.treeViewLabel = v166;
    return VarDecl$$1;
  }
  function v161(_super$$16) {
    function v160() {
      return this.treeViewLabel();
    }
    function v159(typeFlow$$12) {
      return typeFlow$$12.typeCheckBoundDecl(this);
    }
    function v158() {
      var v11709 = this.varFlags;
      var v18338 = TypeScript$$4.VarFlags;
      var v11710 = v18338.Property;
      return TypeScript$$4.hasFlag(v11709, v11710);
    }
    function v157() {
      var v11711 = this.varFlags;
      var v18339 = TypeScript$$4.VarFlags;
      var v11712 = v18339.Public;
      return TypeScript$$4.hasFlag(v11711, v11712);
    }
    function v156() {
      var v11713 = this.varFlags;
      var v18340 = TypeScript$$4.VarFlags;
      var v11714 = v18340.Private;
      return TypeScript$$4.hasFlag(v11713, v11714);
    }
    function v155() {
      return true;
    }
    function v154() {
      return true;
    }
    function BoundDecl$$1(id$$2, nodeType$$6, nestingLevel) {
      _super$$16.call(this, nodeType$$6);
      this.id = id$$2;
      this.nestingLevel = nestingLevel;
      this.init = null;
      this.typeExpr = null;
      var v11715 = TypeScript$$4.VarFlags;
      this.varFlags = v11715.None;
      this.sym = null;
      return;
    }
    __extends(BoundDecl$$1, _super$$16);
    var v11716 = BoundDecl$$1.prototype;
    v11716.isDeclaration = v154;
    var v11717 = BoundDecl$$1.prototype;
    v11717.isStatementOrExpression = v155;
    var v11718 = BoundDecl$$1.prototype;
    v11718.isPrivate = v156;
    var v11719 = BoundDecl$$1.prototype;
    v11719.isPublic = v157;
    var v11720 = BoundDecl$$1.prototype;
    v11720.isProperty = v158;
    var v11721 = BoundDecl$$1.prototype;
    v11721.typeCheck = v159;
    var v11722 = BoundDecl$$1.prototype;
    v11722.printLabel = v160;
    return BoundDecl$$1;
  }
  function v153(_super$$15) {
    function v152() {
      var v22648 = this.alias;
      var v18341 = v22648.nodeType;
      var v22649 = TypeScript$$4.NodeType;
      var v18342 = v22649.Name;
      var v11724 = v18341 == v18342;
      if (v11724) {
        var v11723 = this.alias;
        return v11723.actualText;
      } else {
        var dotExpr$$1 = this.alias;
        var firstMod = dotExpr$$1.operand1;
        return firstMod.actualText;
      }
      return;
    }
    function v151(aliasAST) {
      var v18343 = typeof aliasAST;
      var v11725 = v18343 === "undefined";
      if (v11725) {
        aliasAST = this.alias;
      }
      var v18344 = aliasAST.nodeType;
      var v22650 = TypeScript$$4.NodeType;
      var v18345 = v22650.Name;
      var v11728 = v18344 == v18345;
      if (v11728) {
        return aliasAST.actualText;
      } else {
        var dotExpr = aliasAST;
        var v22651 = dotExpr.operand1;
        var v18346 = this.getAliasName(v22651);
        var v11726 = v18346 + ".";
        var v18347 = dotExpr.operand2;
        var v11727 = this.getAliasName(v18347);
        return v11726 + v11727;
      }
      return;
    }
    function v150(typeFlow$$11) {
      return typeFlow$$11.typeCheckImportDecl(this);
    }
    function v149(emitter$$12, tokenId$$12, startLine$$12) {
      var v11729 = this.alias;
      var mod = v11729.type;
      var v22652 = this.isDynamicImport;
      var v18348 = !v22652;
      var v22654 = !v18348;
      if (v22654) {
        var v24775 = this.id;
        var v22653 = v24775.sym;
        if (v22653) {
          var v26077 = this.id;
          var v25681 = v26077.sym;
          var v24776 = v25681.onlyReferencedAsTypeRef;
          v22653 = !v24776;
        }
        v18348 = v22653;
      }
      var v11735 = v18348;
      if (v11735) {
        var prevModAliasId = emitter$$12.modAliasId;
        var prevFirstModAlias = emitter$$12.firstModAlias;
        emitter$$12.recordSourceMappingStart(this);
        emitter$$12.emitParensAndCommentsInPlace(this, true);
        var v24777 = this.id;
        var v22655 = v24777.actualText;
        var v18349 = "var " + v22655;
        var v11730 = v18349 + " = ";
        emitter$$12.writeToOutput(v11730);
        var v11731 = this.id;
        emitter$$12.modAliasId = v11731.actualText;
        var v27096 = this.firstAliasedModToString();
        emitter$$12.firstModAlias = v27096;
        var v11732 = this.alias;
        var v18350 = TypeScript$$4.TokenID;
        var v11733 = v18350.Tilde;
        emitter$$12.emitJavascript(v11732, v11733, false);
        var v18351 = this.isDynamicImport;
        var v11734 = !v18351;
        if (v11734) {
          emitter$$12.writeToOutput(";");
        }
        emitter$$12.emitParensAndCommentsInPlace(this, false);
        emitter$$12.recordSourceMappingEnd(this);
        emitter$$12.modAliasId = prevModAliasId;
        emitter$$12.firstModAlias = prevFirstModAlias;
      }
      return;
    }
    function v148() {
      return true;
    }
    function v147() {
      return true;
    }
    function ImportDeclaration$$1(id$$1, alias) {
      var v18352 = TypeScript$$4.NodeType;
      var v11736 = v18352.ImportDeclaration;
      _super$$15.call(this, v11736);
      this.id = id$$1;
      this.alias = alias;
      var v11737 = TypeScript$$4.VarFlags;
      this.varFlags = v11737.None;
      this.isDynamicImport = false;
      return;
    }
    __extends(ImportDeclaration$$1, _super$$15);
    var v11738 = ImportDeclaration$$1.prototype;
    v11738.isStatementOrExpression = v147;
    var v11739 = ImportDeclaration$$1.prototype;
    v11739.isDeclaration = v148;
    var v11740 = ImportDeclaration$$1.prototype;
    v11740.emit = v149;
    var v11741 = ImportDeclaration$$1.prototype;
    v11741.typeCheck = v150;
    var v11742 = ImportDeclaration$$1.prototype;
    v11742.getAliasName = v151;
    var v11743 = ImportDeclaration$$1.prototype;
    v11743.firstAliasedModToString = v152;
    return ImportDeclaration$$1;
  }
  function v146(_super$$14) {
    function ModuleElement$$1(nodeType$$5) {
      _super$$14.call(this, nodeType$$5);
      return;
    }
    __extends(ModuleElement$$1, _super$$14);
    return ModuleElement$$1;
  }
  function v145(_super$$13) {
    function v144() {
      return this.text;
    }
    function v143() {
      var v11744 = this.text;
      return "st: " + v11744;
    }
    function v142(typeFlow$$10) {
      this.type = typeFlow$$10.stringType;
      return this;
    }
    function v141(emitter$$11, tokenId$$11, startLine$$11) {
      emitter$$11.emitParensAndCommentsInPlace(this, true);
      emitter$$11.recordSourceMappingStart(this);
      var v11745 = this.text;
      emitter$$11.emitStringLiteral(v11745);
      emitter$$11.recordSourceMappingEnd(this);
      emitter$$11.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function StringLiteral$$1(text$$8) {
      var v18353 = TypeScript$$4.NodeType;
      var v11746 = v18353.QString;
      _super$$13.call(this, v11746);
      this.text = text$$8;
      return;
    }
    __extends(StringLiteral$$1, _super$$13);
    var v11747 = StringLiteral$$1.prototype;
    v11747.emit = v141;
    var v11748 = StringLiteral$$1.prototype;
    v11748.typeCheck = v142;
    var v11749 = StringLiteral$$1.prototype;
    v11749.treeViewLabel = v143;
    var v11750 = StringLiteral$$1.prototype;
    v11750.printLabel = v144;
    return StringLiteral$$1;
  }
  function v140(_super$$12) {
    function v139(emitter$$10, tokenId$$10, startLine$$10) {
      emitter$$10.emitParensAndCommentsInPlace(this, true);
      emitter$$10.recordSourceMappingStart(this);
      var v18354 = this.regex;
      var v11751 = v18354.toString();
      emitter$$10.writeToOutput(v11751);
      emitter$$10.recordSourceMappingEnd(this);
      emitter$$10.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v138(typeFlow$$9) {
      this.type = typeFlow$$9.regexType;
      return this;
    }
    function RegexLiteral$$1(regex$$1) {
      var v18355 = TypeScript$$4.NodeType;
      var v11752 = v18355.Regex;
      _super$$12.call(this, v11752);
      this.regex = regex$$1;
      return;
    }
    __extends(RegexLiteral$$1, _super$$12);
    var v11753 = RegexLiteral$$1.prototype;
    v11753.typeCheck = v138;
    var v11754 = RegexLiteral$$1.prototype;
    v11754.emit = v139;
    return RegexLiteral$$1;
  }
  function v137(_super$$11) {
    function v136() {
      var v22656 = this.value;
      var v18356 = Math.floor(v22656);
      var v18357 = this.value;
      var v11759 = v18356 != v18357;
      if (v11759) {
        var v18358 = this.value;
        var v11755 = v18358.toFixed(2);
        return v11755.toString();
      } else {
        var v11758 = this.hasEmptyFraction;
        if (v11758) {
          var v18359 = this.value;
          var v11756 = v18359.toString();
          return v11756 + ".0";
        } else {
          var v11757 = this.value;
          return v11757.toString();
        }
      }
      return;
    }
    function v135(emitter$$9, tokenId$$9, startLine$$9) {
      emitter$$9.emitParensAndCommentsInPlace(this, true);
      emitter$$9.recordSourceMappingStart(this);
      var v11760 = this.isNegativeZero;
      if (v11760) {
        emitter$$9.writeToOutput("-");
      }
      var v18360 = this.value;
      var v11761 = v18360.toString();
      emitter$$9.writeToOutput(v11761);
      var v11762 = this.hasEmptyFraction;
      if (v11762) {
        emitter$$9.writeToOutput(".0");
      }
      emitter$$9.recordSourceMappingEnd(this);
      emitter$$9.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v134() {
      var v11763 = this.printLabel();
      return "num: " + v11763;
    }
    function v133(typeFlow$$8) {
      this.type = typeFlow$$8.doubleType;
      return this;
    }
    function NumberLiteral$$1(value$$28, hasEmptyFraction) {
      var v18361 = TypeScript$$4.NodeType;
      var v11764 = v18361.NumberLit;
      _super$$11.call(this, v11764);
      this.value = value$$28;
      this.hasEmptyFraction = hasEmptyFraction;
      this.isNegativeZero = false;
      return;
    }
    __extends(NumberLiteral$$1, _super$$11);
    var v11765 = NumberLiteral$$1.prototype;
    v11765.typeCheck = v133;
    var v11766 = NumberLiteral$$1.prototype;
    v11766.treeViewLabel = v134;
    var v11767 = NumberLiteral$$1.prototype;
    v11767.emit = v135;
    var v11768 = NumberLiteral$$1.prototype;
    v11768.printLabel = v136;
    return NumberLiteral$$1;
  }
  function v132(_super$$10) {
    function v131(emitter$$8, tokenId$$8, startLine$$8) {
      emitter$$8.emitParensAndCommentsInPlace(this, true);
      emitter$$8.recordSourceMappingStart(this);
      var v11769 = this.operand1;
      var v18362 = TypeScript$$4.TokenID;
      var v11770 = v18362.Question;
      emitter$$8.emitJavascript(v11769, v11770, false);
      emitter$$8.writeToOutput(" ? ");
      var v11771 = this.operand2;
      var v18363 = TypeScript$$4.TokenID;
      var v11772 = v18363.Question;
      emitter$$8.emitJavascript(v11771, v11772, false);
      emitter$$8.writeToOutput(" : ");
      var v11773 = this.operand3;
      var v18364 = TypeScript$$4.TokenID;
      var v11774 = v18364.Question;
      emitter$$8.emitJavascript(v11773, v11774, false);
      emitter$$8.recordSourceMappingEnd(this);
      emitter$$8.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v130(typeFlow$$7) {
      return typeFlow$$7.typeCheckQMark(this);
    }
    function ConditionalExpression$$1(operand1$$1, operand2$$1, operand3) {
      var v18365 = TypeScript$$4.NodeType;
      var v11775 = v18365.ConditionalExpression;
      _super$$10.call(this, v11775);
      this.operand1 = operand1$$1;
      this.operand2 = operand2$$1;
      this.operand3 = operand3;
      return;
    }
    __extends(ConditionalExpression$$1, _super$$10);
    var v11776 = ConditionalExpression$$1.prototype;
    v11776.typeCheck = v130;
    var v11777 = ConditionalExpression$$1.prototype;
    v11777.emit = v131;
    return ConditionalExpression$$1;
  }
  function v129(_super$$9) {
    function v128(emitter$$7, tokenId$$7, startLine$$7) {
      var v11778 = TypeScript$$4.nodeTypeToTokTable;
      var v11779 = this.nodeType;
      var binTokenId = v11778[v11779];
      emitter$$7.emitParensAndCommentsInPlace(this, true);
      emitter$$7.recordSourceMappingStart(this);
      var v11805 = binTokenId != undefined;
      if (v11805) {
        var v11780 = this.operand1;
        emitter$$7.emitJavascript(v11780, binTokenId, false);
        var v24778 = TypeScript$$4.tokenTable;
        var v22657 = v24778[binTokenId];
        var v18366 = v22657.text;
        var v11783 = v18366 == "instanceof";
        if (v11783) {
          emitter$$7.writeToOutput(" instanceof ");
        } else {
          var v24779 = TypeScript$$4.tokenTable;
          var v22658 = v24779[binTokenId];
          var v18367 = v22658.text;
          var v11782 = v18367 == "in";
          if (v11782) {
            emitter$$7.writeToOutput(" in ");
          } else {
            var v25682 = TypeScript$$4.tokenTable;
            var v24780 = v25682[binTokenId];
            var v22659 = v24780.text;
            var v18368 = " " + v22659;
            var v11781 = v18368 + " ";
            emitter$$7.writeToOutputTrimmable(v11781);
          }
        }
        var v11784 = this.operand2;
        emitter$$7.emitJavascript(v11784, binTokenId, false);
      } else {
        var v11804 = this.nodeType;
        switch(v11804) {
          case TypeScript$$4.NodeType.Dot:
            var v18369 = emitter$$7.tryEmitConstant(this);
            var v11788 = !v18369;
            if (v11788) {
              var v11785 = this.operand1;
              var v18370 = TypeScript$$4.TokenID;
              var v11786 = v18370.Dot;
              emitter$$7.emitJavascript(v11785, v11786, false);
              emitter$$7.writeToOutput(".");
              var v11787 = this.operand2;
              emitter$$7.emitJavascriptName(v11787, false);
            }
            break;
          case TypeScript$$4.NodeType.Index:
            var v11789 = this.operand1;
            var v11790 = this.operand2;
            emitter$$7.emitIndex(v11789, v11790);
            break;
          case TypeScript$$4.NodeType.Member:
            var v24781 = this.operand2;
            var v22660 = v24781.nodeType;
            var v24782 = TypeScript$$4.NodeType;
            var v22661 = v24782.FuncDecl;
            var v18371 = v22660 == v22661;
            if (v18371) {
              var v22662 = this.operand2;
              v18371 = v22662.isAccessor();
            }
            var v11796 = v18371;
            if (v11796) {
              var funcDecl = this.operand2;
              var v18372 = funcDecl.fncFlags;
              var v22663 = TypeScript$$4.FncFlags;
              var v18373 = v22663.GetAccessor;
              var v11791 = TypeScript$$4.hasFlag(v18372, v18373);
              if (v11791) {
                emitter$$7.writeToOutput("get ");
              } else {
                emitter$$7.writeToOutput("set ");
              }
              var v11792 = this.operand1;
              var v18374 = TypeScript$$4.TokenID;
              var v11793 = v18374.Colon;
              emitter$$7.emitJavascript(v11792, v11793, false);
            } else {
              var v11794 = this.operand1;
              var v18375 = TypeScript$$4.TokenID;
              var v11795 = v18375.Colon;
              emitter$$7.emitJavascript(v11794, v11795, false);
              emitter$$7.writeToOutputTrimmable(": ");
            }
            var v11797 = this.operand2;
            var v18376 = TypeScript$$4.TokenID;
            var v11798 = v18376.Comma;
            emitter$$7.emitJavascript(v11797, v11798, false);
            break;
          case TypeScript$$4.NodeType.Comma:
            var v11799 = this.operand1;
            var v18377 = TypeScript$$4.TokenID;
            var v11800 = v18377.Comma;
            emitter$$7.emitJavascript(v11799, v11800, false);
            var v18378 = emitter$$7.emitState;
            var v11801 = v18378.inObjectLiteral;
            if (v11801) {
              emitter$$7.writeLineToOutput(", ");
            } else {
              emitter$$7.writeToOutput(",");
            }
            var v11802 = this.operand2;
            var v18379 = TypeScript$$4.TokenID;
            var v11803 = v18379.Comma;
            emitter$$7.emitJavascript(v11802, v11803, false);
            break;
          case TypeScript$$4.NodeType.Is:
            throw new Error("should be de-sugared during type check");;
          default:
            throw new Error("please implement in derived class");;
        }
      }
      emitter$$7.recordSourceMappingEnd(this);
      emitter$$7.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v127(typeFlow$$6) {
      var v11818 = this.nodeType;
      switch(v11818) {
        case TypeScript$$4.NodeType.Dot:
          return typeFlow$$6.typeCheckDotOperator(this);
        case TypeScript$$4.NodeType.Asg:
          return typeFlow$$6.typeCheckAsgOperator(this);
        case TypeScript$$4.NodeType.Add:
        ;
        case TypeScript$$4.NodeType.Sub:
        ;
        case TypeScript$$4.NodeType.Mul:
        ;
        case TypeScript$$4.NodeType.Div:
        ;
        case TypeScript$$4.NodeType.Mod:
        ;
        case TypeScript$$4.NodeType.Or:
        ;
        case TypeScript$$4.NodeType.And:
          return typeFlow$$6.typeCheckArithmeticOperator(this, false);
        case TypeScript$$4.NodeType.Xor:
          return typeFlow$$6.typeCheckBitwiseOperator(this, false);
        case TypeScript$$4.NodeType.Ne:
        ;
        case TypeScript$$4.NodeType.Eq:
          var text$$7;
          var v22664 = typeFlow$$6.checker;
          var v18380 = v22664.styleSettings;
          var v11816 = v18380.eqeqeq;
          if (v11816) {
            var v11806 = TypeScript$$4.nodeTypeTable;
            var v11807 = this.nodeType;
            text$$7 = v11806[v11807];
            var v18381 = typeFlow$$6.checker;
            var v11808 = v18381.errorReporter;
            var v11809 = "use of " + text$$7;
            v11808.styleError(this, v11809);
          } else {
            var v22665 = typeFlow$$6.checker;
            var v18382 = v22665.styleSettings;
            var v11815 = v18382.eqnull;
            if (v11815) {
              var v11810 = TypeScript$$4.nodeTypeTable;
              var v11811 = this.nodeType;
              text$$7 = v11810[v11811];
              var v22666 = this.operand2;
              var v18383 = v22666 !== null;
              if (v18383) {
                var v24783 = this.operand2;
                var v22667 = v24783.nodeType;
                var v24784 = TypeScript$$4.NodeType;
                var v22668 = v24784.Null;
                v18383 = v22667 == v22668;
              }
              var v11814 = v18383;
              if (v11814) {
                var v18384 = typeFlow$$6.checker;
                var v11812 = v18384.errorReporter;
                var v18385 = "use of " + text$$7;
                var v11813 = v18385 + " to compare with null";
                v11812.styleError(this, v11813);
              }
            }
          }
        ;
        case TypeScript$$4.NodeType.Eqv:
        ;
        case TypeScript$$4.NodeType.NEqv:
        ;
        case TypeScript$$4.NodeType.Lt:
        ;
        case TypeScript$$4.NodeType.Le:
        ;
        case TypeScript$$4.NodeType.Ge:
        ;
        case TypeScript$$4.NodeType.Gt:
          return typeFlow$$6.typeCheckBooleanOperator(this);
        case TypeScript$$4.NodeType.Index:
          return typeFlow$$6.typeCheckIndex(this);
        case TypeScript$$4.NodeType.Member:
          this.type = typeFlow$$6.voidType;
          return this;
        case TypeScript$$4.NodeType.LogOr:
          return typeFlow$$6.typeCheckLogOr(this);
        case TypeScript$$4.NodeType.LogAnd:
          return typeFlow$$6.typeCheckLogAnd(this);
        case TypeScript$$4.NodeType.AsgAdd:
        ;
        case TypeScript$$4.NodeType.AsgSub:
        ;
        case TypeScript$$4.NodeType.AsgMul:
        ;
        case TypeScript$$4.NodeType.AsgDiv:
        ;
        case TypeScript$$4.NodeType.AsgMod:
        ;
        case TypeScript$$4.NodeType.AsgOr:
        ;
        case TypeScript$$4.NodeType.AsgAnd:
          return typeFlow$$6.typeCheckArithmeticOperator(this, true);
        case TypeScript$$4.NodeType.AsgXor:
          return typeFlow$$6.typeCheckBitwiseOperator(this, true);
        case TypeScript$$4.NodeType.Lsh:
        ;
        case TypeScript$$4.NodeType.Rsh:
        ;
        case TypeScript$$4.NodeType.Rs2:
          return typeFlow$$6.typeCheckShift(this, false);
        case TypeScript$$4.NodeType.AsgLsh:
        ;
        case TypeScript$$4.NodeType.AsgRsh:
        ;
        case TypeScript$$4.NodeType.AsgRs2:
          return typeFlow$$6.typeCheckShift(this, true);
        case TypeScript$$4.NodeType.Comma:
          return typeFlow$$6.typeCheckCommaOperator(this);
        case TypeScript$$4.NodeType.InstOf:
          return typeFlow$$6.typeCheckInstOf(this);
        case TypeScript$$4.NodeType.In:
          return typeFlow$$6.typeCheckInOperator(this);
        case TypeScript$$4.NodeType.From:
          var v18386 = typeFlow$$6.checker;
          var v11817 = v18386.errorReporter;
          v11817.simpleError(this, "Illegal use of 'from' keyword in binary expression");
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    }
    function BinaryExpression$$1(nodeType$$4, operand1, operand2) {
      _super$$9.call(this, nodeType$$4);
      this.operand1 = operand1;
      this.operand2 = operand2;
      return;
    }
    __extends(BinaryExpression$$1, _super$$9);
    var v11819 = BinaryExpression$$1.prototype;
    v11819.typeCheck = v127;
    var v11820 = BinaryExpression$$1.prototype;
    v11820.emit = v128;
    return BinaryExpression$$1;
  }
  function v126(_super$$8) {
    function v125(emitter$$6, tokenId$$6, startLine$$6) {
      emitter$$6.emitParensAndCommentsInPlace(this, true);
      emitter$$6.recordSourceMappingStart(this);
      var v18387 = this.nodeType;
      var v22669 = TypeScript$$4.NodeType;
      var v18388 = v22669.New;
      var v11825 = v18387 == v18388;
      if (v11825) {
        var v11821 = this.target;
        var v11822 = this.arguments;
        emitter$$6.emitNew(v11821, v11822);
      } else {
        var v11823 = this.target;
        var v11824 = this.arguments;
        emitter$$6.emitCall(this, v11823, v11824);
      }
      emitter$$6.recordSourceMappingEnd(this);
      emitter$$6.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v124(typeFlow$$5) {
      var v18389 = this.nodeType;
      var v22670 = TypeScript$$4.NodeType;
      var v18390 = v22670.New;
      var v11826 = v18389 == v18390;
      if (v11826) {
        return typeFlow$$5.typeCheckNew(this);
      } else {
        return typeFlow$$5.typeCheckCall(this);
      }
      return;
    }
    function CallExpression$$1(nodeType$$3, target$$26, args) {
      _super$$8.call(this, nodeType$$3);
      this.target = target$$26;
      this.arguments = args;
      this.signature = null;
      var v11827 = this.target;
      this.minChar = v11827.minChar;
      return;
    }
    __extends(CallExpression$$1, _super$$8);
    var v11828 = CallExpression$$1.prototype;
    v11828.typeCheck = v124;
    var v11829 = CallExpression$$1.prototype;
    v11829.emit = v125;
    return CallExpression$$1;
  }
  function v123(_super$$7) {
    function v122(emitter$$5, tokenId$$5, startLine$$5) {
      emitter$$5.emitParensAndCommentsInPlace(this, true);
      emitter$$5.recordSourceMappingStart(this);
      var v11862 = this.nodeType;
      switch(v11862) {
        case TypeScript$$4.NodeType.IncPost:
          var v11830 = this.operand;
          var v18391 = TypeScript$$4.TokenID;
          var v11831 = v18391.PlusPlus;
          emitter$$5.emitJavascript(v11830, v11831, false);
          emitter$$5.writeToOutput("++");
          break;
        case TypeScript$$4.NodeType.LogNot:
          emitter$$5.writeToOutput("!");
          var v11832 = this.operand;
          var v18392 = TypeScript$$4.TokenID;
          var v11833 = v18392.Exclamation;
          emitter$$5.emitJavascript(v11832, v11833, false);
          break;
        case TypeScript$$4.NodeType.DecPost:
          var v11834 = this.operand;
          var v18393 = TypeScript$$4.TokenID;
          var v11835 = v18393.MinusMinus;
          emitter$$5.emitJavascript(v11834, v11835, false);
          emitter$$5.writeToOutput("--");
          break;
        case TypeScript$$4.NodeType.ObjectLit:
          var v11836 = this.operand;
          emitter$$5.emitObjectLiteral(v11836);
          break;
        case TypeScript$$4.NodeType.ArrayLit:
          var v11837 = this.operand;
          emitter$$5.emitArrayLiteral(v11837);
          break;
        case TypeScript$$4.NodeType.Not:
          emitter$$5.writeToOutput("~");
          var v11838 = this.operand;
          var v18394 = TypeScript$$4.TokenID;
          var v11839 = v18394.Tilde;
          emitter$$5.emitJavascript(v11838, v11839, false);
          break;
        case TypeScript$$4.NodeType.Neg:
          emitter$$5.writeToOutput("-");
          var v22671 = this.operand;
          var v18395 = v22671.nodeType;
          var v22672 = TypeScript$$4.NodeType;
          var v18396 = v22672.Neg;
          var v11841 = v18395 == v18396;
          if (v11841) {
            var v11840 = this.operand;
            v11840.isParenthesized = true;
          }
          var v11842 = this.operand;
          var v18397 = TypeScript$$4.TokenID;
          var v11843 = v18397.Minus;
          emitter$$5.emitJavascript(v11842, v11843, false);
          break;
        case TypeScript$$4.NodeType.Pos:
          emitter$$5.writeToOutput("+");
          var v22673 = this.operand;
          var v18398 = v22673.nodeType;
          var v22674 = TypeScript$$4.NodeType;
          var v18399 = v22674.Pos;
          var v11845 = v18398 == v18399;
          if (v11845) {
            var v11844 = this.operand;
            v11844.isParenthesized = true;
          }
          var v11846 = this.operand;
          var v18400 = TypeScript$$4.TokenID;
          var v11847 = v18400.Plus;
          emitter$$5.emitJavascript(v11846, v11847, false);
          break;
        case TypeScript$$4.NodeType.IncPre:
          emitter$$5.writeToOutput("++");
          var v11848 = this.operand;
          var v18401 = TypeScript$$4.TokenID;
          var v11849 = v18401.PlusPlus;
          emitter$$5.emitJavascript(v11848, v11849, false);
          break;
        case TypeScript$$4.NodeType.DecPre:
          emitter$$5.writeToOutput("--");
          var v11850 = this.operand;
          var v18402 = TypeScript$$4.TokenID;
          var v11851 = v18402.MinusMinus;
          emitter$$5.emitJavascript(v11850, v11851, false);
          break;
        case TypeScript$$4.NodeType.Throw:
          emitter$$5.writeToOutput("throw ");
          var v11852 = this.operand;
          var v18403 = TypeScript$$4.TokenID;
          var v11853 = v18403.Tilde;
          emitter$$5.emitJavascript(v11852, v11853, false);
          emitter$$5.writeToOutput(";");
          break;
        case TypeScript$$4.NodeType.Typeof:
          emitter$$5.writeToOutput("typeof ");
          var v11854 = this.operand;
          var v18404 = TypeScript$$4.TokenID;
          var v11855 = v18404.Tilde;
          emitter$$5.emitJavascript(v11854, v11855, false);
          break;
        case TypeScript$$4.NodeType.Delete:
          emitter$$5.writeToOutput("delete ");
          var v11856 = this.operand;
          var v18405 = TypeScript$$4.TokenID;
          var v11857 = v18405.Tilde;
          emitter$$5.emitJavascript(v11856, v11857, false);
          break;
        case TypeScript$$4.NodeType.Void:
          emitter$$5.writeToOutput("void ");
          var v11858 = this.operand;
          var v18406 = TypeScript$$4.TokenID;
          var v11859 = v18406.Tilde;
          emitter$$5.emitJavascript(v11858, v11859, false);
          break;
        case TypeScript$$4.NodeType.TypeAssertion:
          var v11860 = this.operand;
          var v18407 = TypeScript$$4.TokenID;
          var v11861 = v18407.Tilde;
          emitter$$5.emitJavascript(v11860, v11861, false);
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      emitter$$5.recordSourceMappingEnd(this);
      emitter$$5.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v121(typeFlow$$4) {
      var v11877 = this.nodeType;
      switch(v11877) {
        case TypeScript$$4.NodeType.Not:
          return typeFlow$$4.typeCheckBitNot(this);
        case TypeScript$$4.NodeType.LogNot:
          return typeFlow$$4.typeCheckLogNot(this);
        case TypeScript$$4.NodeType.Pos:
        ;
        case TypeScript$$4.NodeType.Neg:
          return typeFlow$$4.typeCheckUnaryNumberOperator(this);
        case TypeScript$$4.NodeType.IncPost:
        ;
        case TypeScript$$4.NodeType.IncPre:
        ;
        case TypeScript$$4.NodeType.DecPost:
        ;
        case TypeScript$$4.NodeType.DecPre:
          return typeFlow$$4.typeCheckIncOrDec(this);
        case TypeScript$$4.NodeType.ArrayLit:
          typeFlow$$4.typeCheckArrayLit(this);
          return this;
        case TypeScript$$4.NodeType.ObjectLit:
          typeFlow$$4.typeCheckObjectLit(this);
          return this;
        case TypeScript$$4.NodeType.Throw:
          var v11863 = this.operand;
          var v27097 = typeFlow$$4.typeCheck(v11863);
          this.operand = v27097;
          this.type = typeFlow$$4.voidType;
          return this;
        case TypeScript$$4.NodeType.Typeof:
          var v11864 = this.operand;
          var v27098 = typeFlow$$4.typeCheck(v11864);
          this.operand = v27098;
          this.type = typeFlow$$4.stringType;
          return this;
        case TypeScript$$4.NodeType.Delete:
          var v11865 = this.operand;
          var v27099 = typeFlow$$4.typeCheck(v11865);
          this.operand = v27099;
          this.type = typeFlow$$4.booleanType;
          break;
        case TypeScript$$4.NodeType.TypeAssertion:
          var v11866 = this.castTerm;
          var v27100 = typeFlow$$4.typeCheck(v11866);
          this.castTerm = v27100;
          var v18408 = this.operand;
          var v11867 = v18408.isParenthesized;
          var applyTargetType = !v11867;
          var v11868;
          if (applyTargetType) {
            var v18409 = this.castTerm;
            v11868 = v18409.type;
          } else {
            v11868 = null;
          }
          var targetType = v11868;
          var v11869 = typeFlow$$4.checker;
          var v18410 = typeFlow$$4.checker;
          var v11870 = v18410.inProvisionalTypecheckMode();
          var v11871 = this.operand;
          v11869.typeCheckWithContextualType(targetType, v11870, true, v11871);
          var v11872 = this.operand;
          var v18411 = this.castTerm;
          var v11873 = v18411.type;
          typeFlow$$4.castWithCoercion(v11872, v11873, false, true);
          var v11874 = this.castTerm;
          this.type = v11874.type;
          return this;
        case TypeScript$$4.NodeType.Void:
          var v11875 = this.operand;
          var v27101 = typeFlow$$4.typeCheck(v11875);
          this.operand = v27101;
          var v11876 = typeFlow$$4.checker;
          this.type = v11876.undefinedType;
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    }
    function v120(context$$9) {
      var v18412 = _super$$7.prototype;
      var v11878 = v18412.addToControlFlow;
      v11878.call(this, context$$9);
      var v18413 = this.nodeType;
      var v22675 = TypeScript$$4.NodeType;
      var v18414 = v22675.Throw;
      var v11879 = v18413 == v18414;
      if (v11879) {
        context$$9.returnStmt();
      }
      return;
    }
    function UnaryExpression$$1(nodeType$$2, operand) {
      _super$$7.call(this, nodeType$$2);
      this.operand = operand;
      this.targetType = null;
      this.castTerm = null;
      return;
    }
    __extends(UnaryExpression$$1, _super$$7);
    var v11880 = UnaryExpression$$1.prototype;
    v11880.addToControlFlow = v120;
    var v11881 = UnaryExpression$$1.prototype;
    v11881.typeCheck = v121;
    var v11882 = UnaryExpression$$1.prototype;
    v11882.emit = v122;
    return UnaryExpression$$1;
  }
  function v119(_super$$6) {
    function v118() {
      return true;
    }
    function v117() {
      return true;
    }
    function Expression$$1(nodeType$$1) {
      _super$$6.call(this, nodeType$$1);
      return;
    }
    __extends(Expression$$1, _super$$6);
    var v11883 = Expression$$1.prototype;
    v11883.isExpression = v117;
    var v11884 = Expression$$1.prototype;
    v11884.isStatementOrExpression = v118;
    return Expression$$1;
  }
  function v116(_super$$5) {
    function v115(emitter$$4, tokenId$$4, startLine$$4) {
      emitter$$4.emitParensAndCommentsInPlace(this, true);
      emitter$$4.recordSourceMappingStart(this);
      var v11885 = this.id;
      emitter$$4.recordSourceMappingStart(v11885);
      var v18415 = this.id;
      var v11886 = v18415.actualText;
      emitter$$4.writeToOutput(v11886);
      var v11887 = this.id;
      emitter$$4.recordSourceMappingEnd(v11887);
      emitter$$4.writeLineToOutput(":");
      emitter$$4.recordSourceMappingEnd(this);
      emitter$$4.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v114(typeFlow$$3) {
      this.type = typeFlow$$3.voidType;
      return this;
    }
    function v113() {
      var v18416 = this.id;
      var v11888 = v18416.actualText;
      return v11888 + ":";
    }
    function Label$$1(id) {
      var v18417 = TypeScript$$4.NodeType;
      var v11889 = v18417.Label;
      _super$$5.call(this, v11889);
      this.id = id;
      return;
    }
    __extends(Label$$1, _super$$5);
    var v11890 = Label$$1.prototype;
    v11890.printLabel = v113;
    var v11891 = Label$$1.prototype;
    v11891.typeCheck = v114;
    var v11892 = Label$$1.prototype;
    v11892.emit = v115;
    return Label$$1;
  }
  function v112(_super$$4) {
    function v111(emitter$$3, tokenId$$3, startLine$$3) {
      return;
    }
    function v110() {
      return true;
    }
    function MissingIdentifier$$1() {
      _super$$4.call(this, "__missing");
      return;
    }
    __extends(MissingIdentifier$$1, _super$$4);
    var v11893 = MissingIdentifier$$1.prototype;
    v11893.isMissing = v110;
    var v11894 = MissingIdentifier$$1.prototype;
    v11894.emit = v111;
    return MissingIdentifier$$1;
  }
  function v109(_super$$3) {
    function fromToken(token$$4) {
      var v11895 = token$$4.getText();
      var v11896 = token$$4.hasEscapeSequence;
      return new Identifier$$1(v11895, v11896);
    }
    function v108(emitter$$2, tokenId$$2, startLine$$2) {
      emitter$$2.emitJavascriptName(this, true);
      return;
    }
    function v107(typeFlow$$2) {
      return typeFlow$$2.typeCheckName(this);
    }
    function v106() {
      var v11898 = this.actualText;
      if (v11898) {
        var v11897 = this.actualText;
        return "id: " + v11897;
      } else {
        return "name node";
      }
      return;
    }
    function v105() {
      var v11899 = this.actualText;
      return "id: " + v11899;
    }
    function v104() {
      return true;
    }
    function v103() {
      return false;
    }
    function v102(actualText$$1, hasEscapeSequence$$1) {
      this.actualText = actualText$$1;
      if (hasEscapeSequence$$1) {
        var v27102 = AST.getResolvedIdentifierName(actualText$$1);
        this.text = v27102;
      } else {
        this.text = actualText$$1;
      }
      return;
    }
    function Identifier$$1(actualText, hasEscapeSequence) {
      var v18418 = TypeScript$$4.NodeType;
      var v11900 = v18418.Name;
      _super$$3.call(this, v11900);
      this.actualText = actualText;
      this.hasEscapeSequence = hasEscapeSequence;
      this.sym = null;
      this.cloId = -1;
      this.setText(actualText, hasEscapeSequence);
      return;
    }
    __extends(Identifier$$1, _super$$3);
    var v11901 = Identifier$$1.prototype;
    v11901.setText = v102;
    var v11902 = Identifier$$1.prototype;
    v11902.isMissing = v103;
    var v11903 = Identifier$$1.prototype;
    v11903.isLeaf = v104;
    var v11904 = Identifier$$1.prototype;
    v11904.treeViewLabel = v105;
    var v11905 = Identifier$$1.prototype;
    v11905.printLabel = v106;
    var v11906 = Identifier$$1.prototype;
    v11906.typeCheck = v107;
    var v11907 = Identifier$$1.prototype;
    v11907.emit = v108;
    Identifier$$1.fromToken = fromToken;
    return Identifier$$1;
  }
  function v101(_super$$2) {
    function v100(typeFlow$$1) {
      var v11908 = this.members;
      var len$$3 = v11908.length;
      typeFlow$$1.nestingLevel++;
      var i$$15 = 0;
      var v11911 = i$$15 < len$$3;
      for (;v11911;) {
        var v18419 = this.members;
        var v11910 = v18419[i$$15];
        if (v11910) {
          var v11909 = this.members;
          var v22676 = this.members;
          var v18420 = v22676[i$$15];
          var v27103 = v18420.typeCheck(typeFlow$$1);
          v11909[i$$15] = v27103;
        }
        i$$15++;
        v11911 = i$$15 < len$$3;
      }
      typeFlow$$1.nestingLevel--;
      return this;
    }
    function v99(emitter$$1, tokenId$$1, startLine$$1) {
      emitter$$1.recordSourceMappingStart(this);
      var v18421 = TypeScript$$4.TokenID;
      var v11912 = v18421.Semicolon;
      emitter$$1.emitJavascriptList(this, null, v11912, startLine$$1, false, false);
      emitter$$1.recordSourceMappingEnd(this);
      return;
    }
    function v98(ast$$1) {
      var v18422 = ast$$1.nodeType;
      var v22677 = TypeScript$$4.NodeType;
      var v18423 = v22677.List;
      var v11916 = v18422 == v18423;
      if (v11916) {
        var list = ast$$1;
        var i$$14 = 0;
        var v11913 = list.members;
        var len$$2 = v11913.length;
        var v11915 = i$$14 < len$$2;
        for (;v11915;) {
          var v18424 = list.members;
          var v11914 = v18424[i$$14];
          this.append(v11914);
          i$$14++;
          v11915 = i$$14 < len$$2;
        }
      } else {
        this.append(ast$$1);
      }
      return this;
    }
    function v97(ast) {
      var v11917 = this.members;
      var v18425 = this.members;
      var v11918 = v18425.length;
      v11917[v11918] = ast;
      return this;
    }
    function v96(context$$8) {
      var v11919 = this.members;
      var len$$1 = v11919.length;
      var i$$13 = 0;
      var v11923 = i$$13 < len$$1;
      for (;v11923;) {
        var v11922 = context$$8.noContinuation;
        if (v11922) {
          var v18426 = this.members;
          var v11920 = v18426[i$$13];
          context$$8.addUnreachable(v11920);
          break;
        } else {
          var v11921 = this.members;
          var v22678 = this.members;
          var v18427 = v22678[i$$13];
          var v27104 = context$$8.walk(v18427, this);
          v11921[i$$13] = v27104;
        }
        i$$13++;
        v11923 = i$$13 < len$$1;
      }
      var v18428 = context$$8.walker;
      var v11924 = v18428.options;
      v11924.goChildren = false;
      return;
    }
    function ASTList$$1() {
      var v18429 = TypeScript$$4.NodeType;
      var v11925 = v18429.List;
      _super$$2.call(this, v11925);
      this.enclosingScope = null;
      var v27105 = new Array;
      this.members = v27105;
      return;
    }
    __extends(ASTList$$1, _super$$2);
    var v11926 = ASTList$$1.prototype;
    v11926.addToControlFlow = v96;
    var v11927 = ASTList$$1.prototype;
    v11927.append = v97;
    var v11928 = ASTList$$1.prototype;
    v11928.appendAll = v98;
    var v11929 = ASTList$$1.prototype;
    v11929.emit = v99;
    var v11930 = ASTList$$1.prototype;
    v11930.typeCheck = v100;
    return ASTList$$1;
  }
  function v95(_super$$1) {
    function IncompleteAST$$1(min, lim) {
      var v18430 = TypeScript$$4.NodeType;
      var v11931 = v18430.Error;
      _super$$1.call(this, v11931);
      this.minChar = min;
      this.limChar = lim;
      return;
    }
    __extends(IncompleteAST$$1, _super$$1);
    return IncompleteAST$$1;
  }
  function v94(_super) {
    function v93() {
      var v24785 = this.isDeclaration();
      var v22679 = !v24785;
      var v24787 = !v22679;
      if (v24787) {
        var v24786 = this.preComments;
        v22679 = !v24786;
      }
      var v18431 = v22679;
      var v22681 = !v18431;
      if (v22681) {
        var v24788 = this.preComments;
        var v22680 = v24788.length;
        v18431 = v22680 == 0;
      }
      var v11932 = v18431;
      if (v11932) {
        return[];
      }
      var v18432 = this.docComments;
      var v11939 = !v18432;
      if (v11939) {
        var v11933 = this.preComments;
        var preCommentsLength = v11933.length;
        var docComments = [];
        var i$$12 = preCommentsLength - 1;
        var v11938 = i$$12 >= 0;
        for (;v11938;) {
          var v22682 = this.preComments;
          var v18433 = v22682[i$$12];
          var v11937 = v18433.isDocComment();
          if (v11937) {
            var v11934;
            var v22683 = docComments.length;
            var v18435 = v22683 > 0;
            if (v18435) {
              var v22684 = docComments.length;
              var v18434 = v22684 - 1;
              v11934 = docComments[v18434];
            } else {
              v11934 = null;
            }
            var prevDocComment = v11934;
            var v18436 = prevDocComment == null;
            var v22686 = !v18436;
            if (v22686) {
              var v26078 = this.preComments;
              var v25683 = v26078[i$$12];
              var v24789 = v25683.limLine;
              var v24790 = prevDocComment.minLine;
              var v22685 = v24789 == v24790;
              var v24793 = !v22685;
              if (v24793) {
                var v26259 = this.preComments;
                var v26079 = v26259[i$$12];
                var v25684 = v26079.limLine;
                var v24791 = v25684 + 1;
                var v24792 = prevDocComment.minLine;
                v22685 = v24791 == v24792;
              }
              v18436 = v22685;
            }
            var v11936 = v18436;
            if (v11936) {
              var v18437 = this.preComments;
              var v11935 = v18437[i$$12];
              docComments.push(v11935);
              i$$12--;
              v11938 = i$$12 >= 0;
              continue;
            }
          }
          break;
        }
        var v27106 = docComments.reverse();
        this.docComments = v27106;
      }
      return this.docComments;
    }
    function getResolvedIdentifierName(name$$32) {
      var v11940 = !name$$32;
      if (v11940) {
        return "";
      }
      var resolved = "";
      var start$$6 = 0;
      var i$$11 = 0;
      var v22687 = name$$32.length;
      var v18438 = v22687 - 6;
      var v11943 = i$$11 <= v18438;
      for (;v11943;) {
        var v22688 = name$$32.charAt(i$$11);
        var v18439 = v22688 == "\\";
        if (v18439) {
          var v24794 = i$$11 + 1;
          var v22689 = name$$32.charAt(v24794);
          v18439 = v22689 == "u";
        }
        var v11942 = v18439;
        if (v11942) {
          var v18440 = i$$11 + 2;
          var v11941 = name$$32.substr(v18440, 4);
          var charCode = parseInt(v11941, 16);
          var v22690 = i$$11 - start$$6;
          var v18441 = name$$32.substr(start$$6, v22690);
          resolved = resolved + v18441;
          var v18442 = String.fromCharCode(charCode);
          resolved = resolved + v18442;
          i$$11 = i$$11 + 6;
          start$$6 = i$$11;
          var v22691 = name$$32.length;
          var v18443 = v22691 - 6;
          v11943 = i$$11 <= v18443;
          continue;
        }
        i$$11++;
        var v22692 = name$$32.length;
        var v18444 = v22692 - 6;
        v11943 = i$$11 <= v18444;
      }
      var v18445 = name$$32.substring(start$$6);
      resolved = resolved + v18445;
      return resolved;
    }
    function v92() {
      var v18446 = TypeScript$$4.NodeType;
      var v11944 = v18446._map;
      var v11945 = this.nodeType;
      return v11944[v11945];
    }
    function v91(container, freeUses) {
      return;
    }
    function v90(context$$7) {
      var v18447 = context$$7.walker;
      var v11946 = v18447.options;
      v11946.goChildren = false;
      context$$7.addContent(this);
      return;
    }
    function v89() {
      var v22693 = TypeScript$$4.nodeTypeTable;
      var v22694 = this.nodeType;
      var v18448 = v22693[v22694];
      var v11951 = v18448 !== undefined;
      if (v11951) {
        var v11947 = TypeScript$$4.nodeTypeTable;
        var v11948 = this.nodeType;
        return v11947[v11948];
      } else {
        var v18449 = TypeScript$$4.NodeType;
        var v11949 = v18449._map;
        var v11950 = this.nodeType;
        return v11949[v11950];
      }
      return;
    }
    function v88(context$$6) {
      context$$6.startLine();
      var lineCol = {line:-1, col:-1};
      var limLineCol = {line:-1, col:-1};
      var v18450 = context$$6.parser;
      var v11957 = v18450 !== null;
      if (v11957) {
        var v11952 = context$$6.parser;
        var v11953 = this.minChar;
        v11952.getSourceLineCol(lineCol, v11953);
        var v11954 = context$$6.parser;
        var v11955 = this.limChar;
        v11954.getSourceLineCol(limLineCol, v11955);
        var v26419 = lineCol.line;
        var v26396 = "(" + v26419;
        var v26349 = v26396 + ",";
        var v26350 = lineCol.col;
        var v26260 = v26349 + v26350;
        var v26080 = v26260 + ")--";
        var v25685 = v26080 + "(";
        var v25686 = limLineCol.line;
        var v24795 = v25685 + v25686;
        var v22695 = v24795 + ",";
        var v22696 = limLineCol.col;
        var v18451 = v22695 + v22696;
        var v11956 = v18451 + "): ";
        context$$6.write(v11956);
      }
      var lab = this.printLabel();
      var v18452 = this.flags;
      var v22697 = TypeScript$$4.ASTFlags;
      var v18453 = v22697.Error;
      var v11958 = TypeScript$$4.hasFlag(v18452, v18453);
      if (v11958) {
        lab = lab + " (Error)";
      }
      context$$6.writeLine(lab);
      return;
    }
    function v87(emitter, tokenId, startLine) {
      emitter.emitParensAndCommentsInPlace(this, true);
      var v11960 = this.nodeType;
      switch(v11960) {
        case TypeScript$$4.NodeType.This:
          emitter.recordSourceMappingStart(this);
          var v18454 = emitter.thisFnc;
          if (v18454) {
            var v24796 = emitter.thisFnc;
            var v22698 = v24796.fncFlags;
            var v24797 = TypeScript$$4.FncFlags;
            var v22699 = v24797.IsFatArrowFunction;
            v18454 = TypeScript$$4.hasFlag(v22698, v22699);
          }
          var v11959 = v18454;
          if (v11959) {
            emitter.writeToOutput("_this");
          } else {
            emitter.writeToOutput("this");
          }
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.Null:
          emitter.recordSourceMappingStart(this);
          emitter.writeToOutput("null");
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.False:
          emitter.recordSourceMappingStart(this);
          emitter.writeToOutput("false");
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.True:
          emitter.recordSourceMappingStart(this);
          emitter.writeToOutput("true");
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.Super:
          emitter.recordSourceMappingStart(this);
          emitter.emitSuperReference();
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.EndCode:
        ;
        case TypeScript$$4.NodeType.Error:
        ;
        case TypeScript$$4.NodeType.EmptyExpr:
          break;
        case TypeScript$$4.NodeType.Empty:
          emitter.recordSourceMappingStart(this);
          emitter.recordSourceMappingEnd(this);
          break;
        case TypeScript$$4.NodeType.Void:
          emitter.recordSourceMappingStart(this);
          emitter.writeToOutput("void ");
          emitter.recordSourceMappingEnd(this);
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      emitter.emitParensAndCommentsInPlace(this, false);
      return;
    }
    function v86(typeFlow) {
      var v11961 = this.nodeType;
      switch(v11961) {
        case TypeScript$$4.NodeType.Error:
        ;
        case TypeScript$$4.NodeType.EmptyExpr:
          this.type = typeFlow.anyType;
          break;
        case TypeScript$$4.NodeType.This:
          return typeFlow.typeCheckThis(this);
        case TypeScript$$4.NodeType.Null:
          this.type = typeFlow.nullType;
          break;
        case TypeScript$$4.NodeType.False:
        ;
        case TypeScript$$4.NodeType.True:
          this.type = typeFlow.booleanType;
          break;
        case TypeScript$$4.NodeType.Super:
          return typeFlow.typeCheckSuper(this);
        case TypeScript$$4.NodeType.EndCode:
        ;
        case TypeScript$$4.NodeType.Empty:
        ;
        case TypeScript$$4.NodeType.Void:
          this.type = typeFlow.voidType;
          break;
        default:
          throw new Error("please implement in derived class");;
      }
      return this;
    }
    function v85() {
      return false;
    }
    function v84() {
      var v11962 = this.isStatementOrExpression();
      if (v11962) {
        var v18455 = this.isCompoundStatement();
        v11962 = !v18455;
      }
      return v11962;
    }
    function v83() {
      return false;
    }
    function v82() {
      return false;
    }
    function v81() {
      return false;
    }
    function AST$$1(nodeType) {
      _super.call(this);
      this.nodeType = nodeType;
      this.type = null;
      var v11963 = TypeScript$$4.ASTFlags;
      this.flags = v11963.Writeable;
      var v11964 = TypeScript$$4.CompilerDiagnostics;
      this.passCreated = v11964.analysisPass;
      this.preComments = null;
      this.postComments = null;
      this.docComments = null;
      this.isParenthesized = false;
      return;
    }
    __extends(AST$$1, _super);
    var v11965 = AST$$1.prototype;
    v11965.isExpression = v81;
    var v11966 = AST$$1.prototype;
    v11966.isStatementOrExpression = v82;
    var v11967 = AST$$1.prototype;
    v11967.isCompoundStatement = v83;
    var v11968 = AST$$1.prototype;
    v11968.isLeaf = v84;
    var v11969 = AST$$1.prototype;
    v11969.isDeclaration = v85;
    var v11970 = AST$$1.prototype;
    v11970.typeCheck = v86;
    var v11971 = AST$$1.prototype;
    v11971.emit = v87;
    var v11972 = AST$$1.prototype;
    v11972.print = v88;
    var v11973 = AST$$1.prototype;
    v11973.printLabel = v89;
    var v11974 = AST$$1.prototype;
    v11974.addToControlFlow = v90;
    var v11975 = AST$$1.prototype;
    v11975.netFreeUses = v91;
    var v11976 = AST$$1.prototype;
    v11976.treeViewLabel = v92;
    AST$$1.getResolvedIdentifierName = getResolvedIdentifierName;
    var v11977 = AST$$1.prototype;
    v11977.getDocComments = v93;
    return AST$$1;
  }
  function v80() {
    function ASTSpan$$1() {
      this.minChar = -1;
      this.limChar = -1;
      return;
    }
    return ASTSpan$$1;
  }
  var ASTSpan = v80();
  TypeScript$$4.ASTSpan = ASTSpan;
  var AST = v94(ASTSpan);
  TypeScript$$4.AST = AST;
  var IncompleteAST = v95(AST);
  TypeScript$$4.IncompleteAST = IncompleteAST;
  var ASTList = v101(AST);
  TypeScript$$4.ASTList = ASTList;
  var Identifier = v109(AST);
  TypeScript$$4.Identifier = Identifier;
  var MissingIdentifier = v112(Identifier);
  TypeScript$$4.MissingIdentifier = MissingIdentifier;
  var Label = v116(AST);
  TypeScript$$4.Label = Label;
  var Expression = v119(AST);
  TypeScript$$4.Expression = Expression;
  var UnaryExpression = v123(Expression);
  TypeScript$$4.UnaryExpression = UnaryExpression;
  var CallExpression = v126(Expression);
  TypeScript$$4.CallExpression = CallExpression;
  var BinaryExpression = v129(Expression);
  TypeScript$$4.BinaryExpression = BinaryExpression;
  var ConditionalExpression = v132(Expression);
  TypeScript$$4.ConditionalExpression = ConditionalExpression;
  var NumberLiteral = v137(Expression);
  TypeScript$$4.NumberLiteral = NumberLiteral;
  var RegexLiteral = v140(Expression);
  TypeScript$$4.RegexLiteral = RegexLiteral;
  var StringLiteral = v145(Expression);
  TypeScript$$4.StringLiteral = StringLiteral;
  var ModuleElement = v146(AST);
  TypeScript$$4.ModuleElement = ModuleElement;
  var ImportDeclaration = v153(ModuleElement);
  TypeScript$$4.ImportDeclaration = ImportDeclaration;
  var BoundDecl = v161(AST);
  TypeScript$$4.BoundDecl = BoundDecl;
  var VarDecl = v167(BoundDecl);
  TypeScript$$4.VarDecl = VarDecl;
  var ArgDecl = v171(BoundDecl);
  TypeScript$$4.ArgDecl = ArgDecl;
  var internalId = 0;
  var FuncDecl = v201(AST);
  TypeScript$$4.FuncDecl = FuncDecl;
  var LocationInfo = v202();
  TypeScript$$4.LocationInfo = LocationInfo;
  var v11978 = TypeScript$$4;
  var v27107 = new LocationInfo("unknown", null, -1);
  v11978.unknownLocationInfo = v27107;
  var Script = v210(FuncDecl);
  TypeScript$$4.Script = Script;
  var NamedDeclaration = v212(ModuleElement);
  TypeScript$$4.NamedDeclaration = NamedDeclaration;
  var ModuleDeclaration = v219(NamedDeclaration);
  TypeScript$$4.ModuleDeclaration = ModuleDeclaration;
  var TypeDeclaration = v222(NamedDeclaration);
  TypeScript$$4.TypeDeclaration = TypeDeclaration;
  var ClassDeclaration = v225(TypeDeclaration);
  TypeScript$$4.ClassDeclaration = ClassDeclaration;
  var InterfaceDeclaration = v228(TypeDeclaration);
  TypeScript$$4.InterfaceDeclaration = InterfaceDeclaration;
  var Statement = v233(ModuleElement);
  TypeScript$$4.Statement = Statement;
  var LabeledStatement = v237(Statement);
  TypeScript$$4.LabeledStatement = LabeledStatement;
  var Block = v241(Statement);
  TypeScript$$4.Block = Block;
  var Jump = v246(Statement);
  TypeScript$$4.Jump = Jump;
  var WhileStatement = v251(Statement);
  TypeScript$$4.WhileStatement = WhileStatement;
  var DoWhileStatement = v256(Statement);
  TypeScript$$4.DoWhileStatement = DoWhileStatement;
  var IfStatement = v261(Statement);
  TypeScript$$4.IfStatement = IfStatement;
  var ReturnStatement = v265(Statement);
  TypeScript$$4.ReturnStatement = ReturnStatement;
  var EndCode = v266(AST);
  TypeScript$$4.EndCode = EndCode;
  var ForInStatement = v272(Statement);
  TypeScript$$4.ForInStatement = ForInStatement;
  var ForStatement = v277(Statement);
  TypeScript$$4.ForStatement = ForStatement;
  var WithStatement = v281(Statement);
  TypeScript$$4.WithStatement = WithStatement;
  var SwitchStatement = v286(Statement);
  TypeScript$$4.SwitchStatement = SwitchStatement;
  var CaseStatement = v290(Statement);
  TypeScript$$4.CaseStatement = CaseStatement;
  var TypeReference = v293(AST);
  TypeScript$$4.TypeReference = TypeReference;
  var TryFinally = v298(Statement);
  TypeScript$$4.TryFinally = TryFinally;
  var TryCatch = v303(Statement);
  TypeScript$$4.TryCatch = TryCatch;
  var Try = v307(Statement);
  TypeScript$$4.Try = Try;
  var Catch = v311(Statement);
  TypeScript$$4.Catch = Catch;
  var Finally = v315(Statement);
  TypeScript$$4.Finally = Finally;
  var Comment$$1 = v319(AST);
  TypeScript$$4.Comment = Comment$$1;
  var DebuggerStatement = v321(Statement);
  TypeScript$$4.DebuggerStatement = DebuggerStatement;
  return;
}
function v79(d, b) {
  function __() {
    this.constructor = d;
    return;
  }
  __.prototype = b.prototype;
  var v11979 = d;
  var v27108 = new __;
  v11979.prototype = v27108;
  return;
}
function v78(TypeScript$$3) {
  function v77() {
    function v76(key$$26, data$$32) {
      var lookupData = this.lookup(key$$26);
      if (lookupData) {
        return false;
      }
      var v11980 = this.keys;
      var v18456 = this.keys;
      var v11981 = v18456.length;
      v11980[v11981] = key$$26;
      var v11982 = this.values;
      var v18457 = this.values;
      var v11983 = v18457.length;
      v11982[v11983] = data$$32;
      return true;
    }
    function v75(key$$25, findValue) {
      var searchArray = this.keys;
      if (findValue) {
        searchArray = this.values;
      }
      var i$$10 = 0;
      var v18458 = searchArray.length;
      var v11987 = i$$10 < v18458;
      for (;v11987;) {
        var v18459 = searchArray[i$$10];
        var v11986 = v18459 == key$$25;
        if (v11986) {
          var v18460 = this.keys;
          var v11984 = v18460[i$$10];
          var v18461 = this.values;
          var v11985 = v18461[i$$10];
          return{key:v11984, data:v11985};
        }
        i$$10++;
        var v18462 = searchArray.length;
        v11987 = i$$10 < v18462;
      }
      return null;
    }
    function SimpleHashTable$$1() {
      this.keys = [];
      this.values = [];
      return;
    }
    var v11988 = SimpleHashTable$$1.prototype;
    v11988.lookup = v75;
    var v11989 = SimpleHashTable$$1.prototype;
    v11989.add = v76;
    return SimpleHashTable$$1;
  }
  function v74() {
    function v73(key$$24) {
      var current$$2;
      var val$$3 = this.hashFn(key$$24);
      var v11990 = this.size;
      val$$3 = val$$3 % v11990;
      var v11991 = this.table;
      current$$2 = v11991[val$$3];
      var v11993 = current$$2 != null;
      for (;v11993;) {
        var v18463 = current$$2.key;
        var v11992 = this.equalsFn(key$$24, v18463);
        if (v11992) {
          return current$$2.data;
        }
        current$$2 = current$$2.next;
        v11993 = current$$2 != null;
      }
      return null;
    }
    function v72() {
      return this.itemCount;
    }
    function v71(key$$23) {
      var current$$1;
      var val$$2 = this.hashFn(key$$23);
      var v11994 = this.size;
      val$$2 = val$$2 % v11994;
      var result$$3 = null;
      var prevEntry = null;
      var v11995 = this.table;
      current$$1 = v11995[val$$2];
      var v11998 = current$$1 != null;
      for (;v11998;) {
        var v18464 = current$$1.key;
        var v11997 = this.equalsFn(key$$23, v18464);
        if (v11997) {
          result$$3 = current$$1.data;
          this.itemCount--;
          if (prevEntry) {
            prevEntry.next = current$$1.next;
          } else {
            var v11996 = this.table;
            v11996[val$$2] = current$$1.next;
          }
          break;
        }
        prevEntry = current$$1;
        current$$1 = current$$1.next;
        v11998 = current$$1 != null;
      }
      return result$$3;
    }
    function v70(key$$22, data$$31) {
      var current;
      var entry = new HashEntry(key$$22, data$$31);
      var val$$1 = this.hashFn(key$$22);
      var v11999 = this.size;
      val$$1 = val$$1 % v11999;
      var v12000 = this.table;
      current = v12000[val$$1];
      var v12002 = current != null;
      for (;v12002;) {
        var v18465 = current.key;
        var v12001 = this.equalsFn(key$$22, v18465);
        if (v12001) {
          return false;
        }
        current = current.next;
        v12002 = current != null;
      }
      var v12003 = this.table;
      entry.next = v12003[val$$1];
      var v12004 = this.table;
      v12004[val$$1] = entry;
      this.itemCount++;
      return true;
    }
    function HashTable$$1(size$$4, hashFn, equalsFn) {
      this.size = size$$4;
      this.hashFn = hashFn;
      this.equalsFn = equalsFn;
      this.itemCount = 0;
      var v27109 = new Array;
      this.table = v27109;
      var i$$9 = 0;
      var v18466 = this.size;
      var v12006 = i$$9 < v18466;
      for (;v12006;) {
        var v12005 = this.table;
        v12005[i$$9] = null;
        i$$9++;
        var v18467 = this.size;
        v12006 = i$$9 < v18467;
      }
      return;
    }
    var v12007 = HashTable$$1.prototype;
    v12007.add = v70;
    var v12008 = HashTable$$1.prototype;
    v12008.remove = v71;
    var v12009 = HashTable$$1.prototype;
    v12009.count = v72;
    var v12010 = HashTable$$1.prototype;
    v12010.lookup = v73;
    return HashTable$$1;
  }
  function v69() {
    function HashEntry$$1(key$$21, data$$30) {
      this.key = key$$21;
      this.data = data$$30;
      return;
    }
    return HashEntry$$1;
  }
  function v68() {
    function v67(key$$20) {
      var v12011 = this.primaryTable;
      var data$$29 = v12011.lookup(key$$20);
      var v12013 = data$$29 != undefined;
      if (v12013) {
        return data$$29;
      } else {
        var v12012 = this.secondaryTable;
        return v12012.lookup(key$$20);
      }
      return;
    }
    function v66() {
      var v18468 = this.primaryTable;
      var v12014 = v18468.count();
      var v18469 = this.secondaryTable;
      var v12015 = v18469.count();
      return v12014 + v12015;
    }
    function v65(fn$$5, context$$5) {
      var v18470 = this.primaryTable;
      var v12016 = v18470.some(fn$$5, context$$5);
      var v18472 = !v12016;
      if (v18472) {
        var v18471 = this.secondaryTable;
        v12016 = v18471.some(fn$$5, context$$5);
      }
      return v12016;
    }
    function v64(fn$$4, context$$4) {
      var v18473 = this.primaryTable;
      var v12017 = v18473.every(fn$$4, context$$4);
      if (v12017) {
        var v18474 = this.secondaryTable;
        v12017 = v18474.every(fn$$4, context$$4);
      }
      return v12017;
    }
    function v63(fn$$3, context$$3) {
      var v12018 = this.primaryTable;
      v12018.map(fn$$3, context$$3);
      var v12019 = this.secondaryTable;
      v12019.map(fn$$3, context$$3);
      return;
    }
    function v62(key$$19, data$$28) {
      var v12022 = this.insertPrimary;
      if (v12022) {
        var v12020 = this.primaryTable;
        return v12020.addOrUpdate(key$$19, data$$28);
      } else {
        var v12021 = this.secondaryTable;
        return v12021.addOrUpdate(key$$19, data$$28);
      }
      return;
    }
    function v61(key$$18, data$$27) {
      var v12025 = this.insertPrimary;
      if (v12025) {
        var v12023 = this.primaryTable;
        return v12023.add(key$$18, data$$27);
      } else {
        var v12024 = this.secondaryTable;
        return v12024.add(key$$18, data$$27);
      }
      return;
    }
    function v60() {
      var v18475 = this.primaryTable;
      var v12026 = v18475.getAllKeys();
      var v18476 = this.secondaryTable;
      var v12027 = v18476.getAllKeys();
      return v12026.concat(v12027);
    }
    function DualStringHashTable$$1(primaryTable, secondaryTable) {
      this.primaryTable = primaryTable;
      this.secondaryTable = secondaryTable;
      this.insertPrimary = true;
      return;
    }
    var v12028 = DualStringHashTable$$1.prototype;
    v12028.getAllKeys = v60;
    var v12029 = DualStringHashTable$$1.prototype;
    v12029.add = v61;
    var v12030 = DualStringHashTable$$1.prototype;
    v12030.addOrUpdate = v62;
    var v12031 = DualStringHashTable$$1.prototype;
    v12031.map = v63;
    var v12032 = DualStringHashTable$$1.prototype;
    v12032.every = v64;
    var v12033 = DualStringHashTable$$1.prototype;
    v12033.some = v65;
    var v12034 = DualStringHashTable$$1.prototype;
    v12034.count = v66;
    var v12035 = DualStringHashTable$$1.prototype;
    v12035.lookup = v67;
    return DualStringHashTable$$1;
  }
  function v59() {
    function v58(key$$17) {
      var v12036 = this.table;
      var data$$26 = v12036[key$$17];
      var v12037 = data$$26 != undefined;
      if (v12037) {
        return data$$26;
      } else {
        return null;
      }
      return;
    }
    function v57() {
      return this.itemCount;
    }
    function v56(fn$$2, context$$2) {
      var k$$4;
      var v12041 = this.table;
      for (k$$4 in v12041) {
        var v12038 = this.table;
        var data$$25 = v12038[k$$4];
        var v12040 = data$$25 != undefined;
        if (v12040) {
          var v22700 = this.table;
          var v18477 = v22700[k$$4];
          var v12039 = fn$$2(k$$4, v18477, context$$2);
          if (v12039) {
            return true;
          }
        }
      }
      return false;
    }
    function v55(fn$$1, context$$1) {
      var k$$3;
      var v12045 = this.table;
      for (k$$3 in v12045) {
        var v12042 = this.table;
        var data$$24 = v12042[k$$3];
        var v12044 = data$$24 != undefined;
        if (v12044) {
          var v24798 = this.table;
          var v22701 = v24798[k$$3];
          var v18478 = fn$$1(k$$3, v22701, context$$1);
          var v12043 = !v18478;
          if (v12043) {
            return false;
          }
        }
      }
      return true;
    }
    function v54(fn, context) {
      var k$$2;
      var v12049 = this.table;
      for (k$$2 in v12049) {
        var v12046 = this.table;
        var data$$23 = v12046[k$$2];
        var v12048 = data$$23 != undefined;
        if (v12048) {
          var v18479 = this.table;
          var v12047 = v18479[k$$2];
          fn(k$$2, v12047, context);
        }
      }
      return;
    }
    function v53(key$$16, data$$22) {
      var v22702 = this.table;
      var v18480 = v22702[key$$16];
      var v12051 = v18480 != undefined;
      if (v12051) {
        var v12050 = this.table;
        v12050[key$$16] = data$$22;
        return false;
      }
      var v12052 = this.table;
      v12052[key$$16] = data$$22;
      this.itemCount++;
      return true;
    }
    function v52(key$$15, data$$21) {
      var v22703 = this.table;
      var v18481 = v22703[key$$15];
      var v12053 = v18481 != undefined;
      if (v12053) {
        return false;
      }
      var v12054 = this.table;
      v12054[key$$15] = data$$21;
      this.itemCount++;
      return true;
    }
    function v51() {
      var result$$2 = [];
      var k$$1;
      var v12057 = this.table;
      for (k$$1 in v12057) {
        var v22704 = this.table;
        var v18482 = v22704[k$$1];
        var v12056 = v18482 != undefined;
        if (v12056) {
          var v12055 = result$$2.length;
          result$$2[v12055] = k$$1;
        }
      }
      return result$$2;
    }
    function StringHashTable$$1() {
      this.itemCount = 0;
      var v27110 = new BlockIntrinsics;
      this.table = v27110;
      return;
    }
    var v12058 = StringHashTable$$1.prototype;
    v12058.getAllKeys = v51;
    var v12059 = StringHashTable$$1.prototype;
    v12059.add = v52;
    var v12060 = StringHashTable$$1.prototype;
    v12060.addOrUpdate = v53;
    var v12061 = StringHashTable$$1.prototype;
    v12061.map = v54;
    var v12062 = StringHashTable$$1.prototype;
    v12062.every = v55;
    var v12063 = StringHashTable$$1.prototype;
    v12063.some = v56;
    var v12064 = StringHashTable$$1.prototype;
    v12064.count = v57;
    var v12065 = StringHashTable$$1.prototype;
    v12065.lookup = v58;
    return StringHashTable$$1;
  }
  function v50() {
    function BlockIntrinsics$$1() {
      this.prototype = undefined;
      this.toString = undefined;
      this.toLocaleString = undefined;
      this.valueOf = undefined;
      this.hasOwnProperty = undefined;
      this.propertyIsEnumerable = undefined;
      this.isPrototypeOf = undefined;
      this["constructor"] = undefined;
      return;
    }
    return BlockIntrinsics$$1;
  }
  function numberHashFn(key$$14) {
    var c2 = 668265261;
    var v12066 = key$$14 ^ 61;
    var v12067 = key$$14 >>> 16;
    key$$14 = v12066 ^ v12067;
    var v12068 = key$$14 << 3;
    key$$14 = key$$14 + v12068;
    var v12069 = key$$14 >>> 4;
    key$$14 = key$$14 ^ v12069;
    key$$14 = key$$14 * c2;
    var v12070 = key$$14 >>> 15;
    key$$14 = key$$14 ^ v12070;
    return key$$14;
  }
  function combineHashes(key1, key2) {
    var v18483 = key1 >> 5;
    var v12071 = v18483 + key1;
    return key2 ^ v12071;
  }
  var BlockIntrinsics = v50();
  TypeScript$$3.BlockIntrinsics = BlockIntrinsics;
  var StringHashTable = v59();
  TypeScript$$3.StringHashTable = StringHashTable;
  var DualStringHashTable = v68();
  TypeScript$$3.DualStringHashTable = DualStringHashTable;
  TypeScript$$3.numberHashFn = numberHashFn;
  TypeScript$$3.combineHashes = combineHashes;
  var HashEntry = v69();
  TypeScript$$3.HashEntry = HashEntry;
  var HashTable = v74();
  TypeScript$$3.HashTable = HashTable;
  var SimpleHashTable = v77();
  TypeScript$$3.SimpleHashTable = SimpleHashTable;
  return;
}
function v49(TypeScript$$2) {
  var v12072 = TypeScript$$2.NodeType;
  var v18484 = !v12072;
  if (v18484) {
    v12072 = TypeScript$$2.NodeType = {};
  }
  var NodeType$$inline_0 = v12072;
  NodeType$$inline_0._map = [];
  var v12073 = NodeType$$inline_0._map;
  v12073[0] = "None";
  NodeType$$inline_0.None = 0;
  var v12074 = NodeType$$inline_0._map;
  v12074[1] = "Empty";
  NodeType$$inline_0.Empty = 1;
  var v12075 = NodeType$$inline_0._map;
  v12075[2] = "EmptyExpr";
  NodeType$$inline_0.EmptyExpr = 2;
  var v12076 = NodeType$$inline_0._map;
  v12076[3] = "True";
  NodeType$$inline_0.True = 3;
  var v12077 = NodeType$$inline_0._map;
  v12077[4] = "False";
  NodeType$$inline_0.False = 4;
  var v12078 = NodeType$$inline_0._map;
  v12078[5] = "This";
  NodeType$$inline_0.This = 5;
  var v12079 = NodeType$$inline_0._map;
  v12079[6] = "Super";
  NodeType$$inline_0.Super = 6;
  var v12080 = NodeType$$inline_0._map;
  v12080[7] = "QString";
  NodeType$$inline_0.QString = 7;
  var v12081 = NodeType$$inline_0._map;
  v12081[8] = "Regex";
  NodeType$$inline_0.Regex = 8;
  var v12082 = NodeType$$inline_0._map;
  v12082[9] = "Null";
  NodeType$$inline_0.Null = 9;
  var v12083 = NodeType$$inline_0._map;
  v12083[10] = "ArrayLit";
  NodeType$$inline_0.ArrayLit = 10;
  var v12084 = NodeType$$inline_0._map;
  v12084[11] = "ObjectLit";
  NodeType$$inline_0.ObjectLit = 11;
  var v12085 = NodeType$$inline_0._map;
  v12085[12] = "Void";
  NodeType$$inline_0.Void = 12;
  var v12086 = NodeType$$inline_0._map;
  v12086[13] = "Comma";
  NodeType$$inline_0.Comma = 13;
  var v12087 = NodeType$$inline_0._map;
  v12087[14] = "Pos";
  NodeType$$inline_0.Pos = 14;
  var v12088 = NodeType$$inline_0._map;
  v12088[15] = "Neg";
  NodeType$$inline_0.Neg = 15;
  var v12089 = NodeType$$inline_0._map;
  v12089[16] = "Delete";
  NodeType$$inline_0.Delete = 16;
  var v12090 = NodeType$$inline_0._map;
  v12090[17] = "Await";
  NodeType$$inline_0.Await = 17;
  var v12091 = NodeType$$inline_0._map;
  v12091[18] = "In";
  NodeType$$inline_0.In = 18;
  var v12092 = NodeType$$inline_0._map;
  v12092[19] = "Dot";
  NodeType$$inline_0.Dot = 19;
  var v12093 = NodeType$$inline_0._map;
  v12093[20] = "From";
  NodeType$$inline_0.From = 20;
  var v12094 = NodeType$$inline_0._map;
  v12094[21] = "Is";
  NodeType$$inline_0.Is = 21;
  var v12095 = NodeType$$inline_0._map;
  v12095[22] = "InstOf";
  NodeType$$inline_0.InstOf = 22;
  var v12096 = NodeType$$inline_0._map;
  v12096[23] = "Typeof";
  NodeType$$inline_0.Typeof = 23;
  var v12097 = NodeType$$inline_0._map;
  v12097[24] = "NumberLit";
  NodeType$$inline_0.NumberLit = 24;
  var v12098 = NodeType$$inline_0._map;
  v12098[25] = "Name";
  NodeType$$inline_0.Name = 25;
  var v12099 = NodeType$$inline_0._map;
  v12099[26] = "TypeRef";
  NodeType$$inline_0.TypeRef = 26;
  var v12100 = NodeType$$inline_0._map;
  v12100[27] = "Index";
  NodeType$$inline_0.Index = 27;
  var v12101 = NodeType$$inline_0._map;
  v12101[28] = "Call";
  NodeType$$inline_0.Call = 28;
  var v12102 = NodeType$$inline_0._map;
  v12102[29] = "New";
  NodeType$$inline_0.New = 29;
  var v12103 = NodeType$$inline_0._map;
  v12103[30] = "Asg";
  NodeType$$inline_0.Asg = 30;
  var v12104 = NodeType$$inline_0._map;
  v12104[31] = "AsgAdd";
  NodeType$$inline_0.AsgAdd = 31;
  var v12105 = NodeType$$inline_0._map;
  v12105[32] = "AsgSub";
  NodeType$$inline_0.AsgSub = 32;
  var v12106 = NodeType$$inline_0._map;
  v12106[33] = "AsgDiv";
  NodeType$$inline_0.AsgDiv = 33;
  var v12107 = NodeType$$inline_0._map;
  v12107[34] = "AsgMul";
  NodeType$$inline_0.AsgMul = 34;
  var v12108 = NodeType$$inline_0._map;
  v12108[35] = "AsgMod";
  NodeType$$inline_0.AsgMod = 35;
  var v12109 = NodeType$$inline_0._map;
  v12109[36] = "AsgAnd";
  NodeType$$inline_0.AsgAnd = 36;
  var v12110 = NodeType$$inline_0._map;
  v12110[37] = "AsgXor";
  NodeType$$inline_0.AsgXor = 37;
  var v12111 = NodeType$$inline_0._map;
  v12111[38] = "AsgOr";
  NodeType$$inline_0.AsgOr = 38;
  var v12112 = NodeType$$inline_0._map;
  v12112[39] = "AsgLsh";
  NodeType$$inline_0.AsgLsh = 39;
  var v12113 = NodeType$$inline_0._map;
  v12113[40] = "AsgRsh";
  NodeType$$inline_0.AsgRsh = 40;
  var v12114 = NodeType$$inline_0._map;
  v12114[41] = "AsgRs2";
  NodeType$$inline_0.AsgRs2 = 41;
  var v12115 = NodeType$$inline_0._map;
  v12115[42] = "ConditionalExpression";
  NodeType$$inline_0.ConditionalExpression = 42;
  var v12116 = NodeType$$inline_0._map;
  v12116[43] = "LogOr";
  NodeType$$inline_0.LogOr = 43;
  var v12117 = NodeType$$inline_0._map;
  v12117[44] = "LogAnd";
  NodeType$$inline_0.LogAnd = 44;
  var v12118 = NodeType$$inline_0._map;
  v12118[45] = "Or";
  NodeType$$inline_0.Or = 45;
  var v12119 = NodeType$$inline_0._map;
  v12119[46] = "Xor";
  NodeType$$inline_0.Xor = 46;
  var v12120 = NodeType$$inline_0._map;
  v12120[47] = "And";
  NodeType$$inline_0.And = 47;
  var v12121 = NodeType$$inline_0._map;
  v12121[48] = "Eq";
  NodeType$$inline_0.Eq = 48;
  var v12122 = NodeType$$inline_0._map;
  v12122[49] = "Ne";
  NodeType$$inline_0.Ne = 49;
  var v12123 = NodeType$$inline_0._map;
  v12123[50] = "Eqv";
  NodeType$$inline_0.Eqv = 50;
  var v12124 = NodeType$$inline_0._map;
  v12124[51] = "NEqv";
  NodeType$$inline_0.NEqv = 51;
  var v12125 = NodeType$$inline_0._map;
  v12125[52] = "Lt";
  NodeType$$inline_0.Lt = 52;
  var v12126 = NodeType$$inline_0._map;
  v12126[53] = "Le";
  NodeType$$inline_0.Le = 53;
  var v12127 = NodeType$$inline_0._map;
  v12127[54] = "Gt";
  NodeType$$inline_0.Gt = 54;
  var v12128 = NodeType$$inline_0._map;
  v12128[55] = "Ge";
  NodeType$$inline_0.Ge = 55;
  var v12129 = NodeType$$inline_0._map;
  v12129[56] = "Add";
  NodeType$$inline_0.Add = 56;
  var v12130 = NodeType$$inline_0._map;
  v12130[57] = "Sub";
  NodeType$$inline_0.Sub = 57;
  var v12131 = NodeType$$inline_0._map;
  v12131[58] = "Mul";
  NodeType$$inline_0.Mul = 58;
  var v12132 = NodeType$$inline_0._map;
  v12132[59] = "Div";
  NodeType$$inline_0.Div = 59;
  var v12133 = NodeType$$inline_0._map;
  v12133[60] = "Mod";
  NodeType$$inline_0.Mod = 60;
  var v12134 = NodeType$$inline_0._map;
  v12134[61] = "Lsh";
  NodeType$$inline_0.Lsh = 61;
  var v12135 = NodeType$$inline_0._map;
  v12135[62] = "Rsh";
  NodeType$$inline_0.Rsh = 62;
  var v12136 = NodeType$$inline_0._map;
  v12136[63] = "Rs2";
  NodeType$$inline_0.Rs2 = 63;
  var v12137 = NodeType$$inline_0._map;
  v12137[64] = "Not";
  NodeType$$inline_0.Not = 64;
  var v12138 = NodeType$$inline_0._map;
  v12138[65] = "LogNot";
  NodeType$$inline_0.LogNot = 65;
  var v12139 = NodeType$$inline_0._map;
  v12139[66] = "IncPre";
  NodeType$$inline_0.IncPre = 66;
  var v12140 = NodeType$$inline_0._map;
  v12140[67] = "DecPre";
  NodeType$$inline_0.DecPre = 67;
  var v12141 = NodeType$$inline_0._map;
  v12141[68] = "IncPost";
  NodeType$$inline_0.IncPost = 68;
  var v12142 = NodeType$$inline_0._map;
  v12142[69] = "DecPost";
  NodeType$$inline_0.DecPost = 69;
  var v12143 = NodeType$$inline_0._map;
  v12143[70] = "TypeAssertion";
  NodeType$$inline_0.TypeAssertion = 70;
  var v12144 = NodeType$$inline_0._map;
  v12144[71] = "FuncDecl";
  NodeType$$inline_0.FuncDecl = 71;
  var v12145 = NodeType$$inline_0._map;
  v12145[72] = "Member";
  NodeType$$inline_0.Member = 72;
  var v12146 = NodeType$$inline_0._map;
  v12146[73] = "VarDecl";
  NodeType$$inline_0.VarDecl = 73;
  var v12147 = NodeType$$inline_0._map;
  v12147[74] = "ArgDecl";
  NodeType$$inline_0.ArgDecl = 74;
  var v12148 = NodeType$$inline_0._map;
  v12148[75] = "Return";
  NodeType$$inline_0.Return = 75;
  var v12149 = NodeType$$inline_0._map;
  v12149[76] = "Break";
  NodeType$$inline_0.Break = 76;
  var v12150 = NodeType$$inline_0._map;
  v12150[77] = "Continue";
  NodeType$$inline_0.Continue = 77;
  var v12151 = NodeType$$inline_0._map;
  v12151[78] = "Throw";
  NodeType$$inline_0.Throw = 78;
  var v12152 = NodeType$$inline_0._map;
  v12152[79] = "For";
  NodeType$$inline_0.For = 79;
  var v12153 = NodeType$$inline_0._map;
  v12153[80] = "ForIn";
  NodeType$$inline_0.ForIn = 80;
  var v12154 = NodeType$$inline_0._map;
  v12154[81] = "If";
  NodeType$$inline_0.If = 81;
  var v12155 = NodeType$$inline_0._map;
  v12155[82] = "While";
  NodeType$$inline_0.While = 82;
  var v12156 = NodeType$$inline_0._map;
  v12156[83] = "DoWhile";
  NodeType$$inline_0.DoWhile = 83;
  var v12157 = NodeType$$inline_0._map;
  v12157[84] = "Block";
  NodeType$$inline_0.Block = 84;
  var v12158 = NodeType$$inline_0._map;
  v12158[85] = "Case";
  NodeType$$inline_0.Case = 85;
  var v12159 = NodeType$$inline_0._map;
  v12159[86] = "Switch";
  NodeType$$inline_0.Switch = 86;
  var v12160 = NodeType$$inline_0._map;
  v12160[87] = "Try";
  NodeType$$inline_0.Try = 87;
  var v12161 = NodeType$$inline_0._map;
  v12161[88] = "TryCatch";
  NodeType$$inline_0.TryCatch = 88;
  var v12162 = NodeType$$inline_0._map;
  v12162[89] = "TryFinally";
  NodeType$$inline_0.TryFinally = 89;
  var v12163 = NodeType$$inline_0._map;
  v12163[90] = "Finally";
  NodeType$$inline_0.Finally = 90;
  var v12164 = NodeType$$inline_0._map;
  v12164[91] = "Catch";
  NodeType$$inline_0.Catch = 91;
  var v12165 = NodeType$$inline_0._map;
  v12165[92] = "List";
  NodeType$$inline_0.List = 92;
  var v12166 = NodeType$$inline_0._map;
  v12166[93] = "Script";
  NodeType$$inline_0.Script = 93;
  var v12167 = NodeType$$inline_0._map;
  v12167[94] = "ClassDeclaration";
  NodeType$$inline_0.ClassDeclaration = 94;
  var v12168 = NodeType$$inline_0._map;
  v12168[95] = "InterfaceDeclaration";
  NodeType$$inline_0.InterfaceDeclaration = 95;
  var v12169 = NodeType$$inline_0._map;
  v12169[96] = "ModuleDeclaration";
  NodeType$$inline_0.ModuleDeclaration = 96;
  var v12170 = NodeType$$inline_0._map;
  v12170[97] = "ImportDeclaration";
  NodeType$$inline_0.ImportDeclaration = 97;
  var v12171 = NodeType$$inline_0._map;
  v12171[98] = "With";
  NodeType$$inline_0.With = 98;
  var v12172 = NodeType$$inline_0._map;
  v12172[99] = "Label";
  NodeType$$inline_0.Label = 99;
  var v12173 = NodeType$$inline_0._map;
  v12173[100] = "LabeledStatement";
  NodeType$$inline_0.LabeledStatement = 100;
  var v12174 = NodeType$$inline_0._map;
  v12174[101] = "EBStart";
  NodeType$$inline_0.EBStart = 101;
  var v12175 = NodeType$$inline_0._map;
  v12175[102] = "GotoEB";
  NodeType$$inline_0.GotoEB = 102;
  var v12176 = NodeType$$inline_0._map;
  v12176[103] = "EndCode";
  NodeType$$inline_0.EndCode = 103;
  var v12177 = NodeType$$inline_0._map;
  v12177[104] = "Error";
  NodeType$$inline_0.Error = 104;
  var v12178 = NodeType$$inline_0._map;
  v12178[105] = "Comment";
  NodeType$$inline_0.Comment = 105;
  var v12179 = NodeType$$inline_0._map;
  v12179[106] = "Debugger";
  NodeType$$inline_0.Debugger = 106;
  NodeType$$inline_0.GeneralNode = NodeType$$inline_0.FuncDecl;
  NodeType$$inline_0.LastAsg = NodeType$$inline_0.AsgRs2;
  var NodeType = TypeScript$$2.NodeType;
  return;
}
function v48(TypeScript$$1) {
  function v47(ModuleGenTarget$$1) {
    ModuleGenTarget$$1._map = [];
    ModuleGenTarget$$1.Synchronous = 0;
    ModuleGenTarget$$1.Asynchronous = 1;
    ModuleGenTarget$$1.Local = 1 << 1;
    return;
  }
  function v46(CodeGenTarget$$1) {
    CodeGenTarget$$1._map = [];
    CodeGenTarget$$1.ES3 = 0;
    CodeGenTarget$$1.ES5 = 1;
    return;
  }
  function v45(TypeRelationshipFlags$$1) {
    TypeRelationshipFlags$$1._map = [];
    TypeRelationshipFlags$$1.SuccessfulComparison = 0;
    TypeRelationshipFlags$$1.SourceIsNullTargetIsVoidOrUndefined = 1;
    TypeRelationshipFlags$$1.RequiredPropertyIsMissing = 1 << 1;
    TypeRelationshipFlags$$1.IncompatibleSignatures = 1 << 2;
    TypeRelationshipFlags$$1.SourceSignatureHasTooManyParameters = 3;
    TypeRelationshipFlags$$1.IncompatibleReturnTypes = 1 << 4;
    TypeRelationshipFlags$$1.IncompatiblePropertyTypes = 1 << 5;
    TypeRelationshipFlags$$1.IncompatibleParameterTypes = 1 << 6;
    return;
  }
  function v44(TypeFlags$$1) {
    TypeFlags$$1._map = [];
    TypeFlags$$1.None = 0;
    TypeFlags$$1.HasImplementation = 1;
    TypeFlags$$1.HasSelfReference = 1 << 1;
    TypeFlags$$1.MergeResult = 1 << 2;
    TypeFlags$$1.IsEnum = 1 << 3;
    TypeFlags$$1.BuildingName = 1 << 4;
    TypeFlags$$1.HasBaseType = 1 << 5;
    TypeFlags$$1.HasBaseTypeOfObject = 1 << 6;
    TypeFlags$$1.IsClass = 1 << 7;
    return;
  }
  function v43(SignatureFlags$$1) {
    SignatureFlags$$1._map = [];
    SignatureFlags$$1.None = 0;
    SignatureFlags$$1.IsIndexer = 1;
    SignatureFlags$$1.IsStringIndexer = 1 << 1;
    SignatureFlags$$1.IsNumberIndexer = 1 << 2;
    return;
  }
  function v42(FncFlags$$1) {
    FncFlags$$1._map = [];
    FncFlags$$1.None = 0;
    FncFlags$$1.Exported = 1;
    FncFlags$$1.Private = 1 << 1;
    FncFlags$$1.Public = 1 << 2;
    FncFlags$$1.Ambient = 1 << 3;
    FncFlags$$1.Static = 1 << 4;
    FncFlags$$1.LocalStatic = 1 << 5;
    FncFlags$$1.GetAccessor = 1 << 6;
    FncFlags$$1.SetAccessor = 1 << 7;
    FncFlags$$1.Definition = 1 << 8;
    FncFlags$$1.Signature = 1 << 9;
    FncFlags$$1.Method = 1 << 10;
    FncFlags$$1.HasReturnExpression = 1 << 11;
    FncFlags$$1.CallMember = 1 << 12;
    FncFlags$$1.ConstructMember = 1 << 13;
    FncFlags$$1.HasSelfReference = 1 << 14;
    FncFlags$$1.IsFatArrowFunction = 1 << 15;
    FncFlags$$1.IndexerMember = 1 << 16;
    FncFlags$$1.IsFunctionExpression = 1 << 17;
    FncFlags$$1.ClassMethod = 1 << 18;
    FncFlags$$1.ClassPropertyMethodExported = 1 << 19;
    FncFlags$$1.HasSuperReferenceInFatArrowFunction = 1 << 20;
    FncFlags$$1.IsPropertyBound = 1 << 21;
    return;
  }
  function v41(VarFlags$$1) {
    VarFlags$$1._map = [];
    VarFlags$$1.None = 0;
    VarFlags$$1.Exported = 1;
    VarFlags$$1.Private = 1 << 1;
    VarFlags$$1.Public = 1 << 2;
    VarFlags$$1.Ambient = 1 << 3;
    VarFlags$$1.Static = 1 << 4;
    VarFlags$$1.LocalStatic = 1 << 5;
    VarFlags$$1.GetAccessor = 1 << 6;
    VarFlags$$1.SetAccessor = 1 << 7;
    VarFlags$$1.AutoInit = 1 << 8;
    VarFlags$$1.Property = 1 << 9;
    VarFlags$$1.Readonly = 1 << 10;
    VarFlags$$1.Class = 1 << 11;
    VarFlags$$1.ClassProperty = 1 << 12;
    VarFlags$$1.ClassBodyProperty = 1 << 13;
    VarFlags$$1.ClassConstructorProperty = 1 << 14;
    VarFlags$$1.ClassSuperMustBeFirstCallInConstructor = 1 << 15;
    VarFlags$$1.Constant = 1 << 16;
    VarFlags$$1.MustCaptureThis = 1 << 17;
    return;
  }
  function v40(SymbolFlags$$1) {
    SymbolFlags$$1._map = [];
    SymbolFlags$$1.None = 0;
    SymbolFlags$$1.Exported = 1;
    SymbolFlags$$1.Private = 1 << 1;
    SymbolFlags$$1.Public = 1 << 2;
    SymbolFlags$$1.Ambient = 1 << 3;
    SymbolFlags$$1.Static = 1 << 4;
    SymbolFlags$$1.LocalStatic = 1 << 5;
    SymbolFlags$$1.GetAccessor = 1 << 6;
    SymbolFlags$$1.SetAccessor = 1 << 7;
    SymbolFlags$$1.Property = 1 << 8;
    SymbolFlags$$1.Readonly = 1 << 9;
    SymbolFlags$$1.ModuleMember = 1 << 10;
    SymbolFlags$$1.InterfaceMember = 1 << 11;
    SymbolFlags$$1.ClassMember = 1 << 12;
    SymbolFlags$$1.BuiltIn = 1 << 13;
    SymbolFlags$$1.TypeSetDuringScopeAssignment = 1 << 14;
    SymbolFlags$$1.Constant = 1 << 15;
    SymbolFlags$$1.Optional = 1 << 16;
    SymbolFlags$$1.RecursivelyReferenced = 1 << 17;
    SymbolFlags$$1.Bound = 1 << 18;
    SymbolFlags$$1.CompilerGenerated = 1 << 19;
    return;
  }
  function v39(ModuleFlags$$1) {
    ModuleFlags$$1._map = [];
    ModuleFlags$$1.None = 0;
    ModuleFlags$$1.Exported = 1;
    ModuleFlags$$1.Private = 1 << 1;
    ModuleFlags$$1.Public = 1 << 2;
    ModuleFlags$$1.Ambient = 1 << 3;
    ModuleFlags$$1.Static = 1 << 4;
    ModuleFlags$$1.LocalStatic = 1 << 5;
    ModuleFlags$$1.GetAccessor = 1 << 6;
    ModuleFlags$$1.SetAccessor = 1 << 7;
    ModuleFlags$$1.IsEnum = 1 << 8;
    ModuleFlags$$1.ShouldEmitModuleDecl = 1 << 9;
    ModuleFlags$$1.IsWholeFile = 1 << 10;
    ModuleFlags$$1.IsDynamic = 1 << 11;
    ModuleFlags$$1.MustCaptureThis = 1 << 12;
    return;
  }
  function v38(DeclFlags$$1) {
    DeclFlags$$1._map = [];
    DeclFlags$$1.None = 0;
    DeclFlags$$1.Exported = 1;
    DeclFlags$$1.Private = 1 << 1;
    DeclFlags$$1.Public = 1 << 2;
    DeclFlags$$1.Ambient = 1 << 3;
    DeclFlags$$1.Static = 1 << 4;
    DeclFlags$$1.LocalStatic = 1 << 5;
    DeclFlags$$1.GetAccessor = 1 << 6;
    DeclFlags$$1.SetAccessor = 1 << 7;
    return;
  }
  function v37(ASTFlags$$1) {
    ASTFlags$$1._map = [];
    ASTFlags$$1.None = 0;
    ASTFlags$$1.ExplicitSemicolon = 1;
    ASTFlags$$1.AutomaticSemicolon = 1 << 1;
    ASTFlags$$1.Writeable = 1 << 2;
    ASTFlags$$1.Error = 1 << 3;
    ASTFlags$$1.DotLHSPartial = 1 << 4;
    ASTFlags$$1.DotLHS = 1 << 5;
    ASTFlags$$1.IsStatement = 1 << 6;
    ASTFlags$$1.StrictMode = 1 << 7;
    ASTFlags$$1.PossibleOptionalParameter = 1 << 8;
    ASTFlags$$1.ClassBaseConstructorCall = 1 << 9;
    ASTFlags$$1.OptionalName = 1 << 10;
    ASTFlags$$1.SkipNextRParen = 1 << 11;
    return;
  }
  function v36(Modifiers$$1) {
    Modifiers$$1._map = [];
    Modifiers$$1.None = 0;
    Modifiers$$1.Private = 1;
    Modifiers$$1.Public = 1 << 1;
    Modifiers$$1.Readonly = 1 << 2;
    Modifiers$$1.Ambient = 1 << 3;
    Modifiers$$1.Exported = 1 << 4;
    Modifiers$$1.Getter = 1 << 5;
    Modifiers$$1.Setter = 1 << 6;
    Modifiers$$1.Static = 1 << 7;
    return;
  }
  function v35(AllowedElements$$1) {
    AllowedElements$$1._map = [];
    AllowedElements$$1.None = 0;
    AllowedElements$$1.ModuleDeclarations = 1 << 2;
    AllowedElements$$1.ClassDeclarations = 1 << 3;
    AllowedElements$$1.InterfaceDeclarations = 1 << 4;
    AllowedElements$$1.AmbientDeclarations = 1 << 10;
    AllowedElements$$1.Properties = 1 << 11;
    var v22705 = AllowedElements$$1.ModuleDeclarations;
    var v22706 = AllowedElements$$1.ClassDeclarations;
    var v18485 = v22705 | v22706;
    var v18486 = AllowedElements$$1.InterfaceDeclarations;
    var v12180 = v18485 | v18486;
    var v12181 = AllowedElements$$1.AmbientDeclarations;
    AllowedElements$$1.Global = v12180 | v12181;
    var v12182 = AllowedElements$$1.Global;
    var v12183 = AllowedElements$$1.Properties;
    AllowedElements$$1.QuickParse = v12182 | v12183;
    return;
  }
  function v34(ErrorRecoverySet$$1) {
    ErrorRecoverySet$$1._map = [];
    ErrorRecoverySet$$1.None = 0;
    ErrorRecoverySet$$1.Comma = 1;
    ErrorRecoverySet$$1.SColon = 1 << 1;
    ErrorRecoverySet$$1.Asg = 1 << 2;
    ErrorRecoverySet$$1.BinOp = 1 << 3;
    ErrorRecoverySet$$1.RBrack = 1 << 4;
    ErrorRecoverySet$$1.RCurly = 1 << 5;
    ErrorRecoverySet$$1.RParen = 1 << 6;
    ErrorRecoverySet$$1.Dot = 1 << 7;
    ErrorRecoverySet$$1.Colon = 1 << 8;
    ErrorRecoverySet$$1.PrimType = 1 << 9;
    ErrorRecoverySet$$1.AddOp = 1 << 10;
    ErrorRecoverySet$$1.LCurly = 1 << 11;
    ErrorRecoverySet$$1.PreOp = 1 << 12;
    ErrorRecoverySet$$1.RegExp = 1 << 13;
    ErrorRecoverySet$$1.LParen = 1 << 14;
    ErrorRecoverySet$$1.LBrack = 1 << 15;
    ErrorRecoverySet$$1.Scope = 1 << 16;
    ErrorRecoverySet$$1.In = 1 << 17;
    ErrorRecoverySet$$1.SCase = 1 << 18;
    ErrorRecoverySet$$1.Else = 1 << 19;
    ErrorRecoverySet$$1.Catch = 1 << 20;
    ErrorRecoverySet$$1.Var = 1 << 21;
    ErrorRecoverySet$$1.Stmt = 1 << 22;
    ErrorRecoverySet$$1.While = 1 << 23;
    ErrorRecoverySet$$1.ID = 1 << 24;
    ErrorRecoverySet$$1.Prefix = 1 << 25;
    ErrorRecoverySet$$1.Literal = 1 << 26;
    ErrorRecoverySet$$1.RLit = 1 << 27;
    ErrorRecoverySet$$1.Func = 1 << 28;
    ErrorRecoverySet$$1.EOF = 1 << 29;
    ErrorRecoverySet$$1.TypeScriptS = 1 << 30;
    var v26431 = ErrorRecoverySet$$1.SColon;
    var v26432 = ErrorRecoverySet$$1.AddOp;
    var v26420 = v26431 | v26432;
    var v26421 = ErrorRecoverySet$$1.LCurly;
    var v26397 = v26420 | v26421;
    var v26398 = ErrorRecoverySet$$1.PreOp;
    var v26351 = v26397 | v26398;
    var v26352 = ErrorRecoverySet$$1.RegExp;
    var v26261 = v26351 | v26352;
    var v26262 = ErrorRecoverySet$$1.LParen;
    var v26081 = v26261 | v26262;
    var v26082 = ErrorRecoverySet$$1.LBrack;
    var v25687 = v26081 | v26082;
    var v25688 = ErrorRecoverySet$$1.ID;
    var v24799 = v25687 | v25688;
    var v24800 = ErrorRecoverySet$$1.Prefix;
    var v22707 = v24799 | v24800;
    var v22708 = ErrorRecoverySet$$1.RLit;
    var v18487 = v22707 | v22708;
    var v18488 = ErrorRecoverySet$$1.Func;
    var v12184 = v18487 | v18488;
    var v12185 = ErrorRecoverySet$$1.Literal;
    ErrorRecoverySet$$1.ExprStart = v12184 | v12185;
    var v25689 = ErrorRecoverySet$$1.ExprStart;
    var v25690 = ErrorRecoverySet$$1.SColon;
    var v24801 = v25689 | v25690;
    var v24802 = ErrorRecoverySet$$1.Var;
    var v22709 = v24801 | v24802;
    var v22710 = ErrorRecoverySet$$1.Stmt;
    var v18489 = v22709 | v22710;
    var v18490 = ErrorRecoverySet$$1.While;
    var v12186 = v18489 | v18490;
    var v12187 = ErrorRecoverySet$$1.TypeScriptS;
    ErrorRecoverySet$$1.StmtStart = v12186 | v12187;
    var v18491 = ErrorRecoverySet$$1.Dot;
    var v18492 = ErrorRecoverySet$$1.LParen;
    var v12188 = v18491 | v18492;
    var v12189 = ErrorRecoverySet$$1.LBrack;
    ErrorRecoverySet$$1.Postfix = v12188 | v12189;
    return;
  }
  function hasFlag(val, flag$$1) {
    var v12190 = val & flag$$1;
    return v12190 != 0;
  }
  function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags) {
    return fncOrVarOrSymbolOrModuleFlags;
  }
  function flagsToString(e$$7, flags$$1) {
    var builder = "";
    var i$$8 = 1;
    var v18493 = 1 << 31;
    var v12194 = i$$8 < v18493;
    for (;v12194;) {
      var v18494 = flags$$1 & i$$8;
      var v12193 = v18494 != 0;
      if (v12193) {
        var k;
        for (k in e$$7) {
          var v18495 = e$$7[k];
          var v12192 = v18495 == i$$8;
          if (v12192) {
            var v18496 = builder.length;
            var v12191 = v18496 > 0;
            if (v12191) {
              builder = builder + "|";
            }
            builder = builder + k;
            break;
          }
        }
      }
      i$$8 = i$$8 << 1;
      var v18497 = 1 << 31;
      v12194 = i$$8 < v18497;
    }
    return builder;
  }
  TypeScript$$1.hasFlag = hasFlag;
  var v18498 = TypeScript$$1.ErrorRecoverySet;
  var v22711 = !v18498;
  if (v22711) {
    v18498 = TypeScript$$1.ErrorRecoverySet = {};
  }
  var v12195 = v18498;
  v34(v12195);
  var ErrorRecoverySet = TypeScript$$1.ErrorRecoverySet;
  var v18499 = TypeScript$$1.AllowedElements;
  var v22712 = !v18499;
  if (v22712) {
    v18499 = TypeScript$$1.AllowedElements = {};
  }
  var v12196 = v18499;
  v35(v12196);
  var AllowedElements = TypeScript$$1.AllowedElements;
  var v18500 = TypeScript$$1.Modifiers;
  var v22713 = !v18500;
  if (v22713) {
    v18500 = TypeScript$$1.Modifiers = {};
  }
  var v12197 = v18500;
  v36(v12197);
  var Modifiers = TypeScript$$1.Modifiers;
  var v18501 = TypeScript$$1.ASTFlags;
  var v22714 = !v18501;
  if (v22714) {
    v18501 = TypeScript$$1.ASTFlags = {};
  }
  var v12198 = v18501;
  v37(v12198);
  var ASTFlags = TypeScript$$1.ASTFlags;
  var v18502 = TypeScript$$1.DeclFlags;
  var v22715 = !v18502;
  if (v22715) {
    v18502 = TypeScript$$1.DeclFlags = {};
  }
  var v12199 = v18502;
  v38(v12199);
  var DeclFlags = TypeScript$$1.DeclFlags;
  var v18503 = TypeScript$$1.ModuleFlags;
  var v22716 = !v18503;
  if (v22716) {
    v18503 = TypeScript$$1.ModuleFlags = {};
  }
  var v12200 = v18503;
  v39(v12200);
  var ModuleFlags = TypeScript$$1.ModuleFlags;
  var v18504 = TypeScript$$1.SymbolFlags;
  var v22717 = !v18504;
  if (v22717) {
    v18504 = TypeScript$$1.SymbolFlags = {};
  }
  var v12201 = v18504;
  v40(v12201);
  var SymbolFlags = TypeScript$$1.SymbolFlags;
  var v18505 = TypeScript$$1.VarFlags;
  var v22718 = !v18505;
  if (v22718) {
    v18505 = TypeScript$$1.VarFlags = {};
  }
  var v12202 = v18505;
  v41(v12202);
  var VarFlags = TypeScript$$1.VarFlags;
  var v18506 = TypeScript$$1.FncFlags;
  var v22719 = !v18506;
  if (v22719) {
    v18506 = TypeScript$$1.FncFlags = {};
  }
  var v12203 = v18506;
  v42(v12203);
  var FncFlags = TypeScript$$1.FncFlags;
  var v18507 = TypeScript$$1.SignatureFlags;
  var v22720 = !v18507;
  if (v22720) {
    v18507 = TypeScript$$1.SignatureFlags = {};
  }
  var v12204 = v18507;
  v43(v12204);
  var SignatureFlags = TypeScript$$1.SignatureFlags;
  TypeScript$$1.ToDeclFlags = ToDeclFlags;
  var v18508 = TypeScript$$1.TypeFlags;
  var v22721 = !v18508;
  if (v22721) {
    v18508 = TypeScript$$1.TypeFlags = {};
  }
  var v12205 = v18508;
  v44(v12205);
  var TypeFlags = TypeScript$$1.TypeFlags;
  var v18509 = TypeScript$$1.TypeRelationshipFlags;
  var v22722 = !v18509;
  if (v22722) {
    v18509 = TypeScript$$1.TypeRelationshipFlags = {};
  }
  var v12206 = v18509;
  v45(v12206);
  var TypeRelationshipFlags = TypeScript$$1.TypeRelationshipFlags;
  var v18510 = TypeScript$$1.CodeGenTarget;
  var v22723 = !v18510;
  if (v22723) {
    v18510 = TypeScript$$1.CodeGenTarget = {};
  }
  var v12207 = v18510;
  v46(v12207);
  var CodeGenTarget = TypeScript$$1.CodeGenTarget;
  var v18511 = TypeScript$$1.ModuleGenTarget;
  var v22724 = !v18511;
  if (v22724) {
    v18511 = TypeScript$$1.ModuleGenTarget = {};
  }
  var v12208 = v18511;
  v47(v12208);
  var ModuleGenTarget = TypeScript$$1.ModuleGenTarget;
  TypeScript$$1.codeGenTarget = CodeGenTarget.ES3;
  TypeScript$$1.moduleGenTarget = ModuleGenTarget.Synchronous;
  TypeScript$$1.optimizeModuleCodeGen = true;
  TypeScript$$1.flagsToString = flagsToString;
  return;
}
function v33(s$$8) {
  var i$$7 = 0;
  var v18512 = s$$8.length;
  var v12210 = i$$7 < v18512;
  for (;v12210;) {
    var c$$1 = s$$8.charCodeAt(i$$7);
    var v18513 = this.cumulative_checksum;
    var v12209 = v18513 << 1;
    this.cumulative_checksum = v12209 ^ c$$1;
    i$$7++;
    var v18514 = s$$8.length;
    v12210 = i$$7 < v18514;
  }
  return;
}
function v32() {
  var v18515 = this.checksum;
  var v18516 = this.cumulative_checksum;
  var v12211 = v18515 != v18516;
  if (v12211) {
    throw new Error("Wrong checksum.");
  }
  this.cumulative_checksum = 0;
  return;
}
function v31(s$$7) {
  var v12212 = s$$7 + "\n";
  this.Verify(v12212);
  return;
}
function v30(s$$6) {
  this.Verify(s$$6);
  return;
}
function v29(s$$5) {
  var i$$6 = 0;
  var v18517 = s$$5.length;
  var v12214 = i$$6 < v18517;
  for (;v12214;) {
    var c = s$$5.charCodeAt(i$$6);
    var v18518 = this.cumulative_checksum;
    var v12213 = v18518 << 1;
    this.cumulative_checksum = v12213 ^ c;
    i$$6++;
    var v18519 = s$$5.length;
    v12214 = i$$6 < v18519;
  }
  return;
}
function v28() {
  var v18520 = this.checksum;
  var v18521 = this.cumulative_checksum;
  var v12215 = v18520 != v18521;
  if (v12215) {
    throw new Error("Wrong checksum.");
  }
  this.cumulative_checksum = 0;
  return;
}
function v27(s$$4) {
  var v12216 = s$$4 + "\n";
  this.Verify(v12216);
  return;
}
function v26(s$$3) {
  this.Verify(s$$3);
  return;
}
function v25(runner$$2) {
  function RunNextSetup() {
    var v12218 = index$$40 < length$$12;
    if (v12218) {
      try {
        var v18522 = suite$$1.benchmarks;
        var v12217 = v18522[index$$40];
        v12217.Setup();
      } catch (e$$4) {
        suite$$1.NotifyError(e$$4);
        return null;
      }
      return RunNextBenchmark;
    }
    suite$$1.NotifyResult();
    return null;
  }
  function RunNextBenchmark() {
    try {
      var v18523 = suite$$1.benchmarks;
      var v12219 = v18523[index$$40];
      data$$20 = suite$$1.RunSingleBenchmark(v12219, data$$20);
    } catch (e$$5) {
      suite$$1.NotifyError(e$$5);
      return null;
    }
    var v12220;
    var v18524 = data$$20 == null;
    if (v18524) {
      v12220 = RunNextTearDown;
    } else {
      v12220 = RunNextBenchmark();
    }
    return v12220;
  }
  function RunNextTearDown() {
    try {
      var v18525 = suite$$1.benchmarks;
      var v18526 = index$$40;
      index$$40 = index$$40 + 1;
      var v12221 = v18525[v18526];
      v12221.TearDown();
    } catch (e$$6) {
      suite$$1.NotifyError(e$$6);
      return null;
    }
    return RunNextSetup;
  }
  BenchmarkSuite.ResetRNG();
  this.results = [];
  this.runner = runner$$2;
  var v12222 = this.benchmarks;
  var length$$12 = v12222.length;
  var index$$40 = 0;
  var suite$$1 = this;
  var data$$20;
  return RunNextSetup();
}
function v24(benchmark$$1, data$$18) {
  function Measure(data$$19) {
    var elapsed = 0;
    var start$$4 = new Date;
    var i$$5 = 0;
    var v18527;
    if (doDeterministic$$1) {
      var v22725 = benchmark$$1.deterministicIterations;
      v18527 = i$$5 < v22725;
    } else {
      v18527 = elapsed < 1E3;
    }
    var v12224 = v18527;
    for (;v12224;) {
      benchmark$$1.run();
      var v12223 = new Date;
      elapsed = v12223 - start$$4;
      i$$5++;
      var v18528;
      if (doDeterministic$$1) {
        var v22726 = benchmark$$1.deterministicIterations;
        v18528 = i$$5 < v22726;
      } else {
        v18528 = elapsed < 1E3;
      }
      v12224 = v18528;
    }
    var v12225 = data$$19 != null;
    if (v12225) {
      var v18529 = data$$19.runs;
      data$$19.runs = v18529 + i$$5;
      var v18530 = data$$19.elapsed;
      data$$19.elapsed = v18530 + elapsed;
    }
    return;
  }
  var config = BenchmarkSuite.config;
  var v12226;
  var v22727 = config.doWarmup;
  var v18531 = v22727 !== undefined;
  if (v18531) {
    v12226 = config.doWarmup;
  } else {
    v12226 = benchmark$$1.doWarmup;
  }
  var doWarmup$$1 = v12226;
  var v12227;
  var v22728 = config.doDeterministic;
  var v18532 = v22728 !== undefined;
  if (v18532) {
    v12227 = config.doDeterministic;
  } else {
    v12227 = benchmark$$1.doDeterministic;
  }
  var doDeterministic$$1 = v12227;
  var v18533 = !doWarmup$$1;
  if (v18533) {
    v18533 = data$$18 == null;
  }
  var v12228 = v18533;
  if (v12228) {
    data$$18 = {runs:0, elapsed:0};
  }
  var v12234 = data$$18 == null;
  if (v12234) {
    Measure(null);
    return{runs:0, elapsed:0};
  } else {
    Measure(data$$18);
    var v18534 = data$$18.runs;
    var v18535 = benchmark$$1.minIterations;
    var v12229 = v18534 < v18535;
    if (v12229) {
      return data$$18;
    }
    var v18536 = data$$18.elapsed;
    var v12230 = v18536 * 1E3;
    var v12231 = data$$18.runs;
    var usec = v12230 / v12231;
    var v12232;
    var v22729 = benchmark$$1.rmsResult;
    var v18537 = v22729 != null;
    if (v18537) {
      v12232 = benchmark$$1.rmsResult();
    } else {
      v12232 = 0;
    }
    var rms = v12232;
    var v12233 = new BenchmarkResult(benchmark$$1, usec, rms);
    this.NotifyStep(v12233);
    return null;
  }
  return;
}
function v23(error$$1) {
  var v18538 = this.runner;
  var v12237 = v18538.NotifyError;
  if (v12237) {
    var v12235 = this.runner;
    var v12236 = this.name;
    v12235.NotifyError(v12236, error$$1);
  }
  var v18539 = this.runner;
  var v12240 = v18539.NotifyStep;
  if (v12240) {
    var v12238 = this.runner;
    var v12239 = this.name;
    v12238.NotifyStep(v12239);
  }
  return;
}
function v22(runner$$1) {
  var v12241 = BenchmarkSuite.scores;
  v12241.push(1);
  var v12243 = runner$$1.NotifyResult;
  if (v12243) {
    var v12242 = this.name;
    runner$$1.NotifyResult(v12242, "Skipped");
  }
  return;
}
function v21() {
  var v12244 = this.results;
  var mean = BenchmarkSuite.GeometricMeanTime(v12244);
  var v18540 = this.reference;
  var v12245 = v18540[0];
  var score$$1 = v12245 / mean;
  var v12246 = BenchmarkSuite.scores;
  v12246.push(score$$1);
  var v18541 = this.runner;
  var v12250 = v18541.NotifyResult;
  if (v12250) {
    var v12247 = 100 * score$$1;
    var formatted$$1 = BenchmarkSuite.FormatScore(v12247);
    var v12248 = this.runner;
    var v12249 = this.name;
    v12248.NotifyResult(v12249, formatted$$1);
  }
  var v22730 = this.reference;
  var v18542 = v22730.length;
  var v12259 = v18542 == 2;
  if (v12259) {
    var v12251 = this.results;
    var meanLatency = BenchmarkSuite.GeometricMeanLatency(v12251);
    var v12258 = meanLatency != 0;
    if (v12258) {
      var v18543 = this.reference;
      var v12252 = v18543[1];
      var scoreLatency = v12252 / meanLatency;
      var v12253 = BenchmarkSuite.scores;
      v12253.push(scoreLatency);
      var v18544 = this.runner;
      var v12257 = v18544.NotifyResult;
      if (v12257) {
        var v12254 = 100 * scoreLatency;
        var formattedLatency = BenchmarkSuite.FormatScore(v12254);
        var v12255 = this.runner;
        var v18545 = this.name;
        var v12256 = v18545 + "Latency";
        v12255.NotifyResult(v12256, formattedLatency);
      }
    }
  }
  return;
}
function v20(result$$1) {
  var v12260 = this.results;
  v12260.push(result$$1);
  var v18546 = this.runner;
  var v12263 = v18546.NotifyStep;
  if (v12263) {
    var v12261 = this.runner;
    var v18547 = result$$1.benchmark;
    var v12262 = v18547.name;
    v12261.NotifyStep(v12262);
  }
  return;
}
function v19(value$$27) {
  var v12264 = value$$27 > 100;
  if (v12264) {
    return value$$27.toFixed(0);
  } else {
    return value$$27.toPrecision(3);
  }
  return;
}
function v18(measurements$$1) {
  var log$$2 = 0;
  var hasLatencyResult = false;
  var i$$4 = 0;
  var v18548 = measurements$$1.length;
  var v12266 = i$$4 < v18548;
  for (;v12266;) {
    var v22731 = measurements$$1[i$$4];
    var v18549 = v22731.latency;
    var v12265 = v18549 != 0;
    if (v12265) {
      var v24803 = measurements$$1[i$$4];
      var v22732 = v24803.latency;
      var v18550 = Math.log(v22732);
      log$$2 = log$$2 + v18550;
      hasLatencyResult = true;
    }
    i$$4++;
    var v18551 = measurements$$1.length;
    v12266 = i$$4 < v18551;
  }
  if (hasLatencyResult) {
    var v12267 = Math.E;
    var v18552 = measurements$$1.length;
    var v12268 = log$$2 / v18552;
    return Math.pow(v12267, v12268);
  } else {
    return 0;
  }
  return;
}
function v17(measurements) {
  var log$$1 = 0;
  var i$$3 = 0;
  var v18553 = measurements.length;
  var v12269 = i$$3 < v18553;
  for (;v12269;) {
    var v24804 = measurements[i$$3];
    var v22733 = v24804.time;
    var v18554 = Math.log(v22733);
    log$$1 = log$$1 + v18554;
    i$$3++;
    var v18555 = measurements.length;
    v12269 = i$$3 < v18555;
  }
  var v12270 = Math.E;
  var v18556 = measurements.length;
  var v12271 = log$$1 / v18556;
  return Math.pow(v12270, v12271);
}
function v16(numbers) {
  var log = 0;
  var i$$2 = 0;
  var v18557 = numbers.length;
  var v12272 = i$$2 < v18557;
  for (;v12272;) {
    var v22734 = numbers[i$$2];
    var v18558 = Math.log(v22734);
    log = log + v18558;
    i$$2++;
    var v18559 = numbers.length;
    v12272 = i$$2 < v18559;
  }
  var v12273 = Math.E;
  var v18560 = numbers.length;
  var v12274 = log / v18560;
  return Math.pow(v12273, v12274);
}
function v15() {
  var result = 0;
  var suites$$1 = BenchmarkSuite.suites;
  var i$$1 = 0;
  var v18561 = suites$$1.length;
  var v12275 = i$$1 < v18561;
  for (;v12275;) {
    var v24805 = suites$$1[i$$1];
    var v22735 = v24805.benchmarks;
    var v18562 = v22735.length;
    result = result + v18562;
    i$$1++;
    var v18563 = suites$$1.length;
    v12275 = i$$1 < v18563;
  }
  return result;
}
function v14(runner, skipBenchmarks$$1) {
  function RunStep() {
    var v18564 = continuation;
    var v22736 = !v18564;
    if (v22736) {
      v18564 = index$$39 < length$$11;
    }
    var v12281 = v18564;
    for (;v12281;) {
      if (continuation) {
        continuation = continuation();
      } else {
        var v12276 = index$$39;
        index$$39 = index$$39 + 1;
        var suite = suites[v12276];
        var v12278 = runner.NotifyStart;
        if (v12278) {
          var v12277 = suite.name;
          runner.NotifyStart(v12277);
        }
        var v22737 = suite.name;
        var v18565 = skipBenchmarks$$1.indexOf(v22737);
        var v12279 = v18565 > -1;
        if (v12279) {
          suite.NotifySkipped(runner);
        } else {
          continuation = suite.RunStep(runner);
        }
      }
      var v22738 = continuation;
      if (v22738) {
        var v24806 = typeof window;
        v22738 = v24806 != "undefined";
      }
      var v18566 = v22738;
      if (v18566) {
        v18566 = window.setTimeout;
      }
      var v12280 = v18566;
      if (v12280) {
        window.setTimeout(RunStep, 25);
        return;
      }
      var v18567 = continuation;
      var v22739 = !v18567;
      if (v22739) {
        v18567 = index$$39 < length$$11;
      }
      v12281 = v18567;
    }
    var v12284 = runner.NotifyScore;
    if (v12284) {
      var v12282 = BenchmarkSuite.scores;
      var score = BenchmarkSuite.GeometricMean(v12282);
      var v12283 = 100 * score;
      var formatted = BenchmarkSuite.FormatScore(v12283);
      runner.NotifyScore(formatted);
    }
    return;
  }
  var v12285;
  var v22740 = typeof skipBenchmarks$$1;
  var v18568 = v22740 === "undefined";
  if (v18568) {
    v12285 = [];
  } else {
    v12285 = skipBenchmarks$$1;
  }
  skipBenchmarks$$1 = v12285;
  var continuation = null;
  var suites = BenchmarkSuite.suites;
  var length$$11 = suites.length;
  BenchmarkSuite.scores = [];
  var index$$39 = 0;
  RunStep();
  return;
}
function v13() {
  function v12() {
    function v11() {
      var v18569 = seed + 2127912214;
      var v18570 = seed << 12;
      var v12286 = v18569 + v18570;
      seed = v12286 & 4294967295;
      var v18571 = seed ^ 3345072700;
      var v18572 = seed >>> 19;
      var v12287 = v18571 ^ v18572;
      seed = v12287 & 4294967295;
      var v18573 = seed + 374761393;
      var v18574 = seed << 5;
      var v12288 = v18573 + v18574;
      seed = v12288 & 4294967295;
      var v18575 = seed + 3550635116;
      var v18576 = seed << 9;
      var v12289 = v18575 ^ v18576;
      seed = v12289 & 4294967295;
      var v18577 = seed + 4251993797;
      var v18578 = seed << 3;
      var v12290 = v18577 + v18578;
      seed = v12290 & 4294967295;
      var v18579 = seed ^ 3042594569;
      var v18580 = seed >>> 16;
      var v12291 = v18579 ^ v18580;
      seed = v12291 & 4294967295;
      var v12292 = seed & 268435455;
      return v12292 / 268435456;
    }
    var seed = 49734321;
    return v11;
  }
  var v12293 = Math;
  var v27111 = v12();
  v12293.random = v27111;
  return;
}
function v10(s$$2) {
  throw "Alert called with argument: " + s$$2;
}
function v9() {
  return this.time;
}
function v8() {
  var v25691 = performance.now;
  var v26083 = !v25691;
  if (v26083) {
    v25691 = performance.mozNow;
  }
  var v24807 = v25691;
  var v25692 = !v24807;
  if (v25692) {
    v24807 = performance.msNow;
  }
  var v22741 = v24807;
  var v24808 = !v22741;
  if (v24808) {
    v22741 = performance.oNow;
  }
  var v18581 = v22741;
  var v22742 = !v18581;
  if (v22742) {
    v18581 = performance.webkitNow;
  }
  var v12294 = v18581;
  var v18582 = !v12294;
  if (v18582) {
    v12294 = Date.now;
  }
  return v12294;
}
function Benchmark(name$$30, doWarmup, doDeterministic, deterministicIterations, run, setup, tearDown, rmsResult, minIterations) {
  function v1() {
    return;
  }
  function v0() {
    return;
  }
  this.name = name$$30;
  this.doWarmup = doWarmup;
  this.doDeterministic = doDeterministic;
  this.deterministicIterations = deterministicIterations;
  this.run = run;
  var v12295;
  if (setup) {
    v12295 = setup;
  } else {
    v12295 = v0;
  }
  this.Setup = v12295;
  var v12296;
  if (tearDown) {
    v12296 = tearDown;
  } else {
    v12296 = v1;
  }
  this.TearDown = v12296;
  var v12297;
  if (rmsResult) {
    v12297 = rmsResult;
  } else {
    v12297 = null;
  }
  this.rmsResult = v12297;
  var v12298;
  if (minIterations) {
    v12298 = minIterations;
  } else {
    v12298 = 32;
  }
  this.minIterations = v12298;
  return;
}
function BenchmarkResult(benchmark, time, latency) {
  this.benchmark = benchmark;
  this.time = time;
  this.latency = latency;
  return;
}
function BenchmarkSuite(name$$31, reference, benchmarks$$1) {
  this.name = name$$31;
  this.reference = reference;
  this.benchmarks = benchmarks$$1;
  var v12299 = BenchmarkSuite.suites;
  v12299.push(this);
  return;
}
function setupTypescript() {
  return;
}
function tearDownTypescript() {
  compiler_input = null;
  return;
}
function runTypescript() {
  function v5(path$$2) {
    return path$$2;
  }
  function v4(path$$1) {
    return false;
  }
  function v3(path) {
    return false;
  }
  function v2(fileName) {
    return outfile;
  }
  var compiler = createCompiler();
  compiler.addUnit(compiler_input, "compiler_input.ts");
  parseErrors = [];
  compiler.reTypeCheck();
  var v12300 = {createFile:v2, fileExists:v3, directoryExists:v4, resolvePath:v5};
  compiler.emit(v12300);
  var v22743 = parseErrors.length;
  var v18583 = v22743 != 192;
  if (v18583) {
    var v22744 = parseErrors.length;
    v18583 = v22744 != 193;
  }
  var v12301 = v18583;
  if (v12301) {
    throw new Error("Parse errors.");
  }
  compiler = null;
  return;
}
function createCompiler() {
  function v6(start$$5, len, message$$9) {
    var v12302 = {start:start$$5, len:len, message:message$$9};
    parseErrors.push(v12302);
    return;
  }
  var v12303 = TypeScript.CompilationSettings;
  var settings = new v12303;
  var v12304 = TypeScript.CodeGenTarget;
  settings.codeGenTarget = v12304.ES5;
  var v12305 = TypeScript.TypeScriptCompiler;
  var v18584 = TypeScript.NullLogger;
  var v12306 = new v18584;
  var compiler$$1 = new v12305(outerr, v12306, settings);
  compiler$$1.setErrorCallback(v6);
  var v12307 = compiler$$1.parser;
  v12307.errorRecovery = true;
  compiler$$1.typeCheck();
  return compiler$$1;
}
function ShowBox(name$$92) {
  function v7(entry$$3) {
    var v18585 = name$$92.valueOf();
    var v18586 = entry$$3.valueOf();
    var v12310 = v18585 === v18586;
    if (v12310) {
      var v18587 = "Box-" + name$$92;
      var v12308 = v18587 + "Latency";
      var box1 = document.getElementById(v12308);
      var v12309 = box1.style;
      v12309.visibility = "visible";
    }
    return;
  }
  var v12311 = "Box-" + name$$92;
  var box = document.getElementById(v12311);
  var v12312 = box.style;
  v12312.visibility = "visible";
  var v18588 = document.getElementById("progress-bar");
  var v12313 = v18588.style;
  var v25693 = completed = completed + 1;
  var v24809 = v25693 / benchmarks;
  var v22745 = v24809 * 100;
  var v18589 = "" + v22745;
  var bar = v12313.width = v18589 + "%";
  latencyBenchmarks.forEach(v7);
  return;
}
function AddResult(name$$93, result$$41) {
  var v18590 = name$$93 + ": ";
  var v12314 = v18590 + result$$41;
  console.log(v12314);
  var v12315 = "Result-" + name$$93;
  var box$$1 = document.getElementById(v12315);
  box$$1.innerHTML = result$$41;
  return;
}
function AddError(name$$94, error$$3) {
  var v18591 = name$$94 + ": ";
  var v18592 = error$$3.message;
  var v12316 = v18591 + v18592;
  console.log(v12316);
  var v12318 = error$$3 == "TypedArrayUnsupported";
  if (v12318) {
    AddResult(name$$94, "<b>Unsupported</b>");
  } else {
    var v12317 = error$$3 == "PerformanceNowUnsupported";
    if (v12317) {
      AddResult(name$$94, "<b>Timer error</b>");
    } else {
      AddResult(name$$94, "<b>Error</b>");
    }
  }
  success = false;
  return;
}
function AddScore(score$$2) {
  var status$$1 = document.getElementById("main-banner");
  if (success) {
    status$$1.innerHTML = "Octane Score: " + score$$2;
  } else {
    status$$1.innerHTML = "Octane Score (incomplete): " + score$$2;
  }
  var v18593 = document.getElementById("progress-bar-container");
  var v12319 = v18593.style;
  v12319.visibility = "hidden";
  var v18594 = document.getElementById("bottom-text");
  var v12320 = v18594.style;
  v12320.visibility = "visible";
  var v12321 = document.getElementById("inside-anchor");
  var v12322 = document.getElementById("bar-appendix");
  v12321.removeChild(v12322);
  var v18595 = document.getElementById("alertbox");
  var v12323 = v18595.style;
  v12323.visibility = "hidden";
  return;
}
function Run() {
  var v12324 = document.getElementById("main-banner");
  v12324.innerHTML = "Running Octane...";
  var v12325 = document.getElementById("bar-appendix");
  v12325.innerHTML = '<br/><div class="progress progress-striped" id="progress-bar-container" style="visibility:hidden"><div class="bar"style="width: 0%;" id="progress-bar"></div></div>';
  var anchor = document.getElementById("run-octane");
  var parent$$73 = document.getElementById("main-container");
  var v12326 = document.getElementById("inside-anchor");
  parent$$73.appendChild(v12326);
  parent$$73.removeChild(anchor);
  var v12327 = document.getElementById("startup-text");
  v12327.innerHTML = "";
  var v18596 = document.getElementById("progress-bar-container");
  var v12328 = v18596.style;
  v12328.visibility = "visible";
  var v12329 = {NotifyStart:ShowBox, NotifyError:AddError, NotifyResult:AddResult, NotifyScore:AddScore};
  BenchmarkSuite.RunSuites(v12329, skipBenchmarks);
  return;
}
function CheckCompatibility() {
  var v22746 = typeof Uint8Array;
  var v18597 = v22746 != "undefined";
  if (v18597) {
    var v22747 = typeof Float64Array;
    v18597 = v22747 != "undefined";
  }
  var v12330 = v18597;
  if (v12330) {
    var v24810 = new Uint8Array(0);
    var v22748 = v24810.subarray;
    var v18598 = typeof v22748;
    v12330 = v18598 != "undefined";
  }
  var hasTypedArrays = v12330;
  var v12332 = !hasTypedArrays;
  if (v12332) {
    console.log("Typed Arrays not supported");
    var v18599 = document.getElementById("alertbox");
    var v12331 = v18599.style;
    v12331.display = "block";
  }
  var v24811 = window.document;
  var v22749 = v24811.URL;
  var v18600 = v22749.indexOf("skip_zlib=1");
  var v12333 = v18600 >= 0;
  if (v12333) {
    skipBenchmarks.push("zlib");
  }
  var v24812 = window.document;
  var v22750 = v24812.URL;
  var v18601 = v22750.indexOf("auto=1");
  var v12334 = v18601 >= 0;
  if (v12334) {
    Run();
  }
  return;
}
function Load() {
  setTimeout(CheckCompatibility, 200);
  return;
}
var performance = performance || {};
var v12335 = performance;
var v27112 = v8();
v12335.now = v27112;
var v12336 = BenchmarkResult.prototype;
v12336.valueOf = v9;
BenchmarkSuite.suites = [];
BenchmarkSuite.version = "9";
BenchmarkSuite.config = {doWarmup:undefined, doDeterministic:undefined};
alert = v10;
BenchmarkSuite.ResetRNG = v13;
BenchmarkSuite.RunSuites = v14;
BenchmarkSuite.CountBenchmarks = v15;
BenchmarkSuite.GeometricMean = v16;
BenchmarkSuite.GeometricMeanTime = v17;
BenchmarkSuite.GeometricMeanLatency = v18;
BenchmarkSuite.FormatScore = v19;
var v12337 = BenchmarkSuite.prototype;
v12337.NotifyStep = v20;
var v12338 = BenchmarkSuite.prototype;
v12338.NotifyResult = v21;
var v12339 = BenchmarkSuite.prototype;
v12339.NotifySkipped = v22;
var v12340 = BenchmarkSuite.prototype;
v12340.NotifyError = v23;
var v12341 = BenchmarkSuite.prototype;
v12341.RunSingleBenchmark = v24;
var v12342 = BenchmarkSuite.prototype;
v12342.RunStep = v25;
var v12343 = [255011322];
var v18602 = new Benchmark("Typescript", false, true, 5, runTypescript, setupTypescript, tearDownTypescript, null, 1);
var v12344 = [v18602];
var typescript = new BenchmarkSuite("Typescript", v12343, v12344);
var parseErrors = [];
var outfile = {checksum:-412589664, cumulative_checksum:0, Write:v26, WriteLine:v27, Close:v28, Verify:v29};
var outerr = {checksum:0, cumulative_checksum:0, Write:v30, WriteLine:v31, Close:v32, Verify:v33};
var v27364 = '//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    export class AstLogger {\n\n        constructor (public logger: ILogger) { }\n\n        public logScript(script: TypeScript.Script): void {\n            this.logLinemap(script.locationInfo.lineMap);\n\n            var stack: AST[]= [];\n\n            var pre = (cur: TypeScript.AST, parent: TypeScript.AST) => {\n                stack.push(cur);\n                var indent = (stack.length - 1) * 2;\n                this.logComments(script, cur.preComments, indent);\n                this.logNode(script, cur, indent);\n                this.logComments(script, cur.postComments, indent);\n                return cur;\n            }\n\n            var post = (cur: TypeScript.AST, parent: TypeScript.AST) => {\n                stack.pop();\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(script, pre, post);\n        }\n\n\n        public logNode(script: TypeScript.Script, cur: TypeScript.AST, indent: number) {\n            var msg = this.addPadding("", indent, "| ", true);\n\n            msg = msg.concat("+ " + cur.treeViewLabel());\n            msg = this.addPadding(msg, 70, " ", false);\n\n            msg = msg + this.addLineColumn(script, cur.minChar);\n            msg = this.addPadding(msg, 80, " ", false);\n\n            msg = msg + "=> ";\n            msg = msg + this.addLineColumn(script, cur.limChar);\n            msg = this.addPadding(msg, 102, " ", false);\n\n            msg = msg.concat("[" + this.addPadding(cur.minChar.toString(), 1, " ", true) + ", " + this.addPadding(cur.limChar.toString(), 1, " ", true) + "]");\n\n            msg = this.addPadding(msg, 115, " ", false);\n            msg = msg.concat("sym=" + (<any>cur).sym);\n\n            msg = this.addPadding(msg, 135, " ", false);\n            msg = msg.concat("type=" + (cur.type === null ? "null" : cur.type.getTypeName()));\n            this.logger.log(msg);\n        }\n\n        private logComments(script: TypeScript.Script, comments: TypeScript.AST[], indent: number) {\n            if (comments == null)\n                return;\n\n            for (var i = 0; i < comments.length; i++) {\n                this.logNode(script, comments[i], indent);\n            }\n        }\n\n        public logLinemap(linemap: number[]) {\n            var result = "[";\n            for (var i = 0; i < linemap.length; i++) {\n                if (i > 0)\n                    result += ",";\n                result += linemap[i];\n            }\n            result += "]";\n            this.logger.log("linemap: " + result);\n        }\n\n        private addPadding(s: string, targetLength: number, paddingString: string, leftPadding: bool): string {\n            var result = (leftPadding ? "" : s);\n            for (var i = s.length; i < targetLength; i++) {\n                result = result + paddingString;\n            }\n            result = result + (leftPadding ? s : "");\n            return result;\n        }\n\n        private addLineColumn(script: TypeScript.Script, position: numbe' + 
'r): string {\n            // just for calling getSourceLineColFromMap\n            var lineInfo = {\n                line: -1,\n                col: -1\n            }\n            TypeScript.getSourceLineColFromMap(lineInfo, position, script.locationInfo.lineMap);\n\n            if (lineInfo.col !== -1) {\n                lineInfo.col++; //TODO: function above seems to consider line as 1-based, and column as 0-based\n            }\n\n            return "(" + lineInfo.line + ", " + lineInfo.col + ")";\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export function lastOf(items: any[]): any {\n        return (items === null || items.length === 0) ? null : items[items.length - 1];\n    }\n\n    export function max(a: number, b: number): number {\n        return a >= b ? a : b;\n    }\n\n    export function min(a: number, b: number): number {\n        return a <= b ? a : b;\n    }\n\n    //\n    // Helper class representing a path from a root ast node to a (grand)child ast node.\n    // This is helpful as our tree don\'t have parents.\n    //\n    export class AstPath {\n        public asts: TypeScript.AST[] = [];\n        public top: number = -1;\n\n        static reverseIndexOf(items: any[], index: number): any {\n            return (items === null || items.length <= index) ? null : items[items.length - index - 1];\n        }\n\n        public clone(): AstPath {\n            var clone = new AstPath();\n            clone.asts = this.asts.map((value) => { return value; });\n            clone.top = this.top;\n            return clone;\n        }\n\n        public pop(): TypeScript.AST {\n            var head = this.ast();\n            this.up();\n\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            return head;\n        }\n\n        public push(ast: TypeScript.AST) {\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            this.top = this.asts.length;\n            this.asts.push(ast);\n        }\n\n        public up() {\n            if (this.top <= -1)\n                throw new Error("Invalid call to \'up\'");\n            this.top--;\n        }\n\n        public down() {\n            if (this.top == this.ast.length - 1)\n                throw new Error("Invalid call to \'down\'");\n            this.top++;\n        }\n\n        public nodeType(): TypeScript.NodeType {\n            if (this.ast() == null)\n                return TypeScript.NodeType.None;\n            return this.ast().nodeType;\n        }\n\n        public ast() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));\n        }\n\n        public parent() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);\n        }\n\n        public count() {\n            return this.top + 1;\n        }\n\n        public get(index: number): TypeScript.AST {\n            return this.asts[index];\n        }\n\n        public isNameOfClass(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfInterface(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfArgument(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ArgDecl) &&\n                ((<TypeScript.ArgDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfVariable(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === Ty';
var v27363 = v27364 + "peScript.NodeType.VarDecl) &&\n                ((<TypeScript.VarDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfModule(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) &&\n                ((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfFunction(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.FuncDecl) &&\n                ((<TypeScript.FuncDecl>this.parent()).name === this.ast());\n        }\n\n        public isChildOfScript(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script;\n        }\n\n        public isChildOfModule(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration;\n        }\n\n        public isChildOfClass(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration;\n        }\n\n        public isArgumentOfClassConstructor(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 5 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) &&\n                ((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]);\n        }\n\n        public isChildOfInterface(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration;\n        }\n\n        public isTopLevelImplicitModule() {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags, TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfTopLevelImplicitModule() {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags, TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfScript(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script &&\n                 (<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfSwitch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch &&\n                 (<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0];\n        }\n\n        public isBodyOfModule(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfClass(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                 (<T";
var v27362 = v27363 + "ypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                 (<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfInterface(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration &&\n                 (<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfBlock(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFor(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.For &&\n                (<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfCase(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case &&\n                (<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfTry(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try &&\n                (<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfCatch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch &&\n                (<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfDoWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile &&\n                (<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.While &&\n                (<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfForIn(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn &&\n                (<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfWith(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.With &&\n                (<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFinally(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally &&\n                (<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1];\n        }\n\n        public isDefaultCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0];\n        }\n\n        public isListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];\n        }\n\n        public isBodyOfObjectLit(): bool {\n            return this.isListOfObjectLit();\n        }\n\n        public isEmptyListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[t";
var v27361 = v27362 + "his.top - 1]).operand == this.asts[this.top - 0] &&\n                (<TypeScript.ASTList>this.asts[this.top - 0]).members.length == 0;\n        }\n\n        public isMemberOfObjectLit(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1];\n        }\n\n        public isNameOfMemberOfObjectLit(): bool {\n            return this.count() >= 4 &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2];\n        }\n\n        public isListOfArrayLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];\n        }\n\n        public isTargetOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0];\n        }\n\n        public isMemberOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isItemOfList(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List;\n            //(<Tools.ASTList>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isThenOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0];\n        }\n\n        public isElseOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfDefaultCase(): bool {\n            return this.isBodyOfCase();\n        }\n\n        public isSingleStatementList(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.ASTList>this.asts[this.top]).members.length === 1;\n        }\n\n        public isArgumentListOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentOfFunction(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1];\n        }\n\n        public isArgumentListOfCall(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentListOfNew(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.New &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isSynthesizedBlock(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false;\n        }\n    }\n\n    export function isValidAstNode(ast: Typ";
var v27360 = v27361 + 'eScript.ASTSpan): bool {\n        if (ast === null)\n            return false;\n\n        if (ast.minChar === -1 || ast.limChar === -1)\n            return false;\n\n        return true;\n    }\n\n    export class AstPathContext {\n        public path = new TypeScript.AstPath();\n    }\n\n    export enum GetAstPathOptions {\n        Default = 0,\n        EdgeInclusive = 1,\n        //We need this options dealing with an AST coming from an incomplete AST. For example:\n        //     class foo { // r\n        // If we ask for the AST at the position after the "r" character, we won\'t see we are \n        // inside a comment, because the "class" AST node has a limChar corresponding to the position of \n        // the "{" character, meaning we don\'t traverse the tree down to the stmt list of the class, meaning\n        // we don\'t find the "precomment" attached to the errorneous empty stmt.\n        //TODO: It would be nice to be able to get rid of this.\n        DontPruneSearchBasedOnPosition = 1 << 1,\n    }\n\n    ///\n    /// Return the stack of AST nodes containing "position"\n    ///\n    export function getAstPathToPosition(script: TypeScript.AST, pos: number, options = GetAstPathOptions.Default): TypeScript.AstPath {\n        var lookInComments = (comments: TypeScript.Comment[]) => {\n            if (comments && comments.length > 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    var minChar = comments[i].minChar;\n                    var limChar = comments[i].limChar;\n                    if (!comments[i].isBlockComment) {\n                        limChar++; // For single line comments, include 1 more character (for the newline)\n                    }\n                    if (pos >= minChar && pos < limChar) {\n                        ctx.path.push(comments[i]);\n                    }\n                }\n            }\n        }\n\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {\n            if (isValidAstNode(cur)) {\n\n                // Add "cur" to the stack if it contains our position\n                // For "identifier" nodes, we need a special case: A position equal to "limChar" is\n                // valid, since the position corresponds to a caret position (in between characters)\n                // For example:\n                //  bar\n                //  0123\n                // If "position == 3", the caret is at the "right" of the "r" character, which should be considered valid\n                var inclusive =\n                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||\n                    cur.nodeType === TypeScript.NodeType.Name ||\n                    pos === script.limChar; // Special "EOF" case\n\n                var minChar = cur.minChar;\n                var limChar = cur.limChar + (inclusive ? 1 : 0)\n                if (pos >= minChar && pos < limChar) {\n\n                    // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it\'s better\n                    //       than top of the stack.\n                    var previous = ctx.path.ast();\n                    if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {\n                        ctx.path.push(cur);\n                    }\n                    else {\n                        //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");\n                    }\n                }\n\n                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually\n                if (pos < limChar) {\n                    lookInComments(cur.preComments);\n                }\n                if (pos >= minChar) {\n                    lookInComments(cur.postComments);\n                }\n\n                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {\n                    // Don\'t go further down the tree if pos is outside of [minChar, limChar]\n                    walker.options.goChildren = (minChar <= pos && pos <= limChar);\n                }\n            }\n            return cur;\n        }\n\n        var ctx = new AstPathContext();\n        TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx);\n        return ctx.path;\n    }\n\n    //\n    // Find a source text offset that is safe for lexing tokens at the given position.\n    // This is used when "position" might be inside a comment or string, etc.\n    //\n    export function getTokenizationOffset(script: TypeScript.Script, position: number): number {\n        var bestOffset = 0;\n        var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {\n            if (TypeScript.isValidAstNode(cur)) {\n                // Did we find a closer offset?\n                if (cur.minChar <= position) {\n                    bestOffset = max(bestOffset, cur.minChar);\n                }\n\n                // Stop the walk if this node is not related to ';
var v27359 = v27360 + '"minChar"\n                if (cur.minChar > position || cur.limChar < bestOffset) {\n                    walker.options.goChildren = false;\n                }\n            }\n\n            return cur;\n        }\n\n        TypeScript.getAstWalkerFactory().walk(script, pre);\n        return bestOffset;\n    }\n\n    ///\n    /// Simple function to Walk an AST using a simple callback function.\n    ///\n    export function walkAST(ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void ): void {\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.push(cur);\n            callback(path, walker);\n            return cur;\n        }\n        var post = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.pop();\n            return cur;\n        }\n\n        var path = new AstPath();\n        TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path);\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ASTSpan {\n        public minChar: number = -1;  // -1 = "undefined" or "compiler generated"\n        public limChar: number = -1;  // -1 = "undefined" or "compiler generated"   \n    }\n\n    export class AST extends ASTSpan {\n        public type: Type = null;\n        public flags = ASTFlags.Writeable;\n\n        // REVIEW: for diagnostic purposes\n        public passCreated: number = CompilerDiagnostics.analysisPass;\n\n        public preComments: Comment[] = null;\n        public postComments: Comment[] = null;\n        private docComments: Comment[] = null;\n\n        public isParenthesized = false;\n\n        constructor (public nodeType: NodeType) {\n            super();\n        }\n\n        public isExpression() { return false; }\n\n        public isStatementOrExpression() { return false; }\n\n        public isCompoundStatement() { return false; }\n\n        public isLeaf() { return this.isStatementOrExpression() && (!this.isCompoundStatement()); }\n        \n        public isDeclaration() { return false; }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Error:\n                case NodeType.EmptyExpr:\n                    this.type = typeFlow.anyType;\n                    break;\n                case NodeType.This:\n                    return typeFlow.typeCheckThis(this);\n                case NodeType.Null:\n                    this.type = typeFlow.nullType;\n                    break;\n                case NodeType.False:\n                case NodeType.True:\n                    this.type = typeFlow.booleanType;\n                    break;\n                case NodeType.Super:\n                    return typeFlow.typeCheckSuper(this);\n                case NodeType.EndCode:\n                case NodeType.Empty:\n                case NodeType.Void:\n                    this.type = typeFlow.voidType;\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            switch (this.nodeType) {\n                case NodeType.This:\n                    emitter.recordSourceMappingStart(this);\n                    if (emitter.thisFnc && (hasFlag(emitter.thisFnc.fncFlags, FncFlags.IsFatArrowFunction))) {\n                        emitter.writeToOutput("_this");\n                    }\n                    else {\n                        emitter.writeToOutput("this");\n                    }\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Null:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("null");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.False:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("false");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.True';
var v27358 = v27359 + ':\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("true");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Super:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.emitSuperReference();\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.EndCode:\n                case NodeType.Error:\n                case NodeType.EmptyExpr:\n                    break;\n                case NodeType.Empty:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Void:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("void ");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public print(context: PrintContext) {\n            context.startLine();\n            var lineCol = { line: -1, col: -1 };\n            var limLineCol = { line: -1, col: -1 };\n            if (context.parser !== null) {\n                context.parser.getSourceLineCol(lineCol, this.minChar);\n                context.parser.getSourceLineCol(limLineCol, this.limChar);\n                context.write("(" + lineCol.line + "," + lineCol.col + ")--" +\n                              "(" + limLineCol.line + "," + limLineCol.col + "): ");\n            }\n            var lab = this.printLabel();\n            if (hasFlag(this.flags, ASTFlags.Error)) {\n                lab += " (Error)";\n            }\n            context.writeLine(lab);\n        }\n\n        public printLabel() {\n            if (nodeTypeTable[this.nodeType] !== undefined) {\n                return nodeTypeTable[this.nodeType];\n            }\n            else {\n                return (<any>NodeType)._map[this.nodeType];\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            // by default, AST adds itself to current basic block and does not check its children\n            context.walker.options.goChildren = false;\n            context.addContent(this);\n        }\n\n        public netFreeUses(container: Symbol, freeUses: StringHashTable) {\n        }\n\n        public treeViewLabel() {\n            return (<any>NodeType)._map[this.nodeType];\n        }\n\n        public static getResolvedIdentifierName(name: string): string {\n            if (!name) return "";\n\n            var resolved = "";\n            var start = 0;\n            var i = 0;\n            while(i <= name.length - 6) {\n                // Look for escape sequence \\uxxxx\n                if (name.charAt(i) == \'\\\\\' && name.charAt(i+1) == \'u\') {\n                    var charCode = parseInt(name.substr(i + 2, 4), 16);\n                    resolved += name.substr(start, i - start);\n                    resolved += String.fromCharCode(charCode);\n                    i += 6;\n                    start = i;\n                    continue;\n                } \n                i++;\n            }\n            // Append remaining string\n            resolved += name.substring(start);\n            return resolved;\n        }\n\n        public getDocComments() : Comment[] {\n            if (!this.isDeclaration() || !this.preComments || this.preComments.length == 0) {\n                return [];\n            }\n\n            if (!this.docComments) {\n                var preCommentsLength = this.preComments.length;\n                var docComments: Comment[] = [];\n                for (var i = preCommentsLength - 1; i >= 0; i--) {\n                    if (this.preComments[i].isDocComment()) {\n                        var prevDocComment = docComments.length > 0 ? docComments[docComments.length - 1] : null;\n                        if (prevDocComment == null || // If the help comments were not yet set then this is the comment\n                             (this.preComments[i].limLine == prevDocComment.minLine ||\n                              this.preComments[i].limLine + 1 == prevDocComment.minLine)) { // On same line or next line\n                            docComments.push(this.preComments[i]);\n                            continue;\n                        }\n                    }\n                    break;\n                }\n\n                this.docComments = docComments.reverse();\n            }\n\n            return this.docComments;\n        }\n    }\n\n    export class IncompleteAST extends AST {\n        constructor (min: number, lim: number) {\n            super(NodeType.Error);\n\n            this.minChar = min;\n            this.limChar = lim;\n        }\n    }\n\n    export class ASTList extends AST {\n        public enclosingScope: SymbolScope = null;\n        publ';
var v27357 = v27358 + "ic members: AST[] = new AST[];\n\n        constructor () {\n            super(NodeType.List);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var len = this.members.length;\n            for (var i = 0; i < len; i++) {\n                if (context.noContinuation) {\n                    context.addUnreachable(this.members[i]);\n                    break;\n                }\n                else {\n                    this.members[i] = context.walk(this.members[i], this);\n                }\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public append(ast: AST) {\n            this.members[this.members.length] = ast;\n            return this;\n        }\n\n        public appendAll(ast: AST) {\n            if (ast.nodeType == NodeType.List) {\n                var list = <ASTList>ast;\n                for (var i = 0, len = list.members.length; i < len; i++) {\n                    this.append(list.members[i]);\n                }\n            }\n            else {\n                this.append(ast);\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascriptList(this, null, TokenID.Semicolon, startLine, false, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.members.length;\n            typeFlow.nestingLevel++;\n            for (var i = 0; i < len; i++) {\n                if (this.members[i]) {\n                    this.members[i] = this.members[i].typeCheck(typeFlow);\n                }\n            }\n            typeFlow.nestingLevel--;\n            return this;\n        }\n    }\n\n    export class Identifier extends AST {\n        public sym: Symbol = null;\n        public cloId = -1;\n        public text: string;\n\n        // 'actualText' is the text that the user has entered for the identifier. the text might \n        // include any Unicode escape sequences (e.g.: \\u0041 for 'A'). 'text', however, contains \n        // the resolved value of any escape sequences in the actual text; so in the previous \n        // example, actualText = '\\u0041', text = 'A'.\n        //\n        // For purposes of finding a symbol, use text, as this will allow you to match all \n        // variations of the variable text. For full-fidelity translation of the user input, such\n        // as emitting, use the actualText field.\n        // \n        // Note: \n        //    To change text, and to avoid running into a situation where 'actualText' does not \n        //    match 'text', always use setText.\n        constructor (public actualText: string, public hasEscapeSequence?: bool) {\n            super(NodeType.Name);\n            this.setText(actualText, hasEscapeSequence);\n        }\n\n        public setText(actualText: string, hasEscapeSequence?: bool) {\n            this.actualText = actualText;\n            if (hasEscapeSequence) {\n                this.text = AST.getResolvedIdentifierName(actualText);\n            }\n            else {\n                this.text = actualText;\n            }\n        }\n\n        public isMissing() { return false; }\n        public isLeaf() { return true; }\n\n        public treeViewLabel() {\n            return \"id: \" + this.actualText;\n        }\n\n        public printLabel() {\n            if (this.actualText) {\n                return \"id: \" + this.actualText;\n            }\n            else {\n                return \"name node\";\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckName(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptName(this, true);\n        }\n\n        public static fromToken(token: Token): Identifier {\n            return new Identifier(token.getText(), (<IdentifierToken>token).hasEscapeSequence);\n        }\n    }\n\n    export class MissingIdentifier extends Identifier {\n        constructor () {\n            super(\"__missing\");\n        }\n\n        public isMissing() {\n            return true;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            // Emit nothing for a missing ID\n        }\n    }\n\n    export class Label extends AST {\n        constructor (public id: Identifier) {\n            super(NodeType.Label);\n        }\n\n        public printLabel() { return this.id.actualText + \":\"; }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.recordSourceMappingStart(this.id);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this.id);";
var v27356 = v27357 + '\n            emitter.writeLineToOutput(":");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class Expression extends AST {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public isExpression() { return true; }\n\n        public isStatementOrExpression() { return true; }\n    }\n\n    export class UnaryExpression extends Expression {\n        public targetType: Type = null; // Target type for an object literal (null if no target type)\n        public castTerm: AST = null;\n\n        constructor (nodeType: NodeType, public operand: AST) {\n            super(nodeType);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            // TODO: add successor as catch block/finally block if present\n            if (this.nodeType == NodeType.Throw) {\n                context.returnStmt();\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Not:\n                    return typeFlow.typeCheckBitNot(this);\n\n                case NodeType.LogNot:\n                    return typeFlow.typeCheckLogNot(this);\n\n                case NodeType.Pos:\n                case NodeType.Neg:\n                    return typeFlow.typeCheckUnaryNumberOperator(this);\n\n                case NodeType.IncPost:\n                case NodeType.IncPre:\n                case NodeType.DecPost:\n                case NodeType.DecPre:\n                    return typeFlow.typeCheckIncOrDec(this);\n\n                case NodeType.ArrayLit:\n                    typeFlow.typeCheckArrayLit(this);\n                    return this;\n\n                case NodeType.ObjectLit:\n                    typeFlow.typeCheckObjectLit(this);\n                    return this;\n\n                case NodeType.Throw:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.voidType;\n                    return this;\n\n                case NodeType.Typeof:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.stringType;\n                    return this;\n\n                case NodeType.Delete:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.booleanType;\n                    break;\n\n                case NodeType.TypeAssertion:\n                    this.castTerm = typeFlow.typeCheck(this.castTerm);\n                    var applyTargetType = !this.operand.isParenthesized;\n\n                    var targetType = applyTargetType ? this.castTerm.type : null;\n\n                    typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand);\n                    typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true);\n                    this.type = this.castTerm.type;\n                    return this;\n\n                case NodeType.Void:\n                    // REVIEW - Although this is good to do for completeness\'s sake,\n                    // this shouldn\'t be strictly necessary from the void operator\'s\n                    // point of view\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.checker.undefinedType;\n                    break;\n\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            switch (this.nodeType) {\n                case NodeType.IncPost:\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    emitter.writeToOutput("++");\n                    break;\n                case NodeType.LogNot:\n                    emitter.writeToOutput("!");\n                    emitter.emitJavascript(this.operand, TokenID.Exclamation, false);\n                    break;\n                case NodeType.DecPost:\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    emitter.writeToOutput("--");\n                    break;\n                case NodeType.ObjectLit:\n                    emitter.emitObjectLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.ArrayLit:\n                    emitter.emitArrayLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.Not:\n                    emitter.writeToOutput("~");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Neg:\n                    emitter.writeToOutput("-"';
var v27355 = v27356 + ');\n                    if (this.operand.nodeType == NodeType.Neg) {\n                        this.operand.isParenthesized = true;\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Minus, false);\n                    break;\n                case NodeType.Pos:\n                    emitter.writeToOutput("+");\n                    if (this.operand.nodeType == NodeType.Pos) {\n                        this.operand.isParenthesized = true;\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Plus, false);\n                    break;\n                case NodeType.IncPre:\n                    emitter.writeToOutput("++");\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    break;\n                case NodeType.DecPre:\n                    emitter.writeToOutput("--");\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    break;\n                case NodeType.Throw:\n                    emitter.writeToOutput("throw ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    emitter.writeToOutput(";");\n                    break;\n                case NodeType.Typeof:\n                    emitter.writeToOutput("typeof ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Delete:\n                    emitter.writeToOutput("delete ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Void:\n                    emitter.writeToOutput("void ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.TypeAssertion:\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class CallExpression extends Expression {\n        constructor (nodeType: NodeType,\n                     public target: AST,\n                     public arguments: ASTList) {\n            super(nodeType);\n            this.minChar = this.target.minChar;\n        }\n\n        public signature: Signature = null;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (this.nodeType == NodeType.New) {\n                return typeFlow.typeCheckNew(this);\n            }\n            else {\n                return typeFlow.typeCheckCall(this);\n            }\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n\n            if (this.nodeType == NodeType.New) {\n                emitter.emitNew(this.target, this.arguments);\n            }\n            else {\n                emitter.emitCall(this, this.target, this.arguments);\n            }\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class BinaryExpression extends Expression {\n        constructor (nodeType: NodeType, public operand1: AST, public operand2: AST) {\n            super(nodeType);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Dot:\n                    return typeFlow.typeCheckDotOperator(this);\n                case NodeType.Asg:\n                    return typeFlow.typeCheckAsgOperator(this);\n                case NodeType.Add:\n                case NodeType.Sub:\n                case NodeType.Mul:\n                case NodeType.Div:\n                case NodeType.Mod:\n                case NodeType.Or:\n                case NodeType.And:\n                    return typeFlow.typeCheckArithmeticOperator(this, false);\n                case NodeType.Xor:\n                    return typeFlow.typeCheckBitwiseOperator(this, false);\n                case NodeType.Ne:\n                case NodeType.Eq:\n                    var text: string;\n                    if (typeFlow.checker.styleSettings.eqeqeq) {\n                        text = nodeTypeTable[this.nodeType];\n                        typeFlow.checker.errorReporter.styleError(this, "use of " + text);\n                    }\n                    else if (typeFlow.checker.styleSettings.eqnull) {\n                        text = nodeTypeTable[this.nodeType];\n                        if ((this.operand2 !== null) && (this.operand2.nodeType == NodeType.Null)) {\n                            typeFlow.checker.errorReporter.styleError(this, "use of " + text + " to compare with null");\n                        }\n                    }\n         ';
var v27354 = v27355 + '       case NodeType.Eqv:\n                case NodeType.NEqv:\n                case NodeType.Lt:\n                case NodeType.Le:\n                case NodeType.Ge:\n                case NodeType.Gt:\n                    return typeFlow.typeCheckBooleanOperator(this);\n                case NodeType.Index:\n                    return typeFlow.typeCheckIndex(this);\n                case NodeType.Member:\n                    this.type = typeFlow.voidType;\n                    return this;\n                case NodeType.LogOr:\n                    return typeFlow.typeCheckLogOr(this);\n                case NodeType.LogAnd:\n                    return typeFlow.typeCheckLogAnd(this);\n                case NodeType.AsgAdd:\n                case NodeType.AsgSub:\n                case NodeType.AsgMul:\n                case NodeType.AsgDiv:\n                case NodeType.AsgMod:\n                case NodeType.AsgOr:\n                case NodeType.AsgAnd:\n                    return typeFlow.typeCheckArithmeticOperator(this, true);\n                case NodeType.AsgXor:\n                    return typeFlow.typeCheckBitwiseOperator(this, true);\n                case NodeType.Lsh:\n                case NodeType.Rsh:\n                case NodeType.Rs2:\n                    return typeFlow.typeCheckShift(this, false);\n                case NodeType.AsgLsh:\n                case NodeType.AsgRsh:\n                case NodeType.AsgRs2:\n                    return typeFlow.typeCheckShift(this, true);\n                case NodeType.Comma:\n                    return typeFlow.typeCheckCommaOperator(this);\n                case NodeType.InstOf:\n                    return typeFlow.typeCheckInstOf(this);\n                case NodeType.In:\n                    return typeFlow.typeCheckInOperator(this);\n                case NodeType.From:\n                    typeFlow.checker.errorReporter.simpleError(this, "Illegal use of \'from\' keyword in binary expression");\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var binTokenId = nodeTypeToTokTable[this.nodeType];\n\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (binTokenId != undefined) {\n\n                emitter.emitJavascript(this.operand1, binTokenId, false);\n\n                if (tokenTable[binTokenId].text == "instanceof") {\n                    emitter.writeToOutput(" instanceof ");\n                }\n                else if (tokenTable[binTokenId].text == "in") {\n                    emitter.writeToOutput(" in ");\n                }\n                else {\n                    emitter.writeToOutputTrimmable(" " + tokenTable[binTokenId].text + " ");\n                }\n\n                emitter.emitJavascript(this.operand2, binTokenId, false);\n            }\n            else {\n                switch (this.nodeType) {\n                    case NodeType.Dot:\n                        if (!emitter.tryEmitConstant(this)) {\n                            emitter.emitJavascript(this.operand1, TokenID.Dot, false);\n                            emitter.writeToOutput(".");\n                            emitter.emitJavascriptName(<Identifier>this.operand2, false);\n                        }\n                        break;\n                    case NodeType.Index:\n                        emitter.emitIndex(this.operand1, this.operand2);\n                        break;\n\n                    case NodeType.Member:\n                        if (this.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>this.operand2).isAccessor()) {\n                            var funcDecl = <FuncDecl>this.operand2;\n                            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                                emitter.writeToOutput("get ");\n                            }\n                            else {\n                                emitter.writeToOutput("set ");\n                            }\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                        }\n                        else {\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                            emitter.writeToOutputTrimmable(": ");\n                        }\n                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Comma:\n                        emitter.emitJavascript(this.operand1, TokenID.Comma, false);\n                        if (emitter.emitState.inObjectLiteral) {\n                            emitter.writeLineToOutput(", ");\n                        }\n                        else {\n                            emitter.writeToOutput(",");\n                        }\n                        emitter.emitJavascript(this.op';
var v27353 = v27354 + 'erand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Is:\n                        throw new Error("should be de-sugared during type check");\n                    default:\n                        throw new Error("please implement in derived class");\n                }\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class ConditionalExpression extends Expression {\n        constructor (public operand1: AST,\n                     public operand2: AST,\n                     public operand3: AST) {\n            super(NodeType.ConditionalExpression);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckQMark(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.operand1, TokenID.Question, false);\n            emitter.writeToOutput(" ? ");\n            emitter.emitJavascript(this.operand2, TokenID.Question, false);\n            emitter.writeToOutput(" : ");\n            emitter.emitJavascript(this.operand3, TokenID.Question, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class NumberLiteral extends Expression {\n        constructor (public value: number, public hasEmptyFraction?: bool) {\n            super(NodeType.NumberLit);\n        }\n\n        public isNegativeZero = false;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.doubleType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return "num: " + this.printLabel();\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isNegativeZero) {\n                emitter.writeToOutput("-");\n            }\n\n            emitter.writeToOutput(this.value.toString());\n\n            if (this.hasEmptyFraction)\n                emitter.writeToOutput(".0");\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public printLabel() {\n            if (Math.floor(this.value) != this.value) {\n                return this.value.toFixed(2).toString();\n            }\n            else if (this.hasEmptyFraction) {\n                return this.value.toString() + ".0";\n            }\n            else {\n                return this.value.toString();\n            }\n        }\n    }\n\n    export class RegexLiteral extends Expression {\n        constructor (public regex) {\n            super(NodeType.Regex);\n        }\n        \n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.regexType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.regex.toString());\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class StringLiteral extends Expression {\n        constructor (public text: string) {\n            super(NodeType.QString);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitStringLiteral(this.text);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.stringType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return "st: " + this.text;\n        }\n\n        public printLabel() {\n            return this.text;\n        }\n    }\n\n    export class ModuleElement extends AST {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n    }\n\n    export class ImportDeclaration extends ModuleElement {\n        public isStatementOrExpression() { return true; }\n        public varFlags = VarFlags.None;\n        public isDynamicImport = false;\n        public isDeclaration() { return true; }\n\n        constructor (public id: Identifier, public alias: AST) {\n            super(NodeType.ImportDeclaration);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var mod = <ModuleType>this.alias.type;\n            // REVIEW: Only modules may be aliased for now, though there\'s no real\n            // restriction on what the typ';
var v27352 = v27353 + 'e symbol may be\n            if (!this.isDynamicImport || (this.id.sym && !(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef)) {\n                var prevModAliasId = emitter.modAliasId;\n                var prevFirstModAlias = emitter.firstModAlias;\n\n                emitter.recordSourceMappingStart(this);\n                emitter.emitParensAndCommentsInPlace(this, true);\n                emitter.writeToOutput("var " + this.id.actualText + " = ");\n                emitter.modAliasId = this.id.actualText;\n                emitter.firstModAlias = this.firstAliasedModToString();\n                emitter.emitJavascript(this.alias, TokenID.Tilde, false);\n                // the dynamic import case will insert the semi-colon automatically\n                if (!this.isDynamicImport) {\n                    emitter.writeToOutput(";");\n                }\n                emitter.emitParensAndCommentsInPlace(this, false);\n                emitter.recordSourceMappingEnd(this);\n\n                emitter.modAliasId = prevModAliasId;\n                emitter.firstModAlias = prevFirstModAlias;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckImportDecl(this);\n        }\n\n        public getAliasName(aliasAST?: AST = this.alias) : string {\n            if (aliasAST.nodeType == NodeType.Name) {\n                return (<Identifier>aliasAST).actualText;\n            } else {\n                var dotExpr = <BinaryExpression>aliasAST;\n                return this.getAliasName(dotExpr.operand1) + "." + this.getAliasName(dotExpr.operand2);\n            }\n        }\n\n        public firstAliasedModToString() {\n            if (this.alias.nodeType == NodeType.Name) {\n                return (<Identifier>this.alias).actualText;\n            }\n            else {\n                var dotExpr = <BinaryExpression>this.alias;\n                var firstMod = <Identifier>dotExpr.operand1;\n                return firstMod.actualText;\n            }\n        }\n    }\n\n    export class BoundDecl extends AST {\n        public init: AST = null;\n        public typeExpr: AST = null;\n        public varFlags = VarFlags.None;\n        public sym: Symbol = null;\n        public isDeclaration() { return true; }\n\n        constructor (public id: Identifier, nodeType: NodeType, public nestingLevel: number) {\n            super(nodeType);\n        }\n\n        public isStatementOrExpression() { return true; }\n\n        public isPrivate() { return hasFlag(this.varFlags, VarFlags.Private); }\n        public isPublic() { return hasFlag(this.varFlags, VarFlags.Public); }\n        public isProperty() { return hasFlag(this.varFlags, VarFlags.Property); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckBoundDecl(this);\n        }\n\n        public printLabel() {\n            return this.treeViewLabel();\n        }\n    }\n\n    export class VarDecl extends BoundDecl {\n        constructor (id: Identifier, nest: number) {\n            super(id, NodeType.VarDecl, nest);\n        }\n\n        public isAmbient() { return hasFlag(this.varFlags, VarFlags.Ambient); }\n        public isExported() { return hasFlag(this.varFlags, VarFlags.Exported); }\n        public isStatic() { return hasFlag(this.varFlags, VarFlags.Static); }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptVarDecl(this, tokenId);\n        }\n\n        public treeViewLabel() {\n            return "var " + this.id.actualText;\n        }\n    }\n\n    export class ArgDecl extends BoundDecl {\n        constructor (id: Identifier) {\n            super(id, NodeType.ArgDecl, 0);\n        }\n\n        public isOptional = false;\n\n        public isOptionalArg() { return this.isOptional || this.init; }\n\n        public treeViewLabel() {\n            return "arg: " + this.id.actualText;\n        }\n\n        public parameterPropertySym: FieldSymbol = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    var internalId = 0;\n\n    export class FuncDecl extends AST {\n        public hint: string = null;\n        public fncFlags = FncFlags.None;\n        public returnTypeAnnotation: AST = null;\n        public symbols: IHashTable;\n        public variableArgList = false;\n        public signature: Signature;\n        public envids: Identifier[];\n        public jumpRefs: Identifier[] = null;\n        public internalNameCache: string = null;\n        public tmp1Declared = false;\n        public enclosingFnc: FuncDecl = null;\n        public freeVariables: Symbol[] = [];\n        public unitIndex = -1;\n        public classDecl: NamedDeclaration = null;\n        public boundToProperty: VarDecl = null;\n        public isOverload = fa';
var v27351 = v27352 + 'lse;\n        public innerStaticFuncs: FuncDecl[] = [];\n        public isTargetTypedAsMethod = false;\n        public isInlineCallLiteral = false;\n        public accessorSymbol: Symbol = null;\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public returnStatementsWithExpressions: ReturnStatement[] = [];\n        public scopeType: Type = null; // Type of the FuncDecl, before target typing\n        public endingToken: ASTSpan = null;\n        public isDeclaration() { return true; }\n\n        constructor (public name: Identifier, public bod: ASTList, public isConstructor: bool,\n                     public arguments: ASTList, public vars: ASTList, public scopes: ASTList, public statics: ASTList,\n                     nodeType: number) {\n\n            super(nodeType);\n        }\n\n        public internalName(): string {\n            if (this.internalNameCache == null) {\n                var extName = this.getNameText();\n                if (extName) {\n                    this.internalNameCache = "_internal_" + extName;\n                }\n                else {\n                    this.internalNameCache = "_internal_" + internalId++;\n                }\n            }\n            return this.internalNameCache;\n        }\n\n        public hasSelfReference() { return hasFlag(this.fncFlags, FncFlags.HasSelfReference); }\n        public setHasSelfReference() { this.fncFlags |= FncFlags.HasSelfReference; }\n\n        public hasSuperReferenceInFatArrowFunction() { return hasFlag(this.fncFlags, FncFlags.HasSuperReferenceInFatArrowFunction); }\n        public setHasSuperReferenceInFatArrowFunction() { this.fncFlags |= FncFlags.HasSuperReferenceInFatArrowFunction; }\n\n        public addCloRef(id: Identifier, sym: Symbol): number {\n            if (this.envids == null) {\n                this.envids = new Identifier[];\n            }\n            this.envids[this.envids.length] = id;\n            var outerFnc = this.enclosingFnc;\n            if (sym) {\n                while (outerFnc && (outerFnc.type.symbol != sym.container)) {\n                    outerFnc.addJumpRef(sym);\n                    outerFnc = outerFnc.enclosingFnc;\n                }\n            }\n            return this.envids.length - 1;\n        }\n\n        public addJumpRef(sym: Symbol): void {\n            if (this.jumpRefs == null) {\n                this.jumpRefs = new Identifier[];\n            }\n            var id = new Identifier(sym.name);\n            this.jumpRefs[this.jumpRefs.length] = id;\n            id.sym = sym;\n            id.cloId = this.addCloRef(id, null);\n        }\n\n        public buildControlFlow(): ControlFlowContext {\n            var entry = new BasicBlock();\n            var exit = new BasicBlock();\n\n            var context = new ControlFlowContext(entry, exit);\n\n            var controlFlowPrefix = (ast: AST, parent: AST, walker: IAstWalker) => {\n                ast.addToControlFlow(walker.state);\n                return ast;\n            }\n\n            var walker = getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context);\n            context.walker = walker;\n            walker.walk(this.bod, this);\n\n            return context;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFunction(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptFunction(this);\n        }\n\n        public getNameText() {\n            if (this.name) {\n                return this.name.actualText;\n            }\n            else {\n                return this.hint;\n            }\n        }\n\n        public isMethod() {\n            return (this.fncFlags & FncFlags.Method) != FncFlags.None;\n        }\n\n        public isCallMember() { return hasFlag(this.fncFlags, FncFlags.CallMember); }\n        public isConstructMember() { return hasFlag(this.fncFlags, FncFlags.ConstructMember); }\n        public isIndexerMember() { return hasFlag(this.fncFlags, FncFlags.IndexerMember); }\n        public isSpecialFn() { return this.isCallMember() || this.isIndexerMember() || this.isConstructMember(); }\n        public isAnonymousFn() { return this.name === null; }\n        public isAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor) || hasFlag(this.fncFlags, FncFlags.SetAccessor); }\n        public isGetAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor); }\n        public isSetAccessor() { return hasFlag(this.fncFlags, FncFlags.SetAccessor); }\n        public isAmbient() { return hasFlag(this.fncFlags, FncFlags.Ambient); }\n        public isExported() { return hasFlag(this.fncFlags, FncFlags.Exported); }\n        public isPrivate() { return hasFlag(this.fncFlags, FncFlags.Private); }\n        public isPublic() { return hasFlag(this.fncFlags, FncFlags.Public); }\n        public isStatic() { return hasFlag(this.fncFlags, FncFlags.Static); }\n\n        public treeViewLabel() {\n            if (this.name == null) {\n                return "funcExpr";\n      ';
var v27350 = v27351 + '      }\n            else {\n                return "func: " + this.name.actualText\n            }\n        }\n\n        public ClearFlags(): void {\n            this.fncFlags = FncFlags.None;\n        }\n\n        public isSignature() { return (this.fncFlags & FncFlags.Signature) != FncFlags.None; }\n    }\n\n    export class LocationInfo {\n        constructor (public filename: string, public lineMap: number[], public unitIndex) { }\n    }\n\n    export var unknownLocationInfo = new LocationInfo("unknown", null, -1);\n\n    export class Script extends FuncDecl {\n        public locationInfo: LocationInfo = null;\n        public referencedFiles: IFileReference[] = [];\n        public requiresGlobal = false;\n        public requiresExtendsBlock = false;\n        public isResident = false;\n        public isDeclareFile = false;\n        public hasBeenTypeChecked = false;\n        public topLevelMod: ModuleDeclaration = null;\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public vars: ASTList;\n        public scopes: ASTList;\n        // Remember if the script contains Unicode chars, that is needed when generating code for this script object to decide the output file correct encoding.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n        public cachedEmitRequired: bool;\n\n        private setCachedEmitRequired(value: bool) {\n            this.cachedEmitRequired = value;\n            return this.cachedEmitRequired;\n        }\n\n        constructor (vars: ASTList, scopes: ASTList) {\n            super(new Identifier("script"), null, false, null, vars, scopes, null, NodeType.Script);\n            this.vars = vars;\n            this.scopes = scopes;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckScript(this);\n        }\n\n        public treeViewLabel() {\n            return "Script";\n        }\n\n        public emitRequired(emitOptions: EmitOptions) {\n            if (this.cachedEmitRequired != undefined) {\n                return this.cachedEmitRequired;\n            }\n\n            if (!this.isDeclareFile && !this.isResident && this.bod) {\n                if (this.bod.members.length == 0) {\n                    // allow empty files that are not declare files \n                    return this.setCachedEmitRequired(true);\n                }\n\n                for (var i = 0, len = this.bod.members.length; i < len; i++) {\n                    var stmt = this.bod.members[i];\n                    if (stmt.nodeType == NodeType.ModuleDeclaration) {\n                        if (!hasFlag((<ModuleDeclaration>stmt).modFlags, ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.ClassDeclaration) {\n                        if (!hasFlag((<ClassDeclaration>stmt).varFlags, VarFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.VarDecl) {\n                        if (!hasFlag((<VarDecl>stmt).varFlags, VarFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.FuncDecl) {\n                        if (!(<FuncDecl>stmt).isSignature()) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType != NodeType.InterfaceDeclaration && stmt.nodeType != NodeType.Empty) {\n                        return this.setCachedEmitRequired(true);\n                    }\n                }\n\n                if ( emitOptions.emitComments &&\n                    ((this.bod.preComments && this.bod.preComments.length > 0) || (this.bod.postComments && this.bod.postComments.length > 0))) {\n                    return this.setCachedEmitRequired(true);\n                }\n            }\n            return this.setCachedEmitRequired(false);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (this.emitRequired(emitter.emitOptions)) {\n                emitter.emitParensAndCommentsInPlace(this.bod, true);\n                emitter.emitJavascriptList(this.bod, null, TokenID.Semicolon, true, false, false, true, this.requiresExtendsBlock);\n                emitter.emitParensAndCommentsInPlace(this.bod, false);\n            }\n        }\n\n        private externallyVisibleImportedSymbols: Symbol[] = [];\n\n        public AddExternallyVisibleImportedSymbol(symbol: Symbol, checker: TypeChecker) {\n            if (this.isExternallyVisibleSymbol(symbol)) {\n                return;\n            }\n\n            // Before adding check if the external symbol is also marked for visibility\n            if (!symbol.getType().symbol.isExter';
var v27349 = v27350 + 'nallyVisible(checker)) {\n                // Report error\n                var quotes = "";\n                var moduleName = symbol.getType().symbol.prettyName;\n                if (!isQuoted(moduleName)) {\n                    quotes = "\'";\n                }\n                checker.errorReporter.simpleError(symbol.declAST, "Externally visible import statement uses non exported module " + quotes + moduleName + quotes);\n            }\n            this.externallyVisibleImportedSymbols.push(symbol);\n        }\n\n        public isExternallyVisibleSymbol(symbol: Symbol) {\n            for (var i = 0 ; i < this.externallyVisibleImportedSymbols.length; i++) {\n                if (this.externallyVisibleImportedSymbols[i] == symbol) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    export class NamedDeclaration extends ModuleElement {\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public isDeclaration() { return true; }\n\n        constructor (nodeType: NodeType,\n                     public name: Identifier,\n                     public members: ASTList) {\n            super(nodeType);\n        }\n    }\n\n    export class ModuleDeclaration extends NamedDeclaration {\n        public modFlags = ModuleFlags.ShouldEmitModuleDecl;\n        public mod: ModuleType;\n        public prettyName: string;\n        public amdDependencies: string[] = [];\n        public vars: ASTList;\n        public scopes: ASTList;\n        // Remember if the module contains Unicode chars, that is needed for dynamic module as we will generate a file for each.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n\n        constructor (name: Identifier, members: ASTList, vars: ASTList, scopes: ASTList, public endingToken: ASTSpan) {\n            super(NodeType.ModuleDeclaration, name, members);\n\n            this.vars = vars;\n            this.scopes = scopes;\n            this.prettyName = this.name.actualText;\n        }\n\n        public isExported() { return hasFlag(this.modFlags, ModuleFlags.Exported); }\n        public isAmbient() { return hasFlag(this.modFlags, ModuleFlags.Ambient); }\n        public isEnum() { return hasFlag(this.modFlags, ModuleFlags.IsEnum); }\n\n        public recordNonInterface() {\n            this.modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckModule(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (!hasFlag(this.modFlags, ModuleFlags.ShouldEmitModuleDecl)) {\n                emitter.emitParensAndCommentsInPlace(this, true);\n                emitter.emitJavascriptModule(this);\n                emitter.emitParensAndCommentsInPlace(this, false);\n            }\n        }\n    }\n\n    export class TypeDeclaration extends NamedDeclaration {\n        public varFlags = VarFlags.None;\n\n        constructor (nodeType: NodeType,\n                     name: Identifier,\n                     public extendsList: ASTList,\n                     public implementsList: ASTList,\n                     members: ASTList) {\n            super(nodeType, name, members);\n        }\n\n        public isExported() { \n            return hasFlag(this.varFlags, VarFlags.Exported);\n        }\n\n        public isAmbient() {\n            return hasFlag(this.varFlags, VarFlags.Ambient);\n        }\n    }\n\n    export class ClassDeclaration extends TypeDeclaration {\n        public knownMemberNames: any = {};\n        public constructorDecl: FuncDecl = null;\n        public constructorNestingLevel = 0;\n        public endingToken: ASTSpan = null;\n\n        constructor (name: Identifier,\n                     members: ASTList,\n                     extendsList: ASTList,\n                     implementsList: ASTList) {\n            super(NodeType.ClassDeclaration, name, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckClass(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptClass(this);\n        }\n    }\n\n    export class InterfaceDeclaration extends TypeDeclaration {\n        constructor (name: Identifier,\n                     members: ASTList,\n                     extendsList: ASTList,\n                     implementsList: ASTList) {\n            super(NodeType.InterfaceDeclaration, name, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckInterface(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n        }\n    }\n\n    export class Statement extends ModuleElement {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n            this.flags |= ASTFlags.IsStatement;\n        }\n\n        public isLoop() { return false; }\n\n        public i';
var v27348 = v27349 + 'sStatementOrExpression() { return true; }\n\n        public isCompoundStatement() { return this.isLoop(); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class LabeledStatement extends Statement {\n        constructor (public labels: ASTList, public stmt: AST) {\n            super(NodeType.LabeledStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.labels) {\n                var labelsLen = this.labels.members.length;\n                for (var i = 0; i < labelsLen; i++) {\n                    this.labels.members[i].emit(emitter, tokenId, startLine);\n                }\n            }\n            this.stmt.emit(emitter, tokenId, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            typeFlow.typeCheck(this.labels);\n            this.stmt = this.stmt.typeCheck(typeFlow);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var beforeBB = context.current;\n            var bb = new BasicBlock();\n            context.current = bb;\n            beforeBB.addSuccessor(bb);\n        }\n    }\n\n    export class Block extends Statement {\n        constructor (public statements: ASTList,\n                     public isStatementBlock: bool) {\n            super(NodeType.Block);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isStatementBlock) {\n                emitter.writeLineToOutput(" {");\n                emitter.indenter.increaseIndent();\n            } else {\n                emitter.setInVarBlock(this.statements.members.length);\n            }\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.statements) {\n                emitter.emitJavascriptList(this.statements, null, TokenID.Semicolon, true, false, false);\n            }\n            if (this.isStatementBlock) {\n                emitter.indenter.decreaseIndent();\n                emitter.emitIndent();\n                emitter.writeToOutput("}");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterIfNeeded = new BasicBlock();\n            context.pushStatement(this, context.current, afterIfNeeded);\n            if (this.statements) {\n                context.walk(this.statements, this);\n            }\n            context.walker.options.goChildren = false;\n            context.popStatement();\n            if (afterIfNeeded.predecessors.length > 0) {\n                context.current.addSuccessor(afterIfNeeded);\n                context.current = afterIfNeeded;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (!typeFlow.checker.styleSettings.emptyBlocks) {\n                if ((this.statements === null) || (this.statements.members.length == 0)) {\n                    typeFlow.checker.errorReporter.styleError(this, "empty block");\n                }\n            }\n\n            typeFlow.typeCheck(this.statements);\n            return this;\n        }\n    }\n\n    export class Jump extends Statement {\n        public target: string = null;\n        public hasExplicitTarget() { return (this.target); }\n        public resolvedTarget: Statement = null;\n\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public setResolvedTarget(parser: Parser, stmt: Statement): bool {\n            if (stmt.isLoop()) {\n                this.resolvedTarget = stmt;\n                return true;\n            }\n            if (this.nodeType === NodeType.Continue) {\n                parser.reportParseError("continue statement applies only to loops");\n                return false;\n            }\n            else {\n                if ((stmt.nodeType == NodeType.Switch) || this.hasExplicitTarget()) {\n                    this.resolvedTarget = stmt;\n                    return true;\n                }\n                else {\n                    parser.reportParseError("break statement with no label can apply only to a loop or switch statement");\n                    return false;\n                }\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.unconditionalBranch(this.resolvedTarget, (this.nodeType == NodeType.Continue));\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, s';
var v27347 = v27348 + 'tartLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.nodeType == NodeType.Break) {\n                emitter.writeToOutput("break");\n            }\n            else {\n                emitter.writeToOutput("continue");\n            }\n            if (this.hasExplicitTarget()) {\n                emitter.writeToOutput(" " + this.target);\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(";");\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class WhileStatement extends Statement {\n        public body: AST = null;\n\n        constructor (public cond: AST) {\n            super(NodeType.While);\n        }\n\n        public isLoop() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("while(");\n            emitter.emitJavascript(this.cond, TokenID.While, false);\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, false);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            context.addContent(this.cond);\n            var condBlock = context.current;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            condBlock.addSuccessor(afterLoop);\n            // TODO: check for while (true) and then only continue if afterLoop has predecessors\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class DoWhileStatement extends Statement {\n        public body: AST = null;\n        public whileAST: AST = null;\n        public cond: AST = null;\n        public isLoop() { return true; }\n\n        constructor () {\n            super(NodeType.DoWhile);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("do");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingStart(this.whileAST);\n            emitter.writeToOutput("while");\n            emitter.recordSourceMappingEnd(this.whileAST);\n            emitter.writeToOutput(\'(\');\n            emitter.emitJavascript(this.cond, TokenID.CloseParen, false);\n            emitter.writeToOutput(")");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(";");\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckDoWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n                context.addContent(this.cond);\n                // TODO: check for while (true) \n                context.current = afterLoop;\n                loopEnd.addSuccessor(afterLoop);\n            }\n            else {\n                context.addUnreachable(t';
var v27346 = v27347 + 'his.cond);\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class IfStatement extends Statement {\n        public thenBod: AST;\n        public elseBod: AST = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor (public cond: AST) {\n            super(NodeType.If);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("if(");\n            emitter.emitJavascript(this.cond, TokenID.If, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.thenBod, true);\n            if (this.elseBod) {\n                if (this.elseBod.nodeType === NodeType.If) {\n                    emitter.writeToOutput(" else ");\n                    this.elseBod.emit(emitter, tokenId, /*startLine:*/ false);\n                }\n                else {\n                    emitter.writeToOutput(" else");\n                    emitter.emitJavascriptStatements(this.elseBod, true);\n                }\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckIf(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            this.cond.addToControlFlow(context);\n            var afterIf = new BasicBlock();\n            var beforeIf = context.current;\n            context.pushStatement(this, beforeIf, afterIf);\n            var hasContinuation = false;\n            context.current = new BasicBlock();\n            beforeIf.addSuccessor(context.current);\n            context.walk(this.thenBod, this);\n            if (!context.noContinuation) {\n                hasContinuation = true;\n                context.current.addSuccessor(afterIf);\n            }\n            if (this.elseBod) {\n                // current block will be thenBod\n                context.current = new BasicBlock();\n                context.noContinuation = false;\n                beforeIf.addSuccessor(context.current);\n                context.walk(this.elseBod, this);\n                if (!context.noContinuation) {\n                    hasContinuation = true;\n                    context.current.addSuccessor(afterIf);\n                }\n                else {\n                    // thenBod created continuation for if statement\n                    if (hasContinuation) {\n                        context.noContinuation = false;\n                    }\n                }\n            }\n            else {\n                beforeIf.addSuccessor(afterIf);\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            var targetInfo = context.popStatement();\n            if (afterIf.predecessors.length > 0) {\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            if (hasContinuation) {\n                context.current = afterIf;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class ReturnStatement extends Statement {\n        public returnExpression: AST = null;\n\n        constructor () {\n            super(NodeType.Return);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.returnExpression) {\n                emitter.writeToOutput("return ");\n                emitter.emitJavascript(this.returnExpression, TokenID.Semicolon, false);\n\n                if (this.returnExpression.nodeType === NodeType.FuncDecl) {\n                    emitter.writeToOutput(";");\n                }\n            }\n            else {\n                emitter.writeToOutput("return;");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.returnStmt();\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckReturn(this);\n        }\n    }\n\n    export class EndCode extends AST {\n        constructor () {\n            super(NodeType.EndCode);\n        }\n    }\n\n    export class ForInStatement extends Statement {\n        constructor ';
var v27345 = v27346 + '(public lval: AST, public obj: AST) {\n            super(NodeType.ForIn);\n            if (this.lval && (this.lval.nodeType == NodeType.VarDecl)) {\n                (<BoundDecl>this.lval).varFlags |= VarFlags.AutoInit;\n            }\n        }\n        public statement: ASTSpan = new ASTSpan();\n        public body: AST;\n\n        public isLoop() { return true; }\n\n        public isFiltered() {\n            if (this.body) {\n                var singleItem: AST = null;\n                if (this.body.nodeType == NodeType.List) {\n                    var stmts = <ASTList>this.body;\n                    if (stmts.members.length == 1) {\n                        singleItem = stmts.members[0];\n                    }\n                }\n                else {\n                    singleItem = this.body;\n                }\n                // match template for filtering \'own\' properties from obj\n                if (singleItem !== null) {\n                    if (singleItem.nodeType == NodeType.Block) {\n                        var block = <Block>singleItem;\n                        if ((block.statements !== null) && (block.statements.members.length == 1)) {\n                            singleItem = block.statements.members[0];\n                        }\n                    }\n                    if (singleItem.nodeType == NodeType.If) {\n                        var cond = (<IfStatement>singleItem).cond;\n                        if (cond.nodeType == NodeType.Call) {\n                            var target = (<CallExpression>cond).target;\n                            if (target.nodeType == NodeType.Dot) {\n                                var binex = <BinaryExpression>target;\n                                if ((binex.operand1.nodeType == NodeType.Name) &&\n                                    (this.obj.nodeType == NodeType.Name) &&\n                                    ((<Identifier>binex.operand1).actualText == (<Identifier>this.obj).actualText)) {\n                                    var prop = <Identifier>binex.operand2;\n                                    if (prop.actualText == "hasOwnProperty") {\n                                        var args = (<CallExpression>cond).arguments;\n                                        if ((args !== null) && (args.members.length == 1)) {\n                                            var arg = args.members[0];\n                                            if ((arg.nodeType == NodeType.Name) &&\n                                                 (this.lval.nodeType == NodeType.Name)) {\n                                                if (((<Identifier>this.lval).actualText) == (<Identifier>arg).actualText) {\n                                                    return true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("for(");\n            emitter.emitJavascript(this.lval, TokenID.For, false);\n            emitter.writeToOutput(" in ");\n            emitter.emitJavascript(this.obj, TokenID.For, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (typeFlow.checker.styleSettings.forin) {\n                if (!this.isFiltered()) {\n                    typeFlow.checker.errorReporter.styleError(this, "no hasOwnProperty filter");\n                }\n            }\n            return typeFlow.typeCheckForIn(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.lval) {\n                context.addContent(this.lval);\n            }\n            if (this.obj) {\n                context.addContent(this.obj);\n            }\n\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopE';
var v27344 = v27345 + 'nd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            context.noContinuation = false;\n            loopHeader.addSuccessor(afterLoop);\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class ForStatement extends Statement {\n        public cond: AST;\n        public body: AST;\n        public incr: AST;\n\n        constructor (public init: AST) {\n            super(NodeType.For);\n        }\n\n        public isLoop() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("for(");\n            if (this.init) {\n                if (this.init.nodeType != NodeType.List) {\n                    emitter.emitJavascript(this.init, TokenID.For, false);\n                }\n                else {\n                    emitter.setInVarBlock((<ASTList>this.init).members.length); \n                    emitter.emitJavascriptList(this.init, null, TokenID.For, false, false, false);\n                }\n            }\n            emitter.writeToOutput("; ");\n            emitter.emitJavascript(this.cond, TokenID.For, false);\n            emitter.writeToOutput("; ");\n            emitter.emitJavascript(this.incr, TokenID.For, false);\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFor(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.init) {\n                context.addContent(this.init);\n            }\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var condBlock: BasicBlock = null;\n            var continueTarget = loopStart;\n            var incrBB: BasicBlock = null;\n            if (this.incr) {\n                incrBB = new BasicBlock();\n                continueTarget = incrBB;\n            }\n            if (this.cond) {\n                condBlock = context.current;\n                context.addContent(this.cond);\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n            }\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, continueTarget, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (this.incr) {\n                if (context.noContinuation) {\n                    if (incrBB.predecessors.length == 0) {\n                        context.addUnreachable(this.incr);\n                    }\n                }\n                else {\n                    context.current.addSuccessor(incrBB);\n                    context.current = incrBB;\n                    context.addContent(this.incr);\n                }\n            }\n            var loopEnd = context.current;\n            if (!(context.noContinuation)) {\n                loopEnd.addSuccessor(loopStart);\n\n            }\n            if (condBlock) {\n                condBlock.addSuccessor(afterLoop);\n                context.noContinuation = false;\n            }\n            if (afterLoop.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterLoop;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class WithStatement extends Statement {\n        public body: AST;\n\n        public isCompoundStatement() { return true; }\n\n        public withSym: WithSymbol = null;\n\n        constructor (public expr: AST) {\n            super(NodeType.With);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("with (");\n            if (this.expr) {\n                emitter.emitJavascript(this.expr, TokenID.With, false);\n            }\n\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWith(this);\n        }\n    }\n\n    export class SwitchStatement extends Statement {\n        public caseList:';
var v27343 = v27344 + ' ASTList;\n        public defaultCase: CaseStatement = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor (public val: AST) {\n            super(NodeType.Switch);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("switch(");\n            emitter.emitJavascript(this.val, TokenID.Identifier, false);\n            emitter.writeToOutput(")"); \n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.writeLineToOutput(" {");\n            emitter.indenter.increaseIndent();\n            var casesLen = this.caseList.members.length;\n            for (var i = 0; i < casesLen; i++) {\n                var caseExpr = this.caseList.members[i];\n                emitter.emitJavascript(caseExpr, TokenID.Case, true);\n            }\n            emitter.indenter.decreaseIndent();\n            emitter.emitIndent();\n            emitter.writeToOutput("}");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.caseList.members.length;\n            this.val = typeFlow.typeCheck(this.val);\n            for (var i = 0; i < len; i++) {\n                this.caseList.members[i] = typeFlow.typeCheck(this.caseList.members[i]);\n            }\n            this.defaultCase = <CaseStatement>typeFlow.typeCheck(this.defaultCase);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // if there are break statements that match this switch, then just link cond block with block after switch\n        public addToControlFlow(context: ControlFlowContext) {\n            var condBlock = context.current;\n            context.addContent(this.val);\n            var execBlock = new BasicBlock();\n            var afterSwitch = new BasicBlock();\n\n            condBlock.addSuccessor(execBlock);\n            context.pushSwitch(execBlock);\n            context.current = execBlock;\n            context.pushStatement(this, execBlock, afterSwitch);\n            context.walk(this.caseList, this);\n            context.popSwitch();\n            var targetInfo = context.popStatement();\n            var hasCondContinuation = (this.defaultCase == null);\n            if (this.defaultCase == null) {\n                condBlock.addSuccessor(afterSwitch);\n            }\n            if (afterSwitch.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterSwitch;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class CaseStatement extends Statement {\n        public expr: AST = null;\n        public body: ASTList;\n\n        constructor () {\n            super(NodeType.Case);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.expr) {\n                emitter.writeToOutput("case ");\n                emitter.emitJavascript(this.expr, TokenID.Identifier, false);\n            }\n            else {\n                emitter.writeToOutput("default");\n            }\n            emitter.writeToOutput(":");\n            if (this.body.members.length == 1 && this.body.members[0].nodeType == NodeType.Block) {\n                // The case statement was written with curly braces, so emit it with the appropriate formatting\n                emitter.emitJavascriptStatements(this.body, false);\n            }\n            else {\n                // No curly braces. Format in the expected way\n                emitter.writeLineToOutput("");\n                emitter.indenter.increaseIndent();\n                emitter.emitBareJavascriptStatements(this.body);\n                emitter.indenter.decreaseIndent();\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.expr = typeFlow.typeCheck(this.expr);\n            typeFlow.typeCheck(this.body);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // TODO: more reasoning about unreachable cases (such as duplicate literals as case expressions)\n        // for now, assume all cases are reachable, regardless of whether some cases fall through\n        public addToControlFlow(context: ControlFlowContext) {\n            var execBlock = new BasicBlock();\n            v';
var v27342 = v27343 + 'ar sw = context.currentSwitch[context.currentSwitch.length - 1];\n            // TODO: fall-through from previous (+ to end of switch)\n            if (this.expr) {\n                var exprBlock = new BasicBlock();\n                context.current = exprBlock;\n                sw.addSuccessor(exprBlock);\n                context.addContent(this.expr);\n                exprBlock.addSuccessor(execBlock);\n            }\n            else {\n                sw.addSuccessor(execBlock);\n            }\n            context.current = execBlock;\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class TypeReference extends AST {\n        constructor (public term: AST, public arrayCount: number) {\n            super(NodeType.TypeRef);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            throw new Error("should not emit a type ref");\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevInTCTR = typeFlow.inTypeRefTypeCheck;\n            typeFlow.inTypeRefTypeCheck = true;\n            var typeLink = getTypeLink(this, typeFlow.checker, true);\n            typeFlow.checker.resolveTypeLink(typeFlow.scope, typeLink, false);\n\n            if (this.term) {\n                typeFlow.typeCheck(this.term);\n            }\n\n            typeFlow.checkForVoidConstructor(typeLink.type, this);\n\n            this.type = typeLink.type;\n\n            // in error recovery cases, there may not be a term\n            if (this.term) {\n                this.term.type = this.type;\n            }\n\n            typeFlow.inTypeRefTypeCheck = prevInTCTR;\n            return this;\n        }\n    }\n\n    export class TryFinally extends Statement {\n        constructor (public tryNode: AST, public finallyNode: Finally) {\n            super(NodeType.TryFinally);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.tryNode, TokenID.Try, false);\n            emitter.emitJavascript(this.finallyNode, TokenID.Finally, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.tryNode = typeFlow.typeCheck(this.tryNode);\n            this.finallyNode = <Finally>typeFlow.typeCheck(this.finallyNode);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterFinally = new BasicBlock();\n            context.walk(this.tryNode, this);\n            var finBlock = new BasicBlock();\n            if (context.current) {\n                context.current.addSuccessor(finBlock);\n            }\n            context.current = finBlock;\n            context.pushStatement(this, null, afterFinally);\n            context.walk(this.finallyNode, this);\n            if (!context.noContinuation && context.current) {\n                context.current.addSuccessor(afterFinally);\n            }\n            if (afterFinally.predecessors.length > 0) {\n                context.current = afterFinally;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.popStatement();\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class TryCatch extends Statement {\n        constructor (public tryNode: Try, public catchNode: Catch) {\n            super(NodeType.TryCatch);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.tryNode, TokenID.Try, false);\n            emitter.emitJavascript(this.catchNode, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var beforeTry = context.current;\n            var tryBlock = new BasicBlock();\n            beforeTry.addSuccessor(tryBlock);\n            context.current = tryBlock;\n            var afterTryCatch = new BasicBlock();\n            context.pushStatement(this, null, afterTryCatch);\n            context.walk(this.tryNode, this);\n            if (!context.noContinuation) {\n                if (context.current) {\n                    context.current.addSuccessor(afterTryCatch);\n                }\n            }\n            context.current = new BasicBlock();\n            beforeTry.addSuccessor(context.current);\n            context.walk(this.catchNode, this);\n            context.popStatement();\n            if (!context.noContinuation)';
var v27341 = v27342 + ' {\n                if (context.current) {\n                    context.current.addSuccessor(afterTryCatch);\n                }\n            }\n            context.current = afterTryCatch;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.tryNode = <Try>typeFlow.typeCheck(this.tryNode);\n            this.catchNode = <Catch>typeFlow.typeCheck(this.catchNode);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class Try extends Statement {\n        constructor (public body: AST) {\n            super(NodeType.Try);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("try ");\n            emitter.emitJavascript(this.body, TokenID.Try, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.body = typeFlow.typeCheck(this.body);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.walker.options.goChildren = false;\n            context.noContinuation = false;\n        }\n    }\n\n    export class Catch extends Statement {\n        constructor (public param: VarDecl, public body: AST) {\n            super(NodeType.Catch);\n            if (this.param) {\n                this.param.varFlags |= VarFlags.AutoInit;\n            }\n        }\n        public statement: ASTSpan = new ASTSpan();\n        public containedScope: SymbolScope = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(" ");\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("catch (");\n            emitter.emitJavascript(this.param, TokenID.OpenParen, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascript(this.body, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.param) {\n                context.addContent(this.param);\n                var bodBlock = new BasicBlock();\n                context.current.addSuccessor(bodBlock);\n                context.current = bodBlock;\n            }\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevScope = typeFlow.scope;\n            typeFlow.scope = this.containedScope;\n            this.param = <VarDecl>typeFlow.typeCheck(this.param);\n            var exceptVar = new ValueLocation();\n            var varSym = new VariableSymbol((<VarDecl>this.param).id.text,\n                                          this.param.minChar,\n                                          typeFlow.checker.locationInfo.unitIndex,\n                                          exceptVar);\n            exceptVar.symbol = varSym;\n            exceptVar.typeLink = new TypeLink();\n            // var type for now (add syntax for type annotation)\n            exceptVar.typeLink.type = typeFlow.anyType;\n            var thisFnc = typeFlow.thisFnc;\n            if (thisFnc && thisFnc.type) {\n                exceptVar.symbol.container = thisFnc.type.symbol;\n            }\n            else {\n                exceptVar.symbol.container = null;\n            }\n            this.param.sym = exceptVar.symbol;\n            typeFlow.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol,\n                                 typeFlow.checker.errorReporter, false, false, false);\n            this.body = typeFlow.typeCheck(this.body);\n\n            // if we\'re in provisional typecheck mode, clean up the symbol entry\n            // REVIEW: This is obviously bad form, since we\'re counting on the internal\n            // layout of the symbol table, but this is also the only place where we insert\n            // symbols during typecheck\n            if (typeFlow.checker.inProvisionalTypecheckMode()) {\n                var table = typeFlow.scope.getTable();\n                (<any>table).secondaryTable.table[exceptVar.symbol.name] = undefined;\n            }\n            this.type = typeFlow.voidType;\n            typeFlow.scope = prevScope;\n            return this;\n        }\n    }\n\n    export class Finally extends Statement ';
var v27340 = v27341 + '{\n        constructor (public body: AST) {\n            super(NodeType.Finally);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("finally");\n            emitter.emitJavascript(this.body, TokenID.Finally, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.walker.options.goChildren = false;\n            context.noContinuation = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.body = typeFlow.typeCheck(this.body);\n            return this;\n        }\n    }\n\n    export class Comment extends AST {\n\n        public text: string[] = null;\n        public minLine: number;\n        public limLine: number;\n        private docCommentText: string = null;\n\n        constructor (public content: string, public isBlockComment: bool, public endsLine) {\n            super(NodeType.Comment);\n        }\n\n        public getText(): string[] {\n            if (this.text == null) {\n                if (this.isBlockComment) {\n                    this.text = this.content.split("\\n");\n                    for (var i = 0; i < this.text.length; i++) {\n                        this.text[i] = this.text[i].replace(/^\\s+|\\s+$/g, \'\');\n                    }\n                }\n                else {\n                    this.text = [(this.content.replace(/^\\s+|\\s+$/g, \'\'))];\n                }\n            }\n\n            return this.text;\n        }\n\n        public isDocComment() {\n            if (this.isBlockComment) {\n                return this.content.charAt(2) == "*";\n            }\n\n            return false;\n        }\n\n        public getDocCommentText() {\n            if (this.docCommentText == null) {\n                this.docCommentText = Comment.cleanJSDocComment(this.content);\n            }\n\n            return this.docCommentText;\n        }\n\n        static consumeLeadingSpace(line: string, startIndex: number, maxSpacesToRemove?: number) {\n            var endIndex = line.length;\n            if (maxSpacesToRemove != undefined) {\n                endIndex = min(startIndex + maxSpacesToRemove, endIndex);\n            }\n\n            for (; startIndex < endIndex; startIndex++) {\n                var charCode = line.charCodeAt(startIndex);\n                if (charCode != LexCodeSpace && charCode != LexCodeTAB) {\n                    return startIndex;\n                }\n            }\n            \n            if (endIndex != line.length) {\n                return endIndex;\n            }\n\n            return -1;\n        }\n\n        static isSpaceChar(line: string, index: number) {\n            var length = line.length;\n            if (index < length) {\n                var charCode = line.charCodeAt(index);\n                // If the character is space\n                return charCode == LexCodeSpace || charCode == LexCodeTAB;\n            }\n\n            // If the index is end of the line it is space\n            return index == length;\n        }\n\n        static cleanDocCommentLine(line: string, jsDocStyleComment: bool, jsDocLineSpaceToRemove?: number) {\n            var nonSpaceIndex = Comment.consumeLeadingSpace(line, 0);\n            if (nonSpaceIndex != -1) {\n                var jsDocSpacesRemoved = nonSpaceIndex;\n                if (jsDocStyleComment && line.charAt(nonSpaceIndex) == \'*\') { // remove leading * in case of jsDocComment\n                    var startIndex = nonSpaceIndex + 1;\n                    nonSpaceIndex = Comment.consumeLeadingSpace(line, startIndex, jsDocLineSpaceToRemove);\n\n                    if (nonSpaceIndex != -1) {\n                        jsDocSpacesRemoved = nonSpaceIndex - startIndex;\n                    } else {\n                        return null;\n                    }\n                }\n\n                return {\n                    minChar: nonSpaceIndex,\n                    limChar: line.charAt(line.length - 1) == "\\r" ? line.length - 1 : line.length,\n                    jsDocSpacesRemoved: jsDocSpacesRemoved\n                };\n            }\n\n            return null;\n        }\n\n        static cleanJSDocComment(content: string, spacesToRemove?: number) {\n            var docCommentLines: string[] = [];\n            content = content.replace("/**", ""); // remove /**\n            if (content.length >= 2 && content.charAt(content.length - 1) == "/" && content.charAt(content.length - 2) == "*") {\n                content = content.substring(0, content.length - 2); // remove last */\n            }\n            var lines = content.split("\\n");\n            var inParamTag = false;\n            for (var l = 0; l < lines.length; l++) {\n                var line = lines[l];\n                var clean';
var v27339 = v27340 + 'LinePos = Comment.cleanDocCommentLine(line, true, spacesToRemove);\n                if (!cleanLinePos) {\n                    // Whole line empty, read next line\n                    continue;\n                }\n\n                var docCommentText = "";\n                var prevPos = cleanLinePos.minChar;\n                for (var i = line.indexOf("@", cleanLinePos.minChar); 0 <= i && i < cleanLinePos.limChar; i = line.indexOf("@", i + 1)) {\n                    // We have encoutered @. \n                    // If we were omitting param comment, we dont have to do anything\n                    // other wise the content of the text till @ tag goes as doc comment\n                    var wasInParamtag = inParamTag;\n\n                    // Parse contents next to @\n                    if (line.indexOf("param", i + 1) == i + 1 && Comment.isSpaceChar(line, i + 6)) {\n                        // It is param tag. \n\n                        // If we were not in param tag earlier, push the contents from prev pos of the tag this tag start as docComment\n                        if (!wasInParamtag) {\n                            docCommentText += line.substring(prevPos, i);\n                        }\n\n                        // New start of contents \n                        prevPos = i;\n                        inParamTag = true;\n                    } else if (wasInParamtag) {\n                        // Non param tag start\n                        prevPos = i;\n                        inParamTag = false;\n                    }\n                }\n\n                if (!inParamTag) {\n                    docCommentText += line.substring(prevPos, cleanLinePos.limChar);\n                }\n\n                // Add line to comment text if it is not only white space line\n                var newCleanPos = Comment.cleanDocCommentLine(docCommentText, false);\n                if (newCleanPos) {\n                    if (spacesToRemove == undefined) {\n                        spacesToRemove = cleanLinePos.jsDocSpacesRemoved;\n                    }\n                    docCommentLines.push(docCommentText);\n                }\n            }\n            \n            return docCommentLines.join("\\n");\n        }\n\n        static getDocCommentText(comments: Comment[]) {\n            var docCommentText: string[] = [];\n            for (var c = 0 ; c < comments.length; c++) {\n                var commentText = comments[c].getDocCommentText();\n                if (commentText != "") {\n                    docCommentText.push(commentText);\n                }\n            }\n            return docCommentText.join("\\n");\n        }\n\n        static getParameterDocCommentText(param: string, fncDocComments: Comment[]) {\n            if (fncDocComments.length == 0 || !fncDocComments[0].isBlockComment) {\n                // there were no fnc doc comments and the comment is not block comment then it cannot have \n                // @param comment that can be parsed\n                return "";\n            }\n            \n            for (var i = 0; i < fncDocComments.length; i++) {\n                var commentContents = fncDocComments[i].content;\n                for (var j = commentContents.indexOf("@param", 0); 0 <= j; j = commentContents.indexOf("@param", j)) {\n                    j += 6;\n                    if (!Comment.isSpaceChar(commentContents, j)) {\n                        // This is not param tag but a tag line @paramxxxxx\n                        continue;\n                    }\n\n                    // This is param tag. Check if it is what we are looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j);\n                    if (j == -1) {\n                        break;\n                    }\n                    \n                    // Ignore the type expression\n                    if (commentContents.charCodeAt(j) == LexCodeLC) {\n                        j++;\n                        // Consume the type\n                        var charCode = 0;\n                        for (var curlies = 1; j < commentContents.length; j++) {\n                            charCode = commentContents.charCodeAt(j);\n                            // { character means we need to find another } to match the found one\n                            if (charCode == LexCodeLC) {\n                                curlies++;\n                                continue;\n                            }\n\n                            // } char\n                            if (charCode == LexCodeRC) {\n                                curlies--;\n                                if (curlies == 0) {\n                                    // We do not have any more } to match the type expression is ignored completely\n                                    break;\n                                } else {\n                                    // there are more { to be matched with }\n                                    continue;\n                                }\n                            }\n\n                            // Found start';
var v27338 = v27339 + ' of another tag\n                            if (charCode == LexCodeAtSign) {\n                                break;\n                            }\n                        }\n\n                        // End of the comment\n                        if (j == commentContents.length) {\n                            break;\n                        }\n\n                        // End of the tag, go onto looking for next tag\n                        if (charCode == LexCodeAtSign) {\n                            continue;\n                        }\n\n                        j = Comment.consumeLeadingSpace(commentContents, j + 1);\n                        if (j == -1) {\n                            break;\n                        }\n                    }\n\n                    // Parameter name\n                    if (param != commentContents.substr(j, param.length) || !Comment.isSpaceChar(commentContents, j + param.length)) {\n                        // this is not the parameter we are looking for\n                        continue;\n                    }\n\n                    // Found the parameter we were looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j + param.length);\n                    if (j == -1) {\n                        return "";\n                    }\n                    \n                    var endOfParam = commentContents.indexOf("@", j);\n                    var paramHelpString = commentContents.substring(j, endOfParam < 0 ? commentContents.length : endOfParam);\n\n                    // Find alignement spaces to remove\n                    var paramSpacesToRemove: number = undefined;\n                    var paramLineIndex = commentContents.substring(0, j).lastIndexOf("\\n") + 1;\n                    if (paramLineIndex != 0) {\n                        if (paramLineIndex < j && commentContents.charAt(paramLineIndex + 1) == "\\r") {\n                            paramLineIndex++;\n                        }\n                    }\n                    var startSpaceRemovalIndex = Comment.consumeLeadingSpace(commentContents, paramLineIndex);\n                    if (startSpaceRemovalIndex != j && commentContents.charAt(startSpaceRemovalIndex) == "*") {\n                        paramSpacesToRemove = j - startSpaceRemovalIndex - 1;\n                    }\n\n                    // Clean jsDocComment and return\n                    return Comment.cleanJSDocComment(paramHelpString, paramSpacesToRemove);\n                }\n            }\n\n            return "";\n        }\n\n        static getDocCommentTextOfSignatures(signatures: Signature[]) {\n            var comments: string[] = [];\n            for (var i = 0; i < signatures.length; i++) {\n                var signatureDocComment = TypeScript.Comment.getDocCommentText(signatures[i].declAST.getDocComments());\n                if (signatureDocComment != "") {\n                    comments.push(signatureDocComment);\n                }\n            }\n\n            return comments.join("\\n");\n        }\n    }\n\n    export class DebuggerStatement extends Statement {\n        constructor () {\n            super(NodeType.Debugger);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeLineToOutput("debugger;");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript.AstWalkerWithDetailCallback {\n    export interface AstWalkerDetailCallback {\n        EmptyCallback? (pre, ast: AST): bool;\n        EmptyExprCallback? (pre, ast: AST): bool;\n        TrueCallback? (pre, ast: AST): bool;\n        FalseCallback? (pre, ast: AST): bool;\n        ThisCallback? (pre, ast: AST): bool;\n        SuperCallback? (pre, ast: AST): bool;\n        QStringCallback? (pre, ast: AST): bool;\n        RegexCallback? (pre, ast: AST): bool;\n        NullCallback? (pre, ast: AST): bool;\n        ArrayLitCallback? (pre, ast: AST): bool;\n        ObjectLitCallback? (pre, ast: AST): bool;\n        VoidCallback? (pre, ast: AST): bool;\n        CommaCallback? (pre, ast: AST): bool;\n        PosCallback? (pre, ast: AST): bool;\n        NegCallback? (pre, ast: AST): bool;\n        DeleteCallback? (pre, ast: AST): bool;\n        AwaitCal';
var v27337 = v27338 + "lback? (pre, ast: AST): bool;\n        InCallback? (pre, ast: AST): bool;\n        DotCallback? (pre, ast: AST): bool;\n        FromCallback? (pre, ast: AST): bool;\n        IsCallback? (pre, ast: AST): bool;\n        InstOfCallback? (pre, ast: AST): bool;\n        TypeofCallback? (pre, ast: AST): bool;\n        NumberLitCallback? (pre, ast: AST): bool;\n        NameCallback? (pre, identifierAst: Identifier): bool;\n        TypeRefCallback? (pre, ast: AST): bool;\n        IndexCallback? (pre, ast: AST): bool;\n        CallCallback? (pre, ast: AST): bool;\n        NewCallback? (pre, ast: AST): bool;\n        AsgCallback? (pre, ast: AST): bool;\n        AsgAddCallback? (pre, ast: AST): bool;\n        AsgSubCallback? (pre, ast: AST): bool;\n        AsgDivCallback? (pre, ast: AST): bool;\n        AsgMulCallback? (pre, ast: AST): bool;\n        AsgModCallback? (pre, ast: AST): bool;\n        AsgAndCallback? (pre, ast: AST): bool;\n        AsgXorCallback? (pre, ast: AST): bool;\n        AsgOrCallback? (pre, ast: AST): bool;\n        AsgLshCallback? (pre, ast: AST): bool;\n        AsgRshCallback? (pre, ast: AST): bool;\n        AsgRs2Callback? (pre, ast: AST): bool;\n        QMarkCallback? (pre, ast: AST): bool;\n        LogOrCallback? (pre, ast: AST): bool;\n        LogAndCallback? (pre, ast: AST): bool;\n        OrCallback? (pre, ast: AST): bool;\n        XorCallback? (pre, ast: AST): bool;\n        AndCallback? (pre, ast: AST): bool;\n        EqCallback? (pre, ast: AST): bool;\n        NeCallback? (pre, ast: AST): bool;\n        EqvCallback? (pre, ast: AST): bool;\n        NEqvCallback? (pre, ast: AST): bool;\n        LtCallback? (pre, ast: AST): bool;\n        LeCallback? (pre, ast: AST): bool;\n        GtCallback? (pre, ast: AST): bool;\n        GeCallback? (pre, ast: AST): bool;\n        AddCallback? (pre, ast: AST): bool;\n        SubCallback? (pre, ast: AST): bool;\n        MulCallback? (pre, ast: AST): bool;\n        DivCallback? (pre, ast: AST): bool;\n        ModCallback? (pre, ast: AST): bool;\n        LshCallback? (pre, ast: AST): bool;\n        RshCallback? (pre, ast: AST): bool;\n        Rs2Callback? (pre, ast: AST): bool;\n        NotCallback? (pre, ast: AST): bool;\n        LogNotCallback? (pre, ast: AST): bool;\n        IncPreCallback? (pre, ast: AST): bool;\n        DecPreCallback? (pre, ast: AST): bool;\n        IncPostCallback? (pre, ast: AST): bool;\n        DecPostCallback? (pre, ast: AST): bool;\n        TypeAssertionCallback? (pre, ast: AST): bool;\n        FuncDeclCallback? (pre, funcDecl: FuncDecl): bool;\n        MemberCallback? (pre, ast: AST): bool;\n        VarDeclCallback? (pre, varDecl: VarDecl): bool;\n        ArgDeclCallback? (pre, ast: AST): bool;\n        ReturnCallback? (pre, ast: AST): bool;\n        BreakCallback? (pre, ast: AST): bool;\n        ContinueCallback? (pre, ast: AST): bool;\n        ThrowCallback? (pre, ast: AST): bool;\n        ForCallback? (pre, ast: AST): bool;\n        ForInCallback? (pre, ast: AST): bool;\n        IfCallback? (pre, ast: AST): bool;\n        WhileCallback? (pre, ast: AST): bool;\n        DoWhileCallback? (pre, ast: AST): bool;\n        BlockCallback? (pre, block: Block): bool;\n        CaseCallback? (pre, ast: AST): bool;\n        SwitchCallback? (pre, ast: AST): bool;\n        TryCallback? (pre, ast: AST): bool;\n        TryCatchCallback? (pre, ast: AST): bool;\n        TryFinallyCallback? (pre, ast: AST): bool;\n        FinallyCallback? (pre, ast: AST): bool;\n        CatchCallback? (pre, ast: AST): bool;\n        ListCallback? (pre, astList: ASTList): bool;\n        ScriptCallback? (pre, script: Script): bool;\n        ClassDeclarationCallback? (pre, ast: AST): bool;\n        InterfaceDeclarationCallback? (pre, interfaceDecl: InterfaceDeclaration): bool;\n        ModuleDeclarationCallback? (pre, moduleDecl: ModuleDeclaration): bool;\n        ImportDeclarationCallback? (pre, ast: AST): bool;\n        WithCallback? (pre, ast: AST): bool;\n        LabelCallback? (pre, labelAST: AST): bool;\n        LabeledStatementCallback? (pre, ast: AST): bool;\n        EBStartCallback? (pre, ast: AST): bool;\n        GotoEBCallback? (pre, ast: AST): bool;\n        EndCodeCallback? (pre, ast: AST): bool;\n        ErrorCallback? (pre, ast: AST): bool;\n        CommentCallback? (pre, ast: AST): bool;\n        DebuggerCallback? (pre, ast: AST): bool;\n        DefaultCallback? (pre, ast: AST): bool;\n    }\n\n    export function walk(script: Script, callback: AstWalkerDetailCallback): void {\n        var pre = (cur: AST, parent: AST) => {\n            walker.options.goChildren = AstWalkerCallback(true, cur, callback);\n            return cur;\n        }\n\n        var post = (cur: AST, parent: AST) => {\n            AstWalkerCallback(false, cur, callback);\n            return cur;\n        }\n\n        var walker = TypeScript.getAstWalkerFactory().getWalker(pre, post);\n        walker.walk(script, null);\n    }\n\n    function AstWalkerCallback(pre: bool, ast: AST, callback: AstWalkerDetailCallback): bool {\n        // See if the Callback needs to be handled using spe";
var v27336 = v27337 + 'cific one or default one\n        var nodeType = ast.nodeType;\n        var callbackString = (<any>NodeType)._map[nodeType] + "Callback";\n        if (callback[callbackString]) {\n            return callback[callbackString](pre, ast);\n        }\n\n        if (callback.DefaultCallback) {\n            return callback.DefaultCallback(pre, ast);\n        }\n\n        return true;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface IAstWalker {\n        walk(ast: AST, parent: AST): AST;\n        options: AstWalkOptions;\n        state: any; // user state object\n    }\n\n    export class AstWalkOptions {\n        public goChildren = true;\n        public goNextSibling = true;\n        public reverseSiblings = false; // visit siblings in reverse execution order\n\n        public stopWalk(stop:bool = true) {\n            this.goChildren = !stop;\n            this.goNextSibling = !stop;\n        }\n    }\n\n    export interface IAstWalkCallback {\n        (ast: AST, parent: AST, walker: IAstWalker): AST;\n    }\n\n    export interface IAstWalkChildren {\n        (preAst: AST, parent: AST, walker: IAstWalker): void;\n    }\n\n    class AstWalker implements IAstWalker {\n        constructor (\n            private childrenWalkers: IAstWalkChildren[],\n            private pre: IAstWalkCallback,\n            private post: IAstWalkCallback,\n            public options: AstWalkOptions,\n            public state: any) {\n        }\n\n        public walk(ast: AST, parent: AST): AST {\n            var preAst = this.pre(ast, parent, this);\n            if (preAst === undefined) {\n                preAst = ast;\n            }\n            if (this.options.goChildren) {\n                var svGoSib = this.options.goNextSibling;\n                this.options.goNextSibling = true;\n                // Call the "walkChildren" function corresponding to "nodeType".\n                this.childrenWalkers[ast.nodeType](ast, parent, this);\n                this.options.goNextSibling = svGoSib;\n            }\n            else {\n                // no go only applies to children of node issuing it\n                this.options.goChildren = true;\n            }\n            if (this.post) {\n                var postAst = this.post(preAst, parent, this);\n                if (postAst === undefined) {\n                    postAst = preAst;\n                }\n                return postAst;\n            }\n            else {\n                return preAst;\n            }\n        }\n    }\n\n    export class AstWalkerFactory {\n        private childrenWalkers: IAstWalkChildren[] = [];\n\n        constructor () {\n            this.initChildrenWalkers();\n        }\n\n        public walk(ast: AST, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): AST {\n            return this.getWalker(pre, post, options, state).walk(ast, null)\n        }\n\n        public getWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            return this.getSlowWalker(pre, post, options, state);\n        }\n\n        private getSlowWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            if (!options) {\n                options = new AstWalkOptions();\n            }\n\n            return new AstWalker(this.childrenWalkers, pre, post, options, state);\n        }\n\n        private initChildrenWalkers(): void {\n            this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChild';
var v27335 = v27336 + "ren;\n            this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;\n            this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalker";
var v27334 = v27335 + 's[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;\n            this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren;\n            this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren;\n            this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren;\n            this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren;\n            this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren;\n            this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren;\n            this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;\n            this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren;\n            this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren;\n            this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren;\n            this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren;\n            this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren;\n            this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren;\n            this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren;\n            this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;\n            this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;\n            this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;\n            this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;\n            this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;\n            this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;\n            this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren;\n            this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren;\n            this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;\n            this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone;\n\n            // Verify the code is up to date with the enum\n            for (var e in (<any>NodeType)._map) {\n                if ((<any>this.childrenWalkers)[e] === undefined) {\n                    throw new Error("initWalkers function is not up to date with enum content!");\n                }\n            }\n        }\n    }\n\n    var globalAstWalkerFactory: AstWalkerFactory;\n\n    export function getAstWalkerFactory(): AstWalkerFactory {\n        if (!globalAstWalkerFactory) {\n            globalAstWalkerFactory = new AstWalkerFactory();\n        }\n        return globalAstWalkerFactory;\n    }\n\n    module ChildrenWalkers {\n        export function walkNone(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            // Nothing to do\n        }\n\n        export function walkListChildren(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            var len = preAst.members.length;\n            if (walker.options.reverseSiblings) {\n                for (var i = len - 1; i >= 0; i--) {\n                    if (walker.options.goNextSibling) {\n                        preAst.m';
var v27333 = v27334 + "embers[i] = walker.walk(preAst.members[i], preAst);\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < len; i++) {\n                    if (walker.options.goNextSibling) {\n                        preAst.members[i] = walker.walk(preAst.members[i], preAst);\n                    }\n                }\n            }\n        }\n\n        export function walkUnaryExpressionChildren(preAst: UnaryExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.castTerm) {\n                preAst.castTerm = walker.walk(preAst.castTerm, preAst);\n            }\n            if (preAst.operand) {\n                preAst.operand = walker.walk(preAst.operand, preAst);\n            }\n        }\n\n        export function walkBinaryExpressionChildren(preAst: BinaryExpression, parent: AST, walker: IAstWalker): void {\n            if (walker.options.reverseSiblings) {\n                if (preAst.operand2) {\n                    preAst.operand2 = walker.walk(preAst.operand2, preAst);\n                }\n                if ((preAst.operand1) && (walker.options.goNextSibling)) {\n                    preAst.operand1 = walker.walk(preAst.operand1, preAst);\n                }\n            } else {\n                if (preAst.operand1) {\n                    preAst.operand1 = walker.walk(preAst.operand1, preAst);\n                }\n                if ((preAst.operand2) && (walker.options.goNextSibling)) {\n                    preAst.operand2 = walker.walk(preAst.operand2, preAst);\n                }\n            }\n        }\n\n        export function walkTypeReferenceChildren(preAst: TypeReference, parent: AST, walker: IAstWalker): void {\n            if (preAst.term) {\n                preAst.term = walker.walk(preAst.term, preAst);\n            }\n        }\n\n        export function walkCallExpressionChildren(preAst: CallExpression, parent: AST, walker: IAstWalker): void {\n            if (!walker.options.reverseSiblings) {\n                preAst.target = walker.walk(preAst.target, preAst);\n            }\n            if (preAst.arguments && (walker.options.goNextSibling)) {\n                preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst);\n            }\n            if ((walker.options.reverseSiblings) && (walker.options.goNextSibling)) {\n                preAst.target = walker.walk(preAst.target, preAst);\n            }\n        }\n\n        export function walkTrinaryExpressionChildren(preAst: ConditionalExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.operand1) {\n                preAst.operand1 = walker.walk(preAst.operand1, preAst);\n            }\n            if (preAst.operand2 && (walker.options.goNextSibling)) {\n                preAst.operand2 = walker.walk(preAst.operand2, preAst);\n            }\n            if (preAst.operand3 && (walker.options.goNextSibling)) {\n                preAst.operand3 = walker.walk(preAst.operand3, preAst);\n            }\n        }\n\n        export function walkFuncDeclChildren(preAst: FuncDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            }\n            if (preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling)) {\n                preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst);\n            }\n            if (preAst.returnTypeAnnotation && (walker.options.goNextSibling)) {\n                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);\n            }\n            if (preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling)) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkBoundDeclChildren(preAst: BoundDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n            if ((preAst.typeExpr) && (walker.options.goNextSibling)) {\n                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);\n            }\n        }\n\n        export function walkReturnStatementChildren(preAst: ReturnStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.returnExpression) {\n                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);\n            }\n        }\n\n        export function walkForStatementChildren(preAst: ForStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n\n            if (preAst.cond && walker.options.goNextSibling) {\n                preAst.cond = walker.walk(preAst.cond, preAst);\n            }\n\n            if (preAst.incr && walker.options.goNextSibling) {\n                pr";
var v27332 = v27333 + "eAst.incr = walker.walk(preAst.incr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkForInStatementChildren(preAst: ForInStatement, parent: AST, walker: IAstWalker): void {\n            preAst.lval = walker.walk(preAst.lval, preAst);\n            if (walker.options.goNextSibling) {\n                preAst.obj = walker.walk(preAst.obj, preAst);\n            }\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkIfStatementChildren(preAst: IfStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.thenBod && (walker.options.goNextSibling)) {\n                preAst.thenBod = walker.walk(preAst.thenBod, preAst);\n            }\n            if (preAst.elseBod && (walker.options.goNextSibling)) {\n                preAst.elseBod = walker.walk(preAst.elseBod, preAst);\n            }\n        }\n\n        export function walkWhileStatementChildren(preAst: WhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkDoWhileStatementChildren(preAst: DoWhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkBlockChildren(preAst: Block, parent: AST, walker: IAstWalker): void {\n            if (preAst.statements) {\n                preAst.statements = <ASTList>walker.walk(preAst.statements, preAst);\n            }\n        }\n\n        export function walkCaseStatementChildren(preAst: CaseStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = <ASTList>walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkSwitchStatementChildren(preAst: SwitchStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.val) {\n                preAst.val = walker.walk(preAst.val, preAst);\n            }\n\n            if ((preAst.caseList) && walker.options.goNextSibling) {\n                preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst);\n            }\n        }\n\n        export function walkTryChildren(preAst: Try, parent: AST, walker: IAstWalker): void {\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkTryCatchChildren(preAst: TryCatch, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryNode) {\n                preAst.tryNode = <Try>walker.walk(preAst.tryNode, preAst);\n            }\n\n            if ((preAst.catchNode) && walker.options.goNextSibling) {\n                preAst.catchNode = <Catch>walker.walk(preAst.catchNode, preAst);\n            }\n        }\n\n        export function walkTryFinallyChildren(preAst: TryFinally, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryNode) {\n                preAst.tryNode = walker.walk(preAst.tryNode, preAst);\n            }\n\n            if (preAst.finallyNode && walker.options.goNextSibling) {\n                preAst.finallyNode = <Finally>walker.walk(preAst.finallyNode, preAst);\n            }\n        }\n\n        export function walkFinallyChildren(preAst: Finally, parent: AST, walker: IAstWalker): void {\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkCatchChildren(preAst: Catch, parent: AST, walker: IAstWalker): void {\n            if (preAst.param) {\n                preAst.param = <VarDecl>walker.walk(preAst.param, preAst);\n            }\n\n            if ((preAst.body) && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkRecordChildren(preAst: NamedDeclaration, parent: AST, walker: IAstWalker): void {\n            preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            if (walker.options.goNextSibling && preAst.members) {\n                preAst.members = <ASTList>walker.walk(preAst.members, preAst);\n            }\n\n        }\n\n        export function walkNamedTypeChildren(preAst: TypeDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n";
var v27331 = v27332 + '\n        export function walkClassDeclChildren(preAst: ClassDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            if (walker.options.goNextSibling && preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (walker.options.goNextSibling && preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkScriptChildren(preAst: Script, parent: AST, walker: IAstWalker): void {\n            if (preAst.bod) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkTypeDeclChildren(preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            // walked arguments as part of members\n            if (walker.options.goNextSibling && preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (walker.options.goNextSibling && preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkModuleDeclChildren(preAst: ModuleDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkImportDeclChildren(preAst: ImportDeclaration, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.alias) {\n                preAst.alias = walker.walk(preAst.alias, preAst);\n            }\n        }\n\n        export function walkWithStatementChildren(preAst: WithStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkLabelChildren(preAst: Label, parent: AST, walker: IAstWalker): void {\n            //TODO: Walk "id"?\n        }\n\n        export function walkLabeledStatementChildren(preAst: LabeledStatement, parent: AST, walker: IAstWalker): void {\n            preAst.labels = <ASTList>walker.walk(preAst.labels, preAst);\n            if (walker.options.goNextSibling) {\n                preAst.stmt = walker.walk(preAst.stmt, preAst);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    class Base64Format {\n        static encodedValues = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n        static encode(inValue: number) {\n            if (inValue < 64) {\n                return encodedValues.charAt(inValue);\n            }\n            throw TypeError(inValue + ": not a 64 based value");\n        }\n\n        static decodeChar(inChar: string) {\n            if (inChar.length === 1) {\n                return encodedValues.indexOf(inChar);\n            } else {\n                throw TypeError(\'"\' + inChar + \'" must have length 1\');\n            }\n        }\n    }\n\n    export class Base64VLQFormat {\n        static encode(inValue: number) {\n            // Add a new least significant bit that has the sign of the value.\n            // if negative number the least significant bit that gets added to the number has value 1\n            // else least significant bit value that gets added is 0\n            // eg. -1 changes to binary : 01 [1] => 3\n            //     +1 changes to binary : 01 [0] => 2\n            if (inValue < 0) {\n                inValue = ((-inValue) << 1) + 1;\n            }\n            else {\n                inValue = inValue << 1;\n            }\n\n            // Encode 5 bits at a time starting from least significant bits\n            var encodedStr = "";\n            do {\n                var currentDigit = inValue & 31; // 11111\n                inValue = inValue >> 5;\n                if (inValue > 0) {\n                    // There are still more digits to decode, set the msb (6th bit)\n                    currentDigit = currentDigit | 32; \n               ';
var v27330 = v27331 + ' }\n                encodedStr = encodedStr + Base64Format.encode(currentDigit);\n            } while (inValue > 0);\n\n            return encodedStr;\n        }\n\n        static decode(inString: string) {\n            var result = 0;\n            var negative = false;\n\n            var shift = 0;\n            for (var i = 0; i < inString.length; i++) {\n                var byte = Base64Format.decodeChar(inString[i]);\n                if (i === 0) {\n                    // Sign bit appears in the LSBit of the first value\n                    if ((byte & 1) === 1) {\n                        negative = true;\n                    }\n                    result = (byte >> 1) & 15; // 1111x\n                } else {\n                    result = result | ((byte & 31) << shift); // 11111\n                }\n\n                shift += (i == 0) ? 4 : 5;\n\n                if ((byte & 32) === 32) {\n                    // Continue\n                } else {\n                    return { value: negative ? -(result) : result, rest: inString.substr(i + 1) };\n                }\n            }\n\n            throw new Error(\'Base64 value "\' + inString + \'" finished with a continuation bit\');\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Binder {\n        constructor(public checker: TypeChecker) { }\n        \n        public resolveBaseTypeLinks(typeLinks: TypeLink[], scope: SymbolScope) {\n            var extendsList: Type[] = null;\n            if (typeLinks) {\n                extendsList = new Type[];\n                for (var i = 0, len = typeLinks.length; i < len; i++) {\n                    extendsList[i] = this.checker.resolveBaseTypeLink(typeLinks[i], scope);\n                }\n            }\n            return extendsList;\n        }\n\n        public resolveBases(scope: SymbolScope, type: Type) {\n            type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope);\n\n            var i = 0, len = type.extendsList.length;\n            var derivedIsClass = type.isClassInstance();\n            for (; i < len; i++) {\n                var baseIsClass = type.extendsList[i].isClassInstance();\n                if (type.extendsList[i] != this.checker.anyType) {\n                    var baseRef = type.extendsTypeLinks[i].ast;\n                    if (derivedIsClass) {\n                        if (!baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "A class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is not a class.");\n                        }\n                    }\n                    else {\n                        if (baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class.");\n                        }\n                    }\n                }\n            }\n\n            type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope);\n\n            if (type.implementsList) {\n                for (i = 0, len = type.implementsList.length; i < len; i++) {\n                    var iface = type.implementsList[i];\n                    var baseRef = type.implementsTypeLinks[i].ast;\n                    if (iface.isClassInstance()) {\n                        if (derivedIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.");\n                        }\n                    }\n                }\n            }\n        }\n\n        public resolveSignatureGroup(signatureGroup: SignatureGroup, scope: SymbolScope, instanceType: Type) {\n            var supplyVar = !(signatureGroup.hasImplementation);\n            for (var i = 0, len = signatureGroup.signatures.length; i < len; i++) {\n                var signature = signatureGroup.signatures[i];\n                if (instanceType) {\n                    signature.returnType.type = instanceType;\n                }\n                else {\n                    this.checker.resolveTypeLink(scope, signature.returnType, supplyVar);\n               ';
var v27329 = v27330 + ' }\n                var paramLen = signature.parameters.length;\n                for (var j = 0; j < paramLen; j++) {\n                    this.bindSymbol(scope, signature.parameters[j]);\n                }\n                if (signature.hasVariableArgList) {\n                    // check that last parameter has an array type\n                    var lastParam = <ParameterSymbol>signature.parameters[paramLen - 1];\n                    lastParam.argsOffset = paramLen - 1;\n                    if (!lastParam.getType().isArray()) {\n                        this.checker.errorReporter.simpleErrorFromSym(lastParam,\n                                                                 "... parameter must have array type");\n                        lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);\n                    }\n                }\n            }\n        }\n\n        public bindType(scope: SymbolScope, type: Type, instanceType: Type): void {\n            if (instanceType) {\n                this.bindType(scope, instanceType, null);\n            }\n            if (type.hasMembers()) {\n                var members = type.members;\n                var ambientMembers = type.ambientMembers;\n                var typeMembers = type.getAllEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var ambientTypeMembers = type.getAllAmbientEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var memberScope = new SymbolTableScope(members, ambientMembers, typeMembers, ambientTypeMembers, type.symbol);\n                var agg = new SymbolAggregateScope(type.symbol);\n                var prevCurrentModDecl = this.checker.currentModDecl;\n                var prevBindStatus = this.checker.inBind;\n                agg.addParentScope(memberScope);\n                agg.addParentScope(scope);\n                if (type.isModuleType()) {\n                    this.checker.currentModDecl = <ModuleDeclaration>type.symbol.declAST;\n                    this.checker.inBind = true;\n                }\n                if (members) {\n                    this.bind(agg, type.members.allMembers); // REVIEW: Should only be getting exported types?\n                }\n                if (typeMembers) {\n                    this.bind(agg, typeMembers.allMembers);\n                }\n                if (ambientMembers) {\n                    this.bind(agg, ambientMembers.allMembers);\n                }\n                if (ambientTypeMembers) {\n                    this.bind(agg, ambientTypeMembers.allMembers);\n                }\n                this.checker.currentModDecl = prevCurrentModDecl;\n                this.checker.inBind = prevBindStatus;\n            }\n            if (type.extendsTypeLinks) {\n                this.resolveBases(scope, type);\n            }\n            if (type.construct) {\n                this.resolveSignatureGroup(type.construct, scope, instanceType);\n            }\n            if (type.call) {\n                this.resolveSignatureGroup(type.call, scope, null);\n            }\n            if (type.index) {\n                this.resolveSignatureGroup(type.index, scope, null);\n            }\n            if (type.elementType) {\n                this.bindType(scope, type.elementType, null);\n            }\n        }\n\n        public bindSymbol(scope: SymbolScope, symbol: Symbol) {\n            if (!symbol.bound) {\n                var prevLocationInfo = this.checker.locationInfo;\n                if ((this.checker.units) && (symbol.unitIndex >= 0) && (symbol.unitIndex < this.checker.units.length)) {\n                    this.checker.locationInfo = this.checker.units[symbol.unitIndex];\n                }\n                switch (symbol.kind()) {\n                    case SymbolKind.Type:\n\n                        if (symbol.flags & SymbolFlags.Bound) {\n                            break;\n                        }\n\n                        var typeSymbol = <TypeSymbol>symbol;\n                        typeSymbol.flags |= SymbolFlags.Bound;\n\n                        // Since type collection happens out of order, a dynamic module referenced by an import statement\n                        // may not yet be in scope when the import symbol is created.  In that case, we need to search\n                        // out the module symbol now\n                        // Note that we\'ll also want to do this in resolveTypeMembers, in case the symbol is set outside the\n                        // context of a given module  (E.g., an outer import statement)\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymb';
var v27328 = v27329 + 'ol.type = modSym.getType();\n                            }\n                        }\n\n                        if (typeSymbol.type && typeSymbol.type != this.checker.gloModType) {\n                            this.bindType(scope, typeSymbol.type, typeSymbol.instanceType);\n\n                            // bind expansions on the parent type symbol\n                            if (typeSymbol.type.isModuleType()) {\n                                for (var i = 0; i < typeSymbol.expansions.length; i++) {\n                                    this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType);\n                                }\n                            }\n                        }\n                        break;\n                    case SymbolKind.Field:\n                        this.checker.resolveTypeLink(scope, (<FieldSymbol>symbol).field.typeLink,\n                                                false);\n                        break;\n                    case SymbolKind.Parameter:\n                        this.checker.resolveTypeLink(scope,\n                                                (<ParameterSymbol>symbol).parameter.typeLink,\n                                                true);\n                        break;\n                }\n                this.checker.locationInfo = prevLocationInfo;\n            }\n            symbol.bound = true;\n        }\n\n        public bind(scope: SymbolScope, table: IHashTable) {\n            table.map(\n                (key, sym, binder) => {\n                    binder.bindSymbol(scope, sym);\n                },\n                this);\n        }\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class DeclFileWriter {\n        public onNewLine = true;\n        constructor(private declFile: ITextWriter) {\n        }\n\n        public Write(s: string) {\n            this.declFile.Write(s);\n            this.onNewLine = false;\n        }\n\n        public WriteLine(s: string) {\n            this.declFile.WriteLine(s);\n            this.onNewLine = true;\n        }\n\n        public Close() {\n            this.declFile.Close();\n        }\n    }\n\n    export class DeclarationEmitter implements AstWalkerWithDetailCallback.AstWalkerDetailCallback {\n        private declFile: DeclFileWriter = null;\n        private indenter = new Indenter();\n        private declarationContainerStack: AST[] = [];\n        private isDottedModuleName: bool[] = [];\n        private dottedModuleEmit: string;\n        private ignoreCallbackAst: AST = null;\n        private singleDeclFile: DeclFileWriter = null;\n        private varListCount: number = 0;\n\n        private getAstDeclarationContainer() {\n            return this.declarationContainerStack[this.declarationContainerStack.length - 1];\n        }\n\n        private emitDottedModuleName() {\n            return (this.isDottedModuleName.length == 0) ? false : this.isDottedModuleName[this.isDottedModuleName.length - 1];\n        }\n\n        constructor (public checker: TypeChecker, public emitOptions: EmitOptions, public errorReporter: ErrorReporter) {\n        }\n\n        public setDeclarationFile(file: ITextWriter) {\n            this.declFile = new DeclFileWriter(file);\n        }\n\n        public Close() {\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                this.declFile.Close();\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n\n        public emitDeclarations(script: TypeScript.Script): void {\n            AstWalkerWithDetailCallback.walk(script, this);\n        }\n\n        private getIndentString(declIndent? = false) {\n            if (this.emitOptions.minWhitespace) {\n                return "";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        private emitIndent() {\n            this.declFile.Write(this.getIndentString());\n        }\n\n        private canEmitSignature(declFlags: DeclFlags, canEmitGlobalAmbientDecl?: bool = true, useDeclarationContainerTop?: bool = true) {\n            var container: AST;\n            if (useDeclarationContainerTop) {\n                container = this.getAstDeclarationContainer();\n            } else {\n                container = this.declarationContainerStack[this.declarationContainerStack.length - 2];\n            }\n';
var v27327 = v27328 + '\n            if (container.nodeType == NodeType.ModuleDeclaration && !hasFlag(declFlags, DeclFlags.Exported)) {\n                return false;\n            }\n\n            if (!canEmitGlobalAmbientDecl && container.nodeType == NodeType.Script && hasFlag(declFlags, DeclFlags.Ambient)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        private canEmitPrePostAstSignature(declFlags: DeclFlags, astWithPrePostCallback: AST, preCallback: bool) {\n            if (this.ignoreCallbackAst) {\n                CompilerDiagnostics.assert(this.ignoreCallbackAst != astWithPrePostCallback, "Ignore Callback AST mismatch");\n                this.ignoreCallbackAst = null;\n                return false;\n            } else if (preCallback &&\n                !this.canEmitSignature(declFlags, true, preCallback)) {\n                this.ignoreCallbackAst = astWithPrePostCallback;\n                return false;\n            }\n\n            return true;\n        }\n\n        private getDeclFlagsString(declFlags: DeclFlags, typeString: string) {\n            var result = this.getIndentString();\n\n            // Accessor strings\n            var accessorString = "";\n            if (hasFlag(declFlags, DeclFlags.GetAccessor)) {\n                accessorString = "get ";\n            }\n            else if (hasFlag(declFlags, DeclFlags.SetAccessor)) {\n                accessorString = "set ";\n            }\n\n            // Emit export only for global export statements. The container for this would be dynamic module which is whole file\n            var container = this.getAstDeclarationContainer();\n            if (container.nodeType == NodeType.ModuleDeclaration &&\n                hasFlag((<ModuleDeclaration>container).modFlags, ModuleFlags.IsWholeFile) &&\n                hasFlag(declFlags, DeclFlags.Exported)) {\n                result += "export ";\n            }\n\n            // Static/public/private/global declare\n            if (hasFlag(declFlags, DeclFlags.LocalStatic) || hasFlag(declFlags, DeclFlags.Static)) {\n                result += "static " + accessorString;\n            }\n            else {\n                if (hasFlag(declFlags, DeclFlags.Private)) {\n                    result += "private " + accessorString;\n                }\n                else if (hasFlag(declFlags, DeclFlags.Public)) {\n                    result += "public " + accessorString;\n                }\n                else {\n                    if (accessorString == "") {\n                        result += typeString + " ";\n                    } else {\n                        result += accessorString;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        private emitDeclFlags(declFlags: DeclFlags, typeString: string) {\n            this.declFile.Write(this.getDeclFlagsString(declFlags, typeString));\n        }\n\n        private canEmitTypeAnnotationSignature(declFlag: DeclFlags = DeclFlags.None) {\n            // Private declaration, shouldnt emit type any time.\n            return !hasFlag(declFlag, DeclFlags.Private);\n        }\n\n        private pushDeclarationContainer(ast: AST) {\n            this.declarationContainerStack.push(ast);\n        }\n\n        private popDeclarationContainer(ast: AST) {\n            CompilerDiagnostics.assert(ast != this.getAstDeclarationContainer(), \'Declaration container mismatch\');\n            this.declarationContainerStack.pop();\n        }\n\n        private emitTypeNamesMember(memberName: MemberName, emitIndent? : bool = false) {\n            if (memberName.prefix == "{ ") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.WriteLine("{");\n                this.indenter.increaseIndent();\n                emitIndent = true;\n            } else if (memberName.prefix != "") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write(memberName.prefix);\n                emitIndent = false;\n            }\n\n            if (memberName.isString()) {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write((<MemberNameString>memberName).text);\n            } else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    this.emitTypeNamesMember(ar.entries[index], emitIndent);\n                    if (ar.delim == "; ") {\n                        this.declFile.WriteLine(";");\n                    }\n                }\n            }\n\n            if (memberName.suffix == "}") {\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.declFile.Write(memberName.suffix);\n            } else {\n                this.declFile.Write(memberName.suffix);\n            }\n        }\n\n        private emitTypeSignature(type: Type) {\n            var containingScope: SymbolScope = null';
var v27326 = v27327 + ';\n            var declarationContainerAst = this.getAstDeclarationContainer();\n            switch (declarationContainerAst.nodeType) {\n                case NodeType.ModuleDeclaration:\n                case NodeType.InterfaceDeclaration:\n                case NodeType.FuncDecl:\n                    if (declarationContainerAst.type) {\n                        containingScope = declarationContainerAst.type.containedScope;\n                    }\n                    break;\n\n                case NodeType.Script:\n                    var script = <Script>declarationContainerAst;\n                    if (script.bod) {\n                        containingScope = script.bod.enclosingScope;\n                    }\n                    break;\n\n                case NodeType.ClassDeclaration:\n                    if (declarationContainerAst.type) {\n                        containingScope = declarationContainerAst.type.instanceType.containedScope;\n                    }\n                    break;\n\n                default:\n                    CompilerDiagnostics.debugPrint("Unknown containing scope");\n            }\n\n            var typeNameMembers = type.getScopedTypeNameEx(containingScope);\n            this.emitTypeNamesMember(typeNameMembers);\n        }\n\n        private emitComment(comment: Comment) {\n            var text = comment.getText();\n            if (this.declFile.onNewLine) {\n                this.emitIndent();\n            } else if (!comment.isBlockComment) {\n                this.declFile.WriteLine("");\n                this.emitIndent();\n            }\n            \n            this.declFile.Write(text[0]);\n\n            for (var i = 1; i < text.length; i++) {\n                this.declFile.WriteLine("");\n                this.emitIndent();\n                this.declFile.Write(text[i]);\n            }\n\n            if (comment.endsLine || !comment.isBlockComment) {\n                this.declFile.WriteLine("");\n            } else {\n                this.declFile.Write(" ");\n            }\n        }\n\n        private emitDeclarationComments(ast: AST, endLine?: bool);\n        private emitDeclarationComments(symbol: Symbol, endLine?: bool);\n        private emitDeclarationComments(astOrSymbol, endLine = true) {\n            if (!this.emitOptions.emitComments) {\n                return;\n            }\n\n            var declComments = <Comment[]>astOrSymbol.getDocComments();\n            if (declComments.length > 0) {\n                for (var i = 0; i < declComments.length; i++) {\n                    this.emitComment(declComments[i]);\n                }\n\n                if (endLine) {\n                    if (!this.declFile.onNewLine) {\n                        this.declFile.WriteLine("");\n                    }\n                } else {\n                    if (this.declFile.onNewLine) {\n                        this.emitIndent();\n                    }\n                }\n            }\n        }\n\n        public VarDeclCallback(pre: bool, varDecl: VarDecl): bool {\n            if (pre && this.canEmitSignature(ToDeclFlags(varDecl.varFlags), false)) {\n                var interfaceMember = (this.getAstDeclarationContainer().nodeType == NodeType.InterfaceDeclaration);\n                this.emitDeclarationComments(varDecl);\n                if (!interfaceMember) {\n                    // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n                    // If it is var list of form  var a = varList count will be 0\n                    if (this.varListCount >= 0) {\n                        this.emitDeclFlags(ToDeclFlags(varDecl.varFlags), "var");\n                        this.varListCount = -this.varListCount;\n                    }\n                    this.declFile.Write(varDecl.id.text);\n                } else {\n                    this.emitIndent();\n                    this.declFile.Write(varDecl.id.text);\n                    if (hasFlag(varDecl.id.flags, ASTFlags.OptionalName)) {\n                        this.declFile.Write("?");\n                    }\n                }\n\n                var type: Type = null;\n                if (varDecl.typeExpr && varDecl.typeExpr.type) {\n                    type = varDecl.typeExpr.type;\n                }\n                else if (varDecl.sym) {\n                    type = (<FieldSymbol>varDecl.sym).getType();\n                    // Dont emit inferred any\n                    if (type == this.checker.anyType) {\n                        type = null;\n                    }\n                }\n\n                if (type && this.canEmitTypeAnnotationSignature(ToDeclFlags(varDecl.varFlags))) {\n                    this.declFile.Write(": ");\n                    this.emitTypeSignature(type);\n                }\n               \n                // emitted one var decl\n                if (this.varListCount > 0) { this.varListCount--; } else if (this.varListCount < 0) { this.varListCount++; }\n\n                // Write ; or ,\n                if (this.varListCount < 0) {\n                    this.declF';
var v27325 = v27326 + 'ile.Write(", ");\n                } else {\n                    this.declFile.WriteLine(";");\n                }\n            }\n            return false;\n        }\n\n        public BlockCallback(pre: bool, block: Block): bool {\n            if (!block.isStatementBlock) {\n                if (pre) {\n                    this.varListCount = block.statements.members.length;\n                } else {\n                    this.varListCount = 0;\n                }\n                return true;\n            }\n            return false;\n        }\n\n        private emitArgDecl(argDecl: ArgDecl, funcDecl: FuncDecl) {\n            this.emitDeclarationComments(argDecl, false);\n            this.declFile.Write(argDecl.id.text);\n            if (argDecl.isOptionalArg()) {\n                this.declFile.Write("?");\n            }\n            if ((argDecl.typeExpr || argDecl.type != this.checker.anyType) &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags))) {\n                this.declFile.Write(": ");\n                this.emitTypeSignature(argDecl.type);\n            }\n        }\n\n        public FuncDeclCallback(pre: bool, funcDecl: FuncDecl): bool {\n            if (!pre) {\n                return false;\n            }\n\n            if (funcDecl.isAccessor()) {\n                return this.emitPropertyAccessorSignature(funcDecl);\n            }\n\n            var isInterfaceMember = (this.getAstDeclarationContainer().nodeType == NodeType.InterfaceDeclaration);\n            if (funcDecl.bod) {\n                if (funcDecl.isConstructor) {\n                    if (funcDecl.type.construct && funcDecl.type.construct.signatures.length > 1) {\n                        return false;\n                    }\n                } else {\n                    if (funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {\n                        // This means its implementation of overload signature. do not emit\n                        return false;\n                    }\n                }\n            } else if (!isInterfaceMember && hasFlag(funcDecl.fncFlags, FncFlags.Private) && funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {\n                // Print only first overload of private function\n                var signatures = funcDecl.type.call.signatures;\n                var firstSignature = signatures[0].declAST;\n                if (firstSignature.bod) {\n                    // Its a implementation, use next one\n                    firstSignature = signatures[1].declAST;\n                }\n\n                if (firstSignature != funcDecl) {\n                    return false;\n                }\n            }\n\n            if (!this.canEmitSignature(ToDeclFlags(funcDecl.fncFlags), false)) {\n                return false;\n            }\n\n            this.emitDeclarationComments(funcDecl);\n            if (funcDecl.isConstructor) {\n                this.emitIndent();\n                this.declFile.Write("constructor");\n            }\n            else {\n                var id = funcDecl.getNameText();\n                if (!isInterfaceMember) {\n                    this.emitDeclFlags(ToDeclFlags(funcDecl.fncFlags), "function");\n                    this.declFile.Write(id);\n                } else {\n                    this.emitIndent();\n                    if (funcDecl.isConstructMember()) {\n                        this.declFile.Write("new");\n                    } else if (!funcDecl.isCallMember() && !funcDecl.isIndexerMember()) {\n                        this.declFile.Write(id);\n                        if (hasFlag(funcDecl.name.flags, ASTFlags.OptionalName)) {\n                            this.declFile.Write("? ");\n                        }\n                    }\n                }\n            }\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write("(");\n            } else {\n                this.declFile.Write("[");\n            }\n\n            this.indenter.increaseIndent();\n\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length;\n                if (funcDecl.variableArgList) {\n                    argsLen--;\n                }\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    this.emitArgDecl(argDecl, funcDecl);\n                    if (i < (argsLen - 1)) {\n                        this.declFile.Write(", ");\n                    }\n                }\n            }\n\n            if (funcDecl.variableArgList) {\n                var lastArg = <ArgDecl>funcDecl.arguments.members[funcDecl.arguments.members.length - 1];\n                if (funcDecl.arguments.members.length > 1) {\n                    this.declFile.Write(", ...");\n                }\n                else {\n                    this.declFile.Write("...");\n                }\n                this.emitArgDecl(lastArg, funcDecl);\n            }\n\n            this.indenter.decreaseIndent();\n\n            if (!funcDecl.isIndexerMember(';
var v27324 = v27325 + ')) {\n                this.declFile.Write(")");\n            } else {\n                this.declFile.Write("]");\n            }\n\n            if (!funcDecl.isConstructor &&\n                (funcDecl.returnTypeAnnotation || funcDecl.signature.returnType.type != this.checker.anyType) &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags))) {\n                this.declFile.Write(": ");\n                this.emitTypeSignature(funcDecl.signature.returnType.type);\n            }\n\n            this.declFile.WriteLine(";");\n\n            return false;\n        }\n\n        private emitBaseList(bases: ASTList, qual: string) {\n            if (bases && (bases.members.length > 0)) {\n                this.declFile.Write(" " + qual + " ");\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    var baseExpr = bases.members[i];\n                    var baseSymbol = baseExpr.type.symbol;\n                    var baseType = baseExpr.type;\n                    if (i > 0) {\n                        this.declFile.Write(", ");\n                    }\n                    this.emitTypeSignature(baseType);\n                }\n            }\n        }\n\n        private emitPropertyAccessorSignature(funcDecl: FuncDecl) {\n            var accessorSymbol = <FieldSymbol>funcDecl.accessorSymbol;\n            if (accessorSymbol.getter && accessorSymbol.getter.declAST != funcDecl) {\n                // Setter is being used to emit the type info. \n                return false;\n            }\n\n            this.emitDeclarationComments(accessorSymbol);\n            this.emitDeclFlags(ToDeclFlags(accessorSymbol.flags), "var");\n            this.declFile.Write(funcDecl.name.text);\n            var propertyType = accessorSymbol.getType();\n            if (this.canEmitTypeAnnotationSignature(ToDeclFlags(accessorSymbol.flags))) {\n                this.declFile.Write(" : ");\n                this.emitTypeSignature(propertyType);\n            }\n            this.declFile.WriteLine(";");\n\n            return false;\n        }\n\n        private emitClassMembersFromConstructorDefinition(funcDecl: FuncDecl) {\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length; if (funcDecl.variableArgList) { argsLen--; }\n\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    if (hasFlag(argDecl.varFlags, VarFlags.Property)) {\n                        this.emitDeclarationComments(argDecl);\n                        this.emitDeclFlags(ToDeclFlags(argDecl.varFlags), "var");\n                        this.declFile.Write(argDecl.id.text);\n\n                        if (argDecl.typeExpr && this.canEmitTypeAnnotationSignature(ToDeclFlags(argDecl.varFlags))) {\n                            this.declFile.Write(": ");\n                            this.emitTypeSignature(argDecl.type);\n                        }\n                        this.declFile.WriteLine(";");\n                    }\n                }\n            }\n        }\n\n        public ClassDeclarationCallback(pre: bool, classDecl: ClassDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(classDecl.varFlags), classDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var className = classDecl.name.text;\n                this.emitDeclarationComments(classDecl);\n                this.emitDeclFlags(ToDeclFlags(classDecl.varFlags), "class");\n                this.declFile.Write(className);\n                this.emitBaseList(classDecl.extendsList, "extends");\n                this.emitBaseList(classDecl.implementsList, "implements");\n                this.declFile.WriteLine(" {");\n\n                this.pushDeclarationContainer(classDecl);\n                this.indenter.increaseIndent();\n                if (classDecl.constructorDecl) {\n                    this.emitClassMembersFromConstructorDefinition(classDecl.constructorDecl);\n                }\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(classDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine("}");\n            }\n\n            return true;\n        }\n\n        public InterfaceDeclarationCallback(pre: bool, interfaceDecl: InterfaceDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(interfaceDecl.varFlags), interfaceDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var interfaceName = interfaceDecl.name.text;\n                this.emitDeclarationComments(interfaceDecl);\n                this.emitDeclFlags(ToDeclFlags(interfaceDecl.varFlags), "interface");\n                this.declFile.Write(interfaceName);\n                this.emitBaseList(interfaceDecl.extendsList, "extends");\n                this.declFile.WriteLine(" {");\n\n                this.indenter';
var v27323 = v27324 + '.increaseIndent();\n                this.pushDeclarationContainer(interfaceDecl);\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(interfaceDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine("}");\n            }\n\n            return true;\n        }\n\n        public ImportDeclarationCallback(pre: bool, importDecl: ImportDeclaration): bool {\n            if (pre) {\n                if ((<Script>this.declarationContainerStack[0]).isExternallyVisibleSymbol(importDecl.id.sym)) {\n                    this.emitDeclarationComments(importDecl);\n                    this.emitIndent();\n                    this.declFile.Write("import ");\n\n                    this.declFile.Write(importDecl.id.text + " = ");\n                    if (importDecl.isDynamicImport) {\n                        this.declFile.WriteLine("module (" + importDecl.getAliasName() + ");");\n                    } else {\n                        this.declFile.WriteLine(importDecl.getAliasName() + ";");\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private emitEnumSignature(moduleDecl: ModuleDeclaration) {\n            if (!this.canEmitSignature(ToDeclFlags(moduleDecl.modFlags))) {\n                return false;\n            }\n\n            this.emitDeclarationComments(moduleDecl);\n            this.emitDeclFlags(ToDeclFlags(moduleDecl.modFlags), "enum");\n            this.declFile.WriteLine(moduleDecl.name.text + " {");\n\n            this.indenter.increaseIndent();\n            var membersLen = moduleDecl.members.members.length;\n            for (var j = 1; j < membersLen; j++) {\n                var memberDecl: AST = moduleDecl.members.members[j];\n                if (memberDecl.nodeType == NodeType.VarDecl) {\n                    this.emitDeclarationComments(memberDecl);\n                    this.emitIndent();\n                    this.declFile.WriteLine((<VarDecl>memberDecl).id.text + ",");\n                } else {\n                    CompilerDiagnostics.assert(memberDecl.nodeType != NodeType.Asg, "We want to catch this");\n                }\n            }\n            this.indenter.decreaseIndent();\n\n            this.emitIndent();\n            this.declFile.WriteLine("}");\n\n            return false;\n        }\n\n        public ModuleDeclarationCallback(pre: bool, moduleDecl: ModuleDeclaration): bool {\n            if (hasFlag(moduleDecl.modFlags, ModuleFlags.IsWholeFile)) {\n                // This is dynamic modules and we are going to outputing single file, \n                // we need to change the declFile because dynamic modules are always emitted to their corresponding .d.ts\n                if (hasFlag(moduleDecl.modFlags, ModuleFlags.IsDynamic)) {\n                    if (pre) {\n                        if (!this.emitOptions.outputMany) {\n                            this.singleDeclFile = this.declFile;\n                            CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");\n                            // Create new file\n                            var declareFileName = this.emitOptions.mapOutputFileName(stripQuotes(moduleDecl.name.sym.name), TypeScriptCompiler.mapToDTSFileName);\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            try {\n                                // Creating files can cause exceptions, report them.   \n                                this.declFile = new DeclFileWriter(this.emitOptions.ioHost.createFile(declareFileName, useUTF8InOutputfile));\n                            } catch (ex) {\n                                this.errorReporter.emitterError(null, ex.message);\n                            }\n                        }\n                        this.pushDeclarationContainer(moduleDecl);\n                    } else {\n                        if (!this.emitOptions.outputMany) {\n                            CompilerDiagnostics.assert(this.singleDeclFile != this.declFile, "singleDeclFile cannot be null as we are going to revert back to it");\n                            CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");\n                            try {\n                                // Closing files could result in exceptions, report them if they occur\n                                this.declFile.Close();\n                            } catch (ex) {\n                                this.errorReporter.emitterError(null, ex.message);\n                            }\n                            this.declFile = this.singleDeclFile;\n                        }\n                        this.popDeclarationContainer(moduleDecl);\n                    }\n                }\n\n                return true;\n            }\n\n            if (moduleDecl.isEnum()) {\n                if (pre) {\n           ';
var v27322 = v27323 + '         this.emitEnumSignature(moduleDecl);\n                }\n                return false;\n            }\n\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(moduleDecl.modFlags), moduleDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                if (this.emitDottedModuleName()) {\n                    this.dottedModuleEmit += ".";\n                } else {\n                    this.dottedModuleEmit = this.getDeclFlagsString(ToDeclFlags(moduleDecl.modFlags), "module");\n                }\n                this.dottedModuleEmit += moduleDecl.name.text;\n\n                var isCurrentModuleDotted = (moduleDecl.members.members.length == 1 &&\n                    moduleDecl.members.members[0].nodeType == NodeType.ModuleDeclaration &&\n                    !(<ModuleDeclaration>moduleDecl.members.members[0]).isEnum() &&\n                    hasFlag((<ModuleDeclaration>moduleDecl.members.members[0]).modFlags, ModuleFlags.Exported));\n\n                // Module is dotted only if it does not have doc comments for it\n                var moduleDeclComments = moduleDecl.getDocComments();\n                isCurrentModuleDotted = isCurrentModuleDotted && (moduleDeclComments == null || moduleDeclComments.length == 0);\n\n                this.isDottedModuleName.push(isCurrentModuleDotted);\n                this.pushDeclarationContainer(moduleDecl);\n\n                if (!isCurrentModuleDotted) {\n                    this.emitDeclarationComments(moduleDecl);\n                    this.declFile.Write(this.dottedModuleEmit);\n                    this.declFile.WriteLine(" {");\n                    this.indenter.increaseIndent();\n                }\n            } else {\n                if (!this.emitDottedModuleName()) {\n                    this.indenter.decreaseIndent();\n                    this.emitIndent();\n                    this.declFile.WriteLine("}");\n                }\n                this.popDeclarationContainer(moduleDecl);\n                this.isDottedModuleName.pop();\n            }\n\n            return true;\n        }\n\n        public ScriptCallback(pre: bool, script: Script): bool {\n            if (pre) {\n                if (this.emitOptions.outputMany) {\n                    for (var i = 0; i < script.referencedFiles.length; i++) {\n                        var referencePath = script.referencedFiles[i].path;\n                        var declareFileName: string;\n                        if (isRooted(referencePath)) {\n                            declareFileName = this.emitOptions.mapOutputFileName(referencePath, TypeScriptCompiler.mapToDTSFileName)\n                        } else {\n                            declareFileName = getDeclareFilePath(script.referencedFiles[i].path);\n                        }\n                        this.declFile.WriteLine(\'/// <reference path="\' + declareFileName + \'" />\');\n                    }\n                }\n                this.pushDeclarationContainer(script);\n            }\n            else {\n                this.popDeclarationContainer(script);\n            }\n            return true;\n        }\n\n        public DefaultCallback(pre: bool, ast: AST): bool {\n            return !hasFlag(ast.flags, ASTFlags.IsStatement);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export module CompilerDiagnostics {\n        export var debug = false;\n        export interface IDiagnosticWriter {\n            Alert(output: string): void;\n        }\n\n        export var diagnosticWriter: IDiagnosticWriter = null;\n\n        export var analysisPass: number = 0;\n\n        export function Alert(output: string) {\n            if (diagnosticWriter) {\n                diagnosticWriter.Alert(output);\n            }\n        }\n\n        export function debugPrint(s: string) {\n            if (debug) {\n                Alert(s);\n            }\n        }\n\n        export function assert(condition: bool, s: string) {\n            if (debug) {\n                if (!condition) {\n                    Alert(s);\n                }\n            }\n        }\n\n    }\n\n    export interface ILogger {\n        information(): bool;\n        debug(): bool;\n        warning(): bool;\n        error(): bool;\n        fatal(): bool;\n        log(s: string): void;\n    }\n\n    export class NullLogger implements ILogger {\n        public information(): bool { return false; }\n        public debug(): bool { r';
var v27321 = v27322 + 'eturn false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n        }\n    }\n\n    export class LoggerAdapter implements ILogger {\n        private _information: bool;\n        private _debug: bool;\n        private _warning: bool;\n        private _error: bool;\n        private _fatal: bool;\n\n        constructor (public logger: ILogger) { \n            this._information = this.logger.information();\n            this._debug = this.logger.debug();\n            this._warning = this.logger.warning();\n            this._error = this.logger.error();\n            this._fatal = this.logger.fatal();\n        }\n\n\n        public information(): bool { return this._information; }\n        public debug(): bool { return this._debug; }\n        public warning(): bool { return this._warning; }\n        public error(): bool { return this._error; }\n        public fatal(): bool { return this._fatal; }\n        public log(s: string): void {\n            this.logger.log(s);\n        }\n    }\n\n    export class BufferedLogger implements ILogger {\n        public logContents = [];\n\n        public information(): bool { return false; }\n        public debug(): bool { return false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n            this.logContents.push(s);\n        }\n    }\n\n    export function timeFunction(logger: ILogger, funcDescription: string, func: () =>any): any {\n        var start = +new Date();\n        var result = func();\n        var end = +new Date();\n        logger.log(funcDescription + " completed in " + (end - start) + " msec");\n        return result;\n    }\n\n    export function stringToLiteral(value: string, length: number): string {\n        var result = "";\n\n        var addChar = (index: number) => {\n            var ch = value.charCodeAt(index);\n            switch (ch) {\n                case 0x09: // tab\n                    result += "\\\\t";\n                    break;\n                case 0x0a: // line feed\n                    result += "\\\\n";\n                    break;\n                case 0x0b: // vertical tab\n                    result += "\\\\v";\n                    break;\n                case 0x0c: // form feed\n                    result += "\\\\f";\n                    break;\n                case 0x0d: // carriage return\n                    result += "\\\\r";\n                    break;\n                case 0x22:  // double quote\n                    result += "\\\\\\"";\n                    break;\n                case 0x27: // single quote\n                    result += "\\\\\\\'";\n                    break;\n                case 0x5c: // Backslash\n                    result += "\\\\";\n                    break;\n                default:\n                    result += value.charAt(index);\n            }\n        }\n\n        var tooLong = (value.length > length);\n        if (tooLong) {\n            var mid = length >> 1;\n            for (var i = 0; i < mid; i++) addChar(i);\n            result += "(...)";\n            for (var i = value.length - mid; i < value.length; i++) addChar(i);\n        }\n        else {\n            length = value.length;\n            for (var i = 0; i < length; i++) addChar(i);\n        }\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum EmitContainer {\n        Prog,\n        Module,\n        DynamicModule,\n        Class,\n        Constructor,\n        Function,\n        Args,\n        Interface,\n    }\n\n    export class EmitState {\n        public column: number;\n        public line: number;\n        public pretty: bool;\n        public inObjectLiteral: bool;\n        public container: EmitContainer;\n\n        constructor () {\n            this.column = 0;\n            this.line = 0;\n            this.pretty = false;\n            this.inObjectLiteral = false;\n            this.container = EmitContainer.Prog;\n        }\n    }\n\n    export class EmitOptions {\n        public minWhitespace: bool;\n        public propagateConstants: bool;\n        public emitComments: bool;\n        public outputOption: string;\n        public ioHost: EmitterIOHost = null;\n        public outputMany: bool = true;\n        public commonDirectoryPath';
var v27320 = v27321 + ' = "";\n\n        constructor(settings: CompilationSettings) {\n            this.minWhitespace = settings.minWhitespace;\n            this.propagateConstants = settings.propagateConstants;\n            this.emitComments = settings.emitComments;\n            this.outputOption = settings.outputOption;\n        }\n\n        public mapOutputFileName(fileName: string, extensionChanger: (fname: string, wholeFileNameReplaced: bool) => string) {\n            if (this.outputMany) {\n                var updatedFileName = fileName;\n                if (this.outputOption != "") {\n                    // Replace the common directory path with the option specified\n                    updatedFileName = fileName.replace(this.commonDirectoryPath, "");\n                    updatedFileName = this.outputOption + updatedFileName;\n                }\n                return extensionChanger(updatedFileName, false);\n            } else {\n                return extensionChanger(this.outputOption, true);\n            }\n        }\n    }\n\n    export class Indenter {\n        static indentStep : number = 4;\n        static indentStepString : string = "    ";\n        static indentStrings: string[] = [];\n        public indentAmt: number = 0;\n\n        public increaseIndent() {\n            this.indentAmt += Indenter.indentStep;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt -= Indenter.indentStep;\n        }\n\n        public getIndent() {\n            var indentString = Indenter.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = "";\n                for (var i = 0; i < this.indentAmt; i = i + Indenter.indentStep) {\n                    indentString += Indenter.indentStepString;\n                }\n                Indenter.indentStrings[this.indentAmt] = indentString;\n            }\n            return indentString;\n        }\n    }\n\n    export class Emitter {\n        public prologueEmitted = false;\n        public thisClassNode: TypeDeclaration = null;\n        public thisFnc: FuncDecl = null;\n        public moduleDeclList: ModuleDeclaration[] = [];\n        public moduleName = "";\n        public emitState = new EmitState();\n        public indenter = new Indenter();\n        public ambientModule = false;\n        public modAliasId: string = null;\n        public firstModAlias: string = null;\n        public allSourceMappers: SourceMapper[] = [];\n        public sourceMapper: SourceMapper = null;\n        public captureThisStmtString = "var _this = this;";\n        private varListCountStack: number[] = [0]; \n\n        constructor(public checker: TypeChecker, public emittingFileName: string, public outfile: ITextWriter, public emitOptions: EmitOptions, public errorReporter: ErrorReporter) {\n        }\n\n        public setSourceMappings(mapper: SourceMapper) {\n            this.allSourceMappers.push(mapper);\n            this.sourceMapper = mapper;\n        }\n\n        public writeToOutput(s: string) {\n            this.outfile.Write(s);\n            // TODO: check s for newline\n            this.emitState.column += s.length;\n        }\n\n        public writeToOutputTrimmable(s: string) {\n            if (this.emitOptions.minWhitespace) {\n                s = s.replace(/[\\s]*/g, \'\');\n            }\n            this.writeToOutput(s);\n        }\n\n        public writeLineToOutput(s: string) {\n            if (this.emitOptions.minWhitespace) {\n                this.writeToOutput(s);\n                var c = s.charCodeAt(s.length - 1);\n                if (!((c == LexCodeSpace) || (c == LexCodeSMC) || (c == LexCodeLBR))) {\n                    this.writeToOutput(\' \');\n                }\n            }\n            else {\n                this.outfile.WriteLine(s);\n                this.emitState.column = 0\n                this.emitState.line++;\n            }\n        }\n\n        public writeCaptureThisStatement(ast: AST) {\n            this.emitIndent();\n            this.recordSourceMappingStart(ast);\n            this.writeToOutput(this.captureThisStmtString);\n            this.recordSourceMappingEnd(ast);\n            this.writeLineToOutput("");\n        }\n\n        public setInVarBlock(count: number) {\n            this.varListCountStack[this.varListCountStack.length - 1] = count;\n        }\n\n        public setInObjectLiteral(val: bool): bool {\n            var temp = this.emitState.inObjectLiteral;\n            this.emitState.inObjectLiteral = val;\n            return temp;\n        }\n\n        public setContainer(c: number): number {\n            var temp = this.emitState.container;\n            this.emitState.container = c;\n            return temp;\n        }\n\n        private getIndentString() {\n            if (this.emitOptions.minWhitespace) {\n                return "";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        public emitIndent() {\n            this.writeToOutput(this.getIndentString());\n        }\n\n        public emitCommentInPlace(comment: Comment) {\n            var tex';
var v27319 = v27320 + 't = comment.getText();\n            var hadNewLine = false;\n\n            if (comment.isBlockComment) {\n                if (this.emitState.column == 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n\n                if (text.length > 1 || comment.endsLine) {\n                    for (var i = 1; i < text.length; i++) {\n                        this.writeLineToOutput("");\n                        this.emitIndent();\n                        this.writeToOutput(text[i]);\n                    }\n                    this.recordSourceMappingEnd(comment);\n                    this.writeLineToOutput("");\n                    hadNewLine = true;\n                } else {\n                    this.recordSourceMappingEnd(comment);\n                }\n            }\n            else {\n                if (this.emitState.column == 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n                this.recordSourceMappingEnd(comment);\n                this.writeLineToOutput("");\n                hadNewLine = true;\n            }\n\n            if (hadNewLine) {\n                this.emitIndent();\n            }\n            else {\n                this.writeToOutput(" ");\n            }\n        }\n\n        public emitParensAndCommentsInPlace(ast: AST, pre: bool) {\n            var comments = pre ? ast.preComments : ast.postComments;\n\n            // comments should be printed before the LParen, but after the RParen\n            if (ast.isParenthesized && !pre) {\n                this.writeToOutput(")");\n            }\n            if (this.emitOptions.emitComments && comments && comments.length != 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    this.emitCommentInPlace(comments[i]);\n                }\n            }\n            if (ast.isParenthesized && pre) {\n                this.writeToOutput("(");\n            }\n        }\n\n        // TODO: emit accessor pattern\n        public emitObjectLiteral(content: ASTList) {\n            this.writeLineToOutput("{");\n            this.indenter.increaseIndent();\n            var inObjectLiteral = this.setInObjectLiteral(true);\n            this.emitJavascriptList(content, ",", TokenID.Comma, true, false, false);\n            this.setInObjectLiteral(inObjectLiteral);\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.writeToOutput("}");\n        }\n\n        public emitArrayLiteral(content: ASTList) {\n            this.writeToOutput("[");\n            if (content) {\n                this.writeLineToOutput("");\n                this.indenter.increaseIndent();\n                this.emitJavascriptList(content, ", ", TokenID.Comma, true, false, false);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n            }\n            this.writeToOutput("]");\n        }\n\n        public emitNew(target: AST, args: ASTList) {\n            this.writeToOutput("new ");\n            if (target.nodeType == NodeType.TypeRef) {\n                var typeRef = <TypeReference>target;\n                if (typeRef.arrayCount) {\n                    this.writeToOutput("Array()");\n                }\n                else {\n                    this.emitJavascript(typeRef.term, TokenID.Tilde, false);\n                    this.writeToOutput("()");\n                }\n            }\n            else {\n                this.emitJavascript(target, TokenID.Tilde, false);\n                this.recordSourceMappingStart(args);\n                this.writeToOutput("(");\n                this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                this.writeToOutput(")");\n                this.recordSourceMappingEnd(args);\n            }\n        }\n\n        public tryEmitConstant(dotExpr: BinaryExpression) {\n            if (!this.emitOptions.propagateConstants) {\n                return false;\n            }\n            var propertyName = <Identifier>dotExpr.operand2;\n            if (propertyName && propertyName.sym && propertyName.sym.isVariable()) {\n                if (hasFlag(propertyName.sym.flags, SymbolFlags.Constant)) {\n                    if (propertyName.sym.declAST) {\n                        var boundDecl = <BoundDecl>propertyName.sym.declAST;\n                        if (boundDecl.init && (boundDecl.init.nodeType == NodeType.NumberLit)) {\n                            var numLit = <NumberLiteral>boundDecl.init;\n                            this.writeToOutput(numLit.value.toString());\n                            var comment = " /* ";\n                            comment += propertyName.actualText;\n                            comment += " */ ";\n                            this.writeToOutput(comment);\n                            return true;\n                        }\n                    }\n                }\n            }\n            ret';
var v27318 = v27319 + 'urn false;\n        }\n\n        public emitCall(callNode: CallExpression, target: AST, args: ASTList) {\n            if (!this.emitSuperCall(callNode)) {\n                if (!hasFlag(callNode.flags, ASTFlags.ClassBaseConstructorCall)) {\n                    if (target.nodeType == NodeType.FuncDecl && !target.isParenthesized) {\n                        this.writeToOutput("(");\n                    }\n                    if (callNode.target.nodeType == NodeType.Super && this.emitState.container == EmitContainer.Constructor) {\n                        this.writeToOutput("_super.call");\n                    }\n                    else {\n                        this.emitJavascript(target, TokenID.OpenParen, false);\n                    }\n                    if (target.nodeType == NodeType.FuncDecl && !target.isParenthesized) {\n                        this.writeToOutput(")");\n                    }\n                    this.recordSourceMappingStart(args);\n                    this.writeToOutput("(");\n                    if (callNode.target.nodeType == NodeType.Super && this.emitState.container == EmitContainer.Constructor) {\n                        this.writeToOutput("this");\n                        if (args && args.members.length) {\n                            this.writeToOutput(", ");\n                        }\n                    }\n                    this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                    this.writeToOutput(")");\n                    this.recordSourceMappingEnd(args);\n                }\n                else {\n                    this.indenter.decreaseIndent();\n                    this.indenter.decreaseIndent();\n                    var constructorCall = new ASTList();\n                    constructorCall.members[0] = callNode;\n                    this.emitConstructorCalls(constructorCall, this.thisClassNode);\n                    this.indenter.increaseIndent();\n                    this.indenter.increaseIndent();\n                }\n            }\n        }\n\n        public emitConstructorCalls(bases: ASTList, classDecl: TypeDeclaration) {\n            if (bases == null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            this.recordSourceMappingStart(classDecl);\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType == NodeType.Call) {\n                    baseSymbol = (<CallExpression>baseExpr).target.type.symbol;\n                }\n                else {\n                    baseSymbol = baseExpr.type.symbol;\n                }\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                if (baseExpr.nodeType == NodeType.Call) {\n                    this.emitIndent();\n                    this.writeToOutput("_super.call(this");\n                    var args = (<CallExpression>baseExpr).arguments;\n                    if (args && (args.members.length > 0)) {\n                        this.writeToOutput(", ");\n                        this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(")");\n                }\n                else {\n                    if (baseExpr.type && (baseExpr.type.isClassInstance())) {\n                        // parameterless constructor call;\n                        this.emitIndent();\n                        this.writeToOutput(classDecl.name.actualText + "._super.constructor");\n                        //emitJavascript(baseExpr,TokenID.LParen,false);\n                        this.writeToOutput(".call(this)");\n                    }\n                }\n            }\n            this.recordSourceMappingEnd(classDecl);\n        }\n\n        public emitInnerFunction(funcDecl: FuncDecl, printName: bool, isMember: bool,\n            bases: ASTList, hasSelfRef: bool, classDecl: TypeDeclaration) {\n            /// REVIEW: The code below causes functions to get pushed to a newline in cases where they shouldn\'t\n            /// such as: \n            ///     Foo.prototype.bar = \n            ///         function() {\n            ///         };\n            /// Once we start emitting comments, we should pull this code out to place on the outer context where the function\n            /// is used.\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n            //    this.writeLineToOutput("");\n            //    this.increaseIndent();\n            //    emitIndent();\n            //}\n\n            var isClassConstructor = funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod);\n            var hasNonObjectBaseType = isClassConstructor && hasFlag(this.thisClassNode.type.instanceType.typeFlags, TypeFlags.HasBaseType) && !hasFlag(this.thisClassNode.';
var v27317 = v27318 + 'type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n            var classPropertiesMustComeAfterSuperCall = hasNonObjectBaseType && hasFlag((<ClassDeclaration>this.thisClassNode).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor);\n\n            // We have no way of knowing if the current function is used as an expression or a statement, so as to enusre that the emitted\n            // JavaScript is always valid, add an extra parentheses for unparenthesized function expressions\n            var shouldParenthesize = hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression) && !funcDecl.isParenthesized && !funcDecl.isAccessor() && (hasFlag(funcDecl.flags, ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.flags, ASTFlags.AutomaticSemicolon));\n\n            this.emitParensAndCommentsInPlace(funcDecl, true);\n            if (shouldParenthesize) {\n                this.writeToOutput("(");\n            }\n            this.recordSourceMappingStart(funcDecl);\n            if (!(funcDecl.isAccessor() && (<FieldSymbol>funcDecl.accessorSymbol).isObjectLitField)) {\n                this.writeToOutput("function ");\n            }\n            if (printName) {\n                var id = funcDecl.getNameText();\n                if (id && !funcDecl.isAccessor()) {\n                    if (funcDecl.name) {\n                        this.recordSourceMappingStart(funcDecl.name);\n                    }\n                    this.writeToOutput(id);\n                    if (funcDecl.name) {\n                        this.recordSourceMappingEnd(funcDecl.name);\n                    }\n                }\n            }\n\n            this.writeToOutput("(");\n            var argsLen = 0;\n            var i = 0;\n            var arg: ArgDecl;\n            var defaultArgs: ArgDecl[] = [];\n            if (funcDecl.arguments) {\n                var tempContainer = this.setContainer(EmitContainer.Args);\n                argsLen = funcDecl.arguments.members.length;\n                var printLen = argsLen;\n                if (funcDecl.variableArgList) {\n                    printLen--;\n                }\n                for (i = 0; i < printLen; i++) {\n                    arg = <ArgDecl>funcDecl.arguments.members[i];\n                    if (arg.init) {\n                        defaultArgs.push(arg);\n                    }\n                    this.emitJavascript(arg, TokenID.OpenParen, false);\n                    if (i < (printLen - 1)) {\n                        this.writeToOutput(", ");\n                    }\n                }\n                this.setContainer(tempContainer);\n            }\n            this.writeLineToOutput(") {");\n\n            if (funcDecl.isConstructor) {\n                this.recordSourceMappingNameStart("constructor");\n            } else if (funcDecl.isGetAccessor()) {\n                this.recordSourceMappingNameStart("get_" + funcDecl.getNameText());\n            } else if (funcDecl.isSetAccessor()) {\n                this.recordSourceMappingNameStart("set_" + funcDecl.getNameText());\n            } else {\n                this.recordSourceMappingNameStart(funcDecl.getNameText());\n            }\n            this.indenter.increaseIndent();\n\n            // set default args first\n            for (i = 0; i < defaultArgs.length; i++) {\n                var arg = defaultArgs[i];\n                this.emitIndent();\n                this.recordSourceMappingStart(arg);\n                this.writeToOutput("if (typeof " + arg.id.actualText + " === \\"undefined\\") { ");//\n                this.recordSourceMappingStart(arg.id);\n                this.writeToOutput(arg.id.actualText);\n                this.recordSourceMappingEnd(arg.id);\n                this.writeToOutput(" = ");\n                this.emitJavascript(arg.init, TokenID.OpenParen, false);\n                this.writeLineToOutput("; }")\n                this.recordSourceMappingEnd(arg);\n            }\n\n            if (funcDecl.isConstructor && ((<ClassDeclaration>funcDecl.classDecl).varFlags & VarFlags.MustCaptureThis)) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n\n            if (funcDecl.isConstructor && !classPropertiesMustComeAfterSuperCall) {\n                if (funcDecl.arguments) {\n                    argsLen = funcDecl.arguments.members.length;\n                    for (i = 0; i < argsLen; i++) {\n                        arg = <ArgDecl>funcDecl.arguments.members[i];\n                        if ((arg.varFlags & VarFlags.Property) != VarFlags.None) {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(arg);\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput("this." + arg.id.actualText);\n                            this.recordSourceMappingEnd(arg.id);\n                            this.writeToOutput(" = ");\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput(arg.id.actualText);\n                            this.re';
var v27316 = v27317 + 'cordSourceMappingEnd(arg.id);\n                            this.writeLineToOutput(";");\n                            this.recordSourceMappingEnd(arg);\n                        }\n                    }\n                }\n\n                // For classes, the constructor needs to be explicitly called\n                if (!hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                    this.emitConstructorCalls(bases, classDecl);\n                }\n            }\n            if (hasSelfRef) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n            if (funcDecl.variableArgList) {\n                argsLen = funcDecl.arguments.members.length;\n                var lastArg = <ArgDecl>funcDecl.arguments.members[argsLen - 1];\n                this.emitIndent();\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("var ");\n                this.recordSourceMappingStart(lastArg.id);\n                this.writeToOutput(lastArg.id.actualText);\n                this.recordSourceMappingEnd(lastArg.id);\n                this.writeLineToOutput(" = [];");\n                this.recordSourceMappingEnd(lastArg);\n                this.emitIndent();\n                this.writeToOutput("for (")\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("var _i = 0;");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput(" ");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("_i < (arguments.length - " + (argsLen - 1) + ")");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput("; ");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("_i++");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput(") {");\n                this.indenter.increaseIndent();\n                this.emitIndent();\n\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(lastArg.id.actualText + "[_i] = arguments[_i + " + (argsLen - 1) + "];");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput("");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput("}");\n            }\n\n            // if it\'s a class, emit the uninitializedMembers, first emit the non-proto class body members\n            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod) && !classPropertiesMustComeAfterSuperCall) {\n\n                var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                for (var i = 0; i < nProps; i++) {\n                    if ((<ASTList>this.thisClassNode.members).members[i].nodeType == NodeType.VarDecl) {\n                        var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[i];\n                        if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                            this.emitIndent();\n                            this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                            this.writeLineToOutput("");\n                        }\n                    }\n                }\n                //this.writeLineToOutput("");\n            }\n\n            this.emitBareJavascriptStatements(funcDecl.bod, classPropertiesMustComeAfterSuperCall);\n\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.recordSourceMappingStart(funcDecl.endingToken);\n            this.writeToOutput("}");\n\n            this.recordSourceMappingNameEnd();\n            this.recordSourceMappingEnd(funcDecl.endingToken);\n            this.recordSourceMappingEnd(funcDecl);\n\n            if (shouldParenthesize) {\n                this.writeToOutput(")");\n            }\n\n            // The extra call is to make sure the caller\'s funcDecl end is recorded, since caller wont be able to record it\n            this.recordSourceMappingEnd(funcDecl);\n\n            this.emitParensAndCommentsInPlace(funcDecl, false);\n\n            if (!isMember &&\n                //funcDecl.name != null &&\n                !hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression) &&\n                (hasFlag(funcDecl.fncFlags, FncFlags.Definition) || funcDecl.isConstructor)) {\n                this.writeLineToOutput("");\n            } else if (hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression)) {\n                if (hasFlag(funcDecl.flags, ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.flags, ASTFlags.AutomaticSemicolon)) {\n                    // If either of these two flags are set, then the function expression is a statement. Terminate it.\n                    this.writeLineToOutput(";");\n                }\n            }\n            /// TODO: See the other part of this at the beginning of function\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n  ';
var v27315 = v27316 + '          //    this.decreaseIndent();\n            //}           \n        }\n\n        public emitJavascriptModule(moduleDecl: ModuleDeclaration) {\n            var modName = moduleDecl.name.actualText;\n            if (isTSFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 3));\n            }\n            else if (isSTRFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 4));\n            }\n\n            if (!hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient)) {\n                var isDynamicMod = hasFlag(moduleDecl.modFlags, ModuleFlags.IsDynamic);\n                var prevOutFile = this.outfile;\n                var prevOutFileName = this.emittingFileName;\n                var prevAllSourceMappers = this.allSourceMappers;\n                var prevSourceMapper = this.sourceMapper;\n                var prevColumn = this.emitState.column;\n                var prevLine = this.emitState.line;\n                var temp = this.setContainer(EmitContainer.Module);\n                var svModuleName = this.moduleName;\n                var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);\n                this.moduleDeclList[this.moduleDeclList.length] = moduleDecl;\n                var isWholeFile = hasFlag(moduleDecl.modFlags, ModuleFlags.IsWholeFile);\n                this.moduleName = moduleDecl.name.actualText;\n\n                // prologue\n                if (isDynamicMod) {\n                    // create the new outfile for this module\n                    var tsModFileName = stripQuotes(moduleDecl.name.actualText);\n                    var modFilePath = trimModName(tsModFileName) + ".js";\n                    modFilePath = this.emitOptions.mapOutputFileName(modFilePath, TypeScriptCompiler.mapToJSFileName);\n\n                    if (this.emitOptions.ioHost) {\n                        // Ensure that the slashes are normalized so that the comparison is fair\n                        // REVIEW: Note that modFilePath is normalized to forward slashes in Parser.parse, so the \n                        // first call to switchToForwardSlashes is technically a no-op, but it will prevent us from\n                        // regressing if the parser changes\n                        if (switchToForwardSlashes(modFilePath) != switchToForwardSlashes(this.emittingFileName)) {\n                            this.emittingFileName = modFilePath;\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            this.outfile = this.createFile(this.emittingFileName, useUTF8InOutputfile);\n                            if (prevSourceMapper != null) {\n                                this.allSourceMappers = [];\n                                var sourceMappingFile = this.createFile(this.emittingFileName + SourceMapper.MapFileExtension, false);\n                                this.setSourceMappings(new TypeScript.SourceMapper(tsModFileName, this.emittingFileName, this.outfile, sourceMappingFile, this.errorReporter));\n                                this.emitState.column = 0;\n                                this.emitState.line = 0;\n                            }\n                        } else {\n                            CompilerDiagnostics.assert(this.emitOptions.outputMany, "Cannot have dynamic modules compiling into single file");\n                        }\n                    }\n\n                    this.setContainer(EmitContainer.DynamicModule); // discard the previous \'Module\' container\n\n                    this.recordSourceMappingStart(moduleDecl);\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) { // AMD\n                        var dependencyList = "[\\"require\\", \\"exports\\"";\n                        var importList = "require, exports";\n                        var importStatement: ImportDeclaration = null;\n\n                        // all dependencies are quoted\n                        for (var i = 0; i < (<ModuleType>moduleDecl.mod).importedModules.length; i++) {\n                            importStatement = (<ModuleType>moduleDecl.mod).importedModules[i]\n\n                            // if the imported module is only used in a type position, do not add it as a requirement\n                            if (importStatement.id.sym &&\n                                !(<TypeSymbol>importStatement.id.sym).onlyReferencedAsTypeRef) {\n                                if (i <= (<ModuleType>moduleDecl.mod).importedModules.length - 1) {\n                                    dependencyList += ", ";\n                                    importList += ", ";\n                                }\n\n                                importList += "__" + importStatement.id.actualText + "__";\n                                dependencyList += importStatement.firstAliasedModToString();\n                            }\n                        }\n\n                 ';
var v27314 = v27315 + '       // emit any potential amd dependencies\n                        for (var i = 0; i < moduleDecl.amdDependencies.length; i++) {\n                            dependencyList += ", \\"" + moduleDecl.amdDependencies[i] + "\\"";\n                        }\n\n                        dependencyList += "]";\n\n                        this.writeLineToOutput("define(" + dependencyList + "," + " function(" + importList + ") {");\n                    }\n                    else { // Node\n\n                    }\n                }\n                else {\n\n                    if (!isExported) {\n                        this.recordSourceMappingStart(moduleDecl);\n                        this.writeToOutput("var ");\n                        this.recordSourceMappingStart(moduleDecl.name);\n                        this.writeToOutput(this.moduleName);\n                        this.recordSourceMappingEnd(moduleDecl.name);\n                        this.writeLineToOutput(";");\n                        this.recordSourceMappingEnd(moduleDecl);\n                        this.emitIndent();\n                    }\n\n                    this.writeToOutput("(");\n                    this.recordSourceMappingStart(moduleDecl);\n                    this.writeToOutput("function (");\n                    this.recordSourceMappingStart(moduleDecl.name);\n                    this.writeToOutput(this.moduleName);\n                    this.recordSourceMappingEnd(moduleDecl.name);\n                    this.writeLineToOutput(") {");\n                }\n\n                if (!isWholeFile) {\n                    this.recordSourceMappingNameStart(this.moduleName);\n                }\n\n                // body - don\'t indent for Node\n                if (!isDynamicMod || moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                    this.indenter.increaseIndent();\n                }\n\n                if (moduleDecl.modFlags & ModuleFlags.MustCaptureThis) {\n                    this.writeCaptureThisStatement(moduleDecl);\n                }\n\n                this.emitJavascriptList(moduleDecl.members, null, TokenID.Semicolon, true, false, false);\n                if (!isDynamicMod || moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                    this.indenter.decreaseIndent();\n                }\n                this.emitIndent();\n\n                // epilogue\n                if (isDynamicMod) {\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) { // AMD\n                        this.writeLineToOutput("})");\n                    }\n                    else { // Node\n                    }\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n\n                    // close the module outfile, and restore the old one\n                    if (this.outfile != prevOutFile) {\n                        this.Close();\n                        if (prevSourceMapper != null) {\n                            this.allSourceMappers = prevAllSourceMappers;\n                            this.sourceMapper = prevSourceMapper;\n                            this.emitState.column = prevColumn;\n                            this.emitState.line = prevLine;\n                        }\n                        this.outfile = prevOutFile;\n                        this.emittingFileName = prevOutFileName;\n                    }\n                }\n                else {\n                    var containingMod: ModuleDeclaration = null;\n                    if (moduleDecl.type && moduleDecl.type.symbol.container && moduleDecl.type.symbol.container.declAST) {\n                        containingMod = <ModuleDeclaration>moduleDecl.type.symbol.container.declAST;\n                    }\n                    var parentIsDynamic = containingMod && hasFlag(containingMod.modFlags, ModuleFlags.IsDynamic);\n\n                    this.recordSourceMappingStart(moduleDecl.endingToken);\n                    if (temp == EmitContainer.Prog && isExported) {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(this." + this.moduleName + " || (this." + this.moduleName + " = {}));");\n                    }\n                    else if (isExported || temp == EmitContainer.Prog) {\n                        var dotMod = svModuleName != "" ? (parentIsDynamic ? "exports" : svModuleName) + "." : svModuleName;\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(" + dotMod + this.moduleName + " || (" + dotMod + this.moduleName + " = {})';
var v27313 = v27314 + ');");\n                    }\n                    else if (!isExported && temp != EmitContainer.Prog) {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(" + this.moduleName + " || (" + this.moduleName + " = {}));");\n                    }\n                    else {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")();");\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n                    this.writeLineToOutput("");\n                    if (temp != EmitContainer.Prog && isExported) {\n                        this.emitIndent();\n                        this.recordSourceMappingStart(moduleDecl);\n                        if (parentIsDynamic) {\n                            this.writeLineToOutput("var " + this.moduleName + " = exports." + this.moduleName + ";");\n                        } else {\n                            this.writeLineToOutput("var " + this.moduleName + " = " + svModuleName + "." + this.moduleName + ";");\n                        }\n                        this.recordSourceMappingEnd(moduleDecl);\n                    }\n                }\n\n                this.setContainer(temp);\n                this.moduleName = svModuleName;\n                this.moduleDeclList.length--;\n            }\n        }\n\n        public emitIndex(operand1: AST, operand2: AST) {\n            var temp = this.setInObjectLiteral(false);\n            this.emitJavascript(operand1, TokenID.Tilde, false);\n            this.writeToOutput("[");\n            this.emitJavascriptList(operand2, ", ", TokenID.Comma, false, false, false);\n            this.writeToOutput("]");\n            this.setInObjectLiteral(temp);\n        }\n\n        public emitStringLiteral(text: string) {\n            // should preserve escape etc.\n            // TODO: simplify object literal simple name\n            this.writeToOutput(text);\n        }\n\n        public emitJavascriptFunction(funcDecl: FuncDecl) {\n            if (hasFlag(funcDecl.fncFlags, FncFlags.Signature) || funcDecl.isOverload) {\n                return;\n            }\n            var temp: number;\n            var tempFnc = this.thisFnc;\n            this.thisFnc = funcDecl;\n\n            if (funcDecl.isConstructor) {\n                temp = this.setContainer(EmitContainer.Constructor);\n            }\n            else {\n                temp = this.setContainer(EmitContainer.Function);\n            }\n\n            var bases: ASTList = null;\n            var hasSelfRef = false;\n            var funcName = funcDecl.getNameText();\n\n            if ((this.emitState.inObjectLiteral || !funcDecl.isAccessor()) &&\n                ((temp != EmitContainer.Constructor) ||\n                ((funcDecl.fncFlags & FncFlags.Method) == FncFlags.None))) {\n                var tempLit = this.setInObjectLiteral(false);\n                if (this.thisClassNode) {\n                    bases = this.thisClassNode.extendsList;\n                }\n                hasSelfRef = Emitter.shouldCaptureThis(funcDecl);\n                this.recordSourceMappingStart(funcDecl);\n                if (hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported) && funcDecl.type.symbol.container == this.checker.gloMod && !funcDecl.isConstructor) {\n                    this.writeToOutput("this." + funcName + " = ");\n                    this.emitInnerFunction(funcDecl, false, false, bases, hasSelfRef, this.thisClassNode);\n                }\n                else {\n                    this.emitInnerFunction(funcDecl, (funcDecl.name && !funcDecl.name.isMissing()), false, bases, hasSelfRef, this.thisClassNode);\n                }\n                this.setInObjectLiteral(tempLit);\n            }\n            this.setContainer(temp);\n            this.thisFnc = tempFnc;\n\n            if (hasFlag(funcDecl.fncFlags, FncFlags.Definition)) {\n                if (hasFlag(funcDecl.fncFlags, FncFlags.Static)) {\n                    if (this.thisClassNode) {\n                        if (funcDecl.isAccessor()) {\n                            this.emitPropertyAccessor(funcDecl, this.thisClassNode.name.actualText, false);\n                        }\n                        else {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(funcDecl);\n                            this.writeLineToOutput(this.thisClassNode.name.actualText + "." + funcName +\n                                          " = " + funcName + ";");\n                            this.recordSourceMappingEnd(funcDecl);\n                     ';
var v27312 = v27313 + '   }\n                    }\n                }\n                else if ((this.emitState.container == EmitContainer.Module || this.emitState.container == EmitContainer.DynamicModule) && hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported)) {\n                    this.emitIndent();\n                    var modName = this.emitState.container == EmitContainer.Module ? this.moduleName : "exports";\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeLineToOutput(modName + "." + funcName +\n                                      " = " + funcName + ";");\n                    this.recordSourceMappingEnd(funcDecl);\n                }\n            }\n        }\n\n        public emitAmbientVarDecl(varDecl: VarDecl) {\n            if (varDecl.init) {\n                this.emitParensAndCommentsInPlace(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                this.writeToOutput(" = ");\n                this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                this.recordSourceMappingEnd(varDecl);\n                this.writeToOutput(";");\n                this.emitParensAndCommentsInPlace(varDecl, false);\n            }\n        }\n\n        private varListCount(): number {\n            return this.varListCountStack[this.varListCountStack.length - 1];\n        }\n\n        // Emits "var " if it is allowed\n        private emitVarDeclVar() {\n            // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n            // If it is var list of form  var a = varList count will be 0\n            if (this.varListCount() >= 0) {\n                this.writeToOutput("var ");\n                this.setInVarBlock(-this.varListCount());\n            }\n            return true;\n        }\n\n        private onEmitVar() {\n            if (this.varListCount() > 0) {\n                this.setInVarBlock(this.varListCount() - 1);\n            }\n            else if (this.varListCount() < 0) {\n                this.setInVarBlock(this.varListCount() + 1);\n            }\n        }\n\n        public emitJavascriptVarDecl(varDecl: VarDecl, tokenId: TokenID) {\n            if ((varDecl.varFlags & VarFlags.Ambient) == VarFlags.Ambient) {\n                this.emitAmbientVarDecl(varDecl);\n                this.onEmitVar();\n            }\n            else {\n                var sym = varDecl.sym;\n                var hasInitializer = (varDecl.init != null);\n                this.emitParensAndCommentsInPlace(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                if (sym && sym.isMember() && sym.container &&\n                    (sym.container.kind() == SymbolKind.Type)) {\n                    var type = (<TypeSymbol>sym.container).type;\n                    if (type.isClass() && (!hasFlag(sym.flags, SymbolFlags.ModuleMember))) {\n                        // class\n                        if (this.emitState.container != EmitContainer.Args) {\n                            if (hasFlag(sym.flags, SymbolFlags.Static)) {\n                                this.writeToOutput(sym.container.name + ".");\n                            }\n                            else {\n                                this.writeToOutput("this.");\n                            }\n                        }\n                    }\n                    else if (type.hasImplementation()) {\n                        // module\n                        if (!hasFlag(sym.flags, SymbolFlags.Exported) && (sym.container == this.checker.gloMod || !hasFlag(sym.flags, SymbolFlags.Property))) {\n                            this.emitVarDeclVar();\n                        }\n                        else if (hasFlag(varDecl.varFlags, VarFlags.LocalStatic)) {\n                            this.writeToOutput(".");\n                        }\n                        else {\n                            if (this.emitState.container == EmitContainer.DynamicModule) {\n                                this.writeToOutput("exports.");\n                            }\n                            else {\n                                this.writeToOutput(this.moduleName + ".");\n                            }\n                        }\n                    }\n                    else {\n                        // function, constructor, method etc.\n                        if (tokenId != TokenID.OpenParen) {\n                            if (hasFlag(sym.flags, SymbolFlags.Exported) && sym.container == this.checker.gloMod) {\n                                this.writeToOutput("this.");\n                            }\n                            else {\n                                this.emitVarDeclVar();\n                            }\n                        }\n                    }\n                }\n                else {\n            ';
var v27311 = v27312 + '        if (tokenId != TokenID.OpenParen) {\n                        this.emitVarDeclVar();\n                    }\n                }\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                if (hasInitializer) {\n                    this.writeToOutputTrimmable(" = ");\n\n                    // Ensure we have a fresh var list count when recursing into the variable \n                    // initializer.  We don\'t want our current list of variables to affect how we\n                    // emit nested variable lists.\n                    this.varListCountStack.push(0);\n                    this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                    this.varListCountStack.pop();\n                }\n                this.onEmitVar();\n                if ((tokenId != TokenID.OpenParen)) {\n                    if (this.varListCount() < 0) {\n                        this.writeToOutput(", ");\n                    } else if (tokenId != TokenID.For) {\n                        this.writeToOutputTrimmable(";");\n                    }\n                }\n                this.recordSourceMappingEnd(varDecl);\n                this.emitParensAndCommentsInPlace(varDecl, false);\n            }\n        }\n\n        public declEnclosed(moduleDecl: ModuleDeclaration): bool {\n            if (moduleDecl == null) {\n                return true;\n            }\n            for (var i = 0, len = this.moduleDeclList.length; i < len; i++) {\n                if (this.moduleDeclList[i] == moduleDecl) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitJavascriptName(name: Identifier, addThis: bool) {\n            var sym = name.sym;\n            this.emitParensAndCommentsInPlace(name, true);\n            this.recordSourceMappingStart(name);\n            if (!name.isMissing()) {\n                if (addThis && (this.emitState.container != EmitContainer.Args) && sym) {\n                    // TODO: flag global module with marker other than string name\n                    if (sym.container && (sym.container.name != globalId)) {\n                        if (hasFlag(sym.flags, SymbolFlags.Static) && (hasFlag(sym.flags, SymbolFlags.Property))) {\n                            if (sym.declModule && hasFlag(sym.declModule.modFlags, ModuleFlags.IsDynamic)) {\n                                this.writeToOutput("exports.");\n                            }\n                            else {\n                                this.writeToOutput(sym.container.name + ".");\n                            }\n                        }\n                        else if (sym.kind() == SymbolKind.Field) {\n                            var fieldSym = <FieldSymbol>sym;\n                            if (hasFlag(fieldSym.flags, SymbolFlags.ModuleMember)) {\n                                if ((sym.container != this.checker.gloMod) && ((hasFlag(sym.flags, SymbolFlags.Property)) || hasFlag(sym.flags, SymbolFlags.Exported))) {\n                                    if (hasFlag(sym.declModule.modFlags, ModuleFlags.IsDynamic)) {\n                                        this.writeToOutput("exports.");\n                                    }\n                                    else {\n                                        this.writeToOutput(sym.container.name + ".");\n                                    }\n                                }\n                            }\n                            else {\n                                if (sym.isInstanceProperty()) {\n                                    this.emitThis();\n                                    this.writeToOutput(".");\n                                }\n                            }\n                        }\n                        else if (sym.kind() == SymbolKind.Type) {\n                            if (sym.isInstanceProperty()) {\n                                var typeSym = <TypeSymbol>sym;\n                                var type = typeSym.type;\n                                if (type.call && !hasFlag(sym.flags, SymbolFlags.ModuleMember)) {\n                                    this.emitThis();\n                                    this.writeToOutput(".");\n                                }\n                            }\n                            else if ((sym.unitIndex != this.checker.locationInfo.unitIndex) || (!this.declEnclosed(sym.declModule))) {\n                                this.writeToOutput(sym.container.name + ".")\n                            }\n                        }\n                    }\n                    else if (sym.container == this.checker.gloMod &&\n                                hasFlag(sym.flags, SymbolFlags.Exported) &&\n                                !hasFlag(sym.flags, SymbolFlags.Ambient) &&\n                                // check that it\'s a not a member of an ambient module...\n                                !((sym.isType()';
var v27310 = v27311 + ' || sym.isMember()) &&\n                                    sym.declModule &&\n                                    hasFlag(sym.declModule.modFlags, ModuleFlags.Ambient)) &&\n                                this.emitState.container == EmitContainer.Prog &&\n                                sym.declAST.nodeType != NodeType.FuncDecl) {\n                        this.writeToOutput("this.");\n                    }\n                }\n\n                // If it\'s a dynamic module, we need to print the "require" invocation\n                if (sym &&\n                    sym.declAST &&\n                    sym.declAST.nodeType == NodeType.ModuleDeclaration &&\n                    (hasFlag((<ModuleDeclaration>sym.declAST).modFlags, ModuleFlags.IsDynamic))) {\n                    var moduleDecl: ModuleDeclaration = <ModuleDeclaration>sym.declAST;\n\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                        this.writeLineToOutput("__" + this.modAliasId + "__;");\n                    }\n                    else {\n                        var modPath = name.actualText;//(<ModuleDecl>moduleDecl.mod.symbol.declAST).name.actualText;\n                        var isAmbient = moduleDecl.mod.symbol.declAST && hasFlag((<ModuleDeclaration>moduleDecl.mod.symbol.declAST).modFlags, ModuleFlags.Ambient);\n                        modPath = isAmbient ? modPath : this.firstModAlias ? this.firstModAlias : quoteBaseName(modPath);\n                        modPath = isAmbient ? modPath : (!isRelative(stripQuotes(modPath)) ? quoteStr("./" + stripQuotes(modPath)) : modPath);\n                        this.writeToOutput("require(" + modPath + ")");\n                    }\n                }\n                else {\n                    this.writeToOutput(name.actualText);\n                }\n            }\n            this.recordSourceMappingEnd(name);\n            this.emitParensAndCommentsInPlace(name, false);\n        }\n\n        public emitJavascriptStatements(stmts: AST, emitEmptyBod: bool) {\n            if (stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    var hasContents = (stmts && (stmts.nodeType != NodeType.List || ((<ASTList>stmts).members.length > 0)));\n                    if (emitEmptyBod || hasContents) {\n                        var hasOnlyBlockStatement = ((stmts.nodeType == NodeType.Block) ||\n                            ((stmts.nodeType == NodeType.List) && ((<ASTList>stmts).members.length == 1) && ((<ASTList>stmts).members[0].nodeType == NodeType.Block)));\n\n                        this.recordSourceMappingStart(stmts);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput(" {");\n                            this.indenter.increaseIndent();\n                        }\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, false);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput("");\n                            this.indenter.decreaseIndent();\n                            this.emitIndent();\n                            this.writeToOutput("}");\n                        }\n                        this.recordSourceMappingEnd(stmts);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else if (emitEmptyBod) {\n                this.writeToOutput("{ }");\n            }\n        }\n\n        public emitBareJavascriptStatements(stmts: AST, emitClassPropertiesAfterSuperCall: bool = false) {\n            // just the statements without enclosing curly braces\n            if (stmts.nodeType != NodeType.Block) {\n                if (stmts.nodeType == NodeType.List) {\n                    var stmtList = <ASTList>stmts;\n                    if ((stmtList.members.length == 2) &&\n                        (stmtList.members[0].nodeType == NodeType.Block) &&\n                        (stmtList.members[1].nodeType == NodeType.EndCode)) {\n                        this.emitJavascript(stmtList.members[0], TokenID.Semicolon, true);\n                        this.writeLineToOutput("");\n                    }\n                    else {\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, emitClassPropertiesAfterSuperCall);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else {\n                this.emitJavascript(stmts, TokenID.Semicolon, true);\n            }\n        }\n\n        public recordSourceMappingNameStart(name: string) {\n            if (this.sourceMapper) {\n                var finalName = name;\n                if (!name) {\n                    finalName = "";\n                } else if (this.sourceMapper.currentNameIndex.length > 0) {\n                    finalName = this.sourceMapper.names[this.source';
var v27309 = v27310 + "Mapper.currentNameIndex.length - 1] + \".\" + name;\n                }\n\n                // We are currently not looking for duplicate but that is possible.\n                this.sourceMapper.names.push(finalName);\n                this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);\n            }\n        }\n\n        public recordSourceMappingNameEnd() {\n            if (this.sourceMapper) {\n                this.sourceMapper.currentNameIndex.pop();\n            }\n        }\n\n        public recordSourceMappingStart(ast: ASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                var lineCol = { line: -1, col: -1 };\n                var sourceMapping = new SourceMapping();\n                sourceMapping.start.emittedColumn = this.emitState.column;\n                sourceMapping.start.emittedLine = this.emitState.line;\n                // REVIEW: check time consumed by this binary search (about two per leaf statement)\n                getSourceLineColFromMap(lineCol, ast.minChar, this.checker.locationInfo.lineMap);\n                sourceMapping.start.sourceColumn = lineCol.col;\n                sourceMapping.start.sourceLine = lineCol.line;\n                getSourceLineColFromMap(lineCol, ast.limChar, this.checker.locationInfo.lineMap);\n                sourceMapping.end.sourceColumn = lineCol.col;\n                sourceMapping.end.sourceLine = lineCol.line;\n                if (this.sourceMapper.currentNameIndex.length > 0) {\n                    sourceMapping.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];\n                }\n                // Set parent and child relationship\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                siblings.push(sourceMapping);\n                this.sourceMapper.currentMappings.push(sourceMapping.childMappings);\n            }\n        }\n\n        public recordSourceMappingEnd(ast: ASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                // Pop source mapping childs\n                this.sourceMapper.currentMappings.pop();\n\n                // Get the last source mapping from sibling list = which is the one we are recording end for\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                var sourceMapping = siblings[siblings.length - 1];\n\n                sourceMapping.end.emittedColumn = this.emitState.column;\n                sourceMapping.end.emittedLine = this.emitState.line;\n            }\n        }\n\n        public Close() {\n            if (this.sourceMapper != null) {\n                SourceMapper.EmitSourceMapping(this.allSourceMappers);\n            }\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                this.outfile.Close();\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n\n        public emitJavascriptList(ast: AST, delimiter: string, tokenId: TokenID, startLine: bool, onlyStatics: bool, emitClassPropertiesAfterSuperCall: bool = false, emitPrologue? = false, requiresExtendsBlock?: bool) {\n            if (ast == null) {\n                return;\n            }\n            else if (ast.nodeType != NodeType.List) {\n                this.emitPrologue(emitPrologue);\n                this.emitJavascript(ast, tokenId, startLine);\n            }\n            else {\n                var list = <ASTList>ast;\n                if (list.members.length == 0) {\n                    return;\n                }\n\n                this.emitParensAndCommentsInPlace(ast, true);\n                var len = list.members.length;\n                for (var i = 0; i < len; i++) {\n                    if (emitPrologue) {\n                        // If the list has Strict mode flags, emit prologue after first statement\n                        // otherwise emit before first statement\n                        if (i == 1 || !hasFlag(list.flags, ASTFlags.StrictMode)) {\n                            this.emitPrologue(requiresExtendsBlock);\n                            emitPrologue = false;\n                        }\n                    }\n\n                    // In some circumstances, class property initializers must be emitted immediately after the 'super' constructor\n                    // call which, in these cases, must be the first statement in the constructor body\n                    if (i == 1 && emitClassPropertiesAfterSuperCall) {\n\n                        // emit any parameter properties first\n                        var constructorDecl = (<ClassDeclaration>this.thisClassNode).constructorDecl;\n\n                        if (constructorDecl && constructorDecl.arguments) {\n                            var argsLen = constructorDecl.arguments.members.length;\n                            for (var iArg = 0; iArg < argsLen; iArg++) {\n                     ";
var v27308 = v27309 + '           var arg = <BoundDecl>constructorDecl.arguments.members[iArg];\n                                if ((arg.varFlags & VarFlags.Property) != VarFlags.None) {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(arg);\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput("this." + arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeToOutput(" = ");\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput(arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeLineToOutput(";");\n                                    this.recordSourceMappingEnd(arg);\n                                }\n                            }\n                        }\n\n                        var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                        for (var iMember = 0; iMember < nProps; iMember++) {\n                            if ((<ASTList>this.thisClassNode.members).members[iMember].nodeType == NodeType.VarDecl) {\n                                var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[iMember];\n                                if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                                    this.emitIndent();\n                                    this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                    this.writeLineToOutput("");\n                                }\n                            }\n                        }\n                    }\n\n                    var emitNode = list.members[i];\n\n                    var isStaticDecl =\n                                (emitNode.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>emitNode).fncFlags, FncFlags.Static)) ||\n                                (emitNode.nodeType == NodeType.VarDecl && hasFlag((<VarDecl>emitNode).varFlags, VarFlags.Static))\n\n                    if (onlyStatics ? !isStaticDecl : isStaticDecl) {\n                        continue;\n                    }\n                    this.emitJavascript(emitNode, tokenId, startLine);\n\n                    if (delimiter && (i < (len - 1))) {\n                        if (startLine) {\n                            this.writeLineToOutput(delimiter);\n                        }\n                        else {\n                            this.writeToOutput(delimiter);\n                        }\n                    }\n                    else if (startLine &&\n                             (emitNode.nodeType != NodeType.ModuleDeclaration) &&\n                             (emitNode.nodeType != NodeType.InterfaceDeclaration) &&\n                             (!((emitNode.nodeType == NodeType.VarDecl) &&\n                                ((((<VarDecl>emitNode).varFlags) & VarFlags.Ambient) == VarFlags.Ambient) &&\n                                (((<VarDecl>emitNode).init) == null)) && this.varListCount() >= 0) &&\n                             (emitNode.nodeType != NodeType.Block || (<Block>emitNode).isStatementBlock) &&\n                             (emitNode.nodeType != NodeType.EndCode) &&\n                             (emitNode.nodeType != NodeType.FuncDecl)) {\n                        this.writeLineToOutput("");\n                    }\n                }\n                this.emitParensAndCommentsInPlace(ast, false);\n            }\n        }\n\n        // tokenId is the id the preceding token\n        public emitJavascript(ast: AST, tokenId: TokenID, startLine: bool) {\n            if (ast == null) {\n                return;\n            }\n\n            // REVIEW: simplify rules for indenting\n            if (startLine && (this.indenter.indentAmt > 0) && (ast.nodeType != NodeType.List) &&\n                (ast.nodeType != NodeType.Block)) {\n                if ((ast.nodeType != NodeType.InterfaceDeclaration) &&\n                    (!((ast.nodeType == NodeType.VarDecl) &&\n                       ((((<VarDecl>ast).varFlags) & VarFlags.Ambient) == VarFlags.Ambient) &&\n                       (((<VarDecl>ast).init) == null)) && this.varListCount() >= 0) &&\n                    (ast.nodeType != NodeType.EndCode) &&\n                    ((ast.nodeType != NodeType.FuncDecl) ||\n                     (this.emitState.container != EmitContainer.Constructor))) {\n                    this.emitIndent();\n                }\n            }\n\n            ast.emit(this, tokenId, startLine);\n\n            if ((tokenId == TokenID.Semicolon) && (ast.nodeType < NodeType.GeneralNode)) {\n                this.writeToOutput(";");\n            }\n        }\n\n        public emitPropertyAccessor(funcDecl: FuncDecl, className: string, isProto: bool) {\n            if (!(<FieldSymbol>funcDecl.accessorSymbol).h';
var v27307 = v27308 + 'asBeenEmitted) {\n                var accessorSymbol = <FieldSymbol>funcDecl.accessorSymbol;\n                this.emitIndent();\n                this.recordSourceMappingStart(funcDecl);\n                this.writeLineToOutput("Object.defineProperty(" + className + (isProto ? ".prototype, \\"" : ", \\"") + funcDecl.name.actualText + "\\"" + ", {");\n                this.indenter.increaseIndent();\n\n                if (accessorSymbol.getter) {\n                    var getter: FuncDecl = <FuncDecl>accessorSymbol.getter.declAST;\n\n                    this.emitIndent();\n                    this.recordSourceMappingStart(getter);\n                    this.writeToOutput("get: ");\n                    this.emitInnerFunction(getter, false, isProto, null, Emitter.shouldCaptureThis(getter), null);\n                    this.writeLineToOutput(",");\n                }\n\n                if (accessorSymbol.setter) {\n                    var setter: FuncDecl = <FuncDecl>accessorSymbol.setter.declAST;\n\n                    this.emitIndent();\n                    this.recordSourceMappingStart(setter);\n                    this.writeToOutput("set: ");\n                    this.emitInnerFunction(setter, false, isProto, null, Emitter.shouldCaptureThis(setter), null);\n                    this.writeLineToOutput(",");\n                }\n\n                this.emitIndent();\n                this.writeLineToOutput("enumerable: true,");\n                this.emitIndent();\n                this.writeLineToOutput("configurable: true");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput("});");\n                this.recordSourceMappingEnd(funcDecl);\n\n                accessorSymbol.hasBeenEmitted = true;\n            }\n        }\n\n        public emitPrototypeMember(member: AST, className: string) {\n            if (member.nodeType == NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>member;\n                if (funcDecl.isAccessor()) {\n                    this.emitPropertyAccessor(funcDecl, className, true);\n                }\n                else {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeToOutput(className + ".prototype." + funcDecl.getNameText() + " = ");\n                    this.emitInnerFunction(funcDecl, false, true, null, Emitter.shouldCaptureThis(funcDecl), null);\n                    this.writeLineToOutput(";");\n                }\n            }\n            else if (member.nodeType == NodeType.VarDecl) {\n                var varDecl = <VarDecl>member;\n\n                if (varDecl.init) {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(varDecl);\n                    this.recordSourceMappingStart(varDecl.id);\n                    this.writeToOutput(className + ".prototype." + varDecl.id.actualText);\n                    this.recordSourceMappingEnd(varDecl.id);\n                    this.writeToOutput(" = ");\n                    this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                    this.recordSourceMappingEnd(varDecl);\n                    this.writeLineToOutput(";");\n                }\n            }\n        }\n\n        public emitAddBaseMethods(className: string, base: Type, classDecl: TypeDeclaration): void {\n            if (base.members) {\n                var baseSymbol = base.symbol;\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                base.members.allMembers.map(function(key, s, c) {\n                    var sym = <Symbol>s;\n                    if ((sym.kind() == SymbolKind.Type) && (<TypeSymbol>sym).type.call) {\n                        this.recordSourceMappingStart(sym.declAST);\n                        this.writeLineToOutput(className + ".prototype." + sym.name + " = " +\n                                          baseName + ".prototype." + sym.name + ";");\n                        this.recordSourceMappingEnd(sym.declAST);\n                    }\n                }, null);\n            }\n            if (base.extendsList) {\n                for (var i = 0, len = base.extendsList.length; i < len; i++) {\n                    this.emitAddBaseMethods(className, base.extendsList[i], classDecl);\n                }\n            }\n        }\n\n        public emitJavascriptClass(classDecl: ClassDeclaration) {\n            if (!hasFlag(classDecl.varFlags, VarFlags.Ambient)) {\n                var svClassNode = this.thisClassNode;\n                var i = 0;\n                this.thisClassNode = classDecl;\n                var className = classDecl.name.actualText;\n                this.emitParensAndCommentsInPlace(classDecl, true);\n                var temp = this.setContainer(EmitContainer.Class);\n\n                this.recordSourceMappingStart(classDecl);\n                if (hasFlag(classDecl.varFlags, VarF';
var v27306 = v27307 + 'lags.Exported) && classDecl.type.symbol.container == this.checker.gloMod) {\n                    this.writeToOutput("this." + className);\n                }\n                else {\n                    this.writeToOutput("var " + className);\n                }\n\n                //if (hasFlag(classDecl.varFlags, VarFlags.Exported) && (temp == EmitContainer.Module || temp == EmitContainer.DynamicModule)) {\n                //    var modName = temp == EmitContainer.Module ? this.moduleName : "exports";\n                //    this.writeToOutput(" = " + modName + "." + className);\n                //}\n\n                var hasBaseClass = classDecl.extendsList && classDecl.extendsList.members.length;\n                var baseNameDecl: AST = null;\n                var baseName: AST = null;\n\n                if (hasBaseClass) {\n                    this.writeLineToOutput(" = (function (_super) {");\n                } else {\n                    this.writeLineToOutput(" = (function () {");\n                }\n\n                this.recordSourceMappingNameStart(className);\n                this.indenter.increaseIndent();\n\n                if (hasBaseClass) {\n                    baseNameDecl = classDecl.extendsList.members[0];\n                    baseName = baseNameDecl.nodeType == NodeType.Call ? (<CallExpression>baseNameDecl).target : baseNameDecl;\n                    this.emitIndent();\n                    this.writeLineToOutput("__extends(" + className + ", _super);");\n                }\n\n                this.emitIndent();\n\n                var constrDecl = classDecl.constructorDecl;\n\n                // output constructor\n                if (constrDecl) {\n                    // declared constructor\n                    this.emitJavascript(classDecl.constructorDecl, TokenID.OpenParen, false);\n\n                }\n                else {\n                    var wroteProps = 0;\n\n                    this.recordSourceMappingStart(classDecl);\n                    // default constructor\n                    this.indenter.increaseIndent();\n                    this.writeToOutput("function " + classDecl.name.actualText + "() {");\n                    this.recordSourceMappingNameStart("constructor");\n                    if (hasBaseClass) {\n                        this.writeLineToOutput("");\n                        this.emitIndent();\n                        this.writeLineToOutput("_super.apply(this, arguments);");\n                        wroteProps++;\n                    }\n\n                    if (classDecl.varFlags & VarFlags.MustCaptureThis) {\n                        this.writeCaptureThisStatement(classDecl);\n                    }\n\n                    var members = (<ASTList>this.thisClassNode.members).members\n\n                    // output initialized properties\n                    for (var i = 0; i < members.length; i++) {\n                        if (members[i].nodeType == NodeType.VarDecl) {\n                            var varDecl = <VarDecl>members[i];\n                            if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                                this.writeLineToOutput("");\n                                this.emitIndent();\n                                this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                wroteProps++;\n                            }\n                        }\n                    }\n                    if (wroteProps) {\n                        this.writeLineToOutput("");\n                        this.indenter.decreaseIndent();\n                        this.emitIndent();\n                        this.writeLineToOutput("}");\n                    }\n                    else {\n                        this.writeLineToOutput(" }");\n                        this.indenter.decreaseIndent();\n                    }\n                    this.recordSourceMappingNameEnd();\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                var membersLen = classDecl.members.members.length;\n                for (var j = 0; j < membersLen; j++) {\n\n                    var memberDecl: AST = classDecl.members.members[j];\n\n                    if (memberDecl.nodeType == NodeType.FuncDecl) {\n                        var fn = <FuncDecl>memberDecl;\n\n                        if (hasFlag(fn.fncFlags, FncFlags.Method) && !fn.isSignature()) {\n                            if (!hasFlag(fn.fncFlags, FncFlags.Static)) {\n                                this.emitPrototypeMember(fn, className);\n                            }\n                            else { // static functions\n                                if (fn.isAccessor()) {\n                                    this.emitPropertyAccessor(fn, this.thisClassNode.name.actualText, false);\n                                }\n                                else {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(fn)\n                                    this.writeToOutput(classD';
var v27305 = v27306 + 'ecl.name.actualText + "." + fn.name.actualText + " = ");\n                                    this.emitInnerFunction(fn, (fn.name && !fn.name.isMissing()), true,\n                                            null, Emitter.shouldCaptureThis(fn), null);\n                                    this.writeLineToOutput(";");\n                                }\n                            }\n                        }\n                    }\n                    else if (memberDecl.nodeType == NodeType.VarDecl) {\n                        var varDecl = <VarDecl>memberDecl;\n                        if (hasFlag(varDecl.varFlags, VarFlags.Static)) {\n\n                            if (varDecl.init) {\n                                // EMITREVIEW\n                                this.emitIndent();\n                                this.recordSourceMappingStart(varDecl);\n                                this.writeToOutput(classDecl.name.actualText + "." + varDecl.id.actualText + " = ");\n                                this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                                // EMITREVIEW\n\n                                this.writeLineToOutput(";");\n                                this.recordSourceMappingEnd(varDecl);\n                            }\n                        }\n                    }\n                    else {\n                        throw Error("We want to catch this");\n                    }\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeLineToOutput("return " + className + ";");\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeToOutput("}");\n                this.recordSourceMappingNameEnd();\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.recordSourceMappingStart(classDecl);\n                this.writeToOutput(")(");\n                if (hasBaseClass)\n                    this.emitJavascript(baseName, TokenID.Tilde, false);\n                this.writeToOutput(");");\n                this.recordSourceMappingEnd(classDecl);\n\n                if ((temp == EmitContainer.Module || temp == EmitContainer.DynamicModule) && hasFlag(classDecl.varFlags, VarFlags.Exported)) {\n                    this.writeLineToOutput("");\n                    this.emitIndent();\n                    var modName = temp == EmitContainer.Module ? this.moduleName : "exports";\n                    this.recordSourceMappingStart(classDecl);\n                    this.writeToOutput(modName + "." + className + " = " + className + ";");\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingEnd(classDecl);\n                this.emitParensAndCommentsInPlace(classDecl, false);\n                this.setContainer(temp);\n                this.thisClassNode = svClassNode;\n            }\n        }\n\n        public emitPrologue(reqInherits: bool) {\n            if (!this.prologueEmitted) {\n                if (reqInherits) {\n                    this.prologueEmitted = true;\n                    this.writeLineToOutput("var __extends = this.__extends || function (d, b) {");\n                    this.writeLineToOutput("    function __() { this.constructor = d; }");\n                    this.writeLineToOutput("    __.prototype = b.prototype;");\n                    this.writeLineToOutput("    d.prototype = new __();");\n                    this.writeLineToOutput("};");\n                }\n                if (this.checker.mustCaptureGlobalThis) {\n                    this.prologueEmitted = true;\n                    this.writeLineToOutput(this.captureThisStmtString);\n                }\n            }\n        }\n\n        public emitSuperReference() {\n            this.writeToOutput("_super.prototype");\n        }\n\n        public emitSuperCall(callEx: CallExpression): bool {\n            if (callEx.target.nodeType == NodeType.Dot) {\n                var dotNode = <BinaryExpression>callEx.target;\n                if (dotNode.operand1.nodeType == NodeType.Super) {\n                    this.emitJavascript(dotNode, TokenID.OpenParen, false);\n                    this.writeToOutput(".call(");\n                    this.emitThis();\n                    if (callEx.arguments && callEx.arguments.members.length > 0) {\n                        this.writeToOutput(", ");\n                        this.emitJavascriptList(callEx.arguments, ", ", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(")");\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitThis() {\n            if (this.thisFnc && !this.thisFnc.isMethod() && (!this.thisFnc.isConstructor)) {\n          ';
var v27304 = v27305 + '      this.writeToOutput("_this");\n            }\n            else {\n                this.writeToOutput("this");\n            }\n        }\n\n        private static shouldCaptureThis(func: FuncDecl): bool {\n            // Super calls use \'this\' reference. If super call is in a lambda, \'this\' value needs to be captured in the parent.\n            return func.hasSelfReference() || func.hasSuperReferenceInFatArrowFunction();\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface ILineCol {\n        line: number;\n        col: number;\n    }\n\n    export class ErrorReporter {\n        public parser: Parser = null;\n        public checker: TypeChecker = null;\n        public lineCol = { line: 0, col: 0 };\n        public emitAsComments = true;\n        public hasErrors = false;\n        public pushToErrorSink = false;\n        public errorSink: string[] = [];\n\n        constructor (public outfile: ITextWriter) { }\n\n        public getCapturedErrors() { return this.errorSink; }\n        public freeCapturedErrors() { this.errorSink = []; }\n        public captureError(emsg: string) { this.errorSink[this.errorSink.length] = emsg; }\n\n        public setErrOut(outerr) {\n            this.outfile = outerr;\n            this.emitAsComments = false;\n        }\n\n        public emitPrefix() {\n            if (this.emitAsComments) {\n                this.outfile.Write("// ");\n            }\n            this.outfile.Write(this.checker.locationInfo.filename + "(" + this.lineCol.line + "," + this.lineCol.col + "): ");\n        }\n\n        public writePrefix(ast: AST): void {\n            if (ast) {\n                this.setError(ast);\n            }\n            else {\n                this.lineCol.line = 0;\n                this.lineCol.col = 0;\n            }\n            this.emitPrefix();\n        }\n\n        public writePrefixFromSym(symbol: Symbol): void {\n            if (symbol && this.checker.locationInfo.lineMap) {\n                getSourceLineColFromMap(this.lineCol, symbol.location,\n                                        this.checker.locationInfo.lineMap);\n            }\n            else {\n                this.lineCol.line = -1;\n                this.lineCol.col = -1;\n            }\n            this.emitPrefix();\n        }\n\n        public setError(ast: AST) {\n            if (ast) {\n                ast.flags |= ASTFlags.Error;\n                if (this.checker.locationInfo.lineMap) {\n                    getSourceLineColFromMap(this.lineCol, ast.minChar, this.checker.locationInfo.lineMap);\n                }\n            }\n        }\n\n        public reportError(ast: AST, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (ast && this.parser.errorRecovery && this.parser.errorCallback) {\n                var len = (ast.limChar - ast.minChar);\n                this.parser.errorCallback(ast.minChar, len, message, this.checker.locationInfo.unitIndex);\n            }\n            else {\n                this.writePrefix(ast);\n                this.outfile.WriteLine(message); // Right after the semi-colon\n            }\n        }\n\n        public reportErrorFromSym(symbol: Symbol, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (this.parser.errorRecovery && this.parser.errorCallback) {\n                this.parser.errorCallback(symbol.location, symbol.length, message, this.checker.locationInfo.unitIndex);\n            }\n            else {\n                this.writePrefixFromSym(symbol);\n                this.outfile.WriteLine(message);\n            }\n        }\n\n        public emitterError(ast: AST, message: string) {\n            this.reportError(ast, message);\n            // Emitter errors are not recoverable, stop immediately\n            throw Error("EmitError");\n        }\n\n        public duplicateIdentifier(ast: AST, name: string) {\n            this.reportError(';
var v27303 = v27304 + 'ast, "Duplicate identifier \'" + name + "\'");\n        }\n\n        public showRef(ast: AST, text: string, symbol: Symbol) {\n            var defLineCol = { line: -1, col: -1 };\n            // TODO: multiple def locations\n            this.parser.getSourceLineCol(defLineCol, symbol.location);\n            this.reportError(ast, "symbol " + text + " defined at (" + defLineCol.line + "," +\n                              defLineCol.col + ")");\n        }\n\n        public unresolvedSymbol(ast: AST, name: string) {\n            this.reportError(ast, "The name \'" + name + "\' does not exist in the current scope");\n        }\n\n        public symbolDoesNotReferToAValue(ast: AST, name: string): void {\n            this.reportError(ast, "The name \'" + name + "\' does not refer to a value");\n        }\n\n        public styleError(ast: AST, msg: string): void {\n            var bkThrow = this.pushToErrorSink;\n            this.pushToErrorSink = false;\n            this.reportError(ast, "STYLE: " + msg);\n            this.pushToErrorSink = bkThrow;\n        }\n\n        public simpleError(ast: AST, msg: string): void {\n            this.reportError(ast, msg);\n        }\n\n        public simpleErrorFromSym(sym: Symbol, msg: string): void {\n            this.reportErrorFromSym(sym, msg);\n        }\n\n        public invalidSuperReference(ast: AST) {\n            this.simpleError(ast, "Keyword \'super\' can only be used inside a class instance method");\n        }\n\n        public valueCannotBeModified(ast: AST) {\n            this.simpleError(ast, "The left-hand side of an assignment expression must be a variable, property or indexer");\n        }\n\n        public invalidCall(ast: CallExpression, nodeType: number, scope: SymbolScope): void {\n            var targetType = ast.target.type;\n            var typeName = targetType.getScopedTypeName(scope);\n            if (targetType.construct && (nodeType == NodeType.Call)) {\n                this.reportError(ast, "Value of type \'" + typeName + "\' is not callable.  Did you mean to include \'new\'?");\n            } else {\n                var catString = (nodeType == NodeType.Call) ? "callable" : "newable";\n\n                this.reportError(ast, "Value of type \'" + typeName + "\' is not " + catString);\n            }\n        }\n\n        public indexLHS(ast: BinaryExpression, scope: SymbolScope): void {\n            var targetType = ast.operand1.type.getScopedTypeName(scope);\n            var indexType = ast.operand2.type.getScopedTypeName(scope);\n            this.simpleError(ast, "Value of type \'" + targetType + "\' is not indexable by type \'" + indexType + "\'");\n        }\n\n        public incompatibleTypes(ast: AST, t1: Type, t2: Type, op: string, scope: SymbolScope, comparisonInfo?:TypeComparisonInfo) {\n            if (!t1) {\n                t1 = this.checker.anyType;\n            }\n            if (!t2) {\n                t2 = this.checker.anyType;\n            }\n\n            var reason = comparisonInfo ? comparisonInfo.message : "";\n            if (op) {\n                this.reportError(ast, "Operator \'" + op + "\' cannot be applied to types \'" + t1.getScopedTypeName(scope) +\n                                  "\' and \'" + t2.getScopedTypeName(scope) + "\'" + (reason ? ": " + reason : ""));\n            }\n            else {\n                this.reportError(ast, "Cannot convert \'" + t1.getScopedTypeName(scope) +\n                                  "\' to \'" + t2.getScopedTypeName(scope) + "\'" + (reason ? ": " + reason : ""));\n            }\n        }\n\n        public expectedClassOrInterface(ast: AST): void {\n            this.simpleError(ast, "Expected var, class, interface, or module");\n        }\n\n        public unaryOperatorTypeError(ast: AST, op: string, type: Type) {\n            this.reportError(ast, "Operator \'" + op + "\' cannot be applied to type \'" + type.getTypeName() + "\'");\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export function hasFlag(val: number, flag: number) {\n        return (val & flag) != 0;\n    }\n\n    export enum ErrorRecoverySet {\n        None = 0,\n        Comma = 1, // Comma\n        SColon = 1 << 1, // SColon\n        Asg = 1 << 2, // Asg\n        BinOp = 1 << 3, // Lsh, Rsh, Rs2, Le, Ge, INSTANCEOF, EQ, NE, Eqv, NEqv, LogAnd, LogOr, AsgMul, AsgDiv\n        // AsgMod, AsgAdd, AsgSub, AsgLsh, AsgRsh, AsgRs2, AsgAnd, AsgXor, AsgOr, QMark, Mult, Div, \n        // Pct, GT, LT, ';
var v27302 = v27303 + "And, Xor, Or\n        RBrack = 1 << 4, // RBrack\n        RCurly = 1 << 5, // RCurly\n        RParen = 1 << 6, // RParen\n        Dot = 1 << 7, // Dot\n        Colon = 1 << 8, // Colon\n        PrimType = 1 << 9, // number, string, bool\n        AddOp = 1 << 10, // Add, Sub\n        LCurly = 1 << 11, // LCurly\n        PreOp = 1 << 12, // Tilde, Bang, Inc, Dec\n        RegExp = 1 << 13, // RegExp\n        LParen = 1 << 14, // LParen\n        LBrack = 1 << 15, // LBrack\n        Scope = 1 << 16, // Scope\n        In = 1 << 17, // IN\n        SCase = 1 << 18, // CASE, DEFAULT\n        Else = 1 << 19, // ELSE\n        Catch = 1 << 20, // CATCH, FINALLY\n        Var = 1 << 21, // \n        Stmt = 1 << 22, // BREAK, RETURN, THROW, DEBUGGER, FOR, SWITCH, DO, IF, TRY, WITH\n        While = 1 << 23, // WHILE\n        ID = 1 << 24, // ID\n        Prefix = 1 << 25, // VOID, DELETE, TYPEOF, AWAIT\n        Literal = 1 << 26, // IntCon, FltCon, StrCon\n        RLit = 1 << 27, // THIS, TRUE, FALSE, NULL\n        Func = 1 << 28, // FUNCTION\n        EOF = 1 << 29, // EOF\n\n        // REVIEW: Name this something clearer.\n        TypeScriptS = 1 << 30, // PROPERTY, PRIVATE, STATIC, INTERFACE, CLASS, MODULE, EXPORT, IMPORT\n        ExprStart = SColon | AddOp | LCurly | PreOp | RegExp | LParen | LBrack | ID | Prefix | RLit | Func | Literal,\n        StmtStart = ExprStart | SColon | Var | Stmt | While | TypeScriptS,\n        Postfix = Dot | LParen | LBrack,\n    }\n\n    export enum AllowedElements {\n        None = 0,\n        ModuleDeclarations = 1 << 2,\n        ClassDeclarations = 1 << 3,\n        InterfaceDeclarations = 1 << 4,\n        AmbientDeclarations = 1 << 10,\n        Properties = 1 << 11,\n\n        Global = ModuleDeclarations | ClassDeclarations | InterfaceDeclarations | AmbientDeclarations,\n        QuickParse = Global | Properties,\n    }\n\n    export enum Modifiers {\n        None = 0,\n        Private = 1,\n        Public = 1 << 1,\n        Readonly = 1 << 2,\n        Ambient = 1 << 3,\n        Exported = 1 << 4,\n        Getter = 1 << 5,\n        Setter = 1 << 6,\n        Static = 1 << 7,\n    }\n\n    export enum ASTFlags {\n        None = 0,\n        ExplicitSemicolon = 1, // statment terminated by an explicit semicolon\n        AutomaticSemicolon = 1 << 1, // statment terminated by an automatic semicolon\n        Writeable = 1 << 2,  // node is lhs that can be modified\n        Error = 1 << 3, // node has an error\n        DotLHSPartial = 1 << 4, // node is the lhs of an incomplete dot expr at cursor\n        DotLHS = 1 << 5, // node is the lhs of a dot expr\n        IsStatement = 1 << 6, // node is a statement\n        StrictMode = 1 << 7, // node is in the strict mode environment\n        PossibleOptionalParameter = 1 << 8,\n        ClassBaseConstructorCall = 1 << 9,\n        OptionalName = 1 << 10,\n        // REVIEW: This flag is to mark lambda nodes to note that the LParen of an expression has already been matched in the lambda header.\n        //         The flag is used to communicate this piece of information to the calling parseTerm, which intern will remove it.\n        //         Once we have a better way to associate information with nodes, this flag should not be used.\n        SkipNextRParen = 1 << 11, \n    }\n\n    export enum DeclFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n    }\n\n    export enum ModuleFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        IsEnum = 1 << 8,\n        ShouldEmitModuleDecl = 1 << 9,\n        IsWholeFile = 1 << 10,\n        IsDynamic = 1 << 11,\n        MustCaptureThis = 1 << 12,\n    }\n\n    export enum SymbolFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        Property = 1 << 8,\n        Readonly = 1 << 9,\n        ModuleMember = 1 << 10,\n        InterfaceMember = 1 << 11,\n        ClassMember = 1 << 12,\n        BuiltIn = 1 << 13,\n        TypeSetDuringScopeAssignment = 1 << 14,\n        Constant = 1 << 15,\n        Optional = 1 << 16,\n        RecursivelyReferenced = 1 << 17,\n        Bound = 1 << 18,\n        CompilerGenerated = 1 << 19,\n    }\n\n    export enum VarFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        AutoInit = 1 << 8,\n        Property = 1 << 9,\n        Readonly = 1 << 10,\n        Class = 1 << 11,\n        ClassProperty = 1 << 12,\n        ClassBodyProperty = 1 << 13,";
var v27301 = v27302 + '\n        ClassConstructorProperty = 1 << 14,\n        ClassSuperMustBeFirstCallInConstructor = 1 << 15,\n        Constant = 1 << 16,\n        MustCaptureThis = 1 << 17,\n    }\n\n    export enum FncFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        Definition = 1 << 8,\n        Signature = 1 << 9,\n        Method = 1 << 10,\n        HasReturnExpression = 1 << 11,\n        CallMember = 1 << 12,\n        ConstructMember = 1 << 13,\n        HasSelfReference = 1 << 14,\n        IsFatArrowFunction = 1 << 15,\n        IndexerMember = 1 << 16,\n        IsFunctionExpression = 1 << 17,\n        ClassMethod = 1 << 18,\n        ClassPropertyMethodExported = 1 << 19,\n        HasSuperReferenceInFatArrowFunction = 1 << 20,\n        IsPropertyBound = 1 << 21,\n    }\n\n    export enum SignatureFlags {\n        None = 0,\n        IsIndexer = 1,\n        IsStringIndexer = 1 << 1,\n        IsNumberIndexer = 1 << 2,\n    }\n\n    export function ToDeclFlags(fncFlags: FncFlags) : DeclFlags;\n    export function ToDeclFlags(varFlags: VarFlags) : DeclFlags;\n    export function ToDeclFlags(symFlags: SymbolFlags): DeclFlags;\n    export function ToDeclFlags(moduleFlags: ModuleFlags): DeclFlags;\n    export function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags: any) {\n        return <DeclFlags>fncOrVarOrSymbolOrModuleFlags;\n    }\n\n    export enum TypeFlags {\n        None = 0,\n        HasImplementation = 1,\n        HasSelfReference = 1 << 1,\n        MergeResult = 1 << 2,\n        IsEnum = 1 << 3,\n        BuildingName = 1 << 4,\n        HasBaseType = 1 << 5,\n        HasBaseTypeOfObject = 1 << 6,\n        IsClass = 1 << 7,\n    }\n\n    export enum TypeRelationshipFlags {\n        SuccessfulComparison = 0,\n        SourceIsNullTargetIsVoidOrUndefined = 1,\n        RequiredPropertyIsMissing = 1 << 1,\n        IncompatibleSignatures = 1 << 2,\n        SourceSignatureHasTooManyParameters = 3,\n        IncompatibleReturnTypes = 1 << 4,\n        IncompatiblePropertyTypes = 1 << 5,\n        IncompatibleParameterTypes = 1 << 6,\n    }\n\n    export enum CodeGenTarget {\n        ES3 = 0,\n        ES5 = 1,\n    }\n\n    export enum ModuleGenTarget {\n        Synchronous = 0,\n        Asynchronous = 1,\n        Local = 1 << 1,\n    }\n\n    // Compiler defaults to generating ES5-compliant code for\n    //  - getters and setters\n    export var codeGenTarget: CodeGenTarget = CodeGenTarget.ES3;\n\n    export var moduleGenTarget: ModuleGenTarget = ModuleGenTarget.Synchronous;\n\n    export var optimizeModuleCodeGen = true;\n\n    export function flagsToString(e, flags: number): string {\n        var builder = "";\n        for (var i = 1; i < (1 << 31) ; i = i << 1) {\n            if ((flags & i) != 0) {\n                for (var k in e) {\n                    if (e[k] == i) {\n                        if (builder.length > 0) {\n                            builder += "|";\n                        }\n                        builder += k;\n                        break;\n                    }\n                }\n            }\n        }\n        return builder;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class BlockIntrinsics {\n        public prototype = undefined;\n        public toString = undefined;\n        public toLocaleString = undefined;\n        public valueOf = undefined;\n        public hasOwnProperty = undefined;\n        public propertyIsEnumerable = undefined;\n        public isPrototypeOf = undefined;\n\n        constructor () {\n            // initialize the \'constructor\' field\n            this["constructor"] = undefined;\n        }\n    }\n\n    export interface IHashTable {\n        getAllKeys(): string[];\n        add(key: string, data): bool;\n        addOrUpdate(key: string, data): bool;\n        map(fn: (k: string, v, c) => void , context): void;\n        every(fn: (k: string, v, c) => bool, context): bool;\n        some(fn: (k: string, v, c) => bool, context): bool;\n        count(): number;\n        lookup(key: string): any;\n    }\n\n    export class StringHashTable implements IHashTable {\n        public itemCount = 0;\n        public table = <any>(<any> new BlockIntrinsics());\n\n        public getAllKeys(): string[]{\n            var result: string[] = [];\n            for (var k in this.table) {\n ';
var v27300 = v27301 + "               if (this.table[k] != undefined) {\n                    result[result.length] = k;\n                }\n            }\n            return result;\n        }\n\n        public add(key: string, data): bool {\n            if (this.table[key] != undefined) {\n                return false;\n            }\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.table[key] != undefined) {\n                this.table[key] = data;\n                return false;\n            }\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    fn(k, this.table[k], context);\n                }\n            }\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    if (!fn(k, this.table[k], context)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    if (fn(k, this.table[k], context)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key: string) {\n            var data = this.table[key];\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return (null);\n            }\n        }\n    }\n\n    // The resident table is expected to reference the same table object, whereas the \n    // transientTable may reference different objects over time\n    // REVIEW:  WARNING:  For performance reasons, neither the primary nor secondary table may be null\n    export class DualStringHashTable implements IHashTable {\n\n        public insertPrimary = true;\n\n        constructor (public primaryTable: IHashTable,\n                                        public secondaryTable: IHashTable) { }\n\n        public getAllKeys(): string[]{\n            return this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());\n        }\n\n        public add(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.add(key, data);\n            }\n            else {\n                return this.secondaryTable.add(key, data);\n            }\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.addOrUpdate(key, data);\n            }\n            else {\n                return this.secondaryTable.addOrUpdate(key, data);\n            }\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            this.primaryTable.map(fn, context);\n            this.secondaryTable.map(fn, context);\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.every(fn, context) && this.secondaryTable.every(fn, context);\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.some(fn, context) || this.secondaryTable.some(fn, context);\n        }\n\n        public count() {\n            return this.primaryTable.count() + this.secondaryTable.count();\n        }\n\n        public lookup(key: string) {\n            var data = this.primaryTable.lookup(key);\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return this.secondaryTable.lookup(key);\n            }\n        }\n    }\n\n    export function numberHashFn(key: number): number {\n        var c2 = 0x27d4eb2d; // a prime or an odd constant\n        key = (key ^ 61) ^ (key >>> 16);\n        key = key + (key << 3);\n        key = key ^ (key >>> 4);\n        key = key * c2;\n        key = key ^ (key >>> 15);\n        return key;\n    }\n\n    export function combineHashes(key1: number, key2: number) {\n        return key2 ^ ((key1 >> 5) + key1);\n    }\n\n    export class HashEntry {\n        public next: HashEntry;\n\n        constructor (public key, public data) { }\n    }\n\n    export class HashTable {\n        public itemCount: number = 0;\n        public table = new HashEntry[];\n\n        constructor (public size: number, public hashFn: (key) =>number,\n                    public equalsFn: (key1, key2) =>bool) {\n            for (var i: number = 0; i < this.size; i++) {\n                this.table[i] = null;\n            }\n        }\n\n        publi";
var v27299 = v27300 + 'c add(key, data): bool {\n            var current: HashEntry;\n            var entry: HashEntry = new HashEntry(key, data);\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return false;\n                }\n            }\n            entry.next = this.table[val];\n            this.table[val] = entry;\n            this.itemCount++;\n            return true;\n        }\n\n        public remove(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            var result = null;\n            var prevEntry: HashEntry = null;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    result = current.data;\n                    this.itemCount--;\n                    if (prevEntry) {\n                        prevEntry.next = current.next;\n                    }\n                    else {\n                        this.table[val] = current.next;\n                    }\n                    break;\n                }\n                prevEntry = current;\n            }\n            return result;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return (current.data);\n                }\n            }\n            return (null);\n        }\n    }\n\n    // Simple Hash table with list of keys and values matching each other at the given index\n    export class SimpleHashTable {\n        private keys = [];\n        private values = [];\n\n        public lookup(key, findValue?: bool) {\n            var searchArray = this.keys;\n            if (findValue) {\n                searchArray = this.values;\n            }\n\n            for (var i = 0; i < searchArray.length; i++) {\n                if (searchArray[i] == key) {\n                    return {\n                        key: this.keys[i],\n                        data: this.values[i],\n                    };\n                }\n            }\n            return null;\n        }\n\n        public add(key, data): bool {\n            var lookupData = this.lookup(key);\n            if (lookupData) {\n                return false;\n            }\n\n            this.keys[this.keys.length] = key;\n            this.values[this.values.length] = data;\n\n            return true;\n        }\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class IncrementalParser {\n        \n        private astLogger: AstLogger;\n\n        constructor (private logger: TypeScript.ILogger) {\n            this.astLogger = new AstLogger(this.logger);\n        }\n\n        //\n        // Return "null" if "editRange" cannot be safely determined to be inside a single scope.\n        //\n        public getEnclosingScopeContextIfSingleScopeEdit(previousScript: Script, scriptId: string, newSourceText: ISourceText, editRange: ScriptEditRange): EnclosingScopeContext {\n            this.logger.log("checkEditsInsideSingleScope(\\"" + scriptId + "\\")");\n\n            if (editRange === null) {\n                throw new Error("editRange should be valid");\n            }\n\n            if (editRange.isUnknown()) {\n                this.logger.log("  Bailing out because edit range is unknown");\n                return null;\n            }\n\n            var scope1 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.minChar, false/*isMemberCompletion*/);\n            var scope2 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.limChar, false/*isMemberCompletion*/);\n            if (scope1 == null || scope2 == null) {\n                this.logger.log("  Bailing out because containing scopes cannot be determined");\n                return null;\n            }\n\n            // We only support changes within a single containing scope\n            if (scope1.scopeStartAST !== scope2.scopeStartAST) {\n      ';
var v27298 = v27299 + '          this.logger.log("  Bailing out because edit overlaps 2 disctint scopes");\n                return null;\n            }\n\n            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;\n            if (newScopeLength <= 0) {\n                this.logger.log("  Bailing out because scope has been entirely removed from new source text");\n                return null;\n            }\n\n            return scope1;\n        }\n\n        public attemptIncrementalUpdateUnit(previousScript: Script, scriptId: string, newSourceText: ISourceText, editRange: ScriptEditRange): UpdateUnitResult {\n            this.logger.log("attemptIncrementalUpdateUnit(\\"" + scriptId + "\\")");\n\n            if (editRange === null) {\n                throw new Error("editRange should be valid");\n            }\n\n            var scope1 = this.getEnclosingScopeContextIfSingleScopeEdit(previousScript, scriptId, newSourceText, editRange);\n            if (scope1 === null) {\n                return null;\n            }\n\n            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;\n\n            // Heuristic: if the range to reparse is too big, bail out. \n            // This is because a full parse will be faster than an incremental parse followed by all the necessary fix-ups \n            if (newScopeLength >= newSourceText.getLength() / 2) {\n                this.logger.log("  Bailing out because range of scope to reparse (" + newScopeLength + " characters) is greater than half the size of the source text");\n                return null;\n            }\n\n            // Capture parsing errors so that they are part of "updateResult"\n            var parseErrors: TypeScript.ErrorEntry[] = [];\n            var errorCapture = function(minChar: number, charLen: number, message: string, unitIndex: number): void {\n                parseErrors.push(new TypeScript.ErrorEntry(unitIndex, minChar, minChar + charLen, message));\n            };\n\n            var quickParseResult = TypeScript.quickParse(this.logger, scope1.scopeStartAST, newSourceText, scope1.scopeStartAST.minChar, scope1.scopeStartAST.minChar + newScopeLength, errorCapture);\n            if (quickParseResult.endLexState != TypeScript.LexState.Start) {\n                this.logger.log("  Bailing out because scope contains unterminated comment");\n                return null;\n            }\n\n            var scriptFragment = quickParseResult.Script;\n            if (scriptFragment.vars.members.length !== 0) {\n                this.logger.log("  Bailing out because new source text defines variables");\n                return null;\n            }\n\n            //if (scriptFragment.scopes.members.length !== 1) {\n            //    logger.log("  Bailing out because new source text defines more than one scope (or none)");\n            //    return null;\n            //}\n\n            // This detects adding close curlies, since they have the side effect of having the parser \n            // parse more members in the scope range.\n            if (scriptFragment.bod.members.length !== 1) {\n                this.logger.log("  Bailing out because new source text defines more than one scope (or none)");\n                return null;\n            }\n\n            var oldScope = scope1.scopeStartAST;\n            var newScope = scriptFragment.bod.members[0];\n\n            if (oldScope.nodeType != newScope.nodeType) {\n                this.logger.log("  Bailing out because new source text does not define the same scope type as the existing scope");\n                return null;\n            }\n\n            if (!(<any>oldScope).leftCurlyCount || !(<any>oldScope).rightCurlyCount) {\n                this.logger.log("  Bailing out because sopce doesn\'t have left/right curly count");\n                return null;\n            }\n\n            if ((<any>oldScope).leftCurlyCount !== (<any>newScope).leftCurlyCount) {\n                this.logger.log("  Bailing out because new source text contains more (or fewer) left curly braces");\n                return null;\n            }\n\n            if ((<any>oldScope).rightCurlyCount !== (<any>newScope).rightCurlyCount) {\n                this.logger.log("  Bailing out because new source text contains more (or fewer) right curly braces");\n                return null;\n            }\n\n            if (newScope.minChar !== 0) {\n                this.logger.log("  Bailing out because new function declaration does not start at position 0");\n                return null;\n            }\n\n            if (newScope.limChar !== newScopeLength) {\n                this.logger.log("  Bailing out because new function declaration does not end at the new end position");\n                return null;\n            }\n\n            return TypeScript.UpdateUnitResult.singleScopeEdits(previousScript, scriptFragment, oldScope, newScope, editRange, parseErrors);\n        }\n\n        public mergeTrees(updateResult: UpdateUnitResult): void {\n            TypeScript.timeF';
var v27297 = v27298 + 'unction(this.logger, "mergeTrees()", () => {\n                var editRange = new ScriptEditRange(updateResult.scope1.minChar, updateResult.scope1.limChar, updateResult.editRange.delta);\n                // Update positions in current ast\n                this.applyDeltaPosition(updateResult.script1, editRange.limChar, editRange.delta);\n                // Update positions in new (partial) ast\n                this.applyDeltaPosition(updateResult.script2, 0, editRange.minChar);\n                // Merge linemaps\n                this.mergeLocationInfo(updateResult.script1, updateResult.script2, editRange);\n                //  Replace old AST for scope with new one\n                this.replaceAST(updateResult.script1, updateResult.scope1, updateResult.scope2);\n            });\n        }\n\n        private replaceAST(script: TypeScript.AST, oldAst: TypeScript.AST, newAst: TypeScript.AST) {\n            var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => {\n                if (cur === oldAst) {\n                    // Transfer comments ownership to new AST. We need this because when "quick parsing" the\n                    // new AST, we don\'t take into account the text before and after the "minChar/limChar" pair\n                    // of the scope, which don\'t include pre/post-comments.\n                    newAst.preComments = cur.preComments;\n                    newAst.postComments = cur.postComments;\n\n                    this.logger.log("replaced old AST node with new one in script AST");\n                    walker.options.stopWalk();\n                    return newAst;\n                }\n\n                // Avoid visiting sub-trees outside of the edit range\n                if (TypeScript.isValidAstNode(cur)) {\n                    if (cur.limChar < oldAst.minChar || cur.minChar > oldAst.limChar) {\n                        walker.options.goChildren = false;\n                    }\n                }\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(script, pre);\n        }\n\n        private mergeLocationInfo(script: TypeScript.Script, partial: TypeScript.Script, editRange: ScriptEditRange) {\n            // Don\'t merger these fields, as the original script has the right values\n            //script.locationInfo.unitIndex = partial.locationInfo.unitIndex;\n            //script.locationInfo.filename = partial.locationInfo.filename;\n\n            var lineMap1 = script.locationInfo.lineMap;\n            var lineMap2 = partial.locationInfo.lineMap;\n\n            if (this.logger.information()) {\n                this.logger.log("lineMap1 (before):");\n                this.astLogger.logLinemap(lineMap1);\n                this.logger.log("lineMap2 (quick parse):");\n                this.astLogger.logLinemap(lineMap2);\n                this.logger.log("EditRange=" + editRange);\n            }\n\n            // Skip entries < minChar\n            var i1 = 2; // lineMap[0] is always undefined, lineMap[1] is always 0.\n            var i2 = 2; // lineMap[0] is always undefined, lineMap[1] is always 0.\n            var len1 = lineMap1.length;\n            var len2 = lineMap2.length;\n            while (i1 < len1) {\n                if (lineMap1[i1] <= editRange.minChar) {\n                    // Nothing to do for this entry, since it\'s before the range of the change\n                    i1++;\n                } else if (lineMap1[i1] >= editRange.limChar) {\n                    // Apply delta to this entry, since it\'s outside the range of the change\n                    lineMap1[i1] += editRange.delta;\n                    i1++;\n                }\n                else {\n                    if (i2 < len2) {\n                        // Add a new entry to lineMap1 corresponding to lineMap2 in new range\n                        lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);\n                        i1++;\n                        len1++;\n                        i2++;\n                    }\n                    else { /* i2 >= len 2 */\n                        // Remove this entry, since there is no corresponding entry in the new map\n                        lineMap1.splice(i1, 1);\n                        len1--;\n                    }\n                }\n            }\n            // Merge the remaining entries in lineMap2 while maintaing the constraint that a lineMap is sorted\n            if (i2 < len2) {\n                // i1 >= len1 && i2 < len2 \n                if (lineMap1[len1 - 1] >= (lineMap2[i2] + editRange.minChar)) {\n                    // lineMap2 needs to be merged within lineMap1\n                    i1 = 2;\n                    while (i1 < len1 && i2 < len2) {\n                        if (lineMap1[i1] < (lineMap2[i2] + editRange.minChar)) {\n                            i1++;\n                        }\n                        else {\n                            lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);\n                            i1++;\n                            len1++;\n  ';
var v27296 = v27297 + '                          i2++;\n                        }\n                    }\n                }\n\n                // Append all the remaining entries in lineMap2 to the end of lineMap1\n                for (; i2 < len2; i2++) {\n                    lineMap1.push(lineMap2[i2] + editRange.minChar);\n                }\n            }\n\n            if (this.logger.information()) {\n                this.logger.log("lineMap1 (after merge):");\n                this.astLogger.logLinemap(lineMap1);\n            }\n        }\n\n        private applyDeltaPosition(ast: TypeScript.AST, start: number, delta: number) {\n            var applyDelta = (ast: TypeScript.AST) => {\n                if (ast.minChar !== -1 && ast.minChar >= start) {\n                    ast.minChar += delta;\n                }\n                if (ast.limChar !== -1 && ast.limChar >= start) {\n                    ast.limChar += delta;\n                }\n            }\n\n            var applyDeltaToComments = (comments: TypeScript.Comment[]) => {\n                if (comments && comments.length > 0) {\n                    for (var i = 0; i < comments.length; i++) {\n                        applyDelta(comments[i]);\n                    }\n                }\n            }\n\n            var pre = function(cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n                // *Before* applying delta to this, check if we need to go to children\n                if (cur.limChar !== -1 && cur.limChar < start) {\n                    walker.options.goChildren = false; // Done with applying Delta for this sub-tree\n                }\n\n                // Apply delta to this node\n                applyDelta(cur);\n                applyDeltaToComments(cur.preComments);\n                applyDeltaToComments(cur.postComments);\n\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(ast, pre);\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\ninterface IResolvedFile {\n    content: string;\n    path: string;\n}\n\ninterface IFileWatcher {\n    close(): void;\n}\n\ninterface IIO {\n    readFile(path: string): string;\n    writeFile(path: string, contents: string): void;\n    createFile(path: string, useUTF8?: bool): ITextWriter;\n    deleteFile(path: string): void;\n    dir(path: string, re?: RegExp, options?: { recursive?: bool; }): string[];\n    fileExists(path: string): bool;\n    directoryExists(path: string): bool;\n    createDirectory(path: string): void;\n    resolvePath(path: string): string;\n    dirName(path: string): string;\n    findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n    print(str: string): void;\n    printLine(str: string): void;\n    arguments: string[];\n    stderr: ITextWriter;\n    stdout: ITextWriter;\n    watchFile(filename: string, callback: (string) => void ): IFileWatcher;\n    run(source: string, filename: string): void;\n    getExecutingFilePath(): string;\n    quit(exitCode?: number);\n}\n\nmodule IOUtils {\n    // Creates the directory including its parent if not already present\n    function createDirectoryStructure(ioHost: IIO, dirName: string) {\n        if (ioHost.directoryExists(dirName)) {\n            return;\n        }\n\n        var parentDirectory = ioHost.dirName(dirName);\n        if (parentDirectory != "") {\n            createDirectoryStructure(ioHost, parentDirectory);\n        }\n        ioHost.createDirectory(dirName);\n    }\n\n    // Creates a file including its directory structure if not already present\n    export function createFileAndFolderStructure(ioHost: IIO, fileName: string, useUTF8?: bool) {\n        var path = ioHost.resolvePath(fileName);\n        var dirName = ioHost.dirName(path);\n        createDirectoryStructure(ioHost, dirName);\n        return ioHost.createFile(path, useUTF8);\n    }\n\n    export function throwIOError(message: string, error: Error) {\n        var errorMessage = message;\n        if (error && error.message) {\n            errorMessage += (" " + error.message);\n        }\n        throw new Error(errorMessage);\n    }\n}\n\n// Declare dependencies needed for all supported hosts\ndeclare class Enumerator {\n    public atEnd(): bool;\n    public moveNext();\n    public item(): any;\n    constructor (o: any);\n}\ndeclare function setTimeout(callback: () =>void , ms?: number);\ndeclare var require: any;\ndeclare module process {\n    export var argv: string[];\n    export var platform: string;\n    export function on(event: st';
var v27295 = v27296 + 'ring, handler: (any) => void ): void;\n    export module stdout {\n        export function write(str: string);\n    }\n    export module stderr {\n        export function write(str: string);\n    }\n    export module mainModule {\n        export var filename: string;\n    }\n    export function exit(exitCode?: number);\n}\n\nvar IO = (function() {\n\n    // Create an IO object for use inside WindowsScriptHost hosts\n    // Depends on WSCript and FileSystemObject\n    function getWindowsScriptHostIO(): IIO {\n        var fso = new ActiveXObject("Scripting.FileSystemObject");\n        var streamObjectPool = [];\n\n        function getStreamObject(): any { \n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            }  else {\n                return new ActiveXObject("ADODB.Stream");\n            }\n        }\n\n        function releaseStreamObject(obj: any) { \n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            readFile: function(path) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2; // Text data\n                    streamObj.Charset = \'x-ansi\'; // Assume we are reading ansi text\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2); // Read the BOM char\n                    streamObj.Position = 0; // Position has to be at 0 before changing the encoding\n                    if ((bomChar.charCodeAt(0) == 0xFE && bomChar.charCodeAt(1) == 0xFF)\n                        || (bomChar.charCodeAt(0) == 0xFF && bomChar.charCodeAt(1) == 0xFE)) {\n                        streamObj.Charset = \'unicode\';\n                    } else if (bomChar.charCodeAt(0) == 0xEF && bomChar.charCodeAt(1) == 0xBB) {\n                        streamObj.Charset = \'utf-8\'; \n                    }\n\n                    // Read the whole file\n                    var str = streamObj.ReadText(-1 /* read from the current position to EOS */);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return <string>str;\n                }\n                catch (err) {\n                    IOUtils.throwIOError("Error reading file \\"" + path + "\\".", err);\n                }\n            },\n\n            writeFile: function(path, contents) {\n                var file = this.createFile(path);\n                file.Write(contents);\n                file.Close();\n            },\n\n            fileExists: function(path: string): bool {\n                return fso.FileExists(path);\n            },\n\n            resolvePath: function(path: string): string {\n                return fso.GetAbsolutePathName(path);\n            },\n\n            dirName: function(path: string): string {\n                return fso.GetParentFolderName(path);\n            },\n\n            findFile: function(rootPath: string, partialFilePath: string): IResolvedFile {\n                var path = fso.GetAbsolutePathName(rootPath) + "/" + partialFilePath;\n\n                while (true) {\n                    if (fso.FileExists(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        }\n                        catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint("Could not find " + path + ", trying parent");\n                        }\n                    }\n                    else {\n                        rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\n\n                        if (rootPath == "") {\n                            return null;\n                        }\n                        else {\n                            path = fso.BuildPath(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n\n            deleteFile: function(path: string): void {\n                try {\n                    if (fso.FileExists(path)) {\n                        fso.DeleteFile(path, true); // true: delete read-only files\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t delete file \'" + path + "\'.", e);\n                }\n            },\n\n            createFile: function (path, useUTF8?) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Charset = useUTF8 ? \'utf-8\' : \'x-ansi\';\n                    streamObj.Open();\n                    return {\n                        Write: function (str) { streamObj.WriteText(str, 0); },\n                        WriteLine: function (str) { streamObj.WriteText(str, 1); },\n                        Close: function() {\n                            try {\n            ';
var v27294 = v27295 + '                    streamObj.SaveToFile(path, 2);\n                            } catch (saveError) {\n                                IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", saveError);\n                            }\n                            finally {\n                                if (streamObj.State != 0 /*adStateClosed*/) {\n                                    streamObj.Close();\n                                }\n                                releaseStreamObject(streamObj);\n                            }\n                        }\n                    };\n                } catch (creationError) {\n                    IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", creationError);\n                }\n            },\n\n            directoryExists: function(path) {\n                return <bool>fso.FolderExists(path);\n            },\n\n            createDirectory: function(path) {\n                try {\n                    if (!this.directoryExists(path)) {\n                        fso.CreateFolder(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t create directory \'" + path + "\'.", e);\n                }\n            },\n\n            dir: function(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n                function filesInFolder(folder, root): string[]{\n                    var paths = [];\n                    var fc: Enumerator;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd() ; fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + "/" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd() ; fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + "/" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n\n            print: function(str) {\n                WScript.StdOut.Write(str);\n            },\n\n            printLine: function(str) {\n                WScript.Echo(str);\n            },\n\n            arguments: <string[]>args,\n            stderr: WScript.StdErr,\n            stdout: WScript.StdOut,\n            watchFile: null,\n            run: function(source, filename) {\n                try {\n                    eval(source);\n                } catch (e) {\n                    IOUtils.throwIOError("Error while executing file \'" + filename + "\'.", e);\n                }\n            },\n            getExecutingFilePath: function () {\n                return WScript.ScriptFullName;\n            },\n            quit: function (exitCode? : number = 0) {\n                try {\n                    WScript.Quit(exitCode);\n                } catch (e) {\n                }\n            }\n        }\n\n    };\n\n    // Create an IO object for use inside Node.js hosts\n    // Depends on \'fs\' and \'path\' modules\n    function getNodeIO(): IIO {\n\n        var _fs = require(\'fs\');\n        var _path = require(\'path\');\n        var _module = require(\'module\');\n\n        return {\n            readFile: function(file) {\n                try {\n                    var buffer = _fs.readFileSync(file);\n                    switch (buffer[0]) {\n                        case 0xFE:\n                            if (buffer[1] == 0xFF) {\n                                // utf16-be. Reading the buffer as big endian is not supported, so convert it to \n                                // Little Endian first\n                                var i = 0;\n                                while ((i + 1) < buffer.length) {\n                                    var temp = buffer[i]\n                                    buffer[i] = buffer[i + 1];\n                                    buffer[i + 1] = temp;\n                                    i += 2;\n                                }\n                                return buffer.toString("ucs2", 2);\n                            }\n                            break;\n                        case 0xFF:\n                            if (buffer[1] == 0xFE) {\n                                // utf16-le \n                                return buffer.toString("ucs2", 2);\n                            }\n                            break;\n                        case 0xEF:\n                            if (buffer[1] == 0xBB) {\n                                // utf-8\n                                return buffer.toString("utf8", 3);\n                            }\n                    }\n                    // Default behaviour\n                    return buffer.toString();\n                } catch ';
var v27293 = v27294 + '(e) {\n                    IOUtils.throwIOError("Error reading file \\"" + file + "\\".", e);\n                }\n            },\n            writeFile: <(path: string, contents: string) => void >_fs.writeFileSync,\n            deleteFile: function(path) {\n                try {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t delete file \'" + path + "\'.", e);\n                }\n            },\n            fileExists: function(path): bool {\n                return _fs.existsSync(path);\n            },\n            createFile: function(path, useUTF8?) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        IOUtils.throwIOError("\\"" + path + "\\" exists but isn\'t a directory.", null);\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n\n                mkdirRecursiveSync(_path.dirname(path));\n\n                try {\n                    var fd = _fs.openSync(path, \'w\');\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", e);\n                }\n                return {\n                    Write: function(str) { _fs.writeSync(fd, str); },\n                    WriteLine: function(str) { _fs.writeSync(fd, str + \'\\r\\n\'); },\n                    Close: function() { _fs.closeSync(fd); fd = null; }\n                };\n            },\n            dir: function dir(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n\n                function filesInFolder(folder: string): string[]{\n                    var paths = [];\n\n                    var files = _fs.readdirSync(folder);\n                    for (var i = 0; i < files.length; i++) {\n                        var stat = _fs.statSync(folder + "/" + files[i]);\n                        if (options.recursive && stat.isDirectory()) {\n                            paths = paths.concat(filesInFolder(folder + "/" + files[i]));\n                        } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                            paths.push(folder + "/" + files[i]);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            createDirectory: function(path: string): void {\n                try {\n                    if (!this.directoryExists(path)) {\n                        _fs.mkdirSync(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t create directory \'" + path + "\'.", e);\n                }\n            },\n\n            directoryExists: function(path: string): bool {\n                return _fs.existsSync(path) && _fs.lstatSync(path).isDirectory();\n            },\n            resolvePath: function(path: string): string {\n                return _path.resolve(path);\n            },\n            dirName: function(path: string): string {\n                return _path.dirname(path);\n            },\n            findFile: function(rootPath: string, partialFilePath): IResolvedFile {\n                var path = rootPath + "/" + partialFilePath;\n\n                while (true) {\n                    if (_fs.existsSync(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        } catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint(("Could not find " + path) + ", trying parent");\n                        }\n                    }\n                    else {\n                        var parentPath = _path.resolve(rootPath, "..");\n\n                        // Node will just continue to repeat the root path, rather than return null\n                        if (rootPath === parentPath) {\n                            return null;\n                        }\n                        else {\n                            rootPath = parentPath;\n                            path = _path.resolve(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            print: function(str) { process.stdout.write(str) },\n            printLine: function(str) { process.stdout.write(str + \'\\n\') },\n            arguments: process.argv.slice(2),\n            stderr: {\n                Write: function(str) { process.stderr.write(str); },\n                WriteLine: function(str) { process.stderr.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            stdout: {\n                Write: function(str) { process.stdout.write(str); },\n                Write';
var v27292 = v27293 + 'Line: function(str) { process.stdout.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            watchFile: function(filename: string, callback: (string) => void ): IFileWatcher {\n                var firstRun = true;\n                var processingChange = false;\n\n                var fileChanged: any = function(curr, prev) {\n                    if (!firstRun) {\n                        if (curr.mtime < prev.mtime) {\n                            return;\n                        }\n\n                        _fs.unwatchFile(filename, fileChanged);\n                        if (!processingChange) {\n                            processingChange = true;\n                            callback(filename);\n                            setTimeout(function() { processingChange = false; }, 100);\n                        }\n                    }\n                    firstRun = false;\n                    _fs.watchFile(filename, { persistent: true, interval: 500 }, fileChanged);\n                };\n\n                fileChanged();\n                return {\n                    filename: filename,\n                    close: function() {\n                        _fs.unwatchFile(filename, fileChanged);\n                    }\n                };\n            },\n            run: function(source, filename) {\n                require.main.filename = filename;\n                require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(filename)));\n                require.main._compile(source, filename);\n            }, \n            getExecutingFilePath: function () {\n                return process.mainModule.filename;\n            },\n            quit: process.exit\n        }\n    };\n\n    if (typeof ActiveXObject === "function")\n        return getWindowsScriptHostIO();\n    else if (typeof require === "function")\n        return getNodeIO();\n    else\n        return null; // Unsupported host\n})();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // Note: Any addition to the NodeType should also be supported with addition to AstWalkerDetailCallback\n    export enum NodeType {\n        None,\n        Empty,\n        EmptyExpr,\n        True,\n        False,\n        This,\n        Super,\n        QString,\n        Regex,\n        Null,\n        ArrayLit,\n        ObjectLit,\n        Void,\n        Comma,\n        Pos,\n        Neg,\n        Delete,\n        Await,\n        In,\n        Dot,\n        From,\n        Is,\n        InstOf,\n        Typeof,\n        NumberLit,\n        Name,\n        TypeRef,\n        Index,\n        Call,\n        New,\n        Asg,\n        AsgAdd,\n        AsgSub,\n        AsgDiv,\n        AsgMul,\n        AsgMod,\n        AsgAnd,\n        AsgXor,\n        AsgOr,\n        AsgLsh,\n        AsgRsh,\n        AsgRs2,\n        ConditionalExpression,\n        LogOr,\n        LogAnd,\n        Or,\n        Xor,\n        And,\n        Eq,\n        Ne,\n        Eqv,\n        NEqv,\n        Lt,\n        Le,\n        Gt,\n        Ge,\n        Add,\n        Sub,\n        Mul,\n        Div,\n        Mod,\n        Lsh,\n        Rsh,\n        Rs2,\n        Not,\n        LogNot,\n        IncPre,\n        DecPre,\n        IncPost,\n        DecPost,\n        TypeAssertion,\n        FuncDecl,\n        Member,\n        VarDecl,\n        ArgDecl,\n        Return,\n        Break,\n        Continue,\n        Throw,\n        For,\n        ForIn,\n        If,\n        While,\n        DoWhile,\n        Block,\n        Case,\n        Switch,\n        Try,\n        TryCatch,\n        TryFinally,\n        Finally,\n        Catch,\n        List,\n        Script,\n        ClassDeclaration,\n        InterfaceDeclaration,\n        ModuleDeclaration,\n        ImportDeclaration,\n        With,\n        Label,\n        LabeledStatement,\n        EBStart,\n        GotoEB,\n        EndCode,\n        Error,\n        Comment,\n        Debugger,\n        GeneralNode = FuncDecl,\n        LastAsg = AsgRs2,\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.';
var v27291 = v27292 + '\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path="io.ts" />\n\ninterface IOptions {\n    name?: string;\n    flag?: bool;\n    short?: string;\n    usage?: string;\n    set?: (s: string) => void;\n    type?: string;\n    experimental?: bool;\n}\n\nclass OptionsParser {\n    private DEFAULT_SHORT_FLAG = "-";\n    private DEFAULT_LONG_FLAG = "--";\n\n    // Find the option record for the given string. Returns null if not found.\n    private findOption(arg: string) {\n\n        for (var i = 0; i < this.options.length; i++) {\n\n            if (arg === this.options[i].short || arg === this.options[i].name) {\n                return this.options[i];\n            }\n        }\n\n        return null;\n    }\n\n    public unnamed: string[] = [];\n\n    public options: IOptions[] = [];\n\n    constructor (public host: IIO) {\n    }\n\n    public printUsage() {\n        this.host.printLine("Syntax:   tsc [options] [file ..]");\n        this.host.printLine("");\n        this.host.printLine("Examples: tsc hello.ts");\n        this.host.printLine("          tsc --out foo.js foo.ts");\n        this.host.printLine("          tsc @args.txt");\n        this.host.printLine("");\n        this.host.printLine("Options:");\n\n        var output = [];\n        var maxLength = 0;\n\n        this.options = this.options.sort(function(a, b) {\n            var aName = a.name.toLowerCase();\n            var bName = b.name.toLowerCase();\n\n            if (aName > bName) {\n                return 1;\n            } else if (aName < bName) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Build up output array\n        for (var i = 0; i < this.options.length; i++) {\n            var option = this.options[i];\n\n            if (option.experimental) {\n                continue;\n            }\n\n            if (!option.usage) {\n                break;\n            }\n\n            var usageString = "  ";\n            var type = option.type ? " " + option.type.toUpperCase() : "";\n\n            if (option.short) {\n                usageString += this.DEFAULT_SHORT_FLAG + option.short + type + ", ";\n            }\n\n            usageString += this.DEFAULT_LONG_FLAG + option.name + type;\n\n            output.push([usageString, option.usage]);\n\n            if (usageString.length > maxLength) {\n                maxLength = usageString.length;\n            }\n        }\n\n        output.push(["  @<file>", "Insert command line options and files from a file."]);\n\n        // Print padded output\n        for (var i = 0; i < output.length; i++) {\n            this.host.printLine(output[i][0] + (new Array(maxLength - output[i][0].length + 3)).join(" ") + output[i][1]);\n        }\n    }\n\n    public option(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = false;\n\n        this.options.push(config);\n    }\n\n    public flag(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = true\n\n        this.options.push(config);\n    }\n\n    // Parse an arguments string\n    public parseString(argString: string) {\n        var position = 0;\n        var tokens = argString.match(/\\s+|"|[^\\s"]+/g);\n\n        function peek() {\n            return tokens[position];\n        }\n\n        function consume() {\n            return tokens[position++];\n        }\n\n        function consumeQuotedString() {\n            var value = \'\';\n            consume(); // skip opening quote.\n\n            var token = peek();\n\n            while (token && token !== \'"\') {\n                consume();\n\n                value += token;\n\n                token = peek();\n            }\n\n            consume(); // skip ending quote;\n\n            return value;\n        }\n\n        var args: string[] = [];\n        var currentArg = \'\';\n\n        while (position < tokens.length) {\n            var token = peek();\n\n            if (token === \'"\') {\n                currentArg += consumeQuotedString();\n            } else if (token.match(/\\s/)) {\n                if (currentArg.length > 0) {\n                    args.push(currentArg);\n                    currentArg = \'\';\n                }\n\n                consume();\n            } else {\n                consume();\n                currentArg += token;\n            }\n        }\n\n        if (currentArg.length > 0) {\n            args.push(currentArg);\n        }\n\n        this.parse(args);\n    }\n\n    // Parse arguments as they come from the platform: split into arguments.\n    public parse(args: string[]) {\n        var position = 0;\n\n        function consume() {\n            return args[position++];\n        }\n\n        while (position < args.length) {\n            var current = consume();\n           ';
var v27290 = v27291 + ' var match = current.match(/^(--?|@)(.*)/);\n            var value = null;\n\n            if (match) {\n                if (match[1] === \'@\') {\n                    this.parseString(this.host.readFile(match[2]));\n                } else {\n                    var arg = match[2];\n                    var option = this.findOption(arg);\n\n                    if (option === null) {\n                        this.host.printLine("Unknown option \'" + arg +"\'");\n                        this.host.printLine("Use the \'--help\' flag to see options");\n                    } else {\n                        if (!option.flag)\n                            value = consume();\n\n                        option.set(value);\n                    }\n                }\n            } else {\n                this.unnamed.push(current);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeContext {\n        NoTypes = 0,\n        ArraySuffix = 1,\n        Primitive = 2,\n        Named = 4,\n        AllSimpleTypes = Primitive | Named,\n        AllTypes = Primitive | Named | ArraySuffix,\n    }\n\n    export enum ParseState {\n        None,\n        StartScript,\n        StartStatementList,\n        StartStatement,\n        StartFncDecl,\n        FncDeclName,\n        FncDeclArgs,\n        FncDeclReturnType,\n        ForInit,\n        ForInitAfterVar,\n        ForCondStart,\n        EndStmtList,\n        EndScript,\n    }\n\n    export interface IStatementInfo {\n        stmt: Statement;\n        labels: ASTList;\n    }\n\n    export interface ILambdaArgumentContext {\n        preProcessedLambdaArgs: AST;\n    }\n\n    export class QuickParseResult {\n        constructor (public Script: Script, public endLexState: LexState) { }\n    }\n\n    export class Parser {\n        private varLists: ASTList[] = [];\n        private scopeLists: ASTList[] = [];\n        private staticsLists: ASTList[] = [];\n\n        private scanner: IScanner = new Scanner();\n        private currentToken: Token = null;\n\n        private needTerminator = false;\n\n        // TODO: consolidate these\n        private inFunction = false;\n        private inInterfaceDecl = false;\n        public currentClassDecl: NamedDeclaration = null;\n\n        private inFncDecl = false;  // this is only for FuncDecls - not constructors, like inFnc\n        private anonId = new Identifier("_anonymous");\n        public style_requireSemi = false;\n        public style_funcInLoop = true;\n        private incremental = false;\n        public errorRecovery = false;\n        public outfile: ITextWriter = undefined;\n        public errorCallback: (minChar: number, charLen: number, message: string, unit: number) =>void = null;\n        private state: ParseState = ParseState.StartStatementList;\n        private ambientModule = false;\n        private ambientClass = false;\n        private topLevel = true;\n        private allowImportDeclaration = true;\n        private currentUnitIndex = (-1);\n        private prevIDTok: Token = null;\n        private statementInfoStack: IStatementInfo[] = new IStatementInfo[];\n        private hasTopLevelImportOrExport = false; // for imports, only true if it\'s a dynamic module\n        private strictMode = false;\n        private nestingLevel = 0;\n        private prevExpr: AST = null;\n        private currentClassDefinition: ClassDeclaration = null;\n        private parsingClassConstructorDefinition = false;\n        private parsingDeclareFile = false;\n        private amdDependencies: string[] = [];\n        public inferPropertiesFromThisAssignment = false;\n        public requiresExtendsBlock = false;\n\n        private resetStmtStack() {\n            this.statementInfoStack = new IStatementInfo[];\n        }\n\n        private inLoop() {\n            for (var j = this.statementInfoStack.length - 1; j >= 0; j--) {\n                if (this.statementInfoStack[j].stmt.isLoop()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private pushStmt(stmt: Statement, labels: ASTList) {\n            // allocate here to avoid always storing this information in statements\n            var info = { stmt: stmt, labels: labels };\n            this.statementInfoStack.push(info);\n        }\n\n        private popStmt(): IStatementInfo {\n            return this.statementInfoStack.pop();\n        }\n\n        private resolveJumpTarget(jump: Jump): void {';
var v27289 = v27290 + '\n            var resolvedTarget = AST.getResolvedIdentifierName(jump.target);\n            var len = this.statementInfoStack.length;\n            for (var i = len - 1; i >= 0; i--) {\n                var info = this.statementInfoStack[i];\n                if (jump.target) {\n                    if (info.labels && (info.labels.members.length > 0)) {\n                        for (var j = 0, labLen = info.labels.members.length; j < labLen; j++) {\n                            var label = <Label>info.labels.members[j];\n                            if (label.id.text == resolvedTarget) {\n                                jump.setResolvedTarget(this, info.stmt);\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (info.stmt.isLoop()) {\n                        jump.setResolvedTarget(this, info.stmt);\n                        return;\n                    }\n                    else if ((info.stmt.nodeType == NodeType.Switch) && (jump.nodeType == NodeType.Break)) {\n                        jump.setResolvedTarget(this, info.stmt);\n                        return;\n                    }\n                }\n            }\n            // no luck\n            if (jump.target) {\n                this.reportParseError("could not find enclosing statement with label " + jump.target);\n            }\n            else {\n                if (jump.nodeType == NodeType.Break) {\n                    this.reportParseError("break statement requires enclosing loop or switch");\n                }\n                else {\n                    this.reportParseError("continue statement requires enclosing loop");\n                }\n            }\n        }\n\n        public setErrorRecovery(outfile: ITextWriter) {\n            this.outfile = outfile;\n            this.errorRecovery = true;\n        }\n\n        public getSourceLineCol(lineCol: ILineCol, minChar: number): void {\n            getSourceLineColFromMap(lineCol, minChar, this.scanner.lineMap);\n        }\n\n        private createRef(text: string, hasEscapeSequence: bool, minChar: number): Identifier {\n            var id = new Identifier(text, hasEscapeSequence);\n            id.minChar = minChar;\n            return id;\n        }\n\n        private reportParseStyleError(message: string) {\n            this.reportParseError("STYLE: " + message);\n        }\n\n        public reportParseError(message: string, startPos = this.scanner.startPos, pos = this.scanner.pos) {\n            var len = Math.max(1, pos - startPos);\n            if (this.errorCallback) {\n                this.errorCallback(startPos, len, message, this.currentUnitIndex);\n            }\n            else if (this.errorRecovery) {\n                var lineCol = { line: -1, col: -1 };\n                this.getSourceLineCol(lineCol, startPos);\n                if (this.outfile) {\n                    this.outfile.WriteLine("// " + this.fname + " (" + lineCol.line + "," + lineCol.col + "): " + message);\n                }\n            }\n            else {\n                throw new SyntaxError(this.fname + " (" + this.scanner.line + "," + this.scanner.col + "): " + message);\n            }\n        }\n\n        private checkNextToken(tokenId: TokenID, errorRecoverySet: ErrorRecoverySet, errorText: string = null): void {\n            this.currentToken = this.scanner.scan();\n            this.checkCurrentToken(tokenId, errorRecoverySet, errorText);\n        }\n\n        private skip(errorRecoverySet: ErrorRecoverySet) {\n            errorRecoverySet |= ErrorRecoverySet.EOF;\n            var ersTok = ErrorRecoverySet.None;\n            var tokenInfo = lookupToken(this.currentToken.tokenId);\n            if (tokenInfo != undefined) {\n                ersTok = tokenInfo.ers;\n            }\n            var pendingRightCurlies = 0;\n            while (((ersTok & errorRecoverySet) == ErrorRecoverySet.None) ||\n                   (this.currentToken.tokenId == TokenID.CloseBrace) && (pendingRightCurlies > 0)) {\n                if (this.currentToken.tokenId == TokenID.OpenBrace) {\n                    pendingRightCurlies++;\n                }\n                else if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    pendingRightCurlies--;\n                }\n                this.currentToken = this.scanner.scan();\n                ersTok = ErrorRecoverySet.None;\n                tokenInfo = lookupToken(this.currentToken.tokenId);\n                if (tokenInfo != undefined) {\n                    ersTok = tokenInfo.ers;\n                }\n                // TODO: regex rescan \n            }\n        }\n\n        private checkCurrentToken(tokenId: TokenID, errorRecoverySet: ErrorRecoverySet, errorText: string = null): void {\n            if (this.currentToken.tokenId != tokenId) {\n                errorText = errorText == null ? ("Expected \'" + tokenTable[tokenId].text + "\'") : errorText;\n                this.reportParseError(errorText);\n                if (this.errorRecove';
var v27288 = v27289 + 'ry) {\n                    this.skip(errorRecoverySet);\n                }\n            }\n            else {\n                this.currentToken = this.scanner.scan();\n            }\n        }\n\n        private pushDeclLists() {\n            this.staticsLists.push(new ASTList());\n            this.varLists.push(new ASTList());\n            this.scopeLists.push(new ASTList());\n        }\n\n        private popDeclLists() {\n            this.staticsLists.pop();\n            this.varLists.pop();\n            this.scopeLists.pop();\n        }\n\n        private topVarList() {\n            return this.varLists[this.varLists.length - 1];\n        }\n\n        private topScopeList() {\n            return this.scopeLists[this.scopeLists.length - 1];\n        }\n\n        private topStaticsList() {\n            return this.staticsLists[this.staticsLists.length - 1];\n        }\n\n        private parseComment(comment: CommentToken) {\n            if (comment) {\n                var c: Comment = new Comment(comment.value, comment.isBlock, comment.endsLine);\n                c.minChar = comment.startPos;\n                c.limChar = comment.startPos + comment.value.length;\n                var lineCol = { line: -1, col: -1 };\n                this.getSourceLineCol(lineCol, c.minChar);\n                c.minLine = lineCol.line;\n                this.getSourceLineCol(lineCol, c.limChar);\n                c.limLine = lineCol.line;\n\n                if (!comment.isBlock && comment.value.length > 3 && comment.value.substring(0, 3) == "///") {\n                    var dependencyPath = getAdditionalDependencyPath(comment.value);\n\n                    if (dependencyPath) {\n                        this.amdDependencies.push(dependencyPath);\n                    }\n\n                    if (getImplicitImport(comment.value)) {\n                        this.hasTopLevelImportOrExport = true;\n                    }\n                }\n\n                return c;\n            }\n            else {\n                return null;\n            }\n        }\n\n        private parseCommentsInner(comments: CommentToken[]) {\n            if (comments) {\n                var commentASTs: Comment[] = new Comment[];\n                for (var i = 0; i < comments.length; i++) {\n                    commentASTs.push(this.parseComment(comments[i]));\n                }\n                return commentASTs;\n            } else {\n                return null;\n            }\n        }\n\n        private parseComments() {\n            var comments = this.scanner.getComments();\n            return this.parseCommentsInner(comments);\n        }\n\n        private parseCommentsForLine(line: number) {\n            var comments = this.scanner.getCommentsForLine(line);\n\n            return this.parseCommentsInner(comments);\n        }\n\n        private combineComments(comment1: Comment[], comment2: Comment[]) {\n            if (comment1 == null) {\n                return comment2;\n            }\n            else if (comment2 == null) {\n                return comment1;\n            }\n            else {\n                return comment1.concat(comment2);\n            }\n        }\n\n        private parseEnumDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): ModuleDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("Enum declaration requires identifier");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.startPos;\n                    name.limChar = this.scanner.startPos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.ID);\n            this.pushDeclLists();\n            var members = new ASTList();\n            members.minChar = membersMinChar;\n            var mapDecl = new VarDecl(new Identifier("_map"), 0);\n            mapDecl.varFlags |= VarFlags.Exported;\n            mapDecl.varFlags |= VarFlags.Private;\n\n            // REVIEW: Is this still necessary?\n            mapDecl.varFlags |= (VarFlags.Property | VarFlags.Public);\n            mapDecl.init = new UnaryExpression(NodeType.ArrayLit, null);\n            members.append(mapDecl);\n            var lastValue: NumberLiteral = null;\n            for (; ;) {\n                var minChar = this.scanner.startPos;\n                var limChar;\n                var memberName: Identifier = null;\n';
var v27287 = v27288 + '                var memberValue: AST = null;\n                var preComments = null;\n                var postComments = null;\n\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                    memberName = Identifier.fromToken(this.currentToken);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    break;\n                }\n                else {\n                    this.reportParseError("Expected identifer of enum member");\n                    if (this.errorRecovery) {\n                        memberName = new MissingIdentifier();\n                        memberName.minChar = this.scanner.startPos;\n                        memberName.limChar = this.scanner.startPos;\n                        memberName.flags |= ASTFlags.Error;\n                    }\n                }\n\n                limChar = this.scanner.pos;\n                preComments = this.parseComments();\n                this.currentToken = this.scanner.scan();\n                postComments = this.parseComments();\n\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    this.currentToken = this.scanner.scan();\n                    memberValue = this.parseExpr(errorRecoverySet, OperatorPrecedence.Comma, true,\n                                          TypeContext.NoTypes);\n                    lastValue = <NumberLiteral>memberValue;\n                    limChar = memberValue.limChar;\n                }\n                else {\n                    if (lastValue == null) {\n                        memberValue = new NumberLiteral(0);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n                    else {\n                        memberValue = new NumberLiteral(lastValue.value + 1);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n                    var map: BinaryExpression =\n                        new BinaryExpression(NodeType.Asg,\n                                             new BinaryExpression(NodeType.Index,\n                                                                  new Identifier("_map"),\n                                                                  memberValue),\n                                             new StringLiteral(\'"\' + memberName.actualText + \'"\'));\n                    members.append(map);\n                }\n                var member = new VarDecl(memberName, this.nestingLevel);\n                member.minChar = minChar;\n                member.limChar = limChar;\n                member.init = memberValue;\n                // Note: Leave minChar, limChar as "-1" on typeExpr as this is a parsing artifact.\n                member.typeExpr = new TypeReference(this.createRef(name.actualText, name.hasEscapeSequence, -1), 0);\n                member.varFlags |= (VarFlags.Readonly | VarFlags.Property);\n                if (memberValue.nodeType == NodeType.NumberLit) {\n                    member.varFlags |= VarFlags.Constant;\n                }\n                member.preComments = preComments;\n                members.append(member);\n                member.postComments = postComments;\n                // all enum members are exported\n                member.varFlags |= VarFlags.Exported;\n\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    this.currentToken = this.scanner.scan();\n                    member.postComments = this.combineComments(member.postComments, this.parseCommentsForLine(this.scanner.prevLine));\n                    if ((this.currentToken.tokenId == TokenID.Identifier) || (convertTokToIDName(this.currentToken))) {\n                        continue;\n                    }\n                }\n                break;\n            }\n            var endingToken = new ASTSpan();\n            endingToken.minChar = this.scanner.startPos;\n            endingToken.limChar = this.scanner.pos;\n\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n            members.limChar = this.scanner.lastTokenLimChar();\n            var modDecl = new ModuleDeclaration(name, members, this.topVarList(), this.topScopeList(), endingToken);\n            modDecl.modFlags |= ModuleFlags.IsEnum;\n            this.popDeclLists();\n\n            modDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            modDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return modDecl;\n        }\n\n        private parseDottedName(enclosedList: AST[]): void {\n            this.currentToken = this.scanner.scan();\n            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                var id = Identifier.fromToken(this.currentToken);\n                id.preComments = this.parseCom';
var v27286 = v27287 + "ments();\n                enclosedList[enclosedList.length] = id;\n                id.minChar = this.scanner.startPos;\n                id.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n                if (this.currentToken.tokenId == TokenID.Dot) {\n                    this.parseDottedName(enclosedList);\n                }\n            }\n            else {\n                this.reportParseError(\"need identifier after '.'\");\n            }\n        }\n\n        // REVIEW: This is much more lenient than the spec - we're basically just checking to see if the\n        // path is rooted or contains an extension, not if it could potentially be a bogus file path\n        private isValidImportPath(importPath: string) {\n            importPath = stripQuotes(importPath);\n\n            if (!importPath ||\n                importPath.indexOf(':') != -1 || \n                importPath.indexOf('\\\\') != -1 ||\n                //(importPath.indexOf('.') != -1 && importPath.charAt(0) != '.') ||\n                importPath.charAt(0) == '/') {\n                return false;\n            }\n            return true;\n        }\n\n        private parseImportDeclaration(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): ImportDeclaration {\n\n            var name: Identifier = null;\n            var alias: AST = null;\n            var importDecl: ImportDeclaration = null;\n            var minChar = this.scanner.startPos;\n            var isDynamicImport = false;\n\n            this.currentToken = this.scanner.scan();\n\n            if (this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n                name = Identifier.fromToken(this.currentToken);\n            }\n            else {\n                this.reportParseError(\"Expected identifer after 'import'\");\n                name = new MissingIdentifier();\n            }\n\n            name.minChar = this.scanner.startPos;\n            name.limChar = this.scanner.pos;\n\n            this.currentToken = this.scanner.scan();\n\n            this.checkCurrentToken(TokenID.Equals, errorRecoverySet | ErrorRecoverySet.ID);\n\n            var aliasPreComments = this.parseComments();\n\n            var limChar;\n            if (this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n\n                if (this.currentToken.tokenId == TokenID.Module) {\n                    limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        this.currentToken = this.scanner.scan();\n\n                        if (this.currentToken.tokenId == TokenID.StringLiteral || this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n\n                            if (this.currentToken.tokenId == TokenID.StringLiteral) {\n\n                                if (this.topLevel) {\n                                    this.hasTopLevelImportOrExport = true;\n                                } else if (!this.allowImportDeclaration) {\n                                    this.reportParseError(\"Import declaration of external module is permitted only in global or top level dynamic modules\");\n                                }\n\n                                var aliasText = this.currentToken.getText();\n                                alias = Identifier.fromToken(this.currentToken);\n                                alias.minChar = this.scanner.startPos;\n                                alias.limChar = this.scanner.pos;\n\n                                if (!this.isValidImportPath((<Identifier>alias).text)) {\n                                    this.reportParseError(\"Invalid import path\");\n                                }\n\n                                isDynamicImport = true;\n                                this.currentToken = this.scanner.scan();\n                                    \n                                alias.preComments = aliasPreComments;\n                            }\n                            else {\n                                alias = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                                    \n                                alias.preComments = aliasPreComments;\n                            }\n                        }\n\n                        limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.ID);\n\n                        if (alias) {\n                            alias.postComments = this.parseComments();\n                        }\n                    }\n                }\n                else {\n                    alias = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                 ";
var v27285 = v27286 + '                           OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                    limChar = this.scanner.pos; // Include semicolon if needed\n                }\n            }\n            else {\n                this.reportParseError("Expected module name");\n                alias = new MissingIdentifier();\n                alias.minChar = this.scanner.startPos;\n                if (this.currentToken.tokenId == TokenID.Semicolon) {\n                    alias.limChar = this.scanner.startPos;\n                } else {\n                    alias.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n                alias.flags |= ASTFlags.Error;\n                limChar = alias.limChar;\n            }\n\n            importDecl = new ImportDeclaration(name, alias);\n            importDecl.isDynamicImport = isDynamicImport;\n\n            importDecl.minChar = minChar;\n            importDecl.limChar = limChar;\n\n            return importDecl;\n        }\n\n        private parseModuleDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers, preComments: Comment[]): ModuleDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var svAmbient = this.ambientModule;\n            var svTopLevel = this.topLevel;\n            this.topLevel = false;\n            if (this.parsingDeclareFile || svAmbient || hasFlag(modifiers, Modifiers.Ambient)) {\n                this.ambientModule = true;\n            }\n\n            this.currentToken = this.scanner.scan();\n            var name: AST = null;\n            var enclosedList: AST[] = null;\n            this.pushDeclLists();\n            var minChar = this.scanner.startPos;\n            var isDynamicMod = false;\n\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (this.currentToken.tokenId == TokenID.StringLiteral) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode))) {\n                var nameText = this.currentToken.getText();\n\n                if (this.currentToken.tokenId == TokenID.StringLiteral) {\n                    isDynamicMod = true;\n                    if (!this.ambientModule) {\n                        this.reportParseError("Only ambient dynamic modules may have string literal names");\n                    }\n\n                    if (!svTopLevel) {\n                        this.reportParseError("Dynamic modules may not be nested within other modules");\n                    }\n                }\n\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n\n                this.currentToken = this.scanner.scan();\n            }\n            else if (this.currentToken.tokenId == TokenID.OpenBrace) {\n                this.reportParseError("Module name missing");\n                name = new Identifier("");\n                // "fake" position of where the ID would be\n                name.minChar = minChar;\n                name.limChar = minChar;\n            }\n\n            if (this.currentToken.tokenId == TokenID.Dot) {\n                enclosedList = new AST[];\n                this.parseDottedName(enclosedList);\n            }\n\n            if (name == null) {\n                name = new MissingIdentifier();\n            }\n\n            var moduleBody = new ASTList();\n            var bodyMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.ID);\n\n            if (svTopLevel && isDynamicMod) {\n                this.allowImportDeclaration = true;\n            } else {\n                this.allowImportDeclaration = false;\n            }\n            this.parseStatementList(\n                errorRecoverySet | ErrorRecoverySet.RCurly, moduleBody,\n                /*sourceElements:*/ true, /*noLeadingCase:*/ true, AllowedElements.Global, modifiers);\n            moduleBody.minChar = bodyMinChar;\n            moduleBody.limChar = this.scanner.pos;\n\n            var endingToken = new ASTSpan();\n            endingToken.minChar = this.scanner.startPos;\n            endingToken.limChar = this.scanner.pos;\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            var limChar = this.scanner.lastTokenLimChar();\n            var moduleDecl: ModuleDeclaration;\n\n            this.allowImportDeclaration = svTopLevel;\n\n            if (enclosedList && (enclosedList.length > 0)) {\n                var len = enclosedList.length;\n                var innerName = <Identifier>enclosedList[len - 1];\n                var innerDecl = new ModuleDeclaration(innerName, moduleBody, this.topVarList(),\n                                                this.topScopeList(), endingToken);\n                innerDecl.preComments = preComments;\n\n                if (this.parsingDeclareFile || hasFl';
var v27284 = v27285 + 'ag(modifiers, Modifiers.Ambient)) {\n                    innerDecl.modFlags |= ModuleFlags.Ambient;\n                }\n\n                innerDecl.modFlags |= ModuleFlags.Exported;\n\n                // REVIEW: will also possibly need to re-parent comments as well\n                innerDecl.minChar = minChar;\n                innerDecl.limChar = limChar;\n\n                this.popDeclLists();\n                var outerModBod: ASTList;\n                for (var i = len - 2; i >= 0; i--) {\n                    outerModBod = new ASTList();\n                    outerModBod.append(innerDecl);\n                    innerName = <Identifier>enclosedList[i];\n                    innerDecl = new ModuleDeclaration(innerName, outerModBod, new ASTList(),\n                                                new ASTList(), endingToken);\n                    outerModBod.minChar = innerDecl.minChar = minChar;\n                    outerModBod.limChar = innerDecl.limChar = limChar;\n\n                    if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                        innerDecl.modFlags |= ModuleFlags.Ambient;\n                    }\n\n                    innerDecl.modFlags |= ModuleFlags.Exported;\n                }\n                outerModBod = new ASTList();\n                outerModBod.append(innerDecl);\n                outerModBod.minChar = minChar;\n                outerModBod.limChar = limChar;\n                moduleDecl = new ModuleDeclaration(<Identifier>name, outerModBod, new ASTList(),\n                                            new ASTList(), endingToken);\n            }\n            else {\n                moduleDecl = new ModuleDeclaration(<Identifier>name, moduleBody, this.topVarList(), this.topScopeList(), endingToken);\n                moduleDecl.preComments = preComments;\n                this.popDeclLists();\n            }\n\n            if (this.parsingDeclareFile || svAmbient || hasFlag(modifiers, Modifiers.Ambient)) {\n                moduleDecl.modFlags |= ModuleFlags.Ambient;\n            }\n            if (svAmbient || hasFlag(modifiers, Modifiers.Exported)) {\n                moduleDecl.modFlags |= ModuleFlags.Exported;\n            }\n            if (isDynamicMod) {\n                moduleDecl.modFlags |= ModuleFlags.IsDynamic;\n            }\n\n            this.ambientModule = svAmbient;\n\n            this.topLevel = svTopLevel;\n            moduleDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            moduleDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            moduleDecl.limChar = moduleBody.limChar;\n            return moduleDecl;\n        }\n\n        private parseTypeReferenceTail(errorRecoverySet: ErrorRecoverySet, minChar: number, term: AST): TypeReference {\n            var result = new TypeReference(term, 0);\n            result.minChar = minChar;\n            while (this.currentToken.tokenId == TokenID.OpenBracket) {\n                this.currentToken = this.scanner.scan();\n                result.arrayCount++;\n                this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet | ErrorRecoverySet.LBrack);\n            }\n            result.limChar = this.scanner.lastTokenLimChar();\n            return result;\n        }\n\n        // REVIEW: Consider renaming to parseTypeName.\n        private parseNamedType(errorRecoverySet: ErrorRecoverySet, minChar: number, term: AST, tail: bool): AST {\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId == TokenID.Dot) {\n                var curpos = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n                // Don\'t allow reserved words if immediately after a new line and error recovery is enabled\n                if ((this.currentToken.tokenId == TokenID.Identifier) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && convertTokToID(this.currentToken, this.strictMode))) {\n                    var op2 = Identifier.fromToken(this.currentToken);\n                    op2.minChar = this.scanner.startPos;\n                    op2.limChar = this.scanner.pos;\n                    var dotNode = new BinaryExpression(NodeType.Dot, term, op2);\n                    dotNode.minChar = term.minChar;\n                    dotNode.limChar = op2.limChar;\n                    return this.parseNamedType(errorRecoverySet, minChar,\n                                            dotNode, tail);\n                }\n                else {\n                    this.reportParseError("need identifier after \'.\'");\n                    if (this.errorRecovery) {\n                        term.flags |= ASTFlags.DotLHS;\n                        // We set "limChar" to be slightly innacurate for completion list behavior\n                        // (last AST node from "quickParse" will match DotLHS and be at end of file position)\n                        // This is to match the behavior of TokenId.Dot processing in parsePostfixOperators.\n                        term.limChar = this.scanner.las';
var v27283 = v27284 + 'tTokenLimChar();\n                        return term;\n                    }\n                    else {\n                        var eop2 = new MissingIdentifier();\n                        eop2.minChar = this.scanner.pos;\n                        eop2.limChar = this.scanner.pos;\n                        var edotNode = new BinaryExpression(NodeType.Dot, term, eop2);\n                        edotNode.flags |= ASTFlags.Error;\n                        edotNode.minChar = term.minChar;\n                        edotNode.limChar = eop2.limChar;\n                        return this.parseNamedType(errorRecoverySet, minChar,\n                                                edotNode, tail);\n                    }\n                }\n            }\n            else {\n                if (tail) {\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, term);\n                }\n                else {\n                    return term;\n                }\n            }\n        }\n\n        // REVIEW: Reconsider renaming this to parseType to match the grammar.\n        private parseTypeReference(errorRecoverySet: ErrorRecoverySet, allowVoid: bool): AST {\n            var minChar = this.scanner.startPos;\n            var isConstructorMember = false;\n\n            switch (this.currentToken.tokenId) {\n                case TokenID.Void:\n                    if (!allowVoid) {\n                        this.reportParseError("void not a valid type in this context");\n                    }\n                // Intentional fall-through\n                case TokenID.Any:\n                case TokenID.Number:\n                case TokenID.Bool:\n                case TokenID.String: {\n                    var text = tokenTable[this.currentToken.tokenId].text;\n                    var predefinedIdentifier = new Identifier(text);\n                    predefinedIdentifier.minChar = minChar;\n                    predefinedIdentifier.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, predefinedIdentifier);\n                }\n\n                case TokenID.Identifier:\n                    var ident = this.createRef(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence, minChar);\n                    ident.limChar = this.scanner.pos;\n                    return this.parseNamedType(errorRecoverySet, minChar, ident, true);\n\n                case TokenID.OpenBrace:\n                    return this.parseObjectType(minChar, errorRecoverySet);\n\n                case TokenID.New:\n                    this.currentToken = this.scanner.scan();\n                    // can\'t use chkCurrentTok, since we don\'t want to advance the token\n                    if (this.currentToken.tokenId != TokenID.OpenParen) {\n                        this.reportParseError("Expected \'(\'");\n                    }\n                    else {\n                        isConstructorMember = true;\n                        // fall through...\n                    }\n\n                case TokenID.OpenParen: {\n                    // ( formals ) => type\n                    var formals = new ASTList();\n                    var variableArgList =\n                        this.parseFormalParameterList(errorRecoverySet | ErrorRecoverySet.RParen,\n                                            formals, false, true, false, false, false, false, null, true);\n                    this.checkCurrentToken(TokenID.EqualsGreaterThan, errorRecoverySet);\n                    var returnType = this.parseTypeReference(errorRecoverySet, true);\n                    var funcDecl = new FuncDecl(null, null, false, formals, null, null, null,\n                                                NodeType.FuncDecl);\n                    funcDecl.returnTypeAnnotation = returnType;\n                    funcDecl.variableArgList = variableArgList;\n                    funcDecl.fncFlags |= FncFlags.Signature;\n\n                    if (isConstructorMember) {\n                        funcDecl.fncFlags |= FncFlags.ConstructMember;\n                        funcDecl.hint = "_construct";\n                        funcDecl.classDecl = null;\n                    }\n                    funcDecl.minChar = minChar;\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, funcDecl);\n                }\n\n                default:\n                    this.reportParseError("Expected type name");\n                    var etr = new TypeReference(null, 0);\n                    etr.flags |= ASTFlags.Error;\n                    etr.minChar = this.scanner.pos;\n                    etr.limChar = this.scanner.pos;\n                    return etr;\n            }\n        }\n\n        private parseObjectType(minChar: number, errorRecoverySet: ErrorRecoverySet): TypeReference {\n            this.currentToken = this.scanner.scan();\n\n            var members = new ASTList();\n            members.minChar = minChar;\n\n            var prevInInter';
var v27282 = v27283 + 'faceDecl = this.inInterfaceDecl;\n            this.inInterfaceDecl = true;\n            this.parseTypeMemberList(errorRecoverySet | ErrorRecoverySet.RCurly, members);\n            this.inInterfaceDecl = prevInInterfaceDecl;\n\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            // REVIEW: We\'re parsing an ObjectType, but we give a NodeType of Interface here.\n            var interfaceDecl = new InterfaceDeclaration(\n                this.anonId, members, /*extends:*/ null, /*implementsL*/ null);\n\n            interfaceDecl.minChar = minChar;\n            interfaceDecl.limChar = members.limChar;    // "}"\n\n            return this.parseTypeReferenceTail(errorRecoverySet, minChar, interfaceDecl);\n        }\n\n        private parseFunctionBlock(errorRecoverySet: ErrorRecoverySet,\n                                   allowedElements: AllowedElements,\n                                   parentModifiers: Modifiers,\n                                   bod: ASTList,\n                                   bodMinChar: number): void {\n            this.state = ParseState.StartStatementList;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.StmtStart);\n            var savedInFunction = this.inFunction;\n            this.inFunction = true;\n            this.parseStatementList(\n                errorRecoverySet | ErrorRecoverySet.RCurly | ErrorRecoverySet.StmtStart,\n                bod, /*sourceElements:*/ true, /*noLeadingCase:*/ false, allowedElements, parentModifiers);\n            bod.minChar = bodMinChar;\n            bod.limChar = this.scanner.pos;\n            this.inFunction = savedInFunction;\n            var ec = new EndCode();\n            ec.minChar = bod.limChar;\n            ec.limChar = ec.minChar;\n            bod.append(ec);\n        }\n\n        private parseFunctionStatements(errorRecoverySet: ErrorRecoverySet,\n                                        name: Identifier,\n                                        isConstructor: bool,\n                                        isMethod: bool,\n                                        args: ASTList,\n                                        allowedElements: AllowedElements,\n                                        minChar: number,\n                                        requiresSignature: bool,\n                                        parentModifiers: Modifiers) {\n\n            this.pushDeclLists();\n            // start new statement stack\n            var svStmtStack = this.statementInfoStack;\n            this.resetStmtStack();\n\n            var bod: ASTList = null;\n            var wasShorthand = false;\n            var isAnonLambda = false;\n            var limChar: number;\n\n            if (requiresSignature) {\n                // If we require a signature, but they provided a block, then give an error, but\n                // still consume the block.\n                limChar = this.scanner.pos;\n                if (this.currentToken.tokenId === TokenID.OpenBrace) {\n                    this.reportParseError("Function declarations are not permitted within interfaces, ambient modules or classes")\n                    bod = new ASTList();\n                    var bodMinChar = this.scanner.startPos;\n\n                    this.parseFunctionBlock(errorRecoverySet, allowedElements, parentModifiers, bod, bodMinChar);\n                    this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n                    // If there\'s also a semicolon, then just skip over it.  We don\'t want to report an \n                    // additional error here.\n                    if (this.currentToken.tokenId === TokenID.Semicolon) {\n                        this.currentToken = this.scanner.scan();\n                    }\n                }\n                else {\n                    this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet, "Expected \';\'");\n                }\n            }\n            else {\n                bod = new ASTList();\n                var bodMinChar = this.scanner.startPos;\n                if (this.currentToken.tokenId == TokenID.EqualsGreaterThan) {\n                    if (isMethod) {\n                        this.reportParseError("\'=>\' may not be used for class methods");\n                    }\n                    wasShorthand = true;\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (wasShorthand && this.currentToken.tokenId != TokenID.OpenBrace) {\n                    var retExpr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                    var retStmt = new ReturnStatement();\n                    retStmt.returnExpression = retExpr;\n                    retStmt.minChar = retExpr.minChar;\n                    retStmt.limChar = retExpr.limChar;\n                    bod.minChar = bodMinChar;\n                    bod.append(retStmt);\n ';
var v27281 = v27282 + '               }\n                else {\n                    isAnonLambda = wasShorthand;\n                    this.parseFunctionBlock(errorRecoverySet, allowedElements, parentModifiers, bod, bodMinChar);\n                }\n\n                limChar = this.scanner.pos;\n            }\n\n            var funcDecl = new FuncDecl(name, bod, isConstructor, args, this.topVarList(),\n                                        this.topScopeList(), this.topStaticsList(), NodeType.FuncDecl);\n            this.popDeclLists();\n            var scopeList = this.topScopeList();\n            scopeList.append(funcDecl);\n            var staticFuncDecl = false;\n\n            if (!requiresSignature) {\n                if (!wasShorthand || isAnonLambda) {\n                    funcDecl.endingToken = new ASTSpan();\n                    funcDecl.endingToken.minChar = this.scanner.startPos;\n                    funcDecl.endingToken.limChar = this.scanner.pos;\n                    this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n                    if (isAnonLambda) {\n                        funcDecl.fncFlags |= FncFlags.IsFatArrowFunction;\n                    }\n                }\n                else {\n                    funcDecl.fncFlags |= FncFlags.IsFatArrowFunction;\n                    funcDecl.endingToken = new ASTSpan();\n\n                    funcDecl.endingToken.minChar = bod.members[0].minChar;\n                    funcDecl.endingToken.limChar = bod.members[0].limChar;\n                }\n            }\n            funcDecl.minChar = minChar;\n            funcDecl.limChar = limChar;\n\n            if (!requiresSignature) {\n                funcDecl.fncFlags |= FncFlags.Definition;\n            }\n\n            this.statementInfoStack = svStmtStack;\n            return funcDecl;\n        }\n\n        private transformAnonymousArgsIntoFormals(formals: ASTList, argList: AST) : bool {\n\n            var translateBinExOperand = (operand: AST) : bool => {\n                if (operand.nodeType == NodeType.Comma) {\n                    return this.transformAnonymousArgsIntoFormals(formals, operand);\n                }\n                else if (operand.nodeType == NodeType.Name || operand.nodeType == NodeType.Asg) {\n                    var opArg = operand.nodeType == NodeType.Asg ? (<BinaryExpression>operand).operand1 : operand;\n\n                    var arg = new ArgDecl(<Identifier>opArg);\n                    arg.preComments = opArg.preComments;\n                    arg.postComments = opArg.postComments;\n                    arg.minChar = operand.minChar;\n                    arg.limChar = operand.limChar;\n\n                    if (hasFlag(opArg.flags, ASTFlags.PossibleOptionalParameter)) {\n                        arg.isOptional = true;\n                    }\n\n                    if (operand.nodeType == NodeType.Asg) {\n                        arg.init = (<BinaryExpression>operand).operand2;\n                    }\n\n                    formals.append(arg);\n\n                    return arg.isOptional || arg.init;\n                }\n                else {\n                    this.reportParseError("Invalid lambda argument");\n                }\n                return false;\n            }\n\n            if (argList) {\n                if (argList.nodeType == NodeType.Comma) {\n                    var commaList = <BinaryExpression> argList;\n                    if (commaList.operand1.isParenthesized) { \n                        this.reportParseError("Invalid lambda argument", commaList.operand1.minChar, commaList.operand1.limChar);\n                    }\n                    if (commaList.operand2.isParenthesized) { \n                        this.reportParseError("Invalid lambda argument", commaList.operand2.minChar, commaList.operand2.limChar);\n                    }\n                    var isOptional = translateBinExOperand(commaList.operand1);\n                    isOptional = translateBinExOperand(commaList.operand2) || isOptional;\n                    return isOptional;\n                }\n                else {\n                    return translateBinExOperand(argList);\n                }\n            }\n        }\n\n        private parseFormalParameterList(errorRecoverySet: ErrorRecoverySet,\n                                            formals: ASTList,\n                                            isClassConstr: bool,\n                                            isSig: bool,\n                                            isIndexer: bool,\n                                            isGetter: bool,\n                                            isSetter: bool,\n                                            isLambda: bool,\n                                            preProcessedLambdaArgs: AST,\n                                            expectClosingRParen: bool): bool \n        {\n\n            formals.minChar = this.scanner.startPos; // \'(\' or \'[\'\n            if (isIndexer) {\n                this.currentToken = this.scanner.scan();\n            }\n            else if (!isLambda) {\n                this.ch';
var v27280 = v27281 + 'eckCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.RParen);\n            }\n            var sawEllipsis = false;\n            var firstArg = true;\n            var hasOptional = false;\n            var haveFirstArgID = false;\n\n            // if preProcessedLambdaArgs is "true", we either have a typeless argument list, or we have\n            // a single identifier node and the current token is the \':\' before a typereference\n            if (isLambda && preProcessedLambdaArgs && preProcessedLambdaArgs.nodeType != NodeType.EmptyExpr) {\n                hasOptional = this.transformAnonymousArgsIntoFormals(formals, preProcessedLambdaArgs);\n                haveFirstArgID = true;\n            }\n\n            while (true) {\n                var munchedArg = false;\n                var argFlags = VarFlags.None;\n                var argMinChar = this.scanner.startPos;\n\n                if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TokenID.This) {\n                    if (!isClassConstr) {\n                        this.reportParseError("Instance property declarations using \'this\' may only be used in class constructors");\n                    }\n                    this.currentToken = this.scanner.scan(); // consume the \'.\'\n\n                    argFlags |= (VarFlags.Public | VarFlags.Property);\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.Public) {\n                    argFlags |= (VarFlags.Public | VarFlags.Property);\n\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Private) {\n                    argFlags |= (VarFlags.Private | VarFlags.Property);\n\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Static && isClassConstr) {\n                    this.reportParseError("Static properties can not be declared as parameter properties");\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (argFlags != VarFlags.None) {\n                    if (!isClassConstr) {\n                        this.reportParseError("only constructor parameters can be properties");\n                    }\n                    this.currentToken = this.scanner.scan();\n\n                    if (isModifier(this.currentToken)) { \n                        this.reportParseError("Multiple modifiers may not be applied to parameters");\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TokenID.This) {\n                        if (!isClassConstr) {\n                            this.reportParseError("Instance property declarations using \'this\' may only be used in class constructors");\n                        }\n                        this.currentToken = this.scanner.scan(); // consume the \'.\'\n                        this.currentToken = this.scanner.scan();\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.DotDotDot) {\n                    sawEllipsis = true;\n                    this.currentToken = this.scanner.scan();\n\n                    if (!(this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                        this.reportParseError("\'...\' parameters require both a parameter name and an array type annotation to be specified");\n                        sawEllipsis = false; // Do not treat this parameter as vararg\n                    }\n                }\n\n                var argId: Identifier = null;\n\n                if (!haveFirstArgID && (this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                    argId = Identifier.fromToken(this.currentToken);\n                    argId.minChar = this.scanner.startPos;\n                    argId.limChar = this.scanner.pos;\n                }\n\n                if (haveFirstArgID || argId) {\n                    munchedArg = true;\n                    var type: AST = null;\n                    var arg: ArgDecl = null;\n\n                    if (haveFirstArgID && formals.members.length) {\n                        arg = <ArgDecl>formals.members[formals.members.length - 1];\n\n                        if (arg.isOptional) {\n                            hasOptional = true;\n                        }\n                    }\n         ';
var v27279 = v27280 + '           else {\n                        arg = new ArgDecl(argId);\n\n                        if (isGetter) {\n                            this.reportParseError("Property getters may not take any arguments");\n                        }\n\n                        if (isSetter && !firstArg) {\n                            this.reportParseError("Property setters may only take one argument");\n                        }\n\n                        arg.minChar = argMinChar;\n                        arg.preComments = this.parseComments();\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.Question) {\n                        arg.isOptional = true;\n                        hasOptional = true;\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.Colon) {\n                        this.currentToken = this.scanner.scan();\n                        type = this.parseTypeReference(errorRecoverySet, false);\n                    }\n\n                    // check for default parameter\n                    // REVIEW: In the case of a typed reference, assume that parseTypeReference or one\n                    // of its children in the call graph advanced tok\n                    if (this.currentToken.tokenId == TokenID.Equals) {\n                        if (isSig) {\n                            this.reportParseError("Arguments in signatures may not have default values");\n                        }\n\n                        hasOptional = true;\n                        this.currentToken = this.scanner.scan();\n                        arg.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                            OperatorPrecedence.Comma, false,\n                                            TypeContext.NoTypes);\n\n                    }\n\n                    if (hasOptional && !arg.isOptionalArg() && !sawEllipsis) {\n                        this.reportParseError("Optional parameters may only be followed by other optional parameters");\n                    }\n\n                    if (sawEllipsis && arg.isOptionalArg()) {\n                        this.reportParseError("Varargs may not be optional or have default parameters");\n                    }\n\n                    if (sawEllipsis && !type) {\n                        // Ellipsis is missing a type definition\n                        this.reportParseError("\'...\' parameters require both a parameter name and an array type annotation to be specified");\n                    }\n\n                    // REVIEW: Ok for lambdas?\n                    arg.postComments = this.parseComments();\n                    arg.typeExpr = type;\n                    arg.limChar = this.scanner.lastTokenLimChar();\n                    arg.varFlags |= argFlags;\n                    if (!haveFirstArgID) {\n                        formals.append(arg);\n                    }\n                    else {\n                        haveFirstArgID = false;\n                    }\n                }\n                firstArg = false;\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    if ((munchedArg) && (!sawEllipsis)) {\n                        this.currentToken = this.scanner.scan();\n                        continue;\n                    }\n                    else {\n                        this.reportParseError("Unexpected \',\' in argument list");\n                        if (this.errorRecovery) {\n                            this.currentToken = this.scanner.scan();\n                            continue;\n                        }\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n\n            if (isIndexer) {\n                this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet | ErrorRecoverySet.LCurly | ErrorRecoverySet.SColon);\n            }\n            else if (expectClosingRParen) {\n                this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly | ErrorRecoverySet.SColon);\n            }\n            formals.limChar = this.scanner.lastTokenLimChar(); // \')\' or \']\'\n            return sawEllipsis;\n        }\n\n        private parseFncDecl(errorRecoverySet: ErrorRecoverySet,\n                             isDecl: bool,\n                             requiresSignature: bool,\n                             isMethod: bool,\n                             methodName: Identifier,\n                             indexer: bool,\n                             isStatic: bool,\n                             markedAsAmbient: bool,\n                             modifiers: Modifiers,\n                             lambdaArgContext: ILambdaArgumentContext,\n                             expectClosingRParen: bool): AST {\n\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyC';
var v27278 = v27279 + 'ount;\n\n            var prevInConstr = this.parsingClassConstructorDefinition;\n            this.parsingClassConstructorDefinition = false;\n\n            var name: Identifier = null;\n            var fnMin = this.scanner.startPos;\n            var minChar = this.scanner.pos;\n            var prevNestingLevel = this.nestingLevel;\n            var preComments = this.parseComments();\n            var isLambda = !!lambdaArgContext;\n            this.nestingLevel = 0;\n            if ((!this.style_funcInLoop) && this.inLoop()) {\n                this.reportParseStyleError("function declaration in loop");\n            }\n            if (!isMethod && !isStatic && !indexer && !lambdaArgContext) {\n                // past function keyword\n                this.currentToken = this.scanner.scan();\n                this.state = ParseState.StartFncDecl;\n                if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToID(this.currentToken, this.strictMode))) {\n                    if (isDecl) {\n                        this.reportParseError("Function declaration must include identifier");\n\n                        this.nestingLevel = prevNestingLevel;\n                        return new IncompleteAST(fnMin, this.scanner.pos);\n                    }\n                }\n                else {\n                    name = Identifier.fromToken(this.currentToken);\n                    name.minChar = this.scanner.startPos;\n                    name.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n            else {\n                if (methodName) {\n                    name = methodName;\n                }\n            }\n\n            this.state = ParseState.FncDeclName;\n            var args: ASTList = new ASTList();\n            var variableArgList = false;\n            var isOverload = false;\n            var isGetter = hasFlag(modifiers, Modifiers.Getter);\n            var isSetter = hasFlag(modifiers, Modifiers.Setter);\n            if ((this.currentToken.tokenId == TokenID.OpenParen) || (indexer && (this.currentToken.tokenId == TokenID.OpenBracket)) || (lambdaArgContext && (lambdaArgContext.preProcessedLambdaArgs || this.currentToken.tokenId == TokenID.DotDotDot))) {\n                // arg list\n                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, false, requiresSignature, indexer, isGetter, isSetter, isLambda, lambdaArgContext ? lambdaArgContext.preProcessedLambdaArgs : null, expectClosingRParen);\n            }\n            this.state = ParseState.FncDeclArgs;\n            var returnType: AST = null;\n            if (this.currentToken.tokenId == TokenID.Colon) {\n                this.currentToken = this.scanner.scan();\n                if (hasFlag(modifiers, Modifiers.Setter)) {\n                    this.reportParseError("Property setters may not declare a return type");\n                }\n                returnType = this.parseTypeReference(errorRecoverySet, true);\n            }\n\n            if (indexer && args.members.length == 0) {\n                this.reportParseError("Index signatures require a parameter type to be specified");\n            }\n            this.state = ParseState.FncDeclReturnType;\n\n            if (isLambda && this.currentToken.tokenId != TokenID.EqualsGreaterThan) {\n                this.reportParseError("Expected \'=>\'");\n            }\n\n            // REVIEW:\n            // Currently, it\'s imperative that ambient functions *not* be marked as overloads.  At some point, we may\n            // want to unify the two concepts internally\n            if (isDecl && !(this.parsingDeclareFile || markedAsAmbient) && (!isMethod || !(this.ambientModule || this.ambientClass || this.inInterfaceDecl)) && this.currentToken.tokenId == TokenID.Semicolon) {\n                isOverload = true;\n                isDecl = false;\n                requiresSignature = true;\n            }\n            var svInFncDecl = this.inFncDecl;\n            this.inFncDecl = true;\n            var funcDecl: FuncDecl =\n                this.parseFunctionStatements(\n                errorRecoverySet | ErrorRecoverySet.RCurly,\n                name, /*isConstructor:*/ false, isMethod, args, AllowedElements.None,\n                minChar, requiresSignature, Modifiers.None);\n\n            this.inFncDecl = svInFncDecl;\n            funcDecl.variableArgList = variableArgList;\n            funcDecl.isOverload = isOverload;\n\n            if (!requiresSignature) { // REVIEW: What\'s the point of this?  Why not just use \'Signature\' instead of \'Definition\'?\n                funcDecl.fncFlags |= FncFlags.Definition;\n            }\n\n            if (isStatic) {\n                funcDecl.fncFlags |= FncFlags.Static;\n            }\n\n            if (requiresSignature) {\n                funcDecl.fncFlags |= FncFlags.Signature;\n            }\n            if (indexer) {\n                funcDecl.fncFlags |= FncFlags.IndexerMember;\n            }\n            funcDecl.returnTypeAnnotation = returnType;';
var v27277 = v27278 + '\n            if (isMethod) {\n                funcDecl.fncFlags |= FncFlags.Method;\n                // all class property methods are currently exported\n                funcDecl.fncFlags |= FncFlags.ClassPropertyMethodExported;\n            }\n            funcDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            funcDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n\n            this.nestingLevel = prevNestingLevel;\n            this.parsingClassConstructorDefinition = prevInConstr;\n            funcDecl.preComments = preComments;\n            return funcDecl;\n        }\n\n        private convertToTypeReference(ast: AST): TypeReference {\n            var result: TypeReference;\n            switch (ast.nodeType) {\n                case NodeType.TypeRef:\n                    return <TypeReference>ast;\n                case NodeType.Name:\n                    result = new TypeReference(ast, 0);\n                    result.minChar = ast.minChar;\n                    result.limChar = ast.limChar;\n                    return result;\n                case NodeType.Index: {\n                    var expr = <BinaryExpression>ast;\n                    result = this.convertToTypeReference(expr.operand1);\n                    if (result) {\n                        result.arrayCount++;\n                        result.minChar = expr.minChar;\n                        result.limChar = expr.limChar;\n                        return result;\n                    }\n                    else {\n                        var etr = <TypeReference>new AST(NodeType.Error);\n                        return etr;\n                    }\n                }\n            }\n            return null;\n        }\n\n        private parseArgList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var args: ASTList = new ASTList();\n            args.minChar = this.scanner.startPos;\n\n            // skip left paren\n            this.currentToken = this.scanner.scan();\n\n            if (this.currentToken.tokenId !== TokenID.CloseParen) {\n                while (true) {\n                    if (args.members.length > 0xffff) {\n                        this.reportParseError("max number of args exceeded");\n                        break;\n                    }\n\n                    var arg = this.parseExpr(\n                        ErrorRecoverySet.Comma | errorRecoverySet,\n                        OperatorPrecedence.Comma, \n                        /*allowIn:*/ true,\n                        TypeContext.NoTypes);\n\n                    args.append(arg);\n                    if (this.currentToken.tokenId != TokenID.Comma) {\n                        break;\n                    }\n\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n\n            args.limChar = this.scanner.pos;\n            return args;\n        }\n\n        private parseBaseList(extendsList: ASTList,\n                              implementsList: ASTList,\n                              errorRecoverySet: ErrorRecoverySet,\n                              isClass: bool): void {\n            var keyword = true;\n            var currentList = extendsList;\n            for (; ;) {\n                if (keyword) {\n                    if (this.currentToken.tokenId === TokenID.Implements) {\n                        currentList = implementsList;\n                    }\n                    else if (this.currentToken.tokenId == TokenID.Extends && !this.requiresExtendsBlock) {\n                        this.requiresExtendsBlock = isClass;\n                    }\n                    this.currentToken = this.scanner.scan();\n                    keyword = false;\n                }\n                var baseName: Identifier = null;\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                    var minChar = this.scanner.startPos;\n                    baseName = Identifier.fromToken(this.currentToken);\n                    baseName.minChar = minChar;\n                    baseName.limChar = this.scanner.pos;\n                    baseName = <Identifier>this.parseNamedType(errorRecoverySet | ErrorRecoverySet.LCurly,\n                                            minChar, baseName, false);\n                }\n                else {\n                    this.reportParseError("Expected base name");\n                    if (this.errorRecovery) {\n                        baseName = new MissingIdentifier();\n                        baseName.minChar = this.scanner.pos;\n                        baseName.limChar = this.scanner.pos;\n                        baseName.flags |= ASTFlags.Error;\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.OpenParen) {\n                    if (isClass) {\n                        this.reportParseError("Base classes may only be initialized via a \'super\' call within the constructor body");\n                    }\n                    else {\n                        th';
var v27276 = v27277 + 'is.reportParseError("Interfaces may not be extended with a call expression");\n                    }\n                }\n                else {\n                    currentList.append(baseName);\n                }\n\n                if (isClass && currentList == extendsList && extendsList.members.length > 1) {\n                    this.reportParseError("A class may only extend one other class");\n                }\n\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    this.currentToken = this.scanner.scan();\n                    continue;\n                }\n\n                else if ((this.currentToken.tokenId == TokenID.Extends) ||\n                         (this.currentToken.tokenId == TokenID.Implements)) {\n\n                    if (this.currentToken.tokenId == TokenID.Extends && !this.requiresExtendsBlock) {\n                        this.requiresExtendsBlock = isClass;\n                    }\n\n                    currentList = extendsList;\n                    keyword = true;\n                    continue;\n                }\n\n                break;\n            }\n        }\n\n        private parseClassDecl(errorRecoverySet: ErrorRecoverySet, minChar: number, modifiers: Modifiers): ClassDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            if ((modifiers & Modifiers.Readonly) != Modifiers.None) {\n                this.reportParseError("const modifier is implicit for class");\n            }\n\n            // mark the class as ambient, as necessary\n            if (this.parsingDeclareFile || this.ambientModule) {\n                modifiers |= Modifiers.Ambient;\n                modifiers |= Modifiers.Exported;\n            }\n            var classIsMarkedAsAmbient = this.parsingDeclareFile || (modifiers & Modifiers.Ambient) != Modifiers.None;\n            var svAmbientClass = this.ambientClass;\n            this.ambientClass = classIsMarkedAsAmbient;\n\n            // grab the class\'s name\n            this.currentToken = this.scanner.scan();\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode)) ) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("class missing name");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.pos;\n                    name.limChar = this.scanner.pos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var extendsList: ASTList = null;\n            var implementsList: ASTList = null;\n            var requiresSignature = false;\n\n            if ((this.currentToken.tokenId == TokenID.Extends) ||\n                (this.currentToken.tokenId == TokenID.Implements)) {\n                extendsList = new ASTList();\n                implementsList = new ASTList();\n                this.parseBaseList(extendsList, implementsList, errorRecoverySet, /*isClass:*/ true);\n            }\n\n            // REVIEW: Note that we don\'t set this as the current class decl\n            var classDecl = new ClassDeclaration(name, new ASTList(), extendsList, implementsList);\n\n            this.currentClassDefinition = classDecl;\n\n            // parse the classes members\n            this.parseClassElements(classDecl, errorRecoverySet, modifiers);\n\n            if (this.ambientModule || this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Exported)) {\n                classDecl.varFlags |= VarFlags.Exported;\n            }\n\n            if (this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                classDecl.varFlags |= VarFlags.Ambient;\n            }\n\n            classDecl.varFlags |= VarFlags.Class;\n\n            this.ambientClass = svAmbientClass;\n            classDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            classDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return classDecl;\n        }\n\n        private parseClassElements(classDecl: ClassDeclaration, errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers) {\n            var modifiers = parentModifiers;\n            var resetModifiers = false;\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet);\n\n            this.nestingLevel++;\n\n            var currentMemberMinChar = this.scanner.startPos;\n            var wasGetOrSetId = false;\n\n            while (!(this.currentToken.tokenId == TokenID.CloseBrace || this.currentToken.tokenId == TokenID.EndOfFile)) {\n                var scanNext = true;';
var v27275 = v27276 + '\n                var publicOrPrivateFlags = Modifiers.Public | Modifiers.Private;\n\n                // modifiers\n                if (this.currentToken.tokenId == TokenID.Get) {\n                    if (modifiers & Modifiers.Getter) {\n                        this.reportParseError("Duplicate \'get\' declaration in class body");\n                    }\n                    if (modifiers & Modifiers.Setter) {\n                        this.reportParseError("Getter already marked as a setter");\n                    }\n                    modifiers |= Modifiers.Getter;\n                }\n                else if (this.currentToken.tokenId == TokenID.Set) {\n                    if (modifiers & Modifiers.Setter) {\n                        this.reportParseError("Duplicate \'set\' declaration in class body");\n                    }\n                    if (modifiers & Modifiers.Getter) {\n                        this.reportParseError("Setter already marked as a getter");\n                    }\n                    modifiers |= Modifiers.Setter;\n\n                }\n                else if (this.currentToken.tokenId == TokenID.Private) {\n                    if (modifiers & publicOrPrivateFlags) {\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Private;\n                }\n                else if (this.currentToken.tokenId == TokenID.Public) {\n                    if (modifiers & publicOrPrivateFlags) {\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Public;\n                }\n                else if (this.currentToken.tokenId == TokenID.Static) {\n                    if (modifiers & Modifiers.Static) { // only check for double instances of static\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Static;\n                }  // constructors\n                else if (this.currentToken.tokenId == TokenID.Constructor) {\n\n                    if (modifiers != parentModifiers) {\n                        this.reportParseError("Constructors may not have modifiers");\n                    }\n\n                    this.parseClassConstructorDeclaration(currentMemberMinChar, errorRecoverySet, modifiers);\n                    scanNext = false; // parsing functions advances the token for us\n                    resetModifiers = true;\n                }  // member declarations\n                else if (wasGetOrSetId || this.currentToken.tokenId == TokenID.Identifier || convertTokToIDName(this.currentToken)) {\n\n                    var idText = wasGetOrSetId ? ((modifiers & Modifiers.Getter) ? "get" : "set") : this.currentToken.getText();\n                    var id = wasGetOrSetId ? new Identifier(idText) : Identifier.fromToken(this.currentToken);\n                    id.minChar = this.scanner.startPos;\n                    id.limChar = this.scanner.pos;\n\n                    // unset the get/set bit, if we\'re using it for an id\n                    if (wasGetOrSetId) {\n                        modifiers = modifiers ^ ((modifiers & Modifiers.Getter) ? Modifiers.Getter : Modifiers.Setter);\n                        wasGetOrSetId = false;\n                    }\n                    else {\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        this.parseClassMemberFunctionDeclaration(id, currentMemberMinChar, errorRecoverySet, modifiers);\n                        scanNext = false; // parsing functions advances the token for us\n                    }\n                    else {\n                        if (modifiers & Modifiers.Getter || modifiers & Modifiers.Setter) {\n                            this.reportParseError("Property accessors must be functions");\n                        }\n\n                        var varDecl = this.parseClassMemberVariableDeclaration(id, currentMemberMinChar, false, errorRecoverySet, modifiers);\n\n                        if (varDecl.init && varDecl.init.nodeType == NodeType.FuncDecl) {\n                            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                                scanNext = false;\n                            }\n                        }\n                        else if (varDecl.init && varDecl.init.nodeType == NodeType.ObjectLit && this.currentToken.tokenId != TokenID.Semicolon) {\n                            scanNext = false;\n                            varDecl.init.flags |= ASTFlags.AutomaticSemicolon;\n                        }\n                        else if (this.currentToken.tokenId != TokenID.Semicolon) {\n                            this.reportParseError("Expected \';\'");\n                            scanNext = false;\n                        }';
var v27274 = v27275 + "\n                    }\n\n                    resetModifiers = true;\n                } // catch errant uses of 'super'\n                else if (this.currentToken.tokenId == TokenID.Super) {\n                    this.reportParseError(\"Base class initializers must be the first statement in a class definition\");\n                }\n                else if (!wasGetOrSetId && ((modifiers & Modifiers.Getter) || (modifiers & Modifiers.Setter)) &&\n                         ((this.currentToken.tokenId == TokenID.OpenParen) || (this.currentToken.tokenId == TokenID.Equals) ||\n                          (this.currentToken.tokenId == TokenID.Colon) || (this.currentToken.tokenId == TokenID.Semicolon))) {\n                             // catch a 'get' or 'set' used as an identifier\n                    wasGetOrSetId = true;\n                    scanNext = false;\n\n                }  // mark anything else as an error\n                else if (this.currentToken.tokenId != TokenID.Semicolon) { // jettison semicolons\n                    this.reportParseError(\"Unexpected '\" + this.currentToken.getText() + \"' in class definition\");\n                    resetModifiers = true;\n                }\n\n                if (scanNext) {\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (resetModifiers) {\n                    modifiers = parentModifiers;\n                    currentMemberMinChar = this.scanner.startPos;\n                    resetModifiers = false;\n                }\n            }\n\n            var membersLimChar = this.scanner.pos;\n            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                classDecl.endingToken = new ASTSpan();\n                classDecl.endingToken.minChar = this.scanner.startPos;\n                classDecl.endingToken.limChar = this.scanner.pos;\n\n                // for a class with an empty body, consume any 'dangling' inner comments\n                if (!this.currentClassDefinition.members.members.length) {\n                    this.currentClassDefinition.preComments = this.parseComments();\n                }\n\n                this.currentToken = this.scanner.scan();\n            }\n\n            this.nestingLevel--;\n\n            this.currentClassDefinition.members.minChar = membersMinChar;\n            this.currentClassDefinition.members.limChar = membersLimChar;\n            this.currentClassDefinition.limChar = membersLimChar;\n            this.currentClassDefinition = null;\n        }\n\n        private parseClassConstructorDeclaration(minChar: number, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n            this.parsingClassConstructorDefinition = true;\n\n            var isAmbient = this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient);\n\n            var args: ASTList = new ASTList();\n            var variableArgList = false;\n            var preComments = this.parseComments();\n\n            this.currentToken = this.scanner.scan(); // scan past the 'constructor' token\n\n            if (this.currentToken.tokenId == TokenID.OpenParen) {\n                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, true, isAmbient, false, false, false, false, null, true);\n                if (args.members.length > 0) {\n                    var lastArg = args.members[args.members.length - 1];\n                }\n            }\n\n            var requiresSignature = isAmbient || this.currentToken.tokenId == TokenID.Semicolon;\n\n\n            if (requiresSignature) {\n                for (var i = 0; i < args.members.length; i++) {\n                    var arg = <ArgDecl> args.members[i];\n                    if (hasFlag(arg.varFlags, VarFlags.Property)) {\n                        this.reportParseError(\"Overload or ambient signatures may not specify parameter properties\", arg.minChar, arg.limChar);\n                    }\n                }\n            }\n\n            if (!requiresSignature) {\n                this.currentClassDefinition.constructorNestingLevel = this.nestingLevel + 1;\n            }\n\n            var constructorFuncDecl = this.parseFunctionStatements(\n                errorRecoverySet | ErrorRecoverySet.RCurly, this.currentClassDefinition.name, \n                /*isConstructor:*/ true, /*isMethod:*/ false, args, AllowedElements.Properties, \n                minChar, requiresSignature, modifiers);\n\n            constructorFuncDecl.preComments = preComments;\n\n            if (requiresSignature && !isAmbient) {\n                constructorFuncDecl.isOverload = true;\n            }\n\n            constructorFuncDecl.variableArgList = variableArgList;\n            this.currentClassDecl = null;\n            constructorFuncDecl.returnTypeAnnotation = this.convertToTypeReference(this.currentClassDefinition.name);\n            constructorFuncDecl.classDecl = this.currentClassDefinition;\n\n            if (isAmbient) {\n                constructorFuncDecl.fncFlags |= FncFlags.Ambient;\n            }\n\n            if (requiresSignature) {\n                constructorF";
var v27273 = v27274 + 'uncDecl.fncFlags |= FncFlags.Signature;\n            }\n\n            if (this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                constructorFuncDecl.fncFlags |= FncFlags.Exported;\n            }\n\n\n            if (this.currentClassDefinition.constructorDecl) {\n                if (!isAmbient && !this.currentClassDefinition.constructorDecl.isSignature() && !constructorFuncDecl.isSignature()) {\n                    this.reportParseError("Duplicate constructor definition");\n                }\n            }\n\n            if (isAmbient || !constructorFuncDecl.isSignature()) {\n                this.currentClassDefinition.constructorDecl = constructorFuncDecl;\n            }\n\n            // REVIEW: Should we have a separate flag for class constructors?  (Constructors are not methods)\n            constructorFuncDecl.fncFlags |= FncFlags.ClassMethod;\n\n            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = constructorFuncDecl;\n\n            this.parsingClassConstructorDefinition = false;\n\n            return constructorFuncDecl;\n        }\n\n        private parseClassMemberVariableDeclaration(text: Identifier, minChar: number, isDeclaredInConstructor: bool, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n\n            var varDecl = new VarDecl(text, this.nestingLevel);\n            varDecl.minChar = minChar;\n            var isStatic = false;\n            varDecl.preComments = this.parseComments();\n\n            if (this.currentToken.tokenId == TokenID.Colon) {\n                this.currentToken = this.scanner.scan();\n                varDecl.typeExpr =\n                    this.parseTypeReference(errorRecoverySet | ErrorRecoverySet.Asg | ErrorRecoverySet.Comma, false);\n                if (varDecl.typeExpr && varDecl.typeExpr.nodeType == NodeType.TypeRef) {\n                    var typeExpr = (<TypeReference>varDecl.typeExpr);\n                    if (typeExpr.term && typeExpr.term.nodeType == NodeType.FuncDecl) {\n                        typeExpr.term.preComments = varDecl.preComments;\n                    }\n                }\n            }\n\n            if (this.currentToken.tokenId == TokenID.Equals) {\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    this.reportParseError("context does not permit variable initializer");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        varDecl.flags |= ASTFlags.Error;\n                        varDecl.limChar = this.scanner.lastTokenLimChar();\n                        return varDecl;\n                    }\n                }\n\n                // TODO: note assignment for language service\n                this.currentToken = this.scanner.scan();\n\n                varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                        OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n\n                varDecl.limChar = varDecl.init.limChar;\n\n                // member initializers on instance properties require that super be invoked as the first call within the constructor\n                if (!(modifiers & Modifiers.Static)) {\n                    this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                }\n            }\n            else {\n                varDecl.limChar = this.scanner.pos;\n            }\n\n            if (modifiers & Modifiers.Static) {\n                varDecl.varFlags |= VarFlags.Static;\n                isStatic = true;\n            }\n\n            if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                varDecl.varFlags |= VarFlags.Private;\n            }\n            else {\n                varDecl.varFlags |= VarFlags.Public;\n            }\n\n            varDecl.varFlags |= VarFlags.Property;\n\n            if (isDeclaredInConstructor) {\n                varDecl.varFlags |= VarFlags.ClassConstructorProperty;\n            }\n\n            if (!isDeclaredInConstructor && !isStatic) {\n                varDecl.varFlags |= VarFlags.ClassBodyProperty;\n            }\n\n            this.currentClassDefinition.knownMemberNames[text.actualText] = true;\n\n            if (!isDeclaredInConstructor) {\n                this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = varDecl;\n            }\n\n            varDecl.postComments = this.parseComments();\n            return varDecl;\n        }\n\n        private parseClassMemberFunctionDeclaration(methodName: Identifier, minChar: number, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n            var wasAccessorID = this.prevIDTok != null;\n            var isAccessor = hasFlag(modifiers, Modifiers.Getter) || hasFlag(modifiers, Modifiers.Setter);\n            var isStatic = hasFlag(modifiers, Modifiers.Static);\n\n            var isAmbient = this.ambientModule || hasFlag(modifiers, Modifiers.Ambient);\n\n            er';
var v27272 = v27273 + 'rorRecoverySet |= ErrorRecoverySet.RParen;\n\n            if (isAccessor && (modifiers & Modifiers.Ambient)) {\n                this.reportParseError("Property accessors may not be declared in ambient classes");\n            }\n\n            // REVIEW: Why bother passing in isAmbient for both requiresSignature and isAmbient?  Shouldn\'t just saying its ambient suffice?\n            var ast: AST = this.parseFncDecl(errorRecoverySet, true, isAmbient, true, methodName, false, isStatic, isAmbient, modifiers, null, true);\n            if (ast.nodeType == NodeType.Error) {\n                return ast;\n            }\n\n            var funcDecl = <FuncDecl>ast;\n\n            funcDecl.minChar = minChar;\n            if (funcDecl.bod !== null)\n                funcDecl.limChar = funcDecl.bod.limChar;\n\n            if (modifiers & Modifiers.Private) {\n                funcDecl.fncFlags |= FncFlags.Private;\n            }\n            else {\n                funcDecl.fncFlags |= FncFlags.Public;\n            }\n\n            if (isStatic) {\n                funcDecl.fncFlags |= FncFlags.Static;\n            }\n\n            if (isAccessor) {\n                // REVIEW: verify return-type annotations and arguments\n                if (hasFlag(modifiers, Modifiers.Getter)) {\n                    funcDecl.fncFlags |= FncFlags.GetAccessor;\n                    funcDecl.hint = "get" + funcDecl.name.actualText;\n                }\n                else {\n                    funcDecl.fncFlags |= FncFlags.SetAccessor;\n                    funcDecl.hint = "set" + funcDecl.name.actualText;\n                }\n                funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n                if (codeGenTarget < CodeGenTarget.ES5) {\n                    this.reportParseError("Property accessors are only available when targeting ES5 or greater", funcDecl.minChar, funcDecl.limChar);\n                }\n            }\n\n            funcDecl.fncFlags |= FncFlags.ClassMethod;\n\n            this.currentClassDefinition.knownMemberNames[methodName.actualText] = true;\n\n            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = funcDecl;\n\n            return funcDecl;\n        }\n\n        private parseTypeMember(errorRecoverySet: ErrorRecoverySet): AST {\n            var minChar = this.scanner.startPos;\n\n            var propertyDecl = this.parsePropertyDeclaration(\n                errorRecoverySet, Modifiers.Public, /*requireSignature:*/ true, /*isStatic:*/ false);\n\n            if (propertyDecl) {\n                propertyDecl.minChar = minChar;\n\n                if (propertyDecl.nodeType == NodeType.VarDecl) {\n                     this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet);\n                }\n            }\n\n            return propertyDecl;\n        }\n\n        private parseTypeMemberList(errorRecoverySet: ErrorRecoverySet, members: ASTList) {\n            errorRecoverySet |= ErrorRecoverySet.TypeScriptS;\n            while (true) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.CloseBrace:\n                    case TokenID.EndOfFile:\n                        members.limChar = this.scanner.pos;\n                        return;\n                }\n\n                // REVIEW: This code looks suspect.  If parseTypeMember returns null, then \n                // won\'t we just infinite loop?\n                var element = this.parseTypeMember(errorRecoverySet);\n                if (element) {\n                    members.append(element);\n                }\n            }\n        }\n\n        private parseInterfaceDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): InterfaceDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            this.currentToken = this.scanner.scan();\n            var minChar = this.scanner.pos;\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode))) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("interface missing name");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.pos;\n                    name.limChar = this.scanner.pos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var extendsList: ASTList = null;\n            var implementsList: ASTList = null;\n            if (this.currentToken.tokenId === TokenID.Extends || this.currentToken.tokenId === TokenID.Implements) {\n                if (this.currentToken.tokenId === TokenID.Implements) {\n            ';
var v27271 = v27272 + '        this.reportParseError("Expected \'extends\'");\n                }\n\n                extendsList = new ASTList();\n                implementsList = new ASTList();\n                extendsList.minChar = this.scanner.startPos;\n                this.parseBaseList(extendsList, implementsList, errorRecoverySet, /*isClass:*/ false);\n            }\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.TypeScriptS);\n            var members = new ASTList();\n            members.minChar = membersMinChar;\n            var prevInInterfaceDecl = this.inInterfaceDecl;\n            this.inInterfaceDecl = true;\n            this.parseTypeMemberList(errorRecoverySet | ErrorRecoverySet.RCurly, members);\n            this.inInterfaceDecl = prevInInterfaceDecl;\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            // REVIEW: According to the grammar, an interface declaration should actually just\n            // have an \'ObjectType\' and not a list of members.  We may want to consider making that\n            // change.  Note: it would mean breaking aparat TypeDecl into InterfaceDeclaration and \n            // ClassDeclaration.\n            var interfaceDecl = new InterfaceDeclaration(name, members, extendsList, null);\n            if (hasFlag(modifiers, Modifiers.Private)) {\n                interfaceDecl.varFlags |= VarFlags.Private;\n            }\n            if (hasFlag(modifiers, Modifiers.Public)) {\n                interfaceDecl.varFlags |= VarFlags.Public;\n            }\n            if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                interfaceDecl.varFlags |= VarFlags.Exported;\n            }\n\n            interfaceDecl.limChar = members.limChar;\n            interfaceDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            interfaceDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return interfaceDecl;\n        }\n\n        private makeVarDecl(id: Identifier, nest: number): VarDecl {\n            var varDecl = new VarDecl(id, nest);\n            var currentVarList = this.topVarList();\n            if (currentVarList) {\n                currentVarList.append(varDecl);\n            }\n            return varDecl;\n        }\n\n        private parsePropertyDeclaration(\n            errorRecoverySet: ErrorRecoverySet,\n            modifiers: Modifiers,\n            requireSignature: bool,\n            isStatic: bool): AST {\n\n            var text: Identifier = null;\n            var minChar = this.scanner.startPos;\n            var nameLimChar = minChar;\n            var isNew = false;\n            var isIndexer = false;\n            var wasAccessorID = this.prevIDTok != null;\n            var isAccessor = hasFlag(modifiers, Modifiers.Getter) || hasFlag(modifiers, Modifiers.Setter);\n\n            if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                requireSignature = true;\n            }\n\n            if (this.currentToken.tokenId == TokenID.OpenParen && !wasAccessorID) {\n                if (!requireSignature && !isStatic) {\n                    this.reportParseError("Expected identifier in property declaration");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        //REVIEW: Use something else than "Identifier"?\n                        text = new MissingIdentifier();\n                    }\n                }\n            }\n            else if (this.currentToken.tokenId == TokenID.New) {\n                if (requireSignature) {\n                    this.currentToken = this.scanner.scan();\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        isNew = true;\n                    }\n                }\n\n                if (!isNew) {\n                    // is identifier\n                    if (!requireSignature) {\n                        this.currentToken = this.scanner.scan();\n                    }\n                    text = new Identifier("new");\n                    text.minChar = this.scanner.pos - 3;\n                    text.limChar = this.scanner.pos;\n                    nameLimChar = this.scanner.pos;\n                }\n            }\n            else if ((this.currentToken.tokenId == TokenID.OpenBracket) && requireSignature) {\n                // indexer signature\n                isIndexer = true;\n                //REVIEW: Should we use a special "compiler reserved" identifier node?\n                text = new Identifier("__item");\n            }\n            else if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToIDName(this.currentToken)) && !wasAccessorID) {\n                this.reportParseError("Expected identifier in property declaration");\n                if (this.errorRecovery) {\n                    var eminChar = this.scanner.startPos;\n             ';
var v27270 = v27271 + '       var curpos = this.scanner.pos;\n                    this.skip(errorRecoverySet & (~ErrorRecoverySet.Comma));\n                    if (this.scanner.pos == curpos) {\n                        // ensure progress\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    var epd = new VarDecl(new MissingIdentifier(), this.nestingLevel);\n                    epd.flags |= ASTFlags.Error;\n                    epd.minChar = eminChar;\n                    epd.limChar = this.scanner.lastTokenLimChar();\n                    return epd;\n                }\n            }\n            else {\n                if (wasAccessorID) {\n                    text = Identifier.fromToken(this.prevIDTok);\n                    text.minChar = this.scanner.lastTokenLimChar() - 3;\n                    text.limChar = this.scanner.lastTokenLimChar();\n                    nameLimChar = text.limChar;\n\n                    if (codeGenTarget < CodeGenTarget.ES5) {\n                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                    }\n\n                    // this block guards against \'get\' and \'set\' tokens that\n                    // were coerced into identifiers\n                    if (this.currentToken.getText() == text.actualText && this.currentToken != this.prevIDTok) {\n                        this.currentToken = this.scanner.scan();\n                    } // Otherwise, don\'t update the token - we\'re already at \'(\'\n\n                    // reset the previous ID Token\n                    this.prevIDTok = null;\n                }\n                else {\n                    text = Identifier.fromToken(this.currentToken);\n                    text.minChar = this.scanner.startPos;\n                    text.limChar = this.scanner.pos;\n                    nameLimChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n\n            if (this.currentToken.tokenId == TokenID.Question) {\n                if (this.inInterfaceDecl && text) {\n                    text.flags |= ASTFlags.OptionalName;\n                }\n                else {\n                    this.reportParseError("Optional properties may only be declared on interface or object types");\n                }\n                this.currentToken = this.scanner.scan();\n            }\n\n            if ((this.currentToken.tokenId == TokenID.OpenParen) ||\n                (isIndexer && (this.currentToken.tokenId == TokenID.OpenBracket))) {\n                var ers = errorRecoverySet | ErrorRecoverySet.RParen;\n                if (isIndexer) {\n                    ers = errorRecoverySet | ErrorRecoverySet.RBrack;\n                }\n                var ast = this.parseFncDecl(ers, true, requireSignature,\n                                       !this.inFncDecl, text, isIndexer, isStatic, (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)), modifiers, null, true);\n                var funcDecl: FuncDecl;\n                if (ast.nodeType == NodeType.Error) {\n                    return ast;\n                }\n                else {\n                    funcDecl = <FuncDecl>ast;\n                }\n                if (funcDecl.name) {\n                    funcDecl.name.minChar = minChar;\n                    funcDecl.name.limChar = nameLimChar;\n                }\n                if ((modifiers & Modifiers.Public) != Modifiers.None) {\n                    funcDecl.fncFlags |= FncFlags.Public;\n                }\n                if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                    funcDecl.fncFlags |= FncFlags.Private;\n                }\n                if (isStatic) {\n                    funcDecl.fncFlags |= FncFlags.Static;\n                }\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    funcDecl.fncFlags |= FncFlags.Ambient;\n                }\n                if (isAccessor) {\n                    // REVIEW: verify return-type annotations and arguments\n                    if (hasFlag(modifiers, Modifiers.Getter)) {\n                        funcDecl.fncFlags |= FncFlags.GetAccessor;\n                        funcDecl.hint = "get" + funcDecl.name.actualText;\n                    }\n                    else {\n                        funcDecl.fncFlags |= FncFlags.SetAccessor;\n                        funcDecl.hint = "set" + funcDecl.name.actualText;\n                    }\n                    funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n\n                    if (modifiers & Modifiers.Ambient) {\n                        this.reportParseError("Property accessors may not be declared in ambient types");\n                    }\n                }\n\n                if (text == null) {\n                    if (isNew) {\n                        funcDecl.fncFlags |= FncFlags.ConstructMember;\n                        funcDecl.hint = "_construct";\n                        funcDecl.classDecl = thi';
var v27269 = v27270 + 's.currentClassDecl;\n                    }\n                    else {\n                        funcDecl.hint = "_call";\n                        funcDecl.fncFlags |= FncFlags.CallMember;\n                    }\n                }\n                return funcDecl;\n            }\n            else {\n                var varDecl = new VarDecl(text, this.nestingLevel);\n                varDecl.preComments = this.parseComments();\n                varDecl.minChar = minChar;\n                if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    varDecl.typeExpr =\n                        this.parseTypeReference(errorRecoverySet | ErrorRecoverySet.Asg |\n                                           ErrorRecoverySet.Comma, false);\n                    if (varDecl.typeExpr && varDecl.typeExpr.nodeType == NodeType.TypeRef) {\n                        var typeExpr = (<TypeReference>varDecl.typeExpr);\n                        if (typeExpr.term && typeExpr.term.nodeType == NodeType.FuncDecl) {\n                            typeExpr.term.preComments = varDecl.preComments;\n                        }\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    if (requireSignature) {\n                        this.reportParseError("context does not permit variable initializer");\n                        if (this.errorRecovery) {\n                            this.skip(errorRecoverySet);\n                            varDecl.flags |= ASTFlags.Error;\n                            varDecl.limChar = this.scanner.lastTokenLimChar();\n                            return varDecl;\n                        }\n                    }\n                    // TODO: note assignment for language service\n                    this.currentToken = this.scanner.scan();\n                    varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                           OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                    varDecl.limChar = varDecl.init.limChar;\n                    if (varDecl.init.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>varDecl.init;\n                        funcDecl.hint = varDecl.id.text;\n                        funcDecl.boundToProperty = varDecl;\n                    }\n                    else if (isAccessor) {\n                        this.reportParseError("Accessors may only be functions");\n                    }\n                }\n                else {\n                    varDecl.limChar = this.scanner.pos;\n                }\n                if ((modifiers & Modifiers.Readonly) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Readonly;\n                }\n                if (isStatic) {\n                    varDecl.varFlags |= VarFlags.Static;\n                }\n                if ((modifiers & Modifiers.Public) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Public;\n                }\n                if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Private;\n                }\n                varDecl.varFlags |= VarFlags.Property;\n                return varDecl;\n            }\n        }\n\n        private parseVariableDeclaration(\n            errorRecoverySet: ErrorRecoverySet,\n            modifiers: Modifiers,\n            allowIn: bool,\n            isStatic: bool): AST {\n\n            var isConst = hasFlag(modifiers, Modifiers.Readonly);\n            var minChar = this.scanner.startPos;\n            var varDecl: VarDecl = null;\n            var declList: ASTList = null;\n            var multivar = false;\n\n            this.currentToken = this.scanner.scan();\n            var varDeclPreComments = this.parseComments();\n\n            while (true) {\n                if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToID(this.currentToken, this.strictMode))) {\n                    this.reportParseError("Expected identifier in variable declaration");\n\n                    if (this.errorRecovery) {\n                        varDecl = new VarDecl(new MissingIdentifier(), this.nestingLevel);\n                        varDecl.minChar = minChar;\n                        this.skip(errorRecoverySet);\n                        varDecl.flags |= ASTFlags.Error;\n                        varDecl.limChar = this.scanner.lastTokenLimChar();\n                        return varDecl;\n                    }\n                }\n\n                var varDeclName = Identifier.fromToken(this.currentToken)\n                if (this.strictMode && (varDeclName.text == "eval")) {\n                    this.reportParseError("\'eval\' may not name a variable in strict mode");\n                }\n\n                varDecl = this.makeVarDecl(varDeclName, this.nestingLevel);\n                varDecl.id.minChar = this.scanner.startPos;\n                varDecl.id.limChar = this.scanner.pos;\n  ';
var v27268 = v27269 + '              varDecl.preComments = varDeclPreComments;\n\n                if (isStatic) {\n                    varDecl.varFlags |= VarFlags.Static;\n                }\n                if (hasFlag(modifiers, Modifiers.Readonly)) {\n                    varDecl.varFlags |= VarFlags.Readonly;\n                }\n                if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                    varDecl.varFlags |= VarFlags.Ambient;\n                }\n                if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                    varDecl.varFlags |= VarFlags.Exported;\n                }\n                varDecl.minChar = minChar;\n                if (declList) {\n                    declList.append(varDecl);\n                }\n\n                // move past ID; with error recovery need a test \n                this.currentToken = this.scanner.scan();\n                if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    var prevInFncDecl = this.inFncDecl;\n                    this.inFncDecl = false;\n                    varDecl.typeExpr = this.parseTypeReference(\n                        errorRecoverySet | ErrorRecoverySet.Asg | ErrorRecoverySet.Comma, /*allowVoid:*/ false);\n                    this.inFncDecl = prevInFncDecl;\n                }\n\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    if (hasFlag(varDecl.varFlags, VarFlags.Ambient)) {\n                        this.reportParseError("Ambient variable can not have an initializer");\n                    }\n                    // TODO: note assignment for language service\n                    this.currentToken = this.scanner.scan();\n                    varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                           OperatorPrecedence.Comma, allowIn,\n                                           TypeContext.NoTypes);\n                    varDecl.limChar = varDecl.init.limChar;\n                    if (varDecl.init.nodeType == NodeType.FuncDecl) {\n                        // TODO: use \'as\' operator when can bootstrap\n                        var funcDecl = <FuncDecl>varDecl.init;\n                        funcDecl.hint = varDecl.id.actualText;\n                    }\n                }\n                else {\n                    if (isConst) {\n                        this.reportParseError("const declaration requires initializer");\n                    }\n                    varDecl.limChar = this.scanner.pos;\n                }\n                varDecl.postComments = this.parseCommentsForLine(this.scanner.line);\n\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    if (declList) {\n                        declList.limChar = varDecl.limChar;\n                        return declList;\n                    }\n                    else {\n                        return varDecl;\n                    }\n                }\n\n                if (!multivar) {\n                    declList = new ASTList();\n                    declList.minChar = varDecl.minChar;\n                    declList.append(varDecl);\n                    multivar = true;\n                }\n\n                this.currentToken = this.scanner.scan();\n                minChar = this.scanner.startPos;\n            }\n        }\n\n        private parseMemberList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var elements = new ASTList();\n            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                return elements;\n            }\n\n            var idHint: string = null;\n            var memberName: AST = null;\n            var memberExpr: AST = null;\n            var member: BinaryExpression = null;\n            var minChar = this.scanner.startPos;\n            var isSet = false;\n            var skippedTokenForGetSetId = false;\n            var getSetTok: Token = null;\n            var getSetStartPos = 0;\n            var getSetPos = 0;\n\n            for (; ;) {\n                var accessorPattern = false;\n                if (this.currentToken.tokenId == TokenID.Get || this.currentToken.tokenId == TokenID.Set) {\n                    isSet = this.currentToken.tokenId == TokenID.Set;\n                    getSetTok = this.currentToken;\n                    getSetStartPos = this.scanner.startPos;\n                    getSetPos = this.scanner.pos;\n\n                    this.currentToken = this.scanner.scan();\n\n                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                        idHint = isSet ? "set" : "get";\n                        idHint = idHint + this.currentToken.getText();\n                        memberName = Identifier.fromToken(this.currentToken);\n                        memberName.minChar = this.scanner.startPos;\n                        accessorPattern = true;\n                   ';
var v27267 = v27268 + '     if (codeGenTarget < CodeGenTarget.ES5) {\n                            this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                        }\n                    }\n                    else if (this.currentToken.tokenId != TokenID.Colon) {\n                        this.reportParseError("Expected identifier, string or number as accessor name");\n                    }\n                    else {\n                        skippedTokenForGetSetId = true;\n                        memberName = Identifier.fromToken(getSetTok);\n                        memberName.minChar = getSetStartPos;\n                        memberName.limChar = getSetPos;\n                    }\n                }\n                else if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                    idHint = this.currentToken.getText();\n                    memberName = Identifier.fromToken(this.currentToken);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else if (this.currentToken.tokenId == TokenID.StringLiteral) {\n                    idHint = this.currentToken.getText();\n                    memberName = new StringLiteral(idHint);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                    // TODO: allow reserved words\n                else if (this.currentToken.tokenId == TokenID.NumberLiteral) {\n                    var ntok = <NumberLiteralToken>this.currentToken;\n                    idHint = ntok.value.toString();\n                    memberName = new StringLiteral(idHint);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else {\n                    this.reportParseError("Expected identifier, string or number as member name");\n                    if (this.errorRecovery) {\n                        memberName = new MissingIdentifier();\n                        memberName.minChar = this.scanner.startPos;\n                        memberName.flags |= ASTFlags.Error;\n                        this.skip(errorRecoverySet | ErrorRecoverySet.Comma);\n                        memberName.limChar = this.scanner.lastTokenLimChar();\n                    }\n                }\n\n                if (!skippedTokenForGetSetId) {\n                    this.currentToken = this.scanner.scan();\n                }\n                else {\n                    skippedTokenForGetSetId = false;\n                }\n\n                if (this.currentToken.tokenId == TokenID.Question) {\n                    memberName.flags |= ASTFlags.OptionalName;\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (accessorPattern) {\n                    var args = new ASTList();\n                    this.parseFormalParameterList(errorRecoverySet | ErrorRecoverySet.RParen,\n                                      args, false, true, false, !isSet, isSet, false, null, true);\n\n                    var funcDecl: FuncDecl =\n                        this.parseFunctionStatements(errorRecoverySet | ErrorRecoverySet.RCurly,\n                                                <Identifier>memberName, false, true, args,\n                                                AllowedElements.None,\n                                                this.scanner.startPos, false, Modifiers.None);\n\n                    if (isSet && funcDecl.returnTypeAnnotation) {\n                        this.reportParseError("Property setters may not declare a return type");\n                    }\n\n                    funcDecl.fncFlags |= isSet ? FncFlags.SetAccessor : FncFlags.GetAccessor;\n                    funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n                    funcDecl.hint = idHint;\n                    memberExpr = funcDecl;\n                    member = new BinaryExpression(NodeType.Member, memberName, memberExpr);\n                    member.minChar = memberName.minChar;\n                    if (memberExpr.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>memberExpr;\n                        funcDecl.hint = idHint;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    memberExpr = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                         OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                    // If the memberExpr is a type reference, we can be certain that it was an\n                    // array type declaraion that lacked a "new".  We can realistically only\n                    // expect call and name ASTs to be the result of this call to parseExpr.\n                   ';
var v27266 = v27267 + " // If it's a constructor without a \"new\", we'll flag it as an invalid\n                    // call site later on.\n                    if (memberExpr.nodeType == NodeType.TypeRef) {\n                        this.reportParseError(\"Expected 'new' on array declaration in member definition\")\n                    }\n                    member = new BinaryExpression(NodeType.Member, memberName, memberExpr);\n                    member.minChar = memberName.minChar;\n                    if (memberExpr.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>memberExpr;\n                        funcDecl.hint = idHint;\n                    }\n                }\n                else {\n                    this.reportParseError(\"Expected ':' in member definition\");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        elements.flags |= ASTFlags.Error;\n                        elements.minChar = minChar;\n                        elements.limChar = this.scanner.lastTokenLimChar();\n                        return elements;\n                    }\n                }\n                idHint = null;\n                elements.append(member);\n                member.limChar = this.scanner.lastTokenLimChar();\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    break;\n                }\n                else {\n                    // munch comma\n                    this.currentToken = this.scanner.scan();\n                }\n\n                // trailing comma allowed\n                if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    break;\n                }\n            }\n\n            if (member) {\n                elements.limChar = member.limChar;\n            }\n            elements.minChar = minChar;\n            return elements;\n        }\n\n        private parseArrayList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var elements: ASTList = null;\n            if (this.currentToken.tokenId == TokenID.CloseBracket) {\n                return elements;\n            }\n            else {\n                elements = new ASTList();\n                elements.minChar = this.scanner.startPos;\n            }\n\n            var arg: AST;\n\n            for (; ;) {\n                if ((this.currentToken.tokenId == TokenID.Comma) ||\n                    (this.currentToken.tokenId == TokenID.CloseBracket)) {\n                    arg = new AST(NodeType.EmptyExpr);\n                }\n                else {\n                    arg = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                  OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                }\n                elements.append(arg);\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    break;\n                }\n                this.currentToken = this.scanner.scan();\n            }\n            elements.limChar = this.scanner.lastTokenLimChar();\n            return elements;\n        }\n\n        private parseArrayLiteral(errorRecoverySet: ErrorRecoverySet): UnaryExpression {\n            var arrayLiteral: UnaryExpression = null;\n            arrayLiteral = new UnaryExpression(NodeType.ArrayLit,\n                                             this.parseArrayList(errorRecoverySet));\n            return arrayLiteral;\n        }\n\n        private parseTerm(errorRecoverySet: ErrorRecoverySet, allowCall: bool, typeContext: TypeContext, inCast: bool): AST {\n            var ast: AST = null;\n            var sawId = false;\n            var inNew = false;\n            var minChar = this.scanner.startPos;\n            var limChar = this.scanner.pos;\n            var parseAsLambda = false;\n            var expectlambdaRParen = false;\n\n            // keywords first\n            switch (this.currentToken.tokenId) {\n                case TokenID.Number:\n                case TokenID.Bool:\n                case TokenID.Any:\n                case TokenID.String:\n                    var tid = new Identifier(tokenTable[this.currentToken.tokenId].text);\n                    if (hasFlag(typeContext, TypeContext.Primitive)) {\n                        ast = new TypeReference(tid, 0);\n                        sawId = true;\n                    }\n                    else {\n                        ast = tid;\n                        sawId = true;\n                    }\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.This:\n                    ast = new AST(NodeType.This);\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.Super:\n                    ast = new AST(NodeType.Super);\n                    ast.minChar =";
var v27265 = v27266 + " minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.True:\n                    ast = new AST(NodeType.True);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.False:\n                    ast = new AST(NodeType.False);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.Null:\n                    ast = new AST(NodeType.Null);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.New:\n                    minChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    var target = this.parseTerm(errorRecoverySet, false, TypeContext.AllSimpleTypes, inCast);\n\n                    if (target.nodeType == NodeType.Error || (target.nodeType == NodeType.Index && (<BinaryExpression>target).operand1.nodeType == NodeType.TypeRef)) {\n                        this.reportParseError(\"Cannot invoke 'new' on this expression\");\n                    } else {\n                        ast = new CallExpression(NodeType.New, target, null);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        inNew = true;\n                    }\n                    break;\n                case TokenID.Function:\n                    minChar = this.scanner.pos;\n                    ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, null, true);\n                    (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n                    ast.minChar = minChar;\n                    limChar = this.scanner.lastTokenLimChar();\n                    ast.limChar = limChar;\n                    break;\n            }\n\n            if (ast == null) {\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n\n                    var idText = this.currentToken.getText();\n                    ast = this.createRef(idText, (<IdentifierToken>this.currentToken).hasEscapeSequence, minChar);\n                    sawId = true;\n \n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n\n                    if (this.currentToken.tokenId == TokenID.Question) {\n                        ast.flags |= ASTFlags.PossibleOptionalParameter;\n                    }\n\n                    limChar = this.scanner.lastTokenLimChar();\n                }\n            }\n\n            if (inCast) {\n                this.checkCurrentToken(TokenID.GreaterThan, errorRecoverySet);\n            }\n\n            if (ast == null) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.OpenParen:\n                        minChar = this.scanner.pos;\n                        var prevTokId = this.scanner.previousToken().tokenId;\n                        this.currentToken = this.scanner.scan();\n\n                        var couldBeLambda = prevTokId == TokenID.OpenParen || // foo(()=>{});\n                                            prevTokId == TokenID.Comma || // foo(x,()=>{});\n                                            prevTokId == TokenID.EqualsEquals || // var foo = ()=>{};\n                                            prevTokId == TokenID.Colon;    // var x = { foo: ()=> {} };\n\n\n                        if (couldBeLambda && this.currentToken.tokenId == TokenID.CloseParen) {\n                            parseAsLambda = true;\n                            expectlambdaRParen = false;\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else if (couldBeLambda && this.currentToken.tokenId == TokenID.DotDotDot) {\n                            parseAsLambda = true;\n                            expectlambdaRParen = true;\n                        }\n                        else {\n                            ast = this.parseExpr(errorRecoverySet | ErrorRecoverySet.RParen,\n                                          OperatorPrecedence.None, true, TypeContext.NoTypes, couldBeLambda);\n                            limChar = this.scanner.lastTokenLimChar();\n                            parseAsLambda = couldBeLambda && (ast.nodeType == NodeType.Name || ast.nodeType == NodeType.Comma) &&\n                                            (this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.Question);\n                            expectlambdaRParen = true;\n                        }\n\n                        // Check for the RParen if it's not an anonymous '=>' function\n                       ";
var v27264 = v27265 + " if ((ast && !parseAsLambda)) {\n                            if (hasFlag(ast.flags, ASTFlags.SkipNextRParen)) {\n                                // REVIEW: parseExpr resulted in a lambda node, the LParen scanned earlier, is the beginning of that node, and not of a parenthesized expression;\n                                //         do not look for a matching RParen for this node, but make sure to remove the flag, so that any enclosing parenthesis are matched correctly.\n                                ast.flags = ast.flags & (~(ASTFlags.SkipNextRParen)); \n                                break;\n                            }\n                            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                            ast.isParenthesized = true;\n                        }\n\n                        break;\n                    case TokenID.NumberLiteral: {\n                        var numTok = <NumberLiteralToken>this.currentToken;\n                        this.currentToken = this.scanner.scan();\n                        ast = new NumberLiteral(numTok.value, numTok.hasEmptyFraction);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.StringLiteral:\n                        ast = new StringLiteral(this.currentToken.getText());\n                        this.currentToken = this.scanner.scan();\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    case TokenID.RegularExpressionLiteral: {\n                        var rtok = <RegularExpressionLiteralToken>this.currentToken;\n                        ast = new RegexLiteral(rtok.regex);\n                        this.currentToken = this.scanner.scan();\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.OpenBracket:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        ast = this.parseArrayLiteral(ErrorRecoverySet.RBrack | errorRecoverySet);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.pos; // ']'\n                        this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet);\n                        break;\n                    // TODO: rescan regex for TokenID.Div and AsgDiv\n                        case TokenID.OpenBrace:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var members = this.parseMemberList(ErrorRecoverySet.RCurly | errorRecoverySet)\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        ast = new UnaryExpression(NodeType.ObjectLit, members);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        members.minChar = minChar;\n                        members.limChar = limChar;\n                        break;\n\n                    case TokenID.LessThan:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var term: AST = this.parseTypeReference(ErrorRecoverySet.BinOp, false);\n                        this.checkCurrentToken(TokenID.GreaterThan, errorRecoverySet);\n                        ast = new UnaryExpression(NodeType.TypeAssertion, this.parseExpr(errorRecoverySet, OperatorPrecedence.Unary, false, TypeContext.NoTypes));\n                        (<UnaryExpression>ast).castTerm = term;\n                        break;\n\n                    default:\n                        if (this.prevExpr && hasFlag(this.prevExpr.flags, ASTFlags.PossibleOptionalParameter)) {\n                            parseAsLambda = true;\n                            ast = this.prevExpr;\n                        }\n                        else {\n                            this.reportParseError(\"Check format of expression term\");\n                            if (this.errorRecovery) {\n                                var ident = new MissingIdentifier();\n                                ident.minChar = minChar;\n                                ident.flags |= ASTFlags.Error;\n                                this.skip(errorRecoverySet | ErrorRecoverySet.Postfix);\n                                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                    ident.setText(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence);\n                                    this.currentToken = this.scanner.scan();\n                       ";
var v27263 = v27264 + '             limChar = this.scanner.lastTokenLimChar();\n                                }\n                                else {\n                                    limChar = this.scanner.lastTokenLimChar();\n                                    //tok=scanner.scan();\n                                }\n\n                                // REVIEW: set sawId\n                                ast = ident;\n                            }\n                        }\n                }\n            }\n\n            if (parseAsLambda) {\n                // If the next token is an fat arrow or a colon, we either have a parameter list, or can rightly assume\n                // that we have a typed formal, so we proceed with the lambda parse\n                if (\n                    this.currentToken.tokenId == TokenID.Colon ||\n                    this.currentToken.tokenId == TokenID.Comma ||\n                    this.currentToken.tokenId == TokenID.CloseParen ||\n                    this.currentToken.tokenId == TokenID.DotDotDot) {\n\n                        // We won\'t scan in the \':\' case, since keeping the \':\' simplifies argument handling in parseFormalParameterList\n                        // Note that we don\'t set the minchar in this case\n                    ast = this.parseLambdaExpr(errorRecoverySet, ast, true /* skipNextRParen */, expectlambdaRParen);\n                    ast.minChar = minChar;\n                    limChar = this.scanner.lastTokenLimChar();\n                    ast.limChar = limChar;\n                }\n                else if (ast) {\n                    ast.isParenthesized = true;\n                }\n            }\n\n            if (sawId && (typeContext != TypeContext.NoTypes)) {\n                typeContext |= TypeContext.ArraySuffix;\n            }\n\n            var postFix = this.parsePostfixOperators(errorRecoverySet, ast, allowCall, inNew, typeContext, minChar, limChar);\n\n            // Defensive error check...\n            if (postFix) {\n                if (sawId && (postFix.nodeType == NodeType.Index)) {\n                    var binExpr = <BinaryExpression>postFix;\n                    if (binExpr.operand2 == null) {\n                        postFix = this.convertToTypeReference(postFix);\n                    }\n                }\n\n                ///////////////////////////////////////////////////////////\n                //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n                //      as they are sometimes not specific enough for each expression kind.\n                postFix.minChar = minChar;\n                // Only update "limChar" if it is not better than "lastTokenLimChar()"\n                postFix.limChar = max(postFix.limChar, this.scanner.lastTokenLimChar());\n                //\n                ///////////////////////////////////////////////////////////\n                return postFix;\n            }\n            else {\n                return new AST(NodeType.Error);\n            }\n\n        }\n\n        private parseLambdaExpr(errorRecoverySet: ErrorRecoverySet, lambdaArgs: AST, skipNextRParen: bool, expectClosingRParen: bool): AST {\n            // REVIEW: Parse the remainder of a lambda expression. The opening paren has been read already, if it existed. \n            //         skipNextRParen sets a flag on the resulting lambda node to tell the calling parseTerm that the LParen it scanned has been matched as part of parsing the formal parameter list\n            //         expectClosingRParen indicates that a closing RParen is expected, in the cases with optional parameter or more than one parameter.\n            var ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, { preProcessedLambdaArgs: lambdaArgs }, expectClosingRParen);\n            (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n            (<FuncDecl>ast).fncFlags |= FncFlags.IsFatArrowFunction;\n            if (!skipNextRParen) {\n                ast.flags |= ASTFlags.SkipNextRParen;\n            }\n            ast.limChar = this.scanner.lastTokenLimChar();;\n            return ast;\n        }\n\n        private parseExpr(errorRecoverySet: ErrorRecoverySet, minPrecedence: number, allowIn: bool,\n            typeContext: TypeContext, possiblyInLambda: bool = false): AST {\n            var ast: AST = null;\n            var tokenInfo = lookupToken(this.currentToken.tokenId);\n            var canAssign: bool = true;\n            var idHint: string = null;\n            var minChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            var exprIsAnonLambda = false;\n\n            if ((tokenInfo != undefined) && (tokenInfo.unopNodeType != NodeType.None)) {\n                canAssign = false;\n                this.currentToken = this.scanner.scan();\n                var tempExpr = this.parseExpr(ErrorRecoverySet.BinOp | errorRecoverySet,\n                                       tokenInfo.unopPrecedence, allowIn,\n                                       TypeCo';
var v27262 = v27263 + 'ntext.NoTypes);\n\n                // fold unary +- into constants\n                if ((tokenInfo.unopNodeType == NodeType.Pos) &&\n                    (tempExpr.nodeType == NodeType.NumberLit)) {\n                    ast = tempExpr;\n                }\n                else if ((tokenInfo.unopNodeType == NodeType.Neg) &&\n                         (tempExpr.nodeType == NodeType.NumberLit)) {\n                    var numLit = <NumberLiteral>tempExpr;\n                    numLit.value = (-numLit.value);\n                    if (numLit.value == 0) {\n                        numLit.isNegativeZero = true;\n                    }\n                    ast = tempExpr;\n                }\n                else {\n                    ast = new UnaryExpression(tokenInfo.unopNodeType, tempExpr);\n                    ast.limChar = tempExpr.limChar;\n                }\n                ast.minChar = minChar;\n            }\n            else {\n                ast = this.parseTerm(ErrorRecoverySet.BinOp | ErrorRecoverySet.AddOp |\n                              errorRecoverySet, true, typeContext, false);\n                var id: Identifier;\n                var temp: AST;\n                if (ast.nodeType == NodeType.Name) {\n                    id = <Identifier>ast;\n                    idHint = id.actualText;\n                }\n                else if (ast.nodeType == NodeType.Dot) {\n\n                    // If this is within a class declaration, and the circumstances are right, we need to\n                    // transform the dotted expression into a member declaration\n                    var subsumedExpr = false;\n\n                    if (this.inferPropertiesFromThisAssignment && \n                        (this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.Equals) &&\n                         this.parsingClassConstructorDefinition &&\n                         this.nestingLevel == this.currentClassDefinition.constructorNestingLevel && // this nesting level means we\'re at the top-level in the constructor\n                         (<BinaryExpression>ast).operand1.nodeType == NodeType.This) {\n\n                        if ((<BinaryExpression>ast).operand2.nodeType == NodeType.Name) {\n                            var op2ID: Identifier = (<Identifier>(<BinaryExpression>ast).operand2);\n\n                            if (!this.currentClassDefinition.knownMemberNames[op2ID.actualText]) {\n                                ast = this.parseClassMemberVariableDeclaration(op2ID, ast.minChar, true, errorRecoverySet, Modifiers.Public);\n                                subsumedExpr = true;\n                            }\n                        }\n                    }\n\n                    if (!subsumedExpr) {\n                        temp = ast;\n                        while (temp.nodeType == NodeType.Dot) {\n                            var binExpr = <BinaryExpression>temp;\n                            temp = binExpr.operand2;\n                        }\n                        if (temp.nodeType == NodeType.Name) {\n                             id = <Identifier>temp;\n                            idHint = id.actualText;\n                        }\n                    }\n                }\n                if ((!this.scanner.lastTokenHadNewline()) &&\n                    ((this.currentToken.tokenId == TokenID.PlusPlus) || (this.currentToken.tokenId == TokenID.MinusMinus))) {\n                    canAssign = false;\n                    var operand = ast;\n                    ast = new UnaryExpression((this.currentToken.tokenId == TokenID.PlusPlus) ? NodeType.IncPost : NodeType.DecPost, operand);\n                    ast.limChar = this.scanner.pos;\n                    ast.minChar = operand.minChar;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n            for (; ;) {\n                tokenInfo = lookupToken(this.currentToken.tokenId);\n                if ((tokenInfo == undefined) || (tokenInfo.binopNodeType == NodeType.None)) {\n                    break;\n                }\n                if ((!allowIn) && (tokenInfo.binopNodeType == NodeType.In)) {\n                    break;\n                }\n                if (tokenInfo.binopPrecedence == OperatorPrecedence.Assignment) {\n                    if (tokenInfo.binopPrecedence < minPrecedence) {\n                        break;\n                    }\n                    if (!canAssign) {\n                        this.reportParseError("illegal assignment");\n                    }\n                }\n                else if (tokenInfo.binopPrecedence <= minPrecedence) {\n                    break;\n                }\n\n                if (possiblyInLambda && this.currentToken.tokenId == TokenID.Comma && this.scanner.getLookAheadToken().tokenId == TokenID.DotDotDot) {\n                    // The ellipsis can only exist in the formal list of a lambda expression, so do not attempt to parse the comma token as the comma binary operator\n                    // instead parse it as a lambda\n               ';
var v27261 = v27262 + '     exprIsAnonLambda = true;\n                    canAssign = false;\n                    ast = this.parseLambdaExpr(errorRecoverySet, ast, false, true);\n                    break;\n                }\n\n                // Precedence is high enough. Consume the operator token.\n                this.currentToken = this.scanner.scan();\n                canAssign = false;\n                if (tokenInfo.binopNodeType == NodeType.ConditionalExpression) {\n                    if (possiblyInLambda && \n                        ( this.currentToken.tokenId == TokenID.Equals || this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.CloseParen || this.currentToken.tokenId == TokenID.Comma)) {\n                        // The QMark is not a ternary expression, it is a marker for optional parameter in a lambda expression.\n                        exprIsAnonLambda = true;\n                        canAssign = true;\n                    }\n                    else {\n                        this.prevExpr = ast;\n                        var whenTrue = this.parseExpr(\n                            errorRecoverySet | ErrorRecoverySet.Colon, OperatorPrecedence.Assignment, allowIn, TypeContext.NoTypes);\n\n                        // Do not hold onto the prevExpr handle\n                        this.prevExpr = null;\n                        this.checkCurrentToken(TokenID.Colon, errorRecoverySet | ErrorRecoverySet.ExprStart);\n\n                        var whenFalse = this.parseExpr(\n                            errorRecoverySet | ErrorRecoverySet.BinOp, OperatorPrecedence.Assignment, allowIn, TypeContext.NoTypes)\n                        ast = new ConditionalExpression(ast, whenTrue, whenFalse);\n                    }\n                }\n                else {\n                    var tc = TypeContext.NoTypes;\n                    var binExpr2: BinaryExpression;\n\n                    binExpr2 = new BinaryExpression(tokenInfo.binopNodeType, ast,\n                                                    this.parseExpr(errorRecoverySet |\n                                                            ErrorRecoverySet.BinOp,\n                                                            tokenInfo.binopPrecedence,\n                                                            allowIn, TypeContext.NoTypes, possiblyInLambda));\n                    if (binExpr2.operand2.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>binExpr2.operand2;\n                        funcDecl.hint = idHint;\n                    }\n\n                    binExpr2.minChar = ast.minChar;\n                    binExpr2.limChar = this.scanner.lastTokenLimChar();\n                    idHint = null;\n                    ast = binExpr2;\n                }\n            }\n            if (canAssign) {\n                ast.flags |= ASTFlags.Writeable;\n            }\n            if (!exprIsAnonLambda) {\n                ///////////////////////////////////////////////////////////\n                //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n                //      as they are sometimes not specific enough for each statement kind.\n                ast.minChar = minChar;\n                // Only update "limChar" if it is not better than "lastTokenLimChar()"\n                ast.limChar = max(ast.limChar, this.scanner.lastTokenLimChar());\n                //\n                ///////////////////////////////////////////////////////////\n                ast.preComments = preComments;\n                ast.postComments = this.parseCommentsForLine(this.scanner.line);\n            }\n            return ast;\n        }\n\n        private parsePostfixOperators(errorRecoverySet: ErrorRecoverySet, ast: AST, allowCall: bool, inNew: bool,\n            typeContext: TypeContext, lhsMinChar: number, lhsLimChar: number): AST {\n            var count = 0;\n\n            if (!ast) {\n                ast = new AST(NodeType.EmptyExpr);\n                ast.isParenthesized = true;\n            }\n\n            ast.minChar = lhsMinChar;\n            ast.limChar = lhsLimChar;\n\n            for (; ;) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.OpenParen:\n                        if (inNew) {\n                            var callExpr = <CallExpression>ast;\n                            callExpr.arguments = this.parseArgList(errorRecoverySet);\n                            inNew = false;\n                        }\n                        else {\n                            if (!allowCall) {\n                                return ast;\n                            }\n                            ast = new CallExpression(NodeType.Call, ast,\n                                                   this.parseArgList(errorRecoverySet));\n                            ast.minChar = lhsMinChar;\n                        }\n                        ast.limChar = this.scanner.pos; // \')\'\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n              ';
var v27260 = v27261 + "          break;\n                    case TokenID.OpenBracket:\n                        this.currentToken = this.scanner.scan();\n                        if (this.currentToken.tokenId == TokenID.CloseBracket) {\n                            if (hasFlag(typeContext, TypeContext.ArraySuffix)) {\n                                this.currentToken = this.scanner.scan();\n                                if (ast.nodeType == NodeType.TypeRef) {\n                                    var typeRef = <TypeReference>ast;\n                                    typeRef.arrayCount++;\n                                }\n                                else {\n                                    ast = new BinaryExpression(NodeType.Index, ast, null);\n                                }\n                                ast.limChar = this.scanner.pos;\n                                break; // note early exit from case\n                            }\n                        }\n\n                        ast = new BinaryExpression(NodeType.Index, ast,\n                                                 this.parseExpr(errorRecoverySet | ErrorRecoverySet.RBrack,\n                                                           OperatorPrecedence.None, true,\n                                                           TypeContext.NoTypes));\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.pos; // ']'\n                        this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet);\n                        break;\n                    case TokenID.Dot: {\n                        var name: Identifier = null;\n                        var curpos = this.scanner.pos;\n                        this.currentToken = this.scanner.scan();\n                        // Don't allow reserved words if immediately after a new line and error recovery is enabled\n                        if ((this.currentToken.tokenId == TokenID.Identifier) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && convertTokToIDName(this.currentToken))) {\n                            ast.flags |= ASTFlags.DotLHS;\n                            name = this.createRef(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence, this.scanner.startPos);\n                            name.limChar = this.scanner.pos;\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else {\n                            this.reportParseError(\"Expected identifier following dot\");\n                            if (this.errorRecovery) {\n                                this.skip(errorRecoverySet);\n                                ast.flags |= (ASTFlags.Error | ASTFlags.DotLHS);\n                                return ast;\n                            }\n                            else {\n                                name = new MissingIdentifier();\n                            }\n                        }\n                        ast = new BinaryExpression(NodeType.Dot, ast, name);\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.EqualsGreaterThan:\n                        ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, { preProcessedLambdaArgs: ast }, false);\n                        (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    default:\n                        return ast;\n\n                }\n            }\n        }\n\n        private parseTry(tryNode: Try, errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Try {\n            var minChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError(\"Expected '{'\");\n                if (this.errorRecovery) {\n                    var etryNode = tryNode;\n                    etryNode.minChar = minChar;\n                    etryNode.limChar = this.scanner.lastTokenLimChar();\n                    etryNode.flags |= ASTFlags.Error;\n                    return etryNode;\n                }\n            }\n            tryNode.body = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers);\n            tryNode.minChar = minChar;\n            tryNode.limChar = tryNode.body.limChar;\n            tryNode.preComments = preComments;\n            tryNode.postComments = this.parseComments();\n            return tryNode;\n        }\n\n        private parseCatch(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Catch {\n            var catchMinChar = this.scanner.startPos;\n       ";
var v27259 = v27260 + '     var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n            if ((this.currentToken.tokenId != TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                this.reportParseError("Expected identifier in catch header");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n\n                    var ecatch = new Catch(new VarDecl(new MissingIdentifier(), this.nestingLevel),\n                                            new Statement(NodeType.Empty));\n                    ecatch.statement.minChar = catchMinChar;\n                    ecatch.statement.limChar = this.scanner.pos;\n                    ecatch.minChar = this.scanner.startPos;\n                    ecatch.limChar = this.scanner.pos;\n                    ecatch.flags |= ASTFlags.Error;\n                    return ecatch;\n                }\n            }\n            var param = new VarDecl(Identifier.fromToken(this.currentToken), this.nestingLevel);\n            param.id.minChar = this.scanner.startPos;\n            param.id.limChar = this.scanner.pos;\n            param.minChar = param.id.minChar;\n            param.limChar = param.id.limChar;\n            this.currentToken = this.scanner.scan();\n            var statementPos = this.scanner.pos;\n            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.StmtStart);\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\' to start catch body");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n\n                    var ecatch = new Catch(new VarDecl(new MissingIdentifier(), this.nestingLevel),\n                                            new Statement(NodeType.Empty));\n                    ecatch.statement.minChar = catchMinChar;\n                    ecatch.statement.limChar = statementPos;\n                    ecatch.minChar = this.scanner.startPos;\n                    ecatch.limChar = this.scanner.pos;\n                    ecatch.flags |= ASTFlags.Error;\n                    return ecatch;\n                }\n            }\n\n            var catchStmt = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers);\n            var catchNode = new Catch(param, catchStmt);\n            catchNode.statement.minChar = catchMinChar;\n            catchNode.statement.limChar = statementPos;\n            catchNode.minChar = catchMinChar;\n            catchNode.limChar = catchStmt.limChar;\n            catchNode.preComments = preComments;\n            catchNode.postComments = this.parseComments();\n            return catchNode;\n        }\n\n        private parseFinally(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Finally {\n            var finMinChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\' to start body of finally statement");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n                    var efin = new Finally(new Statement(NodeType.Empty));\n                    efin.flags |= ASTFlags.Error;\n                    efin.minChar = this.scanner.startPos;\n                    efin.limChar = this.scanner.pos;\n                    return efin;\n                }\n            }\n\n            var finBody = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers)\n            var fin = new Finally(finBody);\n            fin.minChar = finMinChar;\n            fin.limChar = fin.body.limChar;\n            fin.preComments = preComments;\n            fin.postComments = this.parseComments();\n            return fin;\n        }\n\n        private parseTryCatchFinally(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers, labelList: ASTList): AST {\n            var tryPart: AST = new Try(null);\n            var tryMinChar = this.scanner.startPos;\n            this.pushStmt(<Statement>tryPart, labelList);\n            this.parseTry(<Try>tryPart, errorRecoverySet | ErrorRecoverySet.Catch, parentModifiers);\n            this.popStmt();\n            var tc: TryCatch = null;\n            var tf: TryFinally = null;\n\n            if (this.currentToken.tokenId == TokenID.Catch) {\n                var catchPart = this.parseCatch(errorRecoverySet | ErrorRecoverySet.Catch, parentModifiers);\n                tc = new TryCatch(<Try>tryPart, catchPart);\n                tc.minChar = tryPart.minChar;\n                tc.limChar = catchPart.limChar;\n            }\n\n            if (this.currentToken.tokenId != TokenID.Finally) {\n                if (tc == null) {\n                    this.reportParseError("try with neither catch nor finally");\n        ';
var v27258 = v27259 + '            if (this.errorRecovery) {\n                        var etf = new TryFinally(tryPart, new Finally(new AST(NodeType.Empty)));\n                        etf.flags |= ASTFlags.Error;\n                        etf.minChar = this.scanner.startPos;\n                        etf.limChar = this.scanner.pos;\n                        return etf;\n                    }\n                    return new TryFinally(tryPart, new Finally(new AST(NodeType.Empty)));\n                }\n                else {\n                    return tc;\n                }\n            }\n            else {\n                if (tc) {\n                    tryPart = tc;\n                }\n                var finallyPart = this.parseFinally(errorRecoverySet, parentModifiers)\n                tf = new TryFinally(tryPart, finallyPart);\n                tf.minChar = tryMinChar;\n                tf.limChar = finallyPart.limChar;\n                return tf;\n            }\n        }\n\n        private parseStatement(errorRecoverySet: ErrorRecoverySet, allowedElements: AllowedElements, parentModifiers: Modifiers): AST {\n            var ast: AST = null;\n            var labelList: ASTList = null;\n            var astList: ASTList = null;\n            var temp: AST;\n            var modifiers = Modifiers.None;\n            var minChar = this.scanner.startPos;\n            var forInOk = false;\n            var needTerminator = false;\n            var fnOrVar: AST = null;\n            var preComments = this.parseComments();\n            this.state = ParseState.StartStatement;\n\n            function isAmbient() {\n                return hasFlag(modifiers, Modifiers.Ambient) || hasFlag(parentModifiers, Modifiers.Ambient);\n            }\n\n            function mayNotBeExported() {\n                if (hasFlag(modifiers, Modifiers.Exported)) {\n                    this.reportError("Statement may not be exported");\n                }\n            }\n\n            for (; ;) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.EndOfFile:\n                        ast = new AST(NodeType.Error);\n                        ast.minChar = minChar;\n                        ast.limChar = this.scanner.pos;\n                        break;\n                    case TokenID.Function:\n                        if (this.parsingDeclareFile || isAmbient() || this.ambientModule) {\n                            this.currentToken = this.scanner.scan();\n                            fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                      modifiers, true, false);\n                            if (fnOrVar.nodeType == NodeType.VarDecl) {\n                                this.reportParseError("function keyword can only introduce function declaration");\n                            }\n                            else if ((fnOrVar.nodeType == NodeType.FuncDecl) && ((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                needTerminator = true;\n                            }\n                            ast = fnOrVar;\n                            if (this.parsingDeclareFile || this.ambientModule && ast.nodeType == NodeType.FuncDecl) {\n                                (<FuncDecl>ast).fncFlags |= FncFlags.Exported;\n                            }\n                        }\n                        else {\n                            ast = this.parseFncDecl(errorRecoverySet, true, false, false, null, false, false, isAmbient(), modifiers, null, true);\n                            if (hasFlag((<FuncDecl>ast).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                needTerminator = true;\n                            }\n                            if (this.ambientModule) {\n                                this.reportParseError("function declaration not permitted within ambient module");\n                            }\n                            if (hasFlag(modifiers, Modifiers.Exported)) {\n                                (<FuncDecl>ast).fncFlags |= FncFlags.Exported;\n                            }\n                        }\n                        break;\n                    case TokenID.Module:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("module not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseModuleDecl(errorRecoverySet, modifiers, preComments);\n                            preComments = null;\n                        }\n                        break;\n                    case TokenID.Import:\n                        if ((allowedElements & AllowedElement';
var v27257 = v27258 + 's.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("module not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            if (hasFlag(modifiers, Modifiers.Exported)) {\n                                this.reportParseError("export keyword not permitted on import declaration");\n                            }\n                            ast = this.parseImportDeclaration(errorRecoverySet, modifiers);\n                            needTerminator = true;\n                        }\n                        break;\n                    case TokenID.Export:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("\'export\' statements are only allowed at the global and module levels");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        if (this.topLevel) {\n                            this.hasTopLevelImportOrExport = true;\n                        }\n                        modifiers |= Modifiers.Exported;\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Private:\n                        modifiers |= Modifiers.Private;\n\n                        this.currentToken = this.scanner.scan();\n\n                        if (this.parsingClassConstructorDefinition) {\n\n                            if (!this.inferPropertiesFromThisAssignment) {\n                                this.reportParseError("Property declarations are not permitted within constructor bodies");\n                            }\n\n                            minChar = this.scanner.pos;\n                            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TokenID.Dot)) {\n                                this.reportParseError("Expected \'this.\' for property declaration");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n\n                                var id = Identifier.fromToken(this.currentToken);\n                                id.minChar = this.scanner.startPos;\n                                id.limChar = this.scanner.pos;\n\n                                this.currentToken = this.scanner.scan();\n                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);\n                            }\n                        }\n                        else {\n                            if (this.currentToken.tokenId != TokenID.Interface) {\n                                if (this.currentToken.tokenId == TokenID.Get) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Getter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                else if (this.currentToken.tokenId == TokenID.Set) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMod';
var v27256 = v27257 + 'e)) {\n                                        modifiers |= Modifiers.Setter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                          modifiers, isAmbient(), false);\n                                if ((fnOrVar.nodeType == NodeType.VarDecl) ||\n                                    ((fnOrVar.nodeType == NodeType.FuncDecl) && (hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction)))) {\n                                    needTerminator = true;\n                                }\n                                ast = fnOrVar;\n                            }\n                        }\n                        break;\n                    case TokenID.Public:\n                        if (this.parsingClassConstructorDefinition) {\n\n                            if (!this.inferPropertiesFromThisAssignment) {\n                                this.reportParseError("Property declarations are not permitted within constructor bodies");\n                            }\n\n                            this.currentToken = this.scanner.scan(); \n                            minChar = this.scanner.pos;\n                            modifiers |= Modifiers.Public;\n                            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TokenID.Dot)) {\n                                this.reportParseError("Expected \'this.\' for property declaration");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n\n                                var id = Identifier.fromToken(this.currentToken);\n                                id.minChar = this.scanner.startPos;\n                                id.limChar = this.scanner.pos;\n\n                                this.currentToken = this.scanner.scan();\n                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);\n                            }\n                        }\n                        else {\n                            if ((allowedElements & AllowedElements.Properties) == AllowedElements.None) {\n                                this.reportParseError("\'property\' statements are only allowed within classes");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                modifiers |= Modifiers.Public;\n                                this.currentToken = this.scanner.scan();\n                                if (this.currentToken.tokenId == TokenID.Get) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Getter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                else if (this.currentToken.tokenId == TokenID.Set) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Setter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n       ';
var v27255 = v27256 + '                         fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                            modifiers, isAmbient(), false);\n                                if ((fnOrVar.nodeType == NodeType.VarDecl) ||\n                                    ((fnOrVar.nodeType == NodeType.FuncDecl) && hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction))) {\n                                    needTerminator = true;\n                                }\n                                ast = fnOrVar;\n                            }\n                        }\n                        break;\n                    case TokenID.Declare:\n                        if (!(allowedElements & AllowedElements.AmbientDeclarations)) {\n                            this.reportParseError("Ambient declarations are only allowed at the top-level or module scopes")\n                        }\n                        if (!this.parsingDeclareFile && hasFlag(parentModifiers, Modifiers.Ambient)) {\n                            this.reportParseError("Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)")\n                        }\n                        modifiers |= Modifiers.Ambient;\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Class:\n                        if ((allowedElements & AllowedElements.ClassDeclarations) == AllowedElements.None) {\n                            this.reportParseError("class not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseClassDecl(errorRecoverySet, minChar, modifiers);\n                        }\n                        break;\n                    case TokenID.Interface:\n                        if ((allowedElements & AllowedElements.InterfaceDeclarations) == AllowedElements.None) {\n                            this.reportParseError("interface not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseInterfaceDecl(errorRecoverySet, modifiers);\n                        }\n                        break;\n                    case TokenID.Var:\n                        var declAst: AST = this.parseVariableDeclaration(errorRecoverySet | ErrorRecoverySet.StmtStart, modifiers,\n                                                     true, false);\n                        if (declAst.nodeType == NodeType.VarDecl) {\n                            ast = declAst;\n                        }\n                        else {\n                            ast = new Block(<ASTList>declAst, false);\n                        }\n                        needTerminator = true;\n                        break;\n                    case TokenID.Static:\n\n                        if (this.currentClassDecl == null) {\n                            this.reportParseError("Statics may only be class members");\n                        }\n\n                        mayNotBeExported();\n                        modifiers |= Modifiers.Public;\n                        this.currentToken = this.scanner.scan();\n                        if (this.currentToken.tokenId == TokenID.Get) {\n                            this.prevIDTok = this.currentToken;\n                            this.currentToken = this.scanner.scan();\n                            if (codeGenTarget < CodeGenTarget.ES5) {\n                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                            }\n                            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                modifiers |= Modifiers.Getter;\n                                this.prevIDTok = null;\n                            }\n                        }\n                        else if (this.currentToken.tokenId == TokenID.Set) {\n                            this.currentToken = this.scanner.scan();\n                            if (codeGenTarget < CodeGenTarget.ES5) {\n                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                            }\n                            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n             ';
var v27254 = v27255 + '                   modifiers |= Modifiers.Setter;\n                            }\n                        }\n                        if (isAmbient()) {\n                            modifiers |= Modifiers.Ambient;\n                        }\n                        fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                  modifiers, this.parsingDeclareFile || (modifiers & Modifiers.Ambient) != Modifiers.None, true);\n\n                        var staticsList = this.topStaticsList();\n                        if (staticsList && fnOrVar.nodeType == NodeType.VarDecl) {\n                            staticsList.append(fnOrVar);\n                        }\n\n                        if (fnOrVar.nodeType == NodeType.VarDecl || ((fnOrVar.nodeType == NodeType.FuncDecl) && hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction))) {\n                            needTerminator = true;\n                        }\n\n                        ast = fnOrVar;\n                        break;\n                    case TokenID.For:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("syntax error: for statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart | ErrorRecoverySet.Var);\n                        this.state = ParseState.ForInit;\n                        forInOk = true;\n                        switch (this.currentToken.tokenId) {\n                            case TokenID.Var:\n                                temp = this.parseVariableDeclaration(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                  ErrorRecoverySet.In, Modifiers.None, false, false);\n                                break;\n                            case TokenID.Semicolon:\n                                temp = null;\n                                this.state = ParseState.ForCondStart;\n                                break;\n                            default:\n                                temp = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                               ErrorRecoverySet.In, OperatorPrecedence.None, false,\n                                               TypeContext.NoTypes);\n                                break;\n                        }\n                        this.state = ParseState.ForInitAfterVar;\n                        if (this.currentToken.tokenId == TokenID.In) {\n                            if ((temp == null) || (!forInOk)) {\n                                this.reportParseError("malformed for statement");\n                                if (this.errorRecovery) {\n                                    this.skip(errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                    ast = new AST(NodeType.Empty);\n                                    ast.flags |= ASTFlags.Error;\n                                }\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n                                var forInStmt = new ForInStatement(temp,\n                                                                 this.parseExpr(ErrorRecoverySet.RParen |\n                                                                           errorRecoverySet,\n                                                                           OperatorPrecedence.Comma,\n                                                                           false,\n                                                                           TypeContext.NoTypes));\n\n                                forInStmt.limChar = this.scanner.pos;\n                                forInStmt.statement.minChar = minChar;\n                                forInStmt.statement.limChar = this.scanner.pos;\n                                this.checkCurrentToken(TokenID.CloseParen, ErrorRecoverySet.StmtStart | errorRecoverySet);\n                                this.pushStmt(forInStmt, labelList);\n                                forInStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                                this.popStmt();\n                                forInStmt.minChar = minChar;\n                                ast = forInStmt;\n                            }\n                        }\n                        else {\n                            var forStmt: ForStatement = new ForStatement(temp);\n                            forStmt.minChar = minChar;\n                            this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet);\n                            if (this.currentToken.tokenId == TokenID.Semicolon) {\n                                forStmt.cond = null;\n                 ';
var v27253 = v27254 + "           }\n                            else {\n                                forStmt.cond = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                       ErrorRecoverySet.RParen,\n                                                       OperatorPrecedence.None, true,\n                                                       TypeContext.NoTypes);\n                                if (this.currentToken.tokenId != TokenID.Semicolon) {\n                                    this.skip(errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                    ast = forStmt;\n                                    ast.flags |= ASTFlags.Error;\n                                }\n                            }\n                            this.currentToken = this.scanner.scan();\n                            if (this.currentToken.tokenId == TokenID.CloseParen) {\n                                forStmt.incr = null;\n                            }\n                            else {\n                                forStmt.incr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                       ErrorRecoverySet.RParen,\n                                                       OperatorPrecedence.None, true,\n                                                       TypeContext.NoTypes);\n                            }\n                            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n                            this.pushStmt(forStmt, labelList);\n                            forStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                            this.popStmt();\n                            forStmt.limChar = forStmt.body.limChar;\n                            ast = forStmt;\n                        }\n                        break;\n                    case TokenID.With: {\n                        if (codeGenTarget < CodeGenTarget.ES5) {\n                            this.reportParseError(\"'with' statements are only available in ES5 codegen mode or better\");\n                        }\n\n                        if (this.strictMode) {\n                            this.reportParseError(\"'with' statements are not available in strict mode\");\n                        }\n\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError(\"'with' statement does not take modifiers\");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart | ErrorRecoverySet.Var);\n\n                        var expr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.Colon,\n                                                            OperatorPrecedence.None, true,\n                                                            TypeContext.NoTypes);\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n\n                        var withStmt = new WithStatement(expr);\n                        withStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                        withStmt.minChar = minChar;\n                        withStmt.limChar = withStmt.body.limChar;\n                        ast = withStmt;\n                    }\n                        break;\n                    case TokenID.Switch: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError(\"'switch' statement does not take modifiers\");\n                        }\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n\n                        var switchStmt = new SwitchStatement(this.parseExpr(errorRecoverySet |\n                                                                     ErrorRecoverySet.RParen,\n                                                                     OperatorPrecedence.None,\n                                                                     true,\n                                                                     TypeContext.NoTypes));\n                        switchStmt.statement.minChar = minChar;\n                        switchStmt.statement.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n                        var caseListMinChar = this.scanner.startPos;\n                         this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.SCase);\n                        switchStmt.defaultCase = null;\n                        switchStmt.caseList = new ASTList();\n                        var caseStmt: CaseStatement = null;\n                        this.push";
var v27252 = v27253 + 'Stmt(switchStmt, labelList);\n                        for (; ;) {\n                            if ((this.currentToken.tokenId == TokenID.Case) ||\n                                (this.currentToken.tokenId == TokenID.Default)) {\n                                var isDefault = (this.currentToken.tokenId == TokenID.Default);\n                                caseStmt = new CaseStatement();\n                                caseStmt.minChar = this.scanner.startPos;\n                                this.currentToken = this.scanner.scan();\n                                if (isDefault) {\n                                    switchStmt.defaultCase = caseStmt;\n                                }\n                                else {\n                                    caseStmt.expr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.Colon,\n                                                            OperatorPrecedence.None, true,\n                                                            TypeContext.NoTypes);\n                                }\n                                this.checkCurrentToken(TokenID.Colon, errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                caseStmt.body = new ASTList();\n                                this.parseStatementList(errorRecoverySet | ErrorRecoverySet.RCurly,\n                                              caseStmt.body, false, true, allowedElements, modifiers);\n                                caseStmt.limChar = caseStmt.body.limChar;\n                                switchStmt.caseList.append(caseStmt);\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        // end of switch statement\n                        switchStmt.caseList.minChar = caseListMinChar;\n                        switchStmt.caseList.limChar = this.scanner.pos;\n                        switchStmt.limChar = switchStmt.caseList.limChar;\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        this.popStmt();\n                        ast = switchStmt;\n                        break;\n                    }\n                    case TokenID.While: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'while\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, ErrorRecoverySet.ExprStart |\n                                  errorRecoverySet);\n                        var whileStmt = new WhileStatement(this.parseExpr(errorRecoverySet |\n                                                                   ErrorRecoverySet.RParen,\n                                                                   OperatorPrecedence.None,\n                                                                   true, TypeContext.NoTypes));\n                        whileStmt.minChar = minChar;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet |\n                                  ErrorRecoverySet.StmtStart);\n                        this.pushStmt(whileStmt, labelList);\n                        whileStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                        whileStmt.limChar = whileStmt.body.limChar;\n                        this.popStmt();\n                        ast = whileStmt;\n                        break;\n                    }\n                    case TokenID.Do: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'do\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var doStmt = new DoWhileStatement();\n                        doStmt.minChar = minChar;\n                        this.pushStmt(doStmt, labelList);\n                        doStmt.body = this.parseStatement(errorRecoverySet | ErrorRecoverySet.While,\n                                                   allowedElements, parentModifiers);\n                        this.popStmt();\n                        doStmt.whileAST = new Identifier("while");\n                        doStmt.whileAST.minChar = this.scanner.startPos;\n                        this.checkCurrentToken(TokenID.While, errorRecoverySet | ErrorRecoverySet.LParen);\n                        doStmt.whileAST.limChar = doStmt.whileAST.minChar + 5;\n                        this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n                        doStmt.cond = this.parseExpr(errorRecoverySet | ErrorRecoverySet.RParen,\n                                           ';
var v27251 = v27252 + '   OperatorPrecedence.None, true, TypeContext.NoTypes);\n                        doStmt.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                        ast = doStmt;\n                        // compatibility; more strict would be to require the \';\'\n                        if (this.currentToken.tokenId == TokenID.Semicolon) {\n                            this.currentToken = this.scanner.scan();\n                        }\n                        break;\n                    }\n                    case TokenID.If: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("if statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n                        var ifStmt = new IfStatement(this.parseExpr(errorRecoverySet |\n                                                             ErrorRecoverySet.LParen,\n                                                             OperatorPrecedence.None, true,\n                                                             TypeContext.NoTypes));\n                        ifStmt.minChar = minChar;\n                        ifStmt.statement.minChar = minChar;\n                        ifStmt.statement.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.StmtStart);\n                        this.pushStmt(ifStmt, labelList);\n                        ifStmt.thenBod = this.parseStatement(ErrorRecoverySet.Else | errorRecoverySet,\n                                                      allowedElements, parentModifiers);\n                        ifStmt.limChar = ifStmt.thenBod.limChar;\n                        if (this.currentToken.tokenId == TokenID.Else) {\n                            this.currentToken = this.scanner.scan();\n                            ifStmt.elseBod = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                            ifStmt.limChar = ifStmt.elseBod.limChar;\n                        }\n                        this.popStmt();\n                        ast = ifStmt;\n                        break;\n                    }\n                    case TokenID.Try: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("try statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        ast = this.parseTryCatchFinally(errorRecoverySet, parentModifiers, labelList);\n                        break;\n                    }\n                    case TokenID.OpenBrace: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("block does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var block = new Block(new ASTList(), true);\n                        this.pushStmt(block, labelList);\n                        this.parseStatementList(\n                            errorRecoverySet | ErrorRecoverySet.RCurly, block.statements,\n                            /*sourceElements:*/ false, /*noLeadingCase:*/ false, AllowedElements.None, modifiers);\n                        this.popStmt();\n                        block.statements.minChar = minChar;\n                        block.statements.limChar = this.scanner.pos;\n                        block.minChar = block.statements.minChar;\n                        block.limChar = block.statements.limChar;\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        ast = block;\n                        break;\n                    }\n                    case TokenID.Semicolon:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifier can not appear here");\n                        }\n                        ast = new AST(NodeType.Empty);\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Break:\n                    case TokenID.Continue: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before jump statement");\n                        }\n                        var jump =\n                            new Jump((this.currentToken.tokenId == TokenID.Break) ? NodeType.Break : NodeType.Cont';
var v27250 = v27251 + 'inue);\n                        this.currentToken = this.scanner.scan();\n                        if ((this.currentToken.tokenId == TokenID.Identifier) && (!this.scanner.lastTokenHadNewline())) {\n                            // Labeled break or continue.\n                            jump.target = this.currentToken.getText();\n                            this.currentToken = this.scanner.scan();\n                        }\n                        this.resolveJumpTarget(jump);\n                        ast = jump;\n                        needTerminator = true;\n                        break;\n                    }\n                    case TokenID.Return: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before return statement");\n                        }\n                        if (!this.inFunction) {\n                            this.reportParseError("return statement outside of function body");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var retStmt = new ReturnStatement();\n                        retStmt.minChar = minChar;\n                        if ((this.currentToken.tokenId != TokenID.Semicolon) &&\n                            (this.currentToken.tokenId != TokenID.CloseBrace) &&\n                            (!(this.scanner.lastTokenHadNewline()))) {\n                            retStmt.returnExpression = this.parseExpr(errorRecoverySet |\n                                                               ErrorRecoverySet.SColon,\n                                                               OperatorPrecedence.None,\n                                                               true, TypeContext.NoTypes);\n                        }\n                        needTerminator = true;\n                        retStmt.limChar = this.scanner.lastTokenLimChar();\n                        ast = retStmt;\n                        break;\n                    }\n                    case TokenID.Throw:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before a throw statement");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        if ((this.currentToken.tokenId != TokenID.Semicolon) &&\n                            (this.currentToken.tokenId != TokenID.CloseBrace) &&\n                            (!(this.scanner.lastTokenHadNewline()))) {\n                            temp = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                           OperatorPrecedence.None, true, TypeContext.NoTypes);\n                        }\n                        else {\n                            this.reportParseError("throw with no target");\n                            temp = null;\n                        }\n                        ast = new UnaryExpression(NodeType.Throw, temp);\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        needTerminator = true;\n                        break;\n                    case TokenID.Enum:\n                        // TODO: check module allowed here\n                        //minChar=scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        ast = this.parseEnumDecl(errorRecoverySet, modifiers);\n                        ast.minChar = minChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                            (<ModuleDeclaration>ast).modFlags |= ModuleFlags.Ambient;\n                        }\n                        if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                            (<ModuleDeclaration>ast).modFlags |= ModuleFlags.Exported;\n                        }\n                        break;\n                    case TokenID.Debugger:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before debugger statement");\n                        }\n                        \n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var debuggerStmt = new DebuggerStatement();\n                        debuggerStmt.minChar = minChar;\n                        needTerminator = true;\n                        debuggerStmt.limChar = this.scanner.lastTokenLimChar();\n                        ast = debuggerStmt;\n                       ';
var v27249 = v27250 + ' break;\n                    default:\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before an expression statement or label");\n                        }\n                        minChar = this.scanner.startPos;\n                        var svPos = this.scanner.pos;\n                        temp = this.parseExpr(ErrorRecoverySet.Colon | ErrorRecoverySet.StmtStart |\n                                       errorRecoverySet, OperatorPrecedence.None, true,\n                                       TypeContext.NoTypes);\n                        if (this.scanner.pos == svPos) {\n                            // no progress\n                            this.currentToken = this.scanner.scan();\n                            ast = temp;\n                        }\n                        else if ((this.currentToken.tokenId == TokenID.Colon) && (!this.scanner.lastTokenHadNewline()) &&\n                                        temp && (temp.nodeType == NodeType.Name)) {\n                                            // It\'s a label\n                            if (labelList == null) {\n                                labelList = new ASTList();\n                            }\n                            labelList.append(new Label(<Identifier>temp));\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else {\n                            // expression statement\n                            ast = temp;\n                            needTerminator = true;\n                        }\n                }\n                if (ast) {\n                    break;\n                }\n            }\n            if (needTerminator) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.Semicolon:\n                        this.currentToken = this.scanner.scan();\n                        ast.flags |= ASTFlags.ExplicitSemicolon;\n                        break;\n                    case TokenID.EndOfFile:\n                        // Extend any incomplete statements to include EOF token. This makes sure that this node is in the path \n                        // when completion or parameter help is requested.\n                        ast.limChar = this.scanner.pos;\n                        // IntentionaCloseBracethrough\n                    case TokenID.CloseBrace:\n                        ast.flags |= ASTFlags.AutomaticSemicolon;\n                        if (this.style_requireSemi) {\n                            this.reportParseStyleError("no automatic semicolon");\n                        }\n                        break;\n                    default:\n                        if (!this.scanner.lastTokenHadNewline()) {\n                            this.reportParseError("Expected \';\'");\n                        }\n                        else {\n                            ast.flags |= ASTFlags.AutomaticSemicolon;\n                            if (this.style_requireSemi) {\n                                this.reportParseStyleError("no automatic semicolon");\n                            }\n                        }\n                        break;\n                }\n            }\n            if (labelList) {\n                ast = new LabeledStatement(labelList, ast);\n            }\n\n            ///////////////////////////////////////////////////////////\n            //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n            //      as they are sometimes not specific enough for each statement kind.\n            ast.minChar = minChar;\n            // Only update "limChar" if it is not better than "lastTokenLimChar()"\n            ast.limChar = max(ast.limChar, this.scanner.lastTokenLimChar());\n            //\n            ///////////////////////////////////////////////////////////\n\n            if (preComments) {\n                ast.preComments = preComments;\n            }\n            if (this.ambientModule && (!this.okAmbientModuleMember(ast))) {\n                this.reportParseError("statement not permitted within ambient module");\n            }\n            ast.flags |= ASTFlags.IsStatement;\n            return ast;\n        }\n\n        private okAmbientModuleMember(ast: AST) {\n            var nt = ast.nodeType;\n            return (nt == NodeType.ClassDeclaration) || (nt == NodeType.ImportDeclaration) || (nt == NodeType.InterfaceDeclaration) || (nt == NodeType.ModuleDeclaration) ||\n                (nt == NodeType.Empty) || (nt == NodeType.VarDecl) || \n                ((nt == NodeType.Block) && !(<Block>ast).isStatementBlock) ||\n                ((nt == NodeType.FuncDecl) && ((<FuncDecl>ast).isMethod()));\n        }\n\n        private parseStatementList(errorRecoverySet: ErrorRecoverySet,\n                                   statements: ASTList,\n                                   sourceElms: bool,\n                                   noLeadingCase: bool,\n                                   allowedElements: A';
var v27248 = v27249 + 'llowedElements,\n                                   parentModifiers: Modifiers): void {\n            var directivePrologue = sourceElms;\n            statements.minChar = this.scanner.startPos;\n            var limChar = this.scanner.pos;\n            var innerStmts = (allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None;\n            var classNope = (allowedElements & AllowedElements.ClassDeclarations) == AllowedElements.None;\n\n            errorRecoverySet |= ErrorRecoverySet.TypeScriptS | ErrorRecoverySet.RCurly;\n\n            this.state = ParseState.StartStatementList;\n            var oldStrictMode = this.strictMode;\n            this.nestingLevel++;\n            for (; ;) {\n                if ((this.currentToken.tokenId == TokenID.CloseBrace) ||\n                    (noLeadingCase && ((this.currentToken.tokenId == TokenID.Case) || (this.currentToken.tokenId == TokenID.Default))) ||\n                    (innerStmts && (this.currentToken.tokenId == TokenID.Export)) ||\n                    (classNope && (this.currentToken.tokenId == TokenID.Class)) ||\n                    (this.currentToken.tokenId == TokenID.EndOfFile)) {\n                    this.state = ParseState.EndStmtList;\n                    statements.limChar = limChar;\n                    if (statements.members.length == 0) {\n                        statements.preComments = this.parseComments();\n                    }\n                    else {\n                        statements.postComments = this.parseComments();\n                    }\n                    this.strictMode = oldStrictMode;\n                    this.nestingLevel--;\n                    return;\n                }\n\n                var stmt = this.parseStatement(errorRecoverySet &\n                                        (~(ErrorRecoverySet.Else | ErrorRecoverySet.RParen |\n                                           ErrorRecoverySet.Catch | ErrorRecoverySet.Colon)),\n                                        allowedElements, parentModifiers);\n\n\n                if (stmt) {\n                    stmt.postComments = this.combineComments(stmt.postComments, this.parseCommentsForLine(this.scanner.prevLine));\n                    statements.append(stmt);\n                    limChar = stmt.limChar;\n                    if (directivePrologue) {\n                        if (stmt.nodeType == NodeType.QString) {\n                            var qstring = <StringLiteral>stmt;\n                            if (qstring.text == "\\"use strict\\"") {\n                                statements.flags |= ASTFlags.StrictMode;\n                                this.strictMode = true;\n                            }\n                            else {\n                                directivePrologue = false;\n                            }\n                        }\n                        else {\n                            directivePrologue = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        private fname = "";\n\n        public quickParse(sourceText: ISourceText, filename: string, unitIndex: number): QuickParseResult {\n            //TODO: REVIEW: We set this to avoid adding a "module" decl in the resulting script (see parse() method)\n            var svGenTarget = TypeScript.moduleGenTarget;\n            try {\n                TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Local;\n                var script = this.parse(sourceText, filename, unitIndex, AllowedElements.QuickParse);\n                return new QuickParseResult(script, this.scanner.lexState);\n            }\n            finally {\n                TypeScript.moduleGenTarget = svGenTarget;\n            }\n        }\n\n        public parse(sourceText: ISourceText, filename: string, unitIndex: number, allowedElements = AllowedElements.Global): Script {\n            // Reset all parser state here.  This allows us to be resilient to reentrancy if an \n            // exception is thrown.\n            this.fname = filename;\n            this.currentUnitIndex = unitIndex;\n\n            this.currentToken = null;\n            this.needTerminator = false;\n            this.inFunction = false;\n            this.inInterfaceDecl = false;\n            this.inFncDecl = false;\n            this.state = ParseState.StartStatementList;\n            this.ambientModule = false;\n            this.ambientClass = false;\n            this.topLevel = true;\n            this.allowImportDeclaration = true;\n            this.prevIDTok = null;\n            this.statementInfoStack = new IStatementInfo[];\n            this.hasTopLevelImportOrExport = false;\n            this.strictMode = false;\n            this.nestingLevel = 0;\n            this.prevExpr = null;\n            this.currentClassDefinition = null;\n            this.parsingClassConstructorDefinition = false;\n            this.parsingDeclareFile = false;\n            this.amdDependencies = [];\n            this.inferPropertiesFromThisAssignment = false;\n            this.requiresExtendsBlock = false;\n\n';
var v27247 = v27248 + '            this.scanner.resetComments();\n            this.scanner.setErrorHandler((message) =>this.reportParseError(message));\n            this.scanner.setSourceText(sourceText, LexMode.File);\n\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var minChar = this.scanner.pos;\n            this.currentToken = this.scanner.scan();\n            this.pushDeclLists();\n            var bod = new ASTList();\n            bod.minChar = minChar;\n\n            this.state = ParseState.StartScript;\n            this.parsingDeclareFile = isDSTRFile(filename) || isDTSFile(filename);\n\n            while (true) {\n                this.parseStatementList(\n                    ErrorRecoverySet.EOF | ErrorRecoverySet.Func,\n                    bod, /*sourceElements:*/ true, /*noLeadingCase:*/ false,\n                    allowedElements, Modifiers.None);\n\n                if (this.currentToken.tokenId === TokenID.EndOfFile) {\n                    break;\n                }\n\n                // Still have remaining tokens in the file.  Report error for this unexpected token,\n                // skip it, and continue trying to parse statements until we\'re done. \n                var badToken = tokenTable[this.currentToken.tokenId];\n                this.reportParseError("Unexpected statement block terminator \'" + badToken.text + "\'");\n\n                this.currentToken = this.scanner.scan();\n            }\n\n            this.state = ParseState.EndScript;\n\n            bod.limChar = this.scanner.pos;\n\n            var topLevelMod: ModuleDeclaration = null;\n            if (moduleGenTarget != ModuleGenTarget.Local && this.hasTopLevelImportOrExport) {\n                var correctedFileName = switchToForwardSlashes(filename);\n                var id: Identifier = new Identifier(correctedFileName);\n                topLevelMod = new ModuleDeclaration(id, bod, this.topVarList(), this.topScopeList(), null);\n\n                topLevelMod.modFlags |= ModuleFlags.IsDynamic;\n                topLevelMod.modFlags |= ModuleFlags.IsWholeFile;\n                topLevelMod.modFlags |= ModuleFlags.Exported;\n\n                if (this.parsingDeclareFile) {\n                    topLevelMod.modFlags |= ModuleFlags.Ambient;\n                }\n\n                topLevelMod.minChar = minChar;\n                topLevelMod.limChar = this.scanner.pos;\n                topLevelMod.prettyName = getPrettyName(correctedFileName);\n                topLevelMod.containsUnicodeChar = this.scanner.seenUnicodeChar;\n                topLevelMod.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n\n                topLevelMod.amdDependencies = this.amdDependencies;\n\n                bod = new ASTList();\n                bod.minChar = topLevelMod.minChar;\n                bod.limChar = topLevelMod.limChar;\n                bod.append(topLevelMod);\n            }\n\n            var script = new Script(this.topVarList(), this.topScopeList());\n            script.bod = bod;\n            this.popDeclLists();\n            script.minChar = minChar;\n            script.limChar = this.scanner.pos;\n            script.locationInfo = new LocationInfo(filename, this.scanner.lineMap, unitIndex);\n            script.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            script.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            script.isDeclareFile = this.parsingDeclareFile;\n            script.topLevelMod = topLevelMod;\n            script.containsUnicodeChar = this.scanner.seenUnicodeChar;\n            script.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n            script.requiresExtendsBlock = this.requiresExtendsBlock;\n            return script;\n        }\n    }\n\n    export function quickParse(logger: TypeScript.ILogger, scopeStartAST: AST, sourceText: ISourceText, minChar: number, limChar: number,\n        errorCapture: (minChar: number, charLen: number, message: string, unitIndex: number) => void ): QuickParseResult {\n\n        var fragment = sourceText.getText(minChar, limChar);\n        logger.log("Quick parse range (" + minChar + "," + limChar + "): \\"" + TypeScript.stringToLiteral(fragment, 100) + "\\"");\n\n        var quickParser = new Parser();\n        quickParser.setErrorRecovery(null);\n        quickParser.errorCallback = errorCapture;\n\n        // REVIEW: use enclosing scope to determine this\n        // REVIEW: Why even use class here?\n        var quickClassDecl = new ClassDeclaration(null, null, null, null);\n        quickParser.currentClassDecl = quickClassDecl;\n\n        var result = quickParser.quickParse(new StringSourceText(fragment), "", 0);\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/license';
var v27246 = v27247 + 's/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // We need to catch both left and right quotes\n    // (depending on your editor\'s font, this may not be clear...)    \n    export function stripQuotes(str: string) {\n        return str.replace("\\"", "").replace("\'", "").replace("\'", "").replace("\\"", "")\n    }\n\n    export function isQuoted(str: string) {\n        return str.indexOf("\\"") != -1 || str.indexOf("\'") != -1 || str.indexOf("\'") != -1 || str.indexOf("\\"") != -1;\n    }\n\n    export function quoteStr(str: string) {\n        return "\\"" + str + "\\"";\n    }\n\n    export function swapQuotes(str: string) {\n\n        if (str.indexOf("\\"") != -1) {\n            str = str.replace("\\"", "\'");\n            str = str.replace("\\"", "\'");\n        }\n        else {\n            str = str.replace("\'", "\\"");\n            str = str.replace("\'", "\\"");\n        }\n\n        return str;\n    }\n\n    export function switchToForwardSlashes(path: string) {\n        return path.replace(/\\\\/g, "/");\n    }\n\n    export function trimModName(modName: string) {\n        // in case\'s it\'s a declare file...\n        if (modName.length > 6 && modName.substring(modName.length - 6, modName.length) == ".d.str") {\n            return modName.substring(0, modName.length - 6);\n        }\n        if (modName.length > 4 && modName.substring(modName.length - 4, modName.length) == ".str") {\n            return modName.substring(0, modName.length - 4);\n        }\n        if (modName.length > 5 && modName.substring(modName.length - 5, modName.length) == ".d.ts") {\n            return modName.substring(0, modName.length - 5);\n        }\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".ts") {\n            return modName.substring(0, modName.length - 3);\n        }\n        // in case\'s it\'s a .js file\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".js") {\n            return modName.substring(0, modName.length - 3);\n        }\n\n        return modName;\n    }\n\n    export function getDeclareFilePath(fname: string) {\n        return isSTRFile(fname) ? changePathToDSTR(fname) : isTSFile(fname) ? changePathToDTS(fname) : changePathToDTS(fname);\n    }\n\n    function isFileOfExtension(fname: string, ext: string) {\n        var invariantFname = fname.toLocaleUpperCase();\n        var invariantExt = ext.toLocaleUpperCase();\n        var extLength = invariantExt.length;\n        return invariantFname.length > extLength && invariantFname.substring(invariantFname.length - extLength, invariantFname.length) == invariantExt;\n    }\n\n    export function isJSFile(fname: string) {\n        return isFileOfExtension(fname, ".js");\n    }\n\n    export function isSTRFile(fname: string) {\n        return isFileOfExtension(fname, ".str");\n    }\n\n    export function isTSFile(fname: string) {\n        return isFileOfExtension(fname, ".ts");\n    }\n\n    export function isDSTRFile(fname: string) {\n        return isFileOfExtension(fname, ".d.str");\n    }\n\n    export function isDTSFile(fname: string) {\n        return isFileOfExtension(fname, ".d.ts");\n    }\n\n    export function getPrettyName(modPath: string, quote?=true, treatAsFileName?=false) { \n        var modName = treatAsFileName ? switchToForwardSlashes(modPath) : trimModName(stripQuotes(modPath));\n        var components = this.getPathComponents(modName);\n        return components.length ? (quote ? quoteStr(components[components.length - 1]) : components[components.length - 1]) : modPath;\n    }\n\n    export function getPathComponents(path: string) {\n        return path.split("/");\n    }\n\n    export function getRelativePathToFixedPath(fixedModFilePath: string, absoluteModPath: string) {\n        absoluteModPath = switchToForwardSlashes(absoluteModPath);\n\n        var modComponents = this.getPathComponents(absoluteModPath);\n        var fixedModComponents = this.getPathComponents(fixedModFilePath);\n\n        // Find the component that differs\n        var joinStartIndex = 0;\n        for (; joinStartIndex < modComponents.length && joinStartIndex < fixedModComponents.length ; joinStartIndex++) {\n            if (fixedModComponents[joinStartIndex] != modComponents[joinStartIndex]) {\n                break;\n            }\n        }\n\n        // Get the relative path\n        if (joinStartIndex != 0) {\n            var relativePath = "";\n            var relativePathComponents = modComponents.slice(joinStartIndex, modComponents.length);\n            for (; joinStartIndex < fixedModComponents.length; joinStartIndex++) {\n                if (fixedModComponents[joinStartIndex] != "") {\n                    relativePath = relativePath + "../";\n      ';
var v27245 = v27246 + '          }\n            }\n\n            return relativePath + relativePathComponents.join("/");\n        }\n\n        return absoluteModPath;\n    }\n\n    export function quoteBaseName(modPath: string) {\n        var modName = trimModName(stripQuotes(modPath));\n        var path = getRootFilePath(modName);\n        if (path == "") {\n            return modPath;\n        }\n        else {\n            var components = modName.split(path);\n            var fileIndex = components.length > 1 ? 1 : 0;\n            return quoteStr(components[fileIndex]);\n        }\n    }\n\n    export function changePathToSTR(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".str";\n    }\n\n    export function changePathToDSTR(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".d.str";\n    }\n\n    export function changePathToTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".ts";\n    }\n\n    export function changePathToDTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".d.ts";\n    }\n\n    export function isRelative(path: string) {\n        return path.charAt(0) == ".";\n    }\n    export function isRooted(path: string) {\n        return path.charAt(0) == "\\\\" || path.charAt(0) == "/" || (path.indexOf(":\\\\") != -1) || (path.indexOf(":/") != -1);\n    }\n\n    export function getRootFilePath(outFname: string) {\n        if (outFname == "") {\n            return outFname;\n        }\n        else {\n            var isPath = outFname.indexOf("/") != -1;\n            return isPath ? filePath(outFname) : "";\n        }\n    }\n\n    export function filePathComponents(fullPath: string) {\n        fullPath = switchToForwardSlashes(fullPath);\n        var components = getPathComponents(fullPath);\n        return components.slice(0, components.length - 1);\n    }\n\n    export function filePath(fullPath: string) {\n        var path = filePathComponents(fullPath);\n        return path.join("/") + "/";\n    }\n\n    export function normalizeURL(url: string): string {\n        var hostDomainAndPortRegex = /^(https?:\\/\\/[\\-\\w\\.]+(:\\d+)?\\/)(.*)$/i;\n        var matches = hostDomainAndPortRegex.exec(url);\n        if (matches) {\n            var hostDomainAndPort = matches[1];\n            var actualPath = matches[3];\n            return hostDomainAndPort + normalizePath(actualPath);\n        }\n        return normalizePath(url);\n    }\n\n    export var pathNormalizeRegExp = /\\//g;\n\n    export function normalizePath(path: string): string {\n        path = switchToForwardSlashes(path);\n        var startedWithSep = path.charAt(0) === "/";\n        var parts = this.getPathComponents(path);\n        for (var i = 0; i < parts.length; i++) {\n            if (parts[i] === "." || parts[i] === "") {\n                parts.splice(i, 1);\n                i--;\n            }\n            if (i > 0 && parts[i] === ".." && parts[i - 1] !== "..") {\n                parts.splice(i - 1, 2);\n                i -= 2;\n            }\n        }\n        return (startedWithSep ? "/" : "") + parts.join("/");\n    }\n\n    export function normalizeImportPath(path: string): string {\n        return normalizePath(path);\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    /// Compiler settings\n\n    export class StyleSettings {\n        // bitwise operations not permitted\n        public bitwise = false;  \n        // disallow non-block statements as bodies of compound statements\n        public blockInCompoundStmt = false;\n        // disallow == and !=\n        public eqeqeq = false;\n        // require body of for in loop to start with a filter\n        public forin = false;\n        // empty blocks permitted\n        public emptyBlocks = true;\n        // require result of new expression to be used (no new just for side-effects)\n        public newMustBeUsed = false;\n        // require semicolons to terminate statements\n        public requireSemi = false;\n        // no top-level assignment in conditionals if (a=b) { ...\n        public assignmentInCond = false;\n        // no == null or != null\n        public eqnull = false;\n        // permit eval\n        public evalOK = true;\n        // permit var use if decl in inner scope as in if (c) { var v=10; } v=11;\n        public innerScopeDeclEscape = true;\n        // permit functions in loops\n        public funcInLoop = true;\n        // permit re-declaration of local variable \n        public reDecl';
var v27244 = v27245 + 'areLocal = true;\n        // permit obj[\'x\'] in addition to obj.x\n        public literalSubscript = true;\n        // flag implicit \'any\'\n        public implicitAny = false;\n\n        public setOption(opt: string, val: bool): bool {\n            var optExists = this[opt];\n            if (optExists !== undefined) {\n                this[opt] = val;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        \n        public parseOptions(str: string) {\n            var opts=str.split(";");\n            for (var i = 0, len = opts.length; i < len; i++) {\n                var opt = opts[i];\n                var val = true;\n                var colonIndex=opt.lastIndexOf(":");\n                if (colonIndex >= 0) {\n                    var valStr = opt.substring(colonIndex+1);\n                    opt = opt.substring(0, colonIndex);\n                    if (valStr == "off") {\n                        val = false;\n                    }\n                }\n                if (!this.setOption(opt, val)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    \n    export class CompilationSettings {\n        public styleSettings = new StyleSettings();\n        public propagateConstants = false;\n        public minWhitespace = false;\n        public parseOnly = false;\n        public errorRecovery = false;\n        public emitComments = false;\n        public watch = false;\n        public exec = false;\n        public resolve = true;\n        public controlFlow = false;\n        public printControlFlow = false;\n        public controlFlowUseDef = false;\n        public errorOnWith = true;\n        public preprocess = true;\n        public canCallDefinitionSignature = false;\n\n        public inferPropertiesFromThisAssignment = false;\n        public useDefaultLib = true;\n\n        public codeGenTarget = CodeGenTarget.ES3;\n        public moduleGenTarget = ModuleGenTarget.Synchronous;\n        // --out option passed. \n        // Default is the "" which leads to multiple files generated next to the.ts files\n        public outputOption: string = "";\n        public mapSourceFiles = false;\n        public generateDeclarationFiles = false;\n\n        public useCaseSensitiveFileResolution = false;\n\n        public setStyleOptions(str: string) {\n            this.styleSettings.parseOptions(str);\n        }\n    }\n\n    ///\n    /// Preprocessing\n    ///\n    export interface IPreProcessedFileInfo {\n        settings: CompilationSettings;\n        referencedFiles: IFileReference[];\n        importedFiles: IFileReference[];\n        isLibFile: bool;\n    }\n\n    function getFileReferenceFromReferencePath(comment: string): IFileReference {\n        var referencesRegEx = /^(\\/\\/\\/\\s*<reference\\s+path=)(\'|")(.+?)\\2\\s*(static=(\'|")(.+?)\\2\\s*)*\\/>/gim;\n        var match = referencesRegEx.exec(comment);\n\n        if (match) {\n            var path: string = normalizePath(match[3]);\n            var adjustedPath = normalizePath(path);\n    \n            var isResident = match.length >= 7 && match[6] == "true";\n            if (isResident) {\n                CompilerDiagnostics.debugPrint(path + " is resident");\n            }\n            return { minChar: 0, limChar: 0, path: switchToForwardSlashes(adjustedPath), isResident: isResident };\n        }\n        else {\n            return null;\n        }\n    }\n\n    // used in the parser, but kept here in case we want to reintegrate it with preprocessing\n    export function getAdditionalDependencyPath(comment: string): string {\n        var amdDependencyRegEx = /^(\\/\\/\\/\\s*<amd-dependency\\s+path=)(\'|")(.+?)\\2\\s*(static=(\'|")(.+?)\\2\\s*)*\\/>/gim;\n        var match = amdDependencyRegEx.exec(comment);\n\n        if (match) {\n            var path: string = match[3];\n            return path;\n        }\n        else {\n            return null;\n        }\n    }\n\n    export function getImplicitImport(comment: string): bool {\n        var implicitImportRegEx = /^(\\/\\/\\/\\s*<implicit-import\\s*)*\\/>/gim;\n        var match = implicitImportRegEx.exec(comment);\n\n        if (match) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    export function getStyleSettings(comment: string, styleSettings: StyleSettings) {\n        var styleRegEx = /^(\\/\\/\\/\\s*<style\\s+)(([a-zA-Z])+=(\'|").+(\'|"))\\s*\\/>/gim;\n\n        var settings = styleRegEx.exec(comment);\n\n        if (settings) {\n            var settingsRegEx = /^([a-zA-Z]+=[\'"]on[\'|"])/gim;\n            settings = settingsRegEx.exec(settings[2]);\n                \n            if (settings) {\n                for (var i = 0; i < settings.length; i++) {\n                    var setting = (<string>settings[i]).split("=");\n                    var on = "\\"on\\"";\n\n                    switch (setting[0]) {\n                        case "blockInCompoundStmt": styleSettings.blockInCompoundStmt = setting[1] == on; break;\n                        case "eqeqeq": styleSettings.eqeqeq = setting[1] == on; break;';
var v27243 = v27244 + '\n                        case "forin": styleSettings.forin = setting[1] == on; break;\n                        case "emptyBlocks": styleSettings.emptyBlocks = setting[1] == on; break;\n                        case "newMustBeUsed": styleSettings.newMustBeUsed = setting[1] == on; break;\n                        case "requireSemi": styleSettings.requireSemi = setting[1] == on; break;\n                        case "assignmentInCond": styleSettings.assignmentInCond = setting[1] == on; break;\n                        case "eqnull": styleSettings.eqnull = setting[1] == on; break;\n                        case "evalOK": styleSettings.evalOK = setting[1] == on; break;\n                        case "innerScopeDeclEscape": styleSettings.innerScopeDeclEscape = setting[1] == on; break;\n                        case "funcInLoop": styleSettings.funcInLoop = setting[1] == on; break;\n                        case "reDeclareLocal": styleSettings.reDeclareLocal = setting[1] == on; break;\n                        case "literalSubscript": styleSettings.literalSubscript = setting[1] == on; break;\n                        case "implicitAny": styleSettings.implicitAny = setting[1] == on; break;                               \n                    }\n                }\n            }\n        }\n    }\n\n    export function getReferencedFiles(sourceText: ISourceText): IFileReference[] {\n        var preProcessInfo = preProcessFile(sourceText, null, false);\n        return preProcessInfo.referencedFiles;\n    }\n\n    export function preProcessFile(sourceText: ISourceText, options=new CompilationSettings(), readImportFiles? = true): IPreProcessedFileInfo {\n        var scanner = new Scanner();\n        scanner.resetComments();\n        scanner.setSourceText(sourceText, LexMode.File);\n\n        var tok: Token = scanner.scan();\n        var comments: CommentToken[] = [];\n        var comment: CommentToken = null;\n        var leftCurlies: Token[] = [];\n\n        var settings: CompilationSettings = options;\n        var referencedFiles: IFileReference[] = [];\n        var importedFiles: IFileReference[] = [];\n        var isLibFile: bool = false;\n\n        // only search out dynamic mods\n        // if you find a dynamic mod, ignore every other mod inside, until you balance rcurlies\n\n        while (tok.tokenId != TokenID.EndOfFile) {\n\n            if (readImportFiles && tok.tokenId == TokenID.Import) {\n\n                tok = scanner.scan();\n\n                if (tok.tokenId == TokenID.Identifier || convertTokToID(tok, false)) {\n                    tok = scanner.scan();\n\n                    if (tok.tokenId == TokenID.Equals) {\n                        tok = scanner.scan();\n\n                        if (tok.tokenId == TokenID.Module) {\n                            tok = scanner.scan();\n                            if (tok.tokenId == TokenID.OpenParen) {\n                                tok = scanner.scan();\n\n                                // import foo = module("foo")\n                                if (tok.tokenId == TokenID.StringLiteral) {\n                                    var ref = { minChar: scanner.startPos, limChar: scanner.pos, path: stripQuotes(switchToForwardSlashes(tok.getText())), isResident: false };\n                                    importedFiles.push(ref);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (tok.tokenId == TokenID.OpenBrace) {\n                leftCurlies.push(tok);\n            }\n\n            if (tok.tokenId == TokenID.CloseBrace) {\n                leftCurlies.pop();\n            }\n\n            tok = scanner.scan();\n        }\n\n        // deal with comment references, amd dependencies and style settings\n        // REVIEW: We could potentially do this inline with the above, if we\n        // set Scanner::scanComments to \'true\'\n        comments = scanner.getComments();\n\n        for (var iComment = 0; iComment < comments.length; iComment++) {\n            comment = comments[iComment];\n            \n            if (!comment.isBlock) {\n                var referencedCode = getFileReferenceFromReferencePath(comment.getText());\n                if (referencedCode) {\n                    referencedCode.minChar = comment.startPos;\n                    referencedCode.limChar = referencedCode.minChar + comment.value.length;\n                    referencedFiles.push(referencedCode);\n                }\n\n                if (settings) {\n                    getStyleSettings(comment.getText(), settings.styleSettings);\n\n                    // is it a lib file?\n                    var isNoLibRegex = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib=)(\'|")(.+?)\\2\\s*\\/>/gim;\n                    var isNoLibMatch: any = isNoLibRegex.exec(comment.getText());\n                    if (isNoLibMatch) {\n                        isLibFile = (isNoLibMatch[3] == "true");\n                    }\n                }\n            }\n        }\n\n        return { settings: settings, referencedFiles: refere';
var v27242 = v27243 + 'ncedFiles, importedFiles: importedFiles, isLibFile: isLibFile };\n    }\n\n} // Tools//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // TODO: refactor indent logic for use in emit\n    export class PrintContext {\n        public builder = "";\n        public indent1 = "  ";\n        public indentStrings: string[] = [];\n        public indentAmt = 0;\n\n        constructor (public outfile: ITextWriter, public parser: Parser) {\n        }\n\n        public increaseIndent() {\n            this.indentAmt++;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt--;\n        }\n\n        public startLine() {\n            if (this.builder.length > 0) {\n                CompilerDiagnostics.Alert(this.builder);\n            }\n            var indentString = this.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = "";\n                for (var i = 0; i < this.indentAmt; i++) {\n                    indentString += this.indent1;\n                }\n                this.indentStrings[this.indentAmt] = indentString;\n            }\n            this.builder += indentString;\n        }\n\n        public write(s) {\n            this.builder += s;\n        }\n\n        public writeLine(s) {\n            this.builder += s;\n            this.outfile.WriteLine(this.builder);\n            this.builder = "";\n        }\n\n    }\n\n    export function prePrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n\n        ast.print(pc);\n        pc.increaseIndent();\n        return ast;\n    }\n\n\n    export function postPrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n        pc.decreaseIndent();\n        return ast;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export interface IResolvedFile {\n        content: string;\n        path: string;\n    }\n\n    /// This class acts as a convenience class to store path and content information in places\n    /// where we need an ISourceText object\n    export class SourceUnit implements ISourceText, IResolvedFile {\n        public referencedFiles: IFileReference[] = null;\n        constructor(public path: string, public content: string) {\n        }\n\n        public getText(start: number, end: number): string { return this.content.substring(start, end); }\n        public getLength(): number { return this.content.length; }\n    }\n\n    export interface IFileReference {\n        minChar: number;\n        limChar: number;\n        path: string;\n        isResident: bool;\n    }\n\n    /// Limited API for file system manipulation\n    export interface IFileSystemObject {\n        resolvePath(path: string): string;\n        readFile(path: string): string;\n        findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n        dirName(path: string): string;\n    }\n\n    export class CompilationEnvironment {\n        constructor (public compilationSettings: CompilationSettings, public ioHost: IFileSystemObject) { }\n        public residentCode: SourceUnit[] = [];\n        public code: SourceUnit[] = [];\n    }\n\n    export interface IResolutionDispatcher {\n        postResolutionError(errorFile: string, errorMessage: string, errorObject: any): void;\n        postResolution(path: string, source: ISourceText): void;\n    }\n\n    export interface ICodeResolver {\n        resolveCode(referencePath: string, rootPath: string, performSearch:bool, state: IResolutionDispatcher): void;\n    }\n\n    export interface IResolverHost {\n        resolveCompilationEnvironment(preEnvironment: CompilationEnvironment, resolver: ICodeResolver, traceDependencies: bool): CompilationEnvironment;\n    }\n\n    export class CodeResolver implements T';
var v27241 = v27242 + 'ypeScript.ICodeResolver {\n        public visited: any = { };\n\n        constructor (public environment: CompilationEnvironment) { }\n\n        public resolveCode(referencePath: string, parentPath: string, performSearch: bool, resolutionDispatcher: TypeScript.IResolutionDispatcher): void {\n            \n            var resolvedFile: IResolvedFile = { content: null, path: referencePath };\n            \n            var ioHost = this.environment.ioHost;\n            \n            // If the path is relative, normalize it, based on the root\n            var isRelativePath = TypeScript.isRelative(referencePath);\n            var isRootedPath = isRelativePath ? false : isRooted(referencePath);\n            var normalizedPath: string = \n                isRelativePath ? ioHost.resolvePath(parentPath + "/" + referencePath) : \n                // we only follow the second clause if the path is a non-rooted triple-slash reference path\n                (isRootedPath || !parentPath || performSearch ? referencePath : parentPath + "/" + referencePath);\n\n            // We use +=.ts to make sure we don\'t accidentally pick up ".js" files or the like\n            if (!isSTRFile(normalizedPath) && !isTSFile(normalizedPath)) {\n                normalizedPath += ".ts";  //changePathToSTR(normalizedPath);\n            }\n\n            normalizedPath = switchToForwardSlashes(stripQuotes(normalizedPath));\n            var absoluteModuleID = this.environment.compilationSettings.useCaseSensitiveFileResolution ? normalizedPath : normalizedPath.toLocaleUpperCase();\n            // read the file contents - if it doesn\'t exist, trigger a resolution error\n            if (!this.visited[absoluteModuleID]) {\n\n                // if the path is relative, or came from a reference tag, we don\'t perform a search\n                if (isRelativePath || isRootedPath || !performSearch) {\n                    try {\n                        CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                            \n                        // Look for the .ts file first - if not present, use the .ts, the .d.str and the .d.ts\n                        try {\n                            resolvedFile.content = ioHost.readFile(normalizedPath);\n                        }\n                        catch (err) {\n                            try {\n                                if (isSTRFile(normalizedPath)) {\n                                    normalizedPath = changePathToTS(normalizedPath);\n                                }\n                                else if (isTSFile(normalizedPath)) {\n                                    normalizedPath = changePathToSTR(normalizedPath);\n                                }\n                                CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                                resolvedFile.content = ioHost.readFile(normalizedPath);\n                            }\n                            catch (err) {\n                                normalizedPath = changePathToDSTR(normalizedPath);\n                                CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n\n                                try {\n                                    resolvedFile.content = ioHost.readFile(normalizedPath);\n                                }\n                                catch (err) {\n                                    normalizedPath = changePathToDTS(normalizedPath);\n                                    CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                                    resolvedFile.content = ioHost.readFile(normalizedPath);\n                                }\n                            }\n                        }\n                        CompilerDiagnostics.debugPrint("   Found code at " + normalizedPath);\n\n                        resolvedFile.path = normalizedPath;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    catch (err) {\n                        CompilerDiagnostics.debugPrint("   Did not find code for " + referencePath);\n                    }\n                }\n                else {\n\n                    // if the path is non-relative, we should attempt to search on the relative path\n                    resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n\n                    if (!resolvedFile) {\n                        if (isSTRFile(normalizedPath)) {\n                            normalizedPath = changePathToTS(normalizedPath);\n                        }\n                        else if (isTSFile(normalizedPath)) {\n                            normalizedPath = changePathToSTR(normalizedPath);\n                        }\n                        resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                    }\n\n                    if (!resolvedFile) {\n                        normalizedPath = changePathToDTS(normalizedPath);\n                        resolvedFile = ioHo';
var v27240 = v27241 + "st.findFile(parentPath, normalizedPath);\n                        if (!resolvedFile) {\n                            normalizedPath = changePathToDSTR(normalizedPath);\n                            resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                        }\n                    }\n\n                    if (resolvedFile) {\n                        resolvedFile.path = switchToForwardSlashes(TypeScript.stripQuotes(resolvedFile.path));\n                        CompilerDiagnostics.debugPrint(referencePath + \" resolved to: \" + resolvedFile.path);\n                        resolvedFile.content = resolvedFile.content;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    else {\n                        CompilerDiagnostics.debugPrint(\"Could not find \" + referencePath);\n                    }\n                }\n\n                if (resolvedFile && resolvedFile.content != null) {\n                    // preprocess the file, to gather dependencies\n                    var rootDir = ioHost.dirName(resolvedFile.path);\n                    var sourceUnit = new SourceUnit(resolvedFile.path, resolvedFile.content);\n                    var preProcessedFileInfo = preProcessFile(sourceUnit, this.environment.compilationSettings);\n                    sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;\n\n                    // resolve explicit references\n                    for (var i = 0; i < preProcessedFileInfo.referencedFiles.length; i++) {\n                        var referencedFile = preProcessedFileInfo.referencedFiles[i];\n                        var normalizedPath = isRooted(referencedFile.path) ? referencedFile.path : rootDir + \"/\" + referencedFile.path;\n                        normalizedPath = ioHost.resolvePath(normalizedPath);\n                        if (referencePath == normalizedPath) {\n                            resolutionDispatcher.postResolutionError(normalizedPath, \"File contains reference to itself\", null);\n                            continue;\n                        }\n                        this.resolveCode(referencedFile.path, rootDir, false, resolutionDispatcher);\n                    }\n                    \n                    // resolve imports\n                    for (var i = 0; i < preProcessedFileInfo.importedFiles.length; i++) {\n                        this.resolveCode(preProcessedFileInfo.importedFiles[i].path, rootDir, true, resolutionDispatcher);\n                    }\n\n                    // add the file to the appropriate code list\n                    resolutionDispatcher.postResolution(sourceUnit.path, sourceUnit);\n                }\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path='typescript.ts' />\n\nmodule TypeScript {\n\n    export var LexEOF = (-1);\n\n    export var LexCodeNWL = 0x0A;\n    export var LexCodeRET = 0x0D;\n    export var LexCodeLS =  0x2028;\n    export var LexCodePS =  0x2029;\n    export var LexCodeTAB = 0x09;\n    export var LexCodeVTAB = 0x0B;\n    export var LexCode_e = 'e'.charCodeAt(0);\n    export var LexCode_E = 'E'.charCodeAt(0);\n    export var LexCode_x = 'x'.charCodeAt(0);\n    export var LexCode_X = 'X'.charCodeAt(0);\n    export var LexCode_a = 'a'.charCodeAt(0);\n    export var LexCode_A = 'A'.charCodeAt(0);\n    export var LexCode_f = 'f'.charCodeAt(0);\n    export var LexCode_F = 'F'.charCodeAt(0);\n\n    export var LexCode_g = 'g'.charCodeAt(0);\n    export var LexCode_m = 'm'.charCodeAt(0);\n    export var LexCode_i = 'i'.charCodeAt(0);\n\n    export var LexCode_u = 'u'.charCodeAt(0);\n\n    export var LexCode_0 = '0'.charCodeAt(0);\n    export var LexCode_9 = '9'.charCodeAt(0);\n    export var LexCode_8 = '8'.charCodeAt(0);\n    export var LexCode_7 = '7'.charCodeAt(0);\n\n    export var LexCodeBSL = '\\\\'.charCodeAt(0);\n    export var LexCodeSHP = '#'.charCodeAt(0);\n    export var LexCodeBNG = '!'.charCodeAt(0);\n    export var LexCodeQUO = '\"'.charCodeAt(0);\n    export var LexCodeAPO = '\\''.charCodeAt(0);\n    export var LexCodePCT = '%'.charCodeAt(0);\n    export var LexCodeAMP = '&'.charCodeAt(0);\n    export var LexCodeLPR = '('.charCodeAt(0);\n    export var LexCodeRPR = ')'.charCodeAt(0);\n    export var LexCodePLS = '+'.charCodeAt(0);\n    export var LexCodeMIN = '-'.charCodeAt(0);\n    export var LexCodeMUL = '*'.charCodeAt(0);\n    export var LexCodeSLH = '/'.charCodeAt(0);\n    export var LexCodeXOR = '^'.";
var v27239 = v27240 + "charCodeAt(0);\n    export var LexCodeCMA = ','.charCodeAt(0);\n    export var LexCodeDOT = '.'.charCodeAt(0);\n    export var LexCodeLT = '<'.charCodeAt(0);\n    export var LexCodeEQ = '='.charCodeAt(0);\n    export var LexCodeGT = '>'.charCodeAt(0);\n    export var LexCodeQUE = '?'.charCodeAt(0);\n    export var LexCodeLBR = '['.charCodeAt(0);\n    export var LexCodeRBR = ']'.charCodeAt(0);\n    export var LexCodeUSC = '_'.charCodeAt(0);\n    export var LexCodeLC = '{'.charCodeAt(0);\n    export var LexCodeRC = '}'.charCodeAt(0);\n    export var LexCodeBAR = '|'.charCodeAt(0);\n    export var LexCodeTIL = '~'.charCodeAt(0);\n    export var LexCodeCOL = ':'.charCodeAt(0);\n    export var LexCodeSMC = ';'.charCodeAt(0);\n    export var LexCodeUnderscore = '_'.charCodeAt(0);\n    export var LexCodeDollar = '$'.charCodeAt(0);\n    export var LexCodeSpace = 32;\n    export var LexCodeAtSign = '@'.charCodeAt(0);\n    export var LexCodeASCIIChars = 128;\n\n    export var LexKeywordTable = undefined;\n    // TODO: use new Token[128];\n    var autoToken: Token[] = new Array(LexCodeASCIIChars);\n    var lexIdStartTable: bool[] = new Array(LexCodeASCIIChars);\n\n    // Unicode range maps\n    // REVIEW: These range maps have been extracted from the Unicode specifications, they might be missing values, and/or include \n    //         incorrect ranges. but for the most they seem to be correct. A more accurate and thorough review is needed.\n\n    /*\n        As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n        IdentifierStart :: Can contain Unicode 3.0.0  categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter (Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).\n        IdentifierPart :: Can contain IdentifierStart + Unicode 3.0.0  categories Non-spacing mark (Mn), Combining spacing mark (Mc), Decimal number (Nd), or Connector punctuation (Pc).\n                    \n        Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n        http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n    */\n    var unicodeES3IdStart = [\n\t\t170, 170,181, 181,186, 186,192, 214,216, 246,248, 543,546, 563,592, 685,688, 696,699, 705,720, 721,736, 740,750, 750,890, 890,902, 902,904, 906,908, 908,910, 929,931, 974,976, 983,986, 1011,1024, 1153,1164, 1220,1223, 1224,1227, 1228,1232, 1269,1272, 1273,1329, 1366,1369, 1369,1377, 1415,1488, 1514,\n\t\t1520, 1522,1569, 1594,1600, 1610,1649, 1747,1749, 1749,1765, 1766,1786, 1788,1808, 1808,1810, 1836,1920, 1957,2309, 2361,2365, 2365,2384, 2384,2392, 2401,2437, 2444,2447, 2448,2451, 2472,2474, 2480,2482, 2482,2486, 2489,2524, 2525,2527, 2529,2544, 2545,2565, 2570,2575, 2576,2579, 2600,2602, 2608,2610, 2611,\n\t\t2613, 2614,2616, 2617,2649, 2652,2654, 2654,2674, 2676,2693, 2699,2701, 2701,2703, 2705,2707, 2728,2730, 2736,2738, 2739,2741, 2745,2749, 2749,2768, 2768,2784, 2784,2821, 2828,2831, 2832,2835, 2856,2858, 2864,2866, 2867,2870, 2873,2877, 2877,2908, 2909,2911, 2913,2949, 2954,2958, 2960,2962, 2965,2969, 2970,\n\t\t2972, 2972,2974, 2975,2979, 2980,2984, 2986,2990, 2997,2999, 3001,3077, 3084,3086, 3088,3090, 3112,3114, 3123,3125, 3129,3168, 3169,3205, 3212,3214, 3216,3218, 3240,3242, 3251,3253, 3257,3294, 3294,3296, 3297,3333, 3340,3342, 3344,3346, 3368,3370, 3385,3424, 3425,3461, 3478,3482, 3505,3507, 3515,3517, 3517,\n\t\t3520, 3526,3585, 3632,3634, 3635,3648, 3654,3713, 3714,3716, 3716,3719, 3720,3722, 3722,3725, 3725,3732, 3735,3737, 3743,3745, 3747,3749, 3749,3751, 3751,3754, 3755,3757, 3760,3762, 3763,3773, 3773,3776, 3780,3782, 3782,3804, 3805,3840, 3840,3904, 3911,3913, 3946,3976, 3979,4096, 4129,4131, 4135,4137, 4138,\n\t\t4176, 4181,4256, 4293,4304, 4342,4352, 4441,4447, 4514,4520, 4601,4608, 4614,4616, 4678,4680, 4680,4682, 4685,4688, 4694,4696, 4696,4698, 4701,4704, 4742,4744, 4744,4746, 4749,4752, 4782,4784, 4784,4786, 4789,4792, 4798,4800, 4800,4802, 4805,4808, 4814,4816, 4822,4824, 4846,4848, 4878,4880, 4880,4882, 4885,\n\t\t4888, 4894,4896, 4934,4936, 4954,5024, 5108,5121, 5740,5743, 5750,5761, 5786,5792, 5866,6016, 6067,6176, 6263,6272, 6312,7680, 7835,7840, 7929,7936, 7957,7960, 7965,7968, 8005,8008, 8013,8016, 8023,8025, 8025,8027, 8027,8029, 8029,8031, 8061,8064, 8116,8118, 8124,8126, 8126,8130, 8132,8134, 8140,8144, 8147,\n\t\t8150, 8155,8160, 8172,8178, 8180,8182, 8188,8319, 8319,8450, 8450,8455, 8455,8458, 8467,8469, 8469,8473, 8477,8484, 8484,8486, 8486,8488, 8488,8490, 8493,8495, 8497,8499, 8505,8544, 8579,12293, 12295,12321, 12329,12337, 12341,12344, 12346,12353, 12436,12445, 12446,12449, 12538,12540, 12542,12549, 12588,\n\t\t12593, 12686,12704, 12727,13312, 13312,19893, 19893,19968, 19968,40869, 40869,40960, 42124,44032, 44032,55203, 55203,63744, 64045,64256, 64262,64275, 64279,64285, 64285,64287, 64296,64298, 64310,64312, 64316,64318, 64318,64320, 64321,64323, 64324,64326, 64433,64467, 64829,64848, 64911,64914, 64967,\n\t\t65008, 65019,65136, 65138,65140, 65140,65142, 65276,65313, 65338,65345, 65370,65382, 654";
var v27238 = v27239 + "70,65474, 65479,65482, 65487,65490, 65495,65498, 65500\n\t];\n\n\tvar unicodeES3IdCont = [\n\t\t768, 846,864, 866,1155, 1158,1425, 1441,1443, 1465,1467, 1469,1471, 1471,1473, 1474,1476, 1476,1611, 1621,1632, 1641,1648, 1648,1750, 1756,1759, 1764,1767, 1768,1770, 1773,1776, 1785,1809, 1809,1840, 1866,1958, 1968,2305, 2307,2364, 2364,2366, 2381,2385, 2388,2402, 2403,2406, 2415,2433, 2435,2492, 2492,\n\t\t2494, 2500,2503, 2504,2507, 2509,2519, 2519,2530, 2531,2534, 2543,2562, 2562,2620, 2620,2622, 2626,2631, 2632,2635, 2637,2662, 2673,2689, 2691,2748, 2748,2750, 2757,2759, 2761,2763, 2765,2790, 2799,2817, 2819,2876, 2876,2878, 2883,2887, 2888,2891, 2893,2902, 2903,2918, 2927,2946, 2947,3006, 3010,3014, 3016,\n\t\t3018, 3021,3031, 3031,3047, 3055,3073, 3075,3134, 3140,3142, 3144,3146, 3149,3157, 3158,3174, 3183,3202, 3203,3262, 3268,3270, 3272,3274, 3277,3285, 3286,3302, 3311,3330, 3331,3390, 3395,3398, 3400,3402, 3405,3415, 3415,3430, 3439,3458, 3459,3530, 3530,3535, 3540,3542, 3542,3544, 3551,3570, 3571,3633, 3633,\n\t\t3636, 3642,3655, 3662,3664, 3673,3761, 3761,3764, 3769,3771, 3772,3784, 3789,3792, 3801,3864, 3865,3872, 3881,3893, 3893,3895, 3895,3897, 3897,3902, 3903,3953, 3972,3974, 3975,3984, 3991,3993, 4028,4038, 4038,4140, 4146,4150, 4153,4160, 4169,4182, 4185,4969, 4977,6068, 6099,6112, 6121,6160, 6169,6313, 6313,\n\t\t8255, 8256,8400, 8412,8417, 8417,12330, 12335,12441, 12442,12539, 12539,64286, 64286,65056, 65059,65075, 65076,65101, 65103,65296, 65305,65343, 65343,65381, 65381\n\t];\n\n\n    /*\n        As per ECMAScript Language Specification 5th Edition, Section 7.6: Identifier Names and Identifiers\n        IdentifierStart :: Can contain Unicode 6.2  categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter (Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).\n        IdentifierPart :: Can contain IdentifierStart + Unicode 6.2  categories Non-spacing mark (Mn), Combining spacing mark (Mc), Decimal number (Nd), Connector punctuation (Pc), <ZWNJ>, or <ZWJ>.\n                    \n        Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\n        http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\n    */\n\tvar unicodeES5IdStart = [\n\t\t170, 170,181, 181,186, 186,192, 214,216, 246,248, 705,710, 721,736, 740,748, 748,750, 750,880, 884,886, 887,890, 893,902, 902,904, 906,908, 908,910, 929,931, 1013,1015, 1153,1162, 1319,1329, 1366,1369, 1369,1377, 1415,1488, 1514,1520, 1522,1568, 1610,1646, 1647,1649, 1747,1749, 1749,1765, 1766,1774, 1775,\n\t\t1786, 1788,1791, 1791,1808, 1808,1810, 1839,1869, 1957,1969, 1969,1994, 2026,2036, 2037,2042, 2042,2048, 2069,2074, 2074,2084, 2084,2088, 2088,2112, 2136,2208, 2208,2210, 2220,2308, 2361,2365, 2365,2384, 2384,2392, 2401,2417, 2423,2425, 2431,2437, 2444,2447, 2448,2451, 2472,2474, 2480,2482, 2482,2486, 2489,\n\t\t2493, 2493,2510, 2510,2524, 2525,2527, 2529,2544, 2545,2565, 2570,2575, 2576,2579, 2600,2602, 2608,2610, 2611,2613, 2614,2616, 2617,2649, 2652,2654, 2654,2674, 2676,2693, 2701,2703, 2705,2707, 2728,2730, 2736,2738, 2739,2741, 2745,2749, 2749,2768, 2768,2784, 2785,2821, 2828,2831, 2832,2835, 2856,2858, 2864,\n\t\t2866, 2867,2869, 2873,2877, 2877,2908, 2909,2911, 2913,2929, 2929,2947, 2947,2949, 2954,2958, 2960,2962, 2965,2969, 2970,2972, 2972,2974, 2975,2979, 2980,2984, 2986,2990, 3001,3024, 3024,3077, 3084,3086, 3088,3090, 3112,3114, 3123,3125, 3129,3133, 3133,3160, 3161,3168, 3169,3205, 3212,3214, 3216,3218, 3240,\n\t\t3242, 3251,3253, 3257,3261, 3261,3294, 3294,3296, 3297,3313, 3314,3333, 3340,3342, 3344,3346, 3386,3389, 3389,3406, 3406,3424, 3425,3450, 3455,3461, 3478,3482, 3505,3507, 3515,3517, 3517,3520, 3526,3585, 3632,3634, 3635,3648, 3654,3713, 3714,3716, 3716,3719, 3720,3722, 3722,3725, 3725,3732, 3735,3737, 3743,\n\t\t3745, 3747,3749, 3749,3751, 3751,3754, 3755,3757, 3760,3762, 3763,3773, 3773,3776, 3780,3782, 3782,3804, 3807,3840, 3840,3904, 3911,3913, 3948,3976, 3980,4096, 4138,4159, 4159,4176, 4181,4186, 4189,4193, 4193,4197, 4198,4206, 4208,4213, 4225,4238, 4238,4256, 4293,4295, 4295,4301, 4301,4304, 4346,4348, 4680,\n\t\t4682, 4685,4688, 4694,4696, 4696,4698, 4701,4704, 4744,4746, 4749,4752, 4784,4786, 4789,4792, 4798,4800, 4800,4802, 4805,4808, 4822,4824, 4880,4882, 4885,4888, 4954,4992, 5007,5024, 5108,5121, 5740,5743, 5759,5761, 5786,5792, 5866,5870, 5872,5888, 5900,5902, 5905,5920, 5937,5952, 5969,5984, 5996,5998, 6000,\n\t\t6016, 6067,6103, 6103,6108, 6108,6176, 6263,6272, 6312,6314, 6314,6320, 6389,6400, 6428,6480, 6509,6512, 6516,6528, 6571,6593, 6599,6656, 6678,6688, 6740,6823, 6823,6917, 6963,6981, 6987,7043, 7072,7086, 7087,7098, 7141,7168, 7203,7245, 7247,7258, 7293,7401, 7404,7406, 7409,7413, 7414,7424, 7615,7680, 7957,\n\t\t7960, 7965,7968, 8005,8008, 8013,8016, 8023,8025, 8025,8027, 8027,8029, 8029,8031, 8061,8064, 8116,8118, 8124,8126, 8126,8130, 8132,8134, 8140,8144, 8147,8150, 8155,8160, 8172,8178, 8180,8182, 8188,8305, 8305,8319, 8319,8336, 8348,8450, 8450,8455, 8455,8458, 8467,8469, 8469,8473, 8477,84";
var v27237 = v27238 + "84, 8484,8486, 8486,\n\t\t8488, 8488,8490, 8493,8495, 8505,8508, 8511,8517, 8521,8526, 8526,8544, 8584,11264, 11310,11312, 11358,11360, 11492,11499, 11502,11506, 11507,11520, 11557,11559, 11559,11565, 11565,11568, 11623,11631, 11631,11648, 11670,11680, 11686,11688, 11694,11696, 11702,11704, 11710,11712, 11718,11720, 11726,\n\t\t11728, 11734,11736, 11742,11823, 11823,12293, 12295,12321, 12329,12337, 12341,12344, 12348,12353, 12438,12445, 12447,12449, 12538,12540, 12543,12549, 12589,12593, 12686,12704, 12730,12784, 12799,13312, 13312,19893, 19893,19968, 19968,40908, 40908,40960, 42124,42192, 42237,42240, 42508,42512, 42527,\n\t\t42538, 42539,42560, 42606,42623, 42647,42656, 42735,42775, 42783,42786, 42888,42891, 42894,42896, 42899,42912, 42922,43000, 43009,43011, 43013,43015, 43018,43020, 43042,43072, 43123,43138, 43187,43250, 43255,43259, 43259,43274, 43301,43312, 43334,43360, 43388,43396, 43442,43471, 43471,43520, 43560,\n\t\t43584, 43586,43588, 43595,43616, 43638,43642, 43642,43648, 43695,43697, 43697,43701, 43702,43705, 43709,43712, 43712,43714, 43714,43739, 43741,43744, 43754,43762, 43764,43777, 43782,43785, 43790,43793, 43798,43808, 43814,43816, 43822,43968, 44002,44032, 44032,55203, 55203,55216, 55238,55243, 55291,\n\t\t63744, 64109,64112, 64217,64256, 64262,64275, 64279,64285, 64285,64287, 64296,64298, 64310,64312, 64316,64318, 64318,64320, 64321,64323, 64324,64326, 64433,64467, 64829,64848, 64911,64914, 64967,65008, 65019,65136, 65140,65142, 65276,65313, 65338,65345, 65370,65382, 65470,65474, 65479,65482, 65487,\n\t\t65490, 65495,65498, 65500\n\t];\n\n\tvar unicodeES5IdCont = [\n\t\t768, 879,1155, 1159,1425, 1469,1471, 1471,1473, 1474,1476, 1477,1479, 1479,1552, 1562,1611, 1641,1648, 1648,1750, 1756,1759, 1764,1767, 1768,1770, 1773,1776, 1785,1809, 1809,1840, 1866,1958, 1968,1984, 1993,2027, 2035,2070, 2073,2075, 2083,2085, 2087,2089, 2093,2137, 2139,2276, 2302,2304, 2307,2362, 2364,\n\t\t2366, 2383,2385, 2391,2402, 2403,2406, 2415,2433, 2435,2492, 2492,2494, 2500,2503, 2504,2507, 2509,2519, 2519,2530, 2531,2534, 2543,2561, 2563,2620, 2620,2622, 2626,2631, 2632,2635, 2637,2641, 2641,2662, 2673,2677, 2677,2689, 2691,2748, 2748,2750, 2757,2759, 2761,2763, 2765,2786, 2787,2790, 2799,2817, 2819,\n\t\t2876, 2876,2878, 2884,2887, 2888,2891, 2893,2902, 2903,2914, 2915,2918, 2927,2946, 2946,3006, 3010,3014, 3016,3018, 3021,3031, 3031,3046, 3055,3073, 3075,3134, 3140,3142, 3144,3146, 3149,3157, 3158,3170, 3171,3174, 3183,3202, 3203,3260, 3260,3262, 3268,3270, 3272,3274, 3277,3285, 3286,3298, 3299,3302, 3311,\n\t\t3330, 3331,3390, 3396,3398, 3400,3402, 3405,3415, 3415,3426, 3427,3430, 3439,3458, 3459,3530, 3530,3535, 3540,3542, 3542,3544, 3551,3570, 3571,3633, 3633,3636, 3642,3655, 3662,3664, 3673,3761, 3761,3764, 3769,3771, 3772,3784, 3789,3792, 3801,3864, 3865,3872, 3881,3893, 3893,3895, 3895,3897, 3897,3902, 3903,\n\t\t3953, 3972,3974, 3975,3981, 3991,3993, 4028,4038, 4038,4139, 4158,4160, 4169,4182, 4185,4190, 4192,4194, 4196,4199, 4205,4209, 4212,4226, 4237,4239, 4253,4957, 4959,5906, 5908,5938, 5940,5970, 5971,6002, 6003,6068, 6099,6109, 6109,6112, 6121,6155, 6157,6160, 6169,6313, 6313,6432, 6443,6448, 6459,6470, 6479,\n\t\t6576, 6592,6600, 6601,6608, 6617,6679, 6683,6741, 6750,6752, 6780,6783, 6793,6800, 6809,6912, 6916,6964, 6980,6992, 7001,7019, 7027,7040, 7042,7073, 7085,7088, 7097,7142, 7155,7204, 7223,7232, 7241,7248, 7257,7376, 7378,7380, 7400,7405, 7405,7410, 7412,7616, 7654,7676, 7679,8204, 8205,8255, 8256,8276, 8276,\n\t\t8400, 8412,8417, 8417,8421, 8432,11503, 11505,11647, 11647,11744, 11775,12330, 12335,12441, 12442,42528, 42537,42607, 42607,42612, 42621,42655, 42655,42736, 42737,43010, 43010,43014, 43014,43019, 43019,43043, 43047,43136, 43137,43188, 43204,43216, 43225,43232, 43249,43264, 43273,43302, 43309,43335, 43347,\n\t\t43392, 43395,43443, 43456,43472, 43481,43561, 43574,43587, 43587,43596, 43597,43600, 43609,43643, 43643,43696, 43696,43698, 43700,43703, 43704,43710, 43711,43713, 43713,43755, 43759,43765, 43766,44003, 44010,44012, 44013,44016, 44025,64286, 64286,65024, 65039,65056, 65062,65075, 65076,65101, 65103,\n\t\t65296, 65305,65343, 65343\n\t];\n\n    export function LexLookUpUnicodeMap(code: number, map: number[]) : bool {\n        // Perform binary search in one of the unicode range maps\n        var lo: number = 0;\n        var hi: number = map.length;\n        var mid: number;\n\n        while (lo + 1 < hi)\n        {\n            mid = lo + (hi - lo) / 2;\n            // mid has to be even to catch a range's beginning\n            mid -= mid % 2;\n            if (map[mid] <= code && code <= map[mid + 1])\n                return true;\n            if (code < map[mid])\n                hi = mid;\n            else\n                lo = mid + 2;\n        }\n        return false;\n    }\n\n    export function LexIsUnicodeDigit(code: number): bool {\n        if (codeGenTarget == CodeGenTarget.ES3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdCont);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdCont);\n        }\n    ";
var v27236 = v27237 + "}\n\n    export function LexIsUnicodeIdStart(code: number): bool {\n        if (codeGenTarget == CodeGenTarget.ES3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdStart);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdStart);\n        }\n    }\n    export function LexInitialize() {\n        initializeStaticTokens();\n        autoToken[LexCodeLPR] = staticTokens[TokenID.OpenParen];\n        autoToken[LexCodeRPR] = staticTokens[TokenID.CloseParen];\n        autoToken[LexCodeCMA] = staticTokens[TokenID.Comma];\n        autoToken[LexCodeSMC] = staticTokens[TokenID.Semicolon];\n        autoToken[LexCodeLBR] = staticTokens[TokenID.OpenBracket];\n        autoToken[LexCodeRBR] = staticTokens[TokenID.CloseBracket];\n        autoToken[LexCodeTIL] = staticTokens[TokenID.Tilde];\n        autoToken[LexCodeQUE] = staticTokens[TokenID.Question];\n        autoToken[LexCodeLC] = staticTokens[TokenID.OpenBrace];\n        autoToken[LexCodeRC] = staticTokens[TokenID.CloseBrace];\n        autoToken[LexCodeCOL] = staticTokens[TokenID.Colon];\n        LexKeywordTable = new StringHashTable();\n        for (var i in (<any>TokenID)._map) {\n            if ((<number><any>i) <= TokenID.LimKeyword) {\n                LexKeywordTable.add((<any>TokenID)._map[i].toLowerCase(), i);\n            }\n        }\n        for (var j = 0; j < LexCodeASCIIChars; j++) {\n            if (LexIsIdentifierStartChar(j)) {\n                lexIdStartTable[j] = true;\n            }\n            else {\n                lexIdStartTable[j] = false;\n            }\n        }\n    }\n\n    export function LexAdjustIndent(code, indentAmt) {\n        if ((code == LexCodeLBR) || (code == LexCodeLC) || (code == LexCodeLPR)) {\n            return indentAmt + 1;\n        }\n        else if ((code == LexCodeRBR) || (code == LexCodeRC) || (code == LexCodeRPR)) {\n            return indentAmt - 1;\n        }\n        else return indentAmt;\n    }\n\n    export function LexIsIdentifierStartChar(code): bool {\n        return (((code >= 97) && (code <= 122)) ||\n                ((code >= 65) && (code <= 90)) ||\n                (code == LexCodeDollar) ||\n                (code == LexCodeUnderscore));\n    }\n\n    export function LexIsDigit(code): bool {\n        return ((code >= 48) && (code <= 57));\n    }\n\n    export function LexIsIdentifierChar(code:number) {\n        return lexIdStartTable[code] || LexIsDigit(code);\n    }\n\n    export function LexMatchingOpen(code) {\n        if (code == LexCodeRBR)\n            return LexCodeLBR;\n        else if (code == LexCodeRC)\n            return LexCodeLC;\n        else if (code == LexCodeRPR)\n            return LexCodeLPR;\n        else return 0;\n    }\n\n    export enum NumberScanState {\n        Start,\n        InFraction,\n        InEmptyFraction,\n        InExponent\n    }\n\n    export enum LexState {\n        Start,\n        InMultilineComment,\n        InMultilineSingleQuoteString,\n        InMultilineDoubleQuoteString,\n    }\n\n    export enum LexMode {\n        Line,\n        File,\n    }\n\n    export enum CommentStyle {\n        Line,\n        Block\n    }\n\n    // Represent a piece of source code which can be read in multiple segments\n    export interface ISourceText {\n        getText(start: number, end: number): string;\n        getLength(): number;\n    }\n\n    // Implementation on top of a contiguous string\n    export class StringSourceText implements ISourceText {\n        constructor (public text: string) {\n        }\n\n        public getText(start: number, end: number): string {\n            return this.text.substring(start, end);\n        }\n\n        public getLength(): number {\n            return this.text.length;\n        }\n    }\n\n    export class SourceTextSegment implements ISourceTextSegment {\n        constructor (public segmentStart: number,\n                    public segmentEnd: number,\n                    public segment: string) {\n        }\n\n        charCodeAt(index: number): number {\n            return this.segment.charCodeAt(index - this.segmentStart);\n        }\n\n        substring(start: number, end: number): string {\n            return this.segment.substring(start - this.segmentStart, end - this.segmentStart);\n        }\n    }\n\n    export class AggerateSourceTextSegment implements ISourceTextSegment {\n\n        constructor (public seg1: SourceTextSegment, public seg2: SourceTextSegment) { }\n\n        public charCodeAt(index: number): number {\n            if (this.seg1.segmentStart <= index && index < this.seg1.segmentEnd)\n                return this.seg1.segment.charCodeAt(index - this.seg1.segmentStart);\n\n            return this.seg2.segment.charCodeAt(index - this.seg2.segmentStart);\n        }\n\n        public substring(start: number, end: number): string {\n            if (this.seg1.segmentStart <= start && end <= this.seg1.segmentEnd)\n                return this.seg1.segment.substring(start - this.seg1.segmentStart, end - this.seg1.segmentStart);\n\n            return this.seg2.segment.substring(start - this.seg2.segmentStart) + this.seg1.segment.substri";
var v27235 = v27236 + 'ng(0, end - this.seg1.segmentStart);\n        }\n    }\n\n    export interface ISourceTextSegment {\n        charCodeAt(index: number): number;\n        substring(start: number, end: number): string;\n    }\n\n    export class ScannerTextStream {\n        static emptySegment = new SourceTextSegment(0, 0, "");\n        public agg: AggerateSourceTextSegment;\n        public len: number;\n\n        constructor (public sourceText: ISourceText) {\n            this.agg = new AggerateSourceTextSegment(ScannerTextStream.emptySegment, ScannerTextStream.emptySegment);\n            this.len = this.sourceText.getLength();\n        }\n\n        public max(a: number, b: number): number {\n            return a >= b ? a : b;\n        }\n\n        public min(a: number, b: number): number {\n            return a <= b ? a : b;\n        }\n\n        public fetchSegment(start: number, end: number): ISourceTextSegment {\n            // Common case\n            if (this.agg.seg1.segmentStart <= start && end <= this.agg.seg1.segmentEnd)\n                return this.agg.seg1;\n\n            // Common overlap case\n            if (this.agg.seg2.segmentStart <= start && end <= this.agg.seg1.segmentEnd)\n                return this.agg;\n\n            // if overlapping outside of fetched segment(s), fetch a new segment\n            var prev = this.agg.seg1;\n\n            var s = prev.segmentEnd;\n            var e = max(s + 512, end); // ensure we move forward at least 512 characters or "end"\n            e = min(e, this.len);    // but don\'t go past the end of the source text\n\n            var src = this.sourceText.getText(s, e);\n            var newSeg = new SourceTextSegment(s, e, src);\n            this.agg.seg2 = prev;\n            this.agg.seg1 = newSeg;\n            return this.agg;\n        }\n\n        public charCodeAt(index: number): number {\n            return this.fetchSegment(index, index + 1).charCodeAt(index);\n        }\n\n        public substring(start: number, end: number) {\n            return this.fetchSegment(start, end).substring(start, end);\n        }\n    }\n\n    export interface IScanner {\n        startPos: number;\n        pos: number;\n        scan(): Token;\n        previousToken(): Token;\n        prevLine: number;\n        line: number;\n        col: number;\n        leftCurlyCount: number;\n        rightCurlyCount: number;\n        lastTokenLimChar(): number;\n        lastTokenHadNewline(): bool;\n        lexState: number;\n        getComments(): CommentToken[];\n        getCommentsForLine(line: number): CommentToken[];\n        resetComments(): void;\n        lineMap: number[];\n        setSourceText(newSrc: ISourceText, textMode: number): void;\n        setErrorHandler(reportError: (message: string) => void): void;\n        seenUnicodeChar: bool;\n        seenUnicodeCharInComment: bool;\n        getLookAheadToken(): Token;\n    }\n\n    export class SavedTokens implements IScanner {\n        public prevToken: Token = null;\n        public curSavedToken: SavedToken = null;\n        public prevSavedToken: SavedToken = null;\n        public currentTokenIndex: number;\n        public currentTokens: SavedToken[];\n        public tokensByLine: SavedToken[][];\n        public lexStateByLine: LexState[];\n        private prevToken: SavedToken = null;\n        public previousToken(): Token { return this.prevToken; }\n        public currentToken = 0;\n        public tokens = new SavedToken[];\n        public startPos: number;\n        public pos: number;\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        public close() {\n            this.currentToken = 0;\n        }\n\n        public addToken(tok: Token, scanner: IScanner) {\n            this.tokens[this.currentToken++] = new SavedToken(tok, scanner.startPos, scanner.pos);\n        }\n\n        public scan(): Token {\n            // TODO: curly count\n            this.startLine = this.line;\n            this.startPos = this.col;\n            if (this.currentTokenIndex == this.currentTokens.length) {\n                if (this.line < this.lineMap.length) {\n                    this.line++;\n                    this.col = 0;\n                    this.currentTokenIndex = 0;\n                    this.currentTokens = this.tokensByLine[this.line];\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            }\n            if (this.currentTokenIndex < this.currentTokens.length) {\n                this.prevToken = this.curSavedToken.tok;\n                this.prevSavedToken = this.curSavedToken;\n                this.curSavedToken = this.currentTokens[this.currentTokenIndex++];\n                var curToken = this.curSavedToken.tok;\n                this.pos = this.curSavedToken.limChar;\n                this.col += (this.curSavedToken.limChar - this.curSavedToken.minChar);\n                this.startPos = this.curSavedToken.minChar;\n                this.prevLine = this.line;\n                return curToken;\n            }\n            else {\n                retur';
var v27234 = v27235 + 'n staticTokens[TokenID.EndOfFile];\n            }\n        }\n        public startLine: number;\n        public prevLine = 1;\n        public line = 1;\n        public col = 0;\n        public leftCurlyCount: number;\n        public rightCurlyCount: number;\n\n        public syncToTok(offset: number): number {\n            this.line = getLineNumberFromPosition(this.lineMap, offset);\n            this.currentTokenIndex = 0;\n            var tmpCol = offset - this.lineMap[this.line];\n            while ((this.lexStateByLine[this.line] == LexState.InMultilineComment) && (this.line > 0)) {\n                this.line--;\n                tmpCol = 0;\n            }\n            var lenMin1 = this.lineMap.length - 1;\n            this.currentTokens = this.tokensByLine[this.line];\n            while ((this.currentTokens.length == 0) && (this.line < lenMin1)) {\n                this.line++;\n                this.currentTokens = this.tokensByLine[this.line];\n                tmpCol = 0;\n            }\n            if (this.line <= lenMin1) {\n                while ((this.currentTokenIndex < this.currentTokens.length) &&\n                       (tmpCol > this.currentTokens[this.currentTokenIndex].limChar)) {\n                    this.currentTokenIndex++;\n                }\n                if (this.currentTokenIndex < this.currentTokens.length) {\n                    this.col = this.currentTokens[this.currentTokenIndex].minChar;\n                    return this.col + this.lineMap[this.line];\n                }\n            }\n            return -1;\n        }\n\n        public lastTokenLimChar(): number {\n            if (this.prevSavedToken !== null) {\n                return this.prevSavedToken.limChar;\n            }\n            else {\n                return 0;\n            }\n        }\n\n        public lastTokenHadNewline(): bool {\n            return this.prevLine != this.startLine;\n        }\n\n        public lexState = LexState.Start;\n\n        public commentStack: CommentToken[] = new CommentToken[];\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {\n                if (comments == null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public lineMap: number[] = [];\n        public setSourceText(newSrc: ISourceText, textMode: number) {\n        }\n        public setErrorHandler(reportError: (message: string) => void ) { \n        }\n        public getLookAheadToken(): Token {\n            throw new Error("Invalid operation.");\n        }\n    }\n\n    export class Scanner implements IScanner {\n        // REVIEW: When adding new variables make sure to handle storing them in getLookAheadToken. \n        //         The method works by storing the state before scanning and restoring it later on, missing a member variable \n        //         could result in an inconsistent state.\n        public prevLine = 1;\n        public line = 1;\n        public col = 0;\n        public pos = 0;\n        public startPos = 0;\n        public startCol: number;\n        public startLine: number;\n        public src: string;\n        public len = 0;\n        public lineMap: number[] = [];\n        \n        public ch = LexEOF;\n        public lexState = LexState.Start;\n        public mode = LexMode.File;\n        public scanComments: bool = true;\n        public interveningWhitespace = false; // Was there a whitespace token between the last token and the current one?\n        private interveningWhitespacePos = 0; //  If yes, this contains the start position of the whitespace\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public commentStack: CommentToken[] = new CommentToken[];\n        public saveScan: SavedTokens = null;\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        private reportError: (message: string) =>void;\n\n        constructor () {\n            this.startCol = this.col;\n            this.startLine = this.line;            \n            this.lineMap[1] = 0;\n            \n            if (!LexKeywordTable) {\n                LexInitialize();\n            }            \n        }\n\n        private prevTok = staticTokens[TokenID.EndOfFile];\n        public previousToken() { return this.prevTok; }\n\n        public setSourceText(newSrc: ISourceText, textMode: number) {\n            this.mode = textMode;\n            this.scanComments = (this.mode === LexMo';
var v27233 = v27234 + "de.Line);\n            this.pos = 0;\n            this.interveningWhitespacePos = 0;\n            this.startPos = 0;\n            this.line = 1;\n            this.col = 0;\n            this.startCol = this.col;\n            this.startLine = this.line;\n            this.len = 0;\n            this.src = newSrc.getText(0, newSrc.getLength());\n            this.len = this.src.length;\n            this.lineMap = [];\n            this.lineMap[1] = 0;\n            this.commentStack = [];\n            this.leftCurlyCount = 0;\n            this.rightCurlyCount = 0;\n            this.seenUnicodeChar = false;\n            this.seenUnicodeCharInComment = false;\n        }\n\n        public setErrorHandler(reportError: (message: string) => void ) { \n            this.reportError = reportError;\n        }\n\n        public setSaveScan(savedTokens: SavedTokens) {\n            this.saveScan = savedTokens;\n        }\n\n        public setText(newSrc: string, textMode: number) {\n            this.setSourceText(new StringSourceText(newSrc), textMode);\n        }\n\n        public setScanComments(value: bool) {\n            this.scanComments = value;\n        }\n\n        public getLexState(): number {\n            return this.lexState;\n        }\n\n        public tokenStart() {\n            this.startPos = this.pos;\n            this.startLine = this.line;\n            this.startCol = this.col;\n            this.interveningWhitespace = false;\n        }\n\n        public peekChar(): number {\n            if (this.pos < this.len) {\n                return this.src.charCodeAt(this.pos);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public peekCharAt(index: number): number {\n            if (index < this.len) {\n                return this.src.charCodeAt(index);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public IsHexDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_9)) || ((c >= LexCode_A) && (c <= LexCode_F)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public IsOctalDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_7)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public scanHexDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsHexDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        return new NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanOctalDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsOctalDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        return new NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanDecimalNumber(state: number): Token {\n            var atLeastOneDigit = false;\n            var svPos = this.pos;\n            var svCol = this.col;\n            for (; ;) {\n                if (LexIsDigit(this.ch)) {\n                    atLeastOneDigit = true;\n                    if (this.ch != LexCode_0 && state == NumberScanState.InEmptyFraction) {\n                        state = NumberScanState.InFraction;\n                    }\n                    this.nextChar();\n                }\n                else if (this.ch == LexCodeDOT) {\n                    if (state == NumberScanState.Start) {\n                        // DecimalDigit* .\n                        this.nextChar();\n                        state = NumberScanState.InEmptyFraction;\n                    }\n                    else {\n                        // dot not part of number\n                        if (atLeastOneDigit) {\n                            // DecimalDigit* . DecimalDigit+\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                } else if ((this.ch == LexCode_e) || (this.ch == LexCode_E)) {\n                    if (state == NumberScanState.Start) {\n                        if (atLeastOneDigit) {\n                            // DecimalDigit+ (.";
var v27232 = v27233 + " DecimalDigit*) [eE] [+-]DecimalDigit+\n                            atLeastOneDigit = false;\n                            this.nextChar();\n                            state = NumberScanState.InExponent;\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state == NumberScanState.InFraction || state == NumberScanState.InEmptyFraction) {\n                        // DecimalDigit+ . DecimalDigit* [eE]\n                        this.nextChar();\n                        state = NumberScanState.InExponent;\n                        atLeastOneDigit = false;\n                    }\n                    else {\n                        // DecimalDigit+ . DecimalDigit* [eE] DecimalDigit+\n                        if (atLeastOneDigit) {\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                }\n                else if ((this.ch == LexCodePLS) || (this.ch == LexCodeMIN)) {\n                    if (state == NumberScanState.InExponent) {\n                        if (!atLeastOneDigit) {\n                            this.nextChar();\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state == NumberScanState.InEmptyFraction || state == NumberScanState.InFraction) {\n                        // This case will not generate bad javascript if we miss the fractional part, but we just want to be consistent with the dot case\n                        return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                    }\n                    else {\n                        if (!atLeastOneDigit) {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                        else {\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));\n                        }\n                    }\n                }\n                else {\n                    if (!atLeastOneDigit) {\n                        this.pos = svPos;\n                        this.col = svCol;\n                        return null;\n                    }\n                    else {\n                        return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                    }\n                }\n            }\n        }\n\n        // 0 [xX] hexDigits\n        // 0 octalDigits\n        // 0 [89] decimalDigits\n        // decimalDigits? fraction? exponent?\n\n        public scanNumber(): Token {\n            if (this.peekChar() == LexCode_0) {\n                switch (this.peekCharAt(this.pos + 1)) {\n                    case LexCode_x:\n                    case LexCode_X:\n                        // Hex\n                        this.advanceChar(2);\n                        return this.scanHexDigits();\n                    case LexCode_8:\n                    case LexCode_9:\n                    case LexCodeDOT:\n                        return this.scanDecimalNumber(NumberScanState.Start);\n                    default:\n                        // Octal\n                        return this.scanOctalDigits();\n                }\n            }\n            else {\n                return this.scanDecimalNumber(NumberScanState.Start);\n            }\n        }\n\n        public scanFraction(): Token {\n            return this.scanDecimalNumber(NumberScanState.InFraction);\n        }\n\n        public newLine() {\n            this.col = 0;\n            if (this.mode == LexMode.File) {\n                this.line++;\n                this.lineMap[this.line] = this.pos + 1;\n            }\n        }\n\n        public finishMultilineComment(): bool {\n            var ch2: number;\n            this.lexState = LexState.InMultilineComment;\n            while (this.pos < this.len) {\n                if (this.ch == LexCodeMUL) {\n                    ch2 = this.peekCharAt(this.pos + 1);\n                    if (ch2 == LexCodeSLH) {\n                        this.advanceChar(2);\n                        if (this.mode == LexMode.File) {\n                            this.tokenStart();\n                        }\n                        this.lexState = LexState.Start;\n                        return true;\n                    }\n        ";
var v27231 = v27232 + "        }\n                else if (this.ch == LexCodeNWL) {\n                    this.newLine();\n                    if (this.mode == LexMode.Line) {\n                        this.nextChar();\n                        return false;\n                    }\n                } \n                else if (this.ch >= LexCodeASCIIChars) { \n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n            return false;\n        }\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {\n                if (comments == null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public endsLine(c: number) {\n            return (c == LexCodeNWL) || (c == LexCodeRET) || (c == LexCodeLS) || (c == LexCodePS);\n        }\n\n        public finishSinglelineComment() {\n            while (this.pos < this.len) {\n                if (this.endsLine(this.ch))\n                    break;\n                if (this.ch >= LexCodeASCIIChars) { \n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n\n            if (this.mode == LexMode.File) {\n                this.tokenStart();\n            }\n        }\n\n        public tokenText(): string {\n            return this.src.substring(this.startPos, this.pos);\n        }\n\n        public findClosingSLH() {\n            var index = this.pos;\n            var ch2 = this.src.charCodeAt(index);\n            var prevCh = 0;\n            var liveEsc = false;\n            while (!this.endsLine(ch2) && (index < this.len)) {\n                if ((ch2 == LexCodeSLH) && (!liveEsc)) {\n                    return index;\n                }\n                prevCh = ch2;\n                index++;\n                if (liveEsc) {\n                    liveEsc = false;\n                }\n                else {\n                    liveEsc = (prevCh == LexCodeBSL);\n                }\n\n                ch2 = this.src.charCodeAt(index);\n            }\n            return -1;\n        }\n\n        public speculateRegex(): Token {\n            if (noRegexTable[this.prevTok.tokenId] != undefined) {\n                return null;\n            }\n            var svPos = this.pos;\n            var svCol = this.col;\n            // first char is '/' and has been skipped\n            var index = this.findClosingSLH();\n            if (index > 0) {\n                // found closing /\n                var pattern = this.src.substring(svPos, index);\n                var flags = \"\";\n                this.pos = index + 1;\n                this.ch = this.peekChar();\n                var flagsStart = this.pos;\n                // TODO: check for duplicate flags\n                while ((this.ch == LexCode_i) || (this.ch == LexCode_g) || (this.ch == LexCode_m)) {\n                    this.nextChar();\n                }\n                if ((this.pos - flagsStart) > 3) {\n                    return null;\n                }\n                else {\n                    flags = this.src.substring(flagsStart, this.pos);\n                }\n                var regex = undefined;\n                try {\n                    regex = new RegExp(pattern, flags);\n                }\n                catch (regexException) {\n                }\n                if (regex) {\n                    // no line boundary in regex string\n                    this.col = svCol + (this.pos - this.startPos);\n                    return new RegularExpressionLiteralToken(regex);\n                }\n            }\n            this.pos = svPos;\n            this.col = svCol;\n            return null;\n        }\n\n        public lastTokenHadNewline() {\n            return this.prevLine != this.startLine;\n        }\n\n        public lastTokenLimChar() {\n            return this.interveningWhitespace ? this.interveningWhitespacePos : this.startPos;\n        }\n\n        // use only when known not to skip line terminators\n        public advanceChar(amt: number) {\n            this.pos += amt;\n            this.col += amt;\n            this.ch = this.peekChar();\n        }\n\n        public nextChar() {\n            this.pos++;\n            this.col++;\n            this.ch = this.peekChar();\n        }\n\n        public getLookAheadToken(): Token {\n            // REVIEW: This method is only used for parsing varargs in lambda expressions. If this functionality is neede";
var v27230 = v27231 + 'd for more common cases, \n            //         it needs to be designed. \n            //         Look-ahead token needs to be integrated in the scanner design to allow for an efficient lookup.\n\n            // Store the scanner state\n            var prevLine = this.prevLine;\n            var line = this.line;\n            var col = this.col;\n            var pos = this.pos;\n            var startPos = this.startPos;\n            var startCol = this.startCol;\n            var startLine = this.startLine;\n            var ch = this.ch;\n            var prevTok = this.prevTok;\n            var lexState = this.lexState;\n            var interveningWhitespace = this.interveningWhitespace;\n            var interveningWhitespacePos = this.interveningWhitespacePos;\n            var leftCurlyCount = this.leftCurlyCount;\n            var rightCurlyCount = this.rightCurlyCount;\n            var seenUnicodeChar = this.seenUnicodeChar;\n            var seenUnicodeCharInComment = this.seenUnicodeCharInComment;\n            var commentStackLength = this.commentStack.length;\n\n            var lookAheadToken = this.scan();\n\n            // Restore state\n            this.prevLine = prevLine;\n            this.line = line;\n            this.col = col;\n            this.pos = pos;\n            this.startPos = startPos;\n            this.startCol = startCol;\n            this.startLine = startLine;\n            this.ch = ch;\n            this.prevTok = prevTok;\n            this.lexState = lexState;\n            this.interveningWhitespace = interveningWhitespace;\n            this.interveningWhitespacePos = interveningWhitespacePos;\n            this.leftCurlyCount = leftCurlyCount;\n            this.rightCurlyCount = rightCurlyCount;\n            this.seenUnicodeChar = seenUnicodeChar;\n            this.seenUnicodeCharInComment = seenUnicodeCharInComment;\n            this.commentStack.length = commentStackLength;\n\n            return lookAheadToken;\n        }\n\n        public scanInLine(): Token {\n            if ((this.lexState == LexState.InMultilineComment) && (this.scanComments)) {\n                this.ch = this.peekChar();\n                var commentLine = this.line;\n                this.finishMultilineComment();\n                if (this.startPos < this.pos) {\n                    var commentText = this.src.substring(this.startPos, this.pos);\n                    this.tokenStart();\n                    return new CommentToken(TokenID.Comment, commentText,/*isBlock*/true, this.startPos, commentLine,/*endsLine*/true);\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            } \n            else if (this.lexState == LexState.InMultilineSingleQuoteString && this.pos < this.len) { \n                this.ch = LexCodeAPO;\n                this.lexState = LexState.Start;\n                return this.scanStringConstant();\n            }\n            else if (this.lexState == LexState.InMultilineDoubleQuoteString && this.pos < this.len) { \n                this.ch = LexCodeQUO;\n                this.lexState = LexState.Start;\n                return this.scanStringConstant();\n            }\n            this.prevLine = this.line;\n            var prevTok = this.innerScan();\n\n            // Ingore white spaces\n            if (prevTok.tokenId != TokenID.Whitespace) {\n                this.prevTok = prevTok;\n            }\n            return prevTok;\n        }\n\n        public scan(): Token {\n            this.prevLine = this.line;\n            this.prevTok = this.innerScan();\n            if (this.saveScan) {\n                this.saveScan.addToken(this.prevTok, this);\n            }\n            return this.prevTok;\n        }\n\n        private isValidUnicodeIdentifierChar(): bool {\n            var valid = LexIsUnicodeIdStart(this.ch) || LexIsUnicodeDigit(this.ch);\n            this.seenUnicodeChar = this.seenUnicodeChar || valid;\n            return valid;\n        }\n\n        private scanStringConstant(): Token {\n            var endCode = this.ch;\n            \n            // Skip the first quote\n            this.nextChar();\n            \n            // Accumulate with escape characters\n            scanStringConstantLoop:\n            for (;;) {\n                switch (this.ch) {\n                    case LexEOF:\n                        // Unexpected end of file\n                        this.reportScannerError("Unterminated string constant");\n                        break scanStringConstantLoop;\n\n                    case LexCodeLS:\n                    case LexCodePS:\n                        this.seenUnicodeChar = true;\n                    // Intentional fall through\n                    case LexCodeRET:\n                    case LexCodeNWL:\n                        this.reportScannerError("Unterminated string constant");\n                        break scanStringConstantLoop;\n\n                    case LexCodeAPO:\n                    case LexCodeQUO:\n                        if (this.ch == endCode) {\n                            // Foun';
var v27229 = v27230 + 'd string terminator. Skip past end code.\n                            this.nextChar();\n                            break scanStringConstantLoop;\n                        }\n                        break;\n\n                    case LexCodeBSL:\n                        // Consume the current slash\n                        this.nextChar();\n\n                        switch (this.ch) {\n                            case LexCodeAPO:\n                            case LexCodeQUO:\n                            case LexCodeBSL:\n                                // Valid escape sequences\n                                this.nextChar();\n                                continue scanStringConstantLoop;\n\n                            case LexCodeLS:\n                            case LexCodePS:\n                                this.seenUnicodeChar = true;\n                            // Intentional fall through\n                            case LexCodeRET:\n                            case LexCodeNWL:\n                                // Skip /r in a /r/n sequence\n                                if (this.ch == LexCodeRET && this.peekCharAt(this.pos + 1) == LexCodeNWL) {\n                                    this.nextChar();\n                                }\n\n                                // Consume the new line char\n                                this.nextChar();\n\n                                // Record new line\n                                this.newLine();\n\n                                if (this.mode == LexMode.Line) {\n                                    this.lexState = endCode == LexCodeAPO ? LexState.InMultilineSingleQuoteString : LexState.InMultilineDoubleQuoteString;\n                                    break scanStringConstantLoop;\n                                }\n                                break;\n\n                            case LexCode_x:\n                            case LexCode_u:\n                                var expectedHexDigits = this.ch == LexCode_x ? 2 : 4;\n                                this.nextChar();\n                                for (var i = 0; i < expectedHexDigits; i++) {\n                                    if (this.IsHexDigit(this.ch)) {\n                                        this.nextChar();\n                                    }\n                                    else {\n                                        this.reportScannerError("Invalid Unicode escape sequence");\n                                        break;\n                                    }\n                                }\n                                continue scanStringConstantLoop;\n                        }\n                        break;\n                }\n\n                // Record seeing a Unicode char\n                if (this.ch >= LexCodeASCIIChars) {\n                    this.seenUnicodeChar = true;\n                }\n\n                this.nextChar();\n            }\n\n            return new StringLiteralToken(this.src.substring(this.startPos, this.pos));\n        }\n\n        private scanIdentifier(): Token {\n            var hasEscape = false;\n            var isFirstChar = (this.ch == LexCodeBSL);\n            var hasUnicode: any = false;\n\n            for (; ;) {\n                while (lexIdStartTable[this.ch] || LexIsDigit(this.ch) || \n                      (this.ch >= LexCodeASCIIChars && this.isValidUnicodeIdentifierChar())) {\n                    this.nextChar();\n                }\n                if (this.ch == LexCodeBSL) {\n                    this.nextChar();\n                    if (this.ch == LexCode_u) {\n                        // 4 hex digits\n                        this.nextChar();\n                        for (var h = 0; h < 4 ; h++) {\n                            if (this.IsHexDigit(this.ch)) {\n                                this.nextChar();\n                            }\n                            else {\n                                this.reportScannerError("Invalid Unicode escape sequence");\n                                return staticTokens[TokenID.Error];\n                            }\n                        }\n                        var hexChar = parseInt(this.src.substring(this.pos - 4, this.pos), 16);\n\n                        // Verify is valid ID char \n                        if (lexIdStartTable[hexChar] || (!isFirstChar && LexIsDigit(hexChar)) ||\n                            (hexChar >= LexCodeASCIIChars && (LexIsUnicodeIdStart(hexChar) || (!isFirstChar && LexIsUnicodeDigit(hexChar))))) {\n                        }\n                        else { \n                            this.reportScannerError("Invalid identifier character");\n                            return staticTokens[TokenID.Error];\n                        }\n\n                        hasEscape = true;\n                        isFirstChar = false;\n                        continue;\n                    }\n\n                    this.reportScannerError("Invalid Unicode escape sequence");\n                    return staticTokens[TokenID.Error];\n                }\n        ';
var v27228 = v27229 + '        break;\n            }\n\n            var id: number;\n            var text = this.src.substring(this.startPos, this.pos);\n            if (!hasEscape && (id = LexKeywordTable.lookup(text)) != null) {\n                return staticTokens[id];\n            }\n            else {\n                return new IdentifierToken(text, hasEscape);\n            }\n        }\n\n        public innerScan(): Token {\n            var rtok;\n            this.tokenStart();\n            this.ch = this.peekChar();\n\n            start: while (this.pos < this.len) {\n                 if (lexIdStartTable[this.ch] || this.ch == LexCodeBSL || (this.ch >= LexCodeASCIIChars && LexIsUnicodeIdStart(this.ch))) {\n                    // identifier or keyword\n                    return this.scanIdentifier();\n                }\n                else if (this.ch == LexCodeSpace) {\n                    if (!this.interveningWhitespace) {\n                        this.interveningWhitespacePos = this.pos;\n                    }\n                    do {\n                        this.nextChar();\n                    } while (this.ch == LexCodeSpace);\n                    if (this.mode == LexMode.Line) {\n                        var whitespaceText = this.src.substring(this.startPos, this.pos);\n                        return new WhitespaceToken(TokenID.Whitespace, whitespaceText);\n                    }\n                    else {\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                    }\n                }\n                else if (this.ch == LexCodeSLH) {\n                    this.nextChar();\n                    var commentText;\n                    if (this.ch == LexCodeSLH) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.finishSinglelineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var commentToken = new CommentToken(TokenID.Comment, commentText,/*isBlock*/false, commentStartPos, commentStartLine,/*endsLine*/false);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n\n                        this.interveningWhitespace = true;\n                    }\n                    else if (this.ch == LexCodeMUL) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.nextChar();  // Skip the "*"\n                        this.finishMultilineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var endsLine = this.endsLine(this.peekChar());\n                        var commentToken = new CommentToken(TokenID.Comment, commentText,/*isBlock*/true, commentStartPos, commentStartLine, endsLine);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n                        this.interveningWhitespace = true;\n                    }\n                    else {\n                        var regexTok = this.speculateRegex();\n                        if (regexTok) {\n                            return regexTok;\n                        }\n                        else {\n                            if (this.peekCharAt(this.pos) == LexCodeEQ) {\n                                this.nextChar();\n                                return staticTokens[TokenID.SlashEquals];\n                            }\n                            else {\n                                return staticTokens[TokenID.Slash];\n                            }\n                        }\n                    }\n                }\n                else if (this.ch == LexCodeSMC) {\n                    this.nextChar();\n                    return staticTokens[TokenID.Semicolon];\n                }\n                else if ((this.ch == LexCodeAPO) || (this.ch == LexCodeQUO)) {\n                    return this.scanSt';
var v27227 = v27228 + "ringConstant();\n                }\n                else if (autoToken[this.ch]) {\n                    var atok = autoToken[this.ch];\n                    if (atok.tokenId == TokenID.OpenBrace) {\n                        this.leftCurlyCount++;\n                    }\n                    else if (atok.tokenId == TokenID.CloseBrace) {\n                        this.rightCurlyCount++;\n                    }\n                    this.nextChar();\n                    return atok;\n                }\n                else if ((this.ch >= LexCode_0) && (this.ch <= LexCode_9)) {\n                    rtok = this.scanNumber();\n                    if (rtok) {\n                        return rtok;\n                    }\n                    else {\n                        this.nextChar();\n                        return staticTokens[TokenID.Error];\n                    }\n                }\n                else switch (this.ch) {\n                    // TAB\n                    case LexCodeTAB:\n                    case LexCodeVTAB:\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        if (this.mode == LexMode.Line) {\n                            do {\n                                this.nextChar();\n                            } while ((this.ch == LexCodeSpace) || (this.ch == 9));\n                            var wsText = this.src.substring(this.startPos, this.pos);\n                            return new WhitespaceToken(TokenID.Whitespace, wsText);\n                        }\n                        else {\n                            this.interveningWhitespace = true;\n                        }\n                     // Newlines and BOM\n                    case 0xFF: // UTF16 SEQUENCE\n                    case 0xFE:\n                    case 0xEF:    // UTF8 SEQUENCE\n                    case 0xBB:\n                    case 0xBF:\n                    case LexCodeLS:\n                    case LexCodePS:\n                    case LexCodeNWL:\n                    case LexCodeRET:\n                        if (this.ch == LexCodeNWL) {\n                            this.newLine();\n                            if (this.mode == LexMode.Line) {\n                                return staticTokens[TokenID.EndOfFile];\n                            }\n                        }\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        this.nextChar();\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                        break;\n                    case LexCodeDOT: {\n                        if (this.peekCharAt(this.pos + 1) == LexCodeDOT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeDOT) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.DotDotDot];\n                            }\n                            else {\n                                this.nextChar();\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            rtok = this.scanFraction();\n                            if (rtok) {\n                                return rtok;\n                            }\n                            else {\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        // break;\n                    }\n                    case LexCodeEQ:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.EqualsEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.EqualsEquals];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeGT) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.EqualsGreaterThan];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Equals];\n                        }\n                    // break;\n                    case LexCodeBNG:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTo";
var v27226 = v27227 + "kens[TokenID.ExclamationEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.ExclamationEquals];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Exclamation];\n                        }\n                    // break;\n                    case LexCodePLS:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodePLS) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusPlus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Plus];\n                        }\n                    // break;\n                    case LexCodeMIN:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeMIN) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusMinus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Minus];\n                        }\n                    // break;\n                    case LexCodeMUL:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AsteriskEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Asterisk];\n                        }\n                    // break;\n                    case LexCodePCT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PercentEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Percent];\n                        }\n                    // break;\n                    case LexCodeLT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeLT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.LessThanLessThanEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.LessThanLessThan];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.LessThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.LessThan];\n                        }\n                    //  break;\n                    case LexCodeGT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeGT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.GreaterThanGreaterThanEquals];\n                            }\n                            else if (this.peekCharAt(this.pos + 2) == LexCodeGT) {\n                                if (this.peekCharAt(this.pos + 3) == LexCodeEQ) {\n                                    this.advanceChar(4);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThanEquals];\n                                }\n                                else {\n                                    this.advanceChar(3);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThan];\n                                }\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.GreaterThanGreaterThan];\n                            }\n                        }\n                        ";
var v27225 = v27226 + 'else if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.GreaterThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.GreaterThan];\n                        }\n                    // break;\n                    case LexCodeXOR:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.CaretEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Caret];\n                        }\n                    //  break;\n                    case LexCodeBAR:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeBAR) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarBar];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Bar];\n                        }\n                    //  break;\n                    case LexCodeAMP:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeAMP) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandAmpersand];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.And];\n                        }\n                    //  break;\n                    default:\n                        // Report error\n                        this.reportScannerError("Invalid character");\n                        this.nextChar();\n\n                        continue start;\n                }\n            }\n            return staticTokens[TokenID.EndOfFile];\n        }\n\n        private reportScannerError(message: string) { \n            if (this.reportError) { \n                this.reportError(message);\n            }\n        }\n    }\n\n    // Reseverved words only apply to Identifiers, not IdentifierNames\n    export function convertTokToIDName(tok: Token): bool {\n        return convertTokToIDBase(tok, true, false);\n    }\n\n    export function convertTokToID(tok: Token, strictMode: bool): bool {\n        return convertTokToIDBase(tok, false, strictMode);\n    }\n\n    function convertTokToIDBase(tok: Token, identifierName: bool, strictMode: bool): bool {\n        if (tok.tokenId <= TokenID.LimKeyword) {\n            var tokInfo = lookupToken(tok.tokenId);\n            if (tokInfo != undefined) {\n                var resFlags = Reservation.Javascript | Reservation.JavascriptFuture;\n                if (strictMode) {\n                    resFlags |= Reservation.JavascriptFutureStrict;\n                }\n                if (identifierName || !hasFlag(tokInfo.reservation, resFlags)) {\n                    return true;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n\n    // Return the (1-based) line number from a character offset using the provided linemap.\n    export function getLineNumberFromPosition(lineMap: number[], position: number): number {\n        if (position === -1)\n            return 0;\n\n        // Binary search\n        var min = 0;\n        var max = lineMap.length - 1;\n        while (min < max) {\n            var med = (min + max) >> 1;\n            if (position < lineMap[med]) {\n                max = med - 1;\n            }\n            else if (position < lineMap[med + 1]) {\n                min = max = med; // found it\n            }\n            else {\n                min = med + 1;\n            }\n        }\n\n        return min;\n    }\n\n    /// Return the [line, column] data for a given offset and a lineMap.\n    /// Note that the returned line is 1-based, while the column is 0-based.\n    export function getSourceLineColFromMap(lineCol: ILineCol, minChar: number, lineMap: number[]): void {\n        var line = getLineNumberFromPosition(lineMap, minChar);\n\n        if (line > 0) {\n            lineCol.line = line;\n            lineCol.col = (minChar - lineMap[line]);\n        }\n    }\n\n    // Return the [line, column] (both 1 based) corresponding to a given position in a given script.\n    export funct';
var v27224 = v27225 + 'ion getLineColumnFromPosition(script: TypeScript.Script, position: number): ILineCol {\n        var result = { line: -1, col: -1 };\n        getSourceLineColFromMap(result, position, script.locationInfo.lineMap);\n        if (result.col >= 0) {\n            result.col++;   // Make it 1-based\n        }\n        return result;\n    }\n\n    //\n    // Return the position (offset) corresponding to a given [line, column] (both 1-based) in a given script.\n    //\n    export function getPositionFromLineColumn(script: TypeScript.Script, line: number, column: number): number {\n        return script.locationInfo.lineMap[line] + (column - 1);\n    }\n    \n    // Return true if the token is a primitive type\n    export function isPrimitiveTypeToken(token: Token) {\n        switch (token.tokenId) {\n            case TokenID.Any:\n            case TokenID.Bool:\n            case TokenID.Number:\n            case TokenID.String:\n                return true;\n        }\n        return false;\n    }\n\n    // Return true if the token is a primitive type\n    export function isModifier(token: Token) {\n        switch (token.tokenId) {\n            case TokenID.Public:\n            case TokenID.Private:\n            case TokenID.Static:\n                return true;\n        }\n        return false;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class AssignScopeContext {\n        constructor (public scopeChain: ScopeChain,\n                     public typeFlow: TypeFlow,\n                     public modDeclChain: ModuleDeclaration[]) {\n        }\n    }\n\n    export function pushAssignScope(scope: SymbolScope,\n        context: AssignScopeContext,\n        type: Type,\n        classType: Type,\n        fnc: FuncDecl) {\n\n        var chain = new ScopeChain(null, context.scopeChain, scope);\n        chain.thisType = type;\n        chain.classType = classType;\n        chain.fnc = fnc;\n        context.scopeChain = chain;\n    }\n\n    export function popAssignScope(context: AssignScopeContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function instanceCompare(a: Symbol, b: Symbol) {\n        if (((a == null) || (!a.isInstanceProperty()))) {\n            return b;\n        }\n        else {\n            return a;\n        }\n    }\n\n    export function instanceFilterStop(s: Symbol) {\n        return s.isInstanceProperty();\n    }\n\n    export class ScopeSearchFilter {\n\n        constructor (public select: (a: Symbol, b: Symbol) =>Symbol,\n                            public stop: (s: Symbol) =>bool) { }\n\n        public result: Symbol = null;\n\n        public reset() {\n            this.result = null;\n        }\n\n        public update(b: Symbol): bool {\n            this.result = this.select(this.result, b);\n            if (this.result) {\n                return this.stop(this.result);\n            }\n            else {\n                return false;\n            }\n        }\n    }\n\n    export var instanceFilter = new ScopeSearchFilter(instanceCompare, instanceFilterStop);\n\n    export function preAssignModuleScopes(ast: AST, context: AssignScopeContext) {\n        var moduleDecl = <ModuleDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (moduleDecl.name && moduleDecl.mod) {\n            moduleDecl.name.sym = moduleDecl.mod.symbol;\n        }\n\n        var mod = moduleDecl.mod;\n\n        // We\'re likely here because of error recovery\n        if (!mod) {\n            return;\n        }\n\n        memberScope = new SymbolTableScope(mod.members, mod.ambientMembers, mod.enclosedTypes, mod.ambientEnclosedTypes, mod.symbol);\n        mod.memberScope = memberScope;\n        context.modDeclChain.push(moduleDecl);\n        context.typeFlow.checker.currentModDecl = moduleDecl;\n        aggScope = new SymbolAggregateScope(mod.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        mod.containedScope = aggScope;\n        if (mod.symbol) {\n            context.typeFlow.addLocalsFromScope(mod.containedScope, mod.symbol, moduleDecl.vars, mod.members.privateMembers, true);\n        }\n    }\n\n    export function preAssignClassScopes(ast: AST, context: AssignScopeContext) {\n        var classDecl = <InterfaceDeclaration>ast;\n        var memberScope: Symb';
var v27223 = v27224 + "olTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (classDecl.name && classDecl.type) {\n            classDecl.name.sym = classDecl.type.symbol;\n        }\n\n        var classType = ast.type;\n\n        if (classType) {\n            var classSym = classType.symbol;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(classType);\n\n            aggScope = new SymbolAggregateScope(classType.symbol);\n            aggScope.addParentScope(memberScope);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            classType.containedScope = aggScope;\n            classType.memberScope = memberScope;\n\n            var instanceType = classType.instanceType;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(instanceType);\n            instanceType.memberScope = memberScope;\n\n            aggScope = new SymbolAggregateScope(instanceType.symbol);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            pushAssignScope(aggScope, context, instanceType, classType, null);\n            instanceType.containedScope = aggScope;\n        }\n        else {\n            ast.type = context.typeFlow.anyType;\n        }\n    }\n\n    export function preAssignInterfaceScopes(ast: AST, context: AssignScopeContext) {\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (interfaceDecl.name && interfaceDecl.type) {\n            interfaceDecl.name.sym = interfaceDecl.type.symbol;\n        }\n\n        var interfaceType = ast.type;\n        memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(interfaceType);\n        interfaceType.memberScope = memberScope;\n        aggScope = new SymbolAggregateScope(interfaceType.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        interfaceType.containedScope = aggScope;\n    }\n\n    export function preAssignWithScopes(ast: AST, context: AssignScopeContext) {\n        var withStmt = <WithStatement>ast;\n        var withType = withStmt.type;\n\n        var members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        var ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        var withType = new Type();\n        var withSymbol = new WithSymbol(withStmt.minChar, context.typeFlow.checker.locationInfo.unitIndex, withType);\n        withType.members = members;\n        withType.ambientMembers = ambientMembers;\n        withType.symbol = withSymbol;\n        withType.setHasImplementation();\n        withStmt.type = withType;\n\n        var withScope = new TypeScript.SymbolScopeBuilder(withType.members, withType.ambientMembers, null, null, context.scopeChain.scope, withType.symbol);\n\n        pushAssignScope(withScope, context, null, null, null);\n        withType.containedScope = withScope;\n    }\n\n    export function preAssignFuncDeclScopes(ast: AST, context: AssignScopeContext) {\n        var funcDecl = <FuncDecl>ast;\n\n        var container: Symbol = null;\n        var localContainer: Symbol = null;\n        if (funcDecl.type) {\n            localContainer = ast.type.symbol;\n        }\n\n        var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n        var isInnerStatic = isStatic && context.scopeChain.fnc != null;\n        // for inner static functions, use the parent's member scope, so local vars cannot be captured\n        var parentScope = isInnerStatic ? context.scopeChain.fnc.type.memberScope : context.scopeChain.scope;\n\n        // if this is not a method, but enclosed by class, use constructor as\n        // the enclosing scope\n        // REVIEW: Some twisted logic here - this needs to be cleaned up once old classes are removed\n        //  - if it's a new class, always use the contained scope, since we initialize the constructor scope below\n        if (context.scopeChain.thisType &&\n            (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod))) {\n            var instType = context.scopeChain.thisType;\n\n            if (!(instType.typeFlags & TypeFlags.IsClass) && !hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                if (!funcDecl.isMethod() || isStatic) {\n                    parentScope = instType.constructorScope;\n                }\n                else {\n                    // use constructor scope if a method as well\n                    parentScope = instType.containedScope;\n                }\n            }\n            else {\n                if (context.scopeChain.previous.scope.container &&\n                    context.scopeChain.previous.scope.container.declAST &&\n                    context.scopeChain.previous.scope.container.declAST.nodeType == NodeType.FuncDecl &&\n                    (<FuncDecl>context.scopeChain.previous.sco";
var v27222 = v27223 + "pe.container.declAST).isConstructor) {\n\n                        // if the parent is the class constructor, use the constructor scope\n                    parentScope = instType.constructorScope;\n                }\n                else if (isStatic && context.scopeChain.classType) {\n                    parentScope = context.scopeChain.classType.containedScope;\n                }\n                else {\n                    // else, use the contained scope\n                    parentScope = instType.containedScope;\n                }\n            }\n            container = instType.symbol;\n        }\n        else if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            // sets the container to the class type's symbol (which is shared by the instance type)\n            container = context.scopeChain.thisType.symbol;\n        }\n\n        if (funcDecl.type == null || hasFlag(funcDecl.type.symbol.flags, SymbolFlags.TypeSetDuringScopeAssignment)) {\n            if (context.scopeChain.fnc && context.scopeChain.fnc.type) {\n                container = context.scopeChain.fnc.type.symbol;\n            }\n\n            var funcScope = null;\n            var outerFnc: FuncDecl = context.scopeChain.fnc;\n            var nameText = funcDecl.name ? funcDecl.name.actualText : null;\n            var fgSym: TypeSymbol = null;\n\n            if (isStatic) {\n                // In the case of function-nested statics, no member list will have bee initialized for the function, so we need\n                // to copy it over.  We don't set this by default because having a non-null member list will throw off assignment\n                // compatibility tests\n                if (outerFnc.type.members == null && container.getType().memberScope) {\n                    outerFnc.type.members = (<SymbolScopeBuilder>(<TypeSymbol>container).type.memberScope).valueMembers;\n                }\n                funcScope = context.scopeChain.fnc.type.memberScope;\n                outerFnc.innerStaticFuncs[outerFnc.innerStaticFuncs.length] = funcDecl;\n            }\n            else {\n                funcScope = context.scopeChain.scope;\n            }\n\n            // REVIEW: We don't search for another sym for accessors to prevent us from\n            // accidentally coalescing function signatures with the same name (E.g., a function\n            // 'f' the outer scope and a setter 'f' in an object literal within that scope)\n            if (nameText && nameText != \"__missing\" && !funcDecl.isAccessor()) {\n                if (isStatic) {\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n            }\n\n            context.typeFlow.checker.createFunctionSignature(funcDecl, container,\n                                                            funcScope, fgSym, fgSym == null);\n\n            // it's a getter or setter for a class property                     \n            if (!funcDecl.accessorSymbol && \n                (funcDecl.fncFlags & FncFlags.ClassMethod) &&\n                container && \n                ((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || \n                    (fgSym && fgSym.isAccessor())) \n            {\n                funcDecl.accessorSymbol = context.typeFlow.checker.createAccessorSymbol(funcDecl, fgSym, container.getType(), (funcDecl.isMethod() && isStatic), true, funcScope, container);\n            }\n\n            funcDecl.type.symbol.flags |= SymbolFlags.TypeSetDuringScopeAssignment;\n        }\n\n        // Set the symbol for functions and their overloads\n        if (funcDecl.name && funcDecl.type) {\n            funcDecl.name.sym = funcDecl.type.symbol;\n        }\n\n        // Keep track of the original scope type, because target typing might override\n        // the \"type\" member. We need the original \"Scope type\" for completion list, etc.\n        funcDecl.scopeType = funcDecl.type;\n\n        // Overloads have no scope, so bail here\n        if (funcDecl.isOverload) {\n            return;\n        }\n\n        var funcTable = new StringHashTable();\n        var funcMembers = new ScopedMembers(new DualStringHashTable(funcTable, new StringHashTable()));\n        var ambientFuncTable = new StringHashTable();\n        var ambientFuncMembers = new ScopedMembers(new DualStringHashTable(ambientFuncTable, new StringHashTable()));\n        var funcStaticTable = new StringHashTable();\n        var funcStaticMembers = new ScopedMembers(new DualStringHashTable(funcStaticTable, new StringHashTable()));\n        var ambientFuncStaticTable = new StringHashTable();\n        var ambientFuncStaticMembers = new ScopedMembers(new DualStringHashTable(ambientFuncStaticTable, new StringHashTable()));\n\n        // REVIEW: Is it a problem that this is being set twice for properties and constructors?\n        funcDe";
var v27221 = v27222 + "cl.unitIndex = context.typeFlow.checker.locationInfo.unitIndex;\n\n        var locals = new SymbolScopeBuilder(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);\n        var statics = new SymbolScopeBuilder(funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null);\n\n        if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            context.scopeChain.thisType.constructorScope = locals;\n        }\n\n        // basically, there are two problems\n        // - Above, for new classes, we were overwriting the constructor scope with the containing scope.  This caused constructor params to be\n        // in scope everywhere\n        // - Below, we're setting the contained scope table to the same table we were overwriting the constructor scope with, which we need to\n        // fish lambda params, etc, out (see funcTable below)\n        //\n        // A good first approach to solving this would be to change addLocalsFromScope to take a scope instead of a table, and add to the\n        // constructor scope as appropriate\n\n        funcDecl.symbols = funcTable;\n\n        if (!funcDecl.isSpecialFn()) {\n            var group = funcDecl.type;\n            var signature = funcDecl.signature;\n\n            if (!funcDecl.isConstructor) {\n                group.containedScope = locals;\n                locals.container = group.symbol;\n\n                group.memberScope = statics;\n                statics.container = group.symbol;\n            }\n            funcDecl.enclosingFnc = context.scopeChain.fnc;\n            group.enclosingType = isStatic ? context.scopeChain.classType : context.scopeChain.thisType;\n            // for mapping when type checking\n            var fgSym = <TypeSymbol>ast.type.symbol;\n            if (((funcDecl.fncFlags & FncFlags.Signature) == FncFlags.None) && funcDecl.vars) {\n                context.typeFlow.addLocalsFromScope(locals, fgSym, funcDecl.vars,\n                                                    funcTable, false);\n                context.typeFlow.addLocalsFromScope(statics, fgSym, funcDecl.statics,\n                                                    funcStaticTable, false);\n            }\n            if (signature.parameters) {\n                var len = signature.parameters.length;\n                for (var i = 0; i < len; i++) {\n                    var paramSym: ParameterSymbol = signature.parameters[i];\n                    context.typeFlow.checker.resolveTypeLink(locals,\n                                                                paramSym.parameter.typeLink, true);\n                }\n            }\n            context.typeFlow.checker.resolveTypeLink(locals, signature.returnType,\n                                                        funcDecl.isSignature());\n        }\n\n        if (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n            var thisType = (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) ? context.scopeChain.thisType : null;\n            pushAssignScope(locals, context, thisType, null, funcDecl);\n        }\n\n        if (funcDecl.name && hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression)) {\n            // If the function is an expression, the name will not be visible in the enclosing scope.\n            // Add the function symbol under its name to the local scope to allow for recursive calls.\n            if (funcDecl.name.sym) {\n                funcTable.add(funcDecl.name.actualText, funcDecl.name.sym);\n            }\n        }\n    }\n\n    export function preAssignCatchScopes(ast: AST, context: AssignScopeContext) {\n        var catchBlock = <Catch>ast;\n        if (catchBlock.param) {\n            var catchTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable())); // REVIEW: Should we be allocating a public table instead of a private one?\n            var catchLocals = new SymbolScopeBuilder(catchTable, null, null, null, context.scopeChain.scope,\n                                                   context.scopeChain.scope.container);\n            catchBlock.containedScope = catchLocals;\n            pushAssignScope(catchLocals, context, context.scopeChain.thisType, context.scopeChain.classType, context.scopeChain.fnc);\n        }\n    }\n\n    export function preAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n\n        if (ast) {\n            if (ast.nodeType == NodeType.List) {\n                var list = <ASTList>ast;\n                list.enclosingScope = context.scopeChain.scope;\n            }\n            else if (ast.nodeType == NodeType.ModuleDeclaration) {\n                preAssignModuleScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.ClassDeclaration) {\n                preAssignClassScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n                preAssignInterfaceScopes(";
var v27220 = v27221 + 'ast, context);\n            }\n            else if (ast.nodeType == NodeType.With) {\n                preAssignWithScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n                preAssignFuncDeclScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.Catch) {\n                preAssignCatchScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.TypeRef) {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n        if (ast) {\n            if (ast.nodeType == NodeType.ModuleDeclaration) {\n                var prevModDecl = <ModuleDeclaration>ast;\n\n                popAssignScope(context);\n\n                context.modDeclChain.pop();\n                if (context.modDeclChain.length >= 1) {\n                    context.typeFlow.checker.currentModDecl = context.modDeclChain[context.modDeclChain.length - 1];\n                }\n            }\n            else if (ast.nodeType == NodeType.ClassDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.With) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>ast;\n                if ((!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) && !funcDecl.isOverload) {\n                    popAssignScope(context);\n                }\n            }\n            else if (ast.nodeType == NodeType.Catch) {\n                var catchBlock = <Catch>ast;\n                if (catchBlock.param) {\n                    popAssignScope(context);\n                }\n            }\n            else {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class TypeCollectionContext {\n        public script: Script = null;\n\n        constructor (public scopeChain: ScopeChain, public checker: TypeChecker) {\n        }\n    }\n\n    export class MemberScopeContext {\n        public type: Type = null;\n        public ast: AST = null;\n        public scope: SymbolScope;\n        public options = new AstWalkOptions();\n\n        constructor (public flow: TypeFlow, public pos: number, public matchFlag: ASTFlags) {\n        }\n    }\n\n    export class EnclosingScopeContext {\n\n        public scopeGetter: () => SymbolScope = null;\n        public objectLiteralScopeGetter: () => SymbolScope = null;\n        public scopeStartAST: AST = null;\n        public skipNextFuncDeclForClass = false;\n        public deepestModuleDecl: ModuleDeclaration = null;\n        public enclosingClassDecl: TypeDeclaration = null;\n        public enclosingObjectLit: UnaryExpression = null;\n        public publicsOnly = true;\n        public useFullAst = false;\n        private scriptFragment: Script;\n\n        constructor (public logger: ILogger,\n                    public script: Script,\n                    public text: ISourceText,\n                    public pos: number,\n                    public isMemberCompletion: bool) {\n        }\n\n        public getScope(): SymbolScope {\n            return this.scopeGetter();\n        }\n\n        public getObjectLiteralScope(): SymbolScope {\n            return this.objectLiteralScopeGetter();\n        }\n\n        public getScopeAST() {\n            return this.scopeStartAST;\n        }\n\n        public getScopePosition() {\n            return this.scopeStartAST.minChar;\n        }\n\n        public getScriptFragmentStartAST(): AST {\n            return this.scopeStartAST;\n        }\n\n        public getScriptFragmentPosition(): number {\n            return this.getScriptFragmentStartAST().minChar;\n        }\n\n        public getScriptFragment(): Script {\n            if (this.scriptFragment == null) {\n                var ast = this.getScriptFragmentStartAST();\n                var minChar = ast.minChar;\n                var limChar = (this.isMemberCompletion ? this.pos : this.po';
var v27219 = v27220 + "s + 1);\n                this.scriptFragment = TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null/*errorCapture*/).Script;\n            }\n            return this.scriptFragment;\n        }\n    }\n\n    export function preFindMemberScope(ast: AST, parent: AST, walker: IAstWalker) {\n        var memScope: MemberScopeContext = walker.state;\n        if (hasFlag(ast.flags, memScope.matchFlag) && ((memScope.pos < 0) || (memScope.pos == ast.limChar))) {\n            memScope.ast = ast;\n            if ((ast.type == null) && (memScope.pos >= 0)) {\n                memScope.flow.inScopeTypeCheck(ast, memScope.scope);\n            }\n            memScope.type = ast.type;\n            memScope.options.stopWalk();\n        }\n        return ast;\n    }\n\n    export function pushTypeCollectionScope(container: Symbol,\n        valueMembers: ScopedMembers,\n        ambientValueMembers: ScopedMembers,\n        enclosedTypes: ScopedMembers,\n        ambientEnclosedTypes: ScopedMembers,\n        context: TypeCollectionContext,\n        thisType: Type,\n        classType: Type,\n        moduleDecl: ModuleDeclaration) {\n        var builder = new SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container);\n        var chain: ScopeChain = new ScopeChain(container, context.scopeChain, builder);\n        chain.thisType = thisType;\n        chain.classType = classType;\n        chain.moduleDecl = moduleDecl;\n        context.scopeChain = chain;\n    }\n\n    export function popTypeCollectionScope(context: TypeCollectionContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function preFindEnclosingScope(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: EnclosingScopeContext = walker.state;\n        var minChar = ast.minChar;\n        var limChar = ast.limChar;\n\n        // Account for the fact completion list may be called at the end of a file which\n        // is has not been fully re-parsed yet.\n        if (ast.nodeType == NodeType.Script && context.pos > limChar)\n            limChar = context.pos;\n\n        if ((minChar <= context.pos) &&\n            (limChar >= context.pos)) {\n            switch (ast.nodeType) {\n                case NodeType.Script:\n                    var script = <Script>ast;\n                    context.scopeGetter = function () {\n                        return script.bod === null ? null : script.bod.enclosingScope;\n                    };\n                    context.scopeStartAST = script;\n                    break;\n\n                case NodeType.ClassDeclaration:\n                    context.scopeGetter = function () {\n                        return (ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    context.enclosingClassDecl = <TypeDeclaration>ast;\n                    break;\n\n                case NodeType.ObjectLit:\n                    var objectLit = <UnaryExpression>ast;\n                    // Only consider target-typed object literals\n                    if (objectLit.targetType) {\n                        context.scopeGetter = function () {\n                            return objectLit.targetType.containedScope;\n                        };\n                        context.objectLiteralScopeGetter = function () {\n                            return objectLit.targetType.memberScope;\n                        }\n                        context.enclosingObjectLit = objectLit;\n                    }\n                    break;\n\n                case NodeType.ModuleDeclaration:\n                    context.deepestModuleDecl = <ModuleDeclaration>ast;\n                    context.scopeGetter = function () {\n                        return ast.type === null ? null : ast.type.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    break;\n\n                case NodeType.InterfaceDeclaration:\n                    context.scopeGetter = function () {\n                        return (ast.type === null) ? null : ast.type.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    break;\n\n                case NodeType.FuncDecl: {\n                    var funcDecl = <FuncDecl>ast;\n                    if (context.skipNextFuncDeclForClass) {\n                        context.skipNextFuncDeclForClass = false;\n                    }\n                    else {\n                        context.scopeGetter = function () {\n                            // The scope of a class constructor is hidden somewhere we don't expect :-S\n                            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                                if (ast.type && ast.type.enclosingType) {\n                                    return ast.type.enclosingType.constructorScope;\n                              ";
var v27218 = v27219 + '  }\n                            }\n\n                            if (funcDecl.scopeType) {\n                                return funcDecl.scopeType.containedScope;\n                            }\n\n                            if (funcDecl.type) {\n                                return funcDecl.type.containedScope;\n                            }\n                            return null;\n                        };\n                        context.scopeStartAST = ast;\n                    }\n                }\n                    break;\n            }\n            walker.options.goChildren = true;\n        }\n        else {\n            walker.options.goChildren = false;\n        }\n        return ast;\n    }\n\n    //\n    // Find the enclosing scope context from a position inside a script AST.\n    // The "scopeStartAST" of the returned scope is always valid.\n    // Return "null" if the enclosing scope can\'t be found.\n    //\n    export function findEnclosingScopeAt(logger: ILogger, script: Script, text: ISourceText, pos: number, isMemberCompletion: bool): EnclosingScopeContext {\n        var context = new EnclosingScopeContext(logger, script, text, pos, isMemberCompletion);\n\n        TypeScript.getAstWalkerFactory().walk(script, preFindEnclosingScope, null, null, context);\n\n        if (context.scopeStartAST === null)\n            return null;\n        return context;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Signature {\n        public hasVariableArgList = false;\n        public returnType: TypeLink;\n        public parameters: ParameterSymbol[] = null;\n        public declAST: FuncDecl = null;\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public nonOptionalParameterCount = 0;\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Signature {\n            var result = new Signature();\n            if (this.hasVariableArgList) {\n                result.hasVariableArgList = true;\n            }\n            result.returnType = new TypeLink();\n            if (this.returnType.type) {\n                result.returnType.type =\n                    this.returnType.type.specializeType(pattern, replacement, checker, false);\n            }\n            else {\n                result.returnType.type = checker.anyType;\n            }\n\n            if (this.parameters) {\n                result.parameters = [];\n                for (var i = 0, len = this.parameters.length; i < len; i++) {\n                    var oldSym:ParameterSymbol = this.parameters[i];\n                    var paramDef = new ValueLocation();\n                    var paramSym = new ParameterSymbol(oldSym.name, oldSym.location,\n                                                     checker.locationInfo.unitIndex,\n                                                     paramDef);\n\n                    paramSym.declAST = this.declAST;\n                    paramDef.symbol = paramSym;\n                    paramDef.typeLink = new TypeLink();\n                    result.parameters[i] = paramSym;\n                    var oldType = oldSym.getType();\n                    if (oldType) {\n                        paramDef.typeLink.type = oldType.specializeType(pattern, replacement, checker, false);\n                        paramSym.declAST.type = paramDef.typeLink.type;\n                    }\n                    else {\n                        paramDef.typeLink.type = checker.anyType;\n                    }\n                }\n            }\n            result.nonOptionalParameterCount = this.nonOptionalParameterCount;\n            result.declAST = this.declAST;\n\n            return result;\n        }\n\n        public toString() {\n            return this.toStringHelper(false, false, null);\n        }\n\n        public toStringHelper(shortform: bool, brackets: bool, scope: SymbolScope) {\n            return this.toStringHelperEx(shortform, brackets, scope).toString();\n        }\n\n        public toStringHelperEx(shortform: bool, brackets: bool, scope: SymbolScope, prefix? : string = "") : MemberName {\n            var builder = new MemberNameArray();\n            if (brackets) {\n                builder.prefix =  prefix + "[";\n            }\n            else {\n                builder.prefix = prefix + "(";\n            }\n\n            var paramLen = this.parameters.length;\n            var len = this.hasVariableArgList ? paramLen - 1 : par';
var v27217 = v27218 + 'amLen;\n            for (var i = 0; i < len; i++) {\n                builder.add(MemberName.create(this.parameters[i].name + (this.parameters[i].isOptional() ? "?" : "") + ": "));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n                if (i < paramLen - 1) {\n                    builder.add(MemberName.create(", "));\n                }\n            }\n\n            if (this.hasVariableArgList) {\n                builder.add(MemberName.create("..." + this.parameters[i].name + ": "));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n            }\n\n            if (shortform) {\n                if (brackets) {\n                    builder.add(MemberName.create("] => "));\n                }\n                else {\n                    builder.add(MemberName.create(") => "));\n                }\n            }\n            else {\n                if (brackets) {\n                    builder.add(MemberName.create("]: "));\n                }\n                else {\n                    builder.add(MemberName.create("): "));\n                }\n            }\n\n            if (this.returnType.type) {\n                 builder.add(this.returnType.type.getScopedTypeNameEx(scope));\n            }\n            else {\n                builder.add(MemberName.create("any"));\n            }\n            return builder;\n        }\n    }\n\n    export class SignatureGroup {\n        public signatures: Signature[] = [];\n        public hasImplementation = true;\n        public definitionSignature: Signature = null;\n        public hasBeenTypechecked = false;\n        public flags: SignatureFlags = SignatureFlags.None;\n        public addSignature(signature: Signature) {\n            if (this.signatures == null) {\n                this.signatures = new Signature[];\n            }\n            this.signatures[this.signatures.length] = signature;\n            \n            // REVIEW: duplicates should be found within createFunctionSignature,\n            // so we won\'t check for them here\n            if (signature.declAST &&\n                !signature.declAST.isOverload &&\n                !signature.declAST.isSignature() && \n                !hasFlag(signature.declAST.fncFlags, FncFlags.Ambient) &&\n                hasFlag(signature.declAST.fncFlags, FncFlags.Definition)) {\n                this.definitionSignature = signature;\n            }\n        }\n\n        public toString() { return this.signatures.toString(); }\n        public toStrings(prefix: string, shortform: bool, scope: SymbolScope) {\n            var result : MemberName[] = [];  \n            var len = this.signatures.length;\n            if (len > 1) {\n                shortform = false;\n            }\n            for (var i = 0; i < len; i++) {\n                // the definition signature shouldn\'t be printed if there are overloads\n                if (len > 1 && this.signatures[i] == this.definitionSignature) {\n                    continue;\n                }\n                if (this.flags & SignatureFlags.IsIndexer) {\n                    result.push(this.signatures[i].toStringHelperEx(shortform, true, scope));\n                }\n                else {\n                    result.push(this.signatures[i].toStringHelperEx(shortform, false, scope, prefix));\n                }\n            }\n            \n            return result;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): SignatureGroup {\n            var result = new SignatureGroup();\n            if (this.signatures) {\n                for (var i = 0, len = this.signatures.length; i < len; i++) {\n                    result.addSignature(this.signatures[i].specializeType(pattern, replacement, checker));\n                }\n            }\n            return result;\n        }\n\n        // verifies that signatures are\n        //  - unique within a given group\n        //  - compatible with the declaration signature\n        public verifySignatures(checker: TypeChecker) {\n\n            var len = 0;\n            \n            // TODO: verify no signature pair with identical parameters\n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                for (var i = 0; i < len; i++) {\n                    \n                    for (var j = i + 1; j < len; j++) {\n                        // next check for equivalence between overloads - no two can be exactly the same                     \n                        if (this.signatures[i].declAST && this.signatures[j].declAST &&\n                            (!hasFlag(this.signatures[i].declAST.fncFlags, FncFlags.Definition) && !hasFlag(this.signatures[j].declAST.fncFlags, FncFlags.Definition)) &&\n                            checker.signaturesAreIdentical(this.signatures[i], this.signatures[j])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, (this.signatures[i].declAST && this.signatures[i].declAST.name) ? "Signature for \'" + this.signatures';
var v27216 = v27217 + '[i].declAST.name.actualText + "\' is duplicated" :"Signature is duplicated");\n                        }\n                    }\n                    \n                    // finally, ensure that the definition is assignable to each signature\n                    if (this.definitionSignature) {\n                        if (!checker.signatureIsAssignableToTarget(this.definitionSignature, this.signatures[i])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload signature is not compatible with function definition");\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheck(checker: TypeChecker, ast: AST, hasConstruct:bool) {\n            \n            if (this.hasBeenTypechecked) {\n                return;\n            }\n            \n            // set here to prevent us from recursively invoking typeCheck again\n            this.hasBeenTypechecked = true;\n            \n            var len = 0;\n            \n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                // first, typecheck each signature\n                for (var i = 0; i < len; i++) {\n\n                    if (!hasConstruct && !this.definitionSignature && this.signatures[i].declAST && this.signatures[i].declAST.isOverload && !hasFlag(this.signatures[i].declAST.fncFlags, FncFlags.Ambient)) {\n                        checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload declaration lacks definition");\n                    }\n\n                    // If we\'re typechecking a constructor via one of its overloads, ensure that the outer class is typechecked, since we need to validate its inheritance properties\n                    // to properly check that \'super\' is being used correctly\n                    if (this.signatures[i].declAST && this.signatures[i].declAST.isConstructor && this.signatures[i].declAST.classDecl && this.signatures[i].declAST.classDecl.type.symbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                        checker.typeFlow.typeCheck(this.signatures[i].declAST.classDecl);\n                    }\n\n                    checker.typeFlow.typeCheck(this.signatures[i].declAST);\n                }\n\n                this.verifySignatures(checker);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n///<reference path=\'..\\harness\\external\\json2.ts\' />\n\nmodule TypeScript {\n    export class SourceMapPosition {\n        public sourceLine: number;\n        public sourceColumn: number;\n        public emittedLine: number;\n        public emittedColumn: number;\n    }\n\n    export class SourceMapping {\n        public start = new SourceMapPosition();\n        public end = new SourceMapPosition();\n        public nameIndex: number = -1;\n        public childMappings: SourceMapping[] = [];\n    }\n\n    export class SourceMapper {\n        static MapFileExtension = ".map";\n        \n        public sourceMappings: SourceMapping[] = [];\n        public currentMappings: SourceMapping[][] = [];\n\n        public names: string[] = [];\n        public currentNameIndex: number[] = [];\n\n        public jsFileName: string;\n        public tsFileName: string;\n\n        constructor(tsFileName: string, jsFileName: string, public jsFile: ITextWriter, public sourceMapOut: ITextWriter, public errorReporter: ErrorReporter) {\n            this.currentMappings.push(this.sourceMappings);\n\n            jsFileName = switchToForwardSlashes(jsFileName);\n            this.jsFileName = TypeScript.getPrettyName(jsFileName, false, true);\n\n            var removalIndex = jsFileName.lastIndexOf(this.jsFileName);\n            var fixedPath = jsFileName.substring(0, removalIndex);\n\n            this.tsFileName = TypeScript.getRelativePathToFixedPath(fixedPath, tsFileName);\n        }\n        \n        // Generate source mapping\n        static EmitSourceMapping(allSourceMappers: SourceMapper[]) {\n            // At this point we know that there is at least one source mapper present.\n            // If there are multiple source mappers, all will correspond to same map file but different sources\n\n            // Output map file name into the js file\n            var sourceMapper = allSourceMappers[0];\n            sourceMapper.jsFile.WriteLine("//@ sourceMappingURL=" + sourceMapper.jsFileName + SourceMapper.MapFileExtension);\n\n  ';
var v27215 = v27216 + '          // Now output map file\n            var sourceMapOut = sourceMapper.sourceMapOut;\n            var mappingsString = "";\n            var tsFiles: string[] = [];\n\n            var prevEmittedColumn = 0;\n            var prevEmittedLine = 0;\n            var prevSourceColumn = 0;\n            var prevSourceLine = 0;\n            var prevSourceIndex = 0;\n            var prevNameIndex = 0;\n            var namesList: string[] = [];\n            var namesCount = 0;\n            var emitComma = false;\n\n            var recordedPosition: SourceMapPosition = null;\n            for (var sourceMapperIndex = 0; sourceMapperIndex < allSourceMappers.length; sourceMapperIndex++) {\n                sourceMapper = allSourceMappers[sourceMapperIndex];\n\n                // If there are any mappings generated\n                var currentSourceIndex = tsFiles.length;\n                tsFiles.push(sourceMapper.tsFileName);\n\n                // Join namelist\n                if (sourceMapper.names.length > 0) {\n                    namesList.push.apply(namesList, sourceMapper.names);\n                }\n\n                var recordSourceMapping = (mappedPosition: SourceMapPosition, nameIndex: number) => {\n                    if (recordedPosition != null &&\n                        recordedPosition.emittedColumn == mappedPosition.emittedColumn &&\n                        recordedPosition.emittedLine == mappedPosition.emittedLine) {\n                        // This position is already recorded\n                        return;\n                    }\n\n                    // Record this position\n                    if (prevEmittedLine !== mappedPosition.emittedLine) {\n                        while (prevEmittedLine < mappedPosition.emittedLine) {\n                            prevEmittedColumn = 0;\n                            mappingsString = mappingsString + ";";\n                            prevEmittedLine++;\n                        }\n                        emitComma = false;\n                    }\n                    else if (emitComma) {\n                        mappingsString = mappingsString + ",";\n                    }\n\n                    // 1. Relative Column\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.emittedColumn - prevEmittedColumn);\n                    prevEmittedColumn = mappedPosition.emittedColumn;\n\n                    // 2. Relative sourceIndex \n                    mappingsString = mappingsString + Base64VLQFormat.encode(currentSourceIndex - prevSourceIndex);\n                    prevSourceIndex = currentSourceIndex;\n\n                    // 3. Relative sourceLine 0 based\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceLine - 1 - prevSourceLine);\n                    prevSourceLine = mappedPosition.sourceLine - 1;\n\n                    // 4. Relative sourceColumn 0 based \n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceColumn - prevSourceColumn);\n                    prevSourceColumn = mappedPosition.sourceColumn;\n\n                    // 5. Relative namePosition 0 based\n                    if (nameIndex >= 0) {\n                        mappingsString = mappingsString + Base64VLQFormat.encode(namesCount + nameIndex - prevNameIndex);\n                        prevNameIndex = namesCount + nameIndex;\n                    }\n\n                    emitComma = true;\n                    recordedPosition = mappedPosition;\n                }\n\n                // Record starting spans\n                var recordSourceMappingSiblings = (sourceMappings: SourceMapping[]) => {\n                    for (var i = 0; i < sourceMappings.length; i++) {\n                        var sourceMapping = sourceMappings[i];\n                        recordSourceMapping(sourceMapping.start, sourceMapping.nameIndex);\n                        recordSourceMappingSiblings(sourceMapping.childMappings);\n                        recordSourceMapping(sourceMapping.end, sourceMapping.nameIndex);\n                    }\n                }\n\n                recordSourceMappingSiblings(sourceMapper.sourceMappings, -1);\n                namesCount = namesCount + sourceMapper.names.length;\n            }\n\n            // Write the actual map file\n            if (mappingsString != "") {\n                sourceMapOut.Write(JSON2.stringify({\n                    version: 3,\n                    file: sourceMapper.jsFileName,\n                    sources: tsFiles,\n                    names: namesList,\n                    mappings: mappingsString\n                }));\n            }\n\n            // Done, close the file\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                sourceMapOut.Close();\n            } catch (ex) {\n                sourceMapper.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under';
var v27214 = v27215 + ' the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // private members are private to the scope\n    // public members are public to the scope\n    export class ScopedMembers {\n\n        public allMembers: IHashTable;\n        public publicMembers: IHashTable;\n        public privateMembers: IHashTable;\n\n        constructor (public dualMembers: DualStringHashTable) { \n            this.allMembers = this.dualMembers;\n            this.publicMembers = this.dualMembers.primaryTable;\n            this.privateMembers = this.dualMembers.secondaryTable;\n        }\n\n        // add a public member\n        public addPublicMember(key: string, data) { return this.dualMembers.primaryTable.add(key, data); }\n\n        // add a private member \n        public addPrivateMember(key: string, data) { return this.dualMembers.secondaryTable.add(key, data); }\n    }\n\n    export enum SymbolKind {\n        None,\n        Type,\n        Field,\n        Parameter,\n        Variable,\n    }\n\n    export class SymbolScope {\n        constructor (public container: Symbol) { }\n        public printLabel() { return "base"; }\n        public getAllSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        public getAllTypeSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        public getAllValueSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        // advanced search using a filter\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in this immediate scope\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in value namespace \n        public find(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find symbol that supplies an implementation\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // restrict the search to ambient values\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        public print(outfile: ITextWriter) {\n            if (this.container) {\n                outfile.WriteLine(this.printLabel() + " scope with container: " + this.container.name + "...");\n            }\n            else {\n                outfile.WriteLine(this.printLabel() + " scope...");\n            }\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, errorReporter: ErrorReporter, publicOnly: bool,\n            typespace: bool, ambient: bool): void {\n            throw new Error("please implement in derived class");\n        }\n\n        public getTable(): IHashTable {\n            throw new Error("please implement in derived class");\n        }\n    }\n\n    function symbolCanBeUsed(sym: Symbol, publicOnly) {\n        return publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                            (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                          : true;\n    }\n\n    export class SymbolAggregateScope extends SymbolScope {\n        public printLabel() { return "agg"; }\n        public valueCache: IHashTable = null;\n        public valueImplCache: IHashTable = null;\n        public valueAmbientCache: IHashTable = null;\n        public typeCache: IHashTable = null;\n        public typeImplCache: IHashTable = null;\n        public typeAmbientCache: IHashTable = null;\n        public parents: SymbolScope[] = null;\n        public container: Symbol;\n\n        constructor (container: Symbol) {\n            super(container);\n            this.container = container;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var sym = this.parents[i].search(filter, name, publicOnly, typespace);\n                    if (sym) {\n                        if (filter.update(sym)) {\n                            return sym;\n                        }\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public getAllSymbolNames(members';
var v27213 = v27214 + ": bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllTypeSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllValueSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    this.parents[i].print(outfile);\n                }\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var implCache = this.valueImplCache;\n\n            if (typespace) {\n                implCache = this.typeImplCache;\n            }\n            if (implCache &&\n                ((sym = implCache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].findImplementation(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (implCache) {\n                if (typespace) {\n                    this.typeImplCache = new StringHashTable();\n                    implCache = this.typeImplCache;\n                }\n                else {\n                    this.valueImplCache = new StringHashTable();\n                    implCache = this.valueImplCache;\n                }\n            }\n            implCache.add(name, sym);\n            return sym;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueCache;\n\n            if (typespace) {\n                cache = this.typeCache;\n            }\n            if (cache &&\n                ((sym = cache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].find(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache == null) {\n                if (typespace) {\n                    this.typeCache = new StringHashTable();\n                    cache = this.typeCache;\n                }\n                else {\n                    this.valueCache = new StringHashTable();\n                    cache = this.valueCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueAmbientCache;\n            if (typespace) {\n                cache = this.typeAmbientCache;\n            }\n            if (cache && ((sym = cache.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym =";
var v27212 = v27213 + ' this.parents[i].findAmbient(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache == null) {\n                if (typespace) {\n                    this.typeAmbientCache = new StringHashTable();\n                    cache = this.typeAmbientCache;\n                }\n                else {\n                    this.valueAmbientCache = new StringHashTable();\n                    cache = this.valueAmbientCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public addParentScope(parent: SymbolScope): void {\n            if (this.parents == null) {\n                this.parents = new SymbolScope[];\n            }\n            this.parents[this.parents.length] = parent;\n        }\n    }\n\n    export class SymbolTableScope extends SymbolScope {\n        public container: Symbol;\n\n        constructor(public valueMembers: ScopedMembers,\n                            public ambientValueMembers: ScopedMembers,\n                            public enclosedTypes: ScopedMembers,\n                            public ambientEnclosedTypes: ScopedMembers,\n                            container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return "table"; }\n\n        public getAllSymbolNames(members: bool): string[]{\n            var result = this.getAllTypeSymbolNames(members);\n\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym = this.find(name, publicOnly, typespace);\n            filter.update(sym);\n            return filter.result;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var table: IHashTable = null;\n            var ambientTable: IHashTable = null;\n\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            else {\n                table = (this.valueMembers == null) ? null :\n                                publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n                ambientTable = (this.ambientValueMembers == null) ? null :\n                                    publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n            if (table) {\n                var s = table.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n   ';
var v27211 = v27212 + '             this.valueMembers.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = this.find(name, publicOnly, typespace);\n            if (sym) {\n                if (sym.kind() == SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>sym;\n                    if (!typeSym.type.hasImplementation()) {\n                        sym = null;\n                    }\n                }\n                else if (sym.container) {\n                    if (sym.container.kind() == SymbolKind.Type) {\n                        var ctypeSym = <TypeSymbol>sym.container;\n                        if (!ctypeSym.type.hasImplementation()) {\n                            sym = null;\n                        }\n                    }\n                }\n            }\n            return sym;\n        }\n\n        public getTable() {\n            return this.valueMembers.publicMembers;\n        }\n    }\n\n    export class SymbolScopeBuilder extends SymbolScope {\n        public container: Symbol;\n        \n        constructor (public valueMembers: ScopedMembers,\n                    public ambientValueMembers: ScopedMembers,\n                    public enclosedTypes: ScopedMembers,\n                    public ambientEnclosedTypes: ScopedMembers,\n                    public parent: SymbolScope,\n                    container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return "builder"; }\n        public getAllSymbolNames(members: bool): string[]{\n            var result: string[] = this.getAllTypeSymbolNames(members);\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllTypeSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllValueSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n        ';
var v27210 = v27211 + '        }\n            }\n            if (this.parent) {\n                sym = this.parent.search(filter, name, publicOnly, typespace);\n                if (sym) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n                this.valueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.parent) {\n                this.parent.print(outfile);\n            }\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (table && ((sym = table.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.find(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.findAmbient(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            return null;\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, ';
var v27209 = v27210 + 'errorReporter: ErrorReporter, insertAsPublic: bool, typespace: bool, ambient: bool): void {\n            var table = null;\n\n            if (ambient) {\n                if (typespace) {\n                    table = (this.ambientEnclosedTypes == null) ? null :\n                                    insertAsPublic ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.ambientValueMembers == null) ? null :\n                                insertAsPublic ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.privateMembers;\n                }\n            }\n            else {\n                if (typespace) {\n                    table = (this.enclosedTypes == null) ? null :\n                                insertAsPublic ? this.enclosedTypes.publicMembers : this.enclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.valueMembers == null) ? null :\n                                insertAsPublic ? this.valueMembers.publicMembers : this.valueMembers.privateMembers;\n                }\n            }\n\n            if (table) {\n                if (!table.add(symbol.name, symbol)) {\n                    errorReporter.duplicateIdentifier(ast, symbol.name);\n                }\n            }\n            else {\n                CompilerDiagnostics.Alert("YYYYY");  // REVIEW: Surely we can do better than this...\n            }\n            symbol.container = container;\n        }\n\n        public getTable() { return this.valueMembers.allMembers; }\n    }\n\n    export class FilteredSymbolScope extends SymbolScope {\n        constructor (public scope: SymbolScope, container: Symbol, public filter: ScopeSearchFilter) {\n            super(container);\n        }\n        public print(outfile: ITextWriter) {\n            this.scope.print(outfile);\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool) {\n            this.filter.reset();\n            return this.scope.search(this.filter, name, publicOnly, typespace);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool) { return this.scope.findLocal(name, publicOnly, typespace); }\n    }\n\n    export class FilteredSymbolScopeBuilder extends SymbolScopeBuilder {\n        constructor (valueMembers: ScopedMembers, parent: SymbolScope, container: Symbol, public filter: (sym: Symbol) =>bool) {\n            super(valueMembers, null, null, null, parent, container);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return sym;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool):Symbol {\n            throw new Error("please implement");\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return super.find(name, publicOnly, typespace);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeCheckStatus {\n        NotStarted,\n        Started,\n        Finished,\n    }\n\n    // For lexically-scoped constructs\n    export function aLexicallyEnclosesB(a: Symbol, b: Symbol) {\n        if (a.declAST && b && b.declAST && a.declAST.nodeType == NodeType.FuncDecl) {\n            return a.declAST.minChar <= b.declAST.minChar && a.declAST.limChar >= b.declAST.limChar;\n        }\n        else {\n            return false;\n        }\n    }\n\n    export function aEnclosesB(a: Symbol, b: Symbol) {\n        while (a.container) {\n            if (a == b || aLexicallyEnclosesB(a.container, b)) {\n                return true;\n            }\n            a = a.container;\n        }\n        return false;\n    }\n\n    export interface PhasedTypecheckObject {\n        typeCheckStatus: TypeCheckStatus;\n    }\n\n    export class Symbol {\n        public bound = false;\n        public container: Symbol;\n        public instanceScope(): SymbolScope { return null;';
var v27208 = v27209 + ' }\n        public isVariable() { return false; }\n        public isMember() { return false; }\n        public isInferenceSymbol() { return false; }\n        public isWith() { return false; }\n        public writeable() { return false; }\n        public isType(): bool { return false; }\n        public getType(): Type { return null; }\n        public flags: SymbolFlags = SymbolFlags.None;\n        public refs: Identifier[];\n        public isAccessor() { return false; }\n        public isObjectLitField = false;\n\n        public declAST: AST = null;\n        public declModule: ModuleDeclaration = null;  // if child of module, this is the module that declared it\n\n        public passSymbolCreated: number = CompilerDiagnostics.analysisPass;\n\n        constructor(public name: string, public location: number, public length: number,\n                 public unitIndex: number) { }\n\n        public isInstanceProperty() {\n            return hasFlag(this.flags, SymbolFlags.Property) && (!hasFlag(this.flags, SymbolFlags.ModuleMember));\n        }\n\n        public getTypeName(scope: SymbolScope): string {\n            return this.getTypeNameEx(scope).toString();\n        }\n        \n        public getTypeNameEx(scope: SymbolScope): MemberName {\n            return MemberName.create(this.toString());\n        }\n\n        public getOptionalNameString() {\n            return hasFlag(this.flags, SymbolFlags.Optional) ? "?" : "";\n        }\n\n        public pathToRoot() {\n            var path = new Symbol[];\n            var node = this;\n            while (node && (node.name != globalId)) {\n                path[path.length] = node;\n                node = node.container;\n            }\n            return path;\n        }\n\n        public findCommonAncestorPath(b: Symbol) {\n            if (this.container == null) {\n                return new Symbol[];\n            }\n            var aPath = this.container.pathToRoot();\n            var bPath: Symbol[];\n            if (b) {\n                bPath = b.pathToRoot();\n            }\n            else {\n                bPath = new Symbol[];\n            }\n            var commonNodeIndex = -1;\n            for (var i = 0, aLen = aPath.length; i < aLen; i++) {\n                var aNode = aPath[i];\n                for (var j = 0, bLen = bPath.length; j < bLen; j++) {\n                    var bNode = bPath[j];\n                    if (aNode == bNode) {\n                        commonNodeIndex = i;\n                        break;\n                    }\n                }\n                if (commonNodeIndex >= 0) {\n                    break;\n                }\n            }\n            if (commonNodeIndex >= 0) {\n                return aPath.slice(0, commonNodeIndex);\n            }\n            else {\n                return aPath;\n            }\n        }\n\n        // Gets the pretty Name for the symbol withing the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            return this.name;\n        }\n\n        public scopeRelativeName(scope: SymbolScope): string {\n            if (scope == null) {\n                return this.getPrettyName(null) + this.getOptionalNameString();\n            }\n            var lca = this.findCommonAncestorPath(scope.container);\n            var builder = "";\n            for (var i = 0, len = lca.length; i < len; i++) {\n                var prettyName = lca[i].getPrettyName(i == len - 1 ? scope.container : lca[i + 1]);\n                builder = prettyName + "." + builder;\n            }\n            builder += this.getPrettyName(len == 0 ? scope.container : lca[0]) + this.getOptionalNameString();\n            return builder;\n        }\n\n        public fullName(): string {\n            var builder = this.name;\n            var ancestor = this.container;\n            while (ancestor && (ancestor.name != globalId)) {\n                builder = ancestor.name + "." + builder;\n                ancestor = ancestor.container;\n            }\n            return builder;\n        }\n\n        public isExternallyVisible(checker: TypeChecker) {\n            // Global module is not hidden\n            if (this == checker.gloMod) {\n                return true;\n            }\n\n            // private symbol\n            if (hasFlag(this.flags, SymbolFlags.Private)) {\n                return false;\n            }\n\n            // If the current container is not exported\n            // If its in global - it is visible, otherwise it isn\'t\n            if (!hasFlag(this.flags, SymbolFlags.Exported)) {\n                return this.container == checker.gloMod;\n            }\n\n            // It is visible if its container is visible too\n            return this.container.isExternallyVisible(checker);\n        }\n\n        public visible(scope: SymbolScope, checker: TypeChecker) {\n            if (checker == null || this.container == checker.gloMod) {\n                return true;\n            }\n\n            if (hasFlag(this.flags, SymbolFlags.ModuleMember)) {\n\n                if (hasFlag(this.flags, SymbolFlags.Exported)) {\n                    if (!hasFlag';
var v27207 = v27208 + '(this.flags, SymbolFlags.Private)) {\n                        return true;\n                    }\n                    else {\n                        return aEnclosesB(this, scope.container);\n                    }\n                }\n                else {\n                    // REVIEW:\n                    // Note that in the scope-assignment and binding phases,\n                    // currentModDecl will point to the "master" module decl,\n                    // and not necessarily the one that the symbol in question\n                    // was declared in.\n                    // That\'s ok - there\'s no harm done in attributing the symbol\n                    // to the master mod decl in either of those phases, so long\n                    // as we reference the actual module fragment of declaration\n                    // during typecheck.  Doing this also prevents us from printing\n                    // multiple error messages if the symbol is not visible.\n                    return checker && (checker.currentModDecl == this.declModule) ||\n                                                (checker.currentModDecl &&\n                                                    checker.currentModDecl.mod &&\n                                                    checker.currentModDecl.mod.symbol &&\n                                                    this.declModule &&\n                                                    this.declModule.mod &&\n                                                    this.declModule.mod.symbol &&\n                                                    aEnclosesB(checker.currentModDecl.mod.symbol, this.declModule.mod.symbol));\n                }\n            }\n            else {\n                // field or method\n                var isFunction = this.declAST && this.declAST.nodeType == NodeType.FuncDecl;\n                var isMethod = isFunction && (<FuncDecl>this.declAST).isMethod();\n                var isStaticFunction = isFunction && hasFlag((<FuncDecl>this.declAST).fncFlags, FncFlags.Static)\n                var isPrivateMethod = isMethod && hasFlag((<FuncDecl>this.declAST).fncFlags, FncFlags.Private);\n                var isAlias = this.isType() && (<TypeSymbol>this).aliasLink;\n\n                if (this.isMember() || isMethod || isStaticFunction || isAlias) {\n                    if (hasFlag(this.flags, SymbolFlags.Private) || isPrivateMethod) {\n                        if (scope.container == null && this.container != scope.container) {\n                            return false; // it\'s an inner member being accessed by the global scope\n                        }\n                        else {\n                            return this.container == null ? true : aEnclosesB(scope.container, this.container);\n                        }\n                    }\n                    else {\n                        return true;\n                    }\n                }\n                else if (this.container) {\n                    return aEnclosesB(this, scope.container);\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n\n        public addRef(identifier: Identifier) {\n            if (!this.refs) {\n                this.refs = [];\n            }\n            this.refs[this.refs.length] = identifier;\n        }\n\n        public toString() {\n            if (this.name) {\n                return this.name;\n            }\n            else {\n                return "_anonymous";\n            }\n        }\n\n        public print(outfile) {\n            outfile.Write(this.toString());\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            throw new Error("please implement in derived class");\n        }\n\n        public setType(type: Type) {\n            throw new Error("please implement in derived class");\n        }\n\n        public kind(): SymbolKind {\n            throw new Error("please implement in derived class");\n        }\n\n        public getInterfaceDeclFromSymbol(checker: TypeChecker) {\n            if (this.declAST != null) {\n                if (this.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.declAST;\n                } else if (this.container != null && this.container != checker.gloMod && this.container.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.container.declAST;\n                }\n            }\n\n            return null;\n        }\n\n        public getVarDeclFromSymbol() {\n            if (this.declAST != null && this.declAST.nodeType == NodeType.VarDecl) {\n                return <VarDecl>this.declAST;\n            }\n\n            return null;\n        }\n\n        public getDocComments() : Comment[] {\n            if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n        public isStatic() {\n            return hasFlag(this.fla';
var v27206 = v27207 + 'gs, SymbolFlags.Static);\n        }\n    }\n\n    export class ValueLocation {\n        public symbol: Symbol;\n        public typeLink: TypeLink;\n    }\n\n    export class InferenceSymbol extends Symbol {\n        constructor (name: string, location: number, length: number, unitIndex: number) {\n            super(name, location, length, unitIndex);\n        }\n\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public isInferenceSymbol() { return true; }\n        public transferVarFlags(varFlags: VarFlags) {\n            if (hasFlag(varFlags, VarFlags.Ambient)) {\n                this.flags |= SymbolFlags.Ambient;\n            }\n            if (hasFlag(varFlags, VarFlags.Constant)) {\n                this.flags |= SymbolFlags.Constant;\n            }\n            if (hasFlag(varFlags, VarFlags.Static)) {\n                this.flags |= SymbolFlags.Static;\n            }\n            if (hasFlag(varFlags, VarFlags.Property)) {\n                this.flags |= SymbolFlags.Property;\n            }\n            if (hasFlag(varFlags, VarFlags.Private)) {\n                this.flags |= SymbolFlags.Private;\n            }\n            if (hasFlag(varFlags, VarFlags.Public)) {\n                this.flags |= SymbolFlags.Public;\n            }\n            if (hasFlag(varFlags, VarFlags.Readonly)) {\n                this.flags |= SymbolFlags.Readonly;\n            }\n            if (hasFlag(varFlags, VarFlags.Exported)) {\n                this.flags |= SymbolFlags.Exported;\n            }\n        }\n    }\n\n    export class TypeSymbol extends InferenceSymbol {\n        public additionalLocations: number[];\n        public expansions: Type[] = []; // For types that may be "split", keep track of the subsequent definitions\n        public expansionsDeclAST: AST[] = [];\n        public isDynamic = false;\n\n        constructor (locName: string, location: number, length: number, unitIndex: number, public type: Type) {\n            super(locName, location, length, unitIndex);\n            this.prettyName = this.name;\n        }\n\n        public addLocation(loc: number) {\n            if (this.additionalLocations == null) {\n                this.additionalLocations = [];\n            }\n            this.additionalLocations[this.additionalLocations.length] = loc;\n        }\n        public isMethod = false;\n        public aliasLink:ImportDeclaration = null;\n        public kind() { return SymbolKind.Type; }\n        public isType(): bool { return true; }\n        public getType() { return this.type; }\n        public prettyName: string;\n        public onlyReferencedAsTypeRef = optimizeModuleCodeGen;\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return this.type.getMemberTypeNameEx(this.name ? this.name + this.getOptionalNameString() : "", false, false, scope);\n        }\n\n        public instanceScope(): SymbolScope {\n            // Don\'t use the constructor scope for a class body or methods - use the contained scope\n            if (!(this.type.typeFlags & TypeFlags.IsClass) && this.type.isClass()) {\n                return this.type.instanceType.constructorScope;\n            }\n            else {\n                return this.type.containedScope;\n            }\n        }\n        // corresponding instance type if this is a class\n        public instanceType: Type;\n\n        public toString() {\n            var result = this.type.getTypeName();\n            if (this.name) {\n                result = this.name + ":" + result;\n            }\n            return result;\n        }\n\n        public isClass() { return this.instanceType != null; }\n        public isFunction() { return this.declAST != null && this.declAST.nodeType == NodeType.FuncDecl; }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            if (this.type == pattern) {\n                return replacement.symbol;\n            }\n            else {\n                var replType = this.type.specializeType(pattern, replacement, checker, false);\n                if (replType != this.type) {\n                    var result = new TypeSymbol(this.name, -1, 0, -1, replType);\n                    return result;\n                }\n                else {\n                    return this;\n                }\n            }\n        }\n\n        // Gets the pretty name of the symbol with respect to symbol of the scope (scopeSymbol)\n        // searchTillRoot specifies if the name need to searched in the root path of the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            if (!!scopeSymbol && isQuoted(this.prettyName) && this.type.isModuleType()) {\n                // Its a dynamic module - and need to be specialized with the scope\n                // Check in exported module members in each scope\n                var symbolPath = scopeSymbol.pathToRoot();\n                var prettyName = this.getPrettyNameOfDynamicModule(symbolPath);\n                if (prettyName != null) {\n                    return prettyName.name;\n                }\n            }\n\n            retur';
var v27205 = v27206 + 'n this.prettyName;\n        }\n\n        public getPrettyNameOfDynamicModule(scopeSymbolPath: Symbol[]) {\n            var scopeSymbolPathLength = scopeSymbolPath.length;\n            var externalSymbol: { name: string; symbol: Symbol; } = null;\n            if (scopeSymbolPath.length > 0 &&\n                scopeSymbolPath[scopeSymbolPathLength - 1].getType().isModuleType() &&\n                (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 1]).isDynamic) {\n\n                // Check if submodule is dynamic\n                if (scopeSymbolPathLength > 1 &&\n                    scopeSymbolPath[scopeSymbolPathLength - 2].getType().isModuleType() &&\n                    (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 2]).isDynamic) {\n                    var moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 2].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n\n                }\n\n                if (externalSymbol == null) {\n                    // Check in this module\n                    var moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 1].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n                }\n            }\n\n            return externalSymbol;\n        }\n\n        public getDocComments(): Comment[]{\n            var comments : Comment[] = [];\n            if (this.declAST != null) {\n                comments = comments.concat(this.declAST.getDocComments());\n            }\n\n            for (var i = 0; i < this.expansionsDeclAST.length; i++) {\n                comments = comments.concat(this.expansionsDeclAST[i].getDocComments());\n            }\n\n            return comments;\n        }\n    }\n\n    export class WithSymbol extends TypeSymbol {\n        constructor (location: number, unitIndex: number, withType: Type) {\n            super("with", location, 4, unitIndex, withType);\n        }\n        public isWith() { return true; }\n    }\n\n    export class FieldSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n\n        constructor (name: string, location: number, unitIndex: number, public canWrite: bool,\n                      public field: ValueLocation) {\n\n            super(name, location, name.length, unitIndex);\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Field; }\n        public writeable() { return this.isAccessor() ? this.setter != null : this.canWrite; }\n        public getType() { return this.field.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.field.typeLink.type.getScopedTypeNameEx(scope), this.name + this.getOptionalNameString() + ": ", "");\n        }\n\n        public isMember() { return true; }\n        public setType(type: Type) {\n            this.field.typeLink.type = type;\n        }\n\n        public getter: TypeSymbol = null;\n        public setter: TypeSymbol = null;\n        public hasBeenEmitted = false; // since getters and setters are emitted together, need to track if one has been emitted\n\n        public isAccessor() { return this.getter != null || this.setter != null; }\n\n        public isVariable() { return true; }\n        public toString() { return this.getTypeNameEx(null).toString(); }\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.field.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (rType != this.field.typeLink.type) {\n                var fieldDef = new ValueLocation();\n                var result = new FieldSymbol(this.name, 0, checker.locationInfo.unitIndex,\n                                           this.canWrite, fieldDef);\n                result.flags = this.flags;\n                fieldDef.symbol = result;\n                fieldDef.typeLink = new TypeLink();\n                result.setType(rType);\n                result.typeCheckStatus = TypeCheckStatus.Finished;\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getDocComments(): Comment[] {\n            if (this.getter != null || this.setter != null) {\n                var comments : Comment[] = [];\n                if (this.getter != null) {\n                    comments = comments.concat(this.getter.getDocComments());\n                }\n                if (this.setter != null) {\n                    comments = comments.concat(this.setter.getDocComments());\n                }\n                return comments;\n            }\n            else if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n    }\n\n    export class ParameterSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n        private paramDocComment: string = null;\n        public funcDecl';
var v27204 = v27205 + ': AST = null;\n        \n        constructor (name: string, location: number, unitIndex: number,\n                          public parameter: ValueLocation) {\n            super(name, location, name.length, unitIndex);\n\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Parameter; }\n        public writeable() { return true; }\n        public getType() { return this.parameter.typeLink.type; }\n        public setType(type: Type) {\n            this.parameter.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n        public argsOffset = (-1);\n        public isOptional() {\n            if (this.parameter && this.parameter.symbol && this.parameter.symbol.declAST) {\n                return (<ArgDecl>this.parameter.symbol.declAST).isOptional;\n            }\n            else {\n                return false;\n            }\n        }\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + (this.isOptional() ? "?" : "") + ": ", "");\n        }\n\n        public toString() { return this.getTypeNameEx(null).toString(); }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.parameter.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (this.parameter.typeLink.type != rType) {\n                var paramDef = new ValueLocation();\n                var result = new ParameterSymbol(this.name, 0, checker.locationInfo.unitIndex,\n                                               paramDef);\n                paramDef.symbol = result;\n                result.setType(rType);\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getParameterDocComments() {\n            if (!this.paramDocComment) {\n                var parameterComments: string[] = [];\n                if (this.funcDecl) {\n                    var fncDocComments = this.funcDecl.getDocComments();\n                    var paramComment = Comment.getParameterDocCommentText(this.name, fncDocComments);\n                    if (paramComment != "") {\n                        parameterComments.push(paramComment);\n                    }\n                }\n                var docComments = TypeScript.Comment.getDocCommentText(this.getDocComments());\n                if (docComments != "") {\n                    parameterComments.push(docComments);\n                }\n                \n                this.paramDocComment = parameterComments.join("\\n");\n            }\n\n            return this.paramDocComment;\n        }\n    }\n\n    export class VariableSymbol extends InferenceSymbol {\n\n        constructor (name: string, location: number, unitIndex: number, public variable: ValueLocation) {\n            super(name, location, name.length, unitIndex);\n        }\n        public kind() { return SymbolKind.Variable; }\n        public writeable() { return true; }\n        public getType() { return this.variable.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + ": ", "");\n        }\n\n        public setType(type: Type) {\n            this.variable.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export enum TokenID {\n        // Keywords\n        Any,\n        Bool,\n        Break,\n        Case,\n        Catch,\n        Class,\n        Const,\n        Continue,\n        Debugger,\n        Default,\n        Delete,\n        Do,\n        Else,\n        Enum,\n        Export,\n        Extends,\n        Declare,\n        False,\n        Finally,\n        For,\n        Function,\n        Constructor,\n        Get,\n        If,\n        Implements,\n        Import,\n        In,\n        InstanceOf,\n        Interface,\n        Let,\n        Module,\n        New,\n        Number,\n        Null,\n        Package,\n        Private,\n        Protected,\n        Public,\n        Return,\n        Set,\n        Static,\n        String,\n        Super,\n        Switch,\n        This,\n        Throw,\n        True,\n        Try,\n        TypeOf,\n        Var,\n        Void,\n        With,\n        While,\n        Yield,\n      ';
var v27203 = v27204 + '  // Punctuation\n        Semicolon,\n        OpenParen,\n        CloseParen,\n        OpenBracket,\n        CloseBracket,\n        OpenBrace,\n        CloseBrace,\n        Comma,\n        Equals,\n        PlusEquals,\n        MinusEquals,\n        AsteriskEquals,\n        SlashEquals,\n        PercentEquals,\n        AmpersandEquals,\n        CaretEquals,\n        BarEquals,\n        LessThanLessThanEquals,\n        GreaterThanGreaterThanEquals,\n        GreaterThanGreaterThanGreaterThanEquals,\n        Question,\n        Colon,\n        BarBar,\n        AmpersandAmpersand,\n        Bar,\n        Caret,\n        And,\n        EqualsEquals,\n        ExclamationEquals,\n        EqualsEqualsEquals,\n        ExclamationEqualsEquals,\n        LessThan,\n        LessThanEquals,\n        GreaterThan,\n        GreaterThanEquals,\n        LessThanLessThan,\n        GreaterThanGreaterThan,\n        GreaterThanGreaterThanGreaterThan,\n        Plus,\n        Minus,\n        Asterisk,\n        Slash,\n        Percent,\n        Tilde,\n        Exclamation,\n        PlusPlus,\n        MinusMinus,\n        Dot,\n        DotDotDot,\n        Error,\n        EndOfFile,\n        EqualsGreaterThan,\n        Identifier,\n        StringLiteral,\n        RegularExpressionLiteral,\n        NumberLiteral,\n        Whitespace,\n        Comment,\n        Lim,\n        LimFixed = EqualsGreaterThan,\n        LimKeyword = Yield,\n    }\n\n    export var tokenTable = new TokenInfo[];\n    export var nodeTypeTable = new string[];\n    export var nodeTypeToTokTable = new number[];\n    export var noRegexTable = new bool[];\n\n    noRegexTable[TokenID.Identifier] = true;\n    noRegexTable[TokenID.StringLiteral] = true;\n    noRegexTable[TokenID.NumberLiteral] = true;\n    noRegexTable[TokenID.RegularExpressionLiteral] = true;\n    noRegexTable[TokenID.This] = true;\n    noRegexTable[TokenID.PlusPlus] = true;\n    noRegexTable[TokenID.MinusMinus] = true;\n    noRegexTable[TokenID.CloseParen] = true;\n    noRegexTable[TokenID.CloseBracket] = true;\n    noRegexTable[TokenID.CloseBrace] = true;\n    noRegexTable[TokenID.True] = true;\n    noRegexTable[TokenID.False] = true;\n\n    export enum OperatorPrecedence {\n        None,\n        Comma,\n        Assignment,\n        Conditional,\n        LogicalOr,\n        LogicalAnd,\n        BitwiseOr,\n        BitwiseExclusiveOr,\n        BitwiseAnd,\n        Equality,\n        Relational,\n        Shift,\n        Additive,\n        Multiplicative,\n        Unary,\n        Lim\n    }\n\n    export enum Reservation {\n        None = 0,\n        Javascript = 1,\n        JavascriptFuture = 2,\n        TypeScript = 4,\n        JavascriptFutureStrict = 8,\n        TypeScriptAndJS = Javascript | TypeScript,\n        TypeScriptAndJSFuture = JavascriptFuture | TypeScript,\n        TypeScriptAndJSFutureStrict = JavascriptFutureStrict | TypeScript,\n    }\n\n    export class TokenInfo {\n        constructor (public tokenId: TokenID, public reservation: Reservation,\n                    public binopPrecedence: number, public binopNodeType: number,\n                    public unopPrecedence: number, public unopNodeType: number,\n                    public text: string, public ers: ErrorRecoverySet) { }\n    }\n\n    function setTokenInfo(tokenId: TokenID, reservation: number, binopPrecedence: number,\n        binopNodeType: number, unopPrecedence: number, unopNodeType: number,\n        text: string, ers: ErrorRecoverySet) {\n        if (tokenId !== undefined) {\n            tokenTable[tokenId] = new TokenInfo(tokenId, reservation, binopPrecedence,\n                                              binopNodeType, unopPrecedence, unopNodeType, text, ers);\n            if (binopNodeType != NodeType.None) {\n                nodeTypeTable[binopNodeType] = text;\n                nodeTypeToTokTable[binopNodeType] = tokenId;\n            }\n            if (unopNodeType != NodeType.None) {\n                nodeTypeTable[unopNodeType] = text;\n            }\n        }\n    }\n\n    setTokenInfo(TokenID.Any, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "any", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Bool, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "bool", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Break, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "break", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Case, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "case", ErrorRecoverySet.SCase);\n    setTokenInfo(TokenID.Catch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "catch", ErrorRecoverySet.Catch);\n    setTokenInfo(TokenID.Class, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "class", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Const, Reservation.TypeScri';
var v27202 = v27203 + 'ptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "const", ErrorRecoverySet.Var);\n    setTokenInfo(TokenID.Continue, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "continue", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Debugger, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.Debugger, "debugger", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Default, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "default", ErrorRecoverySet.SCase);\n    setTokenInfo(TokenID.Delete, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Delete, "delete", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.Do, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "do", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Else, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "else", ErrorRecoverySet.Else);\n    setTokenInfo(TokenID.Enum, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "enum", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Export, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "export", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Extends, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "extends", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Declare, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "declare", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.False, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "false", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Finally, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "finally", ErrorRecoverySet.Catch);\n    setTokenInfo(TokenID.For, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "for", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Function, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "function", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Constructor, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "constructor", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Get, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "get", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Set, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "set", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.If, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "if", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Implements, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "implements", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Import, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "import", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.In, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.In, OperatorPrecedence.None, NodeType.None, "in", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.InstanceOf, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.InstOf, OperatorPrecedence.None, NodeType.None, "instanceof", ErrorRecoverySet.BinOp);\n    setTokenInfo(TokenID.Interface, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "interface", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Let, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "let", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Module, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "module", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.New, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "new", ErrorRecoverySet.PreOp);\n    setTokenInfo(TokenID.Number, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "number", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Nu';
var v27201 = v27202 + 'll, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "null", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Package, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "package", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Private, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "private", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Protected, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "protected", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Public, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "public", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Return, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "return", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Static, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "static", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.String, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "string", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Super, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "super", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Switch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "switch", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.This, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "this", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Throw, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "throw", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.True, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "true", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Try, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "try", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.TypeOf, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Typeof, "typeof", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.Var, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "var", ErrorRecoverySet.Var);\n    setTokenInfo(TokenID.Void, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Void, "void", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.With, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.With, "with", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.While, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "while", ErrorRecoverySet.While);\n    setTokenInfo(TokenID.Yield, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "yield", ErrorRecoverySet.None);\n\n    setTokenInfo(TokenID.Identifier, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "identifier", ErrorRecoverySet.ID);\n    setTokenInfo(TokenID.NumberLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "numberLiteral", ErrorRecoverySet.Literal);\n    setTokenInfo(TokenID.RegularExpressionLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "regex", ErrorRecoverySet.RegExp);\n    setTokenInfo(TokenID.StringLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "qstring", ErrorRecoverySet.Literal);\n\n    // Non-operator non-identifier tokens\n    setTokenInfo(TokenID.Semicolon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ";", ErrorRecoverySet.SColon); // ;\n    setTokenInfo(TokenID.CloseParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ")", ErrorRecoverySet.RParen); // )\n    setTokenInfo(TokenID.CloseBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "]", ErrorRecoverySet.RBrack); // ]\n    setTokenInfo(TokenID.OpenBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "{", ErrorRecoverySet.LCurly); // {\n    setToken';
var v27200 = v27201 + 'Info(TokenID.CloseBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "}", ErrorRecoverySet.RCurly); // }\n    setTokenInfo(TokenID.DotDotDot, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "...", ErrorRecoverySet.None); // ...\n\n    // Operator non-identifier tokens\n    setTokenInfo(TokenID.Comma, Reservation.None, OperatorPrecedence.Comma, NodeType.Comma, OperatorPrecedence.None, NodeType.None, ",", ErrorRecoverySet.Comma); // ,\n    setTokenInfo(TokenID.Equals, Reservation.None, OperatorPrecedence.Assignment, NodeType.Asg, OperatorPrecedence.None, NodeType.None, "=", ErrorRecoverySet.Asg); // =\n    setTokenInfo(TokenID.PlusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAdd, OperatorPrecedence.None, NodeType.None, "+=", ErrorRecoverySet.BinOp); // +=\n    setTokenInfo(TokenID.MinusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgSub, OperatorPrecedence.None, NodeType.None, "-=", ErrorRecoverySet.BinOp); // -=\n    setTokenInfo(TokenID.AsteriskEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMul, OperatorPrecedence.None, NodeType.None, "*=", ErrorRecoverySet.BinOp); // *=\n\n    setTokenInfo(TokenID.SlashEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgDiv, OperatorPrecedence.None, NodeType.None, "/=", ErrorRecoverySet.BinOp); // /=\n    setTokenInfo(TokenID.PercentEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMod, OperatorPrecedence.None, NodeType.None, "%=", ErrorRecoverySet.BinOp); // %=\n    setTokenInfo(TokenID.AmpersandEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAnd, OperatorPrecedence.None, NodeType.None, "&=", ErrorRecoverySet.BinOp); // &=\n    setTokenInfo(TokenID.CaretEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgXor, OperatorPrecedence.None, NodeType.None, "^=", ErrorRecoverySet.BinOp); // ^=\n    setTokenInfo(TokenID.BarEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgOr, OperatorPrecedence.None, NodeType.None, "|=", ErrorRecoverySet.BinOp); // |=\n    setTokenInfo(TokenID.LessThanLessThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgLsh, OperatorPrecedence.None, NodeType.None, "<<=", ErrorRecoverySet.BinOp); // <<=\n    setTokenInfo(TokenID.GreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRsh, OperatorPrecedence.None, NodeType.None, ">>=", ErrorRecoverySet.BinOp); // >>=\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRs2, OperatorPrecedence.None, NodeType.None, ">>>=", ErrorRecoverySet.BinOp); // >>>=\n    setTokenInfo(TokenID.Question, Reservation.None, OperatorPrecedence.Conditional, NodeType.ConditionalExpression, OperatorPrecedence.None, NodeType.None, "?", ErrorRecoverySet.BinOp); // ?\n    setTokenInfo(TokenID.Colon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ":", ErrorRecoverySet.Colon); // :\n    setTokenInfo(TokenID.BarBar, Reservation.None, OperatorPrecedence.LogicalOr, NodeType.LogOr, OperatorPrecedence.None, NodeType.None, "||", ErrorRecoverySet.BinOp); // ||\n    setTokenInfo(TokenID.AmpersandAmpersand, Reservation.None, OperatorPrecedence.LogicalAnd, NodeType.LogAnd, OperatorPrecedence.None, NodeType.None, "&&", ErrorRecoverySet.BinOp); // &&\n    setTokenInfo(TokenID.Bar, Reservation.None, OperatorPrecedence.BitwiseOr, NodeType.Or, OperatorPrecedence.None, NodeType.None, "|", ErrorRecoverySet.BinOp); // |\n    setTokenInfo(TokenID.Caret, Reservation.None, OperatorPrecedence.BitwiseExclusiveOr, NodeType.Xor, OperatorPrecedence.None, NodeType.None, "^", ErrorRecoverySet.BinOp); // ^\n    setTokenInfo(TokenID.And, Reservation.None, OperatorPrecedence.BitwiseAnd, NodeType.And, OperatorPrecedence.None, NodeType.None, "&", ErrorRecoverySet.BinOp); // &\n    setTokenInfo(TokenID.EqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eq, OperatorPrecedence.None, NodeType.None, "==", ErrorRecoverySet.BinOp); // ==\n    setTokenInfo(TokenID.ExclamationEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Ne, OperatorPrecedence.None, NodeType.None, "!=", ErrorRecoverySet.BinOp); // !=\n    setTokenInfo(TokenID.EqualsEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eqv, OperatorPrecedence.None, NodeType.None, "===", ErrorRecoverySet.BinOp); // ===\n    setTokenInfo(TokenID.ExclamationEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.NEqv, OperatorPrecedence.None, NodeType.None, "!==", ErrorRecoverySet.BinOp); // !==\n    setTokenInfo(TokenID.LessThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Lt, OperatorPrecedence.None, NodeType.None, "<", ErrorRecoverySet.BinOp); // <\n    setTokenInfo(TokenID.LessThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeTyp';
var v27199 = v27200 + 'e.Le, OperatorPrecedence.None, NodeType.None, "<=", ErrorRecoverySet.BinOp); // <=\n    setTokenInfo(TokenID.GreaterThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Gt, OperatorPrecedence.None, NodeType.None, ">", ErrorRecoverySet.BinOp); // >\n    setTokenInfo(TokenID.GreaterThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Ge, OperatorPrecedence.None, NodeType.None, ">=", ErrorRecoverySet.BinOp); // >=\n    setTokenInfo(TokenID.LessThanLessThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Lsh, OperatorPrecedence.None, NodeType.None, "<<", ErrorRecoverySet.BinOp); // <<\n    setTokenInfo(TokenID.GreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rsh, OperatorPrecedence.None, NodeType.None, ">>", ErrorRecoverySet.BinOp); // >>\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rs2, OperatorPrecedence.None, NodeType.None, ">>>", ErrorRecoverySet.BinOp); // >>>\n    setTokenInfo(TokenID.Plus, Reservation.None, OperatorPrecedence.Additive, NodeType.Add, OperatorPrecedence.Unary, NodeType.Pos, "+", ErrorRecoverySet.AddOp); // +\n    setTokenInfo(TokenID.Minus, Reservation.None, OperatorPrecedence.Additive, NodeType.Sub, OperatorPrecedence.Unary, NodeType.Neg, "-", ErrorRecoverySet.AddOp); // -\n    setTokenInfo(TokenID.Asterisk, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mul, OperatorPrecedence.None, NodeType.None, "*", ErrorRecoverySet.BinOp); // *\n    setTokenInfo(TokenID.Slash, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Div, OperatorPrecedence.None, NodeType.None, "/", ErrorRecoverySet.BinOp); // /\n    setTokenInfo(TokenID.Percent, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mod, OperatorPrecedence.None, NodeType.None, "%", ErrorRecoverySet.BinOp); // %\n    setTokenInfo(TokenID.Tilde, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Not, "~", ErrorRecoverySet.PreOp); // ~\n    setTokenInfo(TokenID.Exclamation, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.LogNot, "!", ErrorRecoverySet.PreOp); // !\n    setTokenInfo(TokenID.PlusPlus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.IncPre, "++", ErrorRecoverySet.PreOp); // ++\n    setTokenInfo(TokenID.MinusMinus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.DecPre, "--", ErrorRecoverySet.PreOp); // --\n    setTokenInfo(TokenID.OpenParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "(", ErrorRecoverySet.LParen); // (\n    setTokenInfo(TokenID.OpenBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "[", ErrorRecoverySet.LBrack); // [\n    setTokenInfo(TokenID.Dot, Reservation.None, OperatorPrecedence.Unary, NodeType.None, OperatorPrecedence.None, NodeType.None, ".", ErrorRecoverySet.Dot); // .\n    setTokenInfo(TokenID.EndOfFile, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "<EOF>", ErrorRecoverySet.EOF); // EOF\n    setTokenInfo(TokenID.EqualsGreaterThan, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "=>", ErrorRecoverySet.None); // =>\n\n    export function lookupToken(tokenId: TokenID): TokenInfo {\n        return tokenTable[tokenId];\n    }\n\n    export enum TokenClass {\n        Punctuation,\n        Keyword,\n        Operator,\n        Comment,\n        Whitespace,\n        Identifier,\n        NumberLiteral,\n        StringLiteral,\n        RegExpLiteral,\n    }\n\n    export class SavedToken {\n        constructor (public tok: Token, public minChar: number, public limChar: number) { }\n    }\n\n    export class Token {\n        constructor (public tokenId: TokenID) {\n        }\n\n        public toString() {\n            return "token: " + this.tokenId + " " + this.getText() + " (" + (<any>TokenID)._map[this.tokenId] + ")";\n        }\n\n        public print(line: number, outfile) {\n            outfile.WriteLine(this.toString() + ",on line" + line);\n        }\n\n        public getText(): string {\n            return tokenTable[this.tokenId].text;\n        }\n\n        public classification(): TokenClass {\n            if (this.tokenId <= TokenID.LimKeyword) {\n                return TokenClass.Keyword;\n            }\n            else {\n                var tokenInfo = lookupToken(this.tokenId);\n                if (tokenInfo != undefined) {\n                    if ((tokenInfo.unopNodeType != NodeType.None) ||\n                        (tokenInfo.binopNodeType != NodeType.None)) {\n                        return TokenClass.Operator;\n                    }\n                }\n            }\n\n            return TokenClass.Punctuation;\n        }\n    }\n\n    export class NumberLiteralToken extends Token {\n        constructor (public value: number,';
var v27198 = v27199 + ' public hasEmptyFraction?: bool) {\n            super(TokenID.NumberLiteral);\n        }\n\n        public getText(): string {\n            return this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString();\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.NumberLiteral;\n        }\n    }\n\n    export class StringLiteralToken extends Token {\n        constructor (public value: string) {\n            super(TokenID.StringLiteral);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.StringLiteral;\n        }\n    }\n\n    export class IdentifierToken extends Token {\n        constructor (public value: string, public hasEscapeSequence : bool) {\n            super(TokenID.Identifier);\n        }\n        public getText(): string {\n            return this.value;\n        }\n        public classification(): TokenClass {\n            return TokenClass.Identifier;\n        }\n    }\n\n    export class WhitespaceToken extends Token {\n        constructor (tokenId: TokenID, public value: string) {\n            super(tokenId);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Whitespace;\n        }\n    }\n\n    export class CommentToken extends Token {\n        constructor (tokenID: TokenID, public value: string, public isBlock: bool, public startPos: number, public line: number, public endsLine: bool) {\n            super(tokenID);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Comment;\n        }\n    }\n\n    export class RegularExpressionLiteralToken extends Token {\n        constructor(public regex) {\n            super(TokenID.RegularExpressionLiteral);\n        }\n\n        public getText(): string {\n            return this.regex.toString();\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.RegExpLiteral;\n        }\n    }\n\n    // TODO: new with length TokenID.LimFixed\n    export var staticTokens = new Token[];\n    export function initializeStaticTokens() {\n        for (var i = 0; i <= TokenID.LimFixed; i++) {\n            staticTokens[i] = new Token(i);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\'/>\n///<reference path=\'io.ts\'/>\n///<reference path=\'optionsParser.ts\'/>\n\nclass CommandLineHost implements TypeScript.IResolverHost {\n\n    public pathMap: any = {};\n    public resolvedPaths: any = {};\n\n    constructor(public compilationSettings: TypeScript.CompilationSettings) { \n    }\n\n    public getPathIdentifier(path: string) { \n        return this.compilationSettings.useCaseSensitiveFileResolution ? path : path.toLocaleUpperCase();\n    }\n\n    public isResolved(path: string) {\n        return this.resolvedPaths[this.getPathIdentifier(this.pathMap[path])] != undefined;\n    }\n\n    public resolveCompilationEnvironment(preEnv: TypeScript.CompilationEnvironment,\n        resolver: TypeScript.ICodeResolver,\n        traceDependencies: bool): TypeScript.CompilationEnvironment {\n        var resolvedEnv = new TypeScript.CompilationEnvironment(preEnv.compilationSettings, preEnv.ioHost);\n\n        var nCode = preEnv.code.length;\n        var path = "";\n\n        var postResolutionError = \n            (errorFile: string, errorMessage: string) => {\n                TypeScript.CompilerDiagnostics.debugPrint("Could not resolve file \'" + errorFile + "\'" + (errorMessage == "" ? "" : ": " + errorMessage));\n            }\n\n        var resolutionDispatcher: TypeScript.IResolutionDispatcher = {\n            postResolutionError: postResolutionError,\n            postResolution: (path: string, code: TypeScript.ISourceText) => {\n                var pathId = this.getPathIdentifier(path);\n                if (!this.resolvedPaths[pathId]) {\n                    resolvedEnv.code.push(<TypeScript.SourceUnit>code);\n                    this.resolvedPaths[pathId] = true;\n                }\n            }\n        };\n\n        for (var i = 0; i < nCode; i++) {\n            path = TypeScript.switchToForwardSlashes(preEnv.ioHost.resolvePath(preEnv.code[i].path));\n            this.pathMap[preEnv.code[i].path] = path;\n            resolver.resolveCode(path, "", false, r';
var v27197 = v27198 + 'esolutionDispatcher);\n        }\n\n        return resolvedEnv;\n    }\n}\nclass BatchCompiler {\n    public compilationSettings: TypeScript.CompilationSettings;\n    public compilationEnvironment: TypeScript.CompilationEnvironment;\n    public resolvedEnvironment: TypeScript.CompilationEnvironment = null;\n    public hasResolveErrors: bool = false;\n    public compilerVersion = "0.8.2.0";\n    public printedVersion = false;\n\n    constructor (public ioHost: IIO) { \n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n    }\n\n    public resolve() {\n        var resolver = new TypeScript.CodeResolver(this.compilationEnvironment);\n        var commandLineHost = new CommandLineHost(this.compilationSettings);\n        var ret = commandLineHost.resolveCompilationEnvironment(this.compilationEnvironment, resolver, true);\n\n        // Reset resolve error status\n        this.hasResolveErrors = false;\n\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            if (!commandLineHost.isResolved(this.compilationEnvironment.code[i].path)) {\n                this.hasResolveErrors = true;\n                var path = this.compilationEnvironment.code[i].path;\n                if (!TypeScript.isSTRFile(path) && !TypeScript.isDSTRFile(path) && !TypeScript.isTSFile(path) && !TypeScript.isDTSFile(path)) {\n                    this.ioHost.stderr.WriteLine("Unknown extension for file: \\""+path+"\\". Only .ts and .d.ts extensions are allowed.");\n                }\n                else {\n                    this.ioHost.stderr.WriteLine("Error reading file \\"" + path + "\\": File not found");\n                }\n            }\n        }\n\n        return ret;\n    }\n    \n    /// Do the actual compilation reading from input files and\n    /// writing to output file(s).\n    public compile(): bool {\n        var compiler: TypeScript.TypeScriptCompiler;\n\n        compiler = new TypeScript.TypeScriptCompiler(this.ioHost.stderr, new TypeScript.NullLogger(), this.compilationSettings);\n        compiler.setErrorOutput(this.ioHost.stderr);\n        compiler.setErrorCallback(\n            (minChar, charLen, message, unitIndex) => {\n                compiler.errorReporter.hasErrors = true;\n                var fname = this.resolvedEnvironment.code[unitIndex].path;\n                var lineCol = { line: -1, col: -1 };\n                compiler.parser.getSourceLineCol(lineCol, minChar);\n                // line is 1-base, col, however, is 0-base. add 1 to the col before printing the message\n                var msg = fname + " (" + lineCol.line + "," + (lineCol.col + 1) + "): " + message;\n                if (this.compilationSettings.errorRecovery) {\n                    this.ioHost.stderr.WriteLine(msg);\n                } else {\n                    throw new SyntaxError(msg);\n                }\n            });\n\n        if (this.compilationSettings.emitComments) {\n            compiler.emitCommentsToOutput();\n        }\n\n        var consumeUnit = (code: TypeScript.SourceUnit, addAsResident: bool) => {\n            try {\n                // if file resolving is disabled, the file\'s content will not yet be loaded\n\n                if (!this.compilationSettings.resolve) {\n                    code.content = this.ioHost.readFile(code.path);\n                    // If declaration files are going to be emitted, \n                    // preprocess the file contents and add in referenced files as well\n                    if (this.compilationSettings.generateDeclarationFiles) {\n                        TypeScript.CompilerDiagnostics.assert(code.referencedFiles == null, "With no resolve option, referenced files need to null");\n                        code.referencedFiles = TypeScript.getReferencedFiles(code);\n                    }\n                }\n\n                if (code.content != null) {\n                    if (this.compilationSettings.parseOnly) {\n                        compiler.parseUnit(code.content, code.path);\n                    }\n                    else {\n                        if (this.compilationSettings.errorRecovery) {\n                            compiler.parser.setErrorRecovery(this.ioHost.stderr);\n                        }\n                        compiler.addUnit(code.content, code.path, addAsResident, code.referencedFiles);\n                    }\n                }\n            }\n            catch (err) {\n                compiler.errorReporter.hasErrors = true;\n                // This includes syntax errors thrown from error callback if not in recovery mode\n                this.ioHost.stderr.WriteLine(err.message);\n            }\n\n        }\n\n        for (var iCode = 0 ; iCode < this.resolvedEnvironment.code.length; iCode++) {\n            if (!this.compilationSettings.parseOnly || (iCode > 0)) {\n                consumeUnit(this.resolvedEnvironment.code[iCode], false);\n            }\n        }\n\n        var emitterIOHost = {\n          ';
var v27196 = v27197 + "  createFile: (fileName: string, useUTF8?: bool) => IOUtils.createFileAndFolderStructure(this.ioHost, fileName, useUTF8),\n            directoryExists: this.ioHost.directoryExists,\n            fileExists: this.ioHost.fileExists,\n            resolvePath: this.ioHost.resolvePath\n        };\n\n        try {\n            if (!this.compilationSettings.parseOnly) {\n                compiler.typeCheck();\n                compiler.emit(emitterIOHost);\n                compiler.emitDeclarations();\n            }\n            else {\n                compiler.emitAST(emitterIOHost);\n            }\n        } catch (err) {\n            compiler.errorReporter.hasErrors = true;\n            // Catch emitter exceptions\n            if (err.message != \"EmitError\") {\n                throw err;\n            }\n        }\n\n        return compiler.errorReporter.hasErrors;\n    }\n\n    // Execute the provided inputs\n    public run() {\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            var unit = this.compilationEnvironment.code[i];\n            \n            var outputFileName: string = unit.path;\n            if (TypeScript.isTSFile(outputFileName)) {\n                outputFileName = outputFileName.replace(/\\.ts$/, \".js\");\n            } else if (TypeScript.isSTRFile(outputFileName)) {\n                outputFileName = outputFileName.replace(/\\.str$/, \".js\");\n            }\n            if (this.ioHost.fileExists(outputFileName)) {\n                var unitRes = this.ioHost.readFile(outputFileName)\n                this.ioHost.run(unitRes, outputFileName);\n            }\n        }\n    }\n\n    /// Begin batch compilation\n    public batchCompile() {\n        TypeScript.CompilerDiagnostics.diagnosticWriter = { Alert: (s: string) => { this.ioHost.printLine(s); } }\n\n        var code: TypeScript.SourceUnit;\n\n        var opts = new OptionsParser(this.ioHost);\n\n        opts.option('out', {\n            usage: 'Concatenate and emit output to single file | Redirect output structure to the directory',\n            type: 'file|directory',\n            set: (str) => {\n                this.compilationSettings.outputOption = str;\n            }\n        });\n\n        opts.option('style', {\n            usage: 'Select style checking options (examples --style requireSemi:off or --style \"eqeqeq;bitwise:off\")',\n            experimental: true,\n            set: (str) => {\n                this.compilationSettings.setStyleOptions(str);\n            }\n        });\n\n        opts.flag('sourcemap', {\n            usage: 'Generates corresponding .map file',\n            set: () => {\n                this.compilationSettings.mapSourceFiles = true;\n            }\n        });\n\n        opts.flag('declaration', {\n            usage: 'Generates corresponding .d.ts file',\n            set: () => {\n                this.compilationSettings.generateDeclarationFiles = true;\n            }\n        });\n\n        if (this.ioHost.watchFile) {\n            opts.flag('watch', {\n                usage: 'Watch output files',\n                set: () => {\n                    this.compilationSettings.watch = true;\n                }\n            }, 'w');\n        }\n\n        opts.flag('exec', {\n            usage: 'Execute the script after compilation',\n            set: () => {\n                this.compilationSettings.exec = true;\n            }\n        }, 'e');\n\n        opts.flag('parse', {\n            usage: 'Parse only',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.parseOnly = true;\n            }\n        });\n\n        opts.flag('minw', {\n            usage: 'Minimize whitespace',\n            experimental: true,\n            set: () => { this.compilationSettings.minWhitespace = true; }\n        }, 'mw');\n\n        opts.flag('const', {\n            usage: 'Propagate constants to emitted code',\n            experimental: true,\n            set: () => { this.compilationSettings.propagateConstants = true; }\n        });\n\n        opts.flag('errorrecovery', {\n            usage: 'Enable error recovery',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorRecovery = true;\n            }\n        }, 'er');\n\n        opts.flag('comments', {\n            usage: 'Emit comments to output',\n            set: () => {\n                this.compilationSettings.emitComments = true;\n            }\n        }, 'c');\n\n        opts.flag('cflow', {\n            usage: 'Control flow',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n            }\n        });\n\n        opts.flag('cflowp', {\n            usage: 'Print control flow',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.printControlFlow = true;\n            }\n        });\n\n        opts.flag('cflowu', {\n            usage: 'Print Use Def control flow',\n            experimental: true,\n            set: () ";
var v27195 = v27196 + "=> {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.controlFlowUseDef = true;\n            }\n        });\n\n        opts.flag('noerroronwith', {\n            usage: 'Allow with statements',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorOnWith = false;\n            }\n        });\n\n        opts.flag('noresolve', {\n            usage: 'Skip resolution and preprocessing',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.resolve = false;\n                this.compilationSettings.preprocess = false;\n            }\n        });\n\n        opts.flag('debug', {\n            usage: 'Print debug output',\n            experimental: true,\n            set: () => {\n                TypeScript.CompilerDiagnostics.debug = true;\n            }\n        });\n\n        opts.flag('canCallDefinitionSignature', {\n            usage: 'Allows you to call the definition signature of an overload group',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.canCallDefinitionSignature = true;\n            }\n        });\n\n        opts.flag('nooptimizemodules', {\n            usage: 'Do not optimize module codegen',\n            experimental: true,\n            set: () => {\n                TypeScript.optimizeModuleCodeGen = false;\n            }\n        });\n\n        opts.flag('nolib', {\n            usage: 'Do not include a default lib.d.ts with global declarations',\n            set: () => {\n                this.compilationSettings.useDefaultLib = false;\n            }\n        });\n\n\n        opts.flag('inferProperties', {\n            usage: 'Infer class properties from top-level assignments to \\'this\\'',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.inferPropertiesFromThisAssignment = true;\n            }\n        });\n\n        opts.option('target', {\n            usage: 'Specify ECMAScript target version: \"ES3\" (default), or \"ES5\"',\n            type: 'VER',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === 'es3') {\n                    this.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES3;\n                } else if (type === 'es5') {\n                    this.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES5;\n                }\n                else {\n                    this.ioHost.printLine(\"ECMAScript target version '\" + type + \"' not supported.  Using default 'ES3' code generation\");\n                }\n            }\n        });\n\n        opts.option('module', {\n            usage: 'Specify module code generation: \"commonjs\" (default) or \"amd\"',\n            type: 'kind',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === 'commonjs' || type === 'node') {\n                    TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;\n                } else if (type === 'amd') {\n                    TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Asynchronous;\n                } else {\n                    this.ioHost.printLine(\"Module code generation '\" + type + \"' not supported.  Using default 'commonjs' code generation\");\n                }\n            }\n        });\n\n        var printedUsage = false;\n\n        opts.flag('help', {\n            usage: 'Print this message',\n            set: () => {\n                this.printVersion();\n                opts.printUsage();\n                printedUsage = true;\n            }\n        }, 'h');\n\n        opts.flag('useCaseSensitiveFileResolution', {\n            usage: 'Force file resolution to be case sensitive',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.useCaseSensitiveFileResolution = true;\n            }\n        });\n\n        opts.flag('version', {\n            usage: 'Print the compiler\\'s version: ' + this.compilerVersion,\n            set: () => {\n                this.printVersion();\n            }\n        }, 'v');\n\n        opts.parse(this.ioHost.arguments);\n        \n        if (this.compilationSettings.useDefaultLib) {\n            var compilerFilePath = this.ioHost.getExecutingFilePath()\n            var binDirPath = this.ioHost.dirName(compilerFilePath);\n            var libStrPath = this.ioHost.resolvePath(binDirPath + \"/lib.d.ts\");\n            code = new TypeScript.SourceUnit(libStrPath, null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        for (var i = 0; i < opts.unnamed.length; i++) {\n            code = new TypeScript.SourceUnit(opts.unnamed[i], null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        // If no source files provided to compiler - print usage information\n        if (this.compilationEnvironment.code.length == (this.compilationSettings.useDefaultLib ? 1 : 0)) {\n            if (!printedUsage && !this.printedVersion";
var v27194 = v27195 + ') {\n                this.printVersion();\n                opts.printUsage();\n                this.ioHost.quit(1);\n            }\n            return;\n        }\n\n        var sourceFiles: TypeScript.SourceUnit[] = [];\n        if (this.compilationSettings.watch) {\n            // Capture the state before calling resolve\n            sourceFiles = this.compilationEnvironment.code.slice(0);\n        }\n\n        // Resolve file dependencies, if requested\n        this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n        var hasCompileErrors = this.compile();\n\n        var hasErrors = hasCompileErrors || this.hasResolveErrors;\n        if (!hasErrors) {\n            if (this.compilationSettings.exec) {\n                this.run();\n            }\n        }\n\n        if (this.compilationSettings.watch) {\n            // Watch will cause the program to stick around as long as the files exist\n            this.watchFiles(sourceFiles);\n        }\n        else {  \n            // Exit with the appropriate error code\n            this.ioHost.quit(hasErrors ? 1 : 0);\n        }\n    }\n\n    public printVersion() {\n        if (!this.printedVersion) {\n            this.ioHost.printLine("Version " + this.compilerVersion);\n            this.printedVersion = true;\n        }\n    }\n\n    public watchFiles(soruceFiles: TypeScript.SourceUnit[]) {\n        if (!this.ioHost.watchFile) {\n            this.ioHost.printLine("Error: Current host does not support -w[atch] option");\n            return;\n        }\n\n        var resolvedFiles: string[] = []\n        var watchers: { [x: string]: IFileWatcher; } = {};\n\n        var addWatcher = (filename: string) => {\n            if (!watchers[filename]) {\n                var watcher = this.ioHost.watchFile(filename, onWatchedFileChange);\n                watchers[filename] = watcher;\n            }\n            else {\n                throw new Error("Cannot watch file, it is already watched.");\n            }\n        };\n\n        var removeWatcher = (filename: string) => {\n            if (watchers[filename]) {\n                watchers[filename].close();\n                delete watchers[filename];\n            }\n            else {\n                throw new Error("Cannot stop watching file, it is not being watched.");\n            }\n        };\n\n        var onWatchedFileChange = () => {\n            // Reset the state\n            this.compilationEnvironment.code = soruceFiles;\n\n            // Resolve file dependencies, if requested\n            this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n            // Check if any new files were added to the environment as a result of the file change\n            var oldFiles = resolvedFiles;\n            var newFiles: string[] = [];\n            this.resolvedEnvironment.code.forEach((sf) => newFiles.push(sf.path));\n            newFiles = newFiles.sort();\n\n            var i = 0, j = 0;\n            while (i < oldFiles.length && j < newFiles.length) {\n\n                var compareResult = oldFiles[i].localeCompare(newFiles[j]);\n                if (compareResult == 0) {\n                    // No change here\n                    i++;\n                    j++;\n                }\n                else if (compareResult < 0) {\n                    // Entry in old list does not exist in the new one, it was removed\n                    removeWatcher(oldFiles[i]);\n                    i++;\n                }\n                else {\n                    // Entry in new list does exist in the new one, it was added\n                    addWatcher(newFiles[j]);\n                    j++;\n                }\n            }\n\n            // All remaining unmatched items in the old list have been removed\n            for (var k = i; k < oldFiles.length; k++) {\n                removeWatcher(oldFiles[k]);\n            }\n\n            // All remaing unmatched items in the new list have been added\n            for (var k = j; k < newFiles.length; k++) {\n                addWatcher(newFiles[k]);\n            }\n\n            // Update the state\n            resolvedFiles = newFiles;;\n\n            // Print header\n            this.ioHost.printLine("");\n            this.ioHost.printLine("Recompiling (" + new Date() + "): ");\n            resolvedFiles.forEach((f) => this.ioHost.printLine("    " + f));\n\n            // Trigger a new compilation\n            var hasCompileErrors = this.compile();\n\n            var hasErrors = hasCompileErrors || this.hasResolveErrors;\n            if (!hasErrors) {\n                if (this.compilationSettings.exec) {\n                    this.run();\n                }\n            }\n        };\n\n        // Switch to using stdout for all error messages\n        this.ioHost.stderr = this.ioHost.stdout;\n\n        // Initialize the initial list of resolved files, and add watches to them\n        this.resolvedEnvironment.code.forEach((sf) => {\n            resolvedFiles.push(sf.path);\n            addWatcher(sf.path);\n ';
var v27193 = v27194 + '       });\n        resolvedFiles.sort();\n    }\n}\n\n// Start the batch compilation using the current hosts IO\nvar batch = new BatchCompiler(IO);\nbatch.batchCompile();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ArrayCache {\n        public arrayType: Type;\n        public arrayBase: Type = null;\n\n        public specialize(arrInstType: Type, checker: TypeChecker): Type {\n            if (this.arrayBase == null) {\n                this.arrayBase = arrInstType.specializeType(checker.wildElm.type, this.arrayType.elementType,\n                                                   checker, true);\n            }\n            return this.arrayBase;\n        }\n    }\n\n    export class TypeComparisonInfo {\n        public onlyCaptureFirstError = false;\n        public flags: TypeRelationshipFlags = TypeRelationshipFlags.SuccessfulComparison;\n        public message = "";\n\n        public addMessageToFront(message) {\n            if (!this.onlyCaptureFirstError) {\n                this.message = this.message ? message + ":\\n\\t" + this.message : message;\n            }\n            else {\n                this.setMessage(message);\n            }\n        }\n\n        public setMessage(message) {\n            this.message = message;\n        }\n    }\n\n    export interface SignatureData {\n        parameters: ParameterSymbol[];\n        nonOptionalParameterCount: number;\n    }\n\n    export interface ApplicableSignature {\n        signature: Signature;\n        hadProvisionalErrors: bool;\n    }\n\n    export enum TypeCheckCollectionMode {\n        Resident,\n        Transient\n    }\n\n    export class PersistentGlobalTypeState {\n        public importedGlobalsTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        public importedGlobalsTypeTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        public importedGlobals: SymbolScopeBuilder;\n\n        // transient state\n        public globals: IHashTable = null;\n        public globalTypes: IHashTable = null;\n        public ambientGlobals: IHashTable = null;\n        public ambientGlobalTypes: IHashTable = null;\n\n        // resident state\n        public residentGlobalValues = new StringHashTable();\n        public residentGlobalTypes = new StringHashTable();\n        public residentGlobalAmbientValues = new StringHashTable();\n        public residentGlobalAmbientTypes = new StringHashTable();\n\n        // dual resident/transient state\n\n        // REVIEW: We shouldn\'t need to allocate private hash tables for these, since there\'s no private global scope\n        // REVIEW: In general, we should audit each instance of DualStringHashTable to ensure that both the primary\n        // and secondary tables are necessary.  If it\'s not necessary, we should sub in a constant sentinel value.\n        public dualGlobalValues: DualStringHashTable;\n        public dualGlobalTypes: DualStringHashTable;\n        public dualAmbientGlobalValues: DualStringHashTable;\n        public dualAmbientGlobalTypes: DualStringHashTable;\n\n        public globalScope: SymbolScope;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public doubleType: Type;\n\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        // Use this flag to turn resident checking on and off\n        public residentTypeCheck: bool = true;\n\n        public mod: ModuleType = null;\n        public gloMod: TypeSymbol = null;\n\n        public wildElm: TypeSymbol = null;\n\n        constructor (public errorReporter: ErrorReporter) {\n            this.importedGlobals = new SymbolScopeBuilder(null, this.importedGlobalsTable, null, this.importedGlobalsTypeTable, null, null);\n\n            this.dualGlobalValues = new DualStringHashTable(this.residentGlobalValues, new StringHashTable());\n            this.dualGlobalTypes = new DualStringHashTable(this.residentGlobalTypes, new StringHashTable());\n            this.dualAmbientGlobalValues = new DualStringHashTable(this.residentGlobalAmbientValues, new StringHashTable());\n            this.dualAmbientGlobalTypes = new DualStringHashTable(this.residentGlobalAmbientTypes, new StringHashTable());\n\n            var dualGlobalScopedMembers = new ScopedMembers(new DualStringHashTable(this.dualGlobalValues, new StringHashTable';
var v27192 = v27193 + '()));\n            var dualGlobalScopedAmbientMembers = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalValues, new StringHashTable()));\n            var dualGlobalScopedEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualGlobalTypes, new StringHashTable()));\n            var dualGlobalScopedAmbientEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalTypes, new StringHashTable()));\n\n            this.globalScope = new SymbolScopeBuilder(dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, this.importedGlobals, null);\n\n            this.voidType = this.enterPrimitive(Primitive.Void, "void");\n            this.booleanType = this.enterPrimitive(Primitive.Boolean, "bool");\n            this.doubleType = this.enterPrimitive(Primitive.Double, "number");\n            this.importedGlobals.ambientEnclosedTypes.addPublicMember("number", this.doubleType.symbol);\n\n            this.stringType = this.enterPrimitive(Primitive.String, "string");\n            this.anyType = this.enterPrimitive(Primitive.Any, "any");\n            this.nullType = this.enterPrimitive(Primitive.Null, "null");\n            this.undefinedType = this.enterPrimitive(Primitive.Undefined, "undefined");\n\n            // shared global state is resident\n            this.setCollectionMode(TypeCheckCollectionMode.Resident);\n\n            this.wildElm = new TypeSymbol("_element", -1, 0, -1, new Type());\n            this.importedGlobalsTypeTable.addPublicMember(this.wildElm.name, this.wildElm);\n\n            this.mod = new ModuleType(dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes);\n            this.mod.members = dualGlobalScopedMembers;\n            this.mod.ambientMembers = dualGlobalScopedAmbientMembers;\n            this.mod.containedScope = this.globalScope;\n\n            this.gloMod = new TypeSymbol(globalId, -1, 0, -1, this.mod);\n            this.mod.members.addPublicMember(this.gloMod.name, this.gloMod);\n\n            this.defineGlobalValue("undefined", this.undefinedType);\n        }\n\n\n        public enterPrimitive(flags: number, name: string) {\n            var primitive = new Type();\n            primitive.primitiveTypeClass = flags;\n            var symbol = new TypeSymbol(name, -1, name.length, -1, primitive);\n            symbol.typeCheckStatus = TypeCheckStatus.Finished;\n            primitive.symbol = symbol;\n            this.importedGlobals.enter(null, null, symbol, this.errorReporter, true, true, true);\n            return primitive;\n        }\n\n        public setCollectionMode(mode: TypeCheckCollectionMode) {\n            this.residentTypeCheck =\n                this.dualGlobalValues.insertPrimary =\n                    this.dualGlobalTypes.insertPrimary =\n                        this.dualAmbientGlobalValues.insertPrimary =\n                            this.dualAmbientGlobalTypes.insertPrimary = mode == TypeCheckCollectionMode.Resident;\n        }\n\n        public refreshPersistentState() {\n            this.globals = new StringHashTable();\n            this.globalTypes = new StringHashTable();\n            this.ambientGlobals = new StringHashTable();\n            this.ambientGlobalTypes = new StringHashTable();\n\n            // add global types to the global scope\n            this.globalTypes.add(this.voidType.symbol.name, this.voidType.symbol);\n            this.globalTypes.add(this.booleanType.symbol.name, this.booleanType.symbol);\n            this.globalTypes.add(this.doubleType.symbol.name, this.doubleType.symbol);\n            this.globalTypes.add("number", this.doubleType.symbol);\n            this.globalTypes.add(this.stringType.symbol.name, this.stringType.symbol);\n            this.globalTypes.add(this.anyType.symbol.name, this.anyType.symbol);\n            this.globalTypes.add(this.nullType.symbol.name, this.nullType.symbol);\n            this.globalTypes.add(this.undefinedType.symbol.name, this.undefinedType.symbol);\n\n            this.dualGlobalValues.secondaryTable = this.globals;\n            this.dualGlobalTypes.secondaryTable = this.globalTypes;\n            this.dualAmbientGlobalValues.secondaryTable = this.ambientGlobals;\n            this.dualAmbientGlobalTypes.secondaryTable = this.ambientGlobalTypes;\n        }\n\n        public defineGlobalValue(name: string, type: Type) {\n            var valueLocation = new ValueLocation();\n            valueLocation.typeLink = new TypeLink();\n            var sym = new VariableSymbol(name, 0, -1, valueLocation);\n            sym.setType(type);\n            sym.typeCheckStatus = TypeCheckStatus.Finished;\n            sym.container = this.gloMod;\n            this.importedGlobalsTable.addPublicMember(name, sym);\n        }\n    }\n\n    export class ContextualTypeContext {\n        public targetSig: Signature = null;\n        public targetThis: Type = null;\n        public targetAccessorType: Type = null;\n\n        constructor (public contextualType: Type,\n            public provisional: bool, pu';
var v27191 = v27192 + 'blic contextID: number) { }\n    }\n\n    export class ContextualTypingContextStack {\n        private contextStack: ContextualTypeContext[] = [];\n        static contextID = TypeCheckStatus.Finished + 1;\n        public pushContextualType(type: Type, provisional: bool) { this.contextStack.push(new ContextualTypeContext(type, provisional, ContextualTypingContextStack.contextID++)); this.checker.errorReporter.pushToErrorSink = provisional; }\n        public hadProvisionalErrors = false; // somewhere in the chain a provisional typecheck error was thrown\n        public popContextualType() {\n            var tc = this.contextStack.pop();\n            this.checker.errorReporter.pushToErrorSink = this.isProvisional();\n            this.hadProvisionalErrors = this.hadProvisionalErrors || (tc.provisional && (this.checker.errorReporter.getCapturedErrors().length));\n            this.checker.errorReporter.freeCapturedErrors();\n            return tc;\n        }\n        public getContextualType(): ContextualTypeContext { return (!this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1]); }\n        public getContextID() { return (!this.contextStack.length ? TypeCheckStatus.Finished : this.contextStack[this.contextStack.length - 1].contextID); }\n        public isProvisional() { return (!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional); }\n\n        constructor (public checker: TypeChecker) { }\n    }\n\n    export class TypeChecker {\n        public errorReporter: ErrorReporter = null;\n        public globalScope: SymbolScope;\n\n        public checkControlFlow = false;\n        public printControlFlowGraph = false;\n        public checkControlFlowUseDef = false;\n        public styleSettings: StyleSettings = null;\n\n        public units: LocationInfo[] = null;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public numberType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        public anon = "_anonymous";\n\n        public globals: DualStringHashTable;\n        public globalTypes: DualStringHashTable;\n        public ambientGlobals: DualStringHashTable;\n        public ambientGlobalTypes: DualStringHashTable;\n        public gloModType: ModuleType;\n        public gloMod: TypeSymbol;\n        public wildElm: TypeSymbol;\n\n        public locationInfo: LocationInfo = null;\n        public typeFlow: TypeFlow = null;\n\n        public currentCompareA: Symbol = null;\n        public currentCompareB: Symbol = null;\n\n        public currentModDecl: ModuleDeclaration = null;\n\n        public inBind = false;\n        public inWith = false;\n        public errorsOnWith = true;\n\n        public typingContextStack: ContextualTypingContextStack;\n        public currentContextualTypeContext: ContextualTypeContext = null;\n\n        public resolvingBases = false;\n\n        public canCallDefinitionSignature = false;\n\n        public assignableCache: any[] = <any>{};\n        public subtypeCache: any[] = <any>{};\n        public identicalCache: any[] = <any>{};\n\n        public provisionalStartedTypecheckObjects: PhasedTypecheckObject[] = [];\n\n        public mustCaptureGlobalThis = false;\n\n        constructor (public persistentState: PersistentGlobalTypeState) {\n            this.voidType = this.persistentState.voidType;\n            this.booleanType = this.persistentState.booleanType;\n            this.numberType = this.persistentState.doubleType;\n            this.stringType = this.persistentState.stringType;\n            this.anyType = this.persistentState.anyType;\n            this.nullType = this.persistentState.nullType;\n            this.undefinedType = this.persistentState.undefinedType;\n\n            this.globals = this.persistentState.dualGlobalValues;\n            this.globalTypes = this.persistentState.dualGlobalTypes;\n            this.ambientGlobals = this.persistentState.dualAmbientGlobalValues;\n            this.ambientGlobalTypes = this.persistentState.dualAmbientGlobalTypes;\n            this.gloModType = this.persistentState.mod;\n            this.gloMod = this.persistentState.gloMod;\n            this.wildElm = this.persistentState.wildElm;\n\n            this.globalScope = this.persistentState.globalScope;\n\n            this.typingContextStack = new ContextualTypingContextStack(this);\n        }\n\n        public setStyleOptions(style: StyleSettings) {\n            this.styleSettings = style;\n        }\n\n        // Contextual typing\n        public setContextualType(type: Type, provisional: bool) {\n            this.typingContextStack.pushContextualType(type, provisional);\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        public unsetContextualType() {\n            var lastTC = this.typingContextStack.popContextualType();\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n            return lastTC;\n   ';
var v27190 = v27191 + '     }\n\n        public hadProvisionalErrors() {\n            return this.typingContextStack.hadProvisionalErrors;\n        }\n        public resetProvisionalErrors() {\n            if (!this.typingContextStack.getContextualType()) {\n                this.typingContextStack.hadProvisionalErrors = false;\n            }\n        }\n\n        public typeCheckWithContextualType(contextType: Type, provisional: bool, condition: bool, ast: AST) {\n            if (condition) {\n                this.setContextualType(contextType, this.typingContextStack.isProvisional() || provisional);\n            }\n            this.typeFlow.typeCheck(ast);\n            if (condition) {\n                this.unsetContextualType();\n            }\n        }\n\n        public resetTargetType() {\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        // Unset the current contextual type without disturbing the stack, effectively "killing" the contextual typing process\n        public killCurrentContextualType() { this.currentContextualTypeContext = null; this.errorReporter.pushToErrorSink = false; }\n        public hasTargetType() { return this.currentContextualTypeContext && this.currentContextualTypeContext.contextualType; }\n        public getTargetTypeContext() { return this.currentContextualTypeContext; }\n\n        public inProvisionalTypecheckMode() {\n            return this.typingContextStack.isProvisional();\n        }\n\n        public getTypeCheckFinishedStatus() {\n            if (this.inProvisionalTypecheckMode()) {\n                return this.typingContextStack.getContextID();\n            }\n            return TypeCheckStatus.Finished;\n        }\n\n        public typeStatusIsFinished(status: TypeCheckStatus) {\n\n            return status == TypeCheckStatus.Finished ||\n                   (this.inProvisionalTypecheckMode() && status == this.typingContextStack.getContextID());\n        }\n\n        public addStartedPTO(pto: PhasedTypecheckObject) {\n            if (this.inProvisionalTypecheckMode()) {\n                this.provisionalStartedTypecheckObjects[this.provisionalStartedTypecheckObjects.length] = pto;\n            }\n        }\n\n        public cleanStartedPTO() {\n            for (var i = 0; i < this.provisionalStartedTypecheckObjects.length; i++) {\n                if (this.provisionalStartedTypecheckObjects[i].typeCheckStatus >= this.typingContextStack.getContextID()) {\n                    this.provisionalStartedTypecheckObjects[i].typeCheckStatus = TypeCheckStatus.NotStarted;\n                }\n            }\n            this.provisionalStartedTypecheckObjects = [];\n        }\n\n        // type collection      \n        public collectTypes(ast: AST): void {\n            if (ast.nodeType == NodeType.Script) {\n                var script = <Script>ast;\n                this.locationInfo = script.locationInfo;\n            }\n            var globalChain = new ScopeChain(this.gloMod, null, this.globalScope);\n            var context = new TypeCollectionContext(globalChain, this);\n            getAstWalkerFactory().walk(ast, preCollectTypes, postCollectTypes, null, context);\n        }\n\n        public makeArrayType(type: Type): Type {\n            if (type.arrayCache == null) {\n                type.arrayCache = new ArrayCache();\n                type.arrayCache.arrayType = new Type();\n                type.arrayCache.arrayType.elementType = type;\n                type.arrayCache.arrayType.symbol = type.symbol;\n            }\n            return type.arrayCache.arrayType;\n        }\n\n        public getParameterList(funcDecl: FuncDecl, container: Symbol): SignatureData {\n            var args = funcDecl.arguments;\n            var parameterTable = null;\n            var parameterBuilder = null;\n            var len = args.members.length;\n            var nonOptionalParams = 0;\n            var result: ParameterSymbol[] = [];\n\n            if (len > 0) {\n                parameterTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                parameterBuilder = new SymbolScopeBuilder(parameterTable, null, null, null, null, container);\n\n                for (var i = 0; i < len; i++) {\n                    var parameter = <ArgDecl>args.members[i];\n                    var paramDef = new ValueLocation();\n                    var parameterSymbol = new ParameterSymbol(parameter.id.text, parameter.minChar,\n                                                            this.locationInfo.unitIndex, paramDef);\n                    parameterSymbol.declAST = parameter;\n                    parameterSymbol.funcDecl = funcDecl;\n                    parameter.id.sym = parameterSymbol;\n                    parameter.sym = parameterSymbol;\n                    paramDef.symbol = parameterSymbol;\n                    paramDef.typeLink = getTypeLink(parameter.typeExpr, this, false);\n                    parameterBuilder.enter(null, parameter, parameterSymbol, this.errorReporter, true, false, false); // REVIEW: Shoul';
var v27189 = v27190 + "d this be entered into the private scope?\n                    result[result.length] = parameterSymbol;\n                    if (!parameter.isOptionalArg()) {\n                        nonOptionalParams++;\n                    }\n                }\n            }\n            return { parameters: result, nonOptionalParameterCount: nonOptionalParams };\n        }\n\n        // Create a signature for a function definition\n        //  (E.g., has a function body - function declarations, property declarations, lambdas)\n        public createFunctionSignature(funcDecl: FuncDecl, container: Symbol, scope: SymbolScope, overloadGroupSym: Symbol, addToScope: bool): Signature {\n\n            var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported) || container == this.gloMod;\n            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n            var isDefinition = hasFlag(funcDecl.fncFlags, FncFlags.Definition);\n            var isAmbient = hasFlag(funcDecl.fncFlags, FncFlags.Ambient);\n            var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n            var isGlobal = container == this.gloMod;\n\n            var signature: Signature = new Signature();\n            var isLambda = funcDecl.fncFlags & FncFlags.IsFunctionExpression;\n\n            // If a return type has been declared for the signature, set the type link.\n            // Otherwise:\n            //  if it's a signature, its type will be 'any'\n            //  if it's a definition, the return type will be inferred  \n            if (funcDecl.returnTypeAnnotation || isDefinition) {\n                signature.returnType = getTypeLink(funcDecl.returnTypeAnnotation, this, false);\n            }\n            else {\n                signature.returnType = new TypeLink();\n                signature.returnType.type = this.anyType;\n            }\n\n            signature.hasVariableArgList = funcDecl.variableArgList;\n\n            var sigData = this.getParameterList(funcDecl, container);\n\n            signature.parameters = sigData.parameters;\n            signature.nonOptionalParameterCount = sigData.nonOptionalParameterCount;\n\n            funcDecl.signature = signature;\n            signature.declAST = funcDecl;\n\n            var useOverloadGroupSym =\n                overloadGroupSym &&\n                overloadGroupSym.getType() &&\n                !overloadGroupSym.isAccessor() &&\n                (funcDecl.isSignature() || (isAmbient == hasFlag(overloadGroupSym.flags, SymbolFlags.Ambient)));\n\n            if (useOverloadGroupSym && isPrivate != hasFlag(overloadGroupSym.flags, SymbolFlags.Private)) {\n                this.errorReporter.simpleError(funcDecl, \"Public/Private visibility of overloads does not agree\");\n            }\n\n            var groupType = useOverloadGroupSym ? overloadGroupSym.getType() : new Type();\n\n            if (isConstructor) {\n                if (groupType.construct == null) {\n                    groupType.construct = new SignatureGroup();\n                }\n                groupType.construct.addSignature(signature);\n                groupType.construct.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.construct.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else if (funcDecl.isIndexerMember()) {\n                if (groupType.index == null) {\n                    groupType.index = new SignatureGroup();\n                    groupType.index.flags |= SignatureFlags.IsIndexer;\n                }\n\n                groupType.index.addSignature(signature);\n                groupType.index.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.index.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else {\n                if (groupType.call == null) {\n                    groupType.call = new SignatureGroup();\n                }\n                groupType.call.addSignature(signature);\n\n                groupType.call.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.call.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n\n            var instanceType = groupType.instanceType;\n\n            // Ensure that the function's symbol is properly configured\n            // (If there were overloads, we'll already have a symbol, otherwise we need to create one)\n            var funcName: string = null;\n\n            // Set the function's name:\n            //  In the case of anonymous or functions resulting from error\n            //  correction in the parser (isMissing() == true), we do not\n            //  want to set a function name, since they shouldn't be inserted\n            //  into the enclosing scope\n\n            // usedHint prevents functions bound to object literal fields from";
var v27188 = v27189 + " being added to the\n            // enclosing scope\n            var usedHint = false;\n            if (funcDecl.name && !funcDecl.name.isMissing()) {\n                funcName = funcDecl.name.text;\n            }\n            else if (funcDecl.hint) {\n                funcName = funcDecl.hint;\n                usedHint = true;\n            }\n\n            if (groupType.symbol == null) {\n                groupType.symbol =\n                    new TypeSymbol(funcName ? funcName : this.anon,\n                                    funcDecl.minChar, funcDecl.limChar - funcDecl.minChar,\n                                    this.locationInfo.unitIndex,\n                                    groupType);\n                if (!useOverloadGroupSym) {\n                    groupType.symbol.declAST = funcDecl;\n                }\n            }\n\n            // REVIEW: Are we missing any other flags?\n            if (isStatic) {\n                groupType.symbol.flags |= SymbolFlags.Static;\n            }\n\n            if (isAmbient) {\n                groupType.symbol.flags |= SymbolFlags.Ambient;\n            }\n\n            if (isPrivate) {\n                groupType.symbol.flags |= SymbolFlags.Private;\n            }\n\n            groupType.symbol.isMethod = funcDecl.isMethod();\n            if (groupType.symbol.isMethod) {\n                groupType.symbol.flags |= SymbolFlags.Property;\n            }\n\n            funcDecl.type = groupType;\n\n            // Add the function symbol to the appropriate scope\n            // if the funcDecl is a constructor, it will be added to the enclosing scope as a class\n            if (!isConstructor) {\n                // Add the function's symbol to its enclosing scope\n                if (funcName && !isLambda && !funcDecl.isAccessor() && !usedHint) {\n\n                    // REVIEW: We're not setting the isDecl flags for fuctions bound to object literal properties\n                    // so removing the isDefiniton clause would break object literals\n                    if (addToScope) {  // REVIEW: If we combine this with createFunctionDeclarationSignature, we'll need to broaden this for both decls and defs                      \n                        // if it's a static method, enter directly into the container's scope\n                        if (funcDecl.isMethod() && isStatic) {\n\n                            // REVIEW: What about private statics?\n                            if (!(<TypeSymbol>container).type.members.publicMembers.add(funcName, groupType.symbol)) {\n                                this.errorReporter.duplicateIdentifier(funcDecl, funcName);\n                            }\n\n                            groupType.symbol.container = container;\n                        } // REVIEW: Another check for overloads...\n                        else if (overloadGroupSym == null || (overloadGroupSym.declAST && !(<FuncDecl>overloadGroupSym.declAST).isOverload && (container.isType()))) {\n                            scope.enter(container, funcDecl, groupType.symbol, this.errorReporter, !isPrivate && (isExported || isStatic || isGlobal), false, isAmbient);\n                        }\n                    }\n                    else if (!funcDecl.isSpecialFn()) {\n                        groupType.symbol.container = container; // REVIEW: Set container for overloads or anonymous?\n                    }\n                }\n                else if (!funcDecl.isSpecialFn()) {\n                    groupType.symbol.container = container; // REVIEW: Set container for lambdas and accessors?\n                }\n            }\n\n            // If, say, a call signature overload was declared before the class type was, we want to reuse\n            // the type that's already been instantiated for the class type, rather than allocate a new one\n            if (useOverloadGroupSym) {\n                var overloadGroupType = overloadGroupSym ? overloadGroupSym.getType() : null;\n                var classType = groupType;\n\n                if (classType != overloadGroupType) {\n                    if (classType.construct == null) {\n                        if (overloadGroupType && overloadGroupType.construct) {\n                            classType.construct = overloadGroupType.construct;\n                        }\n                        else {\n                            classType.construct = new SignatureGroup();\n                        }\n                    }\n                    else if (overloadGroupType) {\n                        if (overloadGroupType.construct) {\n                            classType.construct.signatures.concat(overloadGroupType.construct.signatures);\n                        }\n                    }\n\n                    // sync call and index signatures as well, but don't allocate should they not\n                    // already exist\n                    if (overloadGroupType) {\n                        if (classType.call == null) {\n                            classType.call = overloadGroupType.call;\n                        }\n                ";
var v27187 = v27188 + '        else if (overloadGroupType.call) {\n                            classType.call.signatures.concat(overloadGroupType.call.signatures);\n                        }\n\n                        // if the function is not static, we need to add any call overloads onto the\n                        // instance type\'s call signature list\n                        if (!isStatic) {\n\n                            if (classType.instanceType == null) {\n                                classType.instanceType = overloadGroupType.instanceType;\n                            }\n\n                            var instanceType = classType.instanceType;\n\n                            if (instanceType) {\n                                if (instanceType.call == null) {\n                                    instanceType.call = overloadGroupType.call;\n                                }\n                                else if (overloadGroupType.call) {\n                                    instanceType.call.signatures.concat(overloadGroupType.call.signatures);\n                                }\n                            }\n                        }\n\n                        if (classType.index == null) {\n                            classType.index = overloadGroupType.index;\n                        }\n                        else if (overloadGroupType.index) {\n                            classType.index.signatures.concat(overloadGroupType.index.signatures);\n                        }\n                    }\n                }\n            }\n\n            return signature;\n        }\n\n        // Creates a new symbol for an accessor property\n        // Note that funcDecl.type.symbol and fgSym may not be the same (E.g., in the case of type collection)\n        public createAccessorSymbol(funcDecl: FuncDecl, fgSym: Symbol, enclosingClass: Type, addToMembers: bool, isClassProperty: bool, scope: SymbolScope, container: Symbol) {\n            var accessorSym: FieldSymbol = null\n            var sig = funcDecl.signature;\n            var nameText = funcDecl.name.text;\n            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n\n            if (fgSym == null) {\n                var field = new ValueLocation();\n                accessorSym = new FieldSymbol(nameText, funcDecl.minChar, this.locationInfo.unitIndex, false, field);\n                field.symbol = accessorSym;\n                accessorSym.declAST = funcDecl; // REVIEW: need to reset for getters and setters\n\n                if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                    if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");\n                    }\n                    accessorSym.getter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");\n                    }\n                    accessorSym.setter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n\n                field.typeLink = getTypeLink(null, this, false);\n\n                // if it\'s static, enter it into the class\'s member list directly\n                if (addToMembers) {\n                    if (enclosingClass) {\n                        if (!enclosingClass.members.publicMembers.add(nameText, accessorSym)) {\n                            this.errorReporter.duplicateIdentifier(funcDecl, accessorSym.name);\n                        }\n                        accessorSym.container = enclosingClass.symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(funcDecl, "Accessor property may not be added in this context");\n                    }\n                }\n                else {\n                    scope.enter(container, funcDecl, accessorSym, this.errorReporter, !isPrivate || isStatic, false, false);\n                }\n\n                // We set the flags here, instead of below, because the accessor symbol does not yet have a type\n                if (isClassProperty) {\n                    accessorSym.flags |= SymbolFlags.Property;\n                }\n                if (isStatic) {\n                    accessorSym.flags |= SymbolFlags.Static;\n                }\n\n                if (isPrivate) {\n                    accessorSym.flags |= SymbolFlags.Private;\n                }\n                else {\n                    accessorSym.flags |= SymbolFlags.Public;\n                }\n            }\n            else {\n                accessorSym = <FieldSymbol>(<any>fgSym);\n\n                if (isPrivate != hasFlag(accessorSym.flags, SymbolFlags.Private)) {\n                    this.errorReporter.simpleError(funcDecl, "Getter and setter accessors do not agree in visibility");\n                }\n\n                if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n       ';
var v27186 = v27187 + '             if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");\n                    }\n                    accessorSym.getter = <TypeSymbol>funcDecl.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");\n                    }\n                    accessorSym.setter = <TypeSymbol>funcDecl.type.symbol;\n                }\n            }\n\n            return accessorSym;\n        }\n\n        public addBases(resultScope: SymbolAggregateScope, type: Type, baseContext: { base: string; baseId: number; }): void {\n            resultScope.addParentScope(new SymbolTableScope(type.members, type.ambientMembers, type.getAllEnclosedTypes(), type.getAllAmbientEnclosedTypes(), type.symbol));\n            var i = 0;\n            var parent: Type;\n            if (type.extendsList) {\n                for (var len = type.extendsList.length; i < len; i++) {\n                    parent = type.extendsList[i];\n                    if (baseContext.baseId == parent.typeID) {\n                        this.errorReporter.reportErrorFromSym(parent.symbol, "Type \'" + baseContext.base + "\' is recursively referenced as a base class of itself");\n                        parent.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        break;\n                    }\n                    this.addBases(resultScope, parent, baseContext);\n                }\n            }\n        }\n\n        public scopeOf(type: Type): SymbolScope {\n            var resultScope = new SymbolAggregateScope(type.symbol);\n            var baseContext = { base: type.symbol && type.symbol.name ? type.symbol.name : "{}", baseId: type.typeID };\n            this.addBases(resultScope, type, baseContext);\n            return resultScope;\n        }\n\n        public lookupMemberTypeSymbol(containingType: Type, name: string): Symbol {\n            var symbol: Symbol = null;\n            if (containingType.containedScope) {\n                symbol = containingType.containedScope.find(name, false, true);\n            }\n            else if (containingType.members) {\n                symbol = containingType.members.allMembers.lookup(name);\n\n                if (symbol == null && containingType.ambientMembers) {\n                    symbol = containingType.ambientMembers.allMembers.lookup(name);\n                }\n            }\n            if (symbol == null) {\n                var typeMembers = containingType.getAllEnclosedTypes();\n                var ambientTypeMembers = containingType.getAllAmbientEnclosedTypes();\n                if (typeMembers) {\n                    symbol = typeMembers.allMembers.lookup(name);\n\n                    if (symbol == null && ambientTypeMembers) {\n                        symbol = ambientTypeMembers.allMembers.lookup(name);\n                    }\n\n                }\n            }\n            if (symbol && symbol.isType()) {\n                return symbol;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public findSymbolForDynamicModule(idText: string, currentFileName: string, search: (id: string) =>Symbol): Symbol {\n            var originalIdText = idText;\n            var symbol = search(idText);\n           \n            if (symbol == null) {\n                // perhaps it\'s a dynamic module?\n                if (!symbol) {\n                    idText = swapQuotes(originalIdText);\n                    symbol = search(idText);\n                }\n\n                // Check the literal path first\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".ts";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".str";\n                    symbol = search(idText);\n                }\n\n                // Check check for .d.str\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".d.ts";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".d.str";\n                    symbol = search(idText);\n                }\n\n                // If the literal path doesn\'t work, begin the search\n                if (!symbol && !isRelative(originalIdText)) {\n                    // check the full path first, as this is the most likely scenario\n                    idText = originalIdText;\n\n                    var strippedIdText = stripQuotes(idText);\n\n                    // REVIEW: Technically, we shouldn\'t have to normalize here - we should normalize in addUnit.\n                    // Still, normalizing here alows any language services to be free of assumptions\n                    var path = getRootFilePath(switchToForwardSlashes(currentFileName));\n\n                    ';
var v27185 = v27186 + 'while (symbol == null && path != "") {\n                        idText = normalizePath(path + strippedIdText + ".ts");\n                        symbol = search(idText);\n\n                        // check for .str\n                        if (symbol == null) {\n                            idText = changePathToSTR(idText);\n                            symbol = search(idText);\n                        }\n\n                        // check for .d.ts\n                        if (symbol == null) {\n                            idText = changePathToDTS(idText);\n                            symbol = search(idText);\n                        }\n\n                        // check for .d.str\n                        if (symbol == null) {\n                            idText = changePathToDSTR(idText);\n                            symbol = search(idText);\n                        }\n\n                        if (symbol == null) {\n\t\t\t\t\t\t\tif(path === \'/\') {\n\t\t\t\t\t\t\t\tpath = \'\';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpath = normalizePath(path + "..");\n\t\t\t\t\t\t\t\tpath = path && path != \'/\' ? path + \'/\' : path;\n\t\t\t\t\t\t\t}\n                        }\n                    }\n                }\n            }\n\n            return symbol;\n        }\n\n        public resolveTypeMember(scope: SymbolScope, dotNode: BinaryExpression): Type {\n            var lhs = dotNode.operand1;\n            var rhs = dotNode.operand2;\n            var resultType = this.anyType;\n            var lhsType = this.anyType;\n\n            if (lhs && rhs && (rhs.nodeType == NodeType.Name)) {\n                if (lhs.nodeType == NodeType.Dot) {\n                    lhsType = this.resolveTypeMember(scope, <BinaryExpression>lhs);\n                }\n                else if (lhs.nodeType == NodeType.Name) {\n                    var identifier = <Identifier>lhs;\n                    var symbol = scope.find(identifier.text, false, true);\n                    if (symbol == null) {\n                        this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                    }\n                    else if (symbol.isType()) {\n\n                        var typeSymbol = <TypeSymbol> symbol;\n\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.findSymbolForDynamicModule(modPath, this.locationInfo.filename, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymbol.type = modSym.getType();\n                            }\n                        }\n\n                        if (optimizeModuleCodeGen && symbol) {\n                            var symType = symbol.getType();\n                            // Once the type has been referenced outside of a type ref position, there\'s\n                            // no going back                        \n                            if (symType && typeSymbol.aliasLink && typeSymbol.onlyReferencedAsTypeRef) {\n\n                                var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                                if (modDecl && hasFlag(modDecl.modFlags, ModuleFlags.IsDynamic)) {\n                                    typeSymbol.onlyReferencedAsTypeRef = !this.resolvingBases;\n                                }\n                            }\n                        }\n                        if (!symbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, "The symbol \'" + identifier.actualText + "\' is not visible at this point");\n                        }\n                        lhsType = symbol.getType();\n\n                        identifier.sym = symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(lhs, "Expected type");\n                    }\n\n                }\n\n                // if the LHS type is a module alias, we won\'t be able to resolve it until\n                // typecheck type.  If this is called during binding, lhsType will be null\n                if (!lhsType) {\n                    lhsType = this.anyType;\n                }\n\n                if (lhsType != this.anyType) {\n                    var rhsIdentifier = <Identifier>rhs;\n                    var resultSymbol = this.lookupMemberTypeSymbol(lhsType, rhsIdentifier.text);\n                    if (resultSymbol == null) {\n                        resultType = this.anyType;\n                        this.errorReporter.simpleError(dotNode, "Expected type");\n                    }\n                    else {\n                        resultType = resultSymbol.getType();\n                        if (!resultSymbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, "The symbol \'" + (<Identifier>rhs).actualText + "\' is not visible at this point");\n                        }\n                    }\n                    rhsIdentifier.sym =';
var v27184 = v27185 + ' resultType.symbol;\n                }\n            }\n            if (resultType.isClass()) {\n                resultType = resultType.instanceType;\n            }\n            return resultType;\n        }\n\n        public resolveFuncDecl(funcDecl: FuncDecl, scope: SymbolScope,\n            fgSym: TypeSymbol): Symbol {\n            var functionGroupSymbol = this.createFunctionSignature(funcDecl, scope.container, scope, fgSym, false).declAST.type.symbol;\n            var signatures: Signature[];\n            if (funcDecl.isConstructMember()) {\n                signatures = functionGroupSymbol.type.construct.signatures;\n            }\n            else if (funcDecl.isIndexerMember()) {\n                signatures = functionGroupSymbol.type.getInstanceType().index.signatures;\n            }\n            else {\n                signatures = functionGroupSymbol.type.call.signatures;\n            }\n\n            var signature = signatures[signatures.length - 1];\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var paramSym: ParameterSymbol = signature.parameters[i];\n                this.resolveTypeLink(scope, paramSym.parameter.typeLink, true);\n            }\n\n            // If a vararg list is present, check that the type is an array type\n            if (len && funcDecl.variableArgList) {\n                if (!signature.parameters[len - 1].parameter.typeLink.type.elementType) {\n                    this.errorReporter.simpleErrorFromSym(signature.parameters[len - 1].parameter.symbol, "... parameter must have array type");\n                    signature.parameters[len - 1].parameter.typeLink.type = this.makeArrayType(signature.parameters[len - 1].parameter.typeLink.type);\n                }\n            }\n            this.resolveTypeLink(scope, signature.returnType,\n                            funcDecl.isSignature());\n            return functionGroupSymbol;\n        }\n\n        public resolveVarDecl(varDecl: VarDecl, scope: SymbolScope): Symbol {\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.minChar, this.locationInfo.unitIndex,\n                                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.varFlags);\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = varDecl;\n            field.typeLink = getTypeLink(varDecl.typeExpr, this, varDecl.init == null);\n            this.resolveTypeLink(scope, field.typeLink, true);\n            varDecl.sym = fieldSymbol;\n            varDecl.type = field.typeLink.type;\n            return fieldSymbol;\n        }\n\n        public resolveTypeLink(scope: SymbolScope, typeLink: TypeLink, supplyVar: bool): void {\n            var arrayCount = 0;\n            if (typeLink.type == null) {\n                var ast: AST = typeLink.ast;\n                if (ast) {\n                    while (typeLink.type == null) {\n                        switch (ast.nodeType) {\n                            case NodeType.Name:\n                                var identifier = <Identifier>ast;\n                                var symbol = scope.find(identifier.text, false, true);\n                                if (symbol == null) {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                                }\n                                else if (symbol.isType()) {\n                                    if (!symbol.visible(scope, this)) {\n                                        this.errorReporter.simpleError(ast, "The symbol \'" + identifier.actualText + "\' is not visible at this point");\n                                    }\n                                    identifier.sym = symbol;\n                                    typeLink.type = symbol.getType();\n                                    if (typeLink.type) {\n                                        if (typeLink.type.isClass()) {\n                                            typeLink.type = typeLink.type.instanceType;\n                                        }\n                                    }\n                                    else {\n                                        typeLink.type = this.anyType;\n                                    }\n                                }\n                                else {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.simpleError(ast, "Expected type");\n                                }\n                                break;\n                            case NodeType.Dot:\n                                typeLink.type = this.resolveTypeMember(scope, <BinaryExpression>ast);\n                                break;\n                            case NodeType.TypeRef:\n                       ';
var v27183 = v27184 + '         var typeRef = <TypeReference>ast;\n                                arrayCount = typeRef.arrayCount;\n                                ast = typeRef.term;\n                                if (ast == null) {\n                                    typeLink.type = this.anyType;\n                                }\n                                break;\n                            case NodeType.InterfaceDeclaration:\n                                var interfaceDecl = <InterfaceDeclaration>ast;\n                                var interfaceType = new Type();\n                                var interfaceSymbol = new TypeSymbol((<Identifier>interfaceDecl.name).text,\n                                                                   ast.minChar,\n                                                                   ast.limChar - ast.minChar,\n                                                                   this.locationInfo.unitIndex,\n                                                                   interfaceType);\n                                interfaceType.symbol = interfaceSymbol;\n                                interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                                interfaceType.containedScope =\n                                    new SymbolTableScope(interfaceType.members, null, null, null,\n                                                         interfaceSymbol);\n\n                                interfaceType.containedScope.container = interfaceSymbol;\n                                interfaceType.memberScope = interfaceType.containedScope;\n\n                                var memberList = <ASTList>interfaceDecl.members;\n                                var props: AST[] = memberList.members;\n                                var propsLen = props.length;\n\n                                for (var j = 0; j < propsLen; j++) {\n                                    var propDecl = props[j];\n                                    var propSym: Symbol = null;\n                                    var addMember = true;\n                                    var id: Identifier = null;\n                                    if (propDecl.nodeType == NodeType.FuncDecl) {\n                                        var funcDecl = <FuncDecl>propDecl;\n                                        id = funcDecl.name;\n                                        propSym = interfaceType.members.allMembers.lookup(funcDecl.getNameText());\n                                        addMember = (propSym == null);\n                                        if (funcDecl.isSpecialFn()) {\n                                            addMember = false;\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, interfaceSymbol);\n                                        }\n                                        else {\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, <TypeSymbol>propSym);\n                                        }\n                                        funcDecl.type = (<TypeSymbol>propSym).type;\n                                    }\n                                    else {\n                                        id = (<VarDecl>propDecl).id;\n                                        propSym = this.resolveVarDecl(<VarDecl>propDecl, scope);\n\n                                        // Don\'t add the member if it was missing a name.  This \n                                        // generally just leads to cascading errors that make things\n                                        // more confusing for the user.\n                                        addMember = !id.isMissing();\n                                    }\n\n                                    if (addMember) {\n                                        if (id && hasFlag(id.flags, ASTFlags.OptionalName)) {\n                                            propSym.flags |= SymbolFlags.Optional;\n                                        }\n                                        if (!interfaceType.members.allMembers.add(propSym.name, propSym)) {\n                                            this.errorReporter.duplicateIdentifier(ast, propSym.name);\n                                        }\n                                    }\n                                }\n\n                                ast.type = interfaceType;\n                                typeLink.type = interfaceType;\n\n                                break;\n                            case NodeType.FuncDecl:\n                                var tsym = <TypeSymbol>this.resolveFuncDecl(<FuncDecl>ast, scope, null);\n                                typeLink.type = tsym.type;\n                                break;\n                            default:\n                                typeLink.type = this.anyType;\n                                this.errorReporter.simpleError(ast, "Expected type");\n                ';
var v27182 = v27183 + '                break;\n                        }\n                    }\n                }\n                for (var count = arrayCount; count > 0; count--) {\n                    typeLink.type = this.makeArrayType(typeLink.type);\n                }\n                if (supplyVar && (typeLink.type == null)) {\n                    typeLink.type = this.anyType;\n                }\n                if (typeLink.ast) {\n                    typeLink.ast.type = typeLink.type;\n                }\n            }\n            // else wait for type inference\n        }\n\n        public resolveBaseTypeLink(typeLink: TypeLink, scope: SymbolScope) {\n            this.resolvingBases = true;\n            this.resolveTypeLink(scope, typeLink, true);\n            this.resolvingBases = false;\n            var extendsType: Type = null;\n            if (typeLink.type.isClass()) {\n                extendsType = typeLink.type.instanceType;\n            }\n            else {\n                extendsType = typeLink.type;\n            }\n\n            return extendsType;\n        }\n\n        public findMostApplicableSignature(signatures: ApplicableSignature[], args: ASTList): { sig: Signature; ambiguous: bool; } {\n\n            if (signatures.length == 1) {\n                return { sig: signatures[0].signature, ambiguous: false };\n            }\n\n            var best: ApplicableSignature = signatures[0];\n            var Q: ApplicableSignature = null;\n            var AType: Type = null;\n            var PType: Type = null;\n            var QType: Type = null;\n            var ambiguous = false;\n\n            for (var qSig = 1; qSig < signatures.length; qSig++) {\n                Q = signatures[qSig];\n                var i = 0;\n                // find the better conversion\n                for (i = 0; args && i < args.members.length; i++) {\n                    AType = args.members[i].type;\n                    PType = i < best.signature.parameters.length ? best.signature.parameters[i].getType() : best.signature.parameters[best.signature.parameters.length - 1].getType().elementType;\n                    QType = i < Q.signature.parameters.length ? Q.signature.parameters[i].getType() : Q.signature.parameters[Q.signature.parameters.length - 1].getType().elementType;\n\n                    if (this.typesAreIdentical(PType, QType)) {\n                        continue;\n                    }\n                    else if (this.typesAreIdentical(AType, PType)) {\n                        break;\n                    }\n                    else if (this.typesAreIdentical(AType, QType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(PType, QType)) {\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(QType, PType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (Q.hadProvisionalErrors) {\n                        break;\n                    }\n                    else if (best.hadProvisionalErrors) {\n                        best = Q;\n                        break;\n                    }\n                }\n\n                if (!args || i == args.members.length) {\n                    var collection: ITypeCollection = {\n                        getLength: () => { return 2; },\n                        setTypeAtIndex: (index: number, type: Type) => { }, // no contextual typing here, so no need to do anything\n                        getTypeAtIndex: (index: number) => { return index ? Q.signature.returnType.type : best.signature.returnType.type; } // we only want the "second" type - the "first" is skipped\n                    }\n                    var bct = this.findBestCommonType(best.signature.returnType.type, null, collection, true);\n                    ambiguous = !bct;\n                }\n                else {\n                    ambiguous = false;\n                }\n            }\n\n            return { sig: best.signature, ambiguous: ambiguous };\n        }\n\n        public getApplicableSignatures(signatures: Signature[], args: ASTList, comparisonInfo: TypeComparisonInfo): ApplicableSignature[] {\n\n            var applicableSigs: ApplicableSignature[] = [];\n            var memberType: Type = null;\n            var miss = false;\n            var cxt: ContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            for (var i = 0; i < signatures.length; i++) {\n                miss = false;\n\n                for (var j = 0; j < args.members.length; j++) {\n\n                    if (j >= signatures[i].parameters.length) {\n                        continue;\n                    }\n                    memberType = signatures[i].parameters[j].getType();\n\n                    // account for varargs\n                    if (signatures[i].declAST.variableArgList && (j >= signatures[i].nonOptionalParameterCount - 1) && memberType.isArray()) {\n                        memberType = mem';
var v27181 = v27182 + 'berType.elementType;\n                    }\n\n                    if (memberType == this.anyType) {\n                        continue;\n                    }\n                    else if (args.members[j].nodeType == NodeType.FuncDecl) {\n                        if (this.typeFlow.functionInterfaceType && memberType == this.typeFlow.functionInterfaceType) {\n                            continue;\n                        }\n                        if (!this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], true)) {\n                            // if it\'s just annotations that are blocking us, typecheck the function and add it to the list\n                            if (this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], false)) {\n                                this.typeFlow.typeCheck(args.members[j]);\n                                if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                    break;\n                                }\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        else { // if it can be contextually typed, try it out...\n\n                            this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                            this.cleanStartedPTO();\n                            hadProvisionalErrors = this.hadProvisionalErrors();\n\n                            if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                if (comparisonInfo) {\n                                    comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                                }\n                                miss = true;\n                            }\n\n                            // clean the type\n                            //if (hadProvisionalErrors) {\n                            //    cxt = this.currentContextualTypeContext;\n                            //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                            //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                            //        miss = true;\n                            //    }\n                            //    this.cleanStartedPTO();\n                            //}\n\n                            this.resetProvisionalErrors();\n                            if (miss) {\n                                break;\n                            }\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ObjectLit) {\n                        // now actually attempt to typecheck as the contextual type\n                        if (this.typeFlow.objectInterfaceType && memberType == this.typeFlow.objectInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        this.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                            }\n                            miss = true;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n\n                        //    // is the "cleaned" type even assignable?\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ArrayLit) {\n                        // attempt to contextually type the array literal\n                        if (this.typeFlow.arrayInterfaceType && memberType == this.typeFlow.arrayInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        thi';
var v27180 = v27181 + 's.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                            }\n                            break;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                }\n\n                if (j == args.members.length) {\n                    applicableSigs[applicableSigs.length] = { signature: signatures[i], hadProvisionalErrors: hadProvisionalErrors };\n                }\n                hadProvisionalErrors = false;\n            }\n\n            return applicableSigs;\n        }\n\n        public canContextuallyTypeFunction(candidateType: Type, funcDecl: FuncDecl, beStringent: bool): bool {\n\n            // in these cases, we do not attempt to apply a contextual type\n            //  RE: isInlineCallLiteral - if the call target is a function literal, we don\'t want to apply the target type\n            //  to its body - instead, it should be applied to its return type\n            if (funcDecl.isParenthesized ||\n                funcDecl.isMethod() ||\n                beStringent && funcDecl.returnTypeAnnotation ||\n                funcDecl.isInlineCallLiteral) {\n                return false;\n            }\n\n            beStringent = beStringent || (this.typeFlow.functionInterfaceType == candidateType);\n\n            // At this point, if we\'re not being stringent, there\'s no need to check for multiple call sigs\n            // or count parameters - we just want to unblock typecheck\n            if (!beStringent) {\n                return true;\n            }\n\n            // If we\'re coming from an in-scope typecheck, lambdas may not have had function signatures created for them\n            // REVIEW: Should we search out the overload group here?\n            if (!funcDecl.signature) {\n                this.createFunctionSignature(funcDecl, this.typeFlow.scope.container, this.typeFlow.scope, null, null);\n                this.typeFlow.typeCheck(funcDecl);\n            }\n\n            var signature = funcDecl.signature;\n            var paramLen = signature.parameters.length;\n\n            // Check that the argument declarations have no type annotations\n            for (var i = 0; i < paramLen; i++) {\n                var param = signature.parameters[i];\n                var symbol = <ParameterSymbol>param;\n                var argDecl = <ArgDecl>symbol.declAST;\n\n                // REVIEW: a valid typeExpr is a requirement for varargs,\n                // so we may want to revise our invariant\n                if (beStringent && argDecl.typeExpr) {\n                    return false;\n                }\n            }\n\n            if (candidateType.construct && candidateType.call) {\n                return false;\n            }\n\n            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n\n            if (!candidateSigs || candidateSigs.signatures.length > 1) {\n                return false;\n            }\n\n            // if we\'re here, the contextual type can be applied to the function\n            return true;\n        }\n\n        public canContextuallyTypeObjectLiteral(targetType: Type, objectLit: UnaryExpression): bool {\n\n            if (targetType == this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            var memberDecls = <ASTList>objectLit.operand;\n\n            if (!(memberDecls && targetType.memberScope)) {\n                return false;\n            }\n\n            var id: AST = null;\n            var targetMember: Symbol = null;\n            var text = "";\n            var foundSyms = {};\n\n            // Check that each property in the object literal is present in the target\n            // type\n            for (var i = 0; i < memberDecls.members.length; i++) {\n                id = (<BinaryExpression>memberDecls.members[i]).operand1;\n\n                if (id.nodeType == NodeType.Name) {\n                    text = (<Identifier>id).text;\n                }\n                else if (id.nodeType == NodeType.QString) {\n                    // TODO: set te';
var v27179 = v27180 + "xt to unescaped string\n                    var idText = (<StringLiteral>id).text;\n                    text = idText.substring(1, idText.length - 1);\n                }\n                else {\n                    return false;\n                }\n\n                targetMember = targetType.memberScope.find(text, true, false);\n\n                if (!targetMember) {\n                    return false;\n                }\n\n                foundSyms[text] = true;\n            }\n\n            // Check that all members in the target type are present in the object literal\n            var targetMembers = targetType.memberScope.getAllValueSymbolNames(true);\n\n            for (var i = 0; i < targetMembers.length; i++) {\n                var memberName = targetMembers[i];\n                var memberSym = targetType.memberScope.find(memberName, true, false);\n\n                if (!foundSyms[targetMembers[i]] &&\n                    !hasFlag(memberSym.flags, SymbolFlags.Optional)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public widenType(t: Type) {\n            if (t == this.undefinedType || t == this.nullType) { // REVIEW: not isNullOrUndefinedType for perf reasons\n                return this.anyType;\n            }\n\n            return t;\n        }\n\n        public isNullOrUndefinedType(t: Type) {\n            return t == this.undefinedType || t == this.nullType;\n        }\n\n        public findBestCommonType(initialType: Type, targetType: Type, collection: ITypeCollection, acceptVoid:bool, comparisonInfo?: TypeComparisonInfo) {\n            var i = 0;\n            var len = collection.getLength();\n            var nlastChecked = 0;\n            var bestCommonType = initialType;\n\n            if (targetType) {\n                bestCommonType = bestCommonType ? bestCommonType.mergeOrdered(targetType, this, acceptVoid) : targetType;\n            }\n\n            // it's important that we set the convergence type here, and not in the loop,\n            // since the first element considered may be the contextual type\n            var convergenceType: Type = bestCommonType;\n\n            while (nlastChecked < len) {\n\n                for (i = 0; i < len; i++) {\n\n                    // no use in comparing a type against itself\n                    if (i == nlastChecked) {\n                        continue;\n                    }\n\n                    if (convergenceType && (bestCommonType = convergenceType.mergeOrdered(collection.getTypeAtIndex(i), this, acceptVoid, comparisonInfo))) {\n                        convergenceType = bestCommonType;\n                    }\n\n                    if (bestCommonType == this.anyType || bestCommonType == null) {\n                        break;\n                    }\n                    else if (targetType) { // set the element type to the target type\n                        collection.setTypeAtIndex(i, targetType);\n                    }\n                }\n\n                // use the type if we've agreed upon it\n                if (convergenceType && bestCommonType) {\n                    break;\n                }\n\n                nlastChecked++;\n                if (nlastChecked < len) {\n                    convergenceType = collection.getTypeAtIndex(nlastChecked);\n                }\n            }\n\n            return acceptVoid ? bestCommonType : (bestCommonType == this.voidType ? null : bestCommonType);\n        }\n\n        // Type Identity\n\n        public typesAreIdentical(t1: Type, t2: Type) {\n\n            // This clause will cover both primitive types (since the type objects are shared),\n            // as well as shared brands\n            if (t1 == t2) {\n                return true;\n            }\n\n            if (!t1 || !t2) {\n                return false;\n            }\n\n            if (t1.isClass() || t1.isClassInstance()) {\n                return false;\n            }\n\n            var comboId = (t2.typeID << 16) | t1.typeID;\n\n            if (this.identicalCache[comboId]) {\n                return true;\n            }\n\n            // If one is an enum, and they're not the same type, they're not identical\n            if ((t1.typeFlags & TypeFlags.IsEnum) || (t2.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (t1.isArray() || t2.isArray()) {\n                if (!(t1.isArray() && t2.isArray())) {\n                    return false;\n                }\n                this.identicalCache[comboId] = false;\n                var ret = this.typesAreIdentical(t1.elementType, t2.elementType);\n                if (ret) {\n                    this.subtypeCache[comboId] = true;\n                }\n                else {\n                    this.subtypeCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            if (t1.primitiveTypeClass != t2.primitiveTypeClass) {\n                return false;\n            }\n\n            this.identicalCache[comboId] = false;\n\n            // properties are identical in na";
var v27178 = v27179 + "me, optionality, and type\n            // REVIEW: TypeChanges - The compiler does not currently check against the members of parent types!\n            // REVIEW: TypeChanges - What about ambientMembers?\n            if (t1.memberScope && t2.memberScope) {\n                var t1MemberKeys = t1.memberScope.getAllValueSymbolNames(true).sort();\n                var t2MemberKeys = t2.memberScope.getAllValueSymbolNames(true).sort();\n\n                if (t1MemberKeys.length != t2MemberKeys.length) {\n                    this.identicalCache[comboId] = undefined;\n                    return false;\n                }\n\n                var t1MemberSymbol: Symbol = null;\n                var t2MemberSymbol: Symbol = null;\n\n                var t1MemberType: Type = null;\n                var t2MemberType: Type = null;\n\n                for (var iMember = 0; iMember < t1MemberKeys.length; iMember++) {\n                    if (t1MemberKeys[iMember] != t2MemberKeys[iMember]) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberSymbol = <Symbol>t1.memberScope.find(t1MemberKeys[iMember], false, false);\n                    t2MemberSymbol = <Symbol>t2.memberScope.find(t2MemberKeys[iMember], false, false);\n\n                    if ((t1MemberSymbol.flags & SymbolFlags.Optional) != (t2MemberSymbol.flags & SymbolFlags.Optional)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberType = t1MemberSymbol.getType();\n                    t2MemberType = t2MemberSymbol.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (t1MemberType && t2MemberType && (this.identicalCache[(t2MemberType.typeID << 16) | t1MemberType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.typesAreIdentical(t1MemberType, t2MemberType)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n                }\n            }\n            else if (t1.memberScope || t2.memberScope) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.call, t2.call)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.construct, t2.construct)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.index, t2.index)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            this.identicalCache[comboId] = true;\n            return true;\n        }\n\n        public signatureGroupsAreIdentical(sg1: SignatureGroup, sg2: SignatureGroup) {\n\n            // covers the null case\n            if (sg1 == sg2) {\n                return true;\n            }\n\n            // covers the mixed-null case\n            if (!sg1 || !sg2) {\n                return false;\n            }\n\n            if (sg1.signatures.length != sg2.signatures.length) {\n                return false;\n            }\n\n            var sig1: Signature = null;\n            var sig2: Signature = null;\n            var sigsMatch = false;\n\n            // The signatures in the signature group may not be ordered...\n            // REVIEW: Should definition signatures be required to be identical as well?\n            for (var iSig1 = 0; iSig1 < sg1.signatures.length; iSig1++) {\n                sig1 = sg1.signatures[iSig1];\n\n                for (var iSig2 = 0; iSig2 < sg2.signatures.length; iSig2++) {\n                    sig2 = sg2.signatures[iSig2];\n\n                    if (this.signaturesAreIdentical(sig1, sig2)) {\n                        sigsMatch = true;\n                        break;\n                    }\n                }\n\n                if (sigsMatch) {\n                    sigsMatch = false;\n                    continue;\n                }\n\n                // no match found for a specific signature\n                return false;\n            }\n\n            return true;\n        }\n\n        public signaturesAreIdentical(s1: Signature, s2: Signature) {\n\n            if (s1.hasVariableArgList != s2.hasVariableArgList) {\n                return false;\n            }\n\n            if (s1.nonOptionalParameterCount != s2.nonOptionalParameterCount) {\n                return false;\n            }\n\n            if (s1.parameters.length != s2.parameters.length) {\n                return false;\n            }\n\n            if (!this.typesAreIdentical(s1.returnType.type, s2.returnType.type)) {\n                return false;\n            }\n\n            for (var iParam = 0; iParam < s1.parameters.length; iParam++) {\n                if (!thi";
var v27177 = v27178 + "s.typesAreIdentical(s1.parameters[iParam].parameter.typeLink.type, s2.parameters[iParam].parameter.typeLink.type)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        // Subtyping and Assignment compatibility\n\n        public sourceIsSubtypeOfTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, false, this.subtypeCache, comparisonInfo); }\n        public signatureGroupIsSubtypeOfTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, false, this.subtypeCache, comparisonInfo); }\n        public signatureIsSubtypeOfTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, false, this.subtypeCache, comparisonInfo); }\n\n        public sourceIsAssignableToTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, true, this.assignableCache, comparisonInfo); }\n        public signatureGroupIsAssignableToTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, true, this.assignableCache, comparisonInfo); }\n        public signatureIsAssignableToTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, true, this.assignableCache, comparisonInfo); }\n\n        public sourceIsRelatableToTarget(source: Type, target: Type, assignableTo: bool, comparisonCache: any, comparisonInfo: TypeComparisonInfo) {\n\n            // REVIEW: Does this check even matter?\n            //if (this.typesAreIdentical(source, target)) {\n            //    return true;\n            //}\n            if (source == target) {\n                return true;\n            }\n\n            // An error has already been reported in this case\n            if (!(source && target)) {\n                return true;\n            }\n\n            var comboId = (source.typeID << 16) | target.typeID;\n\n            // In the case of a 'false', we want to short-circuit a recursive typecheck\n            if (comparisonCache[comboId] != undefined) {\n                return true;\n            }\n\n            // this is one difference between subtyping and assignment compatibility\n            if (assignableTo) {\n                if (source == this.anyType || target == this.anyType) {\n                    return true;\n                }\n            }\n            else {\n                // This is one difference between assignment compatibility and subtyping\n                if (target == this.anyType) {\n                    return true;\n                }\n            }\n\n            if (source == this.undefinedType) {\n                return true;\n            }\n\n            if ((source == this.nullType) && (target != this.undefinedType && target != this.voidType)) {\n                return true;\n            }\n\n            // REVIEW: enum types aren't explicitly covered in the spec\n            if (target == this.numberType && (source.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if (source == this.numberType && (target.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if ((source.typeFlags & TypeFlags.IsEnum) || (target.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (source.isArray() || target.isArray()) {\n                if (!(source.isArray() && target.isArray())) {\n                    return false;\n                }\n                comparisonCache[comboId] = false;\n                var ret = this.sourceIsRelatableToTarget(source.elementType, target.elementType, assignableTo, comparisonCache, comparisonInfo);\n                if (ret) {\n                    comparisonCache[comboId] = true;\n                }\n                else {\n                    comparisonCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            // this check ensures that we only operate on object types from this point forward,\n            // since the checks involving primitives occurred above\n            if (source.primitiveTypeClass != target.primitiveTypeClass) {\n\n                if (target.primitiveTypeClass == Primitive.None) {\n                    if (source == this.numberType && this.typeFlow.numberInterfaceType) {\n                        source = this.typeFlow.numberInterfaceType;\n                    }\n                    else if (source == this.stringType && this.typeFlow.stringInterfaceType) {\n                        source = this.typeFlow.stringInterfaceType;\n                    }\n                    else if (source == this.booleanType && this.typeFlow.booleanInterfaceType) {\n                        source = this.typeFlow.booleanInterfaceType;\n           ";
var v27176 = v27177 + '         }\n                    else {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = false;\n\n            if (source.hasBase(target)) {\n                comparisonCache[comboId] = true;\n                return true;\n            }\n\n            if (this.typeFlow.objectInterfaceType && target == this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            if (this.typeFlow.functionInterfaceType && (source.call || source.construct) && target == this.typeFlow.functionInterfaceType) {\n                return true;\n            }\n\n            // REVIEW: We should perhaps do this, though it wouldn\'t be quite right without generics support\n            //if (this.typeFlow.arrayInterfaceType && (source.index) && target == this.typeFlow.arrayInterfaceType) {\n            //    return true;\n            //}\n\n            // At this point, if the target is a class, but not the source or a parent of the source, bail\n            if (target.isClass() || target.isClassInstance()) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            if (target.memberScope && source.memberScope) {\n                var mPropKeys = target.memberScope.getAllValueSymbolNames(true);\n                var mProp: Symbol = null;\n                var nProp: Symbol = null;\n                var mPropType: Type = null;\n                var nPropType: Type = null;\n                var inferenceSymbol: InferenceSymbol = null;\n\n                for (var iMProp = 0; iMProp < mPropKeys.length; iMProp++) {\n                    mProp = target.memberScope.find(mPropKeys[iMProp], false, false);\n                    nProp = source.memberScope.find(mPropKeys[iMProp], false, false);\n\n                    // methods do not have the "arguments" field\n                    if (mProp.name == "arguments" &&\n                        this.typeFlow.iargumentsInterfaceType &&\n                        (this.typeFlow.iargumentsInterfaceType.symbol.flags & SymbolFlags.CompilerGenerated) &&\n                        mProp.kind() == SymbolKind.Variable &&\n                        (<VariableSymbol>mProp).variable.typeLink.type == this.typeFlow.iargumentsInterfaceType) {\n                        continue;\n                    }\n\n                    if (mProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>mProp;\n                        if (inferenceSymbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                            // REVIEW: TypeChanges: Does this ever really happen?  Maybe for out-of-order typecheck?\n                            this.typeFlow.typeCheck(mProp.declAST);\n                        }\n                    }\n                    mPropType = mProp.getType();\n\n                    if (!nProp) {\n                        // If it\'s not present on the type in question, look for the property on \'Object\'\n                        if (this.typeFlow.objectInterfaceType) {\n                            nProp = this.typeFlow.objectInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                        }\n\n                        if (!nProp) {\n                            // Now, the property was not found on Object, but the type in question is a function, look\n                            // for it on function\n                            if (this.typeFlow.functionInterfaceType && (mPropType.call || mPropType.construct)) {\n                                nProp = this.typeFlow.functionInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                            }\n\n                            // finally, check to see if the property is optional\n                            if (!nProp) {\n                                if (!(mProp.flags & SymbolFlags.Optional)) {\n                                    comparisonCache[comboId] = undefined;\n                                    if (comparisonInfo) { // only surface the first error\n                                        comparisonInfo.flags |= TypeRelationshipFlags.RequiredPropertyIsMissing;\n                                        comparisonInfo.addMessageToFront("Type \'" + source.getTypeName() + "\' is missing property \'" + mPropKeys[iMProp] + "\' from type \'" + target.getTypeName() + "\'");\n                                    }\n                                    return false;\n                                }\n                                else {\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (nProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>nProp;\n                        if (inferenceSymbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                            this.typeFlow.type';
var v27175 = v27176 + 'Check(nProp.declAST);\n                        }\n                    }\n\n\n                    nPropType = nProp.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (mPropType && nPropType && (comparisonCache[(nPropType.typeID << 16) | mPropType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo)) {\n                        comparisonCache[comboId] = undefined;\n                        if (comparisonInfo) { // only surface the first error\n                            comparisonInfo.flags |= TypeRelationshipFlags.IncompatiblePropertyTypes;\n                            comparisonInfo.addMessageToFront("Types of property \'" + mProp.name + "\' of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        return false;\n                    }\n                }\n            }\n\n            // check signature groups\n            if (source.call || target.call) {\n                if (!this.signatureGroupIsRelatableToTarget(source.call, target.call, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.call && target.call) {\n                            comparisonInfo.addMessageToFront("Call signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        else {\n                            var hasSig = target.call ? target.getTypeName() : source.getTypeName();\n                            var lacksSig = !target.call ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage("Type \'" + hasSig + "\' requires a call signature, but Type \'" + lacksSig + "\' lacks one");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (source.construct || target.construct) {\n                if (!this.signatureGroupIsRelatableToTarget(source.construct, target.construct, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.construct && target.construct) {\n                            comparisonInfo.addMessageToFront("Construct signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        else {\n                            var hasSig = target.construct ? target.getTypeName() : source.getTypeName();\n                            var lacksSig = !target.construct ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage("Type \'" + hasSig + "\' requires a construct signature, but Type \'" + lacksSig + "\' lacks one");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (target.index) {\n                var targetIndex = !target.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : target.index;\n                var sourceIndex = !source.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : source.index;\n\n                if (!this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.addMessageToFront("Index signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = true;\n            return true;\n        }\n\n        // REVIEW: TypeChanges: Return an error context object so the user can get better diagnostic info\n        public signatureGroupIsRelatableToTarget(sourceSG: SignatureGroup, targetSG: SignatureGroup, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n            if (sourceSG == targetSG) {\n                return true;\n            }\n\n            if (!(sourceSG && targetSG)) {\n                return false;\n            }\n\n            var mSig: Signature = null;\n            var nSig: Signature = null;\n            var foundMatch = false;\n\n            for (var iMSig = 0; ';
var v27174 = v27175 + 'iMSig < targetSG.signatures.length; iMSig++) {\n                mSig = targetSG.signatures[iMSig];\n\n                for (var iNSig = 0; iNSig < sourceSG.signatures.length; iNSig++) {\n                    nSig = sourceSG.signatures[iNSig];\n                    if (this.signatureIsRelatableToTarget(nSig, mSig, assignableTo, comparisonCache, comparisonInfo)) {\n                        foundMatch = true;\n                        break;\n                    }\n                }\n\n                if (foundMatch) {\n                    foundMatch = false;\n                    continue;\n                }\n                return false;\n            }\n\n            return true;\n        }\n\n        public signatureIsRelatableToTarget(sourceSig: Signature, targetSig: Signature, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n\n            if (!sourceSig.parameters || !targetSig.parameters) {\n                return false;\n            }\n\n            var targetVarArgCount = targetSig.hasVariableArgList ? targetSig.nonOptionalParameterCount - 1 : targetSig.nonOptionalParameterCount;\n            var sourceVarArgCount = sourceSig.hasVariableArgList ? sourceSig.nonOptionalParameterCount - 1 : sourceSig.nonOptionalParameterCount;\n\n            if (sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableArgList) {\n                if (comparisonInfo) {\n                    comparisonInfo.flags |= TypeRelationshipFlags.SourceSignatureHasTooManyParameters;\n                    comparisonInfo.addMessageToFront("Call signature expects " + targetVarArgCount + " or fewer parameters");\n                }\n                return false;\n            }\n\n            var sourceReturnType = sourceSig.returnType.type;\n            var targetReturnType = targetSig.returnType.type;\n\n            if (targetReturnType != this.voidType) {\n                if (!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleReturnTypes;\n                        // No need to print this one here - it\'s printed as part of the signature error in sourceIsRelatableToTarget\n                        //comparisonInfo.addMessageToFront("Incompatible return types: \'" + sourceReturnType.getTypeName() + "\' and \'" + targetReturnType.getTypeName() + "\'");\n                    }\n                    return false;\n                }\n            }\n\n            var len = (sourceVarArgCount < targetVarArgCount && sourceSig.hasVariableArgList) ? targetVarArgCount : sourceVarArgCount;\n            var sourceParamType: Type = null;\n            var targetParamType: Type = null;\n            var sourceParamName = "";\n            var targetParamName = "";\n\n            for (var iSource = 0, iTarget = 0; iSource < len; iSource++, iTarget++) {\n\n                if (!sourceSig.hasVariableArgList || iSource < sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n                else if (iSource == sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    if (sourceParamType.elementType) {\n                        sourceParamType = sourceParamType.elementType;\n                    }\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n\n                if (iTarget < targetSig.parameters.length && iTarget < targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n                else if (targetSig.hasVariableArgList && iTarget == targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    if (targetParamType.elementType) {\n                        targetParamType = targetParamType.elementType;\n                    }\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n\n                if (!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo, comparisonCache, comparisonInfo) ||\n                        this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo, comparisonCache, comparisonInfo))) {\n\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleParameterTypes;\n                    }\n                    return false;\n                }\n            }\n   ';
var v27173 = v27174 + '         return true;\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Continuation {\n        public exceptionBlock = -1;\n        constructor (public normalBlock: number) { }\n    }\n\n    function getBaseTypeLinks(bases: ASTList, baseTypeLinks: TypeLink[]) {\n        if (bases) {\n            var len = bases.members.length;\n            if (baseTypeLinks == null) {\n                baseTypeLinks = new TypeLink[];\n            }\n            for (var i = 0; i < len; i++) {\n                var baseExpr = bases.members[i];\n                var name = baseExpr;\n                var typeLink = new TypeLink();\n                typeLink.ast = name;\n                baseTypeLinks[baseTypeLinks.length] = typeLink;\n            }\n        }\n        return baseTypeLinks;\n    }\n\n    function getBases(type: Type, typeDecl: TypeDeclaration) {\n        type.extendsTypeLinks = getBaseTypeLinks(typeDecl.extendsList, type.extendsTypeLinks);\n        type.implementsTypeLinks = getBaseTypeLinks(typeDecl.implementsList, type.implementsTypeLinks);\n    }\n\n    function addPrototypeField(classType: Type, ast: AST, context: TypeCollectionContext) {\n        var field = new ValueLocation();\n        field.typeLink = new TypeLink();\n        field.typeLink.ast = ast;\n        field.typeLink.type = classType.instanceType;\n\n        var fieldSymbol =\n            new FieldSymbol("prototype", ast.minChar,\n                            context.checker.locationInfo.unitIndex, true, field);\n        fieldSymbol.flags |= (SymbolFlags.Property | SymbolFlags.BuiltIn);\n        field.symbol = fieldSymbol;\n        fieldSymbol.declAST = ast;\n        classType.members.addPublicMember("prototype", fieldSymbol);\n    }\n\n    export function createNewConstructGroupForType(type: Type) {\n        var signature = new Signature();\n        signature.returnType = new TypeLink();\n        signature.returnType.type = type.instanceType;\n        signature.parameters = [];\n\n        type.construct = new SignatureGroup();\n        type.construct.addSignature(signature);     \n    }\n\n    export function cloneParentConstructGroupForChildType(child: Type, parent: Type) {\n        child.construct = new SignatureGroup();\n        var sig: Signature = null;\n\n        if (!parent.construct) {\n            createNewConstructGroupForType(parent);\n        }\n\n        for (var i = 0; i < parent.construct.signatures.length; i++) { \n            sig = new Signature();\n            sig.parameters = parent.construct.signatures[i].parameters;\n            sig.nonOptionalParameterCount = parent.construct.signatures[i].nonOptionalParameterCount;\n            sig.typeCheckStatus = parent.construct.signatures[i].typeCheckStatus;\n            sig.declAST = parent.construct.signatures[i].declAST;\n            sig.returnType = new TypeLink();\n            sig.returnType.type = child.instanceType;\n            child.construct.addSignature(sig);\n        }\n\n    }\n\n    export var globalId = "__GLO";\n\n    export interface IAliasScopeContext {\n        topLevelScope: ScopeChain;\n        members: IHashTable;\n        tcContext: TypeCollectionContext;\n    }\n\n    function findTypeSymbolInScopeChain(name: string, scopeChain: ScopeChain): Symbol {\n        var symbol = scopeChain.scope.find(name, false, true);\n\n        if (symbol == null && scopeChain.previous) {\n            symbol = findTypeSymbolInScopeChain(name, scopeChain.previous);\n        }\n\n        return symbol;\n    }\n\n    function findSymbolFromAlias(alias: AST, context: IAliasScopeContext): Symbol {\n        var symbol: Symbol = null;\n        switch (alias.nodeType) {\n            case NodeType.Name:\n                var name = (<Identifier>alias).text;\n                var isDynamic = isQuoted(name);\n\n                var findSym = (id: string) => {\n                    if (context.members) {\n                        return context.members.lookup(name);\n                    }\n                    else {\n                        return findTypeSymbolInScopeChain(name, context.topLevelScope);\n                    }\n                }\n\n                if (isDynamic) {\n                    symbol = context.tcContext.checker.findSymbolForDynamicModule(name, context.tcContext.script.locationInfo.filename, findSym);\n                }\n                else {\n                    symbol = findSym(name);\n                }\n\n                break;\n\n     ';
var v27172 = v27173 + "       case NodeType.Dot:\n                var dottedExpr = <BinaryExpression>alias;\n                var op1Sym = findSymbolFromAlias(dottedExpr.operand1, context);\n\n                if (op1Sym && op1Sym.getType()) {\n                    symbol = findSymbolFromAlias(dottedExpr.operand2, context);\n                }\n\n                break;\n\n            default:\n                break;\n        }\n\n        if (symbol) {\n            var symType = symbol.getType();\n            if (symType) {\n                var members = symType.members;\n                if (members) {\n                    context.members = members.publicMembers;\n                }\n            }\n        }\n\n        return symbol;\n    }\n\n    export function preCollectImportTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        var importDecl = <ImportDeclaration>ast;\n\n        // REVIEW: technically, this call isn't strictly necessary, since we'll find the type during the call to resolveTypeMembers\n        var aliasedModSymbol = findSymbolFromAlias(importDecl.alias, { topLevelScope: scopeChain, members: null, tcContext: context });\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n\n        if (aliasedModSymbol) {\n            var aliasedModType = aliasedModSymbol.getType();\n\n            if (aliasedModType) {\n                modType = <ModuleType>aliasedModType;\n            }\n        }\n\n        typeSymbol = new TypeSymbol(importDecl.id.text, importDecl.id.minChar, importDecl.limChar - importDecl.minChar,\n                                    context.checker.locationInfo.unitIndex, modType);\n\n        typeSymbol.aliasLink = importDecl;\n\n        if (context.scopeChain.moduleDecl) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n            typeSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        typeSymbol.declAST = importDecl;\n        importDecl.id.sym = typeSymbol;\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, true, false);\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, false, false);\n        return true;\n    }\n\n    export function preCollectModuleTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>ast;\n\n        var isAmbient = hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient);\n        var isEnum = hasFlag(moduleDecl.modFlags, ModuleFlags.IsEnum);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);\n        var modName = (<Identifier>moduleDecl.name).text;\n\n        var isDynamic = isQuoted(modName);\n\n        var symbol = scopeChain.scope.findLocal(modName, false, false);\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        if ((symbol == null) || (symbol.kind() != SymbolKind.Type)) {\n\n            if (modType == null) {\n                var enclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n                if (isEnum) {\n                    modType.typeFlags |= TypeFlags.IsEnum;\n                }\n                modType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.setHasImplementation();\n            }\n\n            typeSymbol = new TypeSymbol(modName, moduleDecl.name.minChar, modName.length,\n                                        context.checker.locationInfo.unitIndex, modType);\n            typeSymbol.isDynamic = isQuoted(moduleDecl.prettyName);\n\n            if (context.scopeChain.moduleDecl) {\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n            typeSymbol.declAST = moduleDecl;\n            typeSymbol.prettyName = moduleDecl.prettyName;\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            modType.symbol = typeSymbol;\n        }\n        else {\n            if (symbol && symbol.declAST && symbol.";
var v27171 = v27172 + "declAST.nodeType != NodeType.ModuleDeclaration) {\n                context.checker.errorReporter.simpleError(moduleDecl, \"Conflicting symbol name for module '\" + modName + \"'\");\n            }\n            typeSymbol = <TypeSymbol>symbol;\n\n            // initialize new private scope for the type\n            var publicEnclosedTypes = typeSymbol.type.getAllEnclosedTypes().publicMembers;\n            var publicEnclosedTypesTable = (publicEnclosedTypes == null) ? new StringHashTable() : publicEnclosedTypes;\n            var enclosedTypes = new ScopedMembers(new DualStringHashTable(publicEnclosedTypesTable, new StringHashTable()));\n\n            var publicEnclosedAmbientTypes = typeSymbol.type.getAllAmbientEnclosedTypes().publicMembers;\n            var publicAmbientEnclosedTypesTable = (publicEnclosedAmbientTypes == null) ? new StringHashTable() : publicEnclosedAmbientTypes;\n            var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(publicAmbientEnclosedTypesTable, new StringHashTable()));\n\n            var publicMembers = typeSymbol.type.members.publicMembers;\n            var publicMembersTable = (publicMembers == null) ? new StringHashTable() : publicMembers;\n            var members = new ScopedMembers(new DualStringHashTable(publicMembersTable, new StringHashTable()));\n\n            var publicAmbientMembers = typeSymbol.type.ambientMembers.publicMembers;\n            var publicAmbientMembersTable = (publicAmbientMembers == null) ? new StringHashTable() : publicAmbientMembers;\n            var ambientMembers = new ScopedMembers(new DualStringHashTable(publicAmbientMembersTable, new StringHashTable()));\n\n            modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n            if (isEnum) {\n                modType.typeFlags |= TypeFlags.IsEnum;\n            }\n            modType.members = members;\n            modType.ambientMembers = ambientMembers;\n            modType.setHasImplementation();\n            modType.symbol = typeSymbol;\n\n            typeSymbol.addLocation(moduleDecl.minChar);\n            typeSymbol.expansions.push(modType);\n            typeSymbol.expansionsDeclAST.push(moduleDecl);\n\n        }\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        // REVIEW: If multiple disparate module decls for the same module don't agree\n        // in export privileges, how should we handle it?\n        if (isExported) {\n            typeSymbol.flags |= SymbolFlags.Exported;\n        }\n        if ((context.scopeChain.moduleDecl) ||\n            (context.scopeChain.container == context.checker.gloMod)) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        moduleDecl.mod = modType;\n        pushTypeCollectionScope(typeSymbol, modType.members,\n                                modType.ambientMembers,\n                                modType.enclosedTypes,\n                                modType.ambientEnclosedTypes,\n                                context, null, null, moduleDecl);\n\n        return true;\n    }\n\n    export function preCollectClassTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var classDecl = <ClassDeclaration>ast;\n\n        var classType: Type;\n        var instanceType: Type;\n        var typeSymbol: TypeSymbol = null;\n        var className = (<Identifier>classDecl.name).text;\n        var alreadyInScope = false;\n        var isAmbient = hasFlag(classDecl.varFlags, VarFlags.Ambient);\n        var isExported = hasFlag(classDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var containerMod = <TypeSymbol>scopeChain.container;\n        var foundValSymbol = false;\n\n        typeSymbol = <TypeSymbol>scopeChain.scope.findLocal(className, false, true);\n        \n        // check the value space, since an override may have been declared with the type's name\n        // REVIEW-CLASSES\n        if (!typeSymbol) {\n            var valTypeSymbol = scopeChain.scope.findLocal(className, false, false);\n            \n            if (valTypeSymbol &&\n                valTypeSymbol.isType() &&\n                valTypeSymbol.declAST &&\n                valTypeSymbol.declAST.nodeType == NodeType.FuncDecl &&\n                (<FuncDecl>valTypeSymbol.declAST).isSignature()) {\n                \n                typeSymbol = <TypeSymbol>valTypeSymbol;\n                foundValSymbol = true;\n                \n                if (isExported) {\n                    typeSymbol.flags |= SymbolFlags.Exported;\n                }\n            \n                if (isAmbient) {\n                    typeSymbol.flags |= SymbolFlags.Ambient;\n                }                \n                \n                // the class was never entered into type space, so add it\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checke";
var v27170 = v27171 + "r.errorReporter, isExported || isGlobal, true, isAmbient);                \n            }\n        }\n        \n        if (typeSymbol && !foundValSymbol && (typeSymbol.declAST != classDecl)) {\n            typeSymbol = null;\n        }\n\n        if (typeSymbol == null) {\n            var valueSymbol = scopeChain.scope.findLocal(className, false, false);\n            classType = new Type();\n            classType.setHasImplementation();\n            instanceType = new Type();\n            instanceType.setHasImplementation();\n            classType.instanceType = instanceType;\n            classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            addPrototypeField(classType, classDecl, context);\n            instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            instanceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            typeSymbol = new TypeSymbol(className, classDecl.name.minChar, className.length,\n                                        context.checker.locationInfo.unitIndex, classType);\n            typeSymbol.declAST = classDecl;\n            typeSymbol.instanceType = instanceType;\n            classType.symbol = typeSymbol;\n            instanceType.symbol = typeSymbol;\n\n            if (context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n                typeSymbol.flags |= SymbolFlags.ModuleMember;\n            }\n\n            if (isExported) {\n                typeSymbol.flags |= SymbolFlags.Exported;\n            }\n            \n            if (isAmbient) {\n                typeSymbol.flags |= SymbolFlags.Ambient;\n            }\n\n            ast.type = classType;\n\n            // class in both name spaces (type for instance type; constructor representative in value space)\n            context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n\n            if (valueSymbol == null) {\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            }\n        }\n        else {                            \n            classType = typeSymbol.type;\n            \n            // If the instance type is null, a call overload was likely declared before the class constructor\n            if (classType.instanceType == null) {\n                classType.instanceType = new Type();\n                classType.instanceType.setHasImplementation();\n                classType.instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.instanceType.symbol = classType.symbol;\n                classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            }\n            \n            instanceType = classType.instanceType;\n            ast.type = classType;\n        }\n        \n        // if the class has no declared constructor, either create a default signature or adapt \n        // it's base class's signature group\n        if (!classDecl.constructorDecl) {\n\n            if (typeSymbol && typeSymbol.declAST && typeSymbol.declAST.type && typeSymbol.declAST.type.call && !(<FuncDecl>typeSymbol.declAST).isOverload) {\n                context.checker.errorReporter.duplicateIdentifier(typeSymbol.declAST, typeSymbol.name);\n            }\n\n            createNewConstructGroupForType(classDecl.type);\n        }\n\n        classType.typeFlags |= TypeFlags.IsClass;\n        instanceType.typeFlags |= TypeFlags.IsClass;\n\n        getBases(instanceType, classDecl);\n        pushTypeCollectionScope(typeSymbol, instanceType.members, instanceType.ambientMembers, null, null,\n                                context, instanceType, classType, null);\n        return true;\n    }\n\n    export function preCollectInterfaceTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var interfaceSymbol: TypeSymbol = null;\n        var interfaceType: Type = null;\n        var isExported = hasFlag(interfaceDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var alreadyInScope = true;\n\n        alreadyInScope = false;\n        var ";
var v27169 = v27170 + 'interfaceName = (<Identifier>interfaceDecl.name).text;\n        interfaceSymbol = <TypeSymbol>scopeChain.scope.findLocal(interfaceName, false, true);\n        if (interfaceSymbol == null) {\n            interfaceType = new Type();\n            interfaceSymbol = new TypeSymbol(interfaceName,\n                                        interfaceDecl.name.minChar,\n                                        interfaceName.length,\n                                        context.checker.locationInfo.unitIndex,\n                                        interfaceType);\n            interfaceType.symbol = interfaceSymbol;\n            // REVIEW: Shouldn\'t allocate another table for interface privates\n            interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceSymbol.declAST = interfaceDecl;\n            interfaceSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n        else {\n            alreadyInScope = true;\n            interfaceType = interfaceSymbol.type;\n        }\n\n        if (!interfaceType) {\n            interfaceType = context.checker.anyType;\n        }\n\n        ast.type = interfaceType;\n        getBases(interfaceType, interfaceDecl);\n\n        if (isExported) {\n            interfaceSymbol.flags |= SymbolFlags.Exported;\n        }\n\n        if (context.scopeChain.moduleDecl) {\n            interfaceSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        if (!alreadyInScope) {\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            interfaceSymbol, context.checker.errorReporter, isGlobal || isExported, true, false); // REVIEW: Technically, interfaces should be ambient\n        }\n        pushTypeCollectionScope(interfaceSymbol, interfaceType.members, interfaceType.ambientMembers, null, null,\n                                context, interfaceType, null, null);\n        return true;\n    }\n\n    export function preCollectArgDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var argDecl = <ArgDecl>ast;\n        if (hasFlag(argDecl.varFlags, VarFlags.Public | VarFlags.Private)) {\n            var field = new ValueLocation();\n            var isPrivate = hasFlag(argDecl.varFlags, VarFlags.Private);\n            var fieldSymbol =\n                new FieldSymbol(argDecl.id.text, argDecl.id.minChar,\n                                context.checker.locationInfo.unitIndex,\n                                !hasFlag(argDecl.varFlags, VarFlags.Readonly),\n                                field);\n            fieldSymbol.transferVarFlags(argDecl.varFlags);\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            argDecl.parameterPropertySym = fieldSymbol;\n\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            fieldSymbol, context.checker.errorReporter, !isPrivate, false, false);\n\n            field.typeLink = getTypeLink(argDecl.typeExpr, context.checker, argDecl.init == null);\n            argDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectVarDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var varDecl = <VarDecl>ast;\n        var isAmbient = hasFlag(varDecl.varFlags, VarFlags.Ambient);\n        var isExported = hasFlag(varDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var isProperty = hasFlag(varDecl.varFlags, VarFlags.Property);\n        var isStatic = hasFlag(varDecl.varFlags, VarFlags.Static);\n        var isPrivate = hasFlag(varDecl.varFlags, VarFlags.Private);\n        var isOptional = hasFlag(varDecl.id.flags, ASTFlags.OptionalName);\n\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        if (isProperty ||\n            isExported ||\n            (context.scopeChain.container == context.checker.gloMod) ||\n            context.scopeChain.moduleDecl) {\n            if (isAmbient) {\n                var existingSym =\n                    <FieldSymbol>scopeChain.scope.findLocal(varDecl.id.text, false, false);\n                if (existingSym) {\n                    varDecl.sym = existingSym;\n                    return false;\n                }\n            }\n\n            // Defensive error detection...\n            if (varDecl.id == null) {\n                context.checker.errorReporter.simpleError(varDecl, "Expected variable identifier at this location");\n                return false;\n            }\n\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.id.minChar,\n         ';
var v27168 = v27169 + '                       context.checker.locationInfo.unitIndex,\n                                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.varFlags);\n            if (isOptional) {\n                fieldSymbol.flags |= SymbolFlags.Optional;\n            }\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            if ((context.scopeChain.moduleDecl) ||\n                (context.scopeChain.container == context.checker.gloMod)) {\n                fieldSymbol.flags |= SymbolFlags.ModuleMember;\n                fieldSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n\n            // if it\'s static, enter it into the class\'s member list directly\n            if (hasFlag(varDecl.varFlags, VarFlags.Property) && isStatic && context.scopeChain.classType) {\n                if (!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text, fieldSymbol)) {\n                    context.checker.errorReporter.duplicateIdentifier(ast, fieldSymbol.name);\n                }\n                fieldSymbol.container = context.scopeChain.classType.symbol;\n            }\n            else {\n                context.scopeChain.scope.enter(context.scopeChain.container,\n                                                ast,\n                                                fieldSymbol,\n                                                context.checker.errorReporter,\n                                                !isPrivate && (isProperty || isExported || isGlobal || isStatic),\n                                                false,\n                                                isAmbient);\n            }\n\n            if (hasFlag(varDecl.varFlags, VarFlags.Exported)) {\n                fieldSymbol.flags |= SymbolFlags.Exported;\n            }\n\n            field.typeLink = getTypeLink(varDecl.typeExpr, context.checker,\n                                        varDecl.init == null);\n            varDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectFuncDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        // REVIEW: This will have to change when we move to "export"\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n\n        var funcDecl = <FuncDecl>ast;\n        var fgSym: TypeSymbol = null;\n        var nameText = funcDecl.getNameText();\n        var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported);\n        var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n        var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n        var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n        var containerSym:TypeSymbol = <TypeSymbol> (((funcDecl.isMethod() && isStatic) || funcDecl.isAccessor()) && context.scopeChain.classType ? context.scopeChain.classType.symbol : context.scopeChain.container);\n        var containerScope: SymbolScope = context.scopeChain.scope;\n        var isGlobal = containerSym == context.checker.gloMod;\n        var isOptional = funcDecl.name && hasFlag(funcDecl.name.flags, ASTFlags.OptionalName);\n        var go = false;\n        var foundSymbol = false; \n\n        // If this is a class constructor, the "container" is actually the class declaration\n        if (isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n            containerSym = <TypeSymbol>containerSym.container;\n            containerScope = scopeChain.previous.scope;\n        }\n\n        funcDecl.unitIndex = context.checker.locationInfo.unitIndex;\n        \n        // If the parent is the constructor, and this isn\'t an instance method, skip it.\n        // That way, we\'ll set the type during scope assignment, and can be sure that the\n        // function will be placed in the constructor-local scope\n        if (!funcDecl.isConstructor &&\n            containerSym &&\n            containerSym.declAST &&\n            containerSym.declAST.nodeType == NodeType.FuncDecl &&\n            (<FuncDecl>containerSym.declAST).isConstructor &&\n            !funcDecl.isMethod()) {\n            return go;\n        }        \n\n        // Interfaces and overloads\n        if (hasFlag(funcDecl.fncFlags, FncFlags.Signature)) {\n            var instType = context.scopeChain.thisType;                       \n\n            // If the function is static, search in the class type\'s\n            if (nameText && nameText != "__missing") {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    \n                 ';
var v27167 = v27168 + "   // If we could not find the function symbol in the value context, look\n                    // in the type context.\n                    // This would be the case, for example, if a class constructor override\n                    // were declared before a call override for a given class\n                    if (fgSym == null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, true);\n                    }\n                }\n                \n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    // We'll combine ambient and non-ambient funcdecls during typecheck (for contextual typing).,\n                    // So, if they don't agree, don't use the symbol we've found                    \n                    if (!funcDecl.isSignature() && (hasFlag(funcDecl.fncFlags, FncFlags.Ambient) != hasFlag(fgSym.flags, SymbolFlags.Ambient))) {\n                       fgSym = null;\n                    }\n                }                \n            }\n            \n            // a function with this symbol has not yet been declared in this scope\n            // REVIEW: In the code below, we need to ensure that only function overloads are considered\n            //  (E.g., if a vardecl has the same id as a function or class, we may use the vardecl symbol\n            //  as the overload.)  Defensively, however, the vardecl won't have a type yet, so it should\n            //  suffice to just check for a null type when considering the overload symbol in\n            //  createFunctionSignature\n            if (fgSym == null) {\n                if (!(funcDecl.isSpecialFn())) {                    \n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, null, !foundSymbol).declAST.type.symbol;\n                }\n                else {\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, containerSym, false).declAST.type.symbol;                                                                         \n                }\n                \n                // set the symbol's declAST, which will point back to the first declaration (symbol or otherwise)\n                // related to this symbol\n                if (fgSym.declAST == null || !funcDecl.isSpecialFn()) {\n                    fgSym.declAST = ast;\n                }\n            }\n            else { // there exists a symbol with this name\n                \n                if ((fgSym.kind() == SymbolKind.Type)) {\n\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, false).declAST.type.symbol;\n                }\n                else {\n                    context.checker.errorReporter.simpleError(funcDecl, \"Function or method '\" + funcDecl.name.actualText + \"' already declared as a property\");\n                }\n            }\n         \n            if (funcDecl.isSpecialFn() && !isStatic) {\n                funcDecl.type = instType ? instType : fgSym.type; \n            }\n            else {\n                funcDecl.type = fgSym.type;\n            }            \n        }\n        else {\n            // declarations\n            \n            if (nameText) {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // in the constructor case, we want to check the parent scope for overloads\n                    if (funcDecl.isConstructor && context.scopeChain.previous) {\n                        fgSym = <TypeSymbol>context.scopeChain.previous.scope.findLocal(nameText, false, false);\n                    }\n                    \n                    if (fgSym == null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    }\n                }\n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    if (!isConstructor && fgSym.declAST.nodeType == NodeType.FuncDecl && !(<FuncDecl>fgSym.declAST).isAccessor() && !(<FuncDecl>fgSym.declAST).isSignature()) {\n                        fgSym = null;\n                        foundSymbol = false;\n                    }\n                }                \n            }\n\n            // REVIEW: Move this check into the typecheck phase?  It's only being run over properties...\n            if (fgSym &&\n                !fgSym.isAccessor() &&\n                fgSym.type &&\n                fgSym.type.construct &&\n                fgSym.type.construct.signatures != [] &&\n                (fgSym.type.construct.signatures[0].declAST == null ||\n                    !hasFlag(fgSym.type.construct.signatures[0].declAST.fncFlags, FncFlags.Ambient)) &&\n                !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, \"Functions may not have class overloads\");\n            }\n\n   ";
var v27166 = v27167 + '         if (fgSym && !(fgSym.kind() == SymbolKind.Type) && funcDecl.isMethod() && !funcDecl.isAccessor() && !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, "Function or method \'" + funcDecl.name.actualText + "\' already declared as a property");\n                fgSym.type = context.checker.anyType;\n            }\n            var sig = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, !foundSymbol);\n\n            // it\'s a getter or setter function                                   \n            if (((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || (fgSym && fgSym.isAccessor())) {\n                funcDecl.accessorSymbol = context.checker.createAccessorSymbol(funcDecl, fgSym, containerSym.type, (funcDecl.isMethod() && isStatic), true, containerScope, containerSym);\n            }\n\n            funcDecl.type.symbol.declAST = ast;\n            if (funcDecl.isConstructor) { // REVIEW: Remove when classes completely replace oldclass\n                go = true;\n            };\n        }\n        if (isExported) {\n            if (funcDecl.type.call) {\n                funcDecl.type.symbol.flags |= SymbolFlags.Exported;\n            }\n            \n            // Accessors are set to \'exported\' above\n            if (fgSym && !fgSym.isAccessor() && fgSym.kind() == SymbolKind.Type && fgSym.type.call) {\n                fgSym.flags |= SymbolFlags.Exported;\n            }\n        }\n        if (context.scopeChain.moduleDecl && !funcDecl.isSpecialFn()) {\n            funcDecl.type.symbol.flags |= SymbolFlags.ModuleMember;\n            funcDecl.type.symbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        if (fgSym && isOptional) {\n            fgSym.flags |= SymbolFlags.Optional;\n        }\n\n        return go;\n    }\n\n    export function preCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n        var go = false;\n        var scopeChain = context.scopeChain;\n\n        if (ast.nodeType == NodeType.Script) {\n            var script: Script = <Script>ast;\n            context.script = script;\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.List) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.ImportDeclaration) {\n            go = preCollectImportTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.With) {\n            go = false;\n        }\n        else if (ast.nodeType == NodeType.ModuleDeclaration) {\n            go = preCollectModuleTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            go = preCollectClassTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.Block) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            go = preCollectInterfaceTypes(ast, parent, context);\n        }\n        // This will be a constructor arg because this pass only traverses\n        // constructor arg lists\n        else if (ast.nodeType == NodeType.ArgDecl) {\n            go = preCollectArgDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.VarDecl) {\n            go = preCollectVarDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.FuncDecl) {\n            go = preCollectFuncDeclTypes(ast, parent, context);\n        }\n        else {\n            if (ast.isStatementOrExpression() && context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n\n        if (ast.nodeType == NodeType.ModuleDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        return ast;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ScopeChain {\n        ';
var v27165 = v27166 + "public thisType: Type;\n        public classType: Type;\n        public fnc: FuncDecl;\n        public moduleDecl: ModuleDeclaration;\n\n        constructor (public container: Symbol, public previous: ScopeChain,\n                     public scope: SymbolScope) { }\n    }\n\n    export class BBUseDefInfo {\n        public defsBySymbol = new bool[];\n        public gen: BitVector;\n        public kill: BitVector;\n        public top: BitVector;\n        // use lists by symbol \n        public useIndexBySymbol = new number[][];\n\n        constructor (public bb: BasicBlock) { }\n\n        public updateTop() {\n            var temp = new BitVector(this.top.bitCount);\n            for (var i = 0, succLen = this.bb.successors.length; i < succLen; i++) {\n                var succ = this.bb.successors[i];\n                if (succ.useDef) {\n                    temp.union(succ.useDef.top);\n                }\n            }\n            temp.difference(this.kill);\n            temp.union(this.gen);\n            var changed = temp.notEq(this.top);\n            this.top = temp;\n            return changed;\n        }\n\n\n        public initialize(useDefContext: UseDefContext) {\n            var defSym = (sym: Symbol, context: UseDefContext) => {\n                if (context.isLocalSym(sym)) {\n                    var index = context.getSymbolIndex(sym);\n                    // clear pending uses\n                    this.useIndexBySymbol[index] = new number[];\n                    this.defsBySymbol[index] = true;\n                }\n            }\n\n            var useSym = (sym: Symbol, context: UseDefContext, ast: AST) => {\n                if (context.isLocalSym(sym)) {\n                    var symIndex = context.getSymbolIndex(sym);\n                    if (this.useIndexBySymbol[symIndex] == undefined) {\n                        this.useIndexBySymbol[symIndex] = new number[];\n                    }\n                    var symUses = this.useIndexBySymbol[symIndex];\n                    var astIndex = context.getUseIndex(ast);\n                    context.addUse(symIndex, astIndex);\n                    symUses.push(astIndex);\n                }\n            }\n\n            function initUseDefPre(cur: AST, parent: AST, walker: IAstWalker) {\n                var context: UseDefContext = walker.state;\n                if (cur == null) {\n                    cur = null;\n                }\n                if (cur.nodeType == NodeType.VarDecl) {\n                    var varDecl = <BoundDecl>cur;\n                    if (varDecl.init || hasFlag(varDecl.varFlags, VarFlags.AutoInit)) {\n                        defSym(varDecl.sym, context);\n                    }\n                }\n                else if (cur.nodeType == NodeType.Name) {\n                    // use\n                    if (parent) {\n                        if (parent.nodeType == NodeType.Asg) {\n                            var asg = <BinaryExpression>parent;\n                            if (asg.operand1 == cur) {\n                                return cur;\n                            }\n                        }\n                        else if (parent.nodeType == NodeType.VarDecl) {\n                            var parentDecl = <BoundDecl>parent;\n                            if (parentDecl.id == cur) {\n                                return cur;\n                            }\n                        }\n                    }\n                    var id = <Identifier>cur;\n                    useSym(id.sym, context, cur);\n                }\n                else if ((cur.nodeType >= NodeType.Asg) && (cur.nodeType <= NodeType.LastAsg)) {\n                    // def\n                    var asg = <BinaryExpression>cur;\n                    if (asg.operand1 && (asg.operand1.nodeType == NodeType.Name)) {\n                        var id = <Identifier>asg.operand1;\n                        defSym(id.sym, context);\n                    }\n                }\n                else if (cur.nodeType == NodeType.FuncDecl) {\n                    walker.options.goChildren = false;\n                }\n\n                return cur;\n            }\n\n            var options = new AstWalkOptions();\n            // traverse ASTs in reverse order of execution (to match uses with preceding defs)\n            options.reverseSiblings = true;\n\n            getAstWalkerFactory().walk(this.bb.content, initUseDefPre, null, options, useDefContext);\n        }\n\n        public initializeGen(useDefContext: UseDefContext) {\n            var symbolLen = this.useIndexBySymbol.length;\n            var bitCount = useDefContext.uses.length;\n            this.gen = new BitVector(bitCount);\n            for (var s = 0; s < symbolLen; s++) {\n                var symUses = this.useIndexBySymbol[s];\n                if ((symUses != undefined) && (symUses.length > 0)) {\n                    for (var u = 0, uLen = symUses.length; u < uLen; u++) {\n                        this.gen.set(symUses[u], true);\n                    }\n                }\n            }\n            this.top = this.gen;\n        }\n\n     ";
var v27164 = v27165 + "   public initializeKill(useDefContext: UseDefContext) {\n            this.kill = new BitVector(this.gen.bitCount);\n            for (var s = 0, symbolLen = this.defsBySymbol.length; s < symbolLen; s++) {\n                if (this.defsBySymbol[s]) {\n                    var globalSymUses = useDefContext.useIndexBySymbol[s];\n                    if (globalSymUses) {\n                        for (var u = 0, useLen = globalSymUses.length; u < useLen; u++) {\n                            this.kill.set(globalSymUses[u], true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    export class UseDefContext {\n        // global use lists by symbol\n        public useIndexBySymbol = new number[][];\n        // global list of uses (flat)\n        public uses = new AST[];\n        public symbols = new VariableSymbol[];\n        public symbolMap = new StringHashTable();\n        public symbolCount = 0;\n        public func: Symbol;\n\n        constructor () {\n        }\n\n        public getSymbolIndex(sym: Symbol) {\n            var name = sym.name;\n            var index = <number>(this.symbolMap.lookup(name));\n            if (index == null) {\n                index = this.symbolCount++;\n                this.symbols[index] = <VariableSymbol>sym;\n                this.symbolMap.add(name, index);\n            }\n            return index;\n        }\n\n        public addUse(symIndex: number, astIndex: number) {\n            var useBySym = this.useIndexBySymbol[symIndex];\n            if (useBySym == undefined) {\n                useBySym = new number[];\n                this.useIndexBySymbol[symIndex] = useBySym;\n            }\n            useBySym[useBySym.length] = astIndex;\n        }\n\n        public getUseIndex(ast: AST) {\n            this.uses[this.uses.length] = ast;\n            return this.uses.length - 1;\n        }\n\n        public isLocalSym(sym: Symbol) { return (sym && (sym.container == this.func) && (sym.kind() == SymbolKind.Variable)); }\n\n        public killSymbol(sym: VariableSymbol, bbUses: BitVector) {\n            var index: number = this.symbolMap.lookup(sym.name);\n            var usesOfSym = this.useIndexBySymbol[index];\n            for (var k = 0, len = usesOfSym.length; k < len; k++) {\n                bbUses.set(usesOfSym[k], true);\n            }\n        }\n    }\n\n    export class BitVector {\n        static packBits = 30;\n        public firstBits = 0;\n        public restOfBits: number[] = null;\n\n        constructor (public bitCount: number) {\n            if (this.bitCount > BitVector.packBits) {\n                this.restOfBits = new number[];\n                var len = Math.floor(this.bitCount / BitVector.packBits);\n                for (var i = 0; i < len; i++) {\n                    this.restOfBits[i] = 0;\n                }\n            }\n        }\n\n        public set(bitIndex: number, value: bool) {\n            if (bitIndex < BitVector.packBits) {\n                if (value) {\n                    this.firstBits |= (1 << bitIndex);\n                }\n                else {\n                    this.firstBits &= (~(1 << bitIndex));\n                }\n            }\n            else {\n                var offset = Math.floor(bitIndex / BitVector.packBits) - 1;\n                var localIndex = bitIndex % BitVector.packBits;\n                if (value) {\n                    this.restOfBits[offset] |= (1 << localIndex);\n                }\n                else {\n                    this.restOfBits[offset] &= (~(1 << localIndex));\n                }\n            }\n        }\n\n        public map(fn: (index: number) =>any) {\n            var k: number;\n            for (k = 0; k < BitVector.packBits; k++) {\n                if (k == this.bitCount) {\n                    return;\n                }\n                if (((1 << k) & this.firstBits) != 0) {\n                    fn(k);\n                }\n            }\n            if (this.restOfBits) {\n                var len: number;\n                var cumu = BitVector.packBits;\n                for (k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    for (var j = 0; j < BitVector.packBits; j++) {\n                        if (((1 << j) & myBits) != 0) {\n                            fn(cumu);\n                        }\n                        cumu++;\n                        if (cumu == this.bitCount) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public union(b: BitVector) {\n            this.firstBits |= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits | bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public interse";
var v27163 = v27164 + 'ction(b: BitVector) {\n            this.firstBits &= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits & bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public notEq(b: BitVector) {\n            if (this.firstBits != b.firstBits) {\n                return true;\n            }\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    if (myBits != bBits) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public difference(b: BitVector) {\n            var oldFirstBits = this.firstBits;\n            this.firstBits &= (~b.firstBits);\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] &= (~bBits);\n                }\n            }\n        }\n    }\n\n    export class BasicBlock {\n        // blocks that branch to the block after this one\n        public predecessors = new BasicBlock[];\n        public index = -1;\n        public markValue = 0;\n        public marked(markBase: number) { return this.markValue > markBase; }\n        public mark() {\n            this.markValue++;\n        }\n        public successors = new BasicBlock[];\n        public useDef: BBUseDefInfo = null;\n        public content = new ASTList();\n        public addSuccessor(successor: BasicBlock): void {\n            this.successors[this.successors.length] = successor;\n            successor.predecessors[successor.predecessors.length] = this;\n        }\n    }\n\n    export interface ITargetInfo {\n        stmt: AST;\n        continueBB: BasicBlock;\n        breakBB: BasicBlock;\n    }\n\n    export class ControlFlowContext {\n        public entry = null;\n        // first unreachable ast for each unreachable code segment\n        public unreachable: AST[] = null;\n        public noContinuation = false;\n        // statements enclosing the current statement\n        public statementStack = new ITargetInfo[];\n        public currentSwitch = new BasicBlock[];\n        public walker: IAstWalker;\n\n        constructor (public current: BasicBlock,\n                     public exit: BasicBlock) {\n            this.entry = this.current;\n        }\n\n        public walk(ast: AST, parent: AST) {\n            return this.walker.walk(ast, parent);\n        }\n\n        public pushSwitch(bb: BasicBlock) {\n            this.currentSwitch.push(bb);\n        }\n\n        public popSwitch() {\n            return this.currentSwitch.pop();\n        }\n\n        public reportUnreachable(er: ErrorReporter) {\n            if (this.unreachable && (this.unreachable.length > 0)) {\n                var len = this.unreachable.length;\n                for (var i = 0; i < len; i++) {\n                    var unreachableAST = this.unreachable[i];\n                    if (unreachableAST.nodeType != NodeType.EndCode) {\n                        er.simpleError(unreachableAST, "unreachable code");\n                    }\n                }\n            }\n        }\n\n        private printAST(ast: AST, outfile: ITextWriter) {\n            var printContext = new PrintContext(outfile, null);\n\n            printContext.increaseIndent();\n            //ast.walk(prePrintAST, postPrintAST, null, printContext);\n            getAstWalkerFactory().walk(ast, prePrintAST, postPrintAST, null, printContext);\n\n            printContext.decreaseIndent();\n        }\n\n        private printBlockContent(bb: BasicBlock, outfile: ITextWriter) {\n            var content = bb.content;\n            for (var i = 0, len = content.members.length; i < len; i++) {\n                var ast = content.members[i];\n                this.printAST(ast, outfile);\n            }\n        }\n\n        public markBase = 0;\n\n        public bfs(nodeFunc: (bb: BasicBlock) =>void , edgeFunc: (node1: BasicBlock, node2: BasicBlock) =>void ,\n            preEdges: () =>void , postEdges: () =>void ) {\n            var markValue = this.markBase++;\n            var q = new BasicBlock[];\n            q[q.length] = this.entry;\n\n            while (q.length > 0) {\n                var bb = q.pop();\n                if (!(bb.marked(markValue))) {\n                    bb.mark();\n                    if (nodeFunc) {\n                        nodeFunc(bb);\n                    }\n                    var succLen = bb.successors.length;\n                    if (succLen > 0) {\n                        if (preEdges) {\n                            preEdges();\n                        }\n                        for';
var v27162 = v27163 + ' (var j = succLen - 1; j >= 0; j--) {\n                            var successor = bb.successors[j];\n                            if (!(successor.marked(this.markBase))) {\n                                if (edgeFunc) {\n                                    edgeFunc(bb, successor);\n                                }\n                                q[q.length] = successor;\n                            }\n                        }\n                        if (postEdges) {\n                            postEdges();\n                        }\n                    }\n                }\n            }\n        }\n\n        public linearBBs = new BasicBlock[];\n\n        public useDef(er: ErrorReporter, funcSym: Symbol) {\n            var useDefContext = new UseDefContext();\n            useDefContext.func = funcSym;\n            var useDefInit = (bb: BasicBlock) => {\n                bb.useDef = new BBUseDefInfo(bb);\n                bb.useDef.initialize(useDefContext);\n                this.linearBBs[this.linearBBs.length] = bb;\n            }\n            this.bfs(useDefInit, null, null, null);\n            var i: number, bbLen: number;\n            for (i = 0, bbLen = this.linearBBs.length; i < bbLen; i++) {\n                this.linearBBs[i].useDef.initializeGen(useDefContext);\n                this.linearBBs[i].useDef.initializeKill(useDefContext);\n            }\n            var changed = true;\n\n            while (changed) {\n                changed = false;\n                for (i = 0; i < bbLen; i++) {\n                    changed = this.linearBBs[i].useDef.updateTop() || changed;\n                }\n            }\n\n            var top = this.entry.useDef.top;\n            top.map((index) => {\n                var ast = <Identifier>useDefContext.uses[<number>index];\n                er.simpleError(ast, "use of variable \'" + ast.actualText + "\' that is not definitely assigned");\n            });\n        }\n\n        public print(outfile: ITextWriter) {\n            var index = 0;\n            var node = (bb: BasicBlock) => {\n                if (bb.index < 0) {\n                    bb.index = index++;\n                }\n                if (bb == this.exit) {\n                    outfile.WriteLine("Exit block with index " + bb.index);\n                }\n                else {\n                    outfile.WriteLine("Basic block with index " + bb.index);\n                    this.printBlockContent(bb, outfile);\n                }\n            }\n\n            function preEdges() {\n                outfile.Write("  Branches to ");\n            }\n\n            function postEdges() {\n                outfile.WriteLine("");\n            }\n\n            function edge(node1: BasicBlock, node2: BasicBlock) {\n                if (node2.index < 0) {\n                    node2.index = index++;\n                }\n                outfile.Write(node2.index + " ");\n            }\n\n            this.bfs(node, edge, preEdges, postEdges);\n            if (this.unreachable != null) {\n                for (var i = 0, len = this.unreachable.length; i < len; i++) {\n                    outfile.WriteLine("Unreachable basic block ...");\n                    this.printAST(this.unreachable[i], outfile);\n                }\n            }\n        }\n\n        public pushStatement(stmt: Statement, continueBB: BasicBlock, breakBB: BasicBlock) {\n            this.statementStack.push({ stmt: stmt, continueBB: continueBB, breakBB: breakBB });\n        }\n\n        public popStatement() { return this.statementStack.pop(); }\n\n        public returnStmt() {\n            // TODO: make successor finally block if return stmt inside of try/finally \n            this.current.addSuccessor(this.exit);\n            this.setUnreachable();\n        }\n\n        public setUnreachable() {\n            this.current = null;\n            this.noContinuation = true;\n        }\n\n        public addUnreachable(ast: AST) {\n            if (this.unreachable === null) {\n                this.unreachable = new AST[];\n            }\n            this.unreachable[this.unreachable.length] = ast;\n        }\n\n        public unconditionalBranch(target: AST, isContinue: bool) {\n            var targetBB = null;\n            for (var i = 0, len = this.statementStack.length; i < len; i++) {\n                var targetInfo = this.statementStack[i];\n                if (targetInfo.stmt == target) {\n                    if (isContinue) {\n                        targetBB = targetInfo.continueBB;\n                    }\n                    else {\n                        targetBB = targetInfo.breakBB;\n                    }\n                    break;\n                }\n            }\n            if (targetBB) {\n                this.current.addSuccessor(targetBB);\n            }\n            this.setUnreachable();\n        }\n\n        public addContent(ast: AST): void {\n            if (this.current) {\n                this.current.content.append(ast);\n            }\n        }\n    }\n\n    export interface IResolutionData {\n        actuals: Type[];\n        exactCandidates: Signature[];\n        c';
var v27161 = v27162 + 'onversionCandidates: Signature[];\n        id: number;\n    }\n\n    export class ResolutionDataCache {\n        public cacheSize = 16;\n        public rdCache: IResolutionData[] = [];\n        public nextUp: number = 0;\n\n        constructor () {\n            for (var i = 0; i < this.cacheSize; i++) {\n                this.rdCache[i] = {\n                    actuals: new Type[],\n                    exactCandidates: new Signature[],\n                    conversionCandidates: new Signature[],\n                    id: i\n                };\n            }\n        }\n\n        public getResolutionData(): IResolutionData {\n            var rd: IResolutionData = null;\n\n            if (this.nextUp < this.cacheSize) {\n                rd = this.rdCache[this.nextUp];\n            }\n\n            if (rd == null) {\n                this.cacheSize++;\n                rd = {\n                    actuals: new Type[],\n                    exactCandidates: new Signature[],\n                    conversionCandidates: new Signature[],\n                    id: this.cacheSize\n                };\n                this.rdCache[this.cacheSize] = rd;\n            }\n\n            // cache operates as a stack - RD is always served up in-order\n            this.nextUp++;\n\n            return rd;\n        }\n\n        public returnResolutionData(rd: IResolutionData) {\n            // Pop to save on array allocations, which are a bottleneck\n            // REVIEW: On some VMs, Array.pop doesn\'t always pop the last value in the array\n            rd.actuals.length = 0;\n            rd.exactCandidates.length = 0;\n            rd.conversionCandidates.length = 0;\n\n            this.nextUp = rd.id;\n        }\n    }\n\n    export class TypeFlow {\n        public scope: SymbolScope;\n        public globalScope: SymbolScope;\n\n        public thisType: Type;\n        public thisFnc: FuncDecl = null;\n        public thisClassNode: TypeDeclaration = null;\n        public enclosingFncIsMethod = false;\n\n        // REVIEW: Prune in favor of typechecker fields\n        public doubleType: Type;\n        public booleanType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public regexType: Type;\n        public nullType: Type;\n        public voidType: Type;\n        public arrayAnyType: Type;\n\n        public arrayInterfaceType: Type = null;\n        public stringInterfaceType: Type = null;\n        public objectInterfaceType: Type = null;\n        public functionInterfaceType: Type = null;\n        public numberInterfaceType: Type = null;\n        public booleanInterfaceType: Type = null;\n        public iargumentsInterfaceType: Type = null;\n\n        public currentScript: Script = null;\n\n        public inImportTypeCheck = false;\n        public inTypeRefTypeCheck = false;\n        public inArrayElementTypeCheck = false;\n        public resolutionDataCache = new ResolutionDataCache();\n        public nestingLevel = 0;\n        public inSuperCall = false;\n\n        constructor (public logger: ILogger, public initScope: SymbolScope, public parser: Parser,\n                   public checker: TypeChecker) {\n            this.checker.typeFlow = this;\n            this.scope = this.initScope;\n            this.globalScope = this.initScope;\n            this.doubleType = this.checker.numberType;\n            this.booleanType = this.checker.booleanType;\n            this.stringType = this.checker.stringType;\n            this.anyType = this.checker.anyType;\n            this.regexType = this.anyType;\n            this.nullType = this.checker.nullType;\n            this.voidType = this.checker.voidType;\n            this.arrayAnyType = this.checker.makeArrayType(this.anyType);\n        }\n\n        public initLibs() {\n            var arraySym = this.globalScope.find("Array", false, true);\n            if (arraySym && (arraySym.kind() == SymbolKind.Type)) {\n                this.arrayInterfaceType = (<TypeSymbol>arraySym).type;\n            }\n            var stringSym = this.globalScope.find("String", false, true);\n            if (stringSym && (stringSym.kind() == SymbolKind.Type)) {\n                this.stringInterfaceType = (<TypeSymbol>stringSym).type;\n            }\n            var objectSym = this.globalScope.find("Object", false, true);\n            if (objectSym && (objectSym.kind() == SymbolKind.Type)) {\n                this.objectInterfaceType = (<TypeSymbol>objectSym).type;\n            }\n            var fnSym = this.globalScope.find("Function", false, true);\n            if (fnSym && (fnSym.kind() == SymbolKind.Type)) {\n                this.functionInterfaceType = (<TypeSymbol>fnSym).type;\n            }\n            var numberSym = this.globalScope.find("Number", false, true);\n            if (numberSym && (numberSym.kind() == SymbolKind.Type)) {\n                this.numberInterfaceType = (<TypeSymbol>numberSym).type;\n            }\n            var booleanSym = this.globalScope.find("Boolean", false, true);\n            if (booleanSym && (booleanSym.kind() == SymbolKind.Type)) {\n                this.booleanInterfaceT';
var v27160 = v27161 + 'ype = (<TypeSymbol>booleanSym).type;\n            }\n            var regexSym = this.globalScope.find("RegExp", false, true);\n            if (regexSym && (regexSym.kind() == SymbolKind.Type)) {\n                this.regexType = (<TypeSymbol>regexSym).type;\n            }\n        }\n\n        public cast(ast: AST, type: Type): AST {\n            return this.castWithCoercion(ast, type, true, false);\n        }\n\n        public castWithCoercion(ast: AST, type: Type, applyCoercion: bool, typeAssertion: bool): AST {\n            var comparisonInfo = new TypeComparisonInfo();\n            if (this.checker.sourceIsAssignableToTarget(ast.type, type, comparisonInfo) || (typeAssertion && this.checker.sourceIsAssignableToTarget(type, ast.type, comparisonInfo))) {\n                if (applyCoercion) {\n                    if (type == null) {\n                        ast.type = this.anyType;\n                    }\n                    else if (type.isClass()) {\n                        ast.type = type.instanceType;\n                    }\n                    else {\n                        ast.type = type;\n                    }\n                }\n                return ast;\n            }\n            else {\n                this.checker.errorReporter.incompatibleTypes(ast, ast.type, type, null, this.scope, comparisonInfo);\n                return ast;\n            }\n        }\n\n        public inScopeTypeCheck(ast: AST, enclosingScope: SymbolScope): AST {\n            var prevScope = this.scope;\n            this.scope = enclosingScope;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var svThisClassNode = this.thisClassNode;\n            var svCurrentModDecl = this.checker.currentModDecl;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var container = this.scope.container;\n            var fnc: FuncDecl = null;\n            while (container) {\n                if (container.kind() == SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>container;\n                    var type = typeSym.type;\n                    if (type.call) {\n                        if (fnc == null) {\n                            // use innermost function\n                            this.enclosingFncIsMethod = typeSym.isMethod;\n                            fnc = <FuncDecl>container.declAST;\n                        }\n                    }\n                    if (type.isClass()) {\n                        this.thisType = type.instanceType;\n                        if (typeSym.declAST &&\n                            (typeSym.declAST.nodeType == NodeType.ClassDeclaration)) {\n                            this.thisClassNode = <TypeDeclaration>typeSym.declAST;\n                        }\n                        // use innermost class\n                        break;\n                    }\n                    if (type.isModuleType()) {\n                        this.checker.currentModDecl = <ModuleDeclaration>typeSym.declAST;\n                        // use innermost module\n                        break;\n                    }\n                }\n                container = container.container;\n            }\n            this.thisFnc = fnc;\n\n            var updated = this.typeCheck(ast);\n\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.thisClassNode = svThisClassNode;\n            this.checker.currentModDecl = svCurrentModDecl;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.scope = prevScope;\n            return updated;\n        }\n\n        public typeCheck(ast: AST): AST {\n            if (ast) {\n                return ast.typeCheck(this);\n            }\n            else {\n                return null;\n            }\n        }\n\n        public inScopeTypeCheckDecl(ast: AST) {\n            if (ast.nodeType == NodeType.VarDecl || ast.nodeType == NodeType.ArgDecl) {\n                this.inScopeTypeCheckBoundDecl(<BoundDecl>ast);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n\n                var funcDecl = <FuncDecl>ast;\n\n                if (funcDecl.isAccessor()) {\n                    this.typeCheckFunction(funcDecl);\n                }\n            }\n        }\n\n        public inScopeTypeCheckBoundDecl(varDecl: BoundDecl) {\n            var sym = varDecl.sym;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevLocationInfo = this.checker.locationInfo;\n            if (sym && sym.container) {\n                var instanceScope = hasFlag(varDecl.varFlags, VarFlags.ClassConstructorProperty) ? sym.container.getType().constructorScope : sym.container.instanceScope();\n                if (hasFlag(varDecl.varFlags, VarFlags.Property) && sym.container.declAST.nodeType == NodeType.FuncDecl) {\n                    this.thisFnc = <FuncDecl>sym.container.declAST;\n                }\n                if (instanceScope) {\n                    var';
var v27159 = v27160 + " prevScope = this.scope;\n                    this.scope = instanceScope;\n                    var container = sym.container;\n                    var svCurrentModDecl = this.checker.currentModDecl;\n                    if (this.checker.units &&\n                        (sym.unitIndex >= 0) &&\n                        (sym.unitIndex < this.checker.units.length)) {\n                        this.checker.locationInfo = this.checker.units[sym.unitIndex];\n                    }\n                    else {\n                        this.checker.locationInfo = unknownLocationInfo;\n                    }\n                    // REVIEW: container linkage for function expressions\n                    while (container) {\n                        if (container.kind() == SymbolKind.Type) {\n                            var typeSym = <TypeSymbol>container;\n                            var type = typeSym.type;\n                            if (type.call) {\n                                this.enclosingFncIsMethod = typeSym.isMethod;\n                            }\n                            if (type.isClass()) {\n                                this.thisType = type.instanceType;\n                            }\n                            if (type.isModuleType()) {\n                                this.checker.currentModDecl = <ModuleDeclaration>container.declAST;\n                                break;\n                            }\n                        }\n                        container = container.container;\n                    }\n\n                    this.typeCheckBoundDecl(varDecl);\n                    this.checker.currentModDecl = svCurrentModDecl;\n                    this.scope = prevScope;\n                }\n            }\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.enclosingFncIsMethod = prevMethodStatus;\n        }\n\n        public resolveBoundDecl(varDecl: BoundDecl) {\n            if (varDecl.typeExpr) {\n                if (varDecl.typeExpr.type == null ||\n                    (varDecl.typeExpr.type && varDecl.typeExpr.type == this.anyType && this.scope) ||\n                    varDecl.typeExpr.type.symbol == null ||\n                    !this.checker.typeStatusIsFinished(varDecl.typeExpr.type.symbol.typeCheckStatus)) {\n                    this.typeCheck(varDecl.typeExpr);\n                }\n                varDecl.type = varDecl.typeExpr.type;\n                if (varDecl.sym) {\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n            else if (varDecl.init == null) {\n                if (this.checker.styleSettings.implicitAny) {\n                    this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                }\n                varDecl.type = this.anyType;\n                if (varDecl.sym) {\n                    if (varDecl.sym.isType()) {\n                        var tsym = <TypeSymbol>varDecl.sym;\n                        if (tsym.isMethod) {\n                            this.checker.errorReporter.simpleError(varDecl, \"Cannot bind method group to variable.  (Did you mean to use 'declare function' instead of 'declare var'?)\");\n                            return;\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(varDecl, \"Cannot bind type to variable\");\n                            return;\n                        }\n                    }\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n        }\n\n        public typeCheckBoundDecl(varDecl: BoundDecl): VarDecl {\n            // symbol has already been added to the scope\n            var infSym = <InferenceSymbol>varDecl.sym;\n            if (infSym == null) {\n                if (varDecl.init) {\n                    varDecl.init = this.typeCheck(varDecl.init);\n                    varDecl.type = this.checker.widenType(varDecl.init.type);\n                }\n                else {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                    }\n                    varDecl.type = this.anyType;\n                }\n            }\n            else {\n                if (infSym.typeCheckStatus == TypeCheckStatus.Started) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                    }\n                    varDecl.type = this.anyType;\n                    infSym.setType(this.anyType);\n                }\n                else if (infSym.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                    infSym.typeCheckStatus = TypeCheckStatus.Started;\n                    this.checker.addStartedPTO(infSym);\n                    var resolved = false;\n                    if (varDecl.type";
var v27158 = v27159 + " == null) {\n                        // propagate declared type\n                        if (varDecl.typeExpr) {\n                            this.resolveBoundDecl(varDecl);\n                            resolved = true;\n                            varDecl.type = varDecl.typeExpr.type;\n                            infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        }\n                    }\n\n                    if (varDecl.init) {\n                        // if the bound decl is a function-local static, we need to set the\n                        // encapsulating scope to the function's member scope\n                        var isLocalStatic = hasFlag(varDecl.varFlags, VarFlags.LocalStatic);\n                        var prevScope = this.scope;\n                        var applyTargetType = !varDecl.init.isParenthesized;\n                        if (isLocalStatic) {\n                            this.scope = varDecl.sym.container.getType().memberScope;\n                        }\n\n                        // Mark Lambda expressions with IsPropertyBound flag\n                        if (hasFlag(varDecl.varFlags, VarFlags.Property) && this.thisClassNode) {\n                            getAstWalkerFactory().walk(varDecl.init, (ast: AST, parent: AST, walker: IAstWalker) => {\n                                if (ast && ast.nodeType == NodeType.FuncDecl) {\n                                    if (hasFlag((<FuncDecl>ast).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                        // Found a Lambda, mark it\n                                        (<FuncDecl>ast).fncFlags |= FncFlags.IsPropertyBound;\n                                    }\n                                    // Only mark the top level functions\n                                    walker.options.goChildren = false;\n                                }\n                                return ast;\n                            });\n                        }\n\n                        this.checker.typeCheckWithContextualType(varDecl.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, varDecl.init);\n\n                        this.scope = prevScope;\n                        if (varDecl.type) {\n                            // If the cast is to a target type, in the case of a funcdecl,\n                            // we may overwrite the init's type with one generated from a signature.\n                            // In that case, we need to preserve the contained scope of the actual decl\n                            var preserveScope = false;\n                            var preservedContainedScope = null;\n\n                            if (varDecl.init.type) {\n                                preservedContainedScope = varDecl.init.type.containedScope;\n                                preserveScope = true;\n                                if (varDecl.init.type == this.voidType) {\n                                    this.checker.errorReporter.simpleError(varDecl, \"Cannot assign type 'void' to variable '\" + varDecl.id.actualText + \"'\");\n                                }\n                            }\n\n                            varDecl.init = this.castWithCoercion(varDecl.init, varDecl.type, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n\n                            if (preserveScope && varDecl.init.type.containedScope == null) {\n                                varDecl.init.type.containedScope = preservedContainedScope;\n                            }\n                        }\n                        else {\n                            varDecl.type = this.checker.widenType(varDecl.init.type);\n                            if (varDecl.type == this.voidType) {\n                                this.checker.errorReporter.simpleError(varDecl, \"Cannot assign type 'void' to variable '\" + varDecl.id.actualText + \"'\");\n                                varDecl.type = this.anyType;\n                            }\n                        }\n                        infSym.setType(varDecl.type);\n                    }\n                    else {\n                        if (!resolved) {\n                            this.resolveBoundDecl(varDecl);\n                        }\n                    }\n                    infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                }\n                else if (this.checker.typeStatusIsFinished(infSym.typeCheckStatus) &&\n                         (infSym.declAST != varDecl)) {\n                    if (varDecl.init) {\n                        varDecl.init = this.typeCheck(varDecl.init);\n                        varDecl.type = infSym.getType();\n                        varDecl.init = this.cast(varDecl.init, varDecl.type);\n                    }\n                }\n            }\n            if (varDecl.id && varDecl.sym) {\n                varDecl.id.sym = varDecl.sym;\n            }\n\n            // Check if variable satisfies type privacy\n            if (varDecl.sym && varDecl.sym.con";
var v27157 = v27158 + 'tainer) {\n                this.checkTypePrivacy(varDecl.sym.getType(), varDecl.sym, (typeName: string, isModuleName: bool) => this.varPrivacyErrorReporter(varDecl, typeName, isModuleName));\n            }\n            return <VarDecl>varDecl;\n        }\n\n        private varPrivacyErrorReporter(varDecl: BoundDecl, typeName: string, isModuleName: bool) {\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n\n            if (hasFlag(varDecl.varFlags, VarFlags.Public)) {\n                if (varDecl.sym.container.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    this.checker.errorReporter.simpleError(varDecl, "property \'" + varDecl.sym.name + "\' of exported interface" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(varDecl, "public member \'" + varDecl.sym.name + "\' of exported class" + typestring);\n                }\n            } else {\n                this.checker.errorReporter.simpleError(varDecl, "exported variable \'" + varDecl.sym.name + "\'" + typestring);\n            }\n        }\n\n        public typeCheckSuper(ast: AST): AST {\n            if (this.thisType && (this.enclosingFncIsMethod && !this.thisFnc.isStatic()) && this.thisType.baseClass()) {\n                ast.type = this.thisType.baseClass();\n            }\n            else {\n                // redirect \'super\' used within lambdas\n                if (!this.enclosingFncIsMethod &&\n                    this.thisType && this.thisType.baseClass() &&\n                    this.thisFnc && hasFlag(this.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n                    // Find the closest non lambda function\n                    var enclosingFnc = this.thisFnc.enclosingFnc;\n                    while (hasFlag(enclosingFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n                        enclosingFnc = enclosingFnc.enclosingFnc;\n                    }\n\n                    // If the lambda is enclosed is a valid member, use the base type\n                    if (enclosingFnc && (enclosingFnc.isMethod() || enclosingFnc.isConstructor) && !enclosingFnc.isStatic()) {\n                        ast.type = this.thisType.baseClass();\n                        enclosingFnc.setHasSuperReferenceInFatArrowFunction();\n                        return ast;\n                    }\n                }\n\n                ast.type = this.anyType;\n                this.checker.errorReporter.invalidSuperReference(ast);\n            }\n            return ast;\n        }\n\n        public typeCheckThis(ast: AST): AST {\n           ast.type = this.anyType;\n            var illegalThisRef = false;\n            if (this.thisFnc == null) {\n                // \'this\' in class bodies should bind to \'any\'\n                if (this.thisType) {\n                    if (this.thisClassNode && this.thisClassNode.nodeType == NodeType.ClassDeclaration) {\n                        illegalThisRef = true;\n                    }\n                    else {\n                        ast.type = this.thisType;\n                    }\n                }\n                else if (this.checker.currentModDecl) {\n                    this.checker.errorReporter.simpleError(ast, "\'this\' may not be referenced within module bodies");\n                }\n            }\n            else {\n                if (this.thisClassNode && (hasFlag(this.thisFnc.fncFlags, FncFlags.IsPropertyBound) || (this.inSuperCall && hasFlag((<ClassDeclaration>this.thisClassNode).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor)))) {\n                    illegalThisRef = true;\n                }\n                if (this.thisFnc.isMethod() || this.thisFnc.isConstructor || this.thisFnc.isTargetTypedAsMethod) {\n                    if (this.thisType && !(this.thisFnc.fncFlags & FncFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            // redirect \'this\' used within lambdas\n            if (!this.enclosingFncIsMethod &&\n                this.thisFnc &&\n                hasFlag(this.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n\n                    // if the enclosing function was bound to a property,\n                    // checkInitSelf would not have been able to mark the \n                    // function for a self init\n                if (this.thisFnc.boundToProperty) {\n                    var container = this.thisFnc.boundToProperty.sym.container;\n                    if (container.declAST.nodeType == NodeType.FuncDecl) {\n                        (<FuncDecl>container.declAST).setHasSelfReference();\n                    }\n                }\n                else {\n         ';
var v27156 = v27157 + '           var encFnc = this.thisFnc.enclosingFnc;\n                    var firstEncFnc = encFnc;\n\n                    while (encFnc) {\n                        if (this.thisClassNode && hasFlag(encFnc.fncFlags, FncFlags.IsPropertyBound)) {\n                            illegalThisRef = true;\n                        }\n\n                        if (!hasFlag(encFnc.fncFlags, FncFlags.IsFatArrowFunction) || encFnc.hasSelfReference()) {\n                            encFnc.setHasSelfReference();\n                            break;\n                        }\n\n                        encFnc = encFnc.enclosingFnc;\n                    }\n\n                    if (!encFnc && firstEncFnc) {\n                        encFnc = firstEncFnc;\n                        encFnc.setHasSelfReference();\n                    }\n                    else if (!encFnc) { // the lambda is bound at the top-level...\n                        if (this.thisClassNode) {\n                            (<ClassDeclaration>this.thisClassNode).varFlags |= VarFlags.MustCaptureThis;\n                        }\n                        else if (this.checker.currentModDecl) {\n                            this.checker.currentModDecl.modFlags |= ModuleFlags.MustCaptureThis;\n                        }\n                        else {\n                            this.checker.mustCaptureGlobalThis = true;\n                        }\n                    }\n\n                    if (encFnc && (encFnc.isMethod() || encFnc.isConstructor) && this.thisType && !hasFlag(encFnc.fncFlags, FncFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            if (illegalThisRef) {\n                this.checker.errorReporter.simpleError(ast, "Keyword \'this\' cannot be referenced in initializers in a class body, or in super constructor calls");\n            }\n            return ast;\n        }\n\n        public setTypeFromSymbol(ast: AST, symbol: Symbol): void {\n            if (symbol.isVariable()) {\n                if (symbol.isInferenceSymbol()) {\n                    var infSym = <InferenceSymbol>symbol;\n                    if (infSym.declAST &&\n                        !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                        this.inScopeTypeCheckDecl(infSym.declAST);\n                    }\n                    if (!this.checker.styleSettings.innerScopeDeclEscape) {\n                        if (infSym.declAST && (infSym.declAST.nodeType == NodeType.VarDecl)) {\n                            if (this.nestingLevel < (<VarDecl>infSym.declAST).nestingLevel) {\n                                this.checker.errorReporter.styleError(ast, "Illegal reference to a variable defined in more nested scope");\n                            }\n                        }\n                    }\n                }\n                ast.type = symbol.getType();\n                if (!symbol.writeable()) {\n                    ast.flags = ast.flags & (~(ASTFlags.Writeable));\n                }\n            }\n            else if (symbol.isType()) {\n                ast.type = symbol.getType();\n                ast.flags = ast.flags & (~(ASTFlags.Writeable));\n            }\n            else {\n                ast.type = this.anyType;\n                this.checker.errorReporter.symbolDoesNotReferToAValue(ast, symbol.name);\n            }\n        }\n\n        public typeCheckName(ast: AST): AST {\n            var identifier = <Identifier>ast;\n\n            if (this.checker.inWith) {\n                identifier.type = this.anyType;\n            }\n            else {\n                var typespace = this.inTypeRefTypeCheck;\n                var idText = identifier.text;\n                var originalIdText = idText;\n                var isDynamicModuleName = isQuoted(identifier.text);\n\n                var symbol = this.scope.find(idText, false, typespace);\n\n                if (symbol == null && isDynamicModuleName) {\n                    symbol = this.checker.findSymbolForDynamicModule(idText, this.currentScript.locationInfo.filename, (id) => this.scope.find(id, false, typespace));\n                }\n\n                if (!symbol) {\n                    if (!identifier.isMissing()) {\n                        this.checker.errorReporter.unresolvedSymbol(identifier, identifier.text);\n                    }\n                    identifier.type = this.anyType;\n                }\n                else {\n                    if (optimizeModuleCodeGen && symbol && symbol.isType()) {\n                        var symType = symbol.getType();\n                        // Once the type has been referenced outside of a type ref position, there\'s\n                        // no going back                        \n                        if (symType && (<TypeSymbol>symbol).aliasLink && (<TypeSymbol>symbol).onlyReferencedAsTypeRef) {\n\n                            var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                            if (modDecl && hasFlag(modDecl.modFlags, ModuleFlags.IsDynamic';
var v27155 = v27156 + ")) {\n                                (<TypeSymbol>symbol).onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;\n                            }\n                        }\n                    }\n\n                    if (symbol.declAST &&\n                        symbol.declAST.nodeType == NodeType.FuncDecl &&\n                        !(<FuncDecl>symbol.declAST).returnTypeAnnotation &&\n                        (<FuncDecl>symbol.declAST).signature.typeCheckStatus == TypeCheckStatus.Started) {\n                        (<FuncDecl>symbol.declAST).type.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        (<FuncDecl>symbol.declAST).signature.returnType.type = this.anyType;\n                    }\n\n                    this.setTypeFromSymbol(ast, symbol);\n                    identifier.sym = symbol;\n                    if (this.thisFnc) {\n                        if (this.thisFnc.type && symbol.container != this.thisFnc.type.symbol) {\n                            this.thisFnc.freeVariables[this.thisFnc.freeVariables.length] = symbol;\n                        }\n                    }\n                }\n            }\n            return ast;\n        }\n\n        public typeCheckScript(script: Script): Script {\n            this.checker.locationInfo = script.locationInfo;\n            this.scope = this.checker.globalScope;\n\n            // if it's a top-level module, the globals have already been added to the implicit\n            // module decl\n            if (!script.topLevelMod) {\n                this.addLocalsFromScope(this.scope, this.checker.gloMod,\n                                   script.vars, this.checker.globals, true);\n            }\n\n            this.currentScript = script;\n            script.bod = <ASTList>this.typeCheck(script.bod);\n            this.currentScript = null;\n            return script;\n        }\n\n        public typeCheckBitNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return unex;\n        }\n\n        public typeCheckUnaryNumberOperator(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return ast;\n        }\n\n        public typeCheckLogNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.booleanType;\n            return unex;\n        }\n\n        public astIsWriteable(ast: AST): bool {\n            return hasFlag(ast.flags, ASTFlags.Writeable);\n        }\n\n        public typeCheckIncOrDec(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            var lval = unex.operand;\n            if (!this.astIsWriteable(unex)) {\n                this.checker.errorReporter.valueCannotBeModified(unex);\n                unex.type = this.doubleType;\n            }\n            else {\n                unex = <UnaryExpression> this.typeCheckUnaryNumberOperator(ast);\n                if (unex.operand.type != this.checker.numberType && unex.operand.type != this.checker.anyType && !(unex.operand.type.typeFlags & TypeFlags.IsEnum)) {\n                    this.checker.errorReporter.simpleError(ast, \"'++' and '--' may only be applied to operands of type 'number' or 'any'\");\n                }\n            }\n            return unex;\n        }\n\n        public typeCheckBitwiseOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            var resultType: Type = null;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (assignment && (!this.astIsWriteable(binex))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n\n            if (this.checker.styleSettings.bitwise) {\n                this.checker.errorReporter.styleError(ast, \"use of \" + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (this.checker.sourceIsSubtypeOfTarget(leftType, this.doubleType) && (this.checker.sourceIsSubtypeOfTarget(rightType, this.doubleType))) {\n                resultType = this.doubleType;\n            }\n            else if ((leftType == this.booleanType) &&\n                     (rightType == this.booleanType)) {\n                resultType = this.booleanType;\n            }\n            else if (leftType == this.anyType) {\n                if ((rightType == this.anyType) ||\n                    (rightType == this.doubleType) ||\n                    (rightType == this.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            else if (rightType == this.anyType) {\n                if ((leftType == this.anyType) ||\n                    (leftType == this.doubleType) ||\n                    (leftType == th";
var v27154 = v27155 + 'is.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            if (resultType == null) {\n                resultType = this.anyType;\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                        binex.printLabel(), this.scope);\n            }\n            binex.type = resultType;\n            return binex;\n        }\n\n        public typeCheckArithmeticOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (assignment && (!this.astIsWriteable(binex.operand1))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n\n            if (this.checker.styleSettings.bitwise &&\n                ((binex.nodeType == NodeType.And) ||\n                (binex.nodeType == NodeType.Or) ||\n                (binex.nodeType == NodeType.AsgAnd) ||\n                (binex.nodeType == NodeType.AsgOr))) {\n                this.checker.errorReporter.styleError(ast, "use of " + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (leftType == null || rightType == null) {\n                this.checker.errorReporter.simpleError(binex, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?");\n                binex.type = this.anyType;\n                return binex;\n            }\n            var nodeType = binex.nodeType;\n\n            if (this.checker.isNullOrUndefinedType(leftType)) {\n                leftType = rightType;\n            }\n            if (this.checker.isNullOrUndefinedType(rightType)) {\n                rightType = leftType;\n            }\n            leftType = this.checker.widenType(leftType);\n            rightType = this.checker.widenType(rightType);\n\n            if (nodeType == NodeType.Add || nodeType == NodeType.AsgAdd) {\n\n                if (leftType == this.checker.stringType || rightType == this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else if (leftType == this.checker.numberType && rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n            else {\n                if (leftType == this.checker.numberType && rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n\n            return binex;\n        }\n\n        public typeCheckDotOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var leftIsFnc = false;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            var leftType = binex.operand1.type;\n            var leftScope: SymbolScope = null;\n            // REVIEW: replace with get member scope\n            if (leftType) {\n                if (leftType == this.anyType) {\n                    binex.type = this.anyType;\n                    return binex;\n                }\n                else if (leftType == this.stringType) {\n                    if (this.stringInterfaceType) {\n                        leftScope = this.stringInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n              ';
var v27153 = v27154 + "  else if (leftType == this.doubleType) {\n                    if (this.numberInterfaceType) {\n                        leftScope = this.numberInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType == this.booleanType) {\n                    if (this.booleanInterfaceType) {\n                        leftScope = this.booleanInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if ((leftType.call || leftType.construct) && leftType.members == null) {\n                    if (this.functionInterfaceType) {\n                        leftScope = this.functionInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType.elementType) {\n                    if (this.arrayInterfaceType) {\n                        var arrInstType = leftType.elementType.getArrayBase(this.arrayInterfaceType, this.checker);\n                        leftScope = arrInstType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else {\n                    leftScope = leftType.memberScope;\n                }\n            }\n            if (leftScope == null) {\n                this.checker.errorReporter.expectedClassOrInterface(binex);\n                binex.type = this.anyType;\n            }\n            else {\n                var propertyName = <Identifier>binex.operand2;\n                var lhsIsEnclosingType = (this.thisClassNode && binex.operand1.type == this.thisClassNode.type.instanceType) || this.inTypeRefTypeCheck;\n                var symbol = leftScope.find(propertyName.text, !lhsIsEnclosingType, this.inTypeRefTypeCheck); // only search the public members, unless the rhs is a 'this' pointer\n\n                // If the symbol wasn't found, delegate to the appropriate 'virtual' parent type\n                if (!symbol) {\n                    if (this.objectInterfaceType && leftType) {\n                        // check 'Object' for the symbol\n                        if (leftType.isReferenceType()) {\n                            symbol = this.objectInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                        }\n                        if (!symbol) {\n                            // check 'Function', if appropriate\n                            if (this.functionInterfaceType && (leftType.call || leftType.construct)) {\n                                symbol = this.functionInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                            }\n                        }\n                    }\n                }\n\n                if (!symbol || (!symbol.visible(leftScope, this.checker))) {\n                    binex.type = this.anyType;\n\n                    if (symbol == null) {\n                        this.checker.errorReporter.simpleError(propertyName, \"The property '\" + propertyName.actualText + \"' does not exist on value of type '\" + leftType.getScopedTypeName(this.scope) + \"'\");\n                    }\n                    else if (!this.inTypeRefTypeCheck) {  // if it's a dotted type reference, we'll catch the visibility error during binding\n                        this.checker.errorReporter.simpleError(binex, \"The property '\" + propertyName.actualText + \" on type '\" + leftType.getScopedTypeName(this.scope) + \"' is not visible\");\n                    }\n                }\n                else {\n                    if (symbol.isVariable()) {\n                        if (symbol.isInferenceSymbol()) {\n                            var infSym = <InferenceSymbol>symbol;\n                            if (infSym.declAST && !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                                this.inScopeTypeCheckDecl(infSym.declAST);\n                            }\n                        }\n                    }\n                    propertyName.sym = symbol;\n                    binex.type = symbol.getType();\n                }\n            }\n            if (binex.type == null) {\n                binex.type = this.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckBooleanOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n            if ((!";
var v27152 = v27153 + '(this.checker.sourceIsAssignableToTarget(leftType, rightType))) &&\n                (!(this.checker.sourceIsAssignableToTarget(rightType, leftType)))) {\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckAsgOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var applyTargetType = !binex.operand2.isParenthesized;\n            binex.operand1 = this.typeCheck(binex.operand1);\n\n            this.checker.typeCheckWithContextualType(binex.operand1.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, binex.operand2);\n\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (!(this.astIsWriteable(binex.operand1))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n            if (binex.operand1.nodeType == NodeType.Call) {\n                var callEx = <CallExpression>binex.operand1;\n            }\n            var preserveScope = false;\n            var preservedContainedScope = null;\n            if (binex.operand2.type) {\n                preservedContainedScope = binex.operand2.type.containedScope;\n                preserveScope = true;\n            }\n            // Do not re-write the AST in provisional typecheck mode\n            binex.operand2 = this.castWithCoercion(binex.operand2, leftType, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n            if (preserveScope && binex.operand2.type.containedScope == null) {\n                binex.operand2.type.containedScope = preservedContainedScope;\n            }\n            binex.type = rightType;\n            return binex;\n        }\n\n        public typeCheckIndex(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1); // ObjExpr\n            binex.operand2 = this.typeCheck(binex.operand2); // IndexExpr\n\n            if (!this.checker.styleSettings.literalSubscript) {\n                if (binex.operand2.nodeType == NodeType.QString) {\n                    this.checker.errorReporter.styleError(ast, "use literal subscript (\'.\') notation instead)");\n                }\n            }\n\n            var objExprType = binex.operand1.type;\n            var indexExprType = binex.operand2.type;\n\n            if (objExprType.elementType) { // arrays\n                if (indexExprType == this.checker.anyType || indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)) {\n                    binex.type = objExprType.elementType;\n                }\n                else if (indexExprType == this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (objExprType.index) { // types with index sigs\n\n                if (indexExprType == this.checker.anyType ||\n                    !((objExprType.index.flags & SignatureFlags.IsStringIndexer) || (objExprType.index.flags & SignatureFlags.IsNumberIndexer)) || // REVIEW: unvalidated type expression\n                    ((objExprType.index.flags & SignatureFlags.IsStringIndexer) && indexExprType == this.checker.stringType) ||\n                    ((objExprType.index.flags & SignatureFlags.IsNumberIndexer) && (indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) {\n                    var sig = this.resolveOverload(ast, objExprType.index);\n                    if (sig) {\n                        binex.type = sig.returnType.type;//objExprType.index.signatures[0].returnType.type;\n                    }\n                    else {\n                        binex.type = this.checker.anyType;\n                    }\n                }\n                else if (indexExprType == this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if ((objExprType == this.checker.anyType ||\n                     objExprType == this.checker.stringType ||\n                     objExprType == this.checker.numberType ||\n                     objExprType == this.checker.booleanType ||\n                     objExprType.isReferenceType()) &&\n                     (indexExprType == this.checker.anyType ||\n                      indexExprType == this.checker.stringType ||\n                      (indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) { // RE';
var v27151 = v27152 + 'VIEW: Do we want to allow indexes of type \'number\'?\n                binex.type = this.checker.anyType;\n            }\n            else {\n                this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                binex.type = this.checker.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckInOperator(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.stringType);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type == this.checker.anyType || binex.operand1.type == this.checker.stringType) &&\n                    (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.objectInterfaceType)))) {\n                this.checker.errorReporter.simpleError(binex, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type");\n            }\n\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckShift(binex: BinaryExpression, assignment: bool): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.doubleType);\n            binex.operand2 = this.cast(this.typeCheck(binex.operand2), this.doubleType);\n            if (assignment && (!(this.astIsWriteable(binex.operand1)))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n            binex.type = this.doubleType;\n            return binex;\n        }\n\n        public typeCheckQMark(trinex: ConditionalExpression): ConditionalExpression {\n            trinex.operand1 = this.typeCheck(trinex.operand1);\n            trinex.operand2 = this.typeCheck(trinex.operand2);\n            trinex.operand3 = this.typeCheck(trinex.operand3);\n            var leftType = trinex.operand2.type;\n            var rightType = trinex.operand3.type;\n\n            if (leftType == rightType) {\n                trinex.type = leftType;\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    trinex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    trinex.type = leftType;\n                }\n                else {\n                    trinex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(trinex, leftType, rightType, trinex.printLabel(), this.scope);\n                }\n            }\n\n            return trinex;\n        }\n\n        public addFormals(container: Symbol, signature: Signature,\n            table: IHashTable) {\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var symbol = <ParameterSymbol>signature.parameters[i];\n                symbol.container = container;\n                table.add(symbol.name, symbol);\n            }\n        }\n\n        // REVIEW: We use isModContainer instead of container.getType().isModuleType because container.type may be null at this\n        // juncture\n        public addLocalsFromScope(scope: SymbolScope, container: Symbol, vars: ASTList, table: IHashTable, isModContainer: bool) {\n            var len = vars.members.length;\n            var hasArgsDef = false;\n            for (var i = 0; i < len; i++) {\n                var local = <VarDecl>vars.members[i];\n                if (((local.sym == null) || (local.sym.kind() != SymbolKind.Field))) {\n                    var result: Symbol = null;\n                    if ((result = table.lookup(local.id.text)) == null) {\n                        var localVar: ValueLocation = new ValueLocation();\n                        localVar.typeLink = new TypeLink();\n                        var varSym = null;\n\n                        if (hasFlag(local.varFlags, VarFlags.Static)) {\n                            local.varFlags |= VarFlags.LocalStatic;\n                            varSym = new FieldSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.unitIndex,\n                                                      true, localVar);\n                        }\n                        else {\n                            varSym = new VariableSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.unitIndex,\n                                                      localVar);\n                        }\n                        varSym.transferVarFlags(local.varFlags);\n                        localVar.symbol = varSym;\n                        varSym.declAST = local;\n                        localVar.typeLink.ast = local.typeExpr;\n                        this.checker.resolveTypeLink(scope, localVar.typeLink, false);\n                        if ((local.type == null) &&';
var v27150 = v27151 + ' (local.init == null)) {\n                            local.type = this.anyType;\n                        }\n                        localVar.typeLink.type = local.type;\n                        localVar.symbol.container = container;\n                        local.sym = localVar.symbol;\n                        table.add(local.id.text, varSym);\n                        if (local.id.text == "arguments") {\n                            hasArgsDef = true;\n                        }\n                    }\n                    else {\n                        local.type = result.getType();\n                        local.sym = result;\n                    }\n                }\n            }\n            if (!isModContainer) {\n                if (!hasArgsDef) {\n                    var argLoc = new ValueLocation();\n                    argLoc.typeLink = new TypeLink();\n                    var theArgSym = new VariableSymbol("arguments", vars.minChar,\n                                                     this.checker.locationInfo.unitIndex,\n                                                     argLoc);\n\n                    // if the user is using a custom lib.d.ts where IArguments has not been defined\n                    // (or they\'re compiling with the --nolib option), use \'any\' as the argument type\n                    if (!this.iargumentsInterfaceType) {\n                        var argumentsSym = scope.find("IArguments", false, true);\n\n                        if (argumentsSym) {\n                            argumentsSym.flags |= SymbolFlags.CompilerGenerated;\n                            this.iargumentsInterfaceType = argumentsSym.getType();\n                        }\n                        else {\n                            this.iargumentsInterfaceType = this.anyType;\n                        }\n                    }\n                    argLoc.typeLink.type = this.iargumentsInterfaceType;\n                    table.add("arguments", theArgSym);\n                }\n            }\n        }\n\n        // REVIEW: isClass param may now be redundant\n        public addConstructorLocalArgs(container: Symbol, args: ASTList, table: IHashTable, isClass: bool): void {\n            if (args) {\n                var len = args.members.length;\n                for (var i = 0; i < len; i++) {\n                    var local = <ArgDecl>args.members[i];\n                    if ((local.sym == null) ||\n                        (isClass || (local.sym.kind() != SymbolKind.Field))) {\n                        var result: Symbol = null;\n                        if ((result = table.lookup(local.id.text)) == null) {\n                            this.resolveBoundDecl(local);\n                            var localVar: ValueLocation = new ValueLocation();\n                            localVar.typeLink = new TypeLink();\n                            var varSym = new ParameterSymbol(local.id.text, local.minChar,\n                                                                   this.checker.locationInfo.unitIndex,\n                                                                   localVar);\n                            varSym.declAST = local;\n                            localVar.symbol = varSym;\n                            localVar.typeLink.type = local.type;\n                            localVar.symbol.container = container;\n                            local.sym = localVar.symbol;\n                            table.add(local.id.text, varSym);\n                        }\n                        else {\n                            local.type = result.getType();\n                            local.sym = result;\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkInitSelf(funcDecl: FuncDecl): bool {\n            if (!funcDecl.isMethod()) {\n                var freeVars = funcDecl.freeVariables;\n                for (var k = 0, len = freeVars.length; k < len; k++) {\n                    var sym = freeVars[k];\n                    if (sym.isInstanceProperty()) {\n                        return true;\n                    }\n                }\n            }\n            var fns = funcDecl.scopes;\n            var fnsLen = fns.members.length;\n\n            for (var j = 0; j < fnsLen; j++) {\n                var fn = <FuncDecl>fns.members[j];\n                if (this.checkInitSelf(fn)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public checkPromoteFreeVars(funcDecl: FuncDecl, constructorSym: Symbol): void {\n            var freeVars = funcDecl.freeVariables;\n            for (var k = 0, len = freeVars.length; k < len; k++) {\n                var sym = freeVars[k];\n                if ((!sym.isInstanceProperty()) && (sym.container == constructorSym)) {\n                    instanceFilter.reset();\n                    if (this.scope.search(instanceFilter, sym.name, false, false)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variable shadows class property';
var v27149 = v27150 + ' \'" + sym.name + "\'. To access the class property, use \'self." + sym.name + "\'");\n                    }\n\n                    this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable \'" + sym.name + "\' to a class property")\n                }\n            }\n        }\n\n        public allReturnsAreVoid(funcDecl: FuncDecl) {\n            // in the case of a function or method with no declared return type, walk the body to \n            // pre-emptively determine if the function has a return type of void\n            //\n            // REVIEW: Eventually, we\'ll want to perform exit graph analysis to determine\n            // if the function ever "escapes" without a return expression\n            // This would require moving some of this logic into the function\'s typecheck-proper,\n            // which would slow things down a fair bit, but would open up more analysis opportunities\n            var allReturnsAreVoid = true;\n\n            if (funcDecl.signature.returnType.type == null) {\n                var preFindReturnExpressionTypes = function (ast: AST, parent: AST, walker: IAstWalker) {\n                    var go = true;\n                    switch (ast.nodeType) {\n                        case NodeType.FuncDecl:\n                            // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                            // return type with the top-level function\'s return type\n                            go = false;\n                            break;\n                        case NodeType.Return:\n                            var returnStmt: ReturnStatement = <ReturnStatement>ast;\n\n                            if (returnStmt.returnExpression) {\n                                allReturnsAreVoid = false;\n                                go = false;\n                            }\n\n                        default:\n                            break;\n                    }\n                    walker.options.goChildren = go;\n                    walker.options.goNextSibling = go;\n                    return ast;\n                }\n\n                getAstWalkerFactory().walk(funcDecl.bod, preFindReturnExpressionTypes);\n            }\n\n            return allReturnsAreVoid;\n        }\n\n        public classConstructorHasSuperCall(funcDecl: FuncDecl) {\n            var foundSuper = false;\n\n            var preFindSuperCall = function (ast: AST, parent: AST, walker: IAstWalker) {\n\n                var go = true;\n\n                switch (ast.nodeType) {\n                    case NodeType.FuncDecl:\n                        go = false;\n                        break;\n                    case NodeType.Call:\n                        var call = <CallExpression>ast;\n\n                        if (call.target.nodeType == NodeType.Super) {\n                            go = false;\n                            foundSuper = true;\n                            break;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                walker.options.goChildren = go;\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(funcDecl.bod, preFindSuperCall);\n\n            return foundSuper;\n        }\n\n        private baseListPrivacyErrorReporter(bases: ASTList, i: number, declSymbol: Symbol, extendsList: bool, typeName: string, isModuleName: bool) {\n            var baseSymbol = bases.members[i].type.symbol;\n            var declTypeString = (declSymbol.declAST.nodeType == NodeType.InterfaceDeclaration) ? "interface" : "class";\n            var baseListTypeString = extendsList ? "extends" : "implements";\n            var baseTypeString = (baseSymbol.declAST.nodeType == NodeType.InterfaceDeclaration) ? "interface" : "class";\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module ";\n                baseTypeString = " " + baseTypeString + " from private module " + quotestring + typeName + quotestring;\n            } else {\n                baseTypeString = " private " + baseTypeString + " \'" + typeName + "\'";\n            }\n            this.checker.errorReporter.simpleError(bases.members[i], "exported " + declTypeString + " \'" + declSymbol.name + "\' " + baseListTypeString + baseTypeString);\n        }\n\n        // Check if declSymbol can satisfy baselist privacy\n        private typeCheckBaseListPrivacy(bases: ASTList, declSymbol: Symbol, extendsList: bool) {\n            if (bases) {\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    if (!bases.members[i].type || bases.members[i].type == this.checker.anyType) {\n                        // This type is coming from external module so it ha';
var v27148 = v27149 + "s to be exported, or we're recovering from an\n                        // error condition\n                        continue;\n                    }\n\n                    this.checkSymbolPrivacy(bases.members[i].type.symbol, declSymbol, (typeName: string, isModuleName: bool) => this.baseListPrivacyErrorReporter(bases, i, declSymbol, extendsList, typeName, isModuleName));\n                }\n            }\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSymbolPrivacy(typeSymbol: TypeSymbol, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName: bool) => void ) {\n            var externalModuleSymbol: TypeSymbol = null;\n            var declSymbolPath: Symbol[] = null;\n\n            // Type is visible type, so this can be used by anyone.\n            if (typeSymbol.isExternallyVisible(this.checker)) {\n                // Symbol could be from external module, go ahead and find the external module\n                var typeSymbolPath = typeSymbol.pathToRoot();\n                declSymbolPath = declSymbol.pathToRoot();\n                var typeSymbolLength = typeSymbolPath.length;\n                var declSymbolPathLength = declSymbolPath.length;\n\n                if (typeSymbolLength > 0) {\n                    if (typeSymbolPath[typeSymbolLength - 1].getType().isModuleType() &&\n                        (<TypeSymbol>typeSymbolPath[typeSymbolLength - 1]).isDynamic &&\n                        typeSymbolPath[typeSymbolLength - 1] != declSymbolPath[declSymbolPathLength - 1]) {\n                        // Symbol from external module that was imported using one of the import statement\n                        externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 1];\n                    } else if (typeSymbolLength > 1) {\n                        // Is symbol from declared quoted module\n                        if (typeSymbolPath[typeSymbolLength - 2].getType().isModuleType() &&\n                            (<TypeSymbol>typeSymbolPath[typeSymbolLength - 2]).isDynamic &&\n                            (declSymbolPathLength == 1 || typeSymbolPath[typeSymbolLength - 2] != declSymbolPath[declSymbolPathLength - 2])) {\n                            // From quoted module name\n                            externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 2];\n                        }\n                    }\n                }\n\n                if (externalModuleSymbol == null) {\n                    return;\n                }\n            }\n\n            // Interface symbol doesn't reflect correct Exported state so use AST instead\n            var interfaceDecl: InterfaceDeclaration = declSymbol.getInterfaceDeclFromSymbol(this.checker);\n            if (interfaceDecl && !hasFlag(interfaceDecl.varFlags, VarFlags.Exported)) {\n                return;\n            }\n\n            var checkVisibilitySymbol = declSymbol;\n            // Var decl symbol doesnt reflect correct exported state so use AST instead\n            var varDecl = declSymbol.getVarDeclFromSymbol();\n            if (varDecl) {\n                if (hasFlag(varDecl.varFlags, VarFlags.Private)) {\n                    return;\n                } else if (hasFlag(varDecl.varFlags, VarFlags.Public)) {\n                    // Its a member from class so check visibility of its container\n                    checkVisibilitySymbol = declSymbol.container;\n                }\n            }\n\n            // If the container is visible from global scrope it is error\n            if (checkVisibilitySymbol.isExternallyVisible(this.checker)) {\n                var privateSymbolName = typeSymbol.name;\n\n                // If imported typeSymbol mark it as visible externally and verify that the symbol it imports is visible externally\n                if (externalModuleSymbol != null) {\n                    var prettyName = externalModuleSymbol.getPrettyNameOfDynamicModule(declSymbolPath);\n                    if (prettyName != null) {\n                        this.currentScript.AddExternallyVisibleImportedSymbol(prettyName.symbol, this.checker);\n                        return;\n                    } else {\n                        privateSymbolName = externalModuleSymbol.prettyName;\n                    }\n                }\n\n                // Visible declaration using non visible type.\n                errorCallback(privateSymbolName, typeSymbol.name != privateSymbolName);\n            }\n        }\n\n        // Checks if the privacy is satisfied by type that is used in the declaration inside container\n        private checkTypePrivacy(type: Type, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName : bool) =>void ) {\n            // Primitive types\n            if (!(type && type.primitiveTypeClass == Primitive.None)) {\n                return;\n            }\n\n\n            // If type is array, check element type\n            if (type.isArray()) {\n                return this.checkTypePrivacy(type.elementTyp";
var v27147 = v27148 + 'e, declSymbol, errorCallback);\n            }\n\n            // Going to be printing symbol name, verify if symbol can be emitted\n            if (type.symbol && type.symbol.name && type.symbol.name != "_anonymous" &&\n                        (((type.call == null) && (type.construct == null) && (type.index == null)) ||\n                        (type.members && (!type.isClass())))) {\n                return this.checkSymbolPrivacy(<TypeSymbol>type.symbol, declSymbol, errorCallback);\n            }\n\n            if (type.members) {\n                // Verify symbols for members\n                type.members.allMembers.map((key, s, unused) => {\n                    var sym = <Symbol>s;\n                    if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                        this.checkTypePrivacy(sym.getType(), declSymbol, errorCallback);\n                    }\n                }, null);\n            }\n\n            this.checkSignatureGroupPrivacy(type.call, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.construct, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.index, declSymbol, errorCallback);\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSignatureGroupPrivacy(sgroup: SignatureGroup, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName : bool) =>void ) {\n            if (sgroup) {\n                var len = sgroup.signatures.length;\n                for (var i = 0; i < sgroup.signatures.length; i++) {\n                    var signature = sgroup.signatures[i];\n                    if (len > 1 && signature == sgroup.definitionSignature) {\n                        // In case of overloads don\'t look up for overload defintion types.\n                        continue;\n                    }\n\n                    if (signature.returnType) {\n                        this.checkTypePrivacy(signature.returnType.type, declSymbol, errorCallback);\n                    }\n\n                    var paramLen = signature.parameters.length;\n                    for (var j = 0; j < paramLen; j++) {\n                        var param = signature.parameters[j];\n                        this.checkTypePrivacy(param.getType(), declSymbol, errorCallback);\n                    }\n                }\n            }\n        }\n\n        private functionArgumentPrivacyErrorReporter(funcDecl: FuncDecl, p: number, paramSymbol: Symbol, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.fncFlags, FncFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n\n            if (!isContainerInterface) {\n                if (funcDecl.isConstructor) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported class\'s constructor parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (isSetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " setter parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (!isGetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " function parameter \'" + paramSymbol.name + "\'" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s constructor parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s call parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (!funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s function parameter \'" + paramSymbol.name + "\'" + typestring);\n                }\n            }\n        }\n\n        private returnTypePrivacyError(astError: AST, funcDecl: FuncDecl, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcD';
var v27146 = v27147 + 'ecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.fncFlags, FncFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n            if (!isContainerInterface) {\n                if (isGetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " getter return type" + typestring);\n                } else if (!isSetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " function return type" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s constructor return type" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s call return type" + typestring);\n                } else if (funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s indexer return type" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s function return type" + typestring);\n                }\n            }\n        }\n\n        private functionReturnTypePrivacyErrorReporter(funcDecl: FuncDecl, signature: Signature, typeName: string, isModuleName: bool) {\n            var reportOnFuncDecl = false;\n\n            // Error coming from return annotation\n            if (funcDecl.returnTypeAnnotation != null &&\n                funcDecl.returnTypeAnnotation.type == signature.returnType.type) {\n                this.returnTypePrivacyError(funcDecl.returnTypeAnnotation, funcDecl, typeName, isModuleName);\n            }\n\n            // Check if return statement\'s type matches the one that we concluded\n            for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                if (funcDecl.returnStatementsWithExpressions[i].type == signature.returnType.type) {\n                    this.returnTypePrivacyError(funcDecl.returnStatementsWithExpressions[i], funcDecl, typeName, isModuleName);\n                } else {\n                    reportOnFuncDecl = true;\n                }\n            }\n\n            if (reportOnFuncDecl) {\n                // Show on function decl\n                this.returnTypePrivacyError(funcDecl, funcDecl, typeName, isModuleName);\n            }\n        }\n\n        public typeCheckFunction(funcDecl: FuncDecl): FuncDecl {\n            this.nestingLevel = 0;\n            var fnType = funcDecl.type;\n\n            var fgSym = fnType.symbol;\n            var signature = funcDecl.signature;\n\n            if (this.checker.typeStatusIsFinished(signature.typeCheckStatus)) {\n                return funcDecl;\n            }\n            else if (signature.typeCheckStatus == TypeCheckStatus.Started) {\n                if (!funcDecl.returnTypeAnnotation &&\n                    funcDecl.bod &&\n                       !funcDecl.isSignature() &&\n                       !(funcDecl.isConstructor) &&\n                       this.allReturnsAreVoid(funcDecl)) {\n\n                    signature.returnType.type = this.voidType;\n                    return funcDecl;\n                }\n                else {\n                    if (funcDecl.returnTypeAnnotation == null) {\n                        if (this.checker.styleSettings.implicitAny) {\n                            this.checker.errorReporter.styleError(funcDecl, "type implicitly set to \'any\'");\n                        }\n                        signature.returnType.type = this.anyType;\n                        fgSym.flags |= SymbolFlags.RecursivelyReferenced;\n                    }\n                    return funcDecl;\n                }\n            }\n\n            signature.typeCheckStatus = TypeCheckStatus.Started;\n            this.checker.addStartedPTO(signature);\n            var prevScope = this.scope;\n            var prevFnc = this.thisFnc;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevClassNode = this.thisClassNode;\n            this.enclosingFncIsMethod = funcDecl.isMethod() || funcDecl.isConstructor;\n            this.thisFnc = funcDecl;\n            var container = funcDecl.type.symbol;\n            var prevThisType = this.thisType;\n            var pr';
var v27145 = v27146 + "evLocationInfo = this.checker.locationInfo;\n            var funcTable: IHashTable = null;\n            var acceptedContextualType = false;\n            var targetParams: ParameterSymbol[] = null;\n            var targetReturnType: Type = null;\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var accessorType: Type = (isGetter || isSetter) && funcDecl.accessorSymbol ? funcDecl.accessorSymbol.getType() : null;\n            var prevModDecl = this.checker.currentModDecl;\n\n            if (funcDecl.isConstructor && !funcDecl.isOverload) {\n                if (fnType.instanceType == null) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Malformed function body (is this a class named the same as an existing interface?)\");\n                    return funcDecl;\n                }\n\n                this.scope = fnType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                funcTable = ssb.valueMembers.allMembers;\n            }\n            else if ((funcDecl.isSpecialFn() && !(funcDecl.fncFlags & FncFlags.Signature)) || funcDecl.isOverload) {\n                funcTable = funcDecl.symbols;\n                // if the function is static, we just want to use the \n                // current scope\n                if (!hasFlag(funcDecl.fncFlags, FncFlags.Static) && fnType.containedScope) {\n                    this.scope = fnType.containedScope;\n                }\n            }\n            else {\n                if (funcDecl.bod) {\n                    this.scope = fnType.containedScope;\n                }\n                var ssb = <SymbolScopeBuilder>this.scope;\n\n                // If it is null, it's an ambient declaration with no body, so it doesn't strictly matter\n                // if funcTable is not set\n                if (ssb && ssb.valueMembers) {\n                    funcTable = ssb.valueMembers.allMembers;\n                }\n            }\n\n            // If it's a class constructor, we need to check for the presence (or absense) of calls\n            // to the 'super' constructor\n            //\n            // A super constructor call must exist if:\n            //  - the class has a base class\n            //\n            // A super constructor call must be the first statement in the function body if:\n            //  - the constructor has parameter properties or\n            //  - the class body has initialized property decls\n            //\n            // A super constructor call may not exist if:\n            //  - The class has no base type, or inherits directly from 'Object'\n            if (funcDecl.isConstructor && funcDecl.bod && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n\n                var hasBaseType = hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseType);\n                var noSuperCallAllowed = !hasBaseType || hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n                var superCallMustBeFirst = hasFlag((<ClassDeclaration>funcDecl.classDecl).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor);\n\n                if (noSuperCallAllowed && this.classConstructorHasSuperCall(funcDecl)) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Calls to 'super' constructor are not allowed in classes that either inherit directly from 'Object' or have no base class\");\n                }\n                else if (hasBaseType) {\n                    if (superCallMustBeFirst) {\n                        if (!funcDecl.bod ||\n                            !funcDecl.bod.members.length ||\n                            !((funcDecl.bod.members[0].nodeType == NodeType.Call && (<CallExpression>funcDecl.bod.members[0]).target.nodeType == NodeType.Super) ||\n                            (hasFlag(funcDecl.bod.flags, ASTFlags.StrictMode) && funcDecl.bod.members.length > 1 &&\n                             funcDecl.bod.members[1].nodeType == NodeType.Call && (<CallExpression>funcDecl.bod.members[1]).target.nodeType == NodeType.Super))) {\n                            this.checker.errorReporter.simpleError(funcDecl, \"If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor\");\n                        }\n                    }\n                    else if (!this.classConstructorHasSuperCall(funcDecl)) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Constructors for derived classes must contain a call to the class's 'super' constructor\");\n                    }\n                }\n            }\n\n            // If we've typechecked this method \"out of order\" (not by walking the class, but through a method call somewhere else),\n            // we need to reset the current class node in question, so that vis";
var v27144 = v27145 + "ibility checks on class members don't fail\n            if (funcDecl.isMethod() && funcDecl.type.enclosingType) {\n\n                var enclosingClassNode: TypeDeclaration = null;\n\n                if (funcDecl.type.enclosingType.symbol.declAST.nodeType == NodeType.FuncDecl) {\n                    enclosingClassNode = <TypeDeclaration>(<FuncDecl>funcDecl.type.enclosingType.symbol.declAST).classDecl;\n                }\n                else if (funcDecl.type.enclosingType.symbol.declAST.nodeType == NodeType.ClassDeclaration) {\n                    enclosingClassNode = <TypeDeclaration>funcDecl.type.enclosingType.symbol.declAST;\n                }\n\n                if (enclosingClassNode) {\n                    this.thisClassNode = enclosingClassNode;\n                }\n            }\n\n            // if this function is contained in a module, we may be in the midst of a recursive typecheck operation\n            // should that be the case, we need to properly set the current module (for visibility tests)\n            if (fnType.enclosingType) {;\n                var enclosingSym = fnType.symbol.container;\n\n                // if the enclosing type is a class, grab the parent module\n                if (enclosingSym && enclosingSym.isType() && enclosingSym.getType().isClass()) {\n                    enclosingSym = enclosingSym.container;\n                }\n\n                if (enclosingSym && enclosingSym.declAST && enclosingSym.declAST.nodeType == NodeType.ModuleDeclaration) {\n                    this.checker.currentModDecl = <ModuleDeclaration>enclosingSym.declAST;\n                }\n            }\n\n            if (funcDecl.unitIndex > 0) {\n                if (this.checker.units &&\n                    (funcDecl.unitIndex < this.checker.units.length)) {\n                    this.checker.locationInfo = this.checker.units[funcDecl.unitIndex];\n                }\n                else {\n                    this.checker.locationInfo = unknownLocationInfo;\n                }\n            }\n\n            if (fnType.enclosingType) {\n                this.thisType = fnType.enclosingType;\n            }\n            else {\n                this.thisType = prevThisType;\n            }\n\n            var paramLen = signature.parameters.length;\n\n            if (!funcDecl.isConstructor && funcDecl.bod && !funcDecl.isSignature()) {\n                var tmpParamScope = this.scope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n\n                // Attempt to contextually type the function declaration             \n                if (!funcDecl.isMethod() && funcDecl.returnTypeAnnotation == null) {\n\n                    // the funcDecl may be a candidate for contextual typing                 \n                    // REVIEW: prevScope will only be null in the case of an upstream error\n                    if (prevScope && funcDecl.name && !funcDecl.name.isMissing()) {\n                        // Go ahead and check for an ambient symbol\n                        var considerSym: Symbol = prevScope.findAmbient(funcDecl.name.text, false, false);\n\n                        if (considerSym && considerSym.declAST && considerSym.declAST.type) {\n                            // REVIEW: Ambients beget signatures, and signatures don't need to be typechecked\n                            //typeCheck(considerSym.declAST);\n                            this.checker.setContextualType(considerSym.declAST.type, false);\n                        }\n                    }\n\n                    if (this.checker.hasTargetType()) {\n                        var candidateTypeContext = this.checker.getTargetTypeContext();\n                        var candidateType = candidateTypeContext.contextualType;\n\n                        if (this.checker.canContextuallyTypeFunction(candidateType, funcDecl, true)) {\n\n                            // Safe to do this, since the indices and fields are guaranteed to be\n                            // non-null and valid by the above call to canContextuallyTypeFunction\n                            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n                            candidateTypeContext.targetSig = candidateSigs.signatures[0];\n                            var candidateParams = candidateTypeContext.targetSig.parameters;\n\n                            // the target type has been accepted\n                            targetParams = candidateParams;\n                            targetReturnType = candidateTypeContext.targetSig.returnType.type;\n\n                            // Set \"this\" if applicable\n                            if (candidateTypeContext.targetSig.declAST) {\n                                if (candidateTypeContext.targetSig.declAST.isConstructor) {\n                                    //candidateTypeContext.targetThis=candidateType.instanceType;\n                                    //this.thisType = candidateType.instanceType;\n                                    funcDecl.isTargetTypedAsMethod = true;\n               ";
var v27143 = v27144 + "                 }\n                                else if (candidateTypeContext.targetSig.declAST.isMethod()) {\n                                    //candidateTypeContext.targetThis=candidateTypeContext.targetSig.declAST.type.enclosingType;\n                                    //this.thisType = candidateTypeContext.targetSig.declAST.type.enclosingType;\n                                    funcDecl.isTargetTypedAsMethod = true;\n                                }\n                            }\n                            fgSym.type = candidateTypeContext.contextualType;\n                            acceptedContextualType = true;\n                        }\n                        else if (candidateType && funcDecl.isAccessor()) {\n                            accessorType = candidateType;\n                            candidateTypeContext.targetAccessorType = accessorType;\n                        }\n                        else {\n                            this.checker.killCurrentContextualType();\n                        }\n                    }\n                }\n\n                // typecheck parameters\n                // Add parameter symbols to current scope for typechecking (in case default params reference each other)\n                // Order matters here - default parameters can reference previously defined parameters\n                var paramTable = ssb.valueMembers;\n                this.scope = new SymbolScopeBuilder(paramTable, null, null, null, prevScope, container);\n\n                for (var p = 0; p < paramLen; p++) {\n                    var symbol = signature.parameters[p];\n                    var ast = <ArgDecl>symbol.declAST\n\n                    if (this.checker.hasTargetType() && (targetParams && (this.checker.getTargetTypeContext().targetSig.hasVariableArgList || p < targetParams.length))) {\n                        var candidateTypeContext = this.checker.getTargetTypeContext();\n                        var hasVarArgList = candidateTypeContext.targetSig.hasVariableArgList;\n                        ast.type = hasVarArgList && p >= targetParams.length - 1 ? targetParams[targetParams.length - 1].getType().elementType : targetParams[p].getType();\n                        ast.sym.setType(ast.type);\n                        (<InferenceSymbol>ast.sym).typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                    }\n                    else {\n                        this.typeCheck(ast);\n                    }\n\n                    // infer the setter type, if necessary\n                    if (isSetter && accessorType) {\n                        ast = <ArgDecl>this.cast(ast, accessorType);\n                    }\n\n                    symbol.container = container;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(symbol.getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, symbol, typeName, isModuleName));\n                    paramTable.publicMembers.add(symbol.name, symbol);\n                }\n                this.scope = tmpParamScope;\n            }\n            else {\n                this.typeCheck(funcDecl.arguments)\n\n                // Because some terms were not yet type-checkable during binding, ensure that\n                // param symbols are updated with the proper argument types\n                for (var p = 0; p < paramLen; p++) {\n                    signature.parameters[p].parameter.typeLink.type = funcDecl.arguments.members[p].type;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(signature.parameters[p].getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, signature.parameters[p], typeName, isModuleName));\n                    if ((<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym) {\n                        (<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym.setType(funcDecl.arguments.members[p].type);\n                    }\n                }\n\n                if ((funcDecl.fncFlags & FncFlags.IndexerMember)) {\n                    if (!paramLen || paramLen > 1) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Index signatures may take one and only one parameter\");\n                    }\n                    else if (funcDecl.arguments.members[0].type == this.checker.numberType) {\n                        fnType.index.flags |= SignatureFlags.IsNumberIndexer;\n                    }\n                    else if (funcDecl.arguments.members[0].type == this.checker.stringType) {\n                        fnType.index.flags |= SignatureFlags.IsStringIndexer;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(funcDecl.arguments.members[0], \"Index signatures may only take 'string' or 'number' as their parameter\");\n                    }\n\n                }\n            }\n\n       ";
var v27142 = v27143 + "     // typecheck body\n            if (funcDecl.bod && (!funcDecl.isSignature())) {\n                if (!(funcDecl.isConstructor)) {\n                    this.addFormals(container, signature, funcTable);\n                }\n                else {\n                    this.addConstructorLocalArgs(funcDecl.type.symbol, funcDecl.arguments, funcTable, hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod));\n\n                    if (this.thisClassNode && this.thisClassNode.extendsList) {\n                        var tmpScope = this.scope;\n                        var funcMembers = new ScopedMembers(<DualStringHashTable>funcTable);\n                        this.scope = new FilteredSymbolScopeBuilder(funcMembers, prevScope, funcDecl.type.symbol,\n                                                             function (sym) {\n                                                                 return sym.kind() == SymbolKind.Parameter;\n                                                             });\n                        this.typeCheckBaseCalls(this.thisClassNode.extendsList);\n                        this.scope = tmpScope;\n                    }\n                }\n\n                // Because this function may have been typechecked in a different visiblity context as its caller (e.g., this\n                // function is being typechecked as a result of a call, before the declaration could be typechecked), we need\n                // to set the enclosing module\n                var prevMod = this.checker.currentModDecl;\n                if (funcDecl.type &&\n                    funcDecl.type.symbol &&\n                    !funcDecl.isMethod() &&\n                    funcDecl.type.symbol.declModule) {\n                    this.checker.currentModDecl = funcDecl.type.symbol.declModule;\n                }\n\n\n                // unset the contextual type before typechecking the function body\n                if (acceptedContextualType) {\n                    this.checker.setContextualType(null, this.checker.inProvisionalTypecheckMode());\n                }\n\n                this.typeCheck(funcDecl.bod);\n\n                if (acceptedContextualType) {\n                    this.checker.unsetContextualType();\n                }\n\n                this.checker.currentModDecl = prevMod;\n\n                if (this.checker.checkControlFlow) {\n                    var cfg = funcDecl.buildControlFlow();\n                    if (this.checker.printControlFlowGraph) {\n                        cfg.print(this.checker.errorReporter.outfile);\n                    }\n                    cfg.reportUnreachable(this.checker.errorReporter);\n                    if (this.checker.checkControlFlowUseDef) {\n                        cfg.useDef(this.checker.errorReporter, funcDecl.type.symbol);\n                    }\n                }\n\n                if (funcDecl.isConstructor) {\n                    var fns: ASTList = funcDecl.scopes;\n                    var fnsLen = fns.members.length;\n                    var freeVars: Symbol[];\n                    var sym: Symbol;\n                    var j = 0;\n                    for (; j < fnsLen; j++) {\n                        var fn = <FuncDecl>fns.members[j];\n                        if (!fn.isSignature()) {\n                            if (hasFlag(fn.fncFlags, FncFlags.Method) && (!hasFlag(fn.fncFlags, FncFlags.Static))) {\n                                this.checkPromoteFreeVars(fn, funcDecl.type.symbol);\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.scope = prevScope;\n            this.thisFnc = prevFnc;\n            this.thisClassNode = prevClassNode;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.thisType = prevThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.checker.currentModDecl = prevModDecl;\n\n            signature.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n\n            // set the return type\n            if (funcDecl.returnTypeAnnotation) {\n                this.checkForVoidConstructor(funcDecl.returnTypeAnnotation.type, funcDecl.returnTypeAnnotation);\n\n                if (signature.returnType.type == null) {\n                    this.checker.resolveTypeLink(this.scope, signature.returnType, false);\n                }\n            }\n            else if (targetReturnType) {\n                signature.returnType.type = targetReturnType;\n            }\n\n            // If no return type annotation has been applied to the function declaration\n            // unify the return types from the given return statements\n\n            if (!(fgSym.flags & SymbolFlags.RecursivelyReferenced) && funcDecl.returnStatementsWithExpressions.length > 0) {\n                var collection: ITypeCollection = {\n                    getLength: () => { return funcDecl.returnStatementsWithExpressions.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { funcDecl.returnStatementsWithExpressions[index].t";
var v27141 = v27142 + 'ype = type; },\n                    getTypeAtIndex: (index: number) => { return funcDecl.returnStatementsWithExpressions[index].type; }\n                }\n\n                var bestCommonReturnType = funcDecl.returnStatementsWithExpressions[0].type;\n                bestCommonReturnType = this.checker.findBestCommonType(bestCommonReturnType, null, collection, true);\n\n                if (bestCommonReturnType) {\n                    signature.returnType.type = this.checker.widenType(bestCommonReturnType);\n                }\n                else {\n                    for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnStatementsWithExpressions[i], "Incompatible return type");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n            }\n\n            var onlyHasThrow = false;\n\n            if (signature.returnType.type == null) {\n                if (hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression)) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(funcDecl, "type implicitly set to \'any\'");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n                else {\n                    signature.returnType.type = this.voidType;\n                }\n            }\n            else if (signature.returnType.type == this.nullType || signature.returnType.type == this.checker.undefinedType) {\n                signature.returnType.type = this.anyType;\n            }\n            else if ((signature.returnType.type != this.voidType && signature.returnType.type != this.checker.undefinedType && signature.returnType.type != this.anyType)) {\n                // the signature declared a non-void type, but there\'s no return statement\n                if (!funcDecl.isSignature() &&\n                    !funcDecl.isConstructor &&\n                    !hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression) &&\n                    !hasFlag(funcDecl.fncFlags, FncFlags.IsFatArrowFunction)) {\n                        // relax the restriction if the method only contains a single "throw" statement\n                    onlyHasThrow = (funcDecl.bod.members.length > 0) && (funcDecl.bod.members[0].nodeType == NodeType.Throw)\n\n                    if (!onlyHasThrow) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnTypeAnnotation || funcDecl,\n                             "Function declared a non-void return type, but has no return expression");\n                    }\n                }\n\n                // Type check for return type Privacy\n                this.checkTypePrivacy(signature.returnType.type, container, (typeName: string, isModuleName: bool) => this.functionReturnTypePrivacyErrorReporter(funcDecl, signature, typeName, isModuleName));\n            }\n\n            // if the function declaration is a getter or a setter, set the type of the associated getter/setter symbol\n            if (funcDecl.accessorSymbol) {\n                var accessorType = funcDecl.accessorSymbol.getType();\n                if (!onlyHasThrow && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) && !hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression)) {\n                    this.checker.errorReporter.simpleError(funcDecl, "Getters must return a value");\n                }\n                if (accessorType) {\n                    if ((hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) && accessorType != signature.returnType.type) ||\n                        (funcDecl.arguments.members.length > 0 && accessorType != funcDecl.arguments.members[0].type)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Getter and setter types do not agree");\n                    }\n                }\n                else {\n                    if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                        funcDecl.accessorSymbol.setType(signature.returnType.type);\n                    }\n                    else {\n                        if (funcDecl.arguments.members.length != 1) {\n                            this.checker.errorReporter.simpleError(funcDecl, "Setters may have one and only one argument");\n                        }\n                        else {\n                            funcDecl.accessorSymbol.setType(funcDecl.arguments.members[0].type);\n                        }\n                    }\n                }\n            }\n\n            this.typeCheckOverloadSignatures(fnType, funcDecl);\n            return funcDecl;\n        }\n\n        public typeCheckBases(type: Type) {\n            var seenInterface = false;\n            var bases = type.extendsList;\n            var baseLinks = type.extendsTypeLinks;\n            if (bases) {\n                var len = bases.length;\n\n                if (len > 0) {\n                    type.typeFlags |= TypeFlags.Has';
var v27140 = v27141 + 'BaseType;\n                }\n\n                for (var i = 0; i < len; i++) {\n                    if (bases[i] == this.checker.anyType) {\n                        // This may be the type from imported module and hence the type was not really resolved to the correct one.\n                        // Try resolving it again\n                        baseLinks[i].type = null;\n                        // There are no contextual errors when trying to verify the base class\n                        var oldErrors = this.checker.errorReporter.getCapturedErrors();\n                        CompilerDiagnostics.assert(oldErrors.length == 0, "There shouldnt be any contextual errors when typechecking base type names");\n                        this.checker.errorReporter.pushToErrorSink = true;\n                        bases[i] = this.checker.resolveBaseTypeLink(baseLinks[i], type.containedScope);\n                        this.checker.errorReporter.pushToErrorSink = false;\n                        this.checker.errorReporter.freeCapturedErrors();\n                    }\n\n                    var base = bases[i];\n                    var baseRef = baseLinks[i].ast;\n\n                    // make sure it\'s the global \'Object\' and not some alias\n                    var baseTypeOfObject = base.symbol && base.symbol.name == "Object" && base.symbol.container == this.checker.gloMod;\n\n                    if (baseTypeOfObject) {\n                        type.typeFlags |= TypeFlags.HasBaseTypeOfObject;\n                    }\n\n                    if (base.isClassInstance()) {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef, "Interface base type must be interface");\n                        }\n                        else {\n                            if (seenInterface) {\n                                this.checker.errorReporter.simpleError(baseRef, "Class may not follow interface as base type");\n                            }\n                        }\n                    }\n                    else if (base.isModuleType()) {\n                        this.checker.errorReporter.simpleError(baseRef, "Types may not be derived from module types");\n                    }\n                    else if (base.members) {\n                        if (!seenInterface) {\n                            seenInterface = true;\n                        }\n                    }\n                    else {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "Interface base type must be interface");\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "Base type must be interface or class");\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        public checkMembersImplementInterfaces(implementingType: Type) {\n            var instanceType = implementingType.getInstanceType();\n            if (instanceType.implementsList) {\n                var len = instanceType.implementsList.length;\n\n                for (var i = 0; i < len; i++) {\n                    var interfaceType = instanceType.implementsList[i];\n                    var comparisonInfo = new TypeComparisonInfo();\n                    if (!this.checker.sourceIsSubtypeOfTarget(instanceType, interfaceType, comparisonInfo)) {\n                        var emsg = "Class \'" + instanceType.getTypeName() +\n                              "\' declares interface \'" + interfaceType.getTypeName() +\n                              "\' but does not implement it";\n                        if (!comparisonInfo.message) {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg);\n                        }\n                        else {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg + ": " + comparisonInfo.message);\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheckBaseCalls(bases: ASTList) {\n            if (bases == null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType == NodeType.Call) {\n                    this.typeCheckNew(baseExpr);\n                }\n            }\n        }\n\n        public assertUniqueNamesInBaseTypes(names: IHashTable, type: Type, classDecl: InterfaceDeclaration, checkUnique: bool): void {\n            if (type) {\n                if (type.members) {\n                    type.members.publicMembers.map((key, s, c) => {\n  ';
var v27139 = v27140 + '                      var sym = <Symbol>s;\n                        var dup = names.lookup(sym.name);\n                        if (dup) {\n                            if (checkUnique) {\n                                this.checker.errorReporter.simpleError(classDecl,\n                                                                  "duplicate member name in bases for " + classDecl.name.actualText + ": " + type.symbol.name + " and " + dup.container.name + " both contain member with name " + sym.name);\n                            }\n                        }\n                        else {\n                            names.add(sym.name, sym);\n                        }\n                    }, null);\n                }\n                if (type.extendsList) {\n                    var len = type.extendsList.length;\n                    for (var i = 0; i < len; i++) {\n                        if (!(type.extendsList[i].symbol.flags & SymbolFlags.RecursivelyReferenced)) {\n                            this.assertUniqueNamesInBaseTypes(names, type.extendsList[i], classDecl, checkUnique);\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkBaseTypeMemberInheritance(derivedType: Type, derivedTypeDecl: AST): void {\n            var instanceType = derivedType.getInstanceType();\n            if (instanceType.extendsList == null) {\n                return;\n            }\n\n            var len = instanceType.extendsList.length;\n            if (len > 0) {\n                var names = new StringHashTable();\n                if (instanceType.isClassInstance()) {\n                    for (var i = 0; i < len; i++) {\n                        this.assertUniqueNamesInBaseTypes(names, instanceType.extendsList[i], <InterfaceDeclaration>derivedTypeDecl, i > 0);\n                    }\n                }\n\n                if (instanceType.members) {\n                    instanceType.members.publicMembers.map((key, s, c) => {\n                        var sym = <Symbol>s;\n                        for (var j = 0; j < len; j++) {\n                            var base = instanceType.extendsList[j];\n                            if (base.memberScope == null) {\n                                this.checker.errorReporter.simpleError(derivedTypeDecl, "Base type \'" + base.symbol.name + "\' lacks an implementation.")\n                            }\n                            else {\n                                var bSym = base.memberScope.find(sym.name, false, false);\n                                if (bSym) {\n                                    var aType = sym.getType();\n                                    var bType = bSym.getType();\n                                    if (!(this.checker.sourceIsSubtypeOfTarget(aType, bType))) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          "Type of overridden member \'" + sym.name + "\' is not subtype of original member defined by type \'" + bSym.container.name + "\'");\n                                    }\n                                    else if ((sym.kind() == SymbolKind.Type) &&\n                                             (bSym.kind() == SymbolKind.Field)) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          "Cannot override field \'" + sym.name + "\' with method");\n                                    }\n                                }\n                            }\n                        }\n                    }, null);\n                }\n            }\n        }\n\n        public typeCheckClass(classDecl: ClassDeclaration): ClassDeclaration {\n            var typeSymbol = <TypeSymbol>classDecl.type.symbol;\n\n            if (typeSymbol.typeCheckStatus == TypeCheckStatus.Finished) {\n                return classDecl;\n            }\n            else if (typeSymbol.typeCheckStatus == TypeCheckStatus.Started) {\n                // REVIEW: report this recursion\n                //checker.errorReporter.recursionRequiresTypeAnnotation(classDecl);\n                return classDecl;\n            }\n            else {\n                typeSymbol.typeCheckStatus = TypeCheckStatus.Started;\n                this.checker.addStartedPTO(typeSymbol);\n            }\n\n            var prevScope = this.scope;\n            var svClassNode = this.thisClassNode;\n            this.thisClassNode = classDecl;\n            var classType = classDecl.type;\n            this.typeCheckBases(classType.instanceType);\n\n            this.typeCheckBaseListPrivacy(classDecl.extendsList, typeSymbol, true);\n            this.typeCheckBaseListPrivacy(classDecl.implementsList, typeSymbol, false);\n\n            var prevThisType = this.thisType;\n            this.thisType = classType.instanceType;\n            this.scope = classType.instanceType.containedScope;\n\n            // Add the constructor locals, if necessary\n  ';
var v27138 = v27139 + '          if (classDecl.constructorDecl) {\n                this.scope = classType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                var funcTable = ssb.valueMembers.allMembers;\n\n                this.addConstructorLocalArgs(classDecl.constructorDecl.type.symbol, classDecl.constructorDecl.arguments, funcTable, true);\n            }\n\n            this.typeCheck(classDecl.members);\n            typeSymbol.typeCheckStatus = TypeCheckStatus.Finished;\n            this.checkBaseTypeMemberInheritance(classType, classDecl);\n            this.checkMembersImplementInterfaces(classType);\n\n            this.typeCheckOverloadSignatures(classType, classDecl);\n            this.typeCheckOverloadSignatures(classType.instanceType, classDecl);\n\n            // if the class has no declared constructor, adapt its base class\'s signature group, if necessary\n            if (!classDecl.constructorDecl) {\n                if (classDecl.extendsList &&\n                    classDecl.extendsList.members.length &&\n                    classDecl.extendsList.members[0].type &&\n                    classDecl.extendsList.members[0].type.symbol.type.isClass()) {\n                    cloneParentConstructGroupForChildType(classDecl.type, classDecl.extendsList.members[0].type.symbol.type);\n                }\n            }\n\n            this.thisType = prevThisType;\n            this.thisClassNode = svClassNode;\n            this.scope = prevScope;\n            return classDecl;\n        }\n\n        public typeCheckOverloadSignatures(type: Type, ast: AST) {\n            if (type.call) {\n                type.call.typeCheck(this.checker, ast, type.construct != null);\n            }\n            if (type.construct) {\n                type.construct.typeCheck(this.checker, ast, false);\n            }\n            if (type.index) {\n                type.index.typeCheck(this.checker, ast, false);\n            }\n        }\n\n        public typeCheckInterface(interfaceDecl: InterfaceDeclaration): InterfaceDeclaration {\n            // overloads will be typechecked inline by the members\n            //this.typeCheckOverloadSignatures(interfaceDecl.type, interfaceDecl);\n            this.typeCheckBases(interfaceDecl.type);\n            this.typeCheckBaseListPrivacy(interfaceDecl.extendsList, interfaceDecl.type.symbol, true);\n            this.typeCheck(interfaceDecl.members);\n            this.checkBaseTypeMemberInheritance(interfaceDecl.type, interfaceDecl);\n\n            // propagate base type signatures\n            if (interfaceDecl.extendsList) {\n                for (var i = 0; i < interfaceDecl.extendsList.members.length; i++) {\n                    if (interfaceDecl.extendsList.members[i].type.call) {\n                        if (interfaceDecl.type.call) {\n                            interfaceDecl.type.call.signatures = interfaceDecl.type.call.signatures.concat(interfaceDecl.extendsList.members[i].type.call.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.call = interfaceDecl.extendsList.members[i].type.call;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.construct) {\n                        if (interfaceDecl.type.construct) {\n                            interfaceDecl.type.construct.signatures = interfaceDecl.type.construct.signatures.concat(interfaceDecl.extendsList.members[i].type.construct.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.construct = interfaceDecl.extendsList.members[i].type.construct;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.index) {\n                        if (interfaceDecl.type.index) {\n                            interfaceDecl.type.index.signatures = interfaceDecl.type.index.signatures.concat(interfaceDecl.extendsList.members[i].type.index.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.index = interfaceDecl.extendsList.members[i].type.index;\n                        }\n                    }\n                }\n            }\n\n            return interfaceDecl;\n        }\n\n        public typeCheckImportDecl(importDecl: ImportDeclaration) {\n            var mod: ModuleType = <ModuleType>importDecl.alias.type;\n            var sym: TypeSymbol = null;\n            var prevInImportTC = this.inImportTypeCheck;\n            this.inImportTypeCheck = true;\n\n            this.typeCheck(importDecl.alias);\n            mod = <ModuleType>importDecl.alias.type;\n\n            if (mod == null) {\n                this.checker.errorReporter.simpleError(importDecl.alias, "Could not resolve module alias \'" + importDecl.id.actualText + "\'");\n                mod = <ModuleType>this.checker.anyType;\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n            }\n\n            importDecl.id.type = mod;';
var v27137 = v27138 + '\n            sym = mod.symbol;\n\n            if (!mod.isModuleType()) {\n                this.checker.errorReporter.simpleError(importDecl.alias, "A module cannot be aliased to a non-module type");\n            }\n            else {\n                sym.type = mod;\n                \n                // Add the imported module to the AMD dependency list\n                if (this.checker.typeFlow.currentScript && \n                    this.checker.typeFlow.currentScript.topLevelMod && \n                    this.checker.typeFlow.currentScript.topLevelMod.mod) \n                {\n                    this.checker.typeFlow.currentScript.topLevelMod.mod.importedModules.push(importDecl);\n                }\n\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n\n                if (mod.symbol && mod.symbol.declAST) {\n                    (<ModuleDeclaration>mod.symbol.declAST).modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;\n                }\n\n                //importDecl.id.sym = sym;\n                // REVIEW: Uncomment when you can toggle module codegen targets from the language service\n                //else if (typeFlow.checker.currentModDecl == null && \n                //            hasFlag((<ModuleDecl>sym.declAST).modFlags,ModuleFlags.IsDynamic) &&\n                //            moduleGenTarget == ModuleGenTarget.Asynchronous) \n                //{\n                //    typeFlow.checker.errorReporter.simpleError(alias, "In AMD codegen mode, dynamic modules may not be referenced from global scope.  (Wrap the file in a module declaration.)");\n                //}\n            }\n            this.inImportTypeCheck = prevInImportTC;\n            return importDecl;\n        }\n\n        public typeCheckModule(moduleDecl: ModuleDeclaration): ModuleDeclaration {\n\n            // In some really nasty cases of error recovery, we may not have a type\n            if (!moduleDecl.mod) {\n                return moduleDecl;\n            }\n\n            if (this.currentScript) {\n                this.currentScript.requiresGlobal = true;\n            }\n            var mod = moduleDecl.mod;\n            var sym: TypeSymbol = null;\n\n            var prevScope = this.scope;\n            var prevThisType = this.thisType;\n            var prevCurrentModDecl = this.checker.currentModDecl;\n            this.checker.currentModDecl = moduleDecl;\n\n            this.thisType = null;\n            this.scope = mod.containedScope;\n            this.typeCheck(moduleDecl.members);\n            sym = mod.symbol;\n\n            this.checker.currentModDecl = prevCurrentModDecl;\n            this.thisType = prevThisType;\n            this.scope = prevScope;\n\n            moduleDecl.type = mod;\n\n            if (sym) {\n                sym.typeCheckStatus = TypeCheckStatus.Finished;\n            }\n            return moduleDecl;\n        }\n\n        public typeCheckFor(forStmt: ForStatement): ForStatement {\n            forStmt.init = this.typeCheck(forStmt.init);\n            this.nestingLevel++;\n            forStmt.cond = this.typeCheck(forStmt.cond);\n            this.typeCheckCondExpr(forStmt.cond);\n            forStmt.incr = this.typeCheck(forStmt.incr);\n            this.nestingLevel--;\n            forStmt.body = this.typeCheck(forStmt.body);\n            this.typeCheckCompoundStmtBlock(forStmt.body, "for statement");\n            forStmt.type = this.voidType;\n            return forStmt;\n        }\n\n        public typeCheckWith(withStmt: WithStatement): WithStatement {\n            if (this.checker.errorsOnWith) {\n                this.checker.errorReporter.simpleError(withStmt.expr, "All symbols within a \'with\' block will be typed as \'any\'");\n            }\n            withStmt.expr = this.typeCheck(withStmt.expr);\n            this.checker.inWith = true;\n            withStmt.body = this.typeCheck(withStmt.body);\n            this.typeCheckCompoundStmtBlock(withStmt.body, "with statement");\n            this.checker.inWith = false;\n            return withStmt;\n        }\n\n        public typeCheckForIn(forInStmt: ForInStatement): ForInStatement {\n            forInStmt.obj = this.typeCheck(forInStmt.obj);\n            forInStmt.lval = this.cast(this.typeCheck(forInStmt.lval), this.checker.stringType);\n            if (forInStmt.lval.nodeType == NodeType.VarDecl) {\n\n                var varDecl = <VarDecl>forInStmt.lval;\n                if (varDecl.typeExpr) {\n                    this.checker.errorReporter.simpleError(varDecl, "Variable declarations for for/in expressions may not contain a type annotation");\n                }\n\n                if (varDecl.sym) {\n                    varDecl.sym.setType(this.checker.stringType);\n                }\n            }\n            forInStmt.body = this.typeCheck(forInStmt.body);\n            this.typeCheckCompoundStmtBlock(forInStmt.body, "for in statement");\n            return forInStmt;\n        }\n\n        public typeCheckWhile(whileStmt: WhileStatement): WhileStatement {\n            whileStmt.cond = this.typeCheck(whileStmt.cond);\n            this.typeCheckCondE';
var v27136 = v27137 + 'xpr(whileStmt.cond);\n            whileStmt.body = this.typeCheck(whileStmt.body);\n            this.typeCheckCompoundStmtBlock(whileStmt.body, "while statement");\n            whileStmt.type = this.voidType;\n            return whileStmt;\n        }\n\n        public typeCheckDoWhile(doWhileStmt: DoWhileStatement): DoWhileStatement {\n            doWhileStmt.cond = this.typeCheck(doWhileStmt.cond);\n            this.typeCheckCondExpr(doWhileStmt.cond);\n            doWhileStmt.body = this.typeCheck(doWhileStmt.body);\n            this.typeCheckCompoundStmtBlock(doWhileStmt.body, "do while statement");\n            doWhileStmt.type = this.voidType;\n            return doWhileStmt;\n        }\n\n        public typeCheckCondExpr(cond: AST) {\n            if (this.checker.styleSettings.assignmentInCond) {\n                if ((cond !== null) &&\n                    (cond.nodeType >= NodeType.Asg) &&\n                    (cond.nodeType <= NodeType.LastAsg)) {\n                    this.checker.errorReporter.simpleError(cond, "top-level assignment statement in conditional expression");\n                }\n            }\n        }\n\n        public typeCheckCompoundStmtBlock(stmts: AST, stmtType: string) {\n            if (this.checker.styleSettings.blockInCompoundStmt && stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    this.checker.errorReporter.styleError(stmts, stmtType + " requires a block");\n                }\n            }\n        }\n        public typeCheckIf(ifStmt: IfStatement): IfStatement {\n            ifStmt.cond = this.typeCheck(ifStmt.cond);\n            this.typeCheckCondExpr(ifStmt.cond);\n            ifStmt.thenBod = this.typeCheck(ifStmt.thenBod);\n            ifStmt.elseBod = this.typeCheck(ifStmt.elseBod);\n            this.typeCheckCompoundStmtBlock(ifStmt.thenBod, "if statement");\n            this.typeCheckCompoundStmtBlock(ifStmt.elseBod, "if statement");\n            ifStmt.type = this.voidType;\n            return ifStmt;\n        }\n\n        public typeFromAccessorFuncDecl(funcDecl: FuncDecl) {\n            if (!funcDecl.isAccessor()) {\n                return null;\n            }\n\n            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                return funcDecl.type.call.signatures[0].returnType.type;\n            }\n            else {\n                return funcDecl.type.call.signatures[0].parameters[0].getType();\n            }\n        }\n\n        public typeCheckObjectLit(objectLit: UnaryExpression): void {\n\n            var resultType = new Type();\n            resultType.symbol = new TypeSymbol(this.checker.anon, objectLit.minChar,\n                                             objectLit.limChar - objectLit.minChar,\n                                             this.checker.locationInfo.unitIndex,\n                                             resultType);\n\n            resultType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            resultType.memberScope = new SymbolTableScope(resultType.members, null, null, null, null);\n\n            var aggScope = new SymbolAggregateScope(resultType.symbol);\n            aggScope.addParentScope(resultType.memberScope);\n            aggScope.addParentScope(this.scope);\n            resultType.containedScope = aggScope;\n            var memberDecls = <ASTList>objectLit.operand;\n            var prevThisType = this.thisType;\n            var acceptTargetType = false;\n            var targetType: Type = null;\n\n            if (this.checker.hasTargetType()) {\n                targetType = this.checker.getTargetTypeContext().contextualType;\n\n                if (targetType && targetType.symbol && !this.checker.typeStatusIsFinished(targetType.symbol.typeCheckStatus)) {\n                    if (targetType.symbol.declAST) {\n                        this.typeCheck(targetType.symbol.declAST);\n                    }\n                }\n                acceptTargetType = true;\n            }\n\n            if (memberDecls) {\n                for (var i = 0, len = memberDecls.members.length; i < len; i++) {\n\n                    var binex = <BinaryExpression>memberDecls.members[i];\n\n                    var id = binex.operand1;\n                    var text: string;\n                    var targetMember: Symbol = null;\n                    var fieldSymbol: FieldSymbol = null;\n\n                    if (id.nodeType == NodeType.Name) {\n                        text = (<Identifier>id).text;\n                    }\n                    else if (id.nodeType == NodeType.QString) {\n                        // TODO: set text to unescaped string\n                        var idText = (<StringLiteral>id).text;\n                        text = idText.substring(1, idText.length - 1);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(objectLit,\n                                                          "malformed object literal");\n                        resultType = this.anyType;\n       ';
var v27135 = v27136 + "                 break;\n                    }\n\n                    if (acceptTargetType && targetType.memberScope) {\n                        targetMember = targetType.memberScope.find(text, false, false);\n                    }\n\n                    // before typechecking an accessor function member, we need to initialize its accessor symbol\n                    if (binex.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>binex.operand2).isAccessor()) {\n\n                        var funcDecl = <FuncDecl>binex.operand2;\n                        var accessorSym: FieldSymbol = resultType.members.publicMembers.lookup(text);\n\n                        accessorSym = this.checker.createAccessorSymbol(funcDecl, accessorSym, resultType, true, false, resultType.memberScope, null);\n                        funcDecl.accessorSymbol = accessorSym;\n                        fieldSymbol = accessorSym;\n                        if (id.nodeType == NodeType.Name) {\n                            (<Identifier>id).sym = accessorSym;\n                        }\n                    }\n\n                    this.checker.typeCheckWithContextualType(acceptTargetType && targetMember ? targetMember.getType() : null, false, acceptTargetType, binex.operand2);\n\n                    if (acceptTargetType && targetMember) {\n                        // Note that we accept 'any' in place of a valid subtype                     \n                        if ((binex.operand2.type == this.anyType || this.checker.sourceIsAssignableToTarget(binex.operand2.type, targetMember.getType())) ||\n                            (binex.operand2.nodeType == NodeType.FuncDecl &&\n                            (<FuncDecl>binex.operand2).isAccessor() &&\n                                this.typeFromAccessorFuncDecl(<FuncDecl>binex.operand2) == targetMember.getType())) {\n                                    // set the field type to the proper contextual type\n                                    // this is especially important in the 'any' case, so that\n                                    // fields typed to 'any' aren't accepted for contextual typing,\n                                    // but never properly set to the target type\n                            binex.operand1.type = targetMember.getType();\n                        }\n                    }\n                    else {\n                        // here we sub in 'any' for 'undefined' to account for field initialization to\n                        // 'undefined'  \n                        binex.operand2.type = binex.operand2.type == this.checker.undefinedType ? this.anyType : binex.operand2.type;\n                    }\n\n                    // the field symbol hasn't been set by a getter or setter\n                    if (fieldSymbol == null) {\n                        var memberType = binex.operand2.type;\n                        var field = new ValueLocation();\n                        fieldSymbol =\n                            new FieldSymbol(text, id.minChar,\n                                            this.checker.locationInfo.unitIndex,\n                                            true, field);\n                        fieldSymbol.flags |= SymbolFlags.Property;\n                        field.symbol = fieldSymbol;\n                        fieldSymbol.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        field.typeLink = new TypeLink();\n                        field.typeLink.type = memberType;\n                        resultType.members.publicMembers.add(text, fieldSymbol);\n                    }\n                    fieldSymbol.isObjectLitField = true;\n                }\n            }\n\n            this.thisType = prevThisType;\n            objectLit.type = resultType;\n            if (targetType) {\n                objectLit.targetType = targetType;\n            }\n        }\n\n        public typeCheckArrayLit(arrayLit: UnaryExpression): void {\n            var elements = <ASTList>arrayLit.operand;\n            var elementType = this.anyType;\n            var targetElementType: Type = null;\n            var comparisonInfo = new TypeComparisonInfo();\n            comparisonInfo.onlyCaptureFirstError = true;\n\n            // if the target type is an array type, extract the element type\n            if (this.checker.hasTargetType()) {\n                var targetType = this.checker.getTargetTypeContext().contextualType;\n                if (targetType.elementType) {\n                    targetElementType = targetType.elementType;\n                }\n            }\n\n            if (elements) {\n\n                var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;\n\n                this.inArrayElementTypeCheck = true;\n                this.checker.typeCheckWithContextualType(targetElementType, this.checker.inProvisionalTypecheckMode(), targetElementType != null, elements);\n                this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;\n\n                elementType = elements.members[0].type;\n\n                var collection: ITypeCo";
var v27134 = v27135 + 'llection = {\n                    getLength: () => { return elements.members.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { elements.members[index].type = type; },\n                    getTypeAtIndex: (index: number) => { return elements.members[index].type; }\n                }\n\n                elementType = this.checker.findBestCommonType(elementType, targetElementType, collection, false, comparisonInfo);\n\n                // if the array type is the undefined type, we should widen it to any\n                // if it\'s of the null type, only widen it if it\'s not in a nested array element, so as not to \n                // short-circuit any checks for the best common type\n                if (elementType == this.checker.undefinedType || (!prevInArrayElemTypeCheck && elementType == this.nullType)) {\n                    elementType = this.anyType;\n                }\n            }\n            if (!elementType) {\n                var emsg = "Incompatible types in array literal expression";\n                if (!comparisonInfo.message) {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg);\n                }\n                else {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg + ": " + comparisonInfo.message);\n                }\n                elementType = this.anyType;\n            }\n            else if (targetElementType) {\n                // for the case of zero-length \'any\' arrays, we still want to set the contextual type, if\n                // need be\n                if (this.checker.sourceIsAssignableToTarget(elementType, targetElementType)) {\n                    elementType = targetElementType;\n                }\n            }\n\n            arrayLit.type = this.checker.makeArrayType(elementType);\n\n        }\n\n        public checkForVoidConstructor(type: Type, ast: AST) {\n            if (type &&\n                type.construct &&\n                type.construct.signatures.length > 0) {\n\n                for (var i = 0; i < type.construct.signatures.length; i++) {\n                    if (type.construct.signatures[i].returnType.type == this.checker.voidType) {\n                        this.checker.errorReporter.simpleError(ast, "Constructors may not have a return type of \'void\'");\n                        break;\n                    }\n                }\n            }\n        }\n\n        // REVIEW: the code below could set the signature type of the function to the current return\n        // type, which would have a benefit of reducing the risk of a recursive typecheck scenario, but is\n        // is technically wrong - mergeOrdered will only work properly if the best common supertype\n        // comes before any sibling types.  This would mean that if a function, "color()", returned\n        // three types (in order) - "Red", "Blue", and "IColor", an "Incompatible return type" error \n        // would be triggered.  However, if "color()" returned (in order) "Red", "IColor" and "Blue"\n        // no error would be triggered, and the return type of the function would be "IColor"\n        public typeCheckReturn(returnStmt: ReturnStatement): ReturnStatement {\n\n            if (this.thisFnc) {\n                var targetType: Type = null;\n\n                // determine the target type\n                if (this.checker.hasTargetType()) {\n                    var tcContext = this.checker.getTargetTypeContext();\n                    var accessorType = tcContext.targetAccessorType;\n\n                    if (accessorType) {\n                        targetType = accessorType;\n                    }\n                    else {\n                        var targetSig = this.checker.getTargetTypeContext().targetSig;\n                        if (targetSig && targetSig.returnType.type != this.voidType) {\n                            targetType = targetSig.returnType.type;\n                        }\n                    }\n                }\n\n                if (returnStmt.returnExpression) {\n                    this.thisFnc.fncFlags |= FncFlags.HasReturnExpression;\n\n                    if (targetType == null && this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type && this.thisFnc.returnTypeAnnotation.type != this.voidType) {\n                        targetType = this.thisFnc.returnTypeAnnotation.type;\n                    }\n\n                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), targetType != null, returnStmt.returnExpression);\n\n                    var expectedReturnType: Type =\n                        (this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ?\n                            this.thisFnc.returnTypeAnnotation.type :\n                            targetType;\n                    if (expectedReturnType) {\n                        if (expectedReturnType == this.voidType && returnStmt.returnExpression.type != this.voidType) {\n                            this.checker.errorReporter.simp';
var v27133 = v27134 + 'leError(returnStmt,\n                                                              "Return with value expression in void function");\n\n                            // even though we\'ve raised an error, use the more specific type\n                            returnStmt.type = returnStmt.returnExpression.type;\n                        }\n                        else {\n                            returnStmt.returnExpression = this.cast(returnStmt.returnExpression, expectedReturnType);\n                            returnStmt.type = expectedReturnType;\n                        }\n                    }\n                    else {\n                        if (targetType) {\n                            if (returnStmt.returnExpression.type != this.voidType) {\n                                returnStmt.returnExpression = this.cast(returnStmt.returnExpression, targetType);\n                            }\n                            else {\n                                returnStmt.returnExpression.type = targetType;\n                            }\n                        }\n                        returnStmt.type = returnStmt.returnExpression.type;\n                    }\n                    this.thisFnc.returnStatementsWithExpressions[this.thisFnc.returnStatementsWithExpressions.length] = returnStmt;\n                }\n                else {\n                    returnStmt.type = targetType == null ? this.checker.voidType : targetType; //((this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ? this.thisFnc.returnTypeAnnotation.type : this.checker.voidType) : targetType;\n                }\n            }\n\n            return returnStmt;\n        }\n\n        public typeCheckInstOf(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type == this.checker.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand1.type, this.objectInterfaceType)) &&\n                    (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.functionInterfaceType)))) {\n                this.checker.errorReporter.simpleError(ast, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type");\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckCommaOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public typeCheckLogOr(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                binex.type = this.checker.anyType;\n            }\n            else if (leftType == this.checker.booleanType) {\n                if (rightType == this.checker.booleanType) {\n                    binex.type = this.checker.booleanType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType == this.checker.numberType) {\n                if (rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType == this.checker.stringType) {\n                if (rightType == this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    binex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    binex.type = leftType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            return binex;\n        }\n\n        public typeCheckLogAnd(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public tryAddCandidates(signature: Signature, actuals: Type[]';
var v27132 = v27133 + ", exactCandidates: Signature[], conversionCandidates: Signature[], comparisonInfo: TypeComparisonInfo): void {\n            var lowerBound = signature.nonOptionalParameterCount; // required parameters\n            var upperBound = signature.parameters.length; // required and optional parameters\n            var formalLen = lowerBound;\n            var acceptable = false;\n\n            if ((actuals.length >= lowerBound) && (signature.hasVariableArgList || actuals.length <= upperBound)) {\n                formalLen = (signature.hasVariableArgList ? signature.parameters.length : actuals.length);\n                acceptable = true;\n            }\n\n            var repeatType: Type = null;\n\n            if (acceptable || signature.hasVariableArgList) {\n                // assumed structure here is checked when signature is formed\n                if (signature.hasVariableArgList) {\n                    formalLen -= 1;\n                    repeatType = (<ParameterSymbol>signature.parameters[formalLen]).parameter.typeLink.type;\n                    repeatType = repeatType.elementType;\n                    acceptable = actuals.length >= formalLen;\n                }\n                var len = actuals.length;\n\n                var exact = acceptable;\n                var convert = acceptable;\n                for (var i = 0; i < len; i++) {\n                    var typeA: Type;\n                    if (i < formalLen) {\n                        typeA =\n                            (<ParameterSymbol>signature.parameters[i]).parameter.typeLink.type;\n                    }\n                    else {\n                        typeA = repeatType;\n                    }\n\n                    var typeB = actuals[i];\n                    if (!typeA || !typeB || !(this.checker.typesAreIdentical(typeA, typeB))) {\n                        exact = false;\n                    }\n                    // is the argument assignable to the parameter?\n                    if (!this.checker.sourceIsAssignableToTarget(typeB, typeA, comparisonInfo)) {\n                        convert = false;\n                    }\n                    if (!(exact || convert)) {\n                        break;\n                    }\n                }\n                if (exact) {\n                    exactCandidates[exactCandidates.length] = signature;\n                }\n                else if (convert && (exactCandidates.length == 0)) {\n                    conversionCandidates[conversionCandidates.length] = signature;\n                }\n\n            }\n        }\n\n        public resolveOverload(application: AST, group: SignatureGroup): Signature {\n            var rd = this.resolutionDataCache.getResolutionData();\n            var actuals = rd.actuals;\n            var exactCandidates = rd.exactCandidates;\n            var conversionCandidates = rd.conversionCandidates;\n            var candidate: Signature = null;\n            var hasOverloads = group.signatures.length > 1;\n            var comparisonInfo = new TypeComparisonInfo();\n            var args: ASTList = null;\n            var target: AST = null;\n\n            if (application.nodeType == NodeType.Call || application.nodeType == NodeType.New) {\n                var callEx = <CallExpression>application;\n                args = callEx.arguments;\n                target = callEx.target;\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n                    for (var i = 0; i < len; i++) {\n                        actuals[i] = callEx.arguments.members[i].type;\n                    }\n                }\n            }\n            else if (application.nodeType == NodeType.Index) {\n                var binExp = <BinaryExpression>application;\n                target = binExp.operand1;\n                args = new ASTList();\n                args.members[0] = binExp.operand2;\n                actuals[0] = binExp.operand2.type;\n            }\n\n            for (var j = 0, groupLen = group.signatures.length; j < groupLen; j++) {\n                var signature = group.signatures[j];\n                if (hasOverloads && signature == group.definitionSignature && !this.checker.canCallDefinitionSignature) {\n                    continue;\n                }\n                if (!signature.returnType.type && signature.declAST &&\n                    (signature.typeCheckStatus != TypeCheckStatus.Finished)) {\n                    this.typeCheckFunction(signature.declAST);\n                }\n                this.tryAddCandidates(signature, actuals, exactCandidates, conversionCandidates, comparisonInfo);\n            }\n            if (exactCandidates.length == 0) {\n\n                var applicableCandidates = this.checker.getApplicableSignatures(conversionCandidates, args, comparisonInfo);\n                if (applicableCandidates.length > 0) {\n                    var candidateInfo = this.checker.findMostApplicableSignature(applicableCandidates, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorR";
var v27131 = v27132 + 'eporter.simpleError(target, "Ambiguous call expression - could not choose overload");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    var emsg = "Supplied parameters do not match any signature of call target";\n                    if (comparisonInfo.message) {\n                        this.checker.errorReporter.simpleError(target, emsg + ":\\n\\t" + comparisonInfo.message);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(target, emsg);\n                    }\n                }\n            }\n            else {\n                if (exactCandidates.length > 1) {\n                    var applicableSigs: ApplicableSignature[] = [];\n                    for (var i = 0; i < exactCandidates.length; i++) {\n                        applicableSigs[i] = { signature: exactCandidates[i], hadProvisionalErrors: false };\n                    }\n                    var candidateInfo = this.checker.findMostApplicableSignature(applicableSigs, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorReporter.simpleError(target, "Ambiguous call expression - could not choose overload");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    candidate = exactCandidates[0];\n                }\n            }\n\n            this.resolutionDataCache.returnResolutionData(rd);\n            return candidate;\n        }\n\n        public typeCheckNew(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n\n            callEx.target = this.typeCheck(callEx.target);\n            var target = callEx.target;\n            if (target.type.construct || target.type.call) {\n                this.preTypeCheckCallArgs(callEx.arguments);\n            }\n            else {\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n\n            if (target.type == this.anyType) {\n                callEx.type = this.anyType;\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n            else {\n                if (target.type.construct) {\n                    var signature = this.resolveOverload(callEx, target.type.construct);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if (signature.returnType.type == this.voidType) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else if (target.type.call) {\n                    var signature = this.resolveOverload(callEx, target.type.call);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if ((signature.returnType.type == this.voidType) || (signature.returnType.type == this.anyType)) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(callEx.target,\n                           "new expression only valid on constructors");\n                    }\n                }\n                else if (target.type.elementType) {\n                    callEx.type = target.type;\n                }\n                else {\n                    this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    callEx.type = this.anyType;\n                }\n            }\n\n            this.postTypeCheckCallArgs(callEx);\n\n            return callEx;\n        }\n\n        // Typecheck all args that cannot be affected by contextual typing of overloads\n        public preTypeCheckCallArgs(args: ASTList) {\n\n            if (!args) {\n                return;\n            }\n\n            for (var i = 0; i < args.members.length; i++) {\n                switch (args.members[i].nodeType) {\n                    case NodeType.FuncDecl:\n                    case NodeType.ObjectLit:\n                    case NodeType.ArrayLit:\n                        continue;\n                    default:\n                        this.typeCheck(args.members[i]);\n                        break;\n                }\n            }\n        }\n\n        public postTypeCheckCallArgs(callEx: CallExpression) {\n\n            var acceptedTargetType = false;\n            var i = 0;\n\n            if (callEx.target &&\n                callEx.target.type &&\n                callEx.signature &&\n                callEx.arguments) {\n                var sig = callEx.signature;\n\n                if (sig && callEx.arguments.members.length >= si';
var v27130 = v27131 + 'g.nonOptionalParameterCount) {\n                    acceptedTargetType = true;\n                    var targetType: Type = null;\n                    var nonVarArgFormalParamLength = sig.hasVariableArgList ? sig.parameters.length - 1 : sig.parameters.length;\n                    var nonVarArgActualParamLength = callEx.arguments.members.length < nonVarArgFormalParamLength ? callEx.arguments.members.length : nonVarArgFormalParamLength\n\n                    for (i = 0; i < nonVarArgActualParamLength; i++) {\n                        targetType = sig.parameters[i].getType();\n                        switch (callEx.arguments.members[i].nodeType) {\n                            case NodeType.FuncDecl:\n                            case NodeType.ObjectLit:\n                            case NodeType.ArrayLit:\n                                this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), !sig.parameters[i].declAST.isParenthesized, callEx.arguments.members[i]);\n                                break;\n                        }\n                    }\n\n                    if (sig.hasVariableArgList) {\n                        var varArgParamIndex = sig.nonOptionalParameterCount - 1;\n                        targetType = sig.parameters[varArgParamIndex].getType();\n                        if (targetType) {\n                            targetType = targetType.elementType;\n                        }\n                        var isParenthesized = !sig.parameters[varArgParamIndex].declAST.isParenthesized;\n                        for (i = nonVarArgActualParamLength; i < callEx.arguments.members.length; i++) {\n                            switch (callEx.arguments.members[i].nodeType) {\n                                case NodeType.FuncDecl:\n                                case NodeType.ObjectLit:\n                                case NodeType.ArrayLit:\n                                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), isParenthesized, callEx.arguments.members[i]);\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!acceptedTargetType && callEx.arguments) {\n                this.checker.killCurrentContextualType();\n\n                for (i = 0; i < callEx.arguments.members.length; i++) {\n                    switch (callEx.arguments.members[i].nodeType) {\n                        case NodeType.FuncDecl:\n                        case NodeType.ObjectLit:\n                        case NodeType.ArrayLit:\n                            this.typeCheck(callEx.arguments.members[i]);\n                            break;\n                        default:\n                            continue;\n                    }\n                }\n            }\n        }\n\n        public typeCheckCall(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n            if (this.checker.styleSettings.newMustBeUsed && (ast.nodeType == NodeType.New)) {\n                if (hasFlag(ast.flags, ASTFlags.IsStatement)) {\n                    this.checker.errorReporter.styleError(ast, "use of new expression as a statement");\n                }\n            }\n            else if ((!this.checker.styleSettings.evalOK) && (ast.nodeType == NodeType.Call)) {\n                if ((callEx.target.nodeType == NodeType.Name) && ((<Identifier>callEx.target).text == "eval")) {\n                    this.checker.errorReporter.styleError(callEx, "eval not permitted");\n                }\n            }\n\n            if (callEx.target.nodeType == NodeType.FuncDecl) {\n                (<FuncDecl>callEx.target).isInlineCallLiteral = true;\n            }\n\n            var prevInSuperCall = this.inSuperCall;\n\n            if (callEx.target.nodeType == NodeType.Super) {\n                this.inSuperCall = true;\n            }\n\n            callEx.target = this.typeCheck(callEx.target);\n            this.preTypeCheckCallArgs(callEx.arguments);\n\n            var target = callEx.target;\n\n            if ((target.type == null) || (target.type == this.anyType) || (this.functionInterfaceType && target.type == this.functionInterfaceType)) {\n                callEx.type = this.anyType;\n            }\n            else {\n                var fnType = target.type;\n                if (fnType.call) {\n                    var signature = this.resolveOverload(callEx, fnType.call);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else {\n                    // track calls to class base class\n                    if (callEx.target.nodeType == NodeType.Super &&\n                        this.thisFnc &&\n                        this.thisFnc.isConstructor &&\n        ';
var v27129 = v27130 + '                hasFlag(this.thisFnc.fncFlags, FncFlags.ClassMethod)) {\n\n                            // Need to use the class type for the construct signature, not the instance type\n                        var signature = fnType.symbol.type.construct ? this.resolveOverload(callEx, fnType.symbol.type.construct) : null;\n\n                        if (signature == null) {\n                            callEx.type = this.anyType;\n                        }\n                        else {\n                            callEx.flags |= ASTFlags.ClassBaseConstructorCall;\n                            callEx.type = signature.returnType.type;\n                            callEx.signature = signature;\n                        }\n                    }\n                    else {\n                        callEx.type = this.anyType;\n                        this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    }\n                }\n            }\n            this.postTypeCheckCallArgs(callEx);\n\n            this.inSuperCall = prevInSuperCall;\n\n            return callEx;\n        }\n\n        public assignScopes(ast: AST) {\n            var script = <Script>ast;\n            this.checker.locationInfo = script.locationInfo;\n            var globalChain = new ScopeChain(this.checker.gloMod, null, this.globalScope);\n            var context = new AssignScopeContext(globalChain, this, [this.checker.currentModDecl]);\n            getAstWalkerFactory().walk(ast, preAssignScopes, postAssignScopes, null, context);\n        }\n\n        public findMemberScope(enclosingScopeContext: EnclosingScopeContext, matchFlag: ASTFlags) {\n            var enclosingScope = enclosingScopeContext.getScope();\n            var pos = enclosingScopeContext.pos - enclosingScopeContext.getScriptFragmentPosition();\n            var scriptFragment = enclosingScopeContext.getScriptFragment();\n\n            var memContext = new MemberScopeContext(this, pos, matchFlag);\n            memContext.scope = enclosingScope;\n            if (scriptFragment.nodeType == NodeType.Name) {\n                return scriptFragment.type.getMemberScope(this);\n            }\n            else {\n                getAstWalkerFactory().walk(scriptFragment, preFindMemberScope, null, null, memContext);\n                if (memContext.ast && enclosingScopeContext.enclosingClassDecl && memContext.ast.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {\n                    enclosingScopeContext.publicsOnly = false;\n                }\n                if (memContext.type) {\n                    return memContext.type.getMemberScope(this);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n\n        public findMemberScopeAt(enclosingScopeContext: EnclosingScopeContext) {\n            return this.findMemberScope(enclosingScopeContext, ASTFlags.DotLHS);\n        }\n\n        public findMemberScopeAtFullAst(enclosingScopeContext: EnclosingScopeContext) {\n            var matchFlag = ASTFlags.DotLHS;\n            var pos = enclosingScopeContext.pos;\n            var astResult: AST = null;\n\n            var preFindMemberScopeFullAst = function (ast: AST, parent: AST, walker: IAstWalker) {\n                if (isValidAstNode(ast)) {\n                    // Note: pos == ast.limChar       in case of incomplete code (e.g. "foo.")\n                    // Note: (pos - 1) == ast.limChar in case of complete code (e.g. "foo.bar")\n                    if (hasFlag(ast.flags, matchFlag) && (pos == ast.limChar || (pos - 1) == ast.limChar)) {\n                        astResult = ast;\n                        walker.options.stopWalk();\n                    }\n\n                    // Stop traversal if range does not contain position\n                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);\n                }\n                return ast;\n            }\n\n            var preFindMemberScopeFullAstFuzy = function (ast: AST, parent: AST, walker: IAstWalker) {\n                if (isValidAstNode(ast)) {\n                    if (hasFlag(ast.flags, matchFlag) && ((ast.minChar < pos) && (pos <= ast.limChar))) {\n                        astResult = ast;\n                    }\n\n                    // Stop traversal if range does not contain position\n                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);\n                }\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAst);\n\n            if (astResult == null) {\n                // Perform a more "fusy" match. This is because the limChar of AST nodes is sometimes\n                // not what we expect, for example:\n                //   foo./*comment*/;\n                // In this case, limChar points to ";" instead of "." (because of the trailing comment).\n                getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAstFuzy)';
var v27128 = v27129 + ";\n            }\n\n            if (astResult &&\n                enclosingScopeContext.enclosingClassDecl &&\n                astResult.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {\n                enclosingScopeContext.publicsOnly = false;\n            }\n\n            if (astResult && astResult.type) {\n                return astResult.type.getMemberScope(this);\n            }\n            else {\n                return null;\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path='diagnostics.ts' />\n///<reference path='flags.ts' />\n///<reference path='nodeTypes.ts' />\n///<reference path='hashTable.ts' />\n///<reference path='ast.ts' />\n///<reference path='astWalker.ts' />\n///<reference path='astWalkerCallback.ts' />\n///<reference path='astPath.ts' />\n///<reference path='astLogger.ts' />\n///<reference path='binder.ts' />\n///<reference path='base64.ts' />\n///<reference path='sourceMapping.ts' />\n///<reference path='emitter.ts' />\n///<reference path='errorReporter.ts' />\n///<reference path='parser.ts' />\n///<reference path='printContext.ts' />\n///<reference path='scanner.ts' />\n///<reference path='scopeAssignment.ts' />\n///<reference path='scopeWalk.ts' />\n///<reference path='signatures.ts' />\n///<reference path='symbols.ts' />\n///<reference path='symbolScope.ts' />\n///<reference path='tokens.ts' />\n///<reference path='typeChecker.ts' />\n///<reference path='typeCollection.ts' />\n///<reference path='typeFlow.ts' />\n///<reference path='types.ts' />\n///<reference path='pathUtils.ts' />\n///<reference path='referenceResolution.ts' />\n///<reference path='precompile.ts' />\n///<reference path='incrementalParser.ts' />\n///<reference path='declarationEmitter.ts' />\n\nmodule TypeScript {\n\n    export enum UpdateUnitKind {\n        Unknown,\n        NoEdits,\n        EditsInsideSingleScope,\n    }\n\n    export class ScriptEditRange {\n        constructor (public minChar: number,\n                     public limChar: number,\n                     public delta: number) { }\n\n        static unknown(): ScriptEditRange {\n            return new ScriptEditRange(-1, -1, -1);\n        }\n\n        public isUnknown() {\n            return this.minChar === -1 && this.limChar === -1 && this.delta === -1;\n        }\n\n        public containsPosition(pos: number) {\n            return (this.minChar <= pos && pos < this.limChar)\n                || (this.minChar <= pos && pos < this.limChar + this.delta);\n        }\n\n        public toString(): string {\n            return \"editRange(minChar=\" + this.minChar + \", limChar=\" + this.limChar + \", delta=\" + this.delta + \")\";\n        }\n    }\n\n    export class UpdateUnitResult {\n\n        constructor (public kind: UpdateUnitKind, public unitIndex: number, public script1: Script, public script2: Script) { }\n\n        public scope1: AST = null;\n        public scope2: AST = null;\n        public editRange: ScriptEditRange = null;\n        public parseErrors: ErrorEntry[] = [];\n\n        static noEdits(unitIndex: number) {\n            return new UpdateUnitResult(UpdateUnitKind.NoEdits, unitIndex, null, null);\n        }\n\n        static unknownEdits(script1: Script, script2: Script, parseErrors: ErrorEntry[]) {\n            var result = new UpdateUnitResult(UpdateUnitKind.Unknown, script1.locationInfo.unitIndex, script1, script2);\n            result.parseErrors = parseErrors;\n            return result;\n        }\n\n        static singleScopeEdits(script1: Script, script2: Script, scope1: AST, scope2: AST, editRange: ScriptEditRange, parseErrors: ErrorEntry[]) {\n            var result = new UpdateUnitResult(UpdateUnitKind.EditsInsideSingleScope, script1.locationInfo.unitIndex, script1, script2);\n            result.scope1 = scope1;\n            result.scope2 = scope2;\n            result.editRange = editRange;\n            result.parseErrors = parseErrors;\n            return result;\n        }\n    }\n\n    export class ErrorEntry {\n        constructor (public unitIndex: number,\n                    public minChar: number,\n                    public limChar: number,\n                    public message: string) { }\n    }\n\n    export var defaultSettings = new CompilationSettings();\n\n    export interface EmitterIOHost {\n        // function that can even create a folder structure if needed\n        createFile(path: string, useUTF8?: bool): ITextWriter;\n\n        // function to check if file exists on the disk\n        fileExi";
var v27127 = v27128 + 'sts(path: string): bool;\n\n        // Function to check if the directory exists on the disk\n        directoryExists(path: string): bool;\n\n        // Resolves the path\n        resolvePath(path: string): string;\n    }\n\n    export class TypeScriptCompiler {\n        public parser = new Parser();\n        public typeChecker: TypeChecker;\n        public typeFlow: TypeFlow = null;\n        public scripts = new ASTList();\n        public units: LocationInfo[] = new LocationInfo[];\n        public errorReporter: ErrorReporter;\n\n        public persistentTypeState: PersistentGlobalTypeState;\n\n\n        public emitSettings: EmitOptions;\n\n        constructor (public errorOutput: ITextWriter, public logger: ILogger = new NullLogger(), public settings: CompilationSettings = defaultSettings) {\n            this.errorReporter = new ErrorReporter(this.errorOutput);\n            this.persistentTypeState = new PersistentGlobalTypeState(this.errorReporter);\n            this.errorReporter.parser = this.parser;\n            this.initTypeChecker(this.errorOutput);\n\n            this.parser.style_requireSemi = this.settings.styleSettings.requireSemi;\n            this.parser.style_funcInLoop = this.settings.styleSettings.funcInLoop;\n            this.parser.inferPropertiesFromThisAssignment = this.settings.inferPropertiesFromThisAssignment;\n            this.emitSettings = new EmitOptions(this.settings);\n            codeGenTarget = settings.codeGenTarget;\n        }\n\n        public timeFunction(funcDescription: string, func: () => any): any {\n            return TypeScript.timeFunction(this.logger, funcDescription, func);\n        }\n\n        public initTypeChecker(errorOutput: ITextWriter) {\n            // The initial "refresh" initializes the persistent type state\n            this.persistentTypeState.refreshPersistentState();\n            this.typeChecker = new TypeChecker(this.persistentTypeState);\n            this.typeChecker.errorReporter = this.errorReporter;\n\n            // REVIEW: These properties should be moved out of the typeCheck object\n            // ideally, CF should be a separate pass, independent of control flow\n            this.typeChecker.checkControlFlow = this.settings.controlFlow;\n            this.typeChecker.checkControlFlowUseDef = this.settings.controlFlowUseDef;\n            this.typeChecker.printControlFlowGraph = this.settings.printControlFlow;\n\n            this.typeChecker.errorsOnWith = this.settings.errorOnWith;\n            this.typeChecker.styleSettings = this.settings.styleSettings;\n            this.typeChecker.canCallDefinitionSignature = this.settings.canCallDefinitionSignature;\n\n            this.errorReporter.checker = this.typeChecker;\n            this.setErrorOutput(this.errorOutput);\n        }\n\n        public setErrorOutput(outerr) {\n            this.errorOutput = outerr;\n            this.errorReporter.setErrOut(outerr);\n            this.parser.outfile = outerr;\n        }\n\n        public emitCommentsToOutput() {\n            this.emitSettings = new EmitOptions(this.settings);\n        }\n\n        public setErrorCallback(fn: (minChar: number, charLen: number, message: string,\n            unitIndex: number) =>void ) {\n            this.parser.errorCallback = fn;\n        }\n\n        public updateUnit(prog: string, filename: string, setRecovery: bool) {\n            return this.updateSourceUnit(new StringSourceText(prog), filename, setRecovery);\n        }\n\n        public updateSourceUnit(sourceText: ISourceText, filename: string, setRecovery: bool): bool {\n            return this.timeFunction("updateSourceUnit(" + filename + ")", () => {\n                var updateResult = this.partialUpdateUnit(sourceText, filename, setRecovery);\n                return this.applyUpdateResult(updateResult);\n            });\n        }\n\n        // Apply changes to compiler state.\n        // Return "false" if the change is empty and nothing was updated.\n        public applyUpdateResult(updateResult: UpdateUnitResult): bool {\n            switch (updateResult.kind) {\n                case UpdateUnitKind.NoEdits:\n                    return false;\n\n                case UpdateUnitKind.Unknown:\n                    this.scripts.members[updateResult.unitIndex] = updateResult.script2;\n                    this.units[updateResult.unitIndex] = updateResult.script2.locationInfo;\n                    for (var i = 0, len = updateResult.parseErrors.length; i < len; i++) {\n                        var e = updateResult.parseErrors[i];\n                        if (this.parser.errorCallback) {\n                            this.parser.errorCallback(e.minChar, e.limChar - e.minChar, e.message, e.unitIndex);\n                        }\n                    }\n                    return true;\n\n                case UpdateUnitKind.EditsInsideSingleScope:\n                    new IncrementalParser(this.logger).mergeTrees(updateResult);\n                    return true;\n            }\n        }\n\n        public partialUpdateUnit(sourceText: ISourceText, filename: string, setRecovery:';
var v27126 = v27127 + ' bool): UpdateUnitResult {\n            return this.timeFunction("partialUpdateUnit(" + filename + ")", () => {\n                for (var i = 0, len = this.units.length; i < len; i++) {\n                    if (this.units[i].filename == filename) {\n                        if ((<Script>this.scripts.members[i]).isResident) {\n                            return UpdateUnitResult.noEdits(i);\n                        }\n\n                        if (setRecovery) {\n                            this.parser.setErrorRecovery(null);\n                        }\n\n                        var updateResult: UpdateUnitResult;\n\n                        // Capture parsing errors so that they are part of "updateResult"\n                        var parseErrors: ErrorEntry[] = [];\n                        var errorCapture = (minChar: number, charLen: number, message: string, unitIndex: number): void => {\n                            parseErrors.push(new ErrorEntry(unitIndex, minChar, minChar + charLen, message));\n                        };\n                        var svErrorCallback = this.parser.errorCallback;\n                        if (svErrorCallback)\n                            this.parser.errorCallback = errorCapture;\n\n                        var oldScript = <Script>this.scripts.members[i];\n                        var newScript = this.parser.parse(sourceText, filename, i);\n\n                        if (svErrorCallback)\n                            this.parser.errorCallback = svErrorCallback;\n\n                        updateResult = UpdateUnitResult.unknownEdits(oldScript, newScript, parseErrors);\n\n                        return updateResult;\n                    }\n                }\n                throw new Error("Unknown file \\"" + filename + "\\"");\n            });\n        }\n\n        public addUnit(prog: string, filename: string, keepResident? = false, referencedFiles?: IFileReference[] = []): Script {\n            return this.addSourceUnit(new StringSourceText(prog), filename, keepResident, referencedFiles);\n        }\n\n        public addSourceUnit(sourceText: ISourceText, filename: string, keepResident:bool, referencedFiles?: IFileReference[] = []): Script {\n            return this.timeFunction("addSourceUnit(" + filename + ", " + keepResident + ")", () => {\n                var script: Script = this.parser.parse(sourceText, filename, this.units.length, AllowedElements.Global);\n                script.referencedFiles = referencedFiles;\n                script.isResident = keepResident;\n                this.persistentTypeState.setCollectionMode(keepResident ? TypeCheckCollectionMode.Resident : TypeCheckCollectionMode.Transient);\n                var index = this.units.length;\n                this.units[index] = script.locationInfo;\n                this.typeChecker.collectTypes(script);\n                this.scripts.append(script);\n                return script\n            });\n        }\n\n        public parseUnit(prog: string, filename: string) {\n            return this.parseSourceUnit(new StringSourceText(prog), filename);\n        }\n\n        public parseSourceUnit(sourceText: ISourceText, filename: string) {\n            this.parser.setErrorRecovery(this.errorOutput);\n            var script: Script = this.parser.parse(sourceText, filename, 0);\n\n            var index = this.units.length;\n            this.units[index] = script.locationInfo;\n            this.typeChecker.collectTypes(script);\n            this.scripts.append(script);\n        }\n\n        public typeCheck() {\n            return this.timeFunction("typeCheck()", () => {\n                var binder = new Binder(this.typeChecker);\n                this.typeChecker.units = this.units;\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.globals);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.ambientGlobals);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.globalTypes);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.ambientGlobalTypes);\n                this.typeFlow = new TypeFlow(this.logger, this.typeChecker.globalScope, this.parser, this.typeChecker);\n                var i = 0;\n                var script: Script = null;\n                var len = this.scripts.members.length;\n\n\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Resident);\n                // first, typecheck resident "lib" scripts, if necessary\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (!script.isResident || script.hasBeenTypeChecked) { continue; }\n\n                    this.typeFlow.assignScopes(script);\n                    this.typeFlow.initLibs();\n                }\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (!script.isResident || script.hasBeenTypeChecked) { continue; }\n\n                    this.typeFlow.typeCheck(script);';
var v27125 = v27126 + '\n                    script.hasBeenTypeChecked = true;\n                }\n\n                // next typecheck scripts that may change\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\n                len = this.scripts.members.length;\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (script.isResident) { continue; }\n                    this.typeFlow.assignScopes(script);\n                    this.typeFlow.initLibs();\n                }\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (script.isResident) { continue; }\n                    this.typeFlow.typeCheck(script);\n                }\n\n                return null;\n            });\n        }\n\n        public cleanASTTypesForReTypeCheck(ast: AST) {\n            function cleanASTType(ast: AST, parent: AST): AST {\n                ast.type = null;\n                if (ast.nodeType == NodeType.VarDecl) {\n                    var vardecl = <VarDecl>ast;\n                    vardecl.sym = null;\n                }\n                else if (ast.nodeType == NodeType.ArgDecl) {\n                    var argdecl = <ArgDecl>ast;\n                    argdecl.sym = null;\n                }\n                else if (ast.nodeType == NodeType.Name) {\n                    var name = <Identifier>ast;\n                    name.sym = null;\n                }\n                else if (ast.nodeType == NodeType.FuncDecl) {\n                    var funcdecl = <FuncDecl>ast;\n                    funcdecl.signature = null;\n                    funcdecl.freeVariables = new Symbol[]\n                    funcdecl.symbols = null;\n                    funcdecl.accessorSymbol = null;\n                    funcdecl.scopeType = null;\n                }\n                else if (ast.nodeType == NodeType.ModuleDeclaration) {\n                    var modDecl = <ModuleDeclaration>ast;\n                    modDecl.mod = null;\n                }\n                else if (ast.nodeType == NodeType.With) {\n                    (<WithStatement>ast).withSym = null;\n                }\n                else if (ast.nodeType == NodeType.Catch) {\n                    (<Catch>ast).containedScope = null;\n                }\n                return ast;\n            }\n            TypeScript.getAstWalkerFactory().walk(ast, cleanASTType);\n        }\n\n        public cleanTypesForReTypeCheck() {\n            return this.timeFunction("cleanTypesForReTypeCheck()", () => {\n                for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                    var script = this.scripts.members[i];\n                    if ((<Script>script).isResident) {\n                        continue;\n                    }\n                    this.cleanASTTypesForReTypeCheck(script);\n                    this.typeChecker.collectTypes(script);\n                }\n\n                return null;\n            });\n        }\n\n        // Return "true" if the incremental typecheck was successful\n        // Return "false" if incremental typecheck failed, requiring a full typecheck\n        public attemptIncrementalTypeCheck(updateResult: TypeScript.UpdateUnitResult): bool {\n            return this.timeFunction("attemptIncrementalTypeCheck()", () => {\n                // updateResult.kind == editsInsideFunction\n                // updateResult.scope1 == old function\n                // updateResult.scope2 == new function\n                //REVIEW: What about typecheck errors? How do we replace the old ones with the new ones?\n                return false;\n            });\n        }\n\n        public reTypeCheck() {\n            return this.timeFunction("reTypeCheck()", () => {\n                CompilerDiagnostics.analysisPass++;\n                this.initTypeChecker(this.errorOutput);\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\n                this.cleanTypesForReTypeCheck();\n                return this.typeCheck();\n            });\n        }\n\n        private isDynamicModuleCompilation() {\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (!script.isDeclareFile && script.topLevelMod != null) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private updateCommonDirectoryPath() {\n            var commonComponents: string[] = [];\n            var commonComponentsLength = -1;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (script.emitRequired(this.emitSettings)) {\n                    var fileName = script.locationInfo.filename;\n                    var fileComponents = filePathComponents(fileName);\n                    if (commonComponentsLength == -1) {\n            ';
var v27124 = v27125 + '            // First time at finding common path\n                        // So common path = directory of file\n                        commonComponents = fileComponents;\n                        commonComponentsLength = commonComponents.length;\n                    } else {\n                        var updatedPath = false;\n                        for (var j = 0; j < commonComponentsLength && j < fileComponents.length; j++) {\n                            if (commonComponents[j] != fileComponents[j]) {\n                                // The new components = 0 ... j -1\n                                commonComponentsLength = j;\n                                updatedPath = true;\n\n                                if (j == 0) {\n                                    // Its error to not have common path\n                                    this.errorReporter.emitterError(null, "Cannot find the common subdirectory path for the input files");\n                                    return;\n                                }\n\n                                break;\n                            }\n                        }\n\n                        // If the fileComponent path completely matched and less than already found update the length\n                        if (!updatedPath && fileComponents.length < commonComponentsLength) {\n                            commonComponentsLength = fileComponents.length;\n                        }\n                    }\n                }\n            }\n\n            this.emitSettings.commonDirectoryPath = commonComponents.slice(0, commonComponentsLength).join("/") + "/";\n            if (this.emitSettings.outputOption.charAt(this.emitSettings.outputOption.length - 1) != "/") {\n                this.emitSettings.outputOption += "/";\n            }\n        }\n\n        public parseEmitOption(ioHost: EmitterIOHost) {\n            this.emitSettings.ioHost = ioHost;\n            if (this.emitSettings.outputOption == "") {\n                this.emitSettings.outputMany = true;\n                this.emitSettings.commonDirectoryPath = "";\n                return;\n            }\n\n            this.emitSettings.outputOption = switchToForwardSlashes(this.emitSettings.ioHost.resolvePath(this.emitSettings.outputOption));\n\n            // Determine if output options is directory or file\n            if (this.emitSettings.ioHost.directoryExists(this.emitSettings.outputOption)) {\n                // Existing directory\n                this.emitSettings.outputMany = true;\n            } else if (this.emitSettings.ioHost.fileExists(this.emitSettings.outputOption)) {\n                // Existing file\n                this.emitSettings.outputMany = false;\n            }\n            else {\n                // New File/directory\n                this.emitSettings.outputMany = !isJSFile(this.emitSettings.outputOption);\n            }\n\n            // Verify if options are correct\n            if (this.isDynamicModuleCompilation() && !this.emitSettings.outputMany) {\n                this.errorReporter.emitterError(null, "Cannot compile dynamic modules when emitting into single file");\n            }\n\n            // Parse the directory structure\n            if (this.emitSettings.outputMany) {\n                this.updateCommonDirectoryPath();\n            }\n        }\n\n        public useUTF8ForFile(script: Script) {\n            if (this.emitSettings.outputMany) {\n                return this.outputScriptToUTF8(script);\n            } else {\n                return this.outputScriptsToUTF8(<Script[]>(this.scripts.members));\n            }\n        }\n\n        static mapToDTSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return getDeclareFilePath(fileName);\n        }\n\n        private canEmitDeclarations(script?: Script) {\n            if (!this.settings.generateDeclarationFiles) {\n                return false;\n            }\n\n            // If its already a declare file or is resident or does not contain body \n            if (!!script && (script.isDeclareFile || script.isResident || script.bod == null)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        public emitDeclarationsUnit(script: Script, reuseEmitter?: bool, declarationEmitter?: DeclarationEmitter) {\n            if (!this.canEmitDeclarations(script)) {\n                return null;\n            }\n\n            if (!declarationEmitter) {\n                var declareFileName = this.emitSettings.mapOutputFileName(script.locationInfo.filename, TypeScriptCompiler.mapToDTSFileName);\n                var declareFile = this.createFile(declareFileName, this.useUTF8ForFile(script));\n                declarationEmitter = new DeclarationEmitter(this.typeChecker, this.emitSettings, this.errorReporter);\n                declarationEmitter.setDeclarationFile(declareFile);\n            }\n\n            declarationEmitter.emitDeclarations(script);\n\n            if (!reuseEmitter) {\n                declarationEmitter.Close();\n                return null;\n            } else {';
var v27123 = v27124 + '\n                return declarationEmitter;\n            }\n        }\n\n        public emitDeclarations() {\n            if (!this.canEmitDeclarations()) {\n                return;\n            }\n\n            if (this.errorReporter.hasErrors) {\n                // There were errors reported, do not generate declaration file\n                return;\n            }\n\n            if (this.scripts.members.length == 0) {\n                return;\n            }\n\n            var declarationEmitter: DeclarationEmitter = null;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || declarationEmitter == null) {\n                    // Create or reuse file\n                    declarationEmitter = this.emitDeclarationsUnit(script, !this.emitSettings.outputMany);\n                } else {\n                    // Emit in existing emitter\n                    this.emitDeclarationsUnit(script, true, declarationEmitter);\n                }\n            }\n\n            if (declarationEmitter) {\n                declarationEmitter.Close();\n            }\n        }\n\n        static mapToFileNameExtension(extension: string, fileName: string, wholeFileNameReplaced: bool) {\n            if (wholeFileNameReplaced) {\n                // The complete output is redirected in this file so do not change extension\n                return fileName;\n            } else {\n                // Change the extension of the file\n                var splitFname = fileName.split(".");\n                splitFname.pop();\n                return splitFname.join(".") + extension;\n            }\n        }\n\n        static mapToJSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return TypeScriptCompiler.mapToFileNameExtension(".js", fileName, wholeFileNameReplaced);\n        }\n\n        public emitUnit(script: Script, reuseEmitter?: bool, emitter?: Emitter) {\n            if (!script.emitRequired(this.emitSettings)) {\n                return null;\n            }\n\n            var fname = script.locationInfo.filename;\n            if (!emitter) {\n                var outFname = this.emitSettings.mapOutputFileName(fname, TypeScriptCompiler.mapToJSFileName);\n                var outFile = this.createFile(outFname, this.useUTF8ForFile(script));\n                emitter = new Emitter(this.typeChecker, outFname, outFile, this.emitSettings, this.errorReporter);\n                if (this.settings.mapSourceFiles) {\n                    emitter.setSourceMappings(new TypeScript.SourceMapper(fname, outFname, outFile, this.createFile(outFname + SourceMapper.MapFileExtension, false), this.errorReporter));\n                }\n            } else if (this.settings.mapSourceFiles) {\n                emitter.setSourceMappings(new TypeScript.SourceMapper(fname, emitter.emittingFileName, emitter.outfile, emitter.sourceMapper.sourceMapOut, this.errorReporter));\n            }\n\n            this.typeChecker.locationInfo = script.locationInfo;\n            emitter.emitJavascript(script, TokenID.Comma, false);\n            if (!reuseEmitter) {\n                emitter.Close();\n                return null;\n            } else {\n                return emitter;\n            }\n        }\n\n        public emit(ioHost: EmitterIOHost) {\n            this.parseEmitOption(ioHost);\n\n            var emitter: Emitter = null;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || emitter == null) {\n                    emitter = this.emitUnit(script, !this.emitSettings.outputMany);\n                } else {\n                    this.emitUnit(script, true, emitter);\n                }\n            }\n\n            if (emitter) {\n                emitter.Close();\n            }\n        }\n\n        public emitToOutfile(outputFile: ITextWriter) {\n            if (this.settings.mapSourceFiles) {\n                throw Error("Cannot generate source map");\n            }\n\n            if (this.settings.generateDeclarationFiles) {\n                throw Error("Cannot generate declaration files");\n            }\n\n            if (this.settings.outputOption != "") {\n                throw Error("Cannot parse output option");\n            }\n\n            var emitter: Emitter = emitter = new Emitter(this.typeChecker, "stdout", outputFile, this.emitSettings, this.errorReporter);;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                this.typeChecker.locationInfo = script.locationInfo;\n                emitter.emitJavascript(script, TokenID.Comma, false);\n            }\n        }\n\n        public emitAST(ioHost: EmitterIOHost) {\n            this.parseEmitOption(ioHost);\n\n            var outFile: ITextWriter = null;\n            var context: PrintContext = null;\n\n            for (var i = 0, ';
var v27122 = v27123 + 'len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || context == null) {\n                    var fname = this.units[i].filename;\n                    var mapToTxtFileName = (fileName: string, wholeFileNameReplaced: bool) => {\n                        return TypeScriptCompiler.mapToFileNameExtension(".txt", fileName, wholeFileNameReplaced);\n                    };\n                    var outFname = this.emitSettings.mapOutputFileName(fname, mapToTxtFileName);\n                    outFile = this.createFile(outFname, this.useUTF8ForFile(script));\n                    context = new PrintContext(outFile, this.parser);\n                }\n                getAstWalkerFactory().walk(script, prePrintAST, postPrintAST, null, context);\n                if (this.emitSettings.outputMany) {\n                    try {\n                        outFile.Close();\n                    } catch (e) {\n                        this.errorReporter.emitterError(null, e.message);\n                    }\n                }\n            }\n\n            if (!this.emitSettings.outputMany) {\n                try {\n                    outFile.Close();\n                } catch (e) {\n                    this.errorReporter.emitterError(null, e.message);\n                }\n            }\n        }\n\n        private outputScriptToUTF8(script: Script): bool {\n            return script.containsUnicodeChar || (this.emitSettings.emitComments && script.containsUnicodeCharInComment);\n        }\n\n        private outputScriptsToUTF8(scripts: Script[]): bool {\n            for (var i = 0, len = scripts.length; i < len; i++) {\n                var script = scripts[i];\n                if (this.outputScriptToUTF8(script)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                // Creating files can cause exceptions, report them.   \n                return this.emitSettings.ioHost.createFile(fileName, useUTF8);\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n\n    export class ScopeEntry {\n        constructor (\n            public name: string,\n            public type: string,\n            public sym: Symbol) {\n        }\n    }\n\n    export class ScopeTraversal {\n        constructor (private compiler: TypeScriptCompiler) {\n        }\n\n        public getScope(enclosingScopeContext: EnclosingScopeContext): SymbolScope {\n            if (enclosingScopeContext.enclosingObjectLit && enclosingScopeContext.isMemberCompletion) {\n                return enclosingScopeContext.getObjectLiteralScope();\n            }\n            else if (enclosingScopeContext.isMemberCompletion) {\n                if (enclosingScopeContext.useFullAst) {\n                    return this.compiler.typeFlow.findMemberScopeAtFullAst(enclosingScopeContext)\n                }\n                else {\n                    return this.compiler.typeFlow.findMemberScopeAt(enclosingScopeContext)\n                }\n            }\n            else {\n                return enclosingScopeContext.getScope();\n            }\n        }\n\n        public getScopeEntries(enclosingScopeContext: EnclosingScopeContext): ScopeEntry[] {\n            var scope = this.getScope(enclosingScopeContext);\n            if (scope == null) {\n                return [];\n            }\n\n            var inScopeNames: IHashTable = new StringHashTable();\n            var allSymbolNames: string[] = scope.getAllSymbolNames(enclosingScopeContext.isMemberCompletion);\n\n            // there may be duplicates between the type and value tables, so batch the symbols\n            // getTypeNamesForNames will prefer the entry in the value table\n            for (var i = 0; i < allSymbolNames.length; i++) {\n                var name = allSymbolNames[i];\n\n                // Skip global/internal symbols that won\'t compile in user code\n                if (name == globalId || name == "_Core" || name == "_element") {\n                    continue;\n                }\n\n                inScopeNames.add(name, "");\n            }\n\n            var svModuleDecl = this.compiler.typeChecker.currentModDecl;\n            this.compiler.typeChecker.currentModDecl = enclosingScopeContext.deepestModuleDecl;\n\n            var result = this.getTypeNamesForNames(enclosingScopeContext, inScopeNames.getAllKeys(), scope);\n\n            this.compiler.typeChecker.currentModDecl = svModuleDecl;\n            return result;\n        }\n\n        private getTypeNamesForNames(enclosingScopeContext: EnclosingScopeContext, allNames: string[], scope: SymbolScope): ScopeEntry[] {\n            var result: ScopeEntry[] = [];\n\n            var enclosingScope = enclosingScopeContext.getScope();\n            for (var i = 0; i < allNames.length; i++) {\n                var name = allNames[i];\n                //';
var v27121 = v27122 + ' Search for the id in the value space first\n                // if we don\'t find it, search in the type space.\n                // We don\'t want to search twice, because the first\n                // search may insert the name in the symbol value table\n                // if the scope is aggregate\n                var publicsOnly = enclosingScopeContext.publicsOnly && enclosingScopeContext.isMemberCompletion;\n                var symbol = scope.find(name, publicsOnly, false/*typespace*/);  // REVIEW: Should search public members only?\n                if (symbol == null) {\n                    symbol = scope.find(name, publicsOnly, true/*typespace*/);\n                }\n\n                var displayThisMember = symbol && symbol.flags & SymbolFlags.Private ? symbol.container == scope.container : true;\n\n                if (symbol) {\n                    // Do not add dynamic module names to the list, since they\'re not legal as identifiers\n                    if (displayThisMember && !isQuoted(symbol.name) && !isRelative(symbol.name)) {\n                        var typeName = symbol.getType().getScopedTypeName(enclosingScope);\n                        result.push(new ScopeEntry(name, typeName, symbol));\n                    }\n                }\n                else {\n                    // Special case for "true" and "false"\n                    // REVIEW: This may no longer be necessary?\n                    if (name == "true" || name == "false") {\n                        result.push(new ScopeEntry(name, "bool", this.compiler.typeChecker.booleanType.symbol));\n                    }\n                }\n            }\n\n            return result;\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum Primitive {\n        None = 0,\n        Void = 1,\n        Double = 2,\n        String = 4,\n        Boolean = 8,\n        Any = 16,\n        Null = 32,\n        Undefined = 64,\n    }\n\n    export class MemberName {\n        public prefix: string = "";\n        public suffix: string = "";\n\n        public isString() { return false; }\n        public isArray() { return false; }\n\n        public toString(): string {\n            return MemberName.memberNameToString(this);\n        }\n\n        static memberNameToString(memberName: MemberName): string {\n            var result = memberName.prefix;\n\n            if (memberName.isString()) {\n                result += (<MemberNameString>memberName).text;\n            }\n            else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    result += memberNameToString(ar.entries[index]);\n                    result += ar.delim;\n                }\n            }\n\n            result += memberName.suffix;\n            return result;\n        }\n\n        static create(text: string): MemberName;\n        static create(entry: MemberName, prefix: string, suffix: string): MemberName;\n        static create(arg1: any, arg2?: any, arg3?: any): MemberName {\n            if (typeof arg1 == "string") {\n                return new MemberNameString(arg1);\n            }\n            else {\n                var result = new MemberNameArray();\n                if (arg2)\n                    result.prefix = arg2;\n                if (arg3)\n                    result.suffix = arg3;\n                result.entries.push(arg1);\n                return result;\n            }\n        }\n    }\n\n    export class MemberNameString extends MemberName {\n        constructor (public text: string) {\n            super()\n        }\n\n        public isString() { return true; }\n    }\n\n    export class MemberNameArray extends MemberName {\n        public delim: string = "";\n        public entries: MemberName[] = [];\n\n        public isArray() { return true; }\n\n        public add(entry: MemberName) {\n            this.entries.push(entry);\n        }\n\n        public addAll(entries: MemberName[]) {\n            for (var i = 0 ; i < entries.length; i++) {\n                this.entries.push(entries[i]);\n            }\n        }\n    }\n\n    var currentTypeID = -1;\n\n    export class Type {\n        public typeID = currentTypeID++;\n\n        public members: ScopedMembers;\n        public ambientMembers: ScopedMembers;\n\n        public construct: SignatureGroup = null;\n        public call: SignatureGroup = null;\n        public index: SignatureGroup =';
var v27120 = v27121 + ' null;\n\n        // REVIEW: for either of the below, why do we have lists of types and lists of type links?\n        // interface can only extend\n        public extendsList: Type[];\n        public extendsTypeLinks: TypeLink[];\n\n        // class can also implement\n        public implementsList: Type[];\n        public implementsTypeLinks: TypeLink[];\n\n        public passTypeCreated: number = CompilerDiagnostics.analysisPass;\n\n        public baseClass(): Type {\n            if (this.extendsList && (this.extendsList.length > 0)) {\n                return this.extendsList[0];\n            }\n            else {\n                return null;\n            }\n        }\n\n        public elementType: Type;\n\n        public getArrayBase(arrInstType: Type, checker: TypeChecker): Type {\n            return this.arrayCache.specialize(arrInstType, checker);\n        }\n\n        public primitiveTypeClass: number = Primitive.None;\n\n        // REVIEW: Prune constructorScope\n        public constructorScope: SymbolScope;\n        public containedScope: SymbolScope;\n        public memberScope: SymbolScope;\n\n        public arrayCache: ArrayCache;\n\n        public typeFlags = TypeFlags.None;\n\n        public symbol: TypeSymbol;\n\n        public enclosingType: Type;\n        public instanceType: Type;\n\n        // REVIEW: Prune\n        public isClass() { return this.instanceType != null; }\n        public isArray() { return this.elementType != null; }\n        public isClassInstance() {\n            return this.symbol && !this.elementType && (<TypeSymbol>this.symbol).type.isClass();\n        }\n\n        public getInstanceType() {\n            if (this.isClass()) {\n                return this.instanceType;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public hasImplementation() { return hasFlag(this.typeFlags, TypeFlags.HasImplementation); }\n        public setHasImplementation() { this.typeFlags |= TypeFlags.HasImplementation; }\n\n        public isDouble() { return hasFlag(this.primitiveTypeClass, Primitive.Double); }\n        public isString() { return hasFlag(this.primitiveTypeClass, Primitive.String); }\n        public isBoolean() { return hasFlag(this.primitiveTypeClass, Primitive.Boolean); }\n        public isNull() { return hasFlag(this.primitiveTypeClass, Primitive.Null); }\n\n        // REVIEW: No need for this to be a method\n        public getTypeName(): string {\n            return this.getMemberTypeName("", true, false, null);\n        }\n\n        public getScopedTypeName(scope: SymbolScope) {\n            return this.getMemberTypeName("", true, false, scope);\n        }\n\n        public getScopedTypeNameEx(scope: SymbolScope) {\n            return this.getMemberTypeNameEx("", true, false, scope);\n        }\n\n        // REVIEW: No need for this to be a method\n        public callCount() {\n            var total = 0;\n            if (this.call) {\n                total += this.call.signatures.length;\n            }\n            if (this.construct) {\n                total += this.construct.signatures.length;\n            }\n            if (this.index) {\n                total += this.index.signatures.length;\n            }\n            return total;\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeName(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope): string {\n            var memberName = this.getMemberTypeNameEx(prefix, topLevel, isElementType, scope);\n            return memberName.toString();\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeNameEx(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope): MemberName {\n            if (this.elementType) {\n                return MemberName.create(this.elementType.getMemberTypeNameEx(prefix, false, true, scope), "", "[]");\n            }\n            else if (this.symbol && this.symbol.name && this.symbol.name != "_anonymous" &&\n                     (((this.call == null) && (this.construct == null) && (this.index == null)) ||\n                      (hasFlag(this.typeFlags, TypeFlags.BuildingName)) ||\n                      (this.members && (!this.isClass())))) {\n                var tn = this.symbol.scopeRelativeName(scope);\n                return MemberName.create(tn == "null" ? "any" : tn); // REVIEW: GROSS!!!\n            }\n            else {\n                if (this.members || this.call || this.construct) {\n                    if (hasFlag(this.typeFlags, TypeFlags.BuildingName)) {\n                        return MemberName.create("this");\n                    }\n                    this.typeFlags |= TypeFlags.BuildingName;\n                    var builder = "";\n                    var allMemberNames = new MemberNameArray();\n                    var curlies = isElementType || this.index != null;\n                    var memCount = 0;\n                    var delim = "; ";\n                    if (this.members) {\n                        this.members.allMembers.map((key, ';
var v27119 = v27120 + 's, unused) => {\n                            var sym = <Symbol>s;\n                            if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                                // Remove the delimiter character from the generated type name, since\n                                // our "allMemberNames" array takes care of storing delimiters\n                                var typeNameMember = sym.getTypeNameEx(scope);\n                                if (typeNameMember.isArray() && (<MemberNameArray>typeNameMember).delim == delim) {\n                                    allMemberNames.addAll((<MemberNameArray>typeNameMember).entries);\n                                } else {\n                                    allMemberNames.add(typeNameMember);\n                                }\n                                memCount++;\n                                curlies = true;\n                            }\n                        }, null);\n                    }\n\n                    var signatureCount = this.callCount();\n                    var j: number;\n                    var len = 0;\n                    var shortform = !curlies && signatureCount == 1 && topLevel;\n                    if (this.call) {\n                        allMemberNames.addAll(this.call.toStrings(prefix, shortform, scope));\n                    }\n\n                    if (this.construct) {\n                        allMemberNames.addAll(this.construct.toStrings("new", shortform, scope));\n                    }\n\n                    if (this.index) {\n                        allMemberNames.addAll(this.index.toStrings("", shortform, scope));\n                    }\n\n                    if ((curlies) || ((signatureCount > 1) && topLevel)) {\n                        allMemberNames.prefix = "{ ";\n                        allMemberNames.suffix = "}";\n                        allMemberNames.delim = delim;\n                    } else if (allMemberNames.entries.length > 1) {\n                        allMemberNames.delim = delim;\n                    }\n\n                    this.typeFlags &= (~TypeFlags.BuildingName);\n                    if ((signatureCount == 0) && (memCount == 0)) {\n                        return MemberName.create("{}");\n                    }\n                    else {\n                        return allMemberNames;\n                    }\n                }\n                else {\n                    return MemberName.create("{}");\n                }\n            }\n        }\n\n        public checkDecl(checker: TypeChecker) {\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST) {\n                    checker.typeFlow.inScopeTypeCheckDecl(this.symbol.declAST);\n                }\n            }\n        }\n\n        public getMemberScope(flow: TypeFlow) {\n            if (this == flow.anyType) {\n                return null;\n            }\n            else if (this.isDouble()) {\n                if (flow.numberInterfaceType) {\n                    return flow.numberInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.isBoolean()) {\n                if (flow.booleanInterfaceType) {\n                    return flow.booleanInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this == flow.stringType) {\n                if (flow.stringInterfaceType) {\n                    return flow.stringInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.elementType) {\n                if (flow.arrayInterfaceType) {\n                    var arrInstType = this.elementType.getArrayBase(flow.arrayInterfaceType, flow.checker);\n                    return arrInstType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return this.memberScope;\n            }\n        }\n\n        public isReferenceType() {\n            return this.members || this.extendsList ||\n                this.construct || this.call || this.index ||\n                this.elementType;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker, membersOnly: bool): Type {\n            if (pattern == this) {\n                return replacement;\n            }\n            var result = this;\n            if (membersOnly) {\n                // assume interface type without bases\n                if (this.isReferenceType()) {\n                    result = new Type();\n                    if (this.members) {\n                        result.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                        this.members.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n         ';
var v27118 = v27119 + "                   var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.members.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    if (this.ambientMembers) {\n                        result.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                        this.ambientMembers.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.ambientMembers.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    result.containedScope = checker.scopeOf(result);\n                    result.memberScope = result.containedScope;\n                }\n            }\n            else {\n                if (this.elementType) {\n                    if (this.elementType == pattern) {\n                        result = checker.makeArrayType(replacement);\n                    }\n                    else {\n                        if (this.elementType.elementType == pattern) {\n                            result = checker.makeArrayType(checker.makeArrayType(replacement));\n                        }\n                    }\n                }\n                else if (this.call) {\n                    result = new Type();\n                    result.call = this.call.specializeType(pattern, replacement, checker);\n                }\n            }\n            return result;\n        }\n\n        public hasBase(baseType: Type): bool {\n            if (baseType == this) {\n                return true;\n            }\n            else {\n                if (this.extendsList) {\n                    for (var i = 0, len = this.extendsList.length; i < len; i++) {\n                        if (this.extendsList[i].hasBase(baseType)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public mergeOrdered(b: Type, checker: TypeChecker, acceptVoid: bool, comparisonInfo?: TypeComparisonInfo): Type {\n            if ((this == checker.anyType) || (b == checker.anyType)) {\n                return checker.anyType;\n            }\n            else if (this == b) {\n                return this;\n            }\n            else if ((b == checker.nullType) && this != checker.nullType) {\n                return this;\n            }\n            else if ((this == checker.nullType) && (b != checker.nullType)) {\n                return b;\n            }\n            else if (acceptVoid && (b == checker.voidType) && this != checker.voidType) {\n                return this;\n            }\n            else if (acceptVoid && (this == checker.voidType) && (b != checker.voidType)) {\n                return b;\n            }\n            else if ((b == checker.undefinedType) && this != checker.undefinedType) {\n                return this;\n            }\n            else if ((this == checker.undefinedType) && (b != checker.undefinedType)) {\n                return b;\n            }\n            else if (this.elementType && b.elementType) {\n                if (this.elementType == b.elementType) {\n                    return this;\n                }\n                else {\n                    var mergedET = this.elementType.mergeOrdered(b.elementType, checker, acceptVoid, comparisonInfo);\n                    if (mergedET == null) {\n                        return checker.makeArrayType(checker.anyType);\n                    }\n                    else {\n                        return checker.makeArrayType(mergedET);\n                    }\n                }\n            }\n            else if (checker.sourceIsSubtypeOfTarget(this, b, comparisonInfo)) {\n                return b;\n            }\n            else if (checker.sourceIsSubtypeOfTarget(b, this, comparisonInfo)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public isModuleType() { return false; }\n        public hasMembers() { return this.members != null; }\n        public getAllEnclosedTypes(): ScopedMembers { return null; }\n        public getAllAmbientEnc";
var v27117 = v27118 + 'losedTypes(): ScopedMembers { return null; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n\n        public getDocComments(): Comment[]{\n            if (this.elementType || !this.symbol) {\n                return [];\n            }\n\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST.nodeType == NodeType.FuncDecl) {\n                    // Its a constructor - use the class declaration instead\n                    return (<FuncDecl>this.symbol.declAST).classDecl.getDocComments();\n                } else {\n                    // Its a class without constructor\n                    return this.symbol.getDocComments();\n                }\n            }\n\n            if (this.symbol.name && this.symbol.name != "_anonymous" &&\n                (((this.call == null) && (this.construct == null) && (this.index == null))\n                  || this.members)) {\n                return this.symbol.getDocComments();\n            }\n\n            return [];\n        }\n    }\n\n    export interface ITypeCollection {\n        // returns null when types are exhausted\n        getLength(): number;\n        setTypeAtIndex(index: number, type: Type): void;\n        getTypeAtIndex(index: number): Type;\n    }\n\n    export class ModuleType extends Type {\n\n        constructor (public enclosedTypes: ScopedMembers, public ambientEnclosedTypes: ScopedMembers) {\n            super();\n        }\n\n        public isModuleType() { return true; }\n        public hasMembers() { return this.members != null || this.enclosedTypes != null; }\n        public getAllEnclosedTypes() { return this.enclosedTypes; }\n        public getAllAmbientEnclosedTypes() { return this.ambientEnclosedTypes; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n        public importedModules: ImportDeclaration[] = [];\n\n        // Finds the dynamic module name of moduleType in the members\n        // ignoreSymbols define list of symbols already visited - to avoid recursion\n        static findDynamicModuleNameInHashTable(moduleType: Type, members: IHashTable) {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            members.map((key, s, c) => {\n                if (moduleName == null && !isQuoted(key)) {\n                    var symbol = <Symbol>s;\n                    var type = symbol.getType();\n                    if (type == moduleType) {\n                        // If this is the module type we were looking for\n                        moduleName = { name: key, symbol: symbol };\n                    }\n                }\n            }, null);\n\n            return moduleName;\n        }\n\n        // Finds the Dynamic module name of the moduleType in this moduleType\n        // onlyPublic tells if we are looking for module name in public members only\n        public findDynamicModuleName(moduleType: Type): { name: string; symbol: Symbol; } {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            // Not cached, so seach and add to the cache\n            moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.members.allMembers);\n            if (moduleName == null) {\n                moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.ambientMembers.allMembers);\n            }\n            return moduleName;\n        }\n    }\n\n    export class TypeLink {\n        public type: Type = null;\n        public ast: AST = null;\n    }\n\n    export function getTypeLink(ast: AST, checker: TypeChecker, autoVar: bool): TypeLink {\n        var result = new TypeLink();\n\n        result.ast = ast;\n\n        if ((ast == null) && (autoVar)) {\n            result.type = checker.anyType;\n        }\n        else {\n            result.type = null;\n        }\n\n        return result;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule Tools {\n    export interface IWalkContext {\n        goChildren: bool;\n        goNextSibling: bool;\n        // visit siblings in reverse execution order\n        reverseSiblings: bool;\n    }\n\n    export class BaseWalkContext implements IWalkContext {\n        public goChildren = true;\n        public goNextSibling = true;\n        public reverseSiblings = false;\n    }\n}';
var compiler_input = v27117;
var TypeScript;
var v18603 = TypeScript;
var v22751 = !v18603;
if (v22751) {
  v18603 = TypeScript = {};
}
var v12345 = v18603;
v48(v12345);
var v18604 = TypeScript;
var v22752 = !v18604;
if (v22752) {
  v18604 = TypeScript = {};
}
var v12346 = v18604;
v49(v12346);
var v18605 = TypeScript;
var v22753 = !v18605;
if (v22753) {
  v18605 = TypeScript = {};
}
var v12347 = v18605;
v78(v12347);
var v12348 = this.__extends;
var v18606 = !v12348;
if (v18606) {
  v12348 = v79;
}
var __extends = v12348;
var v18607 = TypeScript;
var v22754 = !v18607;
if (v22754) {
  v18607 = TypeScript = {};
}
var v12349 = v18607;
v322(v12349);
var v18608 = TypeScript;
var v22755 = !v18608;
if (v22755) {
  v18608 = TypeScript = {};
}
var v12350 = v18608;
v333(v12350);
var v18609 = TypeScript;
var v22756 = !v18609;
if (v22756) {
  v18609 = TypeScript = {};
}
var v12351 = v18609;
v335(v12351);
var v18610 = TypeScript;
var v22757 = !v18610;
if (v22757) {
  v18610 = TypeScript = {};
}
var v12352 = v18610;
v399(v12352);
var v18611 = TypeScript;
var v22758 = !v18611;
if (v22758) {
  v18611 = TypeScript = {};
}
var v12353 = v18611;
v407(v12353);
var v18612 = TypeScript;
var v22759 = !v18612;
if (v22759) {
  v18612 = TypeScript = {};
}
var v12354 = v18612;
v417(v12354);
var v18613 = TypeScript;
var v22760 = !v18613;
if (v22760) {
  v18613 = TypeScript = {};
}
var v12355 = v18613;
v420(v12355);
var JSON2 = {};
v427();
var v18614 = TypeScript;
var v22761 = !v18614;
if (v22761) {
  v18614 = TypeScript = {};
}
var v12356 = v18614;
v433(v12356);
var v18615 = TypeScript;
var v22762 = !v18615;
if (v22762) {
  v18615 = TypeScript = {};
}
var v12357 = v18615;
v492(v12357);
var v18616 = TypeScript;
var v22763 = !v18616;
if (v22763) {
  v18616 = TypeScript = {};
}
var v12358 = v18616;
v519(v12358);
var v18617 = TypeScript;
var v22764 = !v18617;
if (v22764) {
  v18617 = TypeScript = {};
}
var v12359 = v18617;
v592(v12359);
var v18618 = TypeScript;
var v22765 = !v18618;
if (v22765) {
  v18618 = TypeScript = {};
}
var v12360 = v18618;
v599(v12360);
var v18619 = TypeScript;
var v22766 = !v18619;
if (v22766) {
  v18619 = TypeScript = {};
}
var v12361 = v18619;
v675(v12361);
var v18620 = TypeScript;
var v22767 = !v18620;
if (v22767) {
  v18620 = TypeScript = {};
}
var v12362 = v18620;
v680(v12362);
var v18621 = TypeScript;
var v22768 = !v18621;
if (v22768) {
  v18621 = TypeScript = {};
}
var v12363 = v18621;
v698(v12363);
var v18622 = TypeScript;
var v22769 = !v18622;
if (v22769) {
  v18622 = TypeScript = {};
}
var v12364 = v18622;
v711(v12364);
var v18623 = TypeScript;
var v22770 = !v18623;
if (v22770) {
  v18623 = TypeScript = {};
}
var v12365 = v18623;
v794(v12365);
var v18624 = TypeScript;
var v22771 = !v18624;
if (v22771) {
  v18624 = TypeScript = {};
}
var v12366 = v18624;
v862(v12366);
var v18625 = TypeScript;
var v22772 = !v18625;
if (v22772) {
  v18625 = TypeScript = {};
}
var v12367 = v18625;
v892(v12367);
var v18626 = TypeScript;
var v22773 = !v18626;
if (v22773) {
  v18626 = TypeScript = {};
}
var v12368 = v18626;
v964(v12368);
var v18627 = TypeScript;
var v22774 = !v18627;
if (v22774) {
  v18627 = TypeScript = {};
}
var v12369 = v18627;
v967(v12369);
var v18628 = TypeScript;
var v22775 = !v18628;
if (v22775) {
  v18628 = TypeScript = {};
}
var v12370 = v18628;
v1113(v12370);
var v18629 = TypeScript;
var v22776 = !v18629;
if (v22776) {
  v18629 = TypeScript = {};
}
var v12371 = v18629;
v1172(v12371);
var v18630 = TypeScript;
var v22777 = !v18630;
if (v22777) {
  v18630 = TypeScript = {};
}
var v12372 = v18630;
v1173(v12372);
var v18631 = TypeScript;
var v22778 = !v18631;
if (v22778) {
  v18631 = TypeScript = {};
}
var v12373 = v18631;
v1180(v12373);
var v18632 = TypeScript;
var v22779 = !v18632;
if (v22779) {
  v18632 = TypeScript = {};
}
var v12374 = v18632;
v1186(v12374);
var v18633 = TypeScript;
var v22780 = !v18633;
if (v22780) {
  v18633 = TypeScript = {};
}
var v12375 = v18633;
v1195(v12375);
var v18634 = TypeScript;
var v22781 = !v18634;
if (v22781) {
  v18634 = TypeScript = {};
}
var v12376 = v18634;
v1233(v12376);
var v18635 = TypeScript;
var v22782 = !v18635;
if (v22782) {
  v18635 = TypeScript = {};
}
var v12377 = v18635;
v1288(v12377);
var v18636 = TypeScript;
var v22783 = !v18636;
if (v22783) {
  v18636 = TypeScript = {};
}
var v12378 = v18636;
v1311(v12378);
var IOUtils;
var v18637 = IOUtils;
var v22784 = !v18637;
if (v22784) {
  v18637 = IOUtils = {};
}
var v12379 = v18637;
v1312(v12379);
var IO = v1357();
var OptionsParser = v1365();
var CommandLineHost = v1370();
var BatchCompiler = v1409();
var completed = 0;
var benchmarks = BenchmarkSuite.CountBenchmarks();
var success = true;
var latencyBenchmarks = ["Splay", "Mandreel"];
var v12380;
var v22785 = typeof skipBenchmarks;
var v18638 = v22785 === "undefined";
if (v18638) {
  v12380 = [];
} else {
  v12380 = skipBenchmarks;
}
var skipBenchmarks = v12380

JAM.stopProfile('load');
